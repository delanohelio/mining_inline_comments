{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NzE2ODQ3", "number": 1859, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoyODo0MlrODZKd2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzoxMjo0MVrODZNJRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzEyNDc0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoyODo0MlrOFfZ0WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoyOToyOFrOFfZ17w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3MzE3Ng==", "bodyText": "I'd prefer not to depend on Guava for tests, you can rewrite this easily using IntStream.range(). Also it's not clear why you're asserting itemsPerSecond - 1 or itemsPerSecond + 1, maybe the test should be rewritten completely in a more deterministic way.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368473176", "createdAt": "2020-01-20T10:28:42Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -75,9 +76,11 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n          .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+             Range<Integer> range = Range.closed(itemsPerSecond - 1, itemsPerSecond + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b5395bfa75ea9c477470cab616454fe35ee950"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3MzU4Mw==", "bodyText": "Ok", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368473583", "createdAt": "2020-01-20T10:29:28Z", "author": {"login": "jbartok"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -75,9 +76,11 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n          .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+             Range<Integer> range = Range.closed(itemsPerSecond - 1, itemsPerSecond + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3MzE3Ng=="}, "originalCommit": {"oid": "14b5395bfa75ea9c477470cab616454fe35ee950"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzU1NTIzOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzowOToyOVrOFfd0pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDo0Nzo0N1rOFfgqCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODc4OQ==", "bodyText": "this will throw IllegalArgumentException because you can get a negative number here", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368538789", "createdAt": "2020-01-20T13:09:29Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -74,10 +74,24 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .withNativeTimestamps(0)\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n-         .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+         .apply(assertCollectedEventually(60, windowResults -> {\n+             //look at last 5 windows at most\n+             int windowsToConsider = Math.min(5, windowResults.size());\n+\n+             //count the total no. of items emitted in those windows\n+             int totalItems = windowResults.stream()\n+                     .skip(windowResults.size() - windowsToConsider)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5aee782adeca3306e00b60c827900e171c614e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4MDE3Mg==", "bodyText": "I don't see how I could get a negative number there, until windowsToConsider = Math.min(5, windowResults.size()).", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368580172", "createdAt": "2020-01-20T14:38:00Z", "author": {"login": "jbartok"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -74,10 +74,24 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .withNativeTimestamps(0)\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n-         .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+         .apply(assertCollectedEventually(60, windowResults -> {\n+             //look at last 5 windows at most\n+             int windowsToConsider = Math.min(5, windowResults.size());\n+\n+             //count the total no. of items emitted in those windows\n+             int totalItems = windowResults.stream()\n+                     .skip(windowResults.size() - windowsToConsider)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODc4OQ=="}, "originalCommit": {"oid": "4d5aee782adeca3306e00b60c827900e171c614e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NTIyNQ==", "bodyText": "yes, you are right, my bad", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368585225", "createdAt": "2020-01-20T14:47:47Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -74,10 +74,24 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .withNativeTimestamps(0)\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n-         .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+         .apply(assertCollectedEventually(60, windowResults -> {\n+             //look at last 5 windows at most\n+             int windowsToConsider = Math.min(5, windowResults.size());\n+\n+             //count the total no. of items emitted in those windows\n+             int totalItems = windowResults.stream()\n+                     .skip(windowResults.size() - windowsToConsider)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODc4OQ=="}, "originalCommit": {"oid": "4d5aee782adeca3306e00b60c827900e171c614e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzU2MzU4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzoxMjo0MVrOFfd5sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNTowNzo1NVrOFfhRAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDA4MA==", "bodyText": "now if there is just 1 window and it has 9 items, the test will pass. That's not a very strong assertion.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368540080", "createdAt": "2020-01-20T13:12:41Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -74,10 +74,24 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .withNativeTimestamps(0)\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n-         .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+         .apply(assertCollectedEventually(60, windowResults -> {\n+             //look at last 5 windows at most\n+             int windowsToConsider = Math.min(5, windowResults.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5aee782adeca3306e00b60c827900e171c614e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4MTE4MA==", "bodyText": "If there is 1 window with 9 items, then deviationFromTarget = 1, which is not smaller than the allowed tolerance of 0.1, so it won't pass, but wait for more windows.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368581180", "createdAt": "2020-01-20T14:39:57Z", "author": {"login": "jbartok"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -74,10 +74,24 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .withNativeTimestamps(0)\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n-         .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+         .apply(assertCollectedEventually(60, windowResults -> {\n+             //look at last 5 windows at most\n+             int windowsToConsider = Math.min(5, windowResults.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDA4MA=="}, "originalCommit": {"oid": "4d5aee782adeca3306e00b60c827900e171c614e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NTU3OA==", "bodyText": "ok, again I read it thinking it was a percentage, but it's actually an absolute value.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368585578", "createdAt": "2020-01-20T14:48:30Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -74,10 +74,24 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .withNativeTimestamps(0)\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n-         .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+         .apply(assertCollectedEventually(60, windowResults -> {\n+             //look at last 5 windows at most\n+             int windowsToConsider = Math.min(5, windowResults.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDA4MA=="}, "originalCommit": {"oid": "4d5aee782adeca3306e00b60c827900e171c614e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NTk3OA==", "bodyText": "how long does the test take to pass?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368585978", "createdAt": "2020-01-20T14:49:16Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -74,10 +74,24 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .withNativeTimestamps(0)\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n-         .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+         .apply(assertCollectedEventually(60, windowResults -> {\n+             //look at last 5 windows at most\n+             int windowsToConsider = Math.min(5, windowResults.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDA4MA=="}, "originalCommit": {"oid": "4d5aee782adeca3306e00b60c827900e171c614e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4ODM2OQ==", "bodyText": "On my machine it always takes 5 seconds to pass, but unfortunately it's not the test that's bad, but the first window always has way less values than it should, usually at most 7, instead of 10.\nAnd that usually only in the \"member\" mode, the subsequent \"client\" mode is better, usually starts with a 9.\nFeels like a warmup, but I'm not sure what it is. Looking at it.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368588369", "createdAt": "2020-01-20T14:54:04Z", "author": {"login": "jbartok"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -74,10 +74,24 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .withNativeTimestamps(0)\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n-         .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+         .apply(assertCollectedEventually(60, windowResults -> {\n+             //look at last 5 windows at most\n+             int windowsToConsider = Math.min(5, windowResults.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDA4MA=="}, "originalCommit": {"oid": "4d5aee782adeca3306e00b60c827900e171c614e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5MjE3MA==", "bodyText": "how about we always skip the first window?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368592170", "createdAt": "2020-01-20T15:01:36Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -74,10 +74,24 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .withNativeTimestamps(0)\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n-         .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+         .apply(assertCollectedEventually(60, windowResults -> {\n+             //look at last 5 windows at most\n+             int windowsToConsider = Math.min(5, windowResults.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDA4MA=="}, "originalCommit": {"oid": "4d5aee782adeca3306e00b60c827900e171c614e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NTIwMQ==", "bodyText": "Good idea, pushed that version, much better.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1859#discussion_r368595201", "createdAt": "2020-01-20T15:07:55Z", "author": {"login": "jbartok"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/test/TestSourcesTest.java", "diffHunk": "@@ -74,10 +74,24 @@ public void test_itemStream_withWindowing() throws Throwable {\n          .withNativeTimestamps(0)\n          .window(WindowDefinition.tumbling(1000))\n          .aggregate(AggregateOperations.counting())\n-         .apply(assertCollectedEventually(10, windowResults -> {\n-             // find any window that has 10 items, some may be incomplete due to hiccups\n-             boolean matched = windowResults.stream().anyMatch(r -> r.result() == itemsPerSecond);\n-             assertTrue(\"Did not find any window with 10 items: \" + windowResults, matched);\n+         .apply(assertCollectedEventually(60, windowResults -> {\n+             //look at last 5 windows at most\n+             int windowsToConsider = Math.min(5, windowResults.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDA4MA=="}, "originalCommit": {"oid": "4d5aee782adeca3306e00b60c827900e171c614e"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4919, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}