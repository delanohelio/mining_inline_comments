{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzIzODAz", "number": 2096, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODozNTowN1rODriifQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODozNTowN1rODriifQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTgxMjQ1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODozNTowN1rOF78HLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOToyMDo0M1rOF79wig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM5NTE4MA==", "bodyText": "I think it would be good to point to Processor.isCooperative() javadoc. The cooperative contract is explained there in more detail.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2096#discussion_r398395180", "createdAt": "2020-03-26T08:35:07Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -98,6 +98,17 @@ private ServiceFactories() { }\n      * A variant of {@link #sharedService(FunctionEx, ConsumerEx)\n      * sharedService(createFn, destroyFn)} with a no-op {@code\n      * destroyFn}.\n+     * <p>\n+     * <strong>Note:</strong> if your service has a blocking API (e.g., doing\n+     * synchronous IO or acquiring locks), you must call {@link\n+     * ServiceFactory#toNonCooperative()} as a hint to the Jet execution engine\n+     * to start a dedicated thread for those calls. Failing to do this can\n+     * cause severe performance problems. You should also carefully consider\n+     * how much local parallelism you need for this step since each parallel\n+     * tasklet needs its own thread. Call {@code GeneralStage#setLocalParallelism\n+     * stage.setLocalParallelism()} to set an explicit level, otherwise it will\n+     * depend on the number of cores on the Jet machine, which makes no sense\n+     * for blocking code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62c1c7f5eba7467a78d2496c0e4b844c218dc001"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyMjE1NA==", "bodyText": "ServiceFactory#toNonCooperative leads to there already.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2096#discussion_r398422154", "createdAt": "2020-03-26T09:20:43Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -98,6 +98,17 @@ private ServiceFactories() { }\n      * A variant of {@link #sharedService(FunctionEx, ConsumerEx)\n      * sharedService(createFn, destroyFn)} with a no-op {@code\n      * destroyFn}.\n+     * <p>\n+     * <strong>Note:</strong> if your service has a blocking API (e.g., doing\n+     * synchronous IO or acquiring locks), you must call {@link\n+     * ServiceFactory#toNonCooperative()} as a hint to the Jet execution engine\n+     * to start a dedicated thread for those calls. Failing to do this can\n+     * cause severe performance problems. You should also carefully consider\n+     * how much local parallelism you need for this step since each parallel\n+     * tasklet needs its own thread. Call {@code GeneralStage#setLocalParallelism\n+     * stage.setLocalParallelism()} to set an explicit level, otherwise it will\n+     * depend on the number of cores on the Jet machine, which makes no sense\n+     * for blocking code.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM5NTE4MA=="}, "originalCommit": {"oid": "62c1c7f5eba7467a78d2496c0e4b844c218dc001"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4756, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}