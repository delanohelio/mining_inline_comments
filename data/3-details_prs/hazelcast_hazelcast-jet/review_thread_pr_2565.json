{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMTE4OTYz", "number": 2565, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODo1NzoxMVrOEn_D7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODo1NzoxMVrOEn_D7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzYzMTE3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConcurrentInboundEdgeStream.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODo1NzoxMVrOHY0foA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDozOTozMVrOHY4CMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzkzNg==", "bodyText": "We prevent subclassing of an abstract class? I think we can remove the abstract modifier. This class became a utility class with a few implementations of InboundEdgeStream in it.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2565#discussion_r495787936", "createdAt": "2020-09-28T08:57:11Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConcurrentInboundEdgeStream.java", "diffHunk": "@@ -44,12 +44,17 @@\n import static com.hazelcast.jet.impl.util.Util.toLocalTime;\n \n /**\n- * {@link InboundEdgeStream} implemented in terms of a {@link ConcurrentConveyor}.\n- * The conveyor has as many 1-to-1 concurrent queues as there are upstream tasklets\n- * contributing to it.\n+ * This non-instantiable class contains implementations of {@link\n+ * InboundEdgeStream} in terms of a {@link ConcurrentConveyor}. The\n+ * conveyor has as many 1-to-1 concurrent queues as there are upstream\n+ * tasklets contributing to it.\n  */\n public abstract class ConcurrentInboundEdgeStream {\n \n+    // Prevent subclassing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a84b38fd582994e3c178b90b11ae37ffde33dc5c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgzOTMwOQ==", "bodyText": "The class is nothing but a namespace holder, therefore it should be non-instantiable and non-subclassable. You can achieve it with either abstract or final in combination with a private nullary constructor. It was abstract before my review so I left it, but i guess final is more conventional.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2565#discussion_r495839309", "createdAt": "2020-09-28T10:26:35Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConcurrentInboundEdgeStream.java", "diffHunk": "@@ -44,12 +44,17 @@\n import static com.hazelcast.jet.impl.util.Util.toLocalTime;\n \n /**\n- * {@link InboundEdgeStream} implemented in terms of a {@link ConcurrentConveyor}.\n- * The conveyor has as many 1-to-1 concurrent queues as there are upstream tasklets\n- * contributing to it.\n+ * This non-instantiable class contains implementations of {@link\n+ * InboundEdgeStream} in terms of a {@link ConcurrentConveyor}. The\n+ * conveyor has as many 1-to-1 concurrent queues as there are upstream\n+ * tasklets contributing to it.\n  */\n public abstract class ConcurrentInboundEdgeStream {\n \n+    // Prevent subclassing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzkzNg=="}, "originalCommit": {"oid": "a84b38fd582994e3c178b90b11ae37ffde33dc5c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0NTkzNw==", "bodyText": "Sure, it's just style...", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2565#discussion_r495845937", "createdAt": "2020-09-28T10:39:31Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ConcurrentInboundEdgeStream.java", "diffHunk": "@@ -44,12 +44,17 @@\n import static com.hazelcast.jet.impl.util.Util.toLocalTime;\n \n /**\n- * {@link InboundEdgeStream} implemented in terms of a {@link ConcurrentConveyor}.\n- * The conveyor has as many 1-to-1 concurrent queues as there are upstream tasklets\n- * contributing to it.\n+ * This non-instantiable class contains implementations of {@link\n+ * InboundEdgeStream} in terms of a {@link ConcurrentConveyor}. The\n+ * conveyor has as many 1-to-1 concurrent queues as there are upstream\n+ * tasklets contributing to it.\n  */\n public abstract class ConcurrentInboundEdgeStream {\n \n+    // Prevent subclassing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzkzNg=="}, "originalCommit": {"oid": "a84b38fd582994e3c178b90b11ae37ffde33dc5c"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4385, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}