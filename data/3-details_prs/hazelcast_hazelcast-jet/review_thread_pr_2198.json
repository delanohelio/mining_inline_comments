{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1ODg0MjAw", "number": 2198, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDowODo0OVrODzvzGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoxNTozNFrODzwA3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTg3MDk5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDowODo0OVrOGIWXxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDowODo0OVrOGIWXxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwODMyNQ==", "bodyText": "I don't think this overload adds much, and is a bit confusing. It should be enough to provide the function reference ? i.e. JsonUtil::asJson or something so I would just remove this variant and mention it in javadoc", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2198#discussion_r411408325", "createdAt": "2020-04-20T14:08:49Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -109,7 +111,52 @@ private Sinks() {\n      */\n     @Nonnull\n     public static <K, V> Sink<Entry<K, V>> map(@Nonnull String mapName) {\n-        return new SinkImpl<>(\"mapSink(\" + mapName + ')', writeMapP(mapName), false, entryKey());\n+        return map(mapName, Entry::getKey, Entry::getValue);\n+    }\n+\n+    /**\n+     * Returns a sink that converts the key and value of {@code Map.Entry}s it\n+     * receives to {@link HazelcastJsonValue} and put them into a Hazelcast\n+     * {@code IMap} with the specified name.\n+     * <p>\n+     * This sink provides the exactly-once guarantee thanks to <i>idempotent\n+     * updates</i>. It means that the value with the same key is not appended,\n+     * but overwritten. After the job is restarted from snapshot, duplicate\n+     * items will not change the state in the target map.\n+     * <p>\n+     * The default local parallelism for this sink is 1.\n+     *\n+     * @since 4.1\n+     */\n+    @Nonnull\n+    public static <K, V> Sink<Entry<K, V>> map(@Nonnull String mapName, boolean jsonKey, boolean jsonValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e423f638b4d2775662282abe7b8ecf00814771"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTg5NDQ5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteMapP.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoxMzoxOVrOGIWl1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoxMzoxOVrOGIWl1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxMTkyNw==", "bodyText": "should also be called item", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2198#discussion_r411411927", "createdAt": "2020-04-20T14:13:19Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteMapP.java", "diffHunk": "@@ -62,23 +70,31 @@ public void init(@Nonnull Outbox outbox, @Nonnull Context context) {\n \n         if (map instanceof MapProxyImpl) {\n             PartitioningStrategy<?> partitionStrategy = ((MapProxyImpl<K, V>) map).getPartitionStrategy();\n-            addToBuffer = entry -> {\n-                Data key = serializationService.toData(entry.getKey(), partitionStrategy);\n-                Data value = serializationService.toData(entry.getValue());\n+            addToBuffer = item -> {\n+                Data key = serializationService.toData(key(item), partitionStrategy);\n+                Data value = serializationService.toData(value(item));\n                 buffer.add(new SimpleEntry<>(key, value));\n             };\n         } else if (map instanceof ClientMapProxy) {\n             // TODO: add strategy/unify after https://github.com/hazelcast/hazelcast/issues/13950 is fixed\n             addToBuffer = entry -> {\n-                Data key = serializationService.toData(entry.getKey());\n-                Data value = serializationService.toData(entry.getValue());\n+                Data key = serializationService.toData(key(entry));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e423f638b4d2775662282abe7b8ecf00814771"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTkwNTc0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoxNToyOFrOGIWsvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoxNToyOFrOGIWsvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxMzY5NQ==", "bodyText": "missing overload for map(IMap<K,V>)..", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2198#discussion_r411413695", "createdAt": "2020-04-20T14:15:28Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -109,7 +111,52 @@ private Sinks() {\n      */\n     @Nonnull\n     public static <K, V> Sink<Entry<K, V>> map(@Nonnull String mapName) {\n-        return new SinkImpl<>(\"mapSink(\" + mapName + ')', writeMapP(mapName), false, entryKey());\n+        return map(mapName, Entry::getKey, Entry::getValue);\n+    }\n+\n+    /**\n+     * Returns a sink that converts the key and value of {@code Map.Entry}s it\n+     * receives to {@link HazelcastJsonValue} and put them into a Hazelcast\n+     * {@code IMap} with the specified name.\n+     * <p>\n+     * This sink provides the exactly-once guarantee thanks to <i>idempotent\n+     * updates</i>. It means that the value with the same key is not appended,\n+     * but overwritten. After the job is restarted from snapshot, duplicate\n+     * items will not change the state in the target map.\n+     * <p>\n+     * The default local parallelism for this sink is 1.\n+     *\n+     * @since 4.1\n+     */\n+    @Nonnull\n+    public static <K, V> Sink<Entry<K, V>> map(@Nonnull String mapName, boolean jsonKey, boolean jsonValue) {\n+        return map(mapName,\n+                e -> jsonKey ? JsonUtil.hazelcastJsonValue(e.getKey()) : e.getKey(),\n+                e -> jsonValue ? JsonUtil.hazelcastJsonValue(e.getValue()) : e.getValue());\n+    }\n+\n+    /**\n+     * Returns a sink that uses the supplied functions to extract the key\n+     * and value with which to put to a Hazelcast {@code IMap}.\n+     * <p>\n+     * This sink provides the exactly-once guarantee thanks to <i>idempotent\n+     * updates</i>. It means that the value with the same key is not appended,\n+     * but overwritten. After the job is restarted from snapshot, duplicate\n+     * items will not change the state in the target map.\n+     * <p>\n+     * The default local parallelism for this sink is 1.\n+     *\n+     * @since 4.1\n+     */\n+    @Nonnull\n+    public static <T, K, V> Sink<T> map(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e423f638b4d2775662282abe7b8ecf00814771"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTkwNjIwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoxNTozNFrOGIWtBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoxNTozNFrOGIWtBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxMzc2Ng==", "bodyText": "should be 4.2", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2198#discussion_r411413766", "createdAt": "2020-04-20T14:15:34Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -109,7 +111,52 @@ private Sinks() {\n      */\n     @Nonnull\n     public static <K, V> Sink<Entry<K, V>> map(@Nonnull String mapName) {\n-        return new SinkImpl<>(\"mapSink(\" + mapName + ')', writeMapP(mapName), false, entryKey());\n+        return map(mapName, Entry::getKey, Entry::getValue);\n+    }\n+\n+    /**\n+     * Returns a sink that converts the key and value of {@code Map.Entry}s it\n+     * receives to {@link HazelcastJsonValue} and put them into a Hazelcast\n+     * {@code IMap} with the specified name.\n+     * <p>\n+     * This sink provides the exactly-once guarantee thanks to <i>idempotent\n+     * updates</i>. It means that the value with the same key is not appended,\n+     * but overwritten. After the job is restarted from snapshot, duplicate\n+     * items will not change the state in the target map.\n+     * <p>\n+     * The default local parallelism for this sink is 1.\n+     *\n+     * @since 4.1\n+     */\n+    @Nonnull\n+    public static <K, V> Sink<Entry<K, V>> map(@Nonnull String mapName, boolean jsonKey, boolean jsonValue) {\n+        return map(mapName,\n+                e -> jsonKey ? JsonUtil.hazelcastJsonValue(e.getKey()) : e.getKey(),\n+                e -> jsonValue ? JsonUtil.hazelcastJsonValue(e.getValue()) : e.getValue());\n+    }\n+\n+    /**\n+     * Returns a sink that uses the supplied functions to extract the key\n+     * and value with which to put to a Hazelcast {@code IMap}.\n+     * <p>\n+     * This sink provides the exactly-once guarantee thanks to <i>idempotent\n+     * updates</i>. It means that the value with the same key is not appended,\n+     * but overwritten. After the job is restarted from snapshot, duplicate\n+     * items will not change the state in the target map.\n+     * <p>\n+     * The default local parallelism for this sink is 1.\n+     *\n+     * @since 4.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e423f638b4d2775662282abe7b8ecf00814771"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4838, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}