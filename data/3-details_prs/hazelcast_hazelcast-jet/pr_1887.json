{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3OTEzNzE2", "number": 1887, "title": "Make return-results-to-caller more discoverable via examples", "bodyText": "Create a separate section of examples for return-results-to-caller feature.\nChecklist\n\n Tags Set\n Milestone Set", "createdAt": "2020-01-28T09:42:26Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1887", "merged": true, "mergeCommit": {"oid": "2a730c88484c79381cd83b7f659541184445e767"}, "closed": true, "closedAt": "2020-01-29T07:35:38Z", "author": {"login": "jbartok"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-uG1gAH2gAyMzY3OTEzNzE2OjIyN2FiNmVlYmViMTMwMzhlNTJmZDc1ZDI0ODY2M2VlYTM0NzgzMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_AsZVgH2gAyMzY3OTEzNzE2OmIyYTIyMTdmMTc1OGJlNDFmYjZhYzUzNzM2NzQ0NTVmMDE1Njg5ZWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "227ab6eebeb13038e52fd75d248663eea3478308", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/227ab6eebeb13038e52fd75d248663eea3478308", "committedDate": "2020-01-28T09:41:20Z", "message": "Add return-results-to-caller examples"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NDU1MTc3", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1887#pullrequestreview-349455177", "createdAt": "2020-01-28T15:15:24Z", "commit": {"oid": "227ab6eebeb13038e52fd75d248663eea3478308"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNToxNToyNFrOFiozgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNToyODo1NlrOFipV7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2NDQ0OA==", "bodyText": "It might be better to say \"Top N random numbers in the latest window\"", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1887#discussion_r371864448", "createdAt": "2020-01-28T15:15:24Z", "author": {"login": "viliam-durina"}, "path": "examples/hello-world/src/main/java/com/hazelcast/jet/examples/helloworld/HelloWorld.java", "diffHunk": "@@ -75,7 +76,7 @@ public static void main(String[] args) {\n     }\n \n     private static void printResults(List<Long> top10numbers) {\n-        System.out.println(\"Top 10 random numbers observed so far in the stream are: \");\n+        System.out.println(\"Top \" + TOP + \" random numbers observed since last print: \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227ab6eebeb13038e52fd75d248663eea3478308"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3MjE3MA==", "bodyText": "same here", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1887#discussion_r371872170", "createdAt": "2020-01-28T15:27:17Z", "author": {"login": "viliam-durina"}, "path": "examples/return-results/src/main/java/com/hazelcast/jet/examples/returnresults/BasicObservable.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.returnresults;\n+\n+import com.hazelcast.function.ComparatorEx;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.aggregate.AggregateOperations;\n+import com.hazelcast.jet.datamodel.WindowResult;\n+import com.hazelcast.jet.function.Observer;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.WindowDefinition;\n+import com.hazelcast.jet.pipeline.test.TestSources;\n+\n+import java.util.List;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Demonstrates the usage of observable results on client side in most\n+ * basic form (similar to Reactive Java Observers & Observables). The biggest\n+ * advantage of this form is that it's applicable to both batch and streaming\n+ * jobs, as illustrated here.\n+ * <p>\n+ * The concrete job we are observing produces a simple stream of random\n+ * numbers, from which we compute the top N for each one second tumbling window.\n+ * <p>\n+ * The results observed are ordered lists of the top N numbers and are printed\n+ * once for each window, as they become available.\n+ */\n+public class BasicObservable {\n+\n+    public static final int TOP = 3;\n+\n+    public static void main(String[] args) {\n+        JetInstance jet = Jet.newJetInstance();\n+\n+        Observable<List<Long>> observable = jet.newObservable();\n+        observable.addObserver(Observer.of(BasicObservable::printResults));\n+\n+        Pipeline p = Pipeline.create();\n+        p.readFrom(TestSources.itemStream(100, (ts, seq) -> ThreadLocalRandom.current().nextLong()))\n+                .withIngestionTimestamps()\n+                .window(WindowDefinition.tumbling(1000))\n+                .aggregate(AggregateOperations.topN(TOP, ComparatorEx.comparingLong(l -> l)))\n+                .map(WindowResult::result)\n+                .writeTo(Sinks.observable(observable));\n+\n+        jet.newJob(p);\n+    }\n+\n+    private static void printResults(List<Long> top10numbers) {\n+        System.out.println(\"Top \" + TOP + \" random numbers observed since last print: \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227ab6eebeb13038e52fd75d248663eea3478308"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3MjUxMA==", "bodyText": "lower case \"word count\"", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1887#discussion_r371872510", "createdAt": "2020-01-28T15:27:49Z", "author": {"login": "viliam-durina"}, "path": "examples/return-results/src/main/java/com/hazelcast/jet/examples/returnresults/FutureResults.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.returnresults;\n+\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.Sources;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.regex.Pattern;\n+\n+import static com.hazelcast.function.Functions.wholeItem;\n+import static com.hazelcast.jet.Traversers.traverseArray;\n+import static com.hazelcast.jet.aggregate.AggregateOperations.counting;\n+import static java.util.Comparator.comparingLong;\n+import static java.util.stream.Collectors.toMap;\n+\n+/**\n+ * Demonstrates the usage of observable results on client side in their\n+ * {@link CompletableFuture} form (applicable only to batch jobs).\n+ * <p>\n+ * The concrete job we are observing the results of is a simple Word Count.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227ab6eebeb13038e52fd75d248663eea3478308"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3MzI2MQ==", "bodyText": "lowercase again", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1887#discussion_r371873261", "createdAt": "2020-01-28T15:28:56Z", "author": {"login": "viliam-durina"}, "path": "examples/return-results/src/main/java/com/hazelcast/jet/examples/returnresults/IterableResults.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.examples.returnresults;\n+\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Observable;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.Sources;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.regex.Pattern;\n+import java.util.stream.StreamSupport;\n+\n+import static com.hazelcast.function.Functions.wholeItem;\n+import static com.hazelcast.jet.Traversers.traverseArray;\n+import static com.hazelcast.jet.aggregate.AggregateOperations.counting;\n+import static java.util.Comparator.comparingLong;\n+\n+/**\n+ * Demonstrates the usage of observable results on client side via an\n+ * {@link Iterator} (applicable only to batch jobs).\n+ * <p>\n+ * The concrete job we are observing the results of is a simple Word Count.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227ab6eebeb13038e52fd75d248663eea3478308"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2a2217f1758be41fb6ac5373674455f015689ea", "author": {"user": null}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/b2a2217f1758be41fb6ac5373674455f015689ea", "committedDate": "2020-01-29T07:20:39Z", "message": "Address review concerns"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2948, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}