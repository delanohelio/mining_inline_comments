{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MzAwODUy", "number": 2393, "title": "Simplify PartitionArrangement", "bodyText": "", "createdAt": "2020-07-08T14:58:29Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2393", "merged": true, "mergeCommit": {"oid": "e7335c2a00c976c4e417befab9637c3d15c0ca88"}, "closed": true, "closedAt": "2020-07-22T08:05:49Z", "author": {"login": "viliam-durina"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcy7ue8AH2gAyNDQ2MzAwODUyOjgzMzQ4ZDA3ZGNjNDE4ZTQ4ODMyNmViNWM4YWUyY2VhMGU5MmQ0ZjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3J8YggFqTQ1MjY5MTY4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "83348d07dcc418e488326eb5c8ae2cea0e92d4f2", "author": {"user": {"login": "viliam-durina", "name": "Viliam Durina"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/83348d07dcc418e488326eb5c8ae2cea0e92d4f2", "committedDate": "2020-07-08T14:57:28Z", "message": "Simplify PartitionArrangement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9e145e6e28fefd2c785e60bbbd487b34ebc6475", "author": {"user": {"login": "viliam-durina", "name": "Viliam Durina"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e9e145e6e28fefd2c785e60bbbd487b34ebc6475", "committedDate": "2020-07-08T15:51:15Z", "message": "Remove stale test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODAxMTg0", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2393#pullrequestreview-448801184", "createdAt": "2020-07-15T09:51:34Z", "commit": {"oid": "e9e145e6e28fefd2c785e60bbbd487b34ebc6475"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTo1MTozNFrOGx2zxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTo1MTozNFrOGx2zxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzMTM5Nw==", "bodyText": "are we removing this condition? if so, why?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2393#discussion_r454931397", "createdAt": "2020-07-15T09:51:34Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/PartitionArrangement.java", "diffHunk": "@@ -35,62 +33,58 @@\n class PartitionArrangement {\n     /**\n      * Mapping from each remote member address to the partition IDs it owns.\n+     * Members without partitions are missing.\n      */\n-    final Supplier<Map<Address, int[]>> remotePartitionAssignment;\n-    private final Supplier<int[]> localPartitions;\n-    private final Supplier<int[]> allPartitions;\n+    private final Map<Address, int[]> remotePartitionAssignment;\n+\n+    /** An array of [0, 1, 2, ... partitionCount-1] */\n+    private final int[] allPartitions;\n+\n+    /** Array of local partitions */\n+    private final int[] localPartitions;\n \n     PartitionArrangement(Address[] partitionOwners, Address thisAddress) {\n-        localPartitions = memoize(() -> arrangeLocalPartitions(partitionOwners, thisAddress));\n-        allPartitions = memoize(() -> arrangeAllPartitions(partitionOwners, localPartitions.get()));\n-        remotePartitionAssignment = memoize(() -> remotePartitionAssignment(partitionOwners, thisAddress));\n+        localPartitions = IntStream.range(0, partitionOwners.length)\n+                .filter(partitionId -> thisAddress.equals(partitionOwners[partitionId]))\n+                .toArray();\n+\n+        allPartitions = IntStream.range(0, partitionOwners.length).toArray();\n+\n+        remotePartitionAssignment = IntStream.range(0, partitionOwners.length)\n+                .filter(partitionId -> !thisAddress.equals(partitionOwners[partitionId]))\n+                .boxed()\n+                .collect(groupingBy(partitionId -> partitionOwners[partitionId],\n+                        collectingAndThen(Collectors.toList(), l -> l.stream().mapToInt(i -> i).toArray())));\n+    }\n+\n+    Map<Address, int[]> getRemotePartitionAssignment() {\n+        return remotePartitionAssignment;\n     }\n \n     /**\n-     * Determines for each processor instance the partition IDs it will be in charge of\n-     * (processors are identified by their index). The method is called separately for\n-     * each edge. For a distributed edge, only partitions owned by the local member need\n-     * to be assigned; for a non-distributed edge, every partition ID must be assigned.\n-     * Local partitions will get the same assignments in both cases, and repeating the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9e145e6e28fefd2c785e60bbbd487b34ebc6475"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjkxNjg5", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2393#pullrequestreview-452691689", "createdAt": "2020-07-21T17:46:56Z", "commit": {"oid": "e9e145e6e28fefd2c785e60bbbd487b34ebc6475"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0Njo1N1rOG1DISA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0Njo1N1rOG1DISA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3ODk4NA==", "bodyText": "As discussed, currently we don't make use of this feature anywhere and it makes the code unnecessarily complex.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2393#discussion_r458278984", "createdAt": "2020-07-21T17:46:57Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/init/PartitionArrangement.java", "diffHunk": "@@ -35,62 +33,58 @@\n class PartitionArrangement {\n     /**\n      * Mapping from each remote member address to the partition IDs it owns.\n+     * Members without partitions are missing.\n      */\n-    final Supplier<Map<Address, int[]>> remotePartitionAssignment;\n-    private final Supplier<int[]> localPartitions;\n-    private final Supplier<int[]> allPartitions;\n+    private final Map<Address, int[]> remotePartitionAssignment;\n+\n+    /** An array of [0, 1, 2, ... partitionCount-1] */\n+    private final int[] allPartitions;\n+\n+    /** Array of local partitions */\n+    private final int[] localPartitions;\n \n     PartitionArrangement(Address[] partitionOwners, Address thisAddress) {\n-        localPartitions = memoize(() -> arrangeLocalPartitions(partitionOwners, thisAddress));\n-        allPartitions = memoize(() -> arrangeAllPartitions(partitionOwners, localPartitions.get()));\n-        remotePartitionAssignment = memoize(() -> remotePartitionAssignment(partitionOwners, thisAddress));\n+        localPartitions = IntStream.range(0, partitionOwners.length)\n+                .filter(partitionId -> thisAddress.equals(partitionOwners[partitionId]))\n+                .toArray();\n+\n+        allPartitions = IntStream.range(0, partitionOwners.length).toArray();\n+\n+        remotePartitionAssignment = IntStream.range(0, partitionOwners.length)\n+                .filter(partitionId -> !thisAddress.equals(partitionOwners[partitionId]))\n+                .boxed()\n+                .collect(groupingBy(partitionId -> partitionOwners[partitionId],\n+                        collectingAndThen(Collectors.toList(), l -> l.stream().mapToInt(i -> i).toArray())));\n+    }\n+\n+    Map<Address, int[]> getRemotePartitionAssignment() {\n+        return remotePartitionAssignment;\n     }\n \n     /**\n-     * Determines for each processor instance the partition IDs it will be in charge of\n-     * (processors are identified by their index). The method is called separately for\n-     * each edge. For a distributed edge, only partitions owned by the local member need\n-     * to be assigned; for a non-distributed edge, every partition ID must be assigned.\n-     * Local partitions will get the same assignments in both cases, and repeating the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzMTM5Nw=="}, "originalCommit": {"oid": "e9e145e6e28fefd2c785e60bbbd487b34ebc6475"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3725, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}