{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTIwMzky", "number": 1985, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoyODo0N1rODgaLPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoyODo0N1rODgaLPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzA5ODg3OnYy", "diffSide": "RIGHT", "path": "site/docs/api/serialization.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoyODo0N1rOFqmVqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoyODo0N1rOFqmVqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMjY0OA==", "bodyText": "I think worth mentioning is SerializerHooks, and also how to mention it when using a standalone cluster", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1985#discussion_r380212648", "createdAt": "2020-02-17T14:28:47Z", "author": {"login": "cangencer"}, "path": "site/docs/api/serialization.md", "diffHunk": "@@ -84,11 +77,49 @@ Strategy                                                   Number of Bytes   Ove\n java.io.Serializable                                                   162          523\n java.io.Externalizable                                                  87          234\n com.hazelcast.nio.serialization.Portable                               104          300\n-com.hazelcast.nio.serialization.DataSerializable                        88          238\n-com.hazelcast.nio.serialization.IdentifiedDataSerializable              35           34\n com.hazelcast.nio.serialization.StreamSerializer                        26            0\n ```\n \n+## Sample implementation\n+\n+For best performance we recommend using \n+[com.hazelcast.nio.serialization.StreamSerializer](https://docs.hazelcast.org/docs/latest/javadoc/com/hazelcast/nio/serialization/StreamSerializer.html) or\n+[com.hazelcast.nio.serialization.ByteArraySerializer](https://docs.hazelcast.org/docs/latest/javadoc/com/hazelcast/nio/serialization/ByteArraySerializer.html).\n+Below you can find a sample implementation of `StreamSerializer` for \n+`Person` (mind the type id which should be unique across all stream serializers):\n+```\n+class PersonSerializer implements StreamSerializer<Person> {\n+\n+        private static final int TYPE_ID = 1;\n+\n+        @Override\n+        public int getTypeId() {\n+            return TYPE_ID;\n+        }\n+\n+        @Override\n+        public void write(ObjectDataOutput out, Person person) throws IOException {\n+            out.writeUTF(person.firstName);\n+            out.writeUTF(person.lastName);\n+            out.writeInt(person.age);\n+            out.writeFloat(person.height);\n+        }\n+\n+        @Override\n+        public Person read(ObjectDataInput in) throws IOException {\n+            return new Person(in.readUTF(), in.readUTF(), in.readInt(), in.readFloat());\n+        }\n+    }\n+```\n+\n+Then the serializer should be registered with Jet on cluster startup:\n+```\n+JetConfig config = new JetConfig();\n+config.getHazelcastConfig().getSerializationConfig()\n+    .addSerializerConfig(new SerializerConfig().setTypeClass(Person.class).setClass(PersonSerializer.class));\n+JetInstance jet = Jet.newJetInstance(config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d851885836034cf36d4bf69b42335ba3a27159"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4871, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}