{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NDU4OTky", "number": 2345, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNjowMTozOVrOEHVl0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNjowMTozOVrOEHVl0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTI5MjMzOnYy", "diffSide": "RIGHT", "path": "site/website/blog/2020-06-25-jdk-gc-benchmarks-rematch.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNjowMTozOVrOGmp4GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNjowMTozOVrOGmp4GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NTE3Ng==", "bodyText": "Maybe say something about these config options, they just feel orphan without any explanation.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2345#discussion_r443185176", "createdAt": "2020-06-21T06:01:39Z", "author": {"login": "jbartok"}, "path": "site/website/blog/2020-06-25-jdk-gc-benchmarks-rematch.md", "diffHunk": "@@ -0,0 +1,172 @@\n+---\n+title: Performance of Modern Java on Data-Heavy Workloads: Low-Latency Rematch\n+description: Revisiting the Low Latency Garbage Collectors\n+author: Marko Topolnik\n+authorURL: https://stackoverflow.com/users/1103872/marko-topolnik\n+authorImageURL: https://i.imgur.com/xuavzce.jpg\n+---\n+\n+This is a followup to the\n+[article](/blog/2020/06/09/jdk-gc-benchmarks-part1) published earlier\n+this month, analyzing the performance of modern JVMs on workloads that\n+are relevant to the use case of real-time stream processing.\n+\n+As a quick recap, we tested the basic functionality of Hazelcast Jet,\n+sliding window aggregation, on two types of workload: lightweight with a\n+focus on low latency, and heavyweight with a focus on the data pipeline\n+keeping up with high throughput and large aggregation state. For the\n+low-latency benchmarks we chose the JDK 14 as the most recent stable\n+version and three of its garbage collectors: Shenandoah, ZGC, and G1 GC.\n+\n+Our finding that Shenandoah apparently fared worse than the other GCs\n+attracted some reactions, most notably from the Shenandoah team who\n+reproduced our finding, created an\n+[issue](https://bugs.openjdk.java.net/browse/JDK-8247358), came up with\n+a fix, and committed it to the jdk/jdk16 repository, all in the span of\n+a few days. The change pertains to the heuristics that decide how much\n+work the GC should do in the background in order to exactly match the\n+applications allocation rate. This component is called the _pacer_. It\n+was constantly detecting it's falling behind the application and going\n+into a brief \"panic mode\" in order to catch up. The fix fine-tunes the\n+pacer's heuristics.\n+\n+Given this quick development, we wanted to test out the effects of the\n+fix, but also take the opportunity to zoom in on the low-latency\n+streaming case and make a more detailed analysis.\n+\n+## The JDK We Tested\n+\n+Since this is all so fresh, we couldn't use an existing JDK release, not\n+even EA, to see the effects of the fix. JDK version 14.0.2 is slated to\n+be released on July 14. To nevertheless make progress, we took the\n+source code from the jdk14u tree, at the changeset number\n+[57869:e9d41bbaea38](http://hg.openjdk.java.net/jdk-updates/jdk14u/rev/e9d41bbaea38),\n+and applied the changeset number\n+[59746:29b4bb22b5e2](https://hg.openjdk.java.net/jdk/jdk/rev/29b4bb22b5e2)\n+from the main jdk tree on top of it. The jdk14u tree is where JDK 14.0.2\n+will be released from and the changeset 59746:29b4bb22b5e2 applies the\n+patch resolving the mentioned Shenandoah issue.\n+\n+`-XX:-UseBiasedLocking`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d485dde38b2d39cc0183d88219150c4e0ac03bb"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4633, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}