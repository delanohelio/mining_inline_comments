{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NzY4NzUy", "number": 2689, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNToyMjoxNlrOE7lfng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNToyMjoxNlrOE7lfng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTE1NzQyOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/JetSqlBackend.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNToyMjoxNlrOH3UIgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOTowMzozNlrOH3dPqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc2MzU4Nw==", "bodyText": "Can't we use visit(LogicalTableModify modify)? Maybe we could skip the table != null condition in addPermissionForTable.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2689#discussion_r527763587", "createdAt": "2020-11-20T15:22:16Z", "author": {"login": "gierlachg"}, "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/JetSqlBackend.java", "diffHunk": "@@ -228,17 +235,49 @@ private ExecutionPlan toPlan(RelNode rel, List<String> fieldNames, OptimizerCont\n         boolean isStreaming = containsStreamSource(rel);\n         boolean isInsert = physicalRel instanceof TableModify;\n \n+        List<Permission> permissions = extractPermissions(physicalRel);\n         if (isInsert) {\n             DAG dag = createDag(physicalRel);\n-            return new ExecutionPlan(dag, isStreaming, true, null, null, planExecutor);\n+            return new ExecutionPlan(dag, isStreaming, true, null, null, planExecutor, permissions);\n         } else {\n             QueryId queryId = QueryId.create(nodeEngine.getLocalMember().getUuid());\n             DAG dag = createDag(new JetRootRel(physicalRel, nodeEngine.getThisAddress(), queryId));\n             SqlRowMetadata rowMetadata = createRowMetadata(fieldNames, physicalRel.schema().getTypes());\n-            return new ExecutionPlan(dag, isStreaming, false, queryId, rowMetadata, planExecutor);\n+            return new ExecutionPlan(dag, isStreaming, false, queryId, rowMetadata, planExecutor, permissions);\n         }\n     }\n \n+    private List<Permission> extractPermissions(PhysicalRel physicalRel) {\n+        List<Permission> permissions = new ArrayList<>();\n+\n+        physicalRel.accept(new RelShuttleImpl() {\n+            @Override\n+            public RelNode visit(TableScan scan) {\n+                addPermissionForTable(scan.getTable(), ActionConstants.ACTION_READ);\n+                return super.visit(scan);\n+            }\n+\n+            @Override\n+            public RelNode visit(RelNode other) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aff63df1a0bd1f73b4bf8f27cf3a9bf83072472e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkxMjg3Mw==", "bodyText": "The InsertPhysicalRel doesn't extend LogicalTableModify, but only TableModify. I actually don't know why RelShuttle has the Logical subclasses for almost everything except for TableScan...", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2689#discussion_r527912873", "createdAt": "2020-11-20T19:03:36Z", "author": {"login": "viliam-durina"}, "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/JetSqlBackend.java", "diffHunk": "@@ -228,17 +235,49 @@ private ExecutionPlan toPlan(RelNode rel, List<String> fieldNames, OptimizerCont\n         boolean isStreaming = containsStreamSource(rel);\n         boolean isInsert = physicalRel instanceof TableModify;\n \n+        List<Permission> permissions = extractPermissions(physicalRel);\n         if (isInsert) {\n             DAG dag = createDag(physicalRel);\n-            return new ExecutionPlan(dag, isStreaming, true, null, null, planExecutor);\n+            return new ExecutionPlan(dag, isStreaming, true, null, null, planExecutor, permissions);\n         } else {\n             QueryId queryId = QueryId.create(nodeEngine.getLocalMember().getUuid());\n             DAG dag = createDag(new JetRootRel(physicalRel, nodeEngine.getThisAddress(), queryId));\n             SqlRowMetadata rowMetadata = createRowMetadata(fieldNames, physicalRel.schema().getTypes());\n-            return new ExecutionPlan(dag, isStreaming, false, queryId, rowMetadata, planExecutor);\n+            return new ExecutionPlan(dag, isStreaming, false, queryId, rowMetadata, planExecutor, permissions);\n         }\n     }\n \n+    private List<Permission> extractPermissions(PhysicalRel physicalRel) {\n+        List<Permission> permissions = new ArrayList<>();\n+\n+        physicalRel.accept(new RelShuttleImpl() {\n+            @Override\n+            public RelNode visit(TableScan scan) {\n+                addPermissionForTable(scan.getTable(), ActionConstants.ACTION_READ);\n+                return super.visit(scan);\n+            }\n+\n+            @Override\n+            public RelNode visit(RelNode other) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc2MzU4Nw=="}, "originalCommit": {"oid": "aff63df1a0bd1f73b4bf8f27cf3a9bf83072472e"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4506, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}