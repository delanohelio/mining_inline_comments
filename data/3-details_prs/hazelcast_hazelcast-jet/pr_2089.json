{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNTMxNzIz", "number": 2089, "title": "Inner join distinction", "bodyText": "As discussed on Gitter and mentioned in #1238, new users often don't know that hashJoin is not inner join (like their intuition says). Adding innerHashJoin with pre-filtering will reduce filtering in user apps and make API more clear for new users.\nChecklist\n\n Tags Set\n Milestone Set\n New public APIs have @Nonnull/@Nullable annotations\n New public APIs have @since tags in Javadoc\n No breaking changes\n\nFixes #1238", "createdAt": "2020-03-23T17:27:16Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089", "merged": true, "mergeCommit": {"oid": "355adf1ba216c0177a12990d496a8a93c386ffc6"}, "closed": true, "closedAt": "2020-04-21T12:55:38Z", "author": {"login": "TomaszGaweda"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQhqEIgH2gAyMzkyNTMxNzIzOjNmMGY2NzAyNTQzYWVkNTg3NmVjYjJmMWE4NWUyMzdjMzc2ZmQ3YjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZfsPTAFqTM5NjQ4OTI3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3f0f6702543aed5876ecb2f1a85e237c376fd7b0", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/3f0f6702543aed5876ecb2f1a85e237c376fd7b0", "committedDate": "2020-03-23T17:21:41Z", "message": "Added special innerHashJoin method, to avoid repetitive filtering and make it more clear for users #1238"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a66ec04259cf1375401080f193bf237946c3b0b6", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/a66ec04259cf1375401080f193bf237946c3b0b6", "committedDate": "2020-03-23T17:27:12Z", "message": "Added JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8c44e658586e4aae4c9f0008fb8e5c51a048919", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/d8c44e658586e4aae4c9f0008fb8e5c51a048919", "committedDate": "2020-03-23T19:18:57Z", "message": "Fix checkstyl error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwOTM3MTYx", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#pullrequestreview-380937161", "createdAt": "2020-03-25T08:27:58Z", "commit": {"oid": "d8c44e658586e4aae4c9f0008fb8e5c51a048919"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODoyNzo1OFrOF7QWbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODozMToxN1rOF7QdKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY3ODE4OQ==", "bodyText": "Please follow the formatting guidelines you can infer from the rest of the docs. We use text line length of 72 (excluding any indentation and *),  we don't use </p> and we don't indent the text.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r397678189", "createdAt": "2020-03-25T08:27:58Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java", "diffHunk": "@@ -750,6 +750,48 @@\n             @Nonnull BiFunctionEx<T, T1, R> mapToOutputFn\n     );\n \n+    /**\n+     * Attaches to both this and the supplied stage a inner-hash-joining stage and\n+     * returns it. This stage plays the role of the <em>primary stage</em> in\n+     * the hash-join. Please refer to the {@link com.hazelcast.jet.pipeline\n+     * package javadoc} for a detailed description of the hash-join transform.\n+     * <p>\n+     * This sample joins a stream of users to a stream of countries and outputs\n+     * a stream of users with the {@code country} field set:\n+     * <pre>{@code\n+     * // Types of the input stages:\n+     * BatchStage<User> users;\n+     * BatchStage<Map.Entry<Long, Country>> idAndCountry;\n+     *\n+     * users.innerHashJoin(\n+     *     idAndCountry,\n+     *     JoinClause.joinMapEntries(User::getCountryId),\n+     *     (user, country) -> user.setCountry(country)\n+     * )\n+     * }</pre>\n+     *\n+     * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c44e658586e4aae4c9f0008fb8e5c51a048919"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY3ODQzNg==", "bodyText": "Typo: metod", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r397678436", "createdAt": "2020-03-25T08:28:27Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java", "diffHunk": "@@ -750,6 +750,48 @@\n             @Nonnull BiFunctionEx<T, T1, R> mapToOutputFn\n     );\n \n+    /**\n+     * Attaches to both this and the supplied stage a inner-hash-joining stage and\n+     * returns it. This stage plays the role of the <em>primary stage</em> in\n+     * the hash-join. Please refer to the {@link com.hazelcast.jet.pipeline\n+     * package javadoc} for a detailed description of the hash-join transform.\n+     * <p>\n+     * This sample joins a stream of users to a stream of countries and outputs\n+     * a stream of users with the {@code country} field set:\n+     * <pre>{@code\n+     * // Types of the input stages:\n+     * BatchStage<User> users;\n+     * BatchStage<Map.Entry<Long, Country>> idAndCountry;\n+     *\n+     * users.innerHashJoin(\n+     *     idAndCountry,\n+     *     JoinClause.joinMapEntries(User::getCountryId),\n+     *     (user, country) -> user.setCountry(country)\n+     * )\n+     * }</pre>\n+     *\n+     * <p>\n+     *     This metod is similar to {@link #hashJoin(BatchStage, JoinClause, BiFunctionEx)} method,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c44e658586e4aae4c9f0008fb8e5c51a048919"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY3ODU0Mg==", "bodyText": "Typo: a inner, should be an inner.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r397678542", "createdAt": "2020-03-25T08:28:41Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java", "diffHunk": "@@ -750,6 +750,48 @@\n             @Nonnull BiFunctionEx<T, T1, R> mapToOutputFn\n     );\n \n+    /**\n+     * Attaches to both this and the supplied stage a inner-hash-joining stage and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c44e658586e4aae4c9f0008fb8e5c51a048919"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY3OTkxMw==", "bodyText": "You should also update the Javadoc that this doc points to. The com.hazelcast.jet.pipeline Javadoc now explicitly states that \"hash join is a left-outer join\".", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r397679913", "createdAt": "2020-03-25T08:31:17Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java", "diffHunk": "@@ -750,6 +750,48 @@\n             @Nonnull BiFunctionEx<T, T1, R> mapToOutputFn\n     );\n \n+    /**\n+     * Attaches to both this and the supplied stage a inner-hash-joining stage and\n+     * returns it. This stage plays the role of the <em>primary stage</em> in\n+     * the hash-join. Please refer to the {@link com.hazelcast.jet.pipeline\n+     * package javadoc} for a detailed description of the hash-join transform.\n+     * <p>\n+     * This sample joins a stream of users to a stream of countries and outputs\n+     * a stream of users with the {@code country} field set:\n+     * <pre>{@code\n+     * // Types of the input stages:\n+     * BatchStage<User> users;\n+     * BatchStage<Map.Entry<Long, Country>> idAndCountry;\n+     *\n+     * users.innerHashJoin(\n+     *     idAndCountry,\n+     *     JoinClause.joinMapEntries(User::getCountryId),\n+     *     (user, country) -> user.setCountry(country)\n+     * )\n+     * }</pre>\n+     *\n+     * <p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY3ODE4OQ=="}, "originalCommit": {"oid": "d8c44e658586e4aae4c9f0008fb8e5c51a048919"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e45f7b7cfd12f9438cbdb7a56773ee2e3b04bb81", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e45f7b7cfd12f9438cbdb7a56773ee2e3b04bb81", "committedDate": "2020-03-25T12:54:06Z", "message": "Fixed formatting and added info to package-info"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMTMxNDY3", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#pullrequestreview-381131467", "createdAt": "2020-03-25T13:12:25Z", "commit": {"oid": "e45f7b7cfd12f9438cbdb7a56773ee2e3b04bb81"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzoxMjoyNVrOF7aSpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzoyNDoxNlrOF7ayQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MTA2Mg==", "bodyText": "Please reflow these paragraphs.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r397841062", "createdAt": "2020-03-25T13:12:25Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/package-info.java", "diffHunk": "@@ -72,12 +72,25 @@\n  * hashtables (hence the name). It consumes the enriching streams in full\n  * before ingesting any data from the primary stream.\n  * <p>\n- * The output is just like an SQL left-outer join: for each primary item\n- * there are N output items, one for each matching item in the enriching\n- * set. If an enriching set doesn't have a matching item, the output will\n- * have a {@code null} instead of the enriching item. The join also allows\n+ * The output of {@code hashJoin} is just like an SQL left-outer join:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e45f7b7cfd12f9438cbdb7a56773ee2e3b04bb81"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MjE5OA==", "bodyText": "Please try to use the active voice as much as possible. This can be \"If you need the inner join, \". Also note \"inner join\" (without a dash). We actually need to fix \"hash-join\" into \"hash join\" as well, but this is not the topic of this PR.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r397842198", "createdAt": "2020-03-25T13:13:52Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/package-info.java", "diffHunk": "@@ -72,12 +72,25 @@\n  * hashtables (hence the name). It consumes the enriching streams in full\n  * before ingesting any data from the primary stream.\n  * <p>\n- * The output is just like an SQL left-outer join: for each primary item\n- * there are N output items, one for each matching item in the enriching\n- * set. If an enriching set doesn't have a matching item, the output will\n- * have a {@code null} instead of the enriching item. The join also allows\n+ * The output of {@code hashJoin} is just like an SQL left-outer join:\n+ * for each primary item there are N output items,\n+ * one for each matching item in the enriching set.\n+ * If an enriching set doesn't have a matching item, the output will\n+ * have a {@code null} instead of the enriching item.\n+ * <p>\n+ * If SQL inner-join is needed,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e45f7b7cfd12f9438cbdb7a56773ee2e3b04bb81"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MzE3Nw==", "bodyText": "the specialized innerHashJoin", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r397843177", "createdAt": "2020-03-25T13:15:21Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/package-info.java", "diffHunk": "@@ -72,12 +72,25 @@\n  * hashtables (hence the name). It consumes the enriching streams in full\n  * before ingesting any data from the primary stream.\n  * <p>\n- * The output is just like an SQL left-outer join: for each primary item\n- * there are N output items, one for each matching item in the enriching\n- * set. If an enriching set doesn't have a matching item, the output will\n- * have a {@code null} instead of the enriching item. The join also allows\n+ * The output of {@code hashJoin} is just like an SQL left-outer join:\n+ * for each primary item there are N output items,\n+ * one for each matching item in the enriching set.\n+ * If an enriching set doesn't have a matching item, the output will\n+ * have a {@code null} instead of the enriching item.\n+ * <p>\n+ * If SQL inner-join is needed,\n+ * then specialised {@code innerHashJoin} can be used, in which", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e45f7b7cfd12f9438cbdb7a56773ee2e3b04bb81"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MzQzMw==", "bodyText": "with the given primary item", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r397843433", "createdAt": "2020-03-25T13:15:44Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/package-info.java", "diffHunk": "@@ -72,12 +72,25 @@\n  * hashtables (hence the name). It consumes the enriching streams in full\n  * before ingesting any data from the primary stream.\n  * <p>\n- * The output is just like an SQL left-outer join: for each primary item\n- * there are N output items, one for each matching item in the enriching\n- * set. If an enriching set doesn't have a matching item, the output will\n- * have a {@code null} instead of the enriching item. The join also allows\n+ * The output of {@code hashJoin} is just like an SQL left-outer join:\n+ * for each primary item there are N output items,\n+ * one for each matching item in the enriching set.\n+ * If an enriching set doesn't have a matching item, the output will\n+ * have a {@code null} instead of the enriching item.\n+ * <p>\n+ * If SQL inner-join is needed,\n+ * then specialised {@code innerHashJoin} can be used, in which\n+ * for each primary item with at least one match, there are N output items,\n+ * one for each matching item in the enriching set.\n+ * If an enriching set doesn't have a matching item,\n+ * there will be no records with given primary item.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e45f7b7cfd12f9438cbdb7a56773ee2e3b04bb81"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MzcwOQ==", "bodyText": "the output function's", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r397843709", "createdAt": "2020-03-25T13:16:10Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/package-info.java", "diffHunk": "@@ -72,12 +72,25 @@\n  * hashtables (hence the name). It consumes the enriching streams in full\n  * before ingesting any data from the primary stream.\n  * <p>\n- * The output is just like an SQL left-outer join: for each primary item\n- * there are N output items, one for each matching item in the enriching\n- * set. If an enriching set doesn't have a matching item, the output will\n- * have a {@code null} instead of the enriching item. The join also allows\n+ * The output of {@code hashJoin} is just like an SQL left-outer join:\n+ * for each primary item there are N output items,\n+ * one for each matching item in the enriching set.\n+ * If an enriching set doesn't have a matching item, the output will\n+ * have a {@code null} instead of the enriching item.\n+ * <p>\n+ * If SQL inner-join is needed,\n+ * then specialised {@code innerHashJoin} can be used, in which\n+ * for each primary item with at least one match, there are N output items,\n+ * one for each matching item in the enriching set.\n+ * If an enriching set doesn't have a matching item,\n+ * there will be no records with given primary item.\n+ * In this case output function's arguments are always non-null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e45f7b7cfd12f9438cbdb7a56773ee2e3b04bb81"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0NzMyNQ==", "bodyText": "This claims to test that innerHashJoin filters out nulls, but it actually uses hashJoin and asserts that it does not filter out nulls.\nAbout method naming: we use _ only for special purposes like the structure when_predondition_then_postcondition. So this method should be when_hashJoin_then_dontFilterOutNulls or similar.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r397847325", "createdAt": "2020-03-25T13:21:42Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/BatchStageTest.java", "diffHunk": "@@ -1035,6 +1035,35 @@ public void hashJoin_when_outputFnReturnsNull_then_filteredOut() {\n         assertEquals(emptyList(), new ArrayList<>(sinkList));\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e45f7b7cfd12f9438cbdb7a56773ee2e3b04bb81"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0OTE1Mw==", "bodyText": "This seems to test the behavior common to inner and outer join. The input has no nulls to begin with.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r397849153", "createdAt": "2020-03-25T13:24:16Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/StreamStageTest.java", "diffHunk": "@@ -1253,6 +1253,39 @@ public void hashJoin() {\n         );\n     }\n \n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void innerHashJoin() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e45f7b7cfd12f9438cbdb7a56773ee2e3b04bb81"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjkwNjk3", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#pullrequestreview-383290697", "createdAt": "2020-03-28T07:14:55Z", "commit": {"oid": "e45f7b7cfd12f9438cbdb7a56773ee2e3b04bb81"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNzoxNDo1NVrOF9Hgsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNzoxNDo1NVrOF9Hgsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYzMDUxNA==", "bodyText": "We also have hashJoin2() and hashJoinBuilder(), they also need the same API extension. You could add a method to the hash join builder: buildInner.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r399630514", "createdAt": "2020-03-28T07:14:55Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/pipeline/BatchStageImpl.java", "diffHunk": "@@ -165,6 +165,21 @@ public BatchStageImpl(@Nonnull Transform transform, FunctionAdapter ignored, @No\n         return attachHashJoin(stage1, joinClause1, mapToOutputFn);\n     }\n \n+    @Nonnull @Override\n+    public <K, T1_IN, T1, R> BatchStage<R> innerHashJoin(\n+            @Nonnull BatchStage<T1_IN> stage1,\n+            @Nonnull JoinClause<K, ? super T, ? super T1_IN, ? extends T1> joinClause1,\n+            @Nonnull BiFunctionEx<T, T1, R> mapToOutputFn\n+    ) {\n+        BiFunctionEx<T, T1, R> finalOutputFn = (leftSide, rightSide) -> {\n+            if (leftSide == null || rightSide == null) {\n+                return null;\n+            }\n+            return mapToOutputFn.apply(leftSide, rightSide);\n+        };\n+        return attachHashJoin(stage1, joinClause1, finalOutputFn);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e45f7b7cfd12f9438cbdb7a56773ee2e3b04bb81"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52ed9207980bce7e7eedb9f0b91fd81c9cf7452a", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/52ed9207980bce7e7eedb9f0b91fd81c9cf7452a", "committedDate": "2020-04-01T16:43:50Z", "message": "Fix test - intention was to show that innerHashJoin filter outs nulsl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce78bfad0b67eb1041b3559bc7fe0252873e7568", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/ce78bfad0b67eb1041b3559bc7fe0252873e7568", "committedDate": "2020-04-01T16:46:59Z", "message": "Fix another test - show that innerHashJoin works in stream scenario"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e875aabb41969304f2410a700addc9810272fa7d", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e875aabb41969304f2410a700addc9810272fa7d", "committedDate": "2020-04-01T16:58:08Z", "message": "Fixed JavaDoc as per CR Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfdea20ddc71021c38e807ab8666ceee8e2368d3", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/cfdea20ddc71021c38e807ab8666ceee8e2368d3", "committedDate": "2020-04-01T16:59:56Z", "message": "Added The there needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f67c69299fad3ced5691b58408e95bc746221909", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/f67c69299fad3ced5691b58408e95bc746221909", "committedDate": "2020-04-01T17:12:39Z", "message": "Fixed line length"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f840f2aba73e603efdfe608d7ef58974aeb7f6cc", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/f840f2aba73e603efdfe608d7ef58974aeb7f6cc", "committedDate": "2020-04-02T13:40:39Z", "message": "Added missing since"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d41155e2fba0e77c42803d73d464c7ffcec5ca3f", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/d41155e2fba0e77c42803d73d464c7ffcec5ca3f", "committedDate": "2020-04-16T18:32:30Z", "message": "Added innerHashJoin2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7690fea8d56a61e20f45d58608d2a45112f7a48f", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/7690fea8d56a61e20f45d58608d2a45112f7a48f", "committedDate": "2020-04-16T19:58:08Z", "message": "Added addInner to HashJoinBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6f21975abae376d0af6069d08b12eb9e2ff9965", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/a6f21975abae376d0af6069d08b12eb9e2ff9965", "committedDate": "2020-04-16T20:02:39Z", "message": "Fixed test and Reversed condition."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ff8d2ca545b11cfd4435f0e05d995106edc1c19", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/5ff8d2ca545b11cfd4435f0e05d995106edc1c19", "committedDate": "2020-04-17T08:08:00Z", "message": "Added misssing since annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af34d0de1ad6e745ad35a940044d3bf9e1264007", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/af34d0de1ad6e745ad35a940044d3bf9e1264007", "committedDate": "2020-04-17T08:14:33Z", "message": "Improved formatting and JavaDocs in general"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e17611c89082f3325eacf9b2c47cab3fb6b9ccc2", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/e17611c89082f3325eacf9b2c47cab3fb6b9ccc2", "committedDate": "2020-04-17T12:26:11Z", "message": "Fixed checkstyle errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NDYxMzAx", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#pullrequestreview-395461301", "createdAt": "2020-04-17T13:38:42Z", "commit": {"oid": "e17611c89082f3325eacf9b2c47cab3fb6b9ccc2"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzozODo0MlrOGHOWsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzo1OTozNVrOGHPLrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyODQwMg==", "bodyText": "There's a double space here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r410228402", "createdAt": "2020-04-17T13:38:42Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java", "diffHunk": "@@ -750,6 +750,49 @@\n             @Nonnull BiFunctionEx<T, T1, R> mapToOutputFn\n     );\n \n+    /**\n+     * Attaches to both this and the supplied stage an inner hash-joining stage\n+     * and  returns it. This stage plays the role of the <em>primary stage</em>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e17611c89082f3325eacf9b2c47cab3fb6b9ccc2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyOTE2Mw==", "bodyText": "Line too long.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r410229163", "createdAt": "2020-04-17T13:39:49Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java", "diffHunk": "@@ -795,6 +838,58 @@\n             @Nonnull TriFunction<T, T1, T2, R> mapToOutputFn\n     );\n \n+    /**\n+     * Attaches to this and the two supplied stages a inner hash-joining stage and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e17611c89082f3325eacf9b2c47cab3fb6b9ccc2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyOTQ3Nw==", "bodyText": "Line too long.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r410229477", "createdAt": "2020-04-17T13:40:20Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java", "diffHunk": "@@ -795,6 +838,58 @@\n             @Nonnull TriFunction<T, T1, T2, R> mapToOutputFn\n     );\n \n+    /**\n+     * Attaches to this and the two supplied stages a inner hash-joining stage and\n+     * returns it. This stage plays the role of the <em>primary stage</em> in\n+     * the hash-join. Please refer to the {@link com.hazelcast.jet.pipeline\n+     * package javadoc} for a detailed description of the hash-join transform.\n+     * <p>\n+     * This sample joins a stream of users to streams of countries and\n+     * companies, and outputs a stream of users with the {@code country} and\n+     * {@code company} fields set:\n+     * <pre>{@code\n+     * // Types of the input stages:\n+     * BatchStage<User> users;\n+     * BatchStage<Map.Entry<Long, Country>> idAndCountry;\n+     * BatchStage<Map.Entry<Long, Company>> idAndCompany;\n+     *\n+     * users.innerHashJoin2(\n+     *     idAndCountry, JoinClause.joinMapEntries(User::getCountryId),\n+     *     idAndCompany, JoinClause.joinMapEntries(User::getCompanyId),\n+     *     (user, country, company) -> user.setCountry(country).setCompany(company)\n+     * )\n+     * }</pre>\n+     *\n+     * <p>\n+     * This method is similar to {@link #hashJoin2(BatchStage, JoinClause, BatchStage, JoinClause, TriFunction)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e17611c89082f3325eacf9b2c47cab3fb6b9ccc2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyOTY4Nw==", "bodyText": "Line too long. Note that you can just refer to a method name without parameters.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r410229687", "createdAt": "2020-04-17T13:40:40Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java", "diffHunk": "@@ -750,6 +750,49 @@\n             @Nonnull BiFunctionEx<T, T1, R> mapToOutputFn\n     );\n \n+    /**\n+     * Attaches to both this and the supplied stage an inner hash-joining stage\n+     * and  returns it. This stage plays the role of the <em>primary stage</em>\n+     * in the hash-join. Please refer to the {@link com.hazelcast.jet.pipeline\n+     * package javadoc} for a detailed description of the hash-join transform.\n+     * <p>\n+     * This sample joins a stream of users to a stream of countries and outputs\n+     * a stream of users with the {@code country} field set:\n+     * <pre>{@code\n+     * // Types of the input stages:\n+     * BatchStage<User> users;\n+     * BatchStage<Map.Entry<Long, Country>> idAndCountry;\n+     *\n+     * users.innerHashJoin(\n+     *     idAndCountry,\n+     *     JoinClause.joinMapEntries(User::getCountryId),\n+     *     (user, country) -> user.setCountry(country)\n+     * )\n+     * }</pre>\n+     *\n+     * <p>\n+     * This method is similar to {@link #hashJoin(BatchStage, JoinClause, BiFunctionEx)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e17611c89082f3325eacf9b2c47cab3fb6b9ccc2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIzMDA2Nw==", "bodyText": "Line too long.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r410230067", "createdAt": "2020-04-17T13:41:17Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralHashJoinBuilder.java", "diffHunk": "@@ -82,7 +82,28 @@\n      */\n     public <K, T1_IN, T1> Tag<T1> add(BatchStage<T1_IN> stage, JoinClause<K, T0, T1_IN, T1> joinClause) {\n         Tag<T1> tag = tag(clauses.size());\n-        clauses.put(tag, new TransformAndClause<>(stage, joinClause));\n+        clauses.put(tag, new TransformAndClause<>(stage, joinClause, false));\n+        return tag;\n+    }\n+\n+    /**\n+     * Adds another contributing pipeline stage to the hash-join operation.\n+     *\n+     * If no matching items for returned {@linkplain Tag tag} is found, no records", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e17611c89082f3325eacf9b2c47cab3fb6b9ccc2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIzMDcxOA==", "bodyText": "Line too long.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r410230718", "createdAt": "2020-04-17T13:42:15Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java", "diffHunk": "@@ -750,6 +750,49 @@\n             @Nonnull BiFunctionEx<T, T1, R> mapToOutputFn\n     );\n \n+    /**\n+     * Attaches to both this and the supplied stage an inner hash-joining stage\n+     * and  returns it. This stage plays the role of the <em>primary stage</em>\n+     * in the hash-join. Please refer to the {@link com.hazelcast.jet.pipeline\n+     * package javadoc} for a detailed description of the hash-join transform.\n+     * <p>\n+     * This sample joins a stream of users to a stream of countries and outputs\n+     * a stream of users with the {@code country} field set:\n+     * <pre>{@code\n+     * // Types of the input stages:\n+     * BatchStage<User> users;\n+     * BatchStage<Map.Entry<Long, Country>> idAndCountry;\n+     *\n+     * users.innerHashJoin(\n+     *     idAndCountry,\n+     *     JoinClause.joinMapEntries(User::getCountryId),\n+     *     (user, country) -> user.setCountry(country)\n+     * )\n+     * }</pre>\n+     *\n+     * <p>\n+     * This method is similar to {@link #hashJoin(BatchStage, JoinClause, BiFunctionEx)}\n+     * method, but it guarantees that both input items will be not-null. Nulls will", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e17611c89082f3325eacf9b2c47cab3fb6b9ccc2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIzMDk2OA==", "bodyText": "Line too long.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r410230968", "createdAt": "2020-04-17T13:42:40Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java", "diffHunk": "@@ -795,6 +838,58 @@\n             @Nonnull TriFunction<T, T1, T2, R> mapToOutputFn\n     );\n \n+    /**\n+     * Attaches to this and the two supplied stages a inner hash-joining stage and\n+     * returns it. This stage plays the role of the <em>primary stage</em> in\n+     * the hash-join. Please refer to the {@link com.hazelcast.jet.pipeline\n+     * package javadoc} for a detailed description of the hash-join transform.\n+     * <p>\n+     * This sample joins a stream of users to streams of countries and\n+     * companies, and outputs a stream of users with the {@code country} and\n+     * {@code company} fields set:\n+     * <pre>{@code\n+     * // Types of the input stages:\n+     * BatchStage<User> users;\n+     * BatchStage<Map.Entry<Long, Country>> idAndCountry;\n+     * BatchStage<Map.Entry<Long, Company>> idAndCompany;\n+     *\n+     * users.innerHashJoin2(\n+     *     idAndCountry, JoinClause.joinMapEntries(User::getCountryId),\n+     *     idAndCompany, JoinClause.joinMapEntries(User::getCompanyId),\n+     *     (user, country, company) -> user.setCountry(country).setCompany(company)\n+     * )\n+     * }</pre>\n+     *\n+     * <p>\n+     * This method is similar to {@link #hashJoin2(BatchStage, JoinClause, BatchStage, JoinClause, TriFunction)}\n+     * method, but it guarantees that both input items will be not-null. Nulls will", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e17611c89082f3325eacf9b2c47cab3fb6b9ccc2"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI0MTk2Nw==", "bodyText": "Could you adjust this test so that one side is inner join and the other outer? I think that would test for the less trivial behavior. Or maybe duplicate and modify this test so we have both.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r410241967", "createdAt": "2020-04-17T13:59:35Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/BatchStageTest.java", "diffHunk": "@@ -1035,6 +1035,75 @@ public void hashJoin_when_outputFnReturnsNull_then_filteredOut() {\n         assertEquals(emptyList(), new ArrayList<>(sinkList));\n     }\n \n+    @Test\n+    public void when_innerHashJoin_then_filterOutNulls() {\n+        // Given\n+        List<Integer> input = sequence(itemCount);\n+        String prefix = \"value-\";\n+        BatchStage<Entry<Integer, String>> enrichingStage = batchStageFromList(input)\n+                .filter(i -> i % 2 == 0)\n+                .map(i -> entry(i, prefix + i));\n+\n+        // When\n+        BatchStage<Entry<Integer, String>> joined = batchStageFromList(input).innerHashJoin(\n+                enrichingStage,\n+                joinMapEntries(wholeItem()),\n+                Util::entry);\n+\n+        // Then\n+        joined.writeTo(sink);\n+        execute();\n+        Function<Entry<Integer, String>, String> formatFn =\n+                e -> String.format(\"(%04d, %s)\", e.getKey(), e.getValue());\n+        assertEquals(\n+                streamToString(input.stream().filter(e -> e % 2 == 0).map(i -> tuple2(i, prefix + i)), formatFn),\n+                streamToString(sinkStreamOfEntry(), formatFn));\n+    }\n+\n+    @Test\n+    public void when_hashJoinBuilderAddInner_then_filterOutNulls() {\n+        // Given\n+        int itemCountLocal = itemCount;\n+        List<Integer> input = sequence(itemCountLocal);\n+        String prefixA = \"A-\";\n+        String prefixB = \"B-\";\n+        String prefixC = \"C-\";\n+        String prefixD = \"D-\";\n+        BatchStage<Entry<Integer, String>> enrichingStage1 =\n+                batchStageFromList(input)\n+                        .filter(e -> e <= itemCountLocal / 2)\n+                        .flatMap(i -> traverseItems(entry(i, prefixA + i), entry(i, prefixB + i)));\n+        BatchStage<Entry<Integer, String>> enrichingStage2 =\n+                batchStageFromList(input)\n+                        .filter(e -> e <= itemCountLocal / 4)\n+                        .flatMap(i -> traverseItems(entry(i, prefixC + i), entry(i, prefixD + i)));\n+\n+        // When\n+        HashJoinBuilder<Integer> b = batchStageFromList(input).hashJoinBuilder();\n+        Tag<String> tagA = b.addInner(enrichingStage1, joinMapEntries(wholeItem()));\n+        Tag<String> tagB = b.addInner(enrichingStage2, joinMapEntries(wholeItem()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e17611c89082f3325eacf9b2c47cab3fb6b9ccc2"}, "originalPosition": 134}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8601549d01a4b5c5674ed03375819143ac2d3a7a", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/8601549d01a4b5c5674ed03375819143ac2d3a7a", "committedDate": "2020-04-17T14:05:39Z", "message": "Fixed line lengths"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NDkwMDY0", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#pullrequestreview-395490064", "createdAt": "2020-04-17T14:12:34Z", "commit": {"oid": "e17611c89082f3325eacf9b2c47cab3fb6b9ccc2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoxMjozNVrOGHPsPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoxMjozNVrOGHPsPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1MDMwMA==", "bodyText": "I tried it, you can safely inline this into the usage below. The reason that joinClauses stream had to be extracted does not appear in this case.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#discussion_r410250300", "createdAt": "2020-04-17T14:12:35Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralHashJoinBuilder.java", "diffHunk": "@@ -98,17 +119,23 @@\n                         orderedClauses.stream().map(e -> e.getValue().transform())\n                 ).collect(toList());\n         // A probable javac bug forced us to extract this variable\n+        // and not using method reference\n         Stream<JoinClause<?, T0, ?, ?>> joinClauses = orderedClauses\n                 .stream()\n                 .map(e -> e.getValue().clause())\n-                .map(fnAdapter::adaptJoinClause);\n+                .map(joinClause -> fnAdapter.adaptJoinClause(joinClause));\n+        Stream<Boolean> whereNullNotAllowed = orderedClauses", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e17611c89082f3325eacf9b2c47cab3fb6b9ccc2"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e4803277a43a4ed6ecc0d9c0ee4c7c8950d590f", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/2e4803277a43a4ed6ecc0d9c0ee4c7c8950d590f", "committedDate": "2020-04-17T14:23:16Z", "message": "Extended the test to test inner and left join at the same time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40f5d6199fb7c90f05d508177eeda82c773da9ce", "author": {"user": {"login": "TomaszGaweda", "name": "Tomasz Gaw\u0119da"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/40f5d6199fb7c90f05d508177eeda82c773da9ce", "committedDate": "2020-04-17T14:23:59Z", "message": "After CR: inlined variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NDg5Mjcx", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2089#pullrequestreview-396489271", "createdAt": "2020-04-20T14:09:34Z", "commit": {"oid": "40f5d6199fb7c90f05d508177eeda82c773da9ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3822, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}