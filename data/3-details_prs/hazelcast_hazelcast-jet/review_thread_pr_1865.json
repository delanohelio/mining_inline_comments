{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0OTM3OTM2", "number": 1865, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzoyOTo0NVrODZSCaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMToyMzowNVrODZdTAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODM2NTIzOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ProcessorTasklet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzoyOTo0NVrOFflWIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxODoyMzoxOVrOFfmZJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2MjA0OQ==", "bodyText": "shouldn't use the Util method here too?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1865#discussion_r368662049", "createdAt": "2020-01-20T17:29:45Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ProcessorTasklet.java", "diffHunk": "@@ -197,10 +198,11 @@ private OutboxImpl createOutbox(@Nonnull OutboundCollector ssCollector) {\n \n     @Override\n     public void init() {\n-        if (serializationService.getManagedContext() != null) {\n+        ManagedContext managedContext = serializationService.getManagedContext();\n+        if (managedContext != null) {\n             Processor toInit = processor instanceof ProcessorWrapper\n                     ? ((ProcessorWrapper) processor).getWrapped() : processor;\n-            Object initialized = serializationService.getManagedContext().initialize(toInit);\n+            Object initialized = managedContext.initialize(toInit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67816c82540821de97bce33e45e04673e55efb58"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY3OTIwNw==", "bodyText": "I guess we want to have object equality here, because we may be using the processor elsewhere ?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1865#discussion_r368679207", "createdAt": "2020-01-20T18:23:19Z", "author": {"login": "gurbuzali"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ProcessorTasklet.java", "diffHunk": "@@ -197,10 +198,11 @@ private OutboxImpl createOutbox(@Nonnull OutboundCollector ssCollector) {\n \n     @Override\n     public void init() {\n-        if (serializationService.getManagedContext() != null) {\n+        ManagedContext managedContext = serializationService.getManagedContext();\n+        if (managedContext != null) {\n             Processor toInit = processor instanceof ProcessorWrapper\n                     ? ((ProcessorWrapper) processor).getWrapped() : processor;\n-            Object initialized = serializationService.getManagedContext().initialize(toInit);\n+            Object initialized = managedContext.initialize(toInit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2MjA0OQ=="}, "originalCommit": {"oid": "67816c82540821de97bce33e45e04673e55efb58"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDIwOTk1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ProcessorTasklet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMToyMzowNVrOFf2qEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMToyMzowNVrOFf2qEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0NTY4Mg==", "bodyText": "do we want to pass the cause here, just in case?", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1865#discussion_r368945682", "createdAt": "2020-01-21T11:23:05Z", "author": {"login": "cangencer"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/execution/ProcessorTasklet.java", "diffHunk": "@@ -197,11 +198,23 @@ private OutboxImpl createOutbox(@Nonnull OutboundCollector ssCollector) {\n \n     @Override\n     public void init() {\n-        if (serializationService.getManagedContext() != null) {\n+        ManagedContext managedContext = serializationService.getManagedContext();\n+        if (managedContext != null) {\n             Processor toInit = processor instanceof ProcessorWrapper\n                     ? ((ProcessorWrapper) processor).getWrapped() : processor;\n-            Object initialized = serializationService.getManagedContext().initialize(toInit);\n-            assert initialized == toInit : \"different object returned\";\n+            Object initialized = null;\n+            try {\n+                initialized = managedContext.initialize(toInit);\n+                toInit = (Processor) initialized;\n+            } catch (ClassCastException e) {\n+                throw new IllegalArgumentException(String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3ccce3595fb00a09a234a62f5e7735ccf7dcc0e"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4926, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}