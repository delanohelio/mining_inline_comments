{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNzU3MjQy", "number": 2669, "reviewThreads": {"totalCount": 70, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToxMjo1M1rOE8rDbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyNDo1MVrOE8vtSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDU1NDA0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToxMjo1M1rOH47_QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToxMjo1M1rOH47_QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2NTE1Mw==", "bodyText": "There's an extra indenting space here (and elsewhere).", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529465153", "createdAt": "2020-11-24T11:12:53Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java", "diffHunk": "@@ -124,8 +128,11 @@\n      * properly implement {@code equals()}. See {@link #deductFn()} for an\n      * explanation.\n      * <p>\n-     * The returned accumulator must be serializable. For performance, you\n-     * should prefer Hazelcast custom serialization.\n+     * The accumulator produced by the supplier must be serializable. For\n+     * performance, you should prefer Hazelcast custom serialization.\n+     * <p>\n+     *  The supplier must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDU1NjExOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToxMzoyOVrOH48Akg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToxMzoyOVrOH48Akg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2NTQ5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * from the results. I.e.:\n          \n          \n            \n                 * from the results. For example:", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529465490", "createdAt": "2020-11-24T11:13:29Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java", "diffHunk": "@@ -188,7 +204,16 @@\n      * to determine whether the accumulator is now \"empty\" (i.e., equal to a\n      * fresh instance), which signals that the current window contains no more\n      * items with the associated grouping key and the entry must be removed\n-     * from the results.\n+     * from the results. I.e.:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDU4ODk4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyMjoxNFrOH48UiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyMjoxNFrOH48UiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MDYwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                  Jet's {@link Traverser}. It must not return null traverser, but can\n          \n          \n            \n                 *                  Jet's {@link Traverser}. It must not return a null traverser, but can", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529470601", "createdAt": "2020-11-24T11:22:14Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java", "diffHunk": "@@ -102,10 +105,10 @@\n      * stage.flatMap(sentence -> traverseArray(sentence.split(\"\\\\W+\")))\n      * }</pre>\n      *\n-     * @param flatMapFn a stateless flatmapping function, whose result type is\n-     *                  Jet's {@link Traverser}. It must not return null\n-     *                  traverser, but can return an {@linkplain\n-     *                  Traversers#empty() empty traverser}.\n+     * @param flatMapFn a flatmapping function, whose result type is\n+     *                  Jet's {@link Traverser}. It must not return null traverser, but can", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDU5NjY3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNDoyMFrOH48ZEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNDoyMFrOH48ZEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MTc2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                        Jet member. It must be stateless\n          \n          \n            \n                 *                        Jet member. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529471761", "createdAt": "2020-11-24T11:24:20Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -138,10 +138,10 @@ private ServiceFactories() { }\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once on each\n-     *                        Jet member.\n+     *                        Jet member. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDU5NzExOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNDoyOFrOH48ZVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNDoyOFrOH48ZVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MTgyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                         service. It must be stateless\n          \n          \n            \n                 *                         service. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529471828", "createdAt": "2020-11-24T11:24:28Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -138,10 +138,10 @@ private ServiceFactories() { }\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once on each\n-     *                        Jet member.\n+     *                        Jet member. It must be stateless\n      * @param destroyServiceFn the function that destroys the service. It will be called once on each\n      *                         Jet member. It can be used to tear down any resources acquired by the\n-     *                         service.\n+     *                         service. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYwMDQ4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNToxNlrOH48bUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNToxNlrOH48bUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjMzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                        processor instance. It must be stateless\n          \n          \n            \n                 *                        processor instance. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472336", "createdAt": "2020-11-24T11:25:16Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -199,10 +199,10 @@ private ServiceFactories() { }\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once per\n-     *                        processor instance.\n+     *                        processor instance. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYwMTIzOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNToyMlrOH48bsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNToyMlrOH48bsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjQzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                         acquired by the service. It must be stateless\n          \n          \n            \n                 *                         acquired by the service. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472435", "createdAt": "2020-11-24T11:25:22Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -199,10 +199,10 @@ private ServiceFactories() { }\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once per\n-     *                        processor instance.\n+     *                        processor instance. It must be stateless\n      * @param destroyServiceFn the function that destroys the service. It will be called once per\n      *                         processor instance. It can be used to tear down any resources\n-     *                         acquired by the service.\n+     *                         acquired by the service. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYwMjI3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNTozNVrOH48cSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNTozNVrOH48cSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjU4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                        stateless\n          \n          \n            \n                 *                        stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472584", "createdAt": "2020-11-24T11:25:35Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -137,7 +137,8 @@ private ServiceFactory(@Nonnull FunctionEx<? super ProcessorSupplier.Context, ?\n      * for blocking code.\n      *\n      * @param createContextFn the function to create new context object, given a {@link\n-     *                        ProcessorSupplier.Context}. Called once per Jet member.\n+     *                        ProcessorSupplier.Context}. Called once per Jet member. It must be\n+     *                        stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYwMjg1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNTo0NFrOH48cpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNTo0NFrOH48cpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjY3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     context. It must be stateless\n          \n          \n            \n                 *     context. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472677", "createdAt": "2020-11-24T11:25:44Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -158,7 +159,8 @@ private ServiceFactory(@Nonnull FunctionEx<? super ProcessorSupplier.Context, ?\n      * Jet calls this function at the end of the job for each shared context\n      * object it created (one on each cluster member).\n      *\n-     * @param destroyContextFn the function to destroy the shared service context\n+     * @param destroyContextFn the function to destroy the shared service\n+     *     context. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYwMzM4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNTo1MFrOH48c6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNTo1MFrOH48c6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Mjc0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     It must be stateless\n          \n          \n            \n                 *     It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472747", "createdAt": "2020-11-24T11:25:50Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -186,7 +188,8 @@ private ServiceFactory(@Nonnull FunctionEx<? super ProcessorSupplier.Context, ?\n      * this method resets any pre-existing {@code destroyService} function to a\n      * no-op.\n      *\n-     * @param createServiceFn the function that creates the service instance\n+     * @param createServiceFn the function that creates the service instance.\n+     *     It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYwMzc1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNTo1N1rOH48dJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNTo1N1rOH48dJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjgwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                         stateless\n          \n          \n            \n                 *                         stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472805", "createdAt": "2020-11-24T11:25:57Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -208,7 +211,8 @@ private ServiceFactory(@Nonnull FunctionEx<? super ProcessorSupplier.Context, ?\n      * created services objects.\n      *\n      * @param destroyServiceFn the function to destroy the service instance.\n-     *                         This function is called once per processor instance\n+     *                         This function is called once per processor instance. It must be\n+     *                         stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYwNDI5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNjowOVrOH48dhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNjowOVrOH48dhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjkwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     processor context. It must be stateless\n          \n          \n            \n                 *     processor context. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472901", "createdAt": "2020-11-24T11:26:09Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java", "diffHunk": "@@ -82,14 +82,20 @@ private SinkBuilder(\n      * </li><li>\n      *     {@code destroyFn} destroys the context. This component is optional.\n      * </li></ol>\n+     *\n      * The returned sink will be non-cooperative and will have preferred local\n      * parallelism of 1. It doesn't participate in the fault-tolerance protocol,\n      * which means you can't remember across a job restart which items you\n      * already received. The sink will still receive each item at least once,\n      * thus complying with the <em>at-least-once</em> processing guarantee. If\n      * the sink is idempotent (suppresses duplicate items), it will also be\n      * compatible with the <em>exactly-once</em> guarantee.\n+     * <p>\n+     * All the functions must be stateless.\n      *\n+     * @param name the name of the processor\n+     * @param createFn the function to create the sink context, given a\n+     *     processor context. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYwNDk0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNjoxOFrOH48d4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNjoxOFrOH48d4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Mjk5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     stateless\n          \n          \n            \n                 *     stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472993", "createdAt": "2020-11-24T11:26:18Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java", "diffHunk": "@@ -131,7 +138,8 @@ private SinkBuilder(\n      * You are not required to provide this function in case your implementation\n      * doesn't need it.\n      *\n-     * @param flushFn the optional \"flush the context\" function\n+     * @param flushFn the optional \"flush the context\" function. It must be\n+     *     stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYwNTE5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNjoyNFrOH48eCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNjoyNFrOH48eCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzAzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473035", "createdAt": "2020-11-24T11:26:24Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java", "diffHunk": "@@ -149,7 +157,8 @@ private SinkBuilder(\n      * You are not required to provide this function in case your implementation\n      * doesn't need it.\n      *\n-     * @param destroyFn the optional \"destroy the context object\" function\n+     * @param destroyFn the optional \"destroy the context object\" function. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYwNjE1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNjozOFrOH48emw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNjozOFrOH48emw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzE3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     cooperative}\n          \n          \n            \n                 *     cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473179", "createdAt": "2020-11-24T11:26:38Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -107,7 +108,9 @@ private Sinks() {\n      *\n      * @param sinkName user-friendly sink name\n      * @param metaSupplier the processor meta-supplier\n-     * @param partitionKeyFn key extractor function for partitioning edges to sink\n+     * @param partitionKeyFn key extractor function for partitioning edges to\n+     *     sink. It must be stateless and {@linkplain Processor#isCooperative()\n+     *     cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYwOTI5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNzoyNFrOH48geQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNzoyNFrOH48geQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzY1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473657", "createdAt": "2020-11-24T11:27:24Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -872,6 +902,12 @@ private Sinks() {\n      * guarantee.\n      * <p>\n      * The default local parallelism for this sink is 1.\n+     *\n+     * @param host the host to connect to\n+     * @param port the target port\n+     * @param toStringFn a function to convert received items to string. It\n+     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYwOTgxOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNzozMlrOH48gwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNzozMlrOH48gwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzcyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473728", "createdAt": "2020-11-24T11:27:32Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1022,7 +1058,9 @@ private Sinks() {\n      * <p>\n      * The default local parallelism for this sink is 1.\n      *\n-     * @param toStringFn a function that returns a string representation of a stream item\n+     * @param toStringFn a function that returns a string representation of a\n+     *     stream item. It must be stateless and {@linkplain\n+     *     Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYxMDI4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNzo0MVrOH48hCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNzo0MVrOH48hCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzgwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473801", "createdAt": "2020-11-24T11:27:41Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1054,7 +1092,8 @@ private Sinks() {\n      * item.toString()} into a {@link javax.jms.TextMessage}.\n      *\n      * @param queueName the name of the queue\n-     * @param factorySupplier supplier to obtain JMS connection factory\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYxMDgyOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNzo1MlrOH48hXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNzo1MlrOH48hXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Mzg4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *      javax.jms.XAConnectionFactory}. It must be stateless\n          \n          \n            \n                 *      javax.jms.XAConnectionFactory}. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473885", "createdAt": "2020-11-24T11:27:52Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1110,7 +1149,7 @@ private Sinks() {\n      *\n      * @param factorySupplier supplier to obtain JMS connection factory. For\n      *      exactly-once the factory must implement {@link\n-     *      javax.jms.XAConnectionFactory}\n+     *      javax.jms.XAConnectionFactory}. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYxMTEwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNzo1N1rOH48hig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNzo1N1rOH48hig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzkzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *      javax.jms.XAConnectionFactory}. It must be stateless\n          \n          \n            \n                 *      javax.jms.XAConnectionFactory}. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473930", "createdAt": "2020-11-24T11:27:57Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1131,7 +1170,7 @@ private Sinks() {\n      * @param topicName the name of the queue\n      * @param factorySupplier supplier to obtain JMS connection factory. For\n      *      exactly-once the factory must implement {@link\n-     *      javax.jms.XAConnectionFactory}\n+     *      javax.jms.XAConnectionFactory}. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYxMTU4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyODowM1rOH48hzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyODowM1rOH48hzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Mzk5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473999", "createdAt": "2020-11-24T11:28:03Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1182,6 +1221,8 @@ private Sinks() {\n      * <p>\n      * The default local parallelism for this processor is 1.\n      *\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYxMjA1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyODoxMlrOH48iGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyODoxMlrOH48iGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDA3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                 must be stateless\n          \n          \n            \n                 *                 must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529474075", "createdAt": "2020-11-24T11:28:12Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -187,7 +187,8 @@ private SourceBuilder(\n      * }</pre>\n      *\n      * @param name     a descriptive name for the source (for diagnostic purposes)\n-     * @param createFn a function that creates the source's context object\n+     * @param createFn a function that creates the source's context object. It\n+     *                 must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYxMjM0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyODoxN1rOH48iTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyODoxN1rOH48iTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDEyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                 must be stateless\n          \n          \n            \n                 *                 must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529474126", "createdAt": "2020-11-24T11:28:17Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -247,7 +248,8 @@ private SourceBuilder(\n      * }</pre>\n      *\n      * @param name     a descriptive name for the source (for diagnostic purposes)\n-     * @param createFn a function that creates the source's context object\n+     * @param createFn a function that creates the source's context object. It\n+     *                 must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYxMjcxOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyODoyNFrOH48ihw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyODoyNFrOH48ihw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDE4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529474183", "createdAt": "2020-11-24T11:28:24Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -330,7 +332,8 @@ private SourceBuilder(\n      * if you need to coalesce watermarks from multiple partitions.\n      *\n      * @param name a descriptive name for the source (for diagnostic purposes)\n-     * @param createFn a function that creates the source's context object\n+     * @param createFn a function that creates the source's context object. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYxMzEwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyODozMVrOH48i0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyODozMVrOH48i0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDI1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     state snapshot. It must be stateless\n          \n          \n            \n                     *     state snapshot. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529474257", "createdAt": "2020-11-24T11:28:31Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -416,6 +421,8 @@ private Base() {\n          *         .build();\n          * }</pre>\n          *\n+         * @param createSnapshotFn a function to create an object to store in the\n+         *     state snapshot. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYxNzgzOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyOTo0OFrOH48lvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyOTo0OFrOH48lvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NTAwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     must be stateless\n          \n          \n            \n                     *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529475005", "createdAt": "2020-11-24T11:29:48Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -446,7 +453,8 @@ private BaseNoTimestamps() {\n          * it to other threads. For example, you shouldn't add to it in a\n          * callback of an asynchronous operation.\n          *\n-         * @param fillBufferFn function that fills the buffer with source data\n+         * @param fillBufferFn function that fills the buffer with source data. It\n+         *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYyOTYyOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMjo1OFrOH48sxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMjo1OFrOH48sxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NjgwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     must be stateless\n          \n          \n            \n                     *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529476805", "createdAt": "2020-11-24T11:32:58Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -605,7 +613,8 @@ private TimestampedStream() {\n          * shouldn't pass it to other threads. For example, you shouldn't add\n          * to it in a callback of an asynchronous operation.\n          *\n-         * @param fillBufferFn function that fills the buffer with source data\n+         * @param fillBufferFn function that fills the buffer with source data. It\n+         *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYyOTk3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMzowNVrOH48s_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMzowNVrOH48s_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Njg2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     context. It must be stateless\n          \n          \n            \n                     *     context. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529476863", "createdAt": "2020-11-24T11:33:05Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -699,6 +708,9 @@ private FaultTolerant(B parentBuilder, FunctionEx<? super C, ? extends S> create\n          * figure out which part of the snapshot data pertains to it and it can\n          * do so as explained {@link Base#distributed here}.\n          *\n+         * @param restoreSnapshotFn the function to restore the state into the\n+         *     context. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzMDk1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMzoyMFrOH48tlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMzoyMFrOH48tlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzAxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                  Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                  Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477015", "createdAt": "2020-11-24T11:33:20Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -240,12 +241,13 @@ private Sources() {\n      *\n      * @param mapName the name of the map\n      * @param predicate the predicate to filter the events. If you want to specify just the\n-     *                  projection, use {@link\n-     *                  Predicates#alwaysTrue()} as a pass-through\n-     *                  predicate\n+     *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                  predicate. It must be stateless and {@linkplain\n+     *                  Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzMTI0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMzoyNVrOH48txA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMzoyNVrOH48txA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzA2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477060", "createdAt": "2020-11-24T11:33:25Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -240,12 +241,13 @@ private Sources() {\n      *\n      * @param mapName the name of the map\n      * @param predicate the predicate to filter the events. If you want to specify just the\n-     *                  projection, use {@link\n-     *                  Predicates#alwaysTrue()} as a pass-through\n-     *                  predicate\n+     *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                  predicate. It must be stateless and {@linkplain\n+     *                  Processor#isCooperative() cooperative}\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n-     *                   specify just the predicate, use {@link Projections#identity()}.\n+     *                   specify just the predicate, use {@link Projections#identity()}. It must\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzMTU2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMzozMlrOH48uAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMzozMlrOH48uAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzEyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                   Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                   Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477123", "createdAt": "2020-11-24T11:33:32Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -306,12 +308,13 @@ private Sources() {\n      *\n      * @param map        the Hazelcast map to read data from\n      * @param predicate  the predicate to filter the events. If you want to specify just the\n-     *                   projection, use {@link\n-     *                   Predicates#alwaysTrue()} as a pass-through\n-     *                   predicate\n+     *                   projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                   predicate. It must be stateless and {@linkplain\n+     *                   Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzMTg5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMzozN1rOH48uNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMzozN1rOH48uNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzE3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477174", "createdAt": "2020-11-24T11:33:37Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -306,12 +308,13 @@ private Sources() {\n      *\n      * @param map        the Hazelcast map to read data from\n      * @param predicate  the predicate to filter the events. If you want to specify just the\n-     *                   projection, use {@link\n-     *                   Predicates#alwaysTrue()} as a pass-through\n-     *                   predicate\n+     *                   projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                   predicate. It must be stateless and {@linkplain\n+     *                   Processor#isCooperative() cooperative}\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n-     *                   specify just the predicate, use {@link Projections#identity()}.\n+     *                   specify just the predicate, use {@link Projections#identity()}. It must\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzMjY2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMzo1MVrOH48urA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMzo1MVrOH48urA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *                     Processor#isCooperative() cooperative}\n          \n          \n            \n            *                     Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477292", "createdAt": "2020-11-24T11:33:51Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -366,11 +369,13 @@ private Sources() {\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n *                     null} for an item, that item will be filtered out. You may use {@link\n *                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+*                     the new value. It must be stateless and {@linkplain\n+*                     Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzMzA0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMzo1N1rOH48u6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozMzo1N1rOH48u6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzM1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *                     {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n            *                     {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477352", "createdAt": "2020-11-24T11:33:57Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -366,11 +369,13 @@ private Sources() {\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n *                     null} for an item, that item will be filtered out. You may use {@link\n *                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+*                     the new value. It must be stateless and {@linkplain\n+*                     Processor#isCooperative() cooperative}\n      * @param predicateFn  the predicate to filter the events. If you want to specify just the\n *                     projection, use {@link Util#mapPutEvents} to pass\n *                     only {@link EntryEventType#ADDED ADDED} and\n-*                     {@link EntryEventType#UPDATED UPDATED} events.\n+*                     {@link EntryEventType#UPDATED UPDATED} events. It must be stateless and\n+*                     {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzNDg2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNDoyN1rOH48wFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNDoyN1rOH48wFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzY1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477652", "createdAt": "2020-11-24T11:34:27Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -446,13 +451,14 @@ private Sources() {\n      * @param map          the map to read data from\n      * @param initialPos   describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzNTM2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNDozNVrOH48wXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNDozNVrOH48wXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzcyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     cooperative}\n          \n          \n            \n                 *                     cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477724", "createdAt": "2020-11-24T11:34:35Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -446,13 +451,14 @@ private Sources() {\n      * @param map          the map to read data from\n      * @param initialPos   describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n      * @param predicateFn  the predicate to filter the events. If you want to specify just the\n-*                     projection, use {@link Util#mapPutEvents} to pass\n-*                     only {@link EntryEventType#ADDED ADDED} and\n-*                     {@link EntryEventType#UPDATED UPDATED} events.\n+     *                     projection, use {@link Util#mapPutEvents} to pass only {@link\n+     *                     EntryEventType#ADDED ADDED} and {@link EntryEventType#UPDATED UPDATED}\n+     *                     events. It must be stateless and {@linkplain Processor#isCooperative()\n+     *                     cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzNjExOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNDo0NlrOH48w0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNDo0NlrOH48w0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Nzg0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                  Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                  Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477840", "createdAt": "2020-11-24T11:34:46Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -569,11 +575,13 @@ private Sources() {\n      *\n      * @param mapName the name of the map\n      * @param predicate the predicate to filter the events. If you want to specify just the\n-     *                  projection, use {@link Predicates#alwaysTrue()}\n-     *                  as a pass-through predicate\n+     *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                  predicate. It must be stateless and {@linkplain\n+     *                  Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzNjQ0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNDo1MVrOH48xCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNDo1MVrOH48xCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Nzg5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477896", "createdAt": "2020-11-24T11:34:51Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -569,11 +575,13 @@ private Sources() {\n      *\n      * @param mapName the name of the map\n      * @param predicate the predicate to filter the events. If you want to specify just the\n-     *                  projection, use {@link Predicates#alwaysTrue()}\n-     *                  as a pass-through predicate\n+     *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                  predicate. It must be stateless and {@linkplain\n+     *                  Processor#isCooperative() cooperative}\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n-     *                   specify just the predicate, use {@link Projections#identity()}.\n+     *                   specify just the predicate, use {@link Projections#identity()}. It must\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzNjk4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNDo1OFrOH48xUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNDo1OFrOH48xUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Nzk3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477970", "createdAt": "2020-11-24T11:34:58Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -627,13 +635,13 @@ private Sources() {\n      * @param clientConfig configuration for the client to connect to the remote cluster\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzNzQ4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNTowNFrOH48xmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNTowNFrOH48xmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODA0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                    {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                    {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478043", "createdAt": "2020-11-24T11:35:04Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -627,13 +635,13 @@ private Sources() {\n      * @param clientConfig configuration for the client to connect to the remote cluster\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n      * @param predicateFn the predicate to filter the events. You may use {@link\n-*                    Util#mapPutEvents} to pass only {@link\n-*                    EntryEventType#ADDED ADDED} and {@link EntryEventType#UPDATED UPDATED}\n-*                    events.\n+     *                    Util#mapPutEvents} to pass only {@link EntryEventType#ADDED ADDED} and\n+     *                    {@link EntryEventType#UPDATED UPDATED} events. It must be stateless and\n+     *                    {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzNzg2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNTowOVrOH48xzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNTowOVrOH48xzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODA5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478095", "createdAt": "2020-11-24T11:35:09Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -725,13 +733,13 @@ private Sources() {\n      * @param cacheName the name of the cache\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#cacheEventToEntry()} to extract just the key\n-*                     and the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzODQ2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNToxN1rOH48yIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNToxN1rOH48yIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODE3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                    stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                    stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478177", "createdAt": "2020-11-24T11:35:17Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -725,13 +733,13 @@ private Sources() {\n      * @param cacheName the name of the cache\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#cacheEventToEntry()} to extract just the key\n-*                     and the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n      * @param predicateFn the predicate to filter the events. You may use {@link\n-*                    Util#cachePutEvents()} to pass only {@link\n-*                    CacheEventType#CREATED CREATED} and {@link\n-*                    CacheEventType#UPDATED UPDATED} events.\n+     *                    Util#cachePutEvents()} to pass only {@link CacheEventType#CREATED\n+     *                    CREATED} and {@link CacheEventType#UPDATED UPDATED} events. It must be\n+     *                    stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzODc3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNToyM1rOH48yUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNToyM1rOH48yUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODIyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478226", "createdAt": "2020-11-24T11:35:23Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -821,13 +829,13 @@ private Sources() {\n      * @param clientConfig configuration for the client to connect to the remote cluster\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#cacheEventToEntry()} to extract just the key\n-*                     and the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzOTE4OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNTozMFrOH48yig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNTozMFrOH48yig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODI4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                    stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                    stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478282", "createdAt": "2020-11-24T11:35:30Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -821,13 +829,13 @@ private Sources() {\n      * @param clientConfig configuration for the client to connect to the remote cluster\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#cacheEventToEntry()} to extract just the key\n-*                     and the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n      * @param predicateFn the predicate to filter the events. You may use {@link\n-*                    Util#cachePutEvents()} to pass only {@link\n-*                    CacheEventType#CREATED CREATED} and {@link\n-*                    CacheEventType#UPDATED UPDATED} events.\n+     *                    Util#cachePutEvents()} to pass only {@link CacheEventType#CREATED\n+     *                    CREATED} and {@link CacheEventType#UPDATED UPDATED} events. It must be\n+     *                    stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYzOTQ5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNTozNlrOH48yuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNTozNlrOH48yuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODMyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478328", "createdAt": "2020-11-24T11:35:36Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -1137,7 +1145,8 @@ public static FileSourceBuilder filesBuilder(@Nonnull String directory) {\n      * builder} and add a projection.\n      *\n      * @param name            the name of the queue\n-     * @param factorySupplier supplier to obtain JMS connection factory\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDY0MDAzOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNTo0M1rOH48zBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNTo0M1rOH48zBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODQwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478407", "createdAt": "2020-11-24T11:35:43Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -1170,6 +1179,9 @@ public static FileSourceBuilder filesBuilder(@Nonnull String directory) {\n      * provider documentation for details.\n      * <p>\n      * The default local parallelism for this processor is 1.\n+     *\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDY0MDQxOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNTo1MFrOH48zRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNTo1MFrOH48zRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODQ3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478470", "createdAt": "2020-11-24T11:35:50Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -1206,7 +1218,8 @@ public static JmsSourceBuilder jmsQueueBuilder(SupplierEx<? extends ConnectionFa\n      * builder} and add a projection.\n      *\n      * @param name            the name of the queue\n-     * @param factorySupplier supplier to obtain JMS connection factory\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDY0MDk2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNTo1N1rOH48zlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNTo1N1rOH48zlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODU1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478551", "createdAt": "2020-11-24T11:35:57Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -1244,6 +1257,9 @@ public static JmsSourceBuilder jmsQueueBuilder(SupplierEx<? extends ConnectionFa\n      * provider documentation for details.\n      * <p>\n      * The default local parallelism for this processor is 1.\n+     *\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDY0MTcwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StageWithWindow.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNjoxMFrOH480Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNjoxMFrOH480Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODY3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478670", "createdAt": "2020-11-24T11:36:10Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StageWithWindow.java", "diffHunk": "@@ -66,7 +67,8 @@\n      * job otherwise. Also make sure that it implements {@code equals()} and\n      * {@code hashCode()}.\n      *\n-     * @param keyFn function that extracts the grouping key\n+     * @param keyFn function that extracts the grouping key. It must be\n+     *     stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDY0MjMxOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamHashJoinBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNjoxOVrOH480dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNjoxOVrOH480dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODc3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478773", "createdAt": "2020-11-24T11:36:19Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamHashJoinBuilder.java", "diffHunk": "@@ -47,6 +48,8 @@\n      * Builds a new pipeline stage that performs the hash-join operation. Attaches\n      * the stage to all the contributing stages.\n      *\n+     * @param mapToOutputFn the function to map the output item. It must be\n+     *     stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDY0MzAwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamSourceStage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNjoyOVrOH4806w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNjoyOVrOH4806w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODg5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                    Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                    Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478891", "createdAt": "2020-11-24T11:36:29Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamSourceStage.java", "diffHunk": "@@ -113,7 +114,8 @@\n      * #withIngestionTimestamps()}.\n      *\n      * @param timestampFn a function that returns the timestamp for each item, typically in\n-     *                    milliseconds\n+     *                    milliseconds. It must be stateless and {@linkplain\n+     *                    Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMwNjE5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMjozM1rOH5DHFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMjozM1rOH5DHFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MTg0Nw==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529581847", "createdAt": "2020-11-24T14:22:33Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java", "diffHunk": "@@ -41,13 +45,19 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMwNjY5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMjozN1rOH5DHWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMjozN1rOH5DHWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MTkxMw==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529581913", "createdAt": "2020-11-24T14:22:37Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java", "diffHunk": "@@ -41,13 +45,19 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T> accumulateFn();\n \n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMwNzQ1OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMjo0OVrOH5DH4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMjo0OVrOH5DH4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjA1MQ==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582051", "createdAt": "2020-11-24T14:22:49Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "diffHunk": "@@ -51,20 +55,29 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMwNzc0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMjo1NFrOH5DIFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMjo1NFrOH5DIFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjEwMw==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582103", "createdAt": "2020-11-24T14:22:54Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "diffHunk": "@@ -51,20 +55,29 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMwODIwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzowMFrOH5DIWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzowMFrOH5DIWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjE2OA==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582168", "createdAt": "2020-11-24T14:23:00Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "diffHunk": "@@ -51,20 +55,29 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T1> accumulateFn1();\n \n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 0 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMwODUyOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzowNFrOH5DIjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzowNFrOH5DIjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjIyMQ==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582221", "createdAt": "2020-11-24T14:23:04Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "diffHunk": "@@ -74,6 +87,9 @@\n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 1 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMwOTA5OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzoxM1rOH5DI6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzoxM1rOH5DI6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjMxMw==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582313", "createdAt": "2020-11-24T14:23:13Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -53,27 +57,39 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMwOTM3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzoxN1rOH5DJGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzoxN1rOH5DJGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjM2MQ==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582361", "createdAt": "2020-11-24T14:23:17Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -53,27 +57,39 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMwOTYwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzoyMFrOH5DJQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzoyMFrOH5DJQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjQwMA==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582400", "createdAt": "2020-11-24T14:23:20Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -53,27 +57,39 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T1> accumulateFn1();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-2.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMwOTkwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzoyNVrOH5DJeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzoyNVrOH5DJeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjQ1Ng==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582456", "createdAt": "2020-11-24T14:23:25Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -53,27 +57,39 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T1> accumulateFn1();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-2.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T2> accumulateFn2();\n \n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 0 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMxMDEwOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzoyOFrOH5DJnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzoyOFrOH5DJnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjQ5Mw==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582493", "createdAt": "2020-11-24T14:23:28Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -83,6 +99,9 @@\n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 1 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMxMDMxOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzozMVrOH5DJwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzozMVrOH5DJwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjUyOQ==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582529", "createdAt": "2020-11-24T14:23:31Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -92,6 +111,9 @@\n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 2 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMxMTY0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzo0OFrOH5DKlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzo0OFrOH5DKlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4Mjc0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *              Processor#isCooperative() cooperative}\n          \n          \n            \n                 *              Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582743", "createdAt": "2020-11-24T14:23:48Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -63,7 +64,8 @@\n      * aggregate operation.\n      *\n      * @param accumulateFn the {@code accumulate} primitive, parameters are\n-     *              {@code (accumulator, item)}\n+     *              {@code (accumulator, item)}. It must be stateless and {@linkplain\n+     *              Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMxMjAyOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzo1NlrOH5DK8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMzo1NlrOH5DK8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjgzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582832", "createdAt": "2020-11-24T14:23:56Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -78,7 +80,8 @@\n      * primitive for stream-0. Also selects the fixed-arity variant of the\n      * aggregate operation.\n      *\n-     * @param accumulateFn0 the {@code accumulate} primitive for stream-0\n+     * @param accumulateFn0 the {@code accumulate} primitive for stream-0. It\n+     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMxMjU2OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyNDowMlrOH5DLQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyNDowMlrOH5DLQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjkxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582912", "createdAt": "2020-11-24T14:24:02Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -104,7 +107,8 @@\n      * variable-arity variant of the aggregate operation.\n      *\n      * @param tag the tag of the associated input stream\n-     * @param accumulateFn the {@code accumulate} primitive\n+     * @param accumulateFn the {@code accumulate} primitive. It must be\n+     *     stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMxMzAxOnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyNDowN1rOH5DLhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyNDowN1rOH5DLhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4Mjk4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582982", "createdAt": "2020-11-24T14:24:07Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -146,7 +150,8 @@\n          * Registers the {@link AggregateOperation2#accumulateFn1()} accumulate}\n          * primitive for stream-1, returning the arity-2 variant of the builder.\n          *\n-         * @param accumulateFn1 the {@code accumulate} primitive for stream-1\n+         * @param accumulateFn1 the {@code accumulate} primitive for stream-1. It\n+         *     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMxNDA3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyNDoyMlrOH5DMNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyNDoyMlrOH5DMNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MzE1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529583156", "createdAt": "2020-11-24T14:24:22Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -268,7 +288,8 @@\n          * Registers the {@link AggregateOperation3#accumulateFn2() accumulate}\n          * primitive for stream-2, returning the arity-3 variant of the builder.\n          *\n-         * @param accumulateFn2 the {@code accumulate} primitive for stream-2\n+         * @param accumulateFn2 the {@code accumulate} primitive for stream-2. It\n+         *     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMxNTI0OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyNDozN1rOH5DM8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyNDozN1rOH5DM8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MzM0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                     *     stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529583346", "createdAt": "2020-11-24T14:24:37Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -496,7 +547,8 @@\n          * primitive for the stream tagged with the supplied tag.\n          *\n          * @param tag the tag of the associated input stream\n-         * @param accumulateFn the {@code accumulate} primitive\n+         * @param accumulateFn the {@code accumulate} primitive. It must be\n+         *     stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMxNjU3OnYy", "diffSide": "RIGHT", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyNDo1MVrOH5DNtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyNDo1MVrOH5DNtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MzU0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529583540", "createdAt": "2020-11-24T14:24:51Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperations.java", "diffHunk": "@@ -115,7 +116,9 @@ private AggregateOperations() {\n      * <strong>Note:</strong> if the sum exceeds {@code Long.MAX_VALUE}, the job\n      * will fail with an {@code ArithmeticException}.\n      *\n-     * @param getLongValueFn function that extracts the {@code long} values you want to sum\n+     * @param getLongValueFn function that extracts the {@code long} values you\n+     *     want to sum. It must be stateless and {@linkplain\n+     *     Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4487, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}