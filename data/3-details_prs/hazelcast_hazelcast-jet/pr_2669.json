{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNzU3MjQy", "number": 2669, "title": "Document function need to be stateless, cooperative", "bodyText": "Fixes #2661", "createdAt": "2020-11-16T15:57:40Z", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669", "merged": true, "mergeCommit": {"oid": "984046087825b8f7fe02a6b759ba21fee3ca872c"}, "closed": true, "closedAt": "2020-11-30T16:28:26Z", "author": {"login": "viliam-durina"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddHGEOAH2gAyNTIxNzU3MjQyOjQxYTg1NDM3Nzg0NTRmZWY5ZWQ0M2Q5MWEzYjQ4NmJiYzdlOWY3MDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhmxs8gFqTU0MDk5Njk3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702", "author": {"user": {"login": "viliam-durina", "name": "Viliam Durina"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/41a8543778454fef9ed43d91a3b486bbc7e9f702", "committedDate": "2020-11-16T15:57:00Z", "message": "Document function need to be stateless, cooperative\n\nFixes #2661"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3Mzg3MTU5", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#pullrequestreview-537387159", "createdAt": "2020-11-24T11:12:52Z", "commit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "state": "COMMENTED", "comments": {"totalCount": 51, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToxMjo1M1rOH47_QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNjoyOVrOH4806w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2NTE1Mw==", "bodyText": "There's an extra indenting space here (and elsewhere).", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529465153", "createdAt": "2020-11-24T11:12:53Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java", "diffHunk": "@@ -124,8 +128,11 @@\n      * properly implement {@code equals()}. See {@link #deductFn()} for an\n      * explanation.\n      * <p>\n-     * The returned accumulator must be serializable. For performance, you\n-     * should prefer Hazelcast custom serialization.\n+     * The accumulator produced by the supplier must be serializable. For\n+     * performance, you should prefer Hazelcast custom serialization.\n+     * <p>\n+     *  The supplier must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2NTQ5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * from the results. I.e.:\n          \n          \n            \n                 * from the results. For example:", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529465490", "createdAt": "2020-11-24T11:13:29Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation.java", "diffHunk": "@@ -188,7 +204,16 @@\n      * to determine whether the accumulator is now \"empty\" (i.e., equal to a\n      * fresh instance), which signals that the current window contains no more\n      * items with the associated grouping key and the entry must be removed\n-     * from the results.\n+     * from the results. I.e.:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MDYwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                  Jet's {@link Traverser}. It must not return null traverser, but can\n          \n          \n            \n                 *                  Jet's {@link Traverser}. It must not return a null traverser, but can", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529470601", "createdAt": "2020-11-24T11:22:14Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/GeneralStage.java", "diffHunk": "@@ -102,10 +105,10 @@\n      * stage.flatMap(sentence -> traverseArray(sentence.split(\"\\\\W+\")))\n      * }</pre>\n      *\n-     * @param flatMapFn a stateless flatmapping function, whose result type is\n-     *                  Jet's {@link Traverser}. It must not return null\n-     *                  traverser, but can return an {@linkplain\n-     *                  Traversers#empty() empty traverser}.\n+     * @param flatMapFn a flatmapping function, whose result type is\n+     *                  Jet's {@link Traverser}. It must not return null traverser, but can", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MTc2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                        Jet member. It must be stateless\n          \n          \n            \n                 *                        Jet member. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529471761", "createdAt": "2020-11-24T11:24:20Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -138,10 +138,10 @@ private ServiceFactories() { }\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once on each\n-     *                        Jet member.\n+     *                        Jet member. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MTgyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                         service. It must be stateless\n          \n          \n            \n                 *                         service. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529471828", "createdAt": "2020-11-24T11:24:28Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -138,10 +138,10 @@ private ServiceFactories() { }\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once on each\n-     *                        Jet member.\n+     *                        Jet member. It must be stateless\n      * @param destroyServiceFn the function that destroys the service. It will be called once on each\n      *                         Jet member. It can be used to tear down any resources acquired by the\n-     *                         service.\n+     *                         service. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjMzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                        processor instance. It must be stateless\n          \n          \n            \n                 *                        processor instance. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472336", "createdAt": "2020-11-24T11:25:16Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -199,10 +199,10 @@ private ServiceFactories() { }\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once per\n-     *                        processor instance.\n+     *                        processor instance. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjQzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                         acquired by the service. It must be stateless\n          \n          \n            \n                 *                         acquired by the service. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472435", "createdAt": "2020-11-24T11:25:22Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactories.java", "diffHunk": "@@ -199,10 +199,10 @@ private ServiceFactories() { }\n      * for blocking code.\n      *\n      * @param createServiceFn the function that creates the service. It will be called once per\n-     *                        processor instance.\n+     *                        processor instance. It must be stateless\n      * @param destroyServiceFn the function that destroys the service. It will be called once per\n      *                         processor instance. It can be used to tear down any resources\n-     *                         acquired by the service.\n+     *                         acquired by the service. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjU4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                        stateless\n          \n          \n            \n                 *                        stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472584", "createdAt": "2020-11-24T11:25:35Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -137,7 +137,8 @@ private ServiceFactory(@Nonnull FunctionEx<? super ProcessorSupplier.Context, ?\n      * for blocking code.\n      *\n      * @param createContextFn the function to create new context object, given a {@link\n-     *                        ProcessorSupplier.Context}. Called once per Jet member.\n+     *                        ProcessorSupplier.Context}. Called once per Jet member. It must be\n+     *                        stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjY3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     context. It must be stateless\n          \n          \n            \n                 *     context. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472677", "createdAt": "2020-11-24T11:25:44Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -158,7 +159,8 @@ private ServiceFactory(@Nonnull FunctionEx<? super ProcessorSupplier.Context, ?\n      * Jet calls this function at the end of the job for each shared context\n      * object it created (one on each cluster member).\n      *\n-     * @param destroyContextFn the function to destroy the shared service context\n+     * @param destroyContextFn the function to destroy the shared service\n+     *     context. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Mjc0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     It must be stateless\n          \n          \n            \n                 *     It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472747", "createdAt": "2020-11-24T11:25:50Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -186,7 +188,8 @@ private ServiceFactory(@Nonnull FunctionEx<? super ProcessorSupplier.Context, ?\n      * this method resets any pre-existing {@code destroyService} function to a\n      * no-op.\n      *\n-     * @param createServiceFn the function that creates the service instance\n+     * @param createServiceFn the function that creates the service instance.\n+     *     It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjgwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                         stateless\n          \n          \n            \n                 *                         stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472805", "createdAt": "2020-11-24T11:25:57Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/ServiceFactory.java", "diffHunk": "@@ -208,7 +211,8 @@ private ServiceFactory(@Nonnull FunctionEx<? super ProcessorSupplier.Context, ?\n      * created services objects.\n      *\n      * @param destroyServiceFn the function to destroy the service instance.\n-     *                         This function is called once per processor instance\n+     *                         This function is called once per processor instance. It must be\n+     *                         stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MjkwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     processor context. It must be stateless\n          \n          \n            \n                 *     processor context. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472901", "createdAt": "2020-11-24T11:26:09Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java", "diffHunk": "@@ -82,14 +82,20 @@ private SinkBuilder(\n      * </li><li>\n      *     {@code destroyFn} destroys the context. This component is optional.\n      * </li></ol>\n+     *\n      * The returned sink will be non-cooperative and will have preferred local\n      * parallelism of 1. It doesn't participate in the fault-tolerance protocol,\n      * which means you can't remember across a job restart which items you\n      * already received. The sink will still receive each item at least once,\n      * thus complying with the <em>at-least-once</em> processing guarantee. If\n      * the sink is idempotent (suppresses duplicate items), it will also be\n      * compatible with the <em>exactly-once</em> guarantee.\n+     * <p>\n+     * All the functions must be stateless.\n      *\n+     * @param name the name of the processor\n+     * @param createFn the function to create the sink context, given a\n+     *     processor context. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Mjk5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     stateless\n          \n          \n            \n                 *     stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529472993", "createdAt": "2020-11-24T11:26:18Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java", "diffHunk": "@@ -131,7 +138,8 @@ private SinkBuilder(\n      * You are not required to provide this function in case your implementation\n      * doesn't need it.\n      *\n-     * @param flushFn the optional \"flush the context\" function\n+     * @param flushFn the optional \"flush the context\" function. It must be\n+     *     stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzAzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473035", "createdAt": "2020-11-24T11:26:24Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SinkBuilder.java", "diffHunk": "@@ -149,7 +157,8 @@ private SinkBuilder(\n      * You are not required to provide this function in case your implementation\n      * doesn't need it.\n      *\n-     * @param destroyFn the optional \"destroy the context object\" function\n+     * @param destroyFn the optional \"destroy the context object\" function. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzE3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     cooperative}\n          \n          \n            \n                 *     cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473179", "createdAt": "2020-11-24T11:26:38Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -107,7 +108,9 @@ private Sinks() {\n      *\n      * @param sinkName user-friendly sink name\n      * @param metaSupplier the processor meta-supplier\n-     * @param partitionKeyFn key extractor function for partitioning edges to sink\n+     * @param partitionKeyFn key extractor function for partitioning edges to\n+     *     sink. It must be stateless and {@linkplain Processor#isCooperative()\n+     *     cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzY1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473657", "createdAt": "2020-11-24T11:27:24Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -872,6 +902,12 @@ private Sinks() {\n      * guarantee.\n      * <p>\n      * The default local parallelism for this sink is 1.\n+     *\n+     * @param host the host to connect to\n+     * @param port the target port\n+     * @param toStringFn a function to convert received items to string. It\n+     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzcyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473728", "createdAt": "2020-11-24T11:27:32Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1022,7 +1058,9 @@ private Sinks() {\n      * <p>\n      * The default local parallelism for this sink is 1.\n      *\n-     * @param toStringFn a function that returns a string representation of a stream item\n+     * @param toStringFn a function that returns a string representation of a\n+     *     stream item. It must be stateless and {@linkplain\n+     *     Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzgwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473801", "createdAt": "2020-11-24T11:27:41Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1054,7 +1092,8 @@ private Sinks() {\n      * item.toString()} into a {@link javax.jms.TextMessage}.\n      *\n      * @param queueName the name of the queue\n-     * @param factorySupplier supplier to obtain JMS connection factory\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Mzg4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *      javax.jms.XAConnectionFactory}. It must be stateless\n          \n          \n            \n                 *      javax.jms.XAConnectionFactory}. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473885", "createdAt": "2020-11-24T11:27:52Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1110,7 +1149,7 @@ private Sinks() {\n      *\n      * @param factorySupplier supplier to obtain JMS connection factory. For\n      *      exactly-once the factory must implement {@link\n-     *      javax.jms.XAConnectionFactory}\n+     *      javax.jms.XAConnectionFactory}. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzkzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *      javax.jms.XAConnectionFactory}. It must be stateless\n          \n          \n            \n                 *      javax.jms.XAConnectionFactory}. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473930", "createdAt": "2020-11-24T11:27:57Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1131,7 +1170,7 @@ private Sinks() {\n      * @param topicName the name of the queue\n      * @param factorySupplier supplier to obtain JMS connection factory. For\n      *      exactly-once the factory must implement {@link\n-     *      javax.jms.XAConnectionFactory}\n+     *      javax.jms.XAConnectionFactory}. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Mzk5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529473999", "createdAt": "2020-11-24T11:28:03Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sinks.java", "diffHunk": "@@ -1182,6 +1221,8 @@ private Sinks() {\n      * <p>\n      * The default local parallelism for this processor is 1.\n      *\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDA3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                 must be stateless\n          \n          \n            \n                 *                 must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529474075", "createdAt": "2020-11-24T11:28:12Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -187,7 +187,8 @@ private SourceBuilder(\n      * }</pre>\n      *\n      * @param name     a descriptive name for the source (for diagnostic purposes)\n-     * @param createFn a function that creates the source's context object\n+     * @param createFn a function that creates the source's context object. It\n+     *                 must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDEyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                 must be stateless\n          \n          \n            \n                 *                 must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529474126", "createdAt": "2020-11-24T11:28:17Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -247,7 +248,8 @@ private SourceBuilder(\n      * }</pre>\n      *\n      * @param name     a descriptive name for the source (for diagnostic purposes)\n-     * @param createFn a function that creates the source's context object\n+     * @param createFn a function that creates the source's context object. It\n+     *                 must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDE4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529474183", "createdAt": "2020-11-24T11:28:24Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -330,7 +332,8 @@ private SourceBuilder(\n      * if you need to coalesce watermarks from multiple partitions.\n      *\n      * @param name a descriptive name for the source (for diagnostic purposes)\n-     * @param createFn a function that creates the source's context object\n+     * @param createFn a function that creates the source's context object. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDI1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     state snapshot. It must be stateless\n          \n          \n            \n                     *     state snapshot. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529474257", "createdAt": "2020-11-24T11:28:31Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -416,6 +421,8 @@ private Base() {\n          *         .build();\n          * }</pre>\n          *\n+         * @param createSnapshotFn a function to create an object to store in the\n+         *     state snapshot. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NTAwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     must be stateless\n          \n          \n            \n                     *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529475005", "createdAt": "2020-11-24T11:29:48Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -446,7 +453,8 @@ private BaseNoTimestamps() {\n          * it to other threads. For example, you shouldn't add to it in a\n          * callback of an asynchronous operation.\n          *\n-         * @param fillBufferFn function that fills the buffer with source data\n+         * @param fillBufferFn function that fills the buffer with source data. It\n+         *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NjgwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     must be stateless\n          \n          \n            \n                     *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529476805", "createdAt": "2020-11-24T11:32:58Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -605,7 +613,8 @@ private TimestampedStream() {\n          * shouldn't pass it to other threads. For example, you shouldn't add\n          * to it in a callback of an asynchronous operation.\n          *\n-         * @param fillBufferFn function that fills the buffer with source data\n+         * @param fillBufferFn function that fills the buffer with source data. It\n+         *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Njg2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     context. It must be stateless\n          \n          \n            \n                     *     context. It must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529476863", "createdAt": "2020-11-24T11:33:05Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/SourceBuilder.java", "diffHunk": "@@ -699,6 +708,9 @@ private FaultTolerant(B parentBuilder, FunctionEx<? super C, ? extends S> create\n          * figure out which part of the snapshot data pertains to it and it can\n          * do so as explained {@link Base#distributed here}.\n          *\n+         * @param restoreSnapshotFn the function to restore the state into the\n+         *     context. It must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzAxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                  Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                  Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477015", "createdAt": "2020-11-24T11:33:20Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -240,12 +241,13 @@ private Sources() {\n      *\n      * @param mapName the name of the map\n      * @param predicate the predicate to filter the events. If you want to specify just the\n-     *                  projection, use {@link\n-     *                  Predicates#alwaysTrue()} as a pass-through\n-     *                  predicate\n+     *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                  predicate. It must be stateless and {@linkplain\n+     *                  Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzA2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477060", "createdAt": "2020-11-24T11:33:25Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -240,12 +241,13 @@ private Sources() {\n      *\n      * @param mapName the name of the map\n      * @param predicate the predicate to filter the events. If you want to specify just the\n-     *                  projection, use {@link\n-     *                  Predicates#alwaysTrue()} as a pass-through\n-     *                  predicate\n+     *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                  predicate. It must be stateless and {@linkplain\n+     *                  Processor#isCooperative() cooperative}\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n-     *                   specify just the predicate, use {@link Projections#identity()}.\n+     *                   specify just the predicate, use {@link Projections#identity()}. It must\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzEyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                   Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                   Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477123", "createdAt": "2020-11-24T11:33:32Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -306,12 +308,13 @@ private Sources() {\n      *\n      * @param map        the Hazelcast map to read data from\n      * @param predicate  the predicate to filter the events. If you want to specify just the\n-     *                   projection, use {@link\n-     *                   Predicates#alwaysTrue()} as a pass-through\n-     *                   predicate\n+     *                   projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                   predicate. It must be stateless and {@linkplain\n+     *                   Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzE3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477174", "createdAt": "2020-11-24T11:33:37Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -306,12 +308,13 @@ private Sources() {\n      *\n      * @param map        the Hazelcast map to read data from\n      * @param predicate  the predicate to filter the events. If you want to specify just the\n-     *                   projection, use {@link\n-     *                   Predicates#alwaysTrue()} as a pass-through\n-     *                   predicate\n+     *                   projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                   predicate. It must be stateless and {@linkplain\n+     *                   Processor#isCooperative() cooperative}\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n-     *                   specify just the predicate, use {@link Projections#identity()}.\n+     *                   specify just the predicate, use {@link Projections#identity()}. It must\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzI5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *                     Processor#isCooperative() cooperative}\n          \n          \n            \n            *                     Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477292", "createdAt": "2020-11-24T11:33:51Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -366,11 +369,13 @@ private Sources() {\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n *                     null} for an item, that item will be filtered out. You may use {@link\n *                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+*                     the new value. It must be stateless and {@linkplain\n+*                     Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzM1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *                     {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n            *                     {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477352", "createdAt": "2020-11-24T11:33:57Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -366,11 +369,13 @@ private Sources() {\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n *                     null} for an item, that item will be filtered out. You may use {@link\n *                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+*                     the new value. It must be stateless and {@linkplain\n+*                     Processor#isCooperative() cooperative}\n      * @param predicateFn  the predicate to filter the events. If you want to specify just the\n *                     projection, use {@link Util#mapPutEvents} to pass\n *                     only {@link EntryEventType#ADDED ADDED} and\n-*                     {@link EntryEventType#UPDATED UPDATED} events.\n+*                     {@link EntryEventType#UPDATED UPDATED} events. It must be stateless and\n+*                     {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzY1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477652", "createdAt": "2020-11-24T11:34:27Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -446,13 +451,14 @@ private Sources() {\n      * @param map          the map to read data from\n      * @param initialPos   describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzcyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     cooperative}\n          \n          \n            \n                 *                     cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477724", "createdAt": "2020-11-24T11:34:35Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -446,13 +451,14 @@ private Sources() {\n      * @param map          the map to read data from\n      * @param initialPos   describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n      * @param predicateFn  the predicate to filter the events. If you want to specify just the\n-*                     projection, use {@link Util#mapPutEvents} to pass\n-*                     only {@link EntryEventType#ADDED ADDED} and\n-*                     {@link EntryEventType#UPDATED UPDATED} events.\n+     *                     projection, use {@link Util#mapPutEvents} to pass only {@link\n+     *                     EntryEventType#ADDED ADDED} and {@link EntryEventType#UPDATED UPDATED}\n+     *                     events. It must be stateless and {@linkplain Processor#isCooperative()\n+     *                     cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Nzg0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                  Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                  Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477840", "createdAt": "2020-11-24T11:34:46Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -569,11 +575,13 @@ private Sources() {\n      *\n      * @param mapName the name of the map\n      * @param predicate the predicate to filter the events. If you want to specify just the\n-     *                  projection, use {@link Predicates#alwaysTrue()}\n-     *                  as a pass-through predicate\n+     *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                  predicate. It must be stateless and {@linkplain\n+     *                  Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Nzg5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                   be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477896", "createdAt": "2020-11-24T11:34:51Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -569,11 +575,13 @@ private Sources() {\n      *\n      * @param mapName the name of the map\n      * @param predicate the predicate to filter the events. If you want to specify just the\n-     *                  projection, use {@link Predicates#alwaysTrue()}\n-     *                  as a pass-through predicate\n+     *                  projection, use {@link Predicates#alwaysTrue()} as a pass-through\n+     *                  predicate. It must be stateless and {@linkplain\n+     *                  Processor#isCooperative() cooperative}\n      * @param projection the projection to map the events. If the projection returns a {@code\n      *                   null} for an item, that item will be filtered out. If you want to\n-     *                   specify just the predicate, use {@link Projections#identity()}.\n+     *                   specify just the predicate, use {@link Projections#identity()}. It must\n+     *                   be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3Nzk3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529477970", "createdAt": "2020-11-24T11:34:58Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -627,13 +635,13 @@ private Sources() {\n      * @param clientConfig configuration for the client to connect to the remote cluster\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODA0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                    {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                    {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478043", "createdAt": "2020-11-24T11:35:04Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -627,13 +635,13 @@ private Sources() {\n      * @param clientConfig configuration for the client to connect to the remote cluster\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#mapEventToEntry()} to extract just the key and\n-*                     the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#mapEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n      * @param predicateFn the predicate to filter the events. You may use {@link\n-*                    Util#mapPutEvents} to pass only {@link\n-*                    EntryEventType#ADDED ADDED} and {@link EntryEventType#UPDATED UPDATED}\n-*                    events.\n+     *                    Util#mapPutEvents} to pass only {@link EntryEventType#ADDED ADDED} and\n+     *                    {@link EntryEventType#UPDATED UPDATED} events. It must be stateless and\n+     *                    {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODA5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478095", "createdAt": "2020-11-24T11:35:09Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -725,13 +733,13 @@ private Sources() {\n      * @param cacheName the name of the cache\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#cacheEventToEntry()} to extract just the key\n-*                     and the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODE3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                    stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                    stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478177", "createdAt": "2020-11-24T11:35:17Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -725,13 +733,13 @@ private Sources() {\n      * @param cacheName the name of the cache\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#cacheEventToEntry()} to extract just the key\n-*                     and the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n      * @param predicateFn the predicate to filter the events. You may use {@link\n-*                    Util#cachePutEvents()} to pass only {@link\n-*                    CacheEventType#CREATED CREATED} and {@link\n-*                    CacheEventType#UPDATED UPDATED} events.\n+     *                    Util#cachePutEvents()} to pass only {@link CacheEventType#CREATED\n+     *                    CREATED} and {@link CacheEventType#UPDATED UPDATED} events. It must be\n+     *                    stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODIyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478226", "createdAt": "2020-11-24T11:35:23Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -821,13 +829,13 @@ private Sources() {\n      * @param clientConfig configuration for the client to connect to the remote cluster\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#cacheEventToEntry()} to extract just the key\n-*                     and the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODI4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                    stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                    stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478282", "createdAt": "2020-11-24T11:35:30Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -821,13 +829,13 @@ private Sources() {\n      * @param clientConfig configuration for the client to connect to the remote cluster\n      * @param initialPos describes which event to start receiving from\n      * @param projectionFn the projection to map the events. If the projection returns a {@code\n-*                     null} for an item, that item will be filtered out. You may use {@link\n-*                     Util#cacheEventToEntry()} to extract just the key\n-*                     and the new value.\n+     *                     null} for an item, that item will be filtered out. You may use {@link\n+     *                     Util#cacheEventToEntry()} to extract just the key and the new value. It\n+     *                     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n      * @param predicateFn the predicate to filter the events. You may use {@link\n-*                    Util#cachePutEvents()} to pass only {@link\n-*                    CacheEventType#CREATED CREATED} and {@link\n-*                    CacheEventType#UPDATED UPDATED} events.\n+     *                    Util#cachePutEvents()} to pass only {@link CacheEventType#CREATED\n+     *                    CREATED} and {@link CacheEventType#UPDATED UPDATED} events. It must be\n+     *                    stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODMyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478328", "createdAt": "2020-11-24T11:35:36Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -1137,7 +1145,8 @@ public static FileSourceBuilder filesBuilder(@Nonnull String directory) {\n      * builder} and add a projection.\n      *\n      * @param name            the name of the queue\n-     * @param factorySupplier supplier to obtain JMS connection factory\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODQwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478407", "createdAt": "2020-11-24T11:35:43Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -1170,6 +1179,9 @@ public static FileSourceBuilder filesBuilder(@Nonnull String directory) {\n      * provider documentation for details.\n      * <p>\n      * The default local parallelism for this processor is 1.\n+     *\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODQ3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478470", "createdAt": "2020-11-24T11:35:50Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -1206,7 +1218,8 @@ public static JmsSourceBuilder jmsQueueBuilder(SupplierEx<? extends ConnectionFa\n      * builder} and add a projection.\n      *\n      * @param name            the name of the queue\n-     * @param factorySupplier supplier to obtain JMS connection factory\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODU1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless\n          \n          \n            \n                 *     must be stateless.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478551", "createdAt": "2020-11-24T11:35:57Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/Sources.java", "diffHunk": "@@ -1244,6 +1257,9 @@ public static JmsSourceBuilder jmsQueueBuilder(SupplierEx<? extends ConnectionFa\n      * provider documentation for details.\n      * <p>\n      * The default local parallelism for this processor is 1.\n+     *\n+     * @param factorySupplier supplier to obtain JMS connection factory. It\n+     *     must be stateless", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODY3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478670", "createdAt": "2020-11-24T11:36:10Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StageWithWindow.java", "diffHunk": "@@ -66,7 +67,8 @@\n      * job otherwise. Also make sure that it implements {@code equals()} and\n      * {@code hashCode()}.\n      *\n-     * @param keyFn function that extracts the grouping key\n+     * @param keyFn function that extracts the grouping key. It must be\n+     *     stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODc3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478773", "createdAt": "2020-11-24T11:36:19Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamHashJoinBuilder.java", "diffHunk": "@@ -47,6 +48,8 @@\n      * Builds a new pipeline stage that performs the hash-join operation. Attaches\n      * the stage to all the contributing stages.\n      *\n+     * @param mapToOutputFn the function to map the output item. It must be\n+     *     stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODg5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                    Processor#isCooperative() cooperative}\n          \n          \n            \n                 *                    Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529478891", "createdAt": "2020-11-24T11:36:29Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/pipeline/StreamSourceStage.java", "diffHunk": "@@ -113,7 +114,8 @@\n      * #withIngestionTimestamps()}.\n      *\n      * @param timestampFn a function that returns the timestamp for each item, typically in\n-     *                    milliseconds\n+     *                    milliseconds. It must be stateless and {@linkplain\n+     *                    Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8543778454fef9ed43d91a3b486bbc7e9f702"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff2e87d795eb6c323884c8158c16f60295e62258", "author": {"user": {"login": "viliam-durina", "name": "Viliam Durina"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/ff2e87d795eb6c323884c8158c16f60295e62258", "committedDate": "2020-11-24T12:52:08Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Marko Topolnik <marko@hazelcast.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12", "author": {"user": {"login": "viliam-durina", "name": "Viliam Durina"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/50a0a1376e90da4436d8964641df98c430d7ff12", "committedDate": "2020-11-24T12:52:58Z", "message": "Fix extra space"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTM5Nzg5", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#pullrequestreview-537539789", "createdAt": "2020-11-24T14:22:32Z", "commit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "state": "COMMENTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMjozM1rOH5DHFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyNDo1MVrOH5DNtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MTg0Nw==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529581847", "createdAt": "2020-11-24T14:22:33Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java", "diffHunk": "@@ -41,13 +45,19 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MTkxMw==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529581913", "createdAt": "2020-11-24T14:22:37Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation1.java", "diffHunk": "@@ -41,13 +45,19 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T> accumulateFn();\n \n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjA1MQ==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582051", "createdAt": "2020-11-24T14:22:49Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "diffHunk": "@@ -51,20 +55,29 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjEwMw==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582103", "createdAt": "2020-11-24T14:22:54Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "diffHunk": "@@ -51,20 +55,29 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjE2OA==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582168", "createdAt": "2020-11-24T14:23:00Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "diffHunk": "@@ -51,20 +55,29 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T1> accumulateFn1();\n \n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 0 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjIyMQ==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582221", "createdAt": "2020-11-24T14:23:04Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation2.java", "diffHunk": "@@ -74,6 +87,9 @@\n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 1 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjMxMw==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582313", "createdAt": "2020-11-24T14:23:13Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -53,27 +57,39 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjM2MQ==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582361", "createdAt": "2020-11-24T14:23:17Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -53,27 +57,39 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjQwMA==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582400", "createdAt": "2020-11-24T14:23:20Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -53,27 +57,39 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T1> accumulateFn1();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-2.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjQ1Ng==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582456", "createdAt": "2020-11-24T14:23:25Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -53,27 +57,39 @@\n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-0.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T0> accumulateFn0();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-1.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T1> accumulateFn1();\n \n     /**\n      * A primitive that updates the accumulator state to account for a new\n      * item coming from stream-2.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()\n+     *  cooperative}.\n      */\n     @Nonnull\n     BiConsumerEx<? super A, ? super T2> accumulateFn2();\n \n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 0 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjQ5Mw==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582493", "createdAt": "2020-11-24T14:23:28Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -83,6 +99,9 @@\n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 1 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjUyOQ==", "bodyText": "Extra indent here.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582529", "createdAt": "2020-11-24T14:23:31Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperation3.java", "diffHunk": "@@ -92,6 +111,9 @@\n     /**\n      * Returns a copy of this aggregate operation, but with the {@code\n      * accumulate} primitive at index 2 replaced with the one supplied here.\n+     * <p>\n+     *  The consumer must be stateless and {@linkplain Processor#isCooperative()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4Mjc0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *              Processor#isCooperative() cooperative}\n          \n          \n            \n                 *              Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582743", "createdAt": "2020-11-24T14:23:48Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -63,7 +64,8 @@\n      * aggregate operation.\n      *\n      * @param accumulateFn the {@code accumulate} primitive, parameters are\n-     *              {@code (accumulator, item)}\n+     *              {@code (accumulator, item)}. It must be stateless and {@linkplain\n+     *              Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjgzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582832", "createdAt": "2020-11-24T14:23:56Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -78,7 +80,8 @@\n      * primitive for stream-0. Also selects the fixed-arity variant of the\n      * aggregate operation.\n      *\n-     * @param accumulateFn0 the {@code accumulate} primitive for stream-0\n+     * @param accumulateFn0 the {@code accumulate} primitive for stream-0. It\n+     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjkxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582912", "createdAt": "2020-11-24T14:24:02Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -104,7 +107,8 @@\n      * variable-arity variant of the aggregate operation.\n      *\n      * @param tag the tag of the associated input stream\n-     * @param accumulateFn the {@code accumulate} primitive\n+     * @param accumulateFn the {@code accumulate} primitive. It must be\n+     *     stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4Mjk4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529582982", "createdAt": "2020-11-24T14:24:07Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -146,7 +150,8 @@\n          * Registers the {@link AggregateOperation2#accumulateFn1()} accumulate}\n          * primitive for stream-1, returning the arity-2 variant of the builder.\n          *\n-         * @param accumulateFn1 the {@code accumulate} primitive for stream-1\n+         * @param accumulateFn1 the {@code accumulate} primitive for stream-1. It\n+         *     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MzE1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                     *     must be stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529583156", "createdAt": "2020-11-24T14:24:22Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -268,7 +288,8 @@\n          * Registers the {@link AggregateOperation3#accumulateFn2() accumulate}\n          * primitive for stream-2, returning the arity-3 variant of the builder.\n          *\n-         * @param accumulateFn2 the {@code accumulate} primitive for stream-2\n+         * @param accumulateFn2 the {@code accumulate} primitive for stream-2. It\n+         *     must be stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MzM0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     *     stateless and {@linkplain Processor#isCooperative() cooperative}\n          \n          \n            \n                     *     stateless and {@linkplain Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529583346", "createdAt": "2020-11-24T14:24:37Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperationBuilder.java", "diffHunk": "@@ -496,7 +547,8 @@\n          * primitive for the stream tagged with the supplied tag.\n          *\n          * @param tag the tag of the associated input stream\n-         * @param accumulateFn the {@code accumulate} primitive\n+         * @param accumulateFn the {@code accumulate} primitive. It must be\n+         *     stateless and {@linkplain Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MzU0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     Processor#isCooperative() cooperative}\n          \n          \n            \n                 *     Processor#isCooperative() cooperative}.", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#discussion_r529583540", "createdAt": "2020-11-24T14:24:51Z", "author": {"login": "mtopolnik"}, "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/aggregate/AggregateOperations.java", "diffHunk": "@@ -115,7 +116,9 @@ private AggregateOperations() {\n      * <strong>Note:</strong> if the sum exceeds {@code Long.MAX_VALUE}, the job\n      * will fail with an {@code ArithmeticException}.\n      *\n-     * @param getLongValueFn function that extracts the {@code long} values you want to sum\n+     * @param getLongValueFn function that extracts the {@code long} values you\n+     *     want to sum. It must be stateless and {@linkplain\n+     *     Processor#isCooperative() cooperative}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a0a1376e90da4436d8964641df98c430d7ff12"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ec7e2a441e99043698a9fb45fe8c4f5f4940ab6", "author": {"user": {"login": "viliam-durina", "name": "Viliam Durina"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/9ec7e2a441e99043698a9fb45fe8c4f5f4940ab6", "committedDate": "2020-11-24T14:31:38Z", "message": "Merge branch 'master' into cooperative-doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "author": {"user": {"login": "viliam-durina", "name": "Viliam Durina"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/c47b4dafa4f4174d27729c988f7818a9d8d3a77a", "committedDate": "2020-11-24T14:34:28Z", "message": "Fix yet more extra indents"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b940fc304374847e7f3eb02040113ca31029aa23", "author": {"user": {"login": "viliam-durina", "name": "Viliam Durina"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/b940fc304374847e7f3eb02040113ca31029aa23", "committedDate": "2020-11-24T14:35:49Z", "message": "Apply suggestions from code review #2\n\nCo-authored-by: Marko Topolnik <marko@hazelcast.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c66fe272c141f1cd9254fd5e73c42569cc021e1c", "author": {"user": {"login": "viliam-durina", "name": "Viliam Durina"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/c66fe272c141f1cd9254fd5e73c42569cc021e1c", "committedDate": "2020-11-24T14:36:31Z", "message": "Merge branch 'cooperative-doc' of ssh://github.com/viliam-durina/hazelcast-jet into cooperative-doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cb21947902a6aa1db3a989c93fca5ebfa9505f2", "author": {"user": {"login": "viliam-durina", "name": "Viliam Durina"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/1cb21947902a6aa1db3a989c93fca5ebfa9505f2", "committedDate": "2020-11-30T14:56:29Z", "message": "Merge branch 'master' into cooperative-doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae050ef99037c99ff32ffeb0fe556bb96add33fa", "author": {"user": {"login": "viliam-durina", "name": "Viliam Durina"}}, "url": "https://github.com/hazelcast/hazelcast-jet/commit/ae050ef99037c99ff32ffeb0fe556bb96add33fa", "committedDate": "2020-11-30T15:05:41Z", "message": "Add ."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwOTk2OTc1", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2669#pullrequestreview-540996975", "createdAt": "2020-11-30T15:07:25Z", "commit": {"oid": "ae050ef99037c99ff32ffeb0fe556bb96add33fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3536, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}