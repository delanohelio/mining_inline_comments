{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNDQ2NjI1", "number": 4495, "title": "fix(TDI-42951): Improved query execution for Result size Auto", "bodyText": "What is the current behavior? (You can also link to an open issue here)\nhttps://jira.talendforge.org/browse/TDI-42951\nThe component tBigQueryInput in case of Authentication Mode - Service Account & Result Size - Auto -> executes a query always as for large results. Auto result size uses when the volume of the query result is not certain. So we we use much more resources than we need during Auto result size.\nWhat is the new behavior?\nNow during Auto result size, component will try to perform small, in case of error - large\nPlease check if the PR fulfills these requirements\n\n The commit message follows Talend standard\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features) ?\n The code coverage on new code >75%\n The new code does not introduce new technical issues (sonar / eslint)\n\nWhat kind of change does this PR introduce?\n\n Bugfix\n Feature\n Code style update (formatting, local variables)\n Refactoring (no functional changes, no api changes)\n Build / CI related changes\n Other... Please describe:\n\nDoes this PR introduce a breaking change?\n\n Yes\n No\n\nIf this PR contains a breaking change, please describe the impact and migration path for existing applications: ...\nOther information:", "createdAt": "2020-02-28T15:25:26Z", "url": "https://github.com/Talend/tdi-studio-se/pull/4495", "merged": true, "mergeCommit": {"oid": "b3fab98674f02194342c06c0ff289ca5cdf5482d"}, "closed": true, "closedAt": "2020-03-19T13:43:33Z", "author": {"login": "OleksiiNimych"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKqUG3AFqTM2ODE2NjY3OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOl79WAFqTM3NjIzOTczOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MTY2Njc5", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#pullrequestreview-368166679", "createdAt": "2020-03-03T17:11:51Z", "commit": {"oid": "bbfeeed9ca63f63cd88e43f9aeda9da7561ae330"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzoxMTo1MlrOFxO5cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjowMDoxMlrOFyQ4KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2ODYyNQ==", "bodyText": "maybe declare this variable more close to the place where it is used.", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r387168625", "createdAt": "2020-03-03T17:11:52Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/tBigQueryInput_begin.javajet", "diffHunk": "@@ -279,98 +279,36 @@\n \t<%\n \t} else if (authMode.equals(\"SERVICEACCOUNT\")) {\n \t%>\n+\t\tfinal String PROJECT_ID_<%=cid%> = <%=projectId%>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfeeed9ca63f63cd88e43f9aeda9da7561ae330"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MzYyMg==", "bodyText": "hm... credentials - is a local variable here. Maybe we can omit _<%=cid%>\nThe only thing to pay attention is the fact that this class is a local class in a big method.\nSo, local variables from the outer method are also visible inside this class methods.\nAlso I need to check if there are several local classes which use  the same variable names in their methods.", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r388183622", "createdAt": "2020-03-05T09:50:59Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,157 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate String projectId;\n+\tprivate String credentialsFile;\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempDataSet;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>(String projectId, String credentialsFile, String resultSizeType, String tempDataSet) {\n+\t\tthis.projectId = projectId;\n+\t\tthis.credentialsFile = credentialsFile;\n+\t\tthis.useLargeResult = \"LARGE\".equals(resultSizeType);\n+\t\tthis.tempDataSet = tempDataSet;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials_<%=cid%>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfeeed9ca63f63cd88e43f9aeda9da7561ae330"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5Mjg1OA==", "bodyText": "I see this code in ServiceAccountBigQueryUtil_ class\ncom.google.auth.oauth2.GoogleCredentials credentials_<%=cid%>;\n\t\tjava.io.File credentialsFile_<%=cid%> = new java.io.File(<%=credentialsFile%>);\n\t\ttry(java.io.FileInputStream credentialsStream_<%=cid%> = new java.io.FileInputStream(credentialsFile_<%=cid%>)) {\n\t\t    credentials_<%=cid%> = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream_<%=cid%>);\n\t\t}\n\nMaybe it should be removed from tBigQueryInput_begin.javajet?", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r388192858", "createdAt": "2020-03-05T10:07:19Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/tBigQueryInput_begin.javajet", "diffHunk": "@@ -279,98 +279,36 @@\n \t<%\n \t} else if (authMode.equals(\"SERVICEACCOUNT\")) {\n \t%>\n+\t\tfinal String PROJECT_ID_<%=cid%> = <%=projectId%>;\n \t\tcom.google.auth.oauth2.GoogleCredentials credentials_<%=cid%>;\n \t\tjava.io.File credentialsFile_<%=cid%> = new java.io.File(<%=credentialsFile%>);\n \t\ttry(java.io.FileInputStream credentialsStream_<%=cid%> = new java.io.FileInputStream(credentialsFile_<%=cid%>)) {\n \t\t    credentials_<%=cid%> = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream_<%=cid%>);\n \t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfeeed9ca63f63cd88e43f9aeda9da7561ae330"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MzcyOQ==", "bodyText": "<% if(isLog4jEnabled) { %>\n\t\t\tlog.info(\"<%=cid%> - query \" + <%=query%>);\n\t\t<% } %>\n\nseems, this logging is not related to buildBigQuery() private method\nFurthermore I see that this code wasn't removed from begin.javajet\nI think it should be removed from here, but remain in begin. javajet", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r388193729", "createdAt": "2020-03-05T10:08:59Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,157 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate String projectId;\n+\tprivate String credentialsFile;\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempDataSet;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>(String projectId, String credentialsFile, String resultSizeType, String tempDataSet) {\n+\t\tthis.projectId = projectId;\n+\t\tthis.credentialsFile = credentialsFile;\n+\t\tthis.useLargeResult = \"LARGE\".equals(resultSizeType);\n+\t\tthis.tempDataSet = tempDataSet;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials_<%=cid%>;\n+\t\tjava.io.File credentialsFile_<%=cid%> = new java.io.File(credentialsFile);\n+\t\ttry(java.io.FileInputStream credentialsStream_<%=cid%> = new java.io.FileInputStream(credentialsFile_<%=cid%>)) {\n+\t\t\tcredentials_<%=cid%> = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream_<%=cid%>);\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - query \" + <%=query%>);\n+\t\t<% } %>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfeeed9ca63f63cd88e43f9aeda9da7561ae330"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NzI0Mg==", "bodyText": "[caching]\nI suggest to add caching for BigQuery service.\nAs I understand following algorithm is used in case of Result size auto mode:\n\ntry small size\nif ok -> finish\nif not ok, try large size\nfinish\nWhen small size is not ok the code will call buildBigQuery() method twice. It will read credentials file twice.\nIt would be good to build BigQuery instance only once.\nSo, add an if condition which checks whether BigQuery was built already. If yes -> use existing. If no -> build it.", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r388197242", "createdAt": "2020-03-05T10:15:33Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,157 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate String projectId;\n+\tprivate String credentialsFile;\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempDataSet;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>(String projectId, String credentialsFile, String resultSizeType, String tempDataSet) {\n+\t\tthis.projectId = projectId;\n+\t\tthis.credentialsFile = credentialsFile;\n+\t\tthis.useLargeResult = \"LARGE\".equals(resultSizeType);\n+\t\tthis.tempDataSet = tempDataSet;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfeeed9ca63f63cd88e43f9aeda9da7561ae330"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNDE3NQ==", "bodyText": "I see the code above was moved to ServiceAccountBigQueryUtil_ class\n\t\tif (job_<%=cid%> == null) {\n\t\t\tthrow new RuntimeException(\"Job no longer exists\");\n\t\t} else if (job_<%=cid%>.getStatus().getError() != null) {\n\t\t\tthrow new RuntimeException(job_<%=cid%>.getStatus().getError().toString());\n\t\t}\n\nplease, remove it here", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r388224175", "createdAt": "2020-03-05T11:05:14Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/tBigQueryInput_begin.javajet", "diffHunk": "@@ -279,98 +279,36 @@\n \t<%\n \t} else if (authMode.equals(\"SERVICEACCOUNT\")) {\n \t%>\n+\t\tfinal String PROJECT_ID_<%=cid%> = <%=projectId%>;\n \t\tcom.google.auth.oauth2.GoogleCredentials credentials_<%=cid%>;\n \t\tjava.io.File credentialsFile_<%=cid%> = new java.io.File(<%=credentialsFile%>);\n \t\ttry(java.io.FileInputStream credentialsStream_<%=cid%> = new java.io.FileInputStream(credentialsFile_<%=cid%>)) {\n \t\t    credentials_<%=cid%> = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream_<%=cid%>);\n \t\t}\n \n-\t\tString query_<%=cid%> = <%=query%>;\n+\t\t<%@ include file=\"@{org.talend.designer.components.localprovider}/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet\"%>\n+\n \t\t<% if(isLog4jEnabled) { %>\n \t\t\tlog.info(\"<%=cid%> - query \" + <%=query%>);\n \t\t<% } %>\n \n-\t\tcom.google.cloud.bigquery.BigQuery bigquery_<%=cid%> = com.google.cloud.bigquery.BigQueryOptions.newBuilder()\n-\t\t\t\t.setCredentials(credentials_<%=cid%>)\n-\t\t\t\t.setProjectId(<%=projectId%>)\n-\t\t\t\t.build()\n-\t\t\t\t.getService();\n-\n-\t\tcom.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration_<%=cid%> = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(<%=query%>).setUseLegacySql(<%=useLegacySql%>);\n-\n-     <%if (resultSizeType.equals(\"LARGE\") || resultSizeType.equals(\"AUTO\")) {\n-          if (isCustomTemporaryName) {%>\n-              String tempDataset_<%=cid%> = <%=tempDataset%>;\n-<%            if(isLog4jEnabled){\t%>\n-                  log.info(\"<%=cid%> - temporary Dataset name : \" + tempDataset_<%=cid%>);\n-<%\n-              }\n-          } else {\n-%>\n-          com.google.cloud.bigquery.QueryJobConfiguration jobConfDryRun_<%=cid%> = queryConfiguration_<%=cid%> .setDryRun(true).build();\n-          com.google.cloud.bigquery.Job jobDryRun_<%=cid%> = bigquery_<%=cid%>.create(com.google.cloud.bigquery.JobInfo.of(jobConfDryRun_<%=cid%>));\n-\n-          String queryLocation_<%=cid%> =jobDryRun_<%=cid%>.getJobId().getLocation();\n-          String location_<%=cid%> = queryLocation_<%=cid%> == null ? \"US\" : queryLocation_<%=cid%>;\n-          String tempDataset_<%=cid%> = java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\")\n-             + Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt())\n-             + Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt());\n-\n-              <% if(isLog4jEnabled){\t%>\n-                  log.info(\"<%=cid%> - query location :\" + queryLocation_<%=cid%>);\n-                  log.info(\"<%=cid%> - temporary dataset location :\" + location_<%=cid%>);\n-                  log.info(\"<%=cid%> - temporary Dataset name : \" + tempDataset_<%=cid%>);\n-\n-              <% } %>\n-\n-         com.google.cloud.bigquery.DatasetInfo datasetInfo_<%=cid%> = com.google.cloud.bigquery.DatasetInfo.newBuilder(tempDataset_<%=cid%>).setLocation(location_<%=cid%>).build();\n-         com.google.cloud.bigquery.Dataset dataset_<%=cid%> = bigquery_<%=cid%> .create(datasetInfo_<%=cid%>);\n-<%\n-         }\n-%>\n-          String tempTable_<%=cid%> = java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\")\n-             + Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt())\n-             + Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt());\n-          <% if(isLog4jEnabled){\t%>\n-              log.info(\"<%=cid%> - temporary table name : \" + tempTable_<%=cid%>);\n-<%\n-            }\n-%>\n-         queryConfiguration_<%=cid%>\n-             .setDryRun(false)\n-             .setAllowLargeResults(true)\n-             .setDestinationTable(com.google.cloud.bigquery.TableId.of(tempDataset_<%=cid%>, tempTable_<%=cid%>));\n-\n-         com.google.cloud.bigquery.JobId jobId_<%=cid%>  = com.google.cloud.bigquery.JobId\n-\t\t\t\t\t\t.newBuilder().setProject(<%=projectId%>)\n-\t\t\t\t\t\t.setJob(java.util.UUID.randomUUID().toString())\n-\t\t\t\t\t\t.build();\n-\n-\t\t       <% if(isLog4jEnabled){ %>\n-\t\t\t     log.info(\"<%=cid%> - job location : \" + jobId_<%=cid%>.getLocation());\n-\t\t      <% } %>\n-\t\t <% } else { %>\n-\t\t    com.google.cloud.bigquery.JobId jobId_<%=cid%> = com.google.cloud.bigquery.JobId.of(<%=projectId%>,java.util.UUID.randomUUID().toString());\n-\n-\t   <% } %>\n-\t       com.google.cloud.bigquery.Job job_<%=cid%> = bigquery_<%=cid%>.create(com.google.cloud.bigquery.JobInfo.newBuilder(queryConfiguration_<%=cid%>.build()).setJobId(jobId_<%=cid%>).build());\n-\n-\n-\t\t<% if(isLog4jEnabled) {\t%>\n-\t\t\tlog.info(\"<%=cid%> - Sending job \" + jobId_<%=cid%> + \" with query: \" + <%=query%>);\n-\t\t<% } %>\n+\t\tServiceAccountBigQueryUtil_<%=cid%> serviceAccountBigQueryUtil_<%=cid%> = new ServiceAccountBigQueryUtil_<%=cid%>(PROJECT_ID_<%=cid%>, <%=credentialsFile%>, \"<%=resultSizeType%>\", <%=tempDataset%>);\n \n-\t\tjob_<%=cid%> = job_<%=cid%>.waitFor();\n+\t\tcom.google.cloud.bigquery.Job job_<%=cid%> = serviceAccountBigQueryUtil_<%=cid%>.executeQuery(<%=query%>, <%=useLegacySql%>);\n \n \t\tif (job_<%=cid%> == null) {\n \t\t\tthrow new RuntimeException(\"Job no longer exists\");\n \t\t} else if (job_<%=cid%>.getStatus().getError() != null) {\n \t\t\tthrow new RuntimeException(job_<%=cid%>.getStatus().getError().toString());\n \t\t}\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfeeed9ca63f63cd88e43f9aeda9da7561ae330"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMTA0Ng==", "bodyText": "I suggest to change com.google.cloud.bigquery.QueryJobConfiguration.Builder parameter to com.google.cloud.bigquery.QueryJobConfiguration (pass QueryJobConfiguration as parameter instead of its Builder)\nIt's ok here as it is private method, which you may change whenever you want. But generally from my point of you it's not to pass Builder as parameter in the middle of buildilng progress.\nImagine, that you don't know what method does with builder inside.\nSo, you as user of such method should guess the state of builder you need to pass. Should it be fresh builder and method will do all the building. Or should it be already configured builder (as in your case) and method will call only build() inside.", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r388231046", "createdAt": "2020-03-05T11:19:27Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,157 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate String projectId;\n+\tprivate String credentialsFile;\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempDataSet;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>(String projectId, String credentialsFile, String resultSizeType, String tempDataSet) {\n+\t\tthis.projectId = projectId;\n+\t\tthis.credentialsFile = credentialsFile;\n+\t\tthis.useLargeResult = \"LARGE\".equals(resultSizeType);\n+\t\tthis.tempDataSet = tempDataSet;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials_<%=cid%>;\n+\t\tjava.io.File credentialsFile_<%=cid%> = new java.io.File(credentialsFile);\n+\t\ttry(java.io.FileInputStream credentialsStream_<%=cid%> = new java.io.FileInputStream(credentialsFile_<%=cid%>)) {\n+\t\t\tcredentials_<%=cid%> = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream_<%=cid%>);\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - query \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tcom.google.cloud.bigquery.BigQuery bigquery_<%=cid%> = com.google.cloud.bigquery.BigQueryOptions.newBuilder()\n+\t\t\t.setCredentials(credentials_<%=cid%>)\n+\t\t\t.setProjectId(projectId)\n+\t\t\t.build()\n+\t\t\t.getService();\n+\n+\t\treturn bigquery_<%=cid%>;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job buildJob(com.google.cloud.bigquery.BigQuery bigquery, com.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration, com.google.cloud.bigquery.JobId jobId) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfeeed9ca63f63cd88e43f9aeda9da7561ae330"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMzI5Mg==", "bodyText": "please, remove extra spaces here", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r388233292", "createdAt": "2020-03-05T11:24:12Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,157 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate String projectId;\n+\tprivate String credentialsFile;\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempDataSet;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>(String projectId, String credentialsFile, String resultSizeType, String tempDataSet) {\n+\t\tthis.projectId = projectId;\n+\t\tthis.credentialsFile = credentialsFile;\n+\t\tthis.useLargeResult = \"LARGE\".equals(resultSizeType);\n+\t\tthis.tempDataSet = tempDataSet;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials_<%=cid%>;\n+\t\tjava.io.File credentialsFile_<%=cid%> = new java.io.File(credentialsFile);\n+\t\ttry(java.io.FileInputStream credentialsStream_<%=cid%> = new java.io.FileInputStream(credentialsFile_<%=cid%>)) {\n+\t\t\tcredentials_<%=cid%> = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream_<%=cid%>);\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - query \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tcom.google.cloud.bigquery.BigQuery bigquery_<%=cid%> = com.google.cloud.bigquery.BigQueryOptions.newBuilder()\n+\t\t\t.setCredentials(credentials_<%=cid%>)\n+\t\t\t.setProjectId(projectId)\n+\t\t\t.build()\n+\t\t\t.getService();\n+\n+\t\treturn bigquery_<%=cid%>;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job buildJob(com.google.cloud.bigquery.BigQuery bigquery, com.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration, com.google.cloud.bigquery.JobId jobId) throws InterruptedException {\n+\t\tcom.google.cloud.bigquery.Job job_<%=cid%> = bigquery.create(com.google.cloud.bigquery.JobInfo.newBuilder(queryConfiguration.build()).setJobId(jobId).build());\n+\n+\t\t<% if(isLog4jEnabled) {\t%>\n+\t\tlog.info(\"<%=cid%> - Sending job \" + jobId + \" with query: \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tjob_<%=cid%> = job_<%=cid%>.waitFor();\n+\n+\t\tif (job_<%=cid%> == null) {\n+\t\t\tthrow new RuntimeException(\"Job no longer exists\");\n+\t\t} else if (job_<%=cid%>.getStatus().getError() != null) {\n+\t\t\tthrow new RuntimeException(job_<%=cid%>.getStatus().getError().toString());\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - Job \" + jobId + \" finished successfully.\");\n+\t\t<% } %>\n+\n+\t\treturn job_<%=cid%>;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQuerySmallResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tbigQuery = buildBigQuery();\n+\t\tcom.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration_<%=cid%> = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query).setUseLegacySql(useLegacySql);\n+\t\tcom.google.cloud.bigquery.JobId jobId_<%=cid%> = com.google.cloud.bigquery.JobId.of(projectId, java.util.UUID.randomUUID().toString());\n+\t\treturn buildJob(bigQuery, queryConfiguration_<%=cid%>, jobId_<%=cid%>);\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQueryLargeResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tbigQuery= buildBigQuery();\n+\t\tcom.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration_<%=cid%> = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query).setUseLegacySql(useLegacySql);\n+\n+\t\t<%if (isCustomTemporaryName) {%>\n+\t\t\tString tempDataset_<%=cid%> = tempDataSet;\n+\t\t<%            if(isLog4jEnabled){\t%>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfeeed9ca63f63cd88e43f9aeda9da7561ae330"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTM0NQ==", "bodyText": "remove extra space here before .setDryRun", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r388235345", "createdAt": "2020-03-05T11:28:41Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,157 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate String projectId;\n+\tprivate String credentialsFile;\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempDataSet;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>(String projectId, String credentialsFile, String resultSizeType, String tempDataSet) {\n+\t\tthis.projectId = projectId;\n+\t\tthis.credentialsFile = credentialsFile;\n+\t\tthis.useLargeResult = \"LARGE\".equals(resultSizeType);\n+\t\tthis.tempDataSet = tempDataSet;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials_<%=cid%>;\n+\t\tjava.io.File credentialsFile_<%=cid%> = new java.io.File(credentialsFile);\n+\t\ttry(java.io.FileInputStream credentialsStream_<%=cid%> = new java.io.FileInputStream(credentialsFile_<%=cid%>)) {\n+\t\t\tcredentials_<%=cid%> = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream_<%=cid%>);\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - query \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tcom.google.cloud.bigquery.BigQuery bigquery_<%=cid%> = com.google.cloud.bigquery.BigQueryOptions.newBuilder()\n+\t\t\t.setCredentials(credentials_<%=cid%>)\n+\t\t\t.setProjectId(projectId)\n+\t\t\t.build()\n+\t\t\t.getService();\n+\n+\t\treturn bigquery_<%=cid%>;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job buildJob(com.google.cloud.bigquery.BigQuery bigquery, com.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration, com.google.cloud.bigquery.JobId jobId) throws InterruptedException {\n+\t\tcom.google.cloud.bigquery.Job job_<%=cid%> = bigquery.create(com.google.cloud.bigquery.JobInfo.newBuilder(queryConfiguration.build()).setJobId(jobId).build());\n+\n+\t\t<% if(isLog4jEnabled) {\t%>\n+\t\tlog.info(\"<%=cid%> - Sending job \" + jobId + \" with query: \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tjob_<%=cid%> = job_<%=cid%>.waitFor();\n+\n+\t\tif (job_<%=cid%> == null) {\n+\t\t\tthrow new RuntimeException(\"Job no longer exists\");\n+\t\t} else if (job_<%=cid%>.getStatus().getError() != null) {\n+\t\t\tthrow new RuntimeException(job_<%=cid%>.getStatus().getError().toString());\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - Job \" + jobId + \" finished successfully.\");\n+\t\t<% } %>\n+\n+\t\treturn job_<%=cid%>;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQuerySmallResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tbigQuery = buildBigQuery();\n+\t\tcom.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration_<%=cid%> = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query).setUseLegacySql(useLegacySql);\n+\t\tcom.google.cloud.bigquery.JobId jobId_<%=cid%> = com.google.cloud.bigquery.JobId.of(projectId, java.util.UUID.randomUUID().toString());\n+\t\treturn buildJob(bigQuery, queryConfiguration_<%=cid%>, jobId_<%=cid%>);\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQueryLargeResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tbigQuery= buildBigQuery();\n+\t\tcom.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration_<%=cid%> = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query).setUseLegacySql(useLegacySql);\n+\n+\t\t<%if (isCustomTemporaryName) {%>\n+\t\t\tString tempDataset_<%=cid%> = tempDataSet;\n+\t\t<%            if(isLog4jEnabled){\t%>\n+\t\t\tlog.info(\"<%=cid%> - temporary Dataset name : \" + tempDataset_<%=cid%>);\n+\t\t<%\n+\t\t\t}\n+\t\t} else {\n+\t\t%>\n+\t\t\tcom.google.cloud.bigquery.QueryJobConfiguration jobConfDryRun_<%=cid%> = queryConfiguration_<%=cid%> .setDryRun(true).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfeeed9ca63f63cd88e43f9aeda9da7561ae330"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0MTQ0OA==", "bodyText": "I would suggest do not split queryConfiguration_ builging.\nMaybe we can use 2 builder in this method:\n\nfor jobConfDryRun_\n\ncom.google.cloud.bigquery.QueryJobConfiguration jobConfDryRun_<%=cid%> = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query)\n    .setUseLegacySql(useLegacySql)\n    .setDryRun(true)\n    .build();\n\n\nfor queryConfiguration_ :\n\ncom.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration_<%=cid%> = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query)\n    .setUseLegacySql(useLegacySql)\n    .setDryRun(false)\n    .setAllowLargeResults(true)\t\t \n    .setDestinationTable(com.google.cloud.bigquery.TableId.of(tempDataset_<%=cid%>, tempTable))\n    .build();", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r388241448", "createdAt": "2020-03-05T11:41:52Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,157 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate String projectId;\n+\tprivate String credentialsFile;\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempDataSet;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>(String projectId, String credentialsFile, String resultSizeType, String tempDataSet) {\n+\t\tthis.projectId = projectId;\n+\t\tthis.credentialsFile = credentialsFile;\n+\t\tthis.useLargeResult = \"LARGE\".equals(resultSizeType);\n+\t\tthis.tempDataSet = tempDataSet;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials_<%=cid%>;\n+\t\tjava.io.File credentialsFile_<%=cid%> = new java.io.File(credentialsFile);\n+\t\ttry(java.io.FileInputStream credentialsStream_<%=cid%> = new java.io.FileInputStream(credentialsFile_<%=cid%>)) {\n+\t\t\tcredentials_<%=cid%> = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream_<%=cid%>);\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - query \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tcom.google.cloud.bigquery.BigQuery bigquery_<%=cid%> = com.google.cloud.bigquery.BigQueryOptions.newBuilder()\n+\t\t\t.setCredentials(credentials_<%=cid%>)\n+\t\t\t.setProjectId(projectId)\n+\t\t\t.build()\n+\t\t\t.getService();\n+\n+\t\treturn bigquery_<%=cid%>;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job buildJob(com.google.cloud.bigquery.BigQuery bigquery, com.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration, com.google.cloud.bigquery.JobId jobId) throws InterruptedException {\n+\t\tcom.google.cloud.bigquery.Job job_<%=cid%> = bigquery.create(com.google.cloud.bigquery.JobInfo.newBuilder(queryConfiguration.build()).setJobId(jobId).build());\n+\n+\t\t<% if(isLog4jEnabled) {\t%>\n+\t\tlog.info(\"<%=cid%> - Sending job \" + jobId + \" with query: \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tjob_<%=cid%> = job_<%=cid%>.waitFor();\n+\n+\t\tif (job_<%=cid%> == null) {\n+\t\t\tthrow new RuntimeException(\"Job no longer exists\");\n+\t\t} else if (job_<%=cid%>.getStatus().getError() != null) {\n+\t\t\tthrow new RuntimeException(job_<%=cid%>.getStatus().getError().toString());\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - Job \" + jobId + \" finished successfully.\");\n+\t\t<% } %>\n+\n+\t\treturn job_<%=cid%>;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQuerySmallResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tbigQuery = buildBigQuery();\n+\t\tcom.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration_<%=cid%> = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query).setUseLegacySql(useLegacySql);\n+\t\tcom.google.cloud.bigquery.JobId jobId_<%=cid%> = com.google.cloud.bigquery.JobId.of(projectId, java.util.UUID.randomUUID().toString());\n+\t\treturn buildJob(bigQuery, queryConfiguration_<%=cid%>, jobId_<%=cid%>);\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQueryLargeResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tbigQuery= buildBigQuery();\n+\t\tcom.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration_<%=cid%> = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query).setUseLegacySql(useLegacySql);\n+\n+\t\t<%if (isCustomTemporaryName) {%>\n+\t\t\tString tempDataset_<%=cid%> = tempDataSet;\n+\t\t<%            if(isLog4jEnabled){\t%>\n+\t\t\tlog.info(\"<%=cid%> - temporary Dataset name : \" + tempDataset_<%=cid%>);\n+\t\t<%\n+\t\t\t}\n+\t\t} else {\n+\t\t%>\n+\t\t\tcom.google.cloud.bigquery.QueryJobConfiguration jobConfDryRun_<%=cid%> = queryConfiguration_<%=cid%> .setDryRun(true).build();\n+\t\t\tcom.google.cloud.bigquery.Job jobDryRun_<%=cid%> = bigQuery.create(com.google.cloud.bigquery.JobInfo.of(jobConfDryRun_<%=cid%>));\n+\n+\t\t\tString queryLocation_<%=cid%> =jobDryRun_<%=cid%>.getJobId().getLocation();\n+\t\t\tString location_<%=cid%> = queryLocation_<%=cid%> == null ? \"US\" : queryLocation_<%=cid%>;\n+\t\t\tString tempDataset_<%=cid%> = java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\")\n+\t\t\t+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt())\n+\t\t\t+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt());\n+\n+\t\t\t<% if(isLog4jEnabled){\t%>\n+\t\t\tlog.info(\"<%=cid%> - query location :\" + queryLocation_<%=cid%>);\n+\t\t\tlog.info(\"<%=cid%> - temporary dataset location :\" + location_<%=cid%>);\n+\t\t\tlog.info(\"<%=cid%> - temporary Dataset name : \" + tempDataset_<%=cid%>);\n+\n+\t\t\t<% } %>\n+\n+\t\t\tcom.google.cloud.bigquery.DatasetInfo datasetInfo_<%=cid%> = com.google.cloud.bigquery.DatasetInfo.newBuilder(tempDataset_<%=cid%>).setLocation(location_<%=cid%>).build();\n+\t\t\tcom.google.cloud.bigquery.Dataset dataset_<%=cid%> = bigQuery.create(datasetInfo_<%=cid%>);\n+\t\t<%\n+\t\t}\n+\t\t%>\n+\t\ttempTable = java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\")\n+\t\t+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt())\n+\t\t+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt());\n+\t\t<% if(isLog4jEnabled){\t%>\n+\t\t\tlog.info(\"<%=cid%> - temporary table name : \" + tempTable);\n+\t\t<%\n+\t\t\t}\n+\t\t%>\n+\t\tqueryConfiguration_<%=cid%>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfeeed9ca63f63cd88e43f9aeda9da7561ae330"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0OTY0MA==", "bodyText": "!!!\nThis part is missed in new code.\nThink/check what happened if user switch Result size to small", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r388249640", "createdAt": "2020-03-05T12:00:12Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/tBigQueryInput_begin.javajet", "diffHunk": "@@ -279,98 +279,36 @@\n \t<%\n \t} else if (authMode.equals(\"SERVICEACCOUNT\")) {\n \t%>\n+\t\tfinal String PROJECT_ID_<%=cid%> = <%=projectId%>;\n \t\tcom.google.auth.oauth2.GoogleCredentials credentials_<%=cid%>;\n \t\tjava.io.File credentialsFile_<%=cid%> = new java.io.File(<%=credentialsFile%>);\n \t\ttry(java.io.FileInputStream credentialsStream_<%=cid%> = new java.io.FileInputStream(credentialsFile_<%=cid%>)) {\n \t\t    credentials_<%=cid%> = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream_<%=cid%>);\n \t\t}\n \n-\t\tString query_<%=cid%> = <%=query%>;\n+\t\t<%@ include file=\"@{org.talend.designer.components.localprovider}/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet\"%>\n+\n \t\t<% if(isLog4jEnabled) { %>\n \t\t\tlog.info(\"<%=cid%> - query \" + <%=query%>);\n \t\t<% } %>\n \n-\t\tcom.google.cloud.bigquery.BigQuery bigquery_<%=cid%> = com.google.cloud.bigquery.BigQueryOptions.newBuilder()\n-\t\t\t\t.setCredentials(credentials_<%=cid%>)\n-\t\t\t\t.setProjectId(<%=projectId%>)\n-\t\t\t\t.build()\n-\t\t\t\t.getService();\n-\n-\t\tcom.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration_<%=cid%> = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(<%=query%>).setUseLegacySql(<%=useLegacySql%>);\n-\n-     <%if (resultSizeType.equals(\"LARGE\") || resultSizeType.equals(\"AUTO\")) {\n-          if (isCustomTemporaryName) {%>\n-              String tempDataset_<%=cid%> = <%=tempDataset%>;\n-<%            if(isLog4jEnabled){\t%>\n-                  log.info(\"<%=cid%> - temporary Dataset name : \" + tempDataset_<%=cid%>);\n-<%\n-              }\n-          } else {\n-%>\n-          com.google.cloud.bigquery.QueryJobConfiguration jobConfDryRun_<%=cid%> = queryConfiguration_<%=cid%> .setDryRun(true).build();\n-          com.google.cloud.bigquery.Job jobDryRun_<%=cid%> = bigquery_<%=cid%>.create(com.google.cloud.bigquery.JobInfo.of(jobConfDryRun_<%=cid%>));\n-\n-          String queryLocation_<%=cid%> =jobDryRun_<%=cid%>.getJobId().getLocation();\n-          String location_<%=cid%> = queryLocation_<%=cid%> == null ? \"US\" : queryLocation_<%=cid%>;\n-          String tempDataset_<%=cid%> = java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\")\n-             + Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt())\n-             + Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt());\n-\n-              <% if(isLog4jEnabled){\t%>\n-                  log.info(\"<%=cid%> - query location :\" + queryLocation_<%=cid%>);\n-                  log.info(\"<%=cid%> - temporary dataset location :\" + location_<%=cid%>);\n-                  log.info(\"<%=cid%> - temporary Dataset name : \" + tempDataset_<%=cid%>);\n-\n-              <% } %>\n-\n-         com.google.cloud.bigquery.DatasetInfo datasetInfo_<%=cid%> = com.google.cloud.bigquery.DatasetInfo.newBuilder(tempDataset_<%=cid%>).setLocation(location_<%=cid%>).build();\n-         com.google.cloud.bigquery.Dataset dataset_<%=cid%> = bigquery_<%=cid%> .create(datasetInfo_<%=cid%>);\n-<%\n-         }\n-%>\n-          String tempTable_<%=cid%> = java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\")\n-             + Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt())\n-             + Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt());\n-          <% if(isLog4jEnabled){\t%>\n-              log.info(\"<%=cid%> - temporary table name : \" + tempTable_<%=cid%>);\n-<%\n-            }\n-%>\n-         queryConfiguration_<%=cid%>\n-             .setDryRun(false)\n-             .setAllowLargeResults(true)\n-             .setDestinationTable(com.google.cloud.bigquery.TableId.of(tempDataset_<%=cid%>, tempTable_<%=cid%>));\n-\n-         com.google.cloud.bigquery.JobId jobId_<%=cid%>  = com.google.cloud.bigquery.JobId\n-\t\t\t\t\t\t.newBuilder().setProject(<%=projectId%>)\n-\t\t\t\t\t\t.setJob(java.util.UUID.randomUUID().toString())\n-\t\t\t\t\t\t.build();\n-\n-\t\t       <% if(isLog4jEnabled){ %>\n-\t\t\t     log.info(\"<%=cid%> - job location : \" + jobId_<%=cid%>.getLocation());\n-\t\t      <% } %>\n-\t\t <% } else { %>\n-\t\t    com.google.cloud.bigquery.JobId jobId_<%=cid%> = com.google.cloud.bigquery.JobId.of(<%=projectId%>,java.util.UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfeeed9ca63f63cd88e43f9aeda9da7561ae330"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTI3MTQy", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#pullrequestreview-369527142", "createdAt": "2020-03-05T12:27:33Z", "commit": {"oid": "bbfeeed9ca63f63cd88e43f9aeda9da7561ae330"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjoyNzozM1rOFyRoEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjoyNzozM1rOFyRoEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2MTkwNQ==", "bodyText": "One more comment\nProbably, here we can generate different code depending on Result size value:\nsmall:\njob_<%=cid%> = executeQuerySmallResult(query, useLegacySql);\nlarge:\njob_<%=cid%> = executeQueryLargeResult(query, useLegacySql);\nauto:\ntry {\njob_<%=cid%> = executeQuerySmallResult(query, useLegacySql);\n} catch (com.google.cloud.bigquery.BigQueryException e) {\njob_<%=cid%> = executeQueryLargeResult(query, useLegacySql);\nuseLargeResult = true;\n}", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r388261905", "createdAt": "2020-03-05T12:27:33Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,157 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate String projectId;\n+\tprivate String credentialsFile;\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempDataSet;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>(String projectId, String credentialsFile, String resultSizeType, String tempDataSet) {\n+\t\tthis.projectId = projectId;\n+\t\tthis.credentialsFile = credentialsFile;\n+\t\tthis.useLargeResult = \"LARGE\".equals(resultSizeType);\n+\t\tthis.tempDataSet = tempDataSet;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials_<%=cid%>;\n+\t\tjava.io.File credentialsFile_<%=cid%> = new java.io.File(credentialsFile);\n+\t\ttry(java.io.FileInputStream credentialsStream_<%=cid%> = new java.io.FileInputStream(credentialsFile_<%=cid%>)) {\n+\t\t\tcredentials_<%=cid%> = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream_<%=cid%>);\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - query \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tcom.google.cloud.bigquery.BigQuery bigquery_<%=cid%> = com.google.cloud.bigquery.BigQueryOptions.newBuilder()\n+\t\t\t.setCredentials(credentials_<%=cid%>)\n+\t\t\t.setProjectId(projectId)\n+\t\t\t.build()\n+\t\t\t.getService();\n+\n+\t\treturn bigquery_<%=cid%>;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job buildJob(com.google.cloud.bigquery.BigQuery bigquery, com.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration, com.google.cloud.bigquery.JobId jobId) throws InterruptedException {\n+\t\tcom.google.cloud.bigquery.Job job_<%=cid%> = bigquery.create(com.google.cloud.bigquery.JobInfo.newBuilder(queryConfiguration.build()).setJobId(jobId).build());\n+\n+\t\t<% if(isLog4jEnabled) {\t%>\n+\t\tlog.info(\"<%=cid%> - Sending job \" + jobId + \" with query: \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tjob_<%=cid%> = job_<%=cid%>.waitFor();\n+\n+\t\tif (job_<%=cid%> == null) {\n+\t\t\tthrow new RuntimeException(\"Job no longer exists\");\n+\t\t} else if (job_<%=cid%>.getStatus().getError() != null) {\n+\t\t\tthrow new RuntimeException(job_<%=cid%>.getStatus().getError().toString());\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - Job \" + jobId + \" finished successfully.\");\n+\t\t<% } %>\n+\n+\t\treturn job_<%=cid%>;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQuerySmallResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tbigQuery = buildBigQuery();\n+\t\tcom.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration_<%=cid%> = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query).setUseLegacySql(useLegacySql);\n+\t\tcom.google.cloud.bigquery.JobId jobId_<%=cid%> = com.google.cloud.bigquery.JobId.of(projectId, java.util.UUID.randomUUID().toString());\n+\t\treturn buildJob(bigQuery, queryConfiguration_<%=cid%>, jobId_<%=cid%>);\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQueryLargeResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tbigQuery= buildBigQuery();\n+\t\tcom.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration_<%=cid%> = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query).setUseLegacySql(useLegacySql);\n+\n+\t\t<%if (isCustomTemporaryName) {%>\n+\t\t\tString tempDataset_<%=cid%> = tempDataSet;\n+\t\t<%            if(isLog4jEnabled){\t%>\n+\t\t\tlog.info(\"<%=cid%> - temporary Dataset name : \" + tempDataset_<%=cid%>);\n+\t\t<%\n+\t\t\t}\n+\t\t} else {\n+\t\t%>\n+\t\t\tcom.google.cloud.bigquery.QueryJobConfiguration jobConfDryRun_<%=cid%> = queryConfiguration_<%=cid%> .setDryRun(true).build();\n+\t\t\tcom.google.cloud.bigquery.Job jobDryRun_<%=cid%> = bigQuery.create(com.google.cloud.bigquery.JobInfo.of(jobConfDryRun_<%=cid%>));\n+\n+\t\t\tString queryLocation_<%=cid%> =jobDryRun_<%=cid%>.getJobId().getLocation();\n+\t\t\tString location_<%=cid%> = queryLocation_<%=cid%> == null ? \"US\" : queryLocation_<%=cid%>;\n+\t\t\tString tempDataset_<%=cid%> = java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\")\n+\t\t\t+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt())\n+\t\t\t+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt());\n+\n+\t\t\t<% if(isLog4jEnabled){\t%>\n+\t\t\tlog.info(\"<%=cid%> - query location :\" + queryLocation_<%=cid%>);\n+\t\t\tlog.info(\"<%=cid%> - temporary dataset location :\" + location_<%=cid%>);\n+\t\t\tlog.info(\"<%=cid%> - temporary Dataset name : \" + tempDataset_<%=cid%>);\n+\n+\t\t\t<% } %>\n+\n+\t\t\tcom.google.cloud.bigquery.DatasetInfo datasetInfo_<%=cid%> = com.google.cloud.bigquery.DatasetInfo.newBuilder(tempDataset_<%=cid%>).setLocation(location_<%=cid%>).build();\n+\t\t\tcom.google.cloud.bigquery.Dataset dataset_<%=cid%> = bigQuery.create(datasetInfo_<%=cid%>);\n+\t\t<%\n+\t\t}\n+\t\t%>\n+\t\ttempTable = java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\")\n+\t\t+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt())\n+\t\t+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt());\n+\t\t<% if(isLog4jEnabled){\t%>\n+\t\t\tlog.info(\"<%=cid%> - temporary table name : \" + tempTable);\n+\t\t<%\n+\t\t\t}\n+\t\t%>\n+\t\tqueryConfiguration_<%=cid%>\n+\t\t\t.setDryRun(false)\n+\t\t\t.setAllowLargeResults(true)\n+\t\t\t.setDestinationTable(com.google.cloud.bigquery.TableId.of(tempDataset_<%=cid%>, tempTable));\n+\n+\t\tcom.google.cloud.bigquery.JobId jobId_<%=cid%>  = com.google.cloud.bigquery.JobId\n+\t\t\t.newBuilder().setProject(<%=projectId%>)\n+\t\t\t.setJob(java.util.UUID.randomUUID().toString())\n+\t\t\t.build();\n+\n+\t\t<% if(isLog4jEnabled){ %>\n+\t\t\tlog.info(\"<%=cid%> - job location : \" + jobId_<%=cid%>.getLocation());\n+\t\t<% } %>\n+\t\treturn buildJob(bigQuery, queryConfiguration_<%=cid%>, jobId_<%=cid%>);\n+\t}\n+\n+\tpublic com.google.cloud.bigquery.Job executeQuery(String query, boolean useLegacySql) throws Exception {\n+\n+\t\tcom.google.cloud.bigquery.Job job_<%=cid%>;\n+\n+\t\tif (useLargeResult) {\n+\t\t\tjob_<%=cid%> = executeQueryLargeResult(query, useLegacySql);\n+\t\t} else {\n+\t\t\ttry {\n+\t\t\t\tjob_<%=cid%> = executeQuerySmallResult(query, useLegacySql);\n+\t\t\t} catch (com.google.cloud.bigquery.BigQueryException e) {\n+\t\t\t\tjob_<%=cid%> = executeQueryLargeResult(query, useLegacySql);\n+\t\t\t\tuseLargeResult = true;\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfeeed9ca63f63cd88e43f9aeda9da7561ae330"}, "originalPosition": 137}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae1076880763f93a7bb406d2d5fb048efc4a6112", "author": {"user": {"login": "OleksiiNimych", "name": null}}, "url": "https://github.com/Talend/tdi-studio-se/commit/ae1076880763f93a7bb406d2d5fb048efc4a6112", "committedDate": "2020-03-06T13:21:38Z", "message": "Merge branch 'onimych/TDI-42951_BigQueryInput_Result_size_for_Service_Account' of https://github.com/Talend/tdi-studio-se into onimych/TDI-42951_BigQueryInput_Result_size_for_Service_Account"}, "afterCommit": {"oid": "6e7e9b71f359c903e3d4846983374d7c0b73bf26", "author": {"user": {"login": "OleksiiNimych", "name": null}}, "url": "https://github.com/Talend/tdi-studio-se/commit/6e7e9b71f359c903e3d4846983374d7c0b73bf26", "committedDate": "2020-03-06T14:09:59Z", "message": "Remove code duplication, omitt _<%cid%> from local variables, refactor methods in ServiceAccountBigQueryUtil class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTM1NDQz", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#pullrequestreview-375935443", "createdAt": "2020-03-17T11:07:51Z", "commit": {"oid": "2717a4ee5ae6876b70e2f3e530d11aa7a9ef21c8"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTowNzo1MlrOF3XeJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjozNToxNVrOF3aQbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwMDU1MA==", "bodyText": "[caching]\nI suggest to add following code in the begining of this method:\nif (bigQuery != null) {\n    return bigQuery;\n}", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r393600550", "createdAt": "2020-03-17T11:07:52Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,147 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>() {\n+\t\tthis.useLargeResult = \"LARGE\".equals(\"<%=resultSizeType%>\");\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2717a4ee5ae6876b70e2f3e530d11aa7a9ef21c8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwMTgyMw==", "bodyText": "[caching] [minor]\nI suggest to rename local variable \"bigquery\" to \"bigQueryClient\" or \"client\" or \"result\"\nor you may even do\nreturn com.google.cloud.bigquery.BigQueryOptions.newBuilder()\n                        .setCredentials(credentials)\n\t\t\t.setProjectId(<%=projectId%>)\n\t\t\t.build()\n\t\t\t.getService();\n\nThe problem is that local variable has the same name as class field.\nGenerally, it's ok for Java code. But I think it's not ok for javajet as IDE won't help you to see usages", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r393601823", "createdAt": "2020-03-17T11:10:22Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,147 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>() {\n+\t\tthis.useLargeResult = \"LARGE\".equals(\"<%=resultSizeType%>\");\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials;\n+\t\tjava.io.File credentialsFile = new java.io.File(<%=credentialsFile%>);\n+\t\ttry(java.io.FileInputStream credentialsStream = new java.io.FileInputStream(credentialsFile)) {\n+\t\t\tcredentials = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream);\n+\t\t}\n+\n+\t\tcom.google.cloud.bigquery.BigQuery bigquery = com.google.cloud.bigquery.BigQueryOptions.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2717a4ee5ae6876b70e2f3e530d11aa7a9ef21c8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwNTM1Mw==", "bodyText": "[caching]\nif (bigQuery == null) {\n\tbigQuery = buildBigQuery();\n}\n\nI think this is not a good idea. In this case callers should control caching.\nWhen you call buildBigQuery() method in executeQuerySmallResult() and executeQueryLargeResult() you should think how to cache bigQuery correctly.\nImagine you have 5 methods instead of 2.\nIn that case you will need to duplicate if (bigQuery == null) 4 times.\nI think it is better to move this if (bigQuery == null) to buildBigQuery() method\n(the idea is similar to Singleton pattern)\nAnother way to fix is:\n\ncall buildBigQuery() only in Constructor\nIn  executeQuerySmallResult() and executeQueryLargeResult() methods use bigQuery field (which initialized in Constructor)", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r393605353", "createdAt": "2020-03-17T11:17:17Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,147 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>() {\n+\t\tthis.useLargeResult = \"LARGE\".equals(\"<%=resultSizeType%>\");\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials;\n+\t\tjava.io.File credentialsFile = new java.io.File(<%=credentialsFile%>);\n+\t\ttry(java.io.FileInputStream credentialsStream = new java.io.FileInputStream(credentialsFile)) {\n+\t\t\tcredentials = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream);\n+\t\t}\n+\n+\t\tcom.google.cloud.bigquery.BigQuery bigquery = com.google.cloud.bigquery.BigQueryOptions.newBuilder()\n+\t\t\t.setCredentials(credentials)\n+\t\t\t.setProjectId(<%=projectId%>)\n+\t\t\t.build()\n+\t\t\t.getService();\n+\n+\t\treturn bigquery;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job buildJob(com.google.cloud.bigquery.BigQuery bigquery, com.google.cloud.bigquery.QueryJobConfiguration queryConfiguration, com.google.cloud.bigquery.JobId jobId) throws InterruptedException {\n+\t\tcom.google.cloud.bigquery.Job job = bigquery.create(com.google.cloud.bigquery.JobInfo.newBuilder(queryConfiguration).setJobId(jobId).build());\n+\n+\t\t<% if(isLog4jEnabled) {\t%>\n+\t\tlog.info(\"<%=cid%> - Sending job \" + jobId + \" with query: \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tjob = job.waitFor();\n+\n+\t\tif (job == null) {\n+\t\t\tthrow new RuntimeException(\"Job no longer exists\");\n+\t\t} else if (job.getStatus().getError() != null) {\n+\t\t\tthrow new RuntimeException(job.getStatus().getError().toString());\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - Job \" + jobId + \" finished successfully.\");\n+\t\t<% } %>\n+\n+\t\treturn job;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQuerySmallResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tbigQuery = buildBigQuery();\n+\t\tcom.google.cloud.bigquery.QueryJobConfiguration queryConfiguration = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query)\n+\t\t\t.setUseLegacySql(useLegacySql)\n+\t\t\t.build();\n+\t\tcom.google.cloud.bigquery.JobId jobId = com.google.cloud.bigquery.JobId.of(<%=projectId%>, java.util.UUID.randomUUID().toString());\n+\t\treturn buildJob(bigQuery, queryConfiguration, jobId);\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQueryLargeResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tif (bigQuery == null) {\n+\t\t\tbigQuery = buildBigQuery();\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2717a4ee5ae6876b70e2f3e530d11aa7a9ef21c8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMTM1NA==", "bodyText": "[minor]\nNow we get this.useLargeResult = \"LARGE\".equals(\"SMALL\"); in generated code\nProbably we can do here something like:\nthis.useLargeResult = <% \"LARGE\".equals(resultSizeType) ? %> true; <% : %> false;\n\nIf above doesn't work, it's ok to leave as is", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r393631354", "createdAt": "2020-03-17T12:07:14Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,147 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>() {\n+\t\tthis.useLargeResult = \"LARGE\".equals(\"<%=resultSizeType%>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2717a4ee5ae6876b70e2f3e530d11aa7a9ef21c8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzMzM4NQ==", "bodyText": "formatting is not fixed:\nSee 2 lines with \"log.info\" in this method. Please, make indent consistant.\nEither use indent for both (and all other cases in this file) or don't use it", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r393633385", "createdAt": "2020-03-17T12:11:24Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,147 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>() {\n+\t\tthis.useLargeResult = \"LARGE\".equals(\"<%=resultSizeType%>\");\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials;\n+\t\tjava.io.File credentialsFile = new java.io.File(<%=credentialsFile%>);\n+\t\ttry(java.io.FileInputStream credentialsStream = new java.io.FileInputStream(credentialsFile)) {\n+\t\t\tcredentials = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream);\n+\t\t}\n+\n+\t\tcom.google.cloud.bigquery.BigQuery bigquery = com.google.cloud.bigquery.BigQueryOptions.newBuilder()\n+\t\t\t.setCredentials(credentials)\n+\t\t\t.setProjectId(<%=projectId%>)\n+\t\t\t.build()\n+\t\t\t.getService();\n+\n+\t\treturn bigquery;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job buildJob(com.google.cloud.bigquery.BigQuery bigquery, com.google.cloud.bigquery.QueryJobConfiguration queryConfiguration, com.google.cloud.bigquery.JobId jobId) throws InterruptedException {\n+\t\tcom.google.cloud.bigquery.Job job = bigquery.create(com.google.cloud.bigquery.JobInfo.newBuilder(queryConfiguration).setJobId(jobId).build());\n+\n+\t\t<% if(isLog4jEnabled) {\t%>\n+\t\tlog.info(\"<%=cid%> - Sending job \" + jobId + \" with query: \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tjob = job.waitFor();\n+\n+\t\tif (job == null) {\n+\t\t\tthrow new RuntimeException(\"Job no longer exists\");\n+\t\t} else if (job.getStatus().getError() != null) {\n+\t\t\tthrow new RuntimeException(job.getStatus().getError().toString());\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - Job \" + jobId + \" finished successfully.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2717a4ee5ae6876b70e2f3e530d11aa7a9ef21c8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzNTU0MQ==", "bodyText": "please, use the same indent style.\nHere, I can see 2 tabs", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r393635541", "createdAt": "2020-03-17T12:15:44Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,147 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>() {\n+\t\tthis.useLargeResult = \"LARGE\".equals(\"<%=resultSizeType%>\");\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials;\n+\t\tjava.io.File credentialsFile = new java.io.File(<%=credentialsFile%>);\n+\t\ttry(java.io.FileInputStream credentialsStream = new java.io.FileInputStream(credentialsFile)) {\n+\t\t\tcredentials = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream);\n+\t\t}\n+\n+\t\tcom.google.cloud.bigquery.BigQuery bigquery = com.google.cloud.bigquery.BigQueryOptions.newBuilder()\n+\t\t\t.setCredentials(credentials)\n+\t\t\t.setProjectId(<%=projectId%>)\n+\t\t\t.build()\n+\t\t\t.getService();\n+\n+\t\treturn bigquery;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job buildJob(com.google.cloud.bigquery.BigQuery bigquery, com.google.cloud.bigquery.QueryJobConfiguration queryConfiguration, com.google.cloud.bigquery.JobId jobId) throws InterruptedException {\n+\t\tcom.google.cloud.bigquery.Job job = bigquery.create(com.google.cloud.bigquery.JobInfo.newBuilder(queryConfiguration).setJobId(jobId).build());\n+\n+\t\t<% if(isLog4jEnabled) {\t%>\n+\t\tlog.info(\"<%=cid%> - Sending job \" + jobId + \" with query: \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tjob = job.waitFor();\n+\n+\t\tif (job == null) {\n+\t\t\tthrow new RuntimeException(\"Job no longer exists\");\n+\t\t} else if (job.getStatus().getError() != null) {\n+\t\t\tthrow new RuntimeException(job.getStatus().getError().toString());\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - Job \" + jobId + \" finished successfully.\");\n+\t\t<% } %>\n+\n+\t\treturn job;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQuerySmallResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tbigQuery = buildBigQuery();\n+\t\tcom.google.cloud.bigquery.QueryJobConfiguration queryConfiguration = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query)\n+\t\t\t.setUseLegacySql(useLegacySql)\n+\t\t\t.build();\n+\t\tcom.google.cloud.bigquery.JobId jobId = com.google.cloud.bigquery.JobId.of(<%=projectId%>, java.util.UUID.randomUUID().toString());\n+\t\treturn buildJob(bigQuery, queryConfiguration, jobId);\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQueryLargeResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tif (bigQuery == null) {\n+\t\t\tbigQuery = buildBigQuery();\n+\t\t}\n+\n+\t\t<% if (isCustomTemporaryName) { %>\n+\t\t\tString tempDataset = <%=tempDataset%>;\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\t\tlog.info(\"<%=cid%> - temporary Dataset name : \" + tempDataset);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2717a4ee5ae6876b70e2f3e530d11aa7a9ef21c8"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzNjUwNg==", "bodyText": "if(isLog4jEnabled) should have indent here as it is inside if (isCustomTemporaryName) { block", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r393636506", "createdAt": "2020-03-17T12:17:37Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,147 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>() {\n+\t\tthis.useLargeResult = \"LARGE\".equals(\"<%=resultSizeType%>\");\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials;\n+\t\tjava.io.File credentialsFile = new java.io.File(<%=credentialsFile%>);\n+\t\ttry(java.io.FileInputStream credentialsStream = new java.io.FileInputStream(credentialsFile)) {\n+\t\t\tcredentials = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream);\n+\t\t}\n+\n+\t\tcom.google.cloud.bigquery.BigQuery bigquery = com.google.cloud.bigquery.BigQueryOptions.newBuilder()\n+\t\t\t.setCredentials(credentials)\n+\t\t\t.setProjectId(<%=projectId%>)\n+\t\t\t.build()\n+\t\t\t.getService();\n+\n+\t\treturn bigquery;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job buildJob(com.google.cloud.bigquery.BigQuery bigquery, com.google.cloud.bigquery.QueryJobConfiguration queryConfiguration, com.google.cloud.bigquery.JobId jobId) throws InterruptedException {\n+\t\tcom.google.cloud.bigquery.Job job = bigquery.create(com.google.cloud.bigquery.JobInfo.newBuilder(queryConfiguration).setJobId(jobId).build());\n+\n+\t\t<% if(isLog4jEnabled) {\t%>\n+\t\tlog.info(\"<%=cid%> - Sending job \" + jobId + \" with query: \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tjob = job.waitFor();\n+\n+\t\tif (job == null) {\n+\t\t\tthrow new RuntimeException(\"Job no longer exists\");\n+\t\t} else if (job.getStatus().getError() != null) {\n+\t\t\tthrow new RuntimeException(job.getStatus().getError().toString());\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - Job \" + jobId + \" finished successfully.\");\n+\t\t<% } %>\n+\n+\t\treturn job;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQuerySmallResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tbigQuery = buildBigQuery();\n+\t\tcom.google.cloud.bigquery.QueryJobConfiguration queryConfiguration = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query)\n+\t\t\t.setUseLegacySql(useLegacySql)\n+\t\t\t.build();\n+\t\tcom.google.cloud.bigquery.JobId jobId = com.google.cloud.bigquery.JobId.of(<%=projectId%>, java.util.UUID.randomUUID().toString());\n+\t\treturn buildJob(bigQuery, queryConfiguration, jobId);\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQueryLargeResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tif (bigQuery == null) {\n+\t\t\tbigQuery = buildBigQuery();\n+\t\t}\n+\n+\t\t<% if (isCustomTemporaryName) { %>\n+\t\t\tString tempDataset = <%=tempDataset%>;\n+\t\t<% if(isLog4jEnabled) { %>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2717a4ee5ae6876b70e2f3e530d11aa7a9ef21c8"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0MTg2MA==", "bodyText": "just a comment for future (not necessary to fix now)\nYou may not generate this executeQuerySmallResult() method at all when \"Large\" resultSizeType is chosen\ne.g.\n<% if(\"SMALL\".equals(resultSizeType)) { %>\nprivate com.google.cloud.bigquery.Job executeQuerySmallResult(...) {\n    ...\n}\n<% } %>\n\nHowever, I think it's ok as is.\nMy suggestion complicates code a bit", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r393641860", "createdAt": "2020-03-17T12:27:34Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,147 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>() {\n+\t\tthis.useLargeResult = \"LARGE\".equals(\"<%=resultSizeType%>\");\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials;\n+\t\tjava.io.File credentialsFile = new java.io.File(<%=credentialsFile%>);\n+\t\ttry(java.io.FileInputStream credentialsStream = new java.io.FileInputStream(credentialsFile)) {\n+\t\t\tcredentials = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream);\n+\t\t}\n+\n+\t\tcom.google.cloud.bigquery.BigQuery bigquery = com.google.cloud.bigquery.BigQueryOptions.newBuilder()\n+\t\t\t.setCredentials(credentials)\n+\t\t\t.setProjectId(<%=projectId%>)\n+\t\t\t.build()\n+\t\t\t.getService();\n+\n+\t\treturn bigquery;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job buildJob(com.google.cloud.bigquery.BigQuery bigquery, com.google.cloud.bigquery.QueryJobConfiguration queryConfiguration, com.google.cloud.bigquery.JobId jobId) throws InterruptedException {\n+\t\tcom.google.cloud.bigquery.Job job = bigquery.create(com.google.cloud.bigquery.JobInfo.newBuilder(queryConfiguration).setJobId(jobId).build());\n+\n+\t\t<% if(isLog4jEnabled) {\t%>\n+\t\tlog.info(\"<%=cid%> - Sending job \" + jobId + \" with query: \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tjob = job.waitFor();\n+\n+\t\tif (job == null) {\n+\t\t\tthrow new RuntimeException(\"Job no longer exists\");\n+\t\t} else if (job.getStatus().getError() != null) {\n+\t\t\tthrow new RuntimeException(job.getStatus().getError().toString());\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - Job \" + jobId + \" finished successfully.\");\n+\t\t<% } %>\n+\n+\t\treturn job;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQuerySmallResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2717a4ee5ae6876b70e2f3e530d11aa7a9ef21c8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0NjE5MQ==", "bodyText": "[trivial] (not necessarily to fix)\nI would use following code here:\n\t\t<% if (\"SMALL\".equals(resultSizeType)) { %>\n\t\t    job = executeQuerySmallResult(query, useLegacySql);\n\t\t<% } %>\n                <% if (\"LARGE\".equals(resultSizeType)) { %>\n\t\t    job = executeQueryLargeResult(query, useLegacySql);\n\t\t<% } %>\n                <% if (\"AUTO\".equals(resultSizeType)) { %>\n                    try ...\n                <% } %>\n\n(It's analogue of switch-case)\nIn the code above it is more clear, which code is generated, when specific property value is used.\n(In your code it is a bit harder to guess that last else is related to AUTO resultSizeType value)\nBut it's ok as is", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#discussion_r393646191", "createdAt": "2020-03-17T12:35:15Z", "author": {"login": "gonchar-ivan"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tBigQueryInput/ServiceAccountBigQueryHelper.javajet", "diffHunk": "@@ -0,0 +1,147 @@\n+<%@ jet\n+%>\n+class ServiceAccountBigQueryUtil_<%=cid%> {\n+\tprivate com.google.cloud.bigquery.BigQuery bigQuery;\n+\tprivate boolean useLargeResult;\n+\tprivate String tempTable;\n+\n+\tpublic ServiceAccountBigQueryUtil_<%=cid%>() {\n+\t\tthis.useLargeResult = \"LARGE\".equals(\"<%=resultSizeType%>\");\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {\n+\t\tcom.google.auth.oauth2.GoogleCredentials credentials;\n+\t\tjava.io.File credentialsFile = new java.io.File(<%=credentialsFile%>);\n+\t\ttry(java.io.FileInputStream credentialsStream = new java.io.FileInputStream(credentialsFile)) {\n+\t\t\tcredentials = com.google.auth.oauth2.ServiceAccountCredentials.fromStream(credentialsStream);\n+\t\t}\n+\n+\t\tcom.google.cloud.bigquery.BigQuery bigquery = com.google.cloud.bigquery.BigQueryOptions.newBuilder()\n+\t\t\t.setCredentials(credentials)\n+\t\t\t.setProjectId(<%=projectId%>)\n+\t\t\t.build()\n+\t\t\t.getService();\n+\n+\t\treturn bigquery;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job buildJob(com.google.cloud.bigquery.BigQuery bigquery, com.google.cloud.bigquery.QueryJobConfiguration queryConfiguration, com.google.cloud.bigquery.JobId jobId) throws InterruptedException {\n+\t\tcom.google.cloud.bigquery.Job job = bigquery.create(com.google.cloud.bigquery.JobInfo.newBuilder(queryConfiguration).setJobId(jobId).build());\n+\n+\t\t<% if(isLog4jEnabled) {\t%>\n+\t\tlog.info(\"<%=cid%> - Sending job \" + jobId + \" with query: \" + <%=query%>);\n+\t\t<% } %>\n+\n+\t\tjob = job.waitFor();\n+\n+\t\tif (job == null) {\n+\t\t\tthrow new RuntimeException(\"Job no longer exists\");\n+\t\t} else if (job.getStatus().getError() != null) {\n+\t\t\tthrow new RuntimeException(job.getStatus().getError().toString());\n+\t\t}\n+\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - Job \" + jobId + \" finished successfully.\");\n+\t\t<% } %>\n+\n+\t\treturn job;\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQuerySmallResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tbigQuery = buildBigQuery();\n+\t\tcom.google.cloud.bigquery.QueryJobConfiguration queryConfiguration = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query)\n+\t\t\t.setUseLegacySql(useLegacySql)\n+\t\t\t.build();\n+\t\tcom.google.cloud.bigquery.JobId jobId = com.google.cloud.bigquery.JobId.of(<%=projectId%>, java.util.UUID.randomUUID().toString());\n+\t\treturn buildJob(bigQuery, queryConfiguration, jobId);\n+\t}\n+\n+\tprivate com.google.cloud.bigquery.Job executeQueryLargeResult(String query, boolean useLegacySql) throws java.io.IOException, InterruptedException {\n+\t\tif (bigQuery == null) {\n+\t\t\tbigQuery = buildBigQuery();\n+\t\t}\n+\n+\t\t<% if (isCustomTemporaryName) { %>\n+\t\t\tString tempDataset = <%=tempDataset%>;\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\t\tlog.info(\"<%=cid%> - temporary Dataset name : \" + tempDataset);\n+\t\t<% }\n+\t\t} else { %>\n+\t\t\tcom.google.cloud.bigquery.QueryJobConfiguration jobConfDryRun = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query)\n+\t\t\t\t.setUseLegacySql(useLegacySql)\n+\t\t\t\t.setDryRun(true)\n+\t\t\t\t.build();\n+\t\t\tcom.google.cloud.bigquery.Job jobDryRun = bigQuery.create(com.google.cloud.bigquery.JobInfo.of(jobConfDryRun));\n+\n+\t\t\tString queryLocation =jobDryRun.getJobId().getLocation();\n+\t\t\tString location = queryLocation == null ? \"US\" : queryLocation;\n+\t\t\tString tempDataset = java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\")\n+\t\t\t+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt())\n+\t\t\t+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt());\n+\n+\t\t\t<% if (isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - query location :\" + queryLocation);\n+\t\t\tlog.info(\"<%=cid%> - temporary dataset location :\" + location);\n+\t\t\tlog.info(\"<%=cid%> - temporary Dataset name : \" + tempDataset);\n+\n+\t\t\t<% } %>\n+\n+\t\t\tcom.google.cloud.bigquery.DatasetInfo datasetInfo = com.google.cloud.bigquery.DatasetInfo.newBuilder(tempDataset).setLocation(location).build();\n+\t\t\tcom.google.cloud.bigquery.Dataset dataset = bigQuery.create(datasetInfo);\n+\t\t<% } %>\n+\t\ttempTable = java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"\")\n+\t\t+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt())\n+\t\t+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt());\n+\t\t<% if(isLog4jEnabled) { %>\n+\t\t\tlog.info(\"<%=cid%> - temporary table name : \" + tempTable);\n+\t\t<% } %>\n+\t\tcom.google.cloud.bigquery.QueryJobConfiguration queryConfiguration = com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(query)\n+\t\t\t.setUseLegacySql(useLegacySql)\n+\t\t\t.setDryRun(false)\n+\t\t\t.setAllowLargeResults(true)\n+\t\t\t.setDestinationTable(com.google.cloud.bigquery.TableId.of(tempDataset, tempTable))\n+\t\t\t.build();\n+\n+\t\tcom.google.cloud.bigquery.JobId jobId  = com.google.cloud.bigquery.JobId\n+\t\t\t.newBuilder().setProject(<%=projectId%>)\n+\t\t\t.setJob(java.util.UUID.randomUUID().toString())\n+\t\t\t.build();\n+\n+\t\t<% if(isLog4jEnabled){ %>\n+\t\t\tlog.info(\"<%=cid%> - job location : \" + jobId.getLocation());\n+\t\t<% } %>\n+\t\treturn buildJob(bigQuery, queryConfiguration, jobId);\n+\t}\n+\n+\tpublic com.google.cloud.bigquery.Job executeQuery(String query, boolean useLegacySql) throws Exception {\n+\n+\t\tcom.google.cloud.bigquery.Job job;\n+\n+\t\t<% if (\"SMALL\".equals(resultSizeType)) { %>\n+\t\t\tjob = executeQuerySmallResult(query, useLegacySql);\n+\t\t<% } else if (\"LARGE\".equals(resultSizeType)) { %>\n+\t\t\tjob = executeQueryLargeResult(query, useLegacySql);\n+\t\t<% } else { %>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2717a4ee5ae6876b70e2f3e530d11aa7a9ef21c8"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7388ea24bc36fb7167913c1710a66423ef595c4", "author": {"user": {"login": "OleksiiNimych", "name": null}}, "url": "https://github.com/Talend/tdi-studio-se/commit/f7388ea24bc36fb7167913c1710a66423ef595c4", "committedDate": "2020-03-17T15:28:30Z", "message": "fix(TDI-42951): Improved query execution for Result size Auto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbb5dca6152a57f71d238d6aaf97e0678c73954d", "author": {"user": {"login": "OleksiiNimych", "name": null}}, "url": "https://github.com/Talend/tdi-studio-se/commit/cbb5dca6152a57f71d238d6aaf97e0678c73954d", "committedDate": "2020-03-17T15:28:31Z", "message": "Remove code duplication, omitt _<%cid%> from local variables, refactor methods in ServiceAccountBigQueryUtil class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bea0c4e1e3e8ba8e5fbfc0acdba4bb1887ab013f", "author": {"user": {"login": "OleksiiNimych", "name": null}}, "url": "https://github.com/Talend/tdi-studio-se/commit/bea0c4e1e3e8ba8e5fbfc0acdba4bb1887ab013f", "committedDate": "2020-03-17T15:28:31Z", "message": "Indentations reduced to a single style"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2717a4ee5ae6876b70e2f3e530d11aa7a9ef21c8", "author": {"user": {"login": "OleksiiNimych", "name": null}}, "url": "https://github.com/Talend/tdi-studio-se/commit/2717a4ee5ae6876b70e2f3e530d11aa7a9ef21c8", "committedDate": "2020-03-06T15:09:01Z", "message": "Indentations reduced to a single style"}, "afterCommit": {"oid": "bea0c4e1e3e8ba8e5fbfc0acdba4bb1887ab013f", "author": {"user": {"login": "OleksiiNimych", "name": null}}, "url": "https://github.com/Talend/tdi-studio-se/commit/bea0c4e1e3e8ba8e5fbfc0acdba4bb1887ab013f", "committedDate": "2020-03-17T15:28:31Z", "message": "Indentations reduced to a single style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf7fb7b84bad45bffe31a27995dfb334abcb3b01", "author": {"user": {"login": "OleksiiNimych", "name": null}}, "url": "https://github.com/Talend/tdi-studio-se/commit/cf7fb7b84bad45bffe31a27995dfb334abcb3b01", "committedDate": "2020-03-17T16:57:52Z", "message": "fix(TDI-42951): Fixed formating and Fixed caching"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MjM5NzM5", "url": "https://github.com/Talend/tdi-studio-se/pull/4495#pullrequestreview-376239739", "createdAt": "2020-03-17T17:13:00Z", "commit": {"oid": "cf7fb7b84bad45bffe31a27995dfb334abcb3b01"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4635, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}