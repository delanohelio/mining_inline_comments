{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1ODIzMDY0", "number": 5059, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMjo1MToxMlrOEXCNRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMjo1MToxMlrOEXCNRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTg4ODY5OnYy", "diffSide": "RIGHT", "path": "main/plugins/org.talend.designer.components.localprovider/components/tAmazonEMRManage/tAmazonEMRManage_begin.javajet", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMjo1MToxMlrOG-miBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMzowNjowMFrOG-mwzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NjE5OA==", "bodyText": "This error message is too aggressive :(\n\"You\" \"must\" that kind of words are not polite enough.\nA subnet ID should be specified while using multiple master nodes.", "url": "https://github.com/Talend/tdi-studio-se/pull/5059#discussion_r468296198", "createdAt": "2020-08-11T02:51:12Z", "author": {"login": "pyzhou-talend"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tAmazonEMRManage/tAmazonEMRManage_begin.javajet", "diffHunk": "@@ -246,59 +249,81 @@\n \tif(setApps) {\n \t%>\n \t<%@ include file=\"./app_mapping.javajet\"%>\n-\t<%\n-\t}\n+\t<%}%>\n \t\n+\tjava.util.List<com.amazonaws.services.elasticmapreduce.model.Configuration> configs_<%=cid%> = new java.util.ArrayList<com.amazonaws.services.elasticmapreduce.model.Configuration>();\n+\t<%\n \tMap<String, List<Map<String,String>>> classification2Properties = new HashMap<String, List<Map<String,String>>>();\n-\tif(newApi) {\n-\t\tList<Map<String, String>> property_table = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, \"__PROPERTY_TABLE__\");\n-\t\tif(property_table!=null) {\n-\t\t\tfor (int i=0; i<property_table.size(); i++) {\n-\t\t\t\tMap<String, String> property = property_table.get(i);\n-\t\t\t\tString classification = property.get(\"CLASSIFICATION\");\n-\t\t\t\t\n-\t\t\t\tList<Map<String,String>> properties = classification2Properties.get(classification);\n-\t\t\t\tif(properties == null) {\n-\t\t\t\t\tproperties = new ArrayList<Map<String,String>>();\n-\t\t\t\t\tclassification2Properties.put(classification, properties);\n+\tString property_json = ElementParameterParser.getValue(node, \"__PROPERTY_JSON__\");\n+\tboolean property_json_validated = property_json != null && !property_json.equals(\"\\\"\\\"\") && property_json.length() > 0;\n+\t%>\n+\tboolean property_json_validated_<%=cid%> = <%=property_json_validated %>;\n+\t<%\n+\tif(!use_multiple_master) {\n+\t\tif(newApi) {\n+\t\t\tList<Map<String, String>> property_table = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, \"__PROPERTY_TABLE__\");\n+\t\t\tif(property_table!=null) {\n+\t\t\t\tfor (int i=0; i<property_table.size(); i++) {\n+\t\t\t\t\tMap<String, String> property = property_table.get(i);\n+\t\t\t\t\tString classification = property.get(\"CLASSIFICATION\");\n+\t\t\t\t\t\n+\t\t\t\t\tList<Map<String,String>> properties = classification2Properties.get(classification);\n+\t\t\t\t\tif(properties == null) {\n+\t\t\t\t\t\tproperties = new ArrayList<Map<String,String>>();\n+\t\t\t\t\t\tclassification2Properties.put(classification, properties);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tproperties.add(property);\n \t\t\t\t}\n \t\t\t\t\n-\t\t\t\tproperties.add(property);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(!classification2Properties.isEmpty()) {\n-\t\t\t%>\n-\t\t\t\tjava.util.List<com.amazonaws.services.elasticmapreduce.model.Configuration> configs_<%=cid%> = new java.util.ArrayList<com.amazonaws.services.elasticmapreduce.model.Configuration>();\n-\t\t\t\tjava.util.Map<String,String> properties_<%=cid%> = null;\n-\t\t\t\tcom.amazonaws.services.elasticmapreduce.model.Configuration config_<%=cid%> = null;\n-\t\t\t<%\n-\t\t\t}\n-\t\t\t\n-\t\t\tfor(java.util.Map.Entry<String, List<Map<String,String>>> entry : classification2Properties.entrySet()) {\n-\t\t\t\tString classification = entry.getKey();\n-\t\t\t\tList<Map<String,String>> properties = entry.getValue();\n+\t\t\t\tif(!classification2Properties.isEmpty()) {\n \t\t\t\t%>\n-    \t\t\tproperties_<%=cid%> = new java.util.HashMap<String,String>();\n-    \t\t\t\n-    \t\t\t<%\n-    \t\t\tfor(Map<String,String> property : properties) {\n-    \t\t\t%>\n-    \t\t\t\tproperties_<%=cid%>.put(<%=property.get(\"KEY\")%>, <%=property.get(\"VALUE\")%>);\n-    \t\t\t<%\n-    \t\t\t}\n-    \t\t\t%>\n-    \t\t\t\n-            \tconfig_<%=cid%> = new com.amazonaws.services.elasticmapreduce.model.Configuration()\n-                    .withClassification(<%=classification%>)\n-                    .withProperties(properties_<%=cid%>);\n-                    \n-                configs_<%=cid%>.add(config_<%=cid%>);\n-\t\t\t<%\n+\t\t\t\t\tjava.util.Map<String,String> properties_<%=cid%> = null;\n+\t\t\t\t\tcom.amazonaws.services.elasticmapreduce.model.Configuration config_<%=cid%> = null;\n+\t\t\t\t<%\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tfor(java.util.Map.Entry<String, List<Map<String,String>>> entry : classification2Properties.entrySet()) {\n+\t\t\t\t\tString classification = entry.getKey();\n+\t\t\t\t\tList<Map<String,String>> properties = entry.getValue();\n+\t\t\t\t\t%>\n+\t    \t\t\tproperties_<%=cid%> = new java.util.HashMap<String,String>();\n+\t    \t\t\t\n+\t    \t\t\t<%\n+\t    \t\t\tfor(Map<String,String> property : properties) {\n+\t    \t\t\t%>\n+\t    \t\t\t\tproperties_<%=cid%>.put(<%=property.get(\"KEY\")%>, <%=property.get(\"VALUE\")%>);\n+\t    \t\t\t<%\n+\t    \t\t\t}\n+\t    \t\t\t%>\n+\t    \t\t\t\n+\t            \tconfig_<%=cid%> = new com.amazonaws.services.elasticmapreduce.model.Configuration()\n+\t                    .withClassification(<%=classification%>)\n+\t                    .withProperties(properties_<%=cid%>);\n+\t                    \n+\t                configs_<%=cid%>.add(config_<%=cid%>);\n+\t\t\t\t<%\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n-\t}\n+\t}else{\n+\t\tboolean isHasSubnetId = subnet_id != null && !subnet_id.equals(\"\\\"\\\"\") && subnet_id.length() > 0;\n \t%>\n-\t\n+\t\tboolean isHasSubnetId_<%=cid%> = <%=isHasSubnetId %>;\n+\t\tif(!isHasSubnetId_<%=cid%>) {\n+\t\t\tthrow new RuntimeException(\"You must specify the subnet ID when you launch an EMR cluster with multiple master nodes.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8120f503d01dae52f78d27a53e10a5244a53a4f3"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5OTk4Mw==", "bodyText": "Thank you, pengyu.Actually, this message is copied from AWS, but I think yours is better. \ud83d\udc4d", "url": "https://github.com/Talend/tdi-studio-se/pull/5059#discussion_r468299983", "createdAt": "2020-08-11T03:06:00Z", "author": {"login": "vyu-talend"}, "path": "main/plugins/org.talend.designer.components.localprovider/components/tAmazonEMRManage/tAmazonEMRManage_begin.javajet", "diffHunk": "@@ -246,59 +249,81 @@\n \tif(setApps) {\n \t%>\n \t<%@ include file=\"./app_mapping.javajet\"%>\n-\t<%\n-\t}\n+\t<%}%>\n \t\n+\tjava.util.List<com.amazonaws.services.elasticmapreduce.model.Configuration> configs_<%=cid%> = new java.util.ArrayList<com.amazonaws.services.elasticmapreduce.model.Configuration>();\n+\t<%\n \tMap<String, List<Map<String,String>>> classification2Properties = new HashMap<String, List<Map<String,String>>>();\n-\tif(newApi) {\n-\t\tList<Map<String, String>> property_table = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, \"__PROPERTY_TABLE__\");\n-\t\tif(property_table!=null) {\n-\t\t\tfor (int i=0; i<property_table.size(); i++) {\n-\t\t\t\tMap<String, String> property = property_table.get(i);\n-\t\t\t\tString classification = property.get(\"CLASSIFICATION\");\n-\t\t\t\t\n-\t\t\t\tList<Map<String,String>> properties = classification2Properties.get(classification);\n-\t\t\t\tif(properties == null) {\n-\t\t\t\t\tproperties = new ArrayList<Map<String,String>>();\n-\t\t\t\t\tclassification2Properties.put(classification, properties);\n+\tString property_json = ElementParameterParser.getValue(node, \"__PROPERTY_JSON__\");\n+\tboolean property_json_validated = property_json != null && !property_json.equals(\"\\\"\\\"\") && property_json.length() > 0;\n+\t%>\n+\tboolean property_json_validated_<%=cid%> = <%=property_json_validated %>;\n+\t<%\n+\tif(!use_multiple_master) {\n+\t\tif(newApi) {\n+\t\t\tList<Map<String, String>> property_table = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, \"__PROPERTY_TABLE__\");\n+\t\t\tif(property_table!=null) {\n+\t\t\t\tfor (int i=0; i<property_table.size(); i++) {\n+\t\t\t\t\tMap<String, String> property = property_table.get(i);\n+\t\t\t\t\tString classification = property.get(\"CLASSIFICATION\");\n+\t\t\t\t\t\n+\t\t\t\t\tList<Map<String,String>> properties = classification2Properties.get(classification);\n+\t\t\t\t\tif(properties == null) {\n+\t\t\t\t\t\tproperties = new ArrayList<Map<String,String>>();\n+\t\t\t\t\t\tclassification2Properties.put(classification, properties);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tproperties.add(property);\n \t\t\t\t}\n \t\t\t\t\n-\t\t\t\tproperties.add(property);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(!classification2Properties.isEmpty()) {\n-\t\t\t%>\n-\t\t\t\tjava.util.List<com.amazonaws.services.elasticmapreduce.model.Configuration> configs_<%=cid%> = new java.util.ArrayList<com.amazonaws.services.elasticmapreduce.model.Configuration>();\n-\t\t\t\tjava.util.Map<String,String> properties_<%=cid%> = null;\n-\t\t\t\tcom.amazonaws.services.elasticmapreduce.model.Configuration config_<%=cid%> = null;\n-\t\t\t<%\n-\t\t\t}\n-\t\t\t\n-\t\t\tfor(java.util.Map.Entry<String, List<Map<String,String>>> entry : classification2Properties.entrySet()) {\n-\t\t\t\tString classification = entry.getKey();\n-\t\t\t\tList<Map<String,String>> properties = entry.getValue();\n+\t\t\t\tif(!classification2Properties.isEmpty()) {\n \t\t\t\t%>\n-    \t\t\tproperties_<%=cid%> = new java.util.HashMap<String,String>();\n-    \t\t\t\n-    \t\t\t<%\n-    \t\t\tfor(Map<String,String> property : properties) {\n-    \t\t\t%>\n-    \t\t\t\tproperties_<%=cid%>.put(<%=property.get(\"KEY\")%>, <%=property.get(\"VALUE\")%>);\n-    \t\t\t<%\n-    \t\t\t}\n-    \t\t\t%>\n-    \t\t\t\n-            \tconfig_<%=cid%> = new com.amazonaws.services.elasticmapreduce.model.Configuration()\n-                    .withClassification(<%=classification%>)\n-                    .withProperties(properties_<%=cid%>);\n-                    \n-                configs_<%=cid%>.add(config_<%=cid%>);\n-\t\t\t<%\n+\t\t\t\t\tjava.util.Map<String,String> properties_<%=cid%> = null;\n+\t\t\t\t\tcom.amazonaws.services.elasticmapreduce.model.Configuration config_<%=cid%> = null;\n+\t\t\t\t<%\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tfor(java.util.Map.Entry<String, List<Map<String,String>>> entry : classification2Properties.entrySet()) {\n+\t\t\t\t\tString classification = entry.getKey();\n+\t\t\t\t\tList<Map<String,String>> properties = entry.getValue();\n+\t\t\t\t\t%>\n+\t    \t\t\tproperties_<%=cid%> = new java.util.HashMap<String,String>();\n+\t    \t\t\t\n+\t    \t\t\t<%\n+\t    \t\t\tfor(Map<String,String> property : properties) {\n+\t    \t\t\t%>\n+\t    \t\t\t\tproperties_<%=cid%>.put(<%=property.get(\"KEY\")%>, <%=property.get(\"VALUE\")%>);\n+\t    \t\t\t<%\n+\t    \t\t\t}\n+\t    \t\t\t%>\n+\t    \t\t\t\n+\t            \tconfig_<%=cid%> = new com.amazonaws.services.elasticmapreduce.model.Configuration()\n+\t                    .withClassification(<%=classification%>)\n+\t                    .withProperties(properties_<%=cid%>);\n+\t                    \n+\t                configs_<%=cid%>.add(config_<%=cid%>);\n+\t\t\t\t<%\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n-\t}\n+\t}else{\n+\t\tboolean isHasSubnetId = subnet_id != null && !subnet_id.equals(\"\\\"\\\"\") && subnet_id.length() > 0;\n \t%>\n-\t\n+\t\tboolean isHasSubnetId_<%=cid%> = <%=isHasSubnetId %>;\n+\t\tif(!isHasSubnetId_<%=cid%>) {\n+\t\t\tthrow new RuntimeException(\"You must specify the subnet ID when you launch an EMR cluster with multiple master nodes.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NjE5OA=="}, "originalCommit": {"oid": "8120f503d01dae52f78d27a53e10a5244a53a4f3"}, "originalPosition": 128}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4700, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}