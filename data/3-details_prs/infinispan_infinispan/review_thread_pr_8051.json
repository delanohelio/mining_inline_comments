{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MzkzMzIx", "number": 8051, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoyMToxNVrODnk3WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyMToxNlrODnyA7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODI1MDQ5OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_using_protostream_marshaller.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoyMToxNVrOF1qIPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoyMToxNVrOF1qIPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwOTA4NQ==", "bodyText": "\"integrates with the ProtoStream ...\"", "url": "https://github.com/infinispan/infinispan/pull/8051#discussion_r391809085", "createdAt": "2020-03-12T18:21:15Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/proc_using_protostream_marshaller.adoc", "diffHunk": "@@ -0,0 +1,29 @@\n+[id='protostream_cm_config']\n+= Using the ProtoStream Marshaller\n+{brandname} directly integrates a ProtoStream API to encode and decode Java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6111af10edafd79a64bcc57cef077dc76dece1ca"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODI1ODY0OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/stories/assembly_marshalling.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoyMzo0NFrOF1qNlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoyMzo0NFrOF1qNlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMDQ1NQ==", "bodyText": "At this point the Kryo and Protostuff marshallers are probably the marshallers with smallest amount of testing and usage in the wild, so we probably want to display the other marshaller implementations first.", "url": "https://github.com/infinispan/infinispan/pull/8051#discussion_r391810455", "createdAt": "2020-03-12T18:23:44Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/stories/assembly_marshalling.adoc", "diffHunk": "@@ -0,0 +1,36 @@\n+[id='marshalling']\n+:context: dev\n+= Marshalling Java Objects\n+Marshalling converts Java objects into binary format so they can be transferred\n+over the wire or stored to disk. The reverse process, unmarshalling, transforms\n+data from binary format into Java objects.\n+\n+{brandname} performs marshalling and unmarshalling to:\n+\n+* Send data to other {brandname} nodes in a cluster.\n+* Store data in persistent cache stores.\n+* Store data in binary format to provide lazy deserialization capabilities.\n+\n+[NOTE]\n+====\n+{brandname} handles marshalling for all internal types. You need to configure\n+marshalling only for the Java objects that you want to store.\n+====\n+\n+{brandname} uses ProtoStream as the default for marshalling Java objects to\n+binary format. {brandname} also provides other Marshaller implementations you\n+can use.\n+\n+include::{topics}/proc_using_protostream_marshaller.adoc[leveloffset=+1]\n+include::{topics}/proc_using_kyro_marshaller.adoc[leveloffset=+1]\n+include::{topics}/proc_using_protostuff_marshaller.adoc[leveloffset=+1]\n+include::{topics}/proc_using_custom_marshallers.adoc[leveloffset=+1]\n+include::{topics}/proc_using_java_serialization.adoc[leveloffset=+1]\n+include::{topics}/proc_using_jboss_marshaller.adoc[leveloffset=+1]\n+include::{topics}/proc_adding_deserialization_whitelist.adoc[leveloffset=+1]\n+include::{topics}/proc_storing_deserialized_objects.adoc[leveloffset=+1]\n+include::{topics}/proc_enabling_store_binary.adoc[leveloffset=+1]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6111af10edafd79a64bcc57cef077dc76dece1ca"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODI2NDIxOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_using_kyro_marshaller.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoyNTozMVrOF1qRHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoyNTozMVrOF1qRHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMTM1Nw==", "bodyText": "This only applies to server mode. It's possible to utilise the Kryo marshaller in Embedded mode by just adding the infinispan-marshaller-kryo jar as a dependency and then specifying the org.infinispan.marshaller.kryo.KryoMarshaller class as the marshaller.", "url": "https://github.com/infinispan/infinispan/pull/8051#discussion_r391811357", "createdAt": "2020-03-12T18:25:31Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/proc_using_kyro_marshaller.adoc", "diffHunk": "@@ -0,0 +1,27 @@\n+[id='kryo_marshalling']\n+= Using the Kryo Marshaller\n+{brandname} provides a marshalling implementation that uses Kryo libraries.\n+\n+.Procedure\n+\n+. Implement a service provider for the `SerializerRegistryService.java` interface.\n+. Place all serializer registrations in the `register(Kryo)` method; where serializers are registered with the supplied `Kryo` object using the Kryo API, for example:\n++\n+----\n+kryo.register(ExampleObject.class, new ExampleObjectSerializer())\n+----\n++\n+. Specify the full path of implementing classes in your deployment JAR file within:\n++\n+----\n+META-INF/services/org/infinispan/marshaller/kryo/SerializerRegistryService\n+----\n+\n+//Community only\n+ifndef::productized[]\n+{brandname} provides a link:http://central.maven.org/maven2/org/infinispan/infinispan-marshaller-kryo-bundle/{infinispanversion}/infinispan-marshaller-kryo-bundle-{infinispanversion}.jar[Kryo Bundle] that includes all runtime class files for the Kryo marshalling implementation. Download the JAR and add it to the `server/lib` directory of your {brandname} servers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6111af10edafd79a64bcc57cef077dc76dece1ca"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODI2NzY1OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_using_protostuff_marshaller.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoyNjozNlrOF1qTSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoyNjozNlrOF1qTSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMTkxNA==", "bodyText": "Same as Kryo, this doesn't cover the Embedded use-case.", "url": "https://github.com/infinispan/infinispan/pull/8051#discussion_r391811914", "createdAt": "2020-03-12T18:26:36Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/proc_using_protostuff_marshaller.adoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[id='protostuff_marshalling']\n+= Using the Protostuff Marshaller\n+{brandname} provides a marshalling implementation that uses Protostuff\n+libraries.\n+\n+.Procedure\n+\n+Do one of the following to register custom Protostuff schemas for object\n+marshalling:\n+\n+* Call the `register()` method.\n++\n+[source,java]\n+----\n+include::code_examples/RegisterCustomProtostuffSchema.java[]\n+----\n+\n+* Implement a service provider for the `SerializerRegistryService.java` interface that places all schema registrations in the `register()` method.\n++\n+You should then specify the full path of implementing classes in your deployment JAR file within:\n++\n+----\n+META-INF/services/org/infinispan/marshaller/protostuff/SchemaRegistryService\n+----\n+\n+//Community only\n+ifndef::productized[]\n+{brandname} provides a link:http://central.maven.org/maven2/org/infinispan/infinispan-marshaller-protostuff-bundle/{infinispanversion}/infinispan-marshaller-protostuff-bundle-{infinispanversion}.jar[Protostuff Bundle JAR] that includes all runtime class files for the Protostuff marshalling implementation. Download the JAR and add it to the `server/lib` directory of your {brandname} servers.\n+endif::productized[]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6111af10edafd79a64bcc57cef077dc76dece1ca"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODI3NjIyOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_using_jboss_marshaller.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoyODo1MFrOF1qYfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoyODo1MFrOF1qYfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMzI0NA==", "bodyText": "\" Along with JBoss Marshalling {brandname}\" redundant? Can we just state that \"JBoss Marshalling and the AdvancedExternalizer interface is deprecated in ...\"", "url": "https://github.com/infinispan/infinispan/pull/8051#discussion_r391813244", "createdAt": "2020-03-12T18:28:50Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/proc_using_jboss_marshaller.adoc", "diffHunk": "@@ -0,0 +1,41 @@\n+[id='jboss_marshalling']\n+= Using JBoss Marshalling\n+JBoss Marshalling is a serialization-based marshalling library and was the\n+default marshaller in previous {brandname} versions.\n+\n+[NOTE]\n+====\n+* You should use serialization-based marshalling with {brandname} but use\n+Protostream instead, which is a high-performance binary wire format that\n+ensures backwards compatibility.\n+\n+* JBoss Marshalling is deprecated in {brandname} and will be removed in a future\n+release. Along with JBoss Marshalling {brandname} deprecates the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6111af10edafd79a64bcc57cef077dc76dece1ca"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODI4NDI3OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_enabling_store_binary.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODozMTo0MVrOF1qeNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDowMjoxNFrOF1tVww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNDcwOQ==", "bodyText": "This is wrong. MarshalledValue is only ever used by stores and is not used to store entries in the cache.", "url": "https://github.com/infinispan/infinispan/pull/8051#discussion_r391814709", "createdAt": "2020-03-12T18:31:41Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/proc_enabling_store_binary.adoc", "diffHunk": "@@ -0,0 +1,46 @@\n+[id='store_as_binary']\n+= Storing Data in Binary Format\n+{brandname} can store data in its serialized form, in binary format, and then\n+either serialize or deserialize Java objects as needed. This behavior is also\n+referred to as lazy deserialization.\n+\n+When you store data in binary format, deserialization typically uses the thread\n+context class loader of the invocation that requires deserialization, which\n+provides an effective way to isolate classloaders.\n+\n+.Programmatic procedure\n+\n+[source,java]\n+----\n+include::code_examples/StorageTypeBinary.java[]\n+----\n+\n+.Declarative procedure\n+\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/memory_binary.xml[]\n+----\n+\n+.Equality Considerations\n+\n+When storing data in binary format, {brandname} uses the `WrappedBytes`\n+interface for keys and values. This wrapper class transparently takes care of\n+serialization and deserialization on demand, and internally may have a\n+reference to the object itself being wrapped, or the serialized, byte array\n+representation of the object. This has an effect on the behavior of equality,\n+which is important to note if you implement an `equals()` methods on keys.\n+\n+The `equals()` method of the wrapper class either compares binary\n+representations (byte arrays) or delegates to the wrapped object instance's\n+`equals()` method, depending on whether both instances being compared are in\n+serialized or deserialized form at the time of comparison. If one of the\n+instances being compared is in one form and the other in another form, then one\n+instance is either serialized or deserialized.\n+\n+This affects how keys stored in the cache work because comparisons happen on\n+the key that is wrapped by a `MarshalledValue`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6111af10edafd79a64bcc57cef077dc76dece1ca"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg2MTY5OQ==", "bodyText": "I just removed this line. tbh there were a few other things about store as binary in the doc that seemed off. I dropped some of the deprecated content. hopefully it's ok. if you don't mind taking another look I'd feel better about it. cheers.", "url": "https://github.com/infinispan/infinispan/pull/8051#discussion_r391861699", "createdAt": "2020-03-12T20:02:14Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/proc_enabling_store_binary.adoc", "diffHunk": "@@ -0,0 +1,46 @@\n+[id='store_as_binary']\n+= Storing Data in Binary Format\n+{brandname} can store data in its serialized form, in binary format, and then\n+either serialize or deserialize Java objects as needed. This behavior is also\n+referred to as lazy deserialization.\n+\n+When you store data in binary format, deserialization typically uses the thread\n+context class loader of the invocation that requires deserialization, which\n+provides an effective way to isolate classloaders.\n+\n+.Programmatic procedure\n+\n+[source,java]\n+----\n+include::code_examples/StorageTypeBinary.java[]\n+----\n+\n+.Declarative procedure\n+\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/memory_binary.xml[]\n+----\n+\n+.Equality Considerations\n+\n+When storing data in binary format, {brandname} uses the `WrappedBytes`\n+interface for keys and values. This wrapper class transparently takes care of\n+serialization and deserialization on demand, and internally may have a\n+reference to the object itself being wrapped, or the serialized, byte array\n+representation of the object. This has an effect on the behavior of equality,\n+which is important to note if you implement an `equals()` methods on keys.\n+\n+The `equals()` method of the wrapper class either compares binary\n+representations (byte arrays) or delegates to the wrapped object instance's\n+`equals()` method, depending on whether both instances being compared are in\n+serialized or deserialized form at the time of comparison. If one of the\n+instances being compared is in one form and the other in another form, then one\n+instance is either serialized or deserialized.\n+\n+This affects how keys stored in the cache work because comparisons happen on\n+the key that is wrapped by a `MarshalledValue`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNDcwOQ=="}, "originalCommit": {"oid": "6111af10edafd79a64bcc57cef077dc76dece1ca"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODI5NDk1OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_implementing_serial_cxt_initializer.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODozNTowNVrOF1qlGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODozNTowNVrOF1qlGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxNjQ3NA==", "bodyText": "Maybe make it clear that we're talking about ProtoStream Marshallers here. Something like:\n\"schema and the ProtoStream marshaller implementations\".", "url": "https://github.com/infinispan/infinispan/pull/8051#discussion_r391816474", "createdAt": "2020-03-12T18:35:05Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/proc_implementing_serial_cxt_initializer.adoc", "diffHunk": "@@ -0,0 +1,38 @@\n+[id='implementing_proto_marshallers']\n+= Manually Implementing Serialization Context Initializers\n+In some cases you might need to manually define `.proto` schema files and\n+implement ProtoStream marshallers. For example, if you cannot modify Java\n+object classes to add annotations.\n+\n+.Procedure\n+\n+. Create a `.proto` schema with Protobuf messages.\n++\n+[source,proto]\n+----\n+include::config_examples/library.proto[]\n+----\n++\n+. Use the `org.infinispan.protostream.MessageMarshaller` interface to implement\n+marshallers for your classes.\n++\n+[source,java]\n+.BookMarshaller.java\n+----\n+include::code_examples/BookMarshaller.java[]\n+----\n++\n+[source,java]\n+.AuthorMarshaller.java\n+----\n+include::code_examples/AuthorMarshaller.java[]\n+----\n++\n+. Create a `SerializationContextInitializer` implementation that registers the\n+`.proto` schema and marshallers with a `SerializationContext`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6111af10edafd79a64bcc57cef077dc76dece1ca"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQwNDkyOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_enabling_store_binary.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyMToxNlrOF1-bjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyMToxNlrOF1-bjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MTcxMQ==", "bodyText": "I'm not sure this paragraph adds any value.", "url": "https://github.com/infinispan/infinispan/pull/8051#discussion_r392141711", "createdAt": "2020-03-13T10:21:16Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/proc_enabling_store_binary.adoc", "diffHunk": "@@ -0,0 +1,43 @@\n+[id='store_as_binary']\n+= Storing Data in Binary Format\n+{brandname} can store data in its serialized form, in binary format, and then\n+either serialize or deserialize Java objects as needed. This behavior is also\n+referred to as lazy deserialization.\n+\n+When you store data in binary format, deserialization typically uses the thread\n+context class loader of the invocation that requires deserialization, which\n+provides an effective way to isolate classloaders.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "279eb3be7317371245e614ca68f859ef14d9ab8f"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4444, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}