{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3ODA0NTIx", "number": 8496, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0MjoxNlrOEK7Uaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0MjoxNlrOEK7Uaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODkzMDk5OnYy", "diffSide": "RIGHT", "path": "remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/impl/ProtobufMetadataManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0MjoxNlrOGsQAHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0MjoxNlrOGsQAHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1MjcwMw==", "bodyText": "Providing more detail on what I said before, here I was expecting the service loader would be used only if there are no manually configured SCI's in globalConfiguration.serialization().\nThe auto-registration is nice for simple use cases, which might account for 90% real use cases. But it cannot give you any way out of situations when schemas are conflicting for any reason.\nTo support debugging of such situations I propose adding INFO logging here, with the names of all SCI's being registred. And after the registration I would also dump the eventual errors, with ERROR level immediately.", "url": "https://github.com/infinispan/infinispan/pull/8496#discussion_r449052703", "createdAt": "2020-07-02T14:42:16Z", "author": {"login": "anistor"}, "path": "remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/impl/ProtobufMetadataManagerImpl.java", "diffHunk": "@@ -95,6 +95,7 @@ void start() {\n             getProtobufMetadataCacheConfig(globalConfiguration).build(),\n             EnumSet.of(InternalCacheRegistry.Flag.USER, InternalCacheRegistry.Flag.PROTECTED, InternalCacheRegistry.Flag.PERSISTENT));\n \n+      processSerializationContextInitializer(ServiceFinder.load(SerializationContextInitializer.class, globalConfiguration.classLoader()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "941272139f24303a123f8cc4aee10a520522436b"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4093, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}