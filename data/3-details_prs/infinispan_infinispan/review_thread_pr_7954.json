{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMTM0NDQ2", "number": 7954, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDowMzozOFrODkNRQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo1MDowNlrODkXM7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjkyNzM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/statetransfer/AbstractStateTransferCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDowMzozOFrOFwZt8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDowMzozOFrOFwZt8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI5NzMyOA==", "bodyText": "origin is always rpcManager.getAddress().\nIt is not necessary to set it in the constructor neither sending it through the wire.", "url": "https://github.com/infinispan/infinispan/pull/7954#discussion_r386297328", "createdAt": "2020-03-02T10:03:38Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/commands/statetransfer/AbstractStateTransferCommand.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.infinispan.commands.statetransfer;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+import org.infinispan.commands.TopologyAffectedCommand;\n+import org.infinispan.commands.remote.BaseRpcCommand;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.remoting.transport.Address;\n+import org.infinispan.util.ByteString;\n+\n+/**\n+ * Base class for commands related to state transfer.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+abstract class AbstractStateTransferCommand extends BaseRpcCommand implements TopologyAffectedCommand {\n+\n+   private byte commandId;\n+   protected int topologyId;\n+   protected IntSet segments;\n+\n+   AbstractStateTransferCommand(byte commandId, ByteString cacheName) {\n+      super(cacheName);\n+      this.commandId = commandId;\n+   }\n+\n+   AbstractStateTransferCommand(byte commandId, ByteString cacheName, Address origin, int topologyId, IntSet segments) {\n+      this(commandId, cacheName);\n+      this.origin = origin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f16845d8d3365dbe347a98db9a16d1823ecaee3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjkzMzc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/statetransfer/AbstractStateTransferCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDowNTozM1rOFwZxrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDowNTozM1rOFwZxrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI5ODI4Nw==", "bodyText": "what about using IntSetsExternalization.writeTo() and IntSetsExternalization.readFrom()?", "url": "https://github.com/infinispan/infinispan/pull/7954#discussion_r386298287", "createdAt": "2020-03-02T10:05:33Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/commands/statetransfer/AbstractStateTransferCommand.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.infinispan.commands.statetransfer;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+import org.infinispan.commands.TopologyAffectedCommand;\n+import org.infinispan.commands.remote.BaseRpcCommand;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.remoting.transport.Address;\n+import org.infinispan.util.ByteString;\n+\n+/**\n+ * Base class for commands related to state transfer.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+abstract class AbstractStateTransferCommand extends BaseRpcCommand implements TopologyAffectedCommand {\n+\n+   private byte commandId;\n+   protected int topologyId;\n+   protected IntSet segments;\n+\n+   AbstractStateTransferCommand(byte commandId, ByteString cacheName) {\n+      super(cacheName);\n+      this.commandId = commandId;\n+   }\n+\n+   AbstractStateTransferCommand(byte commandId, ByteString cacheName, Address origin, int topologyId, IntSet segments) {\n+      this(commandId, cacheName);\n+      this.origin = origin;\n+      this.topologyId = topologyId;\n+      this.segments = segments;\n+   }\n+\n+   @Override\n+   public boolean isReturnValueExpected() {\n+      return true;\n+   }\n+\n+   @Override\n+   public boolean canBlock() {\n+      // All state request commands need to wait for the proper topology\n+      return true;\n+   }\n+\n+   @Override\n+   public int getTopologyId() {\n+      return topologyId;\n+   }\n+\n+   @Override\n+   public void setTopologyId(int topologyId) {\n+      this.topologyId = topologyId;\n+   }\n+\n+   public IntSet getSegments() {\n+      return segments;\n+   }\n+\n+   @Override\n+   public byte getCommandId() {\n+      return commandId;\n+   }\n+\n+   @Override\n+   public void writeTo(ObjectOutput output) throws IOException {\n+      output.writeObject(origin);\n+      output.writeObject(segments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f16845d8d3365dbe347a98db9a16d1823ecaee3"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjk0OTc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/statetransfer/AbstractStateTransferCommand.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxMDowMFrOFwZ7IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToxNzowNlrOFwb86g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMDcwNQ==", "bodyText": "[opinion]\nI'm not sure about this anymore :) we are allocating +4 bytes per instance just to avoid implementing byte getCommandId()", "url": "https://github.com/infinispan/infinispan/pull/7954#discussion_r386300705", "createdAt": "2020-03-02T10:10:00Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/commands/statetransfer/AbstractStateTransferCommand.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.infinispan.commands.statetransfer;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+import org.infinispan.commands.TopologyAffectedCommand;\n+import org.infinispan.commands.remote.BaseRpcCommand;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.remoting.transport.Address;\n+import org.infinispan.util.ByteString;\n+\n+/**\n+ * Base class for commands related to state transfer.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+abstract class AbstractStateTransferCommand extends BaseRpcCommand implements TopologyAffectedCommand {\n+\n+   private byte commandId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f16845d8d3365dbe347a98db9a16d1823ecaee3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMyNzY4OA==", "bodyText": "Why +4? Is it not just  a single byte per instance?\nI'm against removing it though", "url": "https://github.com/infinispan/infinispan/pull/7954#discussion_r386327688", "createdAt": "2020-03-02T11:03:39Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/commands/statetransfer/AbstractStateTransferCommand.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.infinispan.commands.statetransfer;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+import org.infinispan.commands.TopologyAffectedCommand;\n+import org.infinispan.commands.remote.BaseRpcCommand;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.remoting.transport.Address;\n+import org.infinispan.util.ByteString;\n+\n+/**\n+ * Base class for commands related to state transfer.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+abstract class AbstractStateTransferCommand extends BaseRpcCommand implements TopologyAffectedCommand {\n+\n+   private byte commandId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMDcwNQ=="}, "originalCommit": {"oid": "9f16845d8d3365dbe347a98db9a16d1823ecaee3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzMjEyMQ==", "bodyText": "1 byte + 3 bytes alignment.\norg.infinispan.commands.statetransfer.AbstractStateTransferCommand object internals:\n OFFSET  SIZE         TYPE DESCRIPTION                               VALUE\n      0    12              (object header)                           N/A\n     12     4   ByteString BaseRpcCommand.cacheName                  N/A\n     16     4      Address BaseRpcCommand.origin                     N/A\n     20     4          int AbstractStateTransferCommand.topologyId   N/A\n     24     1         byte AbstractStateTransferCommand.commandId    N/A\n     25     3              (alignment/padding gap)                  \n     28     4       IntSet AbstractStateTransferCommand.segments     N/A\nInstance size: 32 bytes\nSpace losses: 3 bytes internal + 0 bytes external = 3 bytes total", "url": "https://github.com/infinispan/infinispan/pull/7954#discussion_r386332121", "createdAt": "2020-03-02T11:13:02Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/commands/statetransfer/AbstractStateTransferCommand.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.infinispan.commands.statetransfer;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+import org.infinispan.commands.TopologyAffectedCommand;\n+import org.infinispan.commands.remote.BaseRpcCommand;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.remoting.transport.Address;\n+import org.infinispan.util.ByteString;\n+\n+/**\n+ * Base class for commands related to state transfer.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+abstract class AbstractStateTransferCommand extends BaseRpcCommand implements TopologyAffectedCommand {\n+\n+   private byte commandId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMDcwNQ=="}, "originalCommit": {"oid": "9f16845d8d3365dbe347a98db9a16d1823ecaee3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzMzI4Nw==", "bodyText": "I'm against removing it though\n\nHonestly there was meant to be a not in there \ud83d\ude06\nOk, I'll remove \ud83d\udc4d", "url": "https://github.com/infinispan/infinispan/pull/7954#discussion_r386333287", "createdAt": "2020-03-02T11:15:37Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/commands/statetransfer/AbstractStateTransferCommand.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.infinispan.commands.statetransfer;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+import org.infinispan.commands.TopologyAffectedCommand;\n+import org.infinispan.commands.remote.BaseRpcCommand;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.remoting.transport.Address;\n+import org.infinispan.util.ByteString;\n+\n+/**\n+ * Base class for commands related to state transfer.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+abstract class AbstractStateTransferCommand extends BaseRpcCommand implements TopologyAffectedCommand {\n+\n+   private byte commandId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMDcwNQ=="}, "originalCommit": {"oid": "9f16845d8d3365dbe347a98db9a16d1823ecaee3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzMzkzMA==", "bodyText": "actually, I may be wrong. I think the JVM has to align to 32 bytes anyway...", "url": "https://github.com/infinispan/infinispan/pull/7954#discussion_r386333930", "createdAt": "2020-03-02T11:17:06Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/commands/statetransfer/AbstractStateTransferCommand.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.infinispan.commands.statetransfer;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+import org.infinispan.commands.TopologyAffectedCommand;\n+import org.infinispan.commands.remote.BaseRpcCommand;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.remoting.transport.Address;\n+import org.infinispan.util.ByteString;\n+\n+/**\n+ * Base class for commands related to state transfer.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+abstract class AbstractStateTransferCommand extends BaseRpcCommand implements TopologyAffectedCommand {\n+\n+   private byte commandId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMDcwNQ=="}, "originalCommit": {"oid": "9f16845d8d3365dbe347a98db9a16d1823ecaee3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjk2NzM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/statetransfer/ConflictResolutionCancelCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxNTowN1rOFwaFtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxNTowN1rOFwaFtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMzQxNA==", "bodyText": "can be removed and use StateTransferCancelCommand\nI'm aware boolean isReturnValueExpected() is different but both commands are sent async (any response is discarded) and both commands return null.", "url": "https://github.com/infinispan/infinispan/pull/7954#discussion_r386303414", "createdAt": "2020-03-02T10:15:07Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/commands/statetransfer/ConflictResolutionCancelCommand.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.infinispan.commands.statetransfer;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.factories.ComponentRegistry;\n+import org.infinispan.remoting.transport.Address;\n+import org.infinispan.statetransfer.StateProvider;\n+import org.infinispan.util.ByteString;\n+import org.infinispan.util.concurrent.CompletableFutures;\n+\n+/**\n+ * Cancel conflict resolution.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+public class ConflictResolutionCancelCommand extends AbstractStateTransferCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f16845d8d3365dbe347a98db9a16d1823ecaee3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjk4MTI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/statetransfer/ScatteredStateConfirmRevokedCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxOTowOVrOFwaN1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxOTowOVrOFwaN1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNTQ5Mg==", "bodyText": "extend AbstractStateTransferCommand?", "url": "https://github.com/infinispan/infinispan/pull/7954#discussion_r386305492", "createdAt": "2020-03-02T10:19:09Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/commands/statetransfer/ScatteredStateConfirmRevokedCommand.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.infinispan.commands.statetransfer;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.commands.TopologyAffectedCommand;\n+import org.infinispan.commands.remote.BaseRpcCommand;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.factories.ComponentRegistry;\n+import org.infinispan.scattered.BiasManager;\n+import org.infinispan.scattered.ScatteredStateProvider;\n+import org.infinispan.util.ByteString;\n+\n+/**\n+ * Invoke {@link ScatteredStateProvider#confirmRevokedSegments(int)}.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+public class ScatteredStateConfirmRevokedCommand extends BaseRpcCommand implements TopologyAffectedCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f16845d8d3365dbe347a98db9a16d1823ecaee3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzAyMTkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/statetransfer/StateConsumerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDozMToyNFrOFwamLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDozMToyNFrOFwamLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMTcyNg==", "bodyText": "why TopologyAffectedCommand? you can use CacheRpcCommand", "url": "https://github.com/infinispan/infinispan/pull/7954#discussion_r386311726", "createdAt": "2020-03-02T10:31:24Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/statetransfer/StateConsumerImpl.java", "diffHunk": "@@ -973,9 +975,9 @@ private void processTransactionsResponse(IntSet segments, Map<Address, IntSet> s\n       }\n       if (trace)\n          log.tracef(\"Requesting cluster listeners of cache %s from node %s\", cacheName, sources);\n-      StateRequestCommand cmd =\n-            commandsFactory.buildStateRequestCommand(StateRequestCommand.Type.GET_CACHE_LISTENERS,\n-                                                     rpcManager.getAddress(), topologyId, null);\n+\n+      TopologyAffectedCommand cmd = commandsFactory.buildStateTransferGetListenersCommand(topologyId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f16845d8d3365dbe347a98db9a16d1823ecaee3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDU0NTgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/statetransfer/InboundTransferTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo0NzozMVrOFwo_yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo0NzozMVrOFwo_yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0NzY1OQ==", "bodyText": "can be removed.", "url": "https://github.com/infinispan/infinispan/pull/7954#discussion_r386547659", "createdAt": "2020-03-02T17:47:31Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/statetransfer/InboundTransferTask.java", "diffHunk": "@@ -232,9 +234,8 @@ public boolean isCancelled() {\n    }\n \n    private void sendCancelCommand(IntSet cancelledSegments) {\n-      StateRequestCommand.Type requestType = applyState ? StateRequestCommand.Type.CANCEL_STATE_TRANSFER : StateRequestCommand.Type.CANCEL_CONSISTENCY_CHECK;\n-      StateRequestCommand cmd = commandsFactory.buildStateRequestCommand(requestType, rpcManager.getAddress(),\n-            topologyId, cancelledSegments);\n+      Address origin = rpcManager.getAddress();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064ab83a06a59aa4acbd4c912d793404b84df5d1"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDU1NDcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/statetransfer/AbstractStateTransferCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo1MDowNlrOFwpFUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo1MDowNlrOFwpFUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0OTA3NQ==", "bodyText": "nitpick: can be final :)", "url": "https://github.com/infinispan/infinispan/pull/7954#discussion_r386549075", "createdAt": "2020-03-02T17:50:06Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/commands/statetransfer/AbstractStateTransferCommand.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.infinispan.commands.statetransfer;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+import org.infinispan.commands.TopologyAffectedCommand;\n+import org.infinispan.commands.remote.BaseRpcCommand;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.commons.util.IntSetsExternalization;\n+import org.infinispan.util.ByteString;\n+\n+/**\n+ * Base class for commands related to state transfer.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+abstract class AbstractStateTransferCommand extends BaseRpcCommand implements TopologyAffectedCommand {\n+\n+   private byte commandId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064ab83a06a59aa4acbd4c912d793404b84df5d1"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4503, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}