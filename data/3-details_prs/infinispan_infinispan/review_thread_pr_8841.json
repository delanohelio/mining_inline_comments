{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NTA5NDE4", "number": 8841, "reviewThreads": {"totalCount": 51, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTo1MjoxNVrOE3rA6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozODo1OVrOE9KpdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODExODgyOnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/infinispan/cli/commands/Credentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTo1MjoxNVrOHxJ8qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTo1MjoxNVrOHxJ8qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwNTI1Nw==", "bodyText": "this method could be moved to org.infinispan.cli.impl.ContextAwareCommandInvocation. The User cli command uses a similar code to ask for the user's password.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521305257", "createdAt": "2020-11-11T11:52:15Z", "author": {"login": "pruivo"}, "path": "cli/src/main/java/org/infinispan/cli/commands/Credentials.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.impl.completer.FileOptionCompleter;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.kohsuke.MetaInfServices;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = Credentials.CMD, description = \"Credential store operations\", groupCommands = {Credentials.Add.class, Credentials.Remove.class, Credentials.Ls.class})\n+public class Credentials extends CliCommand {\n+\n+   public static final String CMD = \"credentials\";\n+   public static final String STORE_TYPE = \"pkcs12\";\n+   public static final String CREDENTIALS_PATH = \"credentials.pfx\";\n+\n+   @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   static String getPasswordInteractively(ContextAwareCommandInvocation invocation, String prompt, String confirmPrompt) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODE0Njc5OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/infinispan/cli/commands/Credentials.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjowMDo0MlrOHxKNZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjowMTowOVrOHxKOMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwOTU0MA==", "bodyText": "nitpick: the prompt should be different if the file exists.\nSet a password for the credential store => if the file doesn't exist.\nsomething like Credential store password => if the file exists.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521309540", "createdAt": "2020-11-11T12:00:42Z", "author": {"login": "pruivo"}, "path": "cli/src/main/java/org/infinispan/cli/commands/Credentials.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.impl.completer.FileOptionCompleter;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.kohsuke.MetaInfServices;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = Credentials.CMD, description = \"Credential store operations\", groupCommands = {Credentials.Add.class, Credentials.Remove.class, Credentials.Ls.class})\n+public class Credentials extends CliCommand {\n+\n+   public static final String CMD = \"credentials\";\n+   public static final String STORE_TYPE = \"pkcs12\";\n+   public static final String CREDENTIALS_PATH = \"credentials.pfx\";\n+\n+   @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   static String getPasswordInteractively(ContextAwareCommandInvocation invocation, String prompt, String confirmPrompt) throws InterruptedException {\n+      String password = null;\n+      while (password == null || password.isEmpty()) {\n+         password = invocation.getShell().readLine(new Prompt(prompt, '*'));\n+      }\n+      if (confirmPrompt != null) {\n+         String confirm = null;\n+         while (confirm == null || !confirm.equals(password)) {\n+            confirm = invocation.getShell().readLine(new Prompt(confirmPrompt, '*'));\n+         }\n+      }\n+      return password;\n+   }\n+\n+   static KeyStoreCredentialStore getKeyStoreCredentialStore(String path, String type, boolean create, char[] password) throws CredentialStoreException {\n+      KeyStoreCredentialStore store = new KeyStoreCredentialStore();\n+      final Map<String, String> map = new HashMap<>();\n+      map.put(\"location\", path);\n+      map.put(\"keyStoreType\", type);\n+      map.put(\"create\", Boolean.toString(create));\n+      store.initialize(\n+            map,\n+            new CredentialStore.CredentialSourceProtectionParameter(\n+                  IdentityCredentials.NONE.withCredential(new PasswordCredential(ClearPassword.createRaw(ClearPassword.ALGORITHM_CLEAR, password)))),\n+            null\n+      );\n+      return store;\n+   }\n+\n+   @CommandDefinition(name = Add.CMD, description = \"Adds a credential to a key store\")\n+   public static class Add extends CliCommand {\n+      public static final String CMD = \"add\";\n+\n+      @Argument(description = \"The name (alias) of the credential\", required = true)\n+      String alias;\n+\n+      @Option(description = \"The path to a keystore. A new one will be created if it doesn't exist.\", completer = FileOptionCompleter.class, defaultValue = CREDENTIALS_PATH)\n+      Resource path;\n+\n+      @Option(description = \"The password to protect the credential store\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The type of the credential store\", shortName = 't', defaultValue = STORE_TYPE)\n+      String type;\n+\n+      @Option(description = \"The credential to store\", shortName = 'c')\n+      String credential;\n+\n+      @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         try {\n+            if (password == null) {\n+               password = getPasswordInteractively(invocation, MSG.credentialToolPassword(), path.exists() ? null : MSG.credentialToolPasswordConfirm());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwOTc0Ng==", "bodyText": "ps. use the second prompt for remove/ls commands.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521309746", "createdAt": "2020-11-11T12:01:09Z", "author": {"login": "pruivo"}, "path": "cli/src/main/java/org/infinispan/cli/commands/Credentials.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.impl.completer.FileOptionCompleter;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.kohsuke.MetaInfServices;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = Credentials.CMD, description = \"Credential store operations\", groupCommands = {Credentials.Add.class, Credentials.Remove.class, Credentials.Ls.class})\n+public class Credentials extends CliCommand {\n+\n+   public static final String CMD = \"credentials\";\n+   public static final String STORE_TYPE = \"pkcs12\";\n+   public static final String CREDENTIALS_PATH = \"credentials.pfx\";\n+\n+   @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   static String getPasswordInteractively(ContextAwareCommandInvocation invocation, String prompt, String confirmPrompt) throws InterruptedException {\n+      String password = null;\n+      while (password == null || password.isEmpty()) {\n+         password = invocation.getShell().readLine(new Prompt(prompt, '*'));\n+      }\n+      if (confirmPrompt != null) {\n+         String confirm = null;\n+         while (confirm == null || !confirm.equals(password)) {\n+            confirm = invocation.getShell().readLine(new Prompt(confirmPrompt, '*'));\n+         }\n+      }\n+      return password;\n+   }\n+\n+   static KeyStoreCredentialStore getKeyStoreCredentialStore(String path, String type, boolean create, char[] password) throws CredentialStoreException {\n+      KeyStoreCredentialStore store = new KeyStoreCredentialStore();\n+      final Map<String, String> map = new HashMap<>();\n+      map.put(\"location\", path);\n+      map.put(\"keyStoreType\", type);\n+      map.put(\"create\", Boolean.toString(create));\n+      store.initialize(\n+            map,\n+            new CredentialStore.CredentialSourceProtectionParameter(\n+                  IdentityCredentials.NONE.withCredential(new PasswordCredential(ClearPassword.createRaw(ClearPassword.ALGORITHM_CLEAR, password)))),\n+            null\n+      );\n+      return store;\n+   }\n+\n+   @CommandDefinition(name = Add.CMD, description = \"Adds a credential to a key store\")\n+   public static class Add extends CliCommand {\n+      public static final String CMD = \"add\";\n+\n+      @Argument(description = \"The name (alias) of the credential\", required = true)\n+      String alias;\n+\n+      @Option(description = \"The path to a keystore. A new one will be created if it doesn't exist.\", completer = FileOptionCompleter.class, defaultValue = CREDENTIALS_PATH)\n+      Resource path;\n+\n+      @Option(description = \"The password to protect the credential store\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The type of the credential store\", shortName = 't', defaultValue = STORE_TYPE)\n+      String type;\n+\n+      @Option(description = \"The credential to store\", shortName = 'c')\n+      String credential;\n+\n+      @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         try {\n+            if (password == null) {\n+               password = getPasswordInteractively(invocation, MSG.credentialToolPassword(), path.exists() ? null : MSG.credentialToolPasswordConfirm());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwOTU0MA=="}, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODE1MjQ2OnYy", "diffSide": "RIGHT", "path": "cli/src/main/resources/help/credentials.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjowMjoyN1rOHxKQwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo0NDo1OFrOHx7YWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMDQwMQ==", "bodyText": "is the --server-root missing from Credentials command?", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521310401", "createdAt": "2020-11-11T12:02:27Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,72 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Removes the credential identified by the specified alias (name) from the key store.\n+\n+\n+COMMON OPTIONS\n+--------------\n+\n+These options apply to all commands:\n+\n+*-h, --help*::\n+Displays a help page for the command or sub-command.\n+\n+*--server-root*='path-to-server-root'::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNTE2MQ==", "bodyText": "I've added it.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522115161", "createdAt": "2020-11-12T13:44:58Z", "author": {"login": "tristantarrant"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,72 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Removes the credential identified by the specified alias (name) from the key store.\n+\n+\n+COMMON OPTIONS\n+--------------\n+\n+These options apply to all commands:\n+\n+*-h, --help*::\n+Displays a help page for the command or sub-command.\n+\n+*--server-root*='path-to-server-root'::", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMDQwMQ=="}, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODE1NDQwOnYy", "diffSide": "RIGHT", "path": "cli/src/main/resources/help/credentials.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjowMzowNVrOHxKR_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo0NTowOFrOHx7YwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMDcxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Specifies the user's password.\n          \n          \n            \n            Specifies the credentials store password.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521310716", "createdAt": "2020-11-11T12:03:05Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,72 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Removes the credential identified by the specified alias (name) from the key store.\n+\n+\n+COMMON OPTIONS\n+--------------\n+\n+These options apply to all commands:\n+\n+*-h, --help*::\n+Displays a help page for the command or sub-command.\n+\n+*--server-root*='path-to-server-root'::\n+The path to the server root. Defaults to `server`.\n+\n+*--path*='credentials.jks'::\n+The name of the key store which contains the credentials. Defaults to `credentials.pfx`.\n+\n+\n+CREDENTIALS ADD OPTIONS\n+-----------------------\n+\n+*-p, --password*='password'::\n+Specifies the user's password.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMTE0OQ==", "bodyText": "well, this belongs to the common options.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521311149", "createdAt": "2020-11-11T12:04:01Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,72 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Removes the credential identified by the specified alias (name) from the key store.\n+\n+\n+COMMON OPTIONS\n+--------------\n+\n+These options apply to all commands:\n+\n+*-h, --help*::\n+Displays a help page for the command or sub-command.\n+\n+*--server-root*='path-to-server-root'::\n+The path to the server root. Defaults to `server`.\n+\n+*--path*='credentials.jks'::\n+The name of the key store which contains the credentials. Defaults to `credentials.pfx`.\n+\n+\n+CREDENTIALS ADD OPTIONS\n+-----------------------\n+\n+*-p, --password*='password'::\n+Specifies the user's password.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMDcxNg=="}, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNTI2NA==", "bodyText": "Done", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522115264", "createdAt": "2020-11-12T13:45:08Z", "author": {"login": "tristantarrant"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,72 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Removes the credential identified by the specified alias (name) from the key store.\n+\n+\n+COMMON OPTIONS\n+--------------\n+\n+These options apply to all commands:\n+\n+*-h, --help*::\n+Displays a help page for the command or sub-command.\n+\n+*--server-root*='path-to-server-root'::\n+The path to the server root. Defaults to `server`.\n+\n+*--path*='credentials.jks'::\n+The name of the key store which contains the credentials. Defaults to `credentials.pfx`.\n+\n+\n+CREDENTIALS ADD OPTIONS\n+-----------------------\n+\n+*-p, --password*='password'::\n+Specifies the user's password.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMDcxNg=="}, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODE1NTUwOnYy", "diffSide": "RIGHT", "path": "cli/src/main/resources/help/credentials.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjowMzozMFrOHxKSuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjowMzozMFrOHxKSuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMDkwNQ==", "bodyText": "groups?", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521310905", "createdAt": "2020-11-11T12:03:30Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,72 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Removes the credential identified by the specified alias (name) from the key store.\n+\n+\n+COMMON OPTIONS\n+--------------\n+\n+These options apply to all commands:\n+\n+*-h, --help*::\n+Displays a help page for the command or sub-command.\n+\n+*--server-root*='path-to-server-root'::\n+The path to the server root. Defaults to `server`.\n+\n+*--path*='credentials.jks'::\n+The name of the key store which contains the credentials. Defaults to `credentials.pfx`.\n+\n+\n+CREDENTIALS ADD OPTIONS\n+-----------------------\n+\n+*-p, --password*='password'::\n+Specifies the user's password.\n+\n+\n+CREDENTIALS LS OPTIONS\n+----------------------\n+\n+*--groups*::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODE1OTM1OnYy", "diffSide": "RIGHT", "path": "cli/src/main/resources/help/credentials.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjowNDozOFrOHxKU_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo0NToxNFrOHx7ZBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMTQ4NA==", "bodyText": "--credential option is missing.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521311484", "createdAt": "2020-11-11T12:04:38Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,72 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Removes the credential identified by the specified alias (name) from the key store.\n+\n+\n+COMMON OPTIONS\n+--------------\n+\n+These options apply to all commands:\n+\n+*-h, --help*::\n+Displays a help page for the command or sub-command.\n+\n+*--server-root*='path-to-server-root'::\n+The path to the server root. Defaults to `server`.\n+\n+*--path*='credentials.jks'::\n+The name of the key store which contains the credentials. Defaults to `credentials.pfx`.\n+\n+\n+CREDENTIALS ADD OPTIONS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNTMzNQ==", "bodyText": "Added", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522115335", "createdAt": "2020-11-12T13:45:14Z", "author": {"login": "tristantarrant"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,72 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Removes the credential identified by the specified alias (name) from the key store.\n+\n+\n+COMMON OPTIONS\n+--------------\n+\n+These options apply to all commands:\n+\n+*-h, --help*::\n+Displays a help page for the command or sub-command.\n+\n+*--server-root*='path-to-server-root'::\n+The path to the server root. Defaults to `server`.\n+\n+*--path*='credentials.jks'::\n+The name of the key store which contains the credentials. Defaults to `credentials.pfx`.\n+\n+\n+CREDENTIALS ADD OPTIONS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMTQ4NA=="}, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODE2MDM1OnYy", "diffSide": "RIGHT", "path": "cli/src/main/resources/help/credentials.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjowNDo1NlrOHxKVlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo0NToyMlrOHx7ZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMTYzOA==", "bodyText": "--type is missing.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521311638", "createdAt": "2020-11-11T12:04:56Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,72 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Removes the credential identified by the specified alias (name) from the key store.\n+\n+\n+COMMON OPTIONS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNTQxNw==", "bodyText": "Added", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522115417", "createdAt": "2020-11-12T13:45:22Z", "author": {"login": "tristantarrant"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,72 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Removes the credential identified by the specified alias (name) from the key store.\n+\n+\n+COMMON OPTIONS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMTYzOA=="}, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODE2MjI1OnYy", "diffSide": "RIGHT", "path": "cli/src/main/resources/help/credentials.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjowNTozNVrOHxKWyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo0NTozMVrOHx7ZxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMTk0Ng==", "bodyText": "remove? ls command doesn't have any specific options.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521311946", "createdAt": "2020-11-11T12:05:35Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,72 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Removes the credential identified by the specified alias (name) from the key store.\n+\n+\n+COMMON OPTIONS\n+--------------\n+\n+These options apply to all commands:\n+\n+*-h, --help*::\n+Displays a help page for the command or sub-command.\n+\n+*--server-root*='path-to-server-root'::\n+The path to the server root. Defaults to `server`.\n+\n+*--path*='credentials.jks'::\n+The name of the key store which contains the credentials. Defaults to `credentials.pfx`.\n+\n+\n+CREDENTIALS ADD OPTIONS\n+-----------------------\n+\n+*-p, --password*='password'::\n+Specifies the user's password.\n+\n+\n+CREDENTIALS LS OPTIONS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNTUyNA==", "bodyText": "Done", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522115524", "createdAt": "2020-11-12T13:45:31Z", "author": {"login": "tristantarrant"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,72 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Removes the credential identified by the specified alias (name) from the key store.\n+\n+\n+COMMON OPTIONS\n+--------------\n+\n+These options apply to all commands:\n+\n+*-h, --help*::\n+Displays a help page for the command or sub-command.\n+\n+*--server-root*='path-to-server-root'::\n+The path to the server root. Defaults to `server`.\n+\n+*--path*='credentials.jks'::\n+The name of the key store which contains the credentials. Defaults to `credentials.pfx`.\n+\n+\n+CREDENTIALS ADD OPTIONS\n+-----------------------\n+\n+*-p, --password*='password'::\n+Specifies the user's password.\n+\n+\n+CREDENTIALS LS OPTIONS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMTk0Ng=="}, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODE2NzE3OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/stories/assembly_server_security_credentials.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjowNzowNlrOHxKZ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzo0MzozM1rOHxNr9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMjcyMA==", "bodyText": "well, you have to store the password for the credential in clear text... not sure how can we solve it.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521312720", "createdAt": "2020-11-11T12:07:06Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/stories/assembly_server_security_credentials.adoc", "diffHunk": "@@ -0,0 +1,21 @@\n+[id='server_identity']\n+:context: server\n+= Creating {brandname} Server Credentials\n+{brandname} Server allows the encryption of sensitive strings outside of configuration files.\n+These strings are stored in a keystore, and subsequently decrypted for applications and verifications systems.\n+\n+All of the configuration files in `$ISPN_HOME/server/conf/` are world readable by default.\n+It is strongly recommended to not store plaintext passwords in the configuration files, and instead place these", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2NjUxNg==", "bodyText": "That's unsolveable :)\nHowever this creates an indirection which is sufficient in most cases.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521366516", "createdAt": "2020-11-11T13:43:33Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/stories/assembly_server_security_credentials.adoc", "diffHunk": "@@ -0,0 +1,21 @@\n+[id='server_identity']\n+:context: server\n+= Creating {brandname} Server Credentials\n+{brandname} Server allows the encryption of sensitive strings outside of configuration files.\n+These strings are stored in a keystore, and subsequently decrypted for applications and verifications systems.\n+\n+All of the configuration files in `$ISPN_HOME/server/conf/` are world readable by default.\n+It is strongly recommended to not store plaintext passwords in the configuration files, and instead place these", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMjcyMA=="}, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODE4MjA1OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMjoxMTo1N1rOHxKi-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo0NTo0MFrOHx7aJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxNTA2Nw==", "bodyText": "unused.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521315067", "createdAt": "2020-11-11T12:11:57Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationBuilder.java", "diffHunk": "@@ -108,4 +109,13 @@ public void applySocketBinding(String bindingName, ProtocolServerConfigurationBu\n       }\n       builder.socketBinding(bindingName).host(host).port(port);\n    }\n+\n+   public <C extends Credential> C getCredential(String store, String alias, Class<C> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNTYyMA==", "bodyText": "Removed", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522115620", "createdAt": "2020-11-12T13:45:40Z", "author": {"login": "tristantarrant"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationBuilder.java", "diffHunk": "@@ -108,4 +109,13 @@ public void applySocketBinding(String bindingName, ProtocolServerConfigurationBu\n       }\n       builder.socketBinding(bindingName).host(host).port(port);\n    }\n+\n+   public <C extends Credential> C getCredential(String store, String alias, Class<C> type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxNTA2Nw=="}, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODgzOTAwOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo1OToxN1rOHxQx3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo1OToxN1rOHxQx3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxNzE4Mw==", "bodyText": "nitpick:\nI would change the parseLdapRealm() method to receive the ServerConfigurationBuilder like in parseOauth2Introspection and remove the change on the \"builder\" class.\nSame comment for parseKeyStore(), parseTrustStoreRealm() and parseDataSourceConnectionFactory()", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521417183", "createdAt": "2020-11-11T14:59:17Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java", "diffHunk": "@@ -514,6 +616,11 @@ private void parseLdapRealm(XMLExtendedStreamReader reader, LdapRealmConfigurati\n          }\n       }\n       Element element = nextElement(reader);\n+      if (element == Element.CREDENTIAL_REFERENCE) {\n+         String credential = parseCredentialReference(reader, ldapRealmConfigBuilder.serverConfigurationBuilder());\n+         ldapRealmConfigBuilder.credential(credential);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODg1MjY1OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTowMjoxOVrOHxQ6GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTowMjoxOVrOHxQ6GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxOTI4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORE.toString());\n          \n          \n            \n               private static final ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORE.toString());", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521419288", "createdAt": "2020-11-11T15:02:19Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.infinispan.server.configuration.security;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfiguration implements ConfigurationInfo {\n+   static final AttributeDefinition<String> NAME = AttributeDefinition.builder(\"name\", null, String.class).build();\n+   static final AttributeDefinition<String> PATH = AttributeDefinition.builder(\"path\", null, String.class).build();\n+   static final AttributeDefinition<String> RELATIVE_TO = AttributeDefinition.builder(\"relativeTo\", null, String.class).build();\n+   static final AttributeDefinition<String> TYPE = AttributeDefinition.builder(\"type\", \"pkcs12\", String.class).build();\n+   static final AttributeDefinition<String> CREDENTIAL = AttributeDefinition.builder(\"credential\", null, String.class).build();\n+\n+   private final AttributeSet attributes;\n+   private final CredentialStoreSpi credentialStore;\n+\n+   static AttributeSet attributeDefinitionSet() {\n+      return new AttributeSet(CredentialStoreConfiguration.class, NAME, PATH, RELATIVE_TO, TYPE, CREDENTIAL);\n+   }\n+\n+   private static ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORE.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODg1NDU5OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTowMjo1MVrOHxQ7VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTowMjo1MVrOHxQ7VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxOTYwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               public ElementDefinition getElementDefinition() {\n          \n          \n            \n               public ElementDefinition<CredentialStoreConfiguration> getElementDefinition() {", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521419604", "createdAt": "2020-11-11T15:02:51Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.infinispan.server.configuration.security;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfiguration implements ConfigurationInfo {\n+   static final AttributeDefinition<String> NAME = AttributeDefinition.builder(\"name\", null, String.class).build();\n+   static final AttributeDefinition<String> PATH = AttributeDefinition.builder(\"path\", null, String.class).build();\n+   static final AttributeDefinition<String> RELATIVE_TO = AttributeDefinition.builder(\"relativeTo\", null, String.class).build();\n+   static final AttributeDefinition<String> TYPE = AttributeDefinition.builder(\"type\", \"pkcs12\", String.class).build();\n+   static final AttributeDefinition<String> CREDENTIAL = AttributeDefinition.builder(\"credential\", null, String.class).build();\n+\n+   private final AttributeSet attributes;\n+   private final CredentialStoreSpi credentialStore;\n+\n+   static AttributeSet attributeDefinitionSet() {\n+      return new AttributeSet(CredentialStoreConfiguration.class, NAME, PATH, RELATIVE_TO, TYPE, CREDENTIAL);\n+   }\n+\n+   private static ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORE.toString());\n+\n+   CredentialStoreConfiguration(AttributeSet attributes, CredentialStoreSpi credentialStore) {\n+      this.attributes = attributes.checkProtection();\n+      this.credentialStore = credentialStore;\n+   }\n+\n+   public CredentialStoreSpi getCredentialStore() {\n+      return credentialStore;\n+   }\n+\n+   @Override\n+   public AttributeSet attributes() {\n+      return attributes;\n+   }\n+\n+   @Override\n+   public ElementDefinition getElementDefinition() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODg3NzU2OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTowODowMFrOHxRJMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjo1Mjo0NVrOHyEIKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyMzE1NA==", "bodyText": "would it be better to always fail is alias==null? To avoid any chance of returning the wrong credential.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521423154", "createdAt": "2020-11-11T15:08:00Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.infinispan.server.configuration.security;\n+\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.CREDENTIAL;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.PATH;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.RELATIVE_TO;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.TYPE;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.CacheConfigurationException;\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.configuration.parsing.ParseUtils;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.Credential;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfigurationBuilder implements Builder<CredentialStoreConfiguration> {\n+   private final AttributeSet attributes;\n+   private final CredentialStoresConfigurationBuilder credentialStoresConfigurationBuilder;\n+   private CredentialStoreSpi credentialStore;\n+\n+   CredentialStoreConfigurationBuilder(CredentialStoresConfigurationBuilder credentialStoresConfigurationBuilder) {\n+      this.attributes = CredentialStoreConfiguration.attributeDefinitionSet();\n+      this.credentialStoresConfigurationBuilder = credentialStoresConfigurationBuilder;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder path(String value) {\n+      attributes.attribute(PATH).set(value);\n+      return this;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder relativeTo(String relativeTo) {\n+      attributes.attribute(RELATIVE_TO).set(relativeTo);\n+      return this;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder type(String type) {\n+      attributes.attribute(TYPE).set(type);\n+      return this;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder credential(String credential) {\n+      attributes.attribute(CREDENTIAL).set(credential);\n+      return this;\n+   }\n+\n+   @Override\n+   public void validate() {\n+\n+   }\n+\n+   @Override\n+   public CredentialStoreConfiguration create() {\n+      return new CredentialStoreConfiguration(attributes.protect(), build());\n+   }\n+\n+   @Override\n+   public Builder<?> read(CredentialStoreConfiguration template) {\n+      this.attributes.read(template.attributes());\n+      return this;\n+   }\n+\n+   CredentialStoreSpi build() {\n+      if (credentialStore == null) {\n+         if (attributes.attribute(PATH).isNull()) {\n+            throw new IllegalStateException(\"file has to be specified\");\n+         }\n+         String path = attributes.attribute(PATH).get();\n+         String relativeTo = attributes.attribute(RELATIVE_TO).get();\n+         String location = ParseUtils.resolvePath(path, relativeTo);\n+         credentialStore = new KeyStoreCredentialStore();\n+         final Map<String, String> map = new HashMap<>();\n+         map.put(\"location\", location);\n+         map.put(\"create\", \"false\");\n+         map.put(\"keyStoreType\", attributes.attribute(TYPE).get());\n+         char[] credential = attributes.attribute(CREDENTIAL).get().toCharArray();\n+         try {\n+            credentialStore.initialize(\n+                  map,\n+                  new CredentialStore.CredentialSourceProtectionParameter(\n+                        IdentityCredentials.NONE.withCredential(new PasswordCredential(ClearPassword.createRaw(ClearPassword.ALGORITHM_CLEAR, credential)))),\n+                  null\n+            );\n+         } catch (CredentialStoreException e) {\n+            throw new CacheConfigurationException(e);\n+         }\n+      }\n+      return credentialStore;\n+   }\n+\n+   public <C extends Credential> C getCredential(String alias, Class<C> type) {\n+      build();\n+      try {\n+         if (alias == null) {\n+            if (credentialStore.getAliases().size() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI1ODQ3NQ==", "bodyText": "You cannot return the wrong credential if there is only one :)", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522258475", "createdAt": "2020-11-12T16:52:45Z", "author": {"login": "tristantarrant"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.infinispan.server.configuration.security;\n+\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.CREDENTIAL;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.PATH;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.RELATIVE_TO;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.TYPE;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.CacheConfigurationException;\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.configuration.parsing.ParseUtils;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.Credential;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfigurationBuilder implements Builder<CredentialStoreConfiguration> {\n+   private final AttributeSet attributes;\n+   private final CredentialStoresConfigurationBuilder credentialStoresConfigurationBuilder;\n+   private CredentialStoreSpi credentialStore;\n+\n+   CredentialStoreConfigurationBuilder(CredentialStoresConfigurationBuilder credentialStoresConfigurationBuilder) {\n+      this.attributes = CredentialStoreConfiguration.attributeDefinitionSet();\n+      this.credentialStoresConfigurationBuilder = credentialStoresConfigurationBuilder;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder path(String value) {\n+      attributes.attribute(PATH).set(value);\n+      return this;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder relativeTo(String relativeTo) {\n+      attributes.attribute(RELATIVE_TO).set(relativeTo);\n+      return this;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder type(String type) {\n+      attributes.attribute(TYPE).set(type);\n+      return this;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder credential(String credential) {\n+      attributes.attribute(CREDENTIAL).set(credential);\n+      return this;\n+   }\n+\n+   @Override\n+   public void validate() {\n+\n+   }\n+\n+   @Override\n+   public CredentialStoreConfiguration create() {\n+      return new CredentialStoreConfiguration(attributes.protect(), build());\n+   }\n+\n+   @Override\n+   public Builder<?> read(CredentialStoreConfiguration template) {\n+      this.attributes.read(template.attributes());\n+      return this;\n+   }\n+\n+   CredentialStoreSpi build() {\n+      if (credentialStore == null) {\n+         if (attributes.attribute(PATH).isNull()) {\n+            throw new IllegalStateException(\"file has to be specified\");\n+         }\n+         String path = attributes.attribute(PATH).get();\n+         String relativeTo = attributes.attribute(RELATIVE_TO).get();\n+         String location = ParseUtils.resolvePath(path, relativeTo);\n+         credentialStore = new KeyStoreCredentialStore();\n+         final Map<String, String> map = new HashMap<>();\n+         map.put(\"location\", location);\n+         map.put(\"create\", \"false\");\n+         map.put(\"keyStoreType\", attributes.attribute(TYPE).get());\n+         char[] credential = attributes.attribute(CREDENTIAL).get().toCharArray();\n+         try {\n+            credentialStore.initialize(\n+                  map,\n+                  new CredentialStore.CredentialSourceProtectionParameter(\n+                        IdentityCredentials.NONE.withCredential(new PasswordCredential(ClearPassword.createRaw(ClearPassword.ALGORITHM_CLEAR, credential)))),\n+                  null\n+            );\n+         } catch (CredentialStoreException e) {\n+            throw new CacheConfigurationException(e);\n+         }\n+      }\n+      return credentialStore;\n+   }\n+\n+   public <C extends Credential> C getCredential(String alias, Class<C> type) {\n+      build();\n+      try {\n+         if (alias == null) {\n+            if (credentialStore.getAliases().size() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyMzE1NA=="}, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODg4MDU3OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTowODo0M1rOHxRK-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyOTo0N1rOH5GgEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyMzYwOA==", "bodyText": "unused", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521423608", "createdAt": "2020-11-11T15:08:43Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.infinispan.server.configuration.security;\n+\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.CREDENTIAL;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.PATH;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.RELATIVE_TO;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.TYPE;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.CacheConfigurationException;\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.configuration.parsing.ParseUtils;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.Credential;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfigurationBuilder implements Builder<CredentialStoreConfiguration> {\n+   private final AttributeSet attributes;\n+   private final CredentialStoresConfigurationBuilder credentialStoresConfigurationBuilder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzNzM5Mw==", "bodyText": "unsed :)", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529637393", "createdAt": "2020-11-24T15:29:47Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.infinispan.server.configuration.security;\n+\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.CREDENTIAL;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.PATH;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.RELATIVE_TO;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.TYPE;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.CacheConfigurationException;\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.configuration.parsing.ParseUtils;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.Credential;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfigurationBuilder implements Builder<CredentialStoreConfiguration> {\n+   private final AttributeSet attributes;\n+   private final CredentialStoresConfigurationBuilder credentialStoresConfigurationBuilder;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyMzYwOA=="}, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODg5ODIzOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToxMjoyNVrOHxRVfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToxMjoyNVrOHxRVfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyNjMwMQ==", "bodyText": "unused", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521426301", "createdAt": "2020-11-11T15:12:25Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.infinispan.server.configuration.security;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.credential.Credential;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoresConfigurationBuilder implements Builder<CredentialStoresConfiguration> {\n+\n+   private final SecurityConfigurationBuilder securityConfigurationBuilder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODkwMDE3OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToxMjo1NlrOHxRW2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToxMjo1NlrOHxRW2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyNjY1MA==", "bodyText": "nitpick: final", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521426650", "createdAt": "2020-11-11T15:12:56Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.infinispan.server.configuration.security;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.credential.Credential;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoresConfigurationBuilder implements Builder<CredentialStoresConfiguration> {\n+\n+   private final SecurityConfigurationBuilder securityConfigurationBuilder;\n+   private Map<String, CredentialStoreConfigurationBuilder> credentialStores = new LinkedHashMap<>(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODkwNzY0OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToxNDo0MVrOHxRbfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjo1MzoxOVrOHyEJvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyNzgzNw==", "bodyText": "like the comment for alias, I would fail if store isn't set.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521427837", "createdAt": "2020-11-11T15:14:41Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.infinispan.server.configuration.security;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.credential.Credential;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoresConfigurationBuilder implements Builder<CredentialStoresConfiguration> {\n+\n+   private final SecurityConfigurationBuilder securityConfigurationBuilder;\n+   private Map<String, CredentialStoreConfigurationBuilder> credentialStores = new LinkedHashMap<>(2);\n+\n+   public CredentialStoresConfigurationBuilder(SecurityConfigurationBuilder securityConfigurationBuilder) {\n+      this.securityConfigurationBuilder = securityConfigurationBuilder;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder addCredentialStore(String name) {\n+      CredentialStoreConfigurationBuilder credentialStoreBuilder = new CredentialStoreConfigurationBuilder(this);\n+      credentialStores.put(name, credentialStoreBuilder);\n+      return credentialStoreBuilder;\n+   }\n+\n+   public <C extends Credential> C getCredential(String store, String alias, Class<C> type) {\n+      CredentialStoreConfigurationBuilder credentialStoreConfigurationBuilder;\n+      if (store == null) {\n+         if (credentialStores.size() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI1ODg3OA==", "bodyText": "Similarly to my answer above: if there is only one credential store, it is unambiguous.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522258878", "createdAt": "2020-11-12T16:53:19Z", "author": {"login": "tristantarrant"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.infinispan.server.configuration.security;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.credential.Credential;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoresConfigurationBuilder implements Builder<CredentialStoresConfiguration> {\n+\n+   private final SecurityConfigurationBuilder securityConfigurationBuilder;\n+   private Map<String, CredentialStoreConfigurationBuilder> credentialStores = new LinkedHashMap<>(2);\n+\n+   public CredentialStoresConfigurationBuilder(SecurityConfigurationBuilder securityConfigurationBuilder) {\n+      this.securityConfigurationBuilder = securityConfigurationBuilder;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder addCredentialStore(String name) {\n+      CredentialStoreConfigurationBuilder credentialStoreBuilder = new CredentialStoreConfigurationBuilder(this);\n+      credentialStores.put(name, credentialStoreBuilder);\n+      return credentialStoreBuilder;\n+   }\n+\n+   public <C extends Credential> C getCredential(String store, String alias, Class<C> type) {\n+      CredentialStoreConfigurationBuilder credentialStoreConfigurationBuilder;\n+      if (store == null) {\n+         if (credentialStores.size() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyNzgzNw=="}, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODkyNjQyOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/resources/schema/infinispan-server-12.0.xsd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToxODo1OFrOHxRm-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToxODo1OFrOHxRm-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzMDc3OQ==", "bodyText": "type is missing", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521430779", "createdAt": "2020-11-11T15:18:58Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/resources/schema/infinispan-server-12.0.xsd", "diffHunk": "@@ -818,6 +825,101 @@\n       </xs:attribute>\n    </xs:complexType>\n \n+   <xs:complexType name=\"credential-stores\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            Complex type to contain the definitions of the credential stores.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:sequence>\n+         <xs:element name=\"credential-store\" type=\"tns:credential-store\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      </xs:sequence>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"credential-reference\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            Credential reference to be used by the configuration.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:attribute name=\"store\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               Credential store name used to fetch credential with given 'alias' from.\n+               Credential store name has to be defined elsewhere.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"alias\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               Alias of credential in the credential store.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"clear-text-credential\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            A clear-text credential.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:attribute name=\"clear-text\" type=\"xs:string\" use=\"required\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               The clear-text password.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"credential-store\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            An individual credential store definition.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:choice>\n+         <xs:element name=\"clear-text-credential\" type=\"tns:clear-text-credential\">\n+            <xs:annotation>\n+               <xs:documentation>\n+                  Credential to be used by as protection parameter for the Credential Store.\n+               </xs:documentation>\n+            </xs:annotation>\n+         </xs:element>\n+         <xs:element name=\"credential-reference\" type=\"tns:credential-reference\">\n+            <xs:annotation>\n+               <xs:documentation>\n+                  Credential to be used by as protection parameter for the Credential Store.\n+               </xs:documentation>\n+            </xs:annotation>\n+         </xs:element>\n+      </xs:choice>\n+      <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               The name of this credential store.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"relative-to\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               A reference to a previously defined path that the file name is\n+               relative to.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"path\" type=\"xs:string\" use=\"required\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               File name of credential store storage.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+   </xs:complexType>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODkzODIyOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/server/server/conf/infinispan.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToyMToyNlrOHxRuQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToyMToyNlrOHxRuQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzMjY0MA==", "bodyText": "can the SSL Keystore's password be stored in the credential store too?", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521432640", "createdAt": "2020-11-11T15:21:26Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/server/server/conf/infinispan.xml", "diffHunk": "@@ -22,6 +22,11 @@\n       </socket-bindings>\n \n       <security>\n+         <credential-stores>\n+            <credential-store name=\"credentials\" path=\"credentials.pfx\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODk0OTMxOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/test/resources/configuration/ServerConfigurationParserTest.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToyMzo1N1rOHxR1Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo0ODo0NVrOHx7iCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzNDQ0Nw==", "bodyText": "is this credential replacing the keystore-password or the key-password?", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521434447", "createdAt": "2020-11-11T15:23:57Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/test/resources/configuration/ServerConfigurationParserTest.xml", "diffHunk": "@@ -24,14 +24,21 @@\n       </socket-bindings>\n \n       <security>\n+         <credential-stores>\n+            <credential-store name=\"credentials\" path=\"credentials.pfx\">\n+               <clear-text-credential clear-text=\"secret\"/>\n+            </credential-store>\n+         </credential-stores>\n          <security-realms>\n             <security-realm name=\"default\">\n                <server-identities>\n                   <ssl>\n                      <keystore path=\"ServerConfigurationParserTest-keystore.pfx\"\n                                relative-to=\"infinispan.server.config.path\"\n                                keystore-password=\"password\" alias=\"server\" key-password=\"password\"\n-                               generate-self-signed-certificate-host=\"localhost\"/>\n+                               generate-self-signed-certificate-host=\"localhost\">\n+                        <credential-reference store=\"credentials\" alias=\"keystore\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNzY0Mg==", "bodyText": "The keystore-password.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522117642", "createdAt": "2020-11-12T13:48:45Z", "author": {"login": "tristantarrant"}, "path": "server/runtime/src/test/resources/configuration/ServerConfigurationParserTest.xml", "diffHunk": "@@ -24,14 +24,21 @@\n       </socket-bindings>\n \n       <security>\n+         <credential-stores>\n+            <credential-store name=\"credentials\" path=\"credentials.pfx\">\n+               <clear-text-credential clear-text=\"secret\"/>\n+            </credential-store>\n+         </credential-stores>\n          <security-realms>\n             <security-realm name=\"default\">\n                <server-identities>\n                   <ssl>\n                      <keystore path=\"ServerConfigurationParserTest-keystore.pfx\"\n                                relative-to=\"infinispan.server.config.path\"\n                                keystore-password=\"password\" alias=\"server\" key-password=\"password\"\n-                               generate-self-signed-certificate-host=\"localhost\"/>\n+                               generate-self-signed-certificate-host=\"localhost\">\n+                        <credential-reference store=\"credentials\" alias=\"keystore\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzNDQ0Nw=="}, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODk1NTYzOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/test/resources/configuration/ServerConfigurationParserTest.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToyNToxOFrOHxR5Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNToyNToxOFrOHxR5Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzNTQzOA==", "bodyText": "is credential=\"strongPassword\" still required?", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521435438", "createdAt": "2020-11-11T15:25:18Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/test/resources/configuration/ServerConfigurationParserTest.xml", "diffHunk": "@@ -41,6 +48,7 @@\n                                  relative-to=\"infinispan.server.config.path\"/>\n                <ldap-realm name=\"ldap\" url=\"ldap://${org.infinispan.test.host.address}:10389\"\n                            principal=\"uid=admin,ou=People,dc=infinispan,dc=org\" credential=\"strongPassword\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTA3MTQ0OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/cmd_examples/credentials_nix.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTo1MDo0NlrOHxTAdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo0ODo1M1rOHx7iWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ1MzY4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            $ bin/cli.sh credentials create dbpassword -p \"secret1234!\"\n          \n          \n            \n            $ bin/cli.sh credentials add dbpassword -p \"secret1234!\"", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521453685", "createdAt": "2020-11-11T15:50:46Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/cmd_examples/credentials_nix.adoc", "diffHunk": "@@ -0,0 +1 @@\n+$ bin/cli.sh credentials create dbpassword -p \"secret1234!\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNzcyMA==", "bodyText": "Fixed", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522117720", "createdAt": "2020-11-12T13:48:53Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/topics/cmd_examples/credentials_nix.adoc", "diffHunk": "@@ -0,0 +1 @@\n+$ bin/cli.sh credentials create dbpassword -p \"secret1234!\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ1MzY4NQ=="}, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTA3MjQ3OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/cmd_examples/credentials_win.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTo1MDo1OFrOHxTBDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTo1MDo1OFrOHxTBDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ1MzgzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            $ bin\\cli.bat credentials create dbpassword -p \"secret1234!\"\n          \n          \n            \n            $ bin\\cli.bat credentials add dbpassword -p \"secret1234!\"", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521453838", "createdAt": "2020-11-11T15:50:58Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/cmd_examples/credentials_win.adoc", "diffHunk": "@@ -0,0 +1 @@\n+$ bin\\cli.bat credentials create dbpassword -p \"secret1234!\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Nzg3ODU2OnYy", "diffSide": "RIGHT", "path": "cli/src/main/java/org/infinispan/cli/commands/Credentials.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDowNDoxN1rOHyoKLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToxMDo0NFrOH5FZBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg0ODgxMw==", "bodyText": "note: I'm probably overthinking here...\ndo you want the path?\nif I set --path, the --server-root is ignored. If I set  --server-root only, I can't change the credentials file name.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522848813", "createdAt": "2020-11-13T10:04:17Z", "author": {"login": "pruivo"}, "path": "cli/src/main/java/org/infinispan/cli/commands/Credentials.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.impl.completer.FileOptionCompleter;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.kohsuke.MetaInfServices;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = Credentials.CMD, description = \"Credential store operations\", groupCommands = {Credentials.Add.class, Credentials.Remove.class, Credentials.Ls.class})\n+public class Credentials extends CliCommand {\n+\n+   public static final String CMD = \"credentials\";\n+   public static final String STORE_TYPE = \"pkcs12\";\n+   public static final String CREDENTIALS_PATH = \"credentials.pfx\";\n+\n+   @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   static KeyStoreCredentialStore getKeyStoreCredentialStore(Path path, String type, boolean create, char[] password) throws CredentialStoreException {\n+      KeyStoreCredentialStore store = new KeyStoreCredentialStore();\n+      final Map<String, String> map = new HashMap<>();\n+      map.put(\"location\", path.toAbsolutePath().toString());\n+      map.put(\"keyStoreType\", type);\n+      map.put(\"create\", Boolean.toString(create));\n+      store.initialize(\n+            map,\n+            new CredentialStore.CredentialSourceProtectionParameter(\n+                  IdentityCredentials.NONE.withCredential(new PasswordCredential(ClearPassword.createRaw(ClearPassword.ALGORITHM_CLEAR, password)))),\n+            null\n+      );\n+      return store;\n+   }\n+\n+   static Path resourceToPath(Resource resource, String serverRoot) {\n+      if (resource != null) {\n+         return Paths.get(resource.getAbsolutePath());\n+      } else {\n+         String serverHome = System.getProperty(\"infinispan.server.home.path\");\n+         Path serverHomePath = serverHome == null ? Paths.get(\"\") : Paths.get(serverHome);\n+         return serverHomePath.resolve(Paths.get(serverRoot, \"conf\", CREDENTIALS_PATH)).toAbsolutePath();\n+      }\n+   }\n+\n+   @CommandDefinition(name = Add.CMD, description = \"Adds a credential to a key store\")\n+   public static class Add extends CliCommand {\n+      public static final String CMD = \"add\";\n+\n+      @Argument(description = \"The name (alias) of the credential\", required = true)\n+      String alias;\n+\n+      @Option(description = \"The path to a keystore. A new one will be created if it doesn't exist.\", completer = FileOptionCompleter.class)\n+      Resource path;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2Mjg0OA==", "bodyText": "It mirrors the user command", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529562848", "createdAt": "2020-11-24T13:56:11Z", "author": {"login": "tristantarrant"}, "path": "cli/src/main/java/org/infinispan/cli/commands/Credentials.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.impl.completer.FileOptionCompleter;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.kohsuke.MetaInfServices;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = Credentials.CMD, description = \"Credential store operations\", groupCommands = {Credentials.Add.class, Credentials.Remove.class, Credentials.Ls.class})\n+public class Credentials extends CliCommand {\n+\n+   public static final String CMD = \"credentials\";\n+   public static final String STORE_TYPE = \"pkcs12\";\n+   public static final String CREDENTIALS_PATH = \"credentials.pfx\";\n+\n+   @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   static KeyStoreCredentialStore getKeyStoreCredentialStore(Path path, String type, boolean create, char[] password) throws CredentialStoreException {\n+      KeyStoreCredentialStore store = new KeyStoreCredentialStore();\n+      final Map<String, String> map = new HashMap<>();\n+      map.put(\"location\", path.toAbsolutePath().toString());\n+      map.put(\"keyStoreType\", type);\n+      map.put(\"create\", Boolean.toString(create));\n+      store.initialize(\n+            map,\n+            new CredentialStore.CredentialSourceProtectionParameter(\n+                  IdentityCredentials.NONE.withCredential(new PasswordCredential(ClearPassword.createRaw(ClearPassword.ALGORITHM_CLEAR, password)))),\n+            null\n+      );\n+      return store;\n+   }\n+\n+   static Path resourceToPath(Resource resource, String serverRoot) {\n+      if (resource != null) {\n+         return Paths.get(resource.getAbsolutePath());\n+      } else {\n+         String serverHome = System.getProperty(\"infinispan.server.home.path\");\n+         Path serverHomePath = serverHome == null ? Paths.get(\"\") : Paths.get(serverHome);\n+         return serverHomePath.resolve(Paths.get(serverRoot, \"conf\", CREDENTIALS_PATH)).toAbsolutePath();\n+      }\n+   }\n+\n+   @CommandDefinition(name = Add.CMD, description = \"Adds a credential to a key store\")\n+   public static class Add extends CliCommand {\n+      public static final String CMD = \"add\";\n+\n+      @Argument(description = \"The name (alias) of the credential\", required = true)\n+      String alias;\n+\n+      @Option(description = \"The path to a keystore. A new one will be created if it doesn't exist.\", completer = FileOptionCompleter.class)\n+      Resource path;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg0ODgxMw=="}, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYxOTIwNQ==", "bodyText": "not really. The User command allows to set the file name and it resolves to the server/conf\nUser comand:\nif (usersFile == null) {\n\tthis.usersFile = this.serverRoot.resolve(\"conf\").resolve(DEFAULT_USERS_PROPERTIES_FILE);\n} else if (usersFile.isAbsolute()) {\n\tthis.usersFile = usersFile;\n} else {\n\tthis.usersFile = this.serverRoot.resolve(\"conf\").resolve(usersFile);\n}\n\nCredential command:\nif (resource != null) {\n\treturn Paths.get(resource.getAbsolutePath());\n} else {\n\tString serverHome = System.getProperty(\"infinispan.server.home.path\");\n\tPath serverHomePath = serverHome == null ? Paths.get(\"\") : Paths.get(serverHome);\n\treturn serverHomePath.resolve(Paths.get(serverRoot, \"conf\", CREDENTIALS_PATH)).toAbsolutePath();\n}", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529619205", "createdAt": "2020-11-24T15:10:44Z", "author": {"login": "pruivo"}, "path": "cli/src/main/java/org/infinispan/cli/commands/Credentials.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.impl.completer.FileOptionCompleter;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.kohsuke.MetaInfServices;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = Credentials.CMD, description = \"Credential store operations\", groupCommands = {Credentials.Add.class, Credentials.Remove.class, Credentials.Ls.class})\n+public class Credentials extends CliCommand {\n+\n+   public static final String CMD = \"credentials\";\n+   public static final String STORE_TYPE = \"pkcs12\";\n+   public static final String CREDENTIALS_PATH = \"credentials.pfx\";\n+\n+   @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   static KeyStoreCredentialStore getKeyStoreCredentialStore(Path path, String type, boolean create, char[] password) throws CredentialStoreException {\n+      KeyStoreCredentialStore store = new KeyStoreCredentialStore();\n+      final Map<String, String> map = new HashMap<>();\n+      map.put(\"location\", path.toAbsolutePath().toString());\n+      map.put(\"keyStoreType\", type);\n+      map.put(\"create\", Boolean.toString(create));\n+      store.initialize(\n+            map,\n+            new CredentialStore.CredentialSourceProtectionParameter(\n+                  IdentityCredentials.NONE.withCredential(new PasswordCredential(ClearPassword.createRaw(ClearPassword.ALGORITHM_CLEAR, password)))),\n+            null\n+      );\n+      return store;\n+   }\n+\n+   static Path resourceToPath(Resource resource, String serverRoot) {\n+      if (resource != null) {\n+         return Paths.get(resource.getAbsolutePath());\n+      } else {\n+         String serverHome = System.getProperty(\"infinispan.server.home.path\");\n+         Path serverHomePath = serverHome == null ? Paths.get(\"\") : Paths.get(serverHome);\n+         return serverHomePath.resolve(Paths.get(serverRoot, \"conf\", CREDENTIALS_PATH)).toAbsolutePath();\n+      }\n+   }\n+\n+   @CommandDefinition(name = Add.CMD, description = \"Adds a credential to a key store\")\n+   public static class Add extends CliCommand {\n+      public static final String CMD = \"add\";\n+\n+      @Argument(description = \"The name (alias) of the credential\", required = true)\n+      String alias;\n+\n+      @Option(description = \"The path to a keystore. A new one will be created if it doesn't exist.\", completer = FileOptionCompleter.class)\n+      Resource path;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg0ODgxMw=="}, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Nzg4Nzk1OnYy", "diffSide": "RIGHT", "path": "cli/src/main/resources/help/credentials.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDowNjo1MlrOHyoP1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDowNjo1MlrOHyoP1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg1MDI2MA==", "bodyText": "this is the path and not the filename.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522850260", "createdAt": "2020-11-13T10:06:52Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,71 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Removes the credential identified by the specified alias (name) from the key store.\n+\n+\n+COMMON OPTIONS\n+--------------\n+\n+These options apply to all commands:\n+\n+*-h, --help*::\n+Displays a help page for the command or sub-command.\n+\n+*--server-root*='path-to-server-root'::\n+The path to the server root. Defaults to `server`.\n+\n+*--path*='credentials.pfx'::\n+The name of the key store which contains the credentials. Defaults to `credentials.pfx`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzkwMDgzOnYy", "diffSide": "RIGHT", "path": "cli/src/main/resources/help/credentials.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDoxMDo1NlrOHyoXuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDoxMDo1NlrOHyoXuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg1MjI4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *credentials create* 'alias'\n          \n          \n            \n            *credentials add* 'alias'", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522852281", "createdAt": "2020-11-13T10:10:56Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,71 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzkwMTQ4OnYy", "diffSide": "RIGHT", "path": "cli/src/main/resources/help/credentials.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDoxMTowOVrOHyoYJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDoxMTowOVrOHyoYJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg1MjM4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *credentials create* 'alias'::\n          \n          \n            \n            *credentials add* 'alias'::", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522852388", "createdAt": "2020-11-13T10:11:09Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,71 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzkwMzEwOnYy", "diffSide": "RIGHT", "path": "cli/src/main/resources/help/credentials.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDoxMTozN1rOHyoZHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjowNDowM1rOHy0NpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg1MjYzNg==", "bodyText": "nitpick: \"Adds a credential...\"?", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522852636", "createdAt": "2020-11-13T10:11:37Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,71 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NjMwOQ==", "bodyText": "@pruivo yeah it should be \"adds\". I'm going to push a commit with some doc suggestions and will include this.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r523046309", "createdAt": "2020-11-13T16:04:03Z", "author": {"login": "oraNod"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,71 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg1MjYzNg=="}, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzkwNTkyOnYy", "diffSide": "RIGHT", "path": "cli/src/main/resources/help/credentials.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDoxMjoyMlrOHyoawg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDoxMjoyMlrOHyoawg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg1MzA1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *--server-root*='path-to-server-root'::\n          \n          \n            \n            *-s, --server-root*='path-to-server-root'::", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522853058", "createdAt": "2020-11-13T10:12:22Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,71 @@\n+CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages ${infinispan.brand.name} credential stores\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials create* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, create, remove) credentials within a key store. Unless overridden, the commands use the `credentials.pfx`\n+key store in the server's configuration directory.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List credentials in a key store\n+\n+*credentials ls*::\n+Lists the credentials stored in the key store.\n+\n+Create a credential\n+\n+*credentials create* 'alias'::\n+Creates a credential with the specified alias (name) within the key store.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Removes the credential identified by the specified alias (name) from the key store.\n+\n+\n+COMMON OPTIONS\n+--------------\n+\n+These options apply to all commands:\n+\n+*-h, --help*::\n+Displays a help page for the command or sub-command.\n+\n+*--server-root*='path-to-server-root'::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Nzk1NDQ2OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDoyNjoxNlrOHyo4VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDoyNjoxNlrOHyo4VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MDYyOA==", "bodyText": "unused", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522860628", "createdAt": "2020-11-13T10:26:16Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.infinispan.server.configuration.security;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.infinispan.server.configuration.PasswordSerializer;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfiguration implements ConfigurationInfo {\n+   static final AttributeDefinition<String> NAME = AttributeDefinition.builder(\"name\", null, String.class).build();\n+   static final AttributeDefinition<String> PATH = AttributeDefinition.builder(\"path\", null, String.class).build();\n+   static final AttributeDefinition<String> RELATIVE_TO = AttributeDefinition.builder(\"relativeTo\", null, String.class).build();\n+   static final AttributeDefinition<String> TYPE = AttributeDefinition.builder(\"type\", \"pkcs12\", String.class).build();\n+   static final AttributeDefinition<String> CREDENTIAL = AttributeDefinition.builder(\"credential\", null, String.class).serializer(PasswordSerializer.INSTANCE).build();\n+\n+   private final AttributeSet attributes;\n+   private final CredentialStoreSpi credentialStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Nzk1NTQ4OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDoyNjo0MFrOHyo5BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToxNjozNVrOH5FqyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MDgwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORE.toString());\n          \n          \n            \n               private static final ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORE.toString());", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522860804", "createdAt": "2020-11-13T10:26:40Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.infinispan.server.configuration.security;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.infinispan.server.configuration.PasswordSerializer;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfiguration implements ConfigurationInfo {\n+   static final AttributeDefinition<String> NAME = AttributeDefinition.builder(\"name\", null, String.class).build();\n+   static final AttributeDefinition<String> PATH = AttributeDefinition.builder(\"path\", null, String.class).build();\n+   static final AttributeDefinition<String> RELATIVE_TO = AttributeDefinition.builder(\"relativeTo\", null, String.class).build();\n+   static final AttributeDefinition<String> TYPE = AttributeDefinition.builder(\"type\", \"pkcs12\", String.class).build();\n+   static final AttributeDefinition<String> CREDENTIAL = AttributeDefinition.builder(\"credential\", null, String.class).serializer(PasswordSerializer.INSTANCE).build();\n+\n+   private final AttributeSet attributes;\n+   private final CredentialStoreSpi credentialStore;\n+\n+   static AttributeSet attributeDefinitionSet() {\n+      return new AttributeSet(CredentialStoreConfiguration.class, NAME, PATH, RELATIVE_TO, TYPE, CREDENTIAL);\n+   }\n+\n+   private static ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORE.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyMzc1Mw==", "bodyText": "this was partially applied :)", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529623753", "createdAt": "2020-11-24T15:16:35Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.infinispan.server.configuration.security;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.infinispan.server.configuration.PasswordSerializer;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfiguration implements ConfigurationInfo {\n+   static final AttributeDefinition<String> NAME = AttributeDefinition.builder(\"name\", null, String.class).build();\n+   static final AttributeDefinition<String> PATH = AttributeDefinition.builder(\"path\", null, String.class).build();\n+   static final AttributeDefinition<String> RELATIVE_TO = AttributeDefinition.builder(\"relativeTo\", null, String.class).build();\n+   static final AttributeDefinition<String> TYPE = AttributeDefinition.builder(\"type\", \"pkcs12\", String.class).build();\n+   static final AttributeDefinition<String> CREDENTIAL = AttributeDefinition.builder(\"credential\", null, String.class).serializer(PasswordSerializer.INSTANCE).build();\n+\n+   private final AttributeSet attributes;\n+   private final CredentialStoreSpi credentialStore;\n+\n+   static AttributeSet attributeDefinitionSet() {\n+      return new AttributeSet(CredentialStoreConfiguration.class, NAME, PATH, RELATIVE_TO, TYPE, CREDENTIAL);\n+   }\n+\n+   private static ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORE.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MDgwNA=="}, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Nzk2Njk3OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozMDowOFrOHypAAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToxODowMVrOH5FvpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MjU5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static final ElementDefinition<CredentialStoresConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORES.toString());\n          \n          \n            \n               private static final ElementDefinition<CredentialStoresConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORES.toString());", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522862594", "createdAt": "2020-11-13T10:30:08Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.infinispan.server.configuration.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoresConfiguration implements ConfigurationInfo {\n+   private static final ElementDefinition<CredentialStoresConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORES.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyNDk5Ng==", "bodyText": "change not applied.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529624996", "createdAt": "2020-11-24T15:18:01Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.infinispan.server.configuration.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoresConfiguration implements ConfigurationInfo {\n+   private static final ElementDefinition<CredentialStoresConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORES.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MjU5NA=="}, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Nzk2NzkxOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozMDoyMlrOHypAkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToxODoyNlrOH5Fw-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MjczNg==", "bodyText": "unused", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522862736", "createdAt": "2020-11-13T10:30:22Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.infinispan.server.configuration.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoresConfiguration implements ConfigurationInfo {\n+   private static final ElementDefinition<CredentialStoresConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORES.toString());\n+\n+   private final List<CredentialStoreConfiguration> credentialStores;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyNTMzNw==", "bodyText": "can be removed :)", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529625337", "createdAt": "2020-11-24T15:18:26Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.infinispan.server.configuration.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoresConfiguration implements ConfigurationInfo {\n+   private static final ElementDefinition<CredentialStoresConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORES.toString());\n+\n+   private final List<CredentialStoreConfiguration> credentialStores;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MjczNg=="}, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Nzk4MDU1OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozNDoxNVrOHypIMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozNDoxNVrOHypIMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDY5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private Map<String, RealmConfigurationBuilder> securityRealms = new LinkedHashMap<>(2);\n          \n          \n            \n               private final Map<String, RealmConfigurationBuilder> securityRealms = new LinkedHashMap<>(2);", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522864691", "createdAt": "2020-11-13T10:34:15Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java", "diffHunk": "@@ -16,8 +16,13 @@\n  */\n public class RealmsConfigurationBuilder implements Builder<RealmsConfiguration> {\n \n+   private final SecurityConfigurationBuilder securityConfigurationBuilder;\n    private Map<String, RealmConfigurationBuilder> securityRealms = new LinkedHashMap<>(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Nzk4MjA0OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozNDo0MVrOHypJIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozNDo0MVrOHypJIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDkyOQ==", "bodyText": "can be reverted", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522864929", "createdAt": "2020-11-13T10:34:41Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java", "diffHunk": "@@ -55,4 +60,7 @@ public void validate() {\n       securityRealms.values().forEach(RealmConfigurationBuilder::validate);\n    }\n \n+   public SecurityConfigurationBuilder securityConfigurationBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Nzk4MzA3OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozNDo1OFrOHypJuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozNDo1OFrOHypJuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NTA4Mw==", "bodyText": "can be reverted", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522865083", "createdAt": "2020-11-13T10:34:58Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java", "diffHunk": "@@ -16,8 +16,13 @@\n  */\n public class RealmsConfigurationBuilder implements Builder<RealmsConfiguration> {\n \n+   private final SecurityConfigurationBuilder securityConfigurationBuilder;\n    private Map<String, RealmConfigurationBuilder> securityRealms = new LinkedHashMap<>(2);\n \n+   public RealmsConfigurationBuilder(SecurityConfigurationBuilder securityConfigurationBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Nzk4MzY4OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozNTowNVrOHypKEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozNTowNVrOHypKEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NTE2OQ==", "bodyText": "can be reverted", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522865169", "createdAt": "2020-11-13T10:35:05Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java", "diffHunk": "@@ -16,8 +16,13 @@\n  */\n public class RealmsConfigurationBuilder implements Builder<RealmsConfiguration> {\n \n+   private final SecurityConfigurationBuilder securityConfigurationBuilder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Nzk5MjcxOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozNzo0OFrOHypPjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozODo0NFrOHypRRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjU3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static final ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.SECURITY.toString());\n          \n          \n            \n               private static final ElementDefinition<SecurityConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.SECURITY.toString());", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522866574", "createdAt": "2020-11-13T10:37:48Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java", "diffHunk": "@@ -15,11 +15,15 @@\n    private static final ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.SECURITY.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NzAxMg==", "bodyText": "And getElement()\npublic ElementDefinition<SecurityConfiguration> getElementDefinition()", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522867012", "createdAt": "2020-11-13T10:38:44Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java", "diffHunk": "@@ -15,11 +15,15 @@\n    private static final ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.SECURITY.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjU3NA=="}, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Nzk5NzI1OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozOToyMVrOHypSZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozOToyMVrOHypSZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NzMwMQ==", "bodyText": "field not required/used.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522867301", "createdAt": "2020-11-13T10:39:21Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfigurationBuilder.java", "diffHunk": "@@ -1,30 +1,47 @@\n package org.infinispan.server.configuration.security;\n \n import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.server.configuration.ServerConfigurationBuilder;\n \n /**\n  * @since 10.0\n  */\n public class SecurityConfigurationBuilder implements Builder<SecurityConfiguration> {\n-   private final RealmsConfigurationBuilder realmsConfiguration = new RealmsConfigurationBuilder();\n+   private final CredentialStoresConfigurationBuilder credentialStoresConfiguration = new CredentialStoresConfigurationBuilder(this);\n+   private final RealmsConfigurationBuilder realmsConfiguration = new RealmsConfigurationBuilder(this);\n+   private final ServerConfigurationBuilder serverConfigurationBuilder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODE1NDA3OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMToyNTo1OFrOHyqwbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMToyNTo1OFrOHyqwbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5MTM3NQ==", "bodyText": "would it be worth to check if the passwords are parsed correctly?\nThe last assert is failing. The attribute's value is null (probably my mistake since if I changed the password in Common, the test is unable to open the keystore...)\nassertEquals(\"strongPassword\", realmConfiguration.ldapConfiguration().attributes().attribute(\"credential\").get());\n      assertEquals(\"secret\", new String((char[]) realmConfiguration.trustStoreConfiguration().attributes().attribute(\"keystorePassword\").get())); //stores it as char[]\n      assertEquals(\"1fdca4ec-c416-47e0-867a-3d471af7050f\", realmConfiguration.tokenConfiguration().oauth2Configuration().attributes().attribute(\"clientSecret\").get());\n      assertEquals(\"password\", realmConfiguration.serverIdentitiesConfiguration().sslConfigurations().get(0).keyStore().attributes().attribute(\"keyPassword\").get());", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522891375", "createdAt": "2020-11-13T11:25:58Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java", "diffHunk": "@@ -63,9 +76,18 @@ public void testParser() throws IOException {\n       assertEquals(11223, socketBindings.get(\"hotrod\").getPort());\n       assertEquals(8080, socketBindings.get(\"rest\").getPort());\n \n+      // Security realms\n+      List<RealmConfiguration> realms = server.security().realms().realms();\n+      assertEquals(2, realms.size());\n+      RealmConfiguration realmConfiguration = realms.get(0);\n+      assertEquals(\"default\", realmConfiguration.name());\n+\n+      realmConfiguration = realms.get(1);\n+      assertEquals(\"using-credentials\", realmConfiguration.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODE1OTc5OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/resources/schema/infinispan-server-12.0.xsd", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMToyNzo1MVrOHyqzuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOTozNjo1N1rOH1k7nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5MjIxOQ==", "bodyText": "I guess it isn't a path but the file name... what about replacing with file, store-file, or credentials-file?", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522892219", "createdAt": "2020-11-13T11:27:51Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/resources/schema/infinispan-server-12.0.xsd", "diffHunk": "@@ -818,6 +825,108 @@\n       </xs:attribute>\n    </xs:complexType>\n \n+   <xs:complexType name=\"credential-stores\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            Complex type to contain the definitions of the credential stores.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:sequence>\n+         <xs:element name=\"credential-store\" type=\"tns:credential-store\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      </xs:sequence>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"credential-reference\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            Credential reference to be used by the configuration.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:attribute name=\"store\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               Credential store name used to fetch credential with given 'alias' from.\n+               Credential store name has to be defined elsewhere.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"alias\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               Alias of credential in the credential store.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"clear-text-credential\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            A clear-text credential.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:attribute name=\"clear-text\" type=\"xs:string\" use=\"required\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               The clear-text password.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"credential-store\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            An individual credential store definition.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:choice>\n+         <xs:element name=\"clear-text-credential\" type=\"tns:clear-text-credential\">\n+            <xs:annotation>\n+               <xs:documentation>\n+                  Credential to be used by as protection parameter for the Credential Store.\n+               </xs:documentation>\n+            </xs:annotation>\n+         </xs:element>\n+         <xs:element name=\"credential-reference\" type=\"tns:credential-reference\">\n+            <xs:annotation>\n+               <xs:documentation>\n+                  Credential to be used by as protection parameter for the Credential Store.\n+               </xs:documentation>\n+            </xs:annotation>\n+         </xs:element>\n+      </xs:choice>\n+      <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               The name of this credential store.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"relative-to\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               A reference to a previously defined path that the file name is\n+               relative to.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"path\" type=\"xs:string\" use=\"required\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwMjkxNg==", "bodyText": "it's a relative path.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522902916", "createdAt": "2020-11-13T11:51:50Z", "author": {"login": "tristantarrant"}, "path": "server/runtime/src/main/resources/schema/infinispan-server-12.0.xsd", "diffHunk": "@@ -818,6 +825,108 @@\n       </xs:attribute>\n    </xs:complexType>\n \n+   <xs:complexType name=\"credential-stores\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            Complex type to contain the definitions of the credential stores.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:sequence>\n+         <xs:element name=\"credential-store\" type=\"tns:credential-store\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      </xs:sequence>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"credential-reference\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            Credential reference to be used by the configuration.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:attribute name=\"store\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               Credential store name used to fetch credential with given 'alias' from.\n+               Credential store name has to be defined elsewhere.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"alias\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               Alias of credential in the credential store.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"clear-text-credential\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            A clear-text credential.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:attribute name=\"clear-text\" type=\"xs:string\" use=\"required\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               The clear-text password.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"credential-store\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            An individual credential store definition.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:choice>\n+         <xs:element name=\"clear-text-credential\" type=\"tns:clear-text-credential\">\n+            <xs:annotation>\n+               <xs:documentation>\n+                  Credential to be used by as protection parameter for the Credential Store.\n+               </xs:documentation>\n+            </xs:annotation>\n+         </xs:element>\n+         <xs:element name=\"credential-reference\" type=\"tns:credential-reference\">\n+            <xs:annotation>\n+               <xs:documentation>\n+                  Credential to be used by as protection parameter for the Credential Store.\n+               </xs:documentation>\n+            </xs:annotation>\n+         </xs:element>\n+      </xs:choice>\n+      <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               The name of this credential store.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"relative-to\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               A reference to a previously defined path that the file name is\n+               relative to.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"path\" type=\"xs:string\" use=\"required\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5MjIxOQ=="}, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA2OTA3NA==", "bodyText": "we have already a relative-to attribute. Having a path that is relative to relative-to (right?) seems a bit too much IMO.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r523069074", "createdAt": "2020-11-13T16:39:31Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/resources/schema/infinispan-server-12.0.xsd", "diffHunk": "@@ -818,6 +825,108 @@\n       </xs:attribute>\n    </xs:complexType>\n \n+   <xs:complexType name=\"credential-stores\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            Complex type to contain the definitions of the credential stores.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:sequence>\n+         <xs:element name=\"credential-store\" type=\"tns:credential-store\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      </xs:sequence>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"credential-reference\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            Credential reference to be used by the configuration.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:attribute name=\"store\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               Credential store name used to fetch credential with given 'alias' from.\n+               Credential store name has to be defined elsewhere.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"alias\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               Alias of credential in the credential store.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"clear-text-credential\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            A clear-text credential.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:attribute name=\"clear-text\" type=\"xs:string\" use=\"required\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               The clear-text password.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"credential-store\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            An individual credential store definition.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:choice>\n+         <xs:element name=\"clear-text-credential\" type=\"tns:clear-text-credential\">\n+            <xs:annotation>\n+               <xs:documentation>\n+                  Credential to be used by as protection parameter for the Credential Store.\n+               </xs:documentation>\n+            </xs:annotation>\n+         </xs:element>\n+         <xs:element name=\"credential-reference\" type=\"tns:credential-reference\">\n+            <xs:annotation>\n+               <xs:documentation>\n+                  Credential to be used by as protection parameter for the Credential Store.\n+               </xs:documentation>\n+            </xs:annotation>\n+         </xs:element>\n+      </xs:choice>\n+      <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               The name of this credential store.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"relative-to\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               A reference to a previously defined path that the file name is\n+               relative to.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"path\" type=\"xs:string\" use=\"required\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5MjIxOQ=="}, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNDEyMw==", "bodyText": "Every single other reference to a file in our config uses the path/relative-to pair. Remember that relative-to is not a path directly but the name of a property. This mimics the behaviour of WildFly where, for each file in the config, the relative-to attribute is set to the appropriate default (e.g. infinispan.server.config.path or infinispan.server.data.path) without having to include it in the path attribute directly (e.g. ${infinispan.server.config.path}/credentials.pfx).\nWe could remove all traces of relative-to: if a path is relative, it will be relative to the default path for that element.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r525904123", "createdAt": "2020-11-18T08:39:41Z", "author": {"login": "tristantarrant"}, "path": "server/runtime/src/main/resources/schema/infinispan-server-12.0.xsd", "diffHunk": "@@ -818,6 +825,108 @@\n       </xs:attribute>\n    </xs:complexType>\n \n+   <xs:complexType name=\"credential-stores\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            Complex type to contain the definitions of the credential stores.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:sequence>\n+         <xs:element name=\"credential-store\" type=\"tns:credential-store\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      </xs:sequence>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"credential-reference\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            Credential reference to be used by the configuration.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:attribute name=\"store\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               Credential store name used to fetch credential with given 'alias' from.\n+               Credential store name has to be defined elsewhere.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"alias\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               Alias of credential in the credential store.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"clear-text-credential\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            A clear-text credential.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:attribute name=\"clear-text\" type=\"xs:string\" use=\"required\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               The clear-text password.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"credential-store\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            An individual credential store definition.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:choice>\n+         <xs:element name=\"clear-text-credential\" type=\"tns:clear-text-credential\">\n+            <xs:annotation>\n+               <xs:documentation>\n+                  Credential to be used by as protection parameter for the Credential Store.\n+               </xs:documentation>\n+            </xs:annotation>\n+         </xs:element>\n+         <xs:element name=\"credential-reference\" type=\"tns:credential-reference\">\n+            <xs:annotation>\n+               <xs:documentation>\n+                  Credential to be used by as protection parameter for the Credential Store.\n+               </xs:documentation>\n+            </xs:annotation>\n+         </xs:element>\n+      </xs:choice>\n+      <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               The name of this credential store.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"relative-to\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               A reference to a previously defined path that the file name is\n+               relative to.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"path\" type=\"xs:string\" use=\"required\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5MjIxOQ=="}, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk0MTY2Mw==", "bodyText": "ok. fair enough. Let's keep both.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r525941663", "createdAt": "2020-11-18T09:36:57Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/resources/schema/infinispan-server-12.0.xsd", "diffHunk": "@@ -818,6 +825,108 @@\n       </xs:attribute>\n    </xs:complexType>\n \n+   <xs:complexType name=\"credential-stores\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            Complex type to contain the definitions of the credential stores.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:sequence>\n+         <xs:element name=\"credential-store\" type=\"tns:credential-store\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      </xs:sequence>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"credential-reference\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            Credential reference to be used by the configuration.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:attribute name=\"store\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               Credential store name used to fetch credential with given 'alias' from.\n+               Credential store name has to be defined elsewhere.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"alias\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               Alias of credential in the credential store.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"clear-text-credential\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            A clear-text credential.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:attribute name=\"clear-text\" type=\"xs:string\" use=\"required\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               The clear-text password.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+   </xs:complexType>\n+\n+   <xs:complexType name=\"credential-store\">\n+      <xs:annotation>\n+         <xs:documentation>\n+            An individual credential store definition.\n+         </xs:documentation>\n+      </xs:annotation>\n+      <xs:choice>\n+         <xs:element name=\"clear-text-credential\" type=\"tns:clear-text-credential\">\n+            <xs:annotation>\n+               <xs:documentation>\n+                  Credential to be used by as protection parameter for the Credential Store.\n+               </xs:documentation>\n+            </xs:annotation>\n+         </xs:element>\n+         <xs:element name=\"credential-reference\" type=\"tns:credential-reference\">\n+            <xs:annotation>\n+               <xs:documentation>\n+                  Credential to be used by as protection parameter for the Credential Store.\n+               </xs:documentation>\n+            </xs:annotation>\n+         </xs:element>\n+      </xs:choice>\n+      <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               The name of this credential store.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"relative-to\" type=\"xs:string\">\n+         <xs:annotation>\n+            <xs:documentation>\n+               A reference to a previously defined path that the file name is\n+               relative to.\n+            </xs:documentation>\n+         </xs:annotation>\n+      </xs:attribute>\n+      <xs:attribute name=\"path\" type=\"xs:string\" use=\"required\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5MjIxOQ=="}, "originalCommit": {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTMwNzc2OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/server/server/conf/infinispan.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjo0MjozMVrOHy1t8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODo0MDoyMlrOH1iqfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3MDk2MA==", "bodyText": "@tristantarrant is it possible to add credentials to property realm keystores?\nIf I try to start the server with this configuration I get this exception unless I create a credentials keystore and modify the default configuration to include the keystore password: ELY09514: Unable to initialize credential store\nAFAIK it isn't possible to add credentials in a keystore to users in properties realms so I think including credential-stores in the default config is a little confusing. Could we create a separate example that includes the credentials store with different connection types, like LDAP. Either that or show how to map the alias in the keystore to the user in a properties realm.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r523070960", "createdAt": "2020-11-13T16:42:31Z", "author": {"login": "oraNod"}, "path": "server/runtime/src/main/server/server/conf/infinispan.xml", "diffHunk": "@@ -22,6 +22,11 @@\n       </socket-bindings>\n \n       <security>\n+         <credential-stores>\n+            <credential-store name=\"credentials\" path=\"credentials.pfx\">\n+               <clear-text-credential clear-text=\"secret\"/>\n+            </credential-store>\n+         </credential-stores>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "115e5c879db23bb4c2312c8dd3c9aceb6bda6a56"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExMTQ5OQ==", "bodyText": "Maybe I've got things mixed up. The example in the doc shows bin/cli.sh credentials add dbpassword -p \"secret1234!\" where -p is the keystore password.\nThe alias of \"dbpassword\" is not equivalent to a username. It is the alias of the credential in the keystore.\nI think the example needs to be bin/cli.sh credentials add dbpassword -c mysupersecretcredential -p \"secret1234!\"\nHowever, when using a default property realm, I still don't see how to map the alias of the credential to a username. Is that possible?", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r523111499", "createdAt": "2020-11-13T17:31:01Z", "author": {"login": "oraNod"}, "path": "server/runtime/src/main/server/server/conf/infinispan.xml", "diffHunk": "@@ -22,6 +22,11 @@\n       </socket-bindings>\n \n       <security>\n+         <credential-stores>\n+            <credential-store name=\"credentials\" path=\"credentials.pfx\">\n+               <clear-text-credential clear-text=\"secret\"/>\n+            </credential-store>\n+         </credential-stores>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3MDk2MA=="}, "originalCommit": {"oid": "115e5c879db23bb4c2312c8dd3c9aceb6bda6a56"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExOTA3Nw==", "bodyText": "AFAIK, it is only for \"service\" passwords, like DB access, LDAP access, decrypt Keystore (SSL). It was never intended for users' accounts.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r523119077", "createdAt": "2020-11-13T17:41:36Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/server/server/conf/infinispan.xml", "diffHunk": "@@ -22,6 +22,11 @@\n       </socket-bindings>\n \n       <security>\n+         <credential-stores>\n+            <credential-store name=\"credentials\" path=\"credentials.pfx\">\n+               <clear-text-credential clear-text=\"secret\"/>\n+            </credential-store>\n+         </credential-stores>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3MDk2MA=="}, "originalCommit": {"oid": "115e5c879db23bb4c2312c8dd3c9aceb6bda6a56"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNDUwOA==", "bodyText": "@oraNod you should read https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html/how_to_configure_server_security/securely_storing_credentials#credential_store", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r525904508", "createdAt": "2020-11-18T08:40:22Z", "author": {"login": "tristantarrant"}, "path": "server/runtime/src/main/server/server/conf/infinispan.xml", "diffHunk": "@@ -22,6 +22,11 @@\n       </socket-bindings>\n \n       <security>\n+         <credential-stores>\n+            <credential-store name=\"credentials\" path=\"credentials.pfx\">\n+               <clear-text-credential clear-text=\"secret\"/>\n+            </credential-store>\n+         </credential-stores>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3MDk2MA=="}, "originalCommit": {"oid": "115e5c879db23bb4c2312c8dd3c9aceb6bda6a56"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjYzMTMyOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_server_credentials.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOTo1OTo1M1rOH2VToQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozNToyNFrOH2Wr-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjczNDI0MQ==", "bodyText": "I think <credential-reference> is always required if you want to use the credential store.\nWhat is optional is the attributes:\n\nstore => if you have a single <credential-store>.\nalias => if you have a single \"alias\" inside the keystore.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r526734241", "createdAt": "2020-11-19T09:59:53Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/proc_server_credentials.adoc", "diffHunk": "@@ -45,13 +46,14 @@ dbpassword\n +\n . Configure {brandname} to use the credential keystore.\n .. Specify the name and location of the credential keystore in the `credential-stores` configuration.\n-.. Specify credential keystore and the password alias in the `credential-reference` configuration, if necessary.\n+.. Specify the credential keystore and alias in the `credential-reference` configuration, if necessary.\n +\n [TIP]\n ====\n-You need to specify the credential keystore in the `credential-reference` configuration only if there is more than one credential keystores.\n+The `credential-reference` configuration is necessary only if you have multiple keystores or aliases.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b5ba9e55c3acc6f23f0b31e9afb9205bd9e301b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1Njg1OA==", "bodyText": "Nicely spotted, Pedro! I've changed it.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r526756858", "createdAt": "2020-11-19T10:35:24Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/proc_server_credentials.adoc", "diffHunk": "@@ -45,13 +46,14 @@ dbpassword\n +\n . Configure {brandname} to use the credential keystore.\n .. Specify the name and location of the credential keystore in the `credential-stores` configuration.\n-.. Specify credential keystore and the password alias in the `credential-reference` configuration, if necessary.\n+.. Specify the credential keystore and alias in the `credential-reference` configuration, if necessary.\n +\n [TIP]\n ====\n-You need to specify the credential keystore in the `credential-reference` configuration only if there is more than one credential keystores.\n+The `credential-reference` configuration is necessary only if you have multiple keystores or aliases.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjczNDI0MQ=="}, "originalCommit": {"oid": "8b5ba9e55c3acc6f23f0b31e9afb9205bd9e301b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTU1OTg4OnYy", "diffSide": "RIGHT", "path": "cli/src/main/resources/help/credentials.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToxNDoxN1rOH5Fjiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToxNDoxN1rOH5Fjiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyMTg5OQ==", "bodyText": "the --path doesn't have a \"default\". Probably the default should be credentials.pfx?", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529621899", "createdAt": "2020-11-24T15:14:17Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,76 @@\n+ CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages keystores that contain ${infinispan.brand.name} Server credentials\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials add* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+List, create, and remove credentials inside a keystore.\n+By default, commands manage the `credentials.pfx` keystore in the server configuration directory.\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*::\n+Lists credential aliases stored in the keystore.\n+\n+Add a credential\n+\n+*credentials add* 'alias'::\n+Adds an alias and corresponding credential to the keystore.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Deletes an alias and corresponding credential from the keystore.\n+\n+\n+OPTIONS\n+-------\n+*-h, --help*::\n+Prints command help.\n+\n+*-s, --server-root*='path-to-server-root'::\n+Specifies the path to the server root directory. Defaults to `server`.\n+\n+*--path*='credentials.pfx'::\n+Specifies the path to the credential keystore. Defaults to the server configuration directory, `server/conf`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e608605c5b52b07a4ff9b45a10766722e3473b78"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTU5MDgzOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyMDoxMFrOH5F2rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyMDoxMFrOH5F2rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyNjc5Ng==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static final ElementDefinition<SecurityConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.SECURITY.toString());\n          \n          \n            \n               private static final ElementDefinition<SecurityConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.SECURITY.toString());", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529626796", "createdAt": "2020-11-24T15:20:10Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java", "diffHunk": "@@ -12,14 +12,18 @@\n  * @since 10.0\n  */\n public class SecurityConfiguration implements ConfigurationInfo {\n-   private static final ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.SECURITY.toString());\n+   private static final ElementDefinition<SecurityConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.SECURITY.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e608605c5b52b07a4ff9b45a10766722e3473b78"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTYxNzA3OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyNToxMlrOH5GHAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyNToxMlrOH5GHAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzMDk3OQ==", "bodyText": "unused", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529630979", "createdAt": "2020-11-24T15:25:12Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java", "diffHunk": "@@ -91,5 +123,381 @@ public void testParser() throws IOException {\n       assertEquals(socketBindings.get(\"default\").getAddress().getAddress().getHostAddress(), singlePortRouter.host());\n       assertEquals(socketBindings.get(\"default\").getPort(), singlePortRouter.port());\n       assertEquals(socketBindings.get(\"memcached\").getPort(), server.endpoints().endpoints().get(0).connectors().get(2).port());\n+\n+      assertEquals(\"strongPassword\", realmConfiguration.ldapConfiguration().attributes().attribute(\"credential\").get());\n+      assertEquals(\"secret\", new String((char[]) realmConfiguration.trustStoreConfiguration().attributes().attribute(\"keystorePassword\").get())); //stores it as char[]\n+      assertEquals(\"1fdca4ec-c416-47e0-867a-3d471af7050f\", realmConfiguration.tokenConfiguration().oauth2Configuration().attributes().attribute(\"clientSecret\").get());\n+      assertEquals(\"password\", new String((char[]) realmConfiguration.serverIdentitiesConfiguration().sslConfigurations().get(0).keyStore().attributes().attribute(\"keystorePassword\").get()));\n+   }\n+\n+   @Test\n+   public void testJsonSerialization() throws IOException {\n+      ServerConfiguration serverConfiguration = parse();\n+\n+      String serverConfigPath = getConfigPath().toString();\n+\n+      JsonWriter writer = new JsonWriter();\n+      String json = writer.toJSON(serverConfiguration);\n+\n+      Json serverNode = Json.read(json).at(\"server\");\n+\n+      Json interfaces = serverNode.at(\"interfaces\").at(\"interface\");\n+      assertEquals(2, interfaces.asList().size());\n+\n+      Json interface1 = interfaces.at(0);\n+      Json interface2 = interfaces.at(1);\n+      Json address1 = interface1.at(\"loopback\");\n+      Json address2 = interface2.at(\"loopback\");\n+      assertEquals(\"default\", interface1.at(\"name\").asString());\n+      assertEquals(0, address1.asMap().size());\n+      assertEquals(\"another\", interface2.at(\"name\").asString());\n+      assertEquals(0, address2.asMap().size());\n+\n+      Json socketBindings = serverNode.at(\"socket-bindings\");\n+      assertEquals(\"default\", socketBindings.at(\"default-interface\").asString());\n+      assertEquals(0, socketBindings.at(\"port-offset\").asInteger());\n+\n+      Json socketBinding = socketBindings.at(\"socket-binding\");\n+      assertEquals(5, socketBinding.asList().size());\n+\n+      Iterator<Json> bindings = socketBinding.asJsonList().iterator();\n+      Json binding1 = bindings.next();\n+      assertEquals(\"default\", binding1.at(\"name\").asString());\n+      assertEquals(11222, binding1.at(\"port\").asInteger());\n+      Json binding2 = bindings.next();\n+      assertEquals(\"hotrod\", binding2.at(\"name\").asString());\n+      assertEquals(11223, binding2.at(\"port\").asInteger());\n+      Json binding3 = bindings.next();\n+      assertEquals(\"memcached\", binding3.at(\"name\").asString());\n+      assertEquals(11221, binding3.at(\"port\").asInteger());\n+      Json binding4 = bindings.next();\n+      assertEquals(\"memcached-2\", binding4.at(\"name\").asString());\n+      assertEquals(12221, binding4.at(\"port\").asInteger());\n+      Json binding5 = bindings.next();\n+      assertEquals(\"rest\", binding5.at(\"name\").asString());\n+      assertEquals(8080, binding5.at(\"port\").asInteger());\n+\n+      Json credentialStores = serverNode.at(\"security\").at(\"credential-stores\");\n+      assertEquals(1, credentialStores.asMap().size());\n+      Json credentialStore = credentialStores.at(\"credential-store\");\n+      assertEquals(\"credentials.pfx\", credentialStore.at(\"path\").asString());\n+\n+      Json securityRealms = serverNode.at(\"security\").at(\"security-realms\");\n+      assertEquals(1, securityRealms.asMap().size());\n+\n+      Json securityRealm = securityRealms.at(\"security-realm\");\n+      assertEquals(2, securityRealm.asList().size());\n+      Json defaultRealm = securityRealm.at(0);\n+      assertEquals(\"default\", defaultRealm.at(\"name\").asString());\n+\n+      Json ssl = defaultRealm.at(\"server-identities\").at(\"ssl\");\n+      Json keyStore = ssl.at(\"keystore\");\n+      assertEquals(\"ServerConfigurationParserTest-keystore.pfx\", keyStore.at(\"path\").asString());\n+      assertEquals(serverConfigPath, keyStore.at(\"relative-to\").asString());\n+      assertEquals(\"***\", keyStore.at(\"keystore-password\").asString());\n+      assertEquals(\"server\", keyStore.at(\"alias\").asString());\n+      assertEquals(\"***\", keyStore.at(\"key-password\").asString());\n+      assertEquals(\"localhost\", keyStore.at(\"generate-self-signed-certificate-host\").asString());\n+      Json engine = ssl.at(\"engine\");\n+      Json protocols = engine.at(\"enabled-protocols\");\n+      Iterator<Json> protocolItems = protocols.asJsonList().iterator();\n+      assertEquals(\"TLSV1.1\", protocolItems.next().asString());\n+      assertEquals(\"TLSV1.2\", protocolItems.next().asString());\n+      assertEquals(\"TLSV1.3\", protocolItems.next().asString());\n+      Json cipherSuites = engine.at(\"enabled-ciphersuites\");\n+      assertEquals(\"DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256\", cipherSuites.asString());\n+\n+      Json kerberos = defaultRealm.at(\"server-identities\").at(\"kerberos\");\n+      assertEquals(\"keytab\", kerberos.at(\"keytab-path\").asString());\n+      assertEquals(serverConfigPath, kerberos.at(\"relative-to\").asString());\n+\n+      Json filesystemRealm = defaultRealm.at(\"filesystem-realm\");\n+      assertEquals(\"security\", filesystemRealm.at(\"path\").asString());\n+      assertEquals(3, filesystemRealm.at(\"levels\").asInteger());\n+      assertFalse(filesystemRealm.at(\"encoded\").asBoolean());\n+      assertEquals(serverConfigPath, filesystemRealm.at(\"relative-to\").asString());\n+\n+      Json ldapRealm = defaultRealm.at(\"ldap-realm\");\n+      assertEquals(\"ldap\", ldapRealm.at(\"name\").asString());\n+      assertEquals(\"ldap://${org.infinispan.test.host.address}:10389\", ldapRealm.at(\"url\").asString());\n+      assertEquals(\"uid=admin,ou=People,dc=infinispan,dc=org\", ldapRealm.at(\"principal\").asString());\n+      assertEquals(\"***\", ldapRealm.at(\"credential\").asString());\n+\n+      /*Json ldapNameRewriter = ldapRealm.at(\"name-rewriter\");\n+      Json ldapRegexPrincipalTransformer = ldapNameRewriter.at(\"regex-principal-transformer\");\n+      assertEquals(\"uid\", ldapRegexPrincipalTransformer.at(\"name\").asString());\n+      assertEquals(\"uid\", ldapRegexPrincipalTransformer.at(\"pattern\").asString());\n+      assertEquals(\"uid\", ldapRegexPrincipalTransformer.at(\"replacement\").asString());*/\n+\n+      Json ldapIdentityMapping = ldapRealm.at(\"identity-mapping\");\n+      assertEquals(\"uid\", ldapIdentityMapping.at(\"rdn-identifier\").asString());\n+      assertEquals(\"ou=People,dc=infinispan,dc=org\", ldapIdentityMapping.at(\"search-base-dn\").asString());\n+      Json attributeMapping = ldapIdentityMapping.at(\"attribute-mapping\");\n+      Json attributes = attributeMapping.at(\"attribute\");\n+      assertEquals(3, attributes.asList().size());\n+      Iterator<Json> elements = attributes.asJsonList().iterator();\n+      Json attribute1 = elements.next();\n+      assertEquals(\"cn\", attribute1.at(\"from\").asString());\n+      assertEquals(\"Roles\", attribute1.at(\"to\").asString());\n+      assertEquals(\"(&(objectClass=groupOfNames)(member={1}))\", attribute1.at(\"filter\").asString());\n+      assertEquals(\"ou=Roles,dc=infinispan,dc=org\", attribute1.at(\"filter-dn\").asString());\n+      Json attribute2 = elements.next();\n+      assertEquals(\"cn2\", attribute2.at(\"from\").asString());\n+      assertEquals(\"Roles2\", attribute2.at(\"to\").asString());\n+      assertEquals(\"(&(objectClass=GroupOfUniqueNames)(member={0}))\", attribute2.at(\"filter\").asString());\n+      assertEquals(\"ou=People,dc=infinispan,dc=org\", attribute2.at(\"filter-dn\").asString());\n+      Json attribute3 = elements.next();\n+      assertEquals(\"memberOf\", attribute3.at(\"reference\").asString());\n+      assertEquals(\"Roles3\", attribute3.at(\"to\").asString());\n+      Json userPasswordMapping = ldapIdentityMapping.at(\"user-password-mapper\");\n+      assertEquals(\"userPassword\", userPasswordMapping.at(\"from\").asString());\n+      assertFalse(userPasswordMapping.at(\"verifiable\").asBoolean());\n+      assertFalse(userPasswordMapping.at(\"writable\").asBoolean());\n+\n+      Json localRealm = defaultRealm.at(\"local-realm\");\n+      assertEquals(\"test-local\", localRealm.at(\"name\").asString());\n+\n+      Json propertiesRealm = defaultRealm.at(\"properties-realm\");\n+      assertEquals(\"Roles\", propertiesRealm.at(\"groups-attribute\").asString());\n+      Json userProperties = propertiesRealm.at(\"user-properties\");\n+      assertEquals(\"ServerConfigurationParserTest-user.properties\", userProperties.at(\"path\").asString());\n+      assertEquals(\"digest\", userProperties.at(\"digest-realm-name\").asString());\n+      assertEquals(serverConfigPath, userProperties.at(\"relative-to\").asString());\n+      assertTrue(userProperties.at(\"plain-text\").asBoolean());\n+      Json groupProperties = propertiesRealm.at(\"group-properties\");\n+      assertEquals(serverConfigPath, groupProperties.at(\"relative-to\").asString());\n+      assertEquals(\"ServerConfigurationParserTest-group.properties\", groupProperties.at(\"path\").asString());\n+\n+      Json tokenRealm = defaultRealm.at(\"token-realm\");\n+      assertEquals(\"token-test\", tokenRealm.at(\"name\").asString());\n+      assertEquals(\"username-claim\", tokenRealm.at(\"principal-claim\").asString());\n+      Json oauth = tokenRealm.at(\"oauth2-introspection\");\n+      assertEquals(\"ANY\", oauth.at(\"host-name-verification-policy\").asString());\n+      assertEquals(\"http://${org.infinispan.test.host.address}:14567/auth/realms/infinispan/protocol/openid-connect/token/introspect\", oauth.at(\"introspection-url\").asString());\n+      assertEquals(\"infinispan-server\", oauth.at(\"client-id\").asString());\n+      assertEquals(\"***\", oauth.at(\"client-secret\").asString());\n+\n+      Json trustStoreRealm = defaultRealm.at(\"truststore-realm\");\n+      assertEquals(\"truststore.p12\", trustStoreRealm.at(\"path\").asString());\n+      assertEquals(\"SunJSSE\", trustStoreRealm.at(\"provider\").asString());\n+      assertEquals(serverConfigPath, trustStoreRealm.at(\"relative-to\").asString());\n+      assertEquals(\"***\", trustStoreRealm.at(\"keystore-password\").asString());\n+\n+      Json endpoints = serverNode.at(\"endpoints\");\n+      assertEquals(\"default\", endpoints.at(\"socket-binding\").asString());\n+      assertEquals(\"default\", endpoints.at(\"security-realm\").asString());\n+\n+      Json hotrodConnector = endpoints.at(\"hotrod-connector\");\n+      Json restConnector = endpoints.at(\"rest-connector\");\n+      Json memcachedConnector = endpoints.at(\"memcached-connector\");\n+      assertHotRodConnector(hotrodConnector);\n+      assertRestConnector(restConnector);\n+      assertMemcachedConnector(memcachedConnector);\n+   }\n+\n+   ServerConfiguration parse() throws IOException {\n+      FileLookup fileLookup = FileLookupFactory.newInstance();\n+      URL url = fileLookup.lookupFileLocation(\"configuration/\" + getClass().getSimpleName() + \".xml\", ServerConfigurationParserTest.class.getClassLoader());\n+      Properties properties = new Properties();\n+      properties.setProperty(Server.INFINISPAN_SERVER_CONFIG_PATH, getConfigPath().toString());\n+      ParserRegistry registry = new ParserRegistry(this.getClass().getClassLoader(), false, properties);\n+      ConfigurationBuilderHolder holder = registry.parse(url);\n+      GlobalConfiguration global = holder.getGlobalConfigurationBuilder().build();\n+      return global.module(ServerConfiguration.class);\n+   }\n+\n+   private void assertHotRodConnector(Json hotrodConnector) {\n+      assertEquals(\"hotrod\", hotrodConnector.at(\"name\").asString());\n+      assertEquals(23, hotrodConnector.at(\"io-threads\").asInteger());\n+      assertFalse(hotrodConnector.at(\"tcp-nodelay\").asBoolean());\n+      assertEquals(20, hotrodConnector.at(\"worker-threads\").asInteger());\n+      assertFalse(hotrodConnector.at(\"tcp-keepalive\").asBoolean());\n+      assertEquals(10, hotrodConnector.at(\"send-buffer-size\").asInteger());\n+      assertEquals(20, hotrodConnector.at(\"receive-buffer-size\").asInteger());\n+      assertEquals(2, hotrodConnector.at(\"idle-timeout\").asInteger());\n+      assertEquals(\"hotrod\", hotrodConnector.at(\"socket-binding\").asString());\n+      assertEquals(\"external\", hotrodConnector.at(\"external-host\").asString());\n+      assertEquals(12345, hotrodConnector.at(\"external-port\").asInteger());\n+\n+      Json topologyCache = hotrodConnector.at(\"topology-state-transfer\");\n+      assertFalse(topologyCache.at(\"await-initial-retrieval\").asBoolean());\n+      assertFalse(topologyCache.at(\"lazy-retrieval\").asBoolean());\n+      assertEquals(12, topologyCache.at(\"lock-timeout\").asInteger());\n+      assertEquals(13, topologyCache.at(\"replication-timeout\").asInteger());\n+\n+      Json authentication = hotrodConnector.at(\"authentication\");\n+      assertEquals(\"default\", authentication.at(\"security-realm\").asString());\n+\n+      Json sasl = authentication.at(\"sasl\");\n+      assertEquals(\"localhost\", sasl.at(\"server-name\").asString());\n+\n+      Iterator<Json> mechanisms = sasl.at(\"mechanisms\").asJsonList().iterator();\n+      assertEquals(\"GSSAPI\", mechanisms.next().asString());\n+      assertEquals(\"DIGEST-MD5\", mechanisms.next().asString());\n+      assertEquals(\"PLAIN\", mechanisms.next().asString());\n+\n+      Iterator<Json> qop = sasl.at(\"qop\").asJsonList().iterator();\n+      assertEquals(\"auth\", qop.next().asString());\n+      assertEquals(\"auth-conf\", qop.next().asString());\n+\n+      Iterator<Json> strength = sasl.at(\"strength\").asJsonList().iterator();\n+      assertEquals(\"high\", strength.next().asString());\n+      assertEquals(\"medium\", strength.next().asString());\n+      assertEquals(\"low\", strength.next().asString());\n+\n+      Json policy = sasl.at(\"policy\");\n+      assertFalse(policy.at(\"forward-secrecy\").at(\"value\").asBoolean());\n+      assertTrue(policy.at(\"no-active\").at(\"value\").asBoolean());\n+      assertTrue(policy.at(\"no-anonymous\").at(\"value\").asBoolean());\n+      assertFalse(policy.at(\"no-dictionary\").at(\"value\").asBoolean());\n+      assertTrue(policy.at(\"no-plain-text\").at(\"value\").asBoolean());\n+      assertTrue(policy.at(\"pass-credentials\").at(\"value\").asBoolean());\n+\n+      Json extraProperties = sasl.at(\"property\");\n+      assertEquals(\"value1\", extraProperties.at(\"prop1\").asString());\n+      assertEquals(\"value2\", extraProperties.at(\"prop2\").asString());\n+      assertEquals(\"value3\", extraProperties.at(\"prop3\").asString());\n+\n+      Json encryption = hotrodConnector.at(\"encryption\");\n+      assertTrue(encryption.at(\"require-ssl-client-auth\").asBoolean());\n+      assertEquals(\"default\", encryption.at(\"security-realm\").asString());\n+\n+      Json sni = encryption.at(\"sni\");\n+      assertEquals(2, sni.asList().size());\n+      Iterator<Json> elements = sni.asJsonList().iterator();\n+      Json sni1 = elements.next();\n+      assertEquals(\"sni-host-1\", sni1.at(\"host-name\").asString());\n+      assertEquals(\"default\", sni1.at(\"security-realm\").asString());\n+      Json sni2 = elements.next();\n+      assertEquals(\"sni-host-2\", sni2.at(\"host-name\").asString());\n+      assertEquals(\"default\", sni2.at(\"security-realm\").asString());\n+   }\n+\n+   private void assertRestConnector(Json restConnector) {\n+      assertEquals(\"rest\", restConnector.at(\"socket-binding\").asString());\n+      assertEquals(11, restConnector.at(\"io-threads\").asInteger());\n+      assertEquals(3, restConnector.at(\"worker-threads\").asInteger());\n+      assertEquals(\"rest\", restConnector.at(\"name\").asString());\n+      assertEquals(\"rest\", restConnector.at(\"context-path\").asString());\n+      assertEquals(\"NEVER\", restConnector.at(\"extended-headers\").asString());\n+      assertEquals(3, restConnector.at(\"max-content-length\").asInteger());\n+      assertEquals(3, restConnector.at(\"compression-level\").asInteger());\n+\n+      Json authentication = restConnector.at(\"authentication\");\n+      assertEquals(\"default\", authentication.at(\"security-realm\").asString());\n+      Json mechanisms = authentication.at(\"mechanisms\");\n+      assertEquals(2, mechanisms.asList().size());\n+\n+      Iterator<Json> items = mechanisms.asJsonList().iterator();\n+      assertEquals(\"DIGEST\", items.next().asString());\n+      assertEquals(\"BASIC\", items.next().asString());\n+\n+      Json corsRules = restConnector.at(\"cors-rules\").at(\"cors-rule\");\n+      assertEquals(2, corsRules.asList().size());\n+      Iterator<Json> rules = corsRules.asJsonList().iterator();\n+      Json rule1 = rules.next();\n+      assertEquals(\"rule1\", rule1.at(\"name\").asString());\n+      assertTrue(rule1.at(\"allow-credentials\").asBoolean());\n+      assertEquals(1, rule1.at(\"max-age-seconds\").asInteger());\n+      assertStringArray(asList(\"origin1\", \"origin2\"), rule1.at(\"allowed-origins\"));\n+      assertStringArray(asList(\"GET\", \"POST\"), rule1.at(\"allowed-methods\"));\n+      assertStringArray(singletonList(\"Accept\"), rule1.at(\"allowed-headers\"));\n+      assertStringArray(asList(\"Accept\", \"Content-Type\"), rule1.at(\"expose-headers\"));\n+\n+      Json rule2 = rules.next();\n+      assertEquals(\"rule2\", rule2.at(\"name\").asString());\n+      assertStringArray(singletonList(\"*\"), rule2.at(\"allowed-origins\"));\n+      assertStringArray(asList(\"GET\", \"POST\"), rule2.at(\"allowed-methods\"));\n+      assertNull(rule2.at(\"allowed-headers\"));\n+      assertNull(rule2.at(\"expose-headers\"));\n+\n+      Json encryption = restConnector.at(\"encryption\");\n+      assertFalse(encryption.at(\"require-ssl-client-auth\").asBoolean());\n+      assertEquals(\"default\", encryption.at(\"security-realm\").asString());\n+\n+      Json sni = encryption.at(\"sni\");\n+      assertEquals(2, sni.asList().size());\n+      Iterator<Json> elements = sni.asJsonList().iterator();\n+      Json sni1 = elements.next();\n+      assertEquals(\"sni-host-3\", sni1.at(\"host-name\").asString());\n+      assertEquals(\"default\", sni1.at(\"security-realm\").asString());\n+      Json sni2 = elements.next();\n+      assertEquals(\"sni-host-4\", sni2.at(\"host-name\").asString());\n+      assertEquals(\"default\", sni2.at(\"security-realm\").asString());\n+   }\n+\n+   private void assertMemcachedConnector(Json memcachedConnector) {\n+      assertEquals(\"memcached\", memcachedConnector.at(\"name\").asString());\n+      assertEquals(\"memcached\", memcachedConnector.at(\"socket-binding\").asString());\n+      assertEquals(1, memcachedConnector.at(\"io-threads\").asInteger());\n+      assertEquals(160, memcachedConnector.at(\"worker-threads\").asInteger());\n+      assertEquals(1, memcachedConnector.at(\"idle-timeout\").asInteger());\n+      assertTrue(memcachedConnector.at(\"tcp-nodelay\").asBoolean());\n+      assertTrue(memcachedConnector.at(\"tcp-keepalive\").asBoolean());\n+      assertEquals(3, memcachedConnector.at(\"send-buffer-size\").asInteger());\n+      assertEquals(3, memcachedConnector.at(\"receive-buffer-size\").asInteger());\n+      assertEquals(\"string\", memcachedConnector.at(\"cache\").asString());\n+      assertEquals(\"application/json\", memcachedConnector.at(\"client-encoding\").asString());\n+   }\n+\n+   private void assertMemcachedConnector2(Json memcachedConnector) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e608605c5b52b07a4ff9b45a10766722e3473b78"}, "originalPosition": 427}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTY0NDUzOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyODozMlrOH5GZSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyODozMlrOH5GZSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzNTY1Nw==", "bodyText": "uncomment?", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529635657", "createdAt": "2020-11-24T15:28:32Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java", "diffHunk": "@@ -91,5 +123,381 @@ public void testParser() throws IOException {\n       assertEquals(socketBindings.get(\"default\").getAddress().getAddress().getHostAddress(), singlePortRouter.host());\n       assertEquals(socketBindings.get(\"default\").getPort(), singlePortRouter.port());\n       assertEquals(socketBindings.get(\"memcached\").getPort(), server.endpoints().endpoints().get(0).connectors().get(2).port());\n+\n+      assertEquals(\"strongPassword\", realmConfiguration.ldapConfiguration().attributes().attribute(\"credential\").get());\n+      assertEquals(\"secret\", new String((char[]) realmConfiguration.trustStoreConfiguration().attributes().attribute(\"keystorePassword\").get())); //stores it as char[]\n+      assertEquals(\"1fdca4ec-c416-47e0-867a-3d471af7050f\", realmConfiguration.tokenConfiguration().oauth2Configuration().attributes().attribute(\"clientSecret\").get());\n+      assertEquals(\"password\", new String((char[]) realmConfiguration.serverIdentitiesConfiguration().sslConfigurations().get(0).keyStore().attributes().attribute(\"keystorePassword\").get()));\n+   }\n+\n+   @Test\n+   public void testJsonSerialization() throws IOException {\n+      ServerConfiguration serverConfiguration = parse();\n+\n+      String serverConfigPath = getConfigPath().toString();\n+\n+      JsonWriter writer = new JsonWriter();\n+      String json = writer.toJSON(serverConfiguration);\n+\n+      Json serverNode = Json.read(json).at(\"server\");\n+\n+      Json interfaces = serverNode.at(\"interfaces\").at(\"interface\");\n+      assertEquals(2, interfaces.asList().size());\n+\n+      Json interface1 = interfaces.at(0);\n+      Json interface2 = interfaces.at(1);\n+      Json address1 = interface1.at(\"loopback\");\n+      Json address2 = interface2.at(\"loopback\");\n+      assertEquals(\"default\", interface1.at(\"name\").asString());\n+      assertEquals(0, address1.asMap().size());\n+      assertEquals(\"another\", interface2.at(\"name\").asString());\n+      assertEquals(0, address2.asMap().size());\n+\n+      Json socketBindings = serverNode.at(\"socket-bindings\");\n+      assertEquals(\"default\", socketBindings.at(\"default-interface\").asString());\n+      assertEquals(0, socketBindings.at(\"port-offset\").asInteger());\n+\n+      Json socketBinding = socketBindings.at(\"socket-binding\");\n+      assertEquals(5, socketBinding.asList().size());\n+\n+      Iterator<Json> bindings = socketBinding.asJsonList().iterator();\n+      Json binding1 = bindings.next();\n+      assertEquals(\"default\", binding1.at(\"name\").asString());\n+      assertEquals(11222, binding1.at(\"port\").asInteger());\n+      Json binding2 = bindings.next();\n+      assertEquals(\"hotrod\", binding2.at(\"name\").asString());\n+      assertEquals(11223, binding2.at(\"port\").asInteger());\n+      Json binding3 = bindings.next();\n+      assertEquals(\"memcached\", binding3.at(\"name\").asString());\n+      assertEquals(11221, binding3.at(\"port\").asInteger());\n+      Json binding4 = bindings.next();\n+      assertEquals(\"memcached-2\", binding4.at(\"name\").asString());\n+      assertEquals(12221, binding4.at(\"port\").asInteger());\n+      Json binding5 = bindings.next();\n+      assertEquals(\"rest\", binding5.at(\"name\").asString());\n+      assertEquals(8080, binding5.at(\"port\").asInteger());\n+\n+      Json credentialStores = serverNode.at(\"security\").at(\"credential-stores\");\n+      assertEquals(1, credentialStores.asMap().size());\n+      Json credentialStore = credentialStores.at(\"credential-store\");\n+      assertEquals(\"credentials.pfx\", credentialStore.at(\"path\").asString());\n+\n+      Json securityRealms = serverNode.at(\"security\").at(\"security-realms\");\n+      assertEquals(1, securityRealms.asMap().size());\n+\n+      Json securityRealm = securityRealms.at(\"security-realm\");\n+      assertEquals(2, securityRealm.asList().size());\n+      Json defaultRealm = securityRealm.at(0);\n+      assertEquals(\"default\", defaultRealm.at(\"name\").asString());\n+\n+      Json ssl = defaultRealm.at(\"server-identities\").at(\"ssl\");\n+      Json keyStore = ssl.at(\"keystore\");\n+      assertEquals(\"ServerConfigurationParserTest-keystore.pfx\", keyStore.at(\"path\").asString());\n+      assertEquals(serverConfigPath, keyStore.at(\"relative-to\").asString());\n+      assertEquals(\"***\", keyStore.at(\"keystore-password\").asString());\n+      assertEquals(\"server\", keyStore.at(\"alias\").asString());\n+      assertEquals(\"***\", keyStore.at(\"key-password\").asString());\n+      assertEquals(\"localhost\", keyStore.at(\"generate-self-signed-certificate-host\").asString());\n+      Json engine = ssl.at(\"engine\");\n+      Json protocols = engine.at(\"enabled-protocols\");\n+      Iterator<Json> protocolItems = protocols.asJsonList().iterator();\n+      assertEquals(\"TLSV1.1\", protocolItems.next().asString());\n+      assertEquals(\"TLSV1.2\", protocolItems.next().asString());\n+      assertEquals(\"TLSV1.3\", protocolItems.next().asString());\n+      Json cipherSuites = engine.at(\"enabled-ciphersuites\");\n+      assertEquals(\"DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256\", cipherSuites.asString());\n+\n+      Json kerberos = defaultRealm.at(\"server-identities\").at(\"kerberos\");\n+      assertEquals(\"keytab\", kerberos.at(\"keytab-path\").asString());\n+      assertEquals(serverConfigPath, kerberos.at(\"relative-to\").asString());\n+\n+      Json filesystemRealm = defaultRealm.at(\"filesystem-realm\");\n+      assertEquals(\"security\", filesystemRealm.at(\"path\").asString());\n+      assertEquals(3, filesystemRealm.at(\"levels\").asInteger());\n+      assertFalse(filesystemRealm.at(\"encoded\").asBoolean());\n+      assertEquals(serverConfigPath, filesystemRealm.at(\"relative-to\").asString());\n+\n+      Json ldapRealm = defaultRealm.at(\"ldap-realm\");\n+      assertEquals(\"ldap\", ldapRealm.at(\"name\").asString());\n+      assertEquals(\"ldap://${org.infinispan.test.host.address}:10389\", ldapRealm.at(\"url\").asString());\n+      assertEquals(\"uid=admin,ou=People,dc=infinispan,dc=org\", ldapRealm.at(\"principal\").asString());\n+      assertEquals(\"***\", ldapRealm.at(\"credential\").asString());\n+\n+      /*Json ldapNameRewriter = ldapRealm.at(\"name-rewriter\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e608605c5b52b07a4ff9b45a10766722e3473b78"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTcxOTk4OnYy", "diffSide": "RIGHT", "path": "cli/src/main/resources/help/credentials.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozNjoyMFrOH5tKEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo1NToyNVrOH5t5BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3MDczNg==", "bodyText": "needs an extra space otherwise you get this weird formatting when doing help credentials:\n  EXAMPLES\n    -------- `credentials add dbpassword -c changeme -p \"secret1234!\"` + Creates a new default credential keystore, if does not already exist, and adds an alias of \"dbpassword\" for a password of \"changeme\". This command also sets \"secret1234!\" as the password for\n    the credential keystore.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r530270736", "createdAt": "2020-11-25T10:36:20Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,76 @@\n+ CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages keystores that contain ${infinispan.brand.name} Server credentials\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials add* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+List, create, and remove credentials inside a keystore.\n+By default, commands manage the `credentials.pfx` keystore in the server configuration directory.\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*::\n+Lists credential aliases stored in the keystore.\n+\n+Add a credential\n+\n+*credentials add* 'alias'::\n+Adds an alias and corresponding credential to the keystore.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Deletes an alias and corresponding credential from the keystore.\n+\n+\n+OPTIONS\n+-------\n+*-h, --help*::\n+Prints command help.\n+\n+*-s, --server-root*='path-to-server-root'::\n+Specifies the path to the server root directory. Defaults to `server`.\n+\n+*--path*='credentials.pfx'::\n+Specifies the path to the credential keystore. Defaults to the server configuration directory, `server/conf`.\n+\n+*-p, --password*='password'::\n+Specifies a password for the credential keystore.\n+\n+*-t, --type*='PKCS12'::\n+Specifies the type of keystore that contains credentials. Supported types are `PKCS12` or `JCEKS`. Defaults to `PKCS12`.\n+\n+\n+CREDENTIALS ADD OPTIONS\n+-----------------------\n+*-c, --credential*='credential'::\n+Specifies the credential to store.\n+\n+EXAMPLES", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe998552159bf7c10e95418b8682d2e5213c331"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3NjU2MQ==", "bodyText": "actually, it needs something else (edit. ignore this, the extra new line is enough)", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r530276561", "createdAt": "2020-11-25T10:45:37Z", "author": {"login": "pruivo"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,76 @@\n+ CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages keystores that contain ${infinispan.brand.name} Server credentials\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials add* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+List, create, and remove credentials inside a keystore.\n+By default, commands manage the `credentials.pfx` keystore in the server configuration directory.\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*::\n+Lists credential aliases stored in the keystore.\n+\n+Add a credential\n+\n+*credentials add* 'alias'::\n+Adds an alias and corresponding credential to the keystore.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Deletes an alias and corresponding credential from the keystore.\n+\n+\n+OPTIONS\n+-------\n+*-h, --help*::\n+Prints command help.\n+\n+*-s, --server-root*='path-to-server-root'::\n+Specifies the path to the server root directory. Defaults to `server`.\n+\n+*--path*='credentials.pfx'::\n+Specifies the path to the credential keystore. Defaults to the server configuration directory, `server/conf`.\n+\n+*-p, --password*='password'::\n+Specifies a password for the credential keystore.\n+\n+*-t, --type*='PKCS12'::\n+Specifies the type of keystore that contains credentials. Supported types are `PKCS12` or `JCEKS`. Defaults to `PKCS12`.\n+\n+\n+CREDENTIALS ADD OPTIONS\n+-----------------------\n+*-c, --credential*='credential'::\n+Specifies the credential to store.\n+\n+EXAMPLES", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3MDczNg=="}, "originalCommit": {"oid": "fbe998552159bf7c10e95418b8682d2e5213c331"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4Mjc1Nw==", "bodyText": "@pruivo That's my bad. You're right. Need two spaces between the headings or you get formatting issues. I've fixed it.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r530282757", "createdAt": "2020-11-25T10:55:25Z", "author": {"login": "oraNod"}, "path": "cli/src/main/resources/help/credentials.adoc", "diffHunk": "@@ -0,0 +1,76 @@\n+ CREDENTIALS(1)\n+==============\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+credentials - manages keystores that contain ${infinispan.brand.name} Server credentials\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*\n+\n+*credentials add* 'alias'\n+\n+*credentials remove* 'alias'\n+\n+\n+DESCRIPTION\n+-----------\n+List, create, and remove credentials inside a keystore.\n+By default, commands manage the `credentials.pfx` keystore in the server configuration directory.\n+\n+\n+SYNOPSIS\n+--------\n+*credentials ls*::\n+Lists credential aliases stored in the keystore.\n+\n+Add a credential\n+\n+*credentials add* 'alias'::\n+Adds an alias and corresponding credential to the keystore.\n+\n+Remove a credential\n+\n+*credentials remove* 'alias'::\n+Deletes an alias and corresponding credential from the keystore.\n+\n+\n+OPTIONS\n+-------\n+*-h, --help*::\n+Prints command help.\n+\n+*-s, --server-root*='path-to-server-root'::\n+Specifies the path to the server root directory. Defaults to `server`.\n+\n+*--path*='credentials.pfx'::\n+Specifies the path to the credential keystore. Defaults to the server configuration directory, `server/conf`.\n+\n+*-p, --password*='password'::\n+Specifies a password for the credential keystore.\n+\n+*-t, --type*='PKCS12'::\n+Specifies the type of keystore that contains credentials. Supported types are `PKCS12` or `JCEKS`. Defaults to `PKCS12`.\n+\n+\n+CREDENTIALS ADD OPTIONS\n+-----------------------\n+*-c, --credential*='credential'::\n+Specifies the credential to store.\n+\n+EXAMPLES", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3MDczNg=="}, "originalCommit": {"oid": "fbe998552159bf7c10e95418b8682d2e5213c331"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTcyODExOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozODoyMlrOH5tO2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozODoyMlrOH5tO2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3MTk2Mg==", "bodyText": "can be removed, unused.", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r530271962", "createdAt": "2020-11-25T10:38:22Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.infinispan.server.configuration.security;\n+\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.CREDENTIAL;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.PATH;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.RELATIVE_TO;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.TYPE;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.CacheConfigurationException;\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.configuration.parsing.ParseUtils;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.Credential;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfigurationBuilder implements Builder<CredentialStoreConfiguration> {\n+   private final AttributeSet attributes;\n+   private final CredentialStoresConfigurationBuilder credentialStoresConfigurationBuilder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe998552159bf7c10e95418b8682d2e5213c331"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTczMDQ0OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozODo1OVrOH5tQVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozODo1OVrOH5tQVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3MjM0Mg==", "bodyText": "can be final\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORE.toString());\n          \n          \n            \n               private static final ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORE.toString());", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r530272342", "createdAt": "2020-11-25T10:38:59Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.infinispan.server.configuration.security;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.infinispan.server.configuration.PasswordSerializer;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfiguration implements ConfigurationInfo {\n+   static final AttributeDefinition<String> NAME = AttributeDefinition.builder(\"name\", null, String.class).build();\n+   static final AttributeDefinition<String> PATH = AttributeDefinition.builder(\"path\", null, String.class).build();\n+   static final AttributeDefinition<String> RELATIVE_TO = AttributeDefinition.builder(\"relativeTo\", null, String.class).build();\n+   static final AttributeDefinition<String> TYPE = AttributeDefinition.builder(\"type\", \"pkcs12\", String.class).build();\n+   static final AttributeDefinition<String> CREDENTIAL = AttributeDefinition.builder(\"credential\", null, String.class).serializer(PasswordSerializer.INSTANCE).build();\n+\n+   private final AttributeSet attributes;\n+\n+   static AttributeSet attributeDefinitionSet() {\n+      return new AttributeSet(CredentialStoreConfiguration.class, NAME, PATH, RELATIVE_TO, TYPE, CREDENTIAL);\n+   }\n+\n+   private static ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORE.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe998552159bf7c10e95418b8682d2e5213c331"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3778, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}