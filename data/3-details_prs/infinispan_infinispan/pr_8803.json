{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3ODAwNDI0", "number": 8803, "title": "ISPN-12438 off heap details", "bodyText": "https://issues.redhat.com/browse/ISPN-12438", "createdAt": "2020-10-21T19:03:10Z", "url": "https://github.com/infinispan/infinispan/pull/8803", "merged": true, "mergeCommit": {"oid": "4c358f656eaac087306c92d3bc67a0185267413f"}, "closed": true, "closedAt": "2020-11-06T14:22:49Z", "author": {"login": "oraNod"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVIIb7AFqTUxNTA5MzI1Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXkgqSgBqjM5NDA2Mjg1NzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDkzMjU2", "url": "https://github.com/infinispan/infinispan/pull/8803#pullrequestreview-515093256", "createdAt": "2020-10-22T20:27:45Z", "commit": {"oid": "22ddaf90bfb424f0d37f95ed39e78ff60e0e6dd6"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoyNzo0NVrOHmylrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozNzo1OFrOHmy6IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNjc4MA==", "bodyText": "Gives sounds a bit weird. Maybe \"requires less overhead per entry\" ?", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r510436780", "createdAt": "2020-10-22T20:27:45Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc", "diffHunk": "@@ -0,0 +1,66 @@\n+[id='off_heap_memory']\n+= Storing Data in Off Heap Memory\n+{brandname} can store cache entries in JVM heap memory or off heap.\n+Off heap storage lets you use unmanaged, native memory space for the JVM.\n+\n+Off heap storage gives you less overhead per entry than in JVM heap memory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22ddaf90bfb424f0d37f95ed39e78ff60e0e6dd6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNzAwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Off heap storage lets you use unmanaged, native memory space for the JVM.\n          \n          \n            \n            Off heap storage lets you use unmanaged, native memory space for the JVM.\n          \n      \n    \n    \n  \n\nOff heap storage lets your objects occupy native memory outside of the managed JVM memory.", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r510437009", "createdAt": "2020-10-22T20:28:15Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc", "diffHunk": "@@ -0,0 +1,66 @@\n+[id='off_heap_memory']\n+= Storing Data in Off Heap Memory\n+{brandname} can store cache entries in JVM heap memory or off heap.\n+Off heap storage lets you use unmanaged, native memory space for the JVM.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22ddaf90bfb424f0d37f95ed39e78ff60e0e6dd6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNzYzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Likewise you cannot change the JVM heap space at run-time but, when using off heap storage, {brandname} dynamically allocates memory.\n          \n          \n            \n            Likewise you cannot change the JVM heap space at run-time, but when using off heap storage, {brandname} dynamically allocates memory for each entry.", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r510437632", "createdAt": "2020-10-22T20:29:24Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc", "diffHunk": "@@ -0,0 +1,66 @@\n+[id='off_heap_memory']\n+= Storing Data in Off Heap Memory\n+{brandname} can store cache entries in JVM heap memory or off heap.\n+Off heap storage lets you use unmanaged, native memory space for the JVM.\n+\n+Off heap storage gives you less overhead per entry than in JVM heap memory.\n+In other words, off heap storage uses less memory than heap storage for the same amount of data.\n+Another benefit of off heap storage is that it is not affected by Garbage Collector runs, which can improve overall JVM performance.\n+Likewise you cannot change the JVM heap space at run-time but, when using off heap storage, {brandname} dynamically allocates memory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22ddaf90bfb424f0d37f95ed39e78ff60e0e6dd6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzODE4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            However there are some trade-offs such as that heap dumps become worthless.\n          \n          \n            \n            However there are some trade-offs such as JVM heap dumps will now show entries stored in an off heap cache.", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r510438186", "createdAt": "2020-10-22T20:30:22Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc", "diffHunk": "@@ -0,0 +1,66 @@\n+[id='off_heap_memory']\n+= Storing Data in Off Heap Memory\n+{brandname} can store cache entries in JVM heap memory or off heap.\n+Off heap storage lets you use unmanaged, native memory space for the JVM.\n+\n+Off heap storage gives you less overhead per entry than in JVM heap memory.\n+In other words, off heap storage uses less memory than heap storage for the same amount of data.\n+Another benefit of off heap storage is that it is not affected by Garbage Collector runs, which can improve overall JVM performance.\n+Likewise you cannot change the JVM heap space at run-time but, when using off heap storage, {brandname} dynamically allocates memory.\n+However there are some trade-offs such as that heap dumps become worthless.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22ddaf90bfb424f0d37f95ed39e78ff60e0e6dd6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzODk1Mg==", "bodyText": "We may want to rename this something different as the Code native region is not where objects allocated via Infinispan.", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r510438952", "createdAt": "2020-10-22T20:31:54Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc", "diffHunk": "@@ -0,0 +1,66 @@\n+[id='off_heap_memory']\n+= Storing Data in Off Heap Memory\n+{brandname} can store cache entries in JVM heap memory or off heap.\n+Off heap storage lets you use unmanaged, native memory space for the JVM.\n+\n+Off heap storage gives you less overhead per entry than in JVM heap memory.\n+In other words, off heap storage uses less memory than heap storage for the same amount of data.\n+Another benefit of off heap storage is that it is not affected by Garbage Collector runs, which can improve overall JVM performance.\n+Likewise you cannot change the JVM heap space at run-time but, when using off heap storage, {brandname} dynamically allocates memory.\n+However there are some trade-offs such as that heap dumps become worthless.\n+\n+Consider the following illustration of memory space for a JVM process where\n+{brandname} is running:\n+\n+image::offheap.svg[]\n+\n+JVM heap memory, as shown in the preceding diagram, holds Java objects and other application data.\n+The heap is divided into young and old generations that help keep referenced objects in memory.\n+The Garbage Collector (GC) process reclaims space from unreachable objects, running more frequently on the young generation memory pool.\n+\n+When {brandname} stores cache entries in JVM heap memory, GC runs can take longer to complete as you start adding data to your caches.\n+Because GC is a fairly intensive process, longer and more frequent runs can degrade application performance.\n+\n+Using off heap memory configures {brandname} to store data in native memory, or available system memory that is outside JVM memory management.\n+Depending on your JVM implementation, native memory is also allocated for thread stacks, Just-in-Time (JIT) compiler code, and so on.\n+As an example, the preceding diagram shows two memory pools that are allocated from native memory:\n+\n+* Metaspace holds class metadata.\n+* Code Cache holds generated native code and internal structures.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22ddaf90bfb424f0d37f95ed39e78ff60e0e6dd6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTEwMw==", "bodyText": "Technically they are allocated in the \"Unknown\" region as shown by native memory tracking.", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r510439103", "createdAt": "2020-10-22T20:32:13Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc", "diffHunk": "@@ -0,0 +1,66 @@\n+[id='off_heap_memory']\n+= Storing Data in Off Heap Memory\n+{brandname} can store cache entries in JVM heap memory or off heap.\n+Off heap storage lets you use unmanaged, native memory space for the JVM.\n+\n+Off heap storage gives you less overhead per entry than in JVM heap memory.\n+In other words, off heap storage uses less memory than heap storage for the same amount of data.\n+Another benefit of off heap storage is that it is not affected by Garbage Collector runs, which can improve overall JVM performance.\n+Likewise you cannot change the JVM heap space at run-time but, when using off heap storage, {brandname} dynamically allocates memory.\n+However there are some trade-offs such as that heap dumps become worthless.\n+\n+Consider the following illustration of memory space for a JVM process where\n+{brandname} is running:\n+\n+image::offheap.svg[]\n+\n+JVM heap memory, as shown in the preceding diagram, holds Java objects and other application data.\n+The heap is divided into young and old generations that help keep referenced objects in memory.\n+The Garbage Collector (GC) process reclaims space from unreachable objects, running more frequently on the young generation memory pool.\n+\n+When {brandname} stores cache entries in JVM heap memory, GC runs can take longer to complete as you start adding data to your caches.\n+Because GC is a fairly intensive process, longer and more frequent runs can degrade application performance.\n+\n+Using off heap memory configures {brandname} to store data in native memory, or available system memory that is outside JVM memory management.\n+Depending on your JVM implementation, native memory is also allocated for thread stacks, Just-in-Time (JIT) compiler code, and so on.\n+As an example, the preceding diagram shows two memory pools that are allocated from native memory:\n+\n+* Metaspace holds class metadata.\n+* Code Cache holds generated native code and internal structures.\n+\n+Taking the diagram as an example, when you use off heap storage {brandname} adds data to the Code Cache memory pool.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22ddaf90bfb424f0d37f95ed39e78ff60e0e6dd6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTM3OQ==", "bodyText": "maybe links instead of chains? It is really a linked list.", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r510439379", "createdAt": "2020-10-22T20:32:45Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc", "diffHunk": "@@ -0,0 +1,66 @@\n+[id='off_heap_memory']\n+= Storing Data in Off Heap Memory\n+{brandname} can store cache entries in JVM heap memory or off heap.\n+Off heap storage lets you use unmanaged, native memory space for the JVM.\n+\n+Off heap storage gives you less overhead per entry than in JVM heap memory.\n+In other words, off heap storage uses less memory than heap storage for the same amount of data.\n+Another benefit of off heap storage is that it is not affected by Garbage Collector runs, which can improve overall JVM performance.\n+Likewise you cannot change the JVM heap space at run-time but, when using off heap storage, {brandname} dynamically allocates memory.\n+However there are some trade-offs such as that heap dumps become worthless.\n+\n+Consider the following illustration of memory space for a JVM process where\n+{brandname} is running:\n+\n+image::offheap.svg[]\n+\n+JVM heap memory, as shown in the preceding diagram, holds Java objects and other application data.\n+The heap is divided into young and old generations that help keep referenced objects in memory.\n+The Garbage Collector (GC) process reclaims space from unreachable objects, running more frequently on the young generation memory pool.\n+\n+When {brandname} stores cache entries in JVM heap memory, GC runs can take longer to complete as you start adding data to your caches.\n+Because GC is a fairly intensive process, longer and more frequent runs can degrade application performance.\n+\n+Using off heap memory configures {brandname} to store data in native memory, or available system memory that is outside JVM memory management.\n+Depending on your JVM implementation, native memory is also allocated for thread stacks, Just-in-Time (JIT) compiler code, and so on.\n+As an example, the preceding diagram shows two memory pools that are allocated from native memory:\n+\n+* Metaspace holds class metadata.\n+* Code Cache holds generated native code and internal structures.\n+\n+Taking the diagram as an example, when you use off heap storage {brandname} adds data to the Code Cache memory pool.\n+\n+When you add an entry to a cache that uses off heap storage, {brandname} hashes the serialized `byte[]` for the key into buckets that are similar to a standard Java `HashMap`.\n+Buckets include address pointers that {brandname} use to locate entries in off heap memory.\n+\n+The following diagram shows a set of keys with names, the hash for each key and bucket array of address pointers, as well as the entries with the name and phone number:\n+\n+image::offheap_hashmap.svg[]\n+\n+In cases where key hashes collide, {brandname} chains entries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22ddaf90bfb424f0d37f95ed39e78ff60e0e6dd6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTg1Mw==", "bodyText": "Technically we use StampedLock now, but you can think of it as a ReadWriteLock.", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r510439853", "createdAt": "2020-10-22T20:33:40Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc", "diffHunk": "@@ -0,0 +1,66 @@\n+[id='off_heap_memory']\n+= Storing Data in Off Heap Memory\n+{brandname} can store cache entries in JVM heap memory or off heap.\n+Off heap storage lets you use unmanaged, native memory space for the JVM.\n+\n+Off heap storage gives you less overhead per entry than in JVM heap memory.\n+In other words, off heap storage uses less memory than heap storage for the same amount of data.\n+Another benefit of off heap storage is that it is not affected by Garbage Collector runs, which can improve overall JVM performance.\n+Likewise you cannot change the JVM heap space at run-time but, when using off heap storage, {brandname} dynamically allocates memory.\n+However there are some trade-offs such as that heap dumps become worthless.\n+\n+Consider the following illustration of memory space for a JVM process where\n+{brandname} is running:\n+\n+image::offheap.svg[]\n+\n+JVM heap memory, as shown in the preceding diagram, holds Java objects and other application data.\n+The heap is divided into young and old generations that help keep referenced objects in memory.\n+The Garbage Collector (GC) process reclaims space from unreachable objects, running more frequently on the young generation memory pool.\n+\n+When {brandname} stores cache entries in JVM heap memory, GC runs can take longer to complete as you start adding data to your caches.\n+Because GC is a fairly intensive process, longer and more frequent runs can degrade application performance.\n+\n+Using off heap memory configures {brandname} to store data in native memory, or available system memory that is outside JVM memory management.\n+Depending on your JVM implementation, native memory is also allocated for thread stacks, Just-in-Time (JIT) compiler code, and so on.\n+As an example, the preceding diagram shows two memory pools that are allocated from native memory:\n+\n+* Metaspace holds class metadata.\n+* Code Cache holds generated native code and internal structures.\n+\n+Taking the diagram as an example, when you use off heap storage {brandname} adds data to the Code Cache memory pool.\n+\n+When you add an entry to a cache that uses off heap storage, {brandname} hashes the serialized `byte[]` for the key into buckets that are similar to a standard Java `HashMap`.\n+Buckets include address pointers that {brandname} use to locate entries in off heap memory.\n+\n+The following diagram shows a set of keys with names, the hash for each key and bucket array of address pointers, as well as the entries with the name and phone number:\n+\n+image::offheap_hashmap.svg[]\n+\n+In cases where key hashes collide, {brandname} chains entries.\n+As in the preceding diagram, if the William Clay and Luke Cage keys have the same hash, then the first entry added to the cache is the first element in the bucket.\n+\n+.Memory overhead\n+\n+Memory overhead is the additional memory that {brandname} uses to store entries.\n+{brandname} uses 25 bytes for each entry entry in the cache.\n+\n+Using eviction to create a bounded off heap data container increases memory overhead by 36 bytes.\n+This happens because {brandname} creates an additional linked list to track entries in the cache and perform eviction.\n+\n+However, compared with storing entries in the JVM heap, a total memory overhead of 61 bytes per entry is significantly lower.\n+\n+.Data consistency\n+\n+{brandname} uses an array of `ReadWriteLock` instances to protect off heap address spaces.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22ddaf90bfb424f0d37f95ed39e78ff60e0e6dd6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDQyMQ==", "bodyText": "The distribution of read locks is not so they wouldn't block each other as a the read portion of a read write lock will not block another read. The distribution is to prevent reads from being blocked by a write lock.", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r510440421", "createdAt": "2020-10-22T20:34:44Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc", "diffHunk": "@@ -0,0 +1,66 @@\n+[id='off_heap_memory']\n+= Storing Data in Off Heap Memory\n+{brandname} can store cache entries in JVM heap memory or off heap.\n+Off heap storage lets you use unmanaged, native memory space for the JVM.\n+\n+Off heap storage gives you less overhead per entry than in JVM heap memory.\n+In other words, off heap storage uses less memory than heap storage for the same amount of data.\n+Another benefit of off heap storage is that it is not affected by Garbage Collector runs, which can improve overall JVM performance.\n+Likewise you cannot change the JVM heap space at run-time but, when using off heap storage, {brandname} dynamically allocates memory.\n+However there are some trade-offs such as that heap dumps become worthless.\n+\n+Consider the following illustration of memory space for a JVM process where\n+{brandname} is running:\n+\n+image::offheap.svg[]\n+\n+JVM heap memory, as shown in the preceding diagram, holds Java objects and other application data.\n+The heap is divided into young and old generations that help keep referenced objects in memory.\n+The Garbage Collector (GC) process reclaims space from unreachable objects, running more frequently on the young generation memory pool.\n+\n+When {brandname} stores cache entries in JVM heap memory, GC runs can take longer to complete as you start adding data to your caches.\n+Because GC is a fairly intensive process, longer and more frequent runs can degrade application performance.\n+\n+Using off heap memory configures {brandname} to store data in native memory, or available system memory that is outside JVM memory management.\n+Depending on your JVM implementation, native memory is also allocated for thread stacks, Just-in-Time (JIT) compiler code, and so on.\n+As an example, the preceding diagram shows two memory pools that are allocated from native memory:\n+\n+* Metaspace holds class metadata.\n+* Code Cache holds generated native code and internal structures.\n+\n+Taking the diagram as an example, when you use off heap storage {brandname} adds data to the Code Cache memory pool.\n+\n+When you add an entry to a cache that uses off heap storage, {brandname} hashes the serialized `byte[]` for the key into buckets that are similar to a standard Java `HashMap`.\n+Buckets include address pointers that {brandname} use to locate entries in off heap memory.\n+\n+The following diagram shows a set of keys with names, the hash for each key and bucket array of address pointers, as well as the entries with the name and phone number:\n+\n+image::offheap_hashmap.svg[]\n+\n+In cases where key hashes collide, {brandname} chains entries.\n+As in the preceding diagram, if the William Clay and Luke Cage keys have the same hash, then the first entry added to the cache is the first element in the bucket.\n+\n+.Memory overhead\n+\n+Memory overhead is the additional memory that {brandname} uses to store entries.\n+{brandname} uses 25 bytes for each entry entry in the cache.\n+\n+Using eviction to create a bounded off heap data container increases memory overhead by 36 bytes.\n+This happens because {brandname} creates an additional linked list to track entries in the cache and perform eviction.\n+\n+However, compared with storing entries in the JVM heap, a total memory overhead of 61 bytes per entry is significantly lower.\n+\n+.Data consistency\n+\n+{brandname} uses an array of `ReadWriteLock` instances to protect off heap address spaces.\n+The number of `ReadWriteLock` instances is twice the number of cores and then rounded to the nearest power of two.\n+This ensures that there is an even distribution of `ReadWriteLock` instances to prevent read operations from blocking each other.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22ddaf90bfb424f0d37f95ed39e78ff60e0e6dd6"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MjAxNw==", "bodyText": "I wonder if this should be more like `While entries are stored in native memory, operations require using a JVM heap representation of those objects. For instance, a get operation will read the object into native memory before returning. Likewise, state transfer will hold a subset of objects in memory while transferring them another node.\"\nSomething like that maybe?", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r510442017", "createdAt": "2020-10-22T20:37:58Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc", "diffHunk": "@@ -0,0 +1,66 @@\n+[id='off_heap_memory']\n+= Storing Data in Off Heap Memory\n+{brandname} can store cache entries in JVM heap memory or off heap.\n+Off heap storage lets you use unmanaged, native memory space for the JVM.\n+\n+Off heap storage gives you less overhead per entry than in JVM heap memory.\n+In other words, off heap storage uses less memory than heap storage for the same amount of data.\n+Another benefit of off heap storage is that it is not affected by Garbage Collector runs, which can improve overall JVM performance.\n+Likewise you cannot change the JVM heap space at run-time but, when using off heap storage, {brandname} dynamically allocates memory.\n+However there are some trade-offs such as that heap dumps become worthless.\n+\n+Consider the following illustration of memory space for a JVM process where\n+{brandname} is running:\n+\n+image::offheap.svg[]\n+\n+JVM heap memory, as shown in the preceding diagram, holds Java objects and other application data.\n+The heap is divided into young and old generations that help keep referenced objects in memory.\n+The Garbage Collector (GC) process reclaims space from unreachable objects, running more frequently on the young generation memory pool.\n+\n+When {brandname} stores cache entries in JVM heap memory, GC runs can take longer to complete as you start adding data to your caches.\n+Because GC is a fairly intensive process, longer and more frequent runs can degrade application performance.\n+\n+Using off heap memory configures {brandname} to store data in native memory, or available system memory that is outside JVM memory management.\n+Depending on your JVM implementation, native memory is also allocated for thread stacks, Just-in-Time (JIT) compiler code, and so on.\n+As an example, the preceding diagram shows two memory pools that are allocated from native memory:\n+\n+* Metaspace holds class metadata.\n+* Code Cache holds generated native code and internal structures.\n+\n+Taking the diagram as an example, when you use off heap storage {brandname} adds data to the Code Cache memory pool.\n+\n+When you add an entry to a cache that uses off heap storage, {brandname} hashes the serialized `byte[]` for the key into buckets that are similar to a standard Java `HashMap`.\n+Buckets include address pointers that {brandname} use to locate entries in off heap memory.\n+\n+The following diagram shows a set of keys with names, the hash for each key and bucket array of address pointers, as well as the entries with the name and phone number:\n+\n+image::offheap_hashmap.svg[]\n+\n+In cases where key hashes collide, {brandname} chains entries.\n+As in the preceding diagram, if the William Clay and Luke Cage keys have the same hash, then the first entry added to the cache is the first element in the bucket.\n+\n+.Memory overhead\n+\n+Memory overhead is the additional memory that {brandname} uses to store entries.\n+{brandname} uses 25 bytes for each entry entry in the cache.\n+\n+Using eviction to create a bounded off heap data container increases memory overhead by 36 bytes.\n+This happens because {brandname} creates an additional linked list to track entries in the cache and perform eviction.\n+\n+However, compared with storing entries in the JVM heap, a total memory overhead of 61 bytes per entry is significantly lower.\n+\n+.Data consistency\n+\n+{brandname} uses an array of `ReadWriteLock` instances to protect off heap address spaces.\n+The number of `ReadWriteLock` instances is twice the number of cores and then rounded to the nearest power of two.\n+This ensures that there is an even distribution of `ReadWriteLock` instances to prevent read operations from blocking each other.\n+However write operations wait to complete, which blocks read operations.\n+\n+[NOTE]\n+====\n+{brandname} requires JVM heap memory for normal operations. For instance, state", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22ddaf90bfb424f0d37f95ed39e78ff60e0e6dd6"}, "originalPosition": 62}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04479c64c609d2ba9ae6b439c8ee81c8f227e9ec", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/04479c64c609d2ba9ae6b439c8ee81c8f227e9ec", "committedDate": "2020-10-23T08:54:35Z", "message": "Update documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc\n\nCo-authored-by: William Burns <william.a.burns@gmail.com>"}, "afterCommit": {"oid": "7a476ef1f0575f75f7208022f9fbf940c152b8b7", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/7a476ef1f0575f75f7208022f9fbf940c152b8b7", "committedDate": "2020-10-23T09:43:20Z", "message": "ISPN-12438 off heap details"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a98781a61606f8c0635d73771fe73c47aeed07f", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/7a98781a61606f8c0635d73771fe73c47aeed07f", "committedDate": "2020-10-23T11:40:09Z", "message": "updating diagram"}, "afterCommit": {"oid": "7583f269cc0e63a2a7ea378a4237096ef13ca43e", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/7583f269cc0e63a2a7ea378a4237096ef13ca43e", "committedDate": "2020-10-23T14:21:23Z", "message": "ISPN-12438 off heap details"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODM1OTQx", "url": "https://github.com/infinispan/infinispan/pull/8803#pullrequestreview-516835941", "createdAt": "2020-10-26T14:30:39Z", "commit": {"oid": "7583f269cc0e63a2a7ea378a4237096ef13ca43e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDozMDozOVrOHoSQPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDozMDozOVrOHoSQPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwNDE1OA==", "bodyText": "We should probably mention that this means that equality is done via the serialized bytes and not the object representation as well. I believe we had that somewhere before... but don't remember where.", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r512004158", "createdAt": "2020-10-26T14:30:39Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc", "diffHunk": "@@ -0,0 +1,61 @@\n+[id='off_heap_memory']\n+= Off Heap Memory\n+{brandname} can store cache entries in JVM heap memory or off heap.\n+Off heap storage lets your Java objects occupy native memory outside the managed JVM memory space.\n+\n+Off heap storage requires less overhead per entry than in JVM heap memory.\n+In other words, off heap storage uses less memory than heap storage for the same amount of data.\n+Another benefit of off heap storage is that it is not affected by Garbage Collector runs, which can improve overall JVM performance.\n+There are some trade-offs with off heap storage; for example, JVM heap dumps do not show entries stored in off heap memory.\n+\n+Consider the following simplified illustration of memory space for a JVM process where {brandname} is running:\n+\n+image::offheap.svg[]\n+\n+.JVM heap memory\n+The heap is divided into young and old generations that help keep referenced Java objects and other application data in memory.\n+The Garbage Collector (GC) process reclaims space from unreachable objects, running more frequently on the young generation memory pool.\n+\n+When {brandname} stores cache entries in JVM heap memory, GC runs can take longer to complete as you start adding data to your caches.\n+Because GC is a fairly intensive process, longer and more frequent runs can degrade application performance.\n+\n+.Off heap memory\n+Off heap memory is native available system memory outside JVM memory management.\n+The preceding diagram shows the `Metaspace` memory pool that holds class metadata and is allocated from native memory.\n+The diagram also represents a section of native memory that holds {brandname} cache entries.\n+\n+.Storing data off heap\n+When you add entries to off heap caches, {brandname} dynamically allocates native memory to your data.\n+\n+{brandname} hashes the serialized `byte[]` for each key into buckets that are similar to a standard Java `HashMap`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7583f269cc0e63a2a7ea378a4237096ef13ca43e"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NjU5Mzc0", "url": "https://github.com/infinispan/infinispan/pull/8803#pullrequestreview-517659374", "createdAt": "2020-10-27T12:43:06Z", "commit": {"oid": "7583f269cc0e63a2a7ea378a4237096ef13ca43e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjo0MzowNlrOHo6RNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjo0MzowNlrOHo6RNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1OTc2NA==", "bodyText": "s/entry entry/entry/", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r512659764", "createdAt": "2020-10-27T12:43:06Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc", "diffHunk": "@@ -0,0 +1,61 @@\n+[id='off_heap_memory']\n+= Off Heap Memory\n+{brandname} can store cache entries in JVM heap memory or off heap.\n+Off heap storage lets your Java objects occupy native memory outside the managed JVM memory space.\n+\n+Off heap storage requires less overhead per entry than in JVM heap memory.\n+In other words, off heap storage uses less memory than heap storage for the same amount of data.\n+Another benefit of off heap storage is that it is not affected by Garbage Collector runs, which can improve overall JVM performance.\n+There are some trade-offs with off heap storage; for example, JVM heap dumps do not show entries stored in off heap memory.\n+\n+Consider the following simplified illustration of memory space for a JVM process where {brandname} is running:\n+\n+image::offheap.svg[]\n+\n+.JVM heap memory\n+The heap is divided into young and old generations that help keep referenced Java objects and other application data in memory.\n+The Garbage Collector (GC) process reclaims space from unreachable objects, running more frequently on the young generation memory pool.\n+\n+When {brandname} stores cache entries in JVM heap memory, GC runs can take longer to complete as you start adding data to your caches.\n+Because GC is a fairly intensive process, longer and more frequent runs can degrade application performance.\n+\n+.Off heap memory\n+Off heap memory is native available system memory outside JVM memory management.\n+The preceding diagram shows the `Metaspace` memory pool that holds class metadata and is allocated from native memory.\n+The diagram also represents a section of native memory that holds {brandname} cache entries.\n+\n+.Storing data off heap\n+When you add entries to off heap caches, {brandname} dynamically allocates native memory to your data.\n+\n+{brandname} hashes the serialized `byte[]` for each key into buckets that are similar to a standard Java `HashMap`.\n+Buckets include address pointers that {brandname} use to locate entries that you store in off heap memory.\n+\n+The following diagram shows a set of keys with names, the hash for each key and bucket array of address pointers, as well as the entries with the name and phone number:\n+\n+image::offheap_hashmap.svg[]\n+\n+In cases where key hashes collide, {brandname} links entries.\n+As in the preceding diagram, if the William Clay and Luke Cage keys have the same hash, then the first entry added to the cache is the first element in the bucket.\n+\n+[NOTE]\n+====\n+Even though {brandname} stores cache entries in native memory, run-time operations require JVM heap representations of those objects.\n+For instance, `cache.get()` operations read objects into heap memory before returning.\n+Likewise, state transfer operations hold subsets of objects in heap memory while they take place.\n+====\n+\n+.Memory overhead\n+\n+Memory overhead is the additional memory that {brandname} uses to store entries.\n+{brandname} uses 25 bytes for each entry entry in the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7583f269cc0e63a2a7ea378a4237096ef13ca43e"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NjYwOTYw", "url": "https://github.com/infinispan/infinispan/pull/8803#pullrequestreview-517660960", "createdAt": "2020-10-27T12:45:05Z", "commit": {"oid": "7583f269cc0e63a2a7ea378a4237096ef13ca43e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjo0NTowNVrOHo6V4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjo0NTowNVrOHo6V4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY2MDk2MQ==", "bodyText": "I would not leave the total implied. You are mentioning it below, but it's clearer if brought here,", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r512660961", "createdAt": "2020-10-27T12:45:05Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc", "diffHunk": "@@ -0,0 +1,61 @@\n+[id='off_heap_memory']\n+= Off Heap Memory\n+{brandname} can store cache entries in JVM heap memory or off heap.\n+Off heap storage lets your Java objects occupy native memory outside the managed JVM memory space.\n+\n+Off heap storage requires less overhead per entry than in JVM heap memory.\n+In other words, off heap storage uses less memory than heap storage for the same amount of data.\n+Another benefit of off heap storage is that it is not affected by Garbage Collector runs, which can improve overall JVM performance.\n+There are some trade-offs with off heap storage; for example, JVM heap dumps do not show entries stored in off heap memory.\n+\n+Consider the following simplified illustration of memory space for a JVM process where {brandname} is running:\n+\n+image::offheap.svg[]\n+\n+.JVM heap memory\n+The heap is divided into young and old generations that help keep referenced Java objects and other application data in memory.\n+The Garbage Collector (GC) process reclaims space from unreachable objects, running more frequently on the young generation memory pool.\n+\n+When {brandname} stores cache entries in JVM heap memory, GC runs can take longer to complete as you start adding data to your caches.\n+Because GC is a fairly intensive process, longer and more frequent runs can degrade application performance.\n+\n+.Off heap memory\n+Off heap memory is native available system memory outside JVM memory management.\n+The preceding diagram shows the `Metaspace` memory pool that holds class metadata and is allocated from native memory.\n+The diagram also represents a section of native memory that holds {brandname} cache entries.\n+\n+.Storing data off heap\n+When you add entries to off heap caches, {brandname} dynamically allocates native memory to your data.\n+\n+{brandname} hashes the serialized `byte[]` for each key into buckets that are similar to a standard Java `HashMap`.\n+Buckets include address pointers that {brandname} use to locate entries that you store in off heap memory.\n+\n+The following diagram shows a set of keys with names, the hash for each key and bucket array of address pointers, as well as the entries with the name and phone number:\n+\n+image::offheap_hashmap.svg[]\n+\n+In cases where key hashes collide, {brandname} links entries.\n+As in the preceding diagram, if the William Clay and Luke Cage keys have the same hash, then the first entry added to the cache is the first element in the bucket.\n+\n+[NOTE]\n+====\n+Even though {brandname} stores cache entries in native memory, run-time operations require JVM heap representations of those objects.\n+For instance, `cache.get()` operations read objects into heap memory before returning.\n+Likewise, state transfer operations hold subsets of objects in heap memory while they take place.\n+====\n+\n+.Memory overhead\n+\n+Memory overhead is the additional memory that {brandname} uses to store entries.\n+{brandname} uses 25 bytes for each entry entry in the cache.\n+\n+Using eviction to create a bounded off heap data container increases memory overhead by 36 bytes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7583f269cc0e63a2a7ea378a4237096ef13ca43e"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NjYxNzMz", "url": "https://github.com/infinispan/infinispan/pull/8803#pullrequestreview-517661733", "createdAt": "2020-10-27T12:46:01Z", "commit": {"oid": "7583f269cc0e63a2a7ea378a4237096ef13ca43e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjo0NjowMVrOHo6YDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjo0NjowMVrOHo6YDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY2MTUxOA==", "bodyText": "@wburns can we provide a rough estimation of on heap overhead ?", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r512661518", "createdAt": "2020-10-27T12:46:01Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/topics/con_off_heap_memory.adoc", "diffHunk": "@@ -0,0 +1,61 @@\n+[id='off_heap_memory']\n+= Off Heap Memory\n+{brandname} can store cache entries in JVM heap memory or off heap.\n+Off heap storage lets your Java objects occupy native memory outside the managed JVM memory space.\n+\n+Off heap storage requires less overhead per entry than in JVM heap memory.\n+In other words, off heap storage uses less memory than heap storage for the same amount of data.\n+Another benefit of off heap storage is that it is not affected by Garbage Collector runs, which can improve overall JVM performance.\n+There are some trade-offs with off heap storage; for example, JVM heap dumps do not show entries stored in off heap memory.\n+\n+Consider the following simplified illustration of memory space for a JVM process where {brandname} is running:\n+\n+image::offheap.svg[]\n+\n+.JVM heap memory\n+The heap is divided into young and old generations that help keep referenced Java objects and other application data in memory.\n+The Garbage Collector (GC) process reclaims space from unreachable objects, running more frequently on the young generation memory pool.\n+\n+When {brandname} stores cache entries in JVM heap memory, GC runs can take longer to complete as you start adding data to your caches.\n+Because GC is a fairly intensive process, longer and more frequent runs can degrade application performance.\n+\n+.Off heap memory\n+Off heap memory is native available system memory outside JVM memory management.\n+The preceding diagram shows the `Metaspace` memory pool that holds class metadata and is allocated from native memory.\n+The diagram also represents a section of native memory that holds {brandname} cache entries.\n+\n+.Storing data off heap\n+When you add entries to off heap caches, {brandname} dynamically allocates native memory to your data.\n+\n+{brandname} hashes the serialized `byte[]` for each key into buckets that are similar to a standard Java `HashMap`.\n+Buckets include address pointers that {brandname} use to locate entries that you store in off heap memory.\n+\n+The following diagram shows a set of keys with names, the hash for each key and bucket array of address pointers, as well as the entries with the name and phone number:\n+\n+image::offheap_hashmap.svg[]\n+\n+In cases where key hashes collide, {brandname} links entries.\n+As in the preceding diagram, if the William Clay and Luke Cage keys have the same hash, then the first entry added to the cache is the first element in the bucket.\n+\n+[NOTE]\n+====\n+Even though {brandname} stores cache entries in native memory, run-time operations require JVM heap representations of those objects.\n+For instance, `cache.get()` operations read objects into heap memory before returning.\n+Likewise, state transfer operations hold subsets of objects in heap memory while they take place.\n+====\n+\n+.Memory overhead\n+\n+Memory overhead is the additional memory that {brandname} uses to store entries.\n+{brandname} uses 25 bytes for each entry entry in the cache.\n+\n+Using eviction to create a bounded off heap data container increases memory overhead by 36 bytes.\n+This happens because {brandname} creates an additional linked list to track entries in the cache and perform eviction.\n+\n+However, compared with storing entries in the JVM heap, a total memory overhead of 61 bytes per entry is significantly lower.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7583f269cc0e63a2a7ea378a4237096ef13ca43e"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NjYyMjkw", "url": "https://github.com/infinispan/infinispan/pull/8803#pullrequestreview-517662290", "createdAt": "2020-10-27T12:46:43Z", "commit": {"oid": "7583f269cc0e63a2a7ea378a4237096ef13ca43e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjo0Njo0M1rOHo6ZsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjo0Njo0M1rOHo6ZsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY2MTkzNg==", "bodyText": "entries in Protobuf format.", "url": "https://github.com/infinispan/infinispan/pull/8803#discussion_r512661936", "createdAt": "2020-10-27T12:46:43Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_offheap.adoc", "diffHunk": "@@ -1,29 +1,28 @@\n [id='configure_off_heap-{context}']\n-= Configuring {brandname} to Store Cache Entries Off Heap\n-{brandname} can use either JVM heap memory or off-heap native memory as the\n-data container for cache entries. By default {brandname} stores cache entries\n-in JVM heap memory.\n-\n-{brandname} can use off-heap storage with eviction based on the total number of\n-entries or maximum amount of memory. When using off-heap, {brandname} stores\n-cache entries in Protobuf format with the `application/x-protostream` encoding.\n+= Using Off Heap Memory\n+Configure {brandname} to store cache entries in native memory outside the JVM\n+heap space.\n \n .Procedure\n \n-To store cache entries in off-heap memory, configure {brandname} in one of the\n-following ways:\n-\n+. Create a configuration for any type of cache.\n+. Store cache entries in off heap memory.\n++\n * Declaratively: Add the `storage=\"OFF_HEAP\"` attribute to the `memory` element.\n * Programmatically: Call the `storage(OFF_HEAP)` method in the `MemoryConfigurationBuilder` class.\n++\n+. Configure eviction to limit the amount of off heap memory that the cache can use. You can use eviction based on total number of entries (`max-count`) or maximum amount of memory (`max-size`).\n+. Configure any binary encoding for cache entries. For optimal results, use the `application/x-protostream` MediaType to store entries Protobuf format.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7583f269cc0e63a2a7ea378a4237096ef13ca43e"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7583f269cc0e63a2a7ea378a4237096ef13ca43e", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/7583f269cc0e63a2a7ea378a4237096ef13ca43e", "committedDate": "2020-10-23T14:21:23Z", "message": "ISPN-12438 off heap details"}, "afterCommit": {"oid": "946577e89a6785831b5fafdf2f14f2de9d0cef5c", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/946577e89a6785831b5fafdf2f14f2de9d0cef5c", "committedDate": "2020-10-27T17:46:48Z", "message": "use the hyphen. fix feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af05f573eed94bc3f7df1bf54163f3d848b3afad", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/af05f573eed94bc3f7df1bf54163f3d848b3afad", "committedDate": "2020-10-30T10:49:29Z", "message": "ISPN-12438 off heap details"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "946577e89a6785831b5fafdf2f14f2de9d0cef5c", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/946577e89a6785831b5fafdf2f14f2de9d0cef5c", "committedDate": "2020-10-27T17:46:48Z", "message": "use the hyphen. fix feedback."}, "afterCommit": {"oid": "af05f573eed94bc3f7df1bf54163f3d848b3afad", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/af05f573eed94bc3f7df1bf54163f3d848b3afad", "committedDate": "2020-10-30T10:49:29Z", "message": "ISPN-12438 off heap details"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 391, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}