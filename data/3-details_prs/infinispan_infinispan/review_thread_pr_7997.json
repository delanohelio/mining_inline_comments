{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzODczNDU0", "number": 7997, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTowNjowN1rODlYXWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOToyMjozMVrODp_Rpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTIzMDk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/functional/AbstractWriteManyCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTowNjowN1rOFyPWeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzozNjowM1rOFydNJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNDYzMg==", "bodyText": "@danberindei @wburns WDYT to adding a default implemntation to ReplicableCommand that returns false? It will remove a fair bit of boilerplate.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r388224632", "createdAt": "2020-03-05T11:06:07Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/commands/functional/AbstractWriteManyCommand.java", "diffHunk": "@@ -88,7 +88,7 @@ public boolean isConditional() {\n \n    @Override\n    public boolean canBlock() {\n-      return true;\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75e1aa23af44388a3ba79e94f33f6c3ae072392b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMzg0NA==", "bodyText": "I had debated about it, but didn't try it. I can see how it feels. I was debating about even deprecating the method as well.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r388303844", "createdAt": "2020-03-05T13:50:03Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/commands/functional/AbstractWriteManyCommand.java", "diffHunk": "@@ -88,7 +88,7 @@ public boolean isConditional() {\n \n    @Override\n    public boolean canBlock() {\n-      return true;\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNDYzMg=="}, "originalCommit": {"oid": "75e1aa23af44388a3ba79e94f33f6c3ae072392b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MTYyMA==", "bodyText": "Deprecating it sounds good. At the very least it gives us the option to remove it in 12 even if we're not ready to do that.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r388451620", "createdAt": "2020-03-05T17:36:03Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/commands/functional/AbstractWriteManyCommand.java", "diffHunk": "@@ -88,7 +88,7 @@ public boolean isConditional() {\n \n    @Override\n    public boolean canBlock() {\n-      return true;\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNDYzMg=="}, "originalCommit": {"oid": "75e1aa23af44388a3ba79e94f33f6c3ae072392b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mjk1MjEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/globalstate/impl/GlobalConfigurationManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo1ODo0NlrOF33PmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzoxNzo0N1rOF4EeSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMTExMw==", "bodyText": "Is this really needed? The configuration is in a string, so we shouldn't block to read it, and there's no resolver to allow includes from external resources.\nOff-topic, ParserRegistry.parse(String) could avoid wrapping the ByteArrayInputStream in a BufferedInputStream. I would have suggested using factory.createXMLStreamReader(new StringReader(configString)), but then I read its implementation and it would do even more extra work.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394121113", "createdAt": "2020-03-18T05:58:46Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/globalstate/impl/GlobalConfigurationManagerImpl.java", "diffHunk": "@@ -196,13 +198,16 @@ void start() {\n \n    CompletableFuture<Void> createCacheLocally(String name, CacheState state) {\n       log.debugf(\"Create cache %s\", name);\n-      Configuration configuration = buildConfiguration(name, state);\n-      return localConfigurationManager.createCache(name, state.getTemplate(), configuration, state.getFlags());\n+      CompletionStage<Configuration> configurationStage = buildConfiguration(name, state);\n+      return configurationStage.thenCompose(configuration -> localConfigurationManager.createCache(name, state.getTemplate(), configuration, state.getFlags()))\n+            .toCompletableFuture();\n    }\n \n-   private Configuration buildConfiguration(String name, CacheState state) {\n-      ConfigurationBuilderHolder builderHolder = parserRegistry.parse(state.getConfiguration());\n-      return builderHolder.getNamedConfigurationBuilders().get(name).build(configurationManager.getGlobalConfiguration());\n+   private CompletionStage<Configuration> buildConfiguration(String name, CacheState state) {\n+      return CompletableFuture.supplyAsync(() -> {\n+         ConfigurationBuilderHolder builderHolder = parserRegistry.parse(state.getConfiguration());\n+         return builderHolder.getNamedConfigurationBuilders().get(name).build(configurationManager.getGlobalConfiguration());\n+      }, blockingExecutor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzNzg2Nw==", "bodyText": "It was detected by block hound as blocking. I can take a closer look later today.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394337867", "createdAt": "2020-03-18T13:17:47Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/globalstate/impl/GlobalConfigurationManagerImpl.java", "diffHunk": "@@ -196,13 +198,16 @@ void start() {\n \n    CompletableFuture<Void> createCacheLocally(String name, CacheState state) {\n       log.debugf(\"Create cache %s\", name);\n-      Configuration configuration = buildConfiguration(name, state);\n-      return localConfigurationManager.createCache(name, state.getTemplate(), configuration, state.getFlags());\n+      CompletionStage<Configuration> configurationStage = buildConfiguration(name, state);\n+      return configurationStage.thenCompose(configuration -> localConfigurationManager.createCache(name, state.getTemplate(), configuration, state.getFlags()))\n+            .toCompletableFuture();\n    }\n \n-   private Configuration buildConfiguration(String name, CacheState state) {\n-      ConfigurationBuilderHolder builderHolder = parserRegistry.parse(state.getConfiguration());\n-      return builderHolder.getNamedConfigurationBuilders().get(name).build(configurationManager.getGlobalConfiguration());\n+   private CompletionStage<Configuration> buildConfiguration(String name, CacheState state) {\n+      return CompletableFuture.supplyAsync(() -> {\n+         ConfigurationBuilderHolder builderHolder = parserRegistry.parse(state.getConfiguration());\n+         return builderHolder.getNamedConfigurationBuilders().get(name).build(configurationManager.getGlobalConfiguration());\n+      }, blockingExecutor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMTExMw=="}, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mjk1OTM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/manager/DefaultCacheManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjowMjo1NVrOF33T8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzoyNDoxMVrOF4Euqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMjIyNw==", "bodyText": "Is/should there be a way to use the non-blocking executor for users of ClusterExecutor that know their callback is non-blocking? Maybe internal code should be sending commands anyway?", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394122227", "createdAt": "2020-03-18T06:02:55Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/manager/DefaultCacheManager.java", "diffHunk": "@@ -1140,7 +1140,8 @@ public ClusterExecutor executor() {\n       if (transport != null) {\n          long time = configurationManager.getGlobalConfiguration().transport().distributedSyncTimeout();\n          return ClusterExecutors.allSubmissionExecutor(null, this, transport, time, TimeUnit.MILLISECONDS,\n-               globalComponentRegistry.getComponent(ExecutorService.class, KnownComponentNames.REMOTE_COMMAND_EXECUTOR),\n+               // This can run arbitrary code, including user - assume it is blocking\n+               globalComponentRegistry.getComponent(ExecutorService.class, KnownComponentNames.BLOCKING_EXECUTOR),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0MjA1OA==", "bodyText": "I was debating about this. We should probably do something though. I think having a separate JIRA is probably best. https://issues.redhat.com/browse/ISPN-11482", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394342058", "createdAt": "2020-03-18T13:24:11Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/manager/DefaultCacheManager.java", "diffHunk": "@@ -1140,7 +1140,8 @@ public ClusterExecutor executor() {\n       if (transport != null) {\n          long time = configurationManager.getGlobalConfiguration().transport().distributedSyncTimeout();\n          return ClusterExecutors.allSubmissionExecutor(null, this, transport, time, TimeUnit.MILLISECONDS,\n-               globalComponentRegistry.getComponent(ExecutorService.class, KnownComponentNames.REMOTE_COMMAND_EXECUTOR),\n+               // This can run arbitrary code, including user - assume it is blocking\n+               globalComponentRegistry.getComponent(ExecutorService.class, KnownComponentNames.BLOCKING_EXECUTOR),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMjIyNw=="}, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mjk2MzU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/manager/impl/ReplicableManagerFunctionCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjowNTo0NVrOF33WuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzoyODoxM1rOF4E5EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMjkzNg==", "bodyText": "I was hoping that the result of canBlock() would already be ignored, and it would be the command's job to submit a task to the blocking executor if needed. Maybe in the next version, then :)", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394122936", "createdAt": "2020-03-18T06:05:45Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/manager/impl/ReplicableManagerFunctionCommand.java", "diffHunk": "@@ -61,6 +61,7 @@ public boolean isReturnValueExpected() {\n \n    @Override\n    public boolean canBlock() {\n+      // These commands can be arbitrary user commands - so be careful about them blocking", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0Mjg2OQ==", "bodyText": "Hrmm, I think I understand now. You mean inside the invokeAsync directly. I can make a new JIRA to do that as it will inflate this probably a bit.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394342869", "createdAt": "2020-03-18T13:25:29Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/manager/impl/ReplicableManagerFunctionCommand.java", "diffHunk": "@@ -61,6 +61,7 @@ public boolean isReturnValueExpected() {\n \n    @Override\n    public boolean canBlock() {\n+      // These commands can be arbitrary user commands - so be careful about them blocking", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMjkzNg=="}, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0NDcyMQ==", "bodyText": "https://issues.redhat.com/browse/ISPN-11483", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394344721", "createdAt": "2020-03-18T13:28:13Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/manager/impl/ReplicableManagerFunctionCommand.java", "diffHunk": "@@ -61,6 +61,7 @@ public boolean isReturnValueExpected() {\n \n    @Override\n    public boolean canBlock() {\n+      // These commands can be arbitrary user commands - so be careful about them blocking", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMjkzNg=="}, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mjk4OTM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/remoting/inboundhandler/GlobalInboundInvocationHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjoyMTo1MVrOF33nJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzowOToxMlrOF4Z9_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyNzE0Mg==", "bodyText": "So we assume any ReplicableCommand is blocking?", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394127142", "createdAt": "2020-03-18T06:21:51Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/remoting/inboundhandler/GlobalInboundInvocationHandler.java", "diffHunk": "@@ -135,7 +135,7 @@ private void handleReplicableCommand(Address origin, ReplicableCommand command,\n          //we must/can run in this thread\n          runnable.run();\n       } else {\n-         remoteCommandsExecutor.execute(runnable);\n+         blockingExecutor.execute(runnable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0NDk2NA==", "bodyText": "Why do you say that, sorry? It should only do this if canBlock was true.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394344964", "createdAt": "2020-03-18T13:28:33Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/remoting/inboundhandler/GlobalInboundInvocationHandler.java", "diffHunk": "@@ -135,7 +135,7 @@ private void handleReplicableCommand(Address origin, ReplicableCommand command,\n          //we must/can run in this thread\n          runnable.run();\n       } else {\n-         remoteCommandsExecutor.execute(runnable);\n+         blockingExecutor.execute(runnable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyNzE0Mg=="}, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5MDA0NQ==", "bodyText": "Sorry, I was only looking at the diff and I forgot that ReplicableCommand has canBlock(), I thought it was in CacheRpcCommand.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394690045", "createdAt": "2020-03-18T23:09:12Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/remoting/inboundhandler/GlobalInboundInvocationHandler.java", "diffHunk": "@@ -135,7 +135,7 @@ private void handleReplicableCommand(Address origin, ReplicableCommand command,\n          //we must/can run in this thread\n          runnable.run();\n       } else {\n-         remoteCommandsExecutor.execute(runnable);\n+         blockingExecutor.execute(runnable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyNzE0Mg=="}, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mjk5MzU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/topology/ClusterTopologyManagerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjoyNDozNVrOF33pzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzoxMDowNlrOF4Z_IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyNzgyMQ==", "bodyText": "I would assume the unlock method can't block, so it's just for symmetry", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394127821", "createdAt": "2020-03-18T06:24:35Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/topology/ClusterTopologyManagerImpl.java", "diffHunk": "@@ -179,17 +179,29 @@ public void start() {\n    @Stop(priority = 100)\n    public void stop() {\n       // Stop blocking cache topology commands.\n-      updateLock.lock();\n+      acquireUpdateLock();\n       try {\n          clusterManagerStatus = ClusterManagerStatus.STOPPING;\n          joinViewFuture.stop();\n       } finally {\n-         updateLock.unlock();\n+         releaseUpdateLock();\n       }\n \n       cacheManagerNotifier.removeListener(viewListener);\n    }\n \n+   // This method is here to augment with blockhound as we allow it to block, but don't want the calls\n+   // inside the lock to block - Do not move or rename without updating the reference\n+   private void acquireUpdateLock() {\n+      updateLock.lock();\n+   }\n+\n+   // This method is here to augment with blockhound as we allow it to block, but don't want the calls\n+   // inside the lock to block - Do not move or rename without updating the reference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0NTY5NQ==", "bodyText": "Sure, let me try removing actually. I don't quite remember ;)", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394345695", "createdAt": "2020-03-18T13:29:45Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/topology/ClusterTopologyManagerImpl.java", "diffHunk": "@@ -179,17 +179,29 @@ public void start() {\n    @Stop(priority = 100)\n    public void stop() {\n       // Stop blocking cache topology commands.\n-      updateLock.lock();\n+      acquireUpdateLock();\n       try {\n          clusterManagerStatus = ClusterManagerStatus.STOPPING;\n          joinViewFuture.stop();\n       } finally {\n-         updateLock.unlock();\n+         releaseUpdateLock();\n       }\n \n       cacheManagerNotifier.removeListener(viewListener);\n    }\n \n+   // This method is here to augment with blockhound as we allow it to block, but don't want the calls\n+   // inside the lock to block - Do not move or rename without updating the reference\n+   private void acquireUpdateLock() {\n+      updateLock.lock();\n+   }\n+\n+   // This method is here to augment with blockhound as we allow it to block, but don't want the calls\n+   // inside the lock to block - Do not move or rename without updating the reference", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyNzgyMQ=="}, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5MDMzNg==", "bodyText": "I wanted to keep the method so acquire/release is symmetric, I just wanted to remove the comment and the exception in the blockhound integration.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394690336", "createdAt": "2020-03-18T23:10:06Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/topology/ClusterTopologyManagerImpl.java", "diffHunk": "@@ -179,17 +179,29 @@ public void start() {\n    @Stop(priority = 100)\n    public void stop() {\n       // Stop blocking cache topology commands.\n-      updateLock.lock();\n+      acquireUpdateLock();\n       try {\n          clusterManagerStatus = ClusterManagerStatus.STOPPING;\n          joinViewFuture.stop();\n       } finally {\n-         updateLock.unlock();\n+         releaseUpdateLock();\n       }\n \n       cacheManagerNotifier.removeListener(viewListener);\n    }\n \n+   // This method is here to augment with blockhound as we allow it to block, but don't want the calls\n+   // inside the lock to block - Do not move or rename without updating the reference\n+   private void acquireUpdateLock() {\n+      updateLock.lock();\n+   }\n+\n+   // This method is here to augment with blockhound as we allow it to block, but don't want the calls\n+   // inside the lock to block - Do not move or rename without updating the reference", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyNzgyMQ=="}, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Mjk5NTA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjoyNTozMFrOF33q0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzozMDoxMVrOF4E-BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyODA4MA==", "bodyText": "Doesn't add anything IMO", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394128080", "createdAt": "2020-03-18T06:25:30Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java", "diffHunk": "@@ -47,6 +48,10 @@ public void applyTo(BlockHound.Builder builder) {\n \n          // This shouldn't block long when held - but it is a write lock which can be delayed\n          builder.allowBlockingCallsInside(KeyAffinityServiceImpl.class.getName(), \"handleViewChange\");\n+\n+         // Let the lock acquisition be blocking", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0NTk4OQ==", "bodyText": "Okay.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394345989", "createdAt": "2020-03-18T13:30:11Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java", "diffHunk": "@@ -47,6 +48,10 @@ public void applyTo(BlockHound.Builder builder) {\n \n          // This shouldn't block long when held - but it is a write lock which can be delayed\n          builder.allowBlockingCallsInside(KeyAffinityServiceImpl.class.getName(), \"handleViewChange\");\n+\n+         // Let the lock acquisition be blocking", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyODA4MA=="}, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzAxMjgwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/util/CoreTestBlockHoundIntegration.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjozNTo1N1rOF3318w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToyODo0NFrOF5jthA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEzMDkzMQ==", "bodyText": "Assuming this is just for the Thread.sleep() call, I think it would be better to add an executor parameter to TestingUtil.delayed() and to inject the non-blocking executor in ReplListenerInterceptor.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394130931", "createdAt": "2020-03-18T06:35:57Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/util/CoreTestBlockHoundIntegration.java", "diffHunk": "@@ -67,6 +73,10 @@ private static void allowTestsToBlock(BlockHound.Builder builder) {\n       CommonsBlockHoundIntegration.allowPublicMethodsToBlock(builder, NotifierLatch.class);\n \n       CommonsBlockHoundIntegration.allowPublicMethodsToBlock(builder, TestBlocking.class);\n+\n+      CommonsBlockHoundIntegration.allowMethodsToBlock(builder, Class.forName(ReplListener.class.getName() + \"$ReplListenerInterceptor\"), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0ODczMA==", "bodyText": "Actually am not sure why I didn't just add TestingUtil#sleepThread to the exception list. Let me try that instead.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394348730", "createdAt": "2020-03-18T13:34:12Z", "author": {"login": "wburns"}, "path": "core/src/test/java/org/infinispan/util/CoreTestBlockHoundIntegration.java", "diffHunk": "@@ -67,6 +73,10 @@ private static void allowTestsToBlock(BlockHound.Builder builder) {\n       CommonsBlockHoundIntegration.allowPublicMethodsToBlock(builder, NotifierLatch.class);\n \n       CommonsBlockHoundIntegration.allowPublicMethodsToBlock(builder, TestBlocking.class);\n+\n+      CommonsBlockHoundIntegration.allowMethodsToBlock(builder, Class.forName(ReplListener.class.getName() + \"$ReplListenerInterceptor\"), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEzMDkzMQ=="}, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3NDIwNw==", "bodyText": "Ah it was because of logCommand that acquires a lock. I think I will leave it as is for now.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394474207", "createdAt": "2020-03-18T16:20:31Z", "author": {"login": "wburns"}, "path": "core/src/test/java/org/infinispan/util/CoreTestBlockHoundIntegration.java", "diffHunk": "@@ -67,6 +73,10 @@ private static void allowTestsToBlock(BlockHound.Builder builder) {\n       CommonsBlockHoundIntegration.allowPublicMethodsToBlock(builder, NotifierLatch.class);\n \n       CommonsBlockHoundIntegration.allowPublicMethodsToBlock(builder, TestBlocking.class);\n+\n+      CommonsBlockHoundIntegration.allowMethodsToBlock(builder, Class.forName(ReplListener.class.getName() + \"$ReplListenerInterceptor\"), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEzMDkzMQ=="}, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3NDQ1MA==", "bodyText": "But I can also add TestingUtil#sleepThread as okay to block though too.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394474450", "createdAt": "2020-03-18T16:20:51Z", "author": {"login": "wburns"}, "path": "core/src/test/java/org/infinispan/util/CoreTestBlockHoundIntegration.java", "diffHunk": "@@ -67,6 +73,10 @@ private static void allowTestsToBlock(BlockHound.Builder builder) {\n       CommonsBlockHoundIntegration.allowPublicMethodsToBlock(builder, NotifierLatch.class);\n \n       CommonsBlockHoundIntegration.allowPublicMethodsToBlock(builder, TestBlocking.class);\n+\n+      CommonsBlockHoundIntegration.allowMethodsToBlock(builder, Class.forName(ReplListener.class.getName() + \"$ReplListenerInterceptor\"), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEzMDkzMQ=="}, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4ODIxOA==", "bodyText": "+1 to add TestingUtil#sleepThread", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394688218", "createdAt": "2020-03-18T23:03:42Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/util/CoreTestBlockHoundIntegration.java", "diffHunk": "@@ -67,6 +73,10 @@ private static void allowTestsToBlock(BlockHound.Builder builder) {\n       CommonsBlockHoundIntegration.allowPublicMethodsToBlock(builder, NotifierLatch.class);\n \n       CommonsBlockHoundIntegration.allowPublicMethodsToBlock(builder, TestBlocking.class);\n+\n+      CommonsBlockHoundIntegration.allowMethodsToBlock(builder, Class.forName(ReplListener.class.getName() + \"$ReplListenerInterceptor\"), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEzMDkzMQ=="}, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5ODI0NA==", "bodyText": "Seems to work fine without the ReplListenerInterceptor exception now.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395898244", "createdAt": "2020-03-20T21:28:44Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/util/CoreTestBlockHoundIntegration.java", "diffHunk": "@@ -67,6 +73,10 @@ private static void allowTestsToBlock(BlockHound.Builder builder) {\n       CommonsBlockHoundIntegration.allowPublicMethodsToBlock(builder, NotifierLatch.class);\n \n       CommonsBlockHoundIntegration.allowPublicMethodsToBlock(builder, TestBlocking.class);\n+\n+      CommonsBlockHoundIntegration.allowMethodsToBlock(builder, Class.forName(ReplListener.class.getName() + \"$ReplListenerInterceptor\"), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEzMDkzMQ=="}, "originalCommit": {"oid": "57a1afb12cb3453e6a61fcd43788102311d3ab3f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjM5NjQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/manager/DefaultCacheManager.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjo1ODowNFrOF4ZvTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODo1ODoxOFrOF5f0Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NjI4NQ==", "bodyText": "No longer necessary?", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394686285", "createdAt": "2020-03-18T22:58:04Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/manager/DefaultCacheManager.java", "diffHunk": "@@ -1139,11 +1138,14 @@ public ClusterExecutor executor() {\n       if (transport != null) {\n          long time = configurationManager.getGlobalConfiguration().transport().distributedSyncTimeout();\n          return ClusterExecutors.allSubmissionExecutor(null, this, transport, time, TimeUnit.MILLISECONDS,\n-               globalComponentRegistry.getComponent(ExecutorService.class, KnownComponentNames.REMOTE_COMMAND_EXECUTOR),\n+               // This can run arbitrary code, including user - such commands can block", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDE2MQ==", "bodyText": "No, I more put it here because it can block :)", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394700161", "createdAt": "2020-03-18T23:38:36Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/manager/DefaultCacheManager.java", "diffHunk": "@@ -1139,11 +1138,14 @@ public ClusterExecutor executor() {\n       if (transport != null) {\n          long time = configurationManager.getGlobalConfiguration().transport().distributedSyncTimeout();\n          return ClusterExecutors.allSubmissionExecutor(null, this, transport, time, TimeUnit.MILLISECONDS,\n-               globalComponentRegistry.getComponent(ExecutorService.class, KnownComponentNames.REMOTE_COMMAND_EXECUTOR),\n+               // This can run arbitrary code, including user - such commands can block", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NjI4NQ=="}, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyMzU4MA==", "bodyText": "Should it be using the non-blocking executor then?", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395123580", "createdAt": "2020-03-19T15:41:31Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/manager/DefaultCacheManager.java", "diffHunk": "@@ -1139,11 +1138,14 @@ public ClusterExecutor executor() {\n       if (transport != null) {\n          long time = configurationManager.getGlobalConfiguration().transport().distributedSyncTimeout();\n          return ClusterExecutors.allSubmissionExecutor(null, this, transport, time, TimeUnit.MILLISECONDS,\n-               globalComponentRegistry.getComponent(ExecutorService.class, KnownComponentNames.REMOTE_COMMAND_EXECUTOR),\n+               // This can run arbitrary code, including user - such commands can block", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NjI4NQ=="}, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNzg5NA==", "bodyText": "Unfortunately until the other JIRA is fixed, we don't have a great solution. And cluster executor isn't that widely used afaik. But we should hopefully get it fixed before people use  it like this.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395127894", "createdAt": "2020-03-19T15:47:22Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/manager/DefaultCacheManager.java", "diffHunk": "@@ -1139,11 +1138,14 @@ public ClusterExecutor executor() {\n       if (transport != null) {\n          long time = configurationManager.getGlobalConfiguration().transport().distributedSyncTimeout();\n          return ClusterExecutors.allSubmissionExecutor(null, this, transport, time, TimeUnit.MILLISECONDS,\n-               globalComponentRegistry.getComponent(ExecutorService.class, KnownComponentNames.REMOTE_COMMAND_EXECUTOR),\n+               // This can run arbitrary code, including user - such commands can block", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NjI4NQ=="}, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NTM4Nw==", "bodyText": "Unfortunately I think the few users of cluster executor may be doing exactly blocking cache operations, because there's no way to return a value asynchronously.\nI'm starting to think that the proper solution is\n\nchange PersistenceManagerImpl to detect if it is a blocking thread and run it inline and if non blocking thread to run the command in a blocking thread.\n\nIn fact, I would go even further, and change continueOnCPUExecutor to also continue on the caller thread if the caller thread was blocking. Otherwise, for cluster executor tasks doing cache.put(k1, v1), where the put requires 1 store operation to read the previous value and 1 store operation to store the value, the store read would happen on the task's initial blocking thread, but the store write would need another blocking thread. If the size of the blocking thread pool is N and you have N simultaneous tasks like this, there's no free thread to process the store writes.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395545387", "createdAt": "2020-03-20T10:21:10Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/manager/DefaultCacheManager.java", "diffHunk": "@@ -1139,11 +1138,14 @@ public ClusterExecutor executor() {\n       if (transport != null) {\n          long time = configurationManager.getGlobalConfiguration().transport().distributedSyncTimeout();\n          return ClusterExecutors.allSubmissionExecutor(null, this, transport, time, TimeUnit.MILLISECONDS,\n-               globalComponentRegistry.getComponent(ExecutorService.class, KnownComponentNames.REMOTE_COMMAND_EXECUTOR),\n+               // This can run arbitrary code, including user - such commands can block", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NjI4NQ=="}, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc0ODAzNA==", "bodyText": "Just an FYI but the only way currently we have to detect if it is a blocking thread is to check the thread name, which is quite brittle.\nAlso your put case, I don't see how the read and write would need concurrent blocking threads. The read would be done before then the write would be done afterwards, synchronously.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395748034", "createdAt": "2020-03-20T16:21:41Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/manager/DefaultCacheManager.java", "diffHunk": "@@ -1139,11 +1138,14 @@ public ClusterExecutor executor() {\n       if (transport != null) {\n          long time = configurationManager.getGlobalConfiguration().transport().distributedSyncTimeout();\n          return ClusterExecutors.allSubmissionExecutor(null, this, transport, time, TimeUnit.MILLISECONDS,\n-               globalComponentRegistry.getComponent(ExecutorService.class, KnownComponentNames.REMOTE_COMMAND_EXECUTOR),\n+               // This can run arbitrary code, including user - such commands can block", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NjI4NQ=="}, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNDU2NQ==", "bodyText": "Just an FYI but the only way currently we have to detect if it is a blocking thread is to check the thread name, which is quite brittle.\n\nCan't we do !(Thread.currentThread() instanceof ISPNNonBlockingThread)?\n\nAlso your put case, I don't see how the read and write would need concurrent blocking threads. The read would be done before then the write would be done afterwards, synchronously.\n\nIf the cluster executor task does a blocking cache.put(k, v), it needs a (blocking) thread for the entire duration of the cache operation. The read would run on the same thread, but then continueOnCPUExecutor() would submit a task to the non-blocking executor, and the next PersistenceManagerImpl call would submit a task to the blocking executor.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395824565", "createdAt": "2020-03-20T18:38:39Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/manager/DefaultCacheManager.java", "diffHunk": "@@ -1139,11 +1138,14 @@ public ClusterExecutor executor() {\n       if (transport != null) {\n          long time = configurationManager.getGlobalConfiguration().transport().distributedSyncTimeout();\n          return ClusterExecutors.allSubmissionExecutor(null, this, transport, time, TimeUnit.MILLISECONDS,\n-               globalComponentRegistry.getComponent(ExecutorService.class, KnownComponentNames.REMOTE_COMMAND_EXECUTOR),\n+               // This can run arbitrary code, including user - such commands can block", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NjI4NQ=="}, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzNDM4Mw==", "bodyText": "Can't we do !(Thread.currentThread() instanceof ISPNNonBlockingThread)?\n\nNo, unfortunately. This would include user threads, jgroups etc.\n\nIf the cluster executor task does a blocking cache.put(k, v), it needs a (blocking) thread for the entire duration of the cache operation. The read would run on the same thread, but then continueOnCPUExecutor() would submit a task to the non-blocking executor, and the next PersistenceManagerImpl call would submit a task to the blocking executor.\n\nOh, okay you were not referring to the read then write. I agree if a blocking operation is invoked on a blocking thread then yes it would use more than 1.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395834383", "createdAt": "2020-03-20T18:58:18Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/manager/DefaultCacheManager.java", "diffHunk": "@@ -1139,11 +1138,14 @@ public ClusterExecutor executor() {\n       if (transport != null) {\n          long time = configurationManager.getGlobalConfiguration().transport().distributedSyncTimeout();\n          return ClusterExecutors.allSubmissionExecutor(null, this, transport, time, TimeUnit.MILLISECONDS,\n-               globalComponentRegistry.getComponent(ExecutorService.class, KnownComponentNames.REMOTE_COMMAND_EXECUTOR),\n+               // This can run arbitrary code, including user - such commands can block", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NjI4NQ=="}, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjQwMjE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/manager/impl/ReplicableManagerFunctionCommand.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzowMDo0NVrOF4Zy8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDo1NDoyMFrOF5PJfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NzIxOA==", "bodyText": "Since you created a separate ISPN-11483, we should return true here for now.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394687218", "createdAt": "2020-03-18T23:00:45Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/manager/impl/ReplicableManagerFunctionCommand.java", "diffHunk": "@@ -61,6 +61,7 @@ public boolean isReturnValueExpected() {\n \n    @Override\n    public boolean canBlock() {\n-      return true;\n+      // Note that it is highly possible that a user command could block, and some internal Infinispan ones already do\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMDE3OQ==", "bodyText": "The problem is we invoke some commands that invoke stores and it causes issues.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394700179", "createdAt": "2020-03-18T23:38:39Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/manager/impl/ReplicableManagerFunctionCommand.java", "diffHunk": "@@ -61,6 +61,7 @@ public boolean isReturnValueExpected() {\n \n    @Override\n    public boolean canBlock() {\n-      return true;\n+      // Note that it is highly possible that a user command could block, and some internal Infinispan ones already do\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NzIxOA=="}, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNDM2MQ==", "bodyText": "Please add a comment to explain why you're returning false even though it can block.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395124361", "createdAt": "2020-03-19T15:42:35Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/manager/impl/ReplicableManagerFunctionCommand.java", "diffHunk": "@@ -61,6 +61,7 @@ public boolean isReturnValueExpected() {\n \n    @Override\n    public boolean canBlock() {\n-      return true;\n+      // Note that it is highly possible that a user command could block, and some internal Infinispan ones already do\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NzIxOA=="}, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNzUwNg==", "bodyText": "Sure I forgot to put the JIRA in the comments.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395127506", "createdAt": "2020-03-19T15:46:51Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/manager/impl/ReplicableManagerFunctionCommand.java", "diffHunk": "@@ -61,6 +61,7 @@ public boolean isReturnValueExpected() {\n \n    @Override\n    public boolean canBlock() {\n-      return true;\n+      // Note that it is highly possible that a user command could block, and some internal Infinispan ones already do\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NzIxOA=="}, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU2MTM0MA==", "bodyText": "Maybe I'm missing something, but that JIRA is a bit confusing to me. The subject is \"Provide way for ClusterExecutor to use non blocking thread\", but we are already using a non-blocking thread by returning false here.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395561340", "createdAt": "2020-03-20T10:54:20Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/manager/impl/ReplicableManagerFunctionCommand.java", "diffHunk": "@@ -61,6 +61,7 @@ public boolean isReturnValueExpected() {\n \n    @Override\n    public boolean canBlock() {\n-      return true;\n+      // Note that it is highly possible that a user command could block, and some internal Infinispan ones already do\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NzIxOA=="}, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjQwNzEwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/stream/DistributedSequentialNonRehashStreamTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzowMzowNFrOF4Z19w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzozODowMVrOF4akmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4Nzk5MQ==", "bodyText": "Temporary?", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394687991", "createdAt": "2020-03-18T23:03:04Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/stream/DistributedSequentialNonRehashStreamTest.java", "diffHunk": "@@ -10,7 +10,7 @@\n  * Verifies stream tests work when rehash is disabled on a sequential stream\n  */\n @Test(groups = \"functional\", testName = \"streams.DistributedSequentialNonRehashStreamTest\")\n-@InCacheMode({ CacheMode.DIST_SYNC, CacheMode.SCATTERED_SYNC })\n+@InCacheMode({ /*CacheMode.DIST_SYNC,*/ CacheMode.SCATTERED_SYNC })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5OTkzMA==", "bodyText": "I am not sure how this got in here.... I didn't even look at that class, lol.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r394699930", "createdAt": "2020-03-18T23:38:01Z", "author": {"login": "wburns"}, "path": "core/src/test/java/org/infinispan/stream/DistributedSequentialNonRehashStreamTest.java", "diffHunk": "@@ -10,7 +10,7 @@\n  * Verifies stream tests work when rehash is disabled on a sequential stream\n  */\n @Test(groups = \"functional\", testName = \"streams.DistributedSequentialNonRehashStreamTest\")\n-@InCacheMode({ CacheMode.DIST_SYNC, CacheMode.SCATTERED_SYNC })\n+@InCacheMode({ /*CacheMode.DIST_SYNC,*/ CacheMode.SCATTERED_SYNC })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4Nzk5MQ=="}, "originalCommit": {"oid": "4730be1a23e42918e2f831d1bbff89fd1f778649"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTIzNjcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/cache/impl/InvocationHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNzoxNDo1NVrOF5JYUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoxMTowM1rOF5aJZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2NjgzMg==", "bodyText": "Still using ctx here", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395466832", "createdAt": "2020-03-20T07:14:55Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/cache/impl/InvocationHelper.java", "diffHunk": "@@ -238,7 +248,7 @@ private Transaction getOngoingTransaction() {\n             throw CompletableFutures.asCompletionException(e);\n          }\n          return result;\n-      });\n+      }, blockingExecutor), nonBlockingExecutor, ctx).toCompletableFuture();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21db4dfaa4eeca00d7ead811823205962d364414"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc0MTU0Mw==", "bodyText": "Yeah forgot to fix, I can change it.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395741543", "createdAt": "2020-03-20T16:11:03Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/cache/impl/InvocationHelper.java", "diffHunk": "@@ -238,7 +248,7 @@ private Transaction getOngoingTransaction() {\n             throw CompletableFutures.asCompletionException(e);\n          }\n          return result;\n-      });\n+      }, blockingExecutor), nonBlockingExecutor, ctx).toCompletableFuture();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2NjgzMg=="}, "originalCommit": {"oid": "21db4dfaa4eeca00d7ead811823205962d364414"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjAzNzQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoxMjoyMlrOF5RR_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoxMDowOVrOF5aHLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5NjI4NQ==", "bodyText": "I would prefer to make the prepare exception the cause and the rollback exception suppressed. I'd also rename innerT to rollbackThrowable and t to prepareThrowable.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395596285", "createdAt": "2020-03-20T12:12:22Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,121 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, t) -> {\n+         if (t != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(t);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, innerT) -> {\n+               // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n+               XAException xe = new XAException(XAException.XA_RBROLLBACK);\n+               if (innerT != null) {\n+                  innerT.addSuppressed(t);\n+                  xe.initCause(innerT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21db4dfaa4eeca00d7ead811823205962d364414"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc0MDk3Mg==", "bodyText": "I am fine with renaming. Technically rollback would be suppressing the prepare if this was a try/finally block instead, which is why I did it like I did.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395740972", "createdAt": "2020-03-20T16:10:09Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,121 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, t) -> {\n+         if (t != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(t);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, innerT) -> {\n+               // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n+               XAException xe = new XAException(XAException.XA_RBROLLBACK);\n+               if (innerT != null) {\n+                  innerT.addSuppressed(t);\n+                  xe.initCause(innerT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5NjI4NQ=="}, "originalCommit": {"oid": "21db4dfaa4eeca00d7ead811823205962d364414"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjUyODQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDozMzowMFrOF5WKhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODo0MjowMFrOF5fT-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3NjI5Mw==", "bodyText": "AFAICT handleRollbackFailure and handleCommitFailure don't need to return a CompletionStage", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395676293", "createdAt": "2020-03-20T14:33:00Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,121 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, t) -> {\n+         if (t != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(t);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, innerT) -> {\n+               // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n+               XAException xe = new XAException(XAException.XA_RBROLLBACK);\n+               if (innerT != null) {\n+                  innerT.addSuppressed(t);\n+                  xe.initCause(innerT);\n+               } else {\n+                  xe.initCause(t);\n+               }\n+               return CompletableFutures.completedExceptionFuture(xe);\n+            });\n+         }\n          if (localTransaction.isReadOnly()) {\n             if (trace) log.tracef(\"Readonly transaction: %s\", localTransaction.getGlobalTransaction());\n             // force a cleanup to release any objects held.  Some TMs don't call commit if it is a READ ONLY tx.  See ISPN-845\n-            commitInternal(ctx);\n-            return XA_RDONLY;\n+            return commitInternal(ctx)\n+                  .thenApply(XA_RDONLY_APPLY);\n          } else {\n             txTable.running().localTransactionPrepared(localTransaction);\n-            return XA_OK;\n+            return XA_OKAY_STAGE;\n          }\n-      } catch (Throwable e) {\n-         if (shuttingDown)\n-            log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n-         else\n-            log.errorProcessingPrepare(e);\n-\n-         //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n-         //after prepare failed.\n-         rollback(localTransaction);\n-         // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n-         XAException xe = new XAException(XAException.XA_RBROLLBACK);\n-         xe.initCause(e);\n-         throw xe;\n-      }\n+      });\n    }\n \n-   public boolean commit(LocalTransaction localTransaction, boolean isOnePhase) throws XAException {\n+   public CompletionStage<Boolean> commit(LocalTransaction localTransaction, boolean isOnePhase) {\n       if (trace) log.tracef(\"Committing transaction %s\", localTransaction.getGlobalTransaction());\n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       if (isOnePhaseCommit(localTransaction) || isOnePhase) {\n-         validateNotMarkedForRollback(localTransaction);\n+         CompletionStage<Boolean> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+         if (markRollbackStage != null) {\n+            return markRollbackStage;\n+         }\n \n          if (trace) log.trace(\"Doing an 1PC prepare call on the interceptor chain\");\n          List<WriteCommand> modifications = localTransaction.getModifications();\n          PrepareCommand command = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), modifications, true);\n          try {\n-            invoker.running().invoke(ctx, command);\n+            return CompletionStages.handleAndCompose(invoker.running().invokeAsync(ctx, command),\n+                  (ignore, t) -> {\n+                     if (t != null) {\n+                        return handleCommitFailure(t, true, ctx);\n+                     }\n+                     return CompletableFutures.completedTrue();\n+                  });\n          } catch (Throwable e) {\n-            handleCommitFailure(e, true, ctx);\n+            return handleCommitFailure(e, true, ctx);\n          }\n-         return true;\n       } else if (!localTransaction.isReadOnly()) {\n-         commitInternal(ctx);\n+         return commitInternal(ctx);\n       }\n-      return false;\n+      return CompletableFutures.completedFalse();\n    }\n \n-   public void rollback(LocalTransaction localTransaction) throws XAException {\n+   public CompletionStage<Void> rollback(LocalTransaction localTransaction) {\n       try {\n-         rollbackInternal(icf.running().createTxInvocationContext(localTransaction));\n+         return CompletionStages.handleAndCompose(rollbackInternal(icf.running().createTxInvocationContext(localTransaction)),\n+               (ignore, t) -> {\n+                  if (t != null) {\n+                     return handleRollbackFailure(t, localTransaction);\n+                  }\n+                  return CompletableFutures.completedNull();\n+               });\n+\n       } catch (Throwable e) {\n-         if (shuttingDown)\n-            log.trace(\"Exception while rolling back, probably because we're shutting down.\");\n-         else\n-            log.errorRollingBack(e);\n-\n-         final Transaction transaction = localTransaction.getTransaction();\n-         //this might be possible if the cache has stopped and TM still holds a reference to the XAResource\n-         if (transaction != null) {\n-            txTable.running().failureCompletingTransaction(transaction);\n-         }\n-         XAException xe = new XAException(XAException.XAER_RMERR);\n-         xe.initCause(e);\n-         throw xe;\n+         return handleRollbackFailure(e, localTransaction);\n+      }\n+   }\n+\n+   private <T> CompletionStage<T> handleRollbackFailure(Throwable t, LocalTransaction localTransaction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczODEyOA==", "bodyText": "They don't, but the users of it require it to be a CompletionStage, so less code overall. :)", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395738128", "createdAt": "2020-03-20T16:05:34Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,121 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, t) -> {\n+         if (t != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(t);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, innerT) -> {\n+               // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n+               XAException xe = new XAException(XAException.XA_RBROLLBACK);\n+               if (innerT != null) {\n+                  innerT.addSuppressed(t);\n+                  xe.initCause(innerT);\n+               } else {\n+                  xe.initCause(t);\n+               }\n+               return CompletableFutures.completedExceptionFuture(xe);\n+            });\n+         }\n          if (localTransaction.isReadOnly()) {\n             if (trace) log.tracef(\"Readonly transaction: %s\", localTransaction.getGlobalTransaction());\n             // force a cleanup to release any objects held.  Some TMs don't call commit if it is a READ ONLY tx.  See ISPN-845\n-            commitInternal(ctx);\n-            return XA_RDONLY;\n+            return commitInternal(ctx)\n+                  .thenApply(XA_RDONLY_APPLY);\n          } else {\n             txTable.running().localTransactionPrepared(localTransaction);\n-            return XA_OK;\n+            return XA_OKAY_STAGE;\n          }\n-      } catch (Throwable e) {\n-         if (shuttingDown)\n-            log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n-         else\n-            log.errorProcessingPrepare(e);\n-\n-         //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n-         //after prepare failed.\n-         rollback(localTransaction);\n-         // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n-         XAException xe = new XAException(XAException.XA_RBROLLBACK);\n-         xe.initCause(e);\n-         throw xe;\n-      }\n+      });\n    }\n \n-   public boolean commit(LocalTransaction localTransaction, boolean isOnePhase) throws XAException {\n+   public CompletionStage<Boolean> commit(LocalTransaction localTransaction, boolean isOnePhase) {\n       if (trace) log.tracef(\"Committing transaction %s\", localTransaction.getGlobalTransaction());\n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       if (isOnePhaseCommit(localTransaction) || isOnePhase) {\n-         validateNotMarkedForRollback(localTransaction);\n+         CompletionStage<Boolean> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+         if (markRollbackStage != null) {\n+            return markRollbackStage;\n+         }\n \n          if (trace) log.trace(\"Doing an 1PC prepare call on the interceptor chain\");\n          List<WriteCommand> modifications = localTransaction.getModifications();\n          PrepareCommand command = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), modifications, true);\n          try {\n-            invoker.running().invoke(ctx, command);\n+            return CompletionStages.handleAndCompose(invoker.running().invokeAsync(ctx, command),\n+                  (ignore, t) -> {\n+                     if (t != null) {\n+                        return handleCommitFailure(t, true, ctx);\n+                     }\n+                     return CompletableFutures.completedTrue();\n+                  });\n          } catch (Throwable e) {\n-            handleCommitFailure(e, true, ctx);\n+            return handleCommitFailure(e, true, ctx);\n          }\n-         return true;\n       } else if (!localTransaction.isReadOnly()) {\n-         commitInternal(ctx);\n+         return commitInternal(ctx);\n       }\n-      return false;\n+      return CompletableFutures.completedFalse();\n    }\n \n-   public void rollback(LocalTransaction localTransaction) throws XAException {\n+   public CompletionStage<Void> rollback(LocalTransaction localTransaction) {\n       try {\n-         rollbackInternal(icf.running().createTxInvocationContext(localTransaction));\n+         return CompletionStages.handleAndCompose(rollbackInternal(icf.running().createTxInvocationContext(localTransaction)),\n+               (ignore, t) -> {\n+                  if (t != null) {\n+                     return handleRollbackFailure(t, localTransaction);\n+                  }\n+                  return CompletableFutures.completedNull();\n+               });\n+\n       } catch (Throwable e) {\n-         if (shuttingDown)\n-            log.trace(\"Exception while rolling back, probably because we're shutting down.\");\n-         else\n-            log.errorRollingBack(e);\n-\n-         final Transaction transaction = localTransaction.getTransaction();\n-         //this might be possible if the cache has stopped and TM still holds a reference to the XAResource\n-         if (transaction != null) {\n-            txTable.running().failureCompletingTransaction(transaction);\n-         }\n-         XAException xe = new XAException(XAException.XAER_RMERR);\n-         xe.initCause(e);\n-         throw xe;\n+         return handleRollbackFailure(e, localTransaction);\n+      }\n+   }\n+\n+   private <T> CompletionStage<T> handleRollbackFailure(Throwable t, LocalTransaction localTransaction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3NjI5Mw=="}, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNjE3MQ==", "bodyText": "If you return void and throw the exception directly, the callers can use handle instead of handleAndCompose", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395826171", "createdAt": "2020-03-20T18:42:00Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,121 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, t) -> {\n+         if (t != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(t);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, innerT) -> {\n+               // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n+               XAException xe = new XAException(XAException.XA_RBROLLBACK);\n+               if (innerT != null) {\n+                  innerT.addSuppressed(t);\n+                  xe.initCause(innerT);\n+               } else {\n+                  xe.initCause(t);\n+               }\n+               return CompletableFutures.completedExceptionFuture(xe);\n+            });\n+         }\n          if (localTransaction.isReadOnly()) {\n             if (trace) log.tracef(\"Readonly transaction: %s\", localTransaction.getGlobalTransaction());\n             // force a cleanup to release any objects held.  Some TMs don't call commit if it is a READ ONLY tx.  See ISPN-845\n-            commitInternal(ctx);\n-            return XA_RDONLY;\n+            return commitInternal(ctx)\n+                  .thenApply(XA_RDONLY_APPLY);\n          } else {\n             txTable.running().localTransactionPrepared(localTransaction);\n-            return XA_OK;\n+            return XA_OKAY_STAGE;\n          }\n-      } catch (Throwable e) {\n-         if (shuttingDown)\n-            log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n-         else\n-            log.errorProcessingPrepare(e);\n-\n-         //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n-         //after prepare failed.\n-         rollback(localTransaction);\n-         // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n-         XAException xe = new XAException(XAException.XA_RBROLLBACK);\n-         xe.initCause(e);\n-         throw xe;\n-      }\n+      });\n    }\n \n-   public boolean commit(LocalTransaction localTransaction, boolean isOnePhase) throws XAException {\n+   public CompletionStage<Boolean> commit(LocalTransaction localTransaction, boolean isOnePhase) {\n       if (trace) log.tracef(\"Committing transaction %s\", localTransaction.getGlobalTransaction());\n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       if (isOnePhaseCommit(localTransaction) || isOnePhase) {\n-         validateNotMarkedForRollback(localTransaction);\n+         CompletionStage<Boolean> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+         if (markRollbackStage != null) {\n+            return markRollbackStage;\n+         }\n \n          if (trace) log.trace(\"Doing an 1PC prepare call on the interceptor chain\");\n          List<WriteCommand> modifications = localTransaction.getModifications();\n          PrepareCommand command = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), modifications, true);\n          try {\n-            invoker.running().invoke(ctx, command);\n+            return CompletionStages.handleAndCompose(invoker.running().invokeAsync(ctx, command),\n+                  (ignore, t) -> {\n+                     if (t != null) {\n+                        return handleCommitFailure(t, true, ctx);\n+                     }\n+                     return CompletableFutures.completedTrue();\n+                  });\n          } catch (Throwable e) {\n-            handleCommitFailure(e, true, ctx);\n+            return handleCommitFailure(e, true, ctx);\n          }\n-         return true;\n       } else if (!localTransaction.isReadOnly()) {\n-         commitInternal(ctx);\n+         return commitInternal(ctx);\n       }\n-      return false;\n+      return CompletableFutures.completedFalse();\n    }\n \n-   public void rollback(LocalTransaction localTransaction) throws XAException {\n+   public CompletionStage<Void> rollback(LocalTransaction localTransaction) {\n       try {\n-         rollbackInternal(icf.running().createTxInvocationContext(localTransaction));\n+         return CompletionStages.handleAndCompose(rollbackInternal(icf.running().createTxInvocationContext(localTransaction)),\n+               (ignore, t) -> {\n+                  if (t != null) {\n+                     return handleRollbackFailure(t, localTransaction);\n+                  }\n+                  return CompletableFutures.completedNull();\n+               });\n+\n       } catch (Throwable e) {\n-         if (shuttingDown)\n-            log.trace(\"Exception while rolling back, probably because we're shutting down.\");\n-         else\n-            log.errorRollingBack(e);\n-\n-         final Transaction transaction = localTransaction.getTransaction();\n-         //this might be possible if the cache has stopped and TM still holds a reference to the XAResource\n-         if (transaction != null) {\n-            txTable.running().failureCompletingTransaction(transaction);\n-         }\n-         XAException xe = new XAException(XAException.XAER_RMERR);\n-         xe.initCause(e);\n-         throw xe;\n+         return handleRollbackFailure(e, localTransaction);\n+      }\n+   }\n+\n+   private <T> CompletionStage<T> handleRollbackFailure(Throwable t, LocalTransaction localTransaction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3NjI5Mw=="}, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjU2NTYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDo0MjoyMlrOF5Wiiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoyNjo0M1rOF5avYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4MjQ0Mw==", "bodyText": "AsyncInterceptorChain.invokeAsync() catches exceptions, so we don't nee the try..catch any more.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395682443", "createdAt": "2020-03-20T14:42:22Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,121 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, t) -> {\n+         if (t != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(t);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, innerT) -> {\n+               // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n+               XAException xe = new XAException(XAException.XA_RBROLLBACK);\n+               if (innerT != null) {\n+                  innerT.addSuppressed(t);\n+                  xe.initCause(innerT);\n+               } else {\n+                  xe.initCause(t);\n+               }\n+               return CompletableFutures.completedExceptionFuture(xe);\n+            });\n+         }\n          if (localTransaction.isReadOnly()) {\n             if (trace) log.tracef(\"Readonly transaction: %s\", localTransaction.getGlobalTransaction());\n             // force a cleanup to release any objects held.  Some TMs don't call commit if it is a READ ONLY tx.  See ISPN-845\n-            commitInternal(ctx);\n-            return XA_RDONLY;\n+            return commitInternal(ctx)\n+                  .thenApply(XA_RDONLY_APPLY);\n          } else {\n             txTable.running().localTransactionPrepared(localTransaction);\n-            return XA_OK;\n+            return XA_OKAY_STAGE;\n          }\n-      } catch (Throwable e) {\n-         if (shuttingDown)\n-            log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n-         else\n-            log.errorProcessingPrepare(e);\n-\n-         //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n-         //after prepare failed.\n-         rollback(localTransaction);\n-         // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n-         XAException xe = new XAException(XAException.XA_RBROLLBACK);\n-         xe.initCause(e);\n-         throw xe;\n-      }\n+      });\n    }\n \n-   public boolean commit(LocalTransaction localTransaction, boolean isOnePhase) throws XAException {\n+   public CompletionStage<Boolean> commit(LocalTransaction localTransaction, boolean isOnePhase) {\n       if (trace) log.tracef(\"Committing transaction %s\", localTransaction.getGlobalTransaction());\n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       if (isOnePhaseCommit(localTransaction) || isOnePhase) {\n-         validateNotMarkedForRollback(localTransaction);\n+         CompletionStage<Boolean> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+         if (markRollbackStage != null) {\n+            return markRollbackStage;\n+         }\n \n          if (trace) log.trace(\"Doing an 1PC prepare call on the interceptor chain\");\n          List<WriteCommand> modifications = localTransaction.getModifications();\n          PrepareCommand command = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), modifications, true);\n          try {\n-            invoker.running().invoke(ctx, command);\n+            return CompletionStages.handleAndCompose(invoker.running().invokeAsync(ctx, command),\n+                  (ignore, t) -> {\n+                     if (t != null) {\n+                        return handleCommitFailure(t, true, ctx);\n+                     }\n+                     return CompletableFutures.completedTrue();\n+                  });\n          } catch (Throwable e) {\n-            handleCommitFailure(e, true, ctx);\n+            return handleCommitFailure(e, true, ctx);\n          }\n-         return true;\n       } else if (!localTransaction.isReadOnly()) {\n-         commitInternal(ctx);\n+         return commitInternal(ctx);\n       }\n-      return false;\n+      return CompletableFutures.completedFalse();\n    }\n \n-   public void rollback(LocalTransaction localTransaction) throws XAException {\n+   public CompletionStage<Void> rollback(LocalTransaction localTransaction) {\n       try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1MTI2NA==", "bodyText": "oh whoops meant to remove that. Trying to keep all the related exceptions in the CompletionStage chain.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395751264", "createdAt": "2020-03-20T16:26:43Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,121 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, t) -> {\n+         if (t != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(t);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, innerT) -> {\n+               // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n+               XAException xe = new XAException(XAException.XA_RBROLLBACK);\n+               if (innerT != null) {\n+                  innerT.addSuppressed(t);\n+                  xe.initCause(innerT);\n+               } else {\n+                  xe.initCause(t);\n+               }\n+               return CompletableFutures.completedExceptionFuture(xe);\n+            });\n+         }\n          if (localTransaction.isReadOnly()) {\n             if (trace) log.tracef(\"Readonly transaction: %s\", localTransaction.getGlobalTransaction());\n             // force a cleanup to release any objects held.  Some TMs don't call commit if it is a READ ONLY tx.  See ISPN-845\n-            commitInternal(ctx);\n-            return XA_RDONLY;\n+            return commitInternal(ctx)\n+                  .thenApply(XA_RDONLY_APPLY);\n          } else {\n             txTable.running().localTransactionPrepared(localTransaction);\n-            return XA_OK;\n+            return XA_OKAY_STAGE;\n          }\n-      } catch (Throwable e) {\n-         if (shuttingDown)\n-            log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n-         else\n-            log.errorProcessingPrepare(e);\n-\n-         //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n-         //after prepare failed.\n-         rollback(localTransaction);\n-         // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n-         XAException xe = new XAException(XAException.XA_RBROLLBACK);\n-         xe.initCause(e);\n-         throw xe;\n-      }\n+      });\n    }\n \n-   public boolean commit(LocalTransaction localTransaction, boolean isOnePhase) throws XAException {\n+   public CompletionStage<Boolean> commit(LocalTransaction localTransaction, boolean isOnePhase) {\n       if (trace) log.tracef(\"Committing transaction %s\", localTransaction.getGlobalTransaction());\n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       if (isOnePhaseCommit(localTransaction) || isOnePhase) {\n-         validateNotMarkedForRollback(localTransaction);\n+         CompletionStage<Boolean> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+         if (markRollbackStage != null) {\n+            return markRollbackStage;\n+         }\n \n          if (trace) log.trace(\"Doing an 1PC prepare call on the interceptor chain\");\n          List<WriteCommand> modifications = localTransaction.getModifications();\n          PrepareCommand command = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), modifications, true);\n          try {\n-            invoker.running().invoke(ctx, command);\n+            return CompletionStages.handleAndCompose(invoker.running().invokeAsync(ctx, command),\n+                  (ignore, t) -> {\n+                     if (t != null) {\n+                        return handleCommitFailure(t, true, ctx);\n+                     }\n+                     return CompletableFutures.completedTrue();\n+                  });\n          } catch (Throwable e) {\n-            handleCommitFailure(e, true, ctx);\n+            return handleCommitFailure(e, true, ctx);\n          }\n-         return true;\n       } else if (!localTransaction.isReadOnly()) {\n-         commitInternal(ctx);\n+         return commitInternal(ctx);\n       }\n-      return false;\n+      return CompletableFutures.completedFalse();\n    }\n \n-   public void rollback(LocalTransaction localTransaction) throws XAException {\n+   public CompletionStage<Void> rollback(LocalTransaction localTransaction) {\n       try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4MjQ0Mw=="}, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjU4NjQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionTable.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDo0NzozMlrOF5WwHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOTozNDozNFrOF5g1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4NTkxOA==", "bodyText": "The exception will be wrapped in a CompletionException anyway, so I don't think we need this exceptionally call. Same for afterCompletion.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395685918", "createdAt": "2020-03-20T14:47:32Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionTable.java", "diffHunk": "@@ -888,35 +892,31 @@ private void updateLastPrunedTxId(final long txId, Address address) {\n       }\n    }\n \n-   public int beforeCompletion(LocalTransaction localTransaction) {\n+   public CompletionStage<Integer> beforeCompletion(LocalTransaction localTransaction) {\n       if (trace)\n          log.tracef(\"beforeCompletion called for %s\", localTransaction);\n-      try {\n-         txCoordinator.prepare(localTransaction);\n-      } catch (XAException e) {\n-         throw new CacheException(\"Could not prepare. \", e);//todo shall we just swallow this exception?\n-      }\n-      return 0;\n+      return txCoordinator.prepare(localTransaction)\n+            .exceptionally(t -> {\n+                  throw new CacheException(\"Could not prepare. \", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1MzgyNg==", "bodyText": "I was trying to keep the exceptions the same as before. I wasn't sure if we unwrapped it and then checked it later.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395753826", "createdAt": "2020-03-20T16:30:33Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionTable.java", "diffHunk": "@@ -888,35 +892,31 @@ private void updateLastPrunedTxId(final long txId, Address address) {\n       }\n    }\n \n-   public int beforeCompletion(LocalTransaction localTransaction) {\n+   public CompletionStage<Integer> beforeCompletion(LocalTransaction localTransaction) {\n       if (trace)\n          log.tracef(\"beforeCompletion called for %s\", localTransaction);\n-      try {\n-         txCoordinator.prepare(localTransaction);\n-      } catch (XAException e) {\n-         throw new CacheException(\"Could not prepare. \", e);//todo shall we just swallow this exception?\n-      }\n-      return 0;\n+      return txCoordinator.prepare(localTransaction)\n+            .exceptionally(t -> {\n+                  throw new CacheException(\"Could not prepare. \", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4NTkxOA=="}, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1Mzk5OQ==", "bodyText": "I think we can evaluate changing this later if we want to integrate this today.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395753999", "createdAt": "2020-03-20T16:30:50Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionTable.java", "diffHunk": "@@ -888,35 +892,31 @@ private void updateLastPrunedTxId(final long txId, Address address) {\n       }\n    }\n \n-   public int beforeCompletion(LocalTransaction localTransaction) {\n+   public CompletionStage<Integer> beforeCompletion(LocalTransaction localTransaction) {\n       if (trace)\n          log.tracef(\"beforeCompletion called for %s\", localTransaction);\n-      try {\n-         txCoordinator.prepare(localTransaction);\n-      } catch (XAException e) {\n-         throw new CacheException(\"Could not prepare. \", e);//todo shall we just swallow this exception?\n-      }\n-      return 0;\n+      return txCoordinator.prepare(localTransaction)\n+            .exceptionally(t -> {\n+                  throw new CacheException(\"Could not prepare. \", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4NTkxOA=="}, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1MTA2NQ==", "bodyText": "Ok", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395851065", "createdAt": "2020-03-20T19:34:34Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionTable.java", "diffHunk": "@@ -888,35 +892,31 @@ private void updateLastPrunedTxId(final long txId, Address address) {\n       }\n    }\n \n-   public int beforeCompletion(LocalTransaction localTransaction) {\n+   public CompletionStage<Integer> beforeCompletion(LocalTransaction localTransaction) {\n       if (trace)\n          log.tracef(\"beforeCompletion called for %s\", localTransaction);\n-      try {\n-         txCoordinator.prepare(localTransaction);\n-      } catch (XAException e) {\n-         throw new CacheException(\"Could not prepare. \", e);//todo shall we just swallow this exception?\n-      }\n-      return 0;\n+      return txCoordinator.prepare(localTransaction)\n+            .exceptionally(t -> {\n+                  throw new CacheException(\"Could not prepare. \", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4NTkxOA=="}, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjY0MzEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/transaction/xa/TransactionXaAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTowMDo0NFrOF5XUkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjo0MjowNFrOF5bT4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5NTI0OQ==", "bodyText": "Could use CompletableFutures.COMPLETED_NULL.thenComposeAsync(...) to avoid the double wrapping the result.\nMaybe it's worth adding a static method in CompletableFutures.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395695249", "createdAt": "2020-03-20T15:00:44Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/xa/TransactionXaAdapter.java", "diffHunk": "@@ -57,23 +66,23 @@ public TransactionXaAdapter(XaTransactionTable txTable) {\n     */\n    @Override\n    public int prepare(Xid externalXid) throws XAException {\n-      return txTable.prepare(externalXid);\n+      return joinAndRethrowXAException(CompletableFuture.supplyAsync(() -> txTable.prepare(externalXid), executor));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc2MDYwOQ==", "bodyText": "Ah, good one. Yeah, I thought there was a better way. Let me fix this. We may want it in CompletionStages though.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395760609", "createdAt": "2020-03-20T16:42:04Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/xa/TransactionXaAdapter.java", "diffHunk": "@@ -57,23 +66,23 @@ public TransactionXaAdapter(XaTransactionTable txTable) {\n     */\n    @Override\n    public int prepare(Xid externalXid) throws XAException {\n-      return txTable.prepare(externalXid);\n+      return joinAndRethrowXAException(CompletableFuture.supplyAsync(() -> txTable.prepare(externalXid), executor));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5NTI0OQ=="}, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjY5MDM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/transaction/xa/XaTransactionTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNToxMjoxNVrOF5Xyaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjo1MDowNlrOF5bm7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwMjg5MQ==", "bodyText": "Nitpicking, but I would prefer wrapping before prepareStage, or even\n  return prepareStage.thenCompose(ignore -> txCoordinator.commit(localTransaction, false))\n                     .thenApply(committedInOnePhase -> {", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395702891", "createdAt": "2020-03-20T15:12:15Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/xa/XaTransactionTable.java", "diffHunk": "@@ -100,32 +104,47 @@ public int getLocalTxCount() {\n       return xid2LocalTx.size();\n    }\n \n-   public int prepare(Xid externalXid) throws XAException {\n+   public CompletionStage<Integer> prepare(Xid externalXid) {\n       Xid xid = convertXid(externalXid);\n       LocalXaTransaction localTransaction = getLocalTransactionAndValidate(xid);\n+      if (localTransaction == null) {\n+         return CompletableFutures.completedExceptionFuture(new XAException(XAException.XAER_NOTA));\n+      }\n       return txCoordinator.prepare(localTransaction);\n    }\n \n-   public void commit(Xid externalXid, boolean isOnePhase) throws XAException {\n+   public CompletionStage<Void> commit(Xid externalXid, boolean isOnePhase) {\n       Xid xid = convertXid(externalXid);\n       LocalXaTransaction localTransaction = getLocalTransactionAndValidate(xid);\n-      boolean committedInOnePhase;\n+      if (localTransaction == null) {\n+         return CompletableFutures.completedExceptionFuture(new XAException(XAException.XAER_NOTA));\n+      }\n+      CompletionStage<?> prepareStage;\n       if (isOnePhase) {\n          //isOnePhase being true means that we're the only participant in the distributed transaction and TM does the\n          //1PC optimization. We run a 2PC though, as running only 1PC has a high chance of leaving the cluster in\n          //inconsistent state.\n-         txCoordinator.prepare(localTransaction);\n+         prepareStage = txCoordinator.prepare(localTransaction);\n+      } else {\n+         prepareStage = CompletableFutures.completedNull();\n       }\n-      committedInOnePhase = txCoordinator.commit(localTransaction, false);\n-      forgetSuccessfullyCompletedTransaction(recoveryManager, localTransaction.getXid(), localTransaction,\n-            committedInOnePhase);\n+      CompletionStage<Boolean> commitStage = prepareStage\n+            .thenCompose(ignore -> txCoordinator.commit(localTransaction, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc2NTQ4Nw==", "bodyText": "Changed to the suggested code.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395765487", "createdAt": "2020-03-20T16:50:06Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/xa/XaTransactionTable.java", "diffHunk": "@@ -100,32 +104,47 @@ public int getLocalTxCount() {\n       return xid2LocalTx.size();\n    }\n \n-   public int prepare(Xid externalXid) throws XAException {\n+   public CompletionStage<Integer> prepare(Xid externalXid) {\n       Xid xid = convertXid(externalXid);\n       LocalXaTransaction localTransaction = getLocalTransactionAndValidate(xid);\n+      if (localTransaction == null) {\n+         return CompletableFutures.completedExceptionFuture(new XAException(XAException.XAER_NOTA));\n+      }\n       return txCoordinator.prepare(localTransaction);\n    }\n \n-   public void commit(Xid externalXid, boolean isOnePhase) throws XAException {\n+   public CompletionStage<Void> commit(Xid externalXid, boolean isOnePhase) {\n       Xid xid = convertXid(externalXid);\n       LocalXaTransaction localTransaction = getLocalTransactionAndValidate(xid);\n-      boolean committedInOnePhase;\n+      if (localTransaction == null) {\n+         return CompletableFutures.completedExceptionFuture(new XAException(XAException.XAER_NOTA));\n+      }\n+      CompletionStage<?> prepareStage;\n       if (isOnePhase) {\n          //isOnePhase being true means that we're the only participant in the distributed transaction and TM does the\n          //1PC optimization. We run a 2PC though, as running only 1PC has a high chance of leaving the cluster in\n          //inconsistent state.\n-         txCoordinator.prepare(localTransaction);\n+         prepareStage = txCoordinator.prepare(localTransaction);\n+      } else {\n+         prepareStage = CompletableFutures.completedNull();\n       }\n-      committedInOnePhase = txCoordinator.commit(localTransaction, false);\n-      forgetSuccessfullyCompletedTransaction(recoveryManager, localTransaction.getXid(), localTransaction,\n-            committedInOnePhase);\n+      CompletionStage<Boolean> commitStage = prepareStage\n+            .thenCompose(ignore -> txCoordinator.commit(localTransaction, false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwMjg5MQ=="}, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjcxMTUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/transaction/xa/XaTransactionTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNToxNzowNFrOF5X_jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjo0Mjo0MlrOF5bVSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwNjI1Mg==", "bodyText": "Since we know 100% xe is not a CompletionException, I would find throw new CompletionException(xe) clearer.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395706252", "createdAt": "2020-03-20T15:17:04Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/xa/XaTransactionTable.java", "diffHunk": "@@ -153,23 +172,23 @@ void end(LocalXaTransaction localTransaction) {\n          log.tracef(\"end called on tx %s(%s)\", localTransaction.getGlobalTransaction(), cacheName);\n    }\n \n-   void forget(Xid externalXid) throws XAException {\n+   CompletionStage<Void> forget(Xid externalXid) {\n       Xid xid = convertXid(externalXid);\n       if (trace)\n          log.tracef(\"forget called for xid %s\", xid);\n-      try {\n-         if (isRecoveryEnabled()) {\n-            recoveryManager.removeRecoveryInformation(null, xid, true, null, false);\n-         } else {\n-            if (trace)\n-               log.trace(\"Recovery not enabled\");\n-         }\n-      } catch (Exception e) {\n-         log.warnExceptionRemovingRecovery(e);\n-         XAException xe = new XAException(XAException.XAER_RMERR);\n-         xe.initCause(e);\n-         throw xe;\n+      if (isRecoveryEnabled()) {\n+         return recoveryManager.removeRecoveryInformation(null, xid, null, false)\n+               .exceptionally(t -> {\n+                  log.warnExceptionRemovingRecovery(t);\n+                  XAException xe = new XAException(XAException.XAER_RMERR);\n+                  xe.initCause(t);\n+                  throw CompletableFutures.asCompletionException(xe);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc2MDk3MQ==", "bodyText": "Okay.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395760971", "createdAt": "2020-03-20T16:42:42Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/xa/XaTransactionTable.java", "diffHunk": "@@ -153,23 +172,23 @@ void end(LocalXaTransaction localTransaction) {\n          log.tracef(\"end called on tx %s(%s)\", localTransaction.getGlobalTransaction(), cacheName);\n    }\n \n-   void forget(Xid externalXid) throws XAException {\n+   CompletionStage<Void> forget(Xid externalXid) {\n       Xid xid = convertXid(externalXid);\n       if (trace)\n          log.tracef(\"forget called for xid %s\", xid);\n-      try {\n-         if (isRecoveryEnabled()) {\n-            recoveryManager.removeRecoveryInformation(null, xid, true, null, false);\n-         } else {\n-            if (trace)\n-               log.trace(\"Recovery not enabled\");\n-         }\n-      } catch (Exception e) {\n-         log.warnExceptionRemovingRecovery(e);\n-         XAException xe = new XAException(XAException.XAER_RMERR);\n-         xe.initCause(e);\n-         throw xe;\n+      if (isRecoveryEnabled()) {\n+         return recoveryManager.removeRecoveryInformation(null, xid, null, false)\n+               .exceptionally(t -> {\n+                  log.warnExceptionRemovingRecovery(t);\n+                  XAException xe = new XAException(XAException.XAER_RMERR);\n+                  xe.initCause(t);\n+                  throw CompletableFutures.asCompletionException(xe);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwNjI1Mg=="}, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjcyMzQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/transaction/xa/XaTransactionTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNToxOTozOFrOF5YGzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjo0NDo0NFrOF5baZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwODEwOA==", "bodyText": "The name is outdated, there's no validation, so I would suggest inlining the method.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395708108", "createdAt": "2020-03-20T15:19:38Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/xa/XaTransactionTable.java", "diffHunk": "@@ -180,20 +199,21 @@ private void forgetSuccessfullyCompletedTransaction(RecoveryManager recoveryMana\n          LocalXaTransaction localTransaction, boolean committedInOnePhase) {\n       final GlobalTransaction gtx = localTransaction.getGlobalTransaction();\n       if (isRecoveryEnabled()) {\n-         recoveryManager.removeRecoveryInformation(localTransaction.getRemoteLocksAcquired(), xid, false, gtx,\n+         // TODO: this should call a different method that doesn't receive an ack\n+         recoveryManager.removeRecoveryInformation(localTransaction.getRemoteLocksAcquired(), xid, gtx,\n                partitionHandlingManager.isTransactionPartiallyCommitted(gtx));\n          removeLocalTransaction(localTransaction);\n       } else {\n          releaseLocksForCompletedTransaction(localTransaction, committedInOnePhase);\n       }\n    }\n \n-   private LocalXaTransaction getLocalTransactionAndValidate(Xid xid) throws XAException {\n+   private LocalXaTransaction getLocalTransactionAndValidate(Xid xid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc2MjI3Nw==", "bodyText": "Sure.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395762277", "createdAt": "2020-03-20T16:44:44Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/xa/XaTransactionTable.java", "diffHunk": "@@ -180,20 +199,21 @@ private void forgetSuccessfullyCompletedTransaction(RecoveryManager recoveryMana\n          LocalXaTransaction localTransaction, boolean committedInOnePhase) {\n       final GlobalTransaction gtx = localTransaction.getGlobalTransaction();\n       if (isRecoveryEnabled()) {\n-         recoveryManager.removeRecoveryInformation(localTransaction.getRemoteLocksAcquired(), xid, false, gtx,\n+         // TODO: this should call a different method that doesn't receive an ack\n+         recoveryManager.removeRecoveryInformation(localTransaction.getRemoteLocksAcquired(), xid, gtx,\n                partitionHandlingManager.isTransactionPartiallyCommitted(gtx));\n          removeLocalTransaction(localTransaction);\n       } else {\n          releaseLocksForCompletedTransaction(localTransaction, committedInOnePhase);\n       }\n    }\n \n-   private LocalXaTransaction getLocalTransactionAndValidate(Xid xid) throws XAException {\n+   private LocalXaTransaction getLocalTransactionAndValidate(Xid xid) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwODEwOA=="}, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mjc2Mzc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/transaction/xa/recovery/RecoveryManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNToyOToxOFrOF5YgQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjo0ODoyNFrOF5bi4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcxNDYyNg==", "bodyText": "I think it's safe to remove the local recovery info in the caller thread and then return the stage.\nSlightly off-topic, I've been looking at RecoveryAwareTransactionTable.removeRemoteTransaction and it seems horribly inefficient. It should only iterate over the transactions when there the GlobalTransaction is not available.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395714626", "createdAt": "2020-03-20T15:29:18Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/xa/recovery/RecoveryManagerImpl.java", "diffHunk": "@@ -128,38 +130,43 @@ public RecoveryIterator getPreparedTransactionsFromCluster() {\n    }\n \n    @Override\n-   public void removeRecoveryInformation(Collection<Address> lockOwners, Xid xid, boolean sync, GlobalTransaction gtx,\n+   public CompletionStage<Void> removeRecoveryInformation(Collection<Address> lockOwners, Xid xid, GlobalTransaction gtx,\n                                          boolean fromCluster) {\n       log.tracef(\"Forgetting tx information for %s\", gtx);\n       //todo make sure this gets broad casted or at least flushed\n       if (rpcManager != null && !fromCluster) {\n          TxCompletionNotificationCommand ftc = commandFactory.buildTxCompletionNotificationCommand(xid, gtx);\n-         sendTxCompletionNotification(lockOwners, ftc, sync);\n+         return sendTxCompletionNotification(lockOwners, ftc)\n+               .thenRun(() -> removeRecoveryInformation(xid));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc2NDQ1MQ==", "bodyText": "I can try that.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395764451", "createdAt": "2020-03-20T16:48:24Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/xa/recovery/RecoveryManagerImpl.java", "diffHunk": "@@ -128,38 +130,43 @@ public RecoveryIterator getPreparedTransactionsFromCluster() {\n    }\n \n    @Override\n-   public void removeRecoveryInformation(Collection<Address> lockOwners, Xid xid, boolean sync, GlobalTransaction gtx,\n+   public CompletionStage<Void> removeRecoveryInformation(Collection<Address> lockOwners, Xid xid, GlobalTransaction gtx,\n                                          boolean fromCluster) {\n       log.tracef(\"Forgetting tx information for %s\", gtx);\n       //todo make sure this gets broad casted or at least flushed\n       if (rpcManager != null && !fromCluster) {\n          TxCompletionNotificationCommand ftc = commandFactory.buildTxCompletionNotificationCommand(xid, gtx);\n-         sendTxCompletionNotification(lockOwners, ftc, sync);\n+         return sendTxCompletionNotification(lockOwners, ftc)\n+               .thenRun(() -> removeRecoveryInformation(xid));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcxNDYyNg=="}, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjgyNjY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/transaction/xa/recovery/RecoveryManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo0NToyOVrOF5ZIzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjo0NzozNFrOF5bg-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyNTAwNQ==", "bodyText": "IMO this is too abstract, it wouldn't be much longer if everything was inlined:\n      GlobalTransaction gtx = localTx.getGlobalTransaction();\n      if (commit) {\n         localTx.clearLookedUpEntries();\n         return txCoordinator.prepare(localTx, true)\n                             .thenCompose(ignore -> txCoordinator.commit(localTx, false))\n                             .thenCompose(ignore -> removeRecoveryInformation(null, xid, gtx, false))\n                             .thenApply(ignore -> \"Commit successful!\")\n                             .exceptionally(t -> {\n                                log.warnCouldNotCommitLocalTx(localTx, t);\n                                return \"Could not commit transaction \" + xid + \" : \" + t.getMessage();\n                             });\n      } else {\n         return txCoordinator.rollback(localTx)\n                             .thenCompose(ignore -> removeRecoveryInformation(null, xid, gtx, false))\n                             .thenApply(ignore -> \"Rollback successful\")\n                             .exceptionally(t -> {\n                                log.warnCouldNotRollbackLocalTx(localTx, t);\n                                return \"Could not rollback transaction \" + xid + \" : \" + t.getMessage();\n                             });\n      }", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395725005", "createdAt": "2020-03-20T15:45:29Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/xa/recovery/RecoveryManagerImpl.java", "diffHunk": "@@ -305,26 +312,29 @@ public String forceTransactionCompletion(Xid xid, boolean commit) {\n       }\n    }\n \n-   private String completeTransaction(LocalTransaction localTx, boolean commit, Xid xid) {\n+   private CompletionStage<String> completeTransaction(LocalTransaction localTx, boolean commit, Xid xid) {\n+      CompletionStage<?> stage;\n+      Function<Throwable, String> errorTranslation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc2Mzk2MQ==", "bodyText": "Sure.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395763961", "createdAt": "2020-03-20T16:47:34Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/xa/recovery/RecoveryManagerImpl.java", "diffHunk": "@@ -305,26 +312,29 @@ public String forceTransactionCompletion(Xid xid, boolean commit) {\n       }\n    }\n \n-   private String completeTransaction(LocalTransaction localTx, boolean commit, Xid xid) {\n+   private CompletionStage<String> completeTransaction(LocalTransaction localTx, boolean commit, Xid xid) {\n+      CompletionStage<?> stage;\n+      Function<Throwable, String> errorTranslation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyNTAwNQ=="}, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mjg3NjY5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/commands/GetAllCommandNodeCrashTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo1ODoxMFrOF5Zppw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjo0NTo0N1rOF5bc3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMzQxNQ==", "bodyText": "It's so weird that it wasn't a problem before, I have to debug the test to see how it's passing on master :)", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395733415", "createdAt": "2020-03-20T15:58:10Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/commands/GetAllCommandNodeCrashTest.java", "diffHunk": "@@ -41,6 +43,7 @@ public void test() throws Exception {\n       cache(2).put(key, \"value\");\n \n       ControlledRpcManager rpcManager = ControlledRpcManager.replaceRpcManager(cache(2));\n+      rpcManager.excludeCommands(StateResponseCommand.class, StateTransferStartCommand.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc2MjkxMA==", "bodyText": "Yeah, I agree. But I wasn't quite sure what was going on.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395762910", "createdAt": "2020-03-20T16:45:47Z", "author": {"login": "wburns"}, "path": "core/src/test/java/org/infinispan/commands/GetAllCommandNodeCrashTest.java", "diffHunk": "@@ -41,6 +43,7 @@ public void test() throws Exception {\n       cache(2).put(key, \"value\");\n \n       ControlledRpcManager rpcManager = ControlledRpcManager.replaceRpcManager(cache(2));\n+      rpcManager.excludeCommands(StateResponseCommand.class, StateTransferStartCommand.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMzQxNQ=="}, "originalCommit": {"oid": "fdefde6f70556b8d6666f4038d0085bfadeffb0b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzQyNjY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODo0MDowNFrOF5fQSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOTozMzoxMFrOF5gyxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNTIyNg==", "bodyText": "No need for handleAndCompose", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395825226", "createdAt": "2020-03-20T18:40:04Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,116 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, prepareThrowable) -> {\n+         if (prepareThrowable != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(prepareThrowable);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, rollbackThrowable) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7010d9595ad27759c856085b70a23cdb08037080"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzNTIyOQ==", "bodyText": "Not sure, why. We need to handle the case when it was not an error to wrap it with an XAException still. And we want to still catch the rollback exception to supress or rethrow that.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395835229", "createdAt": "2020-03-20T18:59:59Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,116 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, prepareThrowable) -> {\n+         if (prepareThrowable != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(prepareThrowable);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, rollbackThrowable) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNTIyNg=="}, "originalCommit": {"oid": "7010d9595ad27759c856085b70a23cdb08037080"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0MjIyMQ==", "bodyText": "Yes, but none of those need to return a CompletionStage, so you can use handle instead of handleAndCompose.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395842221", "createdAt": "2020-03-20T19:14:54Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,116 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, prepareThrowable) -> {\n+         if (prepareThrowable != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(prepareThrowable);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, rollbackThrowable) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNTIyNg=="}, "originalCommit": {"oid": "7010d9595ad27759c856085b70a23cdb08037080"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0NTM3MA==", "bodyText": "I was trying to keep all the exceptions as bare XAException. If I do the other I would have to use CompletionException wrapping XAException and all callers would have to pay attention to that including TransactionXAAdapter, but I can do that.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395845370", "createdAt": "2020-03-20T19:22:00Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,116 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, prepareThrowable) -> {\n+         if (prepareThrowable != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(prepareThrowable);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, rollbackThrowable) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNTIyNg=="}, "originalCommit": {"oid": "7010d9595ad27759c856085b70a23cdb08037080"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0ODMzMQ==", "bodyText": "Actually I don't feel comfortable changing this right now. I can revisit later if we need.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395848331", "createdAt": "2020-03-20T19:28:27Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,116 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, prepareThrowable) -> {\n+         if (prepareThrowable != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(prepareThrowable);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, rollbackThrowable) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNTIyNg=="}, "originalCommit": {"oid": "7010d9595ad27759c856085b70a23cdb08037080"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1MDQzOQ==", "bodyText": "I was trying to keep all the exceptions as bare XAException. If I do the other I would have to use CompletionException wrapping XAException and all callers would have to pay attention to that including TransactionXAAdapter, but I can do that.\n\nNot sure what you mean. When you do CompletableFuture.join() it will wrap the exception in a CompletionStage anyway, so you have to be prepared to extract the exception with CompletableFutures.extractException.\nBut I'm ok with revisiting this later.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395850439", "createdAt": "2020-03-20T19:33:10Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,116 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, prepareThrowable) -> {\n+         if (prepareThrowable != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(prepareThrowable);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, rollbackThrowable) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNTIyNg=="}, "originalCommit": {"oid": "7010d9595ad27759c856085b70a23cdb08037080"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzQyODkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODo0MDo0NlrOF5fRuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOTowMDoyNFrOF5f4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNTU5NQ==", "bodyText": "No need for try..catch", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395825595", "createdAt": "2020-03-20T18:40:46Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,116 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, prepareThrowable) -> {\n+         if (prepareThrowable != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(prepareThrowable);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, rollbackThrowable) -> {\n+               // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n+               XAException xe = new XAException(XAException.XA_RBROLLBACK);\n+               if (rollbackThrowable != null) {\n+                  rollbackThrowable.addSuppressed(prepareThrowable);\n+                  xe.initCause(rollbackThrowable);\n+               } else {\n+                  xe.initCause(prepareThrowable);\n+               }\n+               return CompletableFutures.completedExceptionFuture(xe);\n+            });\n+         }\n          if (localTransaction.isReadOnly()) {\n             if (trace) log.tracef(\"Readonly transaction: %s\", localTransaction.getGlobalTransaction());\n             // force a cleanup to release any objects held.  Some TMs don't call commit if it is a READ ONLY tx.  See ISPN-845\n-            commitInternal(ctx);\n-            return XA_RDONLY;\n+            return commitInternal(ctx)\n+                  .thenApply(XA_RDONLY_APPLY);\n          } else {\n             txTable.running().localTransactionPrepared(localTransaction);\n-            return XA_OK;\n+            return XA_OKAY_STAGE;\n          }\n-      } catch (Throwable e) {\n-         if (shuttingDown)\n-            log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n-         else\n-            log.errorProcessingPrepare(e);\n-\n-         //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n-         //after prepare failed.\n-         rollback(localTransaction);\n-         // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n-         XAException xe = new XAException(XAException.XA_RBROLLBACK);\n-         xe.initCause(e);\n-         throw xe;\n-      }\n+      });\n    }\n \n-   public boolean commit(LocalTransaction localTransaction, boolean isOnePhase) throws XAException {\n+   public CompletionStage<Boolean> commit(LocalTransaction localTransaction, boolean isOnePhase) {\n       if (trace) log.tracef(\"Committing transaction %s\", localTransaction.getGlobalTransaction());\n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       if (isOnePhaseCommit(localTransaction) || isOnePhase) {\n-         validateNotMarkedForRollback(localTransaction);\n+         CompletionStage<Boolean> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+         if (markRollbackStage != null) {\n+            return markRollbackStage;\n+         }\n \n          if (trace) log.trace(\"Doing an 1PC prepare call on the interceptor chain\");\n          List<WriteCommand> modifications = localTransaction.getModifications();\n          PrepareCommand command = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), modifications, true);\n          try {\n-            invoker.running().invoke(ctx, command);\n+            return CompletionStages.handleAndCompose(invoker.running().invokeAsync(ctx, command),\n+                  (ignore, t) -> {\n+                     if (t != null) {\n+                        return handleCommitFailure(t, true, ctx);\n+                     }\n+                     return CompletableFutures.completedTrue();\n+                  });\n          } catch (Throwable e) {\n-            handleCommitFailure(e, true, ctx);\n+            return handleCommitFailure(e, true, ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7010d9595ad27759c856085b70a23cdb08037080"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzNTQ0MQ==", "bodyText": "+1, yeah I didn't go back and double check I removed all of them.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395835441", "createdAt": "2020-03-20T19:00:24Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/impl/TransactionCoordinator.java", "diffHunk": "@@ -99,92 +107,116 @@ public PrepareCommand createPrepareCommand(GlobalTransaction gtx, List<WriteComm\n       }\n    }\n \n-   public final int prepare(LocalTransaction localTransaction) throws XAException {\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction) {\n       return prepare(localTransaction, false);\n    }\n \n-   public final int prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) throws XAException {\n-      validateNotMarkedForRollback(localTransaction);\n+   public final CompletionStage<Integer> prepare(LocalTransaction localTransaction, boolean replayEntryWrapping) {\n+      CompletionStage<Integer> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+      if (markRollbackStage != null) {\n+         return markRollbackStage;\n+      }\n \n       if (isOnePhaseCommit(localTransaction)) {\n          if (trace) log.tracef(\"Received prepare for tx: %s. Skipping call as 1PC will be used.\", localTransaction);\n-         return XA_OK;\n+         return XA_OKAY_STAGE;\n       }\n \n       PrepareCommand prepareCommand = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), localTransaction.getModifications(), false);\n       if (trace) log.tracef(\"Sending prepare command through the chain: %s\", prepareCommand);\n \n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       prepareCommand.setReplayEntryWrapping(replayEntryWrapping);\n-      try {\n-         invoker.running().invoke(ctx, prepareCommand);\n+      CompletionStage<Object> prepareStage = invoker.running().invokeAsync(ctx, prepareCommand);\n+      return CompletionStages.handleAndCompose(prepareStage, (ignore, prepareThrowable) -> {\n+         if (prepareThrowable != null) {\n+            if (shuttingDown)\n+               log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n+            else\n+               log.errorProcessingPrepare(prepareThrowable);\n+\n+            //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n+            //after prepare failed.\n+            return CompletionStages.handleAndCompose(rollback(localTransaction), (ignore2, rollbackThrowable) -> {\n+               // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n+               XAException xe = new XAException(XAException.XA_RBROLLBACK);\n+               if (rollbackThrowable != null) {\n+                  rollbackThrowable.addSuppressed(prepareThrowable);\n+                  xe.initCause(rollbackThrowable);\n+               } else {\n+                  xe.initCause(prepareThrowable);\n+               }\n+               return CompletableFutures.completedExceptionFuture(xe);\n+            });\n+         }\n          if (localTransaction.isReadOnly()) {\n             if (trace) log.tracef(\"Readonly transaction: %s\", localTransaction.getGlobalTransaction());\n             // force a cleanup to release any objects held.  Some TMs don't call commit if it is a READ ONLY tx.  See ISPN-845\n-            commitInternal(ctx);\n-            return XA_RDONLY;\n+            return commitInternal(ctx)\n+                  .thenApply(XA_RDONLY_APPLY);\n          } else {\n             txTable.running().localTransactionPrepared(localTransaction);\n-            return XA_OK;\n+            return XA_OKAY_STAGE;\n          }\n-      } catch (Throwable e) {\n-         if (shuttingDown)\n-            log.trace(\"Exception while preparing back, probably because we're shutting down.\");\n-         else\n-            log.errorProcessingPrepare(e);\n-\n-         //rollback transaction before throwing the exception as there's no guarantee the TM calls XAResource.rollback\n-         //after prepare failed.\n-         rollback(localTransaction);\n-         // XA_RBROLLBACK tells the TM that we've rolled back already: the TM shouldn't call rollback after this.\n-         XAException xe = new XAException(XAException.XA_RBROLLBACK);\n-         xe.initCause(e);\n-         throw xe;\n-      }\n+      });\n    }\n \n-   public boolean commit(LocalTransaction localTransaction, boolean isOnePhase) throws XAException {\n+   public CompletionStage<Boolean> commit(LocalTransaction localTransaction, boolean isOnePhase) {\n       if (trace) log.tracef(\"Committing transaction %s\", localTransaction.getGlobalTransaction());\n       LocalTxInvocationContext ctx = icf.running().createTxInvocationContext(localTransaction);\n       if (isOnePhaseCommit(localTransaction) || isOnePhase) {\n-         validateNotMarkedForRollback(localTransaction);\n+         CompletionStage<Boolean> markRollbackStage = validateNotMarkedForRollback(localTransaction);\n+         if (markRollbackStage != null) {\n+            return markRollbackStage;\n+         }\n \n          if (trace) log.trace(\"Doing an 1PC prepare call on the interceptor chain\");\n          List<WriteCommand> modifications = localTransaction.getModifications();\n          PrepareCommand command = commandCreator.createPrepareCommand(localTransaction.getGlobalTransaction(), modifications, true);\n          try {\n-            invoker.running().invoke(ctx, command);\n+            return CompletionStages.handleAndCompose(invoker.running().invokeAsync(ctx, command),\n+                  (ignore, t) -> {\n+                     if (t != null) {\n+                        return handleCommitFailure(t, true, ctx);\n+                     }\n+                     return CompletableFutures.completedTrue();\n+                  });\n          } catch (Throwable e) {\n-            handleCommitFailure(e, true, ctx);\n+            return handleCommitFailure(e, true, ctx);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNTU5NQ=="}, "originalCommit": {"oid": "7010d9595ad27759c856085b70a23cdb08037080"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzQ2NjQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/transaction/xa/TransactionXaAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODo1MzoyOVrOF5fqfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOTowMDo1OFrOF5f5XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzMTkzMg==", "bodyText": "Could have moved more common code here, e.g.\n  return CompletionStages.join(CompletableFutures.completedNull()\n        .thenComposeAsync(consumer, executor));", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395831932", "createdAt": "2020-03-20T18:53:29Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/xa/TransactionXaAdapter.java", "diffHunk": "@@ -177,4 +191,16 @@ public boolean equals(Object o) {\n    private boolean isFlag(int value, int flag) {\n       return (value & flag) != 0;\n    }\n+\n+   private <T> T joinAndRethrowXAException(CompletionStage<T> stage) throws XAException {\n+      try {\n+         return CompletionStages.join(stage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7010d9595ad27759c856085b70a23cdb08037080"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzNTc0MQ==", "bodyText": "Sure.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395835741", "createdAt": "2020-03-20T19:00:58Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/xa/TransactionXaAdapter.java", "diffHunk": "@@ -177,4 +191,16 @@ public boolean equals(Object o) {\n    private boolean isFlag(int value, int flag) {\n       return (value & flag) != 0;\n    }\n+\n+   private <T> T joinAndRethrowXAException(CompletionStage<T> stage) throws XAException {\n+      try {\n+         return CompletionStages.join(stage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzMTkzMg=="}, "originalCommit": {"oid": "7010d9595ad27759c856085b70a23cdb08037080"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzU0OTE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/transaction/xa/recovery/RecoveryManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOToyMjozMVrOF5gf1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOToyNzoxOFrOF5goaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0NTU4OA==", "bodyText": "Don't need to wait for the tx completion responses before removing the local info here either, although since removing the local info is expensive you could still send the command first.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395845588", "createdAt": "2020-03-20T19:22:31Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/transaction/xa/recovery/RecoveryManagerImpl.java", "diffHunk": "@@ -128,38 +129,43 @@ public RecoveryIterator getPreparedTransactionsFromCluster() {\n    }\n \n    @Override\n-   public void removeRecoveryInformation(Collection<Address> lockOwners, Xid xid, boolean sync, GlobalTransaction gtx,\n+   public CompletionStage<Void> removeRecoveryInformation(Collection<Address> lockOwners, Xid xid, GlobalTransaction gtx,\n                                          boolean fromCluster) {\n       log.tracef(\"Forgetting tx information for %s\", gtx);\n       //todo make sure this gets broad casted or at least flushed\n       if (rpcManager != null && !fromCluster) {\n          TxCompletionNotificationCommand ftc = commandFactory.buildTxCompletionNotificationCommand(xid, gtx);\n-         sendTxCompletionNotification(lockOwners, ftc, sync);\n+         removeRecoveryInformation(xid);\n+         return sendTxCompletionNotification(lockOwners, ftc);\n+      } else {\n+         removeRecoveryInformation(xid);\n+         return CompletableFutures.completedNull();\n       }\n-      removeRecoveryInformation(xid);\n    }\n \n    @Override\n-   public void removeRecoveryInformationFromCluster(Collection<Address> where, long internalId, boolean sync) {\n+   public CompletionStage<Void> removeRecoveryInformationFromCluster(Collection<Address> where, long internalId) {\n       if (rpcManager != null) {\n          TxCompletionNotificationCommand ftc = commandFactory.buildTxCompletionNotificationCommand(internalId);\n-         sendTxCompletionNotification(where, ftc, sync);\n+         CompletionStage<Void> stage = sendTxCompletionNotification(where, ftc);\n+         return stage.thenRun(() -> removeRecoveryInformation(internalId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6030cc125086a6b25768497a0e33d56fa849c4fe"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0Nzc4Nw==", "bodyText": "Okay.", "url": "https://github.com/infinispan/infinispan/pull/7997#discussion_r395847787", "createdAt": "2020-03-20T19:27:18Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/transaction/xa/recovery/RecoveryManagerImpl.java", "diffHunk": "@@ -128,38 +129,43 @@ public RecoveryIterator getPreparedTransactionsFromCluster() {\n    }\n \n    @Override\n-   public void removeRecoveryInformation(Collection<Address> lockOwners, Xid xid, boolean sync, GlobalTransaction gtx,\n+   public CompletionStage<Void> removeRecoveryInformation(Collection<Address> lockOwners, Xid xid, GlobalTransaction gtx,\n                                          boolean fromCluster) {\n       log.tracef(\"Forgetting tx information for %s\", gtx);\n       //todo make sure this gets broad casted or at least flushed\n       if (rpcManager != null && !fromCluster) {\n          TxCompletionNotificationCommand ftc = commandFactory.buildTxCompletionNotificationCommand(xid, gtx);\n-         sendTxCompletionNotification(lockOwners, ftc, sync);\n+         removeRecoveryInformation(xid);\n+         return sendTxCompletionNotification(lockOwners, ftc);\n+      } else {\n+         removeRecoveryInformation(xid);\n+         return CompletableFutures.completedNull();\n       }\n-      removeRecoveryInformation(xid);\n    }\n \n    @Override\n-   public void removeRecoveryInformationFromCluster(Collection<Address> where, long internalId, boolean sync) {\n+   public CompletionStage<Void> removeRecoveryInformationFromCluster(Collection<Address> where, long internalId) {\n       if (rpcManager != null) {\n          TxCompletionNotificationCommand ftc = commandFactory.buildTxCompletionNotificationCommand(internalId);\n-         sendTxCompletionNotification(where, ftc, sync);\n+         CompletionStage<Void> stage = sendTxCompletionNotification(where, ftc);\n+         return stage.thenRun(() -> removeRecoveryInformation(internalId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0NTU4OA=="}, "originalCommit": {"oid": "6030cc125086a6b25768497a0e33d56fa849c4fe"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4413, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}