{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NTgzMzIw", "number": 8615, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOToyODozNFrOEg3Ekg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOToyODozNFrOEg3Ekg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODkyMTc4OnYy", "diffSide": "RIGHT", "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/MediaType.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOToyODozNFrOHN38Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzowMjoxOFrOHPlzkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMDAyMw==", "bodyText": "Is this faster than the current code on master?", "url": "https://github.com/infinispan/infinispan/pull/8615#discussion_r484310023", "createdAt": "2020-09-07T09:28:34Z", "author": {"login": "gustavonalle"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/MediaType.java", "diffHunk": "@@ -33,6 +36,22 @@\n @ProtoTypeId(ProtoStreamTypeIds.MEDIA_TYPE)\n @SerializeWith(value = MediaType.MediaTypeExternalizer.class)\n public final class MediaType {\n+   private static final Pattern TREE_PATTERN;\n+   private static final Pattern PARAMETER_PATTERN;\n+\n+   static {\n+      // Adapted from https://stackoverflow.com/a/48046041/55870\n+      // Extended to support \"*\" as a media type (as used by java.net.HttpURLConnection)\n+      // More details at https://bugs.openjdk.java.net/browse/JDK-8163921\n+      // and https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+      String ows = \"[ \\t]*\";\n+      String token = \"[0-9A-Za-z!#$%&'*+.^_`|~-]+\";\n+      String quotedString = \"\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"\";\n+      String tree = ows + \"((\" + token + \")/\" + token + \"|\\\\*)\" + ows;\n+      String parameter = \";\" + ows + \"(\" + token + \")=(\" + token + \"|\" + quotedString + \")\" + ows;\n+      TREE_PATTERN = Pattern.compile(tree);\n+      PARAMETER_PATTERN = Pattern.compile(parameter);\n+   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3985266a1e0803cecd2e38537e43ab03bc95341b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMzODc5Ng==", "bodyText": "I haven't ran any performance test after adding the regular expressions, but I expect it to be faster because it goes over the input string only one time and it does fewer allocations: the code on master allocates new strings with substring(), split(), and toCharArray().\nBut it shouldn't matter for performance IMO, as most performance-sensitive applications should be using the id of application/x-protostream instead of a textual media type. The regex change was motivated mostly by the fact that I wanted something that follows the RFCs as close as possible, and I found an answer on StackOverflow doing it with regular expressions :)", "url": "https://github.com/infinispan/infinispan/pull/8615#discussion_r484338796", "createdAt": "2020-09-07T10:19:26Z", "author": {"login": "danberindei"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/MediaType.java", "diffHunk": "@@ -33,6 +36,22 @@\n @ProtoTypeId(ProtoStreamTypeIds.MEDIA_TYPE)\n @SerializeWith(value = MediaType.MediaTypeExternalizer.class)\n public final class MediaType {\n+   private static final Pattern TREE_PATTERN;\n+   private static final Pattern PARAMETER_PATTERN;\n+\n+   static {\n+      // Adapted from https://stackoverflow.com/a/48046041/55870\n+      // Extended to support \"*\" as a media type (as used by java.net.HttpURLConnection)\n+      // More details at https://bugs.openjdk.java.net/browse/JDK-8163921\n+      // and https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+      String ows = \"[ \\t]*\";\n+      String token = \"[0-9A-Za-z!#$%&'*+.^_`|~-]+\";\n+      String quotedString = \"\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"\";\n+      String tree = ows + \"((\" + token + \")/\" + token + \"|\\\\*)\" + ows;\n+      String parameter = \";\" + ows + \"(\" + token + \")=(\" + token + \"|\" + quotedString + \")\" + ows;\n+      TREE_PATTERN = Pattern.compile(tree);\n+      PARAMETER_PATTERN = Pattern.compile(parameter);\n+   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMDAyMw=="}, "originalCommit": {"oid": "3985266a1e0803cecd2e38537e43ab03bc95341b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0NjY0Ng==", "bodyText": "Parsing of MediaType does impact performance, as every REST call will send a text for every request.\nIf the regex make it slower, I don't think the extra complexity is worth it.", "url": "https://github.com/infinispan/infinispan/pull/8615#discussion_r484346646", "createdAt": "2020-09-07T10:35:15Z", "author": {"login": "gustavonalle"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/MediaType.java", "diffHunk": "@@ -33,6 +36,22 @@\n @ProtoTypeId(ProtoStreamTypeIds.MEDIA_TYPE)\n @SerializeWith(value = MediaType.MediaTypeExternalizer.class)\n public final class MediaType {\n+   private static final Pattern TREE_PATTERN;\n+   private static final Pattern PARAMETER_PATTERN;\n+\n+   static {\n+      // Adapted from https://stackoverflow.com/a/48046041/55870\n+      // Extended to support \"*\" as a media type (as used by java.net.HttpURLConnection)\n+      // More details at https://bugs.openjdk.java.net/browse/JDK-8163921\n+      // and https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+      String ows = \"[ \\t]*\";\n+      String token = \"[0-9A-Za-z!#$%&'*+.^_`|~-]+\";\n+      String quotedString = \"\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"\";\n+      String tree = ows + \"((\" + token + \")/\" + token + \"|\\\\*)\" + ows;\n+      String parameter = \";\" + ows + \"(\" + token + \")=(\" + token + \"|\" + quotedString + \")\" + ows;\n+      TREE_PATTERN = Pattern.compile(tree);\n+      PARAMETER_PATTERN = Pattern.compile(parameter);\n+   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMDAyMw=="}, "originalCommit": {"oid": "3985266a1e0803cecd2e38537e43ab03bc95341b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0NzgxOA==", "bodyText": "The regex change was motivated mostly by the fact that I wanted something that follows the RFCs as close as possible\n\nUnderstood, but this PR is for small performance improvements, and if we don't know if it will improve, I suggest separating the MediaType changes to another JIRA", "url": "https://github.com/infinispan/infinispan/pull/8615#discussion_r484347818", "createdAt": "2020-09-07T10:37:41Z", "author": {"login": "gustavonalle"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/MediaType.java", "diffHunk": "@@ -33,6 +36,22 @@\n @ProtoTypeId(ProtoStreamTypeIds.MEDIA_TYPE)\n @SerializeWith(value = MediaType.MediaTypeExternalizer.class)\n public final class MediaType {\n+   private static final Pattern TREE_PATTERN;\n+   private static final Pattern PARAMETER_PATTERN;\n+\n+   static {\n+      // Adapted from https://stackoverflow.com/a/48046041/55870\n+      // Extended to support \"*\" as a media type (as used by java.net.HttpURLConnection)\n+      // More details at https://bugs.openjdk.java.net/browse/JDK-8163921\n+      // and https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+      String ows = \"[ \\t]*\";\n+      String token = \"[0-9A-Za-z!#$%&'*+.^_`|~-]+\";\n+      String quotedString = \"\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"\";\n+      String tree = ows + \"((\" + token + \")/\" + token + \"|\\\\*)\" + ows;\n+      String parameter = \";\" + ows + \"(\" + token + \")=(\" + token + \"|\" + quotedString + \")\" + ows;\n+      TREE_PATTERN = Pattern.compile(tree);\n+      PARAMETER_PATTERN = Pattern.compile(parameter);\n+   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMDAyMw=="}, "originalCommit": {"oid": "3985266a1e0803cecd2e38537e43ab03bc95341b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMDA5Nw==", "bodyText": "You were right @gustavonalle, I wrote a JMH benchmark and the regular expression parsing was a bit slower than master:\n\n\n\nBranch\nBenchmark\nMode\nCnt\nScore\nError\nUnits\n\n\n\n\nmaster\nMediaTypeParsingBenchmark.State.parseList\navgt\n30\n38.041\n\u00b1 0.299\nns/op\n\n\nISPN-11005\nMediaTypeParsingBenchmark.State.parseList\navgt\n30\n56.855\n\u00b1 0.492\nns/op\n\n\n\nI was able to make it faster (although a bit uglier because I had to expand the character ranges), but then I realized it's too big a change and it needs its own PR. I only left the matchesAll field that speeds up comparisons in this PR.", "url": "https://github.com/infinispan/infinispan/pull/8615#discussion_r486110097", "createdAt": "2020-09-10T07:02:18Z", "author": {"login": "danberindei"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/MediaType.java", "diffHunk": "@@ -33,6 +36,22 @@\n @ProtoTypeId(ProtoStreamTypeIds.MEDIA_TYPE)\n @SerializeWith(value = MediaType.MediaTypeExternalizer.class)\n public final class MediaType {\n+   private static final Pattern TREE_PATTERN;\n+   private static final Pattern PARAMETER_PATTERN;\n+\n+   static {\n+      // Adapted from https://stackoverflow.com/a/48046041/55870\n+      // Extended to support \"*\" as a media type (as used by java.net.HttpURLConnection)\n+      // More details at https://bugs.openjdk.java.net/browse/JDK-8163921\n+      // and https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n+      String ows = \"[ \\t]*\";\n+      String token = \"[0-9A-Za-z!#$%&'*+.^_`|~-]+\";\n+      String quotedString = \"\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"\";\n+      String tree = ows + \"((\" + token + \")/\" + token + \"|\\\\*)\" + ows;\n+      String parameter = \";\" + ows + \"(\" + token + \")=(\" + token + \"|\" + quotedString + \")\" + ows;\n+      TREE_PATTERN = Pattern.compile(tree);\n+      PARAMETER_PATTERN = Pattern.compile(parameter);\n+   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMDAyMw=="}, "originalCommit": {"oid": "3985266a1e0803cecd2e38537e43ab03bc95341b"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3888, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}