{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1OTQ4MTUw", "number": 8128, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoxODozMlrODs_zEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODo1NzozNFrOD2kX3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTA5MjAxOnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoxODozMlrOF-KX1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo0MTowMVrOF-LOeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNTk3NA==", "bodyText": "never used.", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400725974", "createdAt": "2020-03-31T08:18:32Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -65,15 +70,18 @@\n public class CacheManagerResource implements ResourceHandler {\n \n    private final EmbeddedCacheManager cacheManager;\n+   private InvocationHelper invocationHelper;\n    private final InternalCacheRegistry internalCacheRegistry;\n    private final JsonWriter jsonWriter = new JsonWriter();\n    private final ObjectMapper objectMapper;\n    private final ParserRegistry parserRegistry = new ParserRegistry();\n    private final String cacheManagerName;\n+   private final static Logger log = LogFactory.getLogger(CacheManagerResource.class.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "418b5914e798acd3a48010016864c32ded888a5c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczOTk2MA==", "bodyText": "yeah, will should add some trace logs TBH", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400739960", "createdAt": "2020-03-31T08:41:01Z", "author": {"login": "karesti"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -65,15 +70,18 @@\n public class CacheManagerResource implements ResourceHandler {\n \n    private final EmbeddedCacheManager cacheManager;\n+   private InvocationHelper invocationHelper;\n    private final InternalCacheRegistry internalCacheRegistry;\n    private final JsonWriter jsonWriter = new JsonWriter();\n    private final ObjectMapper objectMapper;\n    private final ParserRegistry parserRegistry = new ParserRegistry();\n    private final String cacheManagerName;\n+   private final static Logger log = LogFactory.getLogger(CacheManagerResource.class.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNTk3NA=="}, "originalCommit": {"oid": "418b5914e798acd3a48010016864c32ded888a5c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTA5Nzg4OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyMDoxMFrOF-Kbnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODozNDoxNVrOF-i8OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNjk0Mw==", "bodyText": "I don't understand why do you need the RestCacheManager.\nIt only decorates the cache with encodings and flags. Both don't affect the methods getName() neither getCacheConfiguration()", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400726943", "createdAt": "2020-03-31T08:20:10Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -202,9 +215,10 @@ public Invocations getInvocations() {\n          cachesHeath.put(ch.getCacheName(), ch.getStatus());\n       }\n \n+      RestCacheManager<Object> restCacheManager = invocationHelper.getRestCacheManager();\n       // We rely on the fact that getCacheNames doesn't block for embedded - remote it does unfortunately\n       return Flowable.fromIterable(cacheManager.getCacheNames())\n-            .map(cacheManager::getCache)\n+            .map(cacheName -> restCacheManager.getCache(cacheName, request))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "418b5914e798acd3a48010016864c32ded888a5c"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczOTQzNg==", "bodyText": "because of the subject", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400739436", "createdAt": "2020-03-31T08:40:06Z", "author": {"login": "karesti"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -202,9 +215,10 @@ public Invocations getInvocations() {\n          cachesHeath.put(ch.getCacheName(), ch.getStatus());\n       }\n \n+      RestCacheManager<Object> restCacheManager = invocationHelper.getRestCacheManager();\n       // We rely on the fact that getCacheNames doesn't block for embedded - remote it does unfortunately\n       return Flowable.fromIterable(cacheManager.getCacheNames())\n-            .map(cacheManager::getCache)\n+            .map(cacheName -> restCacheManager.getCache(cacheName, request))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNjk0Mw=="}, "originalCommit": {"oid": "418b5914e798acd3a48010016864c32ded888a5c"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczOTc2MQ==", "bodyText": "if you go to the cache resource you will see", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400739761", "createdAt": "2020-03-31T08:40:40Z", "author": {"login": "karesti"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -202,9 +215,10 @@ public Invocations getInvocations() {\n          cachesHeath.put(ch.getCacheName(), ch.getStatus());\n       }\n \n+      RestCacheManager<Object> restCacheManager = invocationHelper.getRestCacheManager();\n       // We rely on the fact that getCacheNames doesn't block for embedded - remote it does unfortunately\n       return Flowable.fromIterable(cacheManager.getCacheNames())\n-            .map(cacheManager::getCache)\n+            .map(cacheName -> restCacheManager.getCache(cacheName, request))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNjk0Mw=="}, "originalCommit": {"oid": "418b5914e798acd3a48010016864c32ded888a5c"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc2OTAwMA==", "bodyText": "so, you are using the RestCacheManager just to avoid doing\n.map(cache -> subject == null ? cache : cache.withSubject(subject))\n?", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400769000", "createdAt": "2020-03-31T09:27:50Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -202,9 +215,10 @@ public Invocations getInvocations() {\n          cachesHeath.put(ch.getCacheName(), ch.getStatus());\n       }\n \n+      RestCacheManager<Object> restCacheManager = invocationHelper.getRestCacheManager();\n       // We rely on the fact that getCacheNames doesn't block for embedded - remote it does unfortunately\n       return Flowable.fromIterable(cacheManager.getCacheNames())\n-            .map(cacheManager::getCache)\n+            .map(cacheName -> restCacheManager.getCache(cacheName, request))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNjk0Mw=="}, "originalCommit": {"oid": "418b5914e798acd3a48010016864c32ded888a5c"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyODUwNA==", "bodyText": "well, not only", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r401128504", "createdAt": "2020-03-31T18:34:15Z", "author": {"login": "karesti"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -202,9 +215,10 @@ public Invocations getInvocations() {\n          cachesHeath.put(ch.getCacheName(), ch.getStatus());\n       }\n \n+      RestCacheManager<Object> restCacheManager = invocationHelper.getRestCacheManager();\n       // We rely on the fact that getCacheNames doesn't block for embedded - remote it does unfortunately\n       return Flowable.fromIterable(cacheManager.getCacheNames())\n-            .map(cacheManager::getCache)\n+            .map(cacheName -> restCacheManager.getCache(cacheName, request))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNjk0Mw=="}, "originalCommit": {"oid": "418b5914e798acd3a48010016864c32ded888a5c"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTExMTI2OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyMzo0M1rOF-KkLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyMzo0M1rOF-KkLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyOTEzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        () -> cacheManager.getCacheManagerInfo());\n          \n          \n            \n                        cacheManager::getCacheManagerInfo);", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400729133", "createdAt": "2020-03-31T08:23:43Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -108,9 +116,13 @@ public Invocations getInvocations() {\n \n    private CompletionStage<RestResponse> getInfo(RestRequest request) {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n+\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n+      CacheManagerInfo cacheManagerInfo = Security.doAs(request.getSubject(), (PrivilegedAction<CacheManagerInfo>)\n+            () -> cacheManager.getCacheManagerInfo());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "418b5914e798acd3a48010016864c32ded888a5c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTExMzE0OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyNDowM1rOF-KlPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyNDowM1rOF-KlPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyOTQwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        () -> cacheManager.getCacheManagerConfiguration());\n          \n          \n            \n                        cacheManager::getCacheManagerConfiguration);", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400729404", "createdAt": "2020-03-31T08:24:03Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -123,8 +135,8 @@ public Invocations getInvocations() {\n    private CompletionStage<RestResponse> getConfig(RestRequest request) {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n-\n-      GlobalConfiguration globalConfiguration = cacheManager.getCacheManagerConfiguration();\n+      GlobalConfiguration globalConfiguration = Security.doAs(request.getSubject(), (PrivilegedAction<GlobalConfiguration>)\n+            () -> cacheManager.getCacheManagerConfiguration());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "418b5914e798acd3a48010016864c32ded888a5c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTExNDcwOnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyNDoyM1rOF-KmLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyNDoyM1rOF-KmLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyOTY0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        () -> cacheManager.getStats());\n          \n          \n            \n                        cacheManager::getStats);", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400729644", "createdAt": "2020-03-31T08:24:23Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -149,10 +161,11 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n-      CacheContainerStats stats = cacheManager.getStats();\n+      CacheContainerStats containerStats = Security.doAs(request.getSubject(), (PrivilegedAction<CacheContainerStats>)\n+            () -> cacheManager.getStats());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "418b5914e798acd3a48010016864c32ded888a5c"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTExNjc5OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyNDo1MFrOF-KnZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyNDo1MFrOF-KnZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyOTk1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                           () -> cacheManager.getCacheConfigurationNames());\n          \n          \n            \n                           cacheManager::getCacheConfigurationNames);", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400729958", "createdAt": "2020-03-31T08:24:50Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -270,13 +285,22 @@ public Invocations getInvocations() {\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n       try {\n-         Set<String> cacheConfigurationNames = cacheManager.getCacheConfigurationNames();\n+\n+         Set<String> cacheConfigurationNames = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>)\n+               () -> cacheManager.getCacheConfigurationNames());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "418b5914e798acd3a48010016864c32ded888a5c"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTEyMDU3OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyNTo1NVrOF-KqDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozMTozNlrOF-K4UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMDYzNg==", "bodyText": "Extract it to a method? it is used more than once.", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400730636", "createdAt": "2020-03-31T08:25:55Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -270,13 +285,22 @@ public Invocations getInvocations() {\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n       try {\n-         Set<String> cacheConfigurationNames = cacheManager.getCacheConfigurationNames();\n+\n+         Set<String> cacheConfigurationNames = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>)\n+               () -> cacheManager.getCacheConfigurationNames());\n \n          List<NamedCacheConfiguration> configurations = cacheConfigurationNames.stream()\n                .filter(n -> !internalCacheRegistry.isInternalCache(n))\n-               .filter(n -> cacheManager.getCacheConfiguration(n).isTemplate())\n+               .filter(n -> {\n+                  Configuration cacheConfiguration = Security.doAs(request.getSubject(), (PrivilegedAction<Configuration>) () -> cacheManager.getCacheConfiguration(n));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "418b5914e798acd3a48010016864c32ded888a5c"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNDI4OQ==", "bodyText": "ps. you have GetCacheConfigurationFromManagerAction available as well.", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400734289", "createdAt": "2020-03-31T08:31:36Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -270,13 +285,22 @@ public Invocations getInvocations() {\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n       try {\n-         Set<String> cacheConfigurationNames = cacheManager.getCacheConfigurationNames();\n+\n+         Set<String> cacheConfigurationNames = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>)\n+               () -> cacheManager.getCacheConfigurationNames());\n \n          List<NamedCacheConfiguration> configurations = cacheConfigurationNames.stream()\n                .filter(n -> !internalCacheRegistry.isInternalCache(n))\n-               .filter(n -> cacheManager.getCacheConfiguration(n).isTemplate())\n+               .filter(n -> {\n+                  Configuration cacheConfiguration = Security.doAs(request.getSubject(), (PrivilegedAction<Configuration>) () -> cacheManager.getCacheConfiguration(n));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMDYzNg=="}, "originalCommit": {"oid": "418b5914e798acd3a48010016864c32ded888a5c"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mzg2OTg5OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo0NDoyN1rOF_fDJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo0NDoyN1rOF_fDJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExMzMxNw==", "bodyText": "Can you keep all this security stuff outside the rest resources and put them inside the  invocationHelper?  Thus by doing a invocationHelper.getRestCacheManager(request) you'd already get a cacheManager/cache/whatever with proper security credentials", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r402113317", "createdAt": "2020-04-02T07:44:27Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -202,13 +210,14 @@ public Invocations getInvocations() {\n          cachesHeath.put(ch.getCacheName(), ch.getStatus());\n       }\n \n+      RestCacheManager<Object> restCacheManager = invocationHelper.getRestCacheManager();\n       // We rely on the fact that getCacheNames doesn't block for embedded - remote it does unfortunately\n-      return Flowable.fromIterable(cacheManager.getCacheNames())\n-            .map(cacheManager::getCache)\n+      return Flowable.fromIterable(cacheManager.withSubject(request.getSubject()).getCacheNames())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb45d0784be618165f07c30dfbee3d17769e7f3"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mzg3NTI4OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo0NjowNlrOF_fGoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo0NjowNlrOF_fGoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNDIwOQ==", "bodyText": "There are no tests or reproducers for the changes. Those tests should be in the rest module itself rather than outside.", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r402114209", "createdAt": "2020-04-02T07:46:06Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -65,6 +68,7 @@\n public class CacheManagerResource implements ResourceHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb45d0784be618165f07c30dfbee3d17769e7f3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjQ5MzQ2OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/RestRequestHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNjoyNzo1M1rOGH51nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToxODowOVrOGIZwdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk0MDgyOA==", "bodyText": "@gustavonalle @tristantarrant this little thing has been driving me crazy :))) and I think this explains why I could not create a cache from the console but you told me you could. Tests with auth enabled had been like crazy for this", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r410940828", "createdAt": "2020-04-19T16:27:53Z", "author": {"login": "karesti"}, "path": "server/rest/src/main/java/org/infinispan/rest/RestRequestHandler.java", "diffHunk": "@@ -85,6 +85,7 @@ public void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request) thr\n          // Ensure that the authorization header, if needed, has not changed\n          String authz = request.headers().get(HttpHeaderNames.AUTHORIZATION);\n          if (Objects.equals(authz, authorization)) {\n+            restRequest.setSubject(subject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cddf759a7a86d941df4f6df8f6dcd883d347a85"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0NTg2MA==", "bodyText": "Not only that, but I think there is something wrong further down:\n            subject = restRequest.getSubject();\n            authorization = restRequest.getAuthorizationHeader();\n            restRequest.setSubject(subject);\nI think the setSubject can be removed", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411345860", "createdAt": "2020-04-20T12:43:06Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/main/java/org/infinispan/rest/RestRequestHandler.java", "diffHunk": "@@ -85,6 +85,7 @@ public void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request) thr\n          // Ensure that the authorization header, if needed, has not changed\n          String authz = request.headers().get(HttpHeaderNames.AUTHORIZATION);\n          if (Objects.equals(authz, authorization)) {\n+            restRequest.setSubject(subject);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk0MDgyOA=="}, "originalCommit": {"oid": "6cddf759a7a86d941df4f6df8f6dcd883d347a85"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2Mzc5Ng==", "bodyText": "where further down", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411463796", "createdAt": "2020-04-20T15:18:09Z", "author": {"login": "karesti"}, "path": "server/rest/src/main/java/org/infinispan/rest/RestRequestHandler.java", "diffHunk": "@@ -85,6 +85,7 @@ public void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request) thr\n          // Ensure that the authorization header, if needed, has not changed\n          String authz = request.headers().get(HttpHeaderNames.AUTHORIZATION);\n          if (Objects.equals(authz, authorization)) {\n+            restRequest.setSubject(subject);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk0MDgyOA=="}, "originalCommit": {"oid": "6cddf759a7a86d941df4f6df8f6dcd883d347a85"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTQ4MDU0OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/BaseCacheResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjo0ODo0OFrOGISxkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToxODo1OVrOGIZzAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0OTM5NQ==", "bodyText": "No, this is wrong: the cache object passed in should already have the Subject applied (cache.withSubject(subject)) (RestCacheManager does this)", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411349395", "createdAt": "2020-04-20T12:48:48Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/BaseCacheResource.java", "diffHunk": "@@ -114,7 +118,7 @@ public BaseCacheResource(InvocationHelper invocationHelper) {\n                }\n             }\n          }\n-         return putInCache(responseBuilder, cache, key, data, ttl, idle);\n+         return putInCache(responseBuilder, cache, key, data, ttl, idle, request.getSubject());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b363293b1254dc29b15ef3e8240848bcfa9f604"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NDQ1MQ==", "bodyText": "ok", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411464451", "createdAt": "2020-04-20T15:18:59Z", "author": {"login": "karesti"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/BaseCacheResource.java", "diffHunk": "@@ -114,7 +118,7 @@ public BaseCacheResource(InvocationHelper invocationHelper) {\n                }\n             }\n          }\n-         return putInCache(responseBuilder, cache, key, data, ttl, idle);\n+         return putInCache(responseBuilder, cache, key, data, ttl, idle, request.getSubject());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0OTM5NQ=="}, "originalCommit": {"oid": "8b363293b1254dc29b15ef3e8240848bcfa9f604"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTQ4MjgyOnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/BaseCacheResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjo0OToxN1rOGISy0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToxOTo0MVrOGIZ1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0OTcxNA==", "bodyText": "Undo these changes please", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411349714", "createdAt": "2020-04-20T12:49:17Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/BaseCacheResource.java", "diffHunk": "@@ -224,10 +228,12 @@ private void writeValue(Object value, MediaType requested, MediaType configuredM\n \n    private CompletionStage<RestResponse> putInCache(NettyRestResponse.Builder responseBuilder,\n                                                     AdvancedCache<Object, Object> cache, Object key, byte[] data, Long ttl,\n-                                                    Long idleTime) {\n+                                                    Long idleTime, Subject subject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b363293b1254dc29b15ef3e8240848bcfa9f604"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NTAxMw==", "bodyText": "ok", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411465013", "createdAt": "2020-04-20T15:19:41Z", "author": {"login": "karesti"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/BaseCacheResource.java", "diffHunk": "@@ -224,10 +228,12 @@ private void writeValue(Object value, MediaType requested, MediaType configuredM\n \n    private CompletionStage<RestResponse> putInCache(NettyRestResponse.Builder responseBuilder,\n                                                     AdvancedCache<Object, Object> cache, Object key, byte[] data, Long ttl,\n-                                                    Long idleTime) {\n+                                                    Long idleTime, Subject subject) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0OTcxNA=="}, "originalCommit": {"oid": "8b363293b1254dc29b15ef3e8240848bcfa9f604"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTQ5MjA3OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjo1MToyNVrOGIS4Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToxOTozM1rOGIZ0yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MTExNA==", "bodyText": "Rename to cachesHealth", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411351114", "createdAt": "2020-04-20T12:51:25Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -196,21 +210,28 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n+      EmbeddedCacheManager withSubjectCM = cacheManager.withSubject(request.getSubject());\n       Map<String, HealthStatus> cachesHeath = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b363293b1254dc29b15ef3e8240848bcfa9f604"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NDkwNA==", "bodyText": "ok", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411464904", "createdAt": "2020-04-20T15:19:33Z", "author": {"login": "karesti"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -196,21 +210,28 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n+      EmbeddedCacheManager withSubjectCM = cacheManager.withSubject(request.getSubject());\n       Map<String, HealthStatus> cachesHeath = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MTExNA=="}, "originalCommit": {"oid": "8b363293b1254dc29b15ef3e8240848bcfa9f604"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTQ5Nzk0OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjo1Mjo1MlrOGIS71A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToyMDozMlrOGIZ33Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MjAyMA==", "bodyText": "withSubjectCM is not particularly pleasant. subjectCacheManager is nicer (like you do below)", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411352020", "createdAt": "2020-04-20T12:52:52Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -196,21 +210,28 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n+      EmbeddedCacheManager withSubjectCM = cacheManager.withSubject(request.getSubject());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b363293b1254dc29b15ef3e8240848bcfa9f604"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NTY5Mw==", "bodyText": "ok", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411465693", "createdAt": "2020-04-20T15:20:32Z", "author": {"login": "karesti"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -196,21 +210,28 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n+      EmbeddedCacheManager withSubjectCM = cacheManager.withSubject(request.getSubject());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MjAyMA=="}, "originalCommit": {"oid": "8b363293b1254dc29b15ef3e8240848bcfa9f604"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTUwODAyOnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjo1NTowMVrOGITBkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoxODowOFrOGIW1KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MzQ5MQ==", "bodyText": "You can use cacheNames.removeAll(internalCacheRegistry.getInternalCacheNames());", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411353491", "createdAt": "2020-04-20T12:55:01Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -196,21 +210,28 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n+      EmbeddedCacheManager withSubjectCM = cacheManager.withSubject(request.getSubject());\n       Map<String, HealthStatus> cachesHeath = new HashMap<>();\n+      // Remove internal caches\n+      Set<String> cacheNames = new HashSet<>(withSubjectCM.getCacheNames());\n+      cacheNames.remove(PROTOBUF_METADATA_CACHE_NAME);\n+      cacheNames.remove(SCRIPT_CACHE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b363293b1254dc29b15ef3e8240848bcfa9f604"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNTg0OQ==", "bodyText": "ok", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411415849", "createdAt": "2020-04-20T14:18:08Z", "author": {"login": "karesti"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -196,21 +210,28 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n+      EmbeddedCacheManager withSubjectCM = cacheManager.withSubject(request.getSubject());\n       Map<String, HealthStatus> cachesHeath = new HashMap<>();\n+      // Remove internal caches\n+      Set<String> cacheNames = new HashSet<>(withSubjectCM.getCacheNames());\n+      cacheNames.remove(PROTOBUF_METADATA_CACHE_NAME);\n+      cacheNames.remove(SCRIPT_CACHE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MzQ5MQ=="}, "originalCommit": {"oid": "8b363293b1254dc29b15ef3e8240848bcfa9f604"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTUxNzc4OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjo1NzowM1rOGITHCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoxNDozMlrOGIWpuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1NDg4OA==", "bodyText": "RestCacheManager.getCacheManagerAdmin() should already return a privileged RemoteCacheAdmin so remove all these Subject.doAs invocations", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411354888", "createdAt": "2020-04-20T12:57:03Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "diffHunk": "@@ -183,7 +187,10 @@ public Invocations getInvocations() {\n          return CompletableFuture.completedFuture(responseBuilder.build());\n       }\n       return CompletableFuture.supplyAsync(() -> {\n-         restCacheManager.getCacheManagerAdmin(request).removeCache(cacheName);\n+         Subject.doAs(request.getSubject(), (PrivilegedAction<Void>) () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b363293b1254dc29b15ef3e8240848bcfa9f604"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxMjkyMQ==", "bodyText": "ok! yes", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411412921", "createdAt": "2020-04-20T14:14:32Z", "author": {"login": "karesti"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "diffHunk": "@@ -183,7 +187,10 @@ public Invocations getInvocations() {\n          return CompletableFuture.completedFuture(responseBuilder.build());\n       }\n       return CompletableFuture.supplyAsync(() -> {\n-         restCacheManager.getCacheManagerAdmin(request).removeCache(cacheName);\n+         Subject.doAs(request.getSubject(), (PrivilegedAction<Void>) () -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1NDg4OA=="}, "originalCommit": {"oid": "8b363293b1254dc29b15ef3e8240848bcfa9f604"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Njc3MDMwOnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjowMTo0NlrOGLUYJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjowMTo0NlrOGLUYJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMTM4Mw==", "bodyText": "This should be unnecessary: the administration object should already have the Subject set on it.", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r414521383", "createdAt": "2020-04-24T12:01:46Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "diffHunk": "@@ -211,7 +218,10 @@ public Invocations getInvocations() {\n       if (template != null && !template.isEmpty()) {\n          String templateName = template.iterator().next();\n          return CompletableFuture.supplyAsync(() -> {\n-            administration.createCache(cacheName, templateName);\n+            Security.doAs(request.getSubject(), (PrivilegedAction<Void>) () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed4d9e44eb76cf87dec934d0c48070a4f0fb7a92"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Njc3MTM2OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjowMjowNFrOGLUYtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjowMjowNFrOGLUYtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMTUyNw==", "bodyText": "Same", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r414521527", "createdAt": "2020-04-24T12:02:04Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "diffHunk": "@@ -221,7 +231,10 @@ public Invocations getInvocations() {\n       byte[] bytes = contents.rawContent();\n       if (bytes == null || bytes.length == 0) {\n          return CompletableFuture.supplyAsync(() -> {\n-            administration.createCache(cacheName, (String) null);\n+            Security.doAs(request.getSubject(), (PrivilegedAction<Void>) () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed4d9e44eb76cf87dec934d0c48070a4f0fb7a92"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Njc3MTY4OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjowMjoxMFrOGLUY6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzowMjoyNVrOGLWn1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMTU3Nw==", "bodyText": "Same", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r414521577", "createdAt": "2020-04-24T12:02:10Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "diffHunk": "@@ -242,8 +255,10 @@ public Invocations getInvocations() {\n \n       ConfigurationBuilder finalCfgBuilder = cfgBuilder;\n       return CompletableFuture.supplyAsync(() -> {\n-         administration.createCache(cacheName, finalCfgBuilder.build());\n-\n+         Security.doAs(request.getSubject(), (PrivilegedAction<Void>) () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed4d9e44eb76cf87dec934d0c48070a4f0fb7a92"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1ODE2NA==", "bodyText": "i thought I modified those already ... hmmm\ndoing the changes", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r414558164", "createdAt": "2020-04-24T13:02:25Z", "author": {"login": "karesti"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "diffHunk": "@@ -242,8 +255,10 @@ public Invocations getInvocations() {\n \n       ConfigurationBuilder finalCfgBuilder = cfgBuilder;\n       return CompletableFuture.supplyAsync(() -> {\n-         administration.createCache(cacheName, finalCfgBuilder.build());\n-\n+         Security.doAs(request.getSubject(), (PrivilegedAction<Void>) () -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMTU3Nw=="}, "originalCommit": {"oid": "ed4d9e44eb76cf87dec934d0c48070a4f0fb7a92"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTQ0MjMwOnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODo1NDo0OFrOGMYOhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMzowOToxM1rOGMiRSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzMzAyOQ==", "bodyText": "This is changing the return payload of the API, IMO we should keep returning all caches and add a new request parameter to filter internal caches", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415633029", "createdAt": "2020-04-27T08:54:48Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -195,21 +207,27 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n-      Map<String, HealthStatus> cachesHeath = new HashMap<>();\n+      EmbeddedCacheManager subjectCacheManager = cacheManager.withSubject(request.getSubject());\n+      Map<String, HealthStatus> cachesHealth = new HashMap<>();\n+      // Remove internal caches\n+      Set<String> cacheNames = new HashSet<>(subjectCacheManager.getCacheNames());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NDIyNg==", "bodyText": "this is the experimental endpoint used in the console. maybe we can add a filter to include all the caches but not get the internals by default", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415794226", "createdAt": "2020-04-27T13:04:31Z", "author": {"login": "karesti"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -195,21 +207,27 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n-      Map<String, HealthStatus> cachesHeath = new HashMap<>();\n+      EmbeddedCacheManager subjectCacheManager = cacheManager.withSubject(request.getSubject());\n+      Map<String, HealthStatus> cachesHealth = new HashMap<>();\n+      // Remove internal caches\n+      Set<String> cacheNames = new HashSet<>(subjectCacheManager.getCacheNames());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzMzAyOQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NzU3Ng==", "bodyText": "You're right, I thought it was breaking the GET /rest/v2/caches API", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415797576", "createdAt": "2020-04-27T13:09:13Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -195,21 +207,27 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n-      Map<String, HealthStatus> cachesHeath = new HashMap<>();\n+      EmbeddedCacheManager subjectCacheManager = cacheManager.withSubject(request.getSubject());\n+      Map<String, HealthStatus> cachesHealth = new HashMap<>();\n+      // Remove internal caches\n+      Set<String> cacheNames = new HashSet<>(subjectCacheManager.getCacheNames());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzMzAyOQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTQ0OTQ2OnYy", "diffSide": "RIGHT", "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODo1NjoxM1rOGMYSuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzo1ODo1MVrOGNHm_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDEwNQ==", "bodyText": "The idea is to have ADMIN have all permissions, but USER be a regular user, otherwise we have the same two subjects with different names", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415634105", "createdAt": "2020-04-27T08:56:13Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -49,7 +49,7 @@\n public class AbstractRestResourceTest extends MultipleCacheManagersTest {\n    public static final String REALM = \"ApplicationRealm\";\n    public static final Subject ADMIN_USER = TestingUtil.makeSubject(\"ADMIN\", ScriptingManager.SCRIPT_MANAGER_ROLE, ProtobufMetadataManager.SCHEMA_MANAGER_ROLE);\n-   public static final Subject USER = TestingUtil.makeSubject(\"USER\");\n+   public static final Subject USER = TestingUtil.makeSubject(\"USER\", ProtobufMetadataManager.SCHEMA_MANAGER_ROLE, ScriptingManager.SCRIPT_MANAGER_ROLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NDkxMQ==", "bodyText": "I was experiencing issues with tests because of the lack of protostream. but I'm going to recheck this", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415794911", "createdAt": "2020-04-27T13:05:34Z", "author": {"login": "karesti"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -49,7 +49,7 @@\n public class AbstractRestResourceTest extends MultipleCacheManagersTest {\n    public static final String REALM = \"ApplicationRealm\";\n    public static final Subject ADMIN_USER = TestingUtil.makeSubject(\"ADMIN\", ScriptingManager.SCRIPT_MANAGER_ROLE, ProtobufMetadataManager.SCHEMA_MANAGER_ROLE);\n-   public static final Subject USER = TestingUtil.makeSubject(\"USER\");\n+   public static final Subject USER = TestingUtil.makeSubject(\"USER\", ProtobufMetadataManager.SCHEMA_MANAGER_ROLE, ScriptingManager.SCRIPT_MANAGER_ROLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDEwNQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NTIwMQ==", "bodyText": "and the task execution", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415795201", "createdAt": "2020-04-27T13:05:53Z", "author": {"login": "karesti"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -49,7 +49,7 @@\n public class AbstractRestResourceTest extends MultipleCacheManagersTest {\n    public static final String REALM = \"ApplicationRealm\";\n    public static final Subject ADMIN_USER = TestingUtil.makeSubject(\"ADMIN\", ScriptingManager.SCRIPT_MANAGER_ROLE, ProtobufMetadataManager.SCHEMA_MANAGER_ROLE);\n-   public static final Subject USER = TestingUtil.makeSubject(\"USER\");\n+   public static final Subject USER = TestingUtil.makeSubject(\"USER\", ProtobufMetadataManager.SCHEMA_MANAGER_ROLE, ScriptingManager.SCRIPT_MANAGER_ROLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDEwNQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5OTg2Ng==", "bodyText": "The ADMIN user is used to bootstrap the server, fire-up the REST endopint, etc, and the USER is the one who should be used in the rest client to perform requests. Do regular users need those two roles to interact with the rest endpoint?", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415799866", "createdAt": "2020-04-27T13:12:16Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -49,7 +49,7 @@\n public class AbstractRestResourceTest extends MultipleCacheManagersTest {\n    public static final String REALM = \"ApplicationRealm\";\n    public static final Subject ADMIN_USER = TestingUtil.makeSubject(\"ADMIN\", ScriptingManager.SCRIPT_MANAGER_ROLE, ProtobufMetadataManager.SCHEMA_MANAGER_ROLE);\n-   public static final Subject USER = TestingUtil.makeSubject(\"USER\");\n+   public static final Subject USER = TestingUtil.makeSubject(\"USER\", ProtobufMetadataManager.SCHEMA_MANAGER_ROLE, ScriptingManager.SCRIPT_MANAGER_ROLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDEwNQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwOTM0MQ==", "bodyText": "I changed the test", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r416409341", "createdAt": "2020-04-28T07:58:51Z", "author": {"login": "karesti"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -49,7 +49,7 @@\n public class AbstractRestResourceTest extends MultipleCacheManagersTest {\n    public static final String REALM = \"ApplicationRealm\";\n    public static final Subject ADMIN_USER = TestingUtil.makeSubject(\"ADMIN\", ScriptingManager.SCRIPT_MANAGER_ROLE, ProtobufMetadataManager.SCHEMA_MANAGER_ROLE);\n-   public static final Subject USER = TestingUtil.makeSubject(\"USER\");\n+   public static final Subject USER = TestingUtil.makeSubject(\"USER\", ProtobufMetadataManager.SCHEMA_MANAGER_ROLE, ScriptingManager.SCRIPT_MANAGER_ROLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDEwNQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTQ1MjE2OnYy", "diffSide": "RIGHT", "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODo1Njo0MVrOGMYULw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzowNjo1MVrOGM7Y3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ==", "bodyText": "Same as above, why does USER need to have the same permissions as ADMIN?", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415634479", "createdAt": "2020-04-27T08:56:41Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -89,7 +89,7 @@ protected GlobalConfigurationBuilder getGlobalConfigForNode(int id) {\n    protected void addSecurity(GlobalConfigurationBuilder globalBuilder) {\n       globalBuilder.security().authorization().enable().principalRoleMapper(new IdentityRoleMapper())\n                    .role(\"ADMIN\").permission(AuthorizationPermission.ALL)\n-                   .role(\"USER\");\n+                   .role(\"USER\").permission(AuthorizationPermission.ALL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NTQzNw==", "bodyText": "task execution as far as I remember", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415795437", "createdAt": "2020-04-27T13:06:09Z", "author": {"login": "karesti"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -89,7 +89,7 @@ protected GlobalConfigurationBuilder getGlobalConfigForNode(int id) {\n    protected void addSecurity(GlobalConfigurationBuilder globalBuilder) {\n       globalBuilder.security().authorization().enable().principalRoleMapper(new IdentityRoleMapper())\n                    .role(\"ADMIN\").permission(AuthorizationPermission.ALL)\n-                   .role(\"USER\");\n+                   .role(\"USER\").permission(AuthorizationPermission.ALL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwMDI2OQ==", "bodyText": "Maybe add only EXEC?", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415800269", "createdAt": "2020-04-27T13:12:49Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -89,7 +89,7 @@ protected GlobalConfigurationBuilder getGlobalConfigForNode(int id) {\n    protected void addSecurity(GlobalConfigurationBuilder globalBuilder) {\n       globalBuilder.security().authorization().enable().principalRoleMapper(new IdentityRoleMapper())\n                    .role(\"ADMIN\").permission(AuthorizationPermission.ALL)\n-                   .role(\"USER\");\n+                   .role(\"USER\").permission(AuthorizationPermission.ALL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NDQzOQ==", "bodyText": "ok", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415874439", "createdAt": "2020-04-27T14:44:34Z", "author": {"login": "karesti"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -89,7 +89,7 @@ protected GlobalConfigurationBuilder getGlobalConfigForNode(int id) {\n    protected void addSecurity(GlobalConfigurationBuilder globalBuilder) {\n       globalBuilder.security().authorization().enable().principalRoleMapper(new IdentityRoleMapper())\n                    .role(\"ADMIN\").permission(AuthorizationPermission.ALL)\n-                   .role(\"USER\");\n+                   .role(\"USER\").permission(AuthorizationPermission.ALL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NzQ1NQ==", "bodyText": "in any case adding permissions is mandatory here", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415877455", "createdAt": "2020-04-27T14:47:59Z", "author": {"login": "karesti"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -89,7 +89,7 @@ protected GlobalConfigurationBuilder getGlobalConfigForNode(int id) {\n    protected void addSecurity(GlobalConfigurationBuilder globalBuilder) {\n       globalBuilder.security().authorization().enable().principalRoleMapper(new IdentityRoleMapper())\n                    .role(\"ADMIN\").permission(AuthorizationPermission.ALL)\n-                   .role(\"USER\");\n+                   .role(\"USER\").permission(AuthorizationPermission.ALL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3Nzg1Ng==", "bodyText": "the xml validation does not work if we don't. the permissions property is mandatory", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415877856", "createdAt": "2020-04-27T14:48:26Z", "author": {"login": "karesti"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -89,7 +89,7 @@ protected GlobalConfigurationBuilder getGlobalConfigForNode(int id) {\n    protected void addSecurity(GlobalConfigurationBuilder globalBuilder) {\n       globalBuilder.security().authorization().enable().principalRoleMapper(new IdentityRoleMapper())\n                    .role(\"ADMIN\").permission(AuthorizationPermission.ALL)\n-                   .role(\"USER\");\n+                   .role(\"USER\").permission(AuthorizationPermission.ALL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1MjE3Mg==", "bodyText": "So the builder should validate it, or does it assume some default ones? /cc @tristantarrant", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415952172", "createdAt": "2020-04-27T16:14:58Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -89,7 +89,7 @@ protected GlobalConfigurationBuilder getGlobalConfigForNode(int id) {\n    protected void addSecurity(GlobalConfigurationBuilder globalBuilder) {\n       globalBuilder.security().authorization().enable().principalRoleMapper(new IdentityRoleMapper())\n                    .role(\"ADMIN\").permission(AuthorizationPermission.ALL)\n-                   .role(\"USER\");\n+                   .role(\"USER\").permission(AuthorizationPermission.ALL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwOTExOA==", "bodyText": "I get on validation that the permissions are mandatory and this is a required field in the xsd\nMaybe the java code should be improved on that?\nIn any case, I added READ WRITE and EXEC. But for the cache manipulation on protobuf, I need to keep on the subject USER the role that it's needed for that.\nI added a commit so you can check the changes easily. I rather not spent more time on this right now, since this should be backported asap", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r416209118", "createdAt": "2020-04-27T23:06:51Z", "author": {"login": "karesti"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -89,7 +89,7 @@ protected GlobalConfigurationBuilder getGlobalConfigForNode(int id) {\n    protected void addSecurity(GlobalConfigurationBuilder globalBuilder) {\n       globalBuilder.security().authorization().enable().principalRoleMapper(new IdentityRoleMapper())\n                    .role(\"ADMIN\").permission(AuthorizationPermission.ALL)\n-                   .role(\"USER\");\n+                   .role(\"USER\").permission(AuthorizationPermission.ALL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTQ1NjMxOnYy", "diffSide": "RIGHT", "path": "server/rest/src/test/java/org/infinispan/rest/resources/CacheManagerResourceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODo1NzozNFrOGMYWpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMzowODoyNVrOGMiOzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNTExMQ==", "bodyText": "As commented before, we should not change the API return payloads, but add a new request parameter to filter out the internal caches", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415635111", "createdAt": "2020-04-27T08:57:34Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/CacheManagerResourceTest.java", "diffHunk": "@@ -142,7 +142,8 @@ public void testCaches() throws Exception {\n       String json = response.getContentAsString();\n       JsonNode jsonNode = mapper.readTree(json);\n       List<String> names = asText(jsonNode.findValues(\"name\"));\n-      Set<String> expectedNames = Util.asSet(\"defaultcache\", \"___protobuf_metadata\", \"___script_cache\", \"cache1\", \"cache2\");\n+      Set<String> expectedNames = Util.asSet(\"defaultcache\", \"cache1\", \"cache2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NjUzMg==", "bodyText": "since this endpoint has been created for the console needs and documented as experimental, can't we change it not to include internals but only if I add a filter to ask for them? in any case, we do have the option to get the internal cache and the details, since the cache manager api does not filter internal cache names", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415796532", "createdAt": "2020-04-27T13:07:46Z", "author": {"login": "karesti"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/CacheManagerResourceTest.java", "diffHunk": "@@ -142,7 +142,8 @@ public void testCaches() throws Exception {\n       String json = response.getContentAsString();\n       JsonNode jsonNode = mapper.readTree(json);\n       List<String> names = asText(jsonNode.findValues(\"name\"));\n-      Set<String> expectedNames = Util.asSet(\"defaultcache\", \"___protobuf_metadata\", \"___script_cache\", \"cache1\", \"cache2\");\n+      Set<String> expectedNames = Util.asSet(\"defaultcache\", \"cache1\", \"cache2\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNTExMQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5Njk0MA==", "bodyText": "I mean, the defined caches properties", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415796940", "createdAt": "2020-04-27T13:08:25Z", "author": {"login": "karesti"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/CacheManagerResourceTest.java", "diffHunk": "@@ -142,7 +142,8 @@ public void testCaches() throws Exception {\n       String json = response.getContentAsString();\n       JsonNode jsonNode = mapper.readTree(json);\n       List<String> names = asText(jsonNode.findValues(\"name\"));\n-      Set<String> expectedNames = Util.asSet(\"defaultcache\", \"___protobuf_metadata\", \"___script_cache\", \"cache1\", \"cache2\");\n+      Set<String> expectedNames = Util.asSet(\"defaultcache\", \"cache1\", \"cache2\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNTExMQ=="}, "originalCommit": {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4376, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}