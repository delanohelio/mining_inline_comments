{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MTA5ODQ0", "number": 8406, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo0NzowM1rOEA5W8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowNzoxOFrOEDfvpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzc1MjE3OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ServerResource.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo0NzowM1rOGcdTgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjowNDo1NlrOGci-Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzQ0Mg==", "bodyText": "For trivial formats like this I would just use String concatenation.", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432493442", "createdAt": "2020-05-29T13:47:03Z", "author": {"login": "wburns"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ServerResource.java", "diffHunk": "@@ -40,7 +40,7 @@\n  */\n public class ServerResource implements ResourceHandler {\n    private final InvocationHelper invocationHelper;\n-   private static final ServerInfo SERVER_INFO = new ServerInfo();\n+   private static final byte[] SERVER_INFO = String.format(\"{\\\"version\\\": \\\"%s\\\"}\", Version.printVersion()).getBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "045d7ac535c25766fbab8e689ceeaed886512133"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwOTA1Mw==", "bodyText": "I would keep this as is, unless there is a noticeable performance difference.\nServerInfo is a holder that happens to have only the version now, but the idea is to expand it in the future", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432509053", "createdAt": "2020-05-29T14:12:13Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ServerResource.java", "diffHunk": "@@ -40,7 +40,7 @@\n  */\n public class ServerResource implements ResourceHandler {\n    private final InvocationHelper invocationHelper;\n-   private static final ServerInfo SERVER_INFO = new ServerInfo();\n+   private static final byte[] SERVER_INFO = String.format(\"{\\\"version\\\": \\\"%s\\\"}\", Version.printVersion()).getBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzQ0Mg=="}, "originalCommit": {"oid": "045d7ac535c25766fbab8e689ceeaed886512133"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxMDY4MQ==", "bodyText": "String.format is considerably slower than a StringBuilder (which concatenation is replaced with). However since this is a static final the performance is negligible.\nAnd by \"keep this as is\" you mean to revert this change completely?\nTo be honest using reflection for our responses to me would be considerably slower than if we registered mappers, which is what Quarkus will need to do anyways.", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432510681", "createdAt": "2020-05-29T14:14:32Z", "author": {"login": "wburns"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ServerResource.java", "diffHunk": "@@ -40,7 +40,7 @@\n  */\n public class ServerResource implements ResourceHandler {\n    private final InvocationHelper invocationHelper;\n-   private static final ServerInfo SERVER_INFO = new ServerInfo();\n+   private static final byte[] SERVER_INFO = String.format(\"{\\\"version\\\": \\\"%s\\\"}\", Version.printVersion()).getBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzQ0Mg=="}, "originalCommit": {"oid": "045d7ac535c25766fbab8e689ceeaed886512133"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyMjY3Mg==", "bodyText": "And by \"keep this as is\" you mean to revert this change completely?\n\nI mean, keep ServerInfo holder", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432522672", "createdAt": "2020-05-29T14:27:11Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ServerResource.java", "diffHunk": "@@ -40,7 +40,7 @@\n  */\n public class ServerResource implements ResourceHandler {\n    private final InvocationHelper invocationHelper;\n-   private static final ServerInfo SERVER_INFO = new ServerInfo();\n+   private static final byte[] SERVER_INFO = String.format(\"{\\\"version\\\": \\\"%s\\\"}\", Version.printVersion()).getBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzQ0Mg=="}, "originalCommit": {"oid": "045d7ac535c25766fbab8e689ceeaed886512133"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4NjI3NQ==", "bodyText": "I've added a manual Serializer implementation to avoid reflection.", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432586275", "createdAt": "2020-05-29T16:04:56Z", "author": {"login": "ryanemerson"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ServerResource.java", "diffHunk": "@@ -40,7 +40,7 @@\n  */\n public class ServerResource implements ResourceHandler {\n    private final InvocationHelper invocationHelper;\n-   private static final ServerInfo SERVER_INFO = new ServerInfo();\n+   private static final byte[] SERVER_INFO = String.format(\"{\\\"version\\\": \\\"%s\\\"}\", Version.printVersion()).getBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzQ0Mg=="}, "originalCommit": {"oid": "045d7ac535c25766fbab8e689ceeaed886512133"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzc1ODYxOnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "isResolved": false, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo0ODo0MVrOGcdXhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToxOTo1NVrOGchPuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               static CompletableFuture<RestResponse> notFoundRspFuture() {\n          \n          \n            \n               static CompletableFuture<RestResponse> notFoundResponseFuture() {", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432494471", "createdAt": "2020-05-29T13:48:41Z", "author": {"login": "wburns"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDkyMw==", "bodyText": "And actually shouldn't this method store a cached response object to not allocate it every time? And this should probably return a CompletionStage ?", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432494923", "createdAt": "2020-05-29T13:49:25Z", "author": {"login": "wburns"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NTYxOA==", "bodyText": "Actually looking further all of the methods here have the reduced Rsp wording. It personally feels a bit weird to me, but if you think it makes the methods too long I  guess I am fine with it. Also all of the methods should return CompletionStage<..>", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432495618", "createdAt": "2020-05-29T13:50:30Z", "author": {"login": "wburns"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwNTczNA==", "bodyText": "RestResponses should not be reused as they contain a netty byte buffer inside", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432505734", "createdAt": "2020-05-29T14:06:56Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwNzk1OQ==", "bodyText": "Ah, that is a shame because this response to me should be completely stateles...", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432507959", "createdAt": "2020-05-29T14:10:29Z", "author": {"login": "wburns"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyOTcxMQ==", "bodyText": "We tried it a while ago and the result was not good :)", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432529711", "createdAt": "2020-05-29T14:35:40Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMjEwMw==", "bodyText": "I don't mind if we use Rsp or Response. Originally it was the latter and then I changed it.", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432532103", "createdAt": "2020-05-29T14:39:26Z", "author": {"login": "ryanemerson"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMzI2OQ==", "bodyText": "#7121", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432533269", "createdAt": "2020-05-29T14:41:23Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNDE3Ng==", "bodyText": "Response is more expressive. Rsp seems like a JGroups protocol  :)", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432534176", "createdAt": "2020-05-29T14:42:42Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNDQ5MA==", "bodyText": "Ah, you could always just increment the refCount once and then it would never be collected though. I have to admit I am surprised that the buffer would contain anything anyways.", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432534490", "createdAt": "2020-05-29T14:43:13Z", "author": {"login": "wburns"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NDE5Nw==", "bodyText": "Ah, you could always just increment the refCount once and then it would never be collected though\n\nI can't remember if I tried that or not, I remember it was tricky to track it down. Maybe you can give a try sometime?", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432544197", "createdAt": "2020-05-29T14:57:42Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1ODAwOQ==", "bodyText": "It probably isn't worth it.", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432558009", "createdAt": "2020-05-29T15:19:55Z", "author": {"login": "wburns"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzc3MTY4OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo1MjowMlrOGcdf_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDo0Mjo1N1rOGcfzLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NjYzNw==", "bodyText": "I am not sure if @gustavonalle was trying to hide the cause of the server error or not before. I know it can sometimes be frowned upon exposing some stuff to clients.", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432496637", "createdAt": "2020-05-29T13:52:02Z", "author": {"login": "wburns"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {\n+      return addJsonToRspBuilder(o, new NettyRestResponse.Builder(), invocationHelper).build();\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, InvocationHelper invocationHelper) {\n+      return completedFuture(objToJsonRsp(o, invocationHelper));\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {\n+      RestResponse response = addJsonToRspBuilder(o, responseBuilder, invocationHelper).build();\n+      return completedFuture(response);\n+   }\n+\n+   static NettyRestResponse.Builder addJsonToRspBuilder(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {\n+      try {\n+         byte[] bytes = invocationHelper.getMapper().writeValueAsBytes(o);\n+         responseBuilder.contentType(APPLICATION_JSON).entity(bytes).status(OK);\n+      } catch (JsonProcessingException e) {\n+         logger.error(e);\n+         responseBuilder.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwNzg0NA==", "bodyText": "The idea is to expose the error in a structured way, like query is doing, in JSON with a message and the cause: \n  \n    \n      infinispan/remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/json/JsonQueryErrorResult.java\n    \n    \n         Line 15\n      in\n      a922cc2\n    \n    \n    \n    \n\n        \n          \n           public class JsonQueryErrorResult extends JsonQueryResponse { \n        \n    \n  \n\n\nLooks like it is a good time to do it @ryanemerson", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432507844", "createdAt": "2020-05-29T14:10:17Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {\n+      return addJsonToRspBuilder(o, new NettyRestResponse.Builder(), invocationHelper).build();\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, InvocationHelper invocationHelper) {\n+      return completedFuture(objToJsonRsp(o, invocationHelper));\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {\n+      RestResponse response = addJsonToRspBuilder(o, responseBuilder, invocationHelper).build();\n+      return completedFuture(response);\n+   }\n+\n+   static NettyRestResponse.Builder addJsonToRspBuilder(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {\n+      try {\n+         byte[] bytes = invocationHelper.getMapper().writeValueAsBytes(o);\n+         responseBuilder.contentType(APPLICATION_JSON).entity(bytes).status(OK);\n+      } catch (JsonProcessingException e) {\n+         logger.error(e);\n+         responseBuilder.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NjYzNw=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNDMxOA==", "bodyText": "Makes sense, I'll add a JsonErrorResult class.", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432534318", "createdAt": "2020-05-29T14:42:57Z", "author": {"login": "ryanemerson"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {\n+      return addJsonToRspBuilder(o, new NettyRestResponse.Builder(), invocationHelper).build();\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, InvocationHelper invocationHelper) {\n+      return completedFuture(objToJsonRsp(o, invocationHelper));\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {\n+      RestResponse response = addJsonToRspBuilder(o, responseBuilder, invocationHelper).build();\n+      return completedFuture(response);\n+   }\n+\n+   static NettyRestResponse.Builder addJsonToRspBuilder(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {\n+      try {\n+         byte[] bytes = invocationHelper.getMapper().writeValueAsBytes(o);\n+         responseBuilder.contentType(APPLICATION_JSON).entity(bytes).status(OK);\n+      } catch (JsonProcessingException e) {\n+         logger.error(e);\n+         responseBuilder.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NjYzNw=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzg4ODY5OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMDowNlrOGceqiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMDowNlrOGceqiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNTcyMA==", "bodyText": "Signature suggestion:\nRestResponse asJsonResponse(Object o, InvocationHelper invocationHelper)", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432515720", "createdAt": "2020-05-29T14:20:06Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzg5MTYwOnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMDozNlrOGcesfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMDozNlrOGcesfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNjIyMw==", "bodyText": "asJsonResponseFuture()", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432516223", "createdAt": "2020-05-29T14:20:36Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {\n+      return addJsonToRspBuilder(o, new NettyRestResponse.Builder(), invocationHelper).build();\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, InvocationHelper invocationHelper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzg5Mjk2OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMDo0OVrOGcetYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMDo0OVrOGcetYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNjQ0OA==", "bodyText": "idem", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432516448", "createdAt": "2020-05-29T14:20:49Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {\n+      return addJsonToRspBuilder(o, new NettyRestResponse.Builder(), invocationHelper).build();\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, InvocationHelper invocationHelper) {\n+      return completedFuture(objToJsonRsp(o, invocationHelper));\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzkwMjQxOnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMjoyNFrOGcezPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMjoyNFrOGcezPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNzk0OA==", "bodyText": "addEntityAsJson(Object entity, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper)", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432517948", "createdAt": "2020-05-29T14:22:24Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {\n+      return addJsonToRspBuilder(o, new NettyRestResponse.Builder(), invocationHelper).build();\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, InvocationHelper invocationHelper) {\n+      return completedFuture(objToJsonRsp(o, invocationHelper));\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {\n+      RestResponse response = addJsonToRspBuilder(o, responseBuilder, invocationHelper).build();\n+      return completedFuture(response);\n+   }\n+\n+   static NettyRestResponse.Builder addJsonToRspBuilder(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTAxMjg1OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ServerResource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowNzoxOFrOGgi_ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToxNzoxNVrOGgjazA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDk1OA==", "bodyText": "This needs to be wrapped in a SecurityAction", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r436780958", "createdAt": "2020-06-08T15:07:18Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ServerResource.java", "diffHunk": "@@ -89,34 +97,27 @@ public Invocations getInvocations() {\n    private CompletionStage<RestResponse> listIgnored(RestRequest restRequest) {\n       String cacheManagerName = restRequest.variables().get(\"cache-manager\");\n       DefaultCacheManager cacheManager = invocationHelper.getServer().getCacheManager(cacheManagerName);\n-      NettyRestResponse.Builder builder = new NettyRestResponse.Builder();\n \n-      if (cacheManager == null) return completedFuture(builder.status(NOT_FOUND).build());\n+      if (cacheManager == null) return notFoundResponseFuture();\n       CacheIgnoreManager ignoreManager = invocationHelper.getServer().getIgnoreManager(cacheManagerName);\n       Set<String> ignored = ignoreManager.getIgnoredCaches();\n-      try {\n-         byte[] resultBytes = invocationHelper.getMapper().writeValueAsBytes(ignored);\n-         builder.contentType(APPLICATION_JSON_TYPE).entity(resultBytes);\n-      } catch (JsonProcessingException e) {\n-         builder.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(e.getMessage());\n-      }\n-      return completedFuture(builder.build());\n+      return asJsonResponseFuture(ignored, invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> cacheManagers(RestRequest restRequest) {\n-      return serializeObject(invocationHelper.getServer().cacheManagerNames());\n+      return asJsonResponseFuture(invocationHelper.getServer().cacheManagerNames(), invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> memory(RestRequest restRequest) {\n-      return serializeObject(new JVMMemoryInfoInfo());\n+      return asJsonResponseFuture(new JVMMemoryInfoInfo(), invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> env(RestRequest restRequest) {\n-      return serializeObject(ManagementFactory.getRuntimeMXBean().getSystemProperties());\n+      return asJsonResponseFuture(System.getProperties(), invocationHelper);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9058306bae8213a9dd34030b29ab34b816f325e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4NDgxNA==", "bodyText": "Right, unfortunately this was never caught by the Rest tests (that enable security) since the ServerResource is only tested in the server module...", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r436784814", "createdAt": "2020-06-08T15:13:01Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ServerResource.java", "diffHunk": "@@ -89,34 +97,27 @@ public Invocations getInvocations() {\n    private CompletionStage<RestResponse> listIgnored(RestRequest restRequest) {\n       String cacheManagerName = restRequest.variables().get(\"cache-manager\");\n       DefaultCacheManager cacheManager = invocationHelper.getServer().getCacheManager(cacheManagerName);\n-      NettyRestResponse.Builder builder = new NettyRestResponse.Builder();\n \n-      if (cacheManager == null) return completedFuture(builder.status(NOT_FOUND).build());\n+      if (cacheManager == null) return notFoundResponseFuture();\n       CacheIgnoreManager ignoreManager = invocationHelper.getServer().getIgnoreManager(cacheManagerName);\n       Set<String> ignored = ignoreManager.getIgnoredCaches();\n-      try {\n-         byte[] resultBytes = invocationHelper.getMapper().writeValueAsBytes(ignored);\n-         builder.contentType(APPLICATION_JSON_TYPE).entity(resultBytes);\n-      } catch (JsonProcessingException e) {\n-         builder.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(e.getMessage());\n-      }\n-      return completedFuture(builder.build());\n+      return asJsonResponseFuture(ignored, invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> cacheManagers(RestRequest restRequest) {\n-      return serializeObject(invocationHelper.getServer().cacheManagerNames());\n+      return asJsonResponseFuture(invocationHelper.getServer().cacheManagerNames(), invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> memory(RestRequest restRequest) {\n-      return serializeObject(new JVMMemoryInfoInfo());\n+      return asJsonResponseFuture(new JVMMemoryInfoInfo(), invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> env(RestRequest restRequest) {\n-      return serializeObject(ManagementFactory.getRuntimeMXBean().getSystemProperties());\n+      return asJsonResponseFuture(System.getProperties(), invocationHelper);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDk1OA=="}, "originalCommit": {"oid": "f9058306bae8213a9dd34030b29ab34b816f325e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4NzkxNg==", "bodyText": "https://issues.redhat.com/browse/ISPN-11979", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r436787916", "createdAt": "2020-06-08T15:17:15Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ServerResource.java", "diffHunk": "@@ -89,34 +97,27 @@ public Invocations getInvocations() {\n    private CompletionStage<RestResponse> listIgnored(RestRequest restRequest) {\n       String cacheManagerName = restRequest.variables().get(\"cache-manager\");\n       DefaultCacheManager cacheManager = invocationHelper.getServer().getCacheManager(cacheManagerName);\n-      NettyRestResponse.Builder builder = new NettyRestResponse.Builder();\n \n-      if (cacheManager == null) return completedFuture(builder.status(NOT_FOUND).build());\n+      if (cacheManager == null) return notFoundResponseFuture();\n       CacheIgnoreManager ignoreManager = invocationHelper.getServer().getIgnoreManager(cacheManagerName);\n       Set<String> ignored = ignoreManager.getIgnoredCaches();\n-      try {\n-         byte[] resultBytes = invocationHelper.getMapper().writeValueAsBytes(ignored);\n-         builder.contentType(APPLICATION_JSON_TYPE).entity(resultBytes);\n-      } catch (JsonProcessingException e) {\n-         builder.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(e.getMessage());\n-      }\n-      return completedFuture(builder.build());\n+      return asJsonResponseFuture(ignored, invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> cacheManagers(RestRequest restRequest) {\n-      return serializeObject(invocationHelper.getServer().cacheManagerNames());\n+      return asJsonResponseFuture(invocationHelper.getServer().cacheManagerNames(), invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> memory(RestRequest restRequest) {\n-      return serializeObject(new JVMMemoryInfoInfo());\n+      return asJsonResponseFuture(new JVMMemoryInfoInfo(), invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> env(RestRequest restRequest) {\n-      return serializeObject(ManagementFactory.getRuntimeMXBean().getSystemProperties());\n+      return asJsonResponseFuture(System.getProperties(), invocationHelper);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDk1OA=="}, "originalCommit": {"oid": "f9058306bae8213a9dd34030b29ab34b816f325e"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4134, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}