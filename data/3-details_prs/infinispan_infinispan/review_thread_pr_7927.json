{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3Mzg3NTA5", "number": 7927, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzoxODozMFrODh4AyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDoyODowMlrODh5UCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODQ3MzA0OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/stories/assembly_migrating_cache_stores.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzoxODozMFrOFs2mGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzo0NDo0MFrOFs3TCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU3NjE1NQ==", "bodyText": "Should we link to our rolling upgrade docs here?", "url": "https://github.com/infinispan/infinispan/pull/7927#discussion_r382576155", "createdAt": "2020-02-21T13:18:30Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/stories/assembly_migrating_cache_stores.adoc", "diffHunk": "@@ -1,8 +1,43 @@\n [id='cache_store_migration']\n :context: configure\n-= Migrating Cache Stores Between {brandname} Versions\n+= Migrating Data Between {brandname} Versions\n+Upgrading to the latest {brandname} version typically involves creating new\n+clusters with the target version running in parallel to the version from which\n+you are migrating. You can then create a shared persistent cache store between", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1f0412d35954abb870280d1bb61ac0308df6b38"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4NzY1OA==", "bodyText": "tbh I'd rather reuse the content as part of an upgrading guide. essentially we'd have the same content under Configuration > Persistence and Upgrading. I'll set this up and show you. explaining here might not be clear.", "url": "https://github.com/infinispan/infinispan/pull/7927#discussion_r382587658", "createdAt": "2020-02-21T13:44:40Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/stories/assembly_migrating_cache_stores.adoc", "diffHunk": "@@ -1,8 +1,43 @@\n [id='cache_store_migration']\n :context: configure\n-= Migrating Cache Stores Between {brandname} Versions\n+= Migrating Data Between {brandname} Versions\n+Upgrading to the latest {brandname} version typically involves creating new\n+clusters with the target version running in parallel to the version from which\n+you are migrating. You can then create a shared persistent cache store between", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU3NjE1NQ=="}, "originalCommit": {"oid": "f1f0412d35954abb870280d1bb61ac0308df6b38"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODQ3NTIxOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/stories/assembly_migrating_cache_stores.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzoxOToxOFrOFs2nbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzoxOToxOFrOFs2nbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU3NjQ5NQ==", "bodyText": "It's 100% no possible between Major versions e.g. Infinispan 8 -> 9 -> 10.", "url": "https://github.com/infinispan/infinispan/pull/7927#discussion_r382576495", "createdAt": "2020-02-21T13:19:18Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/stories/assembly_migrating_cache_stores.adoc", "diffHunk": "@@ -1,8 +1,43 @@\n [id='cache_store_migration']\n :context: configure\n-= Migrating Cache Stores Between {brandname} Versions\n+= Migrating Data Between {brandname} Versions\n+Upgrading to the latest {brandname} version typically involves creating new\n+clusters with the target version running in parallel to the version from which\n+you are migrating. You can then create a shared persistent cache store between\n+the two clusters and switch client connections to the target.\n \n-include::{topics}/persistence_storemigrator.adoc[leveloffset=+1]\n+However, functional differences between {brandname} versions mean that backwards\n+compatibility is not always possible.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1f0412d35954abb870280d1bb61ac0308df6b38"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODQ3NzA3OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/stories/assembly_migrating_cache_stores.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzoyMDowMFrOFs2omA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzoyMDowMFrOFs2omA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU3Njc5Mg==", "bodyText": "incompatibilities", "url": "https://github.com/infinispan/infinispan/pull/7927#discussion_r382576792", "createdAt": "2020-02-21T13:20:00Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/stories/assembly_migrating_cache_stores.adoc", "diffHunk": "@@ -1,8 +1,43 @@\n [id='cache_store_migration']\n :context: configure\n-= Migrating Cache Stores Between {brandname} Versions\n+= Migrating Data Between {brandname} Versions\n+Upgrading to the latest {brandname} version typically involves creating new\n+clusters with the target version running in parallel to the version from which\n+you are migrating. You can then create a shared persistent cache store between\n+the two clusters and switch client connections to the target.\n \n-include::{topics}/persistence_storemigrator.adoc[leveloffset=+1]\n+However, functional differences between {brandname} versions mean that backwards\n+compatibility is not always possible.\n+\n+For example, {brandname}\n+ifndef::productized[]\n+10.1\n+endif::productized[]\n+ifdef::productized[]\n+8.0\n+endif::productized[]\n+changes the default marshaller to Protostream. In previous {brandname}\n+versions, cache stores use a binary format that is not compatible with the\n+changes to marshalling. This means that {brandname}\n+ifndef::productized[]\n+10.1\n+endif::productized[]\n+ifdef::productized[]\n+8.0\n+endif::productized[]\n+cannot read from cache stores with previous {brandname} versions.\n+\n+In other cases {brandname} versions deprecate or remove cache store\n+implementations, such as JDBC Mixed and Binary stores.\n+\n+To overcome incompatibility with cache stores, {brandname} provides a utility", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1f0412d35954abb870280d1bb61ac0308df6b38"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODUwNTc0OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/con_store_migrator.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzozMDo0N1rOFs26dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzozMDo0N1rOFs26dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4MTM2NQ==", "bodyText": "\"from a previous version's cache store and recreates it using the latest {brandname} implementation\" ?", "url": "https://github.com/infinispan/infinispan/pull/7927#discussion_r382581365", "createdAt": "2020-02-21T13:30:47Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/con_store_migrator.adoc", "diffHunk": "@@ -0,0 +1,14 @@\n+[id='store_migrator']\n+= Cache Store Migrator\n+{brandname} provides the `StoreMigrator.java` utility that reads data from\n+cache stores from previous versions and rewrites it for compatibility with the\n+latest {brandname} version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1f0412d35954abb870280d1bb61ac0308df6b38"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODY4NjE2OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/stories/assembly_migrating_data.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDoyODowMlrOFs4pDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDoyODowMlrOFs4pDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwOTY3Ng==", "bodyText": "The protostream conversion actually happened in 10.0", "url": "https://github.com/infinispan/infinispan/pull/7927#discussion_r382609676", "createdAt": "2020-02-21T14:28:02Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/stories/assembly_migrating_data.adoc", "diffHunk": "@@ -0,0 +1,44 @@\n+[id='data_migration']\n+:context: upgrade\n+= Migrating Data Between {brandname} Versions\n+Upgrading to the latest {brandname} version typically involves creating new\n+clusters with the target version running in parallel to the version from which\n+you are migrating. You can then create a shared persistent cache store between\n+the two clusters and switch client connections to the target.\n+\n+However, functional differences between major {brandname} versions mean that\n+backwards compatibility is not possible.\n+\n+For example, {brandname}\n+ifndef::productized[]\n+10.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd24230bccf1d4d359cf74199c30cc39bec8170"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4486, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}