{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MDc5OTY1", "number": 8285, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjowNjoyMFrOD540_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjowNjoyMFrOD540_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDI2NDk1OnYy", "diffSide": "RIGHT", "path": "server/core/src/main/java/org/infinispan/server/core/AbstractProtocolServer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjowNjoyMFrOGRaYPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjo0MToyNFrOGRb0iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxMTE2NA==", "bodyText": "when is this true?\nI think we only create LazyInitializingBlockingTaskAwareExecutorService. It is already a ManageableExecutorService so it can be used directly without more wrapping.", "url": "https://github.com/infinispan/infinispan/pull/8285#discussion_r420911164", "createdAt": "2020-05-06T16:06:20Z", "author": {"login": "pruivo"}, "path": "server/core/src/main/java/org/infinispan/server/core/AbstractProtocolServer.java", "diffHunk": "@@ -104,23 +101,16 @@ public void start(C configuration, EmbeddedCacheManager cacheManager) {\n          throw new IllegalStateException(\"CacheIgnoreManager is a required component\");\n       }\n \n-      executor = new ThreadPoolExecutor(\n-            configuration.workerThreads(),\n-            configuration.workerThreads(),\n-            0L, TimeUnit.MILLISECONDS,\n-            new LinkedBlockingQueue<>(),\n-            new DefaultThreadFactory(getQualifiedName() + \"-ServerHandler\"),\n-            new ThreadPoolExecutor.AbortPolicy() {\n-               @Override\n-               public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n-                  if (e.isShutdown())\n-                     throw new IllegalLifecycleStateException(\"Server has been stopped\");\n-                  else\n-                     super.rejectedExecution(r, e);\n-               }\n-            });\n-\n-      manageableThreadPoolExecutorService = new ManageableThreadPoolExecutorService(executor);\n+      executor = bcr.getComponent(KnownComponentNames.BLOCKING_EXECUTOR, ExecutorService.class).running();\n+\n+      if (executor instanceof BlockingTaskAwareExecutorServiceImpl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7225f4993f29db88b9c60d9749d81b7ee9ae433"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxMzY0NQ==", "bodyText": "Hrmm, I had an issue in testing, maybe it isn't a problem anymore. Let me try again.", "url": "https://github.com/infinispan/infinispan/pull/8285#discussion_r420913645", "createdAt": "2020-05-06T16:09:56Z", "author": {"login": "wburns"}, "path": "server/core/src/main/java/org/infinispan/server/core/AbstractProtocolServer.java", "diffHunk": "@@ -104,23 +101,16 @@ public void start(C configuration, EmbeddedCacheManager cacheManager) {\n          throw new IllegalStateException(\"CacheIgnoreManager is a required component\");\n       }\n \n-      executor = new ThreadPoolExecutor(\n-            configuration.workerThreads(),\n-            configuration.workerThreads(),\n-            0L, TimeUnit.MILLISECONDS,\n-            new LinkedBlockingQueue<>(),\n-            new DefaultThreadFactory(getQualifiedName() + \"-ServerHandler\"),\n-            new ThreadPoolExecutor.AbortPolicy() {\n-               @Override\n-               public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n-                  if (e.isShutdown())\n-                     throw new IllegalLifecycleStateException(\"Server has been stopped\");\n-                  else\n-                     super.rejectedExecution(r, e);\n-               }\n-            });\n-\n-      manageableThreadPoolExecutorService = new ManageableThreadPoolExecutorService(executor);\n+      executor = bcr.getComponent(KnownComponentNames.BLOCKING_EXECUTOR, ExecutorService.class).running();\n+\n+      if (executor instanceof BlockingTaskAwareExecutorServiceImpl) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxMTE2NA=="}, "originalCommit": {"oid": "f7225f4993f29db88b9c60d9749d81b7ee9ae433"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzNDc5Mg==", "bodyText": "I have removed the if, if CI passes then it should be good ;)", "url": "https://github.com/infinispan/infinispan/pull/8285#discussion_r420934792", "createdAt": "2020-05-06T16:41:24Z", "author": {"login": "wburns"}, "path": "server/core/src/main/java/org/infinispan/server/core/AbstractProtocolServer.java", "diffHunk": "@@ -104,23 +101,16 @@ public void start(C configuration, EmbeddedCacheManager cacheManager) {\n          throw new IllegalStateException(\"CacheIgnoreManager is a required component\");\n       }\n \n-      executor = new ThreadPoolExecutor(\n-            configuration.workerThreads(),\n-            configuration.workerThreads(),\n-            0L, TimeUnit.MILLISECONDS,\n-            new LinkedBlockingQueue<>(),\n-            new DefaultThreadFactory(getQualifiedName() + \"-ServerHandler\"),\n-            new ThreadPoolExecutor.AbortPolicy() {\n-               @Override\n-               public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n-                  if (e.isShutdown())\n-                     throw new IllegalLifecycleStateException(\"Server has been stopped\");\n-                  else\n-                     super.rejectedExecution(r, e);\n-               }\n-            });\n-\n-      manageableThreadPoolExecutorService = new ManageableThreadPoolExecutorService(executor);\n+      executor = bcr.getComponent(KnownComponentNames.BLOCKING_EXECUTOR, ExecutorService.class).running();\n+\n+      if (executor instanceof BlockingTaskAwareExecutorServiceImpl) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxMTE2NA=="}, "originalCommit": {"oid": "f7225f4993f29db88b9c60d9749d81b7ee9ae433"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4173, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}