{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzODk2MjU2", "number": 8683, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNToxNDowNFrOEiKrgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNToxNDozMlrOEiKsWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjYyMDE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNToxNDowNVrOHP4-gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTozMTo0NFrOHP5ylw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNDE5Mg==", "bodyText": "lambda can be cached (sound like Dan xD)", "url": "https://github.com/infinispan/infinispan/pull/8683#discussion_r486424192", "createdAt": "2020-09-10T15:14:05Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java", "diffHunk": "@@ -166,6 +168,31 @@ public Object visitInvalidateCommand(InvocationContext ctx, InvalidateCommand co\n       return super.visitInvalidateCommand(ctx, command);\n    }\n \n+   // Remove Expired is not transactional\n+   @Override\n+   public Object visitRemoveExpiredCommand(InvocationContext ctx, RemoveExpiredCommand command) {\n+      Object key = command.getKey();\n+      // Skip adding changeAmount if originator is not primary\n+      if (ctx.isOriginLocal() && dm != null && !dm.getCacheTopology().getSegmentDistribution(command.getSegment()).isPrimary()) {\n+         return invokeNext(ctx, command);\n+      }\n+      return invokeNextThenAccept(ctx, command, ((rCtx, rCommand, rv) -> {\n+         if (rCommand.isSuccessful()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98511638bb37b4b0d4ea3c6f3d02738dd8337ef"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzNzUyNw==", "bodyText": "Sure.", "url": "https://github.com/infinispan/infinispan/pull/8683#discussion_r486437527", "createdAt": "2020-09-10T15:31:44Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java", "diffHunk": "@@ -166,6 +168,31 @@ public Object visitInvalidateCommand(InvocationContext ctx, InvalidateCommand co\n       return super.visitInvalidateCommand(ctx, command);\n    }\n \n+   // Remove Expired is not transactional\n+   @Override\n+   public Object visitRemoveExpiredCommand(InvocationContext ctx, RemoveExpiredCommand command) {\n+      Object key = command.getKey();\n+      // Skip adding changeAmount if originator is not primary\n+      if (ctx.isOriginLocal() && dm != null && !dm.getCacheTopology().getSegmentDistribution(command.getSegment()).isPrimary()) {\n+         return invokeNext(ctx, command);\n+      }\n+      return invokeNextThenAccept(ctx, command, ((rCtx, rCommand, rv) -> {\n+         if (rCommand.isSuccessful()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNDE5Mg=="}, "originalCommit": {"oid": "e98511638bb37b4b0d4ea3c6f3d02738dd8337ef"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjYyMjM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNToxNDozMlrOHP4_4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTozMTo0N1rOHP5yuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNDU0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                           MVCCEntry<Object, Object> entry = (MVCCEntry) ctx.lookupEntry(key);\n          \n          \n            \n                           MVCCEntry<?, ?> entry = (MVCCEntry<?, ?>) ctx.lookupEntry(key);\n          \n      \n    \n    \n  \n\njust to remove the warning from IDEA :)", "url": "https://github.com/infinispan/infinispan/pull/8683#discussion_r486424546", "createdAt": "2020-09-10T15:14:32Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java", "diffHunk": "@@ -166,6 +168,31 @@ public Object visitInvalidateCommand(InvocationContext ctx, InvalidateCommand co\n       return super.visitInvalidateCommand(ctx, command);\n    }\n \n+   // Remove Expired is not transactional\n+   @Override\n+   public Object visitRemoveExpiredCommand(InvocationContext ctx, RemoveExpiredCommand command) {\n+      Object key = command.getKey();\n+      // Skip adding changeAmount if originator is not primary\n+      if (ctx.isOriginLocal() && dm != null && !dm.getCacheTopology().getSegmentDistribution(command.getSegment()).isPrimary()) {\n+         return invokeNext(ctx, command);\n+      }\n+      return invokeNextThenAccept(ctx, command, ((rCtx, rCommand, rv) -> {\n+         if (rCommand.isSuccessful()) {\n+            if (dm == null || dm.getCacheTopology().getSegmentDistribution(rCommand.getSegment()).isWriteOwner()) {\n+               MVCCEntry<Object, Object> entry = (MVCCEntry) ctx.lookupEntry(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98511638bb37b4b0d4ea3c6f3d02738dd8337ef"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzNzU2MQ==", "bodyText": "Sure.", "url": "https://github.com/infinispan/infinispan/pull/8683#discussion_r486437561", "createdAt": "2020-09-10T15:31:47Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java", "diffHunk": "@@ -166,6 +168,31 @@ public Object visitInvalidateCommand(InvocationContext ctx, InvalidateCommand co\n       return super.visitInvalidateCommand(ctx, command);\n    }\n \n+   // Remove Expired is not transactional\n+   @Override\n+   public Object visitRemoveExpiredCommand(InvocationContext ctx, RemoveExpiredCommand command) {\n+      Object key = command.getKey();\n+      // Skip adding changeAmount if originator is not primary\n+      if (ctx.isOriginLocal() && dm != null && !dm.getCacheTopology().getSegmentDistribution(command.getSegment()).isPrimary()) {\n+         return invokeNext(ctx, command);\n+      }\n+      return invokeNextThenAccept(ctx, command, ((rCtx, rCommand, rv) -> {\n+         if (rCommand.isSuccessful()) {\n+            if (dm == null || dm.getCacheTopology().getSegmentDistribution(rCommand.getSegment()).isWriteOwner()) {\n+               MVCCEntry<Object, Object> entry = (MVCCEntry) ctx.lookupEntry(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNDU0Ng=="}, "originalCommit": {"oid": "e98511638bb37b4b0d4ea3c6f3d02738dd8337ef"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3937, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}