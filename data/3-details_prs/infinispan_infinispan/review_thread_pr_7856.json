{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMzQ5MjIz", "number": 7856, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODo1OTozMVrODjvU8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTowNDozMVrODjvZ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODAyMTYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/xsite/status/TakeOfflineManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODo1OTozMVrOFvtu_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOToxNzoxMVrOFvuMlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NjcwMw==", "bodyText": "Old Javadoc?", "url": "https://github.com/infinispan/infinispan/pull/7856#discussion_r385576703", "createdAt": "2020-02-28T08:59:31Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/xsite/status/TakeOfflineManager.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.infinispan.xsite.status;\n+\n+import java.util.Map;\n+\n+import org.infinispan.configuration.cache.TakeOfflineConfiguration;\n+import org.infinispan.configuration.cache.TakeOfflineConfigurationBuilder;\n+import org.infinispan.remoting.transport.XSiteResponse;\n+\n+/**\n+ * It keeps tracks of cross-site requests to take sites offline when certain failures conditions happen.\n+ * <p>\n+ * Those condition are configured in {@link TakeOfflineConfiguration}.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 11.0\n+ */\n+public interface TakeOfflineManager {\n+\n+   /**\n+    * Registers a cross-site request made.\n+    * <p>\n+    * Handles the response for the request and takes action in case of failure.\n+    *\n+    * @param response The cross-site response.\n+    */\n+   void registerRequest(XSiteResponse response);\n+\n+   /**\n+    * Returns the site state for site {@code siteName}.\n+    * <p>\n+    * The site can be {@link SiteState#ONLINE} or {@link SiteState#OFFLINE}. If it doesn't exist, {@link\n+    * SiteState#NOT_FOUND} is returned.\n+    *\n+    * @param siteName The remote site name.\n+    * @return The {@link SiteState}.\n+    */\n+   SiteState getSiteState(String siteName);\n+\n+   /**\n+    * It changes the {@link TakeOfflineConfiguration} for site {@code siteName}.\n+    * <p>\n+    * If the {@code siteName} doesn't exist, this method is a no-op.\n+    *\n+    * @param siteName      The remote site name.\n+    * @param afterFailures The new {@link TakeOfflineConfigurationBuilder#afterFailures(int)} or {@code null} for no\n+    *                      changes.\n+    * @param minTimeToWait The new {@link TakeOfflineConfigurationBuilder#minTimeToWait(long)} or {@code null} for no\n+    *                      changes.\n+    */\n+   void amendConfiguration(String siteName, Integer afterFailures, Long minTimeToWait);\n+\n+   /**\n+    * It returns the current {@link TakeOfflineConfiguration} for site {@code siteName}.\n+    *\n+    * @param siteName The remote site name.\n+    * @return The current {@link TakeOfflineConfiguration} or {@code null} if the site {@code siteName} doesn't exist.\n+    */\n+   TakeOfflineConfiguration getConfiguration(String siteName);\n+\n+   /**\n+    * It returns a {@link Map} with the sites name and their state (Online or Offline).\n+    * <p>\n+    * If a site is online, then its value is {@link Boolean#TRUE}, otherwise is {@link Boolean#FALSE}.\n+    *\n+    * @return A {@link Map} with the site state.\n+    */\n+   Map<String, Boolean> status();\n+\n+   /*\n+    * Brings a site with the given name back online.\n+    */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e0c7565c567f66a58f4abf89ed5703d757542c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU4NDI3Nw==", "bodyText": "yeah sorry!", "url": "https://github.com/infinispan/infinispan/pull/7856#discussion_r385584277", "createdAt": "2020-02-28T09:17:11Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/xsite/status/TakeOfflineManager.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.infinispan.xsite.status;\n+\n+import java.util.Map;\n+\n+import org.infinispan.configuration.cache.TakeOfflineConfiguration;\n+import org.infinispan.configuration.cache.TakeOfflineConfigurationBuilder;\n+import org.infinispan.remoting.transport.XSiteResponse;\n+\n+/**\n+ * It keeps tracks of cross-site requests to take sites offline when certain failures conditions happen.\n+ * <p>\n+ * Those condition are configured in {@link TakeOfflineConfiguration}.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 11.0\n+ */\n+public interface TakeOfflineManager {\n+\n+   /**\n+    * Registers a cross-site request made.\n+    * <p>\n+    * Handles the response for the request and takes action in case of failure.\n+    *\n+    * @param response The cross-site response.\n+    */\n+   void registerRequest(XSiteResponse response);\n+\n+   /**\n+    * Returns the site state for site {@code siteName}.\n+    * <p>\n+    * The site can be {@link SiteState#ONLINE} or {@link SiteState#OFFLINE}. If it doesn't exist, {@link\n+    * SiteState#NOT_FOUND} is returned.\n+    *\n+    * @param siteName The remote site name.\n+    * @return The {@link SiteState}.\n+    */\n+   SiteState getSiteState(String siteName);\n+\n+   /**\n+    * It changes the {@link TakeOfflineConfiguration} for site {@code siteName}.\n+    * <p>\n+    * If the {@code siteName} doesn't exist, this method is a no-op.\n+    *\n+    * @param siteName      The remote site name.\n+    * @param afterFailures The new {@link TakeOfflineConfigurationBuilder#afterFailures(int)} or {@code null} for no\n+    *                      changes.\n+    * @param minTimeToWait The new {@link TakeOfflineConfigurationBuilder#minTimeToWait(long)} or {@code null} for no\n+    *                      changes.\n+    */\n+   void amendConfiguration(String siteName, Integer afterFailures, Long minTimeToWait);\n+\n+   /**\n+    * It returns the current {@link TakeOfflineConfiguration} for site {@code siteName}.\n+    *\n+    * @param siteName The remote site name.\n+    * @return The current {@link TakeOfflineConfiguration} or {@code null} if the site {@code siteName} doesn't exist.\n+    */\n+   TakeOfflineConfiguration getConfiguration(String siteName);\n+\n+   /**\n+    * It returns a {@link Map} with the sites name and their state (Online or Offline).\n+    * <p>\n+    * If a site is online, then its value is {@link Boolean#TRUE}, otherwise is {@link Boolean#FALSE}.\n+    *\n+    * @return A {@link Map} with the site state.\n+    */\n+   Map<String, Boolean> status();\n+\n+   /*\n+    * Brings a site with the given name back online.\n+    */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NjcwMw=="}, "originalCommit": {"oid": "24e0c7565c567f66a58f4abf89ed5703d757542c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODAzNDE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/xsite/BackupSenderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTowNDozMVrOFvt24A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOToxOTozOVrOFvuRKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3ODcyMA==", "bodyText": "Why do we no need to register the request when we didn't before? AFAICT, there was no call to XSiteResponse#whenCompleted previously", "url": "https://github.com/infinispan/infinispan/pull/7856#discussion_r385578720", "createdAt": "2020-02-28T09:04:31Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/xsite/BackupSenderImpl.java", "diffHunk": "@@ -244,21 +173,18 @@ private void sendTo(XSiteReplicateCommand command, Collection<XSiteBackup> xSite\n       if (rpcManager == null) {\n          for (XSiteBackup backup : xSiteBackups) {\n             XSiteResponse cs = transport.backupRemotely(backup, command);\n+            takeOfflineManager.registerRequest(cs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e0c7565c567f66a58f4abf89ed5703d757542c"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU4NTQ1MA==", "bodyText": "the previous one is here\nhttps://github.com/infinispan/infinispan/blob/master/core/src/main/java/org/infinispan/xsite/BackupSenderImpl.java#L418\nThe old method updates the offline status and handles the exception. in this PR, it only handles the exception.", "url": "https://github.com/infinispan/infinispan/pull/7856#discussion_r385585450", "createdAt": "2020-02-28T09:19:39Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/xsite/BackupSenderImpl.java", "diffHunk": "@@ -244,21 +173,18 @@ private void sendTo(XSiteReplicateCommand command, Collection<XSiteBackup> xSite\n       if (rpcManager == null) {\n          for (XSiteBackup backup : xSiteBackups) {\n             XSiteResponse cs = transport.backupRemotely(backup, command);\n+            takeOfflineManager.registerRequest(cs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3ODcyMA=="}, "originalCommit": {"oid": "24e0c7565c567f66a58f4abf89ed5703d757542c"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4564, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}