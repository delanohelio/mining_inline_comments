{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNDc2Mzkw", "number": 8367, "title": "ISPN-11869 updating docs for memory configuration", "bodyText": "https://issues.redhat.com/browse/ISPN-11869", "createdAt": "2020-05-21T17:18:47Z", "url": "https://github.com/infinispan/infinispan/pull/8367", "merged": true, "mergeCommit": {"oid": "f8a9b254211e7c902db262de7220e35b336584c4"}, "closed": true, "closedAt": "2020-06-11T16:14:55Z", "author": {"login": "oraNod"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjuHnbgBqjMzNjM4MDgzMTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqPtSygBqjM0MzQ2MTU3NDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa9411e7351462117f0a2e6bf3aa8bee34a760dc", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/aa9411e7351462117f0a2e6bf3aa8bee34a760dc", "committedDate": "2020-05-21T17:18:00Z", "message": "ISPN-11869 updating docs for memory configuration"}, "afterCommit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "committedDate": "2020-05-22T08:37:12Z", "message": "ISPN-11869 updating docs for memory configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTczNjcy", "url": "https://github.com/infinispan/infinispan/pull/8367#pullrequestreview-418973672", "createdAt": "2020-05-27T08:35:08Z", "commit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODozNTowOFrOGa_DGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODo1MDoyOFrOGa_nmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0OTE0Nw==", "bodyText": "The whole \"memory-object\" type is already deprecated, we should not mention the replacament here because it lacks scope: use the \"max-size\" attribute instead appear to refer to the memory-object itself", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430949147", "createdAt": "2020-05-27T08:35:08Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1401,17 +1403,19 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          when the number of entries exceeds the size.\n+          Deprecated, use the \"max-size\" attribute instead. Defines the size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MzA4Mw==", "bodyText": "The whole \"memory-object\" type is already deprecated, so there isn't really a replacement on a per attribute basis", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430953083", "createdAt": "2020-05-27T08:41:33Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1401,17 +1403,19 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          when the number of entries exceeds the size.\n+          Deprecated, use the \"max-size\" attribute instead. Defines the size\n+          of the data container as a long. Eviction occurs when the number of\n+          entries exceeds the size.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n     <xs:attribute name=\"strategy\" type=\"tns:eviction-strategy\">\n       <xs:annotation>\n         <xs:documentation>\n-          Specifies a strategy for evicting cache entries. Eviction always\n-          takes place when you define the size of the data container. If you\n-          specify a value for size, then you should configure a strategy.\n+          Deprecated, use the \"when-full\" attribute instead. Specifies a\n+          strategy for evicting cache entries. Eviction always takes place when\n+          you define the size of the data container. If you specify a value for\n+          size, then you should configure a strategy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MzMyNQ==", "bodyText": "Same as above, \"memory-binary\" is already deprecated as a whole", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430953325", "createdAt": "2020-05-27T08:41:59Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1421,15 +1425,16 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          either when the number of entries or amount of memory exceeds the\n-          size.\n+          Deprecated, use the \"max-size\" attribute instead. Defines the size of\n+          the data container as a long. Eviction occurs either when the number\n+          of entries or amount of memory exceeds the size.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MzQ2MQ==", "bodyText": "Same as above", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430953461", "createdAt": "2020-05-27T08:42:11Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1421,15 +1425,16 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          either when the number of entries or amount of memory exceeds the\n-          size.\n+          Deprecated, use the \"max-size\" attribute instead. Defines the size of\n+          the data container as a long. Eviction occurs either when the number\n+          of entries or amount of memory exceeds the size.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n     <xs:attribute name=\"eviction\" type=\"tns:eviction-type\">\n       <xs:annotation>\n         <xs:documentation>\n+          Deprecated, use the \"max-size\" or \"max-count\" attribute instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MzU5MQ==", "bodyText": "Same as above", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430953591", "createdAt": "2020-05-27T08:42:24Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1438,9 +1443,10 @@\n     <xs:attribute name=\"strategy\" type=\"tns:eviction-strategy\">\n       <xs:annotation>\n         <xs:documentation>\n-          Specifies a strategy for evicting cache entries. Eviction always\n-          takes place when you define the size of the data container. If you\n-          specify a value for size, then you should configure a strategy.\n+          Deprecated, use the \"when-full\" attribute instead. Specifies a\n+          strategy for evicting cache entries. Eviction always takes place when\n+          you define the size of the data container. If you specify a value for\n+          size, then you should configure a strategy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1Mzg0NQ==", "bodyText": "The whole memory-off-heap is already deprecated", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430953845", "createdAt": "2020-05-27T08:42:47Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1450,15 +1456,16 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          either when the number of entries or amount of memory exceeds the\n-          size.\n+          Deprecated, use the \"max-size\" attribute instead. Defines the size of\n+          the data container as a long. Eviction occurs either when the number\n+          of entries or amount of memory exceeds the size.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MzkzNA==", "bodyText": "idem", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430953934", "createdAt": "2020-05-27T08:42:56Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1450,15 +1456,16 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          either when the number of entries or amount of memory exceeds the\n-          size.\n+          Deprecated, use the \"max-size\" attribute instead. Defines the size of\n+          the data container as a long. Eviction occurs either when the number\n+          of entries or amount of memory exceeds the size.\n       </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n     <xs:attribute name=\"eviction\" type=\"tns:eviction-type\">\n       <xs:annotation>\n         <xs:documentation>\n+          Deprecated, use the \"max-size\" or \"max-count\" attribute instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1NDEwNw==", "bodyText": "idem", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430954107", "createdAt": "2020-05-27T08:43:14Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1467,9 +1474,10 @@\n     <xs:attribute name=\"strategy\" type=\"tns:eviction-strategy\">\n       <xs:annotation>\n         <xs:documentation>\n-          Specifies a strategy for evicting cache entries. Eviction always\n-          takes place when you define the size of the data container. If you\n-          specify a value for size, then you should configure a strategy.\n+          Deprecated, use the \"when-full\" attribute instead. Specifies a\n+          strategy for evicting cache entries. Eviction always takes place when\n+          you define the size of the data container. If you specify a value for\n+          size, then you should configure a strategy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1NzAwNw==", "bodyText": ".storage(OFF_HEAP)", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430957007", "createdAt": "2020-05-27T08:48:06Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_offheap.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+[id='configure_off_heap-{context}']\n+= Configuring {brandname} to Store Cache Entries Off Heap\n+{brandname} can use either JVM heap memory or off-heap native memory as the\n+data container for cache entries. By default {brandname} stores cache entries in JVM heap memory.\n+\n+.Procedure\n+\n+To store cache entries in off-heap memory, configure {brandname} in one of the\n+following ways:\n+\n+* Declaratively: Set the `storage=\"OFF_HEAP\"` attribute to the `memory` element.\n+* Programmatically: Call the `storageType(\"off-heap\")` method in the `MemoryConfigurationBuilder` class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1NzUxNg==", "bodyText": ".storage(OFF_HEAP)", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430957516", "createdAt": "2020-05-27T08:48:59Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_offheap.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+[id='configure_off_heap-{context}']\n+= Configuring {brandname} to Store Cache Entries Off Heap\n+{brandname} can use either JVM heap memory or off-heap native memory as the\n+data container for cache entries. By default {brandname} stores cache entries in JVM heap memory.\n+\n+.Procedure\n+\n+To store cache entries in off-heap memory, configure {brandname} in one of the\n+following ways:\n+\n+* Declaratively: Set the `storage=\"OFF_HEAP\"` attribute to the `memory` element.\n+* Programmatically: Call the `storageType(\"off-heap\")` method in the `MemoryConfigurationBuilder` class.\n+\n+[NOTE]\n+====\n+{brandname} can use off-heap storage with eviction based on the total number of\n+entries or maximum amount of memory.\n+====\n+\n+.Declarative example\n+\n+[source,xml,options=\"nowrap\"]\n+----\n+<local-cache name=\"off_heap_binary\">\n+  <encoding media-type=\"application/x-protostream\"/>\n+  <memory storage=\"OFF_HEAP\" max-size=\"1.5GB\" when-full=\"REMOVE\"/>\n+</local-cache>\n+----\n+\n+.Programmatic example\n+\n+[source,java,options=\"nowrap\"]\n+----\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .memory()\n+    .storageType(\"off-heap\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1NzczOQ==", "bodyText": ".maxCount(500)", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430957739", "createdAt": "2020-05-27T08:49:20Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_offheap.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+[id='configure_off_heap-{context}']\n+= Configuring {brandname} to Store Cache Entries Off Heap\n+{brandname} can use either JVM heap memory or off-heap native memory as the\n+data container for cache entries. By default {brandname} stores cache entries in JVM heap memory.\n+\n+.Procedure\n+\n+To store cache entries in off-heap memory, configure {brandname} in one of the\n+following ways:\n+\n+* Declaratively: Set the `storage=\"OFF_HEAP\"` attribute to the `memory` element.\n+* Programmatically: Call the `storageType(\"off-heap\")` method in the `MemoryConfigurationBuilder` class.\n+\n+[NOTE]\n+====\n+{brandname} can use off-heap storage with eviction based on the total number of\n+entries or maximum amount of memory.\n+====\n+\n+.Declarative example\n+\n+[source,xml,options=\"nowrap\"]\n+----\n+<local-cache name=\"off_heap_binary\">\n+  <encoding media-type=\"application/x-protostream\"/>\n+  <memory storage=\"OFF_HEAP\" max-size=\"1.5GB\" when-full=\"REMOVE\"/>\n+</local-cache>\n+----\n+\n+.Programmatic example\n+\n+[source,java,options=\"nowrap\"]\n+----\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .memory()\n+    .storageType(\"off-heap\")\n+    .maxCount(\"500\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1ODQ4OQ==", "bodyText": "maxCount(500)", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430958489", "createdAt": "2020-05-27T08:50:28Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_size.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+[id='configure_eviction_total-{context}']\n+= Configuring the Total Number of Entries for {brandname} Caches\n+Limit the size of the data container for cache entries to a total number of\n+entries.\n+\n+.Procedure\n+\n+. Specify the total number of entries that caches can contain before\n+{brandname} performs eviction.\n++\n+* Declaratively: Set the `max-count` attribute.\n+* Programmatically: Call the `maxCount()` method.\n++\n+. Configure an eviction strategy to control how {brandname} removes entries.\n++\n+* Declaratively: Set the `when-full` attribute.\n+* Programmatically: Call the `whenFull()` method.\n+\n+\n+.Declarative example\n+\n+[source,xml,options=\"nowrap\"]\n+----\n+<local-cache>\n+  <memory max-count=\"500\" when-full=\"REMOVE\"/>\n+</local-cache>\n+----\n+\n+.Programmatic example\n+\n+[source,java,options=\"nowrap\"]\n+----\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .memory()\n+    .maxCount(\"500\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39"}, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "committedDate": "2020-05-22T08:37:12Z", "message": "ISPN-11869 updating docs for memory configuration"}, "afterCommit": {"oid": "1aee59ceda90e2b181d1afeb5b97ee212e806a6b", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/1aee59ceda90e2b181d1afeb5b97ee212e806a6b", "committedDate": "2020-05-27T09:25:56Z", "message": "gustavo review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1aee59ceda90e2b181d1afeb5b97ee212e806a6b", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/1aee59ceda90e2b181d1afeb5b97ee212e806a6b", "committedDate": "2020-05-27T09:25:56Z", "message": "gustavo review"}, "afterCommit": {"oid": "d3ec420c464fb6d6ceac725ef5a14ddccb3bd61e", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/d3ec420c464fb6d6ceac725ef5a14ddccb3bd61e", "committedDate": "2020-05-27T09:29:19Z", "message": "ISPN-11869 updating docs for memory configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3ec420c464fb6d6ceac725ef5a14ddccb3bd61e", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/d3ec420c464fb6d6ceac725ef5a14ddccb3bd61e", "committedDate": "2020-05-27T09:29:19Z", "message": "ISPN-11869 updating docs for memory configuration"}, "afterCommit": {"oid": "b5d5abd13fdf72487f44b04a2176a1fc3ea3478d", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/b5d5abd13fdf72487f44b04a2176a1fc3ea3478d", "committedDate": "2020-05-27T12:53:56Z", "message": "ISPN-11869 updating docs for memory configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5d5abd13fdf72487f44b04a2176a1fc3ea3478d", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/b5d5abd13fdf72487f44b04a2176a1fc3ea3478d", "committedDate": "2020-05-27T12:53:56Z", "message": "ISPN-11869 updating docs for memory configuration"}, "afterCommit": {"oid": "04b71d2f7cddaeb4b6987754b04a2fdbf7d95659", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/04b71d2f7cddaeb4b6987754b04a2fdbf7d95659", "committedDate": "2020-06-02T11:29:02Z", "message": "ISPN-11869 updating docs for memory configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04b71d2f7cddaeb4b6987754b04a2fdbf7d95659", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/04b71d2f7cddaeb4b6987754b04a2fdbf7d95659", "committedDate": "2020-06-02T11:29:02Z", "message": "ISPN-11869 updating docs for memory configuration"}, "afterCommit": {"oid": "4909e0343d3962818587dc7d7a3d639a8ca11224", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/4909e0343d3962818587dc7d7a3d639a8ca11224", "committedDate": "2020-06-02T11:29:42Z", "message": "ISPN-11869 updating docs for memory configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyOTEzOTgx", "url": "https://github.com/infinispan/infinispan/pull/8367#pullrequestreview-422913981", "createdAt": "2020-06-02T17:46:33Z", "commit": {"oid": "4909e0343d3962818587dc7d7a3d639a8ca11224"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo0NjozM1rOGd86hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo1NTo0MFrOGd9P1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1OTkxMQ==", "bodyText": "I wouldn't say they should. The default of REMOVE is probably just fine for the vast majority of use cases.", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434059911", "createdAt": "2020-06-02T17:46:33Z", "author": {"login": "wburns"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1401,17 +1403,16 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          when the number of entries exceeds the size.\n+          Eviction occurs when the number of entries exceeds the size.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n     <xs:attribute name=\"strategy\" type=\"tns:eviction-strategy\">\n       <xs:annotation>\n         <xs:documentation>\n-          Specifies a strategy for evicting cache entries. Eviction always\n-          takes place when you define the size of the data container. If you\n-          specify a value for size, then you should configure a strategy.\n+          Eviction always takes place when you define the size of the data\n+          container. If you specify a value for size, then you should configure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4909e0343d3962818587dc7d7a3d639a8ca11224"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MTE3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * [*] Eviction lets {brandname} control the size of the data container.\n          \n          \n            \n            {brandname} performs eviction when you add entries to the cache.\n          \n          \n            \n            * [*] Eviction lets {brandname} control the size of the data container by evicting entries when the container becomes larger than a configured threshold.\n          \n      \n    \n    \n  \n\nWdyt?", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434061176", "createdAt": "2020-06-02T17:48:35Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_evict_vs_expire.adoc", "diffHunk": "@@ -5,8 +5,8 @@ they remove old, unused entries. Although eviction and expiration are similar,\n they have some important differences that you should take into account when\n planning your configuration.\n \n-* [*] Eviction prevents {brandname} from exceeding the maximum size of the data\n-container. {brandname} performs eviction when you add entries to the cache.\n+* [*] Eviction lets {brandname} control the size of the data container.\n+{brandname} performs eviction when you add entries to the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4909e0343d3962818587dc7d7a3d639a8ca11224"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MjU3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                .whenFull(\"REMOVE\")\n          \n          \n            \n                .whenFull(EvictionStrategy.REMOVE)", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434062572", "createdAt": "2020-06-02T17:51:00Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_offheap.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+[id='configure_off_heap-{context}']\n+= Configuring {brandname} to Store Cache Entries Off Heap\n+{brandname} can use either JVM heap memory or off-heap native memory as the\n+data container for cache entries. By default {brandname} stores cache entries in JVM heap memory.\n+\n+.Procedure\n+\n+To store cache entries in off-heap memory, configure {brandname} in one of the\n+following ways:\n+\n+* Declaratively: Set the `storage=\"OFF_HEAP\"` attribute to the `memory` element.\n+* Programmatically: Call the `storage(OFF_HEAP)` method in the `MemoryConfigurationBuilder` class.\n+\n+[NOTE]\n+====\n+{brandname} can use off-heap storage with eviction based on the total number of\n+entries or maximum amount of memory.\n+====\n+\n+.Declarative example\n+\n+[source,xml,options=\"nowrap\"]\n+----\n+<local-cache name=\"off_heap_binary\">\n+  <encoding media-type=\"application/x-protostream\"/>\n+  <memory storage=\"OFF_HEAP\" max-size=\"1.5GB\" when-full=\"REMOVE\"/>\n+</local-cache>\n+----\n+\n+.Programmatic example\n+\n+[source,java,options=\"nowrap\"]\n+----\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .memory()\n+    .storage(OFF_HEAP)\n+    .maxCount(500)\n+    .whenFull(\"REMOVE\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4909e0343d3962818587dc7d7a3d639a8ca11224"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2Mjg3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                .storage(OFF_HEAP)\n          \n          \n            \n                .storage(StorageType.OFF_HEAP)", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434062873", "createdAt": "2020-06-02T17:51:30Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_offheap.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+[id='configure_off_heap-{context}']\n+= Configuring {brandname} to Store Cache Entries Off Heap\n+{brandname} can use either JVM heap memory or off-heap native memory as the\n+data container for cache entries. By default {brandname} stores cache entries in JVM heap memory.\n+\n+.Procedure\n+\n+To store cache entries in off-heap memory, configure {brandname} in one of the\n+following ways:\n+\n+* Declaratively: Set the `storage=\"OFF_HEAP\"` attribute to the `memory` element.\n+* Programmatically: Call the `storage(OFF_HEAP)` method in the `MemoryConfigurationBuilder` class.\n+\n+[NOTE]\n+====\n+{brandname} can use off-heap storage with eviction based on the total number of\n+entries or maximum amount of memory.\n+====\n+\n+.Declarative example\n+\n+[source,xml,options=\"nowrap\"]\n+----\n+<local-cache name=\"off_heap_binary\">\n+  <encoding media-type=\"application/x-protostream\"/>\n+  <memory storage=\"OFF_HEAP\" max-size=\"1.5GB\" when-full=\"REMOVE\"/>\n+</local-cache>\n+----\n+\n+.Programmatic example\n+\n+[source,java,options=\"nowrap\"]\n+----\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .memory()\n+    .storage(OFF_HEAP)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4909e0343d3962818587dc7d7a3d639a8ca11224"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MzE0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                .whenFull(\"REMOVE\")\n          \n          \n            \n                .whenFull(EvictionStrategy.REMOVE)", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434063148", "createdAt": "2020-06-02T17:52:02Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_size.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+[id='configure_eviction_total-{context}']\n+= Configuring the Total Number of Entries for {brandname} Caches\n+Limit the size of the data container for cache entries to a total number of\n+entries.\n+\n+.Procedure\n+\n+. Specify the total number of entries that caches can contain before\n+{brandname} performs eviction.\n++\n+* Declaratively: Set the `max-count` attribute.\n+* Programmatically: Call the `maxCount()` method.\n++\n+. Configure an eviction strategy to control how {brandname} removes entries.\n++\n+* Declaratively: Set the `when-full` attribute.\n+* Programmatically: Call the `whenFull()` method.\n+\n+\n+.Declarative example\n+\n+[source,xml,options=\"nowrap\"]\n+----\n+<local-cache>\n+  <memory max-count=\"500\" when-full=\"REMOVE\"/>\n+</local-cache>\n+----\n+\n+.Programmatic example\n+\n+[source,java,options=\"nowrap\"]\n+----\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .memory()\n+    .maxCount(500)\n+    .whenFull(\"REMOVE\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4909e0343d3962818587dc7d7a3d639a8ca11224"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MzkzOA==", "bodyText": "Should we mention here that the storage media type has to be a binary based one?", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434063938", "createdAt": "2020-06-02T17:53:16Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_size_bytes.adoc", "diffHunk": "@@ -0,0 +1,60 @@\n+[id='configure_eviction_size-{context}']\n+= Configuring the Maximum Amount of Memory for {brandname} Caches\n+Limit the size of the data container for cache entries to a maximum amount of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4909e0343d3962818587dc7d7a3d639a8ca11224"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NDQzMg==", "bodyText": "Believe we should have the media-type here since OFF_HEAP doesn't work with object media type.", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434064432", "createdAt": "2020-06-02T17:54:08Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/ref_eviction_examples.adoc", "diffHunk": "@@ -1,92 +1,92 @@\n [id='eviction_example-{context}']\n = Eviction Examples\n \n-You configure eviction in `infinispan.xml` as part of your cache definition.\n+You configure eviction as part of your cache definition.\n \n .Default memory configuration\n \n Eviction is not enabled, which is the default configuration. {brandname} stores\n-cache entries as objects in the data container.\n+cache entries as objects in the JVM heap.\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n <memory />\n ----\n \n-.Passivation with eviction\n+.Eviction based on the total number of entries\n \n-Passivation persists data to cache stores when {brandname} evicts entries. You\n-should always enable eviction if you enable passivation.\n+{brandname} stores cache entries as objects in the JVM heap. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<persistence passivation=\"true\">\n-  ...\n-</persistence>\n-\n-<memory />\n+<memory max-count=\"100\"/>\n ----\n \n-.Manual eviction\n+.Eviction based maximum size in bytes\n+\n+{brandname} can store cache entries as `byte[]` arrays if you encode entries in binary storage formats, for example: `application/x-protostream` format.\n \n-{brandname} stores cache entries as objects. Eviction is not enabled but\n-performed manually using the `evict()` method.\n+In the following example, {brandname} performs eviction when the size of the\n+data container reaches 500 MB (megabytes) in size and it gets a request to\n+create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object strategy=\"MANUAL\" />\n-</memory>\n+<encoding media-type=\"application/x-protostream\"/> <1>\n+<memory max-size=\"500 MB\"/> <2>\n ----\n \n-.Object storage with eviction\n+<1> Specifies a binary format for entries in the cache.\n+<2> Defines the maximum size of the data container as MB (megabytes).\n \n-{brandname} stores cache entries as objects. Eviction happens when there are\n-100 entries in the data container and {brandname} gets a request to create a\n-new entry:\n+.Off-heap storage\n+\n+{brandname} stores cache entries as bytes in native memory. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object size=\"100\" />\n-</memory>\n+<memory storage=\"OFF_HEAP\" max-count=\"100\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4909e0343d3962818587dc7d7a3d639a8ca11224"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NDg1Ng==", "bodyText": "We should probably list the tx configuration too since it is required for exception strategy.", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434064856", "createdAt": "2020-06-02T17:54:51Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/ref_eviction_examples.adoc", "diffHunk": "@@ -1,92 +1,92 @@\n [id='eviction_example-{context}']\n = Eviction Examples\n \n-You configure eviction in `infinispan.xml` as part of your cache definition.\n+You configure eviction as part of your cache definition.\n \n .Default memory configuration\n \n Eviction is not enabled, which is the default configuration. {brandname} stores\n-cache entries as objects in the data container.\n+cache entries as objects in the JVM heap.\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n <memory />\n ----\n \n-.Passivation with eviction\n+.Eviction based on the total number of entries\n \n-Passivation persists data to cache stores when {brandname} evicts entries. You\n-should always enable eviction if you enable passivation.\n+{brandname} stores cache entries as objects in the JVM heap. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<persistence passivation=\"true\">\n-  ...\n-</persistence>\n-\n-<memory />\n+<memory max-count=\"100\"/>\n ----\n \n-.Manual eviction\n+.Eviction based maximum size in bytes\n+\n+{brandname} can store cache entries as `byte[]` arrays if you encode entries in binary storage formats, for example: `application/x-protostream` format.\n \n-{brandname} stores cache entries as objects. Eviction is not enabled but\n-performed manually using the `evict()` method.\n+In the following example, {brandname} performs eviction when the size of the\n+data container reaches 500 MB (megabytes) in size and it gets a request to\n+create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object strategy=\"MANUAL\" />\n-</memory>\n+<encoding media-type=\"application/x-protostream\"/> <1>\n+<memory max-size=\"500 MB\"/> <2>\n ----\n \n-.Object storage with eviction\n+<1> Specifies a binary format for entries in the cache.\n+<2> Defines the maximum size of the data container as MB (megabytes).\n \n-{brandname} stores cache entries as objects. Eviction happens when there are\n-100 entries in the data container and {brandname} gets a request to create a\n-new entry:\n+.Off-heap storage\n+\n+{brandname} stores cache entries as bytes in native memory. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object size=\"100\" />\n-</memory>\n+<memory storage=\"OFF_HEAP\" max-count=\"100\"/>\n ----\n \n-.Binary storage with memory-based eviction\n+.Off-heap storage with the exception strategy\n \n-{brandname} stores cache entries as bytes. Eviction happens when the size of\n-the data container reaches 100 bytes and {brandname} gets a request to create a\n-new entry:\n+{brandname} stores cache entries as bytes in native memory. When there are 100\n+entries in the data container, and {brandname} gets a request to create a new\n+entry, it throws an exception and does not allow the new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <binary size=\"100\" eviction=\"MEMORY\"/>\n-</memory>\n+<memory storage=\"OFF_HEAP\" max-count=\"100\" when-full=\"EXCEPTION\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4909e0343d3962818587dc7d7a3d639a8ca11224"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NTM2NQ==", "bodyText": "Should we mention this does nothing but prevents a warning message when passivation is enabled but there is no eviction configuration?", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434065365", "createdAt": "2020-06-02T17:55:40Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/ref_eviction_examples.adoc", "diffHunk": "@@ -1,92 +1,92 @@\n [id='eviction_example-{context}']\n = Eviction Examples\n \n-You configure eviction in `infinispan.xml` as part of your cache definition.\n+You configure eviction as part of your cache definition.\n \n .Default memory configuration\n \n Eviction is not enabled, which is the default configuration. {brandname} stores\n-cache entries as objects in the data container.\n+cache entries as objects in the JVM heap.\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n <memory />\n ----\n \n-.Passivation with eviction\n+.Eviction based on the total number of entries\n \n-Passivation persists data to cache stores when {brandname} evicts entries. You\n-should always enable eviction if you enable passivation.\n+{brandname} stores cache entries as objects in the JVM heap. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<persistence passivation=\"true\">\n-  ...\n-</persistence>\n-\n-<memory />\n+<memory max-count=\"100\"/>\n ----\n \n-.Manual eviction\n+.Eviction based maximum size in bytes\n+\n+{brandname} can store cache entries as `byte[]` arrays if you encode entries in binary storage formats, for example: `application/x-protostream` format.\n \n-{brandname} stores cache entries as objects. Eviction is not enabled but\n-performed manually using the `evict()` method.\n+In the following example, {brandname} performs eviction when the size of the\n+data container reaches 500 MB (megabytes) in size and it gets a request to\n+create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object strategy=\"MANUAL\" />\n-</memory>\n+<encoding media-type=\"application/x-protostream\"/> <1>\n+<memory max-size=\"500 MB\"/> <2>\n ----\n \n-.Object storage with eviction\n+<1> Specifies a binary format for entries in the cache.\n+<2> Defines the maximum size of the data container as MB (megabytes).\n \n-{brandname} stores cache entries as objects. Eviction happens when there are\n-100 entries in the data container and {brandname} gets a request to create a\n-new entry:\n+.Off-heap storage\n+\n+{brandname} stores cache entries as bytes in native memory. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object size=\"100\" />\n-</memory>\n+<memory storage=\"OFF_HEAP\" max-count=\"100\"/>\n ----\n \n-.Binary storage with memory-based eviction\n+.Off-heap storage with the exception strategy\n \n-{brandname} stores cache entries as bytes. Eviction happens when the size of\n-the data container reaches 100 bytes and {brandname} gets a request to create a\n-new entry:\n+{brandname} stores cache entries as bytes in native memory. When there are 100\n+entries in the data container, and {brandname} gets a request to create a new\n+entry, it throws an exception and does not allow the new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <binary size=\"100\" eviction=\"MEMORY\"/>\n-</memory>\n+<memory storage=\"OFF_HEAP\" max-count=\"100\" when-full=\"EXCEPTION\"/>\n ----\n \n-.Off-heap storage with count-based eviction\n+.Manual eviction\n \n-{brandname} stores cache entries as bytes in native memory. Eviction happens\n-when there are 100 entries in the data container and {brandname} gets a request\n-to create a new entry:\n+{brandname} stores cache entries as objects in the JVM heap. Eviction is not\n+enabled but performed manually using the `evict()` method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4909e0343d3962818587dc7d7a3d639a8ca11224"}, "originalPosition": 103}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3918cb79d079917637d70a9e946da46f3926c451", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/3918cb79d079917637d70a9e946da46f3926c451", "committedDate": "2020-06-03T10:30:30Z", "message": "Update documentation/src/main/asciidoc/topics/proc_configuring_memory_size.adoc\n\nCo-authored-by: William Burns <william.a.burns@gmail.com>"}, "afterCommit": {"oid": "19f3d697a2ce00327ecea1eaeb7bcf2fba771601", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/19f3d697a2ce00327ecea1eaeb7bcf2fba771601", "committedDate": "2020-06-03T11:02:22Z", "message": "ISPN-11869 updating docs for memory configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NTI0MTU4", "url": "https://github.com/infinispan/infinispan/pull/8367#pullrequestreview-424524158", "createdAt": "2020-06-04T14:43:58Z", "commit": {"oid": "19f3d697a2ce00327ecea1eaeb7bcf2fba771601"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDo0Mzo1OFrOGfJeVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTowMzoxMlrOGfKYdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxNDI2MA==", "bodyText": "Sorry rereading this again, this makes no sense to me as a description to strategy. I think the first sentence before was better \"Specifies a strategy for evicting cache entries.\"", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r435314260", "createdAt": "2020-06-04T14:43:58Z", "author": {"login": "wburns"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1401,17 +1403,15 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          when the number of entries exceeds the size.\n+          Eviction occurs when the number of entries exceeds the size.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n     <xs:attribute name=\"strategy\" type=\"tns:eviction-strategy\">\n       <xs:annotation>\n         <xs:documentation>\n-          Specifies a strategy for evicting cache entries. Eviction always\n-          takes place when you define the size of the data container. If you\n-          specify a value for size, then you should configure a strategy.\n+          Eviction always takes place when you define the size of the data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f3d697a2ce00327ecea1eaeb7bcf2fba771601"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyODc1MQ==", "bodyText": "We don't need this.", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r435328751", "createdAt": "2020-06-04T15:02:42Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/ref_eviction_examples.adoc", "diffHunk": "@@ -1,92 +1,104 @@\n [id='eviction_example-{context}']\n = Eviction Examples\n \n-You configure eviction in `infinispan.xml` as part of your cache definition.\n+You configure eviction as part of your cache definition.\n \n .Default memory configuration\n \n Eviction is not enabled, which is the default configuration. {brandname} stores\n-cache entries as objects in the data container.\n+cache entries as objects in the JVM heap.\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n <memory />\n ----\n \n-.Passivation with eviction\n+.Eviction based on the total number of entries\n \n-Passivation persists data to cache stores when {brandname} evicts entries. You\n-should always enable eviction if you enable passivation.\n+{brandname} stores cache entries as objects in the JVM heap. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<persistence passivation=\"true\">\n-  ...\n-</persistence>\n-\n-<memory />\n+<memory max-count=\"100\"/>\n ----\n \n-.Manual eviction\n+.Eviction based maximum size in bytes\n \n-{brandname} stores cache entries as objects. Eviction is not enabled but\n-performed manually using the `evict()` method.\n+{brandname} stores cache entries as `byte[]` arrays if you encode entries with\n+binary storage formats, for example: `application/x-protostream` format.\n+\n+In the following example, {brandname} performs eviction when the size of the\n+data container reaches 500 MB (megabytes) in size and it gets a request to\n+create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object strategy=\"MANUAL\" />\n-</memory>\n+<encoding media-type=\"application/x-protostream\"/> <1>\n+<memory max-size=\"500 MB\"/> <2>\n ----\n \n-.Object storage with eviction\n+<1> Specifies a binary format for entries in the cache.\n+<2> Defines the maximum size of the data container as MB (megabytes).\n+\n+.Off-heap storage\n \n-{brandname} stores cache entries as objects. Eviction happens when there are\n-100 entries in the data container and {brandname} gets a request to create a\n-new entry:\n+{brandname} stores cache entries as bytes in native memory. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object size=\"100\" />\n-</memory>\n+<encoding media-type=\"application/x-protostream\"/>\n+<memory storage=\"OFF_HEAP\" max-count=\"100\"/>\n ----\n \n-.Binary storage with memory-based eviction\n+.Off-heap storage with the exception strategy\n \n-{brandname} stores cache entries as bytes. Eviction happens when the size of\n-the data container reaches 100 bytes and {brandname} gets a request to create a\n-new entry:\n+{brandname} stores cache entries as bytes in native memory. When there are 100\n+entries in the data container, and {brandname} gets a request to create a new\n+entry, it throws an exception and does not allow the new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <binary size=\"100\" eviction=\"MEMORY\"/>\n-</memory>\n+<locking isolation=\"READ_COMMITTED\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f3d697a2ce00327ecea1eaeb7bcf2fba771601"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyOTE0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <transaction locking=\"OPTIMISTIC\" auto-commit=\"true\" complete-timeout=\"60000\" mode=\"NONE\"/>\n          \n          \n            \n            <transaction mode=\"NONE\"/>\n          \n      \n    \n    \n  \n\nJust to keep it simple.", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r435329140", "createdAt": "2020-06-04T15:03:12Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/ref_eviction_examples.adoc", "diffHunk": "@@ -1,92 +1,104 @@\n [id='eviction_example-{context}']\n = Eviction Examples\n \n-You configure eviction in `infinispan.xml` as part of your cache definition.\n+You configure eviction as part of your cache definition.\n \n .Default memory configuration\n \n Eviction is not enabled, which is the default configuration. {brandname} stores\n-cache entries as objects in the data container.\n+cache entries as objects in the JVM heap.\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n <memory />\n ----\n \n-.Passivation with eviction\n+.Eviction based on the total number of entries\n \n-Passivation persists data to cache stores when {brandname} evicts entries. You\n-should always enable eviction if you enable passivation.\n+{brandname} stores cache entries as objects in the JVM heap. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<persistence passivation=\"true\">\n-  ...\n-</persistence>\n-\n-<memory />\n+<memory max-count=\"100\"/>\n ----\n \n-.Manual eviction\n+.Eviction based maximum size in bytes\n \n-{brandname} stores cache entries as objects. Eviction is not enabled but\n-performed manually using the `evict()` method.\n+{brandname} stores cache entries as `byte[]` arrays if you encode entries with\n+binary storage formats, for example: `application/x-protostream` format.\n+\n+In the following example, {brandname} performs eviction when the size of the\n+data container reaches 500 MB (megabytes) in size and it gets a request to\n+create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object strategy=\"MANUAL\" />\n-</memory>\n+<encoding media-type=\"application/x-protostream\"/> <1>\n+<memory max-size=\"500 MB\"/> <2>\n ----\n \n-.Object storage with eviction\n+<1> Specifies a binary format for entries in the cache.\n+<2> Defines the maximum size of the data container as MB (megabytes).\n+\n+.Off-heap storage\n \n-{brandname} stores cache entries as objects. Eviction happens when there are\n-100 entries in the data container and {brandname} gets a request to create a\n-new entry:\n+{brandname} stores cache entries as bytes in native memory. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object size=\"100\" />\n-</memory>\n+<encoding media-type=\"application/x-protostream\"/>\n+<memory storage=\"OFF_HEAP\" max-count=\"100\"/>\n ----\n \n-.Binary storage with memory-based eviction\n+.Off-heap storage with the exception strategy\n \n-{brandname} stores cache entries as bytes. Eviction happens when the size of\n-the data container reaches 100 bytes and {brandname} gets a request to create a\n-new entry:\n+{brandname} stores cache entries as bytes in native memory. When there are 100\n+entries in the data container, and {brandname} gets a request to create a new\n+entry, it throws an exception and does not allow the new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <binary size=\"100\" eviction=\"MEMORY\"/>\n-</memory>\n+<locking isolation=\"READ_COMMITTED\"/>\n+\n+<transaction locking=\"OPTIMISTIC\" auto-commit=\"true\" complete-timeout=\"60000\" mode=\"NONE\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19f3d697a2ce00327ecea1eaeb7bcf2fba771601"}, "originalPosition": 97}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac1a85578479b0ae1cf81de75248b629864e03e3", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/ac1a85578479b0ae1cf81de75248b629864e03e3", "committedDate": "2020-06-05T09:19:13Z", "message": "Update documentation/src/main/asciidoc/topics/ref_eviction_examples.adoc\n\nCo-authored-by: William Burns <william.a.burns@gmail.com>"}, "afterCommit": {"oid": "fe2bb1a1fd813d32cc1f9cb3208739017555887b", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/fe2bb1a1fd813d32cc1f9cb3208739017555887b", "committedDate": "2020-06-05T09:44:09Z", "message": "ISPN-11869 updating docs for memory configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe2bb1a1fd813d32cc1f9cb3208739017555887b", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/fe2bb1a1fd813d32cc1f9cb3208739017555887b", "committedDate": "2020-06-05T09:44:09Z", "message": "ISPN-11869 updating docs for memory configuration"}, "afterCommit": {"oid": "cd4446008a0e0110be4261741b06be0a51fa12c7", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/cd4446008a0e0110be4261741b06be0a51fa12c7", "committedDate": "2020-06-08T11:28:43Z", "message": "ISPN-11869 updating docs for memory configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd4446008a0e0110be4261741b06be0a51fa12c7", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/cd4446008a0e0110be4261741b06be0a51fa12c7", "committedDate": "2020-06-08T11:28:43Z", "message": "ISPN-11869 updating docs for memory configuration"}, "afterCommit": {"oid": "096d50c795b6af1781baff3a17a6e18a044c7cee", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/096d50c795b6af1781baff3a17a6e18a044c7cee", "committedDate": "2020-06-09T12:23:40Z", "message": "ISPN-11869 updating docs for memory configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "096d50c795b6af1781baff3a17a6e18a044c7cee", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/096d50c795b6af1781baff3a17a6e18a044c7cee", "committedDate": "2020-06-09T12:23:40Z", "message": "ISPN-11869 updating docs for memory configuration"}, "afterCommit": {"oid": "e7d4d7406398471a01e5bb0d1b4c8275da827759", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/e7d4d7406398471a01e5bb0d1b4c8275da827759", "committedDate": "2020-06-09T16:00:39Z", "message": "ISPN-11869 updating docs for memory configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3OTEyOTkx", "url": "https://github.com/infinispan/infinispan/pull/8367#pullrequestreview-427912991", "createdAt": "2020-06-10T10:15:36Z", "commit": {"oid": "e7d4d7406398471a01e5bb0d1b4c8275da827759"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDoxNTozNlrOGhuXfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDoxNTozNlrOGhuXfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAxNTg2OA==", "bodyText": "Suggestion:\nIt is recommended to configure the encoding for caches.\nIf not configured, {brandname} uses the MediaType of the marshaller from the `serialization` \nconfiguration of the cache container.", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r438015868", "createdAt": "2020-06-10T10:15:36Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_size_bytes.adoc", "diffHunk": "@@ -0,0 +1,61 @@\n+[id='configure_eviction_size-{context}']\n+= Configuring the Maximum Amount of Memory for {brandname} Caches\n+Limit the size of the data container for cache entries to a maximum amount of\n+memory. Performing eviction based on the maximum amount of memory requires you\n+to use a binary-based storage format for the data container.\n+\n+.Procedure\n+\n+. Configure your {brandname} cache to use a storage format that supports binary encoding.\n++\n+[NOTE]\n+====\n+Configuring the encoding for caches is optional. {brandname} uses the MediaType\n+that is determined by user configured marshallers if you do not configure\n+encoding for caches.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d4d7406398471a01e5bb0d1b4c8275da827759"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7d4d7406398471a01e5bb0d1b4c8275da827759", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/e7d4d7406398471a01e5bb0d1b4c8275da827759", "committedDate": "2020-06-09T16:00:39Z", "message": "ISPN-11869 updating docs for memory configuration"}, "afterCommit": {"oid": "058bab8484f544d31bc0bb2d48458fb16dfc93c1", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/058bab8484f544d31bc0bb2d48458fb16dfc93c1", "committedDate": "2020-06-10T11:49:13Z", "message": "ISPN-11869 updating docs for memory configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDE4ODU2", "url": "https://github.com/infinispan/infinispan/pull/8367#pullrequestreview-428018856", "createdAt": "2020-06-10T12:51:31Z", "commit": {"oid": "058bab8484f544d31bc0bb2d48458fb16dfc93c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "058bab8484f544d31bc0bb2d48458fb16dfc93c1", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/058bab8484f544d31bc0bb2d48458fb16dfc93c1", "committedDate": "2020-06-10T11:49:13Z", "message": "ISPN-11869 updating docs for memory configuration"}, "afterCommit": {"oid": "771bb3bdc46f11825b894b45fe7e216d577042f0", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/771bb3bdc46f11825b894b45fe7e216d577042f0", "committedDate": "2020-06-11T08:56:28Z", "message": "ISPN-11869 updating docs for memory configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25acb4d092042d1662db036bef21d27a793cd245", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/25acb4d092042d1662db036bef21d27a793cd245", "committedDate": "2020-06-11T15:08:46Z", "message": "ISPN-11869 updating docs for memory configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "771bb3bdc46f11825b894b45fe7e216d577042f0", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/771bb3bdc46f11825b894b45fe7e216d577042f0", "committedDate": "2020-06-11T08:56:28Z", "message": "ISPN-11869 updating docs for memory configuration"}, "afterCommit": {"oid": "25acb4d092042d1662db036bef21d27a793cd245", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/25acb4d092042d1662db036bef21d27a793cd245", "committedDate": "2020-06-11T15:08:46Z", "message": "ISPN-11869 updating docs for memory configuration"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 813, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}