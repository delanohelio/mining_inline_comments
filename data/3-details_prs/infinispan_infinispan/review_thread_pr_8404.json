{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NjA3MzA2", "number": 8404, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjo0Njo0NFrOEAl2YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNjowNlrOECnS1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDU1NTg1OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/con_write_behind.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjo0Njo0NFrOGb95xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjo0Njo0NFrOGb95xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3ODk0OQ==", "bodyText": "@wburns hi, does this sound correct? tbh it's not entirely clear to me but I know we want more non-blocking behaviour so I have some doubts. thx.", "url": "https://github.com/infinispan/infinispan/pull/8404#discussion_r431978949", "createdAt": "2020-05-28T16:46:44Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/con_write_behind.adoc", "diffHunk": "@@ -1,15 +1,14 @@\n [id='write_behind']\n = Write-Behind\n-Write-Behind is an cache writing mode where writes to memory are synchronous\n-and writes to cache stores are asynchronous. When a client application\n-updates a cache entry, {brandname} adds the update to a modification queue and\n-then modifies the cache store in a different thread than the client thread.\n-\n-You can configure the number of threads that consume the modification queue and\n-apply updates to the underlying cache store. The modification queue fills up if\n-there are not enough threads to handle the updates or if the underlying cache\n-store becomes unavailable. When this occurs, {brandname} uses Write-Through\n-mode until the modification queue can accept new entries.\n+Write-Behind is a cache writing mode where writes to memory are synchronous\n+and writes to cache stores are asynchronous. When client applications\n+update entries, {brandname} modifies cache stores in different threads to the\n+client threads.\n+\n+When clients send write requests, {brandname} adds those operations to a\n+modification queue until each previous write operation completes. If the \n+modification queue becomes full, subsequent write operations block the calling\n+threads.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffebc45b429dde2e8fe56c45b7e7341079d60a9a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzg5OTY3OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/con_persistence_spi.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODoxMjo1MVrOGd-HVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToxMDoyM1rOGfKsmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA3OTU3Mw==", "bodyText": "It doesn't really align anymore since our SPI is non blocking and theirs is blocking. However we will always have an adapter that bridges that by using the blocking thread pool.", "url": "https://github.com/infinispan/infinispan/pull/8404#discussion_r434079573", "createdAt": "2020-06-02T18:12:51Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_persistence_spi.adoc", "diffHunk": "@@ -1,12 +1,14 @@\n-[id='persistence_spi']\n-:context: spi\n-= {brandname} Persistence SPIs\n-{brandname} Service Provider Interfaces (SPI) enable read and write operations\n-to external storage and provide the following features:\n+[id='persistent_spi']\n+= {brandname} Persistence SPI\n+The {brandname} Service Provider Interface (SPI) enables read and write\n+operations to external storage through the `NonBlockingStore` interface and has\n+the following features:\n+\n+Non-Blocking::\n \n Portability across JCache-compliant vendors::\n-The {brandname} `CacheWriter` and `CacheLoader` interfaces align with the\n-`JSR-107` JCache specification.\n+The {brandname} `NonBlockingStore` interface aligns with the `JSR-107` JCache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeee4c3281f183c241defd98e611bd13090f025"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0ODE3Ng==", "bodyText": "@wburns I wasn't sure about this one. Should we just remove it or better to say something like:\n\"Infinispan maintains compatibility between the NonBlockingStore interface and the JCache specification by using an adapter for handling blocking code.\"", "url": "https://github.com/infinispan/infinispan/pull/8404#discussion_r434448176", "createdAt": "2020-06-03T09:53:05Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/con_persistence_spi.adoc", "diffHunk": "@@ -1,12 +1,14 @@\n-[id='persistence_spi']\n-:context: spi\n-= {brandname} Persistence SPIs\n-{brandname} Service Provider Interfaces (SPI) enable read and write operations\n-to external storage and provide the following features:\n+[id='persistent_spi']\n+= {brandname} Persistence SPI\n+The {brandname} Service Provider Interface (SPI) enables read and write\n+operations to external storage through the `NonBlockingStore` interface and has\n+the following features:\n+\n+Non-Blocking::\n \n Portability across JCache-compliant vendors::\n-The {brandname} `CacheWriter` and `CacheLoader` interfaces align with the\n-`JSR-107` JCache specification.\n+The {brandname} `NonBlockingStore` interface aligns with the `JSR-107` JCache", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA3OTU3Mw=="}, "originalCommit": {"oid": "3eeee4c3281f183c241defd98e611bd13090f025"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMzNDI5Ng==", "bodyText": "Sure.", "url": "https://github.com/infinispan/infinispan/pull/8404#discussion_r435334296", "createdAt": "2020-06-04T15:10:23Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_persistence_spi.adoc", "diffHunk": "@@ -1,12 +1,14 @@\n-[id='persistence_spi']\n-:context: spi\n-= {brandname} Persistence SPIs\n-{brandname} Service Provider Interfaces (SPI) enable read and write operations\n-to external storage and provide the following features:\n+[id='persistent_spi']\n+= {brandname} Persistence SPI\n+The {brandname} Service Provider Interface (SPI) enables read and write\n+operations to external storage through the `NonBlockingStore` interface and has\n+the following features:\n+\n+Non-Blocking::\n \n Portability across JCache-compliant vendors::\n-The {brandname} `CacheWriter` and `CacheLoader` interfaces align with the\n-`JSR-107` JCache specification.\n+The {brandname} `NonBlockingStore` interface aligns with the `JSR-107` JCache", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA3OTU3Mw=="}, "originalCommit": {"oid": "3eeee4c3281f183c241defd98e611bd13090f025"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzk1MjA0OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/con_write_behind.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODoyMjowM1rOGd-ncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODoyMjowM1rOGd-ncQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA4Nzc5Mw==", "bodyText": "We don't use different threads. That is up to the store implementation if it needs to use another thread.", "url": "https://github.com/infinispan/infinispan/pull/8404#discussion_r434087793", "createdAt": "2020-06-02T18:22:03Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_write_behind.adoc", "diffHunk": "@@ -1,15 +1,14 @@\n [id='write_behind']\n = Write-Behind\n-Write-Behind is an cache writing mode where writes to memory are synchronous\n-and writes to cache stores are asynchronous. When a client application\n-updates a cache entry, {brandname} adds the update to a modification queue and\n-then modifies the cache store in a different thread than the client thread.\n-\n-You can configure the number of threads that consume the modification queue and\n-apply updates to the underlying cache store. The modification queue fills up if\n-there are not enough threads to handle the updates or if the underlying cache\n-store becomes unavailable. When this occurs, {brandname} uses Write-Through\n-mode until the modification queue can accept new entries.\n+Write-Behind is a cache writing mode where writes to memory are synchronous\n+and writes to cache stores are asynchronous. When client applications\n+update entries, {brandname} modifies cache stores in different threads to the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeee4c3281f183c241defd98e611bd13090f025"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDAzNjgwOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/con_write_behind.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODo0NjoyOVrOGd_flw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDoyNjozMlrOGeVvVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwMjE2Nw==", "bodyText": "We will never block the calling thread, that is the new advantage of the SPI is it allows you to do to this and must. The way write behind works is there is a queue of modifications (which can be empty) and there may be a pending batch of operations being currently applied. The way it works is a write operation is added to the queue and if there is no pending batch it is submitted to be processed. The caller is never blocked during this and the operation completes immediately. If the pending batch is still running, the queue may fill up in the interim, when it does fill additional write operations are also enqueued but we do not allow the operation to complete immediately. Instead it will complete when the pending batch completes. We do this in a non blocking way, so the invoking thread is never blocked though.", "url": "https://github.com/infinispan/infinispan/pull/8404#discussion_r434102167", "createdAt": "2020-06-02T18:46:29Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_write_behind.adoc", "diffHunk": "@@ -1,15 +1,14 @@\n [id='write_behind']\n = Write-Behind\n-Write-Behind is an cache writing mode where writes to memory are synchronous\n-and writes to cache stores are asynchronous. When a client application\n-updates a cache entry, {brandname} adds the update to a modification queue and\n-then modifies the cache store in a different thread than the client thread.\n-\n-You can configure the number of threads that consume the modification queue and\n-apply updates to the underlying cache store. The modification queue fills up if\n-there are not enough threads to handle the updates or if the underlying cache\n-store becomes unavailable. When this occurs, {brandname} uses Write-Through\n-mode until the modification queue can accept new entries.\n+Write-Behind is a cache writing mode where writes to memory are synchronous\n+and writes to cache stores are asynchronous. When client applications\n+update entries, {brandname} modifies cache stores in different threads to the\n+client threads.\n+\n+When clients send write requests, {brandname} adds those operations to a\n+modification queue until each previous write operation completes. If the \n+modification queue becomes full, subsequent write operations block the calling", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eeee4c3281f183c241defd98e611bd13090f025"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ2NjY0Nw==", "bodyText": "@wburns argh. I thought I left a question on this one because I thought the same about the non-blocking SPI and probably got mixed up in a chat. I guess I didn't properly save the question in the review. I blame github. anyway, thx for the detailed explanation. hopefully it's better now.", "url": "https://github.com/infinispan/infinispan/pull/8404#discussion_r434466647", "createdAt": "2020-06-03T10:26:32Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/con_write_behind.adoc", "diffHunk": "@@ -1,15 +1,14 @@\n [id='write_behind']\n = Write-Behind\n-Write-Behind is an cache writing mode where writes to memory are synchronous\n-and writes to cache stores are asynchronous. When a client application\n-updates a cache entry, {brandname} adds the update to a modification queue and\n-then modifies the cache store in a different thread than the client thread.\n-\n-You can configure the number of threads that consume the modification queue and\n-apply updates to the underlying cache store. The modification queue fills up if\n-there are not enough threads to handle the updates or if the underlying cache\n-store becomes unavailable. When this occurs, {brandname} uses Write-Through\n-mode until the modification queue can accept new entries.\n+Write-Behind is a cache writing mode where writes to memory are synchronous\n+and writes to cache stores are asynchronous. When client applications\n+update entries, {brandname} modifies cache stores in different threads to the\n+client threads.\n+\n+When clients send write requests, {brandname} adds those operations to a\n+modification queue until each previous write operation completes. If the \n+modification queue becomes full, subsequent write operations block the calling", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwMjE2Nw=="}, "originalCommit": {"oid": "3eeee4c3281f183c241defd98e611bd13090f025"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTc2NDA2OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/con_write_behind.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNjowNlrOGfLaUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNjowNlrOGfLaUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NjAwMA==", "bodyText": "This paragraph still needs work I think.\nMaybe something along the lines that if the queue grows to be larger than the modification queue size any additional writes will be enqueued but the operation will not complete until part of the queue has been processed.\nThe problematic part is trying to differentiate between the write operation completing and the fact that that the store will not block the calling thread. For example Cache.putAsync will return immediately and the returned Stage will just complete later than normal, however a Cache.put will actually still block the invoking thread.", "url": "https://github.com/infinispan/infinispan/pull/8404#discussion_r435346000", "createdAt": "2020-06-04T15:26:06Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/con_write_behind.adoc", "diffHunk": "@@ -1,15 +1,15 @@\n [id='write_behind']\n = Write-Behind\n-Write-Behind is an cache writing mode where writes to memory are synchronous\n-and writes to cache stores are asynchronous. When a client application\n-updates a cache entry, {brandname} adds the update to a modification queue and\n-then modifies the cache store in a different thread than the client thread.\n-\n-You can configure the number of threads that consume the modification queue and\n-apply updates to the underlying cache store. The modification queue fills up if\n-there are not enough threads to handle the updates or if the underlying cache\n-store becomes unavailable. When this occurs, {brandname} uses Write-Through\n-mode until the modification queue can accept new entries.\n+Write-Behind is a cache writing mode where writes to memory are synchronous\n+and writes to cache stores are asynchronous.\n+\n+When clients send write requests, {brandname} adds those operations to a\n+modification queue. {brandname} processes operations as they join the queue so\n+that the calling thread is not blocked and the operation completes immediately.\n+\n+In the case where there is a batch of write operations (bulk writes),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08c862c83d3c3bf2627a57461ff2eefbe308a702"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4128, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}