{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NzMxNDkx", "number": 7953, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxNDoxNlrODi0Vow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTo1NTo0M1rODjZgkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODM1NjgzOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_cdi_injecting_remote.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxNDoxNlrOFuRvfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowMjoyOFrOFuxn8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2OTUwMQ==", "bodyText": "@danberindei should this be RemoteCacheManager() without the (string, int)?\nas you say there is no configuration with remote caches. RemoteCacheManager() looks up the list of servers in a file hotrod-client.properties in the classpath", "url": "https://github.com/infinispan/infinispan/pull/7953#discussion_r384069501", "createdAt": "2020-02-25T19:14:16Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/proc_cdi_injecting_remote.adoc", "diffHunk": "@@ -0,0 +1,72 @@\n+[id='cdi_inject_remote']\n+= Injecting Remote Caches\n+Set up CDI beans to inject remote caches.\n+\n+.Procedure\n+\n+. Create a cache qualifier annotation.\n++\n+[source,java]\n+----\n+@Remote(\"mygreetingcache\") <1>\n+@Qualifier\n+@Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Documented\n+public @interface RemoteGreetingCache { <2>\n+}\n+----\n++\n+<1> names the cache to inject.\n+<2> creates a `@RemoteGreetingCache` qualifier.\n++\n+. Add the `@RemoteGreetingCache` qualifier to your cache injection point.\n++\n+[source,java]\n+----\n+public class GreetingService {\n+\n+    @Inject @RemoteGreetingCache\n+    private RemoteCache<String, String> cache;\n+\n+    public String greet(String user) {\n+        String cachedValue = cache.get(user);\n+        if (cachedValue == null) {\n+            cachedValue = \"Hello \" + user;\n+            cache.put(user, cachedValue);\n+        }\n+        return cachedValue;\n+    }\n+}\n+----\n+\n+[TIP]\n+====\n+You can also inject remote caches without using qualifiers.\n+\n+[source,java]\n+----\n+...\n+   @Inject\n+   @Remote(\"greetingCache\")\n+   private RemoteCache<String, String> cache;\n+----\n+====\n+\n+.Override the default remote cache manager\n+\n+[source,java]\n+----\n+...\n+import javax.enterprise.context.ApplicationScoped;\n+\n+public class Config {\n+\n+    @RemoteGreetingCache\n+    @Produces\n+    @ApplicationScoped\n+    public RemoteCacheManager defaultRemoteCacheManager() {\n+        return new RemoteCacheManager(localhost, 1544);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36b606218c285f2c7fe81b5a51338746f0beaea4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MTg1OA==", "bodyText": "Yes, that's I wanted to say initially, but a more appropriate example would be\nConfigurationBuilder builder = new ConfigurationBuilder();\nbuilder.addServer().host(\"localhost\").port(11222);\nreturn new RemoteCacheManager(builder.build());", "url": "https://github.com/infinispan/infinispan/pull/7953#discussion_r384591858", "createdAt": "2020-02-26T16:02:28Z", "author": {"login": "danberindei"}, "path": "documentation/src/main/asciidoc/topics/proc_cdi_injecting_remote.adoc", "diffHunk": "@@ -0,0 +1,72 @@\n+[id='cdi_inject_remote']\n+= Injecting Remote Caches\n+Set up CDI beans to inject remote caches.\n+\n+.Procedure\n+\n+. Create a cache qualifier annotation.\n++\n+[source,java]\n+----\n+@Remote(\"mygreetingcache\") <1>\n+@Qualifier\n+@Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Documented\n+public @interface RemoteGreetingCache { <2>\n+}\n+----\n++\n+<1> names the cache to inject.\n+<2> creates a `@RemoteGreetingCache` qualifier.\n++\n+. Add the `@RemoteGreetingCache` qualifier to your cache injection point.\n++\n+[source,java]\n+----\n+public class GreetingService {\n+\n+    @Inject @RemoteGreetingCache\n+    private RemoteCache<String, String> cache;\n+\n+    public String greet(String user) {\n+        String cachedValue = cache.get(user);\n+        if (cachedValue == null) {\n+            cachedValue = \"Hello \" + user;\n+            cache.put(user, cachedValue);\n+        }\n+        return cachedValue;\n+    }\n+}\n+----\n+\n+[TIP]\n+====\n+You can also inject remote caches without using qualifiers.\n+\n+[source,java]\n+----\n+...\n+   @Inject\n+   @Remote(\"greetingCache\")\n+   private RemoteCache<String, String> cache;\n+----\n+====\n+\n+.Override the default remote cache manager\n+\n+[source,java]\n+----\n+...\n+import javax.enterprise.context.ApplicationScoped;\n+\n+public class Config {\n+\n+    @RemoteGreetingCache\n+    @Produces\n+    @ApplicationScoped\n+    public RemoteCacheManager defaultRemoteCacheManager() {\n+        return new RemoteCacheManager(localhost, 1544);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2OTUwMQ=="}, "originalCommit": {"oid": "36b606218c285f2c7fe81b5a51338746f0beaea4"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDQwODAyOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_cdi_injecting_embedded.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTo0NjowNVrOFvLbKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTo0NjowNVrOFvLbKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAxNDU2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . Add a producer class that defines cache configuration objects.\n          \n          \n            \n            . Add a producer method that defines the cache configuration.", "url": "https://github.com/infinispan/infinispan/pull/7953#discussion_r385014569", "createdAt": "2020-02-27T09:46:05Z", "author": {"login": "danberindei"}, "path": "documentation/src/main/asciidoc/topics/proc_cdi_injecting_embedded.adoc", "diffHunk": "@@ -0,0 +1,93 @@\n+[id='cdi_inject_embed']\n+= Injecting Embedded Caches\n+Set up CDI beans to inject embedded caches.\n+\n+.Procedure\n+\n+. Create a cache qualifier annotation.\n++\n+[source,java]\n+----\n+...\n+import javax.inject.Qualifier;\n+\n+@Qualifier\n+@Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Documented\n+public @interface GreetingCache { <1>\n+}\n+----\n++\n+<1> creates a `@GreetingCache` qualifier.\n++\n+. Add a producer class that defines cache configuration objects.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42ec305734abe8743fb5877d82f9211ea400b541"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDQyNzQ5OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_cdi_injecting_embedded.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTo1MDo0N1rOFvLmxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTo1MDo0N1rOFvLmxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAxNzU0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . Configure transport for clustered cache modes, if required.\n          \n          \n            \n            . Add a producer method that creates a clustered cache manager, if required", "url": "https://github.com/infinispan/infinispan/pull/7953#discussion_r385017543", "createdAt": "2020-02-27T09:50:47Z", "author": {"login": "danberindei"}, "path": "documentation/src/main/asciidoc/topics/proc_cdi_injecting_embedded.adoc", "diffHunk": "@@ -0,0 +1,93 @@\n+[id='cdi_inject_embed']\n+= Injecting Embedded Caches\n+Set up CDI beans to inject embedded caches.\n+\n+.Procedure\n+\n+. Create a cache qualifier annotation.\n++\n+[source,java]\n+----\n+...\n+import javax.inject.Qualifier;\n+\n+@Qualifier\n+@Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Documented\n+public @interface GreetingCache { <1>\n+}\n+----\n++\n+<1> creates a `@GreetingCache` qualifier.\n++\n+. Add a producer class that defines cache configuration objects.\n++\n+[source,java]\n+----\n+...\n+import org.infinispan.configuration.cache.Configuration;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.cdi.ConfigureCache;\n+import javax.enterprise.inject.Produces;\n+\n+public class Config {\n+\n+    @ConfigureCache(\"mygreetingcache\") <1>\n+    @GreetingCache <2>\n+    @Produces\n+    public Configuration greetingCacheConfiguration() {\n+        return new ConfigurationBuilder()\n+                    .memory()\n+                        .size(1000)\n+                    .build();\n+    }\n+}\n+----\n++\n+<1> names the cache to inject.\n+<2> adds the cache qualifier.\n++\n+. Configure transport for clustered cache modes, if required.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42ec305734abe8743fb5877d82f9211ea400b541"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDQ0NjkxOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_cdi_injecting_embedded.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTo1NTo0M1rOFvLypA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTo1NTo0M1rOFvLypA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAyMDU4MA==", "bodyText": "I'd add a note here too, saying smth like\n<1> adds the cache qualifier. Normally an application does not need more than one cache manager, and the cache manager producer should have no qualifier.\n\nOr maybe it's better to mention this in the existing note 2?", "url": "https://github.com/infinispan/infinispan/pull/7953#discussion_r385020580", "createdAt": "2020-02-27T09:55:43Z", "author": {"login": "danberindei"}, "path": "documentation/src/main/asciidoc/topics/proc_cdi_injecting_embedded.adoc", "diffHunk": "@@ -0,0 +1,93 @@\n+[id='cdi_inject_embed']\n+= Injecting Embedded Caches\n+Set up CDI beans to inject embedded caches.\n+\n+.Procedure\n+\n+. Create a cache qualifier annotation.\n++\n+[source,java]\n+----\n+...\n+import javax.inject.Qualifier;\n+\n+@Qualifier\n+@Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Documented\n+public @interface GreetingCache { <1>\n+}\n+----\n++\n+<1> creates a `@GreetingCache` qualifier.\n++\n+. Add a producer class that defines cache configuration objects.\n++\n+[source,java]\n+----\n+...\n+import org.infinispan.configuration.cache.Configuration;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.cdi.ConfigureCache;\n+import javax.enterprise.inject.Produces;\n+\n+public class Config {\n+\n+    @ConfigureCache(\"mygreetingcache\") <1>\n+    @GreetingCache <2>\n+    @Produces\n+    public Configuration greetingCacheConfiguration() {\n+        return new ConfigurationBuilder()\n+                    .memory()\n+                        .size(1000)\n+                    .build();\n+    }\n+}\n+----\n++\n+<1> names the cache to inject.\n+<2> adds the cache qualifier.\n++\n+. Configure transport for clustered cache modes, if required.\n++\n+[source,java]\n+----\n+...\n+package org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+\n+public class Config {\n+\n+    @GreetingCache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42ec305734abe8743fb5877d82f9211ea400b541"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4501, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}