{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MDI0MjM3", "number": 8600, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo0Nzo0MVrOEUEG6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1NDo1MFrOEUG6FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDc0MjgyOnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryInvoker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo0Nzo0MVrOG6JMCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDowOToxOVrOG6J87Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMTEyOQ==", "bodyText": "I worry that the blocking is now just relegated to this call instead. We really need https://issues.redhat.com/browse/ISPN-11731 to verify these are all fixed.", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463621129", "createdAt": "2020-07-31T13:47:41Z", "author": {"login": "wburns"}, "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryInvoker.java", "diffHunk": "@@ -101,9 +72,8 @@ QueryResponse unicast(Address address, SegmentsClusteredQueryCommand cmd) {\n \n       List<QueryResponse> results = new ArrayList<>();\n       try {\n-         results.add(localResponse.get());\n-         List<QueryResponse> responseList = sequence(futureRemoteResponses).get();\n-         results.addAll(responseList);\n+         results.add(await(localResponse.toCompletableFuture()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1a203776f0f28753e7f6c2d629d5dca4775947"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNzI5Mw==", "bodyText": "agreed, but this method is called by the REST server when doing queries, shouldn't Blockhound bark?", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463627293", "createdAt": "2020-07-31T13:57:50Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryInvoker.java", "diffHunk": "@@ -101,9 +72,8 @@ QueryResponse unicast(Address address, SegmentsClusteredQueryCommand cmd) {\n \n       List<QueryResponse> results = new ArrayList<>();\n       try {\n-         results.add(localResponse.get());\n-         List<QueryResponse> responseList = sequence(futureRemoteResponses).get();\n-         results.addAll(responseList);\n+         results.add(await(localResponse.toCompletableFuture()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMTEyOQ=="}, "originalCommit": {"oid": "0e1a203776f0f28753e7f6c2d629d5dca4775947"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzMzY0NQ==", "bodyText": "My guess is that the invoker is already on the blocking thread. But I am not certain what code path this is.", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463633645", "createdAt": "2020-07-31T14:09:19Z", "author": {"login": "wburns"}, "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryInvoker.java", "diffHunk": "@@ -101,9 +72,8 @@ QueryResponse unicast(Address address, SegmentsClusteredQueryCommand cmd) {\n \n       List<QueryResponse> results = new ArrayList<>();\n       try {\n-         results.add(localResponse.get());\n-         List<QueryResponse> responseList = sequence(futureRemoteResponses).get();\n-         results.addAll(responseList);\n+         results.add(await(localResponse.toCompletableFuture()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMTEyOQ=="}, "originalCommit": {"oid": "0e1a203776f0f28753e7f6c2d629d5dca4775947"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDc1NDg5OnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1MDoyOVrOG6JS4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1MDoyOVrOG6JS4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMjg4MA==", "bodyText": "I would recommend putting something a bit more descriptive for the second argument, maybe CQCreateEagerQuery#collectKeys ?", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463622880", "createdAt": "2020-07-31T13:50:29Z", "author": {"login": "wburns"}, "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java", "diffHunk": "@@ -18,38 +18,35 @@\n final class CQCreateEagerQuery extends CQWorker {\n \n    @Override\n-   QueryResponse perform(BitSet segments) {\n+   CompletionStage<QueryResponse> perform(BitSet segments) {\n       SearchQueryBuilder query = queryDefinition.getSearchQuery();\n       setFilter(segments);\n \n-      NodeTopDocs nodeTopDocs = (query.hasEntityProjection()) ? collectKeys(query) : collectProjections(query);\n-      if (nodeTopDocs == null) {\n-         return new QueryResponse(0);\n-      }\n-      return new QueryResponse(nodeTopDocs);\n+      CompletionStage<NodeTopDocs> nodeTopDocs = (query.hasEntityProjection()) ? collectKeys(query) : collectProjections(query);\n+\n+      return nodeTopDocs.thenApply(QueryResponse::new);\n    }\n \n-   private NodeTopDocs collectKeys(SearchQueryBuilder query) {\n-      LuceneSearchResult<DocumentReference> queryResult = query.documentReference().fetchAll();\n-      if (queryResult.totalHitCount() == 0L) {\n-         return null;\n-      }\n-\n-      Object[] keys = queryResult.hits().stream()\n-            .map(hit -> hit.id())\n-            .map(id -> stringToKey(id))\n-            .toArray(Object[]::new);\n-      return new NodeTopDocs(cache.getRpcManager().getAddress(), queryResult.topDocs(), keys, null);\n+   private CompletionStage<NodeTopDocs> collectKeys(SearchQueryBuilder query) {\n+      return blockingManager.supplyBlocking(() -> query.documentReference().fetchAll(), this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1a203776f0f28753e7f6c2d629d5dca4775947"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDc1NjQ1OnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1MDo0OFrOG6JTwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1MDo0OFrOG6JTwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMzEwNA==", "bodyText": "Same here about second argument.", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463623104", "createdAt": "2020-07-31T13:50:48Z", "author": {"login": "wburns"}, "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java", "diffHunk": "@@ -18,38 +18,35 @@\n final class CQCreateEagerQuery extends CQWorker {\n \n    @Override\n-   QueryResponse perform(BitSet segments) {\n+   CompletionStage<QueryResponse> perform(BitSet segments) {\n       SearchQueryBuilder query = queryDefinition.getSearchQuery();\n       setFilter(segments);\n \n-      NodeTopDocs nodeTopDocs = (query.hasEntityProjection()) ? collectKeys(query) : collectProjections(query);\n-      if (nodeTopDocs == null) {\n-         return new QueryResponse(0);\n-      }\n-      return new QueryResponse(nodeTopDocs);\n+      CompletionStage<NodeTopDocs> nodeTopDocs = (query.hasEntityProjection()) ? collectKeys(query) : collectProjections(query);\n+\n+      return nodeTopDocs.thenApply(QueryResponse::new);\n    }\n \n-   private NodeTopDocs collectKeys(SearchQueryBuilder query) {\n-      LuceneSearchResult<DocumentReference> queryResult = query.documentReference().fetchAll();\n-      if (queryResult.totalHitCount() == 0L) {\n-         return null;\n-      }\n-\n-      Object[] keys = queryResult.hits().stream()\n-            .map(hit -> hit.id())\n-            .map(id -> stringToKey(id))\n-            .toArray(Object[]::new);\n-      return new NodeTopDocs(cache.getRpcManager().getAddress(), queryResult.topDocs(), keys, null);\n+   private CompletionStage<NodeTopDocs> collectKeys(SearchQueryBuilder query) {\n+      return blockingManager.supplyBlocking(() -> query.documentReference().fetchAll(), this)\n+            .thenApply(queryResult -> {\n+               if (queryResult.totalHitCount() == 0L) return null;\n+\n+               Object[] keys = queryResult.hits().stream()\n+                     .map(DocumentReference::id)\n+                     .map(this::stringToKey)\n+                     .toArray(Object[]::new);\n+               return new NodeTopDocs(cache.getRpcManager().getAddress(), queryResult.topDocs(), keys, null);\n+            });\n    }\n \n-   private NodeTopDocs collectProjections(SearchQueryBuilder query) {\n-      LuceneSearchResult<?> queryResult = query.build().fetchAll();\n-      if (queryResult.totalHitCount() == 0L) {\n-         return null;\n-      }\n+   private CompletionStage<NodeTopDocs> collectProjections(SearchQueryBuilder query) {\n+      return blockingManager.supplyBlocking(() -> query.build().fetchAll(), this).thenApply(queryResult -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1a203776f0f28753e7f6c2d629d5dca4775947"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTIwMTQ5OnYy", "diffSide": "LEFT", "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1NDo1MFrOG6NkmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1NDo1MFrOG6NkmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5Mjk1Mw==", "bodyText": "Also noticed that it seems the asyncExecutor can be removed from this code and subsequent callers.", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463692953", "createdAt": "2020-07-31T15:54:50Z", "author": {"login": "wburns"}, "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryInvoker.java", "diffHunk": "@@ -116,26 +86,8 @@ QueryResponse unicast(Address address, SegmentsClusteredQueryCommand cmd) {\n       return results;\n    }\n \n-   private Future<QueryResponse> localInvoke(SegmentsClusteredQueryCommand cmd) {\n-      return asyncExecutor.submit(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da5870d1695ad18810a10b8edfaf62af5be8a1e3"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4028, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}