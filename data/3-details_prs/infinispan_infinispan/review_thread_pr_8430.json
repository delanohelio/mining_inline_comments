{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3OTYzNzA0", "number": 8430, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTo0MDo0MFrOECtP-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjowNDowMFrOEC7btQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjczOTc2OnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/cli/CliIT.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTo0MDo0MFrOGfVI_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoxNzowMVrOGfuDxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNTQwNw==", "bodyText": "Interesting. Makes me think we should support env and property replacement in batches", "url": "https://github.com/infinispan/infinispan/pull/8430#discussion_r435505407", "createdAt": "2020-06-04T19:40:40Z", "author": {"login": "tristantarrant"}, "path": "server/tests/src/test/java/org/infinispan/server/cli/CliIT.java", "diffHunk": "@@ -94,25 +101,46 @@ public void testCliInteractive() {\n    }\n \n    @Test\n-   public void testCliBatch() {\n-      AeshTestShell shell = new AeshTestShell();\n-      CLI.main(shell, new String[]{\"-f\", this.getClass().getResource(\"/cli/batch.cli\").getPath()});\n-      shell.assertContains(\"Hi CLI\");\n-      shell.assertContains(\"batch1\");\n+   public void testCliBatch() throws IOException {\n+      // Create batch file programmatically so that we can supply the correct server address for the connect command:\n+      Path testPath = Paths.get(CommonsTestingUtil.tmpDirectory(CliIT.class));\n+      testPath.toFile().mkdirs();\n+      try {\n+         Path batchFilePath = testPath.resolve(\"batch.cli\").toAbsolutePath();\n+         try (PrintWriter out = new PrintWriter(Files.newBufferedWriter(batchFilePath))) {\n+            out.println(\"echo Hi CLI\");\n+            out.printf(\"connect %s:11222\\n\", hostAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3e4422e0fea726ee83c0609f846c68f98321390"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4MzAwNQ==", "bodyText": "That would be great \ud83d\ude42", "url": "https://github.com/infinispan/infinispan/pull/8430#discussion_r435783005", "createdAt": "2020-06-05T08:54:21Z", "author": {"login": "ryanemerson"}, "path": "server/tests/src/test/java/org/infinispan/server/cli/CliIT.java", "diffHunk": "@@ -94,25 +101,46 @@ public void testCliInteractive() {\n    }\n \n    @Test\n-   public void testCliBatch() {\n-      AeshTestShell shell = new AeshTestShell();\n-      CLI.main(shell, new String[]{\"-f\", this.getClass().getResource(\"/cli/batch.cli\").getPath()});\n-      shell.assertContains(\"Hi CLI\");\n-      shell.assertContains(\"batch1\");\n+   public void testCliBatch() throws IOException {\n+      // Create batch file programmatically so that we can supply the correct server address for the connect command:\n+      Path testPath = Paths.get(CommonsTestingUtil.tmpDirectory(CliIT.class));\n+      testPath.toFile().mkdirs();\n+      try {\n+         Path batchFilePath = testPath.resolve(\"batch.cli\").toAbsolutePath();\n+         try (PrintWriter out = new PrintWriter(Files.newBufferedWriter(batchFilePath))) {\n+            out.println(\"echo Hi CLI\");\n+            out.printf(\"connect %s:11222\\n\", hostAddress());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNTQwNw=="}, "originalCommit": {"oid": "c3e4422e0fea726ee83c0609f846c68f98321390"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4ODEyMw==", "bodyText": "#8435", "url": "https://github.com/infinispan/infinispan/pull/8430#discussion_r435888123", "createdAt": "2020-06-05T12:28:42Z", "author": {"login": "tristantarrant"}, "path": "server/tests/src/test/java/org/infinispan/server/cli/CliIT.java", "diffHunk": "@@ -94,25 +101,46 @@ public void testCliInteractive() {\n    }\n \n    @Test\n-   public void testCliBatch() {\n-      AeshTestShell shell = new AeshTestShell();\n-      CLI.main(shell, new String[]{\"-f\", this.getClass().getResource(\"/cli/batch.cli\").getPath()});\n-      shell.assertContains(\"Hi CLI\");\n-      shell.assertContains(\"batch1\");\n+   public void testCliBatch() throws IOException {\n+      // Create batch file programmatically so that we can supply the correct server address for the connect command:\n+      Path testPath = Paths.get(CommonsTestingUtil.tmpDirectory(CliIT.class));\n+      testPath.toFile().mkdirs();\n+      try {\n+         Path batchFilePath = testPath.resolve(\"batch.cli\").toAbsolutePath();\n+         try (PrintWriter out = new PrintWriter(Files.newBufferedWriter(batchFilePath))) {\n+            out.println(\"echo Hi CLI\");\n+            out.printf(\"connect %s:11222\\n\", hostAddress());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNTQwNw=="}, "originalCommit": {"oid": "c3e4422e0fea726ee83c0609f846c68f98321390"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMzY3MQ==", "bodyText": "Rebased on your commit. Much simpler", "url": "https://github.com/infinispan/infinispan/pull/8430#discussion_r435913671", "createdAt": "2020-06-05T13:17:01Z", "author": {"login": "ryanemerson"}, "path": "server/tests/src/test/java/org/infinispan/server/cli/CliIT.java", "diffHunk": "@@ -94,25 +101,46 @@ public void testCliInteractive() {\n    }\n \n    @Test\n-   public void testCliBatch() {\n-      AeshTestShell shell = new AeshTestShell();\n-      CLI.main(shell, new String[]{\"-f\", this.getClass().getResource(\"/cli/batch.cli\").getPath()});\n-      shell.assertContains(\"Hi CLI\");\n-      shell.assertContains(\"batch1\");\n+   public void testCliBatch() throws IOException {\n+      // Create batch file programmatically so that we can supply the correct server address for the connect command:\n+      Path testPath = Paths.get(CommonsTestingUtil.tmpDirectory(CliIT.class));\n+      testPath.toFile().mkdirs();\n+      try {\n+         Path batchFilePath = testPath.resolve(\"batch.cli\").toAbsolutePath();\n+         try (PrintWriter out = new PrintWriter(Files.newBufferedWriter(batchFilePath))) {\n+            out.println(\"echo Hi CLI\");\n+            out.printf(\"connect %s:11222\\n\", hostAddress());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNTQwNw=="}, "originalCommit": {"oid": "c3e4422e0fea726ee83c0609f846c68f98321390"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTA2MzU3OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/api/HotRodTestClientDriver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjowNDowMFrOGfrwZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjoyNzowOFrOGf1NiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3NTk0Mw==", "bodyText": "@tristantarrant I couldn't think of a better way of accomplishing this whilst keeping infinispan-jboss-marshalling on the classpath and making it so by default the tests utilise ProtoStream. In 12 we should probably remove the automatic configuration of GenericJbossMarshaller when infinispan-jboss-marshalling is present on the classpath.", "url": "https://github.com/infinispan/infinispan/pull/8430#discussion_r435875943", "createdAt": "2020-06-05T12:04:00Z", "author": {"login": "ryanemerson"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/api/HotRodTestClientDriver.java", "diffHunk": "@@ -31,18 +33,32 @@ public HotRodTestClientDriver(TestServer testServer, TestClient testClient) {\n          // Configure admin user by default\n          builder.security().authentication().username(TestUser.ADMIN.getUser()).password(TestUser.ADMIN.getPassword());\n       }\n-\n       this.clientConfiguration = builder;\n    }\n \n    /**\n-    * Provide a custom client configuration to connect to the server\n+    * Provide a custom client configuration to connect to the server. This method always overrides the configured marshaller\n+    * so if a marshaller other than the default {@link ProtoStreamMarshaller} is required, a subsequent call to\n+    * {@link #withMarshaller(Class)} is required.\n     *\n     * @param clientConfiguration\n     * @return the current {@link HotRodTestClientDriver} instance with the client configuration override\n     */\n    public HotRodTestClientDriver withClientConfiguration(ConfigurationBuilder clientConfiguration) {\n       this.clientConfiguration = clientConfiguration;\n+      // Explicitly configure the ProtoStreamMarshaller as the jboss-marshalling module is on the classpath\n+      this.clientConfiguration.marshaller(ProtoStreamMarshaller.class);\n+      return this;\n+   }\n+\n+   /**\n+    * The {@link Marshaller} to be used by the client.\n+    *\n+    * @param marshallerClass\n+    * @return the current {@link HotRodTestClientDriver} instance with the Marshaller configuration override\n+    */\n+   public HotRodTestClientDriver withMarshaller(Class<? extends Marshaller> marshallerClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5087706d12871c2b67b70dd8b7912f8b92d4fd5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMDg1Ng==", "bodyText": "https://issues.redhat.com/browse/ISPN-11974", "url": "https://github.com/infinispan/infinispan/pull/8430#discussion_r436030856", "createdAt": "2020-06-05T16:27:08Z", "author": {"login": "ryanemerson"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/api/HotRodTestClientDriver.java", "diffHunk": "@@ -31,18 +33,32 @@ public HotRodTestClientDriver(TestServer testServer, TestClient testClient) {\n          // Configure admin user by default\n          builder.security().authentication().username(TestUser.ADMIN.getUser()).password(TestUser.ADMIN.getPassword());\n       }\n-\n       this.clientConfiguration = builder;\n    }\n \n    /**\n-    * Provide a custom client configuration to connect to the server\n+    * Provide a custom client configuration to connect to the server. This method always overrides the configured marshaller\n+    * so if a marshaller other than the default {@link ProtoStreamMarshaller} is required, a subsequent call to\n+    * {@link #withMarshaller(Class)} is required.\n     *\n     * @param clientConfiguration\n     * @return the current {@link HotRodTestClientDriver} instance with the client configuration override\n     */\n    public HotRodTestClientDriver withClientConfiguration(ConfigurationBuilder clientConfiguration) {\n       this.clientConfiguration = clientConfiguration;\n+      // Explicitly configure the ProtoStreamMarshaller as the jboss-marshalling module is on the classpath\n+      this.clientConfiguration.marshaller(ProtoStreamMarshaller.class);\n+      return this;\n+   }\n+\n+   /**\n+    * The {@link Marshaller} to be used by the client.\n+    *\n+    * @param marshallerClass\n+    * @return the current {@link HotRodTestClientDriver} instance with the Marshaller configuration override\n+    */\n+   public HotRodTestClientDriver withMarshaller(Class<? extends Marshaller> marshallerClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3NTk0Mw=="}, "originalCommit": {"oid": "d5087706d12871c2b67b70dd8b7912f8b92d4fd5"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4061, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}