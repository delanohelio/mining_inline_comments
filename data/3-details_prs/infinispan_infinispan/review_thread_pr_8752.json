{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MTA0OTYy", "number": 8752, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzowMToyMlrOEtBuig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOToyMDozM1rOExH-_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjQ5Njc0OnYy", "diffSide": "RIGHT", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCacheManagerAdmin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzowMToyMlrOHglffg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo1NjoxOVrOHgoFTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzMDc1MA==", "bodyText": "Why didn't you add these to CacheContainerAdmin instead so that they can be shared with EmbeddedCacheManagerAdmin", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r503930750", "createdAt": "2020-10-13T13:01:22Z", "author": {"login": "tristantarrant"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCacheManagerAdmin.java", "diffHunk": "@@ -102,4 +102,23 @@\n     * @throws HotRodClientException\n     */\n    void reindexCache(String name) throws HotRodClientException;\n+\n+   /**\n+    * Retrieves an existing template on the remote server cluster. If it doesn't exist, it will be created using the\n+    * specified template name.\n+    *\n+    * @param name the name of the template to create\n+    * @param configuration the configuration object\n+    *\n+    * @throws HotRodClientException\n+    */\n+   void createTemplate(String name, BasicConfiguration configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cde276338614e5df352a0a0b04e733925e4edaef"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3MzE5OA==", "bodyText": "Just an oversight, updated", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r503973198", "createdAt": "2020-10-13T13:56:19Z", "author": {"login": "ryanemerson"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCacheManagerAdmin.java", "diffHunk": "@@ -102,4 +102,23 @@\n     * @throws HotRodClientException\n     */\n    void reindexCache(String name) throws HotRodClientException;\n+\n+   /**\n+    * Retrieves an existing template on the remote server cluster. If it doesn't exist, it will be created using the\n+    * specified template name.\n+    *\n+    * @param name the name of the template to create\n+    * @param configuration the configuration object\n+    *\n+    * @throws HotRodClientException\n+    */\n+   void createTemplate(String name, BasicConfiguration configuration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzMDc1MA=="}, "originalCommit": {"oid": "cde276338614e5df352a0a0b04e733925e4edaef"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTM5MTI3OnYy", "diffSide": "RIGHT", "path": "commons/all/src/main/java/org/infinispan/commons/api/CacheContainerAdmin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTowMDoyMFrOHnFGDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoxNDoyMlrOHo0eyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczOTk4MA==", "bodyText": "What's the reason to not allow a LOCAL configuration?\nI was thinking of deprecating DefaultCacheManager.defineConfiguration() and telling the users to use the admin interface instead, but we can't do that if we don't allow LOCAL templates.", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r510739980", "createdAt": "2020-10-23T09:00:20Z", "author": {"login": "danberindei"}, "path": "commons/all/src/main/java/org/infinispan/commons/api/CacheContainerAdmin.java", "diffHunk": "@@ -119,4 +119,19 @@ public static AdminFlag valueOf(int index) {\n     * @return\n     */\n    C withFlags(EnumSet<AdminFlag> flags);\n+\n+   /**\n+    *  Creates a template on the container using the provided configuration.\n+    *\n+    * @param name the name of the template\n+    * @param configuration the configuration to use. It must be a clustered configuration (e.g. distributed)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155b1ff04ca5322b446cf00c6af8825628d6717a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NDkzNw==", "bodyText": "I was simply replicating what we allow for createCache. I guess the idea is that a local cache/template should always be local and not replicated to other nodes. For example, if two nodes wanted a local cache with the same name.", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r512564937", "createdAt": "2020-10-27T10:14:22Z", "author": {"login": "ryanemerson"}, "path": "commons/all/src/main/java/org/infinispan/commons/api/CacheContainerAdmin.java", "diffHunk": "@@ -119,4 +119,19 @@ public static AdminFlag valueOf(int index) {\n     * @return\n     */\n    C withFlags(EnumSet<AdminFlag> flags);\n+\n+   /**\n+    *  Creates a template on the container using the provided configuration.\n+    *\n+    * @param name the name of the template\n+    * @param configuration the configuration to use. It must be a clustered configuration (e.g. distributed)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczOTk4MA=="}, "originalCommit": {"oid": "155b1ff04ca5322b446cf00c6af8825628d6717a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTQwNDI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/globalstate/GlobalConfigurationManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTowNDowOVrOHnFN2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTowNDowOVrOHnFN2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MTk3Ng==", "bodyText": "In keeping with my previous comment, Defines a cache template cluster-wide would sound more friendly to LOCAL caches. It would also fit better with @oraNod's in-progress terminology PR (#8742).", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r510741976", "createdAt": "2020-10-23T09:04:09Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/globalstate/GlobalConfigurationManager.java", "diffHunk": "@@ -26,6 +26,24 @@\n     */\n    Cache<ScopedState, Object> getStateCache();\n \n+   /**\n+    * Defines a cluster-wide configuration template", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155b1ff04ca5322b446cf00c6af8825628d6717a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTQ0MDQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/globalstate/impl/GlobalConfigurationManagerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOToxMzo1MVrOHnFkKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoxNjoyMFrOHo0jqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0NzY5MA==", "bodyText": "DefaultCacheManager and Configuration don't allow a template and a cache to have the same name, shouldn't we do that here as well? Either way, the documentation should be clear about the namespaces and there should be a test.\nIt might have been simpler to keep a single scope and rely on Configuration.isTemplate() to distinguish between caches and templates.", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r510747690", "createdAt": "2020-10-23T09:13:51Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/globalstate/impl/GlobalConfigurationManagerImpl.java", "diffHunk": "@@ -143,6 +163,28 @@ void start() {\n       return stateCache;\n    }\n \n+   @Override\n+   public CompletableFuture<Void> createTemplate(String name, Configuration configuration, EnumSet<CacheContainerAdmin.AdminFlag> flags) {\n+      Cache<ScopedState, Object> cache = getStateCache();\n+      ScopedState key = new ScopedState(TEMPLATE_SCOPE, name);\n+      return cache.containsKeyAsync(key).thenCompose(exists -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155b1ff04ca5322b446cf00c6af8825628d6717a"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NjE4NQ==", "bodyText": "It might have been simpler to keep a single scope and rely on Configuration.isTemplate() to distinguish between caches and templates.\n\nThis isn't possible as we don't serialize whether a configuration is a template or not. This is always set via the ConfigurationBuilder.", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r512566185", "createdAt": "2020-10-27T10:16:20Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/globalstate/impl/GlobalConfigurationManagerImpl.java", "diffHunk": "@@ -143,6 +163,28 @@ void start() {\n       return stateCache;\n    }\n \n+   @Override\n+   public CompletableFuture<Void> createTemplate(String name, Configuration configuration, EnumSet<CacheContainerAdmin.AdminFlag> flags) {\n+      Cache<ScopedState, Object> cache = getStateCache();\n+      ScopedState key = new ScopedState(TEMPLATE_SCOPE, name);\n+      return cache.containsKeyAsync(key).thenCompose(exists -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0NzY5MA=="}, "originalCommit": {"oid": "155b1ff04ca5322b446cf00c6af8825628d6717a"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTQ2NDkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/manager/EmbeddedCacheManagerAdmin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOToyMDozM1rOHnFzbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOToyMDozM1rOHnFzbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MTU5Nw==", "bodyText": "Shouldn't it say \"across the cluster\" as well? E.g.\nRemoves a template across the cluster. If the template is persistent, it will also be removed from persisted state.", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r510751597", "createdAt": "2020-10-23T09:20:33Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/manager/EmbeddedCacheManagerAdmin.java", "diffHunk": "@@ -68,6 +68,37 @@\n     */\n    <K, V> Cache<K, V> getOrCreateCache(String name, Configuration configuration);\n \n+   /**\n+    * Creates a template that is replicated across the cluster using the specified configuration.\n+    * The template will survive topology changes, e.g. when a new node joins the cluster,\n+    * it will automatically be created there. This method will wait for the template to be created on all nodes before\n+    * returning.\n+    *\n+    * @param name the name of the template\n+    * @param configuration the configuration to use. It must be a clustered configuration (e.g. distributed)\n+    * @throws org.infinispan.commons.CacheConfigurationException if a template with the same name already exists\n+    */\n+   void createTemplate(String name, Configuration configuration);\n+\n+   /**\n+    * Retrieves an existing template or creates one across the cluster using the specified configuration.\n+    * The template will survive topology changes, e.g. when a new node joins the cluster,\n+    * it will automatically be created there. This method will wait for the template to be created on all nodes before\n+    * returning.\n+    *\n+    * @param name the name of the template\n+    * @param configuration the configuration to use. It must be a clustered configuration (e.g. distributed)\n+    * @return the template configuration\n+    */\n+   Configuration getOrCreateTemplate(String name, Configuration configuration);\n+\n+   /**\n+    * Removes a template from the cache container. Any persisted data will be cleared.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155b1ff04ca5322b446cf00c6af8825628d6717a"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3843, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}