{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNDg2Mjk1", "number": 7967, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo1ODowNFrODj4gqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo1ODowNFrODj4gqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTUyNjE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "isResolved": false, "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjo1ODowNFrOFv782A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTowNjo1N1rOFx9pLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA==", "bodyText": "Any idea why storageType is not an attribute like the others?", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r385809624", "createdAt": "2020-02-28T16:58:04Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMTE1NQ==", "bodyText": "because this is how it is rendered:\n<memory>\n    <off-heap size=\"10000000\" eviction=\"MEMORY\"/>\n</memory>", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r385811155", "createdAt": "2020-02-28T17:00:55Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA=="}, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMjIxNg==", "bodyText": "It looks like an element to me, with its own attributes. This is a recurring issue throughout the  configuration, many things are declared as Attribute but the way it is written to the XML is random, sometimes as an attribute, sometimes as an element, sometimes as a mixture of both...", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r385812216", "createdAt": "2020-02-28T17:03:14Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA=="}, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMzkwMw==", "bodyText": "The original intent was because each storage type would have different attributes and this way we could have validation in the parser. To be honest now with recent changes, there is no reason it should be a separate element anymore imo.", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r385813903", "createdAt": "2020-02-28T17:06:55Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA=="}, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxNTE3OQ==", "bodyText": "It was an attribute before, but I moved some things around when doing the JSON stuff to bring the serialized (XML/JSON) representation closer to the class representation, in the sense that an attribute is a value, and an element is a container of values and other elements", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r385815179", "createdAt": "2020-02-28T17:09:40Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA=="}, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxNzEwOQ==", "bodyText": "Oh sorry I was getting confused by xml attribute and attribute in this config class. I didn't even realize it was broken out in 16467c9#diff-d99d40293ec9b3f29e5a8658769c6629", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r385817109", "createdAt": "2020-02-28T17:14:04Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA=="}, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyMzY0NQ==", "bodyText": "Thinking about it, it should've been broken out more, since <off-heap> has its own particular attributes, same for <object> and <binary>. I simply \"promoted\" storage type to the top element/configuration class, but the attributes are still flattened inside it, as they were before", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r385823645", "createdAt": "2020-02-28T17:22:51Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA=="}, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyMzk2MA==", "bodyText": "@wburns I would have loved it if off-heap had size and object had count ;)\n@gustavonalle IMO it's still an attribute, it's just represented as an element name in the XML, like the cache mode is represented in the XML as the name of the cache element.", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r385823960", "createdAt": "2020-02-28T17:23:34Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA=="}, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNDQ0MA==", "bodyText": "@danberindei that may be a bit more confusing for the user, but I am fine with changing this for 11.0 if we wanted.", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r385824440", "createdAt": "2020-02-28T17:24:36Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA=="}, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyOTgzNg==", "bodyText": "@danberindei I prefer Attribute written as XML/JSON attributes :)\nThe JSON serializer requires this currently and potentially the XML serialization could be dropped and made generic provided the randomness of the configurations are kept at a minimum", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r385829836", "createdAt": "2020-02-28T17:37:20Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA=="}, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMyMDMwMQ==", "bodyText": "@gustavonalle I would also prefer XML/JSSON attributes to be Attribute in the programmatic config and XML/JSON elements to be builder classes, but I think the right way to do that is to make the storage type an attribute in XML/JSON, not to make it a \"not a builder, not an attribute\" in the programmatic configuration.", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r386320301", "createdAt": "2020-03-02T10:48:21Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA=="}, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMyMTc2NQ==", "bodyText": "@wburns sorry, I meant eviction=\"COUNT\" count=\"100\" and eviction=\"MEMORY\" size=\"100\", it's not really about off-heap vs object.\neviction-count=\"100\" and eviction-memory=\"100\" would be even more concise, the only complication with representing them as 2 attributes is we must allow one attribute to override the other when inheriting from a template but we must raise an error if both attributes are set in the same configuration.", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r386321765", "createdAt": "2020-03-02T10:51:16Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA=="}, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMyNjIxNA==", "bodyText": "@danberindei Would you want to change the config and xsd for both 10.1.x and 11.x instead of this PR?", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r386326214", "createdAt": "2020-03-02T11:00:31Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA=="}, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1MzE5OQ==", "bodyText": "@danberindei btw, the storage type is currently a builder: \n  \n    \n      infinispan/core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfigurationBuilder.java\n    \n    \n         Line 20\n      in\n      487cbc9\n    \n    \n    \n    \n\n        \n          \n           public class MemoryStorageConfigurationBuilder extends AbstractConfigurationChildBuilder implements Builder<MemoryStorageConfiguration>, ConfigurationBuilderInfo {", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r386353199", "createdAt": "2020-03-02T12:02:32Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA=="}, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNDUxMA==", "bodyText": "That's actually the memory() builder.", "url": "https://github.com/infinispan/infinispan/pull/7967#discussion_r387934510", "createdAt": "2020-03-04T21:06:57Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/cache/MemoryStorageConfiguration.java", "diffHunk": "@@ -66,12 +66,15 @@ public boolean equals(Object o) {\n \n       MemoryStorageConfiguration that = (MemoryStorageConfiguration) o;\n \n-      return attributes.equals(that.attributes);\n+      if (!attributes.equals(that.attributes)) return false;\n+      return storageType == that.storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwOTYyNA=="}, "originalCommit": {"oid": "fce647fab3ef696ff5c6154233a6fd6111298cfa"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4513, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}