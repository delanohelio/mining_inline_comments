{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNjI3NTEy", "number": 8512, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToyNzozMVrOEJLFdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToyNzozMVrOEJLFdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDU0MjYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToyNzozMVrOGplIXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODoxNDoxNFrOGpqTnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI1MzE1MA==", "bodyText": "This seems wrong, just because a store is segmentable and shareable it doesn't mean in the config it's actually segmented or shared (as the method name implies).", "url": "https://github.com/infinispan/infinispan/pull/8512#discussion_r446253150", "createdAt": "2020-06-26T15:27:31Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "diffHunk": "@@ -219,16 +221,24 @@ public void start() {\n                availabilityTask = nonBlockingManager.scheduleWithFixedDelay(this::pollStoreAvailability, interval, interval, MILLISECONDS));\n          }\n \n-         storeStartup.doOnComplete(() -> lock.unlockWrite(stamp))\n-               // Blocks here waiting for stores and availability task to start if needed\n-               .blockingAwait();\n+         // Blocks here waiting for stores and availability task to start if needed\n+         storeStartup.blockingAwait();\n+         allSegmentedOrShared = allStoresSegmentedOrShared();\n       } catch (Throwable t) {\n          lock.unlockWrite(stamp);\n          log.debug(\"PersistenceManagerImpl encountered an exception during startup of stores\", t);\n          throw t;\n+      } finally {\n+         lock.unlockWrite(stamp);\n       }\n    }\n \n+   @GuardedBy(\"lock\")\n+   private boolean allStoresSegmentedOrShared() {\n+      return getStoreLocked(storeStatus -> !storeStatus.characteristics.contains(Characteristic.SEGMENTABLE) ||\n+            !storeStatus.characteristics.contains(Characteristic.SHAREABLE)) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab55c9b0bf6e15aee67d06661c6542e1882549c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI1NTAwOQ==", "bodyText": "At this point the store status has already been changed by updateCharacteristics which will remove the characteristic based on the configuration. So it does mean that.", "url": "https://github.com/infinispan/infinispan/pull/8512#discussion_r446255009", "createdAt": "2020-06-26T15:30:42Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "diffHunk": "@@ -219,16 +221,24 @@ public void start() {\n                availabilityTask = nonBlockingManager.scheduleWithFixedDelay(this::pollStoreAvailability, interval, interval, MILLISECONDS));\n          }\n \n-         storeStartup.doOnComplete(() -> lock.unlockWrite(stamp))\n-               // Blocks here waiting for stores and availability task to start if needed\n-               .blockingAwait();\n+         // Blocks here waiting for stores and availability task to start if needed\n+         storeStartup.blockingAwait();\n+         allSegmentedOrShared = allStoresSegmentedOrShared();\n       } catch (Throwable t) {\n          lock.unlockWrite(stamp);\n          log.debug(\"PersistenceManagerImpl encountered an exception during startup of stores\", t);\n          throw t;\n+      } finally {\n+         lock.unlockWrite(stamp);\n       }\n    }\n \n+   @GuardedBy(\"lock\")\n+   private boolean allStoresSegmentedOrShared() {\n+      return getStoreLocked(storeStatus -> !storeStatus.characteristics.contains(Characteristic.SEGMENTABLE) ||\n+            !storeStatus.characteristics.contains(Characteristic.SHAREABLE)) != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI1MzE1MA=="}, "originalCommit": {"oid": "0ab55c9b0bf6e15aee67d06661c6542e1882549c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwMzU2Mg==", "bodyText": "I would have never guessed that... wouldn't it have been simpler to check the configuration instead of changing the meaning of the enum values (e.g. SHAREABLE -> SHARED)?", "url": "https://github.com/infinispan/infinispan/pull/8512#discussion_r446303562", "createdAt": "2020-06-26T17:01:38Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "diffHunk": "@@ -219,16 +221,24 @@ public void start() {\n                availabilityTask = nonBlockingManager.scheduleWithFixedDelay(this::pollStoreAvailability, interval, interval, MILLISECONDS));\n          }\n \n-         storeStartup.doOnComplete(() -> lock.unlockWrite(stamp))\n-               // Blocks here waiting for stores and availability task to start if needed\n-               .blockingAwait();\n+         // Blocks here waiting for stores and availability task to start if needed\n+         storeStartup.blockingAwait();\n+         allSegmentedOrShared = allStoresSegmentedOrShared();\n       } catch (Throwable t) {\n          lock.unlockWrite(stamp);\n          log.debug(\"PersistenceManagerImpl encountered an exception during startup of stores\", t);\n          throw t;\n+      } finally {\n+         lock.unlockWrite(stamp);\n       }\n    }\n \n+   @GuardedBy(\"lock\")\n+   private boolean allStoresSegmentedOrShared() {\n+      return getStoreLocked(storeStatus -> !storeStatus.characteristics.contains(Characteristic.SEGMENTABLE) ||\n+            !storeStatus.characteristics.contains(Characteristic.SHAREABLE)) != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI1MzE1MA=="}, "originalCommit": {"oid": "0ab55c9b0bf6e15aee67d06661c6542e1882549c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwNzQ2NA==", "bodyText": "Yes, I agree. I noticed this a while back as I had been changing things, but I wanted to try to limit changes for now. I am all for changing this later though.", "url": "https://github.com/infinispan/infinispan/pull/8512#discussion_r446307464", "createdAt": "2020-06-26T17:09:50Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "diffHunk": "@@ -219,16 +221,24 @@ public void start() {\n                availabilityTask = nonBlockingManager.scheduleWithFixedDelay(this::pollStoreAvailability, interval, interval, MILLISECONDS));\n          }\n \n-         storeStartup.doOnComplete(() -> lock.unlockWrite(stamp))\n-               // Blocks here waiting for stores and availability task to start if needed\n-               .blockingAwait();\n+         // Blocks here waiting for stores and availability task to start if needed\n+         storeStartup.blockingAwait();\n+         allSegmentedOrShared = allStoresSegmentedOrShared();\n       } catch (Throwable t) {\n          lock.unlockWrite(stamp);\n          log.debug(\"PersistenceManagerImpl encountered an exception during startup of stores\", t);\n          throw t;\n+      } finally {\n+         lock.unlockWrite(stamp);\n       }\n    }\n \n+   @GuardedBy(\"lock\")\n+   private boolean allStoresSegmentedOrShared() {\n+      return getStoreLocked(storeStatus -> !storeStatus.characteristics.contains(Characteristic.SEGMENTABLE) ||\n+            !storeStatus.characteristics.contains(Characteristic.SHAREABLE)) != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI1MzE1MA=="}, "originalCommit": {"oid": "0ab55c9b0bf6e15aee67d06661c6542e1882549c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzk0OA==", "bodyText": "\ud83d\udc4d for later :)", "url": "https://github.com/infinispan/infinispan/pull/8512#discussion_r446337948", "createdAt": "2020-06-26T18:14:14Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "diffHunk": "@@ -219,16 +221,24 @@ public void start() {\n                availabilityTask = nonBlockingManager.scheduleWithFixedDelay(this::pollStoreAvailability, interval, interval, MILLISECONDS));\n          }\n \n-         storeStartup.doOnComplete(() -> lock.unlockWrite(stamp))\n-               // Blocks here waiting for stores and availability task to start if needed\n-               .blockingAwait();\n+         // Blocks here waiting for stores and availability task to start if needed\n+         storeStartup.blockingAwait();\n+         allSegmentedOrShared = allStoresSegmentedOrShared();\n       } catch (Throwable t) {\n          lock.unlockWrite(stamp);\n          log.debug(\"PersistenceManagerImpl encountered an exception during startup of stores\", t);\n          throw t;\n+      } finally {\n+         lock.unlockWrite(stamp);\n       }\n    }\n \n+   @GuardedBy(\"lock\")\n+   private boolean allStoresSegmentedOrShared() {\n+      return getStoreLocked(storeStatus -> !storeStatus.characteristics.contains(Characteristic.SEGMENTABLE) ||\n+            !storeStatus.characteristics.contains(Characteristic.SHAREABLE)) != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI1MzE1MA=="}, "originalCommit": {"oid": "0ab55c9b0bf6e15aee67d06661c6542e1882549c"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3953, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}