{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MjMyNjYz", "number": 8410, "title": "ISPN-11937 JDBCStringBasedStore needs test around a rollback occurring", "bodyText": "https://issues.redhat.com/browse/ISPN-11937\nAdded tests and fixed a few various bugs with transactional, where it was just invoking the bulk method instead.", "createdAt": "2020-05-29T17:29:33Z", "url": "https://github.com/infinispan/infinispan/pull/8410", "merged": true, "mergeCommit": {"oid": "ebd6f0dc6b3523df08924a6d1eec37ab70fcb425"}, "closed": true, "closedAt": "2020-06-03T13:51:16Z", "author": {"login": "wburns"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnU8fTAFqTQyMjY3OTQwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnWHk9gBqjMzOTgwNzgwNjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjc5NDA0", "url": "https://github.com/infinispan/infinispan/pull/8410#pullrequestreview-422679404", "createdAt": "2020-06-02T13:33:17Z", "commit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozMzoxOFrOGdxyqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozMzoxOFrOGdxyqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NzY3Mw==", "bodyText": "I think this could be clearer. How about:\n\"Store %s cannot be configured to be transactional as it does not contain the TRANSACTIONAL characteristic\" ?", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433877673", "createdAt": "2020-06-02T13:33:18Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/util/logging/Log.java", "diffHunk": "@@ -2023,4 +2023,7 @@ CacheConfigurationException storeConfiguredHasBothReadAndWriteOnly(String storeC\n    @LogMessage(level = WARN)\n    @Message(value = \"ClusterLoader has been deprecated and will be removed in a future version with no direct replacement\", id = 595)\n    void warnUsingDeprecatedClusterLoader();\n+\n+   @Message(value = \"Store %s cannot be configured to be transactional as the implementation characteristic doesn't support it\", id = 596)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjgxMzky", "url": "https://github.com/infinispan/infinispan/pull/8410#pullrequestreview-422681392", "createdAt": "2020-06-02T13:35:25Z", "commit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNToyNVrOGdx4jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNToyNVrOGdx4jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3OTE4MQ==", "bodyText": "Can we have this at the top of the class so it's not necessary to scroll to see the parameters.", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433879181", "createdAt": "2020-06-02T13:35:25Z", "author": {"login": "ryanemerson"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.infinispan.persistence.jdbc.stringbased;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNull;\n+\n+import java.lang.reflect.Method;\n+\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+import org.infinispan.configuration.parsing.ConfigurationBuilderHolder;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.persistence.jdbc.configuration.JdbcStringBasedStoreConfigurationBuilder;\n+import org.infinispan.persistence.spi.PersistenceException;\n+import org.infinispan.test.fwk.TestCacheManagerFactory;\n+import org.infinispan.transaction.TransactionMode;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+@Test(groups = {\"functional\", \"smoke\"}, testName = \"persistence.jdbc.stringbased.JdbcStringBasedStoreTxFunctionalTest\")\n+public class JdbcStringBasedStoreTxFunctionalTest extends JdbcStringBasedStoreFunctionalTest {\n+   private boolean transactionalConfig;\n+   private boolean sharedConfig;\n+\n+   JdbcStringBasedStoreTxFunctionalTest transactionalConfig(boolean transactionalConfig) {\n+      this.transactionalConfig = transactionalConfig;\n+      return this;\n+   }\n+\n+   JdbcStringBasedStoreTxFunctionalTest sharedConfig(boolean sharedConfig) {\n+      this.sharedConfig = sharedConfig;\n+      return this;\n+   }\n+\n+   @Override\n+   protected ConfigurationBuilder getDefaultCacheConfiguration() {\n+      ConfigurationBuilder configurationBuilder = super.getDefaultCacheConfiguration();\n+      configurationBuilder.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      if (sharedConfig) {\n+         // Shared requires a clustered config, even though we have a single node\n+         configurationBuilder.clustering().cacheMode(CacheMode.REPL_SYNC);\n+      }\n+      return configurationBuilder;\n+   }\n+\n+   @Override\n+   protected void modifyJdbcConfiguration(JdbcStringBasedStoreConfigurationBuilder builder) {\n+      builder.transactional(transactionalConfig);\n+      builder.shared(sharedConfig);\n+   }\n+\n+   @Override\n+   protected EmbeddedCacheManager createCacheManager(boolean start, GlobalConfigurationBuilder global,\n+         ConfigurationBuilder cb) {\n+      // Make sure defaults are transactional as well for created configs\n+      if (transactionalConfig) {\n+         cb.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      }\n+      if (sharedConfig) {\n+         ConfigurationBuilderHolder holder = new ConfigurationBuilderHolder(Thread.currentThread().getContextClassLoader(), global);\n+         if (cb != null) {\n+            String defaultName = JdbcStringBasedStoreTxFunctionalTest.class.getName() + \"-default\";\n+            global.defaultCacheName(defaultName);\n+            holder.newConfigurationBuilder(defaultName).read(cb.build());\n+         }\n+         global.transport().defaultTransport();\n+         return TestCacheManagerFactory.createClusteredCacheManager(start, holder);\n+      } else {\n+         return super.createCacheManager(start, global, cb);\n+      }\n+   }\n+\n+   @Factory\n+   public Object[] factory() {\n+      return new Object[]{\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(true),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(true),\n+      };\n+   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjgzMjM0", "url": "https://github.com/infinispan/infinispan/pull/8410#pullrequestreview-422683234", "createdAt": "2020-06-02T13:37:27Z", "commit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNzoyN1rOGdx-CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNzoyN1rOGdx-CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MDU4NQ==", "bodyText": "We should probably assert on a configuration exception in this case.", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433880585", "createdAt": "2020-06-02T13:37:27Z", "author": {"login": "ryanemerson"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.infinispan.persistence.jdbc.stringbased;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNull;\n+\n+import java.lang.reflect.Method;\n+\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+import org.infinispan.configuration.parsing.ConfigurationBuilderHolder;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.persistence.jdbc.configuration.JdbcStringBasedStoreConfigurationBuilder;\n+import org.infinispan.persistence.spi.PersistenceException;\n+import org.infinispan.test.fwk.TestCacheManagerFactory;\n+import org.infinispan.transaction.TransactionMode;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+@Test(groups = {\"functional\", \"smoke\"}, testName = \"persistence.jdbc.stringbased.JdbcStringBasedStoreTxFunctionalTest\")\n+public class JdbcStringBasedStoreTxFunctionalTest extends JdbcStringBasedStoreFunctionalTest {\n+   private boolean transactionalConfig;\n+   private boolean sharedConfig;\n+\n+   JdbcStringBasedStoreTxFunctionalTest transactionalConfig(boolean transactionalConfig) {\n+      this.transactionalConfig = transactionalConfig;\n+      return this;\n+   }\n+\n+   JdbcStringBasedStoreTxFunctionalTest sharedConfig(boolean sharedConfig) {\n+      this.sharedConfig = sharedConfig;\n+      return this;\n+   }\n+\n+   @Override\n+   protected ConfigurationBuilder getDefaultCacheConfiguration() {\n+      ConfigurationBuilder configurationBuilder = super.getDefaultCacheConfiguration();\n+      configurationBuilder.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      if (sharedConfig) {\n+         // Shared requires a clustered config, even though we have a single node\n+         configurationBuilder.clustering().cacheMode(CacheMode.REPL_SYNC);\n+      }\n+      return configurationBuilder;\n+   }\n+\n+   @Override\n+   protected void modifyJdbcConfiguration(JdbcStringBasedStoreConfigurationBuilder builder) {\n+      builder.transactional(transactionalConfig);\n+      builder.shared(sharedConfig);\n+   }\n+\n+   @Override\n+   protected EmbeddedCacheManager createCacheManager(boolean start, GlobalConfigurationBuilder global,\n+         ConfigurationBuilder cb) {\n+      // Make sure defaults are transactional as well for created configs\n+      if (transactionalConfig) {\n+         cb.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      }\n+      if (sharedConfig) {\n+         ConfigurationBuilderHolder holder = new ConfigurationBuilderHolder(Thread.currentThread().getContextClassLoader(), global);\n+         if (cb != null) {\n+            String defaultName = JdbcStringBasedStoreTxFunctionalTest.class.getName() + \"-default\";\n+            global.defaultCacheName(defaultName);\n+            holder.newConfigurationBuilder(defaultName).read(cb.build());\n+         }\n+         global.transport().defaultTransport();\n+         return TestCacheManagerFactory.createClusteredCacheManager(start, holder);\n+      } else {\n+         return super.createCacheManager(start, global, cb);\n+      }\n+   }\n+\n+   @Factory\n+   public Object[] factory() {\n+      return new Object[]{\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(true),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(true),\n+      };\n+   }\n+\n+   @Override\n+   protected String parameters() {\n+      return \" [transactionalConfig=\" + transactionalConfig + \", sharedConfig=\" + sharedConfig + \"]\";\n+   }\n+\n+   @Override\n+   public void testRemoveCacheWithPassivation() {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjgzMjg4", "url": "https://github.com/infinispan/infinispan/pull/8410#pullrequestreview-422683288", "createdAt": "2020-06-02T13:37:30Z", "commit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNzozMFrOGdx-Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNzozMFrOGdx-Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MDYyNg==", "bodyText": "We should probably assert on a configuration exception in this case.", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433880626", "createdAt": "2020-06-02T13:37:30Z", "author": {"login": "ryanemerson"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.infinispan.persistence.jdbc.stringbased;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNull;\n+\n+import java.lang.reflect.Method;\n+\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+import org.infinispan.configuration.parsing.ConfigurationBuilderHolder;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.persistence.jdbc.configuration.JdbcStringBasedStoreConfigurationBuilder;\n+import org.infinispan.persistence.spi.PersistenceException;\n+import org.infinispan.test.fwk.TestCacheManagerFactory;\n+import org.infinispan.transaction.TransactionMode;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+@Test(groups = {\"functional\", \"smoke\"}, testName = \"persistence.jdbc.stringbased.JdbcStringBasedStoreTxFunctionalTest\")\n+public class JdbcStringBasedStoreTxFunctionalTest extends JdbcStringBasedStoreFunctionalTest {\n+   private boolean transactionalConfig;\n+   private boolean sharedConfig;\n+\n+   JdbcStringBasedStoreTxFunctionalTest transactionalConfig(boolean transactionalConfig) {\n+      this.transactionalConfig = transactionalConfig;\n+      return this;\n+   }\n+\n+   JdbcStringBasedStoreTxFunctionalTest sharedConfig(boolean sharedConfig) {\n+      this.sharedConfig = sharedConfig;\n+      return this;\n+   }\n+\n+   @Override\n+   protected ConfigurationBuilder getDefaultCacheConfiguration() {\n+      ConfigurationBuilder configurationBuilder = super.getDefaultCacheConfiguration();\n+      configurationBuilder.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      if (sharedConfig) {\n+         // Shared requires a clustered config, even though we have a single node\n+         configurationBuilder.clustering().cacheMode(CacheMode.REPL_SYNC);\n+      }\n+      return configurationBuilder;\n+   }\n+\n+   @Override\n+   protected void modifyJdbcConfiguration(JdbcStringBasedStoreConfigurationBuilder builder) {\n+      builder.transactional(transactionalConfig);\n+      builder.shared(sharedConfig);\n+   }\n+\n+   @Override\n+   protected EmbeddedCacheManager createCacheManager(boolean start, GlobalConfigurationBuilder global,\n+         ConfigurationBuilder cb) {\n+      // Make sure defaults are transactional as well for created configs\n+      if (transactionalConfig) {\n+         cb.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      }\n+      if (sharedConfig) {\n+         ConfigurationBuilderHolder holder = new ConfigurationBuilderHolder(Thread.currentThread().getContextClassLoader(), global);\n+         if (cb != null) {\n+            String defaultName = JdbcStringBasedStoreTxFunctionalTest.class.getName() + \"-default\";\n+            global.defaultCacheName(defaultName);\n+            holder.newConfigurationBuilder(defaultName).read(cb.build());\n+         }\n+         global.transport().defaultTransport();\n+         return TestCacheManagerFactory.createClusteredCacheManager(start, holder);\n+      } else {\n+         return super.createCacheManager(start, global, cb);\n+      }\n+   }\n+\n+   @Factory\n+   public Object[] factory() {\n+      return new Object[]{\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(true),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(true),\n+      };\n+   }\n+\n+   @Override\n+   protected String parameters() {\n+      return \" [transactionalConfig=\" + transactionalConfig + \", sharedConfig=\" + sharedConfig + \"]\";\n+   }\n+\n+   @Override\n+   public void testRemoveCacheWithPassivation() {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {\n+         super.testRemoveCacheWithPassivation();\n+      }\n+   }\n+\n+   @Override\n+   public void testStoreByteArrays(Method m) throws PersistenceException {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {\n+         super.testStoreByteArrays(m);\n+      }\n+   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjg0Nzkw", "url": "https://github.com/infinispan/infinispan/pull/8410#pullrequestreview-422684790", "createdAt": "2020-06-02T13:38:42Z", "commit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozODo0M1rOGdyCMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozODo0M1rOGdyCMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MTY1MQ==", "bodyText": "Shouldn't we also check that \"rollback-test\" key is not present in the store after rollback when the store is transactional?", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433881651", "createdAt": "2020-06-02T13:38:43Z", "author": {"login": "ryanemerson"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.infinispan.persistence.jdbc.stringbased;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNull;\n+\n+import java.lang.reflect.Method;\n+\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+import org.infinispan.configuration.parsing.ConfigurationBuilderHolder;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.persistence.jdbc.configuration.JdbcStringBasedStoreConfigurationBuilder;\n+import org.infinispan.persistence.spi.PersistenceException;\n+import org.infinispan.test.fwk.TestCacheManagerFactory;\n+import org.infinispan.transaction.TransactionMode;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+@Test(groups = {\"functional\", \"smoke\"}, testName = \"persistence.jdbc.stringbased.JdbcStringBasedStoreTxFunctionalTest\")\n+public class JdbcStringBasedStoreTxFunctionalTest extends JdbcStringBasedStoreFunctionalTest {\n+   private boolean transactionalConfig;\n+   private boolean sharedConfig;\n+\n+   JdbcStringBasedStoreTxFunctionalTest transactionalConfig(boolean transactionalConfig) {\n+      this.transactionalConfig = transactionalConfig;\n+      return this;\n+   }\n+\n+   JdbcStringBasedStoreTxFunctionalTest sharedConfig(boolean sharedConfig) {\n+      this.sharedConfig = sharedConfig;\n+      return this;\n+   }\n+\n+   @Override\n+   protected ConfigurationBuilder getDefaultCacheConfiguration() {\n+      ConfigurationBuilder configurationBuilder = super.getDefaultCacheConfiguration();\n+      configurationBuilder.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      if (sharedConfig) {\n+         // Shared requires a clustered config, even though we have a single node\n+         configurationBuilder.clustering().cacheMode(CacheMode.REPL_SYNC);\n+      }\n+      return configurationBuilder;\n+   }\n+\n+   @Override\n+   protected void modifyJdbcConfiguration(JdbcStringBasedStoreConfigurationBuilder builder) {\n+      builder.transactional(transactionalConfig);\n+      builder.shared(sharedConfig);\n+   }\n+\n+   @Override\n+   protected EmbeddedCacheManager createCacheManager(boolean start, GlobalConfigurationBuilder global,\n+         ConfigurationBuilder cb) {\n+      // Make sure defaults are transactional as well for created configs\n+      if (transactionalConfig) {\n+         cb.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      }\n+      if (sharedConfig) {\n+         ConfigurationBuilderHolder holder = new ConfigurationBuilderHolder(Thread.currentThread().getContextClassLoader(), global);\n+         if (cb != null) {\n+            String defaultName = JdbcStringBasedStoreTxFunctionalTest.class.getName() + \"-default\";\n+            global.defaultCacheName(defaultName);\n+            holder.newConfigurationBuilder(defaultName).read(cb.build());\n+         }\n+         global.transport().defaultTransport();\n+         return TestCacheManagerFactory.createClusteredCacheManager(start, holder);\n+      } else {\n+         return super.createCacheManager(start, global, cb);\n+      }\n+   }\n+\n+   @Factory\n+   public Object[] factory() {\n+      return new Object[]{\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(true),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(true),\n+      };\n+   }\n+\n+   @Override\n+   protected String parameters() {\n+      return \" [transactionalConfig=\" + transactionalConfig + \", sharedConfig=\" + sharedConfig + \"]\";\n+   }\n+\n+   @Override\n+   public void testRemoveCacheWithPassivation() {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {\n+         super.testRemoveCacheWithPassivation();\n+      }\n+   }\n+\n+   @Override\n+   public void testStoreByteArrays(Method m) throws PersistenceException {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {\n+         super.testStoreByteArrays(m);\n+      }\n+   }\n+\n+   public void testRollback() throws SystemException, NotSupportedException {\n+      String cacheName = \"testRollback\";\n+      ConfigurationBuilder cb = getDefaultCacheConfiguration();\n+      createCacheStoreConfig(cb.persistence(), false);\n+      cacheManager.defineConfiguration(cacheName, cb.build());\n+\n+      Cache<String, Object> cache = cacheManager.getCache(cacheName);\n+\n+      String key = \"rollback-test\";\n+      assertNull(cache.get(key));\n+\n+      TransactionManager manager = cache.getAdvancedCache().getTransactionManager();\n+\n+      String value = \"the-value\";\n+      manager.begin();\n+      cache.put(key, value);\n+      assertEquals(value, cache.get(key));\n+      manager.rollback();\n+\n+      assertNull(cache.get(key));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 130}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3187ccdce1b43e98557e3aa78fd074b504362cac", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/3187ccdce1b43e98557e3aa78fd074b504362cac", "committedDate": "2020-06-02T14:55:10Z", "message": "ISPN-11937 JDBCStringBasedStore needs test around a rollback occurring"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/46633a32fdeb4eb13647dc3703eb132a174079be", "committedDate": "2020-05-29T17:25:59Z", "message": "ISPN-11937 JDBCStringBasedStore needs test around a rollback occurring"}, "afterCommit": {"oid": "3187ccdce1b43e98557e3aa78fd074b504362cac", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/3187ccdce1b43e98557e3aa78fd074b504362cac", "committedDate": "2020-06-02T14:55:10Z", "message": "ISPN-11937 JDBCStringBasedStore needs test around a rollback occurring"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 572, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}