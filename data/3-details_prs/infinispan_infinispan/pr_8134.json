{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTM4MzU5", "number": 8134, "title": "ISPN-11574 Automatic server authentication configuration", "bodyText": "https://issues.redhat.com/browse/ISPN-11574", "createdAt": "2020-03-31T19:09:05Z", "url": "https://github.com/infinispan/infinispan/pull/8134", "merged": true, "mergeCommit": {"oid": "6861b6639c2b90c32f2a6aa8b1bcc96d710012e2"}, "closed": true, "closedAt": "2020-04-17T13:12:54Z", "author": {"login": "tristantarrant"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTpHL6AFqTM4NjI1NzE1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYeORGABqjMyNDM2NjU2NzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MjU3MTU0", "url": "https://github.com/infinispan/infinispan/pull/8134#pullrequestreview-386257154", "createdAt": "2020-04-02T09:32:05Z", "commit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozMjowNlrOF_jAwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0MTo1N1rOF_jYEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3ODI0MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402178240", "createdAt": "2020-04-02T09:32:06Z", "author": {"login": "karesti"}, "path": "server/hotrod/src/main/java/org/infinispan/server/hotrod/configuration/SaslConfiguration.java", "diffHunk": "@@ -19,7 +19,7 @@\n  */\n @SuppressWarnings(\"unchecked\")\n public class SaslConfiguration implements ConfigurationInfo {\n-   public static final AttributeDefinition<String> SERVER_NAME = AttributeDefinition.builder(\"serverName\", null, String.class).immutable().build();\n+   public static final AttributeDefinition<String> SERVER_NAME = AttributeDefinition.builder(\"serverName\", \"infinispan\", String.class).immutable().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3OTMxMg==", "bodyText": "may this Server log be used in the REST endpoints for tracing/debugging ? not a review request but a question for adding logs that actually lack IMO", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402179312", "createdAt": "2020-04-02T09:33:52Z", "author": {"login": "karesti"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "diffHunk": "@@ -123,6 +128,50 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n+      if (implicitAuthentication) {\n+         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n+         builder.authentication().enable().securityRealm(securityRealm.getName());\n+         String serverPrincipal = null;\n+         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n+            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n+               builder.authentication()\n+                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n+               serverPrincipal = identity.getPrincipal();\n+               break;\n+            }\n+            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n+            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.EXTERNAL);\n+            Server.log.debug(\"Enabled EXTERNAL mechanism for Hot Rod\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MTk2MA==", "bodyText": "I would add the comment in the debug. Encryption is on. PLAIN mechanism enabled for Hot Rod", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402181960", "createdAt": "2020-04-02T09:38:19Z", "author": {"login": "karesti"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "diffHunk": "@@ -123,6 +128,50 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n+      if (implicitAuthentication) {\n+         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n+         builder.authentication().enable().securityRealm(securityRealm.getName());\n+         String serverPrincipal = null;\n+         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n+            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n+               builder.authentication()\n+                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n+               serverPrincipal = identity.getPrincipal();\n+               break;\n+            }\n+            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n+            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.EXTERNAL);\n+            Server.log.debug(\"Enabled EXTERNAL mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.PASSWORD)) {\n+            builder.authentication()\n+                  .addMechanisms(\n+                        SaslMechanismInformation.Names.SCRAM_SHA_512,\n+                        SaslMechanismInformation.Names.SCRAM_SHA_384,\n+                        SaslMechanismInformation.Names.SCRAM_SHA_256,\n+                        SaslMechanismInformation.Names.SCRAM_SHA_1,\n+                        SaslMechanismInformation.Names.DIGEST_SHA_512,\n+                        SaslMechanismInformation.Names.DIGEST_SHA_384,\n+                        SaslMechanismInformation.Names.DIGEST_SHA_256,\n+                        SaslMechanismInformation.Names.DIGEST_SHA,\n+                        SaslMechanismInformation.Names.CRAM_MD5,\n+                        SaslMechanismInformation.Names.DIGEST_MD5\n+                  );\n+            Server.log.debug(\"Enabled SCRAM, DIGEST and CRAM mechanisms for Hot Rod\");\n+         }\n+         // Only enable PLAIN if encryption is on\n+         if (serverBuilder.endpoint().ssl().isEnabled()) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.PLAIN);\n+            Server.log.debug(\"Enabled PLAIN mechanism for Hot Rod\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NDIwOA==", "bodyText": "is the server name mandatory still ?", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402184208", "createdAt": "2020-04-02T09:41:57Z", "author": {"login": "karesti"}, "path": "server/tests/src/test/java/org/infinispan/server/security/AuthenticationImplicitIT.java", "diffHunk": "@@ -30,67 +32,86 @@\n \n /**\n  * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n- * @since 10.1\n+ * @since 11.0\n  **/\n \n @RunWith(Parameterized.class)\n @Category(Security.class)\n-public class AuthenticationKerberosSpnegoIT {\n+public class AuthenticationImplicitIT {\n    @ClassRule\n    public static InfinispanServerRule SERVERS =\n-         InfinispanServerRuleBuilder.config(\"configuration/AuthenticationKerberosTest.xml\")\n-                                    .numServers(1)\n-                                    .property(\"java.security.krb5.conf\", \"${infinispan.server.config.path}/krb5.conf\")\n+         InfinispanServerRuleBuilder.config(\"configuration/AuthenticationServerImplicitTest.xml\")\n                                     .build();\n \n    @ClassRule\n-   public static LdapServerRule LDAP = new LdapServerRule(SERVERS, \"ldif/infinispan-kerberos.ldif\", true);\n+   public static LdapServerRule LDAP = new LdapServerRule(SERVERS);\n \n    @Rule\n    public InfinispanServerTestMethodRule SERVER_TEST = new InfinispanServerTestMethodRule(SERVERS);\n \n-   private final Protocol protocol;\n    private final String mechanism;\n-\n-   private static String oldKrb5Conf;\n+   private final String protocol;\n \n    @Parameterized.Parameters(name = \"{1}({0})\")\n    public static Collection<Object[]> data() {\n-      List<Object[]> params = new ArrayList<>(HTTP_KERBEROS_MECHS.size() * HTTP_PROTOCOLS.size());\n+      List<Object[]> params = new ArrayList<>();\n+      for(Object[] mech : Common.SASL_MECHS) {\n+         params.add(new Object[]{\"Hot Rod\", mech[0]});\n+      }\n       for (Protocol protocol : HTTP_PROTOCOLS) {\n-         for (Object[] mech : HTTP_KERBEROS_MECHS) {\n-            params.add(new Object[]{protocol, mech[0]});\n+         for (Object[] mech : HTTP_MECHS) {\n+            params.add(new Object[]{protocol.name(), mech[0]});\n          }\n       }\n       return params;\n    }\n \n-   public AuthenticationKerberosSpnegoIT(Protocol protocol, String mechanism) {\n+   public AuthenticationImplicitIT(String protocol, String mechanism) {\n       this.protocol = protocol;\n       this.mechanism = mechanism;\n    }\n \n-   @BeforeClass\n-   public static void setKrb5Conf() {\n-      oldKrb5Conf = System.setProperty(\"java.security.krb5.conf\", AuthenticationKerberosSpnegoIT.class.getClassLoader().getResource(\"configuration/krb5.conf\").getPath());\n+   @Test\n+   public void testProtocol() {\n+      if (\"Hot Rod\".equals(protocol)) {\n+         testHotRod();\n+      } else {\n+         testRest(Protocol.valueOf(protocol));\n+      }\n    }\n \n-   @AfterClass\n-   public static void restoreKrb5Conf() {\n-      if (oldKrb5Conf != null) {\n-         System.setProperty(\"java.security.krb5.conf\", oldKrb5Conf);\n+   public void testHotRod() {\n+      ConfigurationBuilder builder = new ConfigurationBuilder();\n+      if (!mechanism.isEmpty()) {\n+         builder.security().authentication()\n+               .saslMechanism(mechanism)\n+               .serverName(\"infinispan\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MjY5ODQz", "url": "https://github.com/infinispan/infinispan/pull/8134#pullrequestreview-386269843", "createdAt": "2020-04-02T09:49:20Z", "commit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0OToyMFrOF_jpbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0OToyMFrOF_jpbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4ODY1Mg==", "bodyText": "The JSON parser works by inspecting ATTRIBUTES and ELEMENT, I'm afraid all this logic will only happen for XML. Can all this be moved to the builders themselves?", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402188652", "createdAt": "2020-04-02T09:49:20Z", "author": {"login": "gustavonalle"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "diffHunk": "@@ -123,6 +128,50 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n+      if (implicitAuthentication) {\n+         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n+         builder.authentication().enable().securityRealm(securityRealm.getName());\n+         String serverPrincipal = null;\n+         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n+            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n+               builder.authentication()\n+                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n+               serverPrincipal = identity.getPrincipal();\n+               break;\n+            }\n+            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n+            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/047e33390dc2435d18de3c659e6787c6efd9578f", "committedDate": "2020-04-01T09:10:22Z", "message": "ISPN-11574 Refactor authorization tests\n\n* Extract common authorization test logic\n* Test authz with Properties, LDAP and Kerberos"}, "afterCommit": {"oid": "e1aceea74e7b8609ab864fa2ef0fa8272c497309", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/e1aceea74e7b8609ab864fa2ef0fa8272c497309", "committedDate": "2020-04-07T09:09:47Z", "message": "ISPN-11574 Documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MTQ0MDIz", "url": "https://github.com/infinispan/infinispan/pull/8134#pullrequestreview-389144023", "createdAt": "2020-04-07T13:59:07Z", "commit": {"oid": "c7797f233a02ba6e03ac83184a0f9d3eebba71d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo1OTowOFrOGCE7Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo1OTowOFrOGCE7Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzMTAyNg==", "bodyText": "add CLI", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404831026", "createdAt": "2020-04-07T13:59:08Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/stories/assembly_server_security.adoc", "diffHunk": "@@ -3,11 +3,15 @@\n = Securing {brandname} Servers\n Protect {brandname} servers against network attacks and unauthorized access.\n \n-The default {brandname} server configuration requires authentication out-of-the-box.\n+By default {brandname} servers require user authentication to access the\n+console as well as Hot Rod or REST endpoints. {brandname} servers also ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7797f233a02ba6e03ac83184a0f9d3eebba71d9"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MTQ2NTcw", "url": "https://github.com/infinispan/infinispan/pull/8134#pullrequestreview-389146570", "createdAt": "2020-04-07T14:01:45Z", "commit": {"oid": "c7797f233a02ba6e03ac83184a0f9d3eebba71d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMTo0NlrOGCFC1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMTo0NlrOGCFC1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzMjk4MA==", "bodyText": "This is wrong: since there isn't a SSL identity, PLAIN and Basic will not be available. All of the Digest and Scram methods will be", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404832980", "createdAt": "2020-04-07T14:01:46Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/topics/ref_server_authentication.adoc", "diffHunk": "@@ -0,0 +1,85 @@\n+[id='server_endpoint_auth-{context}']\n+= {brandname} Server Authentication\n+{brandname} servers automatically configure authentication mechanisms based on\n+the security realm that you assign to endpoints.\n+\n+.SASL Authentication Mechanisms\n+\n+The following SASL authentication mechanisms apply to Hot Rod endpoints:\n+\n+|===\n+|Security Realm |SASL Authentication Mechanism\n+\n+|Property Realms and LDAP Realms\n+|PLAIN, SCRAM-+*+, DIGEST-+*+, CRAM-MD5\n+\n+|Token Realms\n+|OAUTHBEARER\n+\n+|Trust Realms\n+|EXTERNAL\n+\n+|Kerberos Identities\n+|GSSAPI, GS2-KRB5\n+\n+|SSL/TLS Identities\n+|PLAIN\n+|===\n+\n+\n+.HTTP Authentication Mechanisms\n+\n+The following HTTP authentication mechanisms apply to REST endpoints:\n+\n+|===\n+|Security Realm |HTTP Authentication Mechanism\n+\n+|Property Realms and LDAP Realms\n+|BASIC, DIGEST\n+\n+|Token Realms\n+|BEARER_TOKEN\n+\n+|Trust Realms\n+|CLIENT_CERT\n+\n+|Kerberos Identities\n+|SPNEGO\n+\n+|SSL/TLS Identities\n+|BASIC\n+|===\n+\n+.Default Configuration\n+\n+{brandname} servers provide a security realm named \"default\" that uses a\n+property realm with plain text credentials defined in `{server_home}/server/\n+conf/users.properties`, as shown in the following snippet:\n+\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+<security-realm name=\"default\">\n+  <properties-realm groups-attribute=\"Roles\">\n+    <user-properties path=\"users.properties\"\n+                     relative-to=\"infinispan.server.config.path\"\n+                     plain-text=\"true\"/>\n+    <group-properties path=\"groups.properties\"\n+                      relative-to=\"infinispan.server.config.path\" />\n+  </properties-realm>\n+</security-realm>\n+----\n+\n+The `endpoints` configuration assigns the \"default\" security realm to the Hot\n+Rod and REST connectors, as follows:\n+\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+<endpoints socket-binding=\"default\" security-realm=\"default\">\n+  <hotrod-connector name=\"hotrod\"/>\n+  <rest-connector name=\"rest\"/>\n+</endpoints>\n+----\n+\n+As a result of the preceding configuration, {brandname} servers require\n+authentication with a mechanism that the property realm supports, in this case \n+either `PLAIN` or `BASIC`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7797f233a02ba6e03ac83184a0f9d3eebba71d9"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MTQ2ODYw", "url": "https://github.com/infinispan/infinispan/pull/8134#pullrequestreview-389146860", "createdAt": "2020-04-07T14:02:04Z", "commit": {"oid": "c7797f233a02ba6e03ac83184a0f9d3eebba71d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMjowNFrOGCFDtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMjowNFrOGCFDtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzMzIwNQ==", "bodyText": "remove BASIC (will only be enabled with SSL)", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404833205", "createdAt": "2020-04-07T14:02:04Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/topics/ref_server_authentication.adoc", "diffHunk": "@@ -0,0 +1,85 @@\n+[id='server_endpoint_auth-{context}']\n+= {brandname} Server Authentication\n+{brandname} servers automatically configure authentication mechanisms based on\n+the security realm that you assign to endpoints.\n+\n+.SASL Authentication Mechanisms\n+\n+The following SASL authentication mechanisms apply to Hot Rod endpoints:\n+\n+|===\n+|Security Realm |SASL Authentication Mechanism\n+\n+|Property Realms and LDAP Realms\n+|PLAIN, SCRAM-+*+, DIGEST-+*+, CRAM-MD5\n+\n+|Token Realms\n+|OAUTHBEARER\n+\n+|Trust Realms\n+|EXTERNAL\n+\n+|Kerberos Identities\n+|GSSAPI, GS2-KRB5\n+\n+|SSL/TLS Identities\n+|PLAIN\n+|===\n+\n+\n+.HTTP Authentication Mechanisms\n+\n+The following HTTP authentication mechanisms apply to REST endpoints:\n+\n+|===\n+|Security Realm |HTTP Authentication Mechanism\n+\n+|Property Realms and LDAP Realms\n+|BASIC, DIGEST", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7797f233a02ba6e03ac83184a0f9d3eebba71d9"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MTQ3Mjk4", "url": "https://github.com/infinispan/infinispan/pull/8134#pullrequestreview-389147298", "createdAt": "2020-04-07T14:02:31Z", "commit": {"oid": "c7797f233a02ba6e03ac83184a0f9d3eebba71d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMjozMVrOGCFE7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMjozMVrOGCFE7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzMzUxOQ==", "bodyText": "Remove PLAIN (will only be enabled with SSL)", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404833519", "createdAt": "2020-04-07T14:02:31Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/topics/ref_server_authentication.adoc", "diffHunk": "@@ -0,0 +1,85 @@\n+[id='server_endpoint_auth-{context}']\n+= {brandname} Server Authentication\n+{brandname} servers automatically configure authentication mechanisms based on\n+the security realm that you assign to endpoints.\n+\n+.SASL Authentication Mechanisms\n+\n+The following SASL authentication mechanisms apply to Hot Rod endpoints:\n+\n+|===\n+|Security Realm |SASL Authentication Mechanism\n+\n+|Property Realms and LDAP Realms\n+|PLAIN, SCRAM-+*+, DIGEST-+*+, CRAM-MD5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7797f233a02ba6e03ac83184a0f9d3eebba71d9"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9dce9d7a4f8126b365329ef034948df4f8095892", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/9dce9d7a4f8126b365329ef034948df4f8095892", "committedDate": "2020-04-07T19:21:37Z", "message": "updating docs with review feedback"}, "afterCommit": {"oid": "7a1a0a9f37f5370c1b2704bbcc90ba2ddbb2721d", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/7a1a0a9f37f5370c1b2704bbcc90ba2ddbb2721d", "committedDate": "2020-04-10T12:18:26Z", "message": "ISPN-11574 Documentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a1a0a9f37f5370c1b2704bbcc90ba2ddbb2721d", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/7a1a0a9f37f5370c1b2704bbcc90ba2ddbb2721d", "committedDate": "2020-04-10T12:18:26Z", "message": "ISPN-11574 Documentation"}, "afterCommit": {"oid": "5d26aeadb21f6b68b8864f2a2ef46f3862cb46d0", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/5d26aeadb21f6b68b8864f2a2ef46f3862cb46d0", "committedDate": "2020-04-14T13:37:32Z", "message": "ISPN-11574 Documentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d26aeadb21f6b68b8864f2a2ef46f3862cb46d0", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/5d26aeadb21f6b68b8864f2a2ef46f3862cb46d0", "committedDate": "2020-04-14T13:37:32Z", "message": "ISPN-11574 Documentation"}, "afterCommit": {"oid": "d63c704fd99e0dc7171bfa86bd712689e49c8d85", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/d63c704fd99e0dc7171bfa86bd712689e49c8d85", "committedDate": "2020-04-14T15:52:44Z", "message": "ISPN-11574 Documentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d63c704fd99e0dc7171bfa86bd712689e49c8d85", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/d63c704fd99e0dc7171bfa86bd712689e49c8d85", "committedDate": "2020-04-14T15:52:44Z", "message": "ISPN-11574 Documentation"}, "afterCommit": {"oid": "35cc7fa58a29e54e94b80b221c303b7908cb4a6b", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/35cc7fa58a29e54e94b80b221c303b7908cb4a6b", "committedDate": "2020-04-15T07:20:23Z", "message": "ISPN-11574 Documentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35cc7fa58a29e54e94b80b221c303b7908cb4a6b", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/35cc7fa58a29e54e94b80b221c303b7908cb4a6b", "committedDate": "2020-04-15T07:20:23Z", "message": "ISPN-11574 Documentation"}, "afterCommit": {"oid": "15ecee6ac107afb18825d7e01d849c66020d16e1", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/15ecee6ac107afb18825d7e01d849c66020d16e1", "committedDate": "2020-04-15T10:05:47Z", "message": "ISPN-11574 Documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bc3d81b95964688dbd0620fb528fa453559a517", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/5bc3d81b95964688dbd0620fb528fa453559a517", "committedDate": "2020-04-17T09:52:49Z", "message": "ISPN-11574 Automatic server authentication configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f66c8b7d4e1492f76786cf648d97ba2997ce5914", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/f66c8b7d4e1492f76786cf648d97ba2997ce5914", "committedDate": "2020-04-17T09:52:49Z", "message": "ISPN-11574 Refactor authorization tests\n\n* Extract common authorization test logic\n* Test authz with Properties, LDAP and Kerberos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fff05ffc7adc2ca30e1a8559bfd01318e8967e56", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/fff05ffc7adc2ca30e1a8559bfd01318e8967e56", "committedDate": "2020-04-17T09:52:49Z", "message": "ISPN-11574 Documentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15ecee6ac107afb18825d7e01d849c66020d16e1", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/15ecee6ac107afb18825d7e01d849c66020d16e1", "committedDate": "2020-04-15T10:05:47Z", "message": "ISPN-11574 Documentation"}, "afterCommit": {"oid": "fff05ffc7adc2ca30e1a8559bfd01318e8967e56", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/fff05ffc7adc2ca30e1a8559bfd01318e8967e56", "committedDate": "2020-04-17T09:52:49Z", "message": "ISPN-11574 Documentation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1025, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}