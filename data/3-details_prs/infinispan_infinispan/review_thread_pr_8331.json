{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NjU4MDcz", "number": 8331, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0MDo0M1rOD9h1wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDowMDozMVrOD9iNzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ0MTYwOnYy", "diffSide": "RIGHT", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/APITxTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0MDo0M1rOGXFChg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0MDo0M1rOGXFChg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1Mjk5OA==", "bodyText": "You can do something like this instead\nhttps://github.com/infinispan/infinispan/blob/master/core/src/test/java/org/infinispan/expiration/impl/ClusterExpirationFunctionalTest.java#L59", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426852998", "createdAt": "2020-05-18T19:40:43Z", "author": {"login": "wburns"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/APITxTest.java", "diffHunk": "@@ -60,17 +58,19 @@\n \n    @Override\n    public Object[] factory() {\n-      return new Object[]{\n-            new APITxTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(NON_XA),\n-            new APITxTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(NON_DURABLE_XA),\n-            new APITxTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(FULL_XA),\n-            new APITxTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(NON_XA),\n-            new APITxTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(NON_DURABLE_XA),\n-            new APITxTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(FULL_XA),\n-            new APITxTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(NON_XA).javaSerialization(),\n-            new APITxTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(NON_DURABLE_XA).javaSerialization(),\n-            new APITxTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(FULL_XA).javaSerialization()\n-      };\n+      List<Object> tests = new ArrayList<>(3 * 3 * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823971d09b68fe0ce448a20d70e7757b2656d808"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ0MjUyOnYy", "diffSide": "RIGHT", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/APITxTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0MTowMFrOGXFDGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0MTowMFrOGXFDGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1MzE0NQ==", "bodyText": "Nitpick: Unneeded space", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426853145", "createdAt": "2020-05-18T19:41:00Z", "author": {"login": "wburns"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/APITxTest.java", "diffHunk": "@@ -414,16 +414,13 @@ private void checkNoKeys(List<K> keys, List<V> values, boolean inTx) {\n    }\n \n    private void checkInitValue(List<K> keys, List<V> values) {\n-      checkInitValue(keys, values, true);\n-   }\n-\n-   private void checkInitValue(List<K> keys, List<V> values, boolean inTx) {\n       RemoteCache<K, V> cache = txRemoteCache();\n       for (int i = 0; i < keys.size(); ++i) {\n          kvGenerator.assertValueEquals(values.get(i), cache.get(keys.get(i)));\n       }\n    }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823971d09b68fe0ce448a20d70e7757b2656d808"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ0NDQ2OnYy", "diffSide": "RIGHT", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/MultipleCacheTxFunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0MTo0MVrOGXFEVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0MTo0MVrOGXFEVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1MzQ2MA==", "bodyText": "Same here re: flatMap", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426853460", "createdAt": "2020-05-18T19:41:41Z", "author": {"login": "wburns"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/MultipleCacheTxFunctionalTest.java", "diffHunk": "@@ -49,17 +49,19 @@\n \n    @Override\n    public Object[] factory() {\n-      return new Object[]{\n-            new MultipleCacheTxFunctionalTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(NON_XA),\n-            new MultipleCacheTxFunctionalTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(NON_DURABLE_XA),\n-            new MultipleCacheTxFunctionalTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(FULL_XA),\n-            new MultipleCacheTxFunctionalTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(NON_XA),\n-            new MultipleCacheTxFunctionalTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(NON_DURABLE_XA),\n-            new MultipleCacheTxFunctionalTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(FULL_XA),\n-            new MultipleCacheTxFunctionalTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(NON_XA).javaSerialization(),\n-            new MultipleCacheTxFunctionalTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(NON_DURABLE_XA).javaSerialization(),\n-            new MultipleCacheTxFunctionalTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(FULL_XA).javaSerialization()\n-      };\n+      List<Object> tests = new ArrayList<>(3 * 3 * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823971d09b68fe0ce448a20d70e7757b2656d808"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ0NTE5OnYy", "diffSide": "RIGHT", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/TxFunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0MTo1N1rOGXFE0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0MTo1N1rOGXFE0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1MzU4Nw==", "bodyText": "Same here re: flatMap", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426853587", "createdAt": "2020-05-18T19:41:57Z", "author": {"login": "wburns"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/TxFunctionalTest.java", "diffHunk": "@@ -52,17 +52,19 @@\n \n    @Override\n    public Object[] factory() {\n-      return new Object[]{\n-            new TxFunctionalTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(NON_XA),\n-            new TxFunctionalTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(NON_DURABLE_XA),\n-            new TxFunctionalTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(FULL_XA),\n-            new TxFunctionalTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(FULL_XA),\n-            new TxFunctionalTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(NON_XA),\n-            new TxFunctionalTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(NON_DURABLE_XA),\n-            new TxFunctionalTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(NON_XA).javaSerialization(),\n-            new TxFunctionalTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(NON_DURABLE_XA).javaSerialization(),\n-            new TxFunctionalTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(FULL_XA).javaSerialization()\n-      };\n+      List<Object> tests = new ArrayList<>(3 * 3 * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823971d09b68fe0ce448a20d70e7757b2656d808"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ5MDY4OnYy", "diffSide": "RIGHT", "path": "server/hotrod/src/test/java/org/infinispan/server/hotrod/tx/TopologyChangeFunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1NjoyMlrOGXFggw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1NjoyMlrOGXFggw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MDY3NQ==", "bodyText": "Same here re: flatMap", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426860675", "createdAt": "2020-05-18T19:56:22Z", "author": {"login": "wburns"}, "path": "server/hotrod/src/test/java/org/infinispan/server/hotrod/tx/TopologyChangeFunctionalTest.java", "diffHunk": "@@ -48,18 +50,16 @@\n \n    @Override\n    public Object[] factory() {\n-      return new Object[]{\n-            //TODO add optimistic tests when supported!\n-            new TopologyChangeFunctionalTest()\n-                  .transactionMode(org.infinispan.configuration.cache.TransactionMode.NON_XA).lockingMode(\n-                  LockingMode.PESSIMISTIC),\n-            new TopologyChangeFunctionalTest()\n-                  .transactionMode(org.infinispan.configuration.cache.TransactionMode.NON_DURABLE_XA).lockingMode(\n-                  LockingMode.PESSIMISTIC),\n-            new TopologyChangeFunctionalTest()\n-                  .transactionMode(org.infinispan.configuration.cache.TransactionMode.FULL_XA).lockingMode(\n-                  LockingMode.PESSIMISTIC)\n-      };\n+      List<Object> tests = new ArrayList<>(3 * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823971d09b68fe0ce448a20d70e7757b2656d808"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ5MTIxOnYy", "diffSide": "RIGHT", "path": "server/hotrod/src/test/java/org/infinispan/server/hotrod/tx/TxFunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1NjozMlrOGXFg2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1NjozMlrOGXFg2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MDc2MQ==", "bodyText": "Same here re: flatMap", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426860761", "createdAt": "2020-05-18T19:56:32Z", "author": {"login": "wburns"}, "path": "server/hotrod/src/test/java/org/infinispan/server/hotrod/tx/TxFunctionalTest.java", "diffHunk": "@@ -41,18 +43,16 @@\n \n    @Override\n    public Object[] factory() {\n-      return new Object[]{\n-            //TODO add optimistic tests when supported!\n-            new TxFunctionalTest()\n-                  .transactionMode(org.infinispan.configuration.cache.TransactionMode.NON_XA).lockingMode(\n-                  LockingMode.PESSIMISTIC),\n-            new TxFunctionalTest()\n-                  .transactionMode(org.infinispan.configuration.cache.TransactionMode.NON_DURABLE_XA).lockingMode(\n-                  LockingMode.PESSIMISTIC),\n-            new TxFunctionalTest()\n-                  .transactionMode(org.infinispan.configuration.cache.TransactionMode.FULL_XA).lockingMode(\n-                  LockingMode.PESSIMISTIC)\n-      };\n+      List<Object> tests = new ArrayList<>(3 * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823971d09b68fe0ce448a20d70e7757b2656d808"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODUwMjY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/metadata/impl/PrivateMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDowMDoyMFrOGXFn2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDowMDoyMFrOGXFn2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MjU1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               public NumericVersion getNVersion() {\n          \n          \n            \n               public NumericVersion getNumericVersion() {", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426862554", "createdAt": "2020-05-18T20:00:20Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/metadata/impl/PrivateMetadata.java", "diffHunk": "@@ -74,29 +87,75 @@ public IracMetadata iracMetadata() {\n       return iracMetadata;\n    }\n \n+   /**\n+    * @return The {@link IncrementableEntryVersion} associated with the entry.\n+    */\n+   public IncrementableEntryVersion entryVersion() {\n+      return entryVersion;\n+   }\n+\n    /**\n     * @return {@code true} if not metadata is stored in this instance.\n     */\n    public boolean isEmpty() {\n-      return iracMetadata == null;\n+      return iracMetadata == null && entryVersion == null;\n    }\n \n+   @Override\n+   public String toString() {\n+      return \"PrivateMetadata{\" +\n+            \"iracMetadata=\" + iracMetadata +\n+            \", entryVersion=\" + entryVersion +\n+            '}';\n+   }\n+\n+   @Override\n+   public boolean equals(Object o) {\n+      if (this == o) {\n+         return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+         return false;\n+      }\n+      PrivateMetadata metadata = (PrivateMetadata) o;\n+      return Objects.equals(iracMetadata, metadata.iracMetadata) &&\n+            Objects.equals(entryVersion, metadata.entryVersion);\n+   }\n+\n+   @Override\n+   public int hashCode() {\n+      return Objects.hash(iracMetadata, entryVersion);\n+   }\n+\n+   @ProtoField(number = 2)\n+   public NumericVersion getNVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823971d09b68fe0ce448a20d70e7757b2656d808"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODUwMzE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/metadata/impl/PrivateMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDowMDozMVrOGXFoMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDowMDozMVrOGXFoMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MjY0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               public SimpleClusteredVersion getCVersion() {\n          \n          \n            \n               public SimpleClusteredVersion getClusteredVersion() {", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426862641", "createdAt": "2020-05-18T20:00:31Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/metadata/impl/PrivateMetadata.java", "diffHunk": "@@ -74,29 +87,75 @@ public IracMetadata iracMetadata() {\n       return iracMetadata;\n    }\n \n+   /**\n+    * @return The {@link IncrementableEntryVersion} associated with the entry.\n+    */\n+   public IncrementableEntryVersion entryVersion() {\n+      return entryVersion;\n+   }\n+\n    /**\n     * @return {@code true} if not metadata is stored in this instance.\n     */\n    public boolean isEmpty() {\n-      return iracMetadata == null;\n+      return iracMetadata == null && entryVersion == null;\n    }\n \n+   @Override\n+   public String toString() {\n+      return \"PrivateMetadata{\" +\n+            \"iracMetadata=\" + iracMetadata +\n+            \", entryVersion=\" + entryVersion +\n+            '}';\n+   }\n+\n+   @Override\n+   public boolean equals(Object o) {\n+      if (this == o) {\n+         return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+         return false;\n+      }\n+      PrivateMetadata metadata = (PrivateMetadata) o;\n+      return Objects.equals(iracMetadata, metadata.iracMetadata) &&\n+            Objects.equals(entryVersion, metadata.entryVersion);\n+   }\n+\n+   @Override\n+   public int hashCode() {\n+      return Objects.hash(iracMetadata, entryVersion);\n+   }\n+\n+   @ProtoField(number = 2)\n+   public NumericVersion getNVersion() {\n+      return entryVersion instanceof NumericVersion ? (NumericVersion) entryVersion : null;\n+   }\n+\n+   @ProtoField(number = 3)\n+   public SimpleClusteredVersion getCVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823971d09b68fe0ce448a20d70e7757b2656d808"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4221, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}