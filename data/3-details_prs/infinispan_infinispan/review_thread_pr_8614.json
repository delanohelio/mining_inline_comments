{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NzMwNDE4", "number": 8614, "reviewThreads": {"totalCount": 56, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1MDoyMVrOEffeXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoyMzowMVrOEm7kSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDU2OTkxOnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/api/TestClientXSiteDriver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1MDoyMVrOHLy6SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1MDoyMVrOHLy6SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzMDUwNQ==", "bodyText": "shouldn't the method name be independent of the site?", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482130505", "createdAt": "2020-09-02T14:50:21Z", "author": {"login": "pruivo"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/api/TestClientXSiteDriver.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.infinispan.server.test.api;\n+\n+import org.infinispan.counter.api.CounterManager;\n+\n+/**\n+ * Test client driver interface contains the methods we want to expose to be used from test methods\n+ *\n+ * @author Gustavo Lira\n+ * @since 12\n+ */\n+public interface TestClientXSiteDriver {\n+\n+   /**\n+    * Get the HotRod instance for hotrod api operations\n+    *\n+    * @return {@link HotRodTestClientDriver} instance\n+    */\n+   HotRodTestClientDriver hotrod(String siteName);\n+\n+   /**\n+    * Get the REST instance for hotrod api operations\n+    * @return {@link RestTestClientDriver} instance}\n+    */\n+   RestTestClientDriver rest(String siteName);\n+\n+   /**\n+    * Provides the current method name\n+    *\n+    * @return String, the method name\n+    */\n+   String getMethodName(String siteName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDYwMDk2OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1NjozMlrOHLzNTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1NjozMlrOHLzNTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNTM3NA==", "bodyText": "can be private. and it is missing a method to register the consumer\nregisterConfigurationEnhancer(Consumer<File> enhancer)", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482135374", "createdAt": "2020-09-02T14:56:32Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+/**\n+ * Creates a cluster of servers to be used for running multiple tests It performs the following tasks:\n+ * <ul>\n+ * <li>It creates a temporary directory using the test name</li>\n+ * <li>It creates a common configuration directory to be shared by all servers</li>\n+ * <li>It creates a runtime directory structure for each server in the cluster (data, log, lib)</li>\n+ * <li>It populates the configuration directory with multiple certificates (ca.pfx, server.pfx, user1.pfx, user2.pfx)</li>\n+ * </ul>\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerRule implements TestRule {\n+   private final Map<String, TestServer> testServers;\n+   protected final List<Consumer<File>> configurationEnhancers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDYwOTc3OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1ODoxNlrOHLzSzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1ODoxNlrOHLzSzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNjc4MQ==", "bodyText": "can be inside of evaluate()", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482136781", "createdAt": "2020-09-02T14:58:16Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+/**\n+ * Creates a cluster of servers to be used for running multiple tests It performs the following tasks:\n+ * <ul>\n+ * <li>It creates a temporary directory using the test name</li>\n+ * <li>It creates a common configuration directory to be shared by all servers</li>\n+ * <li>It creates a runtime directory structure for each server in the cluster (data, log, lib)</li>\n+ * <li>It populates the configuration directory with multiple certificates (ca.pfx, server.pfx, user1.pfx, user2.pfx)</li>\n+ * </ul>\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerRule implements TestRule {\n+   private final Map<String, TestServer> testServers;\n+   protected final List<Consumer<File>> configurationEnhancers = new ArrayList<>();\n+\n+   public InfinispanXSiteServerRule(Map<String, TestServer> testServers) {\n+      this.testServers = testServers;\n+   }\n+\n+   @Override\n+   public Statement apply(Statement base, Description description) {\n+      Map<TestServer, Boolean> managedServers = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDYxNDIwOnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1OTowOFrOHLzVhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1OTowOFrOHLzVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNzQ3Ng==", "bodyText": "you could have used a list and add only the TestServers that need to be managed.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482137476", "createdAt": "2020-09-02T14:59:08Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+/**\n+ * Creates a cluster of servers to be used for running multiple tests It performs the following tasks:\n+ * <ul>\n+ * <li>It creates a temporary directory using the test name</li>\n+ * <li>It creates a common configuration directory to be shared by all servers</li>\n+ * <li>It creates a runtime directory structure for each server in the cluster (data, log, lib)</li>\n+ * <li>It populates the configuration directory with multiple certificates (ca.pfx, server.pfx, user1.pfx, user2.pfx)</li>\n+ * </ul>\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerRule implements TestRule {\n+   private final Map<String, TestServer> testServers;\n+   protected final List<Consumer<File>> configurationEnhancers = new ArrayList<>();\n+\n+   public InfinispanXSiteServerRule(Map<String, TestServer> testServers) {\n+      this.testServers = testServers;\n+   }\n+\n+   @Override\n+   public Statement apply(Statement base, Description description) {\n+      Map<TestServer, Boolean> managedServers = new HashMap<>();\n+      return new Statement() {\n+         @Override\n+         public void evaluate() throws Throwable {\n+            String testName = description.getTestClass().getName();\n+            try {\n+               for (Map.Entry<String, TestServer> entry : testServers.entrySet()) {\n+                     TestServer testServer = entry.getValue();\n+                     boolean manageServer = !testServer.isDriverInitialized();\n+                     managedServers.put(testServer, manageServer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDYyMjAwOnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowMDozNlrOHLzaGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowMDozNlrOHLzaGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzODY0OQ==", "bodyText": "import in the wrong place.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482138649", "createdAt": "2020-09-02T15:00:36Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Builder for {@link InfinispanXSiteServerRule}.\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ */\n+import org.infinispan.server.test.core.TestServer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDYyNDk1OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowMToxNFrOHLzb_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowMToxNFrOHLzb_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzOTEzMg==", "bodyText": "final", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482139132", "createdAt": "2020-09-02T15:01:14Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Builder for {@link InfinispanXSiteServerRule}.\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ */\n+import org.infinispan.server.test.core.TestServer;\n+\n+public class InfinispanXSiteServerRuleBuilder {\n+\n+   private InfinispanXSiteServerRuleBuilder(){}\n+\n+   private List<XSite> sites = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDYyNzMxOnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowMTo0M1rOHLzdgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowMTo0M1rOHLzdgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzOTUyMw==", "bodyText": "final", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482139523", "createdAt": "2020-09-02T15:01:43Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.server.test.api.HotRodTestClientDriver;\n+import org.infinispan.server.test.api.RestTestClientDriver;\n+import org.infinispan.server.test.api.TestClientXSiteDriver;\n+import org.infinispan.server.test.core.TestClient;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import net.spy.memcached.MemcachedClient;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerTestMethodRule implements TestRule, TestClientXSiteDriver {\n+   private Map<String, TestClient> testClients = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDY0OTI5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowNDozNVrOHLzshA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowNDozNVrOHLzshA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0MzM2NA==", "bodyText": "you can store the method name in InfinispanXSiteServerTestMethodRule and avoid setting the same test name in all the TestClient", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482143364", "createdAt": "2020-09-02T15:04:35Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.server.test.api.HotRodTestClientDriver;\n+import org.infinispan.server.test.api.RestTestClientDriver;\n+import org.infinispan.server.test.api.TestClientXSiteDriver;\n+import org.infinispan.server.test.core.TestClient;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import net.spy.memcached.MemcachedClient;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerTestMethodRule implements TestRule, TestClientXSiteDriver {\n+   private Map<String, TestClient> testClients = new HashMap<>();\n+\n+   public InfinispanXSiteServerTestMethodRule(InfinispanXSiteServerRule serverRule) {\n+      Objects.requireNonNull(serverRule, \"InfinispanServerRule class Rule is null\");\n+      serverRule.getTestServers().forEach((k,v) -> this.testClients.put(k, new TestClient(v)));\n+   }\n+\n+   @Override\n+   public String getMethodName(String siteName) {\n+      return testClients.get(siteName).getMethodName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDY1MzI3OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowNToxOVrOHLzu3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo1OToyMlrOHMQA2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0Mzk2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                           testClients.forEach((key, testClient) -> {\n          \n          \n            \n                              testClient.initResources();\n          \n          \n            \n                              testClient.setMethodName(description.getTestClass().getSimpleName() + \".\" + description.getMethodName());\n          \n          \n            \n                           });\n          \n          \n            \n                           testClients.values().forEach(TestClient::initResources);", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482143967", "createdAt": "2020-09-02T15:05:19Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.server.test.api.HotRodTestClientDriver;\n+import org.infinispan.server.test.api.RestTestClientDriver;\n+import org.infinispan.server.test.api.TestClientXSiteDriver;\n+import org.infinispan.server.test.core.TestClient;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import net.spy.memcached.MemcachedClient;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerTestMethodRule implements TestRule, TestClientXSiteDriver {\n+   private Map<String, TestClient> testClients = new HashMap<>();\n+\n+   public InfinispanXSiteServerTestMethodRule(InfinispanXSiteServerRule serverRule) {\n+      Objects.requireNonNull(serverRule, \"InfinispanServerRule class Rule is null\");\n+      serverRule.getTestServers().forEach((k,v) -> this.testClients.put(k, new TestClient(v)));\n+   }\n+\n+   @Override\n+   public String getMethodName(String siteName) {\n+      return testClients.get(siteName).getMethodName();\n+   }\n+\n+   @Override\n+   public HotRodTestClientDriver hotrod(String siteName) {\n+      return testClients.get(siteName).hotrod();\n+   }\n+\n+   @Override\n+   public RestTestClientDriver rest(String siteName) {\n+      return testClients.get(siteName).rest();\n+   }\n+\n+   @Override\n+   public CounterManager getCounterManager(String siteName) {\n+      return testClients.get(siteName).getCounterManager();\n+   }\n+\n+   // Used for internal test\n+   public MemcachedClient getMemcachedClient(String siteName) {\n+      return testClients.get(siteName).getMemcachedClient();\n+   }\n+\n+   @Override\n+   public Statement apply(Statement base, Description description) {\n+      return new Statement() {\n+         @Override\n+         public void evaluate() throws Throwable {\n+            try {\n+               testClients.forEach((key, testClient) -> {\n+                  testClient.initResources();\n+                  testClient.setMethodName(description.getTestClass().getSimpleName() + \".\" + description.getMethodName());\n+               });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNzMyMw==", "bodyText": "@pruivo  Without testClient.setMethodName(description.getTestClass().getSimpleName() + \".\" + description.getMethodName()); I will need to duplicate the TestClient#getMethodName logic into InfinispanXSiteServerTestMethodRule which IMO is not a good idea, do you have any tips?", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482607323", "createdAt": "2020-09-02T23:59:22Z", "author": {"login": "gustavolira"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.server.test.api.HotRodTestClientDriver;\n+import org.infinispan.server.test.api.RestTestClientDriver;\n+import org.infinispan.server.test.api.TestClientXSiteDriver;\n+import org.infinispan.server.test.core.TestClient;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import net.spy.memcached.MemcachedClient;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerTestMethodRule implements TestRule, TestClientXSiteDriver {\n+   private Map<String, TestClient> testClients = new HashMap<>();\n+\n+   public InfinispanXSiteServerTestMethodRule(InfinispanXSiteServerRule serverRule) {\n+      Objects.requireNonNull(serverRule, \"InfinispanServerRule class Rule is null\");\n+      serverRule.getTestServers().forEach((k,v) -> this.testClients.put(k, new TestClient(v)));\n+   }\n+\n+   @Override\n+   public String getMethodName(String siteName) {\n+      return testClients.get(siteName).getMethodName();\n+   }\n+\n+   @Override\n+   public HotRodTestClientDriver hotrod(String siteName) {\n+      return testClients.get(siteName).hotrod();\n+   }\n+\n+   @Override\n+   public RestTestClientDriver rest(String siteName) {\n+      return testClients.get(siteName).rest();\n+   }\n+\n+   @Override\n+   public CounterManager getCounterManager(String siteName) {\n+      return testClients.get(siteName).getCounterManager();\n+   }\n+\n+   // Used for internal test\n+   public MemcachedClient getMemcachedClient(String siteName) {\n+      return testClients.get(siteName).getMemcachedClient();\n+   }\n+\n+   @Override\n+   public Statement apply(Statement base, Description description) {\n+      return new Statement() {\n+         @Override\n+         public void evaluate() throws Throwable {\n+            try {\n+               testClients.forEach((key, testClient) -> {\n+                  testClient.initResources();\n+                  testClient.setMethodName(description.getTestClass().getSimpleName() + \".\" + description.getMethodName());\n+               });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0Mzk2Nw=="}, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDY1NTk5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowNTo1NFrOHLzwfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowNTo1NFrOHLzwfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0NDM4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                           testClients.forEach((k,testClient) -> testClient.clearResources());\n          \n          \n            \n                           testClients.values().forEach(TestClient::clearResources);", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482144383", "createdAt": "2020-09-02T15:05:54Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.server.test.api.HotRodTestClientDriver;\n+import org.infinispan.server.test.api.RestTestClientDriver;\n+import org.infinispan.server.test.api.TestClientXSiteDriver;\n+import org.infinispan.server.test.core.TestClient;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import net.spy.memcached.MemcachedClient;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerTestMethodRule implements TestRule, TestClientXSiteDriver {\n+   private Map<String, TestClient> testClients = new HashMap<>();\n+\n+   public InfinispanXSiteServerTestMethodRule(InfinispanXSiteServerRule serverRule) {\n+      Objects.requireNonNull(serverRule, \"InfinispanServerRule class Rule is null\");\n+      serverRule.getTestServers().forEach((k,v) -> this.testClients.put(k, new TestClient(v)));\n+   }\n+\n+   @Override\n+   public String getMethodName(String siteName) {\n+      return testClients.get(siteName).getMethodName();\n+   }\n+\n+   @Override\n+   public HotRodTestClientDriver hotrod(String siteName) {\n+      return testClients.get(siteName).hotrod();\n+   }\n+\n+   @Override\n+   public RestTestClientDriver rest(String siteName) {\n+      return testClients.get(siteName).rest();\n+   }\n+\n+   @Override\n+   public CounterManager getCounterManager(String siteName) {\n+      return testClients.get(siteName).getCounterManager();\n+   }\n+\n+   // Used for internal test\n+   public MemcachedClient getMemcachedClient(String siteName) {\n+      return testClients.get(siteName).getMemcachedClient();\n+   }\n+\n+   @Override\n+   public Statement apply(Statement base, Description description) {\n+      return new Statement() {\n+         @Override\n+         public void evaluate() throws Throwable {\n+            try {\n+               testClients.forEach((key, testClient) -> {\n+                  testClient.initResources();\n+                  testClient.setMethodName(description.getTestClass().getSimpleName() + \".\" + description.getMethodName());\n+               });\n+               base.evaluate();\n+            } finally {\n+               testClients.forEach((k,testClient) -> testClient.clearResources());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDY2MjI5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/XSite.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowNzoxM1rOHLz0Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxNToxNFrOHPEdLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0NTM3OQ==", "bodyText": "a better name than XSite", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482145379", "createdAt": "2020-09-02T15:07:13Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/XSite.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.infinispan.server.test.junit4;\n+\n+import org.infinispan.server.test.core.AbstractServerConfigBuilder;\n+import org.infinispan.server.test.core.InfinispanServerTestConfiguration;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class XSite extends AbstractServerConfigBuilder<XSite> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwODIxNg==", "bodyText": "https://martinfowler.com/bliki/TwoHardThings.html\nThere are only two hard things in Computer Science: cache invalidation and naming things.\n-- Phil Karlton\n\nI work with both, do you have a suggestion?", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482608216", "createdAt": "2020-09-03T00:02:13Z", "author": {"login": "gustavolira"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/XSite.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.infinispan.server.test.junit4;\n+\n+import org.infinispan.server.test.core.AbstractServerConfigBuilder;\n+import org.infinispan.server.test.core.InfinispanServerTestConfiguration;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class XSite extends AbstractServerConfigBuilder<XSite> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0NTM3OQ=="}, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyMTA0Mg==", "bodyText": "suggestion: remove the class xD\nYou can add a method in org.infinispan.server.test.junit4.InfinispanXSiteServerRuleBuilder:\n   public void addSite(String siteName, InfinispanServerRuleBuilder siteBuilder) {\n      siteBuilder.site(siteName);\n      sites.add(siteBuilder)\n   }", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482821042", "createdAt": "2020-09-03T09:00:31Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/XSite.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.infinispan.server.test.junit4;\n+\n+import org.infinispan.server.test.core.AbstractServerConfigBuilder;\n+import org.infinispan.server.test.core.InfinispanServerTestConfiguration;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class XSite extends AbstractServerConfigBuilder<XSite> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0NTM3OQ=="}, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MzY5Mg==", "bodyText": "dont forget about this^", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r485563692", "createdAt": "2020-09-09T12:15:14Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/XSite.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.infinispan.server.test.junit4;\n+\n+import org.infinispan.server.test.core.AbstractServerConfigBuilder;\n+import org.infinispan.server.test.core.InfinispanServerTestConfiguration;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class XSite extends AbstractServerConfigBuilder<XSite> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0NTM3OQ=="}, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDY3NDgwOnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/XSite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowOTo0OVrOHLz8jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowOTo0OVrOHLz8jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0NzQ3MA==", "bodyText": "can be removed. already exists in the super class.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482147470", "createdAt": "2020-09-02T15:09:49Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/XSite.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.infinispan.server.test.junit4;\n+\n+import org.infinispan.server.test.core.AbstractServerConfigBuilder;\n+import org.infinispan.server.test.core.InfinispanServerTestConfiguration;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class XSite extends AbstractServerConfigBuilder<XSite> {\n+\n+   private String siteName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDcwNjYzOnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/XSite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToxNToxMVrOHL0RDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToxNToxMVrOHL0RDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE1MjcxOA==", "bodyText": "can be in the super class.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482152718", "createdAt": "2020-09-02T15:15:11Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/XSite.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.infinispan.server.test.junit4;\n+\n+import org.infinispan.server.test.core.AbstractServerConfigBuilder;\n+import org.infinispan.server.test.core.InfinispanServerTestConfiguration;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class XSite extends AbstractServerConfigBuilder<XSite> {\n+\n+   private String siteName;\n+\n+   public XSite(String siteName, String configurationFile) {\n+      super(siteName, configurationFile);\n+      this.siteName = siteName;\n+   }\n+\n+   public String getSite() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDcyMDI3OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/XSite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToxNzo1OFrOHL0Zlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToxNzo1OFrOHL0Zlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE1NDkwMg==", "bodyText": "actually, you don't have to expose the createServerTestConfiguration()\nyou could just create a \"build\" method\n  public TestServer build() {\n      return new TestServer(createServerTestConfiguration());\n   }\n\nalso, the TestServer has access to the site name. you could remove the map in InfinispanXSiteServerRuleBuilder", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482154902", "createdAt": "2020-09-02T15:17:58Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/XSite.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.infinispan.server.test.junit4;\n+\n+import org.infinispan.server.test.core.AbstractServerConfigBuilder;\n+import org.infinispan.server.test.core.InfinispanServerTestConfiguration;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class XSite extends AbstractServerConfigBuilder<XSite> {\n+\n+   private String siteName;\n+\n+   public XSite(String siteName, String configurationFile) {\n+      super(siteName, configurationFile);\n+      this.siteName = siteName;\n+   }\n+\n+   public String getSite() {\n+      return siteName;\n+   }\n+\n+   @Override\n+   public InfinispanServerTestConfiguration createServerTestConfiguration() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDczMzc4OnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToyMDo0OVrOHL0hww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToyMDo0OVrOHL0hww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE1Njk5NQ==", "bodyText": "eventuallyEquals not required. You can use the equals()", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482156995", "createdAt": "2020-09-02T15:20:49Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "diffHunk": "@@ -1,54 +1,104 @@\n package org.infinispan.server.functional;\n \n+import static org.infinispan.commons.test.Eventually.eventuallyEquals;\n+import static org.infinispan.server.functional.XSiteIT.LON;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_OFF_HEAP;\n+import static org.infinispan.server.functional.XSiteIT.NYC;\n+import static org.infinispan.server.functional.XSiteIT.NYC_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.security.Common.sync;\n+\n+import java.util.stream.IntStream;\n+\n import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.rest.RestCacheClient;\n+import org.infinispan.client.rest.RestClient;\n import org.infinispan.commons.configuration.XMLStringConfiguration;\n-import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.commons.dataconversion.internal.Json;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteHotRodCacheOperations {\n \n    @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS = XSiteIT.LON_SERVERS;\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS = XSiteIT.NYC_SERVERS;\n-\n-   private static final String LON_CACHE_XML_CONFIG =\n-         \"<infinispan><cache-container>\" +\n-               \"  <distributed-cache-configuration name=\\\"%s\\\">\" +\n-               \"     <backups>\" +\n-               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n-               \"     </backups>\" +\n-               \"  </distributed-cache-configuration>\" +\n-               \"</cache-container></infinispan>\";\n-   @Rule\n-   public InfinispanServerTestMethodRule LON_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.LON_SERVERS);\n+   public static final InfinispanXSiteServerRule SERVERS = XSiteIT.SERVERS;\n \n    @Rule\n-   public InfinispanServerTestMethodRule NYC_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.NYC_SERVERS);\n+   public InfinispanXSiteServerTestMethodRule SERVER_TEST = new InfinispanXSiteServerTestMethodRule(SERVERS);\n \n    @Test\n    public void testHotRodOperations() {\n-      String lonXML = String.format(LON_CACHE_XML_CONFIG, LON_SERVER_TEST.getMethodName());\n+      String lonXML = String.format(XSiteIT.LON_CACHE_XML_CONFIG, SERVER_TEST.getMethodName(LON));\n+      RemoteCache<String, String> lonCache = SERVER_TEST.hotrod(LON)\n+            .withServerConfiguration(new XMLStringConfiguration(lonXML)).create();\n+      RemoteCache<String, String> nycCache = SERVER_TEST.hotrod(NYC).create(); //nyc cache don't backup to lon\n \n-      RemoteCache<String, String> lonCache = LON_SERVER_TEST.hotrod()\n+      insertAndVerifyEntries(lonCache, nycCache, false);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithDifferentCacheName() {\n+      RemoteCache<String, String> lonCache = SERVER_TEST.hotrod(LON)\n+            .createRemoteCacheManager()\n+            .administration()\n+            .createCache(\"lon-cache\", new XMLStringConfiguration(LON_CACHE_CUSTOM_NAME_XML_CONFIG));\n+\n+      RemoteCache<String, String> nycCache = SERVER_TEST.hotrod(NYC)\n+            .createRemoteCacheManager()\n+            .administration()\n+            .createCache(\"nyc-cache\", new XMLStringConfiguration(NYC_CACHE_CUSTOM_NAME_XML_CONFIG));\n+\n+      insertAndVerifyEntries(lonCache, nycCache, true);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithOffHeapSingleFileStore() {\n+      String lonXML = String.format(LON_CACHE_OFF_HEAP, SERVER_TEST.getMethodName(LON));\n+      RemoteCache<Integer, Integer> lonCache = SERVER_TEST.hotrod(LON)\n             .withServerConfiguration(new XMLStringConfiguration(lonXML)).create();\n-      RemoteCache<String, String> nycCache = NYC_SERVER_TEST.hotrod().create(); //must have the same name as LON cache\n+      RemoteCache<Integer, Integer> nycCache = SERVER_TEST.hotrod(NYC).create(); //nyc cache don't backup to lon\n \n-      lonCache.put(\"k1\", \"v1\");\n-      nycCache.put(\"k2\", \"v2\"); //nyc cache don't backup to lon\n+      //Just to make sure that the file store is empty\n+      eventuallyEquals(0, () -> getTotaFileStoreEntries(lonXML));\n+\n+      IntStream.range(0, 300).forEach(i -> {\n+         lonCache.put(i, i);\n+      });\n+\n+      eventuallyEquals(300, () -> nycCache.size());\n+      //Just to verify that file store is properly working\n+      eventuallyEquals(100, () -> getTotaFileStoreEntries(lonXML));\n+   }\n+\n+   //TODO replace with withFlags(Flag.SKIP_CACHE_LOAD).size() with ISPN-12040\n+   private int getTotaFileStoreEntries(String lonXML) {\n+      RestClient restClient = SERVER_TEST.rest(LON)\n+            .withServerConfiguration(new XMLStringConfiguration(lonXML)).get();\n \n-      Eventually.eventuallyEquals(\"v1\", () -> lonCache.get(\"k1\"));\n-      Eventually.eventuallyEquals(\"v1\", () -> nycCache.get(\"k1\"));\n+      RestCacheClient client = restClient.cache(SERVER_TEST.getMethodName(LON));\n+      Json json = Json.read(sync(client.stats()).getBody());\n+      return json.asJsonMap().get(\"current_number_of_entries_in_memory\").asInteger();\n+   }\n+\n+   private void insertAndVerifyEntries(RemoteCache<String, String> lonCache, RemoteCache<String, String> nycCache, boolean allSitesBackup) {\n+      lonCache.put(\"k1\", \"v1\");\n+      nycCache.put(\"k2\", \"v2\");\n \n-      Eventually.eventuallyEquals(null, () -> lonCache.get(\"k2\"));\n-      Eventually.eventuallyEquals(\"v2\", () -> nycCache.get(\"k2\"));\n+      eventuallyEquals(\"v1\", () -> lonCache.get(\"k1\"));\n+      eventuallyEquals(\"v1\", () -> nycCache.get(\"k1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDc0MjYyOnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToyMjo0MFrOHL0nPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToyMjo0MFrOHL0nPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE1ODM5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  eventuallyEquals(300, () -> nycCache.size());\n          \n          \n            \n                  eventuallyEquals(300, nycCache::size);", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482158399", "createdAt": "2020-09-02T15:22:40Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "diffHunk": "@@ -1,54 +1,104 @@\n package org.infinispan.server.functional;\n \n+import static org.infinispan.commons.test.Eventually.eventuallyEquals;\n+import static org.infinispan.server.functional.XSiteIT.LON;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_OFF_HEAP;\n+import static org.infinispan.server.functional.XSiteIT.NYC;\n+import static org.infinispan.server.functional.XSiteIT.NYC_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.security.Common.sync;\n+\n+import java.util.stream.IntStream;\n+\n import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.rest.RestCacheClient;\n+import org.infinispan.client.rest.RestClient;\n import org.infinispan.commons.configuration.XMLStringConfiguration;\n-import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.commons.dataconversion.internal.Json;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteHotRodCacheOperations {\n \n    @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS = XSiteIT.LON_SERVERS;\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS = XSiteIT.NYC_SERVERS;\n-\n-   private static final String LON_CACHE_XML_CONFIG =\n-         \"<infinispan><cache-container>\" +\n-               \"  <distributed-cache-configuration name=\\\"%s\\\">\" +\n-               \"     <backups>\" +\n-               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n-               \"     </backups>\" +\n-               \"  </distributed-cache-configuration>\" +\n-               \"</cache-container></infinispan>\";\n-   @Rule\n-   public InfinispanServerTestMethodRule LON_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.LON_SERVERS);\n+   public static final InfinispanXSiteServerRule SERVERS = XSiteIT.SERVERS;\n \n    @Rule\n-   public InfinispanServerTestMethodRule NYC_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.NYC_SERVERS);\n+   public InfinispanXSiteServerTestMethodRule SERVER_TEST = new InfinispanXSiteServerTestMethodRule(SERVERS);\n \n    @Test\n    public void testHotRodOperations() {\n-      String lonXML = String.format(LON_CACHE_XML_CONFIG, LON_SERVER_TEST.getMethodName());\n+      String lonXML = String.format(XSiteIT.LON_CACHE_XML_CONFIG, SERVER_TEST.getMethodName(LON));\n+      RemoteCache<String, String> lonCache = SERVER_TEST.hotrod(LON)\n+            .withServerConfiguration(new XMLStringConfiguration(lonXML)).create();\n+      RemoteCache<String, String> nycCache = SERVER_TEST.hotrod(NYC).create(); //nyc cache don't backup to lon\n \n-      RemoteCache<String, String> lonCache = LON_SERVER_TEST.hotrod()\n+      insertAndVerifyEntries(lonCache, nycCache, false);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithDifferentCacheName() {\n+      RemoteCache<String, String> lonCache = SERVER_TEST.hotrod(LON)\n+            .createRemoteCacheManager()\n+            .administration()\n+            .createCache(\"lon-cache\", new XMLStringConfiguration(LON_CACHE_CUSTOM_NAME_XML_CONFIG));\n+\n+      RemoteCache<String, String> nycCache = SERVER_TEST.hotrod(NYC)\n+            .createRemoteCacheManager()\n+            .administration()\n+            .createCache(\"nyc-cache\", new XMLStringConfiguration(NYC_CACHE_CUSTOM_NAME_XML_CONFIG));\n+\n+      insertAndVerifyEntries(lonCache, nycCache, true);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithOffHeapSingleFileStore() {\n+      String lonXML = String.format(LON_CACHE_OFF_HEAP, SERVER_TEST.getMethodName(LON));\n+      RemoteCache<Integer, Integer> lonCache = SERVER_TEST.hotrod(LON)\n             .withServerConfiguration(new XMLStringConfiguration(lonXML)).create();\n-      RemoteCache<String, String> nycCache = NYC_SERVER_TEST.hotrod().create(); //must have the same name as LON cache\n+      RemoteCache<Integer, Integer> nycCache = SERVER_TEST.hotrod(NYC).create(); //nyc cache don't backup to lon\n \n-      lonCache.put(\"k1\", \"v1\");\n-      nycCache.put(\"k2\", \"v2\"); //nyc cache don't backup to lon\n+      //Just to make sure that the file store is empty\n+      eventuallyEquals(0, () -> getTotaFileStoreEntries(lonXML));\n+\n+      IntStream.range(0, 300).forEach(i -> {\n+         lonCache.put(i, i);\n+      });\n+\n+      eventuallyEquals(300, () -> nycCache.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDc3ODM5OnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTozMDoyN1rOHL098g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxOTo1OFrOHPEnew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2NDIxMA==", "bodyText": "offheap test is missing", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482164210", "createdAt": "2020-09-02T15:30:27Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "diffHunk": "@@ -8,70 +19,112 @@\n import org.infinispan.client.rest.RestEntity;\n import org.infinispan.client.rest.RestResponse;\n import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.internal.Json;\n import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.infinispan.util.concurrent.CompletionStages;\n-import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteRestCacheOperations {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3NTIyNw==", "bodyText": "@pruivo I added offheap test on XSiteHotRodCacheOperations", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r485275227", "createdAt": "2020-09-09T00:58:53Z", "author": {"login": "gustavolira"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "diffHunk": "@@ -8,70 +19,112 @@\n import org.infinispan.client.rest.RestEntity;\n import org.infinispan.client.rest.RestResponse;\n import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.internal.Json;\n import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.infinispan.util.concurrent.CompletionStages;\n-import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteRestCacheOperations {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2NDIxMA=="}, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2NjMzMQ==", "bodyText": "where?", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r485566331", "createdAt": "2020-09-09T12:19:58Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "diffHunk": "@@ -8,70 +19,112 @@\n import org.infinispan.client.rest.RestEntity;\n import org.infinispan.client.rest.RestResponse;\n import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.internal.Json;\n import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.infinispan.util.concurrent.CompletionStages;\n-import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteRestCacheOperations {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2NDIxMA=="}, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDc4MDcyOnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTozMDo1NVrOHL0_PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTozMDo1NVrOHL0_PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2NDU0MQ==", "bodyText": "can be local", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482164541", "createdAt": "2020-09-02T15:30:55Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "diffHunk": "@@ -8,70 +19,112 @@\n import org.infinispan.client.rest.RestEntity;\n import org.infinispan.client.rest.RestResponse;\n import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.internal.Json;\n import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.infinispan.util.concurrent.CompletionStages;\n-import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteRestCacheOperations {\n \n    @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS = XSiteIT.LON_SERVERS;\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS = XSiteIT.NYC_SERVERS;\n-\n-   private static final String LON_CACHE_XML_CONFIG =\n-         \"<infinispan><cache-container>\" +\n-               \"  <replicated-cache name=\\\"%s\\\">\" +\n-               \"     <backups>\" +\n-               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n-               \"     </backups>\" +\n-               \"  </replicated-cache>\" +\n-               \"</cache-container></infinispan>\";\n-   @Rule\n-   public InfinispanServerTestMethodRule LON_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.LON_SERVERS);\n+   public static final InfinispanXSiteServerRule SERVERS = XSiteIT.SERVERS;\n \n    @Rule\n-   public InfinispanServerTestMethodRule NYC_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.NYC_SERVERS);\n+   public InfinispanXSiteServerTestMethodRule SERVER_TEST = new InfinispanXSiteServerTestMethodRule(SERVERS);\n \n    private static void assertStatus(int status, CompletionStage<RestResponse> stage) {\n-      Assert.assertEquals(status, CompletionStages.join(stage).getStatus());\n+      assertEquals(status, CompletionStages.join(stage).getStatus());\n    }\n \n    private static String bodyOf(CompletionStage<RestResponse> stage) {\n       RestResponse rsp = CompletionStages.join(stage);\n       return rsp.getStatus() == 200 ? rsp.getBody() : null;\n    }\n \n+   private String cacheName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDc4MTQwOnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTozMTowM1rOHL0_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTozMTowM1rOHL0_ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2NDY0Mw==", "bodyText": "can be local", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r482164643", "createdAt": "2020-09-02T15:31:03Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "diffHunk": "@@ -8,70 +19,112 @@\n import org.infinispan.client.rest.RestEntity;\n import org.infinispan.client.rest.RestResponse;\n import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.internal.Json;\n import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.infinispan.util.concurrent.CompletionStages;\n-import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteRestCacheOperations {\n \n    @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS = XSiteIT.LON_SERVERS;\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS = XSiteIT.NYC_SERVERS;\n-\n-   private static final String LON_CACHE_XML_CONFIG =\n-         \"<infinispan><cache-container>\" +\n-               \"  <replicated-cache name=\\\"%s\\\">\" +\n-               \"     <backups>\" +\n-               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n-               \"     </backups>\" +\n-               \"  </replicated-cache>\" +\n-               \"</cache-container></infinispan>\";\n-   @Rule\n-   public InfinispanServerTestMethodRule LON_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.LON_SERVERS);\n+   public static final InfinispanXSiteServerRule SERVERS = XSiteIT.SERVERS;\n \n    @Rule\n-   public InfinispanServerTestMethodRule NYC_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.NYC_SERVERS);\n+   public InfinispanXSiteServerTestMethodRule SERVER_TEST = new InfinispanXSiteServerTestMethodRule(SERVERS);\n \n    private static void assertStatus(int status, CompletionStage<RestResponse> stage) {\n-      Assert.assertEquals(status, CompletionStages.join(stage).getStatus());\n+      assertEquals(status, CompletionStages.join(stage).getStatus());\n    }\n \n    private static String bodyOf(CompletionStage<RestResponse> stage) {\n       RestResponse rsp = CompletionStages.join(stage);\n       return rsp.getStatus() == 200 ? rsp.getBody() : null;\n    }\n \n+   private String cacheName;\n+   private String lonXML;\n+   private String nycXML;\n+   private RestClient lonClient;\n+   private RestClient nycClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a592db32a77f6488fe54ca97468a69900d99e8"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjk1MDU5OnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToyMToxNVrOHPCpzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToyMToxNVrOHPCpzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzNDE1Ng==", "bodyText": "commented code", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r485534156", "createdAt": "2020-09-09T11:21:15Z", "author": {"login": "karesti"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "diffHunk": "@@ -8,70 +19,136 @@\n import org.infinispan.client.rest.RestEntity;\n import org.infinispan.client.rest.RestResponse;\n import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.internal.Json;\n import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.infinispan.util.concurrent.CompletionStages;\n-import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteRestCacheOperations {\n \n    @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS = XSiteIT.LON_SERVERS;\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS = XSiteIT.NYC_SERVERS;\n-\n-   private static final String LON_CACHE_XML_CONFIG =\n-         \"<infinispan><cache-container>\" +\n-               \"  <replicated-cache name=\\\"%s\\\">\" +\n-               \"     <backups>\" +\n-               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n-               \"     </backups>\" +\n-               \"  </replicated-cache>\" +\n-               \"</cache-container></infinispan>\";\n-   @Rule\n-   public InfinispanServerTestMethodRule LON_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.LON_SERVERS);\n+   public static final InfinispanXSiteServerRule SERVERS = XSiteIT.SERVERS;\n \n    @Rule\n-   public InfinispanServerTestMethodRule NYC_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.NYC_SERVERS);\n+   public InfinispanXSiteServerTestMethodRule SERVER_TEST = new InfinispanXSiteServerTestMethodRule(SERVERS);\n \n    private static void assertStatus(int status, CompletionStage<RestResponse> stage) {\n-      Assert.assertEquals(status, CompletionStages.join(stage).getStatus());\n+      assertEquals(status, CompletionStages.join(stage).getStatus());\n    }\n \n    private static String bodyOf(CompletionStage<RestResponse> stage) {\n       RestResponse rsp = CompletionStages.join(stage);\n       return rsp.getStatus() == 200 ? rsp.getBody() : null;\n    }\n \n+   String cacheName;\n+   RestClient lonClient;\n+   RestClient nycClient;\n+   private String lonXML;\n+   private String nycXML;\n+   private RestCacheClient lonCache;\n+   private RestCacheClient nycCache;\n+\n+   @Before\n+   public void setup() {\n+      cacheName = SERVER_TEST.getMethodName();\n+      lonXML = String.format(LON_CACHE_XML_CONFIG, cacheName);\n+      nycXML = String.format(NYC_CACHE_XML_CONFIG, cacheName);\n+      lonClient = SERVER_TEST.rest(LON).get();\n+      nycClient = SERVER_TEST.rest(NYC).get();\n+      lonCache = lonClient.cache(cacheName);\n+      nycCache = nycClient.cache(cacheName);\n+   }\n+\n    @Test\n-   public void testRestOperations() {\n-      String cacheName = LON_SERVER_TEST.getMethodName();\n-      String lonXML = String.format(LON_CACHE_XML_CONFIG, cacheName);\n+   public void testRestOperationsLonToNycBackup() {\n+      assertStatus(200, lonCache.createWithConfiguration(RestEntity.create(MediaType.APPLICATION_XML, lonXML)));\n+      assertStatus(200, nycCache.createWithTemplate(DefaultTemplate.DIST_SYNC.getTemplateName()));\n \n-      RestClient lonClient = LON_SERVER_TEST.rest().get();\n-      RestClient nycClient = NYC_SERVER_TEST.rest().get();\n+      //nyc doesn't backup to lon\n+      insertAndverifyEntries(false);\n+   }\n \n-      RestCacheClient lonCache = lonClient.cache(cacheName);\n-      RestCacheClient nycCache = nycClient.cache(cacheName);\n+   @Test\n+   public void testRestOperationsAllSitesBackup() {\n+      assertStatus(200, lonCache.createWithConfiguration(RestEntity.create(MediaType.APPLICATION_XML, lonXML)));\n+      assertStatus(200, nycCache.createWithConfiguration(RestEntity.create(MediaType.APPLICATION_XML, nycXML)));\n+\n+      insertAndverifyEntries(true);\n+   }\n+\n+   @Test\n+   public void testBackupStatus() {\n       assertStatus(200, lonCache.createWithConfiguration(RestEntity.create(MediaType.APPLICATION_XML, lonXML)));\n       assertStatus(200, nycCache.createWithTemplate(DefaultTemplate.DIST_SYNC.getTemplateName()));\n \n+      assertNull(bodyOf(nycCache.xsiteBackups()));\n+      assertEquals(NUM_SERVERS, Json.read(bodyOf(lonCache.backupStatus(NYC))).asMap().size());\n+      assertNull(bodyOf(nycCache.backupStatus(LON)));\n \n-      assertStatus(204, lonCache.put(\"k1\", \"v1\"));\n-      assertStatus(204, nycCache.put(\"k2\", \"v2\")); //nyc cache don't backup to lon\n+      Json lonXsiteBackups = Json.read(bodyOf(lonCache.xsiteBackups()));\n+      assertEquals(\"online\", lonXsiteBackups.asJsonMap().get(NYC).asString());\n+\n+      CompletionStages.join(lonCache.takeSiteOffline(NYC));\n+      lonXsiteBackups = Json.read(bodyOf(lonCache.xsiteBackups()));\n+      assertTrue(lonXsiteBackups.asJsonMap().get(NYC).asString().contains(\"offline\"));\n+      CompletionStages.join(lonCache.bringSiteOnline(NYC));\n+      lonXsiteBackups = Json.read(bodyOf(lonCache.xsiteBackups()));\n+      assertTrue(lonXsiteBackups.asJsonMap().get(NYC).asString().contains(\"online\"));\n+   }\n+\n+   @Test\n+   public void testWithDifferentCacheNames() {\n+      assertStatus(200, lonCache.createWithConfiguration(RestEntity.create(MediaType.APPLICATION_XML, LON_CACHE_CUSTOM_NAME_XML_CONFIG)));\n+      assertStatus(200, nycCache.createWithConfiguration(RestEntity.create(MediaType.APPLICATION_XML, NYC_CACHE_CUSTOM_NAME_XML_CONFIG)));\n+\n+      insertAndverifyEntries(true);\n+   }\n \n+//   @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730ae9d22e479a6b26cc39b7186d976807e08ce9"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzE0MDA1OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxNToyN1rOHPEdrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzoxOToxM1rOHPSNug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MzgyMg==", "bodyText": "this would make sense to be an Map.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r485563822", "createdAt": "2020-09-09T12:15:27Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.server.test.api.HotRodTestClientDriver;\n+import org.infinispan.server.test.api.RestTestClientDriver;\n+import org.infinispan.server.test.api.TestClientXSiteDriver;\n+import org.infinispan.server.test.core.TestClient;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import net.spy.memcached.MemcachedClient;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerTestMethodRule implements TestRule, TestClientXSiteDriver {\n+   private final List<TestClient> testClients;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730ae9d22e479a6b26cc39b7186d976807e08ce9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NjA4NQ==", "bodyText": "I thought you said to use List instead of Map here, I will revert", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r485646085", "createdAt": "2020-09-09T14:14:31Z", "author": {"login": "gustavolira"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.server.test.api.HotRodTestClientDriver;\n+import org.infinispan.server.test.api.RestTestClientDriver;\n+import org.infinispan.server.test.api.TestClientXSiteDriver;\n+import org.infinispan.server.test.core.TestClient;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import net.spy.memcached.MemcachedClient;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerTestMethodRule implements TestRule, TestClientXSiteDriver {\n+   private final List<TestClient> testClients;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MzgyMg=="}, "originalCommit": {"oid": "730ae9d22e479a6b26cc39b7186d976807e08ce9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4OTExNA==", "bodyText": "you mean this: #8614 (comment)\nit isn't in this class :)", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r485789114", "createdAt": "2020-09-09T17:19:13Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.server.test.api.HotRodTestClientDriver;\n+import org.infinispan.server.test.api.RestTestClientDriver;\n+import org.infinispan.server.test.api.TestClientXSiteDriver;\n+import org.infinispan.server.test.core.TestClient;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import net.spy.memcached.MemcachedClient;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerTestMethodRule implements TestRule, TestClientXSiteDriver {\n+   private final List<TestClient> testClients;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MzgyMg=="}, "originalCommit": {"oid": "730ae9d22e479a6b26cc39b7186d976807e08ce9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzE0Mjc5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxNjoxMlrOHPEfVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxNjoxMlrOHPEfVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2NDI0NA==", "bodyText": "this could be a List. they key is never used and it isn't required.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r485564244", "createdAt": "2020-09-09T12:16:12Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+/**\n+ * Creates a cluster of servers to be used for running multiple tests It performs the following tasks:\n+ * <ul>\n+ * <li>It creates a temporary directory using the test name</li>\n+ * <li>It creates a common configuration directory to be shared by all servers</li>\n+ * <li>It creates a runtime directory structure for each server in the cluster (data, log, lib)</li>\n+ * <li>It populates the configuration directory with multiple certificates (ca.pfx, server.pfx, user1.pfx, user2.pfx)</li>\n+ * </ul>\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerRule implements TestRule {\n+   private final Map<String, TestServer> testServers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730ae9d22e479a6b26cc39b7186d976807e08ce9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzE2NTY5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoyMjozOFrOHPEtNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDo0MTozMlrOHTlxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2Nzc5Nw==", "bodyText": "I missed this... it can be a list as well. and checking for duplicates would be nice\n(after removing the XSite class)\n   public InfinispanXSiteServerRule build() {\n      Set<String> uniqueSiteName = new HashSet<>();\n      List<TestServer> sitesTestServers = sites.stream()\n            .map(InfinispanServerRuleBuilder::build)\n            .map(InfinispanServerRule::getTestServer)\n            .peek(testServer -> {\n               if (!uniqueSiteName.add(testServer.getSiteName())) {\n                  throw new IllegalStateException();\n               }\n            })\n            .collect(Collectors.toList());\n      return new InfinispanXSiteServerRule(sitesTestServers);\n   }", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r485567797", "createdAt": "2020-09-09T12:22:38Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ * Builder for {@link InfinispanXSiteServerRule}.\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ */\n+\n+public class InfinispanXSiteServerRuleBuilder {\n+\n+   private InfinispanXSiteServerRuleBuilder(){}\n+\n+   private final List<XSite> sites = new ArrayList<>();\n+\n+   public static InfinispanXSiteServerRuleBuilder sites(XSite... sites) {\n+      InfinispanXSiteServerRuleBuilder xSiteServerRuleBuilder = new InfinispanXSiteServerRuleBuilder();\n+      Collections.addAll(xSiteServerRuleBuilder.sites, sites);\n+      return xSiteServerRuleBuilder;\n+   }\n+\n+   public InfinispanXSiteServerRule build() {\n+      Map<String, TestServer> testServers = new HashMap<>();\n+      for (XSite xsite: sites) {\n+         testServers.put(xsite.getSite(), xsite.build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730ae9d22e479a6b26cc39b7186d976807e08ce9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMwMzgwMQ==", "bodyText": "@pruivo done", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r490303801", "createdAt": "2020-09-17T14:41:32Z", "author": {"login": "gustavolira"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ * Builder for {@link InfinispanXSiteServerRule}.\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ */\n+\n+public class InfinispanXSiteServerRuleBuilder {\n+\n+   private InfinispanXSiteServerRuleBuilder(){}\n+\n+   private final List<XSite> sites = new ArrayList<>();\n+\n+   public static InfinispanXSiteServerRuleBuilder sites(XSite... sites) {\n+      InfinispanXSiteServerRuleBuilder xSiteServerRuleBuilder = new InfinispanXSiteServerRuleBuilder();\n+      Collections.addAll(xSiteServerRuleBuilder.sites, sites);\n+      return xSiteServerRuleBuilder;\n+   }\n+\n+   public InfinispanXSiteServerRule build() {\n+      Map<String, TestServer> testServers = new HashMap<>();\n+      for (XSite xsite: sites) {\n+         testServers.put(xsite.getSite(), xsite.build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2Nzc5Nw=="}, "originalCommit": {"oid": "730ae9d22e479a6b26cc39b7186d976807e08ce9"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTE1ODY3OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit5/src/test/java/org/infinispan/server/test/junit5/InfinispanXSiteServerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzozMzozOFrOHRrJhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDozNjowNVrOHTlc4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NDc5MQ==", "bodyText": "@karesti does it look good?", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r488294791", "createdAt": "2020-09-14T23:33:38Z", "author": {"login": "gustavolira"}, "path": "server/testdriver/junit5/src/test/java/org/infinispan/server/test/junit5/InfinispanXSiteServerTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.infinispan.server.test.junit5;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.commons.configuration.XMLStringConfiguration;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+/**\n+ * @author Gustavo Lira\n+ * @since 12\n+ */\n+public class InfinispanXSiteServerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7ce34d6a9e14091874ad4214660b39df0fc3cda"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5ODU5Mg==", "bodyText": "yes", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r490298592", "createdAt": "2020-09-17T14:36:05Z", "author": {"login": "karesti"}, "path": "server/testdriver/junit5/src/test/java/org/infinispan/server/test/junit5/InfinispanXSiteServerTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.infinispan.server.test.junit5;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.commons.configuration.XMLStringConfiguration;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+/**\n+ * @author Gustavo Lira\n+ * @since 12\n+ */\n+public class InfinispanXSiteServerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NDc5MQ=="}, "originalCommit": {"oid": "f7ce34d6a9e14091874ad4214660b39df0fc3cda"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTA1MjM0OnYy", "diffSide": "RIGHT", "path": "build-configuration/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjo0Nzo1N1rOHVOTyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzoyMTowMlrOHVPqkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAxNjU4Ng==", "bodyText": "Should we downgrade ?", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492016586", "createdAt": "2020-09-21T12:47:57Z", "author": {"login": "diegolovison"}, "path": "build-configuration/pom.xml", "diffHunk": "@@ -213,7 +213,7 @@\n       <version.maven.resources>3.1.0</version.maven.resources>\n       <version.maven.shade>3.2.3</version.maven.shade>\n       <version.maven.source>3.2.0</version.maven.source>\n-      <version.maven.surefire>3.0.0-M5</version.maven.surefire>\n+      <version.maven.surefire>3.0.0-M4</version.maven.surefire>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7ce34d6a9e14091874ad4214660b39df0fc3cda"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAyOTM2Mg==", "bodyText": "Should we downgrade ?\n\nyes, @danberindei updated this version which broke some tests", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492029362", "createdAt": "2020-09-21T13:06:35Z", "author": {"login": "gustavolira"}, "path": "build-configuration/pom.xml", "diffHunk": "@@ -213,7 +213,7 @@\n       <version.maven.resources>3.1.0</version.maven.resources>\n       <version.maven.shade>3.2.3</version.maven.shade>\n       <version.maven.source>3.2.0</version.maven.source>\n-      <version.maven.surefire>3.0.0-M5</version.maven.surefire>\n+      <version.maven.surefire>3.0.0-M4</version.maven.surefire>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAxNjU4Ng=="}, "originalCommit": {"oid": "f7ce34d6a9e14091874ad4214660b39df0fc3cda"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAyOTc3Mw==", "bodyText": "Dan already fixed the issue. don't downgrade.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492029773", "createdAt": "2020-09-21T13:07:17Z", "author": {"login": "pruivo"}, "path": "build-configuration/pom.xml", "diffHunk": "@@ -213,7 +213,7 @@\n       <version.maven.resources>3.1.0</version.maven.resources>\n       <version.maven.shade>3.2.3</version.maven.shade>\n       <version.maven.source>3.2.0</version.maven.source>\n-      <version.maven.surefire>3.0.0-M5</version.maven.surefire>\n+      <version.maven.surefire>3.0.0-M4</version.maven.surefire>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAxNjU4Ng=="}, "originalCommit": {"oid": "f7ce34d6a9e14091874ad4214660b39df0fc3cda"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAzODgwMQ==", "bodyText": "@pruivo fixed!", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492038801", "createdAt": "2020-09-21T13:21:02Z", "author": {"login": "gustavolira"}, "path": "build-configuration/pom.xml", "diffHunk": "@@ -213,7 +213,7 @@\n       <version.maven.resources>3.1.0</version.maven.resources>\n       <version.maven.shade>3.2.3</version.maven.shade>\n       <version.maven.source>3.2.0</version.maven.source>\n-      <version.maven.surefire>3.0.0-M5</version.maven.surefire>\n+      <version.maven.surefire>3.0.0-M4</version.maven.surefire>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAxNjU4Ng=="}, "originalCommit": {"oid": "f7ce34d6a9e14091874ad4214660b39df0fc3cda"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTIyMzEzOnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzoyNzoyNlrOHVP8Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzo1ODoxM1rOHVRWMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA0MzMxNA==", "bodyText": "Should we have a description of why the exception?", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492043314", "createdAt": "2020-09-21T13:27:26Z", "author": {"login": "diegolovison"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ * Builder for {@link InfinispanXSiteServerRule}.\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ */\n+\n+public class InfinispanXSiteServerRuleBuilder {\n+\n+   private static List<InfinispanServerRuleBuilder> sites = new ArrayList<>();\n+\n+   public InfinispanXSiteServerRuleBuilder addSite(String siteName, InfinispanServerRuleBuilder siteBuilder) {\n+      siteBuilder.site(siteName);\n+      sites.add(siteBuilder);\n+      return this;\n+   }\n+\n+   public InfinispanXSiteServerRule build() {\n+      Set<String> uniqueSiteName = new HashSet<>();\n+      List<TestServer> sitesTestServers = sites.stream()\n+            .map(InfinispanServerRuleBuilder::build)\n+            .map(InfinispanServerRule::getTestServer)\n+            .peek(testServer -> {\n+               if (!uniqueSiteName.add(testServer.getSiteName())) {\n+                  throw new IllegalStateException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98ebf6a9ec5d19d826d9f0e28251d96d0c6edfaa"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA2NjM1NQ==", "bodyText": "@diegolovison done", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492066355", "createdAt": "2020-09-21T13:58:13Z", "author": {"login": "gustavolira"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ * Builder for {@link InfinispanXSiteServerRule}.\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ */\n+\n+public class InfinispanXSiteServerRuleBuilder {\n+\n+   private static List<InfinispanServerRuleBuilder> sites = new ArrayList<>();\n+\n+   public InfinispanXSiteServerRuleBuilder addSite(String siteName, InfinispanServerRuleBuilder siteBuilder) {\n+      siteBuilder.site(siteName);\n+      sites.add(siteBuilder);\n+      return this;\n+   }\n+\n+   public InfinispanXSiteServerRule build() {\n+      Set<String> uniqueSiteName = new HashSet<>();\n+      List<TestServer> sitesTestServers = sites.stream()\n+            .map(InfinispanServerRuleBuilder::build)\n+            .map(InfinispanServerRule::getTestServer)\n+            .peek(testServer -> {\n+               if (!uniqueSiteName.add(testServer.getSiteName())) {\n+                  throw new IllegalStateException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA0MzMxNA=="}, "originalCommit": {"oid": "98ebf6a9ec5d19d826d9f0e28251d96d0c6edfaa"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTIzMTUzOnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzoyOTozNFrOHVQB0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzo0NjoxMFrOHVQyrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA0NDc1NA==", "bodyText": "should we remove the code commented?", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492044754", "createdAt": "2020-09-21T13:29:34Z", "author": {"login": "diegolovison"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "diffHunk": "@@ -1,54 +1,110 @@\n package org.infinispan.server.functional;\n \n+import static org.infinispan.server.functional.XSiteIT.LON;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_OFF_HEAP;\n+import static org.infinispan.server.functional.XSiteIT.NYC;\n+import static org.infinispan.server.functional.XSiteIT.NYC_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.security.Common.sync;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.stream.IntStream;\n+\n import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.rest.RestCacheClient;\n+import org.infinispan.client.rest.RestClient;\n import org.infinispan.commons.configuration.XMLStringConfiguration;\n-import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.commons.dataconversion.internal.Json;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteHotRodCacheOperations {\n \n    @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS = XSiteIT.LON_SERVERS;\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS = XSiteIT.NYC_SERVERS;\n-\n-   private static final String LON_CACHE_XML_CONFIG =\n-         \"<infinispan><cache-container>\" +\n-               \"  <distributed-cache-configuration name=\\\"%s\\\">\" +\n-               \"     <backups>\" +\n-               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n-               \"     </backups>\" +\n-               \"  </distributed-cache-configuration>\" +\n-               \"</cache-container></infinispan>\";\n-   @Rule\n-   public InfinispanServerTestMethodRule LON_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.LON_SERVERS);\n+   public static final InfinispanXSiteServerRule SERVERS = XSiteIT.SERVERS;\n \n    @Rule\n-   public InfinispanServerTestMethodRule NYC_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.NYC_SERVERS);\n+   public InfinispanXSiteServerTestMethodRule SERVER_TEST = new InfinispanXSiteServerTestMethodRule(SERVERS);\n+\n+//   @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98ebf6a9ec5d19d826d9f0e28251d96d0c6edfaa"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1NzI2MQ==", "bodyText": "@diegolovison fixed, thanks for catch that", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492057261", "createdAt": "2020-09-21T13:46:10Z", "author": {"login": "gustavolira"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "diffHunk": "@@ -1,54 +1,110 @@\n package org.infinispan.server.functional;\n \n+import static org.infinispan.server.functional.XSiteIT.LON;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_OFF_HEAP;\n+import static org.infinispan.server.functional.XSiteIT.NYC;\n+import static org.infinispan.server.functional.XSiteIT.NYC_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.security.Common.sync;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.stream.IntStream;\n+\n import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.rest.RestCacheClient;\n+import org.infinispan.client.rest.RestClient;\n import org.infinispan.commons.configuration.XMLStringConfiguration;\n-import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.commons.dataconversion.internal.Json;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteHotRodCacheOperations {\n \n    @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS = XSiteIT.LON_SERVERS;\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS = XSiteIT.NYC_SERVERS;\n-\n-   private static final String LON_CACHE_XML_CONFIG =\n-         \"<infinispan><cache-container>\" +\n-               \"  <distributed-cache-configuration name=\\\"%s\\\">\" +\n-               \"     <backups>\" +\n-               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n-               \"     </backups>\" +\n-               \"  </distributed-cache-configuration>\" +\n-               \"</cache-container></infinispan>\";\n-   @Rule\n-   public InfinispanServerTestMethodRule LON_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.LON_SERVERS);\n+   public static final InfinispanXSiteServerRule SERVERS = XSiteIT.SERVERS;\n \n    @Rule\n-   public InfinispanServerTestMethodRule NYC_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.NYC_SERVERS);\n+   public InfinispanXSiteServerTestMethodRule SERVER_TEST = new InfinispanXSiteServerTestMethodRule(SERVERS);\n+\n+//   @Before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA0NDc1NA=="}, "originalCommit": {"oid": "98ebf6a9ec5d19d826d9f0e28251d96d0c6edfaa"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzA1ODg2OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractServerConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDozNzo1MVrOHV0CMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDozNzo1MVrOHV0CMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzNDY3Mw==", "bodyText": "remove. unused.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492634673", "createdAt": "2020-09-22T10:37:51Z", "author": {"login": "pruivo"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractServerConfigBuilder.java", "diffHunk": "@@ -40,7 +40,12 @@ protected AbstractServerConfigBuilder(String configurationFile, boolean defaultF\n       }\n    }\n \n-   protected InfinispanServerTestConfiguration createServerTestConfiguration() {\n+   protected AbstractServerConfigBuilder(String siteName, String configurationFile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzA2MDY5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractServerConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDozODoyNlrOHV0DTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDozODoyNlrOHV0DTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzNDk1Nw==", "bodyText": "remove. unused.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492634957", "createdAt": "2020-09-22T10:38:26Z", "author": {"login": "pruivo"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractServerConfigBuilder.java", "diffHunk": "@@ -102,6 +107,10 @@ public T site(String site) {\n       return (T) this;\n    }\n \n+   public String getSite() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzA4OTM4OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo0Nzo1M1rOHV0UrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo0Nzo1M1rOHV0UrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzOTQwNA==", "bodyText": "remove, unused.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492639404", "createdAt": "2020-09-22T10:47:53Z", "author": {"login": "pruivo"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestClient.java", "diffHunk": "@@ -112,4 +112,7 @@ public String getMethodName(String qualifier) {\n    public MemcachedClient getMemcachedClient() {\n       return registerResource(testServer.newMemcachedClient()).getClient();\n    }\n+   public String getSite() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzA5NTE1OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo0OTo0MlrOHV0YHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo0OTo0MlrOHV0YHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0MDI4Ng==", "bodyText": "remove, unused", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492640286", "createdAt": "2020-09-22T10:49:42Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+/**\n+ * Creates a cluster of servers to be used for running multiple tests It performs the following tasks:\n+ * <ul>\n+ * <li>It creates a temporary directory using the test name</li>\n+ * <li>It creates a common configuration directory to be shared by all servers</li>\n+ * <li>It creates a runtime directory structure for each server in the cluster (data, log, lib)</li>\n+ * <li>It populates the configuration directory with multiple certificates (ca.pfx, server.pfx, user1.pfx, user2.pfx)</li>\n+ * </ul>\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerRule implements TestRule {\n+   private final List<TestServer> testServers;\n+   private final List<Consumer<File>> configurationEnhancers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzA5NzQ4OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo1MDoyNFrOHV0ZlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo1MDoyNFrOHV0ZlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0MDY2MQ==", "bodyText": "This description doesn't sound right.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492640661", "createdAt": "2020-09-22T10:50:24Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+/**\n+ * Creates a cluster of servers to be used for running multiple tests It performs the following tasks:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzExOTY2OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo1NTo0M1rOHV0mnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo1NTo0M1rOHV0mnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0Mzk5Nw==", "bodyText": "this souldn't be static!!", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492643997", "createdAt": "2020-09-22T10:55:43Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ * Builder for {@link InfinispanXSiteServerRule}.\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ */\n+\n+public class InfinispanXSiteServerRuleBuilder {\n+\n+   private static List<InfinispanServerRuleBuilder> sites = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzEyMjM5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo1NjozNVrOHV0oSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo1NjozNVrOHV0oSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0NDQyNw==", "bodyText": "tell what is the site name.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492644427", "createdAt": "2020-09-22T10:56:35Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ * Builder for {@link InfinispanXSiteServerRule}.\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ */\n+\n+public class InfinispanXSiteServerRuleBuilder {\n+\n+   private static List<InfinispanServerRuleBuilder> sites = new ArrayList<>();\n+\n+   public InfinispanXSiteServerRuleBuilder addSite(String siteName, InfinispanServerRuleBuilder siteBuilder) {\n+      siteBuilder.site(siteName);\n+      sites.add(siteBuilder);\n+      return this;\n+   }\n+\n+   public InfinispanXSiteServerRule build() {\n+      Set<String> uniqueSiteName = new HashSet<>();\n+      List<TestServer> sitesTestServers = sites.stream()\n+            .map(InfinispanServerRuleBuilder::build)\n+            .map(InfinispanServerRule::getTestServer)\n+            .peek(testServer -> {\n+               if (!uniqueSiteName.add(testServer.getSiteName())) {\n+                  throw new IllegalStateException(\"Site name already set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzEyNjk1OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo1Nzo1NFrOHV0rBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo1Nzo1NFrOHV0rBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0NTEyNQ==", "bodyText": "can be simplified: return testClients.values().iterator().next().getMethodName();", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492645125", "createdAt": "2020-09-22T10:57:54Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerTestMethodRule.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.server.test.api.HotRodTestClientDriver;\n+import org.infinispan.server.test.api.RestTestClientDriver;\n+import org.infinispan.server.test.api.TestClientXSiteDriver;\n+import org.infinispan.server.test.core.TestClient;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import net.spy.memcached.MemcachedClient;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerTestMethodRule implements TestRule, TestClientXSiteDriver {\n+   private final Map<String, TestClient> testClients = new HashMap<>();\n+\n+   public InfinispanXSiteServerTestMethodRule(InfinispanXSiteServerRule serverRule) {\n+      Objects.requireNonNull(serverRule, \"InfinispanServerRule class Rule is null\");\n+      serverRule.getTestServers().forEach((it) -> this.testClients.put(it.getSiteName(), new TestClient(it)));\n+   }\n+\n+   @Override\n+   //All of methodName will be the same\n+   public String getMethodName() {\n+      return testClients.values()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzEzMDgzOnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtension.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo1OTowNFrOHV0tNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo1OTowNFrOHV0tNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0NTY4NQ==", "bodyText": "javadoc needs update.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492645685", "createdAt": "2020-09-22T10:59:04Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtension.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.infinispan.server.test.junit5;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.server.test.api.HotRodTestClientDriver;\n+import org.infinispan.server.test.api.RestTestClientDriver;\n+import org.infinispan.server.test.api.TestClientXSiteDriver;\n+import org.infinispan.server.test.core.TestClient;\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+/**\n+ * JUnit 5 {@link 'https://junit.org/junit5'} extension. <br/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzEzNDkyOnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtension.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTowMDowOVrOHV0vgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTowMDowOVrOHV0vgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0NjI3Mg==", "bodyText": "remove. unused", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492646272", "createdAt": "2020-09-22T11:00:09Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtension.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.infinispan.server.test.junit5;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.server.test.api.HotRodTestClientDriver;\n+import org.infinispan.server.test.api.RestTestClientDriver;\n+import org.infinispan.server.test.api.TestClientXSiteDriver;\n+import org.infinispan.server.test.core.TestClient;\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+/**\n+ * JUnit 5 {@link 'https://junit.org/junit5'} extension. <br/>\n+ *\n+ * The extension can be used in the most simple way that will work in container mode with a standalone server running.\n+ *\n+ * {@code\n+ *\n+ *    static final InfinispanServerExtensionBuilder LON_SERVER = InfinispanServerExtensionBuilder.config(\"XSiteServerTest.xml\").numServers(NUM_SERVERS);\n+ *    static final InfinispanServerExtensionBuilder NYC_SERVER = InfinispanServerExtensionBuilder.config(\"XSiteServerTest.xml\").numServers(NUM_SERVERS);\n+ *\n+ *    @RegisterExtension\n+ *    static InfinispanXSiteServerExtension SERVER_TEST = new InfinispanXSiteServerExtensionBuilder()\n+ *          .addSite(LON, LON_SERVER)\n+ *          .addSite(NYC, NYC_SERVER)\n+ *          .build();\n+ * }\n+ *\n+ * @author Gustavo Lira\n+ * @since 12\n+ */\n+public class InfinispanXSiteServerExtension implements\n+      TestClientXSiteDriver,\n+      BeforeAllCallback,\n+      BeforeEachCallback,\n+      AfterEachCallback,\n+      AfterAllCallback {\n+\n+   private final List<TestServer> testServers;\n+   private final List<Consumer<File>> configurationEnhancers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzEzNTQ4OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtension.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTowMDoxOVrOHV0v1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTowMDoxOVrOHV0v1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0NjM1Ng==", "bodyText": "remove. unused.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492646356", "createdAt": "2020-09-22T11:00:19Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtension.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.infinispan.server.test.junit5;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.server.test.api.HotRodTestClientDriver;\n+import org.infinispan.server.test.api.RestTestClientDriver;\n+import org.infinispan.server.test.api.TestClientXSiteDriver;\n+import org.infinispan.server.test.core.TestClient;\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+/**\n+ * JUnit 5 {@link 'https://junit.org/junit5'} extension. <br/>\n+ *\n+ * The extension can be used in the most simple way that will work in container mode with a standalone server running.\n+ *\n+ * {@code\n+ *\n+ *    static final InfinispanServerExtensionBuilder LON_SERVER = InfinispanServerExtensionBuilder.config(\"XSiteServerTest.xml\").numServers(NUM_SERVERS);\n+ *    static final InfinispanServerExtensionBuilder NYC_SERVER = InfinispanServerExtensionBuilder.config(\"XSiteServerTest.xml\").numServers(NUM_SERVERS);\n+ *\n+ *    @RegisterExtension\n+ *    static InfinispanXSiteServerExtension SERVER_TEST = new InfinispanXSiteServerExtensionBuilder()\n+ *          .addSite(LON, LON_SERVER)\n+ *          .addSite(NYC, NYC_SERVER)\n+ *          .build();\n+ * }\n+ *\n+ * @author Gustavo Lira\n+ * @since 12\n+ */\n+public class InfinispanXSiteServerExtension implements\n+      TestClientXSiteDriver,\n+      BeforeAllCallback,\n+      BeforeEachCallback,\n+      AfterEachCallback,\n+      AfterAllCallback {\n+\n+   private final List<TestServer> testServers;\n+   private final List<Consumer<File>> configurationEnhancers = new ArrayList<>();\n+   private final Map<String, TestClient> testClients = new HashMap<>();\n+   private String methodName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzEzNzg2OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtension.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTowMTowMlrOHV0xQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTowMTowMlrOHV0xQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0NjcyMg==", "bodyText": "simplify: return testClients.values().iterator().next().getMethodName();", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492646722", "createdAt": "2020-09-22T11:01:02Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtension.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.infinispan.server.test.junit5;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.server.test.api.HotRodTestClientDriver;\n+import org.infinispan.server.test.api.RestTestClientDriver;\n+import org.infinispan.server.test.api.TestClientXSiteDriver;\n+import org.infinispan.server.test.core.TestClient;\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+/**\n+ * JUnit 5 {@link 'https://junit.org/junit5'} extension. <br/>\n+ *\n+ * The extension can be used in the most simple way that will work in container mode with a standalone server running.\n+ *\n+ * {@code\n+ *\n+ *    static final InfinispanServerExtensionBuilder LON_SERVER = InfinispanServerExtensionBuilder.config(\"XSiteServerTest.xml\").numServers(NUM_SERVERS);\n+ *    static final InfinispanServerExtensionBuilder NYC_SERVER = InfinispanServerExtensionBuilder.config(\"XSiteServerTest.xml\").numServers(NUM_SERVERS);\n+ *\n+ *    @RegisterExtension\n+ *    static InfinispanXSiteServerExtension SERVER_TEST = new InfinispanXSiteServerExtensionBuilder()\n+ *          .addSite(LON, LON_SERVER)\n+ *          .addSite(NYC, NYC_SERVER)\n+ *          .build();\n+ * }\n+ *\n+ * @author Gustavo Lira\n+ * @since 12\n+ */\n+public class InfinispanXSiteServerExtension implements\n+      TestClientXSiteDriver,\n+      BeforeAllCallback,\n+      BeforeEachCallback,\n+      AfterEachCallback,\n+      AfterAllCallback {\n+\n+   private final List<TestServer> testServers;\n+   private final List<Consumer<File>> configurationEnhancers = new ArrayList<>();\n+   private final Map<String, TestClient> testClients = new HashMap<>();\n+   private String methodName;\n+\n+   public InfinispanXSiteServerExtension(List<TestServer> testServers) {\n+      this.testServers = testServers;\n+   }\n+\n+   @Override\n+   public void beforeAll(ExtensionContext extensionContext) {\n+      String testName = extensionContext.getRequiredTestClass().getName();\n+\n+      testServers.forEach((it) -> {\n+         // Don't manage the server when a test is using the same InfinispanServerRule instance as the parent suite\n+         boolean manageServer = !it.isDriverInitialized();\n+         if (manageServer) {\n+            it.initServerDriver();\n+            it.beforeListeners();\n+            it.getDriver().prepare(testName);\n+\n+            configurationEnhancers.forEach(c -> c.accept(it.getDriver().getConfDir()));\n+\n+            it.getDriver().start(testName);\n+         }\n+      });\n+   }\n+\n+   @Override\n+   public void beforeEach(ExtensionContext extensionContext) {\n+      testServers.forEach((it) -> {\n+         TestClient testClient = new TestClient(it);\n+         testClient.initResources();\n+         testClients.put(it.getSiteName(), testClient);\n+      });\n+   }\n+\n+   @Override\n+   public void afterEach(ExtensionContext extensionContext) {\n+      testClients.values().forEach(TestClient::clearResources);\n+   }\n+\n+   @Override\n+   public void afterAll(ExtensionContext extensionContext) {\n+      String testName = extensionContext.getRequiredTestClass().getName();\n+      testServers.forEach((it) -> {\n+         if (it.isDriverInitialized()) {\n+            it.afterListeners();\n+            it.getDriver().stop(testName);\n+         }\n+      });\n+   }\n+\n+   @Override\n+   public HotRodTestClientDriver hotrod(String siteName) {\n+      return testClients.get(siteName).hotrod();\n+   }\n+\n+   @Override\n+   public RestTestClientDriver rest(String siteName) {\n+      return testClients.get(siteName).rest();\n+   }\n+\n+   @Override\n+   //All of methodName will be the same\n+   public String getMethodName() {\n+      return testClients.values()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzE0NTg2OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtensionBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTowMzo0MlrOHV02QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTowMzo0MlrOHV02QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0ODAwMA==", "bodyText": "cannot be static", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492648000", "createdAt": "2020-09-22T11:03:42Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtensionBuilder.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.infinispan.server.test.junit5;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ * Infinispan Server XSite Extension Builder\n+ *\n+ * @author Gustavo Lira\n+ * @since 12\n+ */\n+public class InfinispanXSiteServerExtensionBuilder {\n+\n+   private static List<InfinispanServerExtensionBuilder> sites = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzE2OTczOnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtensionBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToxMTowNFrOHV1Ekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToxMTowNFrOHV1Ekw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1MTY2Nw==", "bodyText": "nit: why 2 map() invocation?", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492651667", "createdAt": "2020-09-22T11:11:04Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtensionBuilder.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.infinispan.server.test.junit5;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ * Infinispan Server XSite Extension Builder\n+ *\n+ * @author Gustavo Lira\n+ * @since 12\n+ */\n+public class InfinispanXSiteServerExtensionBuilder {\n+\n+   private static List<InfinispanServerExtensionBuilder> sites = new ArrayList<>();\n+\n+   public InfinispanXSiteServerExtensionBuilder addSite(String siteName, InfinispanServerExtensionBuilder siteBuilder) {\n+      siteBuilder.site(siteName);\n+      sites.add(siteBuilder);\n+      return this;\n+   }\n+\n+   public InfinispanXSiteServerExtension build() {\n+      List<TestServer> testServers = sites.stream()\n+            .map(InfinispanServerExtensionBuilder::createServerTestConfiguration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzIyNTYyOnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToyODo1N1rOHV1mKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToyODo1N1rOHV1mKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2MDI2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  IntStream.range(0, 300).forEach(i -> {\n          \n          \n            \n                     lonCache.put(i, i);\n          \n          \n            \n                  });\n          \n          \n            \n                  IntStream.range(0, 300).forEach(i -> lonCache.put(i, i));", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492660267", "createdAt": "2020-09-22T11:28:57Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "diffHunk": "@@ -1,54 +1,103 @@\n package org.infinispan.server.functional;\n \n+import static org.infinispan.server.functional.XSiteIT.LON;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_OFF_HEAP;\n+import static org.infinispan.server.functional.XSiteIT.NYC;\n+import static org.infinispan.server.functional.XSiteIT.NYC_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.security.Common.sync;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.stream.IntStream;\n+\n import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.rest.RestCacheClient;\n+import org.infinispan.client.rest.RestClient;\n import org.infinispan.commons.configuration.XMLStringConfiguration;\n-import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.commons.dataconversion.internal.Json;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteHotRodCacheOperations {\n \n    @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS = XSiteIT.LON_SERVERS;\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS = XSiteIT.NYC_SERVERS;\n-\n-   private static final String LON_CACHE_XML_CONFIG =\n-         \"<infinispan><cache-container>\" +\n-               \"  <distributed-cache-configuration name=\\\"%s\\\">\" +\n-               \"     <backups>\" +\n-               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n-               \"     </backups>\" +\n-               \"  </distributed-cache-configuration>\" +\n-               \"</cache-container></infinispan>\";\n-   @Rule\n-   public InfinispanServerTestMethodRule LON_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.LON_SERVERS);\n+   public static final InfinispanXSiteServerRule SERVERS = XSiteIT.SERVERS;\n \n    @Rule\n-   public InfinispanServerTestMethodRule NYC_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.NYC_SERVERS);\n+   public InfinispanXSiteServerTestMethodRule SERVER_TEST = new InfinispanXSiteServerTestMethodRule(SERVERS);\n \n    @Test\n    public void testHotRodOperations() {\n-      String lonXML = String.format(LON_CACHE_XML_CONFIG, LON_SERVER_TEST.getMethodName());\n+      String lonXML = String.format(XSiteIT.LON_CACHE_XML_CONFIG, SERVER_TEST.getMethodName());\n+      RemoteCache<String, String> lonCache = SERVER_TEST.hotrod(LON)\n+            .withServerConfiguration(new XMLStringConfiguration(lonXML)).create();\n+      RemoteCache<String, String> nycCache = SERVER_TEST.hotrod(NYC).create(); //nyc cache don't backup to lon\n \n-      RemoteCache<String, String> lonCache = LON_SERVER_TEST.hotrod()\n+      insertAndVerifyEntries(lonCache, nycCache, false);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithDifferentCacheName() {\n+      RemoteCache<String, String> lonCache = SERVER_TEST.hotrod(LON)\n+            .createRemoteCacheManager()\n+            .administration()\n+            .createCache(\"lon-cache\", new XMLStringConfiguration(LON_CACHE_CUSTOM_NAME_XML_CONFIG));\n+\n+      RemoteCache<String, String> nycCache = SERVER_TEST.hotrod(NYC)\n+            .createRemoteCacheManager()\n+            .administration()\n+            .createCache(\"nyc-cache\", new XMLStringConfiguration(NYC_CACHE_CUSTOM_NAME_XML_CONFIG));\n+\n+      insertAndVerifyEntries(lonCache, nycCache, true);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithOffHeapSingleFileStore() {\n+      String lonXML = String.format(LON_CACHE_OFF_HEAP, SERVER_TEST.getMethodName());\n+      RemoteCache<Integer, Integer> lonCache = SERVER_TEST.hotrod(LON)\n             .withServerConfiguration(new XMLStringConfiguration(lonXML)).create();\n-      RemoteCache<String, String> nycCache = NYC_SERVER_TEST.hotrod().create(); //must have the same name as LON cache\n+      RemoteCache<Integer, Integer> nycCache = SERVER_TEST.hotrod(NYC).create(); //nyc cache don't backup to lon\n \n-      lonCache.put(\"k1\", \"v1\");\n-      nycCache.put(\"k2\", \"v2\"); //nyc cache don't backup to lon\n+      //Just to make sure that the file store is empty\n+      assertEquals(0, getTotaFileStoreEntries(lonXML));\n+\n+      IntStream.range(0, 300).forEach(i -> {\n+         lonCache.put(i, i);\n+      });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzIyNzgxOnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToyOTozNlrOHV1ncw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToyOTozNlrOHV1ncw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2MDU5NQ==", "bodyText": "format", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492660595", "createdAt": "2020-09-22T11:29:36Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteIT.java", "diffHunk": "@@ -19,16 +20,75 @@\n       XSiteRestCacheOperations.class\n })\n public class XSiteIT {\n-   @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS =\n-         InfinispanServerRuleBuilder.config(\"configuration/XSiteServerTest.xml\")\n-               .numServers(3)\n-               .site(InfinispanServerTestConfiguration.LON)\n-               .build();\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS =\n-         InfinispanServerRuleBuilder.config(\"configuration/XSiteServerTest.xml\")\n-               .numServers(3)\n-               .site(InfinispanServerTestConfiguration.NYC)\n-               .build();\n+\n+   protected static final String LON = \"LON\";\n+   protected static final String NYC = \"NYC\";\n+   protected static final int NUM_SERVERS = 3;\n+   protected static final String LON_CACHE_XML_CONFIG =\n+         \"<infinispan><cache-container>\" +\n+               \"  <replicated-cache name=\\\"%s\\\">\" +\n+               \"     <backups>\" +\n+               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n+               \"     </backups>\" +\n+               \"  </replicated-cache>\" +\n+               \"</cache-container></infinispan>\";\n+\n+   protected static final String NYC_CACHE_XML_CONFIG =\n+         \"<infinispan><cache-container>\" +\n+               \"  <replicated-cache name=\\\"%s\\\">\" +\n+               \"     <backups>\" +\n+               \"        <backup site=\\\"LON\\\" strategy=\\\"ASYNC\\\"/>\" +\n+               \"     </backups>\" +\n+               \"  </replicated-cache>\" +\n+               \"</cache-container></infinispan>\";\n+\n+   protected static final String LON_CACHE_CUSTOM_NAME_XML_CONFIG =\n+         \"<infinispan><cache-container>\" +\n+               \"  <replicated-cache name=\\\"lon-cache\\\">\" +\n+               \"     <backups>\" +\n+               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n+               \"     </backups>\" +\n+               \"     <backup-for remote-cache=\\\"nyc-cache\\\" remote-site=\\\"NYC\\\" />\" +\n+               \"  </replicated-cache>\" +\n+               \"</cache-container></infinispan>\";\n+\n+   protected static final String NYC_CACHE_CUSTOM_NAME_XML_CONFIG =\n+         \"<infinispan><cache-container>\" +\n+               \"  <replicated-cache name=\\\"nyc-cache\\\">\" +\n+               \"     <backups>\" +\n+               \"        <backup site=\\\"LON\\\" strategy=\\\"ASYNC\\\"/>\" +\n+               \"     </backups>\" +\n+               \"     <backup-for remote-cache=\\\"lon-cache\\\" remote-site=\\\"LON\\\" />\" +\n+               \"  </replicated-cache>\" +\n+               \"</cache-container></infinispan>\";\n+\n+   protected static final String LON_CACHE_OFF_HEAP =\n+         \"<infinispan><cache-container>\" +\n+               \"<distributed-cache name=\\\"%s\\\" owners=\\\"2\\\" mode=\\\"ASYNC\\\" remote-timeout=\\\"25000\\\" start=\\\"EAGER\\\">\" +\n+               \"        <backups>\" +\n+               \"            <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\" timeout=\\\"30000\\\">\" +\n+               \"                <take-offline after-failures=\\\"-1\\\" min-wait=\\\"60000\\\"/>\" +\n+               \"            </backup>\" +\n+               \"        </backups>\" +\n+               \"        <memory storage=\\\"OFF_HEAP\\\" max-count=\\\"100\\\" when-full=\\\"REMOVE\\\"/>\" +\n+               \"        <persistence passivation=\\\"true\\\">\" +\n+               \"     <file-store max-entries=\\\"100\\\" shared=\\\"false\\\" preload=\\\"true\\\" purge=\\\"false\\\" fetch-state=\\\"true\\\"/>\" +\n+               \"  </persistence>\" +\n+               \"  </distributed-cache>\" +\n+               \"</cache-container></infinispan>\";\n+\n+   static InfinispanServerRuleBuilder lonServerRule = InfinispanServerRuleBuilder\n+         .config(\"configuration/XSiteServerTest.xml\")\n+         .numServers(NUM_SERVERS);\n+\n+   static InfinispanServerRuleBuilder nycServerRule = InfinispanServerRuleBuilder\n+         . config(\"configuration/XSiteServerTest.xml\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzIyODA4OnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToyOTo0MlrOHV1nnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToyOTo0MlrOHV1nnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2MDYzOQ==", "bodyText": "format.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492660639", "createdAt": "2020-09-22T11:29:42Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteIT.java", "diffHunk": "@@ -19,16 +20,75 @@\n       XSiteRestCacheOperations.class\n })\n public class XSiteIT {\n-   @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS =\n-         InfinispanServerRuleBuilder.config(\"configuration/XSiteServerTest.xml\")\n-               .numServers(3)\n-               .site(InfinispanServerTestConfiguration.LON)\n-               .build();\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS =\n-         InfinispanServerRuleBuilder.config(\"configuration/XSiteServerTest.xml\")\n-               .numServers(3)\n-               .site(InfinispanServerTestConfiguration.NYC)\n-               .build();\n+\n+   protected static final String LON = \"LON\";\n+   protected static final String NYC = \"NYC\";\n+   protected static final int NUM_SERVERS = 3;\n+   protected static final String LON_CACHE_XML_CONFIG =\n+         \"<infinispan><cache-container>\" +\n+               \"  <replicated-cache name=\\\"%s\\\">\" +\n+               \"     <backups>\" +\n+               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n+               \"     </backups>\" +\n+               \"  </replicated-cache>\" +\n+               \"</cache-container></infinispan>\";\n+\n+   protected static final String NYC_CACHE_XML_CONFIG =\n+         \"<infinispan><cache-container>\" +\n+               \"  <replicated-cache name=\\\"%s\\\">\" +\n+               \"     <backups>\" +\n+               \"        <backup site=\\\"LON\\\" strategy=\\\"ASYNC\\\"/>\" +\n+               \"     </backups>\" +\n+               \"  </replicated-cache>\" +\n+               \"</cache-container></infinispan>\";\n+\n+   protected static final String LON_CACHE_CUSTOM_NAME_XML_CONFIG =\n+         \"<infinispan><cache-container>\" +\n+               \"  <replicated-cache name=\\\"lon-cache\\\">\" +\n+               \"     <backups>\" +\n+               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n+               \"     </backups>\" +\n+               \"     <backup-for remote-cache=\\\"nyc-cache\\\" remote-site=\\\"NYC\\\" />\" +\n+               \"  </replicated-cache>\" +\n+               \"</cache-container></infinispan>\";\n+\n+   protected static final String NYC_CACHE_CUSTOM_NAME_XML_CONFIG =\n+         \"<infinispan><cache-container>\" +\n+               \"  <replicated-cache name=\\\"nyc-cache\\\">\" +\n+               \"     <backups>\" +\n+               \"        <backup site=\\\"LON\\\" strategy=\\\"ASYNC\\\"/>\" +\n+               \"     </backups>\" +\n+               \"     <backup-for remote-cache=\\\"lon-cache\\\" remote-site=\\\"LON\\\" />\" +\n+               \"  </replicated-cache>\" +\n+               \"</cache-container></infinispan>\";\n+\n+   protected static final String LON_CACHE_OFF_HEAP =\n+         \"<infinispan><cache-container>\" +\n+               \"<distributed-cache name=\\\"%s\\\" owners=\\\"2\\\" mode=\\\"ASYNC\\\" remote-timeout=\\\"25000\\\" start=\\\"EAGER\\\">\" +\n+               \"        <backups>\" +\n+               \"            <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\" timeout=\\\"30000\\\">\" +\n+               \"                <take-offline after-failures=\\\"-1\\\" min-wait=\\\"60000\\\"/>\" +\n+               \"            </backup>\" +\n+               \"        </backups>\" +\n+               \"        <memory storage=\\\"OFF_HEAP\\\" max-count=\\\"100\\\" when-full=\\\"REMOVE\\\"/>\" +\n+               \"        <persistence passivation=\\\"true\\\">\" +\n+               \"     <file-store max-entries=\\\"100\\\" shared=\\\"false\\\" preload=\\\"true\\\" purge=\\\"false\\\" fetch-state=\\\"true\\\"/>\" +\n+               \"  </persistence>\" +\n+               \"  </distributed-cache>\" +\n+               \"</cache-container></infinispan>\";\n+\n+   static InfinispanServerRuleBuilder lonServerRule = InfinispanServerRuleBuilder\n+         .config(\"configuration/XSiteServerTest.xml\")\n+         .numServers(NUM_SERVERS);\n+\n+   static InfinispanServerRuleBuilder nycServerRule = InfinispanServerRuleBuilder\n+         . config(\"configuration/XSiteServerTest.xml\")\n+         .numServers(NUM_SERVERS);\n+\n+      @ClassRule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzIzMTk5OnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTozMDo0NlrOHV1p4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTozMDo0NlrOHV1p4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2MTIxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               public void testHotRodOperationsWithOffHeapSingleFileStore() throws InterruptedException, ExecutionException {\n          \n          \n            \n               public void testHotRodOperationsWithOffHeapSingleFileStore() {", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r492661217", "createdAt": "2020-09-22T11:30:46Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "diffHunk": "@@ -1,77 +1,165 @@\n package org.infinispan.server.functional;\n \n+import static org.infinispan.server.functional.XSiteIT.LON;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_OFF_HEAP;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.NUM_SERVERS;\n+import static org.infinispan.server.functional.XSiteIT.NYC;\n+import static org.infinispan.server.functional.XSiteIT.NYC_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.NYC_CACHE_XML_CONFIG;\n+import static org.infinispan.server.security.Common.sync;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.IntStream;\n \n import org.infinispan.client.hotrod.DefaultTemplate;\n import org.infinispan.client.rest.RestCacheClient;\n-import org.infinispan.client.rest.RestClient;\n import org.infinispan.client.rest.RestEntity;\n import org.infinispan.client.rest.RestResponse;\n import org.infinispan.commons.dataconversion.MediaType;\n-import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.commons.dataconversion.internal.Json;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.infinispan.util.concurrent.CompletionStages;\n-import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteRestCacheOperations {\n \n    @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS = XSiteIT.LON_SERVERS;\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS = XSiteIT.NYC_SERVERS;\n-\n-   private static final String LON_CACHE_XML_CONFIG =\n-         \"<infinispan><cache-container>\" +\n-               \"  <replicated-cache name=\\\"%s\\\">\" +\n-               \"     <backups>\" +\n-               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n-               \"     </backups>\" +\n-               \"  </replicated-cache>\" +\n-               \"</cache-container></infinispan>\";\n-   @Rule\n-   public InfinispanServerTestMethodRule LON_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.LON_SERVERS);\n+   public static final InfinispanXSiteServerRule SERVERS = XSiteIT.SERVERS;\n \n    @Rule\n-   public InfinispanServerTestMethodRule NYC_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.NYC_SERVERS);\n+   public InfinispanXSiteServerTestMethodRule SERVER_TEST = new InfinispanXSiteServerTestMethodRule(SERVERS);\n \n    private static void assertStatus(int status, CompletionStage<RestResponse> stage) {\n-      Assert.assertEquals(status, CompletionStages.join(stage).getStatus());\n+      assertEquals(status, CompletionStages.join(stage).getStatus());\n    }\n \n    private static String bodyOf(CompletionStage<RestResponse> stage) {\n       RestResponse rsp = CompletionStages.join(stage);\n       return rsp.getStatus() == 200 ? rsp.getBody() : null;\n    }\n \n+   String cacheName;\n+   private RestCacheClient lonCache;\n+   private RestCacheClient nycCache;\n+\n+   @Before\n+   public void setup() {\n+      cacheName = SERVER_TEST.getMethodName();\n+   }\n+\n    @Test\n-   public void testRestOperations() {\n-      String cacheName = LON_SERVER_TEST.getMethodName();\n+   public void testRestOperationsLonToNycBackup() {\n       String lonXML = String.format(LON_CACHE_XML_CONFIG, cacheName);\n+      lonCache = createRestCacheClient(LON, lonXML);\n+      nycCache = createRestCacheClient(NYC);\n \n-      RestClient lonClient = LON_SERVER_TEST.rest().get();\n-      RestClient nycClient = NYC_SERVER_TEST.rest().get();\n+      //nyc doesn't backup to lon\n+      insertAndverifyEntries(false);\n+   }\n \n-      RestCacheClient lonCache = lonClient.cache(cacheName);\n-      RestCacheClient nycCache = nycClient.cache(cacheName);\n-      assertStatus(200, lonCache.createWithConfiguration(RestEntity.create(MediaType.APPLICATION_XML, lonXML)));\n-      assertStatus(200, nycCache.createWithTemplate(DefaultTemplate.DIST_SYNC.getTemplateName()));\n+   @Test\n+   public void testRestOperationsAllSitesBackup() {\n+      String lonXML = String.format(LON_CACHE_XML_CONFIG, cacheName);\n+      String nycXML = String.format(NYC_CACHE_XML_CONFIG, cacheName);\n+      lonCache = createRestCacheClient(LON, lonXML);\n+      nycCache = createRestCacheClient(NYC, nycXML);\n \n+      insertAndverifyEntries(true);\n+   }\n+\n+   @Test\n+   public void testBackupStatus() {\n+      String lonXML = String.format(LON_CACHE_XML_CONFIG, cacheName);\n+      lonCache = createRestCacheClient(LON, lonXML);\n+      nycCache = createRestCacheClient(NYC);\n+\n+      assertNull(bodyOf(nycCache.xsiteBackups()));\n+      assertEquals(NUM_SERVERS, Json.read(bodyOf(lonCache.backupStatus(NYC))).asMap().size());\n+      assertNull(bodyOf(nycCache.backupStatus(LON)));\n+\n+      Json lonXsiteBackups = Json.read(bodyOf(lonCache.xsiteBackups()));\n+      assertEquals(\"online\", lonXsiteBackups.asJsonMap().get(NYC).asString());\n+\n+      CompletionStages.join(lonCache.takeSiteOffline(NYC));\n+      lonXsiteBackups = Json.read(bodyOf(lonCache.xsiteBackups()));\n+      assertTrue(lonXsiteBackups.asJsonMap().get(NYC).asString().contains(\"offline\"));\n+      CompletionStages.join(lonCache.bringSiteOnline(NYC));\n+      lonXsiteBackups = Json.read(bodyOf(lonCache.xsiteBackups()));\n+      assertTrue(lonXsiteBackups.asJsonMap().get(NYC).asString().contains(\"online\"));\n+   }\n \n+   @Test\n+   public void testWithDifferentCacheNames() {\n+      lonCache = createRestCacheClient(LON, LON_CACHE_CUSTOM_NAME_XML_CONFIG);\n+      nycCache = createRestCacheClient(NYC, NYC_CACHE_CUSTOM_NAME_XML_CONFIG);\n+\n+      insertAndverifyEntries(true);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithOffHeapSingleFileStore() throws InterruptedException, ExecutionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca49f24ece2e4ae7a125e736c2d52565ba36aaf"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTIwMDI5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtensionBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0NTo1MVrOHWvPvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0NTo1MVrOHWvPvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYwNDc5Nw==", "bodyText": "checking for duplicates is missing\n.peek(testServer -> {\n               if (!uniqueSiteName.add(testServer.getSiteName())) {\n                  throw new IllegalStateException(\"Site name already set: \" + testServer.getSiteName());\n               }\n            })", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r493604797", "createdAt": "2020-09-23T13:45:51Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtensionBuilder.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.infinispan.server.test.junit5;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ * Infinispan Server XSite Extension Builder\n+ *\n+ * @author Gustavo Lira\n+ * @since 12\n+ */\n+public class InfinispanXSiteServerExtensionBuilder {\n+\n+   private List<InfinispanServerExtensionBuilder> sites = new ArrayList<>();\n+\n+   public InfinispanXSiteServerExtensionBuilder addSite(String siteName, InfinispanServerExtensionBuilder siteBuilder) {\n+      siteBuilder.site(siteName);\n+      sites.add(siteBuilder);\n+      return this;\n+   }\n+\n+   public InfinispanXSiteServerExtension build() {\n+      List<TestServer> testServers = sites.stream()\n+            .map(it -> new TestServer(it.createServerTestConfiguration()))\n+            .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18443048e3eb9f485799a6ff269d5e403adffa6f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTIwMTY4OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtensionBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0NjowNlrOHWvQlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0NjowNlrOHWvQlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYwNTAxMw==", "bodyText": "nit: 12.0", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r493605013", "createdAt": "2020-09-23T13:46:06Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtensionBuilder.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.infinispan.server.test.junit5;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ * Infinispan Server XSite Extension Builder\n+ *\n+ * @author Gustavo Lira\n+ * @since 12", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18443048e3eb9f485799a6ff269d5e403adffa6f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTIwMjY3OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtensionBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0NjoxNlrOHWvRKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0NjoxNlrOHWvRKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYwNTE2MQ==", "bodyText": "final", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r493605161", "createdAt": "2020-09-23T13:46:16Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanXSiteServerExtensionBuilder.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.infinispan.server.test.junit5;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ * Infinispan Server XSite Extension Builder\n+ *\n+ * @author Gustavo Lira\n+ * @since 12\n+ */\n+public class InfinispanXSiteServerExtensionBuilder {\n+\n+   private List<InfinispanServerExtensionBuilder> sites = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18443048e3eb9f485799a6ff269d5e403adffa6f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTIwNTg3OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0Njo1M1rOHWvTKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0Njo1M1rOHWvTKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYwNTY3NA==", "bodyText": "`final'", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r493605674", "createdAt": "2020-09-23T13:46:53Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRuleBuilder.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ * Builder for {@link InfinispanXSiteServerRule}.\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ */\n+\n+public class InfinispanXSiteServerRuleBuilder {\n+\n+   private List<InfinispanServerRuleBuilder> sites = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18443048e3eb9f485799a6ff269d5e403adffa6f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTIwOTEyOnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0NzozMVrOHWvVGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0NzozMVrOHWvVGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYwNjE2OQ==", "bodyText": "nit: indentation, too many spaces", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r493606169", "createdAt": "2020-09-23T13:47:31Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+/**\n+ * Creates a cluster of sites to be used for running multiple tests\n+ * for Cross-Site replication functionality, It performs the following tasks\n+ * <ul>\n+ * <li>It creates a temporary directory using the test name</li>\n+ * <li>It creates a common configuration directory to be shared by all servers</li>\n+ * <li>It creates a runtime directory structure for each server in the cluster (data, log, lib)</li>\n+ * <li>It populates the configuration directory with multiple certificates (ca.pfx, server.pfx, user1.pfx, user2.pfx)</li>\n+ * </ul>\n+ *\n+ * @author Gustavo Lira &lt;gliraesi@redhat.com&gt;\n+ * @since 12.0\n+ **/\n+public class InfinispanXSiteServerRule implements TestRule {\n+   private final List<TestServer> testServers;\n+\n+   public InfinispanXSiteServerRule(List<TestServer> testServers) {\n+      this.testServers = testServers;\n+   }\n+\n+   @Override\n+   public Statement apply(Statement base, Description description) {\n+      return new Statement() {\n+         @Override\n+         public void evaluate() throws Throwable {\n+            List<TestServer> servers = new ArrayList<>();\n+            String testName = description.getTestClass().getName();\n+            try {\n+               testServers.forEach((testServer) -> {\n+                        // Don't manage the server when a test is using the same InfinispanServerRule instance as the parent suite", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18443048e3eb9f485799a6ff269d5e403adffa6f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTIxMjc5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0ODoxN1rOHWvXYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0ODoxN1rOHWvXYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYwNjc1Mw==", "bodyText": "no longer true. the configuration directory is shared only for servers from the same site.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r493606753", "createdAt": "2020-09-23T13:48:17Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanXSiteServerRule.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+/**\n+ * Creates a cluster of sites to be used for running multiple tests\n+ * for Cross-Site replication functionality, It performs the following tasks\n+ * <ul>\n+ * <li>It creates a temporary directory using the test name</li>\n+ * <li>It creates a common configuration directory to be shared by all servers</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18443048e3eb9f485799a6ff269d5e403adffa6f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTIyMDI1OnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0OTo0MFrOHWvb2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0OTo0MFrOHWvb2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYwNzg5OQ==", "bodyText": "typo: Tota => Total\nalso, it checks the number of entries in memory and not in the filestore.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r493607899", "createdAt": "2020-09-23T13:49:40Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "diffHunk": "@@ -1,54 +1,101 @@\n package org.infinispan.server.functional;\n \n+import static org.infinispan.server.functional.XSiteIT.LON;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_OFF_HEAP;\n+import static org.infinispan.server.functional.XSiteIT.NYC;\n+import static org.infinispan.server.functional.XSiteIT.NYC_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.security.Common.sync;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.stream.IntStream;\n+\n import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.rest.RestCacheClient;\n+import org.infinispan.client.rest.RestClient;\n import org.infinispan.commons.configuration.XMLStringConfiguration;\n-import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.commons.dataconversion.internal.Json;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteHotRodCacheOperations {\n \n    @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS = XSiteIT.LON_SERVERS;\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS = XSiteIT.NYC_SERVERS;\n-\n-   private static final String LON_CACHE_XML_CONFIG =\n-         \"<infinispan><cache-container>\" +\n-               \"  <distributed-cache-configuration name=\\\"%s\\\">\" +\n-               \"     <backups>\" +\n-               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n-               \"     </backups>\" +\n-               \"  </distributed-cache-configuration>\" +\n-               \"</cache-container></infinispan>\";\n-   @Rule\n-   public InfinispanServerTestMethodRule LON_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.LON_SERVERS);\n+   public static final InfinispanXSiteServerRule SERVERS = XSiteIT.SERVERS;\n \n    @Rule\n-   public InfinispanServerTestMethodRule NYC_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.NYC_SERVERS);\n+   public InfinispanXSiteServerTestMethodRule SERVER_TEST = new InfinispanXSiteServerTestMethodRule(SERVERS);\n \n    @Test\n    public void testHotRodOperations() {\n-      String lonXML = String.format(LON_CACHE_XML_CONFIG, LON_SERVER_TEST.getMethodName());\n+      String lonXML = String.format(XSiteIT.LON_CACHE_XML_CONFIG, SERVER_TEST.getMethodName());\n+      RemoteCache<String, String> lonCache = SERVER_TEST.hotrod(LON)\n+            .withServerConfiguration(new XMLStringConfiguration(lonXML)).create();\n+      RemoteCache<String, String> nycCache = SERVER_TEST.hotrod(NYC).create(); //nyc cache don't backup to lon\n \n-      RemoteCache<String, String> lonCache = LON_SERVER_TEST.hotrod()\n+      insertAndVerifyEntries(lonCache, nycCache, false);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithDifferentCacheName() {\n+      RemoteCache<String, String> lonCache = SERVER_TEST.hotrod(LON)\n+            .createRemoteCacheManager()\n+            .administration()\n+            .createCache(\"lon-cache\", new XMLStringConfiguration(LON_CACHE_CUSTOM_NAME_XML_CONFIG));\n+\n+      RemoteCache<String, String> nycCache = SERVER_TEST.hotrod(NYC)\n+            .createRemoteCacheManager()\n+            .administration()\n+            .createCache(\"nyc-cache\", new XMLStringConfiguration(NYC_CACHE_CUSTOM_NAME_XML_CONFIG));\n+\n+      insertAndVerifyEntries(lonCache, nycCache, true);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithOffHeapSingleFileStore() {\n+      String lonXML = String.format(LON_CACHE_OFF_HEAP, SERVER_TEST.getMethodName());\n+      RemoteCache<Integer, Integer> lonCache = SERVER_TEST.hotrod(LON)\n             .withServerConfiguration(new XMLStringConfiguration(lonXML)).create();\n-      RemoteCache<String, String> nycCache = NYC_SERVER_TEST.hotrod().create(); //must have the same name as LON cache\n+      RemoteCache<Integer, Integer> nycCache = SERVER_TEST.hotrod(NYC).create(); //nyc cache don't backup to lon\n \n-      lonCache.put(\"k1\", \"v1\");\n-      nycCache.put(\"k2\", \"v2\"); //nyc cache don't backup to lon\n+      //Just to make sure that the file store is empty\n+      assertEquals(0, getTotaFileStoreEntries(lonXML));\n+\n+      IntStream.range(0, 300).forEach(i -> lonCache.put(i, i));\n+\n+      assertEquals(300, nycCache.size());\n+      //Just to verify that file store is properly working\n+      assertEquals(100, getTotaFileStoreEntries(lonXML));\n+   }\n+\n+   private int getTotaFileStoreEntries(String lonXML) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18443048e3eb9f485799a6ff269d5e403adffa6f"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTIzNDQ2OnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo1MjoxNFrOHWvkdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo1MjoxNFrOHWvkdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMDEwMw==", "bodyText": "same typo and wrong test name", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r493610103", "createdAt": "2020-09-23T13:52:14Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "diffHunk": "@@ -1,77 +1,164 @@\n package org.infinispan.server.functional;\n \n+import static org.infinispan.server.functional.XSiteIT.LON;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_OFF_HEAP;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.NUM_SERVERS;\n+import static org.infinispan.server.functional.XSiteIT.NYC;\n+import static org.infinispan.server.functional.XSiteIT.NYC_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.NYC_CACHE_XML_CONFIG;\n+import static org.infinispan.server.security.Common.sync;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n import java.util.concurrent.CompletionStage;\n+import java.util.stream.IntStream;\n \n import org.infinispan.client.hotrod.DefaultTemplate;\n import org.infinispan.client.rest.RestCacheClient;\n-import org.infinispan.client.rest.RestClient;\n import org.infinispan.client.rest.RestEntity;\n import org.infinispan.client.rest.RestResponse;\n import org.infinispan.commons.dataconversion.MediaType;\n-import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.commons.dataconversion.internal.Json;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.infinispan.util.concurrent.CompletionStages;\n-import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteRestCacheOperations {\n \n    @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS = XSiteIT.LON_SERVERS;\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS = XSiteIT.NYC_SERVERS;\n-\n-   private static final String LON_CACHE_XML_CONFIG =\n-         \"<infinispan><cache-container>\" +\n-               \"  <replicated-cache name=\\\"%s\\\">\" +\n-               \"     <backups>\" +\n-               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n-               \"     </backups>\" +\n-               \"  </replicated-cache>\" +\n-               \"</cache-container></infinispan>\";\n-   @Rule\n-   public InfinispanServerTestMethodRule LON_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.LON_SERVERS);\n+   public static final InfinispanXSiteServerRule SERVERS = XSiteIT.SERVERS;\n \n    @Rule\n-   public InfinispanServerTestMethodRule NYC_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.NYC_SERVERS);\n+   public InfinispanXSiteServerTestMethodRule SERVER_TEST = new InfinispanXSiteServerTestMethodRule(SERVERS);\n \n    private static void assertStatus(int status, CompletionStage<RestResponse> stage) {\n-      Assert.assertEquals(status, CompletionStages.join(stage).getStatus());\n+      assertEquals(status, CompletionStages.join(stage).getStatus());\n    }\n \n    private static String bodyOf(CompletionStage<RestResponse> stage) {\n       RestResponse rsp = CompletionStages.join(stage);\n       return rsp.getStatus() == 200 ? rsp.getBody() : null;\n    }\n \n+   String cacheName;\n+   private RestCacheClient lonCache;\n+   private RestCacheClient nycCache;\n+\n+   @Before\n+   public void setup() {\n+      cacheName = SERVER_TEST.getMethodName();\n+   }\n+\n    @Test\n-   public void testRestOperations() {\n-      String cacheName = LON_SERVER_TEST.getMethodName();\n+   public void testRestOperationsLonToNycBackup() {\n       String lonXML = String.format(LON_CACHE_XML_CONFIG, cacheName);\n+      lonCache = createRestCacheClient(LON, lonXML);\n+      nycCache = createRestCacheClient(NYC);\n \n-      RestClient lonClient = LON_SERVER_TEST.rest().get();\n-      RestClient nycClient = NYC_SERVER_TEST.rest().get();\n+      //nyc doesn't backup to lon\n+      insertAndverifyEntries(false);\n+   }\n \n-      RestCacheClient lonCache = lonClient.cache(cacheName);\n-      RestCacheClient nycCache = nycClient.cache(cacheName);\n-      assertStatus(200, lonCache.createWithConfiguration(RestEntity.create(MediaType.APPLICATION_XML, lonXML)));\n-      assertStatus(200, nycCache.createWithTemplate(DefaultTemplate.DIST_SYNC.getTemplateName()));\n+   @Test\n+   public void testRestOperationsAllSitesBackup() {\n+      String lonXML = String.format(LON_CACHE_XML_CONFIG, cacheName);\n+      String nycXML = String.format(NYC_CACHE_XML_CONFIG, cacheName);\n+      lonCache = createRestCacheClient(LON, lonXML);\n+      nycCache = createRestCacheClient(NYC, nycXML);\n \n+      insertAndverifyEntries(true);\n+   }\n+\n+   @Test\n+   public void testBackupStatus() {\n+      String lonXML = String.format(LON_CACHE_XML_CONFIG, cacheName);\n+      lonCache = createRestCacheClient(LON, lonXML);\n+      nycCache = createRestCacheClient(NYC);\n+\n+      assertNull(bodyOf(nycCache.xsiteBackups()));\n+      assertEquals(NUM_SERVERS, Json.read(bodyOf(lonCache.backupStatus(NYC))).asMap().size());\n+      assertNull(bodyOf(nycCache.backupStatus(LON)));\n+\n+      Json lonXsiteBackups = Json.read(bodyOf(lonCache.xsiteBackups()));\n+      assertEquals(\"online\", lonXsiteBackups.asJsonMap().get(NYC).asString());\n+\n+      CompletionStages.join(lonCache.takeSiteOffline(NYC));\n+      lonXsiteBackups = Json.read(bodyOf(lonCache.xsiteBackups()));\n+      assertTrue(lonXsiteBackups.asJsonMap().get(NYC).asString().contains(\"offline\"));\n+      CompletionStages.join(lonCache.bringSiteOnline(NYC));\n+      lonXsiteBackups = Json.read(bodyOf(lonCache.xsiteBackups()));\n+      assertTrue(lonXsiteBackups.asJsonMap().get(NYC).asString().contains(\"online\"));\n+   }\n \n+   @Test\n+   public void testWithDifferentCacheNames() {\n+      lonCache = createRestCacheClient(LON, LON_CACHE_CUSTOM_NAME_XML_CONFIG);\n+      nycCache = createRestCacheClient(NYC, NYC_CACHE_CUSTOM_NAME_XML_CONFIG);\n+\n+      insertAndverifyEntries(true);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithOffHeapSingleFileStore() {\n+      String lonXML = String.format(LON_CACHE_OFF_HEAP, cacheName);\n+      lonCache = createRestCacheClient(LON, lonXML);\n+      nycCache = createRestCacheClient(NYC);\n+\n+      //Just to make sure that the file store is empty\n+      assertEquals(0, getTotaFileStoreEntries(lonCache));\n+\n+      IntStream.range(0, 300)\n+               .forEach(i -> {\n+                  String s = Integer.toString(i);\n+                  bodyOf(lonCache.put(s, s));\n+      });\n+\n+      assertEquals(\"300\", bodyOf(nycCache.size()));\n+//      Just to verify that file store is properly working\n+      assertEquals(100, getTotaFileStoreEntries(lonCache));\n+   }\n+\n+   private int getTotaFileStoreEntries(RestCacheClient restCache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18443048e3eb9f485799a6ff269d5e403adffa6f"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTIzNTU4OnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo1MjoyOFrOHWvlJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo1MjoyOFrOHWvlJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMDI3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private void insertAndverifyEntries(boolean allSitesBackup) {\n          \n          \n            \n               private void insertAndVerifyEntries(boolean allSitesBackup) {", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r493610277", "createdAt": "2020-09-23T13:52:28Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteRestCacheOperations.java", "diffHunk": "@@ -1,77 +1,164 @@\n package org.infinispan.server.functional;\n \n+import static org.infinispan.server.functional.XSiteIT.LON;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_OFF_HEAP;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.NUM_SERVERS;\n+import static org.infinispan.server.functional.XSiteIT.NYC;\n+import static org.infinispan.server.functional.XSiteIT.NYC_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.NYC_CACHE_XML_CONFIG;\n+import static org.infinispan.server.security.Common.sync;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n import java.util.concurrent.CompletionStage;\n+import java.util.stream.IntStream;\n \n import org.infinispan.client.hotrod.DefaultTemplate;\n import org.infinispan.client.rest.RestCacheClient;\n-import org.infinispan.client.rest.RestClient;\n import org.infinispan.client.rest.RestEntity;\n import org.infinispan.client.rest.RestResponse;\n import org.infinispan.commons.dataconversion.MediaType;\n-import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.commons.dataconversion.internal.Json;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.infinispan.util.concurrent.CompletionStages;\n-import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteRestCacheOperations {\n \n    @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS = XSiteIT.LON_SERVERS;\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS = XSiteIT.NYC_SERVERS;\n-\n-   private static final String LON_CACHE_XML_CONFIG =\n-         \"<infinispan><cache-container>\" +\n-               \"  <replicated-cache name=\\\"%s\\\">\" +\n-               \"     <backups>\" +\n-               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n-               \"     </backups>\" +\n-               \"  </replicated-cache>\" +\n-               \"</cache-container></infinispan>\";\n-   @Rule\n-   public InfinispanServerTestMethodRule LON_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.LON_SERVERS);\n+   public static final InfinispanXSiteServerRule SERVERS = XSiteIT.SERVERS;\n \n    @Rule\n-   public InfinispanServerTestMethodRule NYC_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.NYC_SERVERS);\n+   public InfinispanXSiteServerTestMethodRule SERVER_TEST = new InfinispanXSiteServerTestMethodRule(SERVERS);\n \n    private static void assertStatus(int status, CompletionStage<RestResponse> stage) {\n-      Assert.assertEquals(status, CompletionStages.join(stage).getStatus());\n+      assertEquals(status, CompletionStages.join(stage).getStatus());\n    }\n \n    private static String bodyOf(CompletionStage<RestResponse> stage) {\n       RestResponse rsp = CompletionStages.join(stage);\n       return rsp.getStatus() == 200 ? rsp.getBody() : null;\n    }\n \n+   String cacheName;\n+   private RestCacheClient lonCache;\n+   private RestCacheClient nycCache;\n+\n+   @Before\n+   public void setup() {\n+      cacheName = SERVER_TEST.getMethodName();\n+   }\n+\n    @Test\n-   public void testRestOperations() {\n-      String cacheName = LON_SERVER_TEST.getMethodName();\n+   public void testRestOperationsLonToNycBackup() {\n       String lonXML = String.format(LON_CACHE_XML_CONFIG, cacheName);\n+      lonCache = createRestCacheClient(LON, lonXML);\n+      nycCache = createRestCacheClient(NYC);\n \n-      RestClient lonClient = LON_SERVER_TEST.rest().get();\n-      RestClient nycClient = NYC_SERVER_TEST.rest().get();\n+      //nyc doesn't backup to lon\n+      insertAndverifyEntries(false);\n+   }\n \n-      RestCacheClient lonCache = lonClient.cache(cacheName);\n-      RestCacheClient nycCache = nycClient.cache(cacheName);\n-      assertStatus(200, lonCache.createWithConfiguration(RestEntity.create(MediaType.APPLICATION_XML, lonXML)));\n-      assertStatus(200, nycCache.createWithTemplate(DefaultTemplate.DIST_SYNC.getTemplateName()));\n+   @Test\n+   public void testRestOperationsAllSitesBackup() {\n+      String lonXML = String.format(LON_CACHE_XML_CONFIG, cacheName);\n+      String nycXML = String.format(NYC_CACHE_XML_CONFIG, cacheName);\n+      lonCache = createRestCacheClient(LON, lonXML);\n+      nycCache = createRestCacheClient(NYC, nycXML);\n \n+      insertAndverifyEntries(true);\n+   }\n+\n+   @Test\n+   public void testBackupStatus() {\n+      String lonXML = String.format(LON_CACHE_XML_CONFIG, cacheName);\n+      lonCache = createRestCacheClient(LON, lonXML);\n+      nycCache = createRestCacheClient(NYC);\n+\n+      assertNull(bodyOf(nycCache.xsiteBackups()));\n+      assertEquals(NUM_SERVERS, Json.read(bodyOf(lonCache.backupStatus(NYC))).asMap().size());\n+      assertNull(bodyOf(nycCache.backupStatus(LON)));\n+\n+      Json lonXsiteBackups = Json.read(bodyOf(lonCache.xsiteBackups()));\n+      assertEquals(\"online\", lonXsiteBackups.asJsonMap().get(NYC).asString());\n+\n+      CompletionStages.join(lonCache.takeSiteOffline(NYC));\n+      lonXsiteBackups = Json.read(bodyOf(lonCache.xsiteBackups()));\n+      assertTrue(lonXsiteBackups.asJsonMap().get(NYC).asString().contains(\"offline\"));\n+      CompletionStages.join(lonCache.bringSiteOnline(NYC));\n+      lonXsiteBackups = Json.read(bodyOf(lonCache.xsiteBackups()));\n+      assertTrue(lonXsiteBackups.asJsonMap().get(NYC).asString().contains(\"online\"));\n+   }\n \n+   @Test\n+   public void testWithDifferentCacheNames() {\n+      lonCache = createRestCacheClient(LON, LON_CACHE_CUSTOM_NAME_XML_CONFIG);\n+      nycCache = createRestCacheClient(NYC, NYC_CACHE_CUSTOM_NAME_XML_CONFIG);\n+\n+      insertAndverifyEntries(true);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithOffHeapSingleFileStore() {\n+      String lonXML = String.format(LON_CACHE_OFF_HEAP, cacheName);\n+      lonCache = createRestCacheClient(LON, lonXML);\n+      nycCache = createRestCacheClient(NYC);\n+\n+      //Just to make sure that the file store is empty\n+      assertEquals(0, getTotaFileStoreEntries(lonCache));\n+\n+      IntStream.range(0, 300)\n+               .forEach(i -> {\n+                  String s = Integer.toString(i);\n+                  bodyOf(lonCache.put(s, s));\n+      });\n+\n+      assertEquals(\"300\", bodyOf(nycCache.size()));\n+//      Just to verify that file store is properly working\n+      assertEquals(100, getTotaFileStoreEntries(lonCache));\n+   }\n+\n+   private int getTotaFileStoreEntries(RestCacheClient restCache) {\n+      Json json = Json.read(sync(restCache.stats()).getBody());\n+      return json.asJsonMap().get(\"current_number_of_entries_in_memory\").asInteger();\n+   }\n+\n+   private void insertAndverifyEntries(boolean allSitesBackup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18443048e3eb9f485799a6ff269d5e403adffa6f"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjU3MjMzOnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoyMjo1MFrOHXPPhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoyMjo1MFrOHXPPhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyOTAyOQ==", "bodyText": "you cannot use == to compare Strings. it will be always false.", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r494129029", "createdAt": "2020-09-24T08:22:50Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "diffHunk": "@@ -1,54 +1,102 @@\n package org.infinispan.server.functional;\n \n+import static org.infinispan.commons.test.Eventually.eventually;\n+import static org.infinispan.server.functional.XSiteIT.LON;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_OFF_HEAP;\n+import static org.infinispan.server.functional.XSiteIT.NYC;\n+import static org.infinispan.server.functional.XSiteIT.NYC_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.security.Common.sync;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.stream.IntStream;\n+\n import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.rest.RestCacheClient;\n+import org.infinispan.client.rest.RestClient;\n import org.infinispan.commons.configuration.XMLStringConfiguration;\n-import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.commons.dataconversion.internal.Json;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteHotRodCacheOperations {\n \n    @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS = XSiteIT.LON_SERVERS;\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS = XSiteIT.NYC_SERVERS;\n-\n-   private static final String LON_CACHE_XML_CONFIG =\n-         \"<infinispan><cache-container>\" +\n-               \"  <distributed-cache-configuration name=\\\"%s\\\">\" +\n-               \"     <backups>\" +\n-               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n-               \"     </backups>\" +\n-               \"  </distributed-cache-configuration>\" +\n-               \"</cache-container></infinispan>\";\n-   @Rule\n-   public InfinispanServerTestMethodRule LON_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.LON_SERVERS);\n+   public static final InfinispanXSiteServerRule SERVERS = XSiteIT.SERVERS;\n \n    @Rule\n-   public InfinispanServerTestMethodRule NYC_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.NYC_SERVERS);\n+   public InfinispanXSiteServerTestMethodRule SERVER_TEST = new InfinispanXSiteServerTestMethodRule(SERVERS);\n \n    @Test\n    public void testHotRodOperations() {\n-      String lonXML = String.format(LON_CACHE_XML_CONFIG, LON_SERVER_TEST.getMethodName());\n+      String lonXML = String.format(XSiteIT.LON_CACHE_XML_CONFIG, SERVER_TEST.getMethodName());\n+      RemoteCache<String, String> lonCache = SERVER_TEST.hotrod(LON)\n+            .withServerConfiguration(new XMLStringConfiguration(lonXML)).create();\n+      RemoteCache<String, String> nycCache = SERVER_TEST.hotrod(NYC).create(); //nyc cache don't backup to lon\n \n-      RemoteCache<String, String> lonCache = LON_SERVER_TEST.hotrod()\n+      insertAndVerifyEntries(lonCache, nycCache, false);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithDifferentCacheName() {\n+      RemoteCache<String, String> lonCache = SERVER_TEST.hotrod(LON)\n+            .createRemoteCacheManager()\n+            .administration()\n+            .createCache(\"lon-cache\", new XMLStringConfiguration(LON_CACHE_CUSTOM_NAME_XML_CONFIG));\n+\n+      RemoteCache<String, String> nycCache = SERVER_TEST.hotrod(NYC)\n+            .createRemoteCacheManager()\n+            .administration()\n+            .createCache(\"nyc-cache\", new XMLStringConfiguration(NYC_CACHE_CUSTOM_NAME_XML_CONFIG));\n+\n+      insertAndVerifyEntries(lonCache, nycCache, true);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithOffHeapSingleFileStore() {\n+      String lonXML = String.format(LON_CACHE_OFF_HEAP, SERVER_TEST.getMethodName());\n+      RemoteCache<Integer, Integer> lonCache = SERVER_TEST.hotrod(LON)\n             .withServerConfiguration(new XMLStringConfiguration(lonXML)).create();\n-      RemoteCache<String, String> nycCache = NYC_SERVER_TEST.hotrod().create(); //must have the same name as LON cache\n+      RemoteCache<Integer, Integer> nycCache = SERVER_TEST.hotrod(NYC).create(); //nyc cache don't backup to lon\n \n-      lonCache.put(\"k1\", \"v1\");\n-      nycCache.put(\"k2\", \"v2\"); //nyc cache don't backup to lon\n+      //Just to make sure that the file store is empty\n+      assertEquals(0, getTotalMemoryEntries(lonXML));\n+\n+      IntStream.range(0, 300).forEach(i -> lonCache.put(i, i));\n+\n+      eventually(() -> nycCache.size() == 300);\n+      //Just to verify that file store is properly working\n+      assertEquals(100, getTotalMemoryEntries(lonXML));\n+   }\n+\n+   private int getTotalMemoryEntries(String lonXML) {\n+      RestClient restClient = SERVER_TEST.rest(LON)\n+            .withServerConfiguration(new XMLStringConfiguration(lonXML)).get();\n \n-      Eventually.eventuallyEquals(\"v1\", () -> lonCache.get(\"k1\"));\n-      Eventually.eventuallyEquals(\"v1\", () -> nycCache.get(\"k1\"));\n+      RestCacheClient client = restClient.cache(SERVER_TEST.getMethodName());\n+      Json json = Json.read(sync(client.stats()).getBody());\n+      return json.asJsonMap().get(\"current_number_of_entries_in_memory\").asInteger();\n+   }\n+\n+   private void insertAndVerifyEntries(RemoteCache<String, String> lonCache, RemoteCache<String, String> nycCache, boolean allSitesBackup) {\n+      lonCache.put(\"k1\", \"v1\");\n+      nycCache.put(\"k2\", \"v2\");\n \n-      Eventually.eventuallyEquals(null, () -> lonCache.get(\"k2\"));\n-      Eventually.eventuallyEquals(\"v2\", () -> nycCache.get(\"k2\"));\n+      assertEquals(\"v1\", lonCache.get(\"k1\"));\n+      eventually(() -> nycCache.get(\"k1\") == \"v1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "073e3d032d695e2bed6c04e0c043c1a24c6e9309"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjU3MjkxOnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoyMzowMVrOHXPP8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoyMzowMVrOHXPP8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyOTEzNg==", "bodyText": "same here", "url": "https://github.com/infinispan/infinispan/pull/8614#discussion_r494129136", "createdAt": "2020-09-24T08:23:01Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/XSiteHotRodCacheOperations.java", "diffHunk": "@@ -1,54 +1,102 @@\n package org.infinispan.server.functional;\n \n+import static org.infinispan.commons.test.Eventually.eventually;\n+import static org.infinispan.server.functional.XSiteIT.LON;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.functional.XSiteIT.LON_CACHE_OFF_HEAP;\n+import static org.infinispan.server.functional.XSiteIT.NYC;\n+import static org.infinispan.server.functional.XSiteIT.NYC_CACHE_CUSTOM_NAME_XML_CONFIG;\n+import static org.infinispan.server.security.Common.sync;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.stream.IntStream;\n+\n import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.rest.RestCacheClient;\n+import org.infinispan.client.rest.RestClient;\n import org.infinispan.commons.configuration.XMLStringConfiguration;\n-import org.infinispan.commons.test.Eventually;\n-import org.infinispan.server.test.junit4.InfinispanServerRule;\n-import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.infinispan.commons.dataconversion.internal.Json;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerRule;\n+import org.infinispan.server.test.junit4.InfinispanXSiteServerTestMethodRule;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n /**\n  * @author Pedro Ruivo\n+ * @author Gustavo Lira\n  * @since 11.0\n  **/\n public class XSiteHotRodCacheOperations {\n \n    @ClassRule\n-   public static final InfinispanServerRule LON_SERVERS = XSiteIT.LON_SERVERS;\n-   @ClassRule\n-   public static final InfinispanServerRule NYC_SERVERS = XSiteIT.NYC_SERVERS;\n-\n-   private static final String LON_CACHE_XML_CONFIG =\n-         \"<infinispan><cache-container>\" +\n-               \"  <distributed-cache-configuration name=\\\"%s\\\">\" +\n-               \"     <backups>\" +\n-               \"        <backup site=\\\"NYC\\\" strategy=\\\"ASYNC\\\"/>\" +\n-               \"     </backups>\" +\n-               \"  </distributed-cache-configuration>\" +\n-               \"</cache-container></infinispan>\";\n-   @Rule\n-   public InfinispanServerTestMethodRule LON_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.LON_SERVERS);\n+   public static final InfinispanXSiteServerRule SERVERS = XSiteIT.SERVERS;\n \n    @Rule\n-   public InfinispanServerTestMethodRule NYC_SERVER_TEST = new InfinispanServerTestMethodRule(XSiteIT.NYC_SERVERS);\n+   public InfinispanXSiteServerTestMethodRule SERVER_TEST = new InfinispanXSiteServerTestMethodRule(SERVERS);\n \n    @Test\n    public void testHotRodOperations() {\n-      String lonXML = String.format(LON_CACHE_XML_CONFIG, LON_SERVER_TEST.getMethodName());\n+      String lonXML = String.format(XSiteIT.LON_CACHE_XML_CONFIG, SERVER_TEST.getMethodName());\n+      RemoteCache<String, String> lonCache = SERVER_TEST.hotrod(LON)\n+            .withServerConfiguration(new XMLStringConfiguration(lonXML)).create();\n+      RemoteCache<String, String> nycCache = SERVER_TEST.hotrod(NYC).create(); //nyc cache don't backup to lon\n \n-      RemoteCache<String, String> lonCache = LON_SERVER_TEST.hotrod()\n+      insertAndVerifyEntries(lonCache, nycCache, false);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithDifferentCacheName() {\n+      RemoteCache<String, String> lonCache = SERVER_TEST.hotrod(LON)\n+            .createRemoteCacheManager()\n+            .administration()\n+            .createCache(\"lon-cache\", new XMLStringConfiguration(LON_CACHE_CUSTOM_NAME_XML_CONFIG));\n+\n+      RemoteCache<String, String> nycCache = SERVER_TEST.hotrod(NYC)\n+            .createRemoteCacheManager()\n+            .administration()\n+            .createCache(\"nyc-cache\", new XMLStringConfiguration(NYC_CACHE_CUSTOM_NAME_XML_CONFIG));\n+\n+      insertAndVerifyEntries(lonCache, nycCache, true);\n+   }\n+\n+   @Test\n+   public void testHotRodOperationsWithOffHeapSingleFileStore() {\n+      String lonXML = String.format(LON_CACHE_OFF_HEAP, SERVER_TEST.getMethodName());\n+      RemoteCache<Integer, Integer> lonCache = SERVER_TEST.hotrod(LON)\n             .withServerConfiguration(new XMLStringConfiguration(lonXML)).create();\n-      RemoteCache<String, String> nycCache = NYC_SERVER_TEST.hotrod().create(); //must have the same name as LON cache\n+      RemoteCache<Integer, Integer> nycCache = SERVER_TEST.hotrod(NYC).create(); //nyc cache don't backup to lon\n \n-      lonCache.put(\"k1\", \"v1\");\n-      nycCache.put(\"k2\", \"v2\"); //nyc cache don't backup to lon\n+      //Just to make sure that the file store is empty\n+      assertEquals(0, getTotalMemoryEntries(lonXML));\n+\n+      IntStream.range(0, 300).forEach(i -> lonCache.put(i, i));\n+\n+      eventually(() -> nycCache.size() == 300);\n+      //Just to verify that file store is properly working\n+      assertEquals(100, getTotalMemoryEntries(lonXML));\n+   }\n+\n+   private int getTotalMemoryEntries(String lonXML) {\n+      RestClient restClient = SERVER_TEST.rest(LON)\n+            .withServerConfiguration(new XMLStringConfiguration(lonXML)).get();\n \n-      Eventually.eventuallyEquals(\"v1\", () -> lonCache.get(\"k1\"));\n-      Eventually.eventuallyEquals(\"v1\", () -> nycCache.get(\"k1\"));\n+      RestCacheClient client = restClient.cache(SERVER_TEST.getMethodName());\n+      Json json = Json.read(sync(client.stats()).getBody());\n+      return json.asJsonMap().get(\"current_number_of_entries_in_memory\").asInteger();\n+   }\n+\n+   private void insertAndVerifyEntries(RemoteCache<String, String> lonCache, RemoteCache<String, String> nycCache, boolean allSitesBackup) {\n+      lonCache.put(\"k1\", \"v1\");\n+      nycCache.put(\"k2\", \"v2\");\n \n-      Eventually.eventuallyEquals(null, () -> lonCache.get(\"k2\"));\n-      Eventually.eventuallyEquals(\"v2\", () -> nycCache.get(\"k2\"));\n+      assertEquals(\"v1\", lonCache.get(\"k1\"));\n+      eventually(() -> nycCache.get(\"k1\") == \"v1\");\n+      if(allSitesBackup) {\n+         eventually(() -> lonCache.get(\"k2\") == \"v2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "073e3d032d695e2bed6c04e0c043c1a24c6e9309"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3886, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}