{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MjkxNjMz", "number": 8494, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNjo0MToxMVrOEHVtKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyMjoyMVrOEJPZ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTMxMTEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/factories/threads/CoreExecutorFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNjo0MToxMVrOGmqBuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjozMDozMlrOGmwSrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NzY0MQ==", "bodyText": "I suggest renaming BlockingThreadPoolExecutorFactory, using it only on the nonBlocking path looks weird.", "url": "https://github.com/infinispan/infinispan/pull/8494#discussion_r443187641", "createdAt": "2020-06-21T06:41:11Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/threads/CoreExecutorFactory.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.infinispan.factories.threads;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+import org.infinispan.commons.executors.BlockingThreadPoolExecutorFactory;\n+import org.infinispan.commons.executors.ThreadPoolExecutorFactory;\n+\n+public class CoreExecutorFactory {\n+   private CoreExecutorFactory() { }\n+\n+   public static ThreadPoolExecutorFactory<? extends ExecutorService> executorFactory(int maxThreads, int coreThreads,\n+         int queueLength, long keepAlive, boolean nonBlocking) {\n+      if (nonBlocking) {\n+         return new BlockingThreadPoolExecutorFactory(maxThreads, coreThreads, queueLength, keepAlive, nonBlocking);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a513061b1650c3294479f627eda1d5772d80afe"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4ODUxNQ==", "bodyText": "Yeah, I had debated about renaming it to NonBlockingThreadPoolExecutorFactory. I will go ahead and do that and remove the blocking arguments.", "url": "https://github.com/infinispan/infinispan/pull/8494#discussion_r443288515", "createdAt": "2020-06-22T02:20:47Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/factories/threads/CoreExecutorFactory.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.infinispan.factories.threads;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+import org.infinispan.commons.executors.BlockingThreadPoolExecutorFactory;\n+import org.infinispan.commons.executors.ThreadPoolExecutorFactory;\n+\n+public class CoreExecutorFactory {\n+   private CoreExecutorFactory() { }\n+\n+   public static ThreadPoolExecutorFactory<? extends ExecutorService> executorFactory(int maxThreads, int coreThreads,\n+         int queueLength, long keepAlive, boolean nonBlocking) {\n+      if (nonBlocking) {\n+         return new BlockingThreadPoolExecutorFactory(maxThreads, coreThreads, queueLength, keepAlive, nonBlocking);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NzY0MQ=="}, "originalCommit": {"oid": "8a513061b1650c3294479f627eda1d5772d80afe"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5MDI4Nw==", "bodyText": "Actually I can't rename it as it is a public package. I am thinking instead I will just deprecate the one in commons and add the new class in core where it is private. We can move it later if needed.", "url": "https://github.com/infinispan/infinispan/pull/8494#discussion_r443290287", "createdAt": "2020-06-22T02:30:32Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/factories/threads/CoreExecutorFactory.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.infinispan.factories.threads;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+import org.infinispan.commons.executors.BlockingThreadPoolExecutorFactory;\n+import org.infinispan.commons.executors.ThreadPoolExecutorFactory;\n+\n+public class CoreExecutorFactory {\n+   private CoreExecutorFactory() { }\n+\n+   public static ThreadPoolExecutorFactory<? extends ExecutorService> executorFactory(int maxThreads, int coreThreads,\n+         int queueLength, long keepAlive, boolean nonBlocking) {\n+      if (nonBlocking) {\n+         return new BlockingThreadPoolExecutorFactory(maxThreads, coreThreads, queueLength, keepAlive, nonBlocking);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NzY0MQ=="}, "originalCommit": {"oid": "8a513061b1650c3294479f627eda1d5772d80afe"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTMxMjI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/factories/threads/EnhancedQueueExecutorFactory.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNjo0MzoyMVrOGmqCQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjozMDozN1rOGpnN_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4Nzc3Nw==", "bodyText": "Couldn't you make BlockingRejectedExecutionHandler implement Executor?", "url": "https://github.com/infinispan/infinispan/pull/8494#discussion_r443187777", "createdAt": "2020-06-21T06:43:21Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/threads/EnhancedQueueExecutorFactory.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.infinispan.factories.threads;\n+\n+import static org.infinispan.commons.logging.Log.CONFIG;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.concurrent.ThreadFactory;\n+\n+import org.infinispan.commons.executors.BlockingResource;\n+import org.infinispan.commons.executors.BlockingThreadPoolExecutorFactory;\n+import org.infinispan.commons.executors.ThreadPoolExecutorFactory;\n+import org.infinispan.commons.util.concurrent.BlockingRejectedExecutionHandler;\n+import org.jboss.threads.EnhancedQueueExecutor;\n+import org.jboss.threads.management.ManageableThreadPoolExecutorService;\n+\n+public class EnhancedQueueExecutorFactory implements ThreadPoolExecutorFactory<ManageableThreadPoolExecutorService> {\n+   private final int maxThreads;\n+   private final int coreThreads;\n+   private final int queueLength;\n+   private final long keepAlive;\n+\n+   public EnhancedQueueExecutorFactory(int maxThreads, int coreThreads, int queueLength, long keepAlive, boolean nonBlocking) {\n+      if (nonBlocking) {\n+         throw new UnsupportedOperationException(\"EnhancedQueryExecutorFactory only supports blocking threads currently!\");\n+      }\n+      this.maxThreads = maxThreads;\n+      this.coreThreads = coreThreads;\n+      this.queueLength = queueLength;\n+      this.keepAlive = keepAlive;\n+   }\n+\n+   public int maxThreads() {\n+      return maxThreads;\n+   }\n+\n+   public int coreThreads() {\n+      return coreThreads;\n+   }\n+\n+   public int queueLength() {\n+      return queueLength;\n+   }\n+\n+   public long keepAlive() {\n+      return keepAlive;\n+   }\n+\n+   public static EnhancedQueueExecutorFactory create(int maxThreads, int queueSize, boolean nonBlocking) {\n+      int coreThreads = queueSize == 0 ? 1 : maxThreads;\n+      return new EnhancedQueueExecutorFactory(maxThreads, coreThreads, queueSize,\n+            BlockingThreadPoolExecutorFactory.DEFAULT_KEEP_ALIVE_MILLIS, nonBlocking);\n+   }\n+\n+   @Override\n+   public ManageableThreadPoolExecutorService createExecutor(ThreadFactory factory) {\n+      if (!(factory instanceof BlockingResource)) {\n+         throw new IllegalStateException(\"Executor factory configured to be blocking and received a thread\" +\n+               \" factory that doesn't create blocking threads!\");\n+      }\n+      EnhancedQueueExecutor.Builder builder = new EnhancedQueueExecutor.Builder();\n+      builder.setThreadFactory(factory);\n+      builder.setCorePoolSize(coreThreads);\n+      builder.setMaximumPoolSize(maxThreads);\n+      builder.setGrowthResistance(0.0f);\n+      builder.setMaximumQueueSize(queueLength);\n+      builder.setKeepAliveTime(Duration.of(keepAlive, ChronoUnit.MILLIS));\n+\n+      EnhancedQueueExecutor enhancedQueueExecutor = builder.build();\n+      enhancedQueueExecutor.setHandoffExecutor(task ->\n+         BlockingRejectedExecutionHandler.getInstance().rejectedExecution(task, enhancedQueueExecutor));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a513061b1650c3294479f627eda1d5772d80afe"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4ODUwNg==", "bodyText": "I am not quite sure why we want that. We still need a reference to the original executor service to detect if it is shut down or not.", "url": "https://github.com/infinispan/infinispan/pull/8494#discussion_r443288506", "createdAt": "2020-06-22T02:20:46Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/factories/threads/EnhancedQueueExecutorFactory.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.infinispan.factories.threads;\n+\n+import static org.infinispan.commons.logging.Log.CONFIG;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.concurrent.ThreadFactory;\n+\n+import org.infinispan.commons.executors.BlockingResource;\n+import org.infinispan.commons.executors.BlockingThreadPoolExecutorFactory;\n+import org.infinispan.commons.executors.ThreadPoolExecutorFactory;\n+import org.infinispan.commons.util.concurrent.BlockingRejectedExecutionHandler;\n+import org.jboss.threads.EnhancedQueueExecutor;\n+import org.jboss.threads.management.ManageableThreadPoolExecutorService;\n+\n+public class EnhancedQueueExecutorFactory implements ThreadPoolExecutorFactory<ManageableThreadPoolExecutorService> {\n+   private final int maxThreads;\n+   private final int coreThreads;\n+   private final int queueLength;\n+   private final long keepAlive;\n+\n+   public EnhancedQueueExecutorFactory(int maxThreads, int coreThreads, int queueLength, long keepAlive, boolean nonBlocking) {\n+      if (nonBlocking) {\n+         throw new UnsupportedOperationException(\"EnhancedQueryExecutorFactory only supports blocking threads currently!\");\n+      }\n+      this.maxThreads = maxThreads;\n+      this.coreThreads = coreThreads;\n+      this.queueLength = queueLength;\n+      this.keepAlive = keepAlive;\n+   }\n+\n+   public int maxThreads() {\n+      return maxThreads;\n+   }\n+\n+   public int coreThreads() {\n+      return coreThreads;\n+   }\n+\n+   public int queueLength() {\n+      return queueLength;\n+   }\n+\n+   public long keepAlive() {\n+      return keepAlive;\n+   }\n+\n+   public static EnhancedQueueExecutorFactory create(int maxThreads, int queueSize, boolean nonBlocking) {\n+      int coreThreads = queueSize == 0 ? 1 : maxThreads;\n+      return new EnhancedQueueExecutorFactory(maxThreads, coreThreads, queueSize,\n+            BlockingThreadPoolExecutorFactory.DEFAULT_KEEP_ALIVE_MILLIS, nonBlocking);\n+   }\n+\n+   @Override\n+   public ManageableThreadPoolExecutorService createExecutor(ThreadFactory factory) {\n+      if (!(factory instanceof BlockingResource)) {\n+         throw new IllegalStateException(\"Executor factory configured to be blocking and received a thread\" +\n+               \" factory that doesn't create blocking threads!\");\n+      }\n+      EnhancedQueueExecutor.Builder builder = new EnhancedQueueExecutor.Builder();\n+      builder.setThreadFactory(factory);\n+      builder.setCorePoolSize(coreThreads);\n+      builder.setMaximumPoolSize(maxThreads);\n+      builder.setGrowthResistance(0.0f);\n+      builder.setMaximumQueueSize(queueLength);\n+      builder.setKeepAliveTime(Duration.of(keepAlive, ChronoUnit.MILLIS));\n+\n+      EnhancedQueueExecutor enhancedQueueExecutor = builder.build();\n+      enhancedQueueExecutor.setHandoffExecutor(task ->\n+         BlockingRejectedExecutionHandler.getInstance().rejectedExecution(task, enhancedQueueExecutor));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4Nzc3Nw=="}, "originalCommit": {"oid": "8a513061b1650c3294479f627eda1d5772d80afe"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI1NDMxMg==", "bodyText": "I was thinking BlockingRejectedExecutionHandler doesn't need to implement RejectedExecutionHandler any more, so it might as well implement Executor and receive the enhancedQueueExecutor as a constructor parameter.", "url": "https://github.com/infinispan/infinispan/pull/8494#discussion_r446254312", "createdAt": "2020-06-26T15:29:33Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/threads/EnhancedQueueExecutorFactory.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.infinispan.factories.threads;\n+\n+import static org.infinispan.commons.logging.Log.CONFIG;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.concurrent.ThreadFactory;\n+\n+import org.infinispan.commons.executors.BlockingResource;\n+import org.infinispan.commons.executors.BlockingThreadPoolExecutorFactory;\n+import org.infinispan.commons.executors.ThreadPoolExecutorFactory;\n+import org.infinispan.commons.util.concurrent.BlockingRejectedExecutionHandler;\n+import org.jboss.threads.EnhancedQueueExecutor;\n+import org.jboss.threads.management.ManageableThreadPoolExecutorService;\n+\n+public class EnhancedQueueExecutorFactory implements ThreadPoolExecutorFactory<ManageableThreadPoolExecutorService> {\n+   private final int maxThreads;\n+   private final int coreThreads;\n+   private final int queueLength;\n+   private final long keepAlive;\n+\n+   public EnhancedQueueExecutorFactory(int maxThreads, int coreThreads, int queueLength, long keepAlive, boolean nonBlocking) {\n+      if (nonBlocking) {\n+         throw new UnsupportedOperationException(\"EnhancedQueryExecutorFactory only supports blocking threads currently!\");\n+      }\n+      this.maxThreads = maxThreads;\n+      this.coreThreads = coreThreads;\n+      this.queueLength = queueLength;\n+      this.keepAlive = keepAlive;\n+   }\n+\n+   public int maxThreads() {\n+      return maxThreads;\n+   }\n+\n+   public int coreThreads() {\n+      return coreThreads;\n+   }\n+\n+   public int queueLength() {\n+      return queueLength;\n+   }\n+\n+   public long keepAlive() {\n+      return keepAlive;\n+   }\n+\n+   public static EnhancedQueueExecutorFactory create(int maxThreads, int queueSize, boolean nonBlocking) {\n+      int coreThreads = queueSize == 0 ? 1 : maxThreads;\n+      return new EnhancedQueueExecutorFactory(maxThreads, coreThreads, queueSize,\n+            BlockingThreadPoolExecutorFactory.DEFAULT_KEEP_ALIVE_MILLIS, nonBlocking);\n+   }\n+\n+   @Override\n+   public ManageableThreadPoolExecutorService createExecutor(ThreadFactory factory) {\n+      if (!(factory instanceof BlockingResource)) {\n+         throw new IllegalStateException(\"Executor factory configured to be blocking and received a thread\" +\n+               \" factory that doesn't create blocking threads!\");\n+      }\n+      EnhancedQueueExecutor.Builder builder = new EnhancedQueueExecutor.Builder();\n+      builder.setThreadFactory(factory);\n+      builder.setCorePoolSize(coreThreads);\n+      builder.setMaximumPoolSize(maxThreads);\n+      builder.setGrowthResistance(0.0f);\n+      builder.setMaximumQueueSize(queueLength);\n+      builder.setKeepAliveTime(Duration.of(keepAlive, ChronoUnit.MILLIS));\n+\n+      EnhancedQueueExecutor enhancedQueueExecutor = builder.build();\n+      enhancedQueueExecutor.setHandoffExecutor(task ->\n+         BlockingRejectedExecutionHandler.getInstance().rejectedExecution(task, enhancedQueueExecutor));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4Nzc3Nw=="}, "originalCommit": {"oid": "8a513061b1650c3294479f627eda1d5772d80afe"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI1NzkxOQ==", "bodyText": "Yeah, I personally am not a fan of that. Currently we can easily find all RejectedExecutionHandler implementations which seems much cleaner to me. And it very clearly documents what we should do with a task that is rejected from a blocking executor.\nAlso the resulting class seems really ugly to me in that we create an Executor that takes an ExecutorService but can't submit to it, only check its running state. It seems like a dependency going the wrong direction, where as now it is a much clearer to me.", "url": "https://github.com/infinispan/infinispan/pull/8494#discussion_r446257919", "createdAt": "2020-06-26T15:35:45Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/factories/threads/EnhancedQueueExecutorFactory.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.infinispan.factories.threads;\n+\n+import static org.infinispan.commons.logging.Log.CONFIG;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.concurrent.ThreadFactory;\n+\n+import org.infinispan.commons.executors.BlockingResource;\n+import org.infinispan.commons.executors.BlockingThreadPoolExecutorFactory;\n+import org.infinispan.commons.executors.ThreadPoolExecutorFactory;\n+import org.infinispan.commons.util.concurrent.BlockingRejectedExecutionHandler;\n+import org.jboss.threads.EnhancedQueueExecutor;\n+import org.jboss.threads.management.ManageableThreadPoolExecutorService;\n+\n+public class EnhancedQueueExecutorFactory implements ThreadPoolExecutorFactory<ManageableThreadPoolExecutorService> {\n+   private final int maxThreads;\n+   private final int coreThreads;\n+   private final int queueLength;\n+   private final long keepAlive;\n+\n+   public EnhancedQueueExecutorFactory(int maxThreads, int coreThreads, int queueLength, long keepAlive, boolean nonBlocking) {\n+      if (nonBlocking) {\n+         throw new UnsupportedOperationException(\"EnhancedQueryExecutorFactory only supports blocking threads currently!\");\n+      }\n+      this.maxThreads = maxThreads;\n+      this.coreThreads = coreThreads;\n+      this.queueLength = queueLength;\n+      this.keepAlive = keepAlive;\n+   }\n+\n+   public int maxThreads() {\n+      return maxThreads;\n+   }\n+\n+   public int coreThreads() {\n+      return coreThreads;\n+   }\n+\n+   public int queueLength() {\n+      return queueLength;\n+   }\n+\n+   public long keepAlive() {\n+      return keepAlive;\n+   }\n+\n+   public static EnhancedQueueExecutorFactory create(int maxThreads, int queueSize, boolean nonBlocking) {\n+      int coreThreads = queueSize == 0 ? 1 : maxThreads;\n+      return new EnhancedQueueExecutorFactory(maxThreads, coreThreads, queueSize,\n+            BlockingThreadPoolExecutorFactory.DEFAULT_KEEP_ALIVE_MILLIS, nonBlocking);\n+   }\n+\n+   @Override\n+   public ManageableThreadPoolExecutorService createExecutor(ThreadFactory factory) {\n+      if (!(factory instanceof BlockingResource)) {\n+         throw new IllegalStateException(\"Executor factory configured to be blocking and received a thread\" +\n+               \" factory that doesn't create blocking threads!\");\n+      }\n+      EnhancedQueueExecutor.Builder builder = new EnhancedQueueExecutor.Builder();\n+      builder.setThreadFactory(factory);\n+      builder.setCorePoolSize(coreThreads);\n+      builder.setMaximumPoolSize(maxThreads);\n+      builder.setGrowthResistance(0.0f);\n+      builder.setMaximumQueueSize(queueLength);\n+      builder.setKeepAliveTime(Duration.of(keepAlive, ChronoUnit.MILLIS));\n+\n+      EnhancedQueueExecutor enhancedQueueExecutor = builder.build();\n+      enhancedQueueExecutor.setHandoffExecutor(task ->\n+         BlockingRejectedExecutionHandler.getInstance().rejectedExecution(task, enhancedQueueExecutor));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4Nzc3Nw=="}, "originalCommit": {"oid": "8a513061b1650c3294479f627eda1d5772d80afe"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NzM1OQ==", "bodyText": "Fair enough, it's complicated enough with all those *ExecutorFactory classes, no need for one more Executor.", "url": "https://github.com/infinispan/infinispan/pull/8494#discussion_r446287359", "createdAt": "2020-06-26T16:30:37Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/threads/EnhancedQueueExecutorFactory.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.infinispan.factories.threads;\n+\n+import static org.infinispan.commons.logging.Log.CONFIG;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.concurrent.ThreadFactory;\n+\n+import org.infinispan.commons.executors.BlockingResource;\n+import org.infinispan.commons.executors.BlockingThreadPoolExecutorFactory;\n+import org.infinispan.commons.executors.ThreadPoolExecutorFactory;\n+import org.infinispan.commons.util.concurrent.BlockingRejectedExecutionHandler;\n+import org.jboss.threads.EnhancedQueueExecutor;\n+import org.jboss.threads.management.ManageableThreadPoolExecutorService;\n+\n+public class EnhancedQueueExecutorFactory implements ThreadPoolExecutorFactory<ManageableThreadPoolExecutorService> {\n+   private final int maxThreads;\n+   private final int coreThreads;\n+   private final int queueLength;\n+   private final long keepAlive;\n+\n+   public EnhancedQueueExecutorFactory(int maxThreads, int coreThreads, int queueLength, long keepAlive, boolean nonBlocking) {\n+      if (nonBlocking) {\n+         throw new UnsupportedOperationException(\"EnhancedQueryExecutorFactory only supports blocking threads currently!\");\n+      }\n+      this.maxThreads = maxThreads;\n+      this.coreThreads = coreThreads;\n+      this.queueLength = queueLength;\n+      this.keepAlive = keepAlive;\n+   }\n+\n+   public int maxThreads() {\n+      return maxThreads;\n+   }\n+\n+   public int coreThreads() {\n+      return coreThreads;\n+   }\n+\n+   public int queueLength() {\n+      return queueLength;\n+   }\n+\n+   public long keepAlive() {\n+      return keepAlive;\n+   }\n+\n+   public static EnhancedQueueExecutorFactory create(int maxThreads, int queueSize, boolean nonBlocking) {\n+      int coreThreads = queueSize == 0 ? 1 : maxThreads;\n+      return new EnhancedQueueExecutorFactory(maxThreads, coreThreads, queueSize,\n+            BlockingThreadPoolExecutorFactory.DEFAULT_KEEP_ALIVE_MILLIS, nonBlocking);\n+   }\n+\n+   @Override\n+   public ManageableThreadPoolExecutorService createExecutor(ThreadFactory factory) {\n+      if (!(factory instanceof BlockingResource)) {\n+         throw new IllegalStateException(\"Executor factory configured to be blocking and received a thread\" +\n+               \" factory that doesn't create blocking threads!\");\n+      }\n+      EnhancedQueueExecutor.Builder builder = new EnhancedQueueExecutor.Builder();\n+      builder.setThreadFactory(factory);\n+      builder.setCorePoolSize(coreThreads);\n+      builder.setMaximumPoolSize(maxThreads);\n+      builder.setGrowthResistance(0.0f);\n+      builder.setMaximumQueueSize(queueLength);\n+      builder.setKeepAliveTime(Duration.of(keepAlive, ChronoUnit.MILLIS));\n+\n+      EnhancedQueueExecutor enhancedQueueExecutor = builder.build();\n+      enhancedQueueExecutor.setHandoffExecutor(task ->\n+         BlockingRejectedExecutionHandler.getInstance().rejectedExecution(task, enhancedQueueExecutor));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4Nzc3Nw=="}, "originalCommit": {"oid": "8a513061b1650c3294479f627eda1d5772d80afe"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTI1MDI4OnYy", "diffSide": "RIGHT", "path": "remote-query/remote-query-server/src/test/java/org/infinispan/query/remote/impl/ProtobufMetadataManagerInterceptorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyMjoyMVrOGpsJag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyMjoyMVrOGpsJag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2ODEwNg==", "bodyText": "Should be private, TestNG thinks it's a test method\nhttps://ci.infinispan.org/job/Infinispan/job/PR-8494/13/testReport/junit/org.infinispan.query.remote.impl/ProtobufMetadataManagerInterceptorTest/waitForNoLocks/", "url": "https://github.com/infinispan/infinispan/pull/8494#discussion_r446368106", "createdAt": "2020-06-26T19:22:21Z", "author": {"login": "danberindei"}, "path": "remote-query/remote-query-server/src/test/java/org/infinispan/query/remote/impl/ProtobufMetadataManagerInterceptorTest.java", "diffHunk": "@@ -318,7 +319,22 @@ public void testStateTransfer() {\n \n    private void assertNoTransactionsAndLocks() {\n       assertNoTransactions();\n-      TestingUtil.assertNoLocks(cache(0));\n-      TestingUtil.assertNoLocks(cache(1));\n+      waitForNoLocks(cache(0));\n+      waitForNoLocks(cache(1));\n+   }\n+\n+   public void waitForNoLocks(Cache<?, ?> cache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6194c87f03721bf7aba0617b82a60aa6fe2397b6"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4090, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}