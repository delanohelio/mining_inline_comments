{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMzMzNzI5", "number": 8554, "reviewThreads": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjozOToyNVrOEPNj5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1OTo1MlrOEXnZ6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Mzg2Mjc2OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjozOToyNVrOGyzS2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTozODoyNlrOG0z_7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMjM5NA==", "bodyText": "@gustavonalle is this still correct for Hot Rod clients or should it change to ProtoStream?", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r455922394", "createdAt": "2020-07-16T16:39:25Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "diffHunk": "@@ -0,0 +1,25 @@\n+[id='using_text_based_storage-{context}']\n+= Using Text-Based Formats for Data\n+You can configure {brandname} to encode data in text-based formats such as\n+`text/plain`, `application/json`, or `application/xml`.\n+\n+.Procedure\n+\n+. Specify a text-based storage format as the MediaType for keys and values.\n+. Optionally specify a character set such as `UTF-8`.\n++\n+The following example configures {brandname} to store entries with the `text/plain; charset=UTF-8` format:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_text_plain.xml[]\n+----\n++\n+. Configure your clients.\n+\n+Hot Rod clients should use the `org.infinispan.commons.marshall.StringMarshaller` marshaller to handle data in text-based formats.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a862e35aaabf1d4a7011ad1faa517b3aa1e683"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3MTM5Mg==", "bodyText": "@ryanemerson same question here, please. for text-based formats should we change StringMarshaller to ProtoStream?", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r457971392", "createdAt": "2020-07-21T09:44:01Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "diffHunk": "@@ -0,0 +1,25 @@\n+[id='using_text_based_storage-{context}']\n+= Using Text-Based Formats for Data\n+You can configure {brandname} to encode data in text-based formats such as\n+`text/plain`, `application/json`, or `application/xml`.\n+\n+.Procedure\n+\n+. Specify a text-based storage format as the MediaType for keys and values.\n+. Optionally specify a character set such as `UTF-8`.\n++\n+The following example configures {brandname} to store entries with the `text/plain; charset=UTF-8` format:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_text_plain.xml[]\n+----\n++\n+. Configure your clients.\n+\n+Hot Rod clients should use the `org.infinispan.commons.marshall.StringMarshaller` marshaller to handle data in text-based formats.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMjM5NA=="}, "originalCommit": {"oid": "f4a862e35aaabf1d4a7011ad1faa517b3aa1e683"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3Njk4MQ==", "bodyText": "I'm not sure what use-case string based is trying to appeal to. If it's simply getting something working as simple as possible, then the StringMarshaller is the way to go. Protostream is more flexible, but for text based it has to be JSON and the user has to provide/generate protostream marshallers and a schema, so it's a lot more involved.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r457976981", "createdAt": "2020-07-21T09:53:59Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "diffHunk": "@@ -0,0 +1,25 @@\n+[id='using_text_based_storage-{context}']\n+= Using Text-Based Formats for Data\n+You can configure {brandname} to encode data in text-based formats such as\n+`text/plain`, `application/json`, or `application/xml`.\n+\n+.Procedure\n+\n+. Specify a text-based storage format as the MediaType for keys and values.\n+. Optionally specify a character set such as `UTF-8`.\n++\n+The following example configures {brandname} to store entries with the `text/plain; charset=UTF-8` format:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_text_plain.xml[]\n+----\n++\n+. Configure your clients.\n+\n+Hot Rod clients should use the `org.infinispan.commons.marshall.StringMarshaller` marshaller to handle data in text-based formats.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMjM5NA=="}, "originalCommit": {"oid": "f4a862e35aaabf1d4a7011ad1faa517b3aa1e683"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMTQxMw==", "bodyText": "hey @ryanemerson awesome. this helps clear it up a little for me. I've reworded to include some of this detail. IMO we should include ProtoStream in here too for consistency. also, when you say \"Protostream is more flexible\" - I take this to mean that you're pretty much restricted to string-based if you use StringMarshaller. that might not make much sense for Hot Rod clients. so if you want text + binary use ProtoStream. but, in this case, text means you must use the application/json mediatype.\ndoes that sound right?", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r458001413", "createdAt": "2020-07-21T10:38:31Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "diffHunk": "@@ -0,0 +1,25 @@\n+[id='using_text_based_storage-{context}']\n+= Using Text-Based Formats for Data\n+You can configure {brandname} to encode data in text-based formats such as\n+`text/plain`, `application/json`, or `application/xml`.\n+\n+.Procedure\n+\n+. Specify a text-based storage format as the MediaType for keys and values.\n+. Optionally specify a character set such as `UTF-8`.\n++\n+The following example configures {brandname} to store entries with the `text/plain; charset=UTF-8` format:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_text_plain.xml[]\n+----\n++\n+. Configure your clients.\n+\n+Hot Rod clients should use the `org.infinispan.commons.marshall.StringMarshaller` marshaller to handle data in text-based formats.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMjM5NA=="}, "originalCommit": {"oid": "f4a862e35aaabf1d4a7011ad1faa517b3aa1e683"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzMTA4Nw==", "bodyText": "I take this to mean that you're pretty much restricted to string-based if you use StringMarshaller. that might not make much sense for Hot Rod clients.\n\nExactly.\n\nso if you want text + binary use ProtoStream. but, in this case, text means you must use the application/json mediatype.\n\nI was actually wrong on this. You can still specify [text/plain, application/json, application/x-java-object, application/octet-stream]  media types and transcoding will handle it, as it converts the value to a Java object if possible and then marshalls this using Protostream. XML is not supported though.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r458031087", "createdAt": "2020-07-21T11:38:26Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "diffHunk": "@@ -0,0 +1,25 @@\n+[id='using_text_based_storage-{context}']\n+= Using Text-Based Formats for Data\n+You can configure {brandname} to encode data in text-based formats such as\n+`text/plain`, `application/json`, or `application/xml`.\n+\n+.Procedure\n+\n+. Specify a text-based storage format as the MediaType for keys and values.\n+. Optionally specify a character set such as `UTF-8`.\n++\n+The following example configures {brandname} to store entries with the `text/plain; charset=UTF-8` format:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_text_plain.xml[]\n+----\n++\n+. Configure your clients.\n+\n+Hot Rod clients should use the `org.infinispan.commons.marshall.StringMarshaller` marshaller to handle data in text-based formats.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMjM5NA=="}, "originalCommit": {"oid": "f4a862e35aaabf1d4a7011ad1faa517b3aa1e683"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Mzg2NzkyOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjo0MDo0NFrOGyzWPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo1NzoxOVrOG2FnHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMzI2MA==", "bodyText": "@gustavonalle should we list all the marshaller options here? what about Kyro and ProtoStuff?", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r455923260", "createdAt": "2020-07-16T16:40:44Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+[id='storing_binary_objects-{context}']\n+= Storing Java Objects in Binary Format\n+Java Hot Rod clients can handle Java objects that represent entities and\n+perform marshalling to serialize and deserialize objects into `byte[]` arrays.\n+C{plusplus}, C#, and Javascript Hot Rod clients can also handle objects in the\n+respective languages.\n+\n+If you store entries in the cache as marshalled Java objects, you should configure the cache with the MediaType of the marshalled storage.\n+\n+.Procedure\n+\n+. Specify the MediaType that matches your marshaller implementation.\n++\n+* Protostream marshaller: Configure the MediaType as `application/x-protostream`.\n+* JBoss marshalling: Configure the MediaType as `application/x-jboss-marshalling`.\n+* StringMarshaller: Configure the MediaType as `text/plain`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a862e35aaabf1d4a7011ad1faa517b3aa1e683"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3MDMxNw==", "bodyText": "@ryanemerson perhaps I should ask you this question too. here we list protostream, jboss marshalling, and the string marshaller. should we include kyro and protostuff?", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r457970317", "createdAt": "2020-07-21T09:42:07Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+[id='storing_binary_objects-{context}']\n+= Storing Java Objects in Binary Format\n+Java Hot Rod clients can handle Java objects that represent entities and\n+perform marshalling to serialize and deserialize objects into `byte[]` arrays.\n+C{plusplus}, C#, and Javascript Hot Rod clients can also handle objects in the\n+respective languages.\n+\n+If you store entries in the cache as marshalled Java objects, you should configure the cache with the MediaType of the marshalled storage.\n+\n+.Procedure\n+\n+. Specify the MediaType that matches your marshaller implementation.\n++\n+* Protostream marshaller: Configure the MediaType as `application/x-protostream`.\n+* JBoss marshalling: Configure the MediaType as `application/x-jboss-marshalling`.\n+* StringMarshaller: Configure the MediaType as `text/plain`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMzI2MA=="}, "originalCommit": {"oid": "f4a862e35aaabf1d4a7011ad1faa517b3aa1e683"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3Nzk4NQ==", "bodyText": "I don't think so, as we don't have clear documentation on what would be required to get these working on the server-side. Tbh they haven't had any attention since they were implemented from us or users AFAIK. IMO I think we should deprecate them \\cc @tristantarrant.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r457977985", "createdAt": "2020-07-21T09:55:32Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+[id='storing_binary_objects-{context}']\n+= Storing Java Objects in Binary Format\n+Java Hot Rod clients can handle Java objects that represent entities and\n+perform marshalling to serialize and deserialize objects into `byte[]` arrays.\n+C{plusplus}, C#, and Javascript Hot Rod clients can also handle objects in the\n+respective languages.\n+\n+If you store entries in the cache as marshalled Java objects, you should configure the cache with the MediaType of the marshalled storage.\n+\n+.Procedure\n+\n+. Specify the MediaType that matches your marshaller implementation.\n++\n+* Protostream marshaller: Configure the MediaType as `application/x-protostream`.\n+* JBoss marshalling: Configure the MediaType as `application/x-jboss-marshalling`.\n+* StringMarshaller: Configure the MediaType as `text/plain`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMzI2MA=="}, "originalCommit": {"oid": "f4a862e35aaabf1d4a7011ad1faa517b3aa1e683"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0OTczNg==", "bodyText": "There's also the vanilla java serialization: application/x-java-serialized-object\nRegarding Kryo and protostuff, there is no transcoder for them currently, so conversions won't work", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r458049736", "createdAt": "2020-07-21T12:14:20Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+[id='storing_binary_objects-{context}']\n+= Storing Java Objects in Binary Format\n+Java Hot Rod clients can handle Java objects that represent entities and\n+perform marshalling to serialize and deserialize objects into `byte[]` arrays.\n+C{plusplus}, C#, and Javascript Hot Rod clients can also handle objects in the\n+respective languages.\n+\n+If you store entries in the cache as marshalled Java objects, you should configure the cache with the MediaType of the marshalled storage.\n+\n+.Procedure\n+\n+. Specify the MediaType that matches your marshaller implementation.\n++\n+* Protostream marshaller: Configure the MediaType as `application/x-protostream`.\n+* JBoss marshalling: Configure the MediaType as `application/x-jboss-marshalling`.\n+* StringMarshaller: Configure the MediaType as `text/plain`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMzI2MA=="}, "originalCommit": {"oid": "f4a862e35aaabf1d4a7011ad1faa517b3aa1e683"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MTAxNQ==", "bodyText": "@ryanemerson and @gustavonalle should kryo and protostuff be in docs for community only?", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r458161015", "createdAt": "2020-07-21T14:54:13Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+[id='storing_binary_objects-{context}']\n+= Storing Java Objects in Binary Format\n+Java Hot Rod clients can handle Java objects that represent entities and\n+perform marshalling to serialize and deserialize objects into `byte[]` arrays.\n+C{plusplus}, C#, and Javascript Hot Rod clients can also handle objects in the\n+respective languages.\n+\n+If you store entries in the cache as marshalled Java objects, you should configure the cache with the MediaType of the marshalled storage.\n+\n+.Procedure\n+\n+. Specify the MediaType that matches your marshaller implementation.\n++\n+* Protostream marshaller: Configure the MediaType as `application/x-protostream`.\n+* JBoss marshalling: Configure the MediaType as `application/x-jboss-marshalling`.\n+* StringMarshaller: Configure the MediaType as `text/plain`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMzI2MA=="}, "originalCommit": {"oid": "f4a862e35aaabf1d4a7011ad1faa517b3aa1e683"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2ODIyMg==", "bodyText": "Yes", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r459368222", "createdAt": "2020-07-23T10:57:19Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+[id='storing_binary_objects-{context}']\n+= Storing Java Objects in Binary Format\n+Java Hot Rod clients can handle Java objects that represent entities and\n+perform marshalling to serialize and deserialize objects into `byte[]` arrays.\n+C{plusplus}, C#, and Javascript Hot Rod clients can also handle objects in the\n+respective languages.\n+\n+If you store entries in the cache as marshalled Java objects, you should configure the cache with the MediaType of the marshalled storage.\n+\n+.Procedure\n+\n+. Specify the MediaType that matches your marshaller implementation.\n++\n+* Protostream marshaller: Configure the MediaType as `application/x-protostream`.\n+* JBoss marshalling: Configure the MediaType as `application/x-jboss-marshalling`.\n+* StringMarshaller: Configure the MediaType as `text/plain`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMzI2MA=="}, "originalCommit": {"oid": "f4a862e35aaabf1d4a7011ad1faa517b3aa1e683"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Mzg4Nzk0OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_using_multiple_storage_formats.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjo0NjoxMlrOGyzjHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDo0NToyNVrOG07gkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyNjU1Ng==", "bodyText": "@gustavonalle I think this code example needs to be updated.\nplease correct my understanding but could we update the example to show application/x-protostream instead of application/x-java-object in the ConfigurationBuilder? then show application/x-java-object as the override?", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r455926556", "createdAt": "2020-07-16T16:46:12Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/proc_using_multiple_storage_formats.adoc", "diffHunk": "@@ -0,0 +1,29 @@\n+[id='mediatype_override-{context}']\n+= Using Multiple Storage Formats for Custom Code\n+You can deploy and run custom code on {brandname}, such as tasks, listeners,\n+and merge policies. Custom code on {brandname} can directly access data but \n+must also interoperate with clients that access the same data through different\n+endpoints. For example, you can create tasks that handle custom objects while\n+Hot Rod clients read and write data in binary format.\n+\n+In this case, you can configure `application/x-protostream` as the cache\n+encoding to store data in binary format then configure your custom code to\n+perform cache operations using a different MediaType.\n+\n+For example:\n+\n+[source,java]\n+----\n+include::code_examples/EncodeMediaTypeOverride.java[]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a862e35aaabf1d4a7011ad1faa517b3aa1e683"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA1ODYwOA==", "bodyText": "This section was not part of the protocol interoperability? I need to check the context where it is inserted then I will let you know", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r458058608", "createdAt": "2020-07-21T12:30:36Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_using_multiple_storage_formats.adoc", "diffHunk": "@@ -0,0 +1,29 @@\n+[id='mediatype_override-{context}']\n+= Using Multiple Storage Formats for Custom Code\n+You can deploy and run custom code on {brandname}, such as tasks, listeners,\n+and merge policies. Custom code on {brandname} can directly access data but \n+must also interoperate with clients that access the same data through different\n+endpoints. For example, you can create tasks that handle custom objects while\n+Hot Rod clients read and write data in binary format.\n+\n+In this case, you can configure `application/x-protostream` as the cache\n+encoding to store data in binary format then configure your custom code to\n+perform cache operations using a different MediaType.\n+\n+For example:\n+\n+[source,java]\n+----\n+include::code_examples/EncodeMediaTypeOverride.java[]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyNjU1Ng=="}, "originalCommit": {"oid": "f4a862e35aaabf1d4a7011ad1faa517b3aa1e683"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE1NDEzMQ==", "bodyText": "thanks @gustavonalle tbh I find this topic is a little confusing. what I've been trying to do in this PR is separate the details about mediatype encoding into distinct procedures.\nin the current docs, mediatype configuration is included in the section about encoders/transcoders. IMO those details are a little advanced and can make it difficult to understand for users who are trying to get up and running. so I think it makes sense to move the procedure for configuring mediatypes to the protocol interoperability section. maybe we should move this back to the encoding section as well if it's for more advanced cases.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r458154131", "createdAt": "2020-07-21T14:45:25Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/proc_using_multiple_storage_formats.adoc", "diffHunk": "@@ -0,0 +1,29 @@\n+[id='mediatype_override-{context}']\n+= Using Multiple Storage Formats for Custom Code\n+You can deploy and run custom code on {brandname}, such as tasks, listeners,\n+and merge policies. Custom code on {brandname} can directly access data but \n+must also interoperate with clients that access the same data through different\n+endpoints. For example, you can create tasks that handle custom objects while\n+Hot Rod clients read and write data in binary format.\n+\n+In this case, you can configure `application/x-protostream` as the cache\n+encoding to store data in binary format then configure your custom code to\n+perform cache operations using a different MediaType.\n+\n+For example:\n+\n+[source,java]\n+----\n+include::code_examples/EncodeMediaTypeOverride.java[]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyNjU1Ng=="}, "originalCommit": {"oid": "f4a862e35aaabf1d4a7011ad1faa517b3aa1e683"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzU5NzI3OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/code_examples/MaxSizeMemory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODozNTowN1rOG0t2uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTo0ODowNVrOG0wf0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzMDQyNQ==", "bodyText": "EvictionStrategy.REMOVE. The method does not accept a string, only the EvictionStategy enum as an argument.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r457930425", "createdAt": "2020-07-21T08:35:07Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/code_examples/MaxSizeMemory.java", "diffHunk": "@@ -0,0 +1,9 @@\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .encoding()\n+    .mediaType(\"application/x-protostream\")\n+  .memory()\n+    .maxSize(\"1.5GB\")\n+    .whenFull(\"REMOVE\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a83ca8d1c70fd6e1619d1fee5b5afe0e0e21e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2MTA2Ng==", "bodyText": "good catch, thanks. I even have that elsewhere in the docs. I should RTFM myself...", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r457961066", "createdAt": "2020-07-21T09:26:28Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/code_examples/MaxSizeMemory.java", "diffHunk": "@@ -0,0 +1,9 @@\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .encoding()\n+    .mediaType(\"application/x-protostream\")\n+  .memory()\n+    .maxSize(\"1.5GB\")\n+    .whenFull(\"REMOVE\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzMDQyNQ=="}, "originalCommit": {"oid": "804a83ca8d1c70fd6e1619d1fee5b5afe0e0e21e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2MzQ4OQ==", "bodyText": "This is where compiling code examples would really come in handy.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r457963489", "createdAt": "2020-07-21T09:30:21Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/code_examples/MaxSizeMemory.java", "diffHunk": "@@ -0,0 +1,9 @@\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .encoding()\n+    .mediaType(\"application/x-protostream\")\n+  .memory()\n+    .maxSize(\"1.5GB\")\n+    .whenFull(\"REMOVE\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzMDQyNQ=="}, "originalCommit": {"oid": "804a83ca8d1c70fd6e1619d1fee5b5afe0e0e21e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3MzcxNA==", "bodyText": "indeed. one day... I've made a couple of attempts with jbang but I think I'm going to need someone with better java skillz. (wink, wink).", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r457973714", "createdAt": "2020-07-21T09:48:05Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/code_examples/MaxSizeMemory.java", "diffHunk": "@@ -0,0 +1,9 @@\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .encoding()\n+    .mediaType(\"application/x-protostream\")\n+  .memory()\n+    .maxSize(\"1.5GB\")\n+    .whenFull(\"REMOVE\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzMDQyNQ=="}, "originalCommit": {"oid": "804a83ca8d1c70fd6e1619d1fee5b5afe0e0e21e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzYxMzEzOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODozOTozMVrOG0uApQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTozOTo1OVrOG0wNkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzMjk2NQ==", "bodyText": "This is the \"user marshaller\" as it's only concerned with user key/values. The global marshaller is what we use internally for Infinispan classes.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r457932965", "createdAt": "2020-07-21T08:39:31Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+[id='storing_binary_objects-{context}']\n+= Storing Java Objects in Binary Format\n+Java Hot Rod clients can handle Java objects that represent entities and\n+perform marshalling to serialize and deserialize objects into `byte[]` arrays.\n+C{plusplus}, C#, and Javascript Hot Rod clients can also handle objects in the\n+respective languages.\n+\n+If you store entries in the cache as marshalled Java objects, you should configure the cache with the MediaType of the marshalled storage.\n+\n+.Procedure\n+\n+. Specify the MediaType that matches your marshaller implementation.\n++\n+* Protostream marshaller: Configure the MediaType as `application/x-protostream`.\n+* JBoss marshalling: Configure the MediaType as `application/x-jboss-marshalling`.\n+* StringMarshaller: Configure the MediaType as `text/plain`.\n++\n+[NOTE]\n+====\n+Alternatively, you can define a global marshaller with the `serialization`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a83ca8d1c70fd6e1619d1fee5b5afe0e0e21e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2OTA0Mg==", "bodyText": "thanks @ryanemerson that's a good clarification. can you please confirm the changes I made?", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r457969042", "createdAt": "2020-07-21T09:39:59Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+[id='storing_binary_objects-{context}']\n+= Storing Java Objects in Binary Format\n+Java Hot Rod clients can handle Java objects that represent entities and\n+perform marshalling to serialize and deserialize objects into `byte[]` arrays.\n+C{plusplus}, C#, and Javascript Hot Rod clients can also handle objects in the\n+respective languages.\n+\n+If you store entries in the cache as marshalled Java objects, you should configure the cache with the MediaType of the marshalled storage.\n+\n+.Procedure\n+\n+. Specify the MediaType that matches your marshaller implementation.\n++\n+* Protostream marshaller: Configure the MediaType as `application/x-protostream`.\n+* JBoss marshalling: Configure the MediaType as `application/x-jboss-marshalling`.\n+* StringMarshaller: Configure the MediaType as `text/plain`.\n++\n+[NOTE]\n+====\n+Alternatively, you can define a global marshaller with the `serialization`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzMjk2NQ=="}, "originalCommit": {"oid": "804a83ca8d1c70fd6e1619d1fee5b5afe0e0e21e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzYxODExOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_storing_pojos.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODo0MDo1NFrOG0uDvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODo0MDo1NFrOG0uDvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzMzc1OQ==", "bodyText": "Ideally the default, which is ProtoStream.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r457933759", "createdAt": "2020-07-21T08:40:54Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_pojos.adoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[id='storing_pojos-{context}']\n+= Storing Deserialized Objects\n+You can store data as unmarshalled, Plain Old Java Objects (POJO) instead of\n+storing data in a binary format. However, this is not recommended because it\n+requires {brandname} to serialize data on client read operations and\n+deserialize data on write operations.\n+\n+.Procedure\n+\n+. Specify `application/x-java-object as the MediaType for keys and values as follows:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_java_object.xml[]\n+----\n++\n+. Put class files for all custom objects on the {brandname} server classpath.\n++\n+Add JAR files that contain custom classes and/or service providers for\n+marshaller implementations in the `server/lib` directory.\n++\n+----\n+\u251c\u2500\u2500 server\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib\n+\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 UserObjects.jar\n+\u2502\u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 README.txt\n+----\n++\n+. Configure your clients.\n+\n+Hot Rod clients must use a marshaller to handle POJOs, either the JBoss marshaller or the Java serialization mechanism.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a83ca8d1c70fd6e1619d1fee5b5afe0e0e21e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzkwMzM1OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTo1NzowNFrOG0w0HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTo1NzowNFrOG0w0HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3ODkwOQ==", "bodyText": "\"of the defined marshaller\"?", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r457978909", "createdAt": "2020-07-21T09:57:04Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "diffHunk": "@@ -0,0 +1,43 @@\n+[id='storing_binary_objects-{context}']\n+= Storing Java Objects in Binary Format\n+Java Hot Rod clients can handle Java objects that represent entities and\n+perform marshalling to serialize and deserialize objects into `byte[]` arrays.\n+C{plusplus}, C#, and Javascript Hot Rod clients can also handle objects in the\n+respective languages.\n+\n+If you store entries in the cache as marshalled Java objects, you should configure the cache with the MediaType of the marshalled storage.\n+\n+.Procedure\n+\n+. Specify the MediaType that matches your marshaller implementation.\n++\n+* Protostream marshaller: Configure the MediaType as `application/x-protostream`.\n+* JBoss marshalling: Configure the MediaType as `application/x-jboss-marshalling`.\n+* StringMarshaller: Configure the MediaType as `text/plain`.\n++\n+[NOTE]\n+====\n+Alternatively, you can declaratively configure the marshaller with the\n+`serialization` element or invoke the `serialization()` method in the\n+`GlobalConfigurationBuilder` class. When you configure the marshaller in this\n+way, {brandname} uses the MediaType for the defined marshaller to encode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2fd7180e0d7c41fee40869670ff85027d5133ac"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODMxNTA3OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/stories/assembly_interoperability_remote_clients.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo1OTozNlrOG00rBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDo1NTo0NlrOG08AXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0MjExNg==", "bodyText": "Concurrently gives the impression of threading, what about saying?\nDefine a storage format for your data so you can use the same cache from the\n{brandname} Console, REST clients, and Hot Rod clients", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r458042116", "createdAt": "2020-07-21T11:59:36Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/stories/assembly_interoperability_remote_clients.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+[id='endpoint_interop']\n+:context: data\n+= Configuring Storage Formats for Remote Client Interoperability\n+Define a storage format for your data so you can operate on entries from the\n+{brandname} Console, REST clients, and Hot Rod clients concurrently.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20cbe3c06aa08cbb3f5e5481a9cb2dd83ce2921d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MjI3MQ==", "bodyText": "sounds good. thx.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r458162271", "createdAt": "2020-07-21T14:55:46Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/stories/assembly_interoperability_remote_clients.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+[id='endpoint_interop']\n+:context: data\n+= Configuring Storage Formats for Remote Client Interoperability\n+Define a storage format for your data so you can operate on entries from the\n+{brandname} Console, REST clients, and Hot Rod clients concurrently.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0MjExNg=="}, "originalCommit": {"oid": "20cbe3c06aa08cbb3f5e5481a9cb2dd83ce2921d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODMyODEwOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/con_client_interoperability.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjowMzo0MVrOG00zEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjowMzo0MVrOG00zEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0NDE3OQ==", "bodyText": "I am having second thoughts on this. If the cache stores a random text in UTF-8, it should be readable from other clients such as node.js and C#. So this is a Y", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r458044179", "createdAt": "2020-07-21T12:03:41Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/con_client_interoperability.adoc", "diffHunk": "@@ -0,0 +1,87 @@\n+[id='storage_formats_client_interop-{context}']\n+= Storage Formats and Client Interoperability\n+HTTP and Hot Rod protocols are designed to handle data in different formats.\n+For example, Hot Rod is designed to send and receive binary data while REST\n+clients are best suited for handling text-based formats such as JSON, XML, or\n+plain text.\n+\n+By configuring the MediaType for keys and values, you describe the data format\n+of the cache. {brandname} can then convert data on the fly during cache\n+operations.\n+\n+If you want to use the {brandname} Console, Hot Rod clients, and REST clients\n+interchangeably when operating on data, you should configure caches to use the\n+Protobuf storage format.\n+\n+Storing data in other formats affects client interoperability and {brandname}\n+capabilities, as follows:\n+\n+.Protobuf Storage\n+[%header,cols=2*]\n+|===\n+2+| Protobuf storage is suitable for...\n+| {brandname} Console\n+| Yes\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| Yes\n+| {brandname} Search\n+| Yes\n+| Custom Java objects\n+| Yes\n+|===\n+\n+.Text-Based Storage\n+[%header,cols=2*]\n+|===\n+2+| Text-based storage formats are suitable for...\n+| {brandname} Console\n+| Yes\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| No", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20cbe3c06aa08cbb3f5e5481a9cb2dd83ce2921d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODMzMjk1OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/con_client_interoperability.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjowNToxNVrOG002Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjowNToxNVrOG002Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0NDk0Nw==", "bodyText": "Let's be more specific here, saying \"Marshalled Java Objects\"", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r458044947", "createdAt": "2020-07-21T12:05:15Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/con_client_interoperability.adoc", "diffHunk": "@@ -0,0 +1,87 @@\n+[id='storage_formats_client_interop-{context}']\n+= Storage Formats and Client Interoperability\n+HTTP and Hot Rod protocols are designed to handle data in different formats.\n+For example, Hot Rod is designed to send and receive binary data while REST\n+clients are best suited for handling text-based formats such as JSON, XML, or\n+plain text.\n+\n+By configuring the MediaType for keys and values, you describe the data format\n+of the cache. {brandname} can then convert data on the fly during cache\n+operations.\n+\n+If you want to use the {brandname} Console, Hot Rod clients, and REST clients\n+interchangeably when operating on data, you should configure caches to use the\n+Protobuf storage format.\n+\n+Storing data in other formats affects client interoperability and {brandname}\n+capabilities, as follows:\n+\n+.Protobuf Storage\n+[%header,cols=2*]\n+|===\n+2+| Protobuf storage is suitable for...\n+| {brandname} Console\n+| Yes\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| Yes\n+| {brandname} Search\n+| Yes\n+| Custom Java objects\n+| Yes\n+|===\n+\n+.Text-Based Storage\n+[%header,cols=2*]\n+|===\n+2+| Text-based storage formats are suitable for...\n+| {brandname} Console\n+| Yes\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| No\n+| {brandname} Search\n+| No\n+| Custom Java objects\n+| No\n+|===\n+\n+.Custom Java Objects", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20cbe3c06aa08cbb3f5e5481a9cb2dd83ce2921d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODMzNTE3OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/con_client_interoperability.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjowNTo1NFrOG003YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjowNTo1NFrOG003YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0NTI4MQ==", "bodyText": "please add \"and  make the classes available in the server\"", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r458045281", "createdAt": "2020-07-21T12:05:54Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/con_client_interoperability.adoc", "diffHunk": "@@ -0,0 +1,87 @@\n+[id='storage_formats_client_interop-{context}']\n+= Storage Formats and Client Interoperability\n+HTTP and Hot Rod protocols are designed to handle data in different formats.\n+For example, Hot Rod is designed to send and receive binary data while REST\n+clients are best suited for handling text-based formats such as JSON, XML, or\n+plain text.\n+\n+By configuring the MediaType for keys and values, you describe the data format\n+of the cache. {brandname} can then convert data on the fly during cache\n+operations.\n+\n+If you want to use the {brandname} Console, Hot Rod clients, and REST clients\n+interchangeably when operating on data, you should configure caches to use the\n+Protobuf storage format.\n+\n+Storing data in other formats affects client interoperability and {brandname}\n+capabilities, as follows:\n+\n+.Protobuf Storage\n+[%header,cols=2*]\n+|===\n+2+| Protobuf storage is suitable for...\n+| {brandname} Console\n+| Yes\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| Yes\n+| {brandname} Search\n+| Yes\n+| Custom Java objects\n+| Yes\n+|===\n+\n+.Text-Based Storage\n+[%header,cols=2*]\n+|===\n+2+| Text-based storage formats are suitable for...\n+| {brandname} Console\n+| Yes\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| No\n+| {brandname} Search\n+| No\n+| Custom Java objects\n+| No\n+|===\n+\n+.Custom Java Objects\n+[%header,cols=2*]\n+|===\n+2+| Custom Java objects are compatible with...\n+| {brandname} Console\n+| No\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| No\n+| {brandname} Search\n+| No\n+|===\n+\n+.Plain Old Java Objects (POJO)\n+[%header,cols=2*]\n+|===\n+2+| POJOs are not recommended but compatible with...\n+| {brandname} Console\n+| No\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| No\n+| {brandname} Search\n+| Yes. However, you must annotate entities to search with POJOs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20cbe3c06aa08cbb3f5e5481a9cb2dd83ce2921d"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODM0Mzg5OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_protobuf_encoding.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjowODoyNVrOG008vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjowODoyNVrOG008vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0NjY1Mg==", "bodyText": "Suggestion:\n{brandname} supports converions between `application/x-protostream` and\n`application/json` so that REST clients can read and write JSON formatted data.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r458046652", "createdAt": "2020-07-21T12:08:25Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_protobuf_encoding.adoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[id='configuring_protobuf_encoding-{context}']\n+= Using Protobuf Encoding for Data\n+Storing data in the cache as Protobuf encoded entries provides a platform\n+independent configuration that enables you to perform cache operations from any\n+client.\n+\n+.Procedure\n+\n+. Specify `application/x-protostream` as the MediaType for keys and values as follows:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_protostream.xml[]\n+----\n++\n+[NOTE]\n+====\n+When you configure indexing, {brandname} automatically stores keys and values\n+with the `application/x-protostream` media type.\n+====\n++\n+. Configure your clients.\n+\n+For Hot Rod clients, you must register Protocol Buffers schema definitions to\n+describe the entities and marshallers that the clients use.\n+\n+{brandname} automatically converts between `application/x-protostream` and\n+`application/json` so that REST clients can read and write JSON formatted data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20cbe3c06aa08cbb3f5e5481a9cb2dd83ce2921d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODM1NDAyOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjoxMToyOFrOG01DFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjoxMToyOFrOG01DFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0ODI3OQ==", "bodyText": "Some nuance here: for text based format, protostream can also be used without registering proto files :)", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r458048279", "createdAt": "2020-07-21T12:11:28Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "diffHunk": "@@ -0,0 +1,28 @@\n+[id='using_text_based_storage-{context}']\n+= Using Text-Based Formats for Data\n+You can configure {brandname} to encode data in text-based formats such as\n+`text/plain`, `application/json`, or `application/xml`.\n+\n+.Procedure\n+\n+. Specify a text-based storage format as the MediaType for keys and values.\n+. Optionally specify a character set such as `UTF-8`.\n++\n+The following example configures {brandname} to store entries with the `text/plain; charset=UTF-8` format:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_text_plain.xml[]\n+----\n++\n+. Configure your clients.\n+\n+Hot Rod clients can use the\n+\n+* `org.infinispan.commons.marshall.StringMarshaller` handles plain text, JSON, XML, or any other text-based format.\n+* ProtoStream can handle JSON only but offers more flexibility for storing data in binary format. However, you must create Serialization Contexts and provide Protobuf schemas (`.proto` files) to use ProtoStream.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20cbe3c06aa08cbb3f5e5481a9cb2dd83ce2921d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDYzNzM1OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/con_client_interoperability.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTo0Mzo1MlrOG1xkgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTo0Mzo1MlrOG1xkgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzOTg3NQ==", "bodyText": "I would add a link to the transcoder section, to clarify that \"can\".", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r459039875", "createdAt": "2020-07-22T19:43:52Z", "author": {"login": "rgordill"}, "path": "documentation/src/main/asciidoc/topics/con_client_interoperability.adoc", "diffHunk": "@@ -0,0 +1,87 @@\n+[id='storage_formats_client_interop-{context}']\n+= Storage Formats and Client Interoperability\n+HTTP and Hot Rod protocols are designed to handle data in different formats.\n+For example, Hot Rod is designed to send and receive binary data while REST\n+clients are best suited for handling text-based formats such as JSON, XML, or\n+plain text.\n+\n+By configuring the MediaType for keys and values, you describe the data format\n+of the cache. {brandname} can then convert data on the fly during cache\n+operations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "079f33eaafcd39ff46856c2cd716100817f65aec"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjEwODMzOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/con_client_interoperability.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyODo0MFrOG3YmUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzo0NToyMlrOG3jIOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyNzg4OQ==", "bodyText": "This link seems dead", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460727889", "createdAt": "2020-07-27T08:28:40Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/con_client_interoperability.adoc", "diffHunk": "@@ -0,0 +1,91 @@\n+[id='storage_formats_client_interop-{context}']\n+= Storage Formats and Client Interoperability\n+HTTP and Hot Rod protocols are designed to handle data in different formats.\n+For example, Hot Rod is designed to send and receive binary data while REST\n+clients are best suited for handling text-based formats such as JSON, XML, or\n+plain text.\n+\n+By configuring the MediaType for keys and values, you describe the data format\n+of the cache. {brandname} can then convert data on the fly during cache\n+operations.\n+\n+If you want to use the {brandname} Console, Hot Rod clients, and REST clients\n+interchangeably when operating on data, you should configure caches to use the\n+Protobuf storage format.\n+\n+Storing data in other formats affects client interoperability and {brandname}\n+capabilities, as follows:\n+\n+.Protobuf Storage\n+[%header,cols=2*]\n+|===\n+2+| Protobuf storage is suitable for...\n+| {brandname} Console\n+| Yes\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| Yes\n+| {brandname} Search\n+| Yes\n+| Custom Java objects\n+| Yes\n+|===\n+\n+.Text-Based Storage\n+[%header,cols=2*]\n+|===\n+2+| Text-based storage formats are suitable for...\n+| {brandname} Console\n+| Yes\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| Yes\n+| {brandname} Search\n+| No\n+| Custom Java objects\n+| No\n+|===\n+\n+.Marshalled Java Objects\n+[%header,cols=2*]\n+|===\n+2+| Custom Java objects are compatible with...\n+| {brandname} Console\n+| No\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| No\n+| {brandname} Search\n+| No\n+|===\n+\n+.Plain Old Java Objects (POJO)\n+[%header,cols=2*]\n+|===\n+2+| POJOs are not recommended but compatible with...\n+| {brandname} Console\n+| No\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| No\n+| {brandname} Search\n+| Yes. However, you must annotate entities to search with POJOs and make your classes available to {brandname} Server.\n+| Custom Java objects\n+| Yes\n+|===\n+\n+.Reference\n+\n+link:{dev_docs}#transcoders_and_data_conversion[Transcoders and Data Conversion]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwMDQxMA==", "bodyText": "fixed. thanks.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460900410", "createdAt": "2020-07-27T13:45:22Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/con_client_interoperability.adoc", "diffHunk": "@@ -0,0 +1,91 @@\n+[id='storage_formats_client_interop-{context}']\n+= Storage Formats and Client Interoperability\n+HTTP and Hot Rod protocols are designed to handle data in different formats.\n+For example, Hot Rod is designed to send and receive binary data while REST\n+clients are best suited for handling text-based formats such as JSON, XML, or\n+plain text.\n+\n+By configuring the MediaType for keys and values, you describe the data format\n+of the cache. {brandname} can then convert data on the fly during cache\n+operations.\n+\n+If you want to use the {brandname} Console, Hot Rod clients, and REST clients\n+interchangeably when operating on data, you should configure caches to use the\n+Protobuf storage format.\n+\n+Storing data in other formats affects client interoperability and {brandname}\n+capabilities, as follows:\n+\n+.Protobuf Storage\n+[%header,cols=2*]\n+|===\n+2+| Protobuf storage is suitable for...\n+| {brandname} Console\n+| Yes\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| Yes\n+| {brandname} Search\n+| Yes\n+| Custom Java objects\n+| Yes\n+|===\n+\n+.Text-Based Storage\n+[%header,cols=2*]\n+|===\n+2+| Text-based storage formats are suitable for...\n+| {brandname} Console\n+| Yes\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| Yes\n+| {brandname} Search\n+| No\n+| Custom Java objects\n+| No\n+|===\n+\n+.Marshalled Java Objects\n+[%header,cols=2*]\n+|===\n+2+| Custom Java objects are compatible with...\n+| {brandname} Console\n+| No\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| No\n+| {brandname} Search\n+| No\n+|===\n+\n+.Plain Old Java Objects (POJO)\n+[%header,cols=2*]\n+|===\n+2+| POJOs are not recommended but compatible with...\n+| {brandname} Console\n+| No\n+| REST clients\n+| Yes\n+| Java Hot Rod clients\n+| Yes\n+| Non-Java Hot Rod clients\n+| No\n+| {brandname} Search\n+| Yes. However, you must annotate entities to search with POJOs and make your classes available to {brandname} Server.\n+| Custom Java objects\n+| Yes\n+|===\n+\n+.Reference\n+\n+link:{dev_docs}#transcoders_and_data_conversion[Transcoders and Data Conversion]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyNzg4OQ=="}, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjEzMTg4OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/ref_memcached_client_interoperability.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODozNDozOVrOG3Y0Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDowMjoyN1rOG3j3mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczMTQ5NA==", "bodyText": "Actually you can, provided keys are String", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460731494", "createdAt": "2020-07-27T08:34:39Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/ref_memcached_client_interoperability.adoc", "diffHunk": "@@ -0,0 +1,22 @@\n+[id='memcached_interoperability-{context}']\n+= Interoperability with Memcached Clients\n+The {brandname} Server Memcached endpoint is deprecated and disabled by\n+default. If you enable the Memcached endpoint, you should use a text-based\n+storage format for data. Memcached clients do not require any configuration to\n+handle text-based formats.\n+\n+Memcached text clients can handle String-based keys and `byte[]` values but\n+cannot negotiate data types with {brandname}. These clients do not offer much\n+flexibility when handling data formats because of the protocol definition.\n+\n+[NOTE]\n+====\n+If you enable the Memcached endpoint, you should not use REST or Hot Rod\n+clients to interoperate on the same data as Memcached clients.\n+====", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwNDM2NQ==", "bodyText": "@gustavonalle this note came from @wfink I think the intent of the note here is centered around security so I've updated to make that meaning a little more clear.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460904365", "createdAt": "2020-07-27T13:51:02Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/ref_memcached_client_interoperability.adoc", "diffHunk": "@@ -0,0 +1,22 @@\n+[id='memcached_interoperability-{context}']\n+= Interoperability with Memcached Clients\n+The {brandname} Server Memcached endpoint is deprecated and disabled by\n+default. If you enable the Memcached endpoint, you should use a text-based\n+storage format for data. Memcached clients do not require any configuration to\n+handle text-based formats.\n+\n+Memcached text clients can handle String-based keys and `byte[]` values but\n+cannot negotiate data types with {brandname}. These clients do not offer much\n+flexibility when handling data formats because of the protocol definition.\n+\n+[NOTE]\n+====\n+If you enable the Memcached endpoint, you should not use REST or Hot Rod\n+clients to interoperate on the same data as Memcached clients.\n+====", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczMTQ5NA=="}, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxMjUzOA==", "bodyText": "Ok, probably because the memcached cannot use auth. So yeah, it's a bad idea, but there's a conflict of interest here: we are documenting the interop of memcached and right after telling user \"don't do it\" :), and we are marking it as \"deprecated\" but still maintaining it since at least 2 majors.\n@tristantarrant Why don't we simply remove it, as it is a liability?", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460912538", "createdAt": "2020-07-27T14:02:27Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/ref_memcached_client_interoperability.adoc", "diffHunk": "@@ -0,0 +1,22 @@\n+[id='memcached_interoperability-{context}']\n+= Interoperability with Memcached Clients\n+The {brandname} Server Memcached endpoint is deprecated and disabled by\n+default. If you enable the Memcached endpoint, you should use a text-based\n+storage format for data. Memcached clients do not require any configuration to\n+handle text-based formats.\n+\n+Memcached text clients can handle String-based keys and `byte[]` values but\n+cannot negotiate data types with {brandname}. These clients do not offer much\n+flexibility when handling data formats because of the protocol definition.\n+\n+[NOTE]\n+====\n+If you enable the Memcached endpoint, you should not use REST or Hot Rod\n+clients to interoperate on the same data as Memcached clients.\n+====", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczMTQ5NA=="}, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjE5NzgxOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/ref_memcached_client_interoperability.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODo1MTozOFrOG3ZcGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODo1MTozOFrOG3ZcGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0MTY1Ng==", "bodyText": "The proposed changes for memcached in this PR are not totally correct and some info got lost from master\nPlease check the memcached sections on https://infinispan.org/docs/stable/titles/developing/developing.html#endpoint_interop\nI will summarize the main points here:\n\nUsers must always use Strings in the keys, it they want to access the cache from all Memcached/HotRod/REST protocols\nThe value can be anything that can be stored as byte[]: marshalled pojo, random bytes, UTF-8, etc. So basically only POJO storage is ruled out from using memcached\nSince the value is a byte[] from memcached point of view, that does not mean there is no flexibility. Some Java Memcached clients allow data transformers that marshall and unmarshall objects, just like the Hot Rod client does.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460741656", "createdAt": "2020-07-27T08:51:38Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/ref_memcached_client_interoperability.adoc", "diffHunk": "@@ -0,0 +1,22 @@\n+[id='memcached_interoperability-{context}']\n+= Interoperability with Memcached Clients", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjIxMzg3OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/config_examples/max_count_memory.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODo1NToyOVrOG3Zliw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODo1NToyOVrOG3Zliw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NDA3NQ==", "bodyText": "This snippet is being used as an illustration in the section \"Configuring the Storage Format for Data\", but IMHO this is noisy as it is also using eviction. All you need it\n<local-cache>\n  <encoding media-type=\"application/x-protostream\"/>\n</local-cache>", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460744075", "createdAt": "2020-07-27T08:55:29Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/config_examples/max_count_memory.xml", "diffHunk": "@@ -0,0 +1,4 @@\n+<local-cache name=\"maximum_count\">\n+  <encoding media-type=\"application/x-protostream\"/>\n+  <memory max-count=\"500\" when-full=\"REMOVE\"/>\n+</local-cache>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjIzMzA0OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_storage_format.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTowMDoxNVrOG3ZxQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTowMDoxNVrOG3ZxQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NzA3Mg==", "bodyText": "This is rendered as\nConfigurationBuilder cfg = new ConfigurationBuilder();\n\ncfg\n  .encoding()\n    .mediaType(\"application/x-protostream\")\n  .memory()\n    .maxSize(\"1.5GB\")\n    .whenFull(EvictionStrategy.REMOVE)\n  .build());\nIt should not have unrelated eviction config", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460747072", "createdAt": "2020-07-27T09:00:15Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_storage_format.adoc", "diffHunk": "@@ -0,0 +1,39 @@\n+[id='configuring_storage_format_data-{context}']\n+= Configuring the Storage Format for Data\n+You configure the format in which {brandname} stores data by defining the\n+MediaType for keys and values.\n+\n+.Procedure\n+\n+* Specify the MediaType for entries in your {brandname} cache configuration.\n+\n+.Declarative examples\n+\n+The following cache definition uses the same encoding for keys and values:\n+\n+----\n+include::config_examples/max_memory.xml[]\n+----\n+\n+The following cache definition uses a different encoding for keys and values:\n+\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_media_type.xml[]\n+----\n+\n+.Programmatic examples\n+\n+The following `ConfigurationBuilder` uses the same encoding for keys and values:\n+\n+[source,java,options=\"nowrap\"]\n+----\n+include::code_examples/MaxSizeMemory.java[]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjI0MTE5OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_storage_format.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTowMjozMFrOG3Z2Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTowMjozMFrOG3Z2Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0ODM5MQ==", "bodyText": "<cache>\n   <encoding>\n      <key media-type=\"application/x-java-object; type=java.lang.Integer\"/>\n      <value media-type=\"application/xml; charset=UTF-8\"/>\n   </encoding>\n</cache>\nPlease remove the type=java.lang.Integer from the encoding, it is not enforced currently", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460748391", "createdAt": "2020-07-27T09:02:30Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_storage_format.adoc", "diffHunk": "@@ -0,0 +1,39 @@\n+[id='configuring_storage_format_data-{context}']\n+= Configuring the Storage Format for Data\n+You configure the format in which {brandname} stores data by defining the\n+MediaType for keys and values.\n+\n+.Procedure\n+\n+* Specify the MediaType for entries in your {brandname} cache configuration.\n+\n+.Declarative examples\n+\n+The following cache definition uses the same encoding for keys and values:\n+\n+----\n+include::config_examples/max_memory.xml[]\n+----\n+\n+The following cache definition uses a different encoding for keys and values:\n+\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_media_type.xml[]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjI1MzIxOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTowNTo1N1rOG3Z-AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTowNTo1N1rOG3Z-AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1MDMzNg==", "bodyText": "Better say \"store data\" instead to \"encode data\"", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460750336", "createdAt": "2020-07-27T09:05:57Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[id='using_text_based_storage-{context}']\n+= Using Text-Based Formats for Data\n+You can configure {brandname} to encode data in text-based formats such as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjI2NDg5OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTowOToyMVrOG3aFGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTowOToyMVrOG3aFGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1MjE1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you want to use text-based formats and binary data with Hot Rod clients, you\n          \n          \n            \n            should use ProtoStream marshalling. ProtoStream can handle plain text and JSON \n          \n          \n            \n            without the need to create Serialization Contexts and register Protobuf\n          \n          \n            \n            schemas. However, ProtoStream does not support XML.\n          \n          \n            \n            Text-based formats can also be used with the Protostream marshaller in the Hot Rod client\n          \n          \n            \n            without the need to create Serialization Contexts and register Protobuf\n          \n          \n            \n            schemas, since it can handle ```String``` and ```byte[]``` types natively", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460752154", "createdAt": "2020-07-27T09:09:21Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[id='using_text_based_storage-{context}']\n+= Using Text-Based Formats for Data\n+You can configure {brandname} to encode data in text-based formats such as\n+`text/plain`, `application/json`, or `application/xml`.\n+\n+.Procedure\n+\n+. Specify a text-based storage format as the MediaType for keys and values.\n+. Optionally specify a character set such as `UTF-8`.\n++\n+The following example configures {brandname} to store entries with the `text/plain; charset=UTF-8` format:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_text_plain.xml[]\n+----\n++\n+. Configure your clients.\n+\n+Hot Rod clients can use `org.infinispan.commons.marshall.StringMarshaller`\n+to handle plain text, JSON, XML, or any other text-based format.\n+\n+If you want to use text-based formats and binary data with Hot Rod clients, you\n+should use ProtoStream marshalling. ProtoStream can handle plain text and JSON \n+without the need to create Serialization Contexts and register Protobuf\n+schemas. However, ProtoStream does not support XML.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjI5MDE0OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToxNjowMlrOG3aUJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDo0NjoyMlrOG3l2cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1NjAwNg==", "bodyText": "I sense some duality between \"text\" and \"binary\" throughout the docs.\nLet me clarify: \"text\" is also binary for all it matters. text/plain, application/json, application/xml, are all stored as byte[] inside the cache. The media type is just a description of what is inside that byte[].", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460756006", "createdAt": "2020-07-27T09:16:02Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[id='using_text_based_storage-{context}']\n+= Using Text-Based Formats for Data\n+You can configure {brandname} to encode data in text-based formats such as\n+`text/plain`, `application/json`, or `application/xml`.\n+\n+.Procedure\n+\n+. Specify a text-based storage format as the MediaType for keys and values.\n+. Optionally specify a character set such as `UTF-8`.\n++\n+The following example configures {brandname} to store entries with the `text/plain; charset=UTF-8` format:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_text_plain.xml[]\n+----\n++\n+. Configure your clients.\n+\n+Hot Rod clients can use `org.infinispan.commons.marshall.StringMarshaller`\n+to handle plain text, JSON, XML, or any other text-based format.\n+\n+If you want to use text-based formats and binary data with Hot Rod clients, you\n+should use ProtoStream marshalling. ProtoStream can handle plain text and JSON \n+without the need to create Serialization Contexts and register Protobuf\n+schemas. However, ProtoStream does not support XML.\n+\n+ProtoStream offers more flexibility for storing data in binary format. However, you must  and provide Protobuf schemas (`.proto` files) to use ProtoStream.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1NjM1Ng==", "bodyText": "Also, I think we haven't been camel casing Protostream", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460756356", "createdAt": "2020-07-27T09:16:43Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[id='using_text_based_storage-{context}']\n+= Using Text-Based Formats for Data\n+You can configure {brandname} to encode data in text-based formats such as\n+`text/plain`, `application/json`, or `application/xml`.\n+\n+.Procedure\n+\n+. Specify a text-based storage format as the MediaType for keys and values.\n+. Optionally specify a character set such as `UTF-8`.\n++\n+The following example configures {brandname} to store entries with the `text/plain; charset=UTF-8` format:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_text_plain.xml[]\n+----\n++\n+. Configure your clients.\n+\n+Hot Rod clients can use `org.infinispan.commons.marshall.StringMarshaller`\n+to handle plain text, JSON, XML, or any other text-based format.\n+\n+If you want to use text-based formats and binary data with Hot Rod clients, you\n+should use ProtoStream marshalling. ProtoStream can handle plain text and JSON \n+without the need to create Serialization Contexts and register Protobuf\n+schemas. However, ProtoStream does not support XML.\n+\n+ProtoStream offers more flexibility for storing data in binary format. However, you must  and provide Protobuf schemas (`.proto` files) to use ProtoStream.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1NjAwNg=="}, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzNjY2Nw==", "bodyText": "hmm. I've used camel case for ProtoStream elsewhere in docs. it also appears that way at: https://javadoc.io/doc/org.infinispan.protostream/protostream/latest/index.html", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460936667", "createdAt": "2020-07-27T14:34:59Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[id='using_text_based_storage-{context}']\n+= Using Text-Based Formats for Data\n+You can configure {brandname} to encode data in text-based formats such as\n+`text/plain`, `application/json`, or `application/xml`.\n+\n+.Procedure\n+\n+. Specify a text-based storage format as the MediaType for keys and values.\n+. Optionally specify a character set such as `UTF-8`.\n++\n+The following example configures {brandname} to store entries with the `text/plain; charset=UTF-8` format:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_text_plain.xml[]\n+----\n++\n+. Configure your clients.\n+\n+Hot Rod clients can use `org.infinispan.commons.marshall.StringMarshaller`\n+to handle plain text, JSON, XML, or any other text-based format.\n+\n+If you want to use text-based formats and binary data with Hot Rod clients, you\n+should use ProtoStream marshalling. ProtoStream can handle plain text and JSON \n+without the need to create Serialization Contexts and register Protobuf\n+schemas. However, ProtoStream does not support XML.\n+\n+ProtoStream offers more flexibility for storing data in binary format. However, you must  and provide Protobuf schemas (`.proto` files) to use ProtoStream.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1NjAwNg=="}, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0NTAxMA==", "bodyText": "Sorry, I was wrong. Even ProtoStream itself uses it \ud83d\ude04", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460945010", "createdAt": "2020-07-27T14:46:22Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "diffHunk": "@@ -0,0 +1,33 @@\n+[id='using_text_based_storage-{context}']\n+= Using Text-Based Formats for Data\n+You can configure {brandname} to encode data in text-based formats such as\n+`text/plain`, `application/json`, or `application/xml`.\n+\n+.Procedure\n+\n+. Specify a text-based storage format as the MediaType for keys and values.\n+. Optionally specify a character set such as `UTF-8`.\n++\n+The following example configures {brandname} to store entries with the `text/plain; charset=UTF-8` format:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_text_plain.xml[]\n+----\n++\n+. Configure your clients.\n+\n+Hot Rod clients can use `org.infinispan.commons.marshall.StringMarshaller`\n+to handle plain text, JSON, XML, or any other text-based format.\n+\n+If you want to use text-based formats and binary data with Hot Rod clients, you\n+should use ProtoStream marshalling. ProtoStream can handle plain text and JSON \n+without the need to create Serialization Contexts and register Protobuf\n+schemas. However, ProtoStream does not support XML.\n+\n+ProtoStream offers more flexibility for storing data in binary format. However, you must  and provide Protobuf schemas (`.proto` files) to use ProtoStream.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1NjAwNg=="}, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjI5ODk4OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToxODoyOVrOG3aZeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToxODoyOVrOG3aZeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1NzM2OQ==", "bodyText": "I think it's better to not list StringMarshaller, here, since it's about Storing Java Objects in Binary Format", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460757369", "createdAt": "2020-07-27T09:18:29Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "diffHunk": "@@ -0,0 +1,65 @@\n+[id='storing_binary_objects-{context}']\n+= Storing Java Objects in Binary Format\n+Java Hot Rod clients can handle Java objects that represent entities and\n+perform marshalling to serialize and deserialize objects into `byte[]` arrays.\n+C{plusplus}, C#, and Javascript Hot Rod clients can also handle objects in the\n+respective languages.\n+\n+If you store entries in the cache as marshalled Java objects, you should\n+configure the cache with the MediaType of the marshalled storage.\n+\n+.Procedure\n+\n+. Specify the MediaType that matches your marshaller implementation.\n++\n+* Protostream marshaller: Configure the MediaType as `application/x-protostream`.\n+* JBoss marshalling: Configure the MediaType as `application/x-jboss-marshalling`.\n+* StringMarshaller: Configure the MediaType as `text/plain`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjMwMjc3OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_storing_pojos.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToxOTozM1rOG3ab5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToxOTozM1rOG3ab5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1Nzk4OQ==", "bodyText": "Unclosed backquote", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r460757989", "createdAt": "2020-07-27T09:19:33Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_pojos.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+[id='storing_pojos-{context}']\n+= Storing Deserialized Objects\n+You can store data as unmarshalled, Plain Old Java Objects (POJO) instead of\n+storing data in a binary format.\n+\n+Storing POJO instead of binary format is not recommended because it\n+requires {brandname} to serialize data on client read operations and\n+deserialize data on write operations. To handle client interoperability with\n+custom code you should convert data on demand.\n+\n+.Procedure\n+\n+. Specify `application/x-java-object as the MediaType for keys and values as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f263691a3629172cff01416e12de183530caabf7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjU1NTQzOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOToyMDo0OVrOG-HJrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOToyMDo0OVrOG-HJrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4MjA2Mw==", "bodyText": "However, ProtoStream cannot handle XML.\nThis phrase can be safely removed. If the cache is confgured as application/xml and protostream is the marshaller used, it can write an XML in UTF-8 byte[], so it does not need to \"handle\" XML", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r467782063", "createdAt": "2020-08-10T09:20:49Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_textbased_encoding.adoc", "diffHunk": "@@ -0,0 +1,31 @@\n+[id='using_text_based_storage-{context}']\n+= Storing Data in Text-Based Formats\n+Configure {brandname} to store data in a text-based format such as `text/\n+plain`, `application/json`, or `application/xml`.\n+\n+.Procedure\n+\n+. Specify a text-based storage format as the MediaType for keys and values.\n+. Optionally specify a character set such as `UTF-8`.\n++\n+The following example configures {brandname} to store entries with the `text/plain; charset=UTF-8` format:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_text_plain.xml[]\n+----\n++\n+. Configure your clients.\n+\n+Hot Rod clients can use `org.infinispan.commons.marshall.StringMarshaller`\n+to handle plain text, JSON, XML, or any other text-based format.\n+\n+You can also use text-based formats with the ProtoStream marshaller.\n+ProtoStream can handle `String` and `byte[]` types natively, without the need\n+to create Serialization Contexts and register Protobuf schemas (`.proto`\n+files). However, ProtoStream cannot handle XML.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433572315ba7b378ea1ac5ca2e01fe697aab610f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjU3NzgzOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOToyNzozOVrOG-HXAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOToyNzozOVrOG-HXAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4NTQ3Mg==", "bodyText": "This note is not correct. When the user does not specify the media type for server caches, Infinispan will not do any encoding to store data, and will simple assume \"unknown\" type and will store whatever it receives. I think it's better to remove this NOTE altogether, even because this will change on ISPN 12: we will assume protobuf storage by default", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r467785472", "createdAt": "2020-08-10T09:27:39Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "diffHunk": "@@ -0,0 +1,65 @@\n+[id='storing_binary_objects-{context}']\n+= Storing Marshalled Java Objects\n+Java Hot Rod clients can handle Java objects that represent entities and\n+perform marshalling to serialize and deserialize objects into `byte[]` arrays.\n+C{plusplus}, C#, and Javascript Hot Rod clients can also handle objects in the\n+respective languages.\n+\n+If you store entries in the cache as marshalled Java objects, you should\n+configure the cache with the MediaType of the marshalled storage.\n+\n+.Procedure\n+\n+. Specify the MediaType that matches your marshaller implementation.\n++\n+* Protostream marshaller: Configure the MediaType as `application/x-protostream`.\n+* JBoss marshalling: Configure the MediaType as `application/x-jboss-marshalling`.\n+* Java serialization: Configure the MediaType as `application/x-java-serialized-object`.\n++\n+[NOTE]\n+====\n+Alternatively, you can declaratively configure the marshaller with the\n+`serialization` element or invoke the `serialization()` method in the\n+`GlobalConfigurationBuilder` class. When you configure the marshaller in this\n+way, {brandname} uses the MediaType of the defined marshaller to encode\n+entries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433572315ba7b378ea1ac5ca2e01fe697aab610f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjU5NzAzOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTozMjo1MFrOG-Hh-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTozMjo1MFrOG-Hh-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4ODI4MQ==", "bodyText": "It seems this whole section is misplaced here. Most of the time, there is no need to deploy anything in the server when storing marshalled java objects. This is only needed when storing unmarshalled objects.\nhttps://infinispan.org/docs/stable/titles/developing/developing.html#entities_deploy", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r467788281", "createdAt": "2020-08-10T09:32:50Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_custom_java_objects.adoc", "diffHunk": "@@ -0,0 +1,65 @@\n+[id='storing_binary_objects-{context}']\n+= Storing Marshalled Java Objects\n+Java Hot Rod clients can handle Java objects that represent entities and\n+perform marshalling to serialize and deserialize objects into `byte[]` arrays.\n+C{plusplus}, C#, and Javascript Hot Rod clients can also handle objects in the\n+respective languages.\n+\n+If you store entries in the cache as marshalled Java objects, you should\n+configure the cache with the MediaType of the marshalled storage.\n+\n+.Procedure\n+\n+. Specify the MediaType that matches your marshaller implementation.\n++\n+* Protostream marshaller: Configure the MediaType as `application/x-protostream`.\n+* JBoss marshalling: Configure the MediaType as `application/x-jboss-marshalling`.\n+* Java serialization: Configure the MediaType as `application/x-java-serialized-object`.\n++\n+[NOTE]\n+====\n+Alternatively, you can declaratively configure the marshaller with the\n+`serialization` element or invoke the `serialization()` method in the\n+`GlobalConfigurationBuilder` class. When you configure the marshaller in this\n+way, {brandname} uses the MediaType of the defined marshaller to encode\n+entries.\n+====\n++\n+. Put class files for all custom objects on the {brandname} Server classpath.\n++\n+Add JAR files that contain custom classes and/or service providers for\n+marshaller implementations in the `server/lib` directory.\n++\n+----\n+\u251c\u2500\u2500 server\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib\n+\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 UserObjects.jar\n+\u2502\u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 README.txt\n+----\n++\n+. Configure your clients.\n+\n+Because REST clients are most suitable for handling text formats, you should use primitives such as `java.lang.String` for keys. Otherwise, REST clients must handle keys as `bytes[]` using a supported binary encoding.\n+\n+REST clients can read values for cache entries in XML or JSON format.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433572315ba7b378ea1ac5ca2e01fe697aab610f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjcyNjc2OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/ref_memcached_client_interoperability.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDoxMzozOVrOG-IvHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTo1Nzo0MFrOG-0gSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgwODAzMQ==", "bodyText": "master is more detailed about memcached. I've distilled the info here:\nTo use a memcached client with Infinispan, your cache must use the text/plain media type for the keys, and the\nvalue can be any arbitrary byte[].\n\nMost Java Memcached clients have the capability of plugging a marshaller, so the experience is similar to a Hot Rod client: POJOs are used in the client side, that are converted to/from byte[] when interacting with the server.\nLess capable memcached clients don't have the support for marshallers, and can only read and write the entry values \"as is\".\nTo better support those clients, it is possible to configure the Memcached server so that it always convert the value to specific format (https://infinispan.org/docs/stable/titles/memcached/memcached.html#memcached_client_encoding)\nAn example of usage is a cache that stores protobuf, but with a Memcached connector having client-encoding configured as application/json: memcached clients can read and write json documents, but the storage is a protobuf byte[]", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r467808031", "createdAt": "2020-08-10T10:13:39Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/ref_memcached_client_interoperability.adoc", "diffHunk": "@@ -0,0 +1,21 @@\n+[id='memcached_interoperability-{context}']\n+= Memcached Clients and Storage Formats\n+The {brandname} Server Memcached endpoint is deprecated and disabled by\n+default. If you enable the Memcached endpoint, you should use a text-based\n+storage format for data.\n+\n+[IMPORTANT]\n+====\n+The Memcached endpoint does not support authentication. For security purposes\n+you should use dedicated caches for Memcached clients. You should not use REST\n+or Hot Rod clients to interact on the same data set as Memcached clients.\n+====\n+\n+Memcached clients can handle keys only as String and values stored as `byte[]`.\n+However, Memcached clients cannot handle deserialized objects (POJOs).\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433572315ba7b378ea1ac5ca2e01fe697aab610f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUyNTEzMA==", "bodyText": "thanks @gustavonalle I don't know why I've been faffing about with the Memcached stuff so much. I've had another go at it and have hopefully captured all the right details now. I think adding an example cache encoding config is helpful. please let me know if you've more nits.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r468525130", "createdAt": "2020-08-11T11:57:40Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/ref_memcached_client_interoperability.adoc", "diffHunk": "@@ -0,0 +1,21 @@\n+[id='memcached_interoperability-{context}']\n+= Memcached Clients and Storage Formats\n+The {brandname} Server Memcached endpoint is deprecated and disabled by\n+default. If you enable the Memcached endpoint, you should use a text-based\n+storage format for data.\n+\n+[IMPORTANT]\n+====\n+The Memcached endpoint does not support authentication. For security purposes\n+you should use dedicated caches for Memcached clients. You should not use REST\n+or Hot Rod clients to interact on the same data set as Memcached clients.\n+====\n+\n+Memcached clients can handle keys only as String and values stored as `byte[]`.\n+However, Memcached clients cannot handle deserialized objects (POJOs).\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgwODAzMQ=="}, "originalCommit": {"oid": "433572315ba7b378ea1ac5ca2e01fe697aab610f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTg5MjkxOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/stories/assembly_configuring_data_encoding.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjozNToyMlrOG_fTOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjozNToyMlrOG_fTOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNjI5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {brandname} encodes your data when it reads and writes to and from caches. You\n          \n          \n            \n            {brandname} saves your data in a specific format that can be converted on-the-fly when you read and write to and from caches.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r469226298", "createdAt": "2020-08-12T12:35:22Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/stories/assembly_configuring_data_encoding.adoc", "diffHunk": "@@ -0,0 +1,24 @@\n+[id='endpoint_interop']\n+:context: data\n+= Configuring Cache Encoding\n+{brandname} encodes your data when it reads and writes to and from caches. You", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81a6af0b526093267b4d05743899cf026988f2f9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTg5MzgwOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/stories/assembly_configuring_data_encoding.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjozNTozOVrOG_fTyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjozNTozOVrOG_fTyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNjQ0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            configure the encoding by specifying a MediaType for keys and values, which\n          \n          \n            \n            configure the storage format by specifying a MediaType for keys and values, which", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r469226441", "createdAt": "2020-08-12T12:35:39Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/stories/assembly_configuring_data_encoding.adoc", "diffHunk": "@@ -0,0 +1,24 @@\n+[id='endpoint_interop']\n+:context: data\n+= Configuring Cache Encoding\n+{brandname} encodes your data when it reads and writes to and from caches. You\n+configure the encoding by specifying a MediaType for keys and values, which", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81a6af0b526093267b4d05743899cf026988f2f9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTkxODE5OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_encoding_memcached.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo0MjozOVrOG_fiug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo0MjozOVrOG_fiug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzMDI2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . Configure cache encoding to use String, `text/plain`, for keys.\n          \n          \n            \n            . Configure cache encoding to use `text/plain`, for keys.", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r469230266", "createdAt": "2020-08-12T12:42:39Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_encoding_memcached.adoc", "diffHunk": "@@ -0,0 +1,52 @@\n+[id='memcached_interoperability-{context}']\n+= Configuring Cache Encoding for Memcached Clients\n+{brandname} Server disables the Memcached endpoint by default. If you enable\n+the Memcached endpoint, you should configure caches with a suitable encoding\n+for Memcached clients.\n+\n+[IMPORTANT]\n+====\n+The Memcached endpoint does not support authentication. For security purposes\n+you should use dedicated caches for Memcached clients. You should not use REST\n+or Hot Rod clients to interact on the same data set as Memcached clients.\n+====\n+\n+.Procedure\n+\n+. Configure cache encoding to use String, `text/plain`, for keys.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81a6af0b526093267b4d05743899cf026988f2f9"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTkyMjk1OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_encoding_memcached.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo0NDowNVrOG_flpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo0NDowNVrOG_flpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzMTAxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Memcached clients can handle keys as String only. Values can be any MediaType\n          \n          \n            \n            Memcached clients can handle keys as `text/plain` only. Values can be any MediaType", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r469231014", "createdAt": "2020-08-12T12:44:05Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_encoding_memcached.adoc", "diffHunk": "@@ -0,0 +1,52 @@\n+[id='memcached_interoperability-{context}']\n+= Configuring Cache Encoding for Memcached Clients\n+{brandname} Server disables the Memcached endpoint by default. If you enable\n+the Memcached endpoint, you should configure caches with a suitable encoding\n+for Memcached clients.\n+\n+[IMPORTANT]\n+====\n+The Memcached endpoint does not support authentication. For security purposes\n+you should use dedicated caches for Memcached clients. You should not use REST\n+or Hot Rod clients to interact on the same data set as Memcached clients.\n+====\n+\n+.Procedure\n+\n+. Configure cache encoding to use String, `text/plain`, for keys.\n+. Specify any appropriate MediaType, other than `application/x-java-\n+object`, for values.\n++\n+Memcached clients can handle keys as String only. Values can be any MediaType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81a6af0b526093267b4d05743899cf026988f2f9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTkyNjUzOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_encoding_memcached.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo0NDo1N1rOG_fnnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo0NDo1N1rOG_fnnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzMTUxNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r469231517", "createdAt": "2020-08-12T12:44:57Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_encoding_memcached.adoc", "diffHunk": "@@ -0,0 +1,52 @@\n+[id='memcached_interoperability-{context}']\n+= Configuring Cache Encoding for Memcached Clients\n+{brandname} Server disables the Memcached endpoint by default. If you enable\n+the Memcached endpoint, you should configure caches with a suitable encoding\n+for Memcached clients.\n+\n+[IMPORTANT]\n+====\n+The Memcached endpoint does not support authentication. For security purposes\n+you should use dedicated caches for Memcached clients. You should not use REST\n+or Hot Rod clients to interact on the same data set as Memcached clients.\n+====\n+\n+.Procedure\n+\n+. Configure cache encoding to use String, `text/plain`, for keys.\n+. Specify any appropriate MediaType, other than `application/x-java-\n+object`, for values.\n++\n+Memcached clients can handle keys as String only. Values can be any MediaType\n+that {brandname} stores as `byte[]`, which can be Protobuf, marshalled Java\n+objects, or a text-based format.\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_memcached.xml[]\n+----\n+\n+[TIP]\n+====\n+The Memcached endpoint includes a `client-encoding` attribute that converts the\n+encoding of values.\n+\n+For example, as in the preceding configuration example, you store values\n+encoded as Protobuf. If you want Memcached clients to read and write values as\n+JSON, you can use the following configuration:\n+\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_memcached_clients.xml[]\n+----\n+====", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81a6af0b526093267b4d05743899cf026988f2f9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTk4MzEyOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_storing_pojos.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1OTo1MlrOG_gJ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1OTo1MlrOG_gJ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MDI4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Hot Rod clients must use a marshaller to handle POJOs. You should use the\n          \n          \n            \n            ProtoStream marshaller, which is language neutral and backwards compatible.\n          \n          \n            \n            There is no changes required for Hot Rod clients. The only requirement is that the marshaller used in the client is available in the server/lib to be able to de-serialize the objects.\n          \n          \n            \n            \n          \n          \n            \n            NOTE: The ProtoStream  and JavaSerialization marshallers are already available in the server", "url": "https://github.com/infinispan/infinispan/pull/8554#discussion_r469240283", "createdAt": "2020-08-12T12:59:52Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/proc_storing_pojos.adoc", "diffHunk": "@@ -0,0 +1,44 @@\n+[id='storing_pojos-{context}']\n+= Storing Unmarshalled Java Objects\n+You can store data as deserialized Plain Old Java Objects (POJO) instead of\n+storing data in a binary format.\n+\n+Storing POJO instead of binary format is not recommended because it\n+requires {brandname} to serialize data on client read operations and\n+deserialize data on write operations. To handle client interoperability with\n+custom code you should convert data on demand.\n+\n+.Procedure\n+\n+. Specify `application/x-java-object` as the MediaType for keys and values as follows:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/encoding_java_object.xml[]\n+----\n++\n+. Put class files for all custom objects on the {brandname} server classpath.\n++\n+Add JAR files that contain custom classes and/or service providers for\n+marshaller implementations in the `server/lib` directory.\n++\n+----\n+\u251c\u2500\u2500 server\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib\n+\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 UserObjects.jar\n+\u2502\u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 README.txt\n+----\n++\n+. Configure your clients.\n+\n+Hot Rod clients must use a marshaller to handle POJOs. You should use the\n+ProtoStream marshaller, which is language neutral and backwards compatible.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81a6af0b526093267b4d05743899cf026988f2f9"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3998, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}