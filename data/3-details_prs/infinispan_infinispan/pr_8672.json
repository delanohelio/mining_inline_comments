{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5NzIzNDIy", "number": 8672, "title": "ISPN-12250 Add exponential back-off for cross-site network failures", "bodyText": "https://issues.redhat.com/browse/ISPN-12250", "createdAt": "2020-09-04T14:12:09Z", "url": "https://github.com/infinispan/infinispan/pull/8672", "merged": true, "mergeCommit": {"oid": "8e0af38c671b5658c3ff2dea46938ac7699804d9"}, "closed": true, "closedAt": "2020-09-25T14:10:47Z", "author": {"login": "pruivo"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFl23GABqjM3Mjk5Njc0NTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMR02FABqjM4MDY3MDA3Mjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed99cf82fa91dda35618dd1b98c4e9de6a937a62", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/ed99cf82fa91dda35618dd1b98c4e9de6a937a62", "committedDate": "2020-09-04T14:10:50Z", "message": "ISPN-12250 Add exponential back-off for cross-site network failures"}, "afterCommit": {"oid": "8ae78df7508e39d4e87414531421664665db72eb", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/8ae78df7508e39d4e87414531421664665db72eb", "committedDate": "2020-09-04T14:13:08Z", "message": "ISPN-12250 Add exponential back-off for cross-site network failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ae78df7508e39d4e87414531421664665db72eb", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/8ae78df7508e39d4e87414531421664665db72eb", "committedDate": "2020-09-04T14:13:08Z", "message": "ISPN-12250 Add exponential back-off for cross-site network failures"}, "afterCommit": {"oid": "d8689815a1dcb68bed021e6239dff1700926a6d2", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/d8689815a1dcb68bed021e6239dff1700926a6d2", "committedDate": "2020-09-07T13:15:09Z", "message": "ISPN-12250 Add exponential back-off for cross-site network failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTE3MjQx", "url": "https://github.com/infinispan/infinispan/pull/8672#pullrequestreview-486917241", "createdAt": "2020-09-11T15:40:01Z", "commit": {"oid": "d8689815a1dcb68bed021e6239dff1700926a6d2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTo0MDowMVrOHQj_jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTo0Mjo0M1rOHQkFyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyODk3Mw==", "bodyText": "I am not a fan of this. Can we not instead use the TIMEOUT_SCHEDULE_EXECUTOR executor to do this? Or is it required to stay in the invoking thread for preserveOrder ?", "url": "https://github.com/infinispan/infinispan/pull/8672#discussion_r487128973", "createdAt": "2020-09-11T15:40:01Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/util/ExponentialBackOff.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.infinispan.util;\n+\n+import org.infinispan.commons.util.Experimental;\n+\n+/**\n+ * Interface to implement an exponential back-off algorithm that retries the request based on the result of the remote\n+ * operation.\n+ * <p>\n+ * Currently only used for IRAC, this interface contains 2 methods: {@link #backoffSleep()} which should be invoked if\n+ * the request needs to be retried and {@link #reset()}, invoked when a request is \"successful\", which resets the\n+ * state.\n+ * <p>\n+ * The interface may me changed in the future to include async methods.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 12.0\n+ */\n+@Experimental\n+public interface ExponentialBackOff {\n+\n+   /**\n+    * Disabled exponential back-off algorithm. It does nothing.\n+    */\n+   ExponentialBackOff NO_OP = new ExponentialBackOff() {\n+      @Override\n+      public void backoffSleep() {\n+         //no-op\n+      }\n+\n+      @Override\n+      public void reset() {\n+         //no-op\n+      }\n+   };\n+\n+   /**\n+    * It blocks the thread for a certain amount of time before retries the request.\n+    * <p>\n+    * The method is blocking and should be invoked when a request needs to be retried. It blocks the thread for a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8689815a1dcb68bed021e6239dff1700926a6d2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyOTIwOA==", "bodyText": "I wouldn't mention that it is used by IRAC in the comments.", "url": "https://github.com/infinispan/infinispan/pull/8672#discussion_r487129208", "createdAt": "2020-09-11T15:40:25Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/util/ExponentialBackOff.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.infinispan.util;\n+\n+import org.infinispan.commons.util.Experimental;\n+\n+/**\n+ * Interface to implement an exponential back-off algorithm that retries the request based on the result of the remote\n+ * operation.\n+ * <p>\n+ * Currently only used for IRAC, this interface contains 2 methods: {@link #backoffSleep()} which should be invoked if", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8689815a1dcb68bed021e6239dff1700926a6d2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzMDU3MQ==", "bodyText": "Should be able to be package private?", "url": "https://github.com/infinispan/infinispan/pull/8672#discussion_r487130571", "createdAt": "2020-09-11T15:42:43Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/util/ExponentialBackOffImpl.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.infinispan.util;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.infinispan.util.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+/**\n+ * The default {@link ExponentialBackOff} implementation for IRAC (asynchronous cross-site replication).\n+ * <p>\n+ * An exponential back-off implementation with min interval of 500 ms and a maximum of 300'000 ms (5 min). It uses a\n+ * multiplier of 2 (each timeslot will be increase + 100% for each consecutive retry) and the final wait time is\n+ * randomized, +- 50% of the timeslot.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 12.0\n+ */\n+public class ExponentialBackOffImpl implements ExponentialBackOff {\n+\n+   private static final Log log = LogFactory.getLog(ExponentialBackOffImpl.class);\n+   private static final boolean trace = log.isTraceEnabled();\n+\n+   //TODO currently only used by IRAC. If required, make it configurable (those 4 constants) to cover other uses cases.\n+   //multiplier value (2 == +100% per retry)\n+   private static final double MULTIPLIER = 2;\n+   //initial interval value in milliseconds\n+   private static final int INITIAL_INTERVAL_MILLIS = 500;\n+   //maximum back off time in milliseconds (300 seconds == 5 min)\n+   private static final int MAX_INTERVAL_MILLIS = 300_000;\n+   //randomization factor (0.5 == 50% below and 50% above the retry interval).\n+   private static final double RANDOMIZATION_FACTOR = 0.5;\n+\n+   //the current retry timeout. If a retry occurs, it will wait for this time +- RANDOMIZATION_FACTOR (%)\n+   private int currentIntervalMillis;\n+\n+   public ExponentialBackOffImpl() {\n+      this.currentIntervalMillis = INITIAL_INTERVAL_MILLIS;\n+   }\n+\n+   public long nextBackOffMillis() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8689815a1dcb68bed021e6239dff1700926a6d2"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8689815a1dcb68bed021e6239dff1700926a6d2", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/d8689815a1dcb68bed021e6239dff1700926a6d2", "committedDate": "2020-09-07T13:15:09Z", "message": "ISPN-12250 Add exponential back-off for cross-site network failures"}, "afterCommit": {"oid": "84bd7939c7147689216ebab8ad1c3d2f48d08dfe", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/84bd7939c7147689216ebab8ad1c3d2f48d08dfe", "committedDate": "2020-09-11T17:32:15Z", "message": "ISPN-12250 Add exponential back-off for cross-site network failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODU0NTk1", "url": "https://github.com/infinispan/infinispan/pull/8672#pullrequestreview-495854595", "createdAt": "2020-09-24T18:40:39Z", "commit": {"oid": "84bd7939c7147689216ebab8ad1c3d2f48d08dfe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0MDozOVrOHXn_xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0MDozOVrOHXn_xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNDU5Nw==", "bodyText": "Maybe include the sleep duration in the trace message.", "url": "https://github.com/infinispan/infinispan/pull/8672#discussion_r494534597", "createdAt": "2020-09-24T18:40:39Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/util/ExponentialBackOffImpl.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.infinispan.util;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.infinispan.util.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+/**\n+ * The default {@link ExponentialBackOff} implementation for IRAC (asynchronous cross-site replication).\n+ * <p>\n+ * An exponential back-off implementation with min interval of 500 ms and a maximum of 300'000 ms (5 min). It uses a\n+ * multiplier of 2 (each timeslot will be increase + 100% for each consecutive retry) and the final wait time is\n+ * randomized, +- 50% of the timeslot.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 12.0\n+ */\n+public class ExponentialBackOffImpl implements ExponentialBackOff {\n+\n+   private static final Log log = LogFactory.getLog(ExponentialBackOffImpl.class);\n+   private static final boolean trace = log.isTraceEnabled();\n+\n+   //TODO currently only used by IRAC. If required, make it configurable (those 4 constants) to cover other uses cases.\n+   //multiplier value (2 == +100% per retry)\n+   private static final double MULTIPLIER = 2;\n+   //initial interval value in milliseconds\n+   private static final int INITIAL_INTERVAL_MILLIS = 500;\n+   //maximum back off time in milliseconds (300 seconds == 5 min)\n+   private static final int MAX_INTERVAL_MILLIS = 300_000;\n+   //randomization factor (0.5 == 50% below and 50% above the retry interval).\n+   private static final double RANDOMIZATION_FACTOR = 0.5;\n+\n+   //the current retry timeout. If a retry occurs, it will wait for this time +- RANDOMIZATION_FACTOR (%)\n+   private int currentIntervalMillis;\n+\n+   public ExponentialBackOffImpl() {\n+      this.currentIntervalMillis = INITIAL_INTERVAL_MILLIS;\n+   }\n+\n+   long nextBackOffMillis() {\n+      //public for unit test purposes.\n+      if (currentIntervalMillis >= MAX_INTERVAL_MILLIS) {\n+         if (trace) {\n+            log.tracef(\"Next backoff time %s ms\", MAX_INTERVAL_MILLIS);\n+         }\n+         return MAX_INTERVAL_MILLIS;\n+      }\n+      int randomIntervalMillis = getRandomValueFromInterval();\n+      incrementCurrentInterval();\n+      if (trace) {\n+         log.tracef(\"Next backoff time %s ms\", randomIntervalMillis);\n+      }\n+      return Math.min(randomIntervalMillis, MAX_INTERVAL_MILLIS);\n+   }\n+\n+   @Override\n+   public void backoffSleep() throws InterruptedException {\n+      if (trace) {\n+         log.trace(\"backing-off...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84bd7939c7147689216ebab8ad1c3d2f48d08dfe"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a8bc823e9b73221357cbd5e3fb51225c7ce3c8e", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/3a8bc823e9b73221357cbd5e3fb51225c7ce3c8e", "committedDate": "2020-09-25T08:50:16Z", "message": "ISPN-12250 Add exponential back-off for cross-site network failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84bd7939c7147689216ebab8ad1c3d2f48d08dfe", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/84bd7939c7147689216ebab8ad1c3d2f48d08dfe", "committedDate": "2020-09-11T17:32:15Z", "message": "ISPN-12250 Add exponential back-off for cross-site network failures"}, "afterCommit": {"oid": "3a8bc823e9b73221357cbd5e3fb51225c7ce3c8e", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/3a8bc823e9b73221357cbd5e3fb51225c7ce3c8e", "committedDate": "2020-09-25T08:50:16Z", "message": "ISPN-12250 Add exponential back-off for cross-site network failures"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 451, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}