{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNTQ5NDE4", "number": 8080, "title": "ISPN-11489 PersistenceManagerImpl thread checks need to be updated", "bodyText": "https://issues.redhat.com/browse/ISPN-11489\nhttps://issues.redhat.com/browse/ISPN-11443\nThis makes it so that when PersistenceManagerImpl is invoked by an Infinispan blocking thread that it runs the operation in the same thread, instead of spawning a new task. This prevents a blocking thread from waiting on another blocking thread, which can cause deadlocks. Also for bulk operations that are subscribed on a blocking thread we create a temporary thread to handle the load.", "createdAt": "2020-03-23T18:01:54Z", "url": "https://github.com/infinispan/infinispan/pull/8080", "merged": true, "mergeCommit": {"oid": "a1843922cfc23419d753159377af56c9f299bb73"}, "closed": true, "closedAt": "2020-03-27T14:07:39Z", "author": {"login": "wburns"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRJJk4ABqjMxNjQ0NjE1NTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRw4FlABqjMxNzI0Mzk0NTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d003e3d6fa346b38c2642508739fdef9552898cb", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/d003e3d6fa346b38c2642508739fdef9552898cb", "committedDate": "2020-03-23T17:57:20Z", "message": "ISPN-11482 Provide way for ClusterExecutor to use non blocking thread\n\n* Make sure cluster executor is running on a blocking thread"}, "afterCommit": {"oid": "a805ad9530f40f97f550ea3e3a741c8863e3984f", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/a805ad9530f40f97f550ea3e3a741c8863e3984f", "committedDate": "2020-03-25T15:22:04Z", "message": "ISPN-11482 Provide way for ClusterExecutor to use non blocking thread\n\n* Make sure cluster executor is running on a blocking thread"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a805ad9530f40f97f550ea3e3a741c8863e3984f", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/a805ad9530f40f97f550ea3e3a741c8863e3984f", "committedDate": "2020-03-25T15:22:04Z", "message": "ISPN-11482 Provide way for ClusterExecutor to use non blocking thread\n\n* Make sure cluster executor is running on a blocking thread"}, "afterCommit": {"oid": "1d2ba55cfaae5c6a324c61ec78f22848883b4790", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/1d2ba55cfaae5c6a324c61ec78f22848883b4790", "committedDate": "2020-03-25T15:23:21Z", "message": "ISPN-11482 Provide way for ClusterExecutor to use non blocking thread\n\n* Make sure cluster executor is running on a blocking thread"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d2ba55cfaae5c6a324c61ec78f22848883b4790", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/1d2ba55cfaae5c6a324c61ec78f22848883b4790", "committedDate": "2020-03-25T15:23:21Z", "message": "ISPN-11482 Provide way for ClusterExecutor to use non blocking thread\n\n* Make sure cluster executor is running on a blocking thread"}, "afterCommit": {"oid": "510a274eb56939c85cfac364299a8bc28013576c", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/510a274eb56939c85cfac364299a8bc28013576c", "committedDate": "2020-03-25T15:35:57Z", "message": "ISPN-11482 Provide way for ClusterExecutor to use non blocking thread\n\n* Make sure cluster executor is running on a blocking thread"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNjM4ODkx", "url": "https://github.com/infinispan/infinispan/pull/8080#pullrequestreview-382638891", "createdAt": "2020-03-27T07:52:21Z", "commit": {"oid": "510a274eb56939c85cfac364299a8bc28013576c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo1MjoyMVrOF8mUXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODo0ODozM1rOF8n6VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NjY4NA==", "bodyText": "And now the comment makes sense :P", "url": "https://github.com/infinispan/infinispan/pull/8080#discussion_r399086684", "createdAt": "2020-03-27T07:52:21Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/manager/impl/ReplicableRunnableCommand.java", "diffHunk": "@@ -57,6 +57,6 @@ public boolean isReturnValueExpected() {\n    @Override\n    public boolean canBlock() {\n       // These commands can be arbitrary user commands - so be careful about them blocking\n-      return false;\n+      return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "510a274eb56939c85cfac364299a8bc28013576c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4OTMwNw==", "bodyText": "We should probably use DefaultThreadFactory", "url": "https://github.com/infinispan/infinispan/pull/8080#discussion_r399089307", "createdAt": "2020-03-27T07:58:29Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/persistence/manager/StartThreadAction.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.infinispan.persistence.manager;\n+\n+import java.security.PrivilegedAction;\n+\n+/**\n+ * StartThreadAction.\n+ *\n+ * @author William Burns\n+ * @since 11.0\n+ */\n+public class StartThreadAction implements PrivilegedAction<Void> {\n+\n+   private final Runnable task;\n+   private final String threadName;\n+\n+   public StartThreadAction(Runnable task, String threadName) {\n+      this.task = task;\n+      this.threadName = threadName;\n+   }\n+\n+   @Override\n+   public Void run() {\n+      Thread thread = new Thread(task, threadName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "510a274eb56939c85cfac364299a8bc28013576c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExMjc4OQ==", "bodyText": "This is definitely worth a comment. Does RxJava guarantee that it will request a new thread from the scheduler only once, on the thread that subscribes to the Flowable, or could it be on a non-blocking thread when using continueOnCPUExecutor?\nI was thinking of a different workaround: check whether the caller thread is a blocking thread once, at the beginning of every method, and pass that information in order to avoid submitting a task to the blocking executor and submitting a task to the non-blocking executor (if we switched to a non-blocking thread in the middle of the bulk operation, we'd need a new blocking thread for the next blocking task).", "url": "https://github.com/infinispan/infinispan/pull/8080#discussion_r399112789", "createdAt": "2020-03-27T08:48:33Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "diffHunk": "@@ -181,7 +181,13 @@ public void start() {\n       advancedListener = new AdvancedPurgeListener<>(expirationManager.wired());\n       preloaded = false;\n       enabled = configuration.persistence().usingStores();\n-      blockingScheduler = Schedulers.from(blockingExecutor);\n+      blockingScheduler = Schedulers.from(task -> {\n+         if (isCurrentThreadBlocking()) {\n+            SecurityActions.startThread(task, \"persistence-bulk-blocking-operation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "510a274eb56939c85cfac364299a8bc28013576c"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a9484b397b3f475cd8643dea1a8011ad7ba6f85", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/9a9484b397b3f475cd8643dea1a8011ad7ba6f85", "committedDate": "2020-03-27T13:37:40Z", "message": "ISPN-11443 PersistenceManagerImpl thread checks need to be updated\n\n* Now run inline for blocking threads"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f2f060458c495a7bad6d40d2a85f15cacc69ab", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/57f2f060458c495a7bad6d40d2a85f15cacc69ab", "committedDate": "2020-03-27T13:37:40Z", "message": "ISPN-11489 TransactionCoordinator updated for non blocking\n\n* Revert to invoking xa based ops on calling thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d37f7117021d6e24ed9c60d49dd3361261b6bb05", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/d37f7117021d6e24ed9c60d49dd3361261b6bb05", "committedDate": "2020-03-27T13:37:40Z", "message": "ISPN-11482 Provide way for ClusterExecutor to use non blocking thread\n\n* Make sure cluster executor is running on a blocking thread"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "510a274eb56939c85cfac364299a8bc28013576c", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/510a274eb56939c85cfac364299a8bc28013576c", "committedDate": "2020-03-25T15:35:57Z", "message": "ISPN-11482 Provide way for ClusterExecutor to use non blocking thread\n\n* Make sure cluster executor is running on a blocking thread"}, "afterCommit": {"oid": "d37f7117021d6e24ed9c60d49dd3361261b6bb05", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/d37f7117021d6e24ed9c60d49dd3361261b6bb05", "committedDate": "2020-03-27T13:37:40Z", "message": "ISPN-11482 Provide way for ClusterExecutor to use non blocking thread\n\n* Make sure cluster executor is running on a blocking thread"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 961, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}