{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMzk1ODUx", "number": 7857, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowNjozM1rODgUCxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzo1MjozNFrODhbB4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjA5NDEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowNjozM1rOFqcz1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjoyMjoxN1rOFsRVag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg==", "bodyText": "Replace with Util.threadLocalRandomUUID()", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380056532", "createdAt": "2020-02-17T09:06:33Z", "author": {"login": "tristantarrant"}, "path": "core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java", "diffHunk": "@@ -13,7 +13,17 @@\n public final class CacheManagerMetricsRegistration extends AbstractMetricsRegistration {\n \n    @Override\n-   protected String initPrefix() {\n+   protected String initNamePrefix() {\n       return \"CacheManager_\" + globalConfig.cacheManagerName();\n    }\n+\n+   @Override\n+   protected String initNodeName() {\n+      String nodeName = globalConfig.transport().nodeName();\n+      if (nodeName == null || nodeName.isEmpty()) {\n+         //TODO [anistor] ensure unique node name is set in all tests and also in real life usage\n+         nodeName = java.util.UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3909913e1aff019426f56ec23a47ba5a5a6d5c0e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2MDY0NA==", "bodyText": "This is executed once, on startup. Why bother with optimizations?", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380060644", "createdAt": "2020-02-17T09:15:07Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java", "diffHunk": "@@ -13,7 +13,17 @@\n public final class CacheManagerMetricsRegistration extends AbstractMetricsRegistration {\n \n    @Override\n-   protected String initPrefix() {\n+   protected String initNamePrefix() {\n       return \"CacheManager_\" + globalConfig.cacheManagerName();\n    }\n+\n+   @Override\n+   protected String initNodeName() {\n+      String nodeName = globalConfig.transport().nodeName();\n+      if (nodeName == null || nodeName.isEmpty()) {\n+         //TODO [anistor] ensure unique node name is set in all tests and also in real life usage\n+         nodeName = java.util.UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, "originalCommit": {"oid": "3909913e1aff019426f56ec23a47ba5a5a6d5c0e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NDI3Mg==", "bodyText": "We want to do it in because of https://issues.redhat.com/browse/ISPN-11230", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380174272", "createdAt": "2020-02-17T13:14:08Z", "author": {"login": "tristantarrant"}, "path": "core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java", "diffHunk": "@@ -13,7 +13,17 @@\n public final class CacheManagerMetricsRegistration extends AbstractMetricsRegistration {\n \n    @Override\n-   protected String initPrefix() {\n+   protected String initNamePrefix() {\n       return \"CacheManager_\" + globalConfig.cacheManagerName();\n    }\n+\n+   @Override\n+   protected String initNodeName() {\n+      String nodeName = globalConfig.transport().nodeName();\n+      if (nodeName == null || nodeName.isEmpty()) {\n+         //TODO [anistor] ensure unique node name is set in all tests and also in real life usage\n+         nodeName = java.util.UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, "originalCommit": {"oid": "3909913e1aff019426f56ec23a47ba5a5a6d5c0e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyMjg4MQ==", "bodyText": "So \"it computes an expensive cryptographic digest\". How expensive? Even if it's expensive it cannot cost a ton. Why do we care if it's done only once per cache manager? Can @danberindei elaborate a bit ?", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380322881", "createdAt": "2020-02-17T18:30:01Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java", "diffHunk": "@@ -13,7 +13,17 @@\n public final class CacheManagerMetricsRegistration extends AbstractMetricsRegistration {\n \n    @Override\n-   protected String initPrefix() {\n+   protected String initNamePrefix() {\n       return \"CacheManager_\" + globalConfig.cacheManagerName();\n    }\n+\n+   @Override\n+   protected String initNodeName() {\n+      String nodeName = globalConfig.transport().nodeName();\n+      if (nodeName == null || nodeName.isEmpty()) {\n+         //TODO [anistor] ensure unique node name is set in all tests and also in real life usage\n+         nodeName = java.util.UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, "originalCommit": {"oid": "3909913e1aff019426f56ec23a47ba5a5a6d5c0e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0Mzc2Ng==", "bodyText": "Ignore that for now.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380343766", "createdAt": "2020-02-17T19:42:34Z", "author": {"login": "tristantarrant"}, "path": "core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java", "diffHunk": "@@ -13,7 +13,17 @@\n public final class CacheManagerMetricsRegistration extends AbstractMetricsRegistration {\n \n    @Override\n-   protected String initPrefix() {\n+   protected String initNamePrefix() {\n       return \"CacheManager_\" + globalConfig.cacheManagerName();\n    }\n+\n+   @Override\n+   protected String initNodeName() {\n+      String nodeName = globalConfig.transport().nodeName();\n+      if (nodeName == null || nodeName.isEmpty()) {\n+         //TODO [anistor] ensure unique node name is set in all tests and also in real life usage\n+         nodeName = java.util.UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, "originalCommit": {"oid": "3909913e1aff019426f56ec23a47ba5a5a6d5c0e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMzkxOQ==", "bodyText": "It's not too expensive to do once per cache manager, but IMO it's good to have a simple rule of using Util.threadLocalRandomUUID() everywhere instead of having long discussions about whether it's worth optimizing a particular call or not every single time.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380503919", "createdAt": "2020-02-18T07:49:39Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java", "diffHunk": "@@ -13,7 +13,17 @@\n public final class CacheManagerMetricsRegistration extends AbstractMetricsRegistration {\n \n    @Override\n-   protected String initPrefix() {\n+   protected String initNamePrefix() {\n       return \"CacheManager_\" + globalConfig.cacheManagerName();\n    }\n+\n+   @Override\n+   protected String initNodeName() {\n+      String nodeName = globalConfig.transport().nodeName();\n+      if (nodeName == null || nodeName.isEmpty()) {\n+         //TODO [anistor] ensure unique node name is set in all tests and also in real life usage\n+         nodeName = java.util.UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, "originalCommit": {"oid": "3909913e1aff019426f56ec23a47ba5a5a6d5c0e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwNDcyNA==", "bodyText": "I forgot to mention that I would have preferred to set the node name to hostname + random number when the user hasn't specified it, the way JGroups does it.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380504724", "createdAt": "2020-02-18T07:51:36Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java", "diffHunk": "@@ -13,7 +13,17 @@\n public final class CacheManagerMetricsRegistration extends AbstractMetricsRegistration {\n \n    @Override\n-   protected String initPrefix() {\n+   protected String initNamePrefix() {\n       return \"CacheManager_\" + globalConfig.cacheManagerName();\n    }\n+\n+   @Override\n+   protected String initNodeName() {\n+      String nodeName = globalConfig.transport().nodeName();\n+      if (nodeName == null || nodeName.isEmpty()) {\n+         //TODO [anistor] ensure unique node name is set in all tests and also in real life usage\n+         nodeName = java.util.UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, "originalCommit": {"oid": "3909913e1aff019426f56ec23a47ba5a5a6d5c0e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkyODI1NA==", "bodyText": "Then I would gladly grab that generated string from JGroups rather than generating a new meaningless uuid myself. The intention was to have a meaningful tag per metric that traces back to the node that generated that data. Regarding the long discussion about perf implications of this vs that, they tend to get long only when they miss the point. This is not perf relevant code and we should not advocate use of our 'patched' versions of various jdk utils we have in our commons. Those are accidents and should not turn into irrelevant rules. -1.02 for that checkstyle rule or whatver gatekeeper you plan to set up.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381928254", "createdAt": "2020-02-20T10:59:46Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java", "diffHunk": "@@ -13,7 +13,17 @@\n public final class CacheManagerMetricsRegistration extends AbstractMetricsRegistration {\n \n    @Override\n-   protected String initPrefix() {\n+   protected String initNamePrefix() {\n       return \"CacheManager_\" + globalConfig.cacheManagerName();\n    }\n+\n+   @Override\n+   protected String initNodeName() {\n+      String nodeName = globalConfig.transport().nodeName();\n+      if (nodeName == null || nodeName.isEmpty()) {\n+         //TODO [anistor] ensure unique node name is set in all tests and also in real life usage\n+         nodeName = java.util.UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, "originalCommit": {"oid": "3909913e1aff019426f56ec23a47ba5a5a6d5c0e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2NTY3NA==", "bodyText": "If you can wait for JGroupsTransport to start and connect the channel, then yes, please do that. A random UUID won't trace back to the node that generated it, regardless of how those random bits are generated.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381965674", "createdAt": "2020-02-20T12:22:17Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java", "diffHunk": "@@ -13,7 +13,17 @@\n public final class CacheManagerMetricsRegistration extends AbstractMetricsRegistration {\n \n    @Override\n-   protected String initPrefix() {\n+   protected String initNamePrefix() {\n       return \"CacheManager_\" + globalConfig.cacheManagerName();\n    }\n+\n+   @Override\n+   protected String initNodeName() {\n+      String nodeName = globalConfig.transport().nodeName();\n+      if (nodeName == null || nodeName.isEmpty()) {\n+         //TODO [anistor] ensure unique node name is set in all tests and also in real life usage\n+         nodeName = java.util.UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, "originalCommit": {"oid": "3909913e1aff019426f56ec23a47ba5a5a6d5c0e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjA5NzA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/metrics/impl/InfinispanMetricsRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowNzozM1rOFqc1mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxNjo0NVrOFqdG7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1Njk4NQ==", "bodyText": "StringBuilder !", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380056985", "createdAt": "2020-02-17T09:07:33Z", "author": {"login": "tristantarrant"}, "path": "core/src/main/java/org/infinispan/metrics/impl/InfinispanMetricsRegistry.java", "diffHunk": "@@ -133,4 +123,16 @@ public void unregister(MetricID metricId) {\n                     metricId, System.identityHashCode(registry), registry.getMetrics().size());\n       }\n    }\n+\n+   private static final Pattern SNAKE_CASE_PATTERN = Pattern.compile(\"(?<=[a-z])[A-Z]\");\n+\n+   private static String decamelize(String s) {\n+      Matcher m = SNAKE_CASE_PATTERN.matcher(s);\n+      StringBuffer sb = new StringBuffer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3909913e1aff019426f56ec23a47ba5a5a6d5c0e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2MTQyMg==", "bodyText": "I've just updated that. The problem is the Matcher method that takes a stringbuilder instead of stringbuffer is jdk 9. So I reimplemented that without Pattern/Matcher as it's not worth the hassle", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380061422", "createdAt": "2020-02-17T09:16:45Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/metrics/impl/InfinispanMetricsRegistry.java", "diffHunk": "@@ -133,4 +123,16 @@ public void unregister(MetricID metricId) {\n                     metricId, System.identityHashCode(registry), registry.getMetrics().size());\n       }\n    }\n+\n+   private static final Pattern SNAKE_CASE_PATTERN = Pattern.compile(\"(?<=[a-z])[A-Z]\");\n+\n+   private static String decamelize(String s) {\n+      Matcher m = SNAKE_CASE_PATTERN.matcher(s);\n+      StringBuffer sb = new StringBuffer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1Njk4NQ=="}, "originalCommit": {"oid": "3909913e1aff019426f56ec23a47ba5a5a6d5c0e"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzU3MTQwOnYy", "diffSide": "RIGHT", "path": "core/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0Nzo0OFrOFsHzGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwODoxNzowNVrOFsJw-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwOTQzNQ==", "bodyText": "I'm not sure about this, making smallrye optional means the users will have to add the dependencies themselves after they enable statistics and they get a ClassNotFoundException", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381809435", "createdAt": "2020-02-20T06:47:48Z", "author": {"login": "danberindei"}, "path": "core/pom.xml", "diffHunk": "@@ -37,21 +37,25 @@\n       <dependency>\n          <groupId>org.eclipse.microprofile.config</groupId>\n          <artifactId>microprofile-config-api</artifactId>\n+         <optional>true</optional>\n       </dependency>\n \n       <dependency>\n          <groupId>io.smallrye</groupId>\n          <artifactId>smallrye-config</artifactId>\n+         <optional>true</optional>\n       </dependency>\n \n       <dependency>\n          <groupId>org.eclipse.microprofile.metrics</groupId>\n          <artifactId>microprofile-metrics-api</artifactId>\n+         <optional>true</optional>\n       </dependency>\n \n       <dependency>\n          <groupId>io.smallrye</groupId>\n          <artifactId>smallrye-metrics</artifactId>\n+         <optional>true</optional>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgzNDI4MQ==", "bodyText": "But in a MP container they would have the implementation as \"provided\"", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381834281", "createdAt": "2020-02-20T07:58:39Z", "author": {"login": "tristantarrant"}, "path": "core/pom.xml", "diffHunk": "@@ -37,21 +37,25 @@\n       <dependency>\n          <groupId>org.eclipse.microprofile.config</groupId>\n          <artifactId>microprofile-config-api</artifactId>\n+         <optional>true</optional>\n       </dependency>\n \n       <dependency>\n          <groupId>io.smallrye</groupId>\n          <artifactId>smallrye-config</artifactId>\n+         <optional>true</optional>\n       </dependency>\n \n       <dependency>\n          <groupId>org.eclipse.microprofile.metrics</groupId>\n          <artifactId>microprofile-metrics-api</artifactId>\n+         <optional>true</optional>\n       </dependency>\n \n       <dependency>\n          <groupId>io.smallrye</groupId>\n          <artifactId>smallrye-metrics</artifactId>\n+         <optional>true</optional>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwOTQzNQ=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg0MTY1Ng==", "bodyText": "True, we don't want them to build an uber jar that includes smallrye and deploy that in a container :)", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381841656", "createdAt": "2020-02-20T08:17:05Z", "author": {"login": "danberindei"}, "path": "core/pom.xml", "diffHunk": "@@ -37,21 +37,25 @@\n       <dependency>\n          <groupId>org.eclipse.microprofile.config</groupId>\n          <artifactId>microprofile-config-api</artifactId>\n+         <optional>true</optional>\n       </dependency>\n \n       <dependency>\n          <groupId>io.smallrye</groupId>\n          <artifactId>smallrye-config</artifactId>\n+         <optional>true</optional>\n       </dependency>\n \n       <dependency>\n          <groupId>org.eclipse.microprofile.metrics</groupId>\n          <artifactId>microprofile-metrics-api</artifactId>\n+         <optional>true</optional>\n       </dependency>\n \n       <dependency>\n          <groupId>io.smallrye</groupId>\n          <artifactId>smallrye-metrics</artifactId>\n+         <optional>true</optional>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwOTQzNQ=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzU4NTI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/configuration/cache/StatisticsConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo1MDo1MFrOFsH57g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMToxNjoyOVrOFsPiKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMTE4Mg==", "bodyText": "IMO you need to change the author and add a @since tag", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381811182", "createdAt": "2020-02-20T06:50:50Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/cache/StatisticsConfiguration.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package org.infinispan.configuration.cache;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.Attribute;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.attributes.Matchable;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+\n+/**\n+ * Determines whether statistics are gather and reported.\n+ *\n+ * @author pmuir", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkzNjE3MQ==", "bodyText": "I'll add a since tag and REMOVE the author :)", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381936171", "createdAt": "2020-02-20T11:16:29Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/configuration/cache/StatisticsConfiguration.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package org.infinispan.configuration.cache;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.Attribute;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.attributes.Matchable;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+\n+/**\n+ * Determines whether statistics are gather and reported.\n+ *\n+ * @author pmuir", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMTE4Mg=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzU4OTE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/configuration/cache/StatisticsConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo1MTo0OFrOFsH8Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo1MTo0OFrOFsH8Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMTcxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Determines whether statistics are gather and reported.\n          \n          \n            \n             * Determines whether statistics are gathered and reported.\n          \n      \n    \n    \n  \n\nAlso @author and @since", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381811719", "createdAt": "2020-02-20T06:51:48Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/cache/StatisticsConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.infinispan.configuration.cache;\n+\n+import static org.infinispan.configuration.cache.StatisticsConfiguration.AVAILABLE;\n+import static org.infinispan.configuration.cache.StatisticsConfiguration.ELEMENT_DEFINITION;\n+import static org.infinispan.configuration.cache.StatisticsConfiguration.ENABLED;\n+import static org.infinispan.util.logging.Log.CONFIG;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.ConfigurationBuilderInfo;\n+import org.infinispan.commons.configuration.attributes.Attribute;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.configuration.global.GlobalConfiguration;\n+\n+/**\n+ * Determines whether statistics are gather and reported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzU5Mjg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/configuration/global/AbstractGlobalConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo1MzoyMVrOFsH-IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTo0MDo1M1rOFsQM1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMjI1Nw==", "bodyText": "I thought you wanted to end this practice, Adrian?", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381812257", "createdAt": "2020-02-20T06:53:21Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/global/AbstractGlobalConfigurationBuilder.java", "diffHunk": "@@ -22,9 +22,15 @@ public TransportConfigurationBuilder transport() {\n    }\n \n    @Override\n-   public GlobalJmxStatisticsConfigurationBuilder globalJmxStatistics() {\n-      globalConfig.globalJmxStatistics().enable();\n-      return globalConfig.globalJmxStatistics();\n+   public GlobalMetricsConfigurationBuilder metrics() {\n+      globalConfig.metrics().gauges(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0NzA5Mg==", "bodyText": "indeed. that was a leftover.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381947092", "createdAt": "2020-02-20T11:40:53Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/configuration/global/AbstractGlobalConfigurationBuilder.java", "diffHunk": "@@ -22,9 +22,15 @@ public TransportConfigurationBuilder transport() {\n    }\n \n    @Override\n-   public GlobalJmxStatisticsConfigurationBuilder globalJmxStatistics() {\n-      globalConfig.globalJmxStatistics().enable();\n-      return globalConfig.globalJmxStatistics();\n+   public GlobalMetricsConfigurationBuilder metrics() {\n+      globalConfig.metrics().gauges(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMjI1Nw=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzYwNTUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/configuration/cache/JMXStatisticsConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo1OTo1MlrOFsIFfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMzozNTowOVrOFsTd8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxNDE0MA==", "bodyText": "Could you use an abstract class instead? I don't think changing a class to an interface preserves binary compatibility.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381814140", "createdAt": "2020-02-20T06:59:52Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/cache/JMXStatisticsConfiguration.java", "diffHunk": "@@ -1,94 +1,18 @@\n package org.infinispan.configuration.cache;\n \n-import org.infinispan.commons.configuration.ConfigurationInfo;\n-import org.infinispan.commons.configuration.attributes.Attribute;\n-import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n-import org.infinispan.commons.configuration.attributes.AttributeSet;\n-import org.infinispan.commons.configuration.attributes.Matchable;\n-import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n-import org.infinispan.commons.configuration.elements.ElementDefinition;\n-\n /**\n- * Determines whether statistics are gather and reported.\n- *\n- * @author pmuir\n- *\n+ * @deprecated since 10.1.3. Use {@link StatisticsConfiguration} instead. This will be removed in next major version.\n  */\n-public class JMXStatisticsConfiguration implements Matchable<JMXStatisticsConfiguration>, ConfigurationInfo {\n-\n-   public static final AttributeDefinition<Boolean> ENABLED = AttributeDefinition.builder(\"enabled\", false).xmlName(\"statistics\")\n-         .build();\n-   public static final AttributeDefinition<Boolean> AVAILABLE = AttributeDefinition.builder(\"available\", true).xmlName(\"statistics-available\").build();\n-   static AttributeSet attributeDefinitionSet() {\n-      return new AttributeSet(JMXStatisticsConfiguration.class, ENABLED, AVAILABLE);\n-   }\n+@Deprecated\n+public interface JMXStatisticsConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0ODY1NA==", "bodyText": "I don't think we care for binary compat in this case. This PR changes a lot more in ways that would not even be source compatible.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381948654", "createdAt": "2020-02-20T11:44:13Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/configuration/cache/JMXStatisticsConfiguration.java", "diffHunk": "@@ -1,94 +1,18 @@\n package org.infinispan.configuration.cache;\n \n-import org.infinispan.commons.configuration.ConfigurationInfo;\n-import org.infinispan.commons.configuration.attributes.Attribute;\n-import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n-import org.infinispan.commons.configuration.attributes.AttributeSet;\n-import org.infinispan.commons.configuration.attributes.Matchable;\n-import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n-import org.infinispan.commons.configuration.elements.ElementDefinition;\n-\n /**\n- * Determines whether statistics are gather and reported.\n- *\n- * @author pmuir\n- *\n+ * @deprecated since 10.1.3. Use {@link StatisticsConfiguration} instead. This will be removed in next major version.\n  */\n-public class JMXStatisticsConfiguration implements Matchable<JMXStatisticsConfiguration>, ConfigurationInfo {\n-\n-   public static final AttributeDefinition<Boolean> ENABLED = AttributeDefinition.builder(\"enabled\", false).xmlName(\"statistics\")\n-         .build();\n-   public static final AttributeDefinition<Boolean> AVAILABLE = AttributeDefinition.builder(\"available\", true).xmlName(\"statistics-available\").build();\n-   static AttributeSet attributeDefinitionSet() {\n-      return new AttributeSet(JMXStatisticsConfiguration.class, ENABLED, AVAILABLE);\n-   }\n+@Deprecated\n+public interface JMXStatisticsConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxNDE0MA=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwMDYyNg==", "bodyText": "I think this is actually the only place where binary compatibility is broken.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r382000626", "createdAt": "2020-02-20T13:35:09Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/cache/JMXStatisticsConfiguration.java", "diffHunk": "@@ -1,94 +1,18 @@\n package org.infinispan.configuration.cache;\n \n-import org.infinispan.commons.configuration.ConfigurationInfo;\n-import org.infinispan.commons.configuration.attributes.Attribute;\n-import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n-import org.infinispan.commons.configuration.attributes.AttributeSet;\n-import org.infinispan.commons.configuration.attributes.Matchable;\n-import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n-import org.infinispan.commons.configuration.elements.ElementDefinition;\n-\n /**\n- * Determines whether statistics are gather and reported.\n- *\n- * @author pmuir\n- *\n+ * @deprecated since 10.1.3. Use {@link StatisticsConfiguration} instead. This will be removed in next major version.\n  */\n-public class JMXStatisticsConfiguration implements Matchable<JMXStatisticsConfiguration>, ConfigurationInfo {\n-\n-   public static final AttributeDefinition<Boolean> ENABLED = AttributeDefinition.builder(\"enabled\", false).xmlName(\"statistics\")\n-         .build();\n-   public static final AttributeDefinition<Boolean> AVAILABLE = AttributeDefinition.builder(\"available\", true).xmlName(\"statistics-available\").build();\n-   static AttributeSet attributeDefinitionSet() {\n-      return new AttributeSet(JMXStatisticsConfiguration.class, ENABLED, AVAILABLE);\n-   }\n+@Deprecated\n+public interface JMXStatisticsConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxNDE0MA=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzYwNjU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/configuration/global/GlobalMetricsConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzowMDoyNlrOFsIGIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzowMDoyNlrOFsIGIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxNDMwNg==", "bodyText": "Missing javadoc", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381814306", "createdAt": "2020-02-20T07:00:26Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/global/GlobalMetricsConfiguration.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.infinispan.configuration.global;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.Attribute;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.configuration.parsing.Element;\n+\n+public class GlobalMetricsConfiguration implements ConfigurationInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzYzMDgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/remoting/transport/jgroups/JGroupsTransport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzoxMjowMlrOFsIT-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzoxMjowMlrOFsIT-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxNzg0OQ==", "bodyText": "@wburns is the if enough for Quarkus to not balk on the ObjectName static initializer?", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381817849", "createdAt": "2020-02-20T07:12:02Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/remoting/transport/jgroups/JGroupsTransport.java", "diffHunk": "@@ -538,10 +540,9 @@ private void registerMBeansIfNeeded(String clusterName) {\n          // Normally this would be done by CacheManagerJmxRegistration but\n          // the channel is not started when the cache manager starts but\n          // when first cache starts, so it's safer to do it here.\n-         globalStatsEnabled = configuration.statistics();\n-         if (globalStatsEnabled) {\n-            // TODO Use the overloaded variant when available: https://issues.jboss.org/browse/JGRP-2394\n-            JmxConfigurator.registerChannel(channel, jmxRegistration.getMBeanServer(), jmxRegistration.getDomain(), clusterName, true);\n+         if (configuration.jmx().enabled()) {\n+            ObjectName namePrefix = new ObjectName(jmxRegistration.getDomain() + \":\" + ObjectNameKeys.MANAGER + \"=\" + ObjectName.quote(configuration.cacheManagerName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzYzMjc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/stats/impl/ClusterCacheStatsImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzoxMjo1M1rOFsIVBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzoxMjo1M1rOFsIVBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxODExNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @MBean(objectName = ClusterCacheStats.OBJECT_NAME, description = \"General cluster statistics such as timings, hit/miss ratio, etc. for a cache.\")\n          \n          \n            \n            @MBean(objectName = ClusterCacheStats.OBJECT_NAME, description = \"General clustered cache statistics such as timings, hit/miss ratio, etc.\")", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381818116", "createdAt": "2020-02-20T07:12:53Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/stats/impl/ClusterCacheStatsImpl.java", "diffHunk": "@@ -71,7 +71,7 @@\n import org.infinispan.util.logging.Log;\n import org.infinispan.util.logging.LogFactory;\n \n-@MBean(objectName = ClusterCacheStats.OBJECT_NAME, description = \"General cluster statistics such as timings, hit/miss ratio, etc.\")\n+@MBean(objectName = ClusterCacheStats.OBJECT_NAME, description = \"General cluster statistics such as timings, hit/miss ratio, etc. for a cache.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzY1OTQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/stats/impl/ClusterCacheStatsImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzoyNDozOVrOFsIkfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzoyNDozOVrOFsIkfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyMjA3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               @ManagedAttribute(description = \"Required minimum number of nodes to guarantee data consistency\",\n          \n          \n            \n               @ManagedAttribute(description = \"Required minimum number of nodes to hold current cache data\",\n          \n      \n    \n    \n  \n\nI know this is copied from CacheMgmtInterceptor/Stats, but it's not really true: if the cluster has 5 nodes and this attribute says 2 nodes would be enough to hold all the data, killing 3 nodes at once will absolutely lose data in a distributed cache with numOwners < 4.\nThe attribute also returns a valid number when the eviction strategy is REMOVE, which will also lose data if you reduce the number of nodes and then insert new entries.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381822077", "createdAt": "2020-02-20T07:24:39Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/stats/impl/ClusterCacheStatsImpl.java", "diffHunk": "@@ -199,6 +199,9 @@ public long getAverageWriteTimeNanos() {\n       return getStatAsLong(AVERAGE_WRITE_TIME_NANOS);\n    }\n \n+   @ManagedAttribute(description = \"Required minimum number of nodes to guarantee data consistency\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzY3NTU1OnYy", "diffSide": "LEFT", "path": "core/src/test/java/org/infinispan/configuration/ConfigurationUnitTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzozMjowM1rOFsIt_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjo0MDozNVrOFsR1hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNDUxMQ==", "bodyText": "-1 for removing throws clauses in tests, it's too much noise adding and removing exceptions all the time.\nYou can edit the inspection settings in IntelliJ to \"Ignore exceptions thrown by entry point methods\" instead.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381824511", "createdAt": "2020-02-20T07:32:03Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/configuration/ConfigurationUnitTest.java", "diffHunk": "@@ -81,7 +81,7 @@ public void testDistSyncAutoCommit() {\n    }\n \n    @Test\n-   public void testDummyTMGetCache() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk1MzM5Mw==", "bodyText": "It's already done. And I could probably tolerate those in tests but not production code. -1 for crying over spilled milk", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381953393", "createdAt": "2020-02-20T11:54:23Z", "author": {"login": "anistor"}, "path": "core/src/test/java/org/infinispan/configuration/ConfigurationUnitTest.java", "diffHunk": "@@ -81,7 +81,7 @@ public void testDistSyncAutoCommit() {\n    }\n \n    @Test\n-   public void testDummyTMGetCache() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNDUxMQ=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2Njg1MA==", "bodyText": "Since the changes are just noise, what's some more noise on top of it in the form of PR comments? :P", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381966850", "createdAt": "2020-02-20T12:24:56Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/configuration/ConfigurationUnitTest.java", "diffHunk": "@@ -81,7 +81,7 @@ public void testDistSyncAutoCommit() {\n    }\n \n    @Test\n-   public void testDummyTMGetCache() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNDUxMQ=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3Mzg5Mw==", "bodyText": "More please!", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381973893", "createdAt": "2020-02-20T12:40:35Z", "author": {"login": "anistor"}, "path": "core/src/test/java/org/infinispan/configuration/ConfigurationUnitTest.java", "diffHunk": "@@ -81,7 +81,7 @@ public void testDistSyncAutoCommit() {\n    }\n \n    @Test\n-   public void testDummyTMGetCache() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNDUxMQ=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzY4MzA4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/functional/AbstractFunctionalTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzozNToxMVrOFsIyYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMzoyMjoyM1rOFsTC0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNTYzMg==", "bodyText": "That comment is definitely wrong now.\nFunny enough, the commit disabling stats says \"ISPN-8651 Add statistics for functional commands\" :)", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381825632", "createdAt": "2020-02-20T07:35:11Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/functional/AbstractFunctionalTest.java", "diffHunk": "@@ -68,8 +68,7 @@ protected void createCacheManagers() throws Throwable {\n \n    protected void configureCache(ConfigurationBuilder builder) {\n       // Make sure there are no errors when counting stats\n-//      builder.jmxStatistics().enabled(true);\n-      builder.jmxStatistics().available(false);\n+      builder.statistics().available(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2MjQyNg==", "bodyText": "If Radim did indeed add that support then the comment should go away and also builder.statistics().available(false) should go. Making stats unavailable was originally meant to remove the CacheMgmtInterceptor from the chain because it did not play well with functional commands. I remember CCE and great fire. But this supposedly works in 2020. Let me try to make them enabled and have a local run.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381962426", "createdAt": "2020-02-20T12:14:52Z", "author": {"login": "anistor"}, "path": "core/src/test/java/org/infinispan/functional/AbstractFunctionalTest.java", "diffHunk": "@@ -68,8 +68,7 @@ protected void createCacheManagers() throws Throwable {\n \n    protected void configureCache(ConfigurationBuilder builder) {\n       // Make sure there are no errors when counting stats\n-//      builder.jmxStatistics().enabled(true);\n-      builder.jmxStatistics().available(false);\n+      builder.statistics().available(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNTYzMg=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3MTc3MA==", "bodyText": "The available attribute was actually added in ISPN-5542 Shorten interceptor stack for local caches, and if you read the JIRA comments it's obvious that it was motivated by Radim's Hibernate 2LC work.\nSorry if I mislead you, it just seemed funny to me that a commit adding support for statistics would actually change a test to disable statistics. And I'm pretty sure the ClassCastExceptions started appearing after ISPN-8651 went in :)", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381971770", "createdAt": "2020-02-20T12:35:39Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/functional/AbstractFunctionalTest.java", "diffHunk": "@@ -68,8 +68,7 @@ protected void createCacheManagers() throws Throwable {\n \n    protected void configureCache(ConfigurationBuilder builder) {\n       // Make sure there are no errors when counting stats\n-//      builder.jmxStatistics().enabled(true);\n-      builder.jmxStatistics().available(false);\n+      builder.statistics().available(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNTYzMg=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3Nzk4Mg==", "bodyText": "Enabling stats there seems to work now :)))", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381977982", "createdAt": "2020-02-20T12:49:34Z", "author": {"login": "anistor"}, "path": "core/src/test/java/org/infinispan/functional/AbstractFunctionalTest.java", "diffHunk": "@@ -68,8 +68,7 @@ protected void createCacheManagers() throws Throwable {\n \n    protected void configureCache(ConfigurationBuilder builder) {\n       // Make sure there are no errors when counting stats\n-//      builder.jmxStatistics().enabled(true);\n-      builder.jmxStatistics().available(false);\n+      builder.statistics().available(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNTYzMg=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5MzY4Mw==", "bodyText": "That's good to know, I don't see any tests specifically looking at stats in functional maps.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381993683", "createdAt": "2020-02-20T13:22:23Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/functional/AbstractFunctionalTest.java", "diffHunk": "@@ -68,8 +68,7 @@ protected void createCacheManagers() throws Throwable {\n \n    protected void configureCache(ConfigurationBuilder builder) {\n       // Make sure there are no errors when counting stats\n-//      builder.jmxStatistics().enabled(true);\n-      builder.jmxStatistics().available(false);\n+      builder.statistics().available(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNTYzMg=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzY5MjYwOnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/MetricsResource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzozOToxNlrOFsI39g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMzowNjozNlrOFsSksA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNzA2Mg==", "bodyText": "Isn't the UUID in CacheManagerMetricsRegistration supposed to fix this?\nIf a test sets a node name and sets the same name for 2 nodes (or 2 different tests set the same name) then the test should be fixed.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381827062", "createdAt": "2020-02-20T07:39:16Z", "author": {"login": "danberindei"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/MetricsResource.java", "diffHunk": "@@ -31,11 +35,20 @@\n  */\n public final class MetricsResource implements ResourceHandler {\n \n+   private final static Log log = LogFactory.getLog(MetricsResource.class, Log.class);\n+\n    private static final String METRICS_PATH = \"/metrics\";\n \n    private final MetricsRequestHandler requestHandler = new MetricsRequestHandler();\n \n    public MetricsResource() {\n+      try {\n+         new JmxRegistrar().init();\n+      } catch (IOException | IllegalArgumentException e) {\n+         // Smallrye uses a global singleton registry which is a nightmare for tests where more than one\n+         // server has to exist in a single JVM. It fails and we can't do anything about it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2ODUyNA==", "bodyText": "Metrics produced by JmxRegistrar do not have that tag because ... we're using an internal smallrye utility class which was not created for public consumption so it's not that flexible. And quite frankly such a unique tag would just allow us to (wrongly) register duplicates of metrics that are really just JVM monitoring data. That's what JmxRegistrar produces. Once is enough. All further attempts will fail. Benign error -> ignore. Explicitly testing for presence of a metric and registering it only if not found is a source of race conditions. The MetricRegistry also does not provide any putIfAbsent semantics. Life sucks.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381968524", "createdAt": "2020-02-20T12:28:35Z", "author": {"login": "anistor"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/MetricsResource.java", "diffHunk": "@@ -31,11 +35,20 @@\n  */\n public final class MetricsResource implements ResourceHandler {\n \n+   private final static Log log = LogFactory.getLog(MetricsResource.class, Log.class);\n+\n    private static final String METRICS_PATH = \"/metrics\";\n \n    private final MetricsRequestHandler requestHandler = new MetricsRequestHandler();\n \n    public MetricsResource() {\n+      try {\n+         new JmxRegistrar().init();\n+      } catch (IOException | IllegalArgumentException e) {\n+         // Smallrye uses a global singleton registry which is a nightmare for tests where more than one\n+         // server has to exist in a single JVM. It fails and we can't do anything about it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNzA2Mg=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4NTk2OA==", "bodyText": "IMO if it's ok for the registration to fail, then we shouldn't log it as an error, and the comment should mention why it's ok for it to fail.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381985968", "createdAt": "2020-02-20T13:06:36Z", "author": {"login": "danberindei"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/MetricsResource.java", "diffHunk": "@@ -31,11 +35,20 @@\n  */\n public final class MetricsResource implements ResourceHandler {\n \n+   private final static Log log = LogFactory.getLog(MetricsResource.class, Log.class);\n+\n    private static final String METRICS_PATH = \"/metrics\";\n \n    private final MetricsRequestHandler requestHandler = new MetricsRequestHandler();\n \n    public MetricsResource() {\n+      try {\n+         new JmxRegistrar().init();\n+      } catch (IOException | IllegalArgumentException e) {\n+         // Smallrye uses a global singleton registry which is a nightmare for tests where more than one\n+         // server has to exist in a single JVM. It fails and we can't do anything about it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNzA2Mg=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzcwMTI1OnYy", "diffSide": "RIGHT", "path": "wildfly/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/CacheConfigurationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzo0MzoxNlrOFsI9Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwODo0OToxMlrOFsKrzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyODM4Mg==", "bodyText": "WildFly was never into JMX, do nothing I guess /cc @tristantarrant", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381828382", "createdAt": "2020-02-20T07:43:16Z", "author": {"login": "danberindei"}, "path": "wildfly/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/CacheConfigurationService.java", "diffHunk": "@@ -71,8 +72,9 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n         builder.read(configuration);\n         builder.template(configuration.isTemplate());\n \n-       boolean jmxEnabled = SecurityActions.getCacheManagerConfiguration(dependencies.getCacheContainer()).statistics();\n-       builder.jmxStatistics().enabled(jmxEnabled);\n+        GlobalConfiguration globalConfiguration = SecurityActions.getCacheManagerConfiguration(dependencies.getCacheContainer());\n+        builder.statistics().enabled(globalConfiguration.statistics());\n+        // TODO [anistor] what about JMX ???", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg1NjcxOA==", "bodyText": "WildFly does expose the DMR as JMX as well as expose the MBeanServer to subsystems. But this code is going to be dropped, so ignore.", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381856718", "createdAt": "2020-02-20T08:49:12Z", "author": {"login": "tristantarrant"}, "path": "wildfly/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/CacheConfigurationService.java", "diffHunk": "@@ -71,8 +72,9 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n         builder.read(configuration);\n         builder.template(configuration.isTemplate());\n \n-       boolean jmxEnabled = SecurityActions.getCacheManagerConfiguration(dependencies.getCacheContainer()).statistics();\n-       builder.jmxStatistics().enabled(jmxEnabled);\n+        GlobalConfiguration globalConfiguration = SecurityActions.getCacheManagerConfiguration(dependencies.getCacheContainer());\n+        builder.statistics().enabled(globalConfiguration.statistics());\n+        // TODO [anistor] what about JMX ???", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyODM4Mg=="}, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzcyNDUxOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/code_examples/MBeanServerLookup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzo1MjozNFrOFsJLKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNzo1MjozNFrOFsJLKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgzMTk3OQ==", "bodyText": "This one's also deprecated", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381831979", "createdAt": "2020-02-20T07:52:34Z", "author": {"login": "danberindei"}, "path": "documentation/src/main/asciidoc/topics/code_examples/MBeanServerLookup.java", "diffHunk": "@@ -1,5 +1,5 @@\n GlobalConfiguration globalConfig = new GlobalConfigurationBuilder()\n-\u00a0 .globalJmxStatistics()\n+\u00a0 .jmx()\n \u00a0\u00a0\u00a0 .cacheManagerName(\"SalesCacheManager\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4567, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}