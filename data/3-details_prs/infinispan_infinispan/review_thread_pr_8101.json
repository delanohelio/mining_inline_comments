{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzU5MjUy", "number": 8101, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo0NDozMVrODsrgFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0MDo1MlrODuAyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTc2NjYyOnYy", "diffSide": "RIGHT", "path": "commons/loom/src/main/java/org/infinispan/commons/jdkspecific/JREVersion.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo0NDozMVrOF9qa_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzo0OToxOVrOF91Ryg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMjQ5NQ==", "bodyText": "Either this method should be named something like isLoomAvailable(), or it should be possible to implement it without multi-version classes.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400202495", "createdAt": "2020-03-30T13:44:31Z", "author": {"login": "danberindei"}, "path": "commons/loom/src/main/java/org/infinispan/commons/jdkspecific/JREVersion.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.infinispan.commons.jdkspecific;\n+\n+public class JREVersion {\n+   private JREVersion() { }\n+\n+   public static boolean isJava15OrNewer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyOTM0OQ==", "bodyText": "Well the idea was originally that I would detect if a thread group produces non blocking threads that it can't be configured with a blocking executor. But in Loom we will want this. How do you think we should do this then?", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400229349", "createdAt": "2020-03-30T14:19:49Z", "author": {"login": "wburns"}, "path": "commons/loom/src/main/java/org/infinispan/commons/jdkspecific/JREVersion.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.infinispan.commons.jdkspecific;\n+\n+public class JREVersion {\n+   private JREVersion() { }\n+\n+   public static boolean isJava15OrNewer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMjQ5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxODAyNg==", "bodyText": "I can just remove this for now though I guess. And we can deal with it later.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400318026", "createdAt": "2020-03-30T16:14:24Z", "author": {"login": "wburns"}, "path": "commons/loom/src/main/java/org/infinispan/commons/jdkspecific/JREVersion.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.infinispan.commons.jdkspecific;\n+\n+public class JREVersion {\n+   private JREVersion() { }\n+\n+   public static boolean isJava15OrNewer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMjQ5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3Nzg0MA==", "bodyText": "I would have been fine with something like isLoomAvailable(), or virtualThreadsAvailable(), I didn't want isJava15OrNewer() because stock OpenJDK 15 still doesn't have Loom.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400377840", "createdAt": "2020-03-30T17:45:32Z", "author": {"login": "danberindei"}, "path": "commons/loom/src/main/java/org/infinispan/commons/jdkspecific/JREVersion.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.infinispan.commons.jdkspecific;\n+\n+public class JREVersion {\n+   private JREVersion() { }\n+\n+   public static boolean isJava15OrNewer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMjQ5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3ODcwNQ==", "bodyText": "Oh okay, I misunderstood what you were saying. Either way I removed it for now.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400378705", "createdAt": "2020-03-30T17:46:49Z", "author": {"login": "wburns"}, "path": "commons/loom/src/main/java/org/infinispan/commons/jdkspecific/JREVersion.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.infinispan.commons.jdkspecific;\n+\n+public class JREVersion {\n+   private JREVersion() { }\n+\n+   public static boolean isJava15OrNewer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMjQ5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MDM2Mg==", "bodyText": "I have created https://issues.redhat.com/browse/ISPN-11563 which we can look into later about this.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400380362", "createdAt": "2020-03-30T17:49:19Z", "author": {"login": "wburns"}, "path": "commons/loom/src/main/java/org/infinispan/commons/jdkspecific/JREVersion.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.infinispan.commons.jdkspecific;\n+\n+public class JREVersion {\n+   private JREVersion() { }\n+\n+   public static boolean isJava15OrNewer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMjQ5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTc3OTkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/configuration/global/ThreadFactoryConfiguration.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo0NzoyNlrOF9qjSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDo1Mzo1MlrOF_vLAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwNDYxOQ==", "bodyText": "Non-backwards-compatible change, same in the builder", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400204619", "createdAt": "2020-03-30T13:47:26Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/global/ThreadFactoryConfiguration.java", "diffHunk": "@@ -67,8 +60,8 @@ public AttributeSet attributes() {\n       return name;\n    }\n \n-   public Attribute<ThreadGroup> groupName() {\n-      return group;\n+   public Attribute<String> groupName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyNDAwNg==", "bodyText": "I know. I did it on purpose. We can't let people specify the thread group and work properly moving forward. And we never allowed the xml definition to pass a thread group, just the name. So it is only a backwards compatibility issue for programmatic configuration.\nI guess I can add in the other method and throw an exception if you want?", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400224006", "createdAt": "2020-03-30T14:12:58Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/configuration/global/ThreadFactoryConfiguration.java", "diffHunk": "@@ -67,8 +60,8 @@ public AttributeSet attributes() {\n       return name;\n    }\n \n-   public Attribute<ThreadGroup> groupName() {\n-      return group;\n+   public Attribute<String> groupName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwNDYxOQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MTY3Mw==", "bodyText": "No, there's no point in keeping the method just to fail at runtime.\nIn theory you could keep the old ThreadGroup setting and create our thread group within the one from the config, but I'm not sure it's worth it. I'd just like the change to be explained, either in a javadoc in the configuration/builder, or maybe just in the upgrade notes.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400381673", "createdAt": "2020-03-30T17:51:29Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/global/ThreadFactoryConfiguration.java", "diffHunk": "@@ -67,8 +60,8 @@ public AttributeSet attributes() {\n       return name;\n    }\n \n-   public Attribute<ThreadGroup> groupName() {\n-      return group;\n+   public Attribute<String> groupName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwNDYxOQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4NzQ2Mw==", "bodyText": "Yeah I was going to add to the upgrading guide. I can add it there.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400387463", "createdAt": "2020-03-30T18:00:45Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/configuration/global/ThreadFactoryConfiguration.java", "diffHunk": "@@ -67,8 +60,8 @@ public AttributeSet attributes() {\n       return name;\n    }\n \n-   public Attribute<ThreadGroup> groupName() {\n-      return group;\n+   public Attribute<String> groupName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwNDYxOQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxODY5Mw==", "bodyText": "Added", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400418693", "createdAt": "2020-03-30T18:52:43Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/configuration/global/ThreadFactoryConfiguration.java", "diffHunk": "@@ -67,8 +60,8 @@ public AttributeSet attributes() {\n       return name;\n    }\n \n-   public Attribute<ThreadGroup> groupName() {\n-      return group;\n+   public Attribute<String> groupName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwNDYxOQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3NzQ3NQ==", "bodyText": "@wburns I see you kept the methods and they throw UnsupportedOperationException, I thought you'd add a comment instead?", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r402377475", "createdAt": "2020-04-02T14:53:52Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/global/ThreadFactoryConfiguration.java", "diffHunk": "@@ -67,8 +60,8 @@ public AttributeSet attributes() {\n       return name;\n    }\n \n-   public Attribute<ThreadGroup> groupName() {\n-      return group;\n+   public Attribute<String> groupName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwNDYxOQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTgyNDQ2OnYy", "diffSide": "RIGHT", "path": "commons/all/src/main/java/org/infinispan/commons/executors/BlockingResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo1NjozMFrOF9q-pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxOTo1NVrOF9sEJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMTYyMA==", "bodyText": "Missing @since and @author.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400211620", "createdAt": "2020-03-30T13:56:30Z", "author": {"login": "danberindei"}, "path": "commons/all/src/main/java/org/infinispan/commons/executors/BlockingResource.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package org.infinispan.commons.executors;\n+\n+/**\n+ * Interface to designate the resource is a blocking one.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyOTQxNQ==", "bodyText": "Okay.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400229415", "createdAt": "2020-03-30T14:19:55Z", "author": {"login": "wburns"}, "path": "commons/all/src/main/java/org/infinispan/commons/executors/BlockingResource.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package org.infinispan.commons.executors;\n+\n+/**\n+ * Interface to designate the resource is a blocking one.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMTYyMA=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTg0OTIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/factories/NamedExecutorsFactory.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDowMTo0M1rOF9rOjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxNTozNVrOGCWa-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ==", "bodyText": "Couldn't we have a single DefaultThreadFactory class again, with the thread group as a constructor parameter?", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400215695", "createdAt": "2020-03-30T14:01:43Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/NamedExecutorsFactory.java", "diffHunk": "@@ -107,13 +108,18 @@ public Object construct(String componentName) {\n \n    private ThreadFactory createThreadFactoryWithDefaults(GlobalConfiguration globalCfg, final String componentName,\n                                                          ExecutorServiceType type) {\n-      if (type.isNonBlocking()) {\n-         return new DefaultNonBlockingThreadFactory(null, getDefaultThreadPrio(componentName),\n-               DefaultThreadFactory.DEFAULT_PATTERN, globalCfg.transport().nodeName(), shortened(componentName));\n+      switch (type) {\n+         case BLOCKING:\n+            return new BlockingThreadFactory(\"ISPN-blocking-thread-group\", getDefaultThreadPrio(componentName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNzkxNQ==", "bodyText": "I think so, yeah. Originally this was for the thread creation.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400217915", "createdAt": "2020-03-30T14:04:53Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/factories/NamedExecutorsFactory.java", "diffHunk": "@@ -107,13 +108,18 @@ public Object construct(String componentName) {\n \n    private ThreadFactory createThreadFactoryWithDefaults(GlobalConfiguration globalCfg, final String componentName,\n                                                          ExecutorServiceType type) {\n-      if (type.isNonBlocking()) {\n-         return new DefaultNonBlockingThreadFactory(null, getDefaultThreadPrio(componentName),\n-               DefaultThreadFactory.DEFAULT_PATTERN, globalCfg.transport().nodeName(), shortened(componentName));\n+      switch (type) {\n+         case BLOCKING:\n+            return new BlockingThreadFactory(\"ISPN-blocking-thread-group\", getDefaultThreadPrio(componentName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMDUwMA==", "bodyText": "Actually, it isn't quite that simple as we would lose a check to ensure that the thread factory is non blocking when registering a non blocking executor. I can do an instanceof check and invoke a method instead though.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400320500", "createdAt": "2020-03-30T16:18:11Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/factories/NamedExecutorsFactory.java", "diffHunk": "@@ -107,13 +108,18 @@ public Object construct(String componentName) {\n \n    private ThreadFactory createThreadFactoryWithDefaults(GlobalConfiguration globalCfg, final String componentName,\n                                                          ExecutorServiceType type) {\n-      if (type.isNonBlocking()) {\n-         return new DefaultNonBlockingThreadFactory(null, getDefaultThreadPrio(componentName),\n-               DefaultThreadFactory.DEFAULT_PATTERN, globalCfg.transport().nodeName(), shortened(componentName));\n+      switch (type) {\n+         case BLOCKING:\n+            return new BlockingThreadFactory(\"ISPN-blocking-thread-group\", getDefaultThreadPrio(componentName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1NDY2Nw==", "bodyText": "Actually this ends up being much more troublesome as DefaultThreadFactory is in core which would have to move down to commons as well. I think leaving it how I had it is probably best unfortunately.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400354667", "createdAt": "2020-03-30T17:09:23Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/factories/NamedExecutorsFactory.java", "diffHunk": "@@ -107,13 +108,18 @@ public Object construct(String componentName) {\n \n    private ThreadFactory createThreadFactoryWithDefaults(GlobalConfiguration globalCfg, final String componentName,\n                                                          ExecutorServiceType type) {\n-      if (type.isNonBlocking()) {\n-         return new DefaultNonBlockingThreadFactory(null, getDefaultThreadPrio(componentName),\n-               DefaultThreadFactory.DEFAULT_PATTERN, globalCfg.transport().nodeName(), shortened(componentName));\n+      switch (type) {\n+         case BLOCKING:\n+            return new BlockingThreadFactory(\"ISPN-blocking-thread-group\", getDefaultThreadPrio(componentName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4Njc2Mg==", "bodyText": "Actually, it isn't quite that simple as we would lose a check to ensure that the thread factory is non blocking when registering a non blocking executor. I can do an instanceof check and invoke a method instead though.\n\nMaybe I'm missing something, but why do we need a check, if the blocking threads and the non-blocking threads are exactly the same, and only the thread group is different.\n\nActually this ends up being much more troublesome as DefaultThreadFactory is in core which would have to move down to commons as well.\n\nI'm definitely missing something here, I just see that NamedExecutorsFactory, BlockingThreadFactory, and NonBlockingThreadFactory are also in core.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400386762", "createdAt": "2020-03-30T17:59:38Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/NamedExecutorsFactory.java", "diffHunk": "@@ -107,13 +108,18 @@ public Object construct(String componentName) {\n \n    private ThreadFactory createThreadFactoryWithDefaults(GlobalConfiguration globalCfg, final String componentName,\n                                                          ExecutorServiceType type) {\n-      if (type.isNonBlocking()) {\n-         return new DefaultNonBlockingThreadFactory(null, getDefaultThreadPrio(componentName),\n-               DefaultThreadFactory.DEFAULT_PATTERN, globalCfg.transport().nodeName(), shortened(componentName));\n+      switch (type) {\n+         case BLOCKING:\n+            return new BlockingThreadFactory(\"ISPN-blocking-thread-group\", getDefaultThreadPrio(componentName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwMDA1NA==", "bodyText": "https://github.com/infinispan/infinispan/blob/master/commons/all/src/main/java/org/infinispan/commons/executors/BlockingThreadPoolExecutorFactory.java#L67 is the guy who checks to make sure that when you have an executor that is non blocking that you also have a thread factory that produces non blocking threads.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400400054", "createdAt": "2020-03-30T18:21:33Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/factories/NamedExecutorsFactory.java", "diffHunk": "@@ -107,13 +108,18 @@ public Object construct(String componentName) {\n \n    private ThreadFactory createThreadFactoryWithDefaults(GlobalConfiguration globalCfg, final String componentName,\n                                                          ExecutorServiceType type) {\n-      if (type.isNonBlocking()) {\n-         return new DefaultNonBlockingThreadFactory(null, getDefaultThreadPrio(componentName),\n-               DefaultThreadFactory.DEFAULT_PATTERN, globalCfg.transport().nodeName(), shortened(componentName));\n+      switch (type) {\n+         case BLOCKING:\n+            return new BlockingThreadFactory(\"ISPN-blocking-thread-group\", getDefaultThreadPrio(componentName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxOTM3MQ==", "bodyText": "Actually, it isn't quite that simple as we would lose a check to ensure that the thread factory is non blocking when registering a non blocking executor. I can do an instanceof check and invoke a method instead though.\n\nMaybe I'm missing something, but why do we need a check, if the blocking threads and the non-blocking threads are exactly the same, and only the thread group is different.\n\nThey aren't exactly the same, we have to make sure all threads of a given executor are either never blocked or can be.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400419371", "createdAt": "2020-03-30T18:53:47Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/factories/NamedExecutorsFactory.java", "diffHunk": "@@ -107,13 +108,18 @@ public Object construct(String componentName) {\n \n    private ThreadFactory createThreadFactoryWithDefaults(GlobalConfiguration globalCfg, final String componentName,\n                                                          ExecutorServiceType type) {\n-      if (type.isNonBlocking()) {\n-         return new DefaultNonBlockingThreadFactory(null, getDefaultThreadPrio(componentName),\n-               DefaultThreadFactory.DEFAULT_PATTERN, globalCfg.transport().nodeName(), shortened(componentName));\n+      switch (type) {\n+         case BLOCKING:\n+            return new BlockingThreadFactory(\"ISPN-blocking-thread-group\", getDefaultThreadPrio(componentName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwMjU5Nw==", "bodyText": "I had to try to remove BlockingThreadFactory and NonBlockingThreadFactory myself to see the problem, but I think I have a solution here:\nmaster...danberindei:ISPN-11510_thread_type_detection\nI'm looking forward to having the programmatic configuration as simple as the XML configuration, with its <blocking-thread-pool/> and <non-blocking-thread-pool/> elements.\n\n[...] we have to make sure all threads of a given executor are either never blocked or can be.\n\nSure, but the check now involves only the thread's group, not the thread itself.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r402402597", "createdAt": "2020-04-02T15:26:02Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/NamedExecutorsFactory.java", "diffHunk": "@@ -107,13 +108,18 @@ public Object construct(String componentName) {\n \n    private ThreadFactory createThreadFactoryWithDefaults(GlobalConfiguration globalCfg, final String componentName,\n                                                          ExecutorServiceType type) {\n-      if (type.isNonBlocking()) {\n-         return new DefaultNonBlockingThreadFactory(null, getDefaultThreadPrio(componentName),\n-               DefaultThreadFactory.DEFAULT_PATTERN, globalCfg.transport().nodeName(), shortened(componentName));\n+      switch (type) {\n+         case BLOCKING:\n+            return new BlockingThreadFactory(\"ISPN-blocking-thread-group\", getDefaultThreadPrio(componentName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxNzE5OA==", "bodyText": "I'm looking forward to having the programmatic configuration as simple as the XML configuration, with its  and  elements.\n\nOops, I thought we had merged the <thread-factory/> element into <blocking-thread-pool/> and <non-blocking-thread-pool/>. I guess the XML configuration is just as complicated as the programmatic one :)", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r402417198", "createdAt": "2020-04-02T15:46:08Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/NamedExecutorsFactory.java", "diffHunk": "@@ -107,13 +108,18 @@ public Object construct(String componentName) {\n \n    private ThreadFactory createThreadFactoryWithDefaults(GlobalConfiguration globalCfg, final String componentName,\n                                                          ExecutorServiceType type) {\n-      if (type.isNonBlocking()) {\n-         return new DefaultNonBlockingThreadFactory(null, getDefaultThreadPrio(componentName),\n-               DefaultThreadFactory.DEFAULT_PATTERN, globalCfg.transport().nodeName(), shortened(componentName));\n+      switch (type) {\n+         case BLOCKING:\n+            return new BlockingThreadFactory(\"ISPN-blocking-thread-group\", getDefaultThreadPrio(componentName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMDg5NQ==", "bodyText": "Oops, I thought we had merged the <thread-factory/> element into <blocking-thread-pool/> and <non-blocking-thread-pool/>. I guess the XML configuration is just as complicated as the programmatic one :)\n\nNo, this is something I had thought of doing, but didn't really look into it. I would love if we didn't have it, it is really annoying to say the least.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r402420895", "createdAt": "2020-04-02T15:51:14Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/factories/NamedExecutorsFactory.java", "diffHunk": "@@ -107,13 +108,18 @@ public Object construct(String componentName) {\n \n    private ThreadFactory createThreadFactoryWithDefaults(GlobalConfiguration globalCfg, final String componentName,\n                                                          ExecutorServiceType type) {\n-      if (type.isNonBlocking()) {\n-         return new DefaultNonBlockingThreadFactory(null, getDefaultThreadPrio(componentName),\n-               DefaultThreadFactory.DEFAULT_PATTERN, globalCfg.transport().nodeName(), shortened(componentName));\n+      switch (type) {\n+         case BLOCKING:\n+            return new BlockingThreadFactory(\"ISPN-blocking-thread-group\", getDefaultThreadPrio(componentName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE2MTg0Nw==", "bodyText": "I had to try to remove BlockingThreadFactory and NonBlockingThreadFactory myself to see the problem, but I think I have a solution here:\nmaster...danberindei:ISPN-11510_thread_type_detection\n\nSo the changes here delay the check until runtime and inside the executor itself. This isn't as friendly from an error perspective as what I have at the moment as the error is immediately seen in the thread that is bootstrapping the components, which will bubble up quite well. I am not sure how this other error will propagate if at all.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r403161847", "createdAt": "2020-04-03T17:16:05Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/factories/NamedExecutorsFactory.java", "diffHunk": "@@ -107,13 +108,18 @@ public Object construct(String componentName) {\n \n    private ThreadFactory createThreadFactoryWithDefaults(GlobalConfiguration globalCfg, final String componentName,\n                                                          ExecutorServiceType type) {\n-      if (type.isNonBlocking()) {\n-         return new DefaultNonBlockingThreadFactory(null, getDefaultThreadPrio(componentName),\n-               DefaultThreadFactory.DEFAULT_PATTERN, globalCfg.transport().nodeName(), shortened(componentName));\n+      switch (type) {\n+         case BLOCKING:\n+            return new BlockingThreadFactory(\"ISPN-blocking-thread-group\", getDefaultThreadPrio(componentName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExNzY4OQ==", "bodyText": "Fair enough, hopefully we'll simplify the config at some point and make that check unnecessary anyway.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r405117689", "createdAt": "2020-04-07T21:15:35Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/NamedExecutorsFactory.java", "diffHunk": "@@ -107,13 +108,18 @@ public Object construct(String componentName) {\n \n    private ThreadFactory createThreadFactoryWithDefaults(GlobalConfiguration globalCfg, final String componentName,\n                                                          ExecutorServiceType type) {\n-      if (type.isNonBlocking()) {\n-         return new DefaultNonBlockingThreadFactory(null, getDefaultThreadPrio(componentName),\n-               DefaultThreadFactory.DEFAULT_PATTERN, globalCfg.transport().nodeName(), shortened(componentName));\n+      switch (type) {\n+         case BLOCKING:\n+            return new BlockingThreadFactory(\"ISPN-blocking-thread-group\", getDefaultThreadPrio(componentName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, "originalCommit": {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTUzNTQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/configuration/global/ThreadFactoryConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDo1NzoxNlrOF_vVow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzoyNzoyMFrOGAfpSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MDE5NQ==", "bodyText": "Shouldn't this method return attributes.attribute(GROUP).get()?", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r402380195", "createdAt": "2020-04-02T14:57:16Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/configuration/global/ThreadFactoryConfigurationBuilder.java", "diffHunk": "@@ -45,15 +53,23 @@ public ThreadFactoryConfigurationBuilder nodeName(String nodeName) {\n       return this;\n    }\n \n-   public String name() {\n+   /**\n+    * @deprecated Please use {@link #threadGroupName()} instead\n+    */\n+   @Deprecated\n+   public ThreadGroup group() {\n+      throw new UnsupportedOperationException();\n+   }\n+\n+   public String threadGroupName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23761b8a3d110cc74b7f9ece7b4c415f804e908a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE3MTY1Ng==", "bodyText": "Actually it was supposed to be named name instead. But I can just remove the unsupported operation methods instead , as that is cleaner.", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r403171656", "createdAt": "2020-04-03T17:27:20Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/configuration/global/ThreadFactoryConfigurationBuilder.java", "diffHunk": "@@ -45,15 +53,23 @@ public ThreadFactoryConfigurationBuilder nodeName(String nodeName) {\n       return this;\n    }\n \n-   public String name() {\n+   /**\n+    * @deprecated Please use {@link #threadGroupName()} instead\n+    */\n+   @Deprecated\n+   public ThreadGroup group() {\n+      throw new UnsupportedOperationException();\n+   }\n+\n+   public String threadGroupName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MDE5NQ=="}, "originalCommit": {"oid": "23761b8a3d110cc74b7f9ece7b4c415f804e908a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTczOTM3OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0MDo1MlrOF_xXqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0MDo1MlrOF_xXqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMzQ4Mw==", "bodyText": "Typo: programmtic", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r402413483", "createdAt": "2020-04-02T15:40:52Z", "author": {"login": "danberindei"}, "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "diffHunk": "@@ -23,6 +23,11 @@ Total Order transaction protocol was deprecated in 10.0 and now it is removed.\n ** `.buildQueryBuilderForClass()`, that allows to build Hibernate Search queries directly has been removed. Ickle queries should be used instead.\n ** It is not possible anymore to specify multiple target entity(ies) class(es) when calling `.getQuery()`. The entity will come from the Ickle query string, so multi-entity queries are not supported anymore.\n \n+== ThreadFactoryConfiguration changes\n+\n+The ThreadGroup configuration setting has been removed and only thread group name is allowed now.\n+This configuration was inconsistent between programmtic and declarative configuration and is now", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23761b8a3d110cc74b7f9ece7b4c415f804e908a"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4350, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}