{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwOTAyNTc4", "number": 8815, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjo1OTozMlrOE8NLLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTozNzoxN1rOE99r4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTY1ODY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/configuration/cache/IndexMergeConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMjo1OTozMlrOH4MZPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzo1Mjo0MlrOH4OWnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4NTM3Mg==", "bodyText": "FWIW, constants are available in Hibernate Search: see org.hibernate.search.backend.lucene.cfg.LuceneIndexSettings.\nSimilarly, for backend-level settings: org.hibernate.search.backend.lucene.cfg.LuceneBackendSettings.", "url": "https://github.com/infinispan/infinispan/pull/8815#discussion_r528685372", "createdAt": "2020-11-23T12:59:32Z", "author": {"login": "yrodiere"}, "path": "core/src/main/java/org/infinispan/configuration/cache/IndexMergeConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.infinispan.configuration.cache;\n+\n+\n+import static org.infinispan.configuration.cache.IndexMergeConfiguration.CALIBRATE_BY_DELETES;\n+import static org.infinispan.configuration.cache.IndexMergeConfiguration.FACTOR;\n+import static org.infinispan.configuration.cache.IndexMergeConfiguration.MAX_DOCS;\n+import static org.infinispan.configuration.cache.IndexMergeConfiguration.MAX_FORCED_SIZE;\n+import static org.infinispan.configuration.cache.IndexMergeConfiguration.MAX_SIZE;\n+import static org.infinispan.configuration.cache.IndexMergeConfiguration.MIN_SIZE;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.ConfigurationBuilderInfo;\n+import org.infinispan.commons.configuration.attributes.Attribute;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.configuration.global.GlobalConfiguration;\n+\n+/**\n+ * @since 12.0\n+ */\n+public class IndexMergeConfigurationBuilder extends AbstractIndexingConfigurationChildBuilder\n+      implements Builder<IndexMergeConfiguration>, ConfigurationBuilderInfo {\n+\n+   private static final String KEY_PREFIX = \"hibernate.search.backend.io.merge\";\n+   private static final String MAX_DOCS_KEY = KEY_PREFIX + \".max_docs\";\n+   private static final String FACTOR_KEY = KEY_PREFIX + \".factor\";\n+   private static final String MIN_SIZE_KEY = KEY_PREFIX + \".min_size\";\n+   private static final String MAX_SIZE_KEY = KEY_PREFIX + \".max_size\";\n+   private static final String MAX_FORCED_SIZE_KEY = KEY_PREFIX + \".max_forced_size\";\n+   private static final String CALIBRATE_BY_DELETES_KEY = KEY_PREFIX + \".calibrate_by_deletes\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f668ba8d74382c472dcc0a06552849dc60d57b99"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcxNzQ3MQ==", "bodyText": "Unfortunately I can't use them here, as core does not depend on Hibernate Search", "url": "https://github.com/infinispan/infinispan/pull/8815#discussion_r528717471", "createdAt": "2020-11-23T13:52:42Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/configuration/cache/IndexMergeConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.infinispan.configuration.cache;\n+\n+\n+import static org.infinispan.configuration.cache.IndexMergeConfiguration.CALIBRATE_BY_DELETES;\n+import static org.infinispan.configuration.cache.IndexMergeConfiguration.FACTOR;\n+import static org.infinispan.configuration.cache.IndexMergeConfiguration.MAX_DOCS;\n+import static org.infinispan.configuration.cache.IndexMergeConfiguration.MAX_FORCED_SIZE;\n+import static org.infinispan.configuration.cache.IndexMergeConfiguration.MAX_SIZE;\n+import static org.infinispan.configuration.cache.IndexMergeConfiguration.MIN_SIZE;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.ConfigurationBuilderInfo;\n+import org.infinispan.commons.configuration.attributes.Attribute;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.configuration.global.GlobalConfiguration;\n+\n+/**\n+ * @since 12.0\n+ */\n+public class IndexMergeConfigurationBuilder extends AbstractIndexingConfigurationChildBuilder\n+      implements Builder<IndexMergeConfiguration>, ConfigurationBuilderInfo {\n+\n+   private static final String KEY_PREFIX = \"hibernate.search.backend.io.merge\";\n+   private static final String MAX_DOCS_KEY = KEY_PREFIX + \".max_docs\";\n+   private static final String FACTOR_KEY = KEY_PREFIX + \".factor\";\n+   private static final String MIN_SIZE_KEY = KEY_PREFIX + \".min_size\";\n+   private static final String MAX_SIZE_KEY = KEY_PREFIX + \".max_size\";\n+   private static final String MAX_FORCED_SIZE_KEY = KEY_PREFIX + \".max_forced_size\";\n+   private static final String CALIBRATE_BY_DELETES_KEY = KEY_PREFIX + \".calibrate_by_deletes\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4NTM3Mg=="}, "originalCommit": {"oid": "f668ba8d74382c472dcc0a06552849dc60d57b99"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDA5MjQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/schema/infinispan-config-12.0.xsd", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTozNzoxN1rOH67Nkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo0Njo0OFrOH6-_rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU0OTU4Nw==", "bodyText": "s/internal/interval/", "url": "https://github.com/infinispan/infinispan/pull/8815#discussion_r531549587", "createdAt": "2020-11-27T11:37:17Z", "author": {"login": "tristantarrant"}, "path": "core/src/main/resources/schema/infinispan-config-12.0.xsd", "diffHunk": "@@ -2296,6 +2318,171 @@\n     </xs:restriction>\n   </xs:simpleType>\n \n+  <xs:simpleType name=\"index-storage\">\n+    <xs:restriction base=\"xs:token\">\n+      <xs:enumeration value=\"filesystem\">\n+        <xs:annotation>\n+          <xs:documentation>Local filesystem index storage. This is the default.</xs:documentation>\n+        </xs:annotation>\n+      </xs:enumeration>\n+      <xs:enumeration value=\"local-heap\">\n+        <xs:annotation>\n+          <xs:documentation>JVM heap index storage, not persisted between restarts. Only suitable for small datasets\n+            with low concurrency.\n+          </xs:documentation>\n+        </xs:annotation>\n+      </xs:enumeration>\n+    </xs:restriction>\n+  </xs:simpleType>\n+\n+  <xs:complexType name=\"index-reader\">\n+    <xs:attribute name=\"refresh-interval\" type=\"xs:long\" default=\"0\">\n+      <xs:annotation>\n+        <xs:documentation>\n+          Advanced: Defines the internal in milliseconds to reopen the index reader.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e658f1f3af0651ac4777319ca9ef3c57f79e264"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMTU2Nw==", "bodyText": "Fixed!", "url": "https://github.com/infinispan/infinispan/pull/8815#discussion_r531611567", "createdAt": "2020-11-27T13:46:48Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/resources/schema/infinispan-config-12.0.xsd", "diffHunk": "@@ -2296,6 +2318,171 @@\n     </xs:restriction>\n   </xs:simpleType>\n \n+  <xs:simpleType name=\"index-storage\">\n+    <xs:restriction base=\"xs:token\">\n+      <xs:enumeration value=\"filesystem\">\n+        <xs:annotation>\n+          <xs:documentation>Local filesystem index storage. This is the default.</xs:documentation>\n+        </xs:annotation>\n+      </xs:enumeration>\n+      <xs:enumeration value=\"local-heap\">\n+        <xs:annotation>\n+          <xs:documentation>JVM heap index storage, not persisted between restarts. Only suitable for small datasets\n+            with low concurrency.\n+          </xs:documentation>\n+        </xs:annotation>\n+      </xs:enumeration>\n+    </xs:restriction>\n+  </xs:simpleType>\n+\n+  <xs:complexType name=\"index-reader\">\n+    <xs:attribute name=\"refresh-interval\" type=\"xs:long\" default=\"0\">\n+      <xs:annotation>\n+        <xs:documentation>\n+          Advanced: Defines the internal in milliseconds to reopen the index reader.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU0OTU4Nw=="}, "originalCommit": {"oid": "9e658f1f3af0651ac4777319ca9ef3c57f79e264"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3756, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}