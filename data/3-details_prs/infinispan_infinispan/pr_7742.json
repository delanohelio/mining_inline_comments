{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNjExMjU1", "number": 7742, "title": "ISPN-11164 clustered max idle doc update", "bodyText": "https://issues.redhat.com/browse/ISPN-11164\nNeeds backport to 9.4.x to hit downstream 7.3.5.", "createdAt": "2020-01-16T12:06:09Z", "url": "https://github.com/infinispan/infinispan/pull/7742", "merged": true, "mergeCommit": {"oid": "40f3e3c9c97a67129101319655c5f46bfc798fd6"}, "closed": true, "closedAt": "2020-01-16T18:20:35Z", "author": {"login": "oraNod"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb69A8zgBqjI5NTUyODc4Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7LFfkgFqTM0NDQ0MzcyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7836b6a7e365f85ef0360201f40adb1c4b99b240", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/7836b6a7e365f85ef0360201f40adb1c4b99b240", "committedDate": "2020-01-16T12:05:34Z", "message": "ISPN-11164 clustered max idle doc update"}, "afterCommit": {"oid": "a2a59649ffcc2203906aeaf5f0a9247f9c86dde1", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/a2a59649ffcc2203906aeaf5f0a9247f9c86dde1", "committedDate": "2020-01-16T16:47:37Z", "message": "off heap and cache stores not supported"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MDkyNjI3", "url": "https://github.com/infinispan/infinispan/pull/7742#pullrequestreview-344092627", "createdAt": "2020-01-16T17:35:14Z", "commit": {"oid": "a2a59649ffcc2203906aeaf5f0a9247f9c86dde1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzozNToxNFrOFehzug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzozOTozNFrOFeh7Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NTUxNA==", "bodyText": "It also isn't implemented :)", "url": "https://github.com/infinispan/infinispan/pull/7742#discussion_r367555514", "createdAt": "2020-01-16T17:35:14Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/eviction.adoc", "diffHunk": "@@ -211,44 +211,53 @@ Maximum idle expiration has different behavior in local and clustered cache envi\n \n [[expiration_maxidle_local]]\n ==== Local Max Idle\n+In local cache mode, {brandname} expires entries with the `maxIdle` configuration when:\n \n-In non-clustered cache environments, the `maxIdle` configuration expires entries when:\n-\n-* accessed directly (`Cache.get`).\n-* iterated upon (`Cache.size`).\n+* accessed directly (`Cache.get()`).\n+* iterated upon (`Cache.size()`).\n * the expiration reaper thread runs.\n \n [[expiration_maxidle_clustered]]\n ==== Clustered Max Idle\n+In clustered cache modes, when clients read entries that have `max-idle`\n+expiration values, {brandname} sends touch commands to all owners. This ensures\n+that the entries have the same relative access time across the cluster.\n \n-In clustered environments, nodes in the cluster can have different access times\n-for the same entry. Entries do not expire from the cache until they reach the\n-maxium idle time for all owners across the cluster.\n+When nodes detect that an entry reaches the maximum idle time, {brandname}\n+removes it from the cache and does not return the entry to the client that\n+requested it.\n \n-When a node detects that an entry has reached the maximum idle time and is\n-expired, the node gets the last time that the entry was accessed from the other\n-owners in the cluster. If the other owners indicate that the entry is expired,\n-that entry is not returned to the requester and removed from the cache.\n+[IMPORTANT]\n+====\n+Clustered `max-idle` does not work with entries stored in off-heap memory.\n+\n+Likewise, using clustered `max-idle` with entries persisted via cache stores\n+results in significant performance degradation. You should not use clustered ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a59649ffcc2203906aeaf5f0a9247f9c86dde1"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NTk2Mg==", "bodyText": "This can now be removed.", "url": "https://github.com/infinispan/infinispan/pull/7742#discussion_r367555962", "createdAt": "2020-01-16T17:36:13Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/eviction.adoc", "diffHunk": "@@ -211,44 +211,53 @@ Maximum idle expiration has different behavior in local and clustered cache envi\n \n [[expiration_maxidle_local]]\n ==== Local Max Idle\n+In local cache mode, {brandname} expires entries with the `maxIdle` configuration when:\n \n-In non-clustered cache environments, the `maxIdle` configuration expires entries when:\n-\n-* accessed directly (`Cache.get`).\n-* iterated upon (`Cache.size`).\n+* accessed directly (`Cache.get()`).\n+* iterated upon (`Cache.size()`).\n * the expiration reaper thread runs.\n \n [[expiration_maxidle_clustered]]\n ==== Clustered Max Idle\n+In clustered cache modes, when clients read entries that have `max-idle`\n+expiration values, {brandname} sends touch commands to all owners. This ensures\n+that the entries have the same relative access time across the cluster.\n \n-In clustered environments, nodes in the cluster can have different access times\n-for the same entry. Entries do not expire from the cache until they reach the\n-maxium idle time for all owners across the cluster.\n+When nodes detect that an entry reaches the maximum idle time, {brandname}\n+removes it from the cache and does not return the entry to the client that\n+requested it.\n \n-When a node detects that an entry has reached the maximum idle time and is\n-expired, the node gets the last time that the entry was accessed from the other\n-owners in the cluster. If the other owners indicate that the entry is expired,\n-that entry is not returned to the requester and removed from the cache.\n+[IMPORTANT]\n+====\n+Clustered `max-idle` does not work with entries stored in off-heap memory.\n+\n+Likewise, using clustered `max-idle` with entries persisted via cache stores\n+results in significant performance degradation. You should not use clustered \n+`max-idle` with cache stores.\n+====\n \n-The following points apply to using the `maxIdle` configuration with clustered\n-caches:\n+Before using clustered `max-idle`, you should review the following points:\n \n-* If one or more owner in the cluster detects that an entry is not expired,\n-then a `Cache.get` operation returns the entry. The last access time for that\n-entry is also updated to the current time.\n+* `Cache.get()` does not return until the touch commands complete. This synchronous behavior increases latency of client requests.\n+* Clustered `max-idle` also updates the recent access count for eviction on all owners.\n+//Scattered cache is community only\n+ifndef::productized[]\n+* With scattered cache mode, {brandname} sends touch commands to all nodes, not\n+just primary and backup owners.\n+endif::productized[]\n * When the expiration reaper finds entries that might be expired with the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a59649ffcc2203906aeaf5f0a9247f9c86dde1"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NjAzOQ==", "bodyText": "This can now be removed.", "url": "https://github.com/infinispan/infinispan/pull/7742#discussion_r367556039", "createdAt": "2020-01-16T17:36:25Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/eviction.adoc", "diffHunk": "@@ -211,44 +211,53 @@ Maximum idle expiration has different behavior in local and clustered cache envi\n \n [[expiration_maxidle_local]]\n ==== Local Max Idle\n+In local cache mode, {brandname} expires entries with the `maxIdle` configuration when:\n \n-In non-clustered cache environments, the `maxIdle` configuration expires entries when:\n-\n-* accessed directly (`Cache.get`).\n-* iterated upon (`Cache.size`).\n+* accessed directly (`Cache.get()`).\n+* iterated upon (`Cache.size()`).\n * the expiration reaper thread runs.\n \n [[expiration_maxidle_clustered]]\n ==== Clustered Max Idle\n+In clustered cache modes, when clients read entries that have `max-idle`\n+expiration values, {brandname} sends touch commands to all owners. This ensures\n+that the entries have the same relative access time across the cluster.\n \n-In clustered environments, nodes in the cluster can have different access times\n-for the same entry. Entries do not expire from the cache until they reach the\n-maxium idle time for all owners across the cluster.\n+When nodes detect that an entry reaches the maximum idle time, {brandname}\n+removes it from the cache and does not return the entry to the client that\n+requested it.\n \n-When a node detects that an entry has reached the maximum idle time and is\n-expired, the node gets the last time that the entry was accessed from the other\n-owners in the cluster. If the other owners indicate that the entry is expired,\n-that entry is not returned to the requester and removed from the cache.\n+[IMPORTANT]\n+====\n+Clustered `max-idle` does not work with entries stored in off-heap memory.\n+\n+Likewise, using clustered `max-idle` with entries persisted via cache stores\n+results in significant performance degradation. You should not use clustered \n+`max-idle` with cache stores.\n+====\n \n-The following points apply to using the `maxIdle` configuration with clustered\n-caches:\n+Before using clustered `max-idle`, you should review the following points:\n \n-* If one or more owner in the cluster detects that an entry is not expired,\n-then a `Cache.get` operation returns the entry. The last access time for that\n-entry is also updated to the current time.\n+* `Cache.get()` does not return until the touch commands complete. This synchronous behavior increases latency of client requests.\n+* Clustered `max-idle` also updates the recent access count for eviction on all owners.\n+//Scattered cache is community only\n+ifndef::productized[]\n+* With scattered cache mode, {brandname} sends touch commands to all nodes, not\n+just primary and backup owners.\n+endif::productized[]\n * When the expiration reaper finds entries that might be expired with the\n maximum idle time, all nodes update the last access time for those entries\n to the most recent access time before the `maxIdle` time. In this way, the\n reaper prevents invalid expiration of entries.\n * Clustered transactional caches do *not* remove entries that are expired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a59649ffcc2203906aeaf5f0a9247f9c86dde1"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NzM4Mg==", "bodyText": "This is actually just max-idle in general not even clustered.", "url": "https://github.com/infinispan/infinispan/pull/7742#discussion_r367557382", "createdAt": "2020-01-16T17:39:24Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/eviction.adoc", "diffHunk": "@@ -211,44 +211,53 @@ Maximum idle expiration has different behavior in local and clustered cache envi\n \n [[expiration_maxidle_local]]\n ==== Local Max Idle\n+In local cache mode, {brandname} expires entries with the `maxIdle` configuration when:\n \n-In non-clustered cache environments, the `maxIdle` configuration expires entries when:\n-\n-* accessed directly (`Cache.get`).\n-* iterated upon (`Cache.size`).\n+* accessed directly (`Cache.get()`).\n+* iterated upon (`Cache.size()`).\n * the expiration reaper thread runs.\n \n [[expiration_maxidle_clustered]]\n ==== Clustered Max Idle\n+In clustered cache modes, when clients read entries that have `max-idle`\n+expiration values, {brandname} sends touch commands to all owners. This ensures\n+that the entries have the same relative access time across the cluster.\n \n-In clustered environments, nodes in the cluster can have different access times\n-for the same entry. Entries do not expire from the cache until they reach the\n-maxium idle time for all owners across the cluster.\n+When nodes detect that an entry reaches the maximum idle time, {brandname}\n+removes it from the cache and does not return the entry to the client that\n+requested it.\n \n-When a node detects that an entry has reached the maximum idle time and is\n-expired, the node gets the last time that the entry was accessed from the other\n-owners in the cluster. If the other owners indicate that the entry is expired,\n-that entry is not returned to the requester and removed from the cache.\n+[IMPORTANT]\n+====\n+Clustered `max-idle` does not work with entries stored in off-heap memory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a59649ffcc2203906aeaf5f0a9247f9c86dde1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NzQ1OQ==", "bodyText": "Same here it is just max-idle in general.", "url": "https://github.com/infinispan/infinispan/pull/7742#discussion_r367557459", "createdAt": "2020-01-16T17:39:34Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/eviction.adoc", "diffHunk": "@@ -211,44 +211,53 @@ Maximum idle expiration has different behavior in local and clustered cache envi\n \n [[expiration_maxidle_local]]\n ==== Local Max Idle\n+In local cache mode, {brandname} expires entries with the `maxIdle` configuration when:\n \n-In non-clustered cache environments, the `maxIdle` configuration expires entries when:\n-\n-* accessed directly (`Cache.get`).\n-* iterated upon (`Cache.size`).\n+* accessed directly (`Cache.get()`).\n+* iterated upon (`Cache.size()`).\n * the expiration reaper thread runs.\n \n [[expiration_maxidle_clustered]]\n ==== Clustered Max Idle\n+In clustered cache modes, when clients read entries that have `max-idle`\n+expiration values, {brandname} sends touch commands to all owners. This ensures\n+that the entries have the same relative access time across the cluster.\n \n-In clustered environments, nodes in the cluster can have different access times\n-for the same entry. Entries do not expire from the cache until they reach the\n-maxium idle time for all owners across the cluster.\n+When nodes detect that an entry reaches the maximum idle time, {brandname}\n+removes it from the cache and does not return the entry to the client that\n+requested it.\n \n-When a node detects that an entry has reached the maximum idle time and is\n-expired, the node gets the last time that the entry was accessed from the other\n-owners in the cluster. If the other owners indicate that the entry is expired,\n-that entry is not returned to the requester and removed from the cache.\n+[IMPORTANT]\n+====\n+Clustered `max-idle` does not work with entries stored in off-heap memory.\n+\n+Likewise, using clustered `max-idle` with entries persisted via cache stores", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a59649ffcc2203906aeaf5f0a9247f9c86dde1"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2469a789e0b038dc7908f53046cf40e75b87852", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/b2469a789e0b038dc7908f53046cf40e75b87852", "committedDate": "2020-01-16T18:13:51Z", "message": "ISPN-11164 clustered max idle doc update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2a59649ffcc2203906aeaf5f0a9247f9c86dde1", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/a2a59649ffcc2203906aeaf5f0a9247f9c86dde1", "committedDate": "2020-01-16T16:47:37Z", "message": "off heap and cache stores not supported"}, "afterCommit": {"oid": "b2469a789e0b038dc7908f53046cf40e75b87852", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/b2469a789e0b038dc7908f53046cf40e75b87852", "committedDate": "2020-01-16T18:13:51Z", "message": "ISPN-11164 clustered max idle doc update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NDQzNzIw", "url": "https://github.com/infinispan/infinispan/pull/7742#pullrequestreview-344443720", "createdAt": "2020-01-17T09:10:04Z", "commit": {"oid": "b2469a789e0b038dc7908f53046cf40e75b87852"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOToxMDowNVrOFeytnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOToxMDo1NlrOFeyu9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgzMjQ3Nw==", "bodyText": "Nitpicking, but we don't give the users a choice between clustered and non-clustered max-idle.", "url": "https://github.com/infinispan/infinispan/pull/7742#discussion_r367832477", "createdAt": "2020-01-17T09:10:05Z", "author": {"login": "danberindei"}, "path": "documentation/src/main/asciidoc/topics/eviction.adoc", "diffHunk": "@@ -209,46 +209,45 @@ can result in slower operation times.\n \n Maximum idle expiration has different behavior in local and clustered cache environments.\n \n+[IMPORTANT]\n+====\n+Maximum idle expiration, `max-idle`, does not currently work with entries stored in off-heap memory.\n+\n+Likewise, `max-idle` does not work if caches use cache stores as a persistence layer.\n+====\n+\n [[expiration_maxidle_local]]\n ==== Local Max Idle\n+In local cache mode, {brandname} expires entries with the `maxIdle` configuration when:\n \n-In non-clustered cache environments, the `maxIdle` configuration expires entries when:\n-\n-* accessed directly (`Cache.get`).\n-* iterated upon (`Cache.size`).\n+* accessed directly (`Cache.get()`).\n+* iterated upon (`Cache.size()`).\n * the expiration reaper thread runs.\n \n [[expiration_maxidle_clustered]]\n ==== Clustered Max Idle\n-\n-In clustered environments, nodes in the cluster can have different access times\n-for the same entry. Entries do not expire from the cache until they reach the\n-maxium idle time for all owners across the cluster.\n-\n-When a node detects that an entry has reached the maximum idle time and is\n-expired, the node gets the last time that the entry was accessed from the other\n-owners in the cluster. If the other owners indicate that the entry is expired,\n-that entry is not returned to the requester and removed from the cache.\n-\n-The following points apply to using the `maxIdle` configuration with clustered\n-caches:\n-\n-* If one or more owner in the cluster detects that an entry is not expired,\n-then a `Cache.get` operation returns the entry. The last access time for that\n-entry is also updated to the current time.\n-* When the expiration reaper finds entries that might be expired with the\n-maximum idle time, all nodes update the last access time for those entries\n-to the most recent access time before the `maxIdle` time. In this way, the\n-reaper prevents invalid expiration of entries.\n-* Clustered transactional caches do *not* remove entries that are expired\n-with the maximum idle time on `Cache.get` operations. These expired entries\n-are removed with the expiration reaper thread only, otherwise deadlocking\n-can occur.\n+In clustered cache modes, when clients read entries that have `max-idle`\n+expiration values, {brandname} sends touch commands to all owners. This ensures\n+that the entries have the same relative access time across the cluster.\n+\n+When nodes detect that an entry reaches the maximum idle time, {brandname}\n+removes it from the cache and does not return the entry to the client that\n+requested it.\n+\n+Before using clustered `max-idle`, you should review the following points:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2469a789e0b038dc7908f53046cf40e75b87852"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgzMjgyMA==", "bodyText": "count is too specific, I don't think Caffeine keeps an actual count, and we definitely don't keep a count in our off-heap LRU implementation.", "url": "https://github.com/infinispan/infinispan/pull/7742#discussion_r367832820", "createdAt": "2020-01-17T09:10:56Z", "author": {"login": "danberindei"}, "path": "documentation/src/main/asciidoc/topics/eviction.adoc", "diffHunk": "@@ -209,46 +209,45 @@ can result in slower operation times.\n \n Maximum idle expiration has different behavior in local and clustered cache environments.\n \n+[IMPORTANT]\n+====\n+Maximum idle expiration, `max-idle`, does not currently work with entries stored in off-heap memory.\n+\n+Likewise, `max-idle` does not work if caches use cache stores as a persistence layer.\n+====\n+\n [[expiration_maxidle_local]]\n ==== Local Max Idle\n+In local cache mode, {brandname} expires entries with the `maxIdle` configuration when:\n \n-In non-clustered cache environments, the `maxIdle` configuration expires entries when:\n-\n-* accessed directly (`Cache.get`).\n-* iterated upon (`Cache.size`).\n+* accessed directly (`Cache.get()`).\n+* iterated upon (`Cache.size()`).\n * the expiration reaper thread runs.\n \n [[expiration_maxidle_clustered]]\n ==== Clustered Max Idle\n-\n-In clustered environments, nodes in the cluster can have different access times\n-for the same entry. Entries do not expire from the cache until they reach the\n-maxium idle time for all owners across the cluster.\n-\n-When a node detects that an entry has reached the maximum idle time and is\n-expired, the node gets the last time that the entry was accessed from the other\n-owners in the cluster. If the other owners indicate that the entry is expired,\n-that entry is not returned to the requester and removed from the cache.\n-\n-The following points apply to using the `maxIdle` configuration with clustered\n-caches:\n-\n-* If one or more owner in the cluster detects that an entry is not expired,\n-then a `Cache.get` operation returns the entry. The last access time for that\n-entry is also updated to the current time.\n-* When the expiration reaper finds entries that might be expired with the\n-maximum idle time, all nodes update the last access time for those entries\n-to the most recent access time before the `maxIdle` time. In this way, the\n-reaper prevents invalid expiration of entries.\n-* Clustered transactional caches do *not* remove entries that are expired\n-with the maximum idle time on `Cache.get` operations. These expired entries\n-are removed with the expiration reaper thread only, otherwise deadlocking\n-can occur.\n+In clustered cache modes, when clients read entries that have `max-idle`\n+expiration values, {brandname} sends touch commands to all owners. This ensures\n+that the entries have the same relative access time across the cluster.\n+\n+When nodes detect that an entry reaches the maximum idle time, {brandname}\n+removes it from the cache and does not return the entry to the client that\n+requested it.\n+\n+Before using clustered `max-idle`, you should review the following points:\n+\n+* `Cache.get()` does not return until the touch commands complete. This synchronous behavior increases latency of client requests.\n+* Clustered `max-idle` also updates the recent access count for eviction on all owners.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2469a789e0b038dc7908f53046cf40e75b87852"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 185, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}