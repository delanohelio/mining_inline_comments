{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NzI4ODM5", "number": 7952, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzo0MTo0NFrODjLKLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzo1Mjo1NFrODjXJuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjA5NTgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/executors/LimitedExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzo0MTo0NFrOFu1few==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoxMzozNVrOFvRrHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1NTIyNw==", "bodyText": "Should mention BlockHound directly IMO", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r384655227", "createdAt": "2020-02-26T17:41:44Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/executors/LimitedExecutor.java", "diffHunk": "@@ -182,6 +183,14 @@ private void runTasks() {\n       runnerFinished();\n    }\n \n+   /**\n+    * This method is here solely for byte code augmentation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "918a4b036dd2b11972d3f0e1e971640755ccda32"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNjk1OQ==", "bodyText": "Sure.", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385116959", "createdAt": "2020-02-27T13:13:35Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/executors/LimitedExecutor.java", "diffHunk": "@@ -182,6 +183,14 @@ private void runTasks() {\n       runnerFinished();\n    }\n \n+   /**\n+    * This method is here solely for byte code augmentation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1NTIyNw=="}, "originalCommit": {"oid": "918a4b036dd2b11972d3f0e1e971640755ccda32"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjA5Nzc5OnYy", "diffSide": "LEFT", "path": "core/src/main/java/org/infinispan/factories/KnownComponentNames.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzo0MjoxM1rOFu1glw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoxNDo0OFrOFvRtjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1NTUxMQ==", "bodyText": "We should keep this one, but remove its defaults", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r384655511", "createdAt": "2020-02-26T17:42:13Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/KnownComponentNames.java", "diffHunk": "@@ -16,28 +16,18 @@\n public class KnownComponentNames {\n    public static final String CACHE_NAME = \"cacheName\";\n \n-   public static final String ASYNC_TRANSPORT_EXECUTOR = \"org.infinispan.executors.transport\";\n    public static final String REMOTE_COMMAND_EXECUTOR = \"org.infinispan.executors.remote\";\n    public static final String ASYNC_NOTIFICATION_EXECUTOR = \"org.infinispan.executors.notification\";\n    public static final String EXPIRATION_SCHEDULED_EXECUTOR = \"org.infinispan.executors.expiration\";\n    public static final String NON_BLOCKING_EXECUTOR = \"org.infinispan.executors.non-blocking\";\n    public static final String BLOCKING_EXECUTOR = \"org.infinispan.executors.blocking\";\n-   /**\n-    * @deprecated Since 9.0, no longer used.\n-    */\n-   @Deprecated\n-   public static final String ASYNC_REPLICATION_QUEUE_EXECUTOR = \"org.infinispan.executors.replicationQueue\";\n+   public static final String TIMEOUT_SCHEDULE_EXECUTOR = \"org.infinispan.executors.timeout\";\n+\n+\n    public static final String MODULE_COMMAND_FACTORIES =\"org.infinispan.modules.command.factories\";\n    public static final String CLASS_LOADER = \"java.lang.ClassLoader\";\n-   /**\n-    * @deprecated Since 10.1, no longer used\n-    */\n-   @Deprecated\n-   public static final String STATE_TRANSFER_EXECUTOR = \"org.infinispan.executors.stateTransferExecutor\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "918a4b036dd2b11972d3f0e1e971640755ccda32"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNjg5Mw==", "bodyText": "Why keep? This class is not public.", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385116893", "createdAt": "2020-02-27T13:13:30Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/factories/KnownComponentNames.java", "diffHunk": "@@ -16,28 +16,18 @@\n public class KnownComponentNames {\n    public static final String CACHE_NAME = \"cacheName\";\n \n-   public static final String ASYNC_TRANSPORT_EXECUTOR = \"org.infinispan.executors.transport\";\n    public static final String REMOTE_COMMAND_EXECUTOR = \"org.infinispan.executors.remote\";\n    public static final String ASYNC_NOTIFICATION_EXECUTOR = \"org.infinispan.executors.notification\";\n    public static final String EXPIRATION_SCHEDULED_EXECUTOR = \"org.infinispan.executors.expiration\";\n    public static final String NON_BLOCKING_EXECUTOR = \"org.infinispan.executors.non-blocking\";\n    public static final String BLOCKING_EXECUTOR = \"org.infinispan.executors.blocking\";\n-   /**\n-    * @deprecated Since 9.0, no longer used.\n-    */\n-   @Deprecated\n-   public static final String ASYNC_REPLICATION_QUEUE_EXECUTOR = \"org.infinispan.executors.replicationQueue\";\n+   public static final String TIMEOUT_SCHEDULE_EXECUTOR = \"org.infinispan.executors.timeout\";\n+\n+\n    public static final String MODULE_COMMAND_FACTORIES =\"org.infinispan.modules.command.factories\";\n    public static final String CLASS_LOADER = \"java.lang.ClassLoader\";\n-   /**\n-    * @deprecated Since 10.1, no longer used\n-    */\n-   @Deprecated\n-   public static final String STATE_TRANSFER_EXECUTOR = \"org.infinispan.executors.stateTransferExecutor\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1NTUxMQ=="}, "originalCommit": {"oid": "918a4b036dd2b11972d3f0e1e971640755ccda32"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzU4Mw==", "bodyText": "I should have checked, I just assumed I had made it deprecated in 10.1 because it was public :)", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385117583", "createdAt": "2020-02-27T13:14:48Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/KnownComponentNames.java", "diffHunk": "@@ -16,28 +16,18 @@\n public class KnownComponentNames {\n    public static final String CACHE_NAME = \"cacheName\";\n \n-   public static final String ASYNC_TRANSPORT_EXECUTOR = \"org.infinispan.executors.transport\";\n    public static final String REMOTE_COMMAND_EXECUTOR = \"org.infinispan.executors.remote\";\n    public static final String ASYNC_NOTIFICATION_EXECUTOR = \"org.infinispan.executors.notification\";\n    public static final String EXPIRATION_SCHEDULED_EXECUTOR = \"org.infinispan.executors.expiration\";\n    public static final String NON_BLOCKING_EXECUTOR = \"org.infinispan.executors.non-blocking\";\n    public static final String BLOCKING_EXECUTOR = \"org.infinispan.executors.blocking\";\n-   /**\n-    * @deprecated Since 9.0, no longer used.\n-    */\n-   @Deprecated\n-   public static final String ASYNC_REPLICATION_QUEUE_EXECUTOR = \"org.infinispan.executors.replicationQueue\";\n+   public static final String TIMEOUT_SCHEDULE_EXECUTOR = \"org.infinispan.executors.timeout\";\n+\n+\n    public static final String MODULE_COMMAND_FACTORIES =\"org.infinispan.modules.command.factories\";\n    public static final String CLASS_LOADER = \"java.lang.ClassLoader\";\n-   /**\n-    * @deprecated Since 10.1, no longer used\n-    */\n-   @Deprecated\n-   public static final String STATE_TRANSFER_EXECUTOR = \"org.infinispan.executors.stateTransferExecutor\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1NTUxMQ=="}, "originalCommit": {"oid": "918a4b036dd2b11972d3f0e1e971640755ccda32"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDA1NDA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzo1MDoxNFrOFvIESQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoxNDozMlrOFv2Tow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTU2MQ==", "bodyText": "Can you check this again? I commented it out locally and I didn't get any failures.", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r384959561", "createdAt": "2020-02-27T07:50:14Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java", "diffHunk": "@@ -74,9 +85,6 @@ private static void registerBlockingMethods(BlockHound.Builder builder) {\n    }\n \n    private static void questionableMethodsAllowedToBlock(BlockHound.Builder builder) {\n-      // Component registry has a lock to protect its state - is short lived lock\n-      builder.allowBlockingCallsInside(BasicComponentRegistryImpl.class.getName(), \"prepareWrapperChange\");\n-\n       // This one should probably not be allowed - it is waiting for another component to start\n       // TODO: This might actually be a bug in the rewiring logic. (shows in StateTransferOverwritingValueTest)\n       builder.allowBlockingCallsInside(BasicComponentRegistryImpl.class.getName(), \"awaitWrapperState\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "918a4b036dd2b11972d3f0e1e971640755ccda32"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNjgxOA==", "bodyText": "Possibly, this is one from over a month ago.", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385116818", "createdAt": "2020-02-27T13:13:19Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java", "diffHunk": "@@ -74,9 +85,6 @@ private static void registerBlockingMethods(BlockHound.Builder builder) {\n    }\n \n    private static void questionableMethodsAllowedToBlock(BlockHound.Builder builder) {\n-      // Component registry has a lock to protect its state - is short lived lock\n-      builder.allowBlockingCallsInside(BasicComponentRegistryImpl.class.getName(), \"prepareWrapperChange\");\n-\n       // This one should probably not be allowed - it is waiting for another component to start\n       // TODO: This might actually be a bug in the rewiring logic. (shows in StateTransferOverwritingValueTest)\n       builder.allowBlockingCallsInside(BasicComponentRegistryImpl.class.getName(), \"awaitWrapperState\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTU2MQ=="}, "originalCommit": {"oid": "918a4b036dd2b11972d3f0e1e971640755ccda32"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzk4NA==", "bodyText": "Yeah, I tested when I was reviewing your first BlockHound PR but I forgot to mention it.", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385117984", "createdAt": "2020-02-27T13:15:37Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java", "diffHunk": "@@ -74,9 +85,6 @@ private static void registerBlockingMethods(BlockHound.Builder builder) {\n    }\n \n    private static void questionableMethodsAllowedToBlock(BlockHound.Builder builder) {\n-      // Component registry has a lock to protect its state - is short lived lock\n-      builder.allowBlockingCallsInside(BasicComponentRegistryImpl.class.getName(), \"prepareWrapperChange\");\n-\n       // This one should probably not be allowed - it is waiting for another component to start\n       // TODO: This might actually be a bug in the rewiring logic. (shows in StateTransferOverwritingValueTest)\n       builder.allowBlockingCallsInside(BasicComponentRegistryImpl.class.getName(), \"awaitWrapperState\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTU2MQ=="}, "originalCommit": {"oid": "918a4b036dd2b11972d3f0e1e971640755ccda32"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0ODQ1Mw==", "bodyText": "https://ci.infinispan.org/job/Infinispan/job/PR-7952/3/testReport/junit/org.infinispan.distribution.rehash/StateTransferOverwriteTest%5BDIST_SYNC,%20tx=false%5D/Blocking/\n\nNow that I see the stack trace, it's \"normal\". ClusterTopologyManagerImpl uses new ActionSequencer(nonBlockingExecutor, true), which forces the view handling to be executed on the non-blocking executor even when it doesn't have to block. During startup, normally the components start in a single thread, so there is no call to awaitWrapperState. But since CTMI handles the initial view in a separate thread, the main thread and the view handling thread could be trying to start LocalTopologyManagerImpl at the same time, and one of them will have to wait.\nThere are 3 options:\n\nKeep the exception for awaitWrapperState, but remove the TODO and say instead it's ok because it only happens during startup\nCreate the ActionSequencer with forceExecutor = false, and explicitly submit to the non-blocking thread pool in ClusterViewListener#handleViewChange.\nWe need to switch threads there because JGroups' GMS will only mcast the view to other members after our listener returns.\nCreate the ActionSequencer on the blocking executor, \"just in case\".\nSince I've removed almost all blocking, and some tasks like computing CHs use lots of CPU, I'd rather not do this.", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385548453", "createdAt": "2020-02-28T07:44:16Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java", "diffHunk": "@@ -74,9 +85,6 @@ private static void registerBlockingMethods(BlockHound.Builder builder) {\n    }\n \n    private static void questionableMethodsAllowedToBlock(BlockHound.Builder builder) {\n-      // Component registry has a lock to protect its state - is short lived lock\n-      builder.allowBlockingCallsInside(BasicComponentRegistryImpl.class.getName(), \"prepareWrapperChange\");\n-\n       // This one should probably not be allowed - it is waiting for another component to start\n       // TODO: This might actually be a bug in the rewiring logic. (shows in StateTransferOverwritingValueTest)\n       builder.allowBlockingCallsInside(BasicComponentRegistryImpl.class.getName(), \"awaitWrapperState\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTU2MQ=="}, "originalCommit": {"oid": "918a4b036dd2b11972d3f0e1e971640755ccda32"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxNzE1NQ==", "bodyText": "I created https://issues.redhat.com/browse/ISPN-11396 to look into this further. For now I will just comment on it and mention the JIRA.", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385717155", "createdAt": "2020-02-28T14:14:32Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java", "diffHunk": "@@ -74,9 +85,6 @@ private static void registerBlockingMethods(BlockHound.Builder builder) {\n    }\n \n    private static void questionableMethodsAllowedToBlock(BlockHound.Builder builder) {\n-      // Component registry has a lock to protect its state - is short lived lock\n-      builder.allowBlockingCallsInside(BasicComponentRegistryImpl.class.getName(), \"prepareWrapperChange\");\n-\n       // This one should probably not be allowed - it is waiting for another component to start\n       // TODO: This might actually be a bug in the rewiring logic. (shows in StateTransferOverwritingValueTest)\n       builder.allowBlockingCallsInside(BasicComponentRegistryImpl.class.getName(), \"awaitWrapperState\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTU2MQ=="}, "originalCommit": {"oid": "918a4b036dd2b11972d3f0e1e971640755ccda32"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDA2MDcyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/test/JREBlocking.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzo1Mjo1NFrOFvIIIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoxNDowM1rOFvRsFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2MDU0Ng==", "bodyText": "I suggest a name with Test in it, maybe TestBlocking.\nAlso missing javadoc :)", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r384960546", "createdAt": "2020-02-27T07:52:54Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/test/JREBlocking.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.infinispan.test;\n+\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.Exchanger;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class JREBlocking {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "918a4b036dd2b11972d3f0e1e971640755ccda32"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzIwNQ==", "bodyText": "Sure.", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385117205", "createdAt": "2020-02-27T13:14:03Z", "author": {"login": "wburns"}, "path": "core/src/test/java/org/infinispan/test/JREBlocking.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.infinispan.test;\n+\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.Exchanger;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class JREBlocking {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2MDU0Ng=="}, "originalCommit": {"oid": "918a4b036dd2b11972d3f0e1e971640755ccda32"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4498, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}