{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTUyNTk1", "number": 8012, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTo0NDoxMVrODmWiBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjoyODo0MlrODmXrsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTQxNjM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/globalstate/impl/GlobalConfigurationManagerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTo0NDoxMVrOFzuJHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjozOTozN1rOFzwYkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3NzY5Mw==", "bodyText": "This comment is no longer valid since you've moved things around", "url": "https://github.com/infinispan/infinispan/pull/8012#discussion_r389777693", "createdAt": "2020-03-09T15:44:11Z", "author": {"login": "tristantarrant"}, "path": "core/src/main/java/org/infinispan/globalstate/impl/GlobalConfigurationManagerImpl.java", "diffHunk": "@@ -107,24 +109,32 @@ void start() {\n          }\n       }\n \n+      // Install the listener\n+      GlobalConfigurationStateListener stateCacheListener = new GlobalConfigurationStateListener(this);\n+      getStateCache().addListener(stateCacheListener, new ScopeFilter(CACHE_SCOPE));\n+\n       // Initialize caches which are present in the initial state. We do this before installing the listener.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693f45aee7823f287fe6678402e625260ee73459"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxNDQxNg==", "bodyText": "True. I'm changing the listener to include the current state and I'm removing the explicit iteration.", "url": "https://github.com/infinispan/infinispan/pull/8012#discussion_r389814416", "createdAt": "2020-03-09T16:39:37Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/globalstate/impl/GlobalConfigurationManagerImpl.java", "diffHunk": "@@ -107,24 +109,32 @@ void start() {\n          }\n       }\n \n+      // Install the listener\n+      GlobalConfigurationStateListener stateCacheListener = new GlobalConfigurationStateListener(this);\n+      getStateCache().addListener(stateCacheListener, new ScopeFilter(CACHE_SCOPE));\n+\n       // Initialize caches which are present in the initial state. We do this before installing the listener.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3NzY5Mw=="}, "originalCommit": {"oid": "693f45aee7823f287fe6678402e625260ee73459"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTYwNDk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/globalstate/impl/GlobalConfigurationManagerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjoyODo0MlrOFzv8_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo0Mjo0OVrOFzwgRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwNzM1OQ==", "bodyText": "Why are you not starting the static caches before the persisted ones ?", "url": "https://github.com/infinispan/infinispan/pull/8012#discussion_r389807359", "createdAt": "2020-03-09T16:28:42Z", "author": {"login": "tristantarrant"}, "path": "core/src/main/java/org/infinispan/globalstate/impl/GlobalConfigurationManagerImpl.java", "diffHunk": "@@ -107,24 +109,32 @@ void start() {\n          }\n       }\n \n+      // Install the listener\n+      GlobalConfigurationStateListener stateCacheListener = new GlobalConfigurationStateListener(this);\n+      getStateCache().addListener(stateCacheListener, new ScopeFilter(CACHE_SCOPE));\n+\n       // Initialize caches which are present in the initial state. We do this before installing the listener.\n+      log.debugf(\"Starting caches from global state: %s\", getStateCache().keySet());\n       for (Map.Entry<ScopedState, Object> e : getStateCache().entrySet()) {\n          if (CACHE_SCOPE.equals(e.getKey().getScope())) {\n             String cacheName = e.getKey().getName();\n             CacheState cacheState = (CacheState) e.getValue();\n             uncheckedAwait(createCacheLocally(cacheName, cacheState));\n          }\n       }\n-      // Install the listener\n-      GlobalConfigurationStateListener stateCacheListener = new GlobalConfigurationStateListener(this);\n-      getStateCache().addListener(stateCacheListener, new ScopeFilter(CACHE_SCOPE));\n \n-      // Tell the LocalConfigurationManager that it can load any persistent caches\n+      // Load any persistent caches that are not in the state cache\n+      log.debugf(\"Starting caches from local persisted state: %s\", persistedConfigurations.keySet());\n       List<CompletableFuture<Configuration>> all = persistedConfigurations.entrySet().stream().map((entry) ->\n             // The cache configuration was permanent, it still needs to be\n             getOrCreateCache(entry.getKey(), entry.getValue(), EnumSet.noneOf(CacheContainerAdmin.AdminFlag.class))\n       ).collect(Collectors.toList());\n       uncheckedAwait(CompletableFutures.sequence(all));\n+\n+      Set<String> staticCacheNames = new HashSet<>(configurationManager.getDefinedCaches());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693f45aee7823f287fe6678402e625260ee73459"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxNjM5MQ==", "bodyText": "It was a shortcut to avoid starting a cache with an incompatible configuration, since we already check compatibility for caches from local persistent state. But I'm now convinced that I need to replicate the compatibility check for statically defined caches anyway.", "url": "https://github.com/infinispan/infinispan/pull/8012#discussion_r389816391", "createdAt": "2020-03-09T16:42:49Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/globalstate/impl/GlobalConfigurationManagerImpl.java", "diffHunk": "@@ -107,24 +109,32 @@ void start() {\n          }\n       }\n \n+      // Install the listener\n+      GlobalConfigurationStateListener stateCacheListener = new GlobalConfigurationStateListener(this);\n+      getStateCache().addListener(stateCacheListener, new ScopeFilter(CACHE_SCOPE));\n+\n       // Initialize caches which are present in the initial state. We do this before installing the listener.\n+      log.debugf(\"Starting caches from global state: %s\", getStateCache().keySet());\n       for (Map.Entry<ScopedState, Object> e : getStateCache().entrySet()) {\n          if (CACHE_SCOPE.equals(e.getKey().getScope())) {\n             String cacheName = e.getKey().getName();\n             CacheState cacheState = (CacheState) e.getValue();\n             uncheckedAwait(createCacheLocally(cacheName, cacheState));\n          }\n       }\n-      // Install the listener\n-      GlobalConfigurationStateListener stateCacheListener = new GlobalConfigurationStateListener(this);\n-      getStateCache().addListener(stateCacheListener, new ScopeFilter(CACHE_SCOPE));\n \n-      // Tell the LocalConfigurationManager that it can load any persistent caches\n+      // Load any persistent caches that are not in the state cache\n+      log.debugf(\"Starting caches from local persisted state: %s\", persistedConfigurations.keySet());\n       List<CompletableFuture<Configuration>> all = persistedConfigurations.entrySet().stream().map((entry) ->\n             // The cache configuration was permanent, it still needs to be\n             getOrCreateCache(entry.getKey(), entry.getValue(), EnumSet.noneOf(CacheContainerAdmin.AdminFlag.class))\n       ).collect(Collectors.toList());\n       uncheckedAwait(CompletableFutures.sequence(all));\n+\n+      Set<String> staticCacheNames = new HashSet<>(configurationManager.getDefinedCaches());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwNzM1OQ=="}, "originalCommit": {"oid": "693f45aee7823f287fe6678402e625260ee73459"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4427, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}