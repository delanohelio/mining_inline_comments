{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NzU5MTU1", "number": 8584, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1ODoxOVrOEXiU-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1OTo0N1rOEXiW4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTE1MTI5OnYy", "diffSide": "RIGHT", "path": "anchored-keys/src/main/java/org/infinispan/anchored/impl/AnchoredCacheNotifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1ODoxOVrOG_YRZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMDo0MzozM1rOHOXPWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMTE0Mg==", "bodyText": "Is there a Jira for this?", "url": "https://github.com/infinispan/infinispan/pull/8584#discussion_r469111142", "createdAt": "2020-08-12T08:58:19Z", "author": {"login": "ryanemerson"}, "path": "anchored-keys/src/main/java/org/infinispan/anchored/impl/AnchoredCacheNotifier.java", "diffHunk": "@@ -2,17 +2,31 @@\n \n import java.util.concurrent.CompletionStage;\n \n+import org.infinispan.configuration.cache.CacheMode;\n import org.infinispan.notifications.cachelistener.CacheNotifierImpl;\n \n /**\n- * Skip notifications for entries that only store a location.\n+ * Adjust notifications for anchored keys caches.\n+ *\n+ * <ul>\n+ *    <li>Invoke clustered listeners from the primary owner</li>\n+ *    <li>Skip notifications for entries that only store a location.</li>\n+ * </ul>\n+ *\n  *\n  * @author Dan Berindei\n  * @since 11\n  */\n public class AnchoredCacheNotifier<K, V> extends CacheNotifierImpl<K, V> {\n+   @Override\n+   protected boolean clusterListenerOnPrimaryOnly(CacheMode mode) {\n+      assert mode.isReplicated();\n+      return true;\n+   }\n+\n    @Override\n    public CompletionStage<Void> addListenerAsync(Object listener) {\n+      // TODO Skip notification if value is null and metadata is a RemoteMetadata", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e91a0f775aa18f075712172f21ecffad00037a8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgyMjg3Mg==", "bodyText": "I created ISPN-12289 and added a reference", "url": "https://github.com/infinispan/infinispan/pull/8584#discussion_r484822872", "createdAt": "2020-09-08T10:43:33Z", "author": {"login": "danberindei"}, "path": "anchored-keys/src/main/java/org/infinispan/anchored/impl/AnchoredCacheNotifier.java", "diffHunk": "@@ -2,17 +2,31 @@\n \n import java.util.concurrent.CompletionStage;\n \n+import org.infinispan.configuration.cache.CacheMode;\n import org.infinispan.notifications.cachelistener.CacheNotifierImpl;\n \n /**\n- * Skip notifications for entries that only store a location.\n+ * Adjust notifications for anchored keys caches.\n+ *\n+ * <ul>\n+ *    <li>Invoke clustered listeners from the primary owner</li>\n+ *    <li>Skip notifications for entries that only store a location.</li>\n+ * </ul>\n+ *\n  *\n  * @author Dan Berindei\n  * @since 11\n  */\n public class AnchoredCacheNotifier<K, V> extends CacheNotifierImpl<K, V> {\n+   @Override\n+   protected boolean clusterListenerOnPrimaryOnly(CacheMode mode) {\n+      assert mode.isReplicated();\n+      return true;\n+   }\n+\n    @Override\n    public CompletionStage<Void> addListenerAsync(Object listener) {\n+      // TODO Skip notification if value is null and metadata is a RemoteMetadata", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMTE0Mg=="}, "originalCommit": {"oid": "8e91a0f775aa18f075712172f21ecffad00037a8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTE1MzU5OnYy", "diffSide": "RIGHT", "path": "anchored-keys/src/test/java/org/infinispan/anchored/AnchoredKeysOperationsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1OTowMlrOG_YS6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMDo0MzoxNlrOHOXOyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMTUyOQ==", "bodyText": "Should this be uncommented or removed?", "url": "https://github.com/infinispan/infinispan/pull/8584#discussion_r469111529", "createdAt": "2020-08-12T08:59:02Z", "author": {"login": "ryanemerson"}, "path": "anchored-keys/src/test/java/org/infinispan/anchored/AnchoredKeysOperationsTest.java", "diffHunk": "@@ -152,4 +166,60 @@ public void testMultiKeyOperations() {\n          cache.clear();\n       }\n    }\n+\n+   public void testClusteredListener() throws InterruptedException {\n+      ClusteredListener listener = new ClusteredListener();\n+      cache(0).addListener(listener);\n+      for (Cache<Object, Object> originator : caches()) {\n+         String key = \"key_\" + originator.getCacheManager().getAddress();\n+         String value1 = \"value-1\";\n+         String value2 = \"value-2\";\n+         assertNull(originator.put(key, value1));\n+         assertValue(key, value1);\n+         assertTrue(originator.replace(key, value1, value2));\n+         assertValue(key, value2);\n+         assertEquals(value2, originator.remove(key));\n+\n+         CacheEntryEvent<Object, Object> createEvent = listener.pollEvent();\n+         assertTrue(createEvent instanceof CacheEntryCreatedEvent);\n+         assertEquals(key, createEvent.getKey());\n+         assertEquals(value1, createEvent.getValue());\n+\n+         CacheEntryEvent<Object, Object> replaceEvent = listener.pollEvent();\n+         assertTrue(replaceEvent instanceof CacheEntryModifiedEvent);\n+         assertEquals(key, replaceEvent.getKey());\n+         assertEquals(value2, replaceEvent.getValue());\n+         // TODO The previous value is not always populated, because it's not stored in the context\n+         //  Instead ReplicationLogic.commitSingleEntry reads the previous value directly from the data container\n+//         assertEquals(value1, ((CacheEntryRemovedEvent<Object, Object>) replaceEvent).getOldValue());\n+\n+         CacheEntryEvent<Object, Object> removeEvent = listener.pollEvent();\n+         assertTrue(removeEvent instanceof CacheEntryRemovedEvent);\n+         assertEquals(key, removeEvent.getKey());\n+         assertNull(removeEvent.getValue());\n+//         assertEquals(value2, ((CacheEntryRemovedEvent<Object, Object>) removeEvent).getOldValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e91a0f775aa18f075712172f21ecffad00037a8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgyMjcyOA==", "bodyText": "It's the same as line 194, I added a reference to ISPN-5665 for both commented lines", "url": "https://github.com/infinispan/infinispan/pull/8584#discussion_r484822728", "createdAt": "2020-09-08T10:43:16Z", "author": {"login": "danberindei"}, "path": "anchored-keys/src/test/java/org/infinispan/anchored/AnchoredKeysOperationsTest.java", "diffHunk": "@@ -152,4 +166,60 @@ public void testMultiKeyOperations() {\n          cache.clear();\n       }\n    }\n+\n+   public void testClusteredListener() throws InterruptedException {\n+      ClusteredListener listener = new ClusteredListener();\n+      cache(0).addListener(listener);\n+      for (Cache<Object, Object> originator : caches()) {\n+         String key = \"key_\" + originator.getCacheManager().getAddress();\n+         String value1 = \"value-1\";\n+         String value2 = \"value-2\";\n+         assertNull(originator.put(key, value1));\n+         assertValue(key, value1);\n+         assertTrue(originator.replace(key, value1, value2));\n+         assertValue(key, value2);\n+         assertEquals(value2, originator.remove(key));\n+\n+         CacheEntryEvent<Object, Object> createEvent = listener.pollEvent();\n+         assertTrue(createEvent instanceof CacheEntryCreatedEvent);\n+         assertEquals(key, createEvent.getKey());\n+         assertEquals(value1, createEvent.getValue());\n+\n+         CacheEntryEvent<Object, Object> replaceEvent = listener.pollEvent();\n+         assertTrue(replaceEvent instanceof CacheEntryModifiedEvent);\n+         assertEquals(key, replaceEvent.getKey());\n+         assertEquals(value2, replaceEvent.getValue());\n+         // TODO The previous value is not always populated, because it's not stored in the context\n+         //  Instead ReplicationLogic.commitSingleEntry reads the previous value directly from the data container\n+//         assertEquals(value1, ((CacheEntryRemovedEvent<Object, Object>) replaceEvent).getOldValue());\n+\n+         CacheEntryEvent<Object, Object> removeEvent = listener.pollEvent();\n+         assertTrue(removeEvent instanceof CacheEntryRemovedEvent);\n+         assertEquals(key, removeEvent.getKey());\n+         assertNull(removeEvent.getValue());\n+//         assertEquals(value2, ((CacheEntryRemovedEvent<Object, Object>) removeEvent).getOldValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMTUyOQ=="}, "originalCommit": {"oid": "8e91a0f775aa18f075712172f21ecffad00037a8"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTE1NjE2OnYy", "diffSide": "RIGHT", "path": "anchored-keys/src/test/java/org/infinispan/anchored/AnchoredKeysOperationsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1OTo0N1rOG_YUmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzoyMjo1NFrOHOcszQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMTk2Mg==", "bodyText": "Will this be resolved in this PR or a follow up? If it's the latter we should create a Jira.", "url": "https://github.com/infinispan/infinispan/pull/8584#discussion_r469111962", "createdAt": "2020-08-12T08:59:47Z", "author": {"login": "ryanemerson"}, "path": "anchored-keys/src/test/java/org/infinispan/anchored/AnchoredKeysOperationsTest.java", "diffHunk": "@@ -152,4 +166,60 @@ public void testMultiKeyOperations() {\n          cache.clear();\n       }\n    }\n+\n+   public void testClusteredListener() throws InterruptedException {\n+      ClusteredListener listener = new ClusteredListener();\n+      cache(0).addListener(listener);\n+      for (Cache<Object, Object> originator : caches()) {\n+         String key = \"key_\" + originator.getCacheManager().getAddress();\n+         String value1 = \"value-1\";\n+         String value2 = \"value-2\";\n+         assertNull(originator.put(key, value1));\n+         assertValue(key, value1);\n+         assertTrue(originator.replace(key, value1, value2));\n+         assertValue(key, value2);\n+         assertEquals(value2, originator.remove(key));\n+\n+         CacheEntryEvent<Object, Object> createEvent = listener.pollEvent();\n+         assertTrue(createEvent instanceof CacheEntryCreatedEvent);\n+         assertEquals(key, createEvent.getKey());\n+         assertEquals(value1, createEvent.getValue());\n+\n+         CacheEntryEvent<Object, Object> replaceEvent = listener.pollEvent();\n+         assertTrue(replaceEvent instanceof CacheEntryModifiedEvent);\n+         assertEquals(key, replaceEvent.getKey());\n+         assertEquals(value2, replaceEvent.getValue());\n+         // TODO The previous value is not always populated, because it's not stored in the context\n+         //  Instead ReplicationLogic.commitSingleEntry reads the previous value directly from the data container\n+//         assertEquals(value1, ((CacheEntryRemovedEvent<Object, Object>) replaceEvent).getOldValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e91a0f775aa18f075712172f21ecffad00037a8"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkxMjMzMw==", "bodyText": "Oops, the comment actually applies only to the entry removed event.\nI created ISPN-12290 Anchored keys: cluster listener does not receive removed value", "url": "https://github.com/infinispan/infinispan/pull/8584#discussion_r484912333", "createdAt": "2020-09-08T13:22:54Z", "author": {"login": "danberindei"}, "path": "anchored-keys/src/test/java/org/infinispan/anchored/AnchoredKeysOperationsTest.java", "diffHunk": "@@ -152,4 +166,60 @@ public void testMultiKeyOperations() {\n          cache.clear();\n       }\n    }\n+\n+   public void testClusteredListener() throws InterruptedException {\n+      ClusteredListener listener = new ClusteredListener();\n+      cache(0).addListener(listener);\n+      for (Cache<Object, Object> originator : caches()) {\n+         String key = \"key_\" + originator.getCacheManager().getAddress();\n+         String value1 = \"value-1\";\n+         String value2 = \"value-2\";\n+         assertNull(originator.put(key, value1));\n+         assertValue(key, value1);\n+         assertTrue(originator.replace(key, value1, value2));\n+         assertValue(key, value2);\n+         assertEquals(value2, originator.remove(key));\n+\n+         CacheEntryEvent<Object, Object> createEvent = listener.pollEvent();\n+         assertTrue(createEvent instanceof CacheEntryCreatedEvent);\n+         assertEquals(key, createEvent.getKey());\n+         assertEquals(value1, createEvent.getValue());\n+\n+         CacheEntryEvent<Object, Object> replaceEvent = listener.pollEvent();\n+         assertTrue(replaceEvent instanceof CacheEntryModifiedEvent);\n+         assertEquals(key, replaceEvent.getKey());\n+         assertEquals(value2, replaceEvent.getValue());\n+         // TODO The previous value is not always populated, because it's not stored in the context\n+         //  Instead ReplicationLogic.commitSingleEntry reads the previous value directly from the data container\n+//         assertEquals(value1, ((CacheEntryRemovedEvent<Object, Object>) replaceEvent).getOldValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMTk2Mg=="}, "originalCommit": {"oid": "8e91a0f775aa18f075712172f21ecffad00037a8"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4014, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}