{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDMyODg4", "number": 7858, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToyNTozMlrODgbZFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo1NTozM1rODtf6mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzI5ODE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/container/entries/AbstractInternalCacheEntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToyNTozMlrOFqoOfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToyNTozMlrOFqoOfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MzU4Mw==", "bodyText": "I'm not a fan of this approach. I think it hurts readability and the benefits of the read/write methods will soon be lost with the removal of the Externalizers", "url": "https://github.com/infinispan/infinispan/pull/7858#discussion_r380243583", "createdAt": "2020-02-17T15:25:32Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/container/entries/AbstractInternalCacheEntry.java", "diffHunk": "@@ -133,4 +172,39 @@ public final boolean equals(Object o) {\n    public final int hashCode() {\n       return  31 * Objects.hashCode(getKey()) + Objects.hashCode(getValue());\n    }\n+\n+   protected abstract InternalCacheValue createCacheValue();\n+\n+   protected void appendFieldsToString(StringBuilder builder) {\n+      builder.append(\"key=\").append(Util.toStr(key));\n+      builder.append(\", value=\").append(Util.toStr(value));\n+      builder.append(\", internalMetadata=\").append(internalMetadata);\n+   }\n+\n+   protected static void writeCommonDataTo(AbstractInternalCacheEntry cacheEntry, ObjectOutput output)\n+         throws IOException {\n+      output.writeObject(cacheEntry.key);\n+      output.writeObject(cacheEntry.value);\n+      output.writeObject(cacheEntry.internalMetadata);\n+   }\n+\n+   protected static CommonData readCommonDataFrom(ObjectInput input) throws IOException, ClassNotFoundException {\n+      Object key = input.readObject();\n+      Object value = input.readObject();\n+      MetaParamsInternalMetadata internalMetadata = (MetaParamsInternalMetadata) input.readObject();\n+      return new CommonData(key, value, internalMetadata);\n+   }\n+\n+   protected static class CommonData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4f8cc5ed115846f6b15598ed8a6daf85d2d176d"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDMyMTAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/container/impl/KeyValueMetadataSizeCalculator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0NToyMlrOF-83og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0NToyMlrOF-83og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MzMxNA==", "bodyText": "This is not a public method, so there's no reason to keep the old signature around", "url": "https://github.com/infinispan/infinispan/pull/7858#discussion_r401553314", "createdAt": "2020-04-01T11:45:22Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/container/impl/KeyValueMetadataSizeCalculator.java", "diffHunk": "@@ -17,5 +18,18 @@\n     * @param metadata The metadata for this entry to be used in size calculation\n     * @return The size approximately in memory the key, value and metadata use.\n     */\n-   long calculateSize(K key, V value, Metadata metadata);\n+   default long calculateSize(K key, V value, Metadata metadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ddb8b91dd6946a1a28bbb5cb7d18a99a5faadd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDMyNjE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/container/offheap/OffHeapEntryFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0NzowMlrOF-863Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0NzowMlrOF-863Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NDE0MQ==", "bodyText": "Yes, it can be removed, I'm actually removing it in #8136", "url": "https://github.com/infinispan/infinispan/pull/7858#discussion_r401554141", "createdAt": "2020-04-01T11:47:02Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/container/offheap/OffHeapEntryFactory.java", "diffHunk": "@@ -20,7 +21,22 @@\n     * @return the address of where the entry was created\n     */\n    default long create(WrappedBytes key, WrappedBytes value, Metadata metadata) {\n-      return create(key, key.hashCode(), value, metadata);\n+      //TODO! can it ^ be removed?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ddb8b91dd6946a1a28bbb5cb7d18a99a5faadd"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDMzNDk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/container/offheap/UnpooledOffHeapMemoryAllocator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0OTo1MFrOF-9Agg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0OTo1MFrOF-9Agg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NTU4Ng==", "bodyText": "\ud83d\udd2a, it's only used by a test.", "url": "https://github.com/infinispan/infinispan/pull/7858#discussion_r401555586", "createdAt": "2020-04-01T11:49:50Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/container/offheap/UnpooledOffHeapMemoryAllocator.java", "diffHunk": "@@ -53,11 +53,55 @@ public long getAllocatedAmount() {\n    /**\n     * Tries to estimate overhead of the allocation by first adding 8 to account for underlying allocator housekeeping\n     * and then rounds up to nearest power of 16 to account for 16 byte alignment.\n+    *\n     * @param size the desired size of the allocation\n     * @return the resulting size taking into account various overheads\n     */\n    public static long estimateSizeOverhead(long size) {\n       // We take 8 and add the number provided and then round up to 16 (& operator has higher precedence than +)\n       return (size + 8 + 15) & ~15;\n    }\n+\n+   /**\n+    * See {@link #offHeapEntrySize(boolean, boolean, int, int, int, int)}\n+    */\n+   public static long offHeapEntrySize(boolean evictionEnabled, boolean writeMetadataSize, int keySize, int valueSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ddb8b91dd6946a1a28bbb5cb7d18a99a5faadd"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDM1NDE3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/stats/SingleStatsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo1NTozM1rOF-9Mcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo1NTozM1rOF-9Mcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1ODY0Mw==", "bodyText": "So there's an extra 80-64=16 bytes even when the MetaParamsInternalMetadata isn't used?", "url": "https://github.com/infinispan/infinispan/pull/7858#discussion_r401558643", "createdAt": "2020-04-01T11:55:33Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/stats/SingleStatsTest.java", "diffHunk": "@@ -64,10 +69,10 @@ protected void configure(ConfigurationBuilder cfg) {\n             // Binary key/value size is 128 bytes\n             size *= 128;\n          } else {\n-            // Off heap key/value size is 64 bytes\n-            size = UnpooledOffHeapMemoryAllocator.estimateSizeOverhead(size * 64);\n+            // Off heap key/value size is 80 bytes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ddb8b91dd6946a1a28bbb5cb7d18a99a5faadd"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4570, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}