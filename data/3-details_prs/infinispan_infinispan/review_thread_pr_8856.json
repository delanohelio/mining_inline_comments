{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNTE1ODYx", "number": 8856, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNToyODowN1rOE5ijTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo1NzoyMlrOE7AqXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzcwMzgzOnYy", "diffSide": "RIGHT", "path": "server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNToyODowN1rOH0D6_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1Njo1MVrOH0FVyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1MjI1Mw==", "bodyText": "can't you use one of the DefaultCacheManager from this.cacheManagers?", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524352253", "createdAt": "2020-11-16T15:28:07Z", "author": {"login": "pruivo"}, "path": "server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java", "diffHunk": "@@ -43,14 +45,17 @@\n    final BackupReader reader;\n    final Lock backupLock;\n    final Lock restoreLock;\n+   private final EmbeddedCacheManager cacheManager;\n    final Map<String, DefaultCacheManager> cacheManagers;\n    final Map<String, BackupRequest> backupMap;\n    final Map<String, CompletionStage<Void>> restoreMap;\n \n+\n    public BackupManagerImpl(BlockingManager blockingManager, EmbeddedCacheManager cm,\n                             Map<String, DefaultCacheManager> cacheManagers, Path dataRoot) {\n       this.blockingManager = blockingManager;\n       this.rootDir = dataRoot.resolve(WORKING_DIR);\n+      this.cacheManager = cm;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55701b81662f4107e7c7f01bbfe80c86e03759d7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NTQ5OQ==", "bodyText": "I have another PR to remove multiple cache managers that I'll refresh. This makes things simpler for now here.", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524375499", "createdAt": "2020-11-16T15:56:51Z", "author": {"login": "tristantarrant"}, "path": "server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java", "diffHunk": "@@ -43,14 +45,17 @@\n    final BackupReader reader;\n    final Lock backupLock;\n    final Lock restoreLock;\n+   private final EmbeddedCacheManager cacheManager;\n    final Map<String, DefaultCacheManager> cacheManagers;\n    final Map<String, BackupRequest> backupMap;\n    final Map<String, CompletionStage<Void>> restoreMap;\n \n+\n    public BackupManagerImpl(BlockingManager blockingManager, EmbeddedCacheManager cm,\n                             Map<String, DefaultCacheManager> cacheManagers, Path dataRoot) {\n       this.blockingManager = blockingManager;\n       this.rootDir = dataRoot.resolve(WORKING_DIR);\n+      this.cacheManager = cm;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1MjI1Mw=="}, "originalCommit": {"oid": "55701b81662f4107e7c7f01bbfe80c86e03759d7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzcwNDQ0OnYy", "diffSide": "RIGHT", "path": "server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNToyODoxNlrOH0D7YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNToyODoxNlrOH0D7YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1MjM1Mg==", "bodyText": "nitpick: remove", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524352352", "createdAt": "2020-11-16T15:28:16Z", "author": {"login": "pruivo"}, "path": "server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java", "diffHunk": "@@ -43,14 +45,17 @@\n    final BackupReader reader;\n    final Lock backupLock;\n    final Lock restoreLock;\n+   private final EmbeddedCacheManager cacheManager;\n    final Map<String, DefaultCacheManager> cacheManagers;\n    final Map<String, BackupRequest> backupMap;\n    final Map<String, CompletionStage<Void>> restoreMap;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55701b81662f4107e7c7f01bbfe80c86e03759d7"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzcyMzYzOnYy", "diffSide": "RIGHT", "path": "server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTozMjowNFrOH0EHVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTozMjowNFrOH0EHVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1NTQxMw==", "bodyText": "getBackupLocation() is missing.", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524355413", "createdAt": "2020-11-16T15:32:04Z", "author": {"login": "pruivo"}, "path": "server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java", "diffHunk": "@@ -67,11 +72,13 @@ public void init() throws IOException {\n \n    @Override\n    public Set<String> getBackupNames() {\n+      SecurityActions.checkPermission(cacheManager.withSubject(Security.getSubject()), AuthorizationPermission.ADMIN);\n       return new HashSet<>(backupMap.keySet());\n    }\n \n    @Override\n    public Status getBackupStatus(String name) {\n+      SecurityActions.checkPermission(cacheManager.withSubject(Security.getSubject()), AuthorizationPermission.ADMIN);\n       return getBackupStatus(backupMap.get(name));\n    }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55701b81662f4107e7c7f01bbfe80c86e03759d7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzcyNjQ5OnYy", "diffSide": "RIGHT", "path": "server/core/src/main/java/org/infinispan/server/core/backup/SecurityActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTozMjozNVrOH0EJDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo1NDo1OFrOH0IB9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1NTg1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  authzHelper.checkPermission(cacheManager.getSubject(), AuthorizationPermission.ADMIN);\n          \n          \n            \n                  authzHelper.checkPermission(cacheManager.getSubject(), permission);", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524355855", "createdAt": "2020-11-16T15:32:35Z", "author": {"login": "pruivo"}, "path": "server/core/src/main/java/org/infinispan/server/core/backup/SecurityActions.java", "diffHunk": "@@ -31,4 +35,14 @@ static GlobalConfiguration getGlobalConfiguration(final EmbeddedCacheManager cac\n       GetCacheManagerConfigurationAction action = new GetCacheManagerConfigurationAction(cacheManager);\n       return doPrivileged(action);\n    }\n+\n+   static GlobalComponentRegistry getGlobalComponentRegistry(final EmbeddedCacheManager cacheManager) {\n+      GetGlobalComponentRegistryAction action = new GetGlobalComponentRegistryAction(cacheManager);\n+      return doPrivileged(action);\n+   }\n+\n+   static void checkPermission(EmbeddedCacheManager cacheManager, AuthorizationPermission permission) {\n+      AuthorizationHelper authzHelper = getGlobalComponentRegistry(cacheManager).getComponent(AuthorizationHelper.class);\n+      authzHelper.checkPermission(cacheManager.getSubject(), AuthorizationPermission.ADMIN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55701b81662f4107e7c7f01bbfe80c86e03759d7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxOTU3NQ==", "bodyText": "Oops #2", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524419575", "createdAt": "2020-11-16T16:54:58Z", "author": {"login": "tristantarrant"}, "path": "server/core/src/main/java/org/infinispan/server/core/backup/SecurityActions.java", "diffHunk": "@@ -31,4 +35,14 @@ static GlobalConfiguration getGlobalConfiguration(final EmbeddedCacheManager cac\n       GetCacheManagerConfigurationAction action = new GetCacheManagerConfigurationAction(cacheManager);\n       return doPrivileged(action);\n    }\n+\n+   static GlobalComponentRegistry getGlobalComponentRegistry(final EmbeddedCacheManager cacheManager) {\n+      GetGlobalComponentRegistryAction action = new GetGlobalComponentRegistryAction(cacheManager);\n+      return doPrivileged(action);\n+   }\n+\n+   static void checkPermission(EmbeddedCacheManager cacheManager, AuthorizationPermission permission) {\n+      AuthorizationHelper authzHelper = getGlobalComponentRegistry(cacheManager).getComponent(AuthorizationHelper.class);\n+      authzHelper.checkPermission(cacheManager.getSubject(), AuthorizationPermission.ADMIN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1NTg1NQ=="}, "originalCommit": {"oid": "55701b81662f4107e7c7f01bbfe80c86e03759d7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzc1NjE3OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTozODozNVrOH0EbFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTozODozNVrOH0EbFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2MDQ2OA==", "bodyText": "getAllRestoreNames() isn't protected.", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524360468", "createdAt": "2020-11-16T15:38:35Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "diffHunk": "@@ -38,8 +40,8 @@ public ClusterResource(InvocationHelper invocationHelper) {\n    public Invocations getInvocations() {\n       return new Invocations.Builder()\n             .invocation().methods(POST).path(\"/v2/cluster\").withAction(\"stop\").handleWith(this::stop)\n-            .invocation().methods(GET).path(\"/v2/cluster/backups\").handleWith(this::getAllBackupNames)\n-            .invocation().methods(DELETE, GET, POST).path(\"/v2/cluster/backups/{backupName}\").handleWith(this::backup)\n+            .invocation().methods(GET, HEAD).path(\"/v2/cluster/backups\").handleWith(this::getAllBackupNames)\n+            .invocation().methods(DELETE, GET, HEAD, POST).path(\"/v2/cluster/backups/{backupName}\").handleWith(this::backup)\n             .invocation().methods(GET).path(\"/v2/cluster/restores\").handleWith(this::getAllRestoreNames)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55701b81662f4107e7c7f01bbfe80c86e03759d7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzc4ODgyOnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/LoggingResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0NDo0N1rOH0Eutg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo1MzozMFrOH0H9ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTQ5NA==", "bodyText": "isn't required the Subject be set in the TaskContext?", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524365494", "createdAt": "2020-11-16T15:44:47Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/LoggingResource.java", "diffHunk": "@@ -65,37 +65,38 @@ public Invocations getInvocations() {\n                   .addOptionalParameter(\"loggerName\", loggerName)\n                   .addOptionalParameter(\"level\", level)\n                   .addOptionalParameter(\"appenders\", appenders)\n-      ).handle((o, t) -> {\n-         NettyRestResponse.Builder response = new NettyRestResponse.Builder();\n-         if (t == null) {\n-            response.status(HttpResponseStatus.NO_CONTENT);\n+                  .subject(request.getSubject())\n+      ).handle((o, t) -> handle(t));\n+   }\n+\n+   private NettyRestResponse handle(Throwable t) {\n+      NettyRestResponse.Builder response = new NettyRestResponse.Builder();\n+      if (t == null) {\n+         response.status(HttpResponseStatus.NO_CONTENT);\n+      } else {\n+         while (t.getCause() != null) {\n+            t = t.getCause();\n+         }\n+         if (t instanceof IllegalStateException) {\n+            response.status(HttpResponseStatus.CONFLICT).entity(t.getMessage());\n+         } else if (t instanceof IllegalArgumentException) {\n+            response.status(HttpResponseStatus.BAD_REQUEST).entity(t.getMessage());\n+         } else if (t instanceof NoSuchElementException) {\n+            response.status(HttpResponseStatus.NOT_FOUND).entity(t.getMessage());\n+         } else if (t instanceof SecurityException) {\n+            response.status(HttpResponseStatus.FORBIDDEN).entity(t.getMessage());\n          } else {\n-            while (t.getCause() != null) {\n-               t = t.getCause();\n-            }\n-            if (t instanceof IllegalStateException) {\n-               response.status(HttpResponseStatus.CONFLICT).entity(t.getMessage());\n-            } else if (t instanceof IllegalArgumentException) {\n-               response.status(HttpResponseStatus.BAD_REQUEST).entity(t.getMessage());\n-            } else if (t instanceof NoSuchElementException) {\n-               response.status(HttpResponseStatus.NOT_FOUND).entity(t.getMessage());\n-            } else {\n-               response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(t.getMessage());\n-            }\n+            response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(t.getMessage());\n          }\n-         return response.build();\n-      });\n+      }\n+      return response.build();\n    }\n \n    private CompletionStage<RestResponse> deleteLogger(RestRequest request) {\n       TaskManager taskManager = invocationHelper.getServer().getTaskManager();\n       String loggerName = request.variables().get(\"loggerName\");\n       return taskManager.runTask(\"@@logging@remove\", new TaskContext().addParameter(\"loggerName\", loggerName))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55701b81662f4107e7c7f01bbfe80c86e03759d7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxODQ5OQ==", "bodyText": "Yep, also added a test for this.", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524418499", "createdAt": "2020-11-16T16:53:30Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/LoggingResource.java", "diffHunk": "@@ -65,37 +65,38 @@ public Invocations getInvocations() {\n                   .addOptionalParameter(\"loggerName\", loggerName)\n                   .addOptionalParameter(\"level\", level)\n                   .addOptionalParameter(\"appenders\", appenders)\n-      ).handle((o, t) -> {\n-         NettyRestResponse.Builder response = new NettyRestResponse.Builder();\n-         if (t == null) {\n-            response.status(HttpResponseStatus.NO_CONTENT);\n+                  .subject(request.getSubject())\n+      ).handle((o, t) -> handle(t));\n+   }\n+\n+   private NettyRestResponse handle(Throwable t) {\n+      NettyRestResponse.Builder response = new NettyRestResponse.Builder();\n+      if (t == null) {\n+         response.status(HttpResponseStatus.NO_CONTENT);\n+      } else {\n+         while (t.getCause() != null) {\n+            t = t.getCause();\n+         }\n+         if (t instanceof IllegalStateException) {\n+            response.status(HttpResponseStatus.CONFLICT).entity(t.getMessage());\n+         } else if (t instanceof IllegalArgumentException) {\n+            response.status(HttpResponseStatus.BAD_REQUEST).entity(t.getMessage());\n+         } else if (t instanceof NoSuchElementException) {\n+            response.status(HttpResponseStatus.NOT_FOUND).entity(t.getMessage());\n+         } else if (t instanceof SecurityException) {\n+            response.status(HttpResponseStatus.FORBIDDEN).entity(t.getMessage());\n          } else {\n-            while (t.getCause() != null) {\n-               t = t.getCause();\n-            }\n-            if (t instanceof IllegalStateException) {\n-               response.status(HttpResponseStatus.CONFLICT).entity(t.getMessage());\n-            } else if (t instanceof IllegalArgumentException) {\n-               response.status(HttpResponseStatus.BAD_REQUEST).entity(t.getMessage());\n-            } else if (t instanceof NoSuchElementException) {\n-               response.status(HttpResponseStatus.NOT_FOUND).entity(t.getMessage());\n-            } else {\n-               response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(t.getMessage());\n-            }\n+            response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(t.getMessage());\n          }\n-         return response.build();\n-      });\n+      }\n+      return response.build();\n    }\n \n    private CompletionStage<RestResponse> deleteLogger(RestRequest request) {\n       TaskManager taskManager = invocationHelper.getServer().getTaskManager();\n       String loggerName = request.variables().get(\"loggerName\");\n       return taskManager.runTask(\"@@logging@remove\", new TaskContext().addParameter(\"loggerName\", loggerName))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTQ5NA=="}, "originalCommit": {"oid": "55701b81662f4107e7c7f01bbfe80c86e03759d7"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzc5NjUzOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/SecurityActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0NjowOFrOH0EzMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo1MzoxNVrOH0H9BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NjY0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  authzHelper.checkPermission(cacheManager.getSubject(), AuthorizationPermission.ADMIN);\n          \n          \n            \n                  authzHelper.checkPermission(cacheManager.getSubject(), permission);", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524366643", "createdAt": "2020-11-16T15:46:08Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/SecurityActions.java", "diffHunk": "@@ -110,4 +112,9 @@ static void setInitialContextFactoryBuilder(InitialContextFactoryBuilder initial\n          return null;\n       });\n    }\n+\n+   static void checkPermission(EmbeddedCacheManager cacheManager, AuthorizationPermission permission) {\n+      AuthorizationHelper authzHelper = getGlobalComponentRegistry(cacheManager).getComponent(AuthorizationHelper.class);\n+      authzHelper.checkPermission(cacheManager.getSubject(), AuthorizationPermission.ADMIN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55701b81662f4107e7c7f01bbfe80c86e03759d7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxODMwOA==", "bodyText": "Oops", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524418308", "createdAt": "2020-11-16T16:53:15Z", "author": {"login": "tristantarrant"}, "path": "server/runtime/src/main/java/org/infinispan/server/SecurityActions.java", "diffHunk": "@@ -110,4 +112,9 @@ static void setInitialContextFactoryBuilder(InitialContextFactoryBuilder initial\n          return null;\n       });\n    }\n+\n+   static void checkPermission(EmbeddedCacheManager cacheManager, AuthorizationPermission permission) {\n+      AuthorizationHelper authzHelper = getGlobalComponentRegistry(cacheManager).getComponent(AuthorizationHelper.class);\n+      authzHelper.checkPermission(cacheManager.getSubject(), AuthorizationPermission.ADMIN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NjY0Mw=="}, "originalCommit": {"oid": "55701b81662f4107e7c7f01bbfe80c86e03759d7"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzYxOTgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOTo1NDo0MFrOH1lqig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOTo1NDo1OFrOH1lrdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1MzY3NA==", "bodyText": "org.infinispan.xsite.XSiteAdminOperations#clusterStatus() needs to check for permission too.\nor is it intentional since it is a read-only operation?\nps. another one:\n\norg.infinispan.xsite.XSiteAdminOperations#nodeStatus()\norg.infinispan.xsite.XSiteAdminOperations#getTakeOfflineConfiguration()\norg.infinispan.xsite.XSiteAdminOperations#getSendingSiteName()\norg.infinispan.xsite.XSiteAdminOperations#checkSite", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525953674", "createdAt": "2020-11-18T09:54:40Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java", "diffHunk": "@@ -59,6 +61,7 @@\n    @Inject XSiteStateTransferManager stateTransferManager;\n    @Inject CommandsFactory commandsFactory;\n    @Inject TakeOfflineManager takeOfflineManager;\n+   @Inject AuthorizationHelper authorizationHelper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1MzkwOA==", "bodyText": "offtopic: can you make log final too?", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525953908", "createdAt": "2020-11-18T09:54:58Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java", "diffHunk": "@@ -59,6 +61,7 @@\n    @Inject XSiteStateTransferManager stateTransferManager;\n    @Inject CommandsFactory commandsFactory;\n    @Inject TakeOfflineManager takeOfflineManager;\n+   @Inject AuthorizationHelper authorizationHelper;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1MzY3NA=="}, "originalCommit": {"oid": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzYzNzc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOTo1ODo0OFrOH1l19w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOTo1ODo0OFrOH1l19w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1NjU5OQ==", "bodyText": "can be removed. the private method takeOffline already checks the permission.", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525956599", "createdAt": "2020-11-18T09:58:48Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java", "diffHunk": "@@ -185,6 +189,7 @@ public String setTakeOfflineAfterFailures(\n    public String setTakeOfflineMinTimeToWait(\n          @Parameter(name = \"site\", description = \"The name of the backup site\") String site,\n          @Parameter(name = \"minTimeToWait\", description = \"The minimum amount of time in milliseconds to wait before taking a site offline\") long minTimeToWait) {\n+      authorizationHelper.checkPermission(AuthorizationPermission.ADMIN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzY1OTc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/xsite/GlobalXSiteAdminOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDowMzo1OVrOH1mD4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMTozMToyOVrOH1pd9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2MDE2Mw==", "bodyText": "stupid question: isn't cacheManager.withSubject(Security.getSubject()) required here in this class?", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525960163", "createdAt": "2020-11-18T10:03:59Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/xsite/GlobalXSiteAdminOperations.java", "diffHunk": "@@ -107,6 +108,7 @@ public final String cancelPushState(@Parameter(description = \"The destination si\n    }\n \n    public final Map<String, SiteStatus> globalStatus() {\n+      SecurityActions.checkPermission(cacheManager, AuthorizationPermission.ADMIN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAxNTk5MA==", "bodyText": "They both work. If the cacheManager is decorated with a Subject, it will use that, otherwise it uses Security.getSubject() which uses a ThreadLocal set by the Security.doAs() call.", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526015990", "createdAt": "2020-11-18T11:31:29Z", "author": {"login": "tristantarrant"}, "path": "core/src/main/java/org/infinispan/xsite/GlobalXSiteAdminOperations.java", "diffHunk": "@@ -107,6 +108,7 @@ public final String cancelPushState(@Parameter(description = \"The destination si\n    }\n \n    public final Map<String, SiteStatus> globalStatus() {\n+      SecurityActions.checkPermission(cacheManager, AuthorizationPermission.ADMIN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2MDE2Mw=="}, "originalCommit": {"oid": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzY3OTM5OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDowODozNlrOH1mQLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDowODozNlrOH1mQLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2MzMwOQ==", "bodyText": "nitpick\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n          \n          \n            \n                     Security.doAs(restRequest.getSubject(), (PrivilegedAction<Void>) () -> {", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525963309", "createdAt": "2020-11-18T10:08:36Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "diffHunk": "@@ -49,16 +51,22 @@ public Invocations getInvocations() {\n       List<String> servers = restRequest.parameters().get(\"server\");\n \n       if (servers != null && !servers.isEmpty()) {\n-         invocationHelper.getServer().serverStop(servers);\n+         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzY4MDI3OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDowODo1MFrOH1mQvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDowODo1MFrOH1mQvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2MzQ1Mw==", "bodyText": "nitpick\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n          \n          \n            \n                     Security.doAs(restRequest.getSubject(), (PrivilegedAction<Void>) () -> {", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525963453", "createdAt": "2020-11-18T10:08:50Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "diffHunk": "@@ -49,16 +51,22 @@ public Invocations getInvocations() {\n       List<String> servers = restRequest.parameters().get(\"server\");\n \n       if (servers != null && !servers.isEmpty()) {\n-         invocationHelper.getServer().serverStop(servers);\n+         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n+            invocationHelper.getServer().serverStop(servers);\n+            return null;\n+         });\n       } else {\n-         invocationHelper.getServer().clusterStop();\n+         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzY4MjQxOnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDowOToyMVrOH1mSEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDowOToyMVrOH1mSEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2Mzc5Mg==", "bodyText": "nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) () -> backupManager.getBackupNames());\n          \n          \n            \n                  Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) backupManager::getBackupNames);", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525963792", "createdAt": "2020-11-18T10:09:21Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "diffHunk": "@@ -49,16 +51,22 @@ public Invocations getInvocations() {\n       List<String> servers = restRequest.parameters().get(\"server\");\n \n       if (servers != null && !servers.isEmpty()) {\n-         invocationHelper.getServer().serverStop(servers);\n+         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n+            invocationHelper.getServer().serverStop(servers);\n+            return null;\n+         });\n       } else {\n-         invocationHelper.getServer().clusterStop();\n+         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n+            invocationHelper.getServer().clusterStop();\n+            return null;\n+         });\n       }\n       return CompletableFuture.completedFuture(new NettyRestResponse.Builder().status(NO_CONTENT).build());\n    }\n \n    private CompletionStage<RestResponse> getAllBackupNames(RestRequest request) {\n       BackupManager backupManager = invocationHelper.getServer().getBackupManager();\n-      Set<String> names = backupManager.getBackupNames();\n+      Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) () -> backupManager.getBackupNames());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzY4NDA5OnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDowOTo0MVrOH1mTBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDowOTo0MVrOH1mTBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2NDAzNw==", "bodyText": "nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) () -> backupManager.getRestoreNames());\n          \n          \n            \n                  Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) backupManager::getRestoreNames);", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525964037", "createdAt": "2020-11-18T10:09:41Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "diffHunk": "@@ -69,7 +77,7 @@ public Invocations getInvocations() {\n \n    private CompletionStage<RestResponse> getAllRestoreNames(RestRequest request) {\n       BackupManager backupManager = invocationHelper.getServer().getBackupManager();\n-      Set<String> names = backupManager.getRestoreNames();\n+      Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) () -> backupManager.getRestoreNames());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzY5MzcyOnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/XSiteResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDoxMTo1MFrOH1mYrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDoxMTo1MFrOH1mYrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2NTQ4Ng==", "bodyText": "nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     Map<String, SiteStatus> globalStatus = Security.doAs(request.getSubject(), (PrivilegedAction<Map<String, SiteStatus>>) () -> globalXSiteAdmin.globalStatus());\n          \n          \n            \n                     Map<String, SiteStatus> globalStatus = Security.doAs(request.getSubject(), (PrivilegedAction<Map<String, SiteStatus>>) globalXSiteAdmin::globalStatus);", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525965486", "createdAt": "2020-11-18T10:11:50Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/XSiteResource.java", "diffHunk": "@@ -117,7 +119,8 @@ public Invocations getInvocations() {\n       if (globalXSiteAdmin == null) return CompletableFuture.completedFuture(responseBuilder.status(NOT_FOUND).build());\n \n       return CompletableFuture.supplyAsync(() -> {\n-         Map<String, GlobalStatus> collect = globalXSiteAdmin.globalStatus().entrySet().stream().collect(Collectors.toMap(Entry::getKey, e -> {\n+         Map<String, SiteStatus> globalStatus = Security.doAs(request.getSubject(), (PrivilegedAction<Map<String, SiteStatus>>) () -> globalXSiteAdmin.globalStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjcxMDEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/security/Security.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoxOToxNlrOH2WDvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoxOToxNlrOH2WDvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0NjU1Ng==", "bodyText": "nit: remove extra spaces :)", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526746556", "createdAt": "2020-11-19T10:19:16Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/security/Security.java", "diffHunk": "@@ -107,25 +125,13 @@ private static boolean isTrustedClass(Class<?> klass) {\n    public static <T> T doAs(final Subject subject,\n          final java.security.PrivilegedExceptionAction<T> action)\n          throws java.security.PrivilegedActionException {\n-      Deque<Subject> stack = SUBJECT.get();\n-      if (stack == null) {\n-         stack = new ArrayDeque<>();\n-         SUBJECT.set(stack);\n-      }\n-      if (subject != null) {\n-         stack.push(subject);\n-      }\n+      Deque<Subject> stack = pre(subject);\n       try {\n          return action.run();\n       } catch (Exception e) {\n-         throw new PrivilegedActionException(e);\n+            throw new PrivilegedActionException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1cb95275a3e8b347d0da175bfcccf438b14dbd"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjc5MTQ4OnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/impl/massindex/DistributedExecutorMassIndexer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozODo1OVrOH2W0uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDoyNTozNVrOH51xGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1OTA5OQ==", "bodyText": "missing check in org.infinispan.query.impl.massindex.DistributedExecutorMassIndexer#run(java.lang.Object...). it doesn't use executeInternal().\nNot sure if it is worth to protect org.infinispan.query.impl.massindex.DistributedExecutorMassIndexer#isRunning()", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526759099", "createdAt": "2020-11-19T10:38:59Z", "author": {"login": "pruivo"}, "path": "query/src/main/java/org/infinispan/query/impl/massindex/DistributedExecutorMassIndexer.java", "diffHunk": "@@ -60,6 +63,7 @@ public DistributedExecutorMassIndexer(AdvancedCache<?, ?> cache, KeyTransformati\n       this.blockingManager = cache.getCacheManager().getGlobalComponentRegistry()\n             .getComponent(BlockingManager.class);\n       this.lock = MassIndexerLockFactory.buildLock(cache);\n+      this.authorizationHelper = cache.getComponentRegistry().getComponent(AuthorizationHelper.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1cb95275a3e8b347d0da175bfcccf438b14dbd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MjExOQ==", "bodyText": "I'll protect it anyway", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526782119", "createdAt": "2020-11-19T11:15:37Z", "author": {"login": "tristantarrant"}, "path": "query/src/main/java/org/infinispan/query/impl/massindex/DistributedExecutorMassIndexer.java", "diffHunk": "@@ -60,6 +63,7 @@ public DistributedExecutorMassIndexer(AdvancedCache<?, ?> cache, KeyTransformati\n       this.blockingManager = cache.getCacheManager().getGlobalComponentRegistry()\n             .getComponent(BlockingManager.class);\n       this.lock = MassIndexerLockFactory.buildLock(cache);\n+      this.authorizationHelper = cache.getComponentRegistry().getComponent(AuthorizationHelper.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1OTA5OQ=="}, "originalCommit": {"oid": "3a1cb95275a3e8b347d0da175bfcccf438b14dbd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxMDU1Mw==", "bodyText": "are you going to protect isRunning()?", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r530410553", "createdAt": "2020-11-25T14:23:47Z", "author": {"login": "pruivo"}, "path": "query/src/main/java/org/infinispan/query/impl/massindex/DistributedExecutorMassIndexer.java", "diffHunk": "@@ -60,6 +63,7 @@ public DistributedExecutorMassIndexer(AdvancedCache<?, ?> cache, KeyTransformati\n       this.blockingManager = cache.getCacheManager().getGlobalComponentRegistry()\n             .getComponent(BlockingManager.class);\n       this.lock = MassIndexerLockFactory.buildLock(cache);\n+      this.authorizationHelper = cache.getComponentRegistry().getComponent(AuthorizationHelper.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1OTA5OQ=="}, "originalCommit": {"oid": "3a1cb95275a3e8b347d0da175bfcccf438b14dbd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxMTgwMA==", "bodyText": "I did that initially, but it breaks the cache info. Since it's just a read-only trait which doesn't expose any private info, it is safe as it is.", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r530411800", "createdAt": "2020-11-25T14:25:35Z", "author": {"login": "tristantarrant"}, "path": "query/src/main/java/org/infinispan/query/impl/massindex/DistributedExecutorMassIndexer.java", "diffHunk": "@@ -60,6 +63,7 @@ public DistributedExecutorMassIndexer(AdvancedCache<?, ?> cache, KeyTransformati\n       this.blockingManager = cache.getCacheManager().getGlobalComponentRegistry()\n             .getComponent(BlockingManager.class);\n       this.lock = MassIndexerLockFactory.buildLock(cache);\n+      this.authorizationHelper = cache.getComponentRegistry().getComponent(AuthorizationHelper.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1OTA5OQ=="}, "originalCommit": {"oid": "3a1cb95275a3e8b347d0da175bfcccf438b14dbd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjc5NTc4OnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/impl/massindex/SecurityActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozOTo1OFrOH2W3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozOTo1OFrOH2W3Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1OTcyNw==", "bodyText": "isn't this overkill? could invoke the method directly in AuthorizationHelper", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526759727", "createdAt": "2020-11-19T10:39:58Z", "author": {"login": "pruivo"}, "path": "query/src/main/java/org/infinispan/query/impl/massindex/SecurityActions.java", "diffHunk": "@@ -32,4 +34,8 @@ private SecurityActions() {\n          return cache;\n       }\n    }\n+\n+   static void checkPermission(AuthorizationHelper authorizationHelper, AuthorizationPermission permission) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1cb95275a3e8b347d0da175bfcccf438b14dbd"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjg3NjU0OnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/security/authorization/AbstractAuthorization.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo1OToyOFrOH2XoZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo1OToyOFrOH2XoZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3MjMyNQ==", "bodyText": "Missing test annotation.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               public void testRestNonAdminsMustNotAccessBackupsAndRestores() {\n          \n          \n            \n               @Test\n          \n          \n            \n               public void testRestNonAdminsMustNotAccessBackupsAndRestores() {", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526772325", "createdAt": "2020-11-19T10:59:28Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/security/authorization/AbstractAuthorization.java", "diffHunk": "@@ -207,6 +208,98 @@ public void testAnonymousHealthPredefinedCache() {\n       assertEquals(\"HEALTHY\", sync(client.cacheManager(\"default\").healthStatus()).getBody());\n    }\n \n+   @Test\n+   public void testRestNonAdminsMustNotShutdownServer() {\n+      for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().server().stop()).getStatus());\n+      }\n+   }\n+\n+   @Test\n+   public void testRestNonAdminsMustNotShutdownCluster() {\n+      for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cluster().stop()).getStatus());\n+      }\n+   }\n+\n+   @Test\n+   public void testRestNonAdminsMustNotModifyCacheIgnores() {\n+      for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().server().ignoreCache(\"default\", \"predefined\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().server().unIgnoreCache(\"default\", \"predefined\")).getStatus());\n+      }\n+   }\n+\n+   @Test\n+   public void testRestAdminsShouldBeAbleToModifyLoggers() {\n+      assertEquals(204, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(\"admin\")).get().server().logging().setLogger(\"org.infinispan.TEST_LOGGER\", \"ERROR\", \"STDOUT\")).getStatus());\n+      assertEquals(204, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(\"admin\")).get().server().logging().removeLogger(\"org.infinispan.TEST_LOGGER\")).getStatus());\n+   }\n+\n+   @Test\n+   public void testRestNonAdminsMustNotModifyLoggers() {\n+      for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().server().logging().setLogger(\"org.infinispan.TEST_LOGGER\", \"ERROR\", \"STDOUT\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().server().logging().removeLogger(\"org.infinispan.TEST_LOGGER\")).getStatus());\n+      }\n+   }\n+\n+   @Test\n+   public void testRestNonAdminsMustNotObtainReport() {\n+      for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().server().report()).getStatus());\n+      }\n+   }\n+\n+   @Test\n+   public void testRestNonAdminsMustNotAccessPerformXSiteOps() {\n+      for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").takeSiteOffline(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").bringSiteOnline(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").cancelPushState(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").cancelReceiveState(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").clearPushStateStatus()).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").pushSiteState(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").pushStateStatus()).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").xsiteBackups()).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").backupStatus(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").getXSiteTakeOfflineConfig(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").updateXSiteTakeOfflineConfig(\"NYC\", 10, 1000)).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cacheManager(\"default\").bringBackupOnline(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cacheManager(\"default\").takeOffline(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cacheManager(\"default\").backupStatuses()).getStatus());\n+      }\n+   }\n+\n+   @Test\n+   public void testRestNonAdminsMustNotPerformSearchActions() {\n+      String schema = Exceptions.unchecked(() -> Util.getResourceAsString(\"/sample_bank_account/bank.proto\", this.getClass().getClassLoader()));\n+      assertEquals(200, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(\"admin\")).get().schemas().put(\"bank.proto\", schema)).getStatus());\n+      org.infinispan.configuration.cache.ConfigurationBuilder builder = new org.infinispan.configuration.cache.ConfigurationBuilder();\n+      builder.indexing().enable().addIndexedEntity(\"sample_bank_account.User\");\n+      getServerTest().rest().withClientConfiguration(restBuilders.get(\"admin\")).withServerConfiguration(builder).create();\n+      String indexedCache = getServerTest().getMethodName();\n+\n+      for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(indexedCache).clearSearchStats()).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(indexedCache).reindex()).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(indexedCache).clearIndex()).getStatus());\n+      }\n+   }\n+\n+   public void testRestNonAdminsMustNotAccessBackupsAndRestores() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84b02f5dcde40b3c4bd873bc5395fefe03fe8051"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjkwNDA1OnYy", "diffSide": "RIGHT", "path": "server/rest/src/test/java/org/infinispan/rest/resources/security/SimpleSecurityDomain.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTowNjoyOFrOH2X5EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToxNDo0MVrOH2YMag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3NjU5Mw==", "bodyText": "wait!? is this correct? username equals to password?", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526776593", "createdAt": "2020-11-19T11:06:28Z", "author": {"login": "pruivo"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/security/SimpleSecurityDomain.java", "diffHunk": "@@ -1,24 +1,30 @@\n package org.infinispan.rest.resources.security;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n import javax.security.auth.Subject;\n \n import org.infinispan.rest.authentication.SecurityDomain;\n \n /**\n- * Security domain that returns always the same subject\n+ * Security domain that supports a simple map of subjects\n  */\n public class SimpleSecurityDomain implements SecurityDomain {\n \n-   private final Subject subject;\n+   private final Map<String, Subject> subjects;\n \n-   public SimpleSecurityDomain(Subject subject) {\n-      this.subject = subject;\n+   public SimpleSecurityDomain(Subject... subjects) {\n+      this.subjects = new HashMap<>(subjects.length);\n+      for (Subject subject : subjects) {\n+         this.subjects.put(subject.getPrincipals().iterator().next().getName().toLowerCase(), subject);\n+      }\n    }\n \n    @Override\n    public Subject authenticate(String username, String password) throws SecurityException {\n       if (username.equals(password)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84b02f5dcde40b3c4bd873bc5395fefe03fe8051"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3NzcyOA==", "bodyText": "It's a test :)", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526777728", "createdAt": "2020-11-19T11:08:30Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/security/SimpleSecurityDomain.java", "diffHunk": "@@ -1,24 +1,30 @@\n package org.infinispan.rest.resources.security;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n import javax.security.auth.Subject;\n \n import org.infinispan.rest.authentication.SecurityDomain;\n \n /**\n- * Security domain that returns always the same subject\n+ * Security domain that supports a simple map of subjects\n  */\n public class SimpleSecurityDomain implements SecurityDomain {\n \n-   private final Subject subject;\n+   private final Map<String, Subject> subjects;\n \n-   public SimpleSecurityDomain(Subject subject) {\n-      this.subject = subject;\n+   public SimpleSecurityDomain(Subject... subjects) {\n+      this.subjects = new HashMap<>(subjects.length);\n+      for (Subject subject : subjects) {\n+         this.subjects.put(subject.getPrincipals().iterator().next().getName().toLowerCase(), subject);\n+      }\n    }\n \n    @Override\n    public Subject authenticate(String username, String password) throws SecurityException {\n       if (username.equals(password)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3NjU5Mw=="}, "originalCommit": {"oid": "84b02f5dcde40b3c4bd873bc5395fefe03fe8051"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MTU0Ng==", "bodyText": "I'll blame the coffee. it takes time to kick in \ud83e\udd23", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526781546", "createdAt": "2020-11-19T11:14:41Z", "author": {"login": "pruivo"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/security/SimpleSecurityDomain.java", "diffHunk": "@@ -1,24 +1,30 @@\n package org.infinispan.rest.resources.security;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n import javax.security.auth.Subject;\n \n import org.infinispan.rest.authentication.SecurityDomain;\n \n /**\n- * Security domain that returns always the same subject\n+ * Security domain that supports a simple map of subjects\n  */\n public class SimpleSecurityDomain implements SecurityDomain {\n \n-   private final Subject subject;\n+   private final Map<String, Subject> subjects;\n \n-   public SimpleSecurityDomain(Subject subject) {\n-      this.subject = subject;\n+   public SimpleSecurityDomain(Subject... subjects) {\n+      this.subjects = new HashMap<>(subjects.length);\n+      for (Subject subject : subjects) {\n+         this.subjects.put(subject.getPrincipals().iterator().next().getName().toLowerCase(), subject);\n+      }\n    }\n \n    @Override\n    public Subject authenticate(String username, String password) throws SecurityException {\n       if (username.equals(password)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3NjU5Mw=="}, "originalCommit": {"oid": "84b02f5dcde40b3c4bd873bc5395fefe03fe8051"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzExNTcyOnYy", "diffSide": "RIGHT", "path": "server/rest/src/main/java/org/infinispan/rest/resources/SearchAdminResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo1NTozMlrOH2Z78Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDoyOToxMVrOH2hOig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxMDA5Nw==", "bodyText": "why is this required? the cache already contains the subject (via Cache.withSubject())", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526810097", "createdAt": "2020-11-19T11:55:32Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/SearchAdminResource.java", "diffHunk": "@@ -108,7 +109,7 @@ public Invocations getInvocations() {\n          throw new CacheException(\"NotImplemented\");\n       } else {\n          SearchStatistics searchStatistics = Search.getSearchStatistics(cache);\n-         searchStatistics.getQueryStatistics().clear();\n+         Security.doAs(restRequest.getSubject(), () -> searchStatistics.getQueryStatistics().clear());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a53cd50a4d560c7f7281ee1eed58077c264d5303"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkyOTU0Ng==", "bodyText": "Because that doesn't carry across to the SearchStatistics object", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526929546", "createdAt": "2020-11-19T14:29:11Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/SearchAdminResource.java", "diffHunk": "@@ -108,7 +109,7 @@ public Invocations getInvocations() {\n          throw new CacheException(\"NotImplemented\");\n       } else {\n          SearchStatistics searchStatistics = Search.getSearchStatistics(cache);\n-         searchStatistics.getQueryStatistics().clear();\n+         Security.doAs(restRequest.getSubject(), () -> searchStatistics.getQueryStatistics().clear());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxMDA5Nw=="}, "originalCommit": {"oid": "a53cd50a4d560c7f7281ee1eed58077c264d5303"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzEyMjg1OnYy", "diffSide": "RIGHT", "path": "server/rest/src/test/java/org/infinispan/rest/resources/CacheV2ResourceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo1NzoyMlrOH2aAOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDozMDoyMVrOH2hSHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxMTE5Mw==", "bodyText": "shouldn't this be invoked only when security==false?", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526811193", "createdAt": "2020-11-19T11:57:22Z", "author": {"login": "pruivo"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/CacheV2ResourceTest.java", "diffHunk": "@@ -643,6 +644,11 @@ public void testSearchStatistics() {\n \n       // Clear all stats\n       RestResponse response = join(cacheClient.clearSearchStats());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a53cd50a4d560c7f7281ee1eed58077c264d5303"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2NDgxNA==", "bodyText": "All of the tests rely on zeroed stats so it needs to be called.", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526864814", "createdAt": "2020-11-19T13:05:37Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/CacheV2ResourceTest.java", "diffHunk": "@@ -643,6 +644,11 @@ public void testSearchStatistics() {\n \n       // Clear all stats\n       RestResponse response = join(cacheClient.clearSearchStats());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxMTE5Mw=="}, "originalCommit": {"oid": "a53cd50a4d560c7f7281ee1eed58077c264d5303"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkzMDQ2Mg==", "bodyText": "true, but you are invoked clearSearchStats() twice when security==true; here and other as \"admin\"", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526930462", "createdAt": "2020-11-19T14:30:21Z", "author": {"login": "pruivo"}, "path": "server/rest/src/test/java/org/infinispan/rest/resources/CacheV2ResourceTest.java", "diffHunk": "@@ -643,6 +644,11 @@ public void testSearchStatistics() {\n \n       // Clear all stats\n       RestResponse response = join(cacheClient.clearSearchStats());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxMTE5Mw=="}, "originalCommit": {"oid": "a53cd50a4d560c7f7281ee1eed58077c264d5303"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3788, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}