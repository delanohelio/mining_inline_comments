{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODQ1MjE4", "number": 8463, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODowNjo1NVrOEElWIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODowNjo1NVrOEElWIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjQxNjMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/encoding/impl/StorageConfigurationManager.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODowNjo1NVrOGiS3RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMTo0OFrOGiksYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYxMzgyOQ==", "bodyText": "I reckon configuration.memory().storage() == StorageType.HEAP is the only check you need, since the config will translate from the old attributes. Do you have a failing test for this JIRA @danberindei or was it just something you noticed?", "url": "https://github.com/infinispan/infinispan/pull/8463#discussion_r438613829", "createdAt": "2020-06-11T08:06:55Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/impl/StorageConfigurationManager.java", "diffHunk": "@@ -109,6 +108,8 @@ private MediaType getStorageMediaType(Configuration configuration, boolean embed\n       if (internalCache) return MediaType.APPLICATION_OBJECT;\n \n       if (embeddedMode) {\n+         boolean heap = configuration.memory().storage() == StorageType.OBJECT ||\n+                        configuration.memory().storage() == StorageType.HEAP;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e18273a1c43be1113d4c116cb0cb3b5c555d954"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcxMDQwMg==", "bodyText": "I don't have a test, I just noticed it while testing the anchored keys module, which at the time replaced cache values with Address instances and then treated them as protostream-encoded byte[].\nAnd it looks like I got the problem wrong: my test was using the deprecated MemoryStorageConfigurationBuilder.storageType(), and HEAP actually stopped working when I switched it to the new MemoryConfigurationBuilder.storage(). That's because they use 2 independent attributes, and MemoryConfigurationBuilder doesn't just translate OBJECT->HEAP when the attribute is set, it also translates back STORAGE=HEAP -> STORAGE_TYPE=OBJECT in read(). IMO the less magic in the configuration (or anywhere else, for that matter) the better, so personally I would remove the translation OBJECT->HEAP and back, and allow both OBJECT and HEAP here.", "url": "https://github.com/infinispan/infinispan/pull/8463#discussion_r438710402", "createdAt": "2020-06-11T11:11:50Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/impl/StorageConfigurationManager.java", "diffHunk": "@@ -109,6 +108,8 @@ private MediaType getStorageMediaType(Configuration configuration, boolean embed\n       if (internalCache) return MediaType.APPLICATION_OBJECT;\n \n       if (embeddedMode) {\n+         boolean heap = configuration.memory().storage() == StorageType.OBJECT ||\n+                        configuration.memory().storage() == StorageType.HEAP;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYxMzgyOQ=="}, "originalCommit": {"oid": "4e18273a1c43be1113d4c116cb0cb3b5c555d954"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxOTYyNw==", "bodyText": "my test was using the deprecated MemoryStorageConfigurationBuilder.storageType(), and HEAP actually stopped working\n\nStill don't get it. Were you using storageType(HEAP) and then moved to storage(HEAP) or storageType(OBJECT) and moved to storage(HEAP)?", "url": "https://github.com/infinispan/infinispan/pull/8463#discussion_r438819627", "createdAt": "2020-06-11T14:15:53Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/impl/StorageConfigurationManager.java", "diffHunk": "@@ -109,6 +108,8 @@ private MediaType getStorageMediaType(Configuration configuration, boolean embed\n       if (internalCache) return MediaType.APPLICATION_OBJECT;\n \n       if (embeddedMode) {\n+         boolean heap = configuration.memory().storage() == StorageType.OBJECT ||\n+                        configuration.memory().storage() == StorageType.HEAP;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYxMzgyOQ=="}, "originalCommit": {"oid": "4e18273a1c43be1113d4c116cb0cb3b5c555d954"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNTg0Mw==", "bodyText": "Yeah, looking at ScaleUpWithoutStateTransferTest, it is the former", "url": "https://github.com/infinispan/infinispan/pull/8463#discussion_r438825843", "createdAt": "2020-06-11T14:25:05Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/impl/StorageConfigurationManager.java", "diffHunk": "@@ -109,6 +108,8 @@ private MediaType getStorageMediaType(Configuration configuration, boolean embed\n       if (internalCache) return MediaType.APPLICATION_OBJECT;\n \n       if (embeddedMode) {\n+         boolean heap = configuration.memory().storage() == StorageType.OBJECT ||\n+                        configuration.memory().storage() == StorageType.HEAP;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYxMzgyOQ=="}, "originalCommit": {"oid": "4e18273a1c43be1113d4c116cb0cb3b5c555d954"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5NzUyOQ==", "bodyText": "I finally wrote a comprehensive test, and the only broken config is\nconfigurationBuilder.memory().storageType(StorageType.HEAP);\nassertStorageMediaTypes(configurationBuilder, StorageType.HEAP, StorageType.HEAP,\n                              MediaType.APPLICATION_PROTOSTREAM);", "url": "https://github.com/infinispan/infinispan/pull/8463#discussion_r438897529", "createdAt": "2020-06-11T15:58:19Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/impl/StorageConfigurationManager.java", "diffHunk": "@@ -109,6 +108,8 @@ private MediaType getStorageMediaType(Configuration configuration, boolean embed\n       if (internalCache) return MediaType.APPLICATION_OBJECT;\n \n       if (embeddedMode) {\n+         boolean heap = configuration.memory().storage() == StorageType.OBJECT ||\n+                        configuration.memory().storage() == StorageType.HEAP;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYxMzgyOQ=="}, "originalCommit": {"oid": "4e18273a1c43be1113d4c116cb0cb3b5c555d954"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNTk1Mg==", "bodyText": "ok, just waiting for CI", "url": "https://github.com/infinispan/infinispan/pull/8463#discussion_r438905952", "createdAt": "2020-06-11T16:11:48Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/impl/StorageConfigurationManager.java", "diffHunk": "@@ -109,6 +108,8 @@ private MediaType getStorageMediaType(Configuration configuration, boolean embed\n       if (internalCache) return MediaType.APPLICATION_OBJECT;\n \n       if (embeddedMode) {\n+         boolean heap = configuration.memory().storage() == StorageType.OBJECT ||\n+                        configuration.memory().storage() == StorageType.HEAP;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYxMzgyOQ=="}, "originalCommit": {"oid": "4e18273a1c43be1113d4c116cb0cb3b5c555d954"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4075, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}