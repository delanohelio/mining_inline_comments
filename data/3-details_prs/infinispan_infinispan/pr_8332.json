{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4Njc3MDM1", "number": 8332, "title": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution", "bodyText": "https://issues.redhat.com/browse/ISPN-11802\n\n Add Documentation\n Add JavaDoc\n Add configuration\n Fix issue described", "createdAt": "2020-05-15T16:08:24Z", "url": "https://github.com/infinispan/infinispan/pull/8332", "merged": true, "mergeCommit": {"oid": "2d53d0a1e59f2dc3335235f9dafb8e93e611c60e"}, "closed": true, "closedAt": "2020-09-07T10:44:19Z", "author": {"login": "pruivo"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcig0kGgBqjMzNDc2MzQ1NTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd3Zzm8AFqTQ3NjQ4MDY2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc0e62801435456eb42cec2aea417a5e3345374f", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/cc0e62801435456eb42cec2aea417a5e3345374f", "committedDate": "2020-05-15T16:06:09Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}, "afterCommit": {"oid": "5ed891434c240ba3152ddc3eb4fc156b548f1734", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/5ed891434c240ba3152ddc3eb4fc156b548f1734", "committedDate": "2020-05-18T14:33:03Z", "message": "wip..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ed891434c240ba3152ddc3eb4fc156b548f1734", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/5ed891434c240ba3152ddc3eb4fc156b548f1734", "committedDate": "2020-05-18T14:33:03Z", "message": "wip..."}, "afterCommit": {"oid": "96b2ed605b91c31a2cb8caf786595b879951872c", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/96b2ed605b91c31a2cb8caf786595b879951872c", "committedDate": "2020-05-19T14:43:26Z", "message": "wip..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTczNDMw", "url": "https://github.com/infinispan/infinispan/pull/8332#pullrequestreview-415173430", "createdAt": "2020-05-20T09:53:03Z", "commit": {"oid": "96b2ed605b91c31a2cb8caf786595b879951872c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTo1MzowM1rOGYEBbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTo1NjoyNVrOGYEJZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg4NDkwOA==", "bodyText": "We should probably create a org.infinispan.xsite.spi package for the SPI. This is how we separate the SPI from the implementation in org.infinispan.persistence.", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r427884908", "createdAt": "2020-05-20T09:53:03Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/xsite/conflict/XSiteConflictResolver.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.infinispan.xsite.conflict;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b2ed605b91c31a2cb8caf786595b879951872c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg4Njk1MA==", "bodyText": "For usability it's probably worth exposing an ENUM for the built in resolution policies like \"PreferNullConflictResolver\". For CR we do this by loading the class if the provided value does not equal one of the provided enum values:\n\n  \n    \n      infinispan/core/src/main/java/org/infinispan/configuration/parsing/Parser.java\n    \n    \n        Lines 1289 to 1294\n      in\n      8150e1d\n    \n    \n    \n    \n\n        \n          \n           case MERGE_POLICY: { \n        \n\n        \n          \n              MergePolicy mp = MergePolicy.fromString(value); \n        \n\n        \n          \n              EntryMergePolicy mergePolicy = mp == MergePolicy.CUSTOM ? Util.getInstance(value, holder.getClassLoader()) : mp; \n        \n\n        \n          \n              ph.mergePolicy(mergePolicy); \n        \n\n        \n          \n              break; \n        \n\n        \n          \n           }", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r427886950", "createdAt": "2020-05-20T09:56:25Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/configuration/parsing/Parser.java", "diffHunk": "@@ -1253,19 +1253,25 @@ private void parseSharedStateCacheElement(XMLExtendedStreamReader reader, Elemen\n       }\n    }\n \n-   private void parseBackups(XMLExtendedStreamReader reader, ConfigurationBuilder builder) throws XMLStreamException {\n+   private void parseBackups(XMLExtendedStreamReader reader, ConfigurationBuilderHolder holder) throws XMLStreamException {\n+      ConfigurationBuilder builder = holder.getCurrentConfigurationBuilder();\n       // If backups is present then remove any existing backups as they were added by the default config.\n       builder.sites().backups().clear();\n+      for (int i = 0; i < reader.getAttributeCount(); i++) {\n+         String value = reader.getAttributeValue(i);\n+         Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n+         if (attribute == Attribute.CONFLICT_RESOLVER) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b2ed605b91c31a2cb8caf786595b879951872c"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96b2ed605b91c31a2cb8caf786595b879951872c", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/96b2ed605b91c31a2cb8caf786595b879951872c", "committedDate": "2020-05-19T14:43:26Z", "message": "wip..."}, "afterCommit": {"oid": "7bbc87bb9d6fdafe7134fe04cd68084ceda5acd9", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/7bbc87bb9d6fdafe7134fe04cd68084ceda5acd9", "committedDate": "2020-07-06T08:26:51Z", "message": "wip..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "206f517636c9477154aaae57cf45a0702bd182c0", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/206f517636c9477154aaae57cf45a0702bd182c0", "committedDate": "2020-07-07T15:19:35Z", "message": "wip..."}, "afterCommit": {"oid": "8d8c33c4eb856dc1c479ad740771e97f67e5635a", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/8d8c33c4eb856dc1c479ad740771e97f67e5635a", "committedDate": "2020-07-10T14:41:27Z", "message": "wip..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d8c33c4eb856dc1c479ad740771e97f67e5635a", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/8d8c33c4eb856dc1c479ad740771e97f67e5635a", "committedDate": "2020-07-10T14:41:27Z", "message": "wip..."}, "afterCommit": {"oid": "55e3a9550ecd44a81836fa65f6eafcfa9b734526", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/55e3a9550ecd44a81836fa65f6eafcfa9b734526", "committedDate": "2020-07-21T09:31:48Z", "message": "wip..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "375791704a4a5765e9bf3481207121ad7fad607c", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/375791704a4a5765e9bf3481207121ad7fad607c", "committedDate": "2020-07-22T15:17:21Z", "message": "wip..."}, "afterCommit": {"oid": "751e56bbd45d02cffe136cc65e374585fca2ba31", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/751e56bbd45d02cffe136cc65e374585fca2ba31", "committedDate": "2020-07-22T15:18:02Z", "message": "wip..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "751e56bbd45d02cffe136cc65e374585fca2ba31", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/751e56bbd45d02cffe136cc65e374585fca2ba31", "committedDate": "2020-07-22T15:18:02Z", "message": "wip..."}, "afterCommit": {"oid": "506883579e33a40d97e52e25c2b1d7e764e6ee97", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/506883579e33a40d97e52e25c2b1d7e764e6ee97", "committedDate": "2020-07-27T09:39:35Z", "message": "wip..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d873e6f6376f91431cecf95d137f46349e6154e", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/1d873e6f6376f91431cecf95d137f46349e6154e", "committedDate": "2020-07-27T11:41:51Z", "message": "wip..."}, "afterCommit": {"oid": "01e7a5044dcdcd30ff017f0f83e914f254a815cb", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/01e7a5044dcdcd30ff017f0f83e914f254a815cb", "committedDate": "2020-07-27T12:56:36Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01e7a5044dcdcd30ff017f0f83e914f254a815cb", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/01e7a5044dcdcd30ff017f0f83e914f254a815cb", "committedDate": "2020-07-27T12:56:36Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}, "afterCommit": {"oid": "0ecf450b4b1845d0ac92fe5232e9f70ad559c533", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/0ecf450b4b1845d0ac92fe5232e9f70ad559c533", "committedDate": "2020-07-28T08:10:45Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ecf450b4b1845d0ac92fe5232e9f70ad559c533", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/0ecf450b4b1845d0ac92fe5232e9f70ad559c533", "committedDate": "2020-07-28T08:10:45Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}, "afterCommit": {"oid": "9e58f1bb4aed1ccf80e27a7dbdf50fb535f8d2a9", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/9e58f1bb4aed1ccf80e27a7dbdf50fb535f8d2a9", "committedDate": "2020-07-28T13:33:36Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e58f1bb4aed1ccf80e27a7dbdf50fb535f8d2a9", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/9e58f1bb4aed1ccf80e27a7dbdf50fb535f8d2a9", "committedDate": "2020-07-28T13:33:36Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}, "afterCommit": {"oid": "f1fc2cf49986ef2f540d358c862d71ac83185e2b", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/f1fc2cf49986ef2f540d358c862d71ac83185e2b", "committedDate": "2020-07-28T13:35:41Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "907455ebac95c9cd13c0a97e6c75b2f9bf0a8778", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/907455ebac95c9cd13c0a97e6c75b2f9bf0a8778", "committedDate": "2020-07-29T12:33:09Z", "message": "docs"}, "afterCommit": {"oid": "9219961ad4d617f3e9fdb1e0c7da1488b400e6ed", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/9219961ad4d617f3e9fdb1e0c7da1488b400e6ed", "committedDate": "2020-08-03T10:07:20Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNjcwNzgw", "url": "https://github.com/infinispan/infinispan/pull/8332#pullrequestreview-460670780", "createdAt": "2020-08-04T09:59:53Z", "commit": {"oid": "9219961ad4d617f3e9fdb1e0c7da1488b400e6ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTo1OTo1M1rOG7ZrWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTo1OTo1M1rOG7ZrWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkzOTg2NQ==", "bodyText": "We should propose that users utilise the BlockingManager here.", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r464939865", "createdAt": "2020-08-04T09:59:53Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/xsite/spi/XSiteConflictResolver.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.infinispan.xsite.spi;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.metadata.Metadata;\n+\n+/**\n+ * An interface to resolve conflicts for asynchronous cross-site replication.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 12.0\n+ */\n+public interface XSiteConflictResolver<K, V> {\n+\n+   /**\n+    * Resolves conflicts for asynchronous cross-site replication.\n+    * <p>\n+    * When a conflict is detected (concurrent updates on the same key in different sites), this method is invoked with\n+    * the local data and the remote site's data ({@link SiteEntry}). It includes the value and the {@link Metadata}\n+    * associated.\n+    * <p>\n+    * The value and the {@link Metadata} may be {@code null}. If that is the case, it means the {@code key} doesn't\n+    * exist (for {@code localEntry}) or it is a remove operation (for {@code remoteEntry}).\n+    * <p>\n+    * The returned {@link SiteEntry} must be equal independent of the order of the arguments (i.e. {@code resolve(k, s1,\n+    * s2).equals(resolve(k, s2, s1))}) otherwise your date may be corrupted. It is allowed to return one of the\n+    * arguments ({@code localEntry} or {@code remoteEntry}) and to create a new {@link SiteEntry} with a new value.\n+    * <p>\n+    * Note: if the return {@link SiteEntry#getValue()} is {@code null}, Infinispan will interpret it to remove the\n+    * {@code key}.\n+    * <p>\n+    * Note2: This method shouldn't block (I/O or locks). If it needs to block, use a different thread and complete the\n+    * {@link CompletionStage} with the result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9219961ad4d617f3e9fdb1e0c7da1488b400e6ed"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNjcxNTI5", "url": "https://github.com/infinispan/infinispan/pull/8332#pullrequestreview-460671529", "createdAt": "2020-08-04T10:01:01Z", "commit": {"oid": "9219961ad4d617f3e9fdb1e0c7da1488b400e6ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDowMTowMVrOG7Zt1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDowMTowMVrOG7Zt1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk0MDUwMA==", "bodyText": "The xsd needs updating to specify the available enum values, as well as the ability to add a custom implementation.", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r464940500", "createdAt": "2020-08-04T10:01:01Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/resources/schema/infinispan-config-12.0.xsd", "diffHunk": "@@ -2055,6 +2055,14 @@\n         </xs:annotation>\n       </xs:element>\n     </xs:sequence>\n+    <xs:attribute name=\"conflict-resolver\" type=\"xs:string\">\n+      <xs:annotation>\n+        <xs:documentation>\n+          Specifies the fully qualified name of a class that implements the\n+          XSiteConflictResolver interface. Use if for ASYNC strategy backup.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9219961ad4d617f3e9fdb1e0c7da1488b400e6ed"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNjc3ODYx", "url": "https://github.com/infinispan/infinispan/pull/8332#pullrequestreview-460677861", "createdAt": "2020-08-04T10:10:20Z", "commit": {"oid": "9219961ad4d617f3e9fdb1e0c7da1488b400e6ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDoxMDoyMFrOG7aAtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDoxMDoyMFrOG7aAtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk0NTMzNA==", "bodyText": "For consistency should we also utilise merge-policy for xsite? The discrepency in the XML seems odd to me as both conflict-resolve and merge-policy have the same purpose, albeit in the different contexts:\n<distributed-cache name=\"conflictResolver\" configuration=\"base\">\n  <partition-handling when-split=\"ALLOW_READ_WRITES\" merge-policy=\"PREFERRED_NON_NULL\"/>\n  <backups conflict-resolver=\"PREFER_NON_NULL\">\n    <backup site=\"NYC2\" strategy=\"ASYNC\"/>\n  </backups>\n</distributed-cache>", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r464945334", "createdAt": "2020-08-04T10:10:20Z", "author": {"login": "ryanemerson"}, "path": "core/src/test/resources/configs/xsite/xsite-test.xml", "diffHunk": "@@ -29,6 +29,26 @@\n                     failure-policy-class=\"org.infinispan.xsite.CountingCustomFailurePolicy\" timeout=\"160000\"/>\n          </backups>\n       </distributed-cache>\n+      <distributed-cache name=\"conflictResolver\" configuration=\"base\">\n+         <backups conflict-resolver=\"PREFER_NON_NULL\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9219961ad4d617f3e9fdb1e0c7da1488b400e6ed"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9219961ad4d617f3e9fdb1e0c7da1488b400e6ed", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/9219961ad4d617f3e9fdb1e0c7da1488b400e6ed", "committedDate": "2020-08-03T10:07:20Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}, "afterCommit": {"oid": "44d8b3ae83be89af8b5cb415372a4af9c2ddf19d", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/44d8b3ae83be89af8b5cb415372a4af9c2ddf19d", "committedDate": "2020-08-25T08:20:52Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44d8b3ae83be89af8b5cb415372a4af9c2ddf19d", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/44d8b3ae83be89af8b5cb415372a4af9c2ddf19d", "committedDate": "2020-08-25T08:20:52Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}, "afterCommit": {"oid": "21fd6c8ba9ad6b336386c1420b513c70e2e3e200", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/21fd6c8ba9ad6b336386c1420b513c70e2e3e200", "committedDate": "2020-08-25T10:45:25Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21fd6c8ba9ad6b336386c1420b513c70e2e3e200", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/21fd6c8ba9ad6b336386c1420b513c70e2e3e200", "committedDate": "2020-08-25T10:45:25Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}, "afterCommit": {"oid": "e6baef6b49e246014db7e3dfa2f32844435e0fef", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/e6baef6b49e246014db7e3dfa2f32844435e0fef", "committedDate": "2020-08-26T08:23:43Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6baef6b49e246014db7e3dfa2f32844435e0fef", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/e6baef6b49e246014db7e3dfa2f32844435e0fef", "committedDate": "2020-08-26T08:23:43Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}, "afterCommit": {"oid": "4067b1a763e010d9b8adcc48e87a0c3223fe7da0", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/4067b1a763e010d9b8adcc48e87a0c3223fe7da0", "committedDate": "2020-09-03T13:49:00Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODk2NTg4", "url": "https://github.com/infinispan/infinispan/pull/8332#pullrequestreview-482896588", "createdAt": "2020-09-04T19:28:19Z", "commit": {"oid": "4067b1a763e010d9b8adcc48e87a0c3223fe7da0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxOToyODoyMFrOHNZY8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxOToyODoyMFrOHNZY8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgwOTUyMw==", "bodyText": "Looks like just return attribute would work.", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r483809523", "createdAt": "2020-09-04T19:28:20Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/configuration/cache/SitesConfiguration.java", "diffHunk": "@@ -165,4 +190,40 @@ public boolean equals(Object obj) {\n    public String toString() {\n       return \"SitesConfiguration [backupFor=\" + backupFor + \", allBackups=\" + allBackups + \", attributes=\" + attributes + \"]\";\n    }\n+\n+   @SuppressWarnings(\"rawtypes\")\n+   private static class MergePolicySerializer extends\n+         AttributeSerializer<XSiteEntryMergePolicy, SitesConfiguration, SitesConfigurationBuilder> {\n+      @Override\n+      public Object getSerializationValue(Attribute<XSiteEntryMergePolicy> attribute,\n+            SitesConfiguration configurationElement) {\n+         XSiteEntryMergePolicy<?, ?> entryMergePolicy = attribute.get();\n+         XSiteMergePolicy mergePolicy = XSiteMergePolicy.fromInstance(entryMergePolicy);\n+         return mergePolicy == null ? entryMergePolicy.getClass().getName() : mergePolicy.toString();\n+      }\n+\n+      @Override\n+      public Object readAttributeValue(String enclosingElement, AttributeDefinition attributeDefinition,\n+            Object attrValue, SitesConfigurationBuilder builderInfo) {\n+         assert attrValue instanceof String;\n+         return XSiteMergePolicy.instanceFromString((String) attrValue, builderInfo.getClass().getClassLoader());\n+      }\n+   }\n+\n+   @SuppressWarnings(\"rawtypes\")\n+   private static class MergePolicyAttributeCopier implements AttributeCopier<XSiteEntryMergePolicy> {\n+\n+      @Override\n+      public XSiteEntryMergePolicy copyAttribute(XSiteEntryMergePolicy attribute) {\n+         if (attribute == null) {\n+            return null;\n+         }\n+         if (attribute instanceof XSiteMergePolicy) {\n+            //the default implementations are immutable and can be reused.\n+            return ((XSiteMergePolicy) attribute).getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4067b1a763e010d9b8adcc48e87a0c3223fe7da0"}, "originalPosition": 113}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4067b1a763e010d9b8adcc48e87a0c3223fe7da0", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/4067b1a763e010d9b8adcc48e87a0c3223fe7da0", "committedDate": "2020-09-03T13:49:00Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}, "afterCommit": {"oid": "ffd2331c609c091ced102ebbcadfdfdcd60486a7", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/ffd2331c609c091ced102ebbcadfdfdcd60486a7", "committedDate": "2020-09-07T09:22:41Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2a88a9fb3101b627564e69486164c4dc94637bf", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/a2a88a9fb3101b627564e69486164c4dc94637bf", "committedDate": "2020-09-07T09:34:46Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ffd2331c609c091ced102ebbcadfdfdcd60486a7", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/ffd2331c609c091ced102ebbcadfdfdcd60486a7", "committedDate": "2020-09-07T09:22:41Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}, "afterCommit": {"oid": "a2a88a9fb3101b627564e69486164c4dc94637bf", "author": {"user": {"login": "pruivo", "name": "Pedro Ruivo"}}, "url": "https://github.com/infinispan/infinispan/commit/a2a88a9fb3101b627564e69486164c4dc94637bf", "committedDate": "2020-09-07T09:34:46Z", "message": "ISPN-11802 Create SPI for Cross-Site Replication conflict resolution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NDgwNjY0", "url": "https://github.com/infinispan/infinispan/pull/8332#pullrequestreview-476480664", "createdAt": "2020-08-27T08:05:26Z", "commit": {"oid": "e6baef6b49e246014db7e3dfa2f32844435e0fef"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODowNToyNlrOHIFC2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQwODoyNDo0NFrOIg6iHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIzMzMwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new IllegalStateException(); //should never be invoked.\n          \n          \n            \n                  throw new UnsupportedOperationException();", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r478233307", "createdAt": "2020-08-27T08:05:26Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/commands/irac/IracUpdateKeyCommand.java", "diffHunk": "@@ -23,26 +23,21 @@ protected IracUpdateKeyCommand(byte commandId, ByteString cacheName) {\n    @Override\n    public final CompletionStage<Void> performInLocalSite(BackupReceiver receiver, boolean preserveOrder) {\n       assert !preserveOrder : \"IRAC Update Command sent asynchronously!\";\n-      return receiver.forwardToPrimary(this);\n+      return executeOperation(receiver);\n    }\n \n-\n    @Override\n    public final CompletionStage<?> invokeAsync(ComponentRegistry registry) {\n-      return executeOperation(registry.getBackupReceiver().running());\n+      throw new IllegalStateException(); //should never be invoked.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6baef6b49e246014db7e3dfa2f32844435e0fef"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIzNDMzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * user's {@link XSiteEntryMergePolicy} installed. The value (and metadata) can change until the command reaches the end\n          \n          \n            \n             * user's {@link XSiteEntryMergePolicy}.\n          \n          \n            \n             * The value (and metadata) can change until the command reaches the end", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r478234338", "createdAt": "2020-08-27T08:07:20Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/commands/write/IracPutKeyValueCommand.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.infinispan.commands.write;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.Objects;\n+\n+import org.infinispan.commands.CommandInvocationId;\n+import org.infinispan.commands.MetadataAwareCommand;\n+import org.infinispan.commands.Visitor;\n+import org.infinispan.commons.io.UnsignedNumeric;\n+import org.infinispan.context.InvocationContext;\n+import org.infinispan.context.impl.FlagBitSets;\n+import org.infinispan.interceptors.AsyncInterceptorChain;\n+import org.infinispan.interceptors.impl.CallInterceptor;\n+import org.infinispan.metadata.Metadata;\n+import org.infinispan.metadata.impl.PrivateMetadata;\n+import org.infinispan.xsite.spi.SiteEntry;\n+import org.infinispan.xsite.spi.XSiteEntryMergePolicy;\n+\n+/**\n+ * A {@link WriteCommand} used to handle updates from the remote site (for asynchronous cross-site replication).\n+ * <p>\n+ * Asynchronous cross-site replication may originate conflicts and this command allows to change its value based on the\n+ * user's {@link XSiteEntryMergePolicy} installed. The value (and metadata) can change until the command reaches the end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6baef6b49e246014db7e3dfa2f32844435e0fef"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ5NjAxNg==", "bodyText": "Are any of the other IRAC commands transactional? Should IRAC even support transactional caches?", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r478496016", "createdAt": "2020-08-27T15:14:12Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/commands/write/IracPutKeyValueCommand.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package org.infinispan.commands.write;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.Objects;\n+\n+import org.infinispan.commands.CommandInvocationId;\n+import org.infinispan.commands.MetadataAwareCommand;\n+import org.infinispan.commands.Visitor;\n+import org.infinispan.commons.io.UnsignedNumeric;\n+import org.infinispan.context.InvocationContext;\n+import org.infinispan.context.impl.FlagBitSets;\n+import org.infinispan.interceptors.AsyncInterceptorChain;\n+import org.infinispan.interceptors.impl.CallInterceptor;\n+import org.infinispan.metadata.Metadata;\n+import org.infinispan.metadata.impl.PrivateMetadata;\n+import org.infinispan.xsite.spi.SiteEntry;\n+import org.infinispan.xsite.spi.XSiteEntryMergePolicy;\n+\n+/**\n+ * A {@link WriteCommand} used to handle updates from the remote site (for asynchronous cross-site replication).\n+ * <p>\n+ * Asynchronous cross-site replication may originate conflicts and this command allows to change its value based on the\n+ * user's {@link XSiteEntryMergePolicy} installed. The value (and metadata) can change until the command reaches the end\n+ * of the {@link AsyncInterceptorChain}, where the {@link CallInterceptor} checks its state and updates or removes the\n+ * key.\n+ * <p>\n+ * Note, this command is non-transactional, even for transactional caches. This simplifies the conflict resolution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6baef6b49e246014db7e3dfa2f32844435e0fef"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTAzNDkwOA==", "bodyText": "ThreadLocalRandom is better", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r571034908", "createdAt": "2021-02-05T15:08:59Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/test/TestingUtil.java", "diffHunk": "@@ -1443,7 +1443,10 @@ public static void checkMBeanOperationParameterNaming(MBeanServer mBeanServer, O\n    }\n \n    public static String generateRandomString(int numberOfChars) {\n-      Random r = new Random(System.currentTimeMillis());\n+      return generateRandomString(numberOfChars, new Random(System.currentTimeMillis()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a88a9fb3101b627564e69486164c4dc94637bf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTM4Mjc3MQ==", "bodyText": "This test seems a bit over-engineered to me:\n\nThe Sync class could have been just a method merge(XSiteEntryMergePolicy, SiteEntry, SiteEntry)\nThe data providers could have been inlined, calling doTest() with the parameters explicitly instead of wrapping them in an Object[][] first.\nEach method has its own data provider, so reuse is not a factor.", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r571382771", "createdAt": "2021-02-06T08:07:38Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/xsite/XSiteMergePolicyUnitTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.infinispan.xsite;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+\n+import java.util.Random;\n+\n+import org.infinispan.test.AbstractInfinispanTest;\n+import org.infinispan.test.TestingUtil;\n+import org.infinispan.util.concurrent.CompletionStages;\n+import org.infinispan.xsite.spi.AlwaysRemoveXSiteEntryMergePolicy;\n+import org.infinispan.xsite.spi.DefaultXSiteEntryMergePolicy;\n+import org.infinispan.xsite.spi.PreferNonNullXSiteEntryMergePolicy;\n+import org.infinispan.xsite.spi.PreferNullXSiteEntryMergePolicy;\n+import org.infinispan.xsite.spi.SiteEntry;\n+import org.infinispan.xsite.spi.XSiteEntryMergePolicy;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Unit test for all provided {@link XSiteEntryMergePolicy}.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 12.0\n+ */\n+@Test(groups = \"unit\", testName = \"xsite.XSiteMergePolicyUnitTest\")\n+public class XSiteMergePolicyUnitTest extends AbstractInfinispanTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a88a9fb3101b627564e69486164c4dc94637bf"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTM4MzE4NQ==", "bodyText": "I didn't notice this when you first added ManualIracManager, but the comment would be much easier to understand (or maybe not even needed) if you called the method disableXSite() instead of enable().", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r571383185", "createdAt": "2021-02-06T08:11:04Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/xsite/irac/IracAlwaysRemoveConflictTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.infinispan.xsite.irac;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.BackupConfiguration;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+import org.infinispan.test.TestDataSCI;\n+import org.infinispan.test.TestingUtil;\n+import org.infinispan.util.TestOperation;\n+import org.infinispan.xsite.AbstractMultipleSitesTest;\n+import org.infinispan.xsite.spi.AlwaysRemoveXSiteEntryMergePolicy;\n+import org.infinispan.xsite.spi.XSiteMergePolicy;\n+import org.testng.AssertJUnit;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Function test for {@link AlwaysRemoveXSiteEntryMergePolicy}.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 12.0\n+ */\n+@Test(groups = \"functional\", testName = \"xsite.irac.IracAlwaysRemoveConflictTest\")\n+public class IracAlwaysRemoveConflictTest extends AbstractMultipleSitesTest {\n+   private static final int N_SITES = 2;\n+   private static final int CLUSTER_SIZE = 3;\n+   private final List<ManualIracManager> iracManagerList;\n+\n+   protected IracAlwaysRemoveConflictTest() {\n+      this.iracManagerList = new ArrayList<>(N_SITES * CLUSTER_SIZE);\n+   }\n+\n+   public void testPutIfAbsent(Method method) {\n+      doTest(method, TestOperation.PUT_IF_ABSENT);\n+   }\n+\n+   public void testPut(Method method) {\n+      doTest(method, TestOperation.PUT);\n+   }\n+\n+   public void testReplace(Method method) {\n+      doTest(method, TestOperation.REPLACE);\n+   }\n+\n+   public void testConditionalReplace(Method method) {\n+      doTest(method, TestOperation.REPLACE_CONDITIONAL);\n+   }\n+\n+   public void testRemove(Method method) {\n+      doTest(method, TestOperation.REMOVE);\n+   }\n+\n+   public void testConditionalRemove(Method method) {\n+      doTest(method, TestOperation.REMOVE_CONDITIONAL);\n+   }\n+\n+   @Override\n+   protected int defaultNumberOfSites() {\n+      return N_SITES;\n+   }\n+\n+   @Override\n+   protected int defaultNumberOfNodes() {\n+      return CLUSTER_SIZE;\n+   }\n+\n+   @Override\n+   protected ConfigurationBuilder defaultConfigurationForSite(int siteIndex) {\n+      ConfigurationBuilder builder = getDefaultClusteredCacheConfig(CacheMode.DIST_SYNC);\n+      builder.sites().mergePolicy(XSiteMergePolicy.ALWAYS_REMOVE);\n+      for (int i = 0; i < N_SITES; ++i) {\n+         if (i == siteIndex) {\n+            //don't add our site as backup.\n+            continue;\n+         }\n+         builder.sites()\n+               .addBackup()\n+               .site(siteName(i))\n+               .strategy(BackupConfiguration.BackupStrategy.ASYNC);\n+      }\n+      return builder;\n+   }\n+\n+   @Override\n+   protected GlobalConfigurationBuilder defaultGlobalConfigurationForSite(int siteIndex) {\n+      GlobalConfigurationBuilder builder = GlobalConfigurationBuilder.defaultClusteredBuilder();\n+      builder.serialization().addContextInitializer(TestDataSCI.INSTANCE);\n+      return builder;\n+   }\n+\n+   @AfterMethod(alwaysRun = true)\n+   @Override\n+   protected void clearContent() throws Throwable {\n+      iracManagerList.forEach(iracManager -> iracManager.disable(ManualIracManager.DisableMode.DROP));\n+      super.clearContent();\n+   }\n+\n+   @Override\n+   protected void afterSitesCreated() {\n+      for (int i = 0; i < N_SITES; ++i) {\n+         for (Cache<?, ?> cache : caches(siteName(i))) {\n+            iracManagerList.add(ManualIracManager.wrapCache(cache));\n+         }\n+      }\n+   }\n+\n+   private void doTest(Method method, TestOperation testConfig) {\n+      final String key = TestingUtil.k(method, 0);\n+      final String initialValue = testConfig.requiresPreviousValue() ? TestingUtil.v(method, 0) : null;\n+\n+      //init cache if needed!\n+      if (testConfig.requiresPreviousValue()) {\n+         cache(siteName(0), 0).put(key, initialValue);\n+      }\n+      eventuallyAssertInAllSitesAndCaches(cache -> Objects.equals(initialValue, cache.get(key)));\n+\n+      //disable xsite so each site won't send anything to the others\n+      iracManagerList.forEach(ManualIracManager::enable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a88a9fb3101b627564e69486164c4dc94637bf"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTM4NDM0OA==", "bodyText": "I think using \"Custom\" here to refer to all merge policies is confusing, because we usually write \"custom\" when users are implementing an interface themselves.", "url": "https://github.com/infinispan/infinispan/pull/8332#discussion_r571384348", "createdAt": "2021-02-06T08:24:44Z", "author": {"login": "danberindei"}, "path": "documentation/src/main/asciidoc/topics/con_xsite_concurrent_writes.adoc", "diffHunk": "@@ -56,6 +60,31 @@ Prepend site names with numbers as a simple way to represent the order of\n priority for resolving conflicting entries; for example, **1LON** and **2NYC**.\n ====\n \n+== Custom Conflict Resolution", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2a88a9fb3101b627564e69486164c4dc94637bf"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 789, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}