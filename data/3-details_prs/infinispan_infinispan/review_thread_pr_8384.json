{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNjA3MDM0", "number": 8384, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDozNjo1MFrOD_nfug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDo0Mzo0OVrOD_noTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDMzOTc4OnYy", "diffSide": "RIGHT", "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/EncoderIds.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDozNjo1MFrOGaYcsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNTo0MTowMlrOGe2iig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxNjcyMg==", "bodyText": "Please create a sub-task on https://issues.redhat.com/browse/ISPN-11691 so that the removal isn't missed and add to the javadocs.", "url": "https://github.com/infinispan/infinispan/pull/8384#discussion_r430316722", "createdAt": "2020-05-26T10:36:50Z", "author": {"login": "ryanemerson"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/EncoderIds.java", "diffHunk": "@@ -8,7 +8,19 @@\n    short IDENTITY = 1;\n    short BINARY = 2;\n    short UTF8 = 3;\n+   /**\n+    * @deprecated Since 11.0, will be removed in 14.0. Set the storage media type and use transcoding instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e47fd846bf4e5fe21cb4afcbd6b63686a21cf6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NTA5Mg==", "bodyText": "@ryanemerson IMO it's too early to create those tasks, we can always run a script to find the classes/methods that were deprecated in 11.0.", "url": "https://github.com/infinispan/infinispan/pull/8384#discussion_r432385092", "createdAt": "2020-05-29T10:04:36Z", "author": {"login": "danberindei"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/EncoderIds.java", "diffHunk": "@@ -8,7 +8,19 @@\n    short IDENTITY = 1;\n    short BINARY = 2;\n    short UTF8 = 3;\n+   /**\n+    * @deprecated Since 11.0, will be removed in 14.0. Set the storage media type and use transcoding instead.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxNjcyMg=="}, "originalCommit": {"oid": "66e47fd846bf4e5fe21cb4afcbd6b63686a21cf6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwNDA0Mg==", "bodyText": "I created ISPN-11962", "url": "https://github.com/infinispan/infinispan/pull/8384#discussion_r435004042", "createdAt": "2020-06-04T05:41:02Z", "author": {"login": "danberindei"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/EncoderIds.java", "diffHunk": "@@ -8,7 +8,19 @@\n    short IDENTITY = 1;\n    short BINARY = 2;\n    short UTF8 = 3;\n+   /**\n+    * @deprecated Since 11.0, will be removed in 14.0. Set the storage media type and use transcoding instead.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxNjcyMg=="}, "originalCommit": {"oid": "66e47fd846bf4e5fe21cb4afcbd6b63686a21cf6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDM2MTczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/factories/EncoderRegistryFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDo0Mzo0OVrOGaYqlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToyMTo0MlrOGeTdAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyMDI3OA==", "bodyText": "This will only be possible whilst the GlobalMarshaller still exists in it's current format. Once the protostream global marshaller finally lands (12 \ud83e\udd1e) we won't have the externalizers or the marshaller code.", "url": "https://github.com/infinispan/infinispan/pull/8384#discussion_r430320278", "createdAt": "2020-05-26T10:43:49Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/factories/EncoderRegistryFactory.java", "diffHunk": "@@ -64,6 +65,7 @@ public Object construct(String componentName) {\n       encoderRegistry.registerTranscoder(new ProtostreamTranscoder(ctxRegistry, classLoader));\n       encoderRegistry.registerTranscoder(new JavaSerializationTranscoder(classWhiteList));\n       // Wraps the GlobalMarshaller so that it can be used as a transcoder\n+      // Keeps application/x-infinispan-marshalling available for backwards compatibility\n       encoderRegistry.registerTranscoder(new TranscoderMarshallerAdapter(globalMarshaller.wired()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f2a434c24b99480c2922780ac6f3b683ea44bef"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NjA3Nw==", "bodyText": "IDK, I only deprecated application/x-infinispan-marshalling in this PR, so we may have to keep the externalizers for a while longer", "url": "https://github.com/infinispan/infinispan/pull/8384#discussion_r432386077", "createdAt": "2020-05-29T10:06:39Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/EncoderRegistryFactory.java", "diffHunk": "@@ -64,6 +65,7 @@ public Object construct(String componentName) {\n       encoderRegistry.registerTranscoder(new ProtostreamTranscoder(ctxRegistry, classLoader));\n       encoderRegistry.registerTranscoder(new JavaSerializationTranscoder(classWhiteList));\n       // Wraps the GlobalMarshaller so that it can be used as a transcoder\n+      // Keeps application/x-infinispan-marshalling available for backwards compatibility\n       encoderRegistry.registerTranscoder(new TranscoderMarshallerAdapter(globalMarshaller.wired()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyMDI3OA=="}, "originalCommit": {"oid": "4f2a434c24b99480c2922780ac6f3b683ea44bef"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMDEyNA==", "bodyText": "In order to maintain application/x-infinispan-marshalling bytes compatiblity we would also have to keep the current GlobalMarshaller implementation, as well as the externalizers. As we haven't provided guarantess for wire compatibility, I think this has an unacceptable maintenance cost.", "url": "https://github.com/infinispan/infinispan/pull/8384#discussion_r432400124", "createdAt": "2020-05-29T10:36:50Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/factories/EncoderRegistryFactory.java", "diffHunk": "@@ -64,6 +65,7 @@ public Object construct(String componentName) {\n       encoderRegistry.registerTranscoder(new ProtostreamTranscoder(ctxRegistry, classLoader));\n       encoderRegistry.registerTranscoder(new JavaSerializationTranscoder(classWhiteList));\n       // Wraps the GlobalMarshaller so that it can be used as a transcoder\n+      // Keeps application/x-infinispan-marshalling available for backwards compatibility\n       encoderRegistry.registerTranscoder(new TranscoderMarshallerAdapter(globalMarshaller.wired()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyMDI3OA=="}, "originalCommit": {"oid": "4f2a434c24b99480c2922780ac6f3b683ea44bef"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyOTE4NQ==", "bodyText": "I changed the deprecation comment for application/x-infinispan-marshalling to remove the 14.0 reference and say it'll be removed together with AdvancedExternalizer instead. I think this line needs to stay as is for now, though.", "url": "https://github.com/infinispan/infinispan/pull/8384#discussion_r434429185", "createdAt": "2020-06-03T09:21:42Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/EncoderRegistryFactory.java", "diffHunk": "@@ -64,6 +65,7 @@ public Object construct(String componentName) {\n       encoderRegistry.registerTranscoder(new ProtostreamTranscoder(ctxRegistry, classLoader));\n       encoderRegistry.registerTranscoder(new JavaSerializationTranscoder(classWhiteList));\n       // Wraps the GlobalMarshaller so that it can be used as a transcoder\n+      // Keeps application/x-infinispan-marshalling available for backwards compatibility\n       encoderRegistry.registerTranscoder(new TranscoderMarshallerAdapter(globalMarshaller.wired()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyMDI3OA=="}, "originalCommit": {"oid": "4f2a434c24b99480c2922780ac6f3b683ea44bef"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4111, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}