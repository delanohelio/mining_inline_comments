{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MzQ0MDU1", "number": 8113, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMTo1MjowMlrODvhnVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODozNjo1NlrODwT07A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTYwNDA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/functional/AbstractWriteManyCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMTo1MjowMlrOGB_5ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTo0NjowMFrOGCKCFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0ODY1MA==", "bodyText": "Can we use an immutable empty list here?", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r404748650", "createdAt": "2020-04-07T11:52:02Z", "author": {"login": "johnou"}, "path": "core/src/main/java/org/infinispan/commands/functional/AbstractWriteManyCommand.java", "diffHunk": "@@ -30,13 +35,15 @@ protected AbstractWriteManyCommand(CommandInvocationId commandInvocationId,\n       this.flags = params.toFlagsBitSet();\n       this.keyDataConversion = keyDataConversion;\n       this.valueDataConversion = valueDataConversion;\n+      this.internalMetadataMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d1bd6936899a842cd82357ec1dc3e8aab62194"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxNDcwOA==", "bodyText": "no, otherwise I will get an UnsupportedException when I try to put metadata there.\nIt can be null but then I will have to put some null checks before get/put and do a proper synchronization around it. I would rather not do it.", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r404914708", "createdAt": "2020-04-07T15:46:00Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/commands/functional/AbstractWriteManyCommand.java", "diffHunk": "@@ -30,13 +35,15 @@ protected AbstractWriteManyCommand(CommandInvocationId commandInvocationId,\n       this.flags = params.toFlagsBitSet();\n       this.keyDataConversion = keyDataConversion;\n       this.valueDataConversion = valueDataConversion;\n+      this.internalMetadataMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0ODY1MA=="}, "originalCommit": {"oid": "38d1bd6936899a842cd82357ec1dc3e8aab62194"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTg2MjI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/functional/AbstractWriteManyCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzowMDo0NFrOGCCX1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTo0MjoyN1rOGCJ3iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4OTIwNQ==", "bodyText": "Is there no way we can trim this somehow... a ConcurrentHashMap for every functional command is a lot of bloat. Why not just 1 like we did with the other metadata?", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r404789205", "createdAt": "2020-04-07T13:00:44Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/commands/functional/AbstractWriteManyCommand.java", "diffHunk": "@@ -20,6 +24,7 @@\n    long flags;\n    DataConversion keyDataConversion;\n    DataConversion valueDataConversion;\n+   Map<Object, MetaParamsInternalMetadata> internalMetadataMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d1bd6936899a842cd82357ec1dc3e8aab62194"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxMjAxMQ==", "bodyText": "The internal metadata is stored per key. Each key will have a different version.", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r404912011", "createdAt": "2020-04-07T15:42:27Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/commands/functional/AbstractWriteManyCommand.java", "diffHunk": "@@ -20,6 +24,7 @@\n    long flags;\n    DataConversion keyDataConversion;\n    DataConversion valueDataConversion;\n+   Map<Object, MetaParamsInternalMetadata> internalMetadataMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4OTIwNQ=="}, "originalCommit": {"oid": "38d1bd6936899a842cd82357ec1dc3e8aab62194"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTkwNjIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/factories/InterceptorChainFactory.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzoxMTozMVrOGCCzWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzo0MzoyMFrOGCO-DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5NjI0OQ==", "bodyText": "Is this still meant to be commented?\nIf we're removing this, should it be a separate commit/Jira?", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r404796249", "createdAt": "2020-04-07T13:11:31Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/factories/InterceptorChainFactory.java", "diffHunk": "@@ -125,9 +124,10 @@ private AsyncInterceptorChain buildInterceptorChain() {\n       }\n       interceptorChain.appendInterceptor(createInterceptor(new InvocationContextInterceptor(), InvocationContextInterceptor.class), false);\n \n-      if (!configuration.transaction().transactionMode().isTransactional()) {\n-         interceptorChain.appendInterceptor(createInterceptor(new VersionInterceptor(), VersionInterceptor.class), false);\n-      }\n+      //TODO! why adding version for replace?\n+      //if (!configuration.transaction().transactionMode().isTransactional()) {\n+      //   interceptorChain.appendInterceptor(createInterceptor(new VersionInterceptor(), VersionInterceptor.class), false);\n+      //}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d1bd6936899a842cd82357ec1dc3e8aab62194"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwNjQwMQ==", "bodyText": "I forgot to ask @gustavonalle about it. Is the VersionInterceptor still needed?\nIt sets some version for the replace commands and I didn't find any usage of that version.\nIt breaks the xsite tests if non-tx cache (on site 1) backups to a tx cache (on site 2).", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r404906401", "createdAt": "2020-04-07T15:35:14Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/factories/InterceptorChainFactory.java", "diffHunk": "@@ -125,9 +124,10 @@ private AsyncInterceptorChain buildInterceptorChain() {\n       }\n       interceptorChain.appendInterceptor(createInterceptor(new InvocationContextInterceptor(), InvocationContextInterceptor.class), false);\n \n-      if (!configuration.transaction().transactionMode().isTransactional()) {\n-         interceptorChain.appendInterceptor(createInterceptor(new VersionInterceptor(), VersionInterceptor.class), false);\n-      }\n+      //TODO! why adding version for replace?\n+      //if (!configuration.transaction().transactionMode().isTransactional()) {\n+      //   interceptorChain.appendInterceptor(createInterceptor(new VersionInterceptor(), VersionInterceptor.class), false);\n+      //}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5NjI0OQ=="}, "originalCommit": {"oid": "38d1bd6936899a842cd82357ec1dc3e8aab62194"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyOTkzMQ==", "bodyText": "I am not sure TBH. This is a relic from the compat mode times", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r404929931", "createdAt": "2020-04-07T16:05:59Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/factories/InterceptorChainFactory.java", "diffHunk": "@@ -125,9 +124,10 @@ private AsyncInterceptorChain buildInterceptorChain() {\n       }\n       interceptorChain.appendInterceptor(createInterceptor(new InvocationContextInterceptor(), InvocationContextInterceptor.class), false);\n \n-      if (!configuration.transaction().transactionMode().isTransactional()) {\n-         interceptorChain.appendInterceptor(createInterceptor(new VersionInterceptor(), VersionInterceptor.class), false);\n-      }\n+      //TODO! why adding version for replace?\n+      //if (!configuration.transaction().transactionMode().isTransactional()) {\n+      //   interceptorChain.appendInterceptor(createInterceptor(new VersionInterceptor(), VersionInterceptor.class), false);\n+      //}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5NjI0OQ=="}, "originalCommit": {"oid": "38d1bd6936899a842cd82357ec1dc3e8aab62194"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5NTU5Ng==", "bodyText": "oh... I found a failure... EmbeddedRestMemcachedHotRodTest fails without it.\nI need to drop the version in the receiver site... bah...", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r404995596", "createdAt": "2020-04-07T17:43:20Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/factories/InterceptorChainFactory.java", "diffHunk": "@@ -125,9 +124,10 @@ private AsyncInterceptorChain buildInterceptorChain() {\n       }\n       interceptorChain.appendInterceptor(createInterceptor(new InvocationContextInterceptor(), InvocationContextInterceptor.class), false);\n \n-      if (!configuration.transaction().transactionMode().isTransactional()) {\n-         interceptorChain.appendInterceptor(createInterceptor(new VersionInterceptor(), VersionInterceptor.class), false);\n-      }\n+      //TODO! why adding version for replace?\n+      //if (!configuration.transaction().transactionMode().isTransactional()) {\n+      //   interceptorChain.appendInterceptor(createInterceptor(new VersionInterceptor(), VersionInterceptor.class), false);\n+      //}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5NjI0OQ=="}, "originalCommit": {"oid": "38d1bd6936899a842cd82357ec1dc3e8aab62194"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTk2NjUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/statetransfer/StateConsumerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzoyNDo1MFrOGCDYLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTo0MDozMVrOGCJxzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgwNTY3OQ==", "bodyText": "We should add MetaParamsInternalMetadata to CommandsFactory#buildPutKeyValueCommand.\nSimilarly, I noticed that the internal metadata is not  set in ProtobufMetadataManagerInterceptor. How are internal commands handled by xsite, should this be set there as well?", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r404805679", "createdAt": "2020-04-07T13:24:50Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/statetransfer/StateConsumerImpl.java", "diffHunk": "@@ -733,6 +733,7 @@ protected IntSet getOwnedSegments(ConsistentHash consistentHash) {\n       InternalMetadataImpl metadata = new InternalMetadataImpl(e);\n       PutKeyValueCommand put = commandsFactory.buildPutKeyValueCommand(e.getKey(), e.getValue(), segmentId,\n                                                                        metadata, STATE_TRANSFER_FLAGS);\n+      put.setInternalMetadata(e.getInternalMetadata());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d1bd6936899a842cd82357ec1dc3e8aab62194"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxMDU0MA==", "bodyText": "We should add MetaParamsInternalMetadata to CommandsFactory#buildPutKeyValueCommand.\n\nI didn't add it because I want to try to avoid touching too much interface... it would require a lot of changes everywhere and most of the places, the value is null.\n\nSimilarly, I noticed that the internal metadata is not set in ProtobufMetadataManagerInterceptor.\nIs it needed? and set it to what exactly? (sorry, no idea what ProtobufMetadataManagerInterceptor is)\n\nThe current xsite impl doesn't use it.\nIn the new one, the internal metadata is set by the primary owner before replicating it to the backup owners.\nIt is also used by the state transfer so the joiners can set the correct versions.", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r404910540", "createdAt": "2020-04-07T15:40:31Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/statetransfer/StateConsumerImpl.java", "diffHunk": "@@ -733,6 +733,7 @@ protected IntSet getOwnedSegments(ConsistentHash consistentHash) {\n       InternalMetadataImpl metadata = new InternalMetadataImpl(e);\n       PutKeyValueCommand put = commandsFactory.buildPutKeyValueCommand(e.getKey(), e.getValue(), segmentId,\n                                                                        metadata, STATE_TRANSFER_FLAGS);\n+      put.setInternalMetadata(e.getInternalMetadata());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgwNTY3OQ=="}, "originalCommit": {"oid": "38d1bd6936899a842cd82357ec1dc3e8aab62194"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTk3MzUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/xsite/ClusteredCacheBackupReceiver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzoyNjozMFrOGCDc7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTo0MDo0N1rOGCJyjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgwNjg5Mg==", "bodyText": "Unless this method will be used more in follow up changes, this method seems unnecessary.", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r404806892", "createdAt": "2020-04-07T13:26:30Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/xsite/ClusteredCacheBackupReceiver.java", "diffHunk": "@@ -208,6 +207,10 @@ private XSiteStatePushCommand newStatePushCommand(List<XSiteState> stateList) {\n       return commandsFactory.buildXSiteStatePushCommand(stateList.toArray(new XSiteState[0]), 0);\n    }\n \n+   private ClusteringDependentLogic getClusteringDependentLogic() {\n+      return cache.getComponentRegistry().getComponent(ClusteringDependentLogic.class);\n+   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d1bd6936899a842cd82357ec1dc3e8aab62194"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxMDczMg==", "bodyText": "I can remove it. It isn't used yet...", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r404910732", "createdAt": "2020-04-07T15:40:47Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/xsite/ClusteredCacheBackupReceiver.java", "diffHunk": "@@ -208,6 +207,10 @@ private XSiteStatePushCommand newStatePushCommand(List<XSiteState> stateList) {\n       return commandsFactory.buildXSiteStatePushCommand(stateList.toArray(new XSiteState[0]), 0);\n    }\n \n+   private ClusteringDependentLogic getClusteringDependentLogic() {\n+      return cache.getComponentRegistry().getComponent(ClusteringDependentLogic.class);\n+   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgwNjg5Mg=="}, "originalCommit": {"oid": "38d1bd6936899a842cd82357ec1dc3e8aab62194"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTgyOTEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/remoting/responses/PrepareResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODozNjoyNlrOGDPDiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOToyMzo1MlrOGDQvAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0NTU3Nw==", "bodyText": "Unnecessary override of isValid, it's the same as ValidResponse impl.", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r406045577", "createdAt": "2020-04-09T08:36:26Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/remoting/responses/PrepareResponse.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package org.infinispan.remoting.responses;\n+\n+import static org.infinispan.commons.marshall.MarshallUtil.marshallMap;\n+import static org.infinispan.commons.marshall.MarshallUtil.unmarshallMap;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.infinispan.commons.marshall.AbstractExternalizer;\n+import org.infinispan.container.versioning.IncrementableEntryVersion;\n+import org.infinispan.marshall.core.Ids;\n+import org.infinispan.transaction.impl.WriteSkewHelper;\n+\n+/**\n+ * A {@link ValidResponse} used by Optimistic Transactions.\n+ * <p>\n+ * It contains the new {@link IncrementableEntryVersion} for each key updated.\n+ * <p>\n+ * To be extended in the future.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 11.0\n+ */\n+public class PrepareResponse extends ValidResponse {\n+\n+   public static final Externalizer EXTERNALIZER = new Externalizer();\n+\n+   private Map<Object, IncrementableEntryVersion> newWriteSkewVersions;\n+\n+   public static void writeTo(PrepareResponse response, ObjectOutput output) throws IOException {\n+      marshallMap(response.newWriteSkewVersions, output);\n+   }\n+\n+   public static PrepareResponse readFrom(ObjectInput input) throws IOException, ClassNotFoundException {\n+      PrepareResponse response = new PrepareResponse();\n+      response.newWriteSkewVersions = unmarshallMap(input, HashMap::new);\n+      return response;\n+   }\n+\n+   public static PrepareResponse asPrepareResponse(Object rv) {\n+      assert rv == null || rv instanceof PrepareResponse;\n+      return rv == null ? new PrepareResponse() : (PrepareResponse) rv;\n+   }\n+\n+   @Override\n+   public boolean isSuccessful() {\n+      return true;\n+   }\n+\n+   @Override\n+   public boolean isValid() {\n+      return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c577dd6cf42a84b93281b8464b43a9535aae8b56"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3MzA5MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r406073091", "createdAt": "2020-04-09T09:23:52Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/remoting/responses/PrepareResponse.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package org.infinispan.remoting.responses;\n+\n+import static org.infinispan.commons.marshall.MarshallUtil.marshallMap;\n+import static org.infinispan.commons.marshall.MarshallUtil.unmarshallMap;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.infinispan.commons.marshall.AbstractExternalizer;\n+import org.infinispan.container.versioning.IncrementableEntryVersion;\n+import org.infinispan.marshall.core.Ids;\n+import org.infinispan.transaction.impl.WriteSkewHelper;\n+\n+/**\n+ * A {@link ValidResponse} used by Optimistic Transactions.\n+ * <p>\n+ * It contains the new {@link IncrementableEntryVersion} for each key updated.\n+ * <p>\n+ * To be extended in the future.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 11.0\n+ */\n+public class PrepareResponse extends ValidResponse {\n+\n+   public static final Externalizer EXTERNALIZER = new Externalizer();\n+\n+   private Map<Object, IncrementableEntryVersion> newWriteSkewVersions;\n+\n+   public static void writeTo(PrepareResponse response, ObjectOutput output) throws IOException {\n+      marshallMap(response.newWriteSkewVersions, output);\n+   }\n+\n+   public static PrepareResponse readFrom(ObjectInput input) throws IOException, ClassNotFoundException {\n+      PrepareResponse response = new PrepareResponse();\n+      response.newWriteSkewVersions = unmarshallMap(input, HashMap::new);\n+      return response;\n+   }\n+\n+   public static PrepareResponse asPrepareResponse(Object rv) {\n+      assert rv == null || rv instanceof PrepareResponse;\n+      return rv == null ? new PrepareResponse() : (PrepareResponse) rv;\n+   }\n+\n+   @Override\n+   public boolean isSuccessful() {\n+      return true;\n+   }\n+\n+   @Override\n+   public boolean isValid() {\n+      return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0NTU3Nw=="}, "originalCommit": {"oid": "c577dd6cf42a84b93281b8464b43a9535aae8b56"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTgzMDg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/remoting/responses/PrepareResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODozNjo1NlrOGDPEow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOToyNDoxNFrOGDQwAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0NTg1OQ==", "bodyText": "Should we throw new UnsupportedOperationException(); here the same as in UnsureResponse as it should never be called?", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r406045859", "createdAt": "2020-04-09T08:36:56Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/remoting/responses/PrepareResponse.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package org.infinispan.remoting.responses;\n+\n+import static org.infinispan.commons.marshall.MarshallUtil.marshallMap;\n+import static org.infinispan.commons.marshall.MarshallUtil.unmarshallMap;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.infinispan.commons.marshall.AbstractExternalizer;\n+import org.infinispan.container.versioning.IncrementableEntryVersion;\n+import org.infinispan.marshall.core.Ids;\n+import org.infinispan.transaction.impl.WriteSkewHelper;\n+\n+/**\n+ * A {@link ValidResponse} used by Optimistic Transactions.\n+ * <p>\n+ * It contains the new {@link IncrementableEntryVersion} for each key updated.\n+ * <p>\n+ * To be extended in the future.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 11.0\n+ */\n+public class PrepareResponse extends ValidResponse {\n+\n+   public static final Externalizer EXTERNALIZER = new Externalizer();\n+\n+   private Map<Object, IncrementableEntryVersion> newWriteSkewVersions;\n+\n+   public static void writeTo(PrepareResponse response, ObjectOutput output) throws IOException {\n+      marshallMap(response.newWriteSkewVersions, output);\n+   }\n+\n+   public static PrepareResponse readFrom(ObjectInput input) throws IOException, ClassNotFoundException {\n+      PrepareResponse response = new PrepareResponse();\n+      response.newWriteSkewVersions = unmarshallMap(input, HashMap::new);\n+      return response;\n+   }\n+\n+   public static PrepareResponse asPrepareResponse(Object rv) {\n+      assert rv == null || rv instanceof PrepareResponse;\n+      return rv == null ? new PrepareResponse() : (PrepareResponse) rv;\n+   }\n+\n+   @Override\n+   public boolean isSuccessful() {\n+      return true;\n+   }\n+\n+   @Override\n+   public boolean isValid() {\n+      return true;\n+   }\n+\n+   @Override\n+   public Object getResponseValue() {\n+      return null; //not used!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c577dd6cf42a84b93281b8464b43a9535aae8b56"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3MzM0NA==", "bodyText": "I can change it\n\ud83d\udc4d", "url": "https://github.com/infinispan/infinispan/pull/8113#discussion_r406073344", "createdAt": "2020-04-09T09:24:14Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/remoting/responses/PrepareResponse.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package org.infinispan.remoting.responses;\n+\n+import static org.infinispan.commons.marshall.MarshallUtil.marshallMap;\n+import static org.infinispan.commons.marshall.MarshallUtil.unmarshallMap;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.infinispan.commons.marshall.AbstractExternalizer;\n+import org.infinispan.container.versioning.IncrementableEntryVersion;\n+import org.infinispan.marshall.core.Ids;\n+import org.infinispan.transaction.impl.WriteSkewHelper;\n+\n+/**\n+ * A {@link ValidResponse} used by Optimistic Transactions.\n+ * <p>\n+ * It contains the new {@link IncrementableEntryVersion} for each key updated.\n+ * <p>\n+ * To be extended in the future.\n+ *\n+ * @author Pedro Ruivo\n+ * @since 11.0\n+ */\n+public class PrepareResponse extends ValidResponse {\n+\n+   public static final Externalizer EXTERNALIZER = new Externalizer();\n+\n+   private Map<Object, IncrementableEntryVersion> newWriteSkewVersions;\n+\n+   public static void writeTo(PrepareResponse response, ObjectOutput output) throws IOException {\n+      marshallMap(response.newWriteSkewVersions, output);\n+   }\n+\n+   public static PrepareResponse readFrom(ObjectInput input) throws IOException, ClassNotFoundException {\n+      PrepareResponse response = new PrepareResponse();\n+      response.newWriteSkewVersions = unmarshallMap(input, HashMap::new);\n+      return response;\n+   }\n+\n+   public static PrepareResponse asPrepareResponse(Object rv) {\n+      assert rv == null || rv instanceof PrepareResponse;\n+      return rv == null ? new PrepareResponse() : (PrepareResponse) rv;\n+   }\n+\n+   @Override\n+   public boolean isSuccessful() {\n+      return true;\n+   }\n+\n+   @Override\n+   public boolean isValid() {\n+      return true;\n+   }\n+\n+   @Override\n+   public Object getResponseValue() {\n+      return null; //not used!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0NTg1OQ=="}, "originalCommit": {"oid": "c577dd6cf42a84b93281b8464b43a9535aae8b56"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4361, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}