{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MjI4NzU3", "number": 8214, "title": "ISPN-11676 + ISPN-11642 Hot Rod client per-cache config and on-access cache creation + JCache Remote URI", "bodyText": "https://issues.redhat.com/browse/ISPN-11676\nHot Rod client per-cache configuration and on-access cache creation\nhttps://issues.redhat.com/browse/ISPN-11642\nJCache Remote: URI pointing to a hotrod-client.properties file should be used to supply configuration", "createdAt": "2020-04-17T16:28:22Z", "url": "https://github.com/infinispan/infinispan/pull/8214", "merged": true, "mergeCommit": {"oid": "afe7301c22e3b91fdbc5b04d1f70ede275f08478"}, "closed": true, "closedAt": "2020-04-21T16:28:04Z", "author": {"login": "tristantarrant"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZZNgVABqjMyNTAyODM0OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZ2RFBgFqTM5NzQ3MDMzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c3ebc852eadadf38d576b8ddd9ba0688fa7b1c9", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/0c3ebc852eadadf38d576b8ddd9ba0688fa7b1c9", "committedDate": "2020-04-17T16:26:19Z", "message": "ISPN-11642 Allow supplying hotrod-client.properties via URI in JCache remote"}, "afterCommit": {"oid": "3b6a421493c9d5e6bfbd601b06fcd5724d0f8522", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/3b6a421493c9d5e6bfbd601b06fcd5724d0f8522", "committedDate": "2020-04-20T06:36:21Z", "message": "ISPN-11642 Allow supplying hotrod-client.properties via URI in JCache remote"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b6a421493c9d5e6bfbd601b06fcd5724d0f8522", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/3b6a421493c9d5e6bfbd601b06fcd5724d0f8522", "committedDate": "2020-04-20T06:36:21Z", "message": "ISPN-11642 Allow supplying hotrod-client.properties via URI in JCache remote"}, "afterCommit": {"oid": "64561afb69902707b0e38e2dd5669adc064f5cfd", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/64561afb69902707b0e38e2dd5669adc064f5cfd", "committedDate": "2020-04-20T07:46:28Z", "message": "ISPN-11642 Allow supplying hotrod-client.properties via URI in JCache remote"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64561afb69902707b0e38e2dd5669adc064f5cfd", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/64561afb69902707b0e38e2dd5669adc064f5cfd", "committedDate": "2020-04-20T07:46:28Z", "message": "ISPN-11642 Allow supplying hotrod-client.properties via URI in JCache remote"}, "afterCommit": {"oid": "eaa29ee538597c2f94043d4b6d999625a1cac9aa", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/eaa29ee538597c2f94043d4b6d999625a1cac9aa", "committedDate": "2020-04-20T12:13:27Z", "message": "ISPN-11642 Allow supplying hotrod-client.properties via URI in JCache remote"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTg0OTg5", "url": "https://github.com/infinispan/infinispan/pull/8214#pullrequestreview-396584989", "createdAt": "2020-04-20T15:51:33Z", "commit": {"oid": "c34d52dbe1577c223fed6cb02922e1427803f01c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTo1MTozNFrOGIbYEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjowNjozNFrOGIcH3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5MDMyMA==", "bodyText": "espace", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r411490320", "createdAt": "2020-04-20T15:51:34Z", "author": {"login": "karesti"}, "path": "jcache/remote/src/main/java/org/infinispan/jcache/remote/JCacheManager.java", "diffHunk": "@@ -35,6 +36,14 @@\n    public JCacheManager(URI uri, ClassLoader classLoader, CachingProvider provider, Properties properties) {\n       super(uri, classLoader, provider, properties, false);\n \n+      try(InputStream is = uri.toURL().openStream()) {\n+\n+      } catch (MalformedURLException e) {\n+         // Ignore\n+      } catch (IOException e) {\n+         throw new RuntimeException(\"Could not load \"+uri, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34d52dbe1577c223fed6cb02922e1427803f01c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5MjIzNQ==", "bodyText": "I would add overloaded method with the template enum DefaultTemplate and String with parameter name templateName. Or at least use the DefaultTemplate enum for the example", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r411492235", "createdAt": "2020-04-20T15:53:57Z", "author": {"login": "karesti"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_hotrod_createonaccess.adoc", "diffHunk": "@@ -0,0 +1,21 @@\n+[id='hotrod_create_caches_on_access']\n+= Creating server caches on first access\n+\n+The normal behaviour of a Hot Rod Java client when attempting to access a non-existent cache is to return `null` from the `getCache(\"name\")` invocation.\n+It is possible to have the Hot Rod Java clients automatically create requested caches on the server on first access using either a specific template or a full configuration.\n+\n+[source,java]\n+----\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.client.hotrod.configuration.NearCacheMode;\n+...\n+\n+// Specify the server-side template or configuration to use\n+ConfigurationBuilder builder = new ConfigurationBuilder();\n+builder\n+  .remoteCache(\"my-cache\")\n+    .templateName(\"org.infinispan.DIST_SYNC\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34d52dbe1577c223fed6cb02922e1427803f01c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5NTQ3MA==", "bodyText": "what is Xor configuration ?", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r411495470", "createdAt": "2020-04-20T15:58:01Z", "author": {"login": "karesti"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/logging/Log.java", "diffHunk": "@@ -332,4 +332,7 @@\n \n    @Message(value = \"OAUTHBEARER mechanism selected without providing a token\", id = 4093)\n    CacheConfigurationException oauthBearerWithoutToken();\n+\n+   @Message(value = \"Cannot specify both template name and configuration for '%s'\", id = 4094)\n+   CacheConfigurationException remoteCacheTemplateNameXorConfiguration(String name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34d52dbe1577c223fed6cb02922e1427803f01c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5NjI0OA==", "bodyText": "I have troubles with my editor and code formatter right now. I don't further know if this is the good or the bad format", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r411496248", "createdAt": "2020-04-20T15:58:58Z", "author": {"login": "karesti"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/Util.java", "diffHunk": "@@ -28,20 +29,19 @@ public int getFormatId() {\n \n       @Override\n       public byte[] getGlobalTransactionId() {\n-         return new byte[] {1};\n+         return new byte[]{1};\n       }\n \n       @Override\n       public byte[] getBranchQualifier() {\n-         return new byte[] {1};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34d52dbe1577c223fed6cb02922e1427803f01c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5ODIzMw==", "bodyText": "Java doc", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r411498233", "createdAt": "2020-04-20T16:01:19Z", "author": {"login": "karesti"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/configuration/ConfigurationChildBuilder.java", "diffHunk": "@@ -222,6 +222,8 @@\n     */\n    TransactionConfigurationBuilder transaction();\n \n+   RemoteCacheConfigurationBuilder remoteCache(String name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34d52dbe1577c223fed6cb02922e1427803f01c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwMjU1Nw==", "bodyText": "instead if returning null and exception or logging that would explain better the issue ?", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r411502557", "createdAt": "2020-04-20T16:06:34Z", "author": {"login": "karesti"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCacheManager.java", "diffHunk": "@@ -427,52 +430,84 @@ private Properties loadFromStream(InputStream stream) {\n \n    private <K, V> RemoteCache<K, V> createRemoteCache(String cacheName, boolean forceReturnValueOverride,\n                                                       TransactionMode transactionModeOverride, TransactionManager transactionManagerOverride) {\n-      synchronized (cacheName2RemoteCache) {\n-         RemoteCacheKey key = new RemoteCacheKey(cacheName, forceReturnValueOverride);\n-         if (!cacheName2RemoteCache.containsKey(key)) {\n-            TransactionMode transactionMode = getTransactionMode(transactionModeOverride);\n-            RemoteCacheImpl<K, V> result;\n-            if (transactionMode == TransactionMode.NONE) {\n-               result = createRemoteCache(cacheName);\n-            } else {\n-               if (!this.isTransactional(cacheName)) {\n-                  throw HOTROD.cacheDoesNotSupportTransactions(cacheName);\n-               }\n-               TransactionManager transactionManager = getTransactionManager(transactionManagerOverride);\n-               result = createRemoteTransactionalCache(cacheName, forceReturnValueOverride,\n-                     transactionMode == TransactionMode.FULL_XA, transactionMode, transactionManager);\n-            }\n-            RemoteCacheHolder rcc = new RemoteCacheHolder(result, forceReturnValueOverride);\n-            startRemoteCache(rcc);\n+      RemoteCacheConfiguration cacheConfiguration = configuration.remoteCaches().get(cacheName);\n+      boolean forceReturnValue = forceReturnValueOverride ? true : (cacheConfiguration != null ? cacheConfiguration.forceReturnValues() : configuration.forceReturnValues());\n+      RemoteCacheKey key = new RemoteCacheKey(cacheName, forceReturnValue);\n+      if (cacheName2RemoteCache.containsKey(key)) {\n+         return cacheName2RemoteCache.get(key).remoteCache();\n+      }\n \n-            PingResponse pingResponse = result.resolveStorage();\n-            // If ping not successful assume that the cache does not exist\n-            if (pingResponse.isCacheNotFound()) {\n+      OperationsFactory operationsFactory = createOperationFactory(cacheName, forceReturnValue, codec, null);\n+      PingResponse pingResponse;\n+      if (started) {\n+         // Verify if the cache exists on the server first\n+         pingResponse = await(operationsFactory.newFaultTolerantPingOperation().execute());\n+\n+         // If ping not successful assume that the cache does not exist\n+         if (pingResponse.isCacheNotFound()) {\n+            // We may be able to create it. Don't use RemoteCacheAdmin for this, since it would end up calling this method again\n+            Map<String, byte[]> params = new HashMap<>(2);\n+            params.put(RemoteCacheManagerAdminImpl.CACHE_NAME, cacheName.getBytes(HotRodConstants.HOTROD_STRING_CHARSET));\n+            if (cacheConfiguration != null && cacheConfiguration.templateName() != null) {\n+               params.put(RemoteCacheManagerAdminImpl.CACHE_TEMPLATE, cacheConfiguration.templateName().getBytes(HotRodConstants.HOTROD_STRING_CHARSET));\n+            } else if (cacheConfiguration != null && cacheConfiguration.configuration() != null) {\n+               params.put(RemoteCacheManagerAdminImpl.CACHE_CONFIGURATION, new XMLStringConfiguration(cacheConfiguration.configuration()).toXMLString(cacheName).getBytes(HotRodConstants.HOTROD_STRING_CHARSET));\n+            } else {\n+               // We cannot create the cache\n                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34d52dbe1577c223fed6cb02922e1427803f01c"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29f2b168971037043ee1955f1ca3d3130ea8e2a1", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/29f2b168971037043ee1955f1ca3d3130ea8e2a1", "committedDate": "2020-04-21T09:48:35Z", "message": "ISPN-11676 Per-cache configuration for Hot Rod client\n\n* Add per-cache configuration to the Hot Rod client\n* On-access creation of caches using supplied template/configuration\n* Deprecated the near cache regex configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2feaad273ff230128aab95f464f786dbb300a2b", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/c2feaad273ff230128aab95f464f786dbb300a2b", "committedDate": "2020-04-21T09:48:35Z", "message": "ISPN-11642 Allow supplying hotrod-client.properties via URI in JCache remote"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eaa29ee538597c2f94043d4b6d999625a1cac9aa", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/eaa29ee538597c2f94043d4b6d999625a1cac9aa", "committedDate": "2020-04-20T12:13:27Z", "message": "ISPN-11642 Allow supplying hotrod-client.properties via URI in JCache remote"}, "afterCommit": {"oid": "c2feaad273ff230128aab95f464f786dbb300a2b", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/c2feaad273ff230128aab95f464f786dbb300a2b", "committedDate": "2020-04-21T09:48:35Z", "message": "ISPN-11642 Allow supplying hotrod-client.properties via URI in JCache remote"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDcwMzM0", "url": "https://github.com/infinispan/infinispan/pull/8214#pullrequestreview-397470334", "createdAt": "2020-04-21T16:27:43Z", "commit": {"oid": "c2feaad273ff230128aab95f464f786dbb300a2b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 875, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}