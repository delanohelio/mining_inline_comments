{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDkxOTM1", "number": 8173, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo0ODo1NVrODvHJwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjoyNToxOVrOD6suTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzI2ODQ4OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo0ODo1NVrOGBWFww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo0ODo1NVrOGBWFww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2MzY4Mw==", "bodyText": "java.* and javax.* first, please", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404063683", "createdAt": "2020-04-06T12:48:55Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "diffHunk": "@@ -1,10 +1,25 @@\n package org.infinispan.server.test.core;\n \n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ecb7881279b0dbcd12da1630aee158993181b6"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzI4MTA1OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/EmbeddedInfinispanServerDriver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo1MjoxMFrOGBWNOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo1MjoxMFrOGBWNOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NTU5NA==", "bodyText": "The sentence feels unfinished", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404065594", "createdAt": "2020-04-06T12:52:10Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/EmbeddedInfinispanServerDriver.java", "diffHunk": "@@ -61,9 +61,11 @@ protected void start(String name, File rootDir, String configurationFile) {\n          serverFutures.add(server.run());\n          servers.add(server);\n       }\n-      // Ensure that the cluster has formed\n+      // Ensure that the cluster has formed if more than one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ecb7881279b0dbcd12da1630aee158993181b6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTA1MTcyOnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToxNzo1MVrOGB6jog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo1MzozOFrOGDNipA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2MTE1NA==", "bodyText": "Please copy it to target/generated-sources/, so you don't have to add it to .gitignore\n@tristantarrant isn't there a way to use the default server configuration from server/runtime without copying it?", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404661154", "createdAt": "2020-04-07T09:17:51Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/pom.xml", "diffHunk": "@@ -68,5 +68,33 @@\n          <artifactId>spymemcached</artifactId>\n       </dependency>\n    </dependencies>\n+   <build>\n+      <plugins>\n+         <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-resources-plugin</artifactId>\n+            <executions>\n+               <execution>\n+                  <id>copy-server-config</id>\n+                  <phase>validate</phase>\n+                  <goals>\n+                     <goal>copy-resources</goal>\n+                  </goals>\n+                  <configuration>\n+                     <outputDirectory>${project.basedir}/src/main/resources</outputDirectory>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MjMyNw==", "bodyText": "We don't want to carry around any version of the server configuration in the testdriver-core module. CONTAINER mode would use the default configs present in the image and EMBEDDED mode should only be used by our own integration tests", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404852327", "createdAt": "2020-04-07T14:27:03Z", "author": {"login": "tristantarrant"}, "path": "server/testdriver/core/pom.xml", "diffHunk": "@@ -68,5 +68,33 @@\n          <artifactId>spymemcached</artifactId>\n       </dependency>\n    </dependencies>\n+   <build>\n+      <plugins>\n+         <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-resources-plugin</artifactId>\n+            <executions>\n+               <execution>\n+                  <id>copy-server-config</id>\n+                  <phase>validate</phase>\n+                  <goals>\n+                     <goal>copy-resources</goal>\n+                  </goals>\n+                  <configuration>\n+                     <outputDirectory>${project.basedir}/src/main/resources</outputDirectory>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2MTE1NA=="}, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMDc3Mg==", "bodyText": "ok", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r406020772", "createdAt": "2020-04-09T07:53:38Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/pom.xml", "diffHunk": "@@ -68,5 +68,33 @@\n          <artifactId>spymemcached</artifactId>\n       </dependency>\n    </dependencies>\n+   <build>\n+      <plugins>\n+         <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-resources-plugin</artifactId>\n+            <executions>\n+               <execution>\n+                  <id>copy-server-config</id>\n+                  <phase>validate</phase>\n+                  <goals>\n+                     <goal>copy-resources</goal>\n+                  </goals>\n+                  <configuration>\n+                     <outputDirectory>${project.basedir}/src/main/resources</outputDirectory>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2MTE1NA=="}, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTA3MTAyOnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToyMjo0N1rOGB6vkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo1Mzo0OVrOGDNjKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2NDIxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static final List<String> DEFAULT_INFINISPAN_CONFIG_FILES = Arrays.asList(\n          \n          \n            \n               private static final List<String> DEFAULT_INFINISPAN_CONFIG_FILES = \n          \n          \n            \n                     Arrays.asList(DEFAULT_CLUSTERED_INFINISPAN_CONFIG_FILE_NAME);", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404664210", "createdAt": "2020-04-07T09:22:47Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "diffHunk": "@@ -16,29 +31,21 @@\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n import java.util.Arrays;\n+import java.util.List;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.function.BiConsumer;\n import java.util.function.Consumer;\n \n-import javax.security.auth.x500.X500Principal;\n-\n-import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n-import org.infinispan.commons.test.CommonsTestingUtil;\n-import org.infinispan.commons.test.Exceptions;\n-import org.infinispan.commons.util.Util;\n-import org.infinispan.lifecycle.ComponentStatus;\n-import org.infinispan.security.AuthorizationPermission;\n-import org.infinispan.server.Server;\n-import org.infinispan.server.security.UserTool;\n-import org.wildfly.security.x500.cert.BasicConstraintsExtension;\n-import org.wildfly.security.x500.cert.SelfSignedX509CertificateAndSigningKey;\n-import org.wildfly.security.x500.cert.X509CertificateBuilder;\n-\n /**\n  * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n  * @since 10.0\n  **/\n public abstract class AbstractInfinispanServerDriver implements InfinispanServerDriver {\n+   public static final String DEFAULT_CLUSTERED_INFINISPAN_CONFIG_FILE_NAME = \"infinispan.xml\";\n+\n+   private static final List<String> DEFAULT_INFINISPAN_CONFIG_FILES = Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MzUwNw==", "bodyText": "I would not have a default configuration name specified. In CONTAINER mode we can simply start the server with no configuration and it will use the default infinispan.xml", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404853507", "createdAt": "2020-04-07T14:28:33Z", "author": {"login": "tristantarrant"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "diffHunk": "@@ -16,29 +31,21 @@\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n import java.util.Arrays;\n+import java.util.List;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.function.BiConsumer;\n import java.util.function.Consumer;\n \n-import javax.security.auth.x500.X500Principal;\n-\n-import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n-import org.infinispan.commons.test.CommonsTestingUtil;\n-import org.infinispan.commons.test.Exceptions;\n-import org.infinispan.commons.util.Util;\n-import org.infinispan.lifecycle.ComponentStatus;\n-import org.infinispan.security.AuthorizationPermission;\n-import org.infinispan.server.Server;\n-import org.infinispan.server.security.UserTool;\n-import org.wildfly.security.x500.cert.BasicConstraintsExtension;\n-import org.wildfly.security.x500.cert.SelfSignedX509CertificateAndSigningKey;\n-import org.wildfly.security.x500.cert.X509CertificateBuilder;\n-\n /**\n  * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n  * @since 10.0\n  **/\n public abstract class AbstractInfinispanServerDriver implements InfinispanServerDriver {\n+   public static final String DEFAULT_CLUSTERED_INFINISPAN_CONFIG_FILE_NAME = \"infinispan.xml\";\n+\n+   private static final List<String> DEFAULT_INFINISPAN_CONFIG_FILES = Arrays.asList(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2NDIxMA=="}, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMDkwNQ==", "bodyText": "oki", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r406020905", "createdAt": "2020-04-09T07:53:49Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "diffHunk": "@@ -16,29 +31,21 @@\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n import java.util.Arrays;\n+import java.util.List;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.function.BiConsumer;\n import java.util.function.Consumer;\n \n-import javax.security.auth.x500.X500Principal;\n-\n-import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n-import org.infinispan.commons.test.CommonsTestingUtil;\n-import org.infinispan.commons.test.Exceptions;\n-import org.infinispan.commons.util.Util;\n-import org.infinispan.lifecycle.ComponentStatus;\n-import org.infinispan.security.AuthorizationPermission;\n-import org.infinispan.server.Server;\n-import org.infinispan.server.security.UserTool;\n-import org.wildfly.security.x500.cert.BasicConstraintsExtension;\n-import org.wildfly.security.x500.cert.SelfSignedX509CertificateAndSigningKey;\n-import org.wildfly.security.x500.cert.X509CertificateBuilder;\n-\n /**\n  * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n  * @since 10.0\n  **/\n public abstract class AbstractInfinispanServerDriver implements InfinispanServerDriver {\n+   public static final String DEFAULT_CLUSTERED_INFINISPAN_CONFIG_FILE_NAME = \"infinispan.xml\";\n+\n+   private static final List<String> DEFAULT_INFINISPAN_CONFIG_FILES = Arrays.asList(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2NDIxMA=="}, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTA3OTU5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToyNDo1NlrOGB60_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxMzo0OFrOGCYEUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2NTU5Ng==", "bodyText": "Is this change really necessary?\n\"infinispan.xml\" is not an absolute path, so it would use the else branch, which looks exactly the same.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404665596", "createdAt": "2020-04-07T09:24:56Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "diffHunk": "@@ -84,22 +91,32 @@ public void prepare(String name) {\n          throw new RuntimeException(\"Failed to create server configuration directory \" + confDir);\n       }\n       URL configurationFileURL;\n-      if (new File(configuration.configurationFile()).isAbsolute()) {\n+      if (DEFAULT_INFINISPAN_CONFIG_FILES.contains(configuration.configurationFile())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4MDMwNw==", "bodyText": "it raises an exception", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404680307", "createdAt": "2020-04-07T09:48:32Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "diffHunk": "@@ -84,22 +91,32 @@ public void prepare(String name) {\n          throw new RuntimeException(\"Failed to create server configuration directory \" + confDir);\n       }\n       URL configurationFileURL;\n-      if (new File(configuration.configurationFile()).isAbsolute()) {\n+      if (DEFAULT_INFINISPAN_CONFIG_FILES.contains(configuration.configurationFile())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2NTU5Ng=="}, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg0OTM3NA==", "bodyText": "Are you sure? The code looks exactly the same to me.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404849374", "createdAt": "2020-04-07T14:23:24Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "diffHunk": "@@ -84,22 +91,32 @@ public void prepare(String name) {\n          throw new RuntimeException(\"Failed to create server configuration directory \" + confDir);\n       }\n       URL configurationFileURL;\n-      if (new File(configuration.configurationFile()).isAbsolute()) {\n+      if (DEFAULT_INFINISPAN_CONFIG_FILES.contains(configuration.configurationFile())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2NTU5Ng=="}, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1Nzg4Ng==", "bodyText": "new File(configuration.configurationFile()) -> raises exception for the file when it is in the jar", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404857886", "createdAt": "2020-04-07T14:34:18Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "diffHunk": "@@ -84,22 +91,32 @@ public void prepare(String name) {\n          throw new RuntimeException(\"Failed to create server configuration directory \" + confDir);\n       }\n       URL configurationFileURL;\n-      if (new File(configuration.configurationFile()).isAbsolute()) {\n+      if (DEFAULT_INFINISPAN_CONFIG_FILES.contains(configuration.configurationFile())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2NTU5Ng=="}, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1ODA4OA==", "bodyText": "but the code can be refactored for sure to avoid duplication", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404858088", "createdAt": "2020-04-07T14:34:36Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "diffHunk": "@@ -84,22 +91,32 @@ public void prepare(String name) {\n          throw new RuntimeException(\"Failed to create server configuration directory \" + confDir);\n       }\n       URL configurationFileURL;\n-      if (new File(configuration.configurationFile()).isAbsolute()) {\n+      if (DEFAULT_INFINISPAN_CONFIG_FILES.contains(configuration.configurationFile())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2NTU5Ng=="}, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg5MDUyNA==", "bodyText": "It shouldn't get to new File(configuration.configurationFile()), because new File(configuration.configurationFile()).isAbsolute() should be false.\nBTW how are you testing this?", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404890524", "createdAt": "2020-04-07T15:15:10Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "diffHunk": "@@ -84,22 +91,32 @@ public void prepare(String name) {\n          throw new RuntimeException(\"Failed to create server configuration directory \" + confDir);\n       }\n       URL configurationFileURL;\n-      if (new File(configuration.configurationFile()).isAbsolute()) {\n+      if (DEFAULT_INFINISPAN_CONFIG_FILES.contains(configuration.configurationFile())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2NTU5Ng=="}, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NDY1OQ==", "bodyText": "in the playground project for now of tristan", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r405144659", "createdAt": "2020-04-07T22:13:48Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "diffHunk": "@@ -84,22 +91,32 @@ public void prepare(String name) {\n          throw new RuntimeException(\"Failed to create server configuration directory \" + confDir);\n       }\n       URL configurationFileURL;\n-      if (new File(configuration.configurationFile()).isAbsolute()) {\n+      if (DEFAULT_INFINISPAN_CONFIG_FILES.contains(configuration.configurationFile())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2NTU5Ng=="}, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTA5MDU1OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToyNzo0MVrOGB671g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToyNzo0MVrOGB671g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2NzM1MA==", "bodyText": "Here you're only copying the configuration file. What happens with the other files the server needs, like log4j2.xml?", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404667350", "createdAt": "2020-04-07T09:27:41Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "diffHunk": "@@ -84,22 +91,32 @@ public void prepare(String name) {\n          throw new RuntimeException(\"Failed to create server configuration directory \" + confDir);\n       }\n       URL configurationFileURL;\n-      if (new File(configuration.configurationFile()).isAbsolute()) {\n+      if (DEFAULT_INFINISPAN_CONFIG_FILES.contains(configuration.configurationFile())) {\n+         configurationFileURL = getClass().getClassLoader().getResource(configuration.configurationFile());\n+      } else if (new File(configuration.configurationFile()).isAbsolute()) {\n          configurationFileURL = Exceptions.unchecked(() -> new File(configuration.configurationFile()).toURI().toURL());\n       } else {\n          configurationFileURL = getClass().getClassLoader().getResource(configuration.configurationFile());\n       }\n       if (configurationFileURL == null) {\n          throw new RuntimeException(\"Cannot find test configuration file: \" + configuration.configurationFile());\n       }\n-      Path configurationFilePath;\n+\n       try {\n-         configurationFilePath = Paths.get(configurationFileURL.toURI());\n-         // Recursively copy the contents of the directory containing the configuration file to the test target\n-         Util.recursiveDirectoryCopy(configurationFilePath.getParent(), confDir.toPath());\n+         if (DEFAULT_INFINISPAN_CONFIG_FILES.contains(configuration.configurationFile())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTExOTQ3OnYy", "diffSide": "RIGHT", "path": "commons-test/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTozNDo1N1rOGB7N8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo1NDo0MlrOGDNlJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3MTk4NQ==", "bodyText": "I don't think adding the dependencies here is enough, you also have to add them to the surefire plugin instead of the surefire-junit47 dependency:\nhttps://junit.org/junit5/docs/current/user-guide/#running-tests-build-maven", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404671985", "createdAt": "2020-04-07T09:34:57Z", "author": {"login": "danberindei"}, "path": "commons-test/pom.xml", "diffHunk": "@@ -25,8 +25,13 @@\n          <scope>provided</scope>\n       </dependency>\n       <dependency>\n-         <groupId>junit</groupId>\n-         <artifactId>junit</artifactId>\n+         <groupId>org.junit.jupiter</groupId>\n+         <artifactId>junit-jupiter-engine</artifactId>\n+         <scope>provided</scope>\n+      </dependency>\n+      <dependency>\n+         <groupId>org.junit.vintage</groupId>\n+         <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMTQxMg==", "bodyText": "#8177 the JUnit 5 component upgrade is in another PR now", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r406021412", "createdAt": "2020-04-09T07:54:42Z", "author": {"login": "karesti"}, "path": "commons-test/pom.xml", "diffHunk": "@@ -25,8 +25,13 @@\n          <scope>provided</scope>\n       </dependency>\n       <dependency>\n-         <groupId>junit</groupId>\n-         <artifactId>junit</artifactId>\n+         <groupId>org.junit.jupiter</groupId>\n+         <artifactId>junit-jupiter-engine</artifactId>\n+         <scope>provided</scope>\n+      </dependency>\n+      <dependency>\n+         <groupId>org.junit.vintage</groupId>\n+         <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3MTk4NQ=="}, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTEyNTg4OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanServerRuleBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTozNjozNlrOGB7R2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo1NToxMVrOGDNmIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3Mjk4NA==", "bodyText": "IMO we should add a constructor without any parameters that uses the default server configuration.\nOtherwise users that write their own custom server configuration and name it infinispan.xml could accidentally run some code that is meant to run without a custom server configuration.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404672984", "createdAt": "2020-04-07T09:36:36Z", "author": {"login": "danberindei"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanServerRuleBuilder.java", "diffHunk": "@@ -24,6 +25,18 @@\n    private boolean jmx;\n    private boolean parallelStartup = true;\n \n+   /**\n+    * Use this method to instantiate a single clustered embedded server\n+    *\n+    * @return InfinispanServerRule\n+    */\n+   public static InfinispanServerRule standalone() {\n+      return new InfinispanServerRuleBuilder(DEFAULT_CLUSTERED_INFINISPAN_CONFIG_FILE_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1NzExNg==", "bodyText": "s/standalone()/server()/", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r404857116", "createdAt": "2020-04-07T14:33:21Z", "author": {"login": "tristantarrant"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanServerRuleBuilder.java", "diffHunk": "@@ -24,6 +25,18 @@\n    private boolean jmx;\n    private boolean parallelStartup = true;\n \n+   /**\n+    * Use this method to instantiate a single clustered embedded server\n+    *\n+    * @return InfinispanServerRule\n+    */\n+   public static InfinispanServerRule standalone() {\n+      return new InfinispanServerRuleBuilder(DEFAULT_CLUSTERED_INFINISPAN_CONFIG_FILE_NAME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3Mjk4NA=="}, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMTY2NQ==", "bodyText": "oki", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r406021665", "createdAt": "2020-04-09T07:55:11Z", "author": {"login": "karesti"}, "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanServerRuleBuilder.java", "diffHunk": "@@ -24,6 +25,18 @@\n    private boolean jmx;\n    private boolean parallelStartup = true;\n \n+   /**\n+    * Use this method to instantiate a single clustered embedded server\n+    *\n+    * @return InfinispanServerRule\n+    */\n+   public static InfinispanServerRule standalone() {\n+      return new InfinispanServerRuleBuilder(DEFAULT_CLUSTERED_INFINISPAN_CONFIG_FILE_NAME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3Mjk4NA=="}, "originalCommit": {"oid": "4b28e4018d01b485e9a562018d17eee8cea5bd73"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTc4OTY4OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjozNDo0NlrOGNRwSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToyODozN1rOGPifkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3NTU2MA==", "bodyText": "Should JUnit4 really be a compile dependency of the core?", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r416575560", "createdAt": "2020-04-28T12:34:46Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/pom.xml", "diffHunk": "@@ -67,6 +97,11 @@\n          <groupId>net.spy</groupId>\n          <artifactId>spymemcached</artifactId>\n       </dependency>\n+      <dependency>\n+         <groupId>junit</groupId>\n+         <artifactId>junit</artifactId>\n+         <scope>compile</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c14541ac1dd7eaf0c12ffb30e3b4748e5100a37"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0Njk2MA==", "bodyText": "yes", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418946960", "createdAt": "2020-05-02T11:28:37Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/pom.xml", "diffHunk": "@@ -67,6 +97,11 @@\n          <groupId>net.spy</groupId>\n          <artifactId>spymemcached</artifactId>\n       </dependency>\n+      <dependency>\n+         <groupId>junit</groupId>\n+         <artifactId>junit</artifactId>\n+         <scope>compile</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3NTU2MA=="}, "originalCommit": {"oid": "8c14541ac1dd7eaf0c12ffb30e3b4748e5100a37"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTc5MTkxOnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjozNToyM1rOGNRxug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjozNToyM1rOGNRxug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3NTkzMA==", "bodyText": "Do we need these for the container driver, or were they needed only for the embedded driver?", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r416575930", "createdAt": "2020-04-28T12:35:23Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/pom.xml", "diffHunk": "@@ -18,6 +18,36 @@\n       <module.skipMavenRemoteResource>true</module.skipMavenRemoteResource>\n    </properties>\n \n+   <build>\n+      <plugins>\n+         <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-resources-plugin</artifactId>\n+            <executions>\n+               <execution>\n+                  <id>copy-server-config</id>\n+                  <phase>validate</phase>\n+                  <goals>\n+                     <goal>copy-resources</goal>\n+                  </goals>\n+                  <configuration>\n+                     <outputDirectory>${project.basedir}/target/classes</outputDirectory>\n+                     <resources>\n+                        <resource>\n+                           <directory>${project.parent.basedir}/runtime/src/main/server/server/conf</directory>\n+                           <includes>\n+                              <include>infinispan.xml</include>\n+                              <include>log4j2.xml</include>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c14541ac1dd7eaf0c12ffb30e3b4748e5100a37"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTgwNTc1OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/Base.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjozODozNFrOGNR6BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToxNDo1MVrOGPiadA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3ODA1Mw==", "bodyText": "Missing description, author, wrong version", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r416578053", "createdAt": "2020-04-28T12:38:34Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/Base.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.infinispan.server.test.core;\n+\n+import org.infinispan.commons.api.CacheContainerAdmin;\n+import org.infinispan.commons.configuration.BasicConfiguration;\n+import org.infinispan.commons.configuration.Self;\n+import org.infinispan.commons.configuration.XMLStringConfiguration;\n+import org.infinispan.configuration.cache.CacheMode;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ * @since 10", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c14541ac1dd7eaf0c12ffb30e3b4748e5100a37"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NTY1Mg==", "bodyText": "the version is ok\nthe author is tristan and description was missing. this already existed Dan. but I'm going to improve it in the next commit", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418945652", "createdAt": "2020-05-02T11:14:51Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/Base.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.infinispan.server.test.core;\n+\n+import org.infinispan.commons.api.CacheContainerAdmin;\n+import org.infinispan.commons.configuration.BasicConfiguration;\n+import org.infinispan.commons.configuration.Self;\n+import org.infinispan.commons.configuration.XMLStringConfiguration;\n+import org.infinispan.configuration.cache.CacheMode;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ * @since 10", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3ODA1Mw=="}, "originalCommit": {"oid": "8c14541ac1dd7eaf0c12ffb30e3b4748e5100a37"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDE4MDIwOnYy", "diffSide": "RIGHT", "path": "build-configuration/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjoyMzo1M1rOGPIcRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzoxMDoxMFrOGPjH9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyMDEzMw==", "bodyText": "Since most modules keep using JUnit4, I suggest naming the property version.junit5 to avoid confusion", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418520133", "createdAt": "2020-05-01T12:23:53Z", "author": {"login": "danberindei"}, "path": "build-configuration/pom.xml", "diffHunk": "@@ -172,7 +172,8 @@\n       <version.jetty>9.4.5.v20170502</version.jetty>\n       <version.jgroups>4.2.1.Final</version.jgroups>\n       <version.jsr107>1.1.0</version.jsr107>\n-      <version.junit>4.13</version.junit>\n+      <version.junit4>4.13</version.junit4>\n+      <version.junit>5.6.2</version.junit>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8a26923718d3aae7846c38ffd44a952aec3afff"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzMwMQ==", "bodyText": "ok", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418957301", "createdAt": "2020-05-02T13:10:10Z", "author": {"login": "karesti"}, "path": "build-configuration/pom.xml", "diffHunk": "@@ -172,7 +172,8 @@\n       <version.jetty>9.4.5.v20170502</version.jetty>\n       <version.jgroups>4.2.1.Final</version.jgroups>\n       <version.jsr107>1.1.0</version.jsr107>\n-      <version.junit>4.13</version.junit>\n+      <version.junit4>4.13</version.junit4>\n+      <version.junit>5.6.2</version.junit>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyMDEzMw=="}, "originalCommit": {"oid": "b8a26923718d3aae7846c38ffd44a952aec3afff"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDIyNzE5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/Base.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo0Nzo0NlrOGPI2_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwOTozMDo0NVrOGPh2Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyNjk3NA==", "bodyText": "Name seems too short to me, what is it a base for?\nSame with the subclasses, HotRod and Rest.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418526974", "createdAt": "2020-05-01T12:47:46Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/Base.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.infinispan.server.test.core;\n+\n+import org.infinispan.commons.api.CacheContainerAdmin;\n+import org.infinispan.commons.configuration.BasicConfiguration;\n+import org.infinispan.commons.configuration.Self;\n+import org.infinispan.commons.configuration.XMLStringConfiguration;\n+import org.infinispan.configuration.cache.CacheMode;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ * @since 10\n+ * @param <S>\n+ */\n+public abstract class Base<S extends Base<S>> implements Self<S> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNjM4Nw==", "bodyText": "These classes, Base, HotRod and Rest classes already existed, as inner classes inside the Junit 4 method Rule. I just moved them out to make them reusable across junit 4 and junit 5.\nBut I'm going to refactor the names in an additional commit now", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418936387", "createdAt": "2020-05-02T09:30:45Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/Base.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.infinispan.server.test.core;\n+\n+import org.infinispan.commons.api.CacheContainerAdmin;\n+import org.infinispan.commons.configuration.BasicConfiguration;\n+import org.infinispan.commons.configuration.Self;\n+import org.infinispan.commons.configuration.XMLStringConfiguration;\n+import org.infinispan.configuration.cache.CacheMode;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ * @since 10\n+ * @param <S>\n+ */\n+public abstract class Base<S extends Base<S>> implements Self<S> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyNjk3NA=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDIzMDE5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/ContainerInfinispanServerDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo0OToyM1rOGPI4tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToxNTo1M1rOGPiaxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyNzQxMg==", "bodyText": "IMO getContainer(int i) matches createContainer(int i) better.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418527412", "createdAt": "2020-05-01T12:49:23Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/ContainerInfinispanServerDriver.java", "diffHunk": "@@ -218,6 +218,13 @@ protected void start(String name, File rootDir, String configurationFile) {\n       }\n    }\n \n+   public InfinispanGenericContainer getSingleContainer(int i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NTczMw==", "bodyText": "ok", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418945733", "createdAt": "2020-05-02T11:15:53Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/ContainerInfinispanServerDriver.java", "diffHunk": "@@ -218,6 +218,13 @@ protected void start(String name, File rootDir, String configurationFile) {\n       }\n    }\n \n+   public InfinispanGenericContainer getSingleContainer(int i) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyNzQxMg=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM1MTM0OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0Mjo1NVrOGPKBTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToyODoyN1rOGPifhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NTk5OQ==", "bodyText": "Is this still necessary?", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418545999", "createdAt": "2020-05-01T13:42:55Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "diffHunk": "@@ -39,6 +39,8 @@\n  * @since 10.0\n  **/\n public abstract class AbstractInfinispanServerDriver implements InfinispanServerDriver {\n+   public static final String DEFAULT_CLUSTERED_INFINISPAN_CONFIG_FILE_NAME = \"infinispan.xml\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0Njk1MA==", "bodyText": "yes", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418946950", "createdAt": "2020-05-02T11:28:27Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractInfinispanServerDriver.java", "diffHunk": "@@ -39,6 +39,8 @@\n  * @since 10.0\n  **/\n public abstract class AbstractInfinispanServerDriver implements InfinispanServerDriver {\n+   public static final String DEFAULT_CLUSTERED_INFINISPAN_CONFIG_FILE_NAME = \"infinispan.xml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NTk5OQ=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM1MzQwOnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/InfinispanServerTestConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0MzozN1rOGPKCiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToyMjowMlrOGPidJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NjMxMw==", "bodyText": "Will defaultFile ever be true?", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418546313", "createdAt": "2020-05-01T13:43:37Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/InfinispanServerTestConfiguration.java", "diffHunk": "@@ -18,10 +18,11 @@\n    private final JavaArchive[] archives;\n    private final boolean jmx;\n    private final boolean parallelStartup;\n+   private boolean defaultFile;\n \n    public InfinispanServerTestConfiguration(String configurationFile, int numServers, ServerRunMode runMode,\n                                             Properties properties, String[] mavenArtifacts, JavaArchive[] archives,\n-                                            boolean jmx, boolean parallelStartup) {\n+                                            boolean jmx, boolean parallelStartup, boolean defaultFile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NjM0Mw==", "bodyText": "yes. in container mode. we don't copy anything to the container run that way", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418946343", "createdAt": "2020-05-02T11:22:02Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/InfinispanServerTestConfiguration.java", "diffHunk": "@@ -18,10 +18,11 @@\n    private final JavaArchive[] archives;\n    private final boolean jmx;\n    private final boolean parallelStartup;\n+   private boolean defaultFile;\n \n    public InfinispanServerTestConfiguration(String configurationFile, int numServers, ServerRunMode runMode,\n                                             Properties properties, String[] mavenArtifacts, JavaArchive[] archives,\n-                                            boolean jmx, boolean parallelStartup) {\n+                                            boolean jmx, boolean parallelStartup, boolean defaultFile) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NjMxMw=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM1NzkyOnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0NToyMVrOGPKFPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToyMToyNFrOGPic4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NzAwNg==", "bodyText": "Missing javadoc", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418547006", "createdAt": "2020-05-01T13:45:21Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestClient.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.infinispan.server.test.core;\n+\n+import net.spy.memcached.MemcachedClient;\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.RemoteCounterManagerFactory;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.commons.test.CommonsTestingUtil;\n+import org.infinispan.commons.util.Util;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.scripting.ScriptingManager;\n+\n+import java.io.Closeable;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class TestClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NjI3Mg==", "bodyText": "ok", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418946272", "createdAt": "2020-05-02T11:21:24Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestClient.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.infinispan.server.test.core;\n+\n+import net.spy.memcached.MemcachedClient;\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.RemoteCounterManagerFactory;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.commons.test.CommonsTestingUtil;\n+import org.infinispan.commons.util.Util;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.scripting.ScriptingManager;\n+\n+import java.io.Closeable;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class TestClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NzAwNg=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM2MDA4OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0NjoxMVrOGPKGlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToxNzo1M1rOGPibfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NzM0OQ==", "bodyText": "Shouldn't this be a method in HotRod?", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418547349", "createdAt": "2020-05-01T13:46:11Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestClient.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.infinispan.server.test.core;\n+\n+import net.spy.memcached.MemcachedClient;\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.RemoteCounterManagerFactory;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.commons.test.CommonsTestingUtil;\n+import org.infinispan.commons.util.Util;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.scripting.ScriptingManager;\n+\n+import java.io.Closeable;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class TestClient {\n+   protected InfinispanServerTestConfiguration configuration;\n+   protected TestServer testServer;\n+   protected List<Closeable> resources;\n+   private String methodName;\n+\n+   public TestClient(TestServer testServer) {\n+      this.testServer = testServer;\n+   }\n+\n+   public <T extends Closeable> T registerResource(T resource) {\n+      resources.add(resource);\n+      return resource;\n+   }\n+\n+   public InfinispanServerDriver getServerDriver() {\n+      if (!testServer.isDriverInitialized()) {\n+         throw new IllegalStateException(\"Operation not supported before test starts\");\n+      }\n+      return testServer.getDriver();\n+   }\n+\n+   public HotRod hotrod() {\n+      return new HotRod(testServer, this);\n+   }\n+\n+   public Rest rest() {\n+      return new Rest(testServer, this);\n+   }\n+\n+   public CounterManager getCounterManager() {\n+      RemoteCacheManager remoteCacheManager = registerResource(testServer.newHotRodClient());\n+      return RemoteCounterManagerFactory.asCounterManager(remoteCacheManager);\n+   }\n+\n+\n+   public void setMethodName(String methodName) {\n+      this.methodName = methodName;\n+   }\n+\n+   public void clearResources() {\n+      if (resources != null) {\n+         resources.forEach(Util::close);\n+         resources.clear();\n+      }\n+   }\n+\n+   public void initResources() {\n+      resources = new ArrayList<>();\n+   }\n+\n+   public String addScript(RemoteCacheManager remoteCacheManager, String script) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NTkxNw==", "bodyText": "possibly, yes. I kept things as untouched as possible in the test suite.\nAgain, this classes and methods already existed\nI will try to refactor in another commit", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418945917", "createdAt": "2020-05-02T11:17:53Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestClient.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.infinispan.server.test.core;\n+\n+import net.spy.memcached.MemcachedClient;\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.RemoteCounterManagerFactory;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.commons.test.CommonsTestingUtil;\n+import org.infinispan.commons.util.Util;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.scripting.ScriptingManager;\n+\n+import java.io.Closeable;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class TestClient {\n+   protected InfinispanServerTestConfiguration configuration;\n+   protected TestServer testServer;\n+   protected List<Closeable> resources;\n+   private String methodName;\n+\n+   public TestClient(TestServer testServer) {\n+      this.testServer = testServer;\n+   }\n+\n+   public <T extends Closeable> T registerResource(T resource) {\n+      resources.add(resource);\n+      return resource;\n+   }\n+\n+   public InfinispanServerDriver getServerDriver() {\n+      if (!testServer.isDriverInitialized()) {\n+         throw new IllegalStateException(\"Operation not supported before test starts\");\n+      }\n+      return testServer.getDriver();\n+   }\n+\n+   public HotRod hotrod() {\n+      return new HotRod(testServer, this);\n+   }\n+\n+   public Rest rest() {\n+      return new Rest(testServer, this);\n+   }\n+\n+   public CounterManager getCounterManager() {\n+      RemoteCacheManager remoteCacheManager = registerResource(testServer.newHotRodClient());\n+      return RemoteCounterManagerFactory.asCounterManager(remoteCacheManager);\n+   }\n+\n+\n+   public void setMethodName(String methodName) {\n+      this.methodName = methodName;\n+   }\n+\n+   public void clearResources() {\n+      if (resources != null) {\n+         resources.forEach(Util::close);\n+         resources.clear();\n+      }\n+   }\n+\n+   public void initResources() {\n+      resources = new ArrayList<>();\n+   }\n+\n+   public String addScript(RemoteCacheManager remoteCacheManager, String script) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NzM0OQ=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM2NTQ5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0ODoxM1rOGPKJyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToxODo1MFrOGPib1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0ODE3MA==", "bodyText": "Not sure we should expose this one.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418548170", "createdAt": "2020-05-01T13:48:13Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestClient.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.infinispan.server.test.core;\n+\n+import net.spy.memcached.MemcachedClient;\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.RemoteCounterManagerFactory;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.commons.test.CommonsTestingUtil;\n+import org.infinispan.commons.util.Util;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.scripting.ScriptingManager;\n+\n+import java.io.Closeable;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class TestClient {\n+   protected InfinispanServerTestConfiguration configuration;\n+   protected TestServer testServer;\n+   protected List<Closeable> resources;\n+   private String methodName;\n+\n+   public TestClient(TestServer testServer) {\n+      this.testServer = testServer;\n+   }\n+\n+   public <T extends Closeable> T registerResource(T resource) {\n+      resources.add(resource);\n+      return resource;\n+   }\n+\n+   public InfinispanServerDriver getServerDriver() {\n+      if (!testServer.isDriverInitialized()) {\n+         throw new IllegalStateException(\"Operation not supported before test starts\");\n+      }\n+      return testServer.getDriver();\n+   }\n+\n+   public HotRod hotrod() {\n+      return new HotRod(testServer, this);\n+   }\n+\n+   public Rest rest() {\n+      return new Rest(testServer, this);\n+   }\n+\n+   public CounterManager getCounterManager() {\n+      RemoteCacheManager remoteCacheManager = registerResource(testServer.newHotRodClient());\n+      return RemoteCounterManagerFactory.asCounterManager(remoteCacheManager);\n+   }\n+\n+\n+   public void setMethodName(String methodName) {\n+      this.methodName = methodName;\n+   }\n+\n+   public void clearResources() {\n+      if (resources != null) {\n+         resources.forEach(Util::close);\n+         resources.clear();\n+      }\n+   }\n+\n+   public void initResources() {\n+      resources = new ArrayList<>();\n+   }\n+\n+   public String addScript(RemoteCacheManager remoteCacheManager, String script) {\n+      RemoteCache<String, String> scriptCache = remoteCacheManager.getCache(ScriptingManager.SCRIPT_CACHE);\n+      try (InputStream in = this.getClass().getClassLoader().getResourceAsStream(script)) {\n+         scriptCache.put(getMethodName(), CommonsTestingUtil.loadFileAsString(in));\n+      } catch (Exception e) {\n+         throw new RuntimeException(e);\n+      }\n+      return getMethodName();\n+   }\n+\n+   public String getMethodName() {\n+      return getMethodName(null);\n+   }\n+\n+   public RestClient newRestClient(RestClientConfigurationBuilder restClientConfigurationBuilder) {\n+      RestClient restClient = testServer.newRestClient(restClientConfigurationBuilder);\n+      registerResource(restClient);\n+      return restClient;\n+   }\n+\n+   public String getMethodName(String qualifier) {\n+      String cacheName = \"C\" + methodName + (qualifier != null ? qualifier : \"\");\n+      try {\n+         MessageDigest sha1 = MessageDigest.getInstance(\"SHA-1\");\n+         byte[] digest = sha1.digest(cacheName.getBytes(StandardCharsets.UTF_8));\n+         return Util.toHexString(digest);\n+      } catch (NoSuchAlgorithmException e) {\n+         // Won't happen\n+         return null;\n+      }\n+   }\n+\n+   public MemcachedClient getMemcachedClient() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NjAwNQ==", "bodyText": "again, this is the testsuite impact. I will refactor then", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418946005", "createdAt": "2020-05-02T11:18:50Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestClient.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.infinispan.server.test.core;\n+\n+import net.spy.memcached.MemcachedClient;\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.RemoteCounterManagerFactory;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.commons.test.CommonsTestingUtil;\n+import org.infinispan.commons.util.Util;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.scripting.ScriptingManager;\n+\n+import java.io.Closeable;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class TestClient {\n+   protected InfinispanServerTestConfiguration configuration;\n+   protected TestServer testServer;\n+   protected List<Closeable> resources;\n+   private String methodName;\n+\n+   public TestClient(TestServer testServer) {\n+      this.testServer = testServer;\n+   }\n+\n+   public <T extends Closeable> T registerResource(T resource) {\n+      resources.add(resource);\n+      return resource;\n+   }\n+\n+   public InfinispanServerDriver getServerDriver() {\n+      if (!testServer.isDriverInitialized()) {\n+         throw new IllegalStateException(\"Operation not supported before test starts\");\n+      }\n+      return testServer.getDriver();\n+   }\n+\n+   public HotRod hotrod() {\n+      return new HotRod(testServer, this);\n+   }\n+\n+   public Rest rest() {\n+      return new Rest(testServer, this);\n+   }\n+\n+   public CounterManager getCounterManager() {\n+      RemoteCacheManager remoteCacheManager = registerResource(testServer.newHotRodClient());\n+      return RemoteCounterManagerFactory.asCounterManager(remoteCacheManager);\n+   }\n+\n+\n+   public void setMethodName(String methodName) {\n+      this.methodName = methodName;\n+   }\n+\n+   public void clearResources() {\n+      if (resources != null) {\n+         resources.forEach(Util::close);\n+         resources.clear();\n+      }\n+   }\n+\n+   public void initResources() {\n+      resources = new ArrayList<>();\n+   }\n+\n+   public String addScript(RemoteCacheManager remoteCacheManager, String script) {\n+      RemoteCache<String, String> scriptCache = remoteCacheManager.getCache(ScriptingManager.SCRIPT_CACHE);\n+      try (InputStream in = this.getClass().getClassLoader().getResourceAsStream(script)) {\n+         scriptCache.put(getMethodName(), CommonsTestingUtil.loadFileAsString(in));\n+      } catch (Exception e) {\n+         throw new RuntimeException(e);\n+      }\n+      return getMethodName();\n+   }\n+\n+   public String getMethodName() {\n+      return getMethodName(null);\n+   }\n+\n+   public RestClient newRestClient(RestClientConfigurationBuilder restClientConfigurationBuilder) {\n+      RestClient restClient = testServer.newRestClient(restClientConfigurationBuilder);\n+      registerResource(restClient);\n+      return restClient;\n+   }\n+\n+   public String getMethodName(String qualifier) {\n+      String cacheName = \"C\" + methodName + (qualifier != null ? qualifier : \"\");\n+      try {\n+         MessageDigest sha1 = MessageDigest.getInstance(\"SHA-1\");\n+         byte[] digest = sha1.digest(cacheName.getBytes(StandardCharsets.UTF_8));\n+         return Util.toHexString(digest);\n+      } catch (NoSuchAlgorithmException e) {\n+         // Won't happen\n+         return null;\n+      }\n+   }\n+\n+   public MemcachedClient getMemcachedClient() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0ODE3MA=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM2NjA1OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0ODoyNFrOGPKKJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToxODo1N1rOGPib8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0ODI2MA==", "bodyText": "Missing javadoc", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418548260", "createdAt": "2020-05-01T13:48:24Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestServer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.infinispan.server.test.core;\n+\n+import net.spy.memcached.MemcachedClient;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.commons.test.Exceptions;\n+import org.testcontainers.DockerClientFactory;\n+\n+import java.io.Closeable;\n+import java.io.File;\n+import java.net.InetSocketAddress;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+public class TestServer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NjAzMw==", "bodyText": "ok", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418946033", "createdAt": "2020-05-02T11:18:57Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestServer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.infinispan.server.test.core;\n+\n+import net.spy.memcached.MemcachedClient;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.commons.test.Exceptions;\n+import org.testcontainers.DockerClientFactory;\n+\n+import java.io.Closeable;\n+import java.io.File;\n+import java.net.InetSocketAddress;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+public class TestServer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0ODI2MA=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM4MTg1OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo1NDoxMVrOGPKTcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToxODoxM1rOGPibjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MDY0Mw==", "bodyText": "Seems odd that newRestClient is in TestClient, but newHotRodClient() is only in TestServer.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418550643", "createdAt": "2020-05-01T13:54:11Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestClient.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.infinispan.server.test.core;\n+\n+import net.spy.memcached.MemcachedClient;\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.RemoteCounterManagerFactory;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.commons.test.CommonsTestingUtil;\n+import org.infinispan.commons.util.Util;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.scripting.ScriptingManager;\n+\n+import java.io.Closeable;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class TestClient {\n+   protected InfinispanServerTestConfiguration configuration;\n+   protected TestServer testServer;\n+   protected List<Closeable> resources;\n+   private String methodName;\n+\n+   public TestClient(TestServer testServer) {\n+      this.testServer = testServer;\n+   }\n+\n+   public <T extends Closeable> T registerResource(T resource) {\n+      resources.add(resource);\n+      return resource;\n+   }\n+\n+   public InfinispanServerDriver getServerDriver() {\n+      if (!testServer.isDriverInitialized()) {\n+         throw new IllegalStateException(\"Operation not supported before test starts\");\n+      }\n+      return testServer.getDriver();\n+   }\n+\n+   public HotRod hotrod() {\n+      return new HotRod(testServer, this);\n+   }\n+\n+   public Rest rest() {\n+      return new Rest(testServer, this);\n+   }\n+\n+   public CounterManager getCounterManager() {\n+      RemoteCacheManager remoteCacheManager = registerResource(testServer.newHotRodClient());\n+      return RemoteCounterManagerFactory.asCounterManager(remoteCacheManager);\n+   }\n+\n+\n+   public void setMethodName(String methodName) {\n+      this.methodName = methodName;\n+   }\n+\n+   public void clearResources() {\n+      if (resources != null) {\n+         resources.forEach(Util::close);\n+         resources.clear();\n+      }\n+   }\n+\n+   public void initResources() {\n+      resources = new ArrayList<>();\n+   }\n+\n+   public String addScript(RemoteCacheManager remoteCacheManager, String script) {\n+      RemoteCache<String, String> scriptCache = remoteCacheManager.getCache(ScriptingManager.SCRIPT_CACHE);\n+      try (InputStream in = this.getClass().getClassLoader().getResourceAsStream(script)) {\n+         scriptCache.put(getMethodName(), CommonsTestingUtil.loadFileAsString(in));\n+      } catch (Exception e) {\n+         throw new RuntimeException(e);\n+      }\n+      return getMethodName();\n+   }\n+\n+   public String getMethodName() {\n+      return getMethodName(null);\n+   }\n+\n+   public RestClient newRestClient(RestClientConfigurationBuilder restClientConfigurationBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NTkzNQ==", "bodyText": "ok", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418945935", "createdAt": "2020-05-02T11:18:13Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/TestClient.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.infinispan.server.test.core;\n+\n+import net.spy.memcached.MemcachedClient;\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.RemoteCounterManagerFactory;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.commons.test.CommonsTestingUtil;\n+import org.infinispan.commons.util.Util;\n+import org.infinispan.counter.api.CounterManager;\n+import org.infinispan.scripting.ScriptingManager;\n+\n+import java.io.Closeable;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class TestClient {\n+   protected InfinispanServerTestConfiguration configuration;\n+   protected TestServer testServer;\n+   protected List<Closeable> resources;\n+   private String methodName;\n+\n+   public TestClient(TestServer testServer) {\n+      this.testServer = testServer;\n+   }\n+\n+   public <T extends Closeable> T registerResource(T resource) {\n+      resources.add(resource);\n+      return resource;\n+   }\n+\n+   public InfinispanServerDriver getServerDriver() {\n+      if (!testServer.isDriverInitialized()) {\n+         throw new IllegalStateException(\"Operation not supported before test starts\");\n+      }\n+      return testServer.getDriver();\n+   }\n+\n+   public HotRod hotrod() {\n+      return new HotRod(testServer, this);\n+   }\n+\n+   public Rest rest() {\n+      return new Rest(testServer, this);\n+   }\n+\n+   public CounterManager getCounterManager() {\n+      RemoteCacheManager remoteCacheManager = registerResource(testServer.newHotRodClient());\n+      return RemoteCounterManagerFactory.asCounterManager(remoteCacheManager);\n+   }\n+\n+\n+   public void setMethodName(String methodName) {\n+      this.methodName = methodName;\n+   }\n+\n+   public void clearResources() {\n+      if (resources != null) {\n+         resources.forEach(Util::close);\n+         resources.clear();\n+      }\n+   }\n+\n+   public void initResources() {\n+      resources = new ArrayList<>();\n+   }\n+\n+   public String addScript(RemoteCacheManager remoteCacheManager, String script) {\n+      RemoteCache<String, String> scriptCache = remoteCacheManager.getCache(ScriptingManager.SCRIPT_CACHE);\n+      try (InputStream in = this.getClass().getClassLoader().getResourceAsStream(script)) {\n+         scriptCache.put(getMethodName(), CommonsTestingUtil.loadFileAsString(in));\n+      } catch (Exception e) {\n+         throw new RuntimeException(e);\n+      }\n+      return getMethodName();\n+   }\n+\n+   public String getMethodName() {\n+      return getMethodName(null);\n+   }\n+\n+   public RestClient newRestClient(RestClientConfigurationBuilder restClientConfigurationBuilder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MDY0Mw=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM5MzA2OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/HotRod.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo1ODoxMVrOGPKaNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToyMzoyMVrOGPidkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MjM3NA==", "bodyText": "To me the name get() suggests that the method returns the same RemoteCache instance, so it's surprising that it creates a new RemoteCacheManager instance every time.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418552374", "createdAt": "2020-05-01T13:58:11Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/HotRod.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.infinispan.server.test.core;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.configuration.cache.CacheMode;\n+\n+/**\n+ * @since 10\n+ */\n+public class HotRod extends Base<HotRod> {\n+   private final TestServer testServer;\n+   private final TestClient testClient;\n+   ConfigurationBuilder clientConfiguration = new ConfigurationBuilder();\n+\n+   public HotRod(TestServer testServer, TestClient testClient) {\n+      this.testServer = testServer;\n+      this.testClient = testClient;\n+   }\n+\n+   public HotRod withClientConfiguration(ConfigurationBuilder clientConfiguration) {\n+      this.clientConfiguration = clientConfiguration;\n+      return this;\n+   }\n+\n+   public <K, V> RemoteCache<K, V> get() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NjQ0OQ==", "bodyText": "I will review this, but this impacts all our test suite. I just moved code around. not sure I should change this in this PR though.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418946449", "createdAt": "2020-05-02T11:23:21Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/HotRod.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.infinispan.server.test.core;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.configuration.cache.CacheMode;\n+\n+/**\n+ * @since 10\n+ */\n+public class HotRod extends Base<HotRod> {\n+   private final TestServer testServer;\n+   private final TestClient testClient;\n+   ConfigurationBuilder clientConfiguration = new ConfigurationBuilder();\n+\n+   public HotRod(TestServer testServer, TestClient testClient) {\n+      this.testServer = testServer;\n+      this.testClient = testClient;\n+   }\n+\n+   public HotRod withClientConfiguration(ConfigurationBuilder clientConfiguration) {\n+      this.clientConfiguration = clientConfiguration;\n+      return this;\n+   }\n+\n+   public <K, V> RemoteCache<K, V> get() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MjM3NA=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM5ODM1OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/HotRod.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowMDoxM1rOGPKdjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToxNjo0NlrOGPibNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MzIyOA==", "bodyText": "create also seems ambiguous to me, it doesn't say it's creating the cache on the server, so it could be interpreted as \"create the RemoteCache instance so that get() can use it\".", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418553228", "createdAt": "2020-05-01T14:00:13Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/HotRod.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.infinispan.server.test.core;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.configuration.cache.CacheMode;\n+\n+/**\n+ * @since 10\n+ */\n+public class HotRod extends Base<HotRod> {\n+   private final TestServer testServer;\n+   private final TestClient testClient;\n+   ConfigurationBuilder clientConfiguration = new ConfigurationBuilder();\n+\n+   public HotRod(TestServer testServer, TestClient testClient) {\n+      this.testServer = testServer;\n+      this.testClient = testClient;\n+   }\n+\n+   public HotRod withClientConfiguration(ConfigurationBuilder clientConfiguration) {\n+      this.clientConfiguration = clientConfiguration;\n+      return this;\n+   }\n+\n+   public <K, V> RemoteCache<K, V> get() {\n+      RemoteCacheManager remoteCacheManager = testClient.registerResource(testServer.newHotRodClient(clientConfiguration));\n+      String name = testClient.getMethodName(qualifier);\n+      return remoteCacheManager.getCache(name);\n+   }\n+\n+   public <K, V> RemoteCache<K, V> create() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NTg0NA==", "bodyText": "again, all this already existed", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418945844", "createdAt": "2020-05-02T11:16:46Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/HotRod.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.infinispan.server.test.core;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.configuration.cache.CacheMode;\n+\n+/**\n+ * @since 10\n+ */\n+public class HotRod extends Base<HotRod> {\n+   private final TestServer testServer;\n+   private final TestClient testClient;\n+   ConfigurationBuilder clientConfiguration = new ConfigurationBuilder();\n+\n+   public HotRod(TestServer testServer, TestClient testClient) {\n+      this.testServer = testServer;\n+      this.testClient = testClient;\n+   }\n+\n+   public HotRod withClientConfiguration(ConfigurationBuilder clientConfiguration) {\n+      this.clientConfiguration = clientConfiguration;\n+      return this;\n+   }\n+\n+   public <K, V> RemoteCache<K, V> get() {\n+      RemoteCacheManager remoteCacheManager = testClient.registerResource(testServer.newHotRodClient(clientConfiguration));\n+      String name = testClient.getMethodName(qualifier);\n+      return remoteCacheManager.getCache(name);\n+   }\n+\n+   public <K, V> RemoteCache<K, V> create() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MzIyOA=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDQwNTI5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowMjo1MlrOGPKhqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToyMDo1NlrOGPicrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NDI4Mw==", "bodyText": "Do we really need TestNG here? Maybe add a source comment to explain why", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418554283", "createdAt": "2020-05-01T14:02:52Z", "author": {"login": "danberindei"}, "path": "server/testdriver/junit4/pom.xml", "diffHunk": "@@ -49,6 +48,16 @@\n          <artifactId>shrinkwrap-resolver-impl-maven-archive</artifactId>\n          <scope>compile</scope>\n       </dependency>\n+      <dependency>\n+         <groupId>junit</groupId>\n+         <artifactId>junit</artifactId>\n+         <scope>compile</scope>\n+      </dependency>\n+      <dependency>\n+         <groupId>org.testng</groupId>\n+         <artifactId>testng</artifactId>\n+         <scope>test</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NjIyMQ==", "bodyText": "checking", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418946221", "createdAt": "2020-05-02T11:20:56Z", "author": {"login": "karesti"}, "path": "server/testdriver/junit4/pom.xml", "diffHunk": "@@ -49,6 +48,16 @@\n          <artifactId>shrinkwrap-resolver-impl-maven-archive</artifactId>\n          <scope>compile</scope>\n       </dependency>\n+      <dependency>\n+         <groupId>junit</groupId>\n+         <artifactId>junit</artifactId>\n+         <scope>compile</scope>\n+      </dependency>\n+      <dependency>\n+         <groupId>org.testng</groupId>\n+         <artifactId>testng</artifactId>\n+         <scope>test</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NDI4Mw=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDQxNzQ5OnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractServerConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowNzozOFrOGPKpSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToyNTo1MVrOGPieiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NjIzNQ==", "bodyText": "I suggest AbstractTestServerBuilder, because it creates a TestServer instance. Although TestServer isn't just one server either, it's a cluster, so maybe AbstractTestClusterBuilder?", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418556235", "createdAt": "2020-05-01T14:07:38Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractServerConfigBuilder.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.infinispan.server.test.core;\n+\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import java.util.Properties;\n+\n+/**\n+ * Common code for JUnit 4 and Junit 5 Extension\n+ *\n+ * @param <T> type of builder\n+ * @author Katia Aresti\n+ * @since 11\n+ */\n+public abstract class AbstractServerConfigBuilder<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NjY5OQ==", "bodyText": "I don't agree. The Rule is called \"InfinispanServerRuleBuilder\" not \"InfinispanClusterRuleBuilder\". This builder emerged up to reuse the same type of build for the InfinispanServerExtension and InfinispanServerRule.\nThe InfinispanServer is either a cluster or a standalone server.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418946699", "createdAt": "2020-05-02T11:25:51Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/AbstractServerConfigBuilder.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.infinispan.server.test.core;\n+\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import java.util.Properties;\n+\n+/**\n+ * Common code for JUnit 4 and Junit 5 Extension\n+ *\n+ * @param <T> type of builder\n+ * @author Katia Aresti\n+ * @since 11\n+ */\n+public abstract class AbstractServerConfigBuilder<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NjIzNQ=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDQyNDQxOnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit4/src/test/java/InfinispanRuleBasicTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxMDoyMlrOGPKtyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwOTozMTo1N1rOGPh21Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NzM4NQ==", "bodyText": "Wrong indent, and the previous line should be wrapped", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418557385", "createdAt": "2020-05-01T14:10:22Z", "author": {"login": "danberindei"}, "path": "server/testdriver/junit4/src/test/java/InfinispanRuleBasicTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.configuration.ClientIntelligence;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.server.test.junit4.InfinispanServerRule;\n+import org.infinispan.server.test.junit4.InfinispanServerRuleBuilder;\n+import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class InfinispanRuleBasicTest {\n+   @ClassRule\n+   public static final InfinispanServerRule SERVER = InfinispanServerRuleBuilder.server();\n+\n+   @Rule\n+   public InfinispanServerTestMethodRule SERVER_TEST = new InfinispanServerTestMethodRule(SERVER);\n+\n+   @Test\n+   public void testSingleServer() {\n+      ConfigurationBuilder builder = new ConfigurationBuilder();\n+      builder.clientIntelligence(ClientIntelligence.BASIC);\n+      RemoteCache<String, String> cache = SERVER_TEST.hotrod().withClientConfiguration(builder).withCacheMode(CacheMode.DIST_SYNC).create();\n+            cache.put(\"k1\", \"v1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNjUzMw==", "bodyText": "oki", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418936533", "createdAt": "2020-05-02T09:31:57Z", "author": {"login": "karesti"}, "path": "server/testdriver/junit4/src/test/java/InfinispanRuleBasicTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.configuration.ClientIntelligence;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.server.test.junit4.InfinispanServerRule;\n+import org.infinispan.server.test.junit4.InfinispanServerRuleBuilder;\n+import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class InfinispanRuleBasicTest {\n+   @ClassRule\n+   public static final InfinispanServerRule SERVER = InfinispanServerRuleBuilder.server();\n+\n+   @Rule\n+   public InfinispanServerTestMethodRule SERVER_TEST = new InfinispanServerTestMethodRule(SERVER);\n+\n+   @Test\n+   public void testSingleServer() {\n+      ConfigurationBuilder builder = new ConfigurationBuilder();\n+      builder.clientIntelligence(ClientIntelligence.BASIC);\n+      RemoteCache<String, String> cache = SERVER_TEST.hotrod().withClientConfiguration(builder).withCacheMode(CacheMode.DIST_SYNC).create();\n+            cache.put(\"k1\", \"v1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NzM4NQ=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDQyODkwOnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanServerExtension.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxMjowN1rOGPKwuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToxOToxOVrOGPicGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1ODEzOQ==", "bodyText": "Missing javadoc", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418558139", "createdAt": "2020-05-01T14:12:07Z", "author": {"login": "danberindei"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanServerExtension.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.infinispan.server.test.junit5;\n+\n+import org.infinispan.server.test.core.InfinispanServerTestConfiguration;\n+import org.infinispan.server.test.core.TestClient;\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+public class InfinispanServerExtension implements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNjQzNg==", "bodyText": "ok", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418936436", "createdAt": "2020-05-02T09:31:21Z", "author": {"login": "karesti"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanServerExtension.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.infinispan.server.test.junit5;\n+\n+import org.infinispan.server.test.core.InfinispanServerTestConfiguration;\n+import org.infinispan.server.test.core.TestClient;\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+public class InfinispanServerExtension implements", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1ODEzOQ=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NjA3NA==", "bodyText": "ok", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418946074", "createdAt": "2020-05-02T11:19:19Z", "author": {"login": "karesti"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfinispanServerExtension.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.infinispan.server.test.junit5;\n+\n+import org.infinispan.server.test.core.InfinispanServerTestConfiguration;\n+import org.infinispan.server.test.core.TestClient;\n+import org.infinispan.server.test.core.TestServer;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+public class InfinispanServerExtension implements", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1ODEzOQ=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDQ1Mjk2OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfispanServerExtensionBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoyMTowMlrOGPK_xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToxOTozN1rOGPicNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MTk5MA==", "bodyText": "Is the container parameter still needed?\nWe also need a test to make sure it works, there is no usage ATM.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418561990", "createdAt": "2020-05-01T14:21:02Z", "author": {"login": "danberindei"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfispanServerExtensionBuilder.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.infinispan.server.test.junit5;\n+\n+import org.infinispan.server.test.core.AbstractServerConfigBuilder;\n+import org.infinispan.server.test.core.ServerRunMode;\n+\n+import static org.infinispan.server.test.core.AbstractInfinispanServerDriver.DEFAULT_CLUSTERED_INFINISPAN_CONFIG_FILE_NAME;\n+\n+/**\n+ * Infinispan Server Extension Builder\n+ *\n+ * @author Katia Aresti\n+ * @since 11\n+ */\n+public class InfispanServerExtensionBuilder extends AbstractServerConfigBuilder<InfispanServerExtensionBuilder> {\n+   /**\n+    * Use this method to instantiate a single clustered embedded server\n+    *\n+    * @return InfinispanServerExtension\n+    */\n+   public static InfinispanServerExtension server() {\n+      return server(true);\n+   }\n+\n+   public static InfinispanServerExtension server(boolean container) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NjEwMA==", "bodyText": "adding a test", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418946100", "createdAt": "2020-05-02T11:19:37Z", "author": {"login": "karesti"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfispanServerExtensionBuilder.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.infinispan.server.test.junit5;\n+\n+import org.infinispan.server.test.core.AbstractServerConfigBuilder;\n+import org.infinispan.server.test.core.ServerRunMode;\n+\n+import static org.infinispan.server.test.core.AbstractInfinispanServerDriver.DEFAULT_CLUSTERED_INFINISPAN_CONFIG_FILE_NAME;\n+\n+/**\n+ * Infinispan Server Extension Builder\n+ *\n+ * @author Katia Aresti\n+ * @since 11\n+ */\n+public class InfispanServerExtensionBuilder extends AbstractServerConfigBuilder<InfispanServerExtensionBuilder> {\n+   /**\n+    * Use this method to instantiate a single clustered embedded server\n+    *\n+    * @return InfinispanServerExtension\n+    */\n+   public static InfinispanServerExtension server() {\n+      return server(true);\n+   }\n+\n+   public static InfinispanServerExtension server(boolean container) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MTk5MA=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDQ1NzYzOnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfispanServerExtensionBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoyMjo0MVrOGPLCjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwOTozMTo0MlrOGPh2rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MjcwMw==", "bodyText": "Shouldn't we have more info about how to use the extension, or at least a @see InfinispanServerExtension?", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418562703", "createdAt": "2020-05-01T14:22:41Z", "author": {"login": "danberindei"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfispanServerExtensionBuilder.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.infinispan.server.test.junit5;\n+\n+import org.infinispan.server.test.core.AbstractServerConfigBuilder;\n+import org.infinispan.server.test.core.ServerRunMode;\n+\n+import static org.infinispan.server.test.core.AbstractInfinispanServerDriver.DEFAULT_CLUSTERED_INFINISPAN_CONFIG_FILE_NAME;\n+\n+/**\n+ * Infinispan Server Extension Builder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY0Mzg2OA==", "bodyText": "Dan,  possibly, but not in this PR please. I can create a JIRA to document and improve after this gets in.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418643868", "createdAt": "2020-05-01T17:23:26Z", "author": {"login": "karesti"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfispanServerExtensionBuilder.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.infinispan.server.test.junit5;\n+\n+import org.infinispan.server.test.core.AbstractServerConfigBuilder;\n+import org.infinispan.server.test.core.ServerRunMode;\n+\n+import static org.infinispan.server.test.core.AbstractInfinispanServerDriver.DEFAULT_CLUSTERED_INFINISPAN_CONFIG_FILE_NAME;\n+\n+/**\n+ * Infinispan Server Extension Builder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MjcwMw=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNjQ5NA==", "bodyText": "ok for the javadoc in the other file", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418936494", "createdAt": "2020-05-02T09:31:42Z", "author": {"login": "karesti"}, "path": "server/testdriver/junit5/src/main/java/org/infinispan/server/test/junit5/InfispanServerExtensionBuilder.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.infinispan.server.test.junit5;\n+\n+import org.infinispan.server.test.core.AbstractServerConfigBuilder;\n+import org.infinispan.server.test.core.ServerRunMode;\n+\n+import static org.infinispan.server.test.core.AbstractInfinispanServerDriver.DEFAULT_CLUSTERED_INFINISPAN_CONFIG_FILE_NAME;\n+\n+/**\n+ * Infinispan Server Extension Builder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MjcwMw=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDQ1ODI0OnYy", "diffSide": "RIGHT", "path": "server/testdriver/junit5/src/test/java/org/infinispan/server/test/junit5/InfinispanServerExtensionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoyMjo1OFrOGPLC8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwOTozMTo0OFrOGPh2vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MjgwMQ==", "bodyText": "Wrong indent", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418562801", "createdAt": "2020-05-01T14:22:58Z", "author": {"login": "danberindei"}, "path": "server/testdriver/junit5/src/test/java/org/infinispan/server/test/junit5/InfinispanServerExtensionTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.infinispan.server.test.junit5;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.configuration.ClientIntelligence;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.server.test.core.ServerRunMode;\n+import org.infinispan.server.test.core.TestClient;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class InfinispanServerExtensionTest {\n+\n+   @RegisterExtension\n+   static InfinispanServerExtension SERVER = InfispanServerExtensionBuilder.config(\"infinispan.xml\")\n+         .numServers(1)\n+         .runMode(ServerRunMode.EMBEDDED)\n+         .build();\n+\n+   @Test\n+   public void testSingleServer() {\n+      ConfigurationBuilder builder = new ConfigurationBuilder();\n+      builder.clientIntelligence(ClientIntelligence.BASIC);\n+      TestClient client = SERVER.client();\n+      RemoteCache<String, String> cache = client.hotrod().withClientConfiguration(builder).withCacheMode(CacheMode.DIST_SYNC).create();\n+            cache.put(\"k1\", \"v1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNjUxMA==", "bodyText": "oki", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r418936510", "createdAt": "2020-05-02T09:31:48Z", "author": {"login": "karesti"}, "path": "server/testdriver/junit5/src/test/java/org/infinispan/server/test/junit5/InfinispanServerExtensionTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.infinispan.server.test.junit5;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.configuration.ClientIntelligence;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.server.test.core.ServerRunMode;\n+import org.infinispan.server.test.core.TestClient;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class InfinispanServerExtensionTest {\n+\n+   @RegisterExtension\n+   static InfinispanServerExtension SERVER = InfispanServerExtensionBuilder.config(\"infinispan.xml\")\n+         .numServers(1)\n+         .runMode(ServerRunMode.EMBEDDED)\n+         .build();\n+\n+   @Test\n+   public void testSingleServer() {\n+      ConfigurationBuilder builder = new ConfigurationBuilder();\n+      builder.clientIntelligence(ClientIntelligence.BASIC);\n+      TestClient client = SERVER.client();\n+      RemoteCache<String, String> cache = client.hotrod().withClientConfiguration(builder).withCacheMode(CacheMode.DIST_SYNC).create();\n+            cache.put(\"k1\", \"v1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MjgwMQ=="}, "originalCommit": {"oid": "b329187d37693768ccbf3ecf95915cff78837d7c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODc2NzUxOnYy", "diffSide": "RIGHT", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/api/HotRodTestClientDriver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjoyNToxOVrOGSradg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToyMjo1MlrOGTUBZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzODgzOA==", "bodyText": "AFAICT AbstractInfinispanServerDriver.createUserFile runs with a non-default configuration just as well as with the default configuration, so this check isn't necessary.\nIn general I would prefer a method like isContainerRunWithDefaultServerConfig() to return true only if running with the default configuration that ships in the server image, not a configuration file that ships in the testdriver jar.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r422238838", "createdAt": "2020-05-08T16:25:19Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/api/HotRodTestClientDriver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.infinispan.server.test.api;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.configuration.ClientIntelligence;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.server.test.core.TestClient;\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ *  REST operations for the testing framework\n+ *\n+ * @author Tristan Tarrant\n+ * @since 10\n+ */\n+public class HotRodTestClientDriver extends BaseTestClientDriver<HotRodTestClientDriver> {\n+   private final TestServer testServer;\n+   private final TestClient testClient;\n+   ConfigurationBuilder clientConfiguration;\n+\n+   public HotRodTestClientDriver(TestServer testServer, TestClient testClient) {\n+      this.testServer = testServer;\n+      this.testClient = testClient;\n+\n+      ConfigurationBuilder builder = new ConfigurationBuilder();\n+      if(testServer.isContainerRunWithDefaultServerConfig()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae23f88540d921e88a91b3b4af3226fbf7ebd8d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1MTU5NA==", "bodyText": "it is necessary since I only want to add this configuration for container mode and when the default file is requested (which is secured). Otherwise, users need to concern too early about security. But I don't want to make this in embedded since default config files stuff are not supported yet, and there are XML files that are not secured in our tests. So if I add a user admin, I get hard error because the server is not secured in the test but I try to connect with a user. (check the other runs errors)\nI don't know how to make this better for now.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r422251594", "createdAt": "2020-05-08T16:50:31Z", "author": {"login": "karesti"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/api/HotRodTestClientDriver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.infinispan.server.test.api;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.configuration.ClientIntelligence;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.server.test.core.TestClient;\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ *  REST operations for the testing framework\n+ *\n+ * @author Tristan Tarrant\n+ * @since 10\n+ */\n+public class HotRodTestClientDriver extends BaseTestClientDriver<HotRodTestClientDriver> {\n+   private final TestServer testServer;\n+   private final TestClient testClient;\n+   ConfigurationBuilder clientConfiguration;\n+\n+   public HotRodTestClientDriver(TestServer testServer, TestClient testClient) {\n+      this.testServer = testServer;\n+      this.testClient = testClient;\n+\n+      ConfigurationBuilder builder = new ConfigurationBuilder();\n+      if(testServer.isContainerRunWithDefaultServerConfig()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzODgzOA=="}, "originalCommit": {"oid": "8ae23f88540d921e88a91b3b4af3226fbf7ebd8d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNDE2NQ==", "bodyText": "Thanks for the explanation Katia, I thought that the users were added for every configuration.", "url": "https://github.com/infinispan/infinispan/pull/8173#discussion_r422904165", "createdAt": "2020-05-11T09:22:52Z", "author": {"login": "danberindei"}, "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/api/HotRodTestClientDriver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.infinispan.server.test.api;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.configuration.ClientIntelligence;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.server.test.core.TestClient;\n+import org.infinispan.server.test.core.TestServer;\n+\n+/**\n+ *  REST operations for the testing framework\n+ *\n+ * @author Tristan Tarrant\n+ * @since 10\n+ */\n+public class HotRodTestClientDriver extends BaseTestClientDriver<HotRodTestClientDriver> {\n+   private final TestServer testServer;\n+   private final TestClient testClient;\n+   ConfigurationBuilder clientConfiguration;\n+\n+   public HotRodTestClientDriver(TestServer testServer, TestClient testClient) {\n+      this.testServer = testServer;\n+      this.testClient = testClient;\n+\n+      ConfigurationBuilder builder = new ConfigurationBuilder();\n+      if(testServer.isContainerRunWithDefaultServerConfig()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzODgzOA=="}, "originalCommit": {"oid": "8ae23f88540d921e88a91b3b4af3226fbf7ebd8d"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4251, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}