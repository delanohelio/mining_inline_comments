{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNTAwNTU5", "number": 8191, "title": "ISPN-11629 Initialize DataConversion storage media type only once", "bodyText": "https://issues.redhat.com/browse/ISPN-11629", "createdAt": "2020-04-13T06:43:13Z", "url": "https://github.com/infinispan/infinispan/pull/8191", "merged": true, "mergeCommit": {"oid": "bc0685841665ec5998172e683a914eb78f2ee0cb"}, "closed": true, "closedAt": "2020-05-21T07:59:01Z", "author": {"login": "danberindei"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXgBKFAFqTM5Mjc1MDIzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjJT07AFqTQxNTM0OTIzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzUwMjM2", "url": "https://github.com/infinispan/infinispan/pull/8191#pullrequestreview-392750236", "createdAt": "2020-04-14T09:20:51Z", "commit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOToyMDo1MVrOGFFxVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOToyMDo1MVrOGFFxVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MDYxMg==", "bodyText": "I don't think we can deprecate this and remove with no replacement, the problem is RemoteQuery uses a complicated Wrapper that is not part of core, and it drags lots of dependencies to Hibernate Search.", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r407990612", "createdAt": "2020-04-14T09:20:51Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -91,26 +94,29 @@ private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(null, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297"}, "originalPosition": 94}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/e426708ba9e03c8b6606d7877cd55a4887521297", "committedDate": "2020-04-13T06:42:37Z", "message": "ISPN-11629 Initialize DataConversion storage media type only once"}, "afterCommit": {"oid": "802b74bcac748eff4ab688fb7e286c5a501b6de2", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/802b74bcac748eff4ab688fb7e286c5a501b6de2", "committedDate": "2020-04-16T09:20:13Z", "message": "ISPN-11629 Deprecate DataConversion static instances"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "802b74bcac748eff4ab688fb7e286c5a501b6de2", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/802b74bcac748eff4ab688fb7e286c5a501b6de2", "committedDate": "2020-04-16T09:20:13Z", "message": "ISPN-11629 Deprecate DataConversion static instances"}, "afterCommit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd", "committedDate": "2020-04-22T07:22:08Z", "message": "ISPN-11629 Move conversion details out of CacheImpl and SimpleCacheImpl\n\n* Only the EncoderCache wrapper knows the request media type\n  or the encoder.\n* A new component, ConversionManager, knows the storage media type\n  and the default wrapper.\n* Inject the EncoderCache in CacheImpl until ISPN-11584 is fixed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNzkxMTMz", "url": "https://github.com/infinispan/infinispan/pull/8191#pullrequestreview-400791133", "createdAt": "2020-04-27T09:44:13Z", "commit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo0NDoxM1rOGMaTfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo0NDoxM1rOGMaTfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY2NzA2OA==", "bodyText": "14.0? Is this 2 years from now?  :)", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r415667068", "createdAt": "2020-04-27T09:44:13Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -43,152 +38,155 @@\n @Scope(Scopes.NONE)\n public final class DataConversion {\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNzk1Mzk0", "url": "https://github.com/infinispan/infinispan/pull/8191#pullrequestreview-400795394", "createdAt": "2020-04-27T09:50:02Z", "commit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1MDowMlrOGMai0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1Mjo1NVrOGMaqVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MDk5NA==", "bodyText": "Not sure about this name, this class is not doing conversion, but providing info about the storage type which does not change for all decorations a cache may have at runtime.", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r415670994", "createdAt": "2020-04-27T09:50:02Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/impl/ConversionManager.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.infinispan.encoding.impl;\n+\n+import org.infinispan.commons.dataconversion.ByteArrayWrapper;\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.Wrapper;\n+import org.infinispan.commons.marshall.Marshaller;\n+import org.infinispan.configuration.cache.Configuration;\n+import org.infinispan.configuration.cache.Configurations;\n+import org.infinispan.configuration.cache.ContentTypeConfiguration;\n+import org.infinispan.configuration.cache.EncodingConfiguration;\n+import org.infinispan.configuration.cache.StorageType;\n+import org.infinispan.configuration.global.GlobalConfiguration;\n+import org.infinispan.factories.KnownComponentNames;\n+import org.infinispan.factories.annotations.ComponentName;\n+import org.infinispan.factories.annotations.Inject;\n+import org.infinispan.factories.scopes.Scope;\n+import org.infinispan.factories.scopes.Scopes;\n+import org.infinispan.marshall.core.EncoderRegistry;\n+import org.infinispan.marshall.persistence.PersistenceMarshaller;\n+import org.infinispan.registry.InternalCacheRegistry;\n+\n+/**\n+ * Key/value conversion information.\n+ *\n+ * @author Dan Berindei\n+ * @since 11\n+ */\n+@Scope(Scopes.NAMED_CACHE)\n+public class ConversionManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MjUyOA==", "bodyText": "I just updated #8196", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r415672528", "createdAt": "2020-04-27T09:52:18Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -43,152 +38,155 @@\n @Scope(Scopes.NONE)\n public final class DataConversion {\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated\n    public static final DataConversion DEFAULT_KEY = new DataConversion(IdentityEncoder.INSTANCE, ByteArrayWrapper.INSTANCE, true);\n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated\n    public static final DataConversion DEFAULT_VALUE = new DataConversion(IdentityEncoder.INSTANCE, ByteArrayWrapper.INSTANCE, false);\n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0. For internal use only.\n+    */\n+   @Deprecated\n    public static final DataConversion IDENTITY_KEY = new DataConversion(IdentityEncoder.INSTANCE, IdentityWrapper.INSTANCE, true);\n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0. For internal use only.\n+    */\n+   @Deprecated\n    public static final DataConversion IDENTITY_VALUE = new DataConversion(IdentityEncoder.INSTANCE, IdentityWrapper.INSTANCE, false);\n \n    // On the origin node the conversion is initialized with the encoder/wrapper classes, on remote nodes with the ids\n-   private Class<? extends Encoder> encoderClass;\n-   private Class<? extends Wrapper> wrapperClass;\n-   private short encoderId;\n-   private byte wrapperId;\n-   private MediaType requestMediaType;\n-   private MediaType storageMediaType;\n-   private boolean isKey;\n-\n+   private final transient Class<? extends Encoder> encoderClass;\n+   // TODO Make final after removing overrideWrapper()\n+   private transient Class<? extends Wrapper> wrapperClass;\n+   private final short encoderId;\n+   private final byte wrapperId;\n+   private final MediaType requestMediaType;\n+   private final boolean isKey;\n+\n+   private transient MediaType storageMediaType;\n    private transient Encoder encoder;\n-   private transient Wrapper wrapper;\n+   private transient Wrapper customWrapper;\n    private transient Transcoder transcoder;\n    private transient EncoderRegistry encoderRegistry;\n+   private transient ConversionManager conversionManager;\n \n    private DataConversion(Class<? extends Encoder> encoderClass, Class<? extends Wrapper> wrapperClass,\n-                          MediaType requestMediaType, MediaType storageMediaType, boolean isKey) {\n+                          MediaType requestMediaType, boolean isKey) {\n       this.encoderClass = encoderClass;\n       this.wrapperClass = wrapperClass;\n       this.requestMediaType = requestMediaType;\n-      this.storageMediaType = storageMediaType;\n       this.isKey = isKey;\n+      this.encoderId = EncoderIds.NO_ENCODER;\n+      this.wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    /**\n     * Used for de-serialization\n     */\n-   private DataConversion(Short encoderId, Byte wrapperId, MediaType requestMediaType, MediaType storageMediaType,\n-                          boolean isKey) {\n+   private DataConversion(Short encoderId, Byte wrapperId, MediaType requestMediaType, boolean isKey) {\n       this.encoderId = encoderId;\n       this.wrapperId = wrapperId;\n       this.requestMediaType = requestMediaType;\n-      this.storageMediaType = storageMediaType;\n       this.isKey = isKey;\n+      this.encoderClass = null;\n+      this.wrapperClass = null;\n    }\n \n    private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.encoder = encoder;\n-      this.wrapper = wrapper;\n+      this.customWrapper = wrapper;\n       this.encoderClass = encoder.getClass();\n       this.wrapperClass = wrapper.getClass();\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated\n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated\n    public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegistry cr) {\n-      this.wrapper = null;\n+      this.customWrapper = null;\n       this.wrapperClass = newWrapper;\n       cr.wireDependencies(this);\n    }\n \n    /**\n-    * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n-      EncodingConfiguration encodingConfiguration = configuration.encoding();\n-      ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n-      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n-      MediaType mediaType = userMarshaller.mediaType();\n-      boolean heap = configuration.memory().storageType() == StorageType.OBJECT;\n-      // If explicitly configured, use the value provided\n-      if (contentTypeConfiguration.isMediaTypeChanged()) {\n-         return contentTypeConfiguration.mediaType();\n-      }\n-      // Indexed caches started by the server will assume application/protostream as storage media type\n-      if (!embeddedMode && configuration.indexing().enabled() && contentTypeConfiguration.mediaType() == null) {\n-         return MediaType.APPLICATION_PROTOSTREAM;\n-      }\n-      if (internalCache) return MediaType.APPLICATION_OBJECT;\n-\n-      if (embeddedMode) {\n-         return heap ? MediaType.APPLICATION_OBJECT : mediaType;\n-      }\n-\n-      return MediaType.APPLICATION_UNKNOWN;\n-   }\n-\n+   @Deprecated\n    public boolean isConversionSupported(MediaType mediaType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MjkxOQ==", "bodyText": "I just updated #8196, could you handle it first, since you are including that commit in this PR?", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r415672919", "createdAt": "2020-04-27T09:52:55Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -43,152 +38,155 @@\n @Scope(Scopes.NONE)\n public final class DataConversion {\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated\n    public static final DataConversion DEFAULT_KEY = new DataConversion(IdentityEncoder.INSTANCE, ByteArrayWrapper.INSTANCE, true);\n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated\n    public static final DataConversion DEFAULT_VALUE = new DataConversion(IdentityEncoder.INSTANCE, ByteArrayWrapper.INSTANCE, false);\n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0. For internal use only.\n+    */\n+   @Deprecated\n    public static final DataConversion IDENTITY_KEY = new DataConversion(IdentityEncoder.INSTANCE, IdentityWrapper.INSTANCE, true);\n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0. For internal use only.\n+    */\n+   @Deprecated\n    public static final DataConversion IDENTITY_VALUE = new DataConversion(IdentityEncoder.INSTANCE, IdentityWrapper.INSTANCE, false);\n \n    // On the origin node the conversion is initialized with the encoder/wrapper classes, on remote nodes with the ids\n-   private Class<? extends Encoder> encoderClass;\n-   private Class<? extends Wrapper> wrapperClass;\n-   private short encoderId;\n-   private byte wrapperId;\n-   private MediaType requestMediaType;\n-   private MediaType storageMediaType;\n-   private boolean isKey;\n-\n+   private final transient Class<? extends Encoder> encoderClass;\n+   // TODO Make final after removing overrideWrapper()\n+   private transient Class<? extends Wrapper> wrapperClass;\n+   private final short encoderId;\n+   private final byte wrapperId;\n+   private final MediaType requestMediaType;\n+   private final boolean isKey;\n+\n+   private transient MediaType storageMediaType;\n    private transient Encoder encoder;\n-   private transient Wrapper wrapper;\n+   private transient Wrapper customWrapper;\n    private transient Transcoder transcoder;\n    private transient EncoderRegistry encoderRegistry;\n+   private transient ConversionManager conversionManager;\n \n    private DataConversion(Class<? extends Encoder> encoderClass, Class<? extends Wrapper> wrapperClass,\n-                          MediaType requestMediaType, MediaType storageMediaType, boolean isKey) {\n+                          MediaType requestMediaType, boolean isKey) {\n       this.encoderClass = encoderClass;\n       this.wrapperClass = wrapperClass;\n       this.requestMediaType = requestMediaType;\n-      this.storageMediaType = storageMediaType;\n       this.isKey = isKey;\n+      this.encoderId = EncoderIds.NO_ENCODER;\n+      this.wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    /**\n     * Used for de-serialization\n     */\n-   private DataConversion(Short encoderId, Byte wrapperId, MediaType requestMediaType, MediaType storageMediaType,\n-                          boolean isKey) {\n+   private DataConversion(Short encoderId, Byte wrapperId, MediaType requestMediaType, boolean isKey) {\n       this.encoderId = encoderId;\n       this.wrapperId = wrapperId;\n       this.requestMediaType = requestMediaType;\n-      this.storageMediaType = storageMediaType;\n       this.isKey = isKey;\n+      this.encoderClass = null;\n+      this.wrapperClass = null;\n    }\n \n    private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.encoder = encoder;\n-      this.wrapper = wrapper;\n+      this.customWrapper = wrapper;\n       this.encoderClass = encoder.getClass();\n       this.wrapperClass = wrapper.getClass();\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated\n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated\n    public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegistry cr) {\n-      this.wrapper = null;\n+      this.customWrapper = null;\n       this.wrapperClass = newWrapper;\n       cr.wireDependencies(this);\n    }\n \n    /**\n-    * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n-      EncodingConfiguration encodingConfiguration = configuration.encoding();\n-      ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n-      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n-      MediaType mediaType = userMarshaller.mediaType();\n-      boolean heap = configuration.memory().storageType() == StorageType.OBJECT;\n-      // If explicitly configured, use the value provided\n-      if (contentTypeConfiguration.isMediaTypeChanged()) {\n-         return contentTypeConfiguration.mediaType();\n-      }\n-      // Indexed caches started by the server will assume application/protostream as storage media type\n-      if (!embeddedMode && configuration.indexing().enabled() && contentTypeConfiguration.mediaType() == null) {\n-         return MediaType.APPLICATION_PROTOSTREAM;\n-      }\n-      if (internalCache) return MediaType.APPLICATION_OBJECT;\n-\n-      if (embeddedMode) {\n-         return heap ? MediaType.APPLICATION_OBJECT : mediaType;\n-      }\n-\n-      return MediaType.APPLICATION_UNKNOWN;\n-   }\n-\n+   @Deprecated\n    public boolean isConversionSupported(MediaType mediaType) {\n-      return storageMediaType == null || encoderRegistry.isConversionSupported(storageMediaType, mediaType);\n+      if (encoderRegistry == null) return false;\n+      return encoderRegistry.isConversionSupported(storageMediaType, mediaType);\n    }\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated\n    public Object convert(Object o, MediaType from, MediaType to) {\n-      if (o == null) return null;\n-      if (encoderRegistry == null) return o;\n-      Transcoder transcoder = encoderRegistry.getTranscoder(from, to);\n-      return transcoder.transcode(o, from, to);\n+      return encoderRegistry.convert(o, from, to);\n    }\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd"}, "originalPosition": 202}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd", "committedDate": "2020-04-22T07:22:08Z", "message": "ISPN-11629 Move conversion details out of CacheImpl and SimpleCacheImpl\n\n* Only the EncoderCache wrapper knows the request media type\n  or the encoder.\n* A new component, ConversionManager, knows the storage media type\n  and the default wrapper.\n* Inject the EncoderCache in CacheImpl until ISPN-11584 is fixed."}, "afterCommit": {"oid": "5dfbc3a9b911790d61387f738e0060f68e3bec31", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/5dfbc3a9b911790d61387f738e0060f68e3bec31", "committedDate": "2020-04-27T16:05:05Z", "message": "ISPN-11629 Move conversion details out of CacheImpl and SimpleCacheImpl\n\n* Only the EncoderCache wrapper knows the request media type\n  or the encoder.\n* A new component, ConversionManager, knows the storage media type\n  and the default wrapper.\n* Inject the EncoderCache in CacheImpl until ISPN-11584 is fixed."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5dfbc3a9b911790d61387f738e0060f68e3bec31", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/5dfbc3a9b911790d61387f738e0060f68e3bec31", "committedDate": "2020-04-27T16:05:05Z", "message": "ISPN-11629 Move conversion details out of CacheImpl and SimpleCacheImpl\n\n* Only the EncoderCache wrapper knows the request media type\n  or the encoder.\n* A new component, ConversionManager, knows the storage media type\n  and the default wrapper.\n* Inject the EncoderCache in CacheImpl until ISPN-11584 is fixed."}, "afterCommit": {"oid": "c4a9331f0502b89f9603b0dcbb1b52a048386ade", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/c4a9331f0502b89f9603b0dcbb1b52a048386ade", "committedDate": "2020-04-30T14:14:41Z", "message": "ISPN-11629 Move conversion details out of CacheImpl and SimpleCacheImpl\n\n* Only the EncoderCache wrapper knows the request media type\n  or the encoder.\n* A new component, StorageConfigurationManager, knows the storage\n  media type and the default wrapper.\n* Inject the EncoderCache in CacheImpl until ISPN-11584 is fixed."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4a9331f0502b89f9603b0dcbb1b52a048386ade", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/c4a9331f0502b89f9603b0dcbb1b52a048386ade", "committedDate": "2020-04-30T14:14:41Z", "message": "ISPN-11629 Move conversion details out of CacheImpl and SimpleCacheImpl\n\n* Only the EncoderCache wrapper knows the request media type\n  or the encoder.\n* A new component, StorageConfigurationManager, knows the storage\n  media type and the default wrapper.\n* Inject the EncoderCache in CacheImpl until ISPN-11584 is fixed."}, "afterCommit": {"oid": "be827cbf82ad8d5215fb796398008061ced5f406", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/be827cbf82ad8d5215fb796398008061ced5f406", "committedDate": "2020-05-07T13:51:13Z", "message": "ISPN-11629 Move conversion details out of CacheImpl and SimpleCacheImpl\n\n* Only the EncoderCache wrapper knows the request media type\n  or the encoder.\n* A new component, StorageConfigurationManager, knows the storage\n  media type and the default wrapper.\n* Inject the EncoderCache in CacheImpl until ISPN-11584 is fixed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ee8477959a27e483ee4c25fc6df2248d98e2eaa", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/4ee8477959a27e483ee4c25fc6df2248d98e2eaa", "committedDate": "2020-05-20T08:51:12Z", "message": "ISPN-11689 Remove AdvancedCache methods deprecated in 9.4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c62825158cb70a5f5189a0f9a10d13039bef4230", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/c62825158cb70a5f5189a0f9a10d13039bef4230", "committedDate": "2020-05-20T08:51:12Z", "message": "ISPN-11629 Deprecate AdvancedCache.withWrapping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d54a4f3eb188b44daa40c5fc2ae87a8ea253d922", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/d54a4f3eb188b44daa40c5fc2ae87a8ea253d922", "committedDate": "2020-05-20T08:51:12Z", "message": "ISPN-11629 Initialize DataConversion storage media type only once"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a483749e87ff503cd7b6c381c1ccf8f2350765e8", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/a483749e87ff503cd7b6c381c1ccf8f2350765e8", "committedDate": "2020-05-20T08:51:12Z", "message": "ISPN-11629 Deprecate DataConversion static instances"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db8d37fd6fc472a29e42142f2ff0e972d87742dc", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/db8d37fd6fc472a29e42142f2ff0e972d87742dc", "committedDate": "2020-05-20T08:51:13Z", "message": "ISPN-11629 Set component registry in EncoderCache constructor\n\n* Remove AdvancedCacheWrapper interface\n* InternalCacheFactory.buildEncodingCache happens too early,\n  so injection is also needed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99b66e76656f239529351d7e21e6cd599b4412bf", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/99b66e76656f239529351d7e21e6cd599b4412bf", "committedDate": "2020-05-20T08:51:13Z", "message": "ISPN-11629 Move conversion details out of CacheImpl and SimpleCacheImpl\n\n* Only the EncoderCache wrapper knows the request media type\n  or the encoder.\n* A new component, StorageConfigurationManager, knows the storage\n  media type and the default wrapper.\n* Inject the EncoderCache in CacheImpl until ISPN-11584 is fixed."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be827cbf82ad8d5215fb796398008061ced5f406", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/be827cbf82ad8d5215fb796398008061ced5f406", "committedDate": "2020-05-07T13:51:13Z", "message": "ISPN-11629 Move conversion details out of CacheImpl and SimpleCacheImpl\n\n* Only the EncoderCache wrapper knows the request media type\n  or the encoder.\n* A new component, StorageConfigurationManager, knows the storage\n  media type and the default wrapper.\n* Inject the EncoderCache in CacheImpl until ISPN-11584 is fixed."}, "afterCommit": {"oid": "99b66e76656f239529351d7e21e6cd599b4412bf", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/99b66e76656f239529351d7e21e6cd599b4412bf", "committedDate": "2020-05-20T08:51:13Z", "message": "ISPN-11629 Move conversion details out of CacheImpl and SimpleCacheImpl\n\n* Only the EncoderCache wrapper knows the request media type\n  or the encoder.\n* A new component, StorageConfigurationManager, knows the storage\n  media type and the default wrapper.\n* Inject the EncoderCache in CacheImpl until ISPN-11584 is fixed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MzQ5MjMx", "url": "https://github.com/infinispan/infinispan/pull/8191#pullrequestreview-415349231", "createdAt": "2020-05-20T13:44:13Z", "commit": {"oid": "99b66e76656f239529351d7e21e6cd599b4412bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 849, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}