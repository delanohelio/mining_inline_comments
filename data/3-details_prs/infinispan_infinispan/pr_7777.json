{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MTEwNzI4", "number": 7777, "title": "[9.4.x] REPL read opt perf", "bodyText": "", "createdAt": "2020-01-22T23:19:47Z", "url": "https://github.com/infinispan/infinispan/pull/7777", "merged": true, "mergeCommit": {"oid": "b2f78bb66f351803765aa9d8b37f235b30cff36f"}, "closed": true, "closedAt": "2020-02-07T17:03:48Z", "author": {"login": "wburns"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9RE-oABqjI5NzUzMTM3MzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCDTeVgFqTM1NTMzNjU1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f111d9118b10ae7d92d541c2642c1805afea108e", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/f111d9118b10ae7d92d541c2642c1805afea108e", "committedDate": "2020-01-23T17:43:11Z", "message": "Revert \"baseline without repl opt\"\n\nThis reverts commit 485d2308d792297738598e64d3157b99606d312f."}, "afterCommit": {"oid": "5e766191abc0a0221d4a3fbb40bf33f12392f273", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/5e766191abc0a0221d4a3fbb40bf33f12392f273", "committedDate": "2020-01-23T21:17:59Z", "message": "check for segmentation being disabled"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf6c34b93921cd1a1433cb0566b021d7024f4a58", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/cf6c34b93921cd1a1433cb0566b021d7024f4a58", "committedDate": "2020-02-04T18:01:05Z", "message": "ISPN-11209 Max Idle changes caused a REPL read performance regression\n\n* Make sure to not calculate segment if segmentation is disabled\n* Add in interface to prevent additional if/else blocks"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a44ae6ec7f0b405ceb9ced95b377245197176881", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/a44ae6ec7f0b405ceb9ced95b377245197176881", "committedDate": "2020-01-31T18:01:37Z", "message": "make sure to use the appropriate key partitioner for real!"}, "afterCommit": {"oid": "cf6c34b93921cd1a1433cb0566b021d7024f4a58", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/cf6c34b93921cd1a1433cb0566b021d7024f4a58", "committedDate": "2020-02-04T18:01:05Z", "message": "ISPN-11209 Max Idle changes caused a REPL read performance regression\n\n* Make sure to not calculate segment if segmentation is disabled\n* Add in interface to prevent additional if/else blocks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MzM2NTUz", "url": "https://github.com/infinispan/infinispan/pull/7777#pullrequestreview-355336553", "createdAt": "2020-02-07T18:04:55Z", "commit": {"oid": "cf6c34b93921cd1a1433cb0566b021d7024f4a58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODowNDo1NVrOFnFfxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODowNDo1NVrOFnFfxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyODgzOA==", "bodyText": "Shouldn't we check if (isCompletedSuccessfully(stage)) first?", "url": "https://github.com/infinispan/infinispan/pull/7777#discussion_r376528838", "createdAt": "2020-02-07T18:04:55Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/InternalCacheFactory.java", "diffHunk": "@@ -311,56 +312,18 @@ public boolean containsKey(Object key) {\n       }\n \n       @Override\n-      public CompletableFuture<V> getAsync(K key) {\n-         return getCacheEntryAsync(key)\n-               .thenApply(ice -> ice != null ? ice.getValue() : null);\n-      }\n-\n-      private InternalCacheEntry<K, V> internalPeekCacheEntry(Object key, int segment) {\n+      public InternalCacheEntry<K, V> getCacheEntry(Object key) {\n          assertKeyNotNull(key);\n          checkCanRun(cache, cache.getName());\n-         return getDataContainer().peek(segment, key);\n-      }\n-\n-      @Override\n-      public InternalCacheEntry<K, V> getCacheEntry(Object key) {\n-         int segment = keyPartitioner.getSegment(key);\n-         InternalCacheEntry<K, V> ice = internalPeekCacheEntry(key, segment);\n-         if (ice != null) {\n-            if (ice.canExpire()) {\n-               CompletionStage<Boolean> stage = expirationManager.handlePossibleExpiration(ice, segment, false);\n-               if (CompletionStages.join(stage)) {\n-                  ice = null;\n-               }\n-            }\n-         }\n-         return ice;\n-      }\n-\n-      @Override\n-      public CompletableFuture<CacheEntry<K, V>> getCacheEntryAsync(Object key) {\n          int segment = keyPartitioner.getSegment(key);\n-         InternalCacheEntry<K, V> ice = internalPeekCacheEntry(key, segment);\n-         if (ice == null) {\n-            return CompletableFutures.completedNull();\n-         }\n-         if (ice.canExpire()) {\n+         InternalCacheEntry<K, V> ice = getDataContainer().peek(segment, key);\n+         if (ice != null && ice.canExpire()) {\n             CompletionStage<Boolean> stage = expirationManager.handlePossibleExpiration(ice, segment, false);\n-            if (CompletionStages.isCompletedSuccessfully(stage)) {\n-               if (CompletionStages.join(stage)) {\n-                  return CompletableFutures.completedNull();\n-               }\n-               return CompletableFuture.completedFuture(ice);\n-            } else {\n-               return stage.thenApply(expired -> {\n-                  if (expired == Boolean.TRUE) {\n-                     return null;\n-                  }\n-                  return (CacheEntry<K, V>) ice;\n-               }).toCompletableFuture();\n+            if (CompletionStages.join(stage)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf6c34b93921cd1a1433cb0566b021d7024f4a58"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1236, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}