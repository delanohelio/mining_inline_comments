{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MDI0MjM3", "number": 8600, "title": "ISPN-12178 Query broadcast blocks on the non-blocking executor", "bodyText": "https://issues.redhat.com/browse/ISPN-12178", "createdAt": "2020-07-30T09:43:41Z", "url": "https://github.com/infinispan/infinispan/pull/8600", "merged": true, "mergeCommit": {"oid": "5d0bf286d76bda64ddb918ec31872ea9f54070d6"}, "closed": true, "closedAt": "2020-08-03T03:26:32Z", "author": {"login": "gustavonalle"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6UmiWgFqTQ1OTE4NjkyMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6Wvl1gFqTQ1OTMwMTU5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MTg2OTIx", "url": "https://github.com/infinispan/infinispan/pull/8600#pullrequestreview-459186921", "createdAt": "2020-07-31T13:47:41Z", "commit": {"oid": "0e1a203776f0f28753e7f6c2d629d5dca4775947"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo0Nzo0MVrOG6JMCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1MDo0OFrOG6JTwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMTEyOQ==", "bodyText": "I worry that the blocking is now just relegated to this call instead. We really need https://issues.redhat.com/browse/ISPN-11731 to verify these are all fixed.", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463621129", "createdAt": "2020-07-31T13:47:41Z", "author": {"login": "wburns"}, "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryInvoker.java", "diffHunk": "@@ -101,9 +72,8 @@ QueryResponse unicast(Address address, SegmentsClusteredQueryCommand cmd) {\n \n       List<QueryResponse> results = new ArrayList<>();\n       try {\n-         results.add(localResponse.get());\n-         List<QueryResponse> responseList = sequence(futureRemoteResponses).get();\n-         results.addAll(responseList);\n+         results.add(await(localResponse.toCompletableFuture()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1a203776f0f28753e7f6c2d629d5dca4775947"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMjg4MA==", "bodyText": "I would recommend putting something a bit more descriptive for the second argument, maybe CQCreateEagerQuery#collectKeys ?", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463622880", "createdAt": "2020-07-31T13:50:29Z", "author": {"login": "wburns"}, "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java", "diffHunk": "@@ -18,38 +18,35 @@\n final class CQCreateEagerQuery extends CQWorker {\n \n    @Override\n-   QueryResponse perform(BitSet segments) {\n+   CompletionStage<QueryResponse> perform(BitSet segments) {\n       SearchQueryBuilder query = queryDefinition.getSearchQuery();\n       setFilter(segments);\n \n-      NodeTopDocs nodeTopDocs = (query.hasEntityProjection()) ? collectKeys(query) : collectProjections(query);\n-      if (nodeTopDocs == null) {\n-         return new QueryResponse(0);\n-      }\n-      return new QueryResponse(nodeTopDocs);\n+      CompletionStage<NodeTopDocs> nodeTopDocs = (query.hasEntityProjection()) ? collectKeys(query) : collectProjections(query);\n+\n+      return nodeTopDocs.thenApply(QueryResponse::new);\n    }\n \n-   private NodeTopDocs collectKeys(SearchQueryBuilder query) {\n-      LuceneSearchResult<DocumentReference> queryResult = query.documentReference().fetchAll();\n-      if (queryResult.totalHitCount() == 0L) {\n-         return null;\n-      }\n-\n-      Object[] keys = queryResult.hits().stream()\n-            .map(hit -> hit.id())\n-            .map(id -> stringToKey(id))\n-            .toArray(Object[]::new);\n-      return new NodeTopDocs(cache.getRpcManager().getAddress(), queryResult.topDocs(), keys, null);\n+   private CompletionStage<NodeTopDocs> collectKeys(SearchQueryBuilder query) {\n+      return blockingManager.supplyBlocking(() -> query.documentReference().fetchAll(), this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1a203776f0f28753e7f6c2d629d5dca4775947"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMzEwNA==", "bodyText": "Same here about second argument.", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463623104", "createdAt": "2020-07-31T13:50:48Z", "author": {"login": "wburns"}, "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java", "diffHunk": "@@ -18,38 +18,35 @@\n final class CQCreateEagerQuery extends CQWorker {\n \n    @Override\n-   QueryResponse perform(BitSet segments) {\n+   CompletionStage<QueryResponse> perform(BitSet segments) {\n       SearchQueryBuilder query = queryDefinition.getSearchQuery();\n       setFilter(segments);\n \n-      NodeTopDocs nodeTopDocs = (query.hasEntityProjection()) ? collectKeys(query) : collectProjections(query);\n-      if (nodeTopDocs == null) {\n-         return new QueryResponse(0);\n-      }\n-      return new QueryResponse(nodeTopDocs);\n+      CompletionStage<NodeTopDocs> nodeTopDocs = (query.hasEntityProjection()) ? collectKeys(query) : collectProjections(query);\n+\n+      return nodeTopDocs.thenApply(QueryResponse::new);\n    }\n \n-   private NodeTopDocs collectKeys(SearchQueryBuilder query) {\n-      LuceneSearchResult<DocumentReference> queryResult = query.documentReference().fetchAll();\n-      if (queryResult.totalHitCount() == 0L) {\n-         return null;\n-      }\n-\n-      Object[] keys = queryResult.hits().stream()\n-            .map(hit -> hit.id())\n-            .map(id -> stringToKey(id))\n-            .toArray(Object[]::new);\n-      return new NodeTopDocs(cache.getRpcManager().getAddress(), queryResult.topDocs(), keys, null);\n+   private CompletionStage<NodeTopDocs> collectKeys(SearchQueryBuilder query) {\n+      return blockingManager.supplyBlocking(() -> query.documentReference().fetchAll(), this)\n+            .thenApply(queryResult -> {\n+               if (queryResult.totalHitCount() == 0L) return null;\n+\n+               Object[] keys = queryResult.hits().stream()\n+                     .map(DocumentReference::id)\n+                     .map(this::stringToKey)\n+                     .toArray(Object[]::new);\n+               return new NodeTopDocs(cache.getRpcManager().getAddress(), queryResult.topDocs(), keys, null);\n+            });\n    }\n \n-   private NodeTopDocs collectProjections(SearchQueryBuilder query) {\n-      LuceneSearchResult<?> queryResult = query.build().fetchAll();\n-      if (queryResult.totalHitCount() == 0L) {\n-         return null;\n-      }\n+   private CompletionStage<NodeTopDocs> collectProjections(SearchQueryBuilder query) {\n+      return blockingManager.supplyBlocking(() -> query.build().fetchAll(), this).thenApply(queryResult -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1a203776f0f28753e7f6c2d629d5dca4775947"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da5870d1695ad18810a10b8edfaf62af5be8a1e3", "author": {"user": {"login": "gustavonalle", "name": "Gustavo"}}, "url": "https://github.com/infinispan/infinispan/commit/da5870d1695ad18810a10b8edfaf62af5be8a1e3", "committedDate": "2020-07-31T14:51:07Z", "message": "ISPN-12178 Query broadcast blocks on the non-blocking executor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e1a203776f0f28753e7f6c2d629d5dca4775947", "author": {"user": {"login": "gustavonalle", "name": "Gustavo"}}, "url": "https://github.com/infinispan/infinispan/commit/0e1a203776f0f28753e7f6c2d629d5dca4775947", "committedDate": "2020-07-30T09:39:11Z", "message": "ISPN-12178 Query broadcast blocks on the non-blocking executor"}, "afterCommit": {"oid": "da5870d1695ad18810a10b8edfaf62af5be8a1e3", "author": {"user": {"login": "gustavonalle", "name": "Gustavo"}}, "url": "https://github.com/infinispan/infinispan/commit/da5870d1695ad18810a10b8edfaf62af5be8a1e3", "committedDate": "2020-07-31T14:51:07Z", "message": "ISPN-12178 Query broadcast blocks on the non-blocking executor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgyNzc1", "url": "https://github.com/infinispan/infinispan/pull/8600#pullrequestreview-459282775", "createdAt": "2020-07-31T15:54:50Z", "commit": {"oid": "da5870d1695ad18810a10b8edfaf62af5be8a1e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1NDo1MFrOG6NkmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1NDo1MFrOG6NkmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5Mjk1Mw==", "bodyText": "Also noticed that it seems the asyncExecutor can be removed from this code and subsequent callers.", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463692953", "createdAt": "2020-07-31T15:54:50Z", "author": {"login": "wburns"}, "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryInvoker.java", "diffHunk": "@@ -116,26 +86,8 @@ QueryResponse unicast(Address address, SegmentsClusteredQueryCommand cmd) {\n       return results;\n    }\n \n-   private Future<QueryResponse> localInvoke(SegmentsClusteredQueryCommand cmd) {\n-      return asyncExecutor.submit(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da5870d1695ad18810a10b8edfaf62af5be8a1e3"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4a48f2210419ca51ce6f82059a9ec97e9f64153", "author": {"user": {"login": "gustavonalle", "name": "Gustavo"}}, "url": "https://github.com/infinispan/infinispan/commit/e4a48f2210419ca51ce6f82059a9ec97e9f64153", "committedDate": "2020-07-31T16:15:23Z", "message": "ISPN-12178 Remove unused fields and parameters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MzAxNTk4", "url": "https://github.com/infinispan/infinispan/pull/8600#pullrequestreview-459301598", "createdAt": "2020-07-31T16:23:35Z", "commit": {"oid": "e4a48f2210419ca51ce6f82059a9ec97e9f64153"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 561, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}