{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NTMwMDg0", "number": 8659, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTozNTozNVrOEmeYdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0ODoxNVrOEme0zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Nzc5MTI2OnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/kubernetes/Describe.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTozNTozNVrOHWhIiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTozNTozNVrOHWhIiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3MzU3Nw==", "bodyText": "Comments can be removed", "url": "https://github.com/infinispan/infinispan/pull/8659#discussion_r493373577", "createdAt": "2020-09-23T09:35:35Z", "author": {"login": "ryanemerson"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/kubernetes/Describe.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package org.infinispan.cli.commands.kubernetes;\n+\n+import static org.infinispan.cli.commands.kubernetes.Kube.INFINISPAN_SERVICE_CRD;\n+import static org.infinispan.cli.commands.kubernetes.Kube.get;\n+\n+import java.io.PrintStream;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.option.Option;\n+import org.infinispan.cli.commands.CliCommand;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.impl.KubernetesContextImpl;\n+import org.kohsuke.MetaInfServices;\n+\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(\n+      name = Describe.CMD,\n+      description = \"Describes a resource\",\n+      groupCommands = {\n+            Describe.Service.class,\n+      })\n+public class Describe extends CliCommand {\n+   public static final String CMD = \"describe\";\n+\n+   @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      return CommandResult.FAILURE;\n+   }\n+\n+   @MetaInfServices(Command.class)\n+   @CommandDefinition(name = Service.CMD, description = \"Describes a service\")\n+   public static class Service extends CliCommand {\n+      public static final String CMD = \"service\";\n+\n+      @Option(shortName = 'n', description = \"Select the namespace\")\n+      String namespace;\n+\n+      @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+         KubernetesClient client = ((KubernetesContextImpl)invocation.getContext()).getKubernetesClient();\n+         Map<String, Object> resource = client.customResource(INFINISPAN_SERVICE_CRD).list(namespace);\n+         List<Map<String, Object>> items = get(resource, \"items\");\n+         PrintStream out = invocation.getShellOutput();\n+         out.printf(\"%-32s %-16s %-9s %-16s%n\", \"NAME\", \"NAMESPACE\", \"REPLICAS\", \"STATUS\");\n+         items.forEach(item -> {\n+            out.printf(\"%-32s %-16s %-9s \", get(item, \"metadata.name\"), get(item, \"metadata.namespace\"), get(item, \"spec.replicas\"));\n+         /*\n+         String secretName = get(item, \"spec.security.endpointSecretName\");\n+         Secret secret = getSecret(client, namespace, secretName);\n+         decodeIdentitiesSecret(secret, (u, p) -> out.printf(\"%16s %16s\", u, p));*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "162eab2cf5917756bf57e0678bae9ca393cc8eb0"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Nzg1ODgyOnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/util/aesh/graal/GraalReflectionCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0NzoyMVrOHWh0bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0NzoyMVrOHWh0bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4NDgxMw==", "bodyText": "Are the contents of this package still necessary with the infinispan-quarkus PR?", "url": "https://github.com/infinispan/infinispan/pull/8659#discussion_r493384813", "createdAt": "2020-09-23T09:47:21Z", "author": {"login": "ryanemerson"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/util/aesh/graal/GraalReflectionCommand.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.infinispan.cli.util.aesh.graal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "162eab2cf5917756bf57e0678bae9ca393cc8eb0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Nzg2MzgwOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/Server.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0ODoxNVrOHWh3sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0ODoxNVrOHWh3sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4NTY0OQ==", "bodyText": "Unused, causing CI failure", "url": "https://github.com/infinispan/infinispan/pull/8659#discussion_r493385649", "createdAt": "2020-09-23T09:48:15Z", "author": {"login": "ryanemerson"}, "path": "server/runtime/src/main/java/org/infinispan/server/Server.java", "diffHunk": "@@ -76,6 +76,7 @@\n import org.infinispan.server.router.routes.hotrod.HotRodServerRouteDestination;\n import org.infinispan.server.router.routes.rest.RestServerRouteDestination;\n import org.infinispan.server.router.routes.singleport.SinglePortRouteSource;\n+import org.infinispan.server.security.http.localuser.WildFlyElytronHttpLocalUserProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "162eab2cf5917756bf57e0678bae9ca393cc8eb0"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3924, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}