{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NTc4NTY2", "number": 8325, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTozNjozM1rOD9j4nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTozNjozM1rOD9j4nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODc3NjYxOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/test/java/org/infinispan/server/license/LicenseTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTozNjozM1rOGXITTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMTo0NjowM1rOGXcjeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNjQ0NQ==", "bodyText": "comment ?", "url": "https://github.com/infinispan/infinispan/pull/8325#discussion_r426906445", "createdAt": "2020-05-18T21:36:33Z", "author": {"login": "karesti"}, "path": "server/runtime/src/test/java/org/infinispan/server/license/LicenseTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.infinispan.server.license;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class LicenseTest {\n+\n+   private static final Pattern TR_REGEX = Pattern.compile(\"<tr>(.+?)</tr>\", Pattern.DOTALL);\n+   private static final Pattern TD_VALUE_REGEX = Pattern.compile(\"<td>(.+?)</td>\", Pattern.DOTALL);\n+   private static final String SERVER_OUTPUT_PATH = System.getProperty(\"server.output.dir\");\n+\n+   @Test\n+   public void testLicense() throws IOException {\n+\n+      List<String> libs = new ArrayList<>();\n+      Files.list(getLibDir())\n+            .filter(Files::isRegularFile).collect(Collectors.toList())\n+            .forEach(jar -> libs.add(jar.getFileName().toString()));\n+\n+      String html = new String(Files.readAllBytes(getDependencyHtmlFile()));\n+      Matcher trMatcher = TR_REGEX.matcher(html);\n+      List<String> htmlDependencies = new ArrayList<>();\n+      while (trMatcher.find()) {\n+         String trValue = trMatcher.group(1);\n+         Matcher tdMatcher = TD_VALUE_REGEX.matcher(trValue);\n+         if (tdMatcher.find()) {\n+            //String group = tdMatcher.group(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef5f792556b09d12b57dfe81d496bd771d62432"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIzODI2NA==", "bodyText": "I would like to keep it because if we need the group who will know where is ?", "url": "https://github.com/infinispan/infinispan/pull/8325#discussion_r427238264", "createdAt": "2020-05-19T11:46:03Z", "author": {"login": "diegolovison"}, "path": "server/runtime/src/test/java/org/infinispan/server/license/LicenseTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.infinispan.server.license;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class LicenseTest {\n+\n+   private static final Pattern TR_REGEX = Pattern.compile(\"<tr>(.+?)</tr>\", Pattern.DOTALL);\n+   private static final Pattern TD_VALUE_REGEX = Pattern.compile(\"<td>(.+?)</td>\", Pattern.DOTALL);\n+   private static final String SERVER_OUTPUT_PATH = System.getProperty(\"server.output.dir\");\n+\n+   @Test\n+   public void testLicense() throws IOException {\n+\n+      List<String> libs = new ArrayList<>();\n+      Files.list(getLibDir())\n+            .filter(Files::isRegularFile).collect(Collectors.toList())\n+            .forEach(jar -> libs.add(jar.getFileName().toString()));\n+\n+      String html = new String(Files.readAllBytes(getDependencyHtmlFile()));\n+      Matcher trMatcher = TR_REGEX.matcher(html);\n+      List<String> htmlDependencies = new ArrayList<>();\n+      while (trMatcher.find()) {\n+         String trValue = trMatcher.group(1);\n+         Matcher tdMatcher = TD_VALUE_REGEX.matcher(trValue);\n+         if (tdMatcher.find()) {\n+            //String group = tdMatcher.group(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNjQ0NQ=="}, "originalCommit": {"oid": "cef5f792556b09d12b57dfe81d496bd771d62432"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4218, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}