{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NTc1MzY3", "number": 8571, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTo0Njo1MVrOEQr3Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTowMjoxM1rOERv_Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTMxMzMxOnYy", "diffSide": "LEFT", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/event/ClientListenerWithDslFilterObjectStorageTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTo0Njo1MVrOG0-Xtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODo1OToxMFrOG2B9Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMTAxNA==", "bodyText": "I think you don't have to remove this, just replace LUCENE_CURRENT with LATEST.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458201014", "createdAt": "2020-07-21T15:46:51Z", "author": {"login": "yrodiere"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/event/ClientListenerWithDslFilterObjectStorageTest.java", "diffHunk": "@@ -81,8 +81,7 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n       cfgBuilder.encoding().key().mediaType(MediaType.APPLICATION_OBJECT_TYPE);\n       cfgBuilder.encoding().value().mediaType(MediaType.APPLICATION_OBJECT_TYPE);\n       cfgBuilder.indexing().enable()\n-            .addProperty(\"default.directory_provider\", \"local-heap\")\n-            .addProperty(\"lucene_version\", \"LUCENE_CURRENT\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b82c7749dc5e80335c5e14daeb6b7be47f9697"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMTYwMg==", "bodyText": "Though this property is indeed not necessary (LATEST is the default)", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458201602", "createdAt": "2020-07-21T15:47:36Z", "author": {"login": "yrodiere"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/event/ClientListenerWithDslFilterObjectStorageTest.java", "diffHunk": "@@ -81,8 +81,7 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n       cfgBuilder.encoding().key().mediaType(MediaType.APPLICATION_OBJECT_TYPE);\n       cfgBuilder.encoding().value().mediaType(MediaType.APPLICATION_OBJECT_TYPE);\n       cfgBuilder.indexing().enable()\n-            .addProperty(\"default.directory_provider\", \"local-heap\")\n-            .addProperty(\"lucene_version\", \"LUCENE_CURRENT\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMTAxNA=="}, "originalCommit": {"oid": "45b82c7749dc5e80335c5e14daeb6b7be47f9697"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0OTU0Mw==", "bodyText": "Shall I replace the old LUCENE_CURRENT with the LATEST? I removed them since in general I prefer have less code than more :P and in this case LATEST is the default one", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459249543", "createdAt": "2020-07-23T06:59:39Z", "author": {"login": "fax4ever"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/event/ClientListenerWithDslFilterObjectStorageTest.java", "diffHunk": "@@ -81,8 +81,7 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n       cfgBuilder.encoding().key().mediaType(MediaType.APPLICATION_OBJECT_TYPE);\n       cfgBuilder.encoding().value().mediaType(MediaType.APPLICATION_OBJECT_TYPE);\n       cfgBuilder.indexing().enable()\n-            .addProperty(\"default.directory_provider\", \"local-heap\")\n-            .addProperty(\"lucene_version\", \"LUCENE_CURRENT\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMTAxNA=="}, "originalCommit": {"oid": "45b82c7749dc5e80335c5e14daeb6b7be47f9697"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1NjIxNQ==", "bodyText": "I think it was there to avoid the warning, maybe? I just mentioned this because I was surprised by this seemingly unnecessary change.\nAnyway, it's probably not worth your time. Let's dropt his, sorry for the noise.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459256215", "createdAt": "2020-07-23T07:16:26Z", "author": {"login": "yrodiere"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/event/ClientListenerWithDslFilterObjectStorageTest.java", "diffHunk": "@@ -81,8 +81,7 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n       cfgBuilder.encoding().key().mediaType(MediaType.APPLICATION_OBJECT_TYPE);\n       cfgBuilder.encoding().value().mediaType(MediaType.APPLICATION_OBJECT_TYPE);\n       cfgBuilder.indexing().enable()\n-            .addProperty(\"default.directory_provider\", \"local-heap\")\n-            .addProperty(\"lucene_version\", \"LUCENE_CURRENT\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMTAxNA=="}, "originalCommit": {"oid": "45b82c7749dc5e80335c5e14daeb6b7be47f9697"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMwODM4Ng==", "bodyText": "@yrodiere No noise at all, thanks. I asked myself the same question when I did this change.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459308386", "createdAt": "2020-07-23T08:59:10Z", "author": {"login": "fax4ever"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/event/ClientListenerWithDslFilterObjectStorageTest.java", "diffHunk": "@@ -81,8 +81,7 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n       cfgBuilder.encoding().key().mediaType(MediaType.APPLICATION_OBJECT_TYPE);\n       cfgBuilder.encoding().value().mediaType(MediaType.APPLICATION_OBJECT_TYPE);\n       cfgBuilder.indexing().enable()\n-            .addProperty(\"default.directory_provider\", \"local-heap\")\n-            .addProperty(\"lucene_version\", \"LUCENE_CURRENT\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMTAxNA=="}, "originalCommit": {"oid": "45b82c7749dc5e80335c5e14daeb6b7be47f9697"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjAzMjIyOnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/SearchManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODoyODoxMlrOG1YNAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODoyODoxMlrOG1YNAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNDI1OQ==", "bodyText": "We deprecated SearchManager in 11, and it's going to be removed in 12, so It's better to not add features to it", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458624259", "createdAt": "2020-07-22T08:28:12Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/SearchManager.java", "diffHunk": "@@ -88,6 +53,8 @@\n    @Deprecated\n    void purge(Class<?> entityType);\n \n+   void refresh(Class<?> entityType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjA0ODM3OnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/CacheQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODozMjoxNFrOG1YW8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODozMjoxNFrOG1YW8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNjgwMQ==", "bodyText": "CacheQuery is also deprecated, so better not to change it.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458626801", "createdAt": "2020-07-22T08:32:14Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/CacheQuery.java", "diffHunk": "@@ -67,70 +63,22 @@\n     */\n    CacheQuery<E> maxResults(int numResults);\n \n-   /**\n-    * @return return the manager for all faceting related operations\n-    */\n-   FacetManager getFacetManager();\n-\n    /**\n     * Gets the total number of results matching the query, ignoring pagination (firstResult, maxResult).\n     *\n     * @return total number of results.\n     */\n-   int getResultSize();\n+   long getResultSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjA1NzA5OnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/spi/SearchManagerImplementor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODozNDo0M1rOG1YceQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTo1MDozN1rOG2Dn4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyODIxNw==", "bodyText": "This class is also deprecated. Same as CacheQuery and SearchManager. Could you avoid changing them, and if it's not possible, just remove?", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458628217", "createdAt": "2020-07-22T08:34:43Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/spi/SearchManagerImplementor.java", "diffHunk": "@@ -15,33 +12,13 @@\n @Deprecated\n public interface SearchManagerImplementor extends SearchManager {\n \n-   /**\n-    * Define the timeout exception factory to customize the exception thrown when the query timeout is exceeded.\n-    *\n-    * @param timeoutExceptionFactory the timeout exception factory to use\n-    * @deprecated Since 11.0, without replacement. To be removed in next major version.\n-    */\n-   @Deprecated\n-   void setTimeoutExceptionFactory(TimeoutExceptionFactory timeoutExceptionFactory);\n-\n    /**\n     * Creates a cache query based on a {@link QueryDefinition} and a custom metadata.\n     * @deprecated Since 11.0, without replacement. To be removed in next major version.\n     */\n    @Deprecated\n-   <E> CacheQuery<E> getQuery(QueryDefinition queryDefinition, IndexedQueryMode indexedQueryMode, IndexedTypeMap<CustomTypeMetadata> indexedTypeMap);\n+   <E> CacheQuery<E> getQuery(QueryDefinition queryDefinition, IndexedQueryMode indexedQueryMode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0NzkzNw==", "bodyText": "Sure", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459247937", "createdAt": "2020-07-23T06:55:32Z", "author": {"login": "fax4ever"}, "path": "query/src/main/java/org/infinispan/query/spi/SearchManagerImplementor.java", "diffHunk": "@@ -15,33 +12,13 @@\n @Deprecated\n public interface SearchManagerImplementor extends SearchManager {\n \n-   /**\n-    * Define the timeout exception factory to customize the exception thrown when the query timeout is exceeded.\n-    *\n-    * @param timeoutExceptionFactory the timeout exception factory to use\n-    * @deprecated Since 11.0, without replacement. To be removed in next major version.\n-    */\n-   @Deprecated\n-   void setTimeoutExceptionFactory(TimeoutExceptionFactory timeoutExceptionFactory);\n-\n    /**\n     * Creates a cache query based on a {@link QueryDefinition} and a custom metadata.\n     * @deprecated Since 11.0, without replacement. To be removed in next major version.\n     */\n    @Deprecated\n-   <E> CacheQuery<E> getQuery(QueryDefinition queryDefinition, IndexedQueryMode indexedQueryMode, IndexedTypeMap<CustomTypeMetadata> indexedTypeMap);\n+   <E> CacheQuery<E> getQuery(QueryDefinition queryDefinition, IndexedQueryMode indexedQueryMode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyODIxNw=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMzNTY0OA==", "bodyText": "Unfortunately IndexedTypeMap is a Hibernate Search 5\u2019s class. So I think we need to remove it. Doing now...", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459335648", "createdAt": "2020-07-23T09:50:37Z", "author": {"login": "fax4ever"}, "path": "query/src/main/java/org/infinispan/query/spi/SearchManagerImplementor.java", "diffHunk": "@@ -15,33 +12,13 @@\n @Deprecated\n public interface SearchManagerImplementor extends SearchManager {\n \n-   /**\n-    * Define the timeout exception factory to customize the exception thrown when the query timeout is exceeded.\n-    *\n-    * @param timeoutExceptionFactory the timeout exception factory to use\n-    * @deprecated Since 11.0, without replacement. To be removed in next major version.\n-    */\n-   @Deprecated\n-   void setTimeoutExceptionFactory(TimeoutExceptionFactory timeoutExceptionFactory);\n-\n    /**\n     * Creates a cache query based on a {@link QueryDefinition} and a custom metadata.\n     * @deprecated Since 11.0, without replacement. To be removed in next major version.\n     */\n    @Deprecated\n-   <E> CacheQuery<E> getQuery(QueryDefinition queryDefinition, IndexedQueryMode indexedQueryMode, IndexedTypeMap<CustomTypeMetadata> indexedTypeMap);\n+   <E> CacheQuery<E> getQuery(QueryDefinition queryDefinition, IndexedQueryMode indexedQueryMode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyODIxNw=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjMxODY1OnYy", "diffSide": "RIGHT", "path": "query/src/test/java/org/infinispan/query/dsl/embedded/impl/HibernateSearchPropertyHelperTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTo0MzoyM1rOG1a9NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDowNzo1MlrOG1b0Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2OTM2NQ==", "bodyText": "@fax4ever Unless I'm mistaken, you're not closing the search mapping, which leads to the test failures in CI mentioning \"leaked threads\".\nThere are other test failures mentioning thread leaks, maybe you should have a look at them? The name of the test generally appears somewhere in the stack trace.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458669365", "createdAt": "2020-07-22T09:43:23Z", "author": {"login": "yrodiere"}, "path": "query/src/test/java/org/infinispan/query/dsl/embedded/impl/HibernateSearchPropertyHelperTest.java", "diffHunk": "@@ -20,14 +21,14 @@\n  */\n public class HibernateSearchPropertyHelperTest {\n \n-   @Rule\n-   public SearchFactoryHolder factoryHolder = new SearchFactoryHolder(TestEntity.class);\n-\n    private HibernateSearchPropertyHelper propertyHelper;\n \n    @Before\n    public void setup() {\n-      propertyHelper = new HibernateSearchPropertyHelper(factoryHolder.getSearchFactory(), new ReflectionEntityNamesResolver(null));\n+      SearchMappingHolder mappingHolder = mock(SearchMappingHolder.class);\n+      when(mappingHolder.getSearchMapping()).thenReturn(\n+            SearchMappingHelper.createSearchMappingForTests(TestEntity.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3NzI5Ng==", "bodyText": "Sure. They seems to be related to LuceneTransformationTest test instance.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458677296", "createdAt": "2020-07-22T09:57:04Z", "author": {"login": "fax4ever"}, "path": "query/src/test/java/org/infinispan/query/dsl/embedded/impl/HibernateSearchPropertyHelperTest.java", "diffHunk": "@@ -20,14 +21,14 @@\n  */\n public class HibernateSearchPropertyHelperTest {\n \n-   @Rule\n-   public SearchFactoryHolder factoryHolder = new SearchFactoryHolder(TestEntity.class);\n-\n    private HibernateSearchPropertyHelper propertyHelper;\n \n    @Before\n    public void setup() {\n-      propertyHelper = new HibernateSearchPropertyHelper(factoryHolder.getSearchFactory(), new ReflectionEntityNamesResolver(null));\n+      SearchMappingHolder mappingHolder = mock(SearchMappingHolder.class);\n+      when(mappingHolder.getSearchMapping()).thenReturn(\n+            SearchMappingHelper.createSearchMappingForTests(TestEntity.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2OTM2NQ=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3ODA0MA==", "bodyText": "in this test we open and (close -- maybe not) a search mapping instance manually to check the Lucene queries derived from it", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458678040", "createdAt": "2020-07-22T09:58:18Z", "author": {"login": "fax4ever"}, "path": "query/src/test/java/org/infinispan/query/dsl/embedded/impl/HibernateSearchPropertyHelperTest.java", "diffHunk": "@@ -20,14 +21,14 @@\n  */\n public class HibernateSearchPropertyHelperTest {\n \n-   @Rule\n-   public SearchFactoryHolder factoryHolder = new SearchFactoryHolder(TestEntity.class);\n-\n    private HibernateSearchPropertyHelper propertyHelper;\n \n    @Before\n    public void setup() {\n-      propertyHelper = new HibernateSearchPropertyHelper(factoryHolder.getSearchFactory(), new ReflectionEntityNamesResolver(null));\n+      SearchMappingHolder mappingHolder = mock(SearchMappingHolder.class);\n+      when(mappingHolder.getSearchMapping()).thenReturn(\n+            SearchMappingHelper.createSearchMappingForTests(TestEntity.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2OTM2NQ=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MzQ4Mg==", "bodyText": "Sure. They seems to be related to LuceneTransformationTest test instance.\n\nActually they are not. If you look at the stack trace, the threads were created in other tests. HibernateSearchPropertyHelperTest in particular, but there may be others.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458683482", "createdAt": "2020-07-22T10:07:52Z", "author": {"login": "yrodiere"}, "path": "query/src/test/java/org/infinispan/query/dsl/embedded/impl/HibernateSearchPropertyHelperTest.java", "diffHunk": "@@ -20,14 +21,14 @@\n  */\n public class HibernateSearchPropertyHelperTest {\n \n-   @Rule\n-   public SearchFactoryHolder factoryHolder = new SearchFactoryHolder(TestEntity.class);\n-\n    private HibernateSearchPropertyHelper propertyHelper;\n \n    @Before\n    public void setup() {\n-      propertyHelper = new HibernateSearchPropertyHelper(factoryHolder.getSearchFactory(), new ReflectionEntityNamesResolver(null));\n+      SearchMappingHolder mappingHolder = mock(SearchMappingHolder.class);\n+      when(mappingHolder.getSearchMapping()).thenReturn(\n+            SearchMappingHelper.createSearchMappingForTests(TestEntity.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2OTM2NQ=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzAyMzQ2OnYy", "diffSide": "LEFT", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/admin/RemoteCacheAdminTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzoxMzo0MFrOG1hw_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoxMDoxNFrOG1-nhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MDkyNQ==", "bodyText": "Is there an easy way to create an alias at Infinispan side so that we could deprecate the old properties instead of removing them?", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458780925", "createdAt": "2020-07-22T13:13:40Z", "author": {"login": "gustavonalle"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/admin/RemoteCacheAdminTest.java", "diffHunk": "@@ -46,7 +47,7 @@ protected void createCacheManagers() throws Throwable {\n             getDefaultClusteredCacheConfig(CacheMode.DIST_SYNC, false));\n       builder.indexing().enable()\n              .addIndexedEntity(\"sample_bank_account.Transaction\")\n-             .addProperty(\"default.directory_provider\", \"local-heap\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg1MjA3NQ==", "bodyText": "There is no plan to handle that kind of things in Hibernate Search 6. And some properties cannot be directly translated, because some things are now configured programatically instead of being configured through properties; that's the case of similarity for example (used to be a class passed to property hibernate.search.similarity).\nCurrently in Search 6, we simply fail the boot when someone uses old properties which are no longer supported.\nThat being said, you can transform the properties before passing them to Hibernate Search, of course.\nYou can find a list of old properties here, if that's useful: https://github.com/hibernate/hibernate-search/blob/0220c7a345ba46f9559e73ec5ae5d9ccddbec2df/engine/src/main/java/org/hibernate/search/engine/cfg/spi/HibernateSearch5Properties.java", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458852075", "createdAt": "2020-07-22T14:50:35Z", "author": {"login": "yrodiere"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/admin/RemoteCacheAdminTest.java", "diffHunk": "@@ -46,7 +47,7 @@ protected void createCacheManagers() throws Throwable {\n             getDefaultClusteredCacheConfig(CacheMode.DIST_SYNC, false));\n       builder.indexing().enable()\n              .addIndexedEntity(\"sample_bank_account.Transaction\")\n-             .addProperty(\"default.directory_provider\", \"local-heap\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MDkyNQ=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0NzM0NQ==", "bodyText": "As @yrodiere said there is no one-to-one correspondence for some properties.\nFor those for which there is, we could create such a compatibility layer in org.infinispan.search.mapper.mapping.impl.IndexProperties.\nAt the moment in this class we simplify a little the prefix needed to be used by the user to configure Hibernate Search properties, so it looks like the right place to implement it.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459247345", "createdAt": "2020-07-23T06:54:06Z", "author": {"login": "fax4ever"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/admin/RemoteCacheAdminTest.java", "diffHunk": "@@ -46,7 +47,7 @@ protected void createCacheManagers() throws Throwable {\n             getDefaultClusteredCacheConfig(CacheMode.DIST_SYNC, false));\n       builder.indexing().enable()\n              .addIndexedEntity(\"sample_bank_account.Transaction\")\n-             .addProperty(\"default.directory_provider\", \"local-heap\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MDkyNQ=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1MzYzNw==", "bodyText": "Cool, we can defer this to a follow up PR", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459253637", "createdAt": "2020-07-23T07:10:14Z", "author": {"login": "gustavonalle"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/admin/RemoteCacheAdminTest.java", "diffHunk": "@@ -46,7 +47,7 @@ protected void createCacheManagers() throws Throwable {\n             getDefaultClusteredCacheConfig(CacheMode.DIST_SYNC, false));\n       builder.indexing().enable()\n              .addIndexedEntity(\"sample_bank_account.Transaction\")\n-             .addProperty(\"default.directory_provider\", \"local-heap\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MDkyNQ=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzAzNzUzOnYy", "diffSide": "LEFT", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/marshall/NonIndexedEmbeddedRemoteQueryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzoxNzowMFrOG1h5sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo1NzowMVrOG2oBcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MzE1NA==", "bodyText": "Why did this change? Did the POJO in the test change or is it something new brougth by  HSearch 6?", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458783154", "createdAt": "2020-07-22T13:17:00Z", "author": {"login": "gustavonalle"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/marshall/NonIndexedEmbeddedRemoteQueryTest.java", "diffHunk": "@@ -25,10 +24,4 @@ protected ConfigurationBuilder createConfigBuilder() {\n       builder.encoding().value().mediaType(MediaType.APPLICATION_OBJECT_TYPE);\n       return builder;\n    }\n-\n-   @Test(expectedExceptions = HotRodClientException.class, expectedExceptionsMessageRegExp = \"org.infinispan.objectfilter.ParsingException: ISPN028521: Full-text queries cannot be applied to property 'longDescription' in type sample_bank_account.Transaction unless the property is indexed and analyzed.\")\n-   @Override\n-   public void testRemoteFullTextQuery() {\n-      super.testRemoteFullTextQuery();\n-   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzMjAxNw==", "bodyText": "I removed the test since I had to change the base implementation, that is EmbeddedRemoteInteropQueryTest#testRemoteFullTextQuery.\nThe change is caused by the fact that Hibernate Search 6 does not support a field that is sortable and full text at the same time.\nAnyway, I think that we can keep the original implementation for the subclass, so that we can keep the test case. I'm doing that...", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459932017", "createdAt": "2020-07-24T08:57:01Z", "author": {"login": "fax4ever"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/marshall/NonIndexedEmbeddedRemoteQueryTest.java", "diffHunk": "@@ -25,10 +24,4 @@ protected ConfigurationBuilder createConfigBuilder() {\n       builder.encoding().value().mediaType(MediaType.APPLICATION_OBJECT_TYPE);\n       return builder;\n    }\n-\n-   @Test(expectedExceptions = HotRodClientException.class, expectedExceptionsMessageRegExp = \"org.infinispan.objectfilter.ParsingException: ISPN028521: Full-text queries cannot be applied to property 'longDescription' in type sample_bank_account.Transaction unless the property is indexed and analyzed.\")\n-   @Override\n-   public void testRemoteFullTextQuery() {\n-      super.testRemoteFullTextQuery();\n-   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MzE1NA=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzA0MTIzOnYy", "diffSide": "LEFT", "path": "build-configuration/pom.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzoxNzo0NlrOG1h72Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoxNTo1NlrOG2AgPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MzcwNQ==", "bodyText": "I am not sure what is that parent about, asking @pruivo: is it OK to remove it?", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458783705", "createdAt": "2020-07-22T13:17:46Z", "author": {"login": "gustavonalle"}, "path": "build-configuration/pom.xml", "diffHunk": "@@ -2,12 +2,6 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n \n-   <parent>\n-      <groupId>org.jboss</groupId>\n-      <artifactId>jboss-parent</artifactId>\n-      <version>36</version>\n-   </parent>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMTc4OQ==", "bodyText": "The jboss-parent is mandatory downstream. Please keep it upstream so we can detect issues sooner than later.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458831789", "createdAt": "2020-07-22T14:24:15Z", "author": {"login": "pruivo"}, "path": "build-configuration/pom.xml", "diffHunk": "@@ -2,12 +2,6 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n \n-   <parent>\n-      <groupId>org.jboss</groupId>\n-      <artifactId>jboss-parent</artifactId>\n-      <version>36</version>\n-   </parent>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MzcwNQ=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1NjcxOA==", "bodyText": "I'm sorry. I had http://repository.jboss.org/nexus/content/groups/public/ instead of https://repository.jboss.org/nexus/content/groups/public-jboss/  as jboss-public-repository-group url in settings.xml. Now it works. I'll drop this commit.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459256718", "createdAt": "2020-07-23T07:17:38Z", "author": {"login": "fax4ever"}, "path": "build-configuration/pom.xml", "diffHunk": "@@ -2,12 +2,6 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n \n-   <parent>\n-      <groupId>org.jboss</groupId>\n-      <artifactId>jboss-parent</artifactId>\n-      <version>36</version>\n-   </parent>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MzcwNQ=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4NDU0MQ==", "bodyText": "for the record, you can add the option -Dinsecure.repositories=WARN to your mvn command if you had to use an insecure maven repository (i.e. non https).", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459284541", "createdAt": "2020-07-23T08:15:56Z", "author": {"login": "pruivo"}, "path": "build-configuration/pom.xml", "diffHunk": "@@ -2,12 +2,6 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n \n-   <parent>\n-      <groupId>org.jboss</groupId>\n-      <artifactId>jboss-parent</artifactId>\n-      <version>36</version>\n-   </parent>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MzcwNQ=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzA1ODA1OnYy", "diffSide": "RIGHT", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/MultiServerStoreQueryTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzoyMTozMFrOG1iGKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo1ODoxM1rOG2uXKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4NjM0Ng==", "bodyText": "It seems many of the new config added here is unrelated to the old config. So that we can understand and proper document in the upgrade guide, would it be possible to replace them with the equivalent new ones, keeping the same numeric values if possible?", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458786346", "createdAt": "2020-07-22T13:21:30Z", "author": {"login": "gustavonalle"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/MultiServerStoreQueryTest.java", "diffHunk": "@@ -90,12 +91,13 @@ public Configuration buildIndexedConfig(String storeName) {\n       ConfigurationBuilder builder = hotRodCacheConfiguration(getDefaultClusteredCacheConfig(CacheMode.DIST_SYNC, false));\n       builder.indexing().enable()\n              .addIndexedEntity(\"News\")\n-             .addProperty(\"default.directory_provider\", \"local-heap\")\n-             .addProperty(\"default.worker.execution\", \"async\")\n-             .addProperty(\"default.index_flush_interval\", \"500\")\n-             .addProperty(\"default.indexwriter.merge_factor\", \"30\")\n-             .addProperty(\"default.indexwriter.merge_max_size\", \"1024\")\n-             .addProperty(\"default.indexwriter.ram_buffer_size\", \"256\");\n+             .addProperty(SearchConfig.DIRECTORY_TYPE, SearchConfig.HEAP)\n+            .addProperty(SearchConfig.THREAD_POOL_SIZE, \"6\")\n+             .addProperty(SearchConfig.QUEUE_COUNT, \"6\")\n+             .addProperty(SearchConfig.QUEUE_SIZE, \"4096\")\n+             .addProperty(SearchConfig.COMMIT_INTERVAL, \"10000\")\n+             .addProperty(SearchConfig.SHARDING_STRATEGY, SearchConfig.HASH)\n+             .addProperty(SearchConfig.NUMBER_OF_SHARDS, \"6\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzMzU4NQ==", "bodyText": "When I did the change we didn't have all the options we have right now. I'm restoring the old config using the new properties. This looks like the last comment I still have to fix. Isn\u2019t it?", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r460033585", "createdAt": "2020-07-24T12:53:42Z", "author": {"login": "fax4ever"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/MultiServerStoreQueryTest.java", "diffHunk": "@@ -90,12 +91,13 @@ public Configuration buildIndexedConfig(String storeName) {\n       ConfigurationBuilder builder = hotRodCacheConfiguration(getDefaultClusteredCacheConfig(CacheMode.DIST_SYNC, false));\n       builder.indexing().enable()\n              .addIndexedEntity(\"News\")\n-             .addProperty(\"default.directory_provider\", \"local-heap\")\n-             .addProperty(\"default.worker.execution\", \"async\")\n-             .addProperty(\"default.index_flush_interval\", \"500\")\n-             .addProperty(\"default.indexwriter.merge_factor\", \"30\")\n-             .addProperty(\"default.indexwriter.merge_max_size\", \"1024\")\n-             .addProperty(\"default.indexwriter.ram_buffer_size\", \"256\");\n+             .addProperty(SearchConfig.DIRECTORY_TYPE, SearchConfig.HEAP)\n+            .addProperty(SearchConfig.THREAD_POOL_SIZE, \"6\")\n+             .addProperty(SearchConfig.QUEUE_COUNT, \"6\")\n+             .addProperty(SearchConfig.QUEUE_SIZE, \"4096\")\n+             .addProperty(SearchConfig.COMMIT_INTERVAL, \"10000\")\n+             .addProperty(SearchConfig.SHARDING_STRATEGY, SearchConfig.HASH)\n+             .addProperty(SearchConfig.NUMBER_OF_SHARDS, \"6\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4NjM0Ng=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNTg4Mg==", "bodyText": "Moreover, it looks like we don't need a constant class now, we can use the official one, that is \"org.hibernate.search.backend.lucene.cfg.LuceneIndexSettings\". Doing the change now... forget it we have to use the ISPN now, since we simply the prefixes..", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r460035882", "createdAt": "2020-07-24T12:58:13Z", "author": {"login": "fax4ever"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/MultiServerStoreQueryTest.java", "diffHunk": "@@ -90,12 +91,13 @@ public Configuration buildIndexedConfig(String storeName) {\n       ConfigurationBuilder builder = hotRodCacheConfiguration(getDefaultClusteredCacheConfig(CacheMode.DIST_SYNC, false));\n       builder.indexing().enable()\n              .addIndexedEntity(\"News\")\n-             .addProperty(\"default.directory_provider\", \"local-heap\")\n-             .addProperty(\"default.worker.execution\", \"async\")\n-             .addProperty(\"default.index_flush_interval\", \"500\")\n-             .addProperty(\"default.indexwriter.merge_factor\", \"30\")\n-             .addProperty(\"default.indexwriter.merge_max_size\", \"1024\")\n-             .addProperty(\"default.indexwriter.ram_buffer_size\", \"256\");\n+             .addProperty(SearchConfig.DIRECTORY_TYPE, SearchConfig.HEAP)\n+            .addProperty(SearchConfig.THREAD_POOL_SIZE, \"6\")\n+             .addProperty(SearchConfig.QUEUE_COUNT, \"6\")\n+             .addProperty(SearchConfig.QUEUE_SIZE, \"4096\")\n+             .addProperty(SearchConfig.COMMIT_INTERVAL, \"10000\")\n+             .addProperty(SearchConfig.SHARDING_STRATEGY, SearchConfig.HASH)\n+             .addProperty(SearchConfig.NUMBER_OF_SHARDS, \"6\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4NjM0Ng=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzA3MTY3OnYy", "diffSide": "RIGHT", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/RemoteQueryDslConditionsTunedTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzoyNDozOFrOG1iOng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjowMDo1OVrOG1pPGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4ODUxMA==", "bodyText": "Could you drop a comment here what is the equivalent of near-real-time in HS6?", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458788510", "createdAt": "2020-07-22T13:24:38Z", "author": {"login": "gustavonalle"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/RemoteQueryDslConditionsTunedTest.java", "diffHunk": "@@ -29,23 +30,26 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n              .addIndexedEntity(\"sample_bank_account.User\")\n              .addIndexedEntity(\"sample_bank_account.Account\")\n              .addIndexedEntity(\"sample_bank_account.Transaction\")\n-             .addProperty(\"default.indexmanager\", \"near-real-time\")\n-             .addProperty(\"default.indexBase\", indexDirectory)\n-             .addProperty(\"default.exclusive_index_use\", \"true\")\n-             .addProperty(\"default.indexwriter.merge_factor\", \"30\")\n-             .addProperty(\"default.indexwriter.merge_max_size\", \"4096\")\n-             .addProperty(\"default.indexwriter.ram_buffer_size\", \"220\")\n-             .addProperty(\"default.locking_strategy\", \"native\")\n-             .addProperty(\"default.sharding_strategy.nbr_of_shards\", String.valueOf(NUM_SHARDS));\n+             .addProperty(SearchConfig.DIRECTORY_TYPE, SearchConfig.FILE)\n+             .addProperty(SearchConfig.DIRECTORY_ROOT, indexDirectory)\n+             .addProperty(SearchConfig.THREAD_POOL_SIZE, String.valueOf(NUM_SHARDS))\n+             .addProperty(SearchConfig.QUEUE_COUNT, String.valueOf(NUM_SHARDS))\n+             .addProperty(SearchConfig.QUEUE_SIZE, \"4096\")\n+             .addProperty(SearchConfig.COMMIT_INTERVAL, \"10000\")\n+             .addProperty(SearchConfig.SHARDING_STRATEGY, SearchConfig.HASH)\n+             .addProperty(SearchConfig.NUMBER_OF_SHARDS, String.valueOf(NUM_SHARDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg0OTM5NA==", "bodyText": "I think we discussed this already a few months ago, but let's summarize it here.\nNRT is enabled by default, sort of. Commits are asynchronous by default and index readers are aware of uncommitted changes by default.\nConfiguration in Hibernate Search 6 is different from Hibernate Search 5:\n\nWhen you request indexing, you (Infinispan) can request that the commit happens immediately.\n\nIf you do, the commit will happen before the indexing operation returns. Obviously, it will perform badly if you index your documents one by one.\nIf you don't the commit will happen some time after the indexing operation returns. By default it's 1000ms, but you can set it to a different number.\n\n\nReaders are always aware of uncommitted changes by default, i.e. they are aware of changes still in the index writer buffers.\n\nReaders are typically cached, and recreated only when necessary.\nIf you can accept out-of-date readers, you can go a step further and set a refresh interval so that readers are only re-created every 10000ms, for example. That's where manual refreshes become useful.\n\n\n\nMore information: https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#backend-lucene-io", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458849394", "createdAt": "2020-07-22T14:47:21Z", "author": {"login": "yrodiere"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/RemoteQueryDslConditionsTunedTest.java", "diffHunk": "@@ -29,23 +30,26 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n              .addIndexedEntity(\"sample_bank_account.User\")\n              .addIndexedEntity(\"sample_bank_account.Account\")\n              .addIndexedEntity(\"sample_bank_account.Transaction\")\n-             .addProperty(\"default.indexmanager\", \"near-real-time\")\n-             .addProperty(\"default.indexBase\", indexDirectory)\n-             .addProperty(\"default.exclusive_index_use\", \"true\")\n-             .addProperty(\"default.indexwriter.merge_factor\", \"30\")\n-             .addProperty(\"default.indexwriter.merge_max_size\", \"4096\")\n-             .addProperty(\"default.indexwriter.ram_buffer_size\", \"220\")\n-             .addProperty(\"default.locking_strategy\", \"native\")\n-             .addProperty(\"default.sharding_strategy.nbr_of_shards\", String.valueOf(NUM_SHARDS));\n+             .addProperty(SearchConfig.DIRECTORY_TYPE, SearchConfig.FILE)\n+             .addProperty(SearchConfig.DIRECTORY_ROOT, indexDirectory)\n+             .addProperty(SearchConfig.THREAD_POOL_SIZE, String.valueOf(NUM_SHARDS))\n+             .addProperty(SearchConfig.QUEUE_COUNT, String.valueOf(NUM_SHARDS))\n+             .addProperty(SearchConfig.QUEUE_SIZE, \"4096\")\n+             .addProperty(SearchConfig.COMMIT_INTERVAL, \"10000\")\n+             .addProperty(SearchConfig.SHARDING_STRATEGY, SearchConfig.HASH)\n+             .addProperty(SearchConfig.NUMBER_OF_SHARDS, String.valueOf(NUM_SHARDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4ODUxMA=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg1OTc4MA==", "bodyText": "Right, thanks for the reminder. I don't remember if we discussed that, but in HSearch 5, there was org.hibernate.search.backend.impl.lucene.SyncWorkProcessor that would guarantee that, if multiple threads were writing to the index at the same time, the backend would \"batch\" their changes to do a single commit, rather than do one commit per document, is that still the case in Hibernate Search 6?", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458859780", "createdAt": "2020-07-22T15:01:04Z", "author": {"login": "gustavonalle"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/RemoteQueryDslConditionsTunedTest.java", "diffHunk": "@@ -29,23 +30,26 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n              .addIndexedEntity(\"sample_bank_account.User\")\n              .addIndexedEntity(\"sample_bank_account.Account\")\n              .addIndexedEntity(\"sample_bank_account.Transaction\")\n-             .addProperty(\"default.indexmanager\", \"near-real-time\")\n-             .addProperty(\"default.indexBase\", indexDirectory)\n-             .addProperty(\"default.exclusive_index_use\", \"true\")\n-             .addProperty(\"default.indexwriter.merge_factor\", \"30\")\n-             .addProperty(\"default.indexwriter.merge_max_size\", \"4096\")\n-             .addProperty(\"default.indexwriter.ram_buffer_size\", \"220\")\n-             .addProperty(\"default.locking_strategy\", \"native\")\n-             .addProperty(\"default.sharding_strategy.nbr_of_shards\", String.valueOf(NUM_SHARDS));\n+             .addProperty(SearchConfig.DIRECTORY_TYPE, SearchConfig.FILE)\n+             .addProperty(SearchConfig.DIRECTORY_ROOT, indexDirectory)\n+             .addProperty(SearchConfig.THREAD_POOL_SIZE, String.valueOf(NUM_SHARDS))\n+             .addProperty(SearchConfig.QUEUE_COUNT, String.valueOf(NUM_SHARDS))\n+             .addProperty(SearchConfig.QUEUE_SIZE, \"4096\")\n+             .addProperty(SearchConfig.COMMIT_INTERVAL, \"10000\")\n+             .addProperty(SearchConfig.SHARDING_STRATEGY, SearchConfig.HASH)\n+             .addProperty(SearchConfig.NUMBER_OF_SHARDS, String.valueOf(NUM_SHARDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4ODUxMA=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2ODg2OQ==", "bodyText": "is that still the case in Hibernate Search 6?\n\nIf you force the commit, it will happen ASAP, so no.\nIf you don't force the commit, then Hibernate Search will still return before the commit, which will happen asynchronously. However, if you set the commit interval 0, it will commit just after each \"batch\" of operations. The size of batches can be configured.\nIf you want guarantees that changes are flushed to disk, that's obviously not enough. Depending on Infinispan's needs, we could introduce another behavior where you don't force the commit, but ask Hibernate Search to only consider the indexing operation completed when the next commit happens (whenever that is). I believe that shouldn't be too much work. That will have to wait until after this PR is merged, though (we need another release of Search).\nI believe that shouldn't be too much work => Well actually, thinking about it, it may be a bit complex, due to operations being applied in parallel in different threads. I need to give it a closer look", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458868869", "createdAt": "2020-07-22T15:13:27Z", "author": {"login": "yrodiere"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/RemoteQueryDslConditionsTunedTest.java", "diffHunk": "@@ -29,23 +30,26 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n              .addIndexedEntity(\"sample_bank_account.User\")\n              .addIndexedEntity(\"sample_bank_account.Account\")\n              .addIndexedEntity(\"sample_bank_account.Transaction\")\n-             .addProperty(\"default.indexmanager\", \"near-real-time\")\n-             .addProperty(\"default.indexBase\", indexDirectory)\n-             .addProperty(\"default.exclusive_index_use\", \"true\")\n-             .addProperty(\"default.indexwriter.merge_factor\", \"30\")\n-             .addProperty(\"default.indexwriter.merge_max_size\", \"4096\")\n-             .addProperty(\"default.indexwriter.ram_buffer_size\", \"220\")\n-             .addProperty(\"default.locking_strategy\", \"native\")\n-             .addProperty(\"default.sharding_strategy.nbr_of_shards\", String.valueOf(NUM_SHARDS));\n+             .addProperty(SearchConfig.DIRECTORY_TYPE, SearchConfig.FILE)\n+             .addProperty(SearchConfig.DIRECTORY_ROOT, indexDirectory)\n+             .addProperty(SearchConfig.THREAD_POOL_SIZE, String.valueOf(NUM_SHARDS))\n+             .addProperty(SearchConfig.QUEUE_COUNT, String.valueOf(NUM_SHARDS))\n+             .addProperty(SearchConfig.QUEUE_SIZE, \"4096\")\n+             .addProperty(SearchConfig.COMMIT_INTERVAL, \"10000\")\n+             .addProperty(SearchConfig.SHARDING_STRATEGY, SearchConfig.HASH)\n+             .addProperty(SearchConfig.NUMBER_OF_SHARDS, String.valueOf(NUM_SHARDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4ODUxMA=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5NDQ1Mw==", "bodyText": "Hold on a sec. So basically, we are moving from\n\nmaster, where NRT is not enabled by default, and will commit on every document synchronously, but will coalesce writing threads to reduce the number of commits. Once the cache operation completes, it is guarantee the document is indexed on disk and it's visible on searches.\n\nto\n\nISPN-10249 (this PR), where NRT is ON by default, commits are done by batch size or time, cache operations guarantee immediate visibility on searches but not immediate persistence of the index, but only once every second (configurable)\n\nCorrect?\nIf so, I reckon 2) is overall better than 1), so I wouldn't rush to implement the old behaviour", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458894453", "createdAt": "2020-07-22T15:48:31Z", "author": {"login": "gustavonalle"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/RemoteQueryDslConditionsTunedTest.java", "diffHunk": "@@ -29,23 +30,26 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n              .addIndexedEntity(\"sample_bank_account.User\")\n              .addIndexedEntity(\"sample_bank_account.Account\")\n              .addIndexedEntity(\"sample_bank_account.Transaction\")\n-             .addProperty(\"default.indexmanager\", \"near-real-time\")\n-             .addProperty(\"default.indexBase\", indexDirectory)\n-             .addProperty(\"default.exclusive_index_use\", \"true\")\n-             .addProperty(\"default.indexwriter.merge_factor\", \"30\")\n-             .addProperty(\"default.indexwriter.merge_max_size\", \"4096\")\n-             .addProperty(\"default.indexwriter.ram_buffer_size\", \"220\")\n-             .addProperty(\"default.locking_strategy\", \"native\")\n-             .addProperty(\"default.sharding_strategy.nbr_of_shards\", String.valueOf(NUM_SHARDS));\n+             .addProperty(SearchConfig.DIRECTORY_TYPE, SearchConfig.FILE)\n+             .addProperty(SearchConfig.DIRECTORY_ROOT, indexDirectory)\n+             .addProperty(SearchConfig.THREAD_POOL_SIZE, String.valueOf(NUM_SHARDS))\n+             .addProperty(SearchConfig.QUEUE_COUNT, String.valueOf(NUM_SHARDS))\n+             .addProperty(SearchConfig.QUEUE_SIZE, \"4096\")\n+             .addProperty(SearchConfig.COMMIT_INTERVAL, \"10000\")\n+             .addProperty(SearchConfig.SHARDING_STRATEGY, SearchConfig.HASH)\n+             .addProperty(SearchConfig.NUMBER_OF_SHARDS, String.valueOf(NUM_SHARDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4ODUxMA=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwMzMyMg==", "bodyText": "Correct.\nThe only drawback of the new behavior is there is no way to get a guarantee that each change is on disk after the cache operation completes unless you accept bad performance (one commit per cache operation).\nI believe that kind of requirement is a bit unreasonable for a secondary source of truth such as Lucene indexes, though. We will probably have a look at some time in the future, for the sake of completeness, but I agree with you this can wait.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458903322", "createdAt": "2020-07-22T16:00:59Z", "author": {"login": "yrodiere"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/RemoteQueryDslConditionsTunedTest.java", "diffHunk": "@@ -29,23 +30,26 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n              .addIndexedEntity(\"sample_bank_account.User\")\n              .addIndexedEntity(\"sample_bank_account.Account\")\n              .addIndexedEntity(\"sample_bank_account.Transaction\")\n-             .addProperty(\"default.indexmanager\", \"near-real-time\")\n-             .addProperty(\"default.indexBase\", indexDirectory)\n-             .addProperty(\"default.exclusive_index_use\", \"true\")\n-             .addProperty(\"default.indexwriter.merge_factor\", \"30\")\n-             .addProperty(\"default.indexwriter.merge_max_size\", \"4096\")\n-             .addProperty(\"default.indexwriter.ram_buffer_size\", \"220\")\n-             .addProperty(\"default.locking_strategy\", \"native\")\n-             .addProperty(\"default.sharding_strategy.nbr_of_shards\", String.valueOf(NUM_SHARDS));\n+             .addProperty(SearchConfig.DIRECTORY_TYPE, SearchConfig.FILE)\n+             .addProperty(SearchConfig.DIRECTORY_ROOT, indexDirectory)\n+             .addProperty(SearchConfig.THREAD_POOL_SIZE, String.valueOf(NUM_SHARDS))\n+             .addProperty(SearchConfig.QUEUE_COUNT, String.valueOf(NUM_SHARDS))\n+             .addProperty(SearchConfig.QUEUE_SIZE, \"4096\")\n+             .addProperty(SearchConfig.COMMIT_INTERVAL, \"10000\")\n+             .addProperty(SearchConfig.SHARDING_STRATEGY, SearchConfig.HASH)\n+             .addProperty(SearchConfig.NUMBER_OF_SHARDS, String.valueOf(NUM_SHARDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4ODUxMA=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzA4OTcxOnYy", "diffSide": "RIGHT", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/RemoteQueryNonQueryableCacheTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzoyODo1MFrOG1iaAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOToxNzo1MlrOG2orpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5MTQyNw==", "bodyText": "Can you add the indexed entities in the config so that it does not change the test behaviour?", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458791427", "createdAt": "2020-07-22T13:28:50Z", "author": {"login": "gustavonalle"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/RemoteQueryNonQueryableCacheTest.java", "diffHunk": "@@ -53,18 +54,22 @@ private Configuration createCache(String mediaType) {\n \n    private Configuration createIndexedCache() {\n       ConfigurationBuilder builder = new ConfigurationBuilder();\n-      builder.indexing().enable().addProperty(\"default.directory_provider\", \"local-heap\");\n+      builder.indexing().enable().addProperty(SearchConfig.DIRECTORY_TYPE, SearchConfig.HEAP);\n       return builder.build();\n    }\n \n    @Test\n    public void testQueryable() {\n       executeQuery(DEFAULT_CACHE);\n-      executeQuery(INDEXED_CACHE);\n       executeQuery(PROTOBUF_CACHE);\n       executeQuery(POJO_CACHE);\n    }\n \n+   @Test(expectedExceptions = HotRodClientException.class, expectedExceptionsMessageRegExp = \".*ISPN014054.*\")\n+   public void assertErrorForIndexedCacheButWithoutIndexedEntities() {\n+      executeQuery(INDEXED_CACHE);\n+   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0MjMyMg==", "bodyText": "I'll change the configuration to add an indexed protobuf entity, providing its protobuf schema in the serialization context. Doing now..", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459942322", "createdAt": "2020-07-24T09:16:46Z", "author": {"login": "fax4ever"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/RemoteQueryNonQueryableCacheTest.java", "diffHunk": "@@ -53,18 +54,22 @@ private Configuration createCache(String mediaType) {\n \n    private Configuration createIndexedCache() {\n       ConfigurationBuilder builder = new ConfigurationBuilder();\n-      builder.indexing().enable().addProperty(\"default.directory_provider\", \"local-heap\");\n+      builder.indexing().enable().addProperty(SearchConfig.DIRECTORY_TYPE, SearchConfig.HEAP);\n       return builder.build();\n    }\n \n    @Test\n    public void testQueryable() {\n       executeQuery(DEFAULT_CACHE);\n-      executeQuery(INDEXED_CACHE);\n       executeQuery(PROTOBUF_CACHE);\n       executeQuery(POJO_CACHE);\n    }\n \n+   @Test(expectedExceptions = HotRodClientException.class, expectedExceptionsMessageRegExp = \".*ISPN014054.*\")\n+   public void assertErrorForIndexedCacheButWithoutIndexedEntities() {\n+      executeQuery(INDEXED_CACHE);\n+   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5MTQyNw=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0MjgyMQ==", "bodyText": "Since that now declaring a protobuf entity without its protobuf schema has no impact...", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459942821", "createdAt": "2020-07-24T09:17:52Z", "author": {"login": "fax4ever"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/RemoteQueryNonQueryableCacheTest.java", "diffHunk": "@@ -53,18 +54,22 @@ private Configuration createCache(String mediaType) {\n \n    private Configuration createIndexedCache() {\n       ConfigurationBuilder builder = new ConfigurationBuilder();\n-      builder.indexing().enable().addProperty(\"default.directory_provider\", \"local-heap\");\n+      builder.indexing().enable().addProperty(SearchConfig.DIRECTORY_TYPE, SearchConfig.HEAP);\n       return builder.build();\n    }\n \n    @Test\n    public void testQueryable() {\n       executeQuery(DEFAULT_CACHE);\n-      executeQuery(INDEXED_CACHE);\n       executeQuery(PROTOBUF_CACHE);\n       executeQuery(POJO_CACHE);\n    }\n \n+   @Test(expectedExceptions = HotRodClientException.class, expectedExceptionsMessageRegExp = \".*ISPN014054.*\")\n+   public void assertErrorForIndexedCacheButWithoutIndexedEntities() {\n+      executeQuery(INDEXED_CACHE);\n+   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5MTQyNw=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzEwMjk1OnYy", "diffSide": "RIGHT", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/RemoteQueryWithProtostreamAnnotationsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzozMTo1NFrOG1iiGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjo0MjozOFrOG2ItiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5MzQ5Nw==", "bodyText": "Could you clarify what is this about? What do you mean \"one change of serialization context\" ?", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458793497", "createdAt": "2020-07-22T13:31:54Z", "author": {"login": "gustavonalle"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/RemoteQueryWithProtostreamAnnotationsTest.java", "diffHunk": "@@ -31,7 +31,9 @@\n  *\n  * @author Adrian Nistor\n  */\n-@Test(testName = \"client.hotrod.query.RemoteQueryWithProtostreamAnnotationsTest\", groups = \"functional\")\n+// TODO Hibernate Search 6 cannot handle more than one change of serialization context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxOTAxNw==", "bodyText": "@gustavonalle now that lifecycle has been changed so that all the protobuf entities are in the serialization context when the cache is starting, we don't need the skip and this comment anymore. Removing it now the test passes, so I'm removing it.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459419017", "createdAt": "2020-07-23T12:42:38Z", "author": {"login": "fax4ever"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/query/RemoteQueryWithProtostreamAnnotationsTest.java", "diffHunk": "@@ -31,7 +31,9 @@\n  *\n  * @author Adrian Nistor\n  */\n-@Test(testName = \"client.hotrod.query.RemoteQueryWithProtostreamAnnotationsTest\", groups = \"functional\")\n+// TODO Hibernate Search 6 cannot handle more than one change of serialization context", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5MzQ5Nw=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzExNDc4OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzozNDo1MVrOG1ip8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzozNDo1MVrOG1ip8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5NTUwNA==", "bodyText": "I don't think we can comment the whole feature pack module, is it possible to remove only the Hibernate Search relevant stuff?", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458795504", "createdAt": "2020-07-22T13:34:51Z", "author": {"login": "gustavonalle"}, "path": "pom.xml", "diffHunk": "@@ -138,7 +138,8 @@\n       <module>cdi/remote</module>\n       <module>lock</module>\n       <module>jcache</module>\n-      <module>wildfly/feature-pack</module>\n+<!--      Hibernate Search 6 does not provide feature-pack(s) -->\n+<!--      <module>wildfly/feature-pack</module>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzEyMDA3OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzozNjowNFrOG1itaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzozNjowNFrOG1itaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5NjM5NQ==", "bodyText": "Same here, there's more than Hibernate Search in that module", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458796395", "createdAt": "2020-07-22T13:36:04Z", "author": {"login": "gustavonalle"}, "path": "pom.xml", "diffHunk": "@@ -147,11 +148,13 @@\n       <module>integrationtests/security-manager-it</module>\n       <module>integrationtests/cdi-weld-se-it</module>\n       <module>integrationtests/spring-boot-it</module>\n-      <module>integrationtests/wildfly-modules</module>\n+      <!-- Hiberante Search 6 does not provide feature packs -->\n+      <!--<module>integrationtests/wildfly-modules</module>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzE1MTczOnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo0MzowNlrOG1jA3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo0MTowNVrOG2LCJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMTM3Mw==", "bodyText": "This concept of refresh was not part of HSearch 5, what does it do? Could you add some javadoc? If it's something IndexWriter related, I prefer this to be on org.infinispan.query.Indexer", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458801373", "createdAt": "2020-07-22T13:43:06Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "diffHunk": "@@ -322,69 +314,66 @@ public Object visitReadWriteManyEntriesCommand(InvocationContext ctx, ReadWriteM\n     * Remove all entries from all known indexes\n     */\n    public void purgeAllIndexes() {\n-      purgeAllIndexes(NoTransactionContext.INSTANCE);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scopeAll().workspace().purge();\n    }\n \n    public void purgeIndex(Class<?> entityType) {\n-      purgeIndex(NoTransactionContext.INSTANCE, entityType);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scope(entityType).workspace().purge();\n+   }\n+\n+   public void refreshIndex(Class<?> entityType) {\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg0MzkzNA==", "bodyText": "Refresh will create new index readers. This is mostly only relevant if you tell Hibernate Search to reuse out-of-date index readers by setting hibernate.search.backends.myBackend.index_defaults.io.refresh_interval to something higher than 0.\nSee https://docs.jboss.org/hibernate/search/6.0/reference/en-US/html_single/#backend-lucene-io-refresh", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458843934", "createdAt": "2020-07-22T14:40:19Z", "author": {"login": "yrodiere"}, "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "diffHunk": "@@ -322,69 +314,66 @@ public Object visitReadWriteManyEntriesCommand(InvocationContext ctx, ReadWriteM\n     * Remove all entries from all known indexes\n     */\n    public void purgeAllIndexes() {\n-      purgeAllIndexes(NoTransactionContext.INSTANCE);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scopeAll().workspace().purge();\n    }\n \n    public void purgeIndex(Class<?> entityType) {\n-      purgeIndex(NoTransactionContext.INSTANCE, entityType);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scope(entityType).workspace().purge();\n+   }\n+\n+   public void refreshIndex(Class<?> entityType) {\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMTM3Mw=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1NzA2Mw==", "bodyText": "Yes the method was in the wrong place, I removed it.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459457063", "createdAt": "2020-07-23T13:41:05Z", "author": {"login": "fax4ever"}, "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "diffHunk": "@@ -322,69 +314,66 @@ public Object visitReadWriteManyEntriesCommand(InvocationContext ctx, ReadWriteM\n     * Remove all entries from all known indexes\n     */\n    public void purgeAllIndexes() {\n-      purgeAllIndexes(NoTransactionContext.INSTANCE);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scopeAll().workspace().purge();\n    }\n \n    public void purgeIndex(Class<?> entityType) {\n-      purgeIndex(NoTransactionContext.INSTANCE, entityType);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scope(entityType).workspace().purge();\n+   }\n+\n+   public void refreshIndex(Class<?> entityType) {\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMTM3Mw=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzE2NzM1OnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo0NjoyNFrOG1jKjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOToxOTowOVrOG2otsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMzg1NA==", "bodyText": "I've seen this check in many places, in which scenarios it can be null? On master, the QueryInterceptor is only installed if the cache is indexed, and if it is, the SearchFactory was never null.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458803854", "createdAt": "2020-07-22T13:46:24Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "diffHunk": "@@ -322,69 +314,66 @@ public Object visitReadWriteManyEntriesCommand(InvocationContext ctx, ReadWriteM\n     * Remove all entries from all known indexes\n     */\n    public void purgeAllIndexes() {\n-      purgeAllIndexes(NoTransactionContext.INSTANCE);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scopeAll().workspace().purge();\n    }\n \n    public void purgeIndex(Class<?> entityType) {\n-      purgeIndex(NoTransactionContext.INSTANCE, entityType);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scope(entityType).workspace().purge();\n+   }\n+\n+   public void refreshIndex(Class<?> entityType) {\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scope(entityType).workspace().refresh();\n    }\n \n    /**\n     * Removes from the index the entries corresponding to the supplied segments, if the index is local.\n     */\n    void purgeIndex(IntSet segments) {\n-      if (segments == null) return;\n-      for (int segment : segments) {\n-         DeletionQuery deletionQuery = new SingularTermDeletionQuery(SEGMENT_FIELD, String.valueOf(segment));\n-         for (IndexedTypeIdentifier type : searchFactory.getIndexBindings().keySet()) {\n-            Work deleteWork = new DeleteByQueryWork(type, deletionQuery);\n-            performSearchWork(deleteWork, NoTransactionContext.INSTANCE);\n-         }\n+      if (segments == null || segments.isEmpty()) return;\n+\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MDAzMg==", "bodyText": "There was for the same reason of #8571 (comment).\nGoing to remove these checks...\nMoreover, probably thanks to #8575 we can get rid of the entire SearchMappingHolder class, but maybe this could be a follow up. What do you think about that? Thanks", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459460032", "createdAt": "2020-07-23T13:45:09Z", "author": {"login": "fax4ever"}, "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "diffHunk": "@@ -322,69 +314,66 @@ public Object visitReadWriteManyEntriesCommand(InvocationContext ctx, ReadWriteM\n     * Remove all entries from all known indexes\n     */\n    public void purgeAllIndexes() {\n-      purgeAllIndexes(NoTransactionContext.INSTANCE);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scopeAll().workspace().purge();\n    }\n \n    public void purgeIndex(Class<?> entityType) {\n-      purgeIndex(NoTransactionContext.INSTANCE, entityType);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scope(entityType).workspace().purge();\n+   }\n+\n+   public void refreshIndex(Class<?> entityType) {\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scope(entityType).workspace().refresh();\n    }\n \n    /**\n     * Removes from the index the entries corresponding to the supplied segments, if the index is local.\n     */\n    void purgeIndex(IntSet segments) {\n-      if (segments == null) return;\n-      for (int segment : segments) {\n-         DeletionQuery deletionQuery = new SingularTermDeletionQuery(SEGMENT_FIELD, String.valueOf(segment));\n-         for (IndexedTypeIdentifier type : searchFactory.getIndexBindings().keySet()) {\n-            Work deleteWork = new DeleteByQueryWork(type, deletionQuery);\n-            performSearchWork(deleteWork, NoTransactionContext.INSTANCE);\n-         }\n+      if (segments == null || segments.isEmpty()) return;\n+\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMzg1NA=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyMDM2Mg==", "bodyText": "Looking deeper at the issue, I think that we should keep these null checks or change the way we handle the case where we declare a cache as indexed but we don't provide any entity in the indexedEntities configuration.\nBasically, if we remove these checks, we will have these three tests not working:\n\nContinuousQueryObjectStorageTest\nDataFormatIndexedTest\nClientListenerWithDslFilterObjectStorageTest\n\nIn all these cases we configure the cache in this way:\ncfgBuilder.indexing().enable()\n            .addProperty(\"directory.type\", \"local-heap\");\nThe cache is indexed but we don\u2019t provide any indexed entity in the configuration.\nI think that it would be the same if we defined some entities, but all of them were not contained in the serialization context at the time of cache starting.\nWithout the check we will get a null pointer exception locally, that will produce a timeout exception remotely.\nThe issue seems to be bound to the methods:\n\nQueryInterceptor#purgeAllIndexes\nQueryInterceptor#purgeIndex by segment\n\nTo be honest, I have no idea why a purge could be invoked on an indexed cache without no entities. Can you help me with that? Thanks", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459920362", "createdAt": "2020-07-24T08:30:53Z", "author": {"login": "fax4ever"}, "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "diffHunk": "@@ -322,69 +314,66 @@ public Object visitReadWriteManyEntriesCommand(InvocationContext ctx, ReadWriteM\n     * Remove all entries from all known indexes\n     */\n    public void purgeAllIndexes() {\n-      purgeAllIndexes(NoTransactionContext.INSTANCE);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scopeAll().workspace().purge();\n    }\n \n    public void purgeIndex(Class<?> entityType) {\n-      purgeIndex(NoTransactionContext.INSTANCE, entityType);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scope(entityType).workspace().purge();\n+   }\n+\n+   public void refreshIndex(Class<?> entityType) {\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scope(entityType).workspace().refresh();\n    }\n \n    /**\n     * Removes from the index the entries corresponding to the supplied segments, if the index is local.\n     */\n    void purgeIndex(IntSet segments) {\n-      if (segments == null) return;\n-      for (int segment : segments) {\n-         DeletionQuery deletionQuery = new SingularTermDeletionQuery(SEGMENT_FIELD, String.valueOf(segment));\n-         for (IndexedTypeIdentifier type : searchFactory.getIndexBindings().keySet()) {\n-            Work deleteWork = new DeleteByQueryWork(type, deletionQuery);\n-            performSearchWork(deleteWork, NoTransactionContext.INSTANCE);\n-         }\n+      if (segments == null || segments.isEmpty()) return;\n+\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMzg1NA=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0MTIzOA==", "bodyText": "Let's just handle it in a follow up", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459941238", "createdAt": "2020-07-24T09:14:27Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "diffHunk": "@@ -322,69 +314,66 @@ public Object visitReadWriteManyEntriesCommand(InvocationContext ctx, ReadWriteM\n     * Remove all entries from all known indexes\n     */\n    public void purgeAllIndexes() {\n-      purgeAllIndexes(NoTransactionContext.INSTANCE);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scopeAll().workspace().purge();\n    }\n \n    public void purgeIndex(Class<?> entityType) {\n-      purgeIndex(NoTransactionContext.INSTANCE, entityType);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scope(entityType).workspace().purge();\n+   }\n+\n+   public void refreshIndex(Class<?> entityType) {\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scope(entityType).workspace().refresh();\n    }\n \n    /**\n     * Removes from the index the entries corresponding to the supplied segments, if the index is local.\n     */\n    void purgeIndex(IntSet segments) {\n-      if (segments == null) return;\n-      for (int segment : segments) {\n-         DeletionQuery deletionQuery = new SingularTermDeletionQuery(SEGMENT_FIELD, String.valueOf(segment));\n-         for (IndexedTypeIdentifier type : searchFactory.getIndexBindings().keySet()) {\n-            Work deleteWork = new DeleteByQueryWork(type, deletionQuery);\n-            performSearchWork(deleteWork, NoTransactionContext.INSTANCE);\n-         }\n+      if (segments == null || segments.isEmpty()) return;\n+\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMzg1NA=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0MzM0Nw==", "bodyText": "Let's assume indexedEntities will always have at least 1 declared entity starting with ispn 12", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459943347", "createdAt": "2020-07-24T09:19:09Z", "author": {"login": "anistor"}, "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "diffHunk": "@@ -322,69 +314,66 @@ public Object visitReadWriteManyEntriesCommand(InvocationContext ctx, ReadWriteM\n     * Remove all entries from all known indexes\n     */\n    public void purgeAllIndexes() {\n-      purgeAllIndexes(NoTransactionContext.INSTANCE);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scopeAll().workspace().purge();\n    }\n \n    public void purgeIndex(Class<?> entityType) {\n-      purgeIndex(NoTransactionContext.INSTANCE, entityType);\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scope(entityType).workspace().purge();\n+   }\n+\n+   public void refreshIndex(Class<?> entityType) {\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {\n+         return;\n+      }\n+\n+      searchMapping.scope(entityType).workspace().refresh();\n    }\n \n    /**\n     * Removes from the index the entries corresponding to the supplied segments, if the index is local.\n     */\n    void purgeIndex(IntSet segments) {\n-      if (segments == null) return;\n-      for (int segment : segments) {\n-         DeletionQuery deletionQuery = new SingularTermDeletionQuery(SEGMENT_FIELD, String.valueOf(segment));\n-         for (IndexedTypeIdentifier type : searchFactory.getIndexBindings().keySet()) {\n-            Work deleteWork = new DeleteByQueryWork(type, deletionQuery);\n-            performSearchWork(deleteWork, NoTransactionContext.INSTANCE);\n-         }\n+      if (segments == null || segments.isEmpty()) return;\n+\n+      SearchMapping searchMapping = searchMappingHolder.getSearchMapping();\n+      if (searchMapping == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMzg1NA=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzI1Njk5OnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDowNToyNFrOG1kBhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDowNToyNFrOG1kBhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxNzkyNA==", "bodyText": "heads up, we've deprecated the whole \"CacheQuery\" class in 11, and this include the so called \"lazy\" iterator. So you could just get rid of it", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458817924", "createdAt": "2020-07-22T14:05:24Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryOperation.java", "diffHunk": "@@ -38,12 +38,12 @@ public QueryDefinition getQueryDefinition() {\n       return queryDefinition;\n    }\n \n-   static ClusteredQueryOperation createLazyIterator(QueryDefinition queryDefinition, UUID queryId) {\n+   /*static ClusteredQueryOperation createLazyIterator(QueryDefinition queryDefinition, UUID queryId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzI2NDI4OnYy", "diffSide": "LEFT", "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/package-info.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDowNzowMlrOG1kGEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDowNzowMlrOG1kGEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxOTA5MQ==", "bodyText": "Shouldn't be deleted", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458819091", "createdAt": "2020-07-22T14:07:02Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/package-info.java", "diffHunk": "@@ -1,4 +0,0 @@\n-/**\n- * @private\n- */\n-package org.infinispan.query.clustered.commandworkers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzI2Nzk4OnYy", "diffSide": "LEFT", "path": "query/src/main/java/org/infinispan/query/dsl/embedded/impl/EmbeddedLuceneQuery.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDowNzo1MVrOG1kIbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoyNjowOFrOG2KaWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxOTY5Mg==", "bodyText": "Did you fix this @fax4ever ? If not, let's keep it as a reminder :)", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458819692", "createdAt": "2020-07-22T14:07:51Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/dsl/embedded/impl/EmbeddedLuceneQuery.java", "diffHunk": "@@ -83,21 +83,23 @@ public void resetQuery() {\n \n    @Override\n    public QueryResult<T> execute() {\n-      List<T> results = StreamSupport.stream(spliterator(), false).collect(Collectors.toList());\n-      long hits = createCacheQuery().getResultSize();\n-      return new QueryResultImpl<>(hits, results);\n+      List<?> results = StreamSupport.stream(spliterator(), false)\n+            .map(i -> (projection == null) ? i : convertProjectionItem(i))\n+            .collect(Collectors.toList());\n+\n+      int hits = Math.toIntExact(createCacheQuery().getResultSize());\n+      return new QueryResultImpl<>(hits, (List<T>) results);\n    }\n \n    @Override\n    public CloseableIterator<T> iterator() {\n-      CloseableIterator<T> iterator = createCacheQuery().iterator();\n-      return rowProcessor == null ? iterator : new MappingIterator(iterator, t -> rowProcessor.apply((Object[]) t));\n+      IndexedQuery<T> cacheQuery = createCacheQuery();\n+      return new MappingIterator(cacheQuery.iterator(), i -> (projection == null) ? i : convertProjectionItem(i) );\n    }\n \n    @Override\n    public int getResultSize() {\n-      //todo [anistor] optimize this by running a slightly modified query that performs just COUNT only, ignoring projections or sorting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI3OTUzNw==", "bodyText": "I have to check :P", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459279537", "createdAt": "2020-07-23T08:06:21Z", "author": {"login": "fax4ever"}, "path": "query/src/main/java/org/infinispan/query/dsl/embedded/impl/EmbeddedLuceneQuery.java", "diffHunk": "@@ -83,21 +83,23 @@ public void resetQuery() {\n \n    @Override\n    public QueryResult<T> execute() {\n-      List<T> results = StreamSupport.stream(spliterator(), false).collect(Collectors.toList());\n-      long hits = createCacheQuery().getResultSize();\n-      return new QueryResultImpl<>(hits, results);\n+      List<?> results = StreamSupport.stream(spliterator(), false)\n+            .map(i -> (projection == null) ? i : convertProjectionItem(i))\n+            .collect(Collectors.toList());\n+\n+      int hits = Math.toIntExact(createCacheQuery().getResultSize());\n+      return new QueryResultImpl<>(hits, (List<T>) results);\n    }\n \n    @Override\n    public CloseableIterator<T> iterator() {\n-      CloseableIterator<T> iterator = createCacheQuery().iterator();\n-      return rowProcessor == null ? iterator : new MappingIterator(iterator, t -> rowProcessor.apply((Object[]) t));\n+      IndexedQuery<T> cacheQuery = createCacheQuery();\n+      return new MappingIterator(cacheQuery.iterator(), i -> (projection == null) ? i : convertProjectionItem(i) );\n    }\n \n    @Override\n    public int getResultSize() {\n-      //todo [anistor] optimize this by running a slightly modified query that performs just COUNT only, ignoring projections or sorting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxOTY5Mg=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0Mzg2MQ==", "bodyText": "From what I can see it seems that we did it. Because fetchTotalHitCount Search 6 API invokes a specific work that does not involve pagination and sorting. @yrodiere Did I say something wrong? (Thanks)", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459443861", "createdAt": "2020-07-23T13:21:47Z", "author": {"login": "fax4ever"}, "path": "query/src/main/java/org/infinispan/query/dsl/embedded/impl/EmbeddedLuceneQuery.java", "diffHunk": "@@ -83,21 +83,23 @@ public void resetQuery() {\n \n    @Override\n    public QueryResult<T> execute() {\n-      List<T> results = StreamSupport.stream(spliterator(), false).collect(Collectors.toList());\n-      long hits = createCacheQuery().getResultSize();\n-      return new QueryResultImpl<>(hits, results);\n+      List<?> results = StreamSupport.stream(spliterator(), false)\n+            .map(i -> (projection == null) ? i : convertProjectionItem(i))\n+            .collect(Collectors.toList());\n+\n+      int hits = Math.toIntExact(createCacheQuery().getResultSize());\n+      return new QueryResultImpl<>(hits, (List<T>) results);\n    }\n \n    @Override\n    public CloseableIterator<T> iterator() {\n-      CloseableIterator<T> iterator = createCacheQuery().iterator();\n-      return rowProcessor == null ? iterator : new MappingIterator(iterator, t -> rowProcessor.apply((Object[]) t));\n+      IndexedQuery<T> cacheQuery = createCacheQuery();\n+      return new MappingIterator(cacheQuery.iterator(), i -> (projection == null) ? i : convertProjectionItem(i) );\n    }\n \n    @Override\n    public int getResultSize() {\n-      //todo [anistor] optimize this by running a slightly modified query that performs just COUNT only, ignoring projections or sorting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxOTY5Mg=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0Njg3NQ==", "bodyText": "You're right. And from what I can see getResultSize() calls fetchTotalHitCount, so we already optimize everything we need.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459446875", "createdAt": "2020-07-23T13:26:08Z", "author": {"login": "yrodiere"}, "path": "query/src/main/java/org/infinispan/query/dsl/embedded/impl/EmbeddedLuceneQuery.java", "diffHunk": "@@ -83,21 +83,23 @@ public void resetQuery() {\n \n    @Override\n    public QueryResult<T> execute() {\n-      List<T> results = StreamSupport.stream(spliterator(), false).collect(Collectors.toList());\n-      long hits = createCacheQuery().getResultSize();\n-      return new QueryResultImpl<>(hits, results);\n+      List<?> results = StreamSupport.stream(spliterator(), false)\n+            .map(i -> (projection == null) ? i : convertProjectionItem(i))\n+            .collect(Collectors.toList());\n+\n+      int hits = Math.toIntExact(createCacheQuery().getResultSize());\n+      return new QueryResultImpl<>(hits, (List<T>) results);\n    }\n \n    @Override\n    public CloseableIterator<T> iterator() {\n-      CloseableIterator<T> iterator = createCacheQuery().iterator();\n-      return rowProcessor == null ? iterator : new MappingIterator(iterator, t -> rowProcessor.apply((Object[]) t));\n+      IndexedQuery<T> cacheQuery = createCacheQuery();\n+      return new MappingIterator(cacheQuery.iterator(), i -> (projection == null) ? i : convertProjectionItem(i) );\n    }\n \n    @Override\n    public int getResultSize() {\n-      //todo [anistor] optimize this by running a slightly modified query that performs just COUNT only, ignoring projections or sorting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxOTY5Mg=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzI4MDE5OnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/impl/CacheQueryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoxMDozM1rOG1kQCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjo0Nzo0OFrOG2I5ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMTY0Mw==", "bodyText": "We are not caching query result size or list anymore:  https://infinispan.org/docs/stable/titles/upgrading/upgrading.html#querying\nIs this something you need to do?", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r458821643", "createdAt": "2020-07-22T14:10:33Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/impl/CacheQueryImpl.java", "diffHunk": "@@ -42,83 +36,36 @@\n    private static final FetchOptions DEFAULT_FETCH_OPTIONS = new FetchOptions().fetchMode(FetchMode.EAGER);\n \n    protected final AdvancedCache<?, ?> cache;\n-   protected final KeyTransformationHandler keyTransformationHandler;\n    protected final PartitionHandlingSupport partitionHandlingSupport;\n    protected QueryDefinition queryDefinition;\n-   private ProjectionConverter projectionConverter;\n \n-   /**\n-    * Create a CacheQueryImpl based on a Lucene query.\n-    */\n-   public CacheQueryImpl(Query luceneQuery, SearchIntegrator searchFactory, AdvancedCache<?, ?> cache,\n-                         KeyTransformationHandler keyTransformationHandler, TimeoutExceptionFactory timeoutExceptionFactory,\n-                         Class<?> entity) {\n-      this(timeoutExceptionFactory == null ? searchFactory.createHSQuery(luceneQuery, entity) :\n-                  searchFactory.createHSQuery(luceneQuery, entity).timeoutExceptionFactory(timeoutExceptionFactory),\n-            cache, keyTransformationHandler);\n-   }\n+   // caching result size, since Search 6 doesn't do that\n+   private Long resultSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyMjA1Mw==", "bodyText": "Right! There is no reason to emulate a deprecated behavior in a deprecated API. I'm removing it.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459422053", "createdAt": "2020-07-23T12:47:48Z", "author": {"login": "fax4ever"}, "path": "query/src/main/java/org/infinispan/query/impl/CacheQueryImpl.java", "diffHunk": "@@ -42,83 +36,36 @@\n    private static final FetchOptions DEFAULT_FETCH_OPTIONS = new FetchOptions().fetchMode(FetchMode.EAGER);\n \n    protected final AdvancedCache<?, ?> cache;\n-   protected final KeyTransformationHandler keyTransformationHandler;\n    protected final PartitionHandlingSupport partitionHandlingSupport;\n    protected QueryDefinition queryDefinition;\n-   private ProjectionConverter projectionConverter;\n \n-   /**\n-    * Create a CacheQueryImpl based on a Lucene query.\n-    */\n-   public CacheQueryImpl(Query luceneQuery, SearchIntegrator searchFactory, AdvancedCache<?, ?> cache,\n-                         KeyTransformationHandler keyTransformationHandler, TimeoutExceptionFactory timeoutExceptionFactory,\n-                         Class<?> entity) {\n-      this(timeoutExceptionFactory == null ? searchFactory.createHSQuery(luceneQuery, entity) :\n-                  searchFactory.createHSQuery(luceneQuery, entity).timeoutExceptionFactory(timeoutExceptionFactory),\n-            cache, keyTransformationHandler);\n-   }\n+   // caching result size, since Search 6 doesn't do that\n+   private Long resultSize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMTY0Mw=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Njc3NzU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/configuration/cache/IndexingConfigurationBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo0NzozNVrOG2FVpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozMjoyN1rOG2Gjvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2Mzc1MQ==", "bodyText": "Why this change ? LOCAL_HEAP_DIRECTORY_PROVIDER is \"local-heap\"", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459363751", "createdAt": "2020-07-23T10:47:35Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/configuration/cache/IndexingConfigurationBuilder.java", "diffHunk": "@@ -320,9 +320,9 @@ public IndexingConfiguration create() {\n       // check for presence of index providers that are not persistent upon restart\n       boolean isVolatile = typedProperties.entrySet().stream()\n                                      .anyMatch(e -> {\n-                                        if (((String) e.getKey()).endsWith(DIRECTORY_PROVIDER_SUFFIX)) {\n+                                        if (((String) e.getKey()).endsWith(\"directory.type\")) {\n                                            String directoryImplementationName = String.valueOf(e.getValue()).trim();\n-                                           return LOCAL_HEAP_DIRECTORY_PROVIDER.equalsIgnoreCase(directoryImplementationName)\n+                                           return \"local-heap\".equalsIgnoreCase(directoryImplementationName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4MjYwOA==", "bodyText": "Ideally I would have not wanted to change the core at all. This is (and the subsequent comment is about this same change) the only change we did to the ISPN core. The reason is that isVolatile must be true if and only if the local heap is used as directory type and we have different names in Search 6 for such property (key and value). I don't know actually if there is any other way to reach the same goal.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459382608", "createdAt": "2020-07-23T11:29:56Z", "author": {"login": "fax4ever"}, "path": "core/src/main/java/org/infinispan/configuration/cache/IndexingConfigurationBuilder.java", "diffHunk": "@@ -320,9 +320,9 @@ public IndexingConfiguration create() {\n       // check for presence of index providers that are not persistent upon restart\n       boolean isVolatile = typedProperties.entrySet().stream()\n                                      .anyMatch(e -> {\n-                                        if (((String) e.getKey()).endsWith(DIRECTORY_PROVIDER_SUFFIX)) {\n+                                        if (((String) e.getKey()).endsWith(\"directory.type\")) {\n                                            String directoryImplementationName = String.valueOf(e.getValue()).trim();\n-                                           return LOCAL_HEAP_DIRECTORY_PROVIDER.equalsIgnoreCase(directoryImplementationName)\n+                                           return \"local-heap\".equalsIgnoreCase(directoryImplementationName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2Mzc1MQ=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4Mzc0Mg==", "bodyText": "Sorry I didn't see well the constant value. Yes I think we can use it. I'm changing it...", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459383742", "createdAt": "2020-07-23T11:32:27Z", "author": {"login": "fax4ever"}, "path": "core/src/main/java/org/infinispan/configuration/cache/IndexingConfigurationBuilder.java", "diffHunk": "@@ -320,9 +320,9 @@ public IndexingConfiguration create() {\n       // check for presence of index providers that are not persistent upon restart\n       boolean isVolatile = typedProperties.entrySet().stream()\n                                      .anyMatch(e -> {\n-                                        if (((String) e.getKey()).endsWith(DIRECTORY_PROVIDER_SUFFIX)) {\n+                                        if (((String) e.getKey()).endsWith(\"directory.type\")) {\n                                            String directoryImplementationName = String.valueOf(e.getValue()).trim();\n-                                           return LOCAL_HEAP_DIRECTORY_PROVIDER.equalsIgnoreCase(directoryImplementationName)\n+                                           return \"local-heap\".equalsIgnoreCase(directoryImplementationName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2Mzc1MQ=="}, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Njc4MTM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/configuration/cache/IndexingConfigurationBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo0ODo1NFrOG2FX_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo0ODo1NFrOG2FX_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2NDM1MQ==", "bodyText": "DIRECTORY_PROVIDER_SUFFIX should probably become \"directory.type\". It is used in other places in this class, which I think are broken now unless we make the change", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459364351", "createdAt": "2020-07-23T10:48:54Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/configuration/cache/IndexingConfigurationBuilder.java", "diffHunk": "@@ -320,9 +320,9 @@ public IndexingConfiguration create() {\n       // check for presence of index providers that are not persistent upon restart\n       boolean isVolatile = typedProperties.entrySet().stream()\n                                      .anyMatch(e -> {\n-                                        if (((String) e.getKey()).endsWith(DIRECTORY_PROVIDER_SUFFIX)) {\n+                                        if (((String) e.getKey()).endsWith(\"directory.type\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973742666427584064f0529d85af66024e57d0ab"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQ3NDM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/configuration/cache/IndexingConfigurationBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTowMjoxM1rOG2oLWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTozMjozN1rOG2pFfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNDU1Mw==", "bodyText": "I suspect the suffix directory_provider here also must become directory.type", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459934553", "createdAt": "2020-07-24T09:02:13Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/configuration/cache/IndexingConfigurationBuilder.java", "diffHunk": "@@ -29,11 +29,12 @@\n  */\n public class IndexingConfigurationBuilder extends AbstractConfigurationChildBuilder implements Builder<IndexingConfiguration>, ConfigurationBuilderInfo {\n \n-   private static final String DIRECTORY_PROVIDER_SUFFIX = \".directory_provider\";\n+   private static final String DIRECTORY_PROVIDER_SUFFIX = \"directory.type\";\n \n+   // TODO Check if *KEY1* can be used\n    private static final String DIRECTORY_PROVIDER_KEY1 = \"hibernate.search.default.directory_provider\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55832fad3a9ae160316397b34fb49e0af665d09f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0OTQzOA==", "bodyText": "Doing the change now... Anyway the full property path is hibernate.search.backends.infinispan_backend.directory.type, see org.infinispan.search.mapper.mapping.impl.IndexProperties, in particular the line:\nonfigurationPropertySource basePropertySource =\n            propertyChecker.wrap(ConfigurationPropertySource.fromMap(backendProperties))\n                  .withPrefix(BACKEND_PROPERTIES_PREFIX);\nOf course you can arrange the simplification of the path as you wish, I did here an example of that.", "url": "https://github.com/infinispan/infinispan/pull/8571#discussion_r459949438", "createdAt": "2020-07-24T09:32:37Z", "author": {"login": "fax4ever"}, "path": "core/src/main/java/org/infinispan/configuration/cache/IndexingConfigurationBuilder.java", "diffHunk": "@@ -29,11 +29,12 @@\n  */\n public class IndexingConfigurationBuilder extends AbstractConfigurationChildBuilder implements Builder<IndexingConfiguration>, ConfigurationBuilderInfo {\n \n-   private static final String DIRECTORY_PROVIDER_SUFFIX = \".directory_provider\";\n+   private static final String DIRECTORY_PROVIDER_SUFFIX = \"directory.type\";\n \n+   // TODO Check if *KEY1* can be used\n    private static final String DIRECTORY_PROVIDER_KEY1 = \"hibernate.search.default.directory_provider\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkzNDU1Mw=="}, "originalCommit": {"oid": "55832fad3a9ae160316397b34fb49e0af665d09f"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4010, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}