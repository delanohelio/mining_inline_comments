{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NjE5OTUw", "number": 8438, "title": "ISPN-11975 Non blocking HR client publisher", "bodyText": "https://issues.redhat.com/browse/ISPN-11975", "createdAt": "2020-06-05T17:52:32Z", "url": "https://github.com/infinispan/infinispan/pull/8438", "merged": true, "mergeCommit": {"oid": "5a44905250ec983c4687d24d65e6591a5147843c"}, "closed": true, "closedAt": "2020-06-11T08:41:19Z", "author": {"login": "wburns"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoWpK6ABqjM0MTI1Mzg0MDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp8bGggBqjM0MzA1NDM3Mzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f4df10eab57aaba47554f95467bc569a840d929", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/9f4df10eab57aaba47554f95467bc569a840d929", "committedDate": "2020-06-05T17:51:38Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}, "afterCommit": {"oid": "5db7a94f537d7158d857c06771d0d5412ad13db8", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/5db7a94f537d7158d857c06771d0d5412ad13db8", "committedDate": "2020-06-05T18:05:49Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5db7a94f537d7158d857c06771d0d5412ad13db8", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/5db7a94f537d7158d857c06771d0d5412ad13db8", "committedDate": "2020-06-05T18:05:49Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}, "afterCommit": {"oid": "fbd48f2f77597c9b87a815506e255792abf543c3", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/fbd48f2f77597c9b87a815506e255792abf543c3", "committedDate": "2020-06-05T18:17:56Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbd48f2f77597c9b87a815506e255792abf543c3", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/fbd48f2f77597c9b87a815506e255792abf543c3", "committedDate": "2020-06-05T18:17:56Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}, "afterCommit": {"oid": "b2089df05207aa70e3026a3e0e106a99d2312aaf", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/b2089df05207aa70e3026a3e0e106a99d2312aaf", "committedDate": "2020-06-05T22:26:01Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2089df05207aa70e3026a3e0e106a99d2312aaf", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/b2089df05207aa70e3026a3e0e106a99d2312aaf", "committedDate": "2020-06-05T22:26:01Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}, "afterCommit": {"oid": "7298027ade68a9249f09da7009fc57cb260a2226", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/7298027ade68a9249f09da7009fc57cb260a2226", "committedDate": "2020-06-08T18:21:08Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7298027ade68a9249f09da7009fc57cb260a2226", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/7298027ade68a9249f09da7009fc57cb260a2226", "committedDate": "2020-06-08T18:21:08Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}, "afterCommit": {"oid": "8534dedddb639edd13066b2969fb42388fb5d416", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/8534dedddb639edd13066b2969fb42388fb5d416", "committedDate": "2020-06-09T15:09:30Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8534dedddb639edd13066b2969fb42388fb5d416", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/8534dedddb639edd13066b2969fb42388fb5d416", "committedDate": "2020-06-09T15:09:30Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}, "afterCommit": {"oid": "371d44e518f606d6d4bdb90b1a8ac1031c506f23", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/371d44e518f606d6d4bdb90b1a8ac1031c506f23", "committedDate": "2020-06-09T19:38:58Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MTUzNDg3", "url": "https://github.com/infinispan/infinispan/pull/8438#pullrequestreview-428153487", "createdAt": "2020-06-10T15:08:12Z", "commit": {"oid": "371d44e518f606d6d4bdb90b1a8ac1031c506f23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTowODoxMlrOGh5c8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTowODoxMlrOGh5c8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NzQ5MQ==", "bodyText": "Why are all these Object, Object instead of parameterized as K, V ?", "url": "https://github.com/infinispan/infinispan/pull/8438#discussion_r438197491", "createdAt": "2020-06-10T15:08:12Z", "author": {"login": "tristantarrant"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCache.java", "diffHunk": "@@ -238,11 +253,36 @@\n     */\n    CloseableIterator<Entry<Object, Object>> retrieveEntriesByQuery(Query filterQuery, Set<Integer> segments, int batchSize);\n \n+   /**\n+    * Publish entries from the server matching a query.\n+    * <p>\n+    * Any subscriber that subscribes to the returned Publisher must not block. It is therefore recommended to offload\n+    * any blocking or long running operations to a different thread and not use the invoking one. Failure to do so\n+    * may cause concurrent operations to stall.\n+    * @param filterQuery {@link Query}\n+    * @param segments    The segments to utilize. If null all segments will be utilized. An empty set will filter out all entries.\n+    * @param batchSize   The number of entries transferred from the server at a time.\n+    * @return Publisher containing matching entries\n+    */\n+   Publisher<Entry<Object, Object>> publishEntriesByQuery(Query filterQuery, Set<Integer> segments, int batchSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "371d44e518f606d6d4bdb90b1a8ac1031c506f23"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MTU2NTU5", "url": "https://github.com/infinispan/infinispan/pull/8438#pullrequestreview-428156559", "createdAt": "2020-06-10T15:11:20Z", "commit": {"oid": "371d44e518f606d6d4bdb90b1a8ac1031c506f23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNToxMToyMFrOGh5lhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNToxMToyMFrOGh5lhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5OTY4Nw==", "bodyText": "warnings must have a log id", "url": "https://github.com/infinispan/infinispan/pull/8438#discussion_r438199687", "createdAt": "2020-06-10T15:11:20Z", "author": {"login": "tristantarrant"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/iteration/RemoteInnerPublisherHandler.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.infinispan.client.hotrod.impl.iteration;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.net.SocketAddress;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n+\n+import org.infinispan.client.hotrod.exceptions.RemoteIllegalLifecycleStateException;\n+import org.infinispan.client.hotrod.exceptions.TransportException;\n+import org.infinispan.client.hotrod.impl.operations.IterationNextResponse;\n+import org.infinispan.client.hotrod.impl.operations.IterationStartResponse;\n+import org.infinispan.client.hotrod.logging.Log;\n+import org.infinispan.client.hotrod.logging.LogFactory;\n+import org.infinispan.commons.reactive.AbstractAsyncPublisherHandler;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.commons.util.logging.TraceException;\n+\n+import io.netty.channel.Channel;\n+\n+class RemoteInnerPublisherHandler<E> extends AbstractAsyncPublisherHandler<Map.Entry<SocketAddress, IntSet>,\n+      Map.Entry<Object, E>, IterationStartResponse, IterationNextResponse<E>> {\n+   private static final Log log = LogFactory.getLog(MethodHandles.lookup().lookupClass());\n+\n+   protected final RemotePublisher<E> publisher;\n+\n+   // Need to be volatile since cancel can come on a different thread\n+   protected volatile Channel channel;\n+   private volatile byte[] iterationId;\n+   private AtomicBoolean cancelled = new AtomicBoolean();\n+\n+   protected RemoteInnerPublisherHandler(RemotePublisher<E> parent, int batchSize,\n+         Supplier<Map.Entry<SocketAddress, IntSet>> supplier, Map.Entry<SocketAddress, IntSet> firstTarget) {\n+      super(batchSize, supplier, firstTarget);\n+      this.publisher = parent;\n+   }\n+\n+   private String iterationId() {\n+      return publisher.iterationId(iterationId);\n+   }\n+\n+   @Override\n+   protected void sendCancel(Map.Entry<SocketAddress, IntSet> target) {\n+      if (!cancelled.getAndSet(true)) {\n+         actualCancel();\n+      }\n+   }\n+\n+   private void actualCancel() {\n+      if (iterationId != null && channel != null) {\n+         // Just let cancel complete asynchronously\n+         publisher.sendCancel(iterationId, channel);\n+      }\n+   }\n+\n+   @Override\n+   protected CompletionStage<IterationStartResponse> sendInitialCommand(\n+         Map.Entry<SocketAddress, IntSet> target, int batchSize) {\n+      SocketAddress address = target.getKey();\n+      IntSet segments = target.getValue();\n+      if (log.isDebugEnabled()) {\n+         log.debugf(\"Starting iteration with segments %s\", segments);\n+      }\n+      return publisher.newIteratorStartOperation(address, segments, batchSize);\n+   }\n+\n+   @Override\n+   protected CompletionStage<IterationNextResponse<E>> sendNextCommand(Map.Entry<SocketAddress, IntSet> target, int batchSize) {\n+      return publisher.newIteratorNextOperation(iterationId, channel);\n+   }\n+\n+   @Override\n+   protected long handleInitialResponse(IterationStartResponse startResponse, Map.Entry<SocketAddress, IntSet> target) {\n+      this.channel = startResponse.getChannel();\n+      this.iterationId = startResponse.getIterationId();\n+      if (log.isDebugEnabled()) {\n+         log.iterationTransportObtained(channel.remoteAddress(), iterationId());\n+         log.startedIteration(iterationId());\n+      }\n+\n+      if (cancelled.get()) {\n+         actualCancel();\n+      }\n+      return 0;\n+   }\n+\n+   @Override\n+   protected long handleNextResponse(IterationNextResponse<E> nextResponse, Map.Entry<SocketAddress, IntSet> target) {\n+      if (!nextResponse.hasMore()) {\n+         // server doesn't clean up when complete\n+         sendCancel(target);\n+         publisher.completeSegments(target.getValue());\n+         targetComplete();\n+      }\n+      IntSet completedSegments = nextResponse.getCompletedSegments();\n+      if (completedSegments != null && log.isTraceEnabled()) {\n+         IntSet targetSegments = target.getValue();\n+         if (targetSegments != null) {\n+            targetSegments.removeAll(completedSegments);\n+         }\n+      }\n+      publisher.completeSegments(completedSegments);\n+      List<Map.Entry<Object, E>> entries = nextResponse.getEntries();\n+      for (Map.Entry<Object, E> entry : entries) {\n+         if (!onNext(entry)) {\n+            break;\n+         }\n+      }\n+      return entries.size();\n+   }\n+\n+   @Override\n+   protected void handleThrowableInResponse(Throwable t, Map.Entry<SocketAddress, IntSet> target) {\n+      if (t instanceof TransportException || t instanceof RemoteIllegalLifecycleStateException) {\n+         log.warnf(t, \"Error reaching the server during iteration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "371d44e518f606d6d4bdb90b1a8ac1031c506f23"}, "originalPosition": 117}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42024f31f2aa634ccd2bbdf97b53dcd4b58f41c9", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/42024f31f2aa634ccd2bbdf97b53dcd4b58f41c9", "committedDate": "2020-06-10T16:39:25Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking\n\n* Moving TraceException to commons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7434ae29a9353161a483c1464440ce3dc5cce96", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/e7434ae29a9353161a483c1464440ce3dc5cce96", "committedDate": "2020-06-10T16:39:25Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b68bcc4e05852b32a07d9bb0a67c5731ff436403", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/b68bcc4e05852b32a07d9bb0a67c5731ff436403", "committedDate": "2020-06-10T16:40:43Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "371d44e518f606d6d4bdb90b1a8ac1031c506f23", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/371d44e518f606d6d4bdb90b1a8ac1031c506f23", "committedDate": "2020-06-09T19:38:58Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}, "afterCommit": {"oid": "b68bcc4e05852b32a07d9bb0a67c5731ff436403", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/b68bcc4e05852b32a07d9bb0a67c5731ff436403", "committedDate": "2020-06-10T16:40:43Z", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 598, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}