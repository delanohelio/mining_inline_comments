{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4Mzk5NDQy", "number": 8747, "title": "ISPN-12392  EndpointInteroperabilityTest.testStringKeysAndByteArrayValue failing", "bodyText": "https://issues.redhat.com/browse/ISPN-12392", "createdAt": "2020-10-06T09:29:43Z", "url": "https://github.com/infinispan/infinispan/pull/8747", "merged": true, "mergeCommit": {"oid": "5b63d3f5a4ceed08cbce2a7532c6b93bc9809621"}, "closed": true, "closedAt": "2020-10-12T07:55:08Z", "author": {"login": "gustavonalle"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdP4J7xAFqTUwMjg5OTAwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQ3p9bABqjM4NjA2MjQ1MTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyODk5MDA2", "url": "https://github.com/infinispan/infinispan/pull/8747#pullrequestreview-502899006", "createdAt": "2020-10-06T12:45:16Z", "commit": {"oid": "3a845cbc1aa8dfcb00b0c9c85fa3cd573efc647f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzowODo1NVrOHdFhjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoxMTozMFrOHdFo_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MTI2Mw==", "bodyText": "HotRodServer avoids the toString() calls by keeping a map cacheName -> CacheInfo, and in the CacheInfo a map KeyValuePair<MediaType, MediaType> -> encoded cache.\nThe only gotcha is that MediaType.toString() ignores the weight parameter, while equals() and hashCode() do not.  I'd rather we remove the weight parameter explicitly instead of ignoring it in toString(). FWIW HotRodServer ignores all parameters when creating the encoded cache (with getTypeSubType()), which is probably wrong.", "url": "https://github.com/infinispan/infinispan/pull/8747#discussion_r500261263", "createdAt": "2020-10-06T13:08:55Z", "author": {"login": "danberindei"}, "path": "server/rest/src/main/java/org/infinispan/rest/cachemanager/RestCacheManager.java", "diffHunk": "@@ -71,14 +71,16 @@ public RestCacheManager(EmbeddedCacheManager instance, Predicate<? super String>\n          throw logger.missingRequiredMediaType(name);\n       }\n       checkCacheAvailable(name);\n-      String cacheKey = name + \"-\" + keyContentType.getTypeSubtype() + valueContentType.getTypeSubtype();\n+      String mapKey = keyContentType.toString();\n+      String mapValue = valueContentType.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a845cbc1aa8dfcb00b0c9c85fa3cd573efc647f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MzE2NA==", "bodyText": "We should also verify that using a media type list with q parameters does not create a new encoded cache.", "url": "https://github.com/infinispan/infinispan/pull/8747#discussion_r500263164", "createdAt": "2020-10-06T13:11:30Z", "author": {"login": "danberindei"}, "path": "server/rest/src/test/java/org/infinispan/rest/cachemanager/RestCacheManagerTest.java", "diffHunk": "@@ -60,17 +60,14 @@ public void shouldReuseEncodedCaches() {\n       // Verify they are stored internally\n       assertEquals(knownCaches.size(), 4);\n \n-\n-      // Requesting again with same media, or with same media but different parameters should reuse internal instance\n+      // Requesting again with same media but different parameters should not reuse internal instance\n       Mockito.reset(embeddedCacheManager);\n-      restCacheManager.getCache(\"cache2\", MediaType.MATCH_ALL, MediaType.TEXT_PLAIN, request);\n       restCacheManager.getCache(\"cache2\", MediaType.MATCH_ALL, MediaType.fromString(\"text/plain; charset=UTF-8\"), request);\n       restCacheManager.getCache(\"cache2\", MediaType.MATCH_ALL, MediaType.fromString(\"text/plain; charset=SHIFT-JIS\"), request);\n \n-      assertEquals(knownCaches.keySet().size(), 4);\n+      assertEquals(knownCaches.keySet().size(), 6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a845cbc1aa8dfcb00b0c9c85fa3cd573efc647f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b26e0a592ff1a996073061847b9768506dbede70", "author": {"user": {"login": "gustavonalle", "name": "Gustavo"}}, "url": "https://github.com/infinispan/infinispan/commit/b26e0a592ff1a996073061847b9768506dbede70", "committedDate": "2020-10-06T15:36:05Z", "message": "ISPN-12392 Fix outdated comments in test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a845cbc1aa8dfcb00b0c9c85fa3cd573efc647f", "author": {"user": {"login": "gustavonalle", "name": "Gustavo"}}, "url": "https://github.com/infinispan/infinispan/commit/3a845cbc1aa8dfcb00b0c9c85fa3cd573efc647f", "committedDate": "2020-10-06T09:25:29Z", "message": "ISPN-12378 EndpointInteroperabilityTest.testStringKeysAndByteArrayValue failing\n\n* Internal map of knownCaches should not ignore media type params"}, "afterCommit": {"oid": "8c3f74c0bccb3d70ea7209f04c31bf4acf5881fc", "author": {"user": {"login": "gustavonalle", "name": "Gustavo"}}, "url": "https://github.com/infinispan/infinispan/commit/8c3f74c0bccb3d70ea7209f04c31bf4acf5881fc", "committedDate": "2020-10-07T12:33:02Z", "message": "ISPN-12392 EndpointInteroperabilityTest.testStringKeysAndByteArrayValue failing\n\n* Refactor knownCaches from REST and HotRod\n* Avoid calling toString on MediaType\n* Avoid filtering parameters when caching MediaTypes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NjI3OTky", "url": "https://github.com/infinispan/infinispan/pull/8747#pullrequestreview-505627992", "createdAt": "2020-10-09T12:32:33Z", "commit": {"oid": "8c3f74c0bccb3d70ea7209f04c31bf4acf5881fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMjozMjozM1rOHfHuiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMjozMjozM1rOHfHuiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM5NDUwNw==", "bodyText": "Love the explicit generic types!", "url": "https://github.com/infinispan/infinispan/pull/8747#discussion_r502394507", "createdAt": "2020-10-09T12:32:33Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/AdvancedCache.java", "diffHunk": "@@ -826,9 +827,17 @@ default V merge(K key, V value, SerializableBiFunction<? super V, ? super V, ? e\n     * @param valueMediaType {@link org.infinispan.commons.dataconversion} for the values.\n     * @return an instance of {@link AdvancedCache} where all data will formatted according to the supplied {@link\n     * org.infinispan.commons.dataconversion.MediaType}.\n+    *\n+    * @deprecated Use {@link #withMediaType(MediaType, MediaType)} instead.\n     */\n+   @Deprecated\n    AdvancedCache<?, ?> withMediaType(String keyMediaType, String valueMediaType);\n \n+   /**\n+    * @see #withMediaType(String, String)\n+    */\n+   <K1, V1> AdvancedCache<K1, V1> withMediaType(MediaType keyMediaType, MediaType valueMediaType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c3f74c0bccb3d70ea7209f04c31bf4acf5881fc"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NzQ2MjEw", "url": "https://github.com/infinispan/infinispan/pull/8747#pullrequestreview-505746210", "createdAt": "2020-10-09T14:50:02Z", "commit": {"oid": "8c3f74c0bccb3d70ea7209f04c31bf4acf5881fc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDo1MDowMlrOHfNJCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDo1MDowMlrOHfNJCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ4MzIwOA==", "bodyText": "You missed a cast that's not needed any more on line 25", "url": "https://github.com/infinispan/infinispan/pull/8747#discussion_r502483208", "createdAt": "2020-10-09T14:50:02Z", "author": {"login": "danberindei"}, "path": "server/tests/src/test/java/org/infinispan/server/persistence/CustomNonBlockingStore.java", "diffHunk": "@@ -23,7 +23,7 @@\n    public CompletionStage<Void> start(InitializationContext ctx) {\n       marshallableEntryFactory = ctx.getMarshallableEntryFactory();\n       AdvancedCache<String, String> object = (AdvancedCache) ctx.getCache().getAdvancedCache()\n-            .withMediaType(MediaType.APPLICATION_OBJECT_TYPE, MediaType.APPLICATION_OBJECT_TYPE);\n+            .withMediaType(MediaType.APPLICATION_OBJECT, MediaType.APPLICATION_OBJECT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c3f74c0bccb3d70ea7209f04c31bf4acf5881fc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "741e62321e739e53a358a988e092c001087a75ef", "author": {"user": {"login": "gustavonalle", "name": "Gustavo"}}, "url": "https://github.com/infinispan/infinispan/commit/741e62321e739e53a358a988e092c001087a75ef", "committedDate": "2020-10-09T15:10:09Z", "message": "ISPN-12392 EndpointInteroperabilityTest.testStringKeysAndByteArrayValue failing\n\n* Refactor knownCaches from REST and HotRod\n* Avoid calling toString on MediaType\n* Avoid filtering parameters when caching MediaTypes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c3f74c0bccb3d70ea7209f04c31bf4acf5881fc", "author": {"user": {"login": "gustavonalle", "name": "Gustavo"}}, "url": "https://github.com/infinispan/infinispan/commit/8c3f74c0bccb3d70ea7209f04c31bf4acf5881fc", "committedDate": "2020-10-07T12:33:02Z", "message": "ISPN-12392 EndpointInteroperabilityTest.testStringKeysAndByteArrayValue failing\n\n* Refactor knownCaches from REST and HotRod\n* Avoid calling toString on MediaType\n* Avoid filtering parameters when caching MediaTypes"}, "afterCommit": {"oid": "741e62321e739e53a358a988e092c001087a75ef", "author": {"user": {"login": "gustavonalle", "name": "Gustavo"}}, "url": "https://github.com/infinispan/infinispan/commit/741e62321e739e53a358a988e092c001087a75ef", "committedDate": "2020-10-09T15:10:09Z", "message": "ISPN-12392 EndpointInteroperabilityTest.testStringKeysAndByteArrayValue failing\n\n* Refactor knownCaches from REST and HotRod\n* Avoid calling toString on MediaType\n* Avoid filtering parameters when caching MediaTypes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 353, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}