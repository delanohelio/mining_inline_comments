{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MzYyOTI3", "number": 8753, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDo1OTo1OVrOEsFjcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDo1MzowOVrOEwzoPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjYzNzkyOnYy", "diffSide": "RIGHT", "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/Encoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDo1OTo1OVrOHfNmNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoyMjoyNVrOHf4k-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ5MDY3OA==", "bodyText": "I suggest \"will be removed in version 15.0\" or similar, here and in the other deprecated classes.\nIdeally a JIRA linked in ISPN-12158 as well.", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r502490678", "createdAt": "2020-10-09T14:59:59Z", "author": {"login": "danberindei"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/Encoder.java", "diffHunk": "@@ -4,7 +4,9 @@\n  * Used to convert data between read/write format and storage format.\n  *\n  * @since 9.1\n+ * @deprecated Since 12.0, use {@link Transcoder} for all data conversions instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2229f6ff3fb351838157a54bb7b62967442fe087"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NDg3NQ==", "bodyText": "done", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r503194875", "createdAt": "2020-10-12T10:22:25Z", "author": {"login": "gustavonalle"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/Encoder.java", "diffHunk": "@@ -4,7 +4,9 @@\n  * Used to convert data between read/write format and storage format.\n  *\n  * @since 9.1\n+ * @deprecated Since 12.0, use {@link Transcoder} for all data conversions instead.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ5MDY3OA=="}, "originalCommit": {"oid": "2229f6ff3fb351838157a54bb7b62967442fe087"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTAzNTM0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/dataconversion/GzipTranscoder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoyOTo1MVrOHfyPDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0MjoyN1rOHmoIuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDk1OA==", "bodyText": "This sounds dangerous @gustavonalle. Since it supports application/x-java-object, users will expect it to work for their custom objects as well. But decompress always produces a String, so users won't be able to get back any object that's not a String.\nI suggest removing GzipTranscoder.", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r503090958", "createdAt": "2020-10-12T07:29:51Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/dataconversion/GzipTranscoder.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.infinispan.dataconversion;\n+\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_OBJECT;\n+import static org.infinispan.dataconversion.Gzip.compress;\n+import static org.infinispan.dataconversion.Gzip.decompress;\n+\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.OneToManyTranscoder;\n+\n+/**\n+ * @since 12.0\n+ */\n+public class GzipTranscoder extends OneToManyTranscoder {\n+   public static final String APPLICATION_GZIP_TYPE = \"application/gzip\";\n+   public static final MediaType APPLICATION_GZIP = MediaType.fromString(APPLICATION_GZIP_TYPE);\n+\n+   public GzipTranscoder() {\n+      super(APPLICATION_GZIP, APPLICATION_OBJECT);\n+   }\n+\n+   @Override\n+   public Object transcode(Object content, MediaType contentType, MediaType destinationType) {\n+      if (destinationType.match(APPLICATION_GZIP)) {\n+         return compress(content.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2229f6ff3fb351838157a54bb7b62967442fe087"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE0MTEzMA==", "bodyText": "This transcoder is not in production, but I can change it to avoid such pitfalls so that it's more robust", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r503141130", "createdAt": "2020-10-12T08:55:12Z", "author": {"login": "gustavonalle"}, "path": "core/src/test/java/org/infinispan/dataconversion/GzipTranscoder.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.infinispan.dataconversion;\n+\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_OBJECT;\n+import static org.infinispan.dataconversion.Gzip.compress;\n+import static org.infinispan.dataconversion.Gzip.decompress;\n+\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.OneToManyTranscoder;\n+\n+/**\n+ * @since 12.0\n+ */\n+public class GzipTranscoder extends OneToManyTranscoder {\n+   public static final String APPLICATION_GZIP_TYPE = \"application/gzip\";\n+   public static final MediaType APPLICATION_GZIP = MediaType.fromString(APPLICATION_GZIP_TYPE);\n+\n+   public GzipTranscoder() {\n+      super(APPLICATION_GZIP, APPLICATION_OBJECT);\n+   }\n+\n+   @Override\n+   public Object transcode(Object content, MediaType contentType, MediaType destinationType) {\n+      if (destinationType.match(APPLICATION_GZIP)) {\n+         return compress(content.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDk1OA=="}, "originalCommit": {"oid": "2229f6ff3fb351838157a54bb7b62967442fe087"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NDk2OQ==", "bodyText": "changed", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r503194969", "createdAt": "2020-10-12T10:22:36Z", "author": {"login": "gustavonalle"}, "path": "core/src/test/java/org/infinispan/dataconversion/GzipTranscoder.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.infinispan.dataconversion;\n+\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_OBJECT;\n+import static org.infinispan.dataconversion.Gzip.compress;\n+import static org.infinispan.dataconversion.Gzip.decompress;\n+\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.OneToManyTranscoder;\n+\n+/**\n+ * @since 12.0\n+ */\n+public class GzipTranscoder extends OneToManyTranscoder {\n+   public static final String APPLICATION_GZIP_TYPE = \"application/gzip\";\n+   public static final MediaType APPLICATION_GZIP = MediaType.fromString(APPLICATION_GZIP_TYPE);\n+\n+   public GzipTranscoder() {\n+      super(APPLICATION_GZIP, APPLICATION_OBJECT);\n+   }\n+\n+   @Override\n+   public Object transcode(Object content, MediaType contentType, MediaType destinationType) {\n+      if (destinationType.match(APPLICATION_GZIP)) {\n+         return compress(content.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDk1OA=="}, "originalCommit": {"oid": "2229f6ff3fb351838157a54bb7b62967442fe087"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NTUzMQ==", "bodyText": "I don't like the new transcoder implementation either :)\n\nThe \"compression\" of Java objects assumes that those objects are serializable, which seems wrong. I'd rather not support application/x-java-object at all.\nThe decompression only works if the destination media type is application/x-java-object, even if the input was a byte[] in any other (now lost) media type.\n\nI still think that we'll have to add back some kind of encoding that's independent of transcoding eventually, but right now it would be best to remove GzipTranscoder.", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r510265531", "createdAt": "2020-10-22T15:42:27Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/dataconversion/GzipTranscoder.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.infinispan.dataconversion;\n+\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_OBJECT;\n+import static org.infinispan.dataconversion.Gzip.compress;\n+import static org.infinispan.dataconversion.Gzip.decompress;\n+\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.OneToManyTranscoder;\n+\n+/**\n+ * @since 12.0\n+ */\n+public class GzipTranscoder extends OneToManyTranscoder {\n+   public static final String APPLICATION_GZIP_TYPE = \"application/gzip\";\n+   public static final MediaType APPLICATION_GZIP = MediaType.fromString(APPLICATION_GZIP_TYPE);\n+\n+   public GzipTranscoder() {\n+      super(APPLICATION_GZIP, APPLICATION_OBJECT);\n+   }\n+\n+   @Override\n+   public Object transcode(Object content, MediaType contentType, MediaType destinationType) {\n+      if (destinationType.match(APPLICATION_GZIP)) {\n+         return compress(content.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDk1OA=="}, "originalCommit": {"oid": "2229f6ff3fb351838157a54bb7b62967442fe087"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTA0MjU4OnYy", "diffSide": "RIGHT", "path": "integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/ReplEmbeddedRestHotRodTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzozMjowM1rOHfyTdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzozMjowM1rOHfyTdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MjA4NQ==", "bodyText": "The comment seems out of date", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r503092085", "createdAt": "2020-10-12T07:32:03Z", "author": {"login": "danberindei"}, "path": "integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/ReplEmbeddedRestHotRodTest.java", "diffHunk": "@@ -61,7 +60,7 @@ public void testEmbeddedPutRestHotRodGet() {\n       final String key = \"2\";\n \n       // 1. Put with Embedded, bypassing all encodings\n-      Cache cache = cacheFactory2.getEmbeddedCache().getAdvancedCache().withEncoding(IdentityEncoder.class);\n+      Cache cache = cacheFactory2.getEmbeddedCache().getAdvancedCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2229f6ff3fb351838157a54bb7b62967442fe087"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTA0Njk0OnYy", "diffSide": "RIGHT", "path": "jboss-marshalling/src/test/java/org/infinispan/jboss/marshalling/dataconversion/DataConversionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzozMzozOFrOHfyWRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzozMzozOFrOHfyWRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MjgwNw==", "bodyText": "This method is supposed to test the encoder itself, so I think it shouldn't change for now.", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r503092807", "createdAt": "2020-10-12T07:33:38Z", "author": {"login": "danberindei"}, "path": "jboss-marshalling/src/test/java/org/infinispan/jboss/marshalling/dataconversion/DataConversionTest.java", "diffHunk": "@@ -8,24 +9,20 @@\n \n import org.infinispan.AdvancedCache;\n import org.infinispan.Cache;\n+import org.infinispan.commons.dataconversion.MediaType;\n import org.infinispan.configuration.cache.ConfigurationBuilder;\n-import org.infinispan.factories.GlobalComponentRegistry;\n import org.infinispan.jboss.marshalling.commons.GenericJBossMarshaller;\n-import org.infinispan.marshall.core.EncoderRegistry;\n import org.infinispan.test.CacheManagerCallable;\n import org.infinispan.test.data.Person;\n import org.testng.annotations.Test;\n \n @Test(groups = \"functional\", testName = \"marshall.jboss.DataConversionTest\")\n public class DataConversionTest extends org.infinispan.dataconversion.DataConversionTest {\n+   private final GenericJBossMarshaller marshaller = new GenericJBossMarshaller();\n \n    @Test\n    public void testObjectEncoder() {\n-      GenericJbossMarshallerEncoder encoder = new GenericJbossMarshallerEncoder(org.infinispan.dataconversion.DataConversionTest.class.getClassLoader());\n-      withCacheManager(new CacheManagerCallable(\n-            createCacheManager(new ConfigurationBuilder())) {\n-\n-         GenericJBossMarshaller marshaller = new GenericJBossMarshaller();\n+      withCacheManager(new CacheManagerCallable(createCacheManager(new ConfigurationBuilder())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2229f6ff3fb351838157a54bb7b62967442fe087"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjEwODM2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/dataconversion/DataConversionTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDo0ODo1MFrOHmlosg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTozMzoxOVrOHnGSBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyNDU2Mg==", "bodyText": "Should we use withMediaType ? Also should we have a withMediaType(MediaType)  method? I noticed we only have the two argument one.", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r510224562", "createdAt": "2020-10-22T14:48:50Z", "author": {"login": "wburns"}, "path": "core/src/test/java/org/infinispan/dataconversion/DataConversionTest.java", "diffHunk": "@@ -174,7 +173,7 @@ public void call() {\n             Cache<String, Person> cache = cm.getCache();\n             cm.getClassAllowList().addClasses(Person.class);\n             // Obtain cache with custom valueEncoder\n-            Cache storeMarshalled = cache.getAdvancedCache().withEncoding(JavaSerializationEncoder.class);\n+            Cache storeMarshalled = cache.getAdvancedCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc21627ed0b05f62ab2b0d74052fce758903af5"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1MTM1Ng==", "bodyText": "Should we use withMediaType\n\nThe test mechanics changed :)\n\nshould we have a withMediaType(MediaType) method?\n\nI can add it", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r510251356", "createdAt": "2020-10-22T15:23:45Z", "author": {"login": "gustavonalle"}, "path": "core/src/test/java/org/infinispan/dataconversion/DataConversionTest.java", "diffHunk": "@@ -174,7 +173,7 @@ public void call() {\n             Cache<String, Person> cache = cm.getCache();\n             cm.getClassAllowList().addClasses(Person.class);\n             // Obtain cache with custom valueEncoder\n-            Cache storeMarshalled = cache.getAdvancedCache().withEncoding(JavaSerializationEncoder.class);\n+            Cache storeMarshalled = cache.getAdvancedCache();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyNDU2Mg=="}, "originalCommit": {"oid": "0fc21627ed0b05f62ab2b0d74052fce758903af5"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1MjE0MA==", "bodyText": "I think the point is that the values need to be transcoded to java/x-java-object anyway, but I agree that it may be more relevant (and more similar to the initial version of the test) if storeMarshalled had used media type application/x-java-serialized-object.", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r510252140", "createdAt": "2020-10-22T15:24:47Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/dataconversion/DataConversionTest.java", "diffHunk": "@@ -174,7 +173,7 @@ public void call() {\n             Cache<String, Person> cache = cm.getCache();\n             cm.getClassAllowList().addClasses(Person.class);\n             // Obtain cache with custom valueEncoder\n-            Cache storeMarshalled = cache.getAdvancedCache().withEncoding(JavaSerializationEncoder.class);\n+            Cache storeMarshalled = cache.getAdvancedCache();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyNDU2Mg=="}, "originalCommit": {"oid": "0fc21627ed0b05f62ab2b0d74052fce758903af5"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1OTQzMQ==", "bodyText": "should we have a withMediaType(MediaType) method?\n\nI can add it\n\nYou can add it for completeness, but IMO it doesn't make a lot of sense. The keys and values are usually going to have the same media type only when using a marshaller's media type, and then changing the media type doesn't make a lot of sense (except maybe protostream <-> JSON?)", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r510759431", "createdAt": "2020-10-23T09:33:19Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/dataconversion/DataConversionTest.java", "diffHunk": "@@ -174,7 +173,7 @@ public void call() {\n             Cache<String, Person> cache = cm.getCache();\n             cm.getClassAllowList().addClasses(Person.class);\n             // Obtain cache with custom valueEncoder\n-            Cache storeMarshalled = cache.getAdvancedCache().withEncoding(JavaSerializationEncoder.class);\n+            Cache storeMarshalled = cache.getAdvancedCache();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyNDU2Mg=="}, "originalCommit": {"oid": "0fc21627ed0b05f62ab2b0d74052fce758903af5"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjEyOTkxOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDo1MzowOVrOHml2Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDowMDoyNFrOHnPJQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyODAyNg==", "bodyText": "I must have missed this part. Why would we preclude someone doing this if they have a transcoder that would support it?", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r510228026", "createdAt": "2020-10-22T14:53:09Z", "author": {"login": "wburns"}, "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "diffHunk": "@@ -2,9 +2,12 @@\n \n == Encoding\n \n-Conversions of cache data between `application/x-java-object` and `application/json` are deprecated and will be removed\n+* Conversions of cache data between `application/x-java-object` and `application/json` are deprecated and will be removed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc21627ed0b05f62ab2b0d74052fce758903af5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1MDI3Mw==", "bodyText": "It was deprecated because it requires user classes in the server, and we are getting rid of Jackson that was performing the job. Jackson Databind is often involving in CVEs, and makes heavy usage of reflection, so overall not Quarkus/Cloud friendly, apart from the use case being kind of 'niche'.\nIdeally we should provide a hook to convert between Json and custom objects just like a \"serialization context\" used in protostream, or even provide a hook to register transcoders more easily, then this conversion could be resurrected", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r510250273", "createdAt": "2020-10-22T15:22:20Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "diffHunk": "@@ -2,9 +2,12 @@\n \n == Encoding\n \n-Conversions of cache data between `application/x-java-object` and `application/json` are deprecated and will be removed\n+* Conversions of cache data between `application/x-java-object` and `application/json` are deprecated and will be removed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyODAyNg=="}, "originalCommit": {"oid": "0fc21627ed0b05f62ab2b0d74052fce758903af5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg5MzM0NQ==", "bodyText": "+1 for the deprecation, application/x-java-object on the server is a really niche case. It was probably useful to support compatibility between the different servers (and embedded back) in the day, but nowadays it's much better to use application/protostream for that purpose.\nThe only thing I'm not sure about is how good the protostream <-> JSON transcoding is, considering that protostream doesn't have map support yet, and JSON is all about mixing maps with static keys (i.e. object field names) and maps with dynamic keys.", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r510893345", "createdAt": "2020-10-23T13:43:54Z", "author": {"login": "danberindei"}, "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "diffHunk": "@@ -2,9 +2,12 @@\n \n == Encoding\n \n-Conversions of cache data between `application/x-java-object` and `application/json` are deprecated and will be removed\n+* Conversions of cache data between `application/x-java-object` and `application/json` are deprecated and will be removed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyODAyNg=="}, "originalCommit": {"oid": "0fc21627ed0b05f62ab2b0d74052fce758903af5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwNDY0MQ==", "bodyText": "We map support comes, we'll probably follow the spec:  https://developers.google.com/protocol-buffers/docs/proto3#json", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r510904641", "createdAt": "2020-10-23T14:00:24Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "diffHunk": "@@ -2,9 +2,12 @@\n \n == Encoding\n \n-Conversions of cache data between `application/x-java-object` and `application/json` are deprecated and will be removed\n+* Conversions of cache data between `application/x-java-object` and `application/json` are deprecated and will be removed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyODAyNg=="}, "originalCommit": {"oid": "0fc21627ed0b05f62ab2b0d74052fce758903af5"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3846, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}