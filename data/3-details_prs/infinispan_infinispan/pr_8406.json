{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MTA5ODQ0", "number": 8406, "title": "Rest resource changes", "bodyText": "https://issues.redhat.com/browse/ISPN-11927\nhttps://issues.redhat.com/browse/ISPN-11928\nhttps://issues.redhat.com/browse/ISPN-11934\nhttps://issues.redhat.com/browse/ISPN-11935\n@gustavonalle Most of these changes are to benefit the quarkus native server. ISPN-11935 reduces repetition, but also it makes it so that JSON transformations are consistent. It's necessary to register all of the classes that Jackson needs to access for reflection with Quarkus, however in lots of the resources the returned 500 message did not contain the message of the exception thrown making it impossible to know why the server throw a 500. So I have centralised this logic and made it so that the exception message is returned in the response body as well output to the server log.", "createdAt": "2020-05-29T13:40:10Z", "url": "https://github.com/infinispan/infinispan/pull/8406", "merged": true, "mergeCommit": {"oid": "4b914e1ccd2bfd69f83bc7947e71bc5184423007"}, "closed": true, "closedAt": "2020-06-04T14:34:10Z", "author": {"login": "ryanemerson"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmCvp8AFqTQyMDk2NDg4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpR45zgFqTQyNjMzNzkzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwOTY0ODg4", "url": "https://github.com/infinispan/infinispan/pull/8406#pullrequestreview-420964888", "createdAt": "2020-05-29T13:47:03Z", "commit": {"oid": "045d7ac535c25766fbab8e689ceeaed886512133"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo0NzowM1rOGcdTgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo0NzowM1rOGcdTgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzQ0Mg==", "bodyText": "For trivial formats like this I would just use String concatenation.", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432493442", "createdAt": "2020-05-29T13:47:03Z", "author": {"login": "wburns"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ServerResource.java", "diffHunk": "@@ -40,7 +40,7 @@\n  */\n public class ServerResource implements ResourceHandler {\n    private final InvocationHelper invocationHelper;\n-   private static final ServerInfo SERVER_INFO = new ServerInfo();\n+   private static final byte[] SERVER_INFO = String.format(\"{\\\"version\\\": \\\"%s\\\"}\", Version.printVersion()).getBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "045d7ac535c25766fbab8e689ceeaed886512133"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwOTY2MjE2", "url": "https://github.com/infinispan/infinispan/pull/8406#pullrequestreview-420966216", "createdAt": "2020-05-29T13:48:41Z", "commit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo0ODo0MVrOGcdXhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo1MjowMlrOGcdf_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               static CompletableFuture<RestResponse> notFoundRspFuture() {\n          \n          \n            \n               static CompletableFuture<RestResponse> notFoundResponseFuture() {", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432494471", "createdAt": "2020-05-29T13:48:41Z", "author": {"login": "wburns"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDkyMw==", "bodyText": "And actually shouldn't this method store a cached response object to not allocate it every time? And this should probably return a CompletionStage ?", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432494923", "createdAt": "2020-05-29T13:49:25Z", "author": {"login": "wburns"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NTYxOA==", "bodyText": "Actually looking further all of the methods here have the reduced Rsp wording. It personally feels a bit weird to me, but if you think it makes the methods too long I  guess I am fine with it. Also all of the methods should return CompletionStage<..>", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432495618", "createdAt": "2020-05-29T13:50:30Z", "author": {"login": "wburns"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NjYzNw==", "bodyText": "I am not sure if @gustavonalle was trying to hide the cause of the server error or not before. I know it can sometimes be frowned upon exposing some stuff to clients.", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432496637", "createdAt": "2020-05-29T13:52:02Z", "author": {"login": "wburns"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {\n+      return addJsonToRspBuilder(o, new NettyRestResponse.Builder(), invocationHelper).build();\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, InvocationHelper invocationHelper) {\n+      return completedFuture(objToJsonRsp(o, invocationHelper));\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {\n+      RestResponse response = addJsonToRspBuilder(o, responseBuilder, invocationHelper).build();\n+      return completedFuture(response);\n+   }\n+\n+   static NettyRestResponse.Builder addJsonToRspBuilder(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {\n+      try {\n+         byte[] bytes = invocationHelper.getMapper().writeValueAsBytes(o);\n+         responseBuilder.contentType(APPLICATION_JSON).entity(bytes).status(OK);\n+      } catch (JsonProcessingException e) {\n+         logger.error(e);\n+         responseBuilder.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDAwMzMx", "url": "https://github.com/infinispan/infinispan/pull/8406#pullrequestreview-421000331", "createdAt": "2020-05-29T14:20:06Z", "commit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMDowNlrOGceqiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMDowNlrOGceqiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNTcyMA==", "bodyText": "Signature suggestion:\nRestResponse asJsonResponse(Object o, InvocationHelper invocationHelper)", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432515720", "createdAt": "2020-05-29T14:20:06Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDAwNzc5", "url": "https://github.com/infinispan/infinispan/pull/8406#pullrequestreview-421000779", "createdAt": "2020-05-29T14:20:36Z", "commit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMDozNlrOGcesfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMDozNlrOGcesfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNjIyMw==", "bodyText": "asJsonResponseFuture()", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432516223", "createdAt": "2020-05-29T14:20:36Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {\n+      return addJsonToRspBuilder(o, new NettyRestResponse.Builder(), invocationHelper).build();\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, InvocationHelper invocationHelper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDAwOTcy", "url": "https://github.com/infinispan/infinispan/pull/8406#pullrequestreview-421000972", "createdAt": "2020-05-29T14:20:49Z", "commit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMDo0OVrOGcetYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMDo0OVrOGcetYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNjQ0OA==", "bodyText": "idem", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432516448", "createdAt": "2020-05-29T14:20:49Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {\n+      return addJsonToRspBuilder(o, new NettyRestResponse.Builder(), invocationHelper).build();\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, InvocationHelper invocationHelper) {\n+      return completedFuture(objToJsonRsp(o, invocationHelper));\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDAyMzg4", "url": "https://github.com/infinispan/infinispan/pull/8406#pullrequestreview-421002388", "createdAt": "2020-05-29T14:22:24Z", "commit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMjoyNFrOGcezPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMjoyNFrOGcezPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNzk0OA==", "bodyText": "addEntityAsJson(Object entity, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper)", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432517948", "createdAt": "2020-05-29T14:22:24Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {\n+      return addJsonToRspBuilder(o, new NettyRestResponse.Builder(), invocationHelper).build();\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, InvocationHelper invocationHelper) {\n+      return completedFuture(objToJsonRsp(o, invocationHelper));\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {\n+      RestResponse response = addJsonToRspBuilder(o, responseBuilder, invocationHelper).build();\n+      return completedFuture(response);\n+   }\n+\n+   static NettyRestResponse.Builder addJsonToRspBuilder(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6f9e85015fffafbe60fff987428945c0ea87236", "author": {"user": {"login": "ryanemerson", "name": "Ryan Emerson"}}, "url": "https://github.com/infinispan/infinispan/commit/c6f9e85015fffafbe60fff987428945c0ea87236", "committedDate": "2020-05-29T13:25:50Z", "message": "ISPN-11935 Add REST resource util class"}, "afterCommit": {"oid": "cabd53fc1c1631be193e937c8e21c796ba8fc4ba", "author": {"user": {"login": "ryanemerson", "name": "Ryan Emerson"}}, "url": "https://github.com/infinispan/infinispan/commit/cabd53fc1c1631be193e937c8e21c796ba8fc4ba", "committedDate": "2020-05-29T15:19:34Z", "message": "ISPN-11935 Add REST resource util class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cabd53fc1c1631be193e937c8e21c796ba8fc4ba", "author": {"user": {"login": "ryanemerson", "name": "Ryan Emerson"}}, "url": "https://github.com/infinispan/infinispan/commit/cabd53fc1c1631be193e937c8e21c796ba8fc4ba", "committedDate": "2020-05-29T15:19:34Z", "message": "ISPN-11935 Add REST resource util class"}, "afterCommit": {"oid": "d4c20442b8da55130e8644358383ce6a466a0911", "author": {"user": {"login": "ryanemerson", "name": "Ryan Emerson"}}, "url": "https://github.com/infinispan/infinispan/commit/d4c20442b8da55130e8644358383ce6a466a0911", "committedDate": "2020-05-29T15:45:19Z", "message": "ISPN-11934 Add ServerResource.ServerInfo serializer to avoid unnecessary reflection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "539b932df40307c91858e7292be00bcb107ad3f2", "author": {"user": {"login": "ryanemerson", "name": "Ryan Emerson"}}, "url": "https://github.com/infinispan/infinispan/commit/539b932df40307c91858e7292be00bcb107ad3f2", "committedDate": "2020-06-02T14:44:57Z", "message": "ISPN-11927 Remove Util#threadDump java.lang.management dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c57fd6651aee7c062609803495c687d22a8d4cea", "author": {"user": {"login": "ryanemerson", "name": "Ryan Emerson"}}, "url": "https://github.com/infinispan/infinispan/commit/c57fd6651aee7c062609803495c687d22a8d4cea", "committedDate": "2020-06-02T14:44:57Z", "message": "ISPN-11928 Rest /v2/server/env should utilise System.getProperties()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eb41f09e54b53b48d7980a2dfb8c13defa38247", "author": {"user": {"login": "ryanemerson", "name": "Ryan Emerson"}}, "url": "https://github.com/infinispan/infinispan/commit/6eb41f09e54b53b48d7980a2dfb8c13defa38247", "committedDate": "2020-06-02T14:48:24Z", "message": "ISPN-11935 Add REST resource util class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9058306bae8213a9dd34030b29ab34b816f325e", "author": {"user": {"login": "ryanemerson", "name": "Ryan Emerson"}}, "url": "https://github.com/infinispan/infinispan/commit/f9058306bae8213a9dd34030b29ab34b816f325e", "committedDate": "2020-06-02T14:48:44Z", "message": "ISPN-11934 Add ServerResource.ServerInfo serializer to avoid unnecessary reflection"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4c20442b8da55130e8644358383ce6a466a0911", "author": {"user": {"login": "ryanemerson", "name": "Ryan Emerson"}}, "url": "https://github.com/infinispan/infinispan/commit/d4c20442b8da55130e8644358383ce6a466a0911", "committedDate": "2020-05-29T15:45:19Z", "message": "ISPN-11934 Add ServerResource.ServerInfo serializer to avoid unnecessary reflection"}, "afterCommit": {"oid": "f9058306bae8213a9dd34030b29ab34b816f325e", "author": {"user": {"login": "ryanemerson", "name": "Ryan Emerson"}}, "url": "https://github.com/infinispan/infinispan/commit/f9058306bae8213a9dd34030b29ab34b816f325e", "committedDate": "2020-06-02T14:48:44Z", "message": "ISPN-11934 Add ServerResource.ServerInfo serializer to avoid unnecessary reflection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MzM3OTM4", "url": "https://github.com/infinispan/infinispan/pull/8406#pullrequestreview-426337938", "createdAt": "2020-06-08T15:07:17Z", "commit": {"oid": "f9058306bae8213a9dd34030b29ab34b816f325e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowNzoxOFrOGgi_ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowNzoxOFrOGgi_ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDk1OA==", "bodyText": "This needs to be wrapped in a SecurityAction", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r436780958", "createdAt": "2020-06-08T15:07:18Z", "author": {"login": "tristantarrant"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/ServerResource.java", "diffHunk": "@@ -89,34 +97,27 @@ public Invocations getInvocations() {\n    private CompletionStage<RestResponse> listIgnored(RestRequest restRequest) {\n       String cacheManagerName = restRequest.variables().get(\"cache-manager\");\n       DefaultCacheManager cacheManager = invocationHelper.getServer().getCacheManager(cacheManagerName);\n-      NettyRestResponse.Builder builder = new NettyRestResponse.Builder();\n \n-      if (cacheManager == null) return completedFuture(builder.status(NOT_FOUND).build());\n+      if (cacheManager == null) return notFoundResponseFuture();\n       CacheIgnoreManager ignoreManager = invocationHelper.getServer().getIgnoreManager(cacheManagerName);\n       Set<String> ignored = ignoreManager.getIgnoredCaches();\n-      try {\n-         byte[] resultBytes = invocationHelper.getMapper().writeValueAsBytes(ignored);\n-         builder.contentType(APPLICATION_JSON_TYPE).entity(resultBytes);\n-      } catch (JsonProcessingException e) {\n-         builder.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(e.getMessage());\n-      }\n-      return completedFuture(builder.build());\n+      return asJsonResponseFuture(ignored, invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> cacheManagers(RestRequest restRequest) {\n-      return serializeObject(invocationHelper.getServer().cacheManagerNames());\n+      return asJsonResponseFuture(invocationHelper.getServer().cacheManagerNames(), invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> memory(RestRequest restRequest) {\n-      return serializeObject(new JVMMemoryInfoInfo());\n+      return asJsonResponseFuture(new JVMMemoryInfoInfo(), invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> env(RestRequest restRequest) {\n-      return serializeObject(ManagementFactory.getRuntimeMXBean().getSystemProperties());\n+      return asJsonResponseFuture(System.getProperties(), invocationHelper);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9058306bae8213a9dd34030b29ab34b816f325e"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 694, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}