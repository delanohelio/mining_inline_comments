{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MzMxNzY0", "number": 8722, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0ODo1NFrOEpdXKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo1NzoyOFrOEpg7VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTA4MTM5OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0ODo1NFrOHbIxtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0Njo1NVrOHbN-lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzM5Ng==", "bodyText": "The latest version won't include the bug \ud83d\ude09", "url": "https://github.com/infinispan/infinispan/pull/8722#discussion_r498217396", "createdAt": "2020-10-01T12:48:54Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "diffHunk": "@@ -65,6 +65,19 @@ provided configuration. The possible statuses of the cache health are now HEALTH\n \n The Kryo and Protostuff marshallers have been deprecated and will be removed in Infinispan 15.0\n \n+=== {brandname} now uses a version of the ProtoStream API that includes a bug", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22da54c1f43ff4c099bda2cfe4ee7f66370df2f1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI1MDEzNQ==", "bodyText": "Maybe I misinterpreted this: \"But since getEnclosingClass() always returns null that leads to all types wrongly becoming top level types in the generated schema starting with 4.3.0 when this bug appeared.\"\nISPN 12 upgrades to 4.3.4 which is the version where the bug appears, isn't that so?", "url": "https://github.com/infinispan/infinispan/pull/8722#discussion_r498250135", "createdAt": "2020-10-01T13:37:12Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "diffHunk": "@@ -65,6 +65,19 @@ provided configuration. The possible statuses of the cache health are now HEALTH\n \n The Kryo and Protostuff marshallers have been deprecated and will be removed in Infinispan 15.0\n \n+=== {brandname} now uses a version of the ProtoStream API that includes a bug", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzM5Ng=="}, "originalCommit": {"oid": "22da54c1f43ff4c099bda2cfe4ee7f66370df2f1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2NTczNw==", "bodyText": "ISPN 12 upgrades to 4.3.4 which is the version where the bug appears, isn't that so?\n\nNo, 4.3.4 introduces a fix to a bug, but fixing that bug changes behaviour.", "url": "https://github.com/infinispan/infinispan/pull/8722#discussion_r498265737", "createdAt": "2020-10-01T13:58:29Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "diffHunk": "@@ -65,6 +65,19 @@ provided configuration. The possible statuses of the cache health are now HEALTH\n \n The Kryo and Protostuff marshallers have been deprecated and will be removed in Infinispan 15.0\n \n+=== {brandname} now uses a version of the ProtoStream API that includes a bug", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzM5Ng=="}, "originalCommit": {"oid": "22da54c1f43ff4c099bda2cfe4ee7f66370df2f1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMjYxMg==", "bodyText": "OK. Should be good now. Thanks for bearing with me and explaining the details.", "url": "https://github.com/infinispan/infinispan/pull/8722#discussion_r498302612", "createdAt": "2020-10-01T14:46:55Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "diffHunk": "@@ -65,6 +65,19 @@ provided configuration. The possible statuses of the cache health are now HEALTH\n \n The Kryo and Protostuff marshallers have been deprecated and will be removed in Infinispan 15.0\n \n+=== {brandname} now uses a version of the ProtoStream API that includes a bug", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzM5Ng=="}, "originalCommit": {"oid": "22da54c1f43ff4c099bda2cfe4ee7f66370df2f1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTA5NDg0OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo1MjoxM1rOHbI56A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzo0NjowOFrOHbLJ-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxOTQ5Ng==", "bodyText": "It might be easier to state that if you have previously used annotated nested classes for your types AND you have persisted these, it's necessary to refactor said classes so that they are top-level in order for the persisted data to be read.\nIf no stores are used, then it's not necessary todo anything \ud83d\ude04", "url": "https://github.com/infinispan/infinispan/pull/8722#discussion_r498219496", "createdAt": "2020-10-01T12:52:13Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "diffHunk": "@@ -65,6 +65,19 @@ provided configuration. The possible statuses of the cache health are now HEALTH\n \n The Kryo and Protostuff marshallers have been deprecated and will be removed in Infinispan 15.0\n \n+=== {brandname} now uses a version of the ProtoStream API that includes a bug\n+that can affect upgrade from previous {brandname} versions. \n+\n+Protobuf message types that you generate with annotation processing at compile\n+time must have the same nesting in your annotated Java classes. If the nesting\n+in your generated messages does not match the nesting in your classes, then\n+data incompatibility issues can occur.\n+\n+However, the current version of the ProtoStream API does not correctly nest\n+message types. For this reason, if you have Java classes that include Protobuf\n+annotations, you should not nest those annotations. All Protobuf annotations in\n+your Java classes should be at top-level.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22da54c1f43ff4c099bda2cfe4ee7f66370df2f1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI1NjM3OQ==", "bodyText": "Gotcha. I spotted your comment about binary compatibility for persisted messages. I'll revise.", "url": "https://github.com/infinispan/infinispan/pull/8722#discussion_r498256379", "createdAt": "2020-10-01T13:46:08Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "diffHunk": "@@ -65,6 +65,19 @@ provided configuration. The possible statuses of the cache health are now HEALTH\n \n The Kryo and Protostuff marshallers have been deprecated and will be removed in Infinispan 15.0\n \n+=== {brandname} now uses a version of the ProtoStream API that includes a bug\n+that can affect upgrade from previous {brandname} versions. \n+\n+Protobuf message types that you generate with annotation processing at compile\n+time must have the same nesting in your annotated Java classes. If the nesting\n+in your generated messages does not match the nesting in your classes, then\n+data incompatibility issues can occur.\n+\n+However, the current version of the ProtoStream API does not correctly nest\n+message types. For this reason, if you have Java classes that include Protobuf\n+annotations, you should not nest those annotations. All Protobuf annotations in\n+your Java classes should be at top-level.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxOTQ5Ng=="}, "originalCommit": {"oid": "22da54c1f43ff4c099bda2cfe4ee7f66370df2f1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY2NTQ4OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo1NzoyOFrOHbOepg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo1NzoyOFrOHbOepg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMDgyMg==", "bodyText": "I think we can remove this paragraph. The subsequent paragraph explains the issue and what needs to be done, this just confuses me tbh.", "url": "https://github.com/infinispan/infinispan/pull/8722#discussion_r498310822", "createdAt": "2020-10-01T14:57:28Z", "author": {"login": "ryanemerson"}, "path": "documentation/src/main/asciidoc/topics/upgrading.adoc", "diffHunk": "@@ -65,6 +65,21 @@ provided configuration. The possible statuses of the cache health are now HEALTH\n \n The Kryo and Protostuff marshallers have been deprecated and will be removed in Infinispan 15.0\n \n+=== {brandname} includes an upgraded version of the ProtoStream API that can\n+affect upgrade from previous {brandname} versions.\n+\n+Protobuf message types that you generate with annotation processing at compile\n+time must have the same nesting in your annotated Java classes. If the nesting\n+in your generated messages does not match the nesting in your classes, then\n+data incompatibility issues can occur.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a359d08dc8135fce7e6a236dfe24d8b64dc02b67"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3827, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}