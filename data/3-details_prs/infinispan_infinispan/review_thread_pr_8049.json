{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MzExODA0", "number": 8049, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1MDowMVrODnhX1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1MTo0MlrODnhanA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzY3ODI5OnYy", "diffSide": "LEFT", "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/StringStoreWithManagedConnectionFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1MDowMVrOF1kbAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTowNzoxMVrOF1rnBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNTU4NA==", "bodyText": "This was previously required by the jdg-functional-tests I think. Are all of those tests now in the Infinispan repo? and is this definitely not needed?", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r391715584", "createdAt": "2020-03-12T15:50:01Z", "author": {"login": "ryanemerson"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/StringStoreWithManagedConnectionFunctionalTest.java", "diffHunk": "@@ -13,30 +10,10 @@\n @Test(groups = \"functional\", testName = \"persistence.jdbc.stringbased.StringStoreWithManagedConnectionFunctionalTest\")\n public class StringStoreWithManagedConnectionFunctionalTest extends AbstractStringBasedCacheStore {\n \n-    private ManagedConnectionFactoryConfiguration customFactoryConfiguration;\n-\n-    public StringStoreWithManagedConnectionFunctionalTest() {}\n-\n-    @SuppressWarnings(\"unused\")\n-    public StringStoreWithManagedConnectionFunctionalTest(ManagedConnectionFactoryConfiguration customFactoryConfiguration) {\n-        this.customFactoryConfiguration = customFactoryConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e89f6cf23965162e71b4df211fe133555092c033"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzMzM1MA==", "bodyText": "@ryanemerson you are right, but now I change the approach that I'm using on jdg-functional-tests, I'm overriding the methods that I need during the instantiation.\nOn jdg-functional-tests now i'm using:\nnew StringStoreWithManagedConnectionFunctionalTest() {\n  @Override\n      protected ConnectionFactory getConnectionFactory(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {\n                ...\n            }\n\n   @Override\n       public void setTableManipulation(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {\n               ...\n            }", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r391833350", "createdAt": "2020-03-12T19:07:11Z", "author": {"login": "gustavolira"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/StringStoreWithManagedConnectionFunctionalTest.java", "diffHunk": "@@ -13,30 +10,10 @@\n @Test(groups = \"functional\", testName = \"persistence.jdbc.stringbased.StringStoreWithManagedConnectionFunctionalTest\")\n public class StringStoreWithManagedConnectionFunctionalTest extends AbstractStringBasedCacheStore {\n \n-    private ManagedConnectionFactoryConfiguration customFactoryConfiguration;\n-\n-    public StringStoreWithManagedConnectionFunctionalTest() {}\n-\n-    @SuppressWarnings(\"unused\")\n-    public StringStoreWithManagedConnectionFunctionalTest(ManagedConnectionFactoryConfiguration customFactoryConfiguration) {\n-        this.customFactoryConfiguration = customFactoryConfiguration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNTU4NA=="}, "originalCommit": {"oid": "e89f6cf23965162e71b4df211fe133555092c033"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzY4NDA0OnYy", "diffSide": "RIGHT", "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/StringStoreWithManagedConnectionFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1MToyM1rOF1kegQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyNDo0NlrOF1-iTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjQ4MQ==", "bodyText": "Based on our previous discussions, it seems like this change is fixing your issue because we're no longer using the ManagedConnectionFactory", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r391716481", "createdAt": "2020-03-12T15:51:23Z", "author": {"login": "ryanemerson"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/StringStoreWithManagedConnectionFunctionalTest.java", "diffHunk": "@@ -13,30 +10,10 @@\n @Test(groups = \"functional\", testName = \"persistence.jdbc.stringbased.StringStoreWithManagedConnectionFunctionalTest\")\n public class StringStoreWithManagedConnectionFunctionalTest extends AbstractStringBasedCacheStore {\n \n-    private ManagedConnectionFactoryConfiguration customFactoryConfiguration;\n-\n-    public StringStoreWithManagedConnectionFunctionalTest() {}\n-\n-    @SuppressWarnings(\"unused\")\n-    public StringStoreWithManagedConnectionFunctionalTest(ManagedConnectionFactoryConfiguration customFactoryConfiguration) {\n-        this.customFactoryConfiguration = customFactoryConfiguration;\n-    }\n-\n     @Override\n     protected ConnectionFactory getConnectionFactory(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {\n-        if(customFactoryConfiguration != null) {\n-            ConnectionFactoryConfiguration connectionFactoryConfiguration = storeBuilder\n-                    .dataSource()\n-                    .read(customFactoryConfiguration)\n-                    .create();\n-            final ConnectionFactory connectionFactory = ConnectionFactory.getConnectionFactory(ManagedConnectionFactory.class);\n-            connectionFactory.start(connectionFactoryConfiguration, connectionFactory.getClass().getClassLoader());\n-            return connectionFactory;\n-        } else {\n-            SimpleConnectionFactory simpleFactory = new SimpleConnectionFactory();\n-            simpleFactory.start(configureSimpleConnectionFactory(storeBuilder).create(), Thread.currentThread().getContextClassLoader());\n-            return simpleFactory;\n-        }\n-\n+        SimpleConnectionFactory simpleFactory = new SimpleConnectionFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e89f6cf23965162e71b4df211fe133555092c033"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzMzMxNA==", "bodyText": "Actually on jdg-functional-tests I'm overriding this method and testing using ManagedConnectionFactory", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r391833314", "createdAt": "2020-03-12T19:07:07Z", "author": {"login": "gustavolira"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/StringStoreWithManagedConnectionFunctionalTest.java", "diffHunk": "@@ -13,30 +10,10 @@\n @Test(groups = \"functional\", testName = \"persistence.jdbc.stringbased.StringStoreWithManagedConnectionFunctionalTest\")\n public class StringStoreWithManagedConnectionFunctionalTest extends AbstractStringBasedCacheStore {\n \n-    private ManagedConnectionFactoryConfiguration customFactoryConfiguration;\n-\n-    public StringStoreWithManagedConnectionFunctionalTest() {}\n-\n-    @SuppressWarnings(\"unused\")\n-    public StringStoreWithManagedConnectionFunctionalTest(ManagedConnectionFactoryConfiguration customFactoryConfiguration) {\n-        this.customFactoryConfiguration = customFactoryConfiguration;\n-    }\n-\n     @Override\n     protected ConnectionFactory getConnectionFactory(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {\n-        if(customFactoryConfiguration != null) {\n-            ConnectionFactoryConfiguration connectionFactoryConfiguration = storeBuilder\n-                    .dataSource()\n-                    .read(customFactoryConfiguration)\n-                    .create();\n-            final ConnectionFactory connectionFactory = ConnectionFactory.getConnectionFactory(ManagedConnectionFactory.class);\n-            connectionFactory.start(connectionFactoryConfiguration, connectionFactory.getClass().getClassLoader());\n-            return connectionFactory;\n-        } else {\n-            SimpleConnectionFactory simpleFactory = new SimpleConnectionFactory();\n-            simpleFactory.start(configureSimpleConnectionFactory(storeBuilder).create(), Thread.currentThread().getContextClassLoader());\n-            return simpleFactory;\n-        }\n-\n+        SimpleConnectionFactory simpleFactory = new SimpleConnectionFactory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjQ4MQ=="}, "originalCommit": {"oid": "e89f6cf23965162e71b4df211fe133555092c033"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MzQzNg==", "bodyText": "Great, just wanted to make sure \ud83d\ude42", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r392143436", "createdAt": "2020-03-13T10:24:46Z", "author": {"login": "ryanemerson"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/StringStoreWithManagedConnectionFunctionalTest.java", "diffHunk": "@@ -13,30 +10,10 @@\n @Test(groups = \"functional\", testName = \"persistence.jdbc.stringbased.StringStoreWithManagedConnectionFunctionalTest\")\n public class StringStoreWithManagedConnectionFunctionalTest extends AbstractStringBasedCacheStore {\n \n-    private ManagedConnectionFactoryConfiguration customFactoryConfiguration;\n-\n-    public StringStoreWithManagedConnectionFunctionalTest() {}\n-\n-    @SuppressWarnings(\"unused\")\n-    public StringStoreWithManagedConnectionFunctionalTest(ManagedConnectionFactoryConfiguration customFactoryConfiguration) {\n-        this.customFactoryConfiguration = customFactoryConfiguration;\n-    }\n-\n     @Override\n     protected ConnectionFactory getConnectionFactory(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {\n-        if(customFactoryConfiguration != null) {\n-            ConnectionFactoryConfiguration connectionFactoryConfiguration = storeBuilder\n-                    .dataSource()\n-                    .read(customFactoryConfiguration)\n-                    .create();\n-            final ConnectionFactory connectionFactory = ConnectionFactory.getConnectionFactory(ManagedConnectionFactory.class);\n-            connectionFactory.start(connectionFactoryConfiguration, connectionFactory.getClass().getClassLoader());\n-            return connectionFactory;\n-        } else {\n-            SimpleConnectionFactory simpleFactory = new SimpleConnectionFactory();\n-            simpleFactory.start(configureSimpleConnectionFactory(storeBuilder).create(), Thread.currentThread().getContextClassLoader());\n-            return simpleFactory;\n-        }\n-\n+        SimpleConnectionFactory simpleFactory = new SimpleConnectionFactory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjQ4MQ=="}, "originalCommit": {"oid": "e89f6cf23965162e71b4df211fe133555092c033"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzY4NTQwOnYy", "diffSide": "RIGHT", "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/AbstractStringBasedCacheStore.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1MTo0MlrOF1kfVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTo1ODo1OFrOF2BG6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjY5NQ==", "bodyText": "As this method is private, I don't understand what value it adds.", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r391716695", "createdAt": "2020-03-12T15:51:42Z", "author": {"login": "ryanemerson"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/AbstractStringBasedCacheStore.java", "diffHunk": "@@ -136,6 +136,10 @@ public EmbeddedCacheManager configureCacheManager(boolean passivation, boolean p\n         return defaultCacheManager;\n     }\n \n+    private void setTableManipulation(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e89f6cf23965162e71b4df211fe133555092c033"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzMzk1OA==", "bodyText": "Good catch, this method should be public, I will update the commit", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r391833958", "createdAt": "2020-03-12T19:08:30Z", "author": {"login": "gustavolira"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/AbstractStringBasedCacheStore.java", "diffHunk": "@@ -136,6 +136,10 @@ public EmbeddedCacheManager configureCacheManager(boolean passivation, boolean p\n         return defaultCacheManager;\n     }\n \n+    private void setTableManipulation(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjY5NQ=="}, "originalCommit": {"oid": "e89f6cf23965162e71b4df211fe133555092c033"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NDE0NQ==", "bodyText": "Shouldn't it be protected as it's only required by the implementations?", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r392144145", "createdAt": "2020-03-13T10:26:09Z", "author": {"login": "ryanemerson"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/AbstractStringBasedCacheStore.java", "diffHunk": "@@ -136,6 +136,10 @@ public EmbeddedCacheManager configureCacheManager(boolean passivation, boolean p\n         return defaultCacheManager;\n     }\n \n+    private void setTableManipulation(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjY5NQ=="}, "originalCommit": {"oid": "e89f6cf23965162e71b4df211fe133555092c033"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4NTU3OQ==", "bodyText": "@ryanemerson updated", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r392185579", "createdAt": "2020-03-13T11:58:58Z", "author": {"login": "gustavolira"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/AbstractStringBasedCacheStore.java", "diffHunk": "@@ -136,6 +136,10 @@ public EmbeddedCacheManager configureCacheManager(boolean passivation, boolean p\n         return defaultCacheManager;\n     }\n \n+    private void setTableManipulation(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjY5NQ=="}, "originalCommit": {"oid": "e89f6cf23965162e71b4df211fe133555092c033"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4442, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}