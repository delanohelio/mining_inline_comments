{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MjcxODE1", "number": 8323, "title": "ISPN-11831 Rest Server BlockHound", "bodyText": "https://issues.redhat.com/browse/ISPN-11831\nhttps://issues.redhat.com/browse/ISPN-11836\n// Do not close the following ones\nhttps://issues.redhat.com/browse/ISPN-11731\nhttps://issues.redhat.com/browse/ISPN-11834\nhttps://issues.redhat.com/browse/ISPN-11835", "createdAt": "2020-05-14T22:11:03Z", "url": "https://github.com/infinispan/infinispan/pull/8323", "merged": true, "mergeCommit": {"oid": "69ddda1c9ed0f0a47cfe175ae4c91d74dc53ad0f"}, "closed": true, "closedAt": "2020-05-19T07:48:29Z", "author": {"login": "wburns"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchWs2cgH2gAyNDE4MjcxODE1OmRlZDcxNzQ2YzQ3NjQzZTRmNDVlZmUwMmE5OTMzNjE0OTA0YjQ5NGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABciz_dlgFqTQxNDExMjk4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ded71746c47643e4f45efe02a9933614904b494a", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/ded71746c47643e4f45efe02a9933614904b494a", "committedDate": "2020-05-15T00:12:29Z", "message": "ISPN-11831 Add blockhound to server rest module"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8589183367b65353d3fcc2635e233b390e46a6b", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/e8589183367b65353d3fcc2635e233b390e46a6b", "committedDate": "2020-05-14T22:10:11Z", "message": "ISPN-11836 MassIndexLock should be non blocking"}, "afterCommit": {"oid": "43f590e06864e2b064d37ae016f8b0b55062fe82", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/43f590e06864e2b064d37ae016f8b0b55062fe82", "committedDate": "2020-05-15T00:35:06Z", "message": "ISPN-11836 MassIndexLock should be non blocking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2888457aaa6b4f9b4ed83fc0ce2c97cfda99daae", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/2888457aaa6b4f9b4ed83fc0ce2c97cfda99daae", "committedDate": "2020-05-15T13:31:05Z", "message": "ISPN-11731 Add blockhound to query module\n\n* Just adding some preemptive changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "496578ea56ee57d4695839a08dc992d8d7ee8414", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/496578ea56ee57d4695839a08dc992d8d7ee8414", "committedDate": "2020-05-15T13:31:05Z", "message": "ISPN-11834 Rest ResponseWrite CHUNKED_FILE response is blocking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e4dfa1f67a8faf521202ea5997539a02cb39ce5", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/7e4dfa1f67a8faf521202ea5997539a02cb39ce5", "committedDate": "2020-05-15T13:31:05Z", "message": "ISPN-11835 Clustered Lock creation is blocking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/1b0088fd72e93d00dbefa61d238147adb9581cd9", "committedDate": "2020-05-15T13:31:06Z", "message": "ISPN-11836 MassIndexLock should be non blocking"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43f590e06864e2b064d37ae016f8b0b55062fe82", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/43f590e06864e2b064d37ae016f8b0b55062fe82", "committedDate": "2020-05-15T00:35:06Z", "message": "ISPN-11836 MassIndexLock should be non blocking"}, "afterCommit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/1b0088fd72e93d00dbefa61d238147adb9581cd9", "committedDate": "2020-05-15T13:31:06Z", "message": "ISPN-11836 MassIndexLock should be non blocking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MTg1MDAx", "url": "https://github.com/infinispan/infinispan/pull/8323#pullrequestreview-414185001", "createdAt": "2020-05-19T07:48:22Z", "commit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MjUyMTIw", "url": "https://github.com/infinispan/infinispan/pull/8323#pullrequestreview-414252120", "createdAt": "2020-05-19T09:10:45Z", "commit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToxMDo0NVrOGXXK0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToxMDo0NVrOGXXK0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MDAzMg==", "bodyText": "This changes the API of the MassIndexer. I am deprecating it in favour of another interface called Indexer in #8303, that has only non-blocking methods that return CompletionStage.\nI think the old interface should not be changed though.", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427150032", "createdAt": "2020-05-19T09:10:45Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/MassIndexer.java", "diffHunk": "@@ -20,14 +21,14 @@\n    /**\n     * Deletes all the indexes and skip the reindexing.\n     */\n-   CompletableFuture<Void> purge();\n+   CompletionStage<Void> purge();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MTEyOTgy", "url": "https://github.com/infinispan/infinispan/pull/8323#pullrequestreview-414112982", "createdAt": "2020-05-19T05:32:44Z", "commit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTozMjo0NFrOGXQbYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjo1MzoyMFrOGXe-EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzOTU4NA==", "bodyText": "Weird that BlockHound wouldn't work with <cinit>", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427039584", "createdAt": "2020-05-19T05:32:44Z", "author": {"login": "danberindei"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/MediaTypeResolver.java", "diffHunk": "@@ -22,6 +22,11 @@\n    private static final String MIME_TYPES = \"mime.types\";\n \n    static {\n+      populateFileMap();\n+   }\n+\n+   // This has to be a separate method so we can mark it as blocking via blockhound", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0MTM3MA==", "bodyText": "Reading a schema file from a jar is the same as reading a class file from a jar: both are blocking, but we expect that they are only done once during startup. If an SerializationContextInitializer runs in response to a request, that's a bug and should be fixed IMO.\nNitpicking: \"We\" starts a new sentence, so it should be on a new line", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427041370", "createdAt": "2020-05-19T05:39:11Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java", "diffHunk": "@@ -122,5 +123,9 @@ private static void questionableMethodsAllowedToBlock(BlockHound.Builder builder\n \n       // This can block if there is a store otherwise it won't block\n       builder.allowBlockingCallsInside(CacheMgmtInterceptor.class.getName(), \"getNumberOfEntries\");\n+\n+      // Unfortunately retrieving the protobuf schema reads from a separately generated file - We hope this can be changed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0MzA5OQ==", "bodyText": "Unfortunately MassIndexer is public API, I don't think it's ok to change the return types.", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427043099", "createdAt": "2020-05-19T05:45:02Z", "author": {"login": "danberindei"}, "path": "query/src/main/java/org/infinispan/query/MassIndexer.java", "diffHunk": "@@ -20,14 +21,14 @@\n    /**\n     * Deletes all the indexes and skip the reindexing.\n     */\n-   CompletableFuture<Void> purge();\n+   CompletionStage<Void> purge();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0Mzc2OA==", "bodyText": "IMO ISPN-11731 should be strictly about adding BlockHound, reducing blocking should have a separate issue", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427043768", "createdAt": "2020-05-19T05:47:16Z", "author": {"login": "danberindei"}, "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "diffHunk": "@@ -185,14 +187,19 @@ private Object handleDataWriteCommand(InvocationContext ctx, DataWriteCommand co\n             prev = UNKNOWN;\n          }\n          Object oldValue = prev;\n-         return invokeNextThenAccept(ctx, command, (rCtx, cmd, rv) -> {\n+         return invokeNextThenApply(ctx, command, (rCtx, cmd, rv) -> {\n             if (!cmd.isSuccessful()) {\n-               return;\n+               return rv;\n             }\n             CacheEntry entry2 = entry != null ? entry : rCtx.lookupEntry(cmd.getKey());\n             if (entry2 != null && entry2.isChanged()) {\n-               processChange(rCtx, cmd, cmd.getKey(), oldValue, entry2.getValue(), NoTransactionContext.INSTANCE);\n+               // TODO: need to reduce the scope of the blocking thread to less if possible later as part of\n+               // https://issues.redhat.com/browse/ISPN-11731", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NTU0MA==", "bodyText": "You didn't really have to comment out the cancel line :)", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427045540", "createdAt": "2020-05-19T05:52:51Z", "author": {"login": "danberindei"}, "path": "query/src/test/java/org/infinispan/query/distributed/AsyncMassIndexPerfTest.java", "diffHunk": "@@ -240,7 +240,9 @@ public void run() {\n                   System.out.println(\"\\rMassIndexer not started\");\n                   continue;\n                } else {\n-                  future.cancel(true);\n+                  // Mass Indexer doesn't provide cancellation currently\n+                  // https://issues.redhat.com/browse/ISPN-11735\n+//                  future.cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3MDg2MQ==", "bodyText": "Do you still need the debug log? Maybe it should be trace?\nAlso poll interval is awfully low, although I'm removing the poll interval parameter altogether in #8344", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427270861", "createdAt": "2020-05-19T12:42:37Z", "author": {"login": "danberindei"}, "path": "query/src/test/java/org/infinispan/query/distributed/MassIndexingTest.java", "diffHunk": "@@ -59,29 +61,33 @@ public void testOverlappingMassIndexers() {\n \n       IntStream.range(0, 10).forEach(i -> cache.put(i, new Car(\"whatever\", \"whatever\", 0)));\n \n-      CompletableFuture<Void> first = massIndexer.startAsync();\n-      eventually(massIndexer::isRunning);\n \n-      CompletableFuture<Void> second = massIndexer.startAsync();\n+      CompletionStage<Void> first = massIndexer.startAsync();\n+      eventually(() -> {\n+         log.debug(\"Checking if massIndexer is running\");\n+         return massIndexer.isRunning();\n+      }, 10_000, 10, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3MjA1MA==", "bodyText": "Does this actually come up in our test suite? Can we replace the error handler, or is it used internally by something else, like Nashorn?", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427272050", "createdAt": "2020-05-19T12:44:24Z", "author": {"login": "danberindei"}, "path": "server/core/src/main/java/org/infinispan/server/core/ServerCoreBlockHoundIntegration.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.infinispan.server.core;\n+\n+import org.infinispan.commons.internal.CommonsBlockHoundIntegration;\n+import org.kohsuke.MetaInfServices;\n+\n+import io.netty.util.concurrent.GlobalEventExecutor;\n+import reactor.blockhound.BlockHound;\n+import reactor.blockhound.integration.BlockHoundIntegration;\n+\n+@MetaInfServices\n+public class ServerCoreBlockHoundIntegration implements BlockHoundIntegration {\n+   @Override\n+   public void applyTo(BlockHound.Builder builder) {\n+      builder.allowBlockingCallsInside(GlobalEventExecutor.class.getName(), \"addTask\");\n+      builder.allowBlockingCallsInside(GlobalEventExecutor.class.getName(), \"takeTask\");\n+\n+      // The xerces parser when it finds a parsing error will print to possibly a file output - ignore\n+      builder.allowBlockingCallsInside(\"com.sun.org.apache.xerces.internal.util.DefaultErrorHandler\", \"printError\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3NzEyOQ==", "bodyText": "Could we use cache.keySet().localPublisher(null) to make it non-blocking?", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427277129", "createdAt": "2020-05-19T12:52:13Z", "author": {"login": "danberindei"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "diffHunk": "@@ -172,10 +172,14 @@ public Invocations getInvocations() {\n          responseBuilder.status(HttpResponseStatus.NOT_FOUND);\n          return CompletableFuture.completedFuture(responseBuilder.build());\n       }\n-      responseBuilder.entity(new CacheInputStream(cache.keySet().stream(), batch));\n+      // Streaming over the cache is blocking", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3Nzg0MQ==", "bodyText": "We use Arjuna in core tests as well, maybe we should put the exception in the core module instead?", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427277841", "createdAt": "2020-05-19T12:53:20Z", "author": {"login": "danberindei"}, "path": "server/rest/src/test/java/org/infinispan/rest/ServerRestTestBlockHoundIntegration.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.infinispan.rest;\n+\n+import org.kohsuke.MetaInfServices;\n+\n+import com.arjuna.ats.internal.arjuna.coordinator.ReaperThread;\n+import com.arjuna.ats.internal.arjuna.coordinator.ReaperWorkerThread;\n+\n+import reactor.blockhound.BlockHound;\n+import reactor.blockhound.integration.BlockHoundIntegration;\n+\n+@MetaInfServices\n+public class ServerRestTestBlockHoundIntegration implements BlockHoundIntegration {\n+   @Override\n+   public void applyTo(BlockHound.Builder builder) {\n+      // Let arjuna block - sometimes its thread will be put in our non blocking thread group", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 774, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}