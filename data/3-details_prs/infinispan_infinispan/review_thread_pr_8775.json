{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNDEzMzM0", "number": 8775, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozNDozMVrOEw00pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozNTowMVrOE1ymow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjMyNTUxOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/endpoint/EndpointConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozNDozMVrOHmnxig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozNDozMVrOHmnxig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1OTU5NA==", "bodyText": "not sure how useful to have IMPLICIT_CONNECTOR_SECURITY. It is only used by org.infinispan.server.configuration.endpoint.EndpointConfigurationBuilder#create() and it could be a boolean in that class.", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r510259594", "createdAt": "2020-10-22T15:34:31Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/endpoint/EndpointConfiguration.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package org.infinispan.server.configuration.endpoint;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.infinispan.server.core.configuration.ProtocolServerConfiguration;\n+import org.infinispan.server.router.configuration.SinglePortRouterConfiguration;\n+\n+/**\n+ * @since 10.0\n+ */\n+public class EndpointConfiguration implements ConfigurationInfo {\n+   static final AttributeDefinition<String> SOCKET_BINDING = AttributeDefinition.builder(\"socket-binding\", null, String.class).build();\n+   static final AttributeDefinition<String> SECURITY_REALM = AttributeDefinition.builder(\"security-realm\", null, String.class).build();\n+   static final AttributeDefinition<Boolean> IMPLICIT_CONNECTOR_SECURITY = AttributeDefinition.builder(\"implicit-connector-security\", false, Boolean.class).build();\n+   static final AttributeDefinition<Boolean> ADMIN = AttributeDefinition.builder(\"admin\", true, Boolean.class).build();\n+\n+   private final List<ProtocolServerConfiguration> connectors;\n+   private final SinglePortRouterConfiguration singlePort;\n+\n+\n+   static AttributeSet attributeDefinitionSet() {\n+      return new AttributeSet(EndpointConfiguration.class, SOCKET_BINDING, SECURITY_REALM, IMPLICIT_CONNECTOR_SECURITY, ADMIN);\n+   }\n+\n+   private static final ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.ENDPOINTS.toString());\n+\n+   private final AttributeSet attributes;\n+\n+   private final List<ConfigurationInfo> configs = new ArrayList<>();\n+\n+   EndpointConfiguration(AttributeSet attributes,\n+                         List<ProtocolServerConfiguration> connectors,\n+                         SinglePortRouterConfiguration singlePort) {\n+      this.attributes = attributes.checkProtection();\n+      this.connectors = connectors;\n+      this.singlePort = singlePort;\n+      configs.addAll(connectors);\n+   }\n+\n+   @Override\n+   public List<ConfigurationInfo> subElements() {\n+      return configs;\n+   }\n+\n+   public SinglePortRouterConfiguration singlePortRouter() {\n+      return singlePort;\n+   }\n+\n+   public List<ProtocolServerConfiguration> connectors() {\n+      return connectors;\n+   }\n+\n+   public boolean implicitConnectorSecurity() {\n+      return attributes.attribute(IMPLICIT_CONNECTOR_SECURITY).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cf7ef6234fafcd9d066cd8c050b18ea024393f9"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjMyOTcyOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/endpoint/EndpointConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozNToyM1rOHmn0Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozNToyM1rOHmn0Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2MDI2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 10.0\n          \n          \n            \n             * @since 12.0", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r510260267", "createdAt": "2020-10-22T15:35:23Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/endpoint/EndpointConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.infinispan.server.configuration.endpoint;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.rest.configuration.RestServerConfigurationBuilder;\n+import org.infinispan.server.Server;\n+import org.infinispan.server.configuration.ServerConfigurationBuilder;\n+import org.infinispan.server.configuration.security.KerberosSecurityFactoryConfiguration;\n+import org.infinispan.server.core.configuration.ProtocolServerConfiguration;\n+import org.infinispan.server.core.configuration.ProtocolServerConfigurationBuilder;\n+import org.infinispan.server.hotrod.configuration.AuthenticationConfigurationBuilder;\n+import org.infinispan.server.hotrod.configuration.HotRodServerConfigurationBuilder;\n+import org.infinispan.server.security.ServerSecurityRealm;\n+import org.wildfly.security.sasl.util.SaslMechanismInformation;\n+\n+/**\n+ * @since 10.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cf7ef6234fafcd9d066cd8c050b18ea024393f9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjM1MjgwOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/endpoint/EndpointConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0MDozN1rOHmoDRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0MDozN1rOHmoDRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NDEzMg==", "bodyText": "nitpick:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Optional<Entry<String, List<ProtocolServerConfigurationBuilder<?, ?>>>> repeated = buildersPerClass.entrySet()\n          \n          \n            \n                        .stream().filter(e -> e.getValue().size() > 1).findFirst();\n          \n          \n            \n            \n          \n          \n            \n                  repeated.ifPresent(e -> {\n          \n          \n            \n                     String names = e.getValue().stream().map(ProtocolServerConfigurationBuilder::name).collect(Collectors.joining(\",\"));\n          \n          \n            \n                     throw Server.log.multipleEndpointsSameTypeFound(names);\n          \n          \n            \n                  });\n          \n          \n            \n            buildersPerClass.values().stream()\n          \n          \n            \n                        .filter(c -> c.size() > 1)\n          \n          \n            \n                        .findFirst()\n          \n          \n            \n                        .ifPresent(c -> {\n          \n          \n            \n                           String names = c.stream().map(ProtocolServerConfigurationBuilder::name).collect(Collectors.joining(\",\"));\n          \n          \n            \n                           throw Server.log.multipleEndpointsSameTypeFound(names);\n          \n          \n            \n                        });", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r510264132", "createdAt": "2020-10-22T15:40:37Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/endpoint/EndpointConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.infinispan.server.configuration.endpoint;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.rest.configuration.RestServerConfigurationBuilder;\n+import org.infinispan.server.Server;\n+import org.infinispan.server.configuration.ServerConfigurationBuilder;\n+import org.infinispan.server.configuration.security.KerberosSecurityFactoryConfiguration;\n+import org.infinispan.server.core.configuration.ProtocolServerConfiguration;\n+import org.infinispan.server.core.configuration.ProtocolServerConfigurationBuilder;\n+import org.infinispan.server.hotrod.configuration.AuthenticationConfigurationBuilder;\n+import org.infinispan.server.hotrod.configuration.HotRodServerConfigurationBuilder;\n+import org.infinispan.server.security.ServerSecurityRealm;\n+import org.wildfly.security.sasl.util.SaslMechanismInformation;\n+\n+/**\n+ * @since 10.0\n+ */\n+public class EndpointConfigurationBuilder implements Builder<EndpointConfiguration> {\n+   private final AttributeSet attributes;\n+   private final ServerConfigurationBuilder serverConfigurationBuilder;\n+   private final List<ProtocolServerConfigurationBuilder<?, ?>> connectorBuilders = new ArrayList<>(2);\n+   private final SinglePortServerConfigurationBuilder singlePortBuilder = new SinglePortServerConfigurationBuilder();\n+\n+   public EndpointConfigurationBuilder(ServerConfigurationBuilder serverConfigurationBuilder, String socketBindingName) {\n+      this.serverConfigurationBuilder = serverConfigurationBuilder;\n+      this.attributes = EndpointConfiguration.attributeDefinitionSet();\n+      attributes.attribute(EndpointConfiguration.SOCKET_BINDING).set(socketBindingName);\n+      serverConfigurationBuilder.applySocketBinding(socketBindingName, singlePortBuilder, singlePortBuilder);\n+   }\n+\n+   public EndpointConfigurationBuilder securityRealm(String name) {\n+      attributes.attribute(EndpointConfiguration.SECURITY_REALM).set(name);\n+      singlePortBuilder.securityRealm(serverConfigurationBuilder.getSecurityRealm(name));\n+      return this;\n+   }\n+\n+   public EndpointConfigurationBuilder implicitConnectorSecurity(boolean implicitConnectorSecurity) {\n+      attributes.attribute(EndpointConfiguration.IMPLICIT_CONNECTOR_SECURITY).set(implicitConnectorSecurity);\n+      return this;\n+   }\n+\n+   public EndpointConfigurationBuilder admin(boolean admin) {\n+      attributes.attribute(EndpointConfiguration.ADMIN).set(admin);\n+      return this;\n+   }\n+\n+   public boolean admin() {\n+      return attributes.attribute(EndpointConfiguration.ADMIN).get();\n+   }\n+\n+   public List<ProtocolServerConfigurationBuilder<?, ?>> connectors() {\n+      return connectorBuilders;\n+   }\n+\n+   public SinglePortServerConfigurationBuilder singlePort() {\n+      return singlePortBuilder;\n+   }\n+\n+   public <T extends ProtocolServerConfigurationBuilder<?, ?>> T addConnector(Class<T> klass) {\n+      try {\n+         T builder = klass.getConstructor().newInstance();\n+         connectorBuilders.add(builder);\n+         singlePortBuilder.applyConfigurationToProtocol(builder);\n+         return builder;\n+      } catch (Exception e) {\n+         throw Server.log.cannotInstantiateProtocolServerConfigurationBuilder(klass, e);\n+      }\n+   }\n+\n+   @Override\n+   public void validate() {\n+      Map<String, List<ProtocolServerConfigurationBuilder<?, ?>>> buildersPerClass = connectorBuilders.stream()\n+            .collect(Collectors.groupingBy(s -> s.getClass().getSimpleName() + \"/\" + s.host() + \":\" + s.port()));\n+\n+      Optional<Entry<String, List<ProtocolServerConfigurationBuilder<?, ?>>>> repeated = buildersPerClass.entrySet()\n+            .stream().filter(e -> e.getValue().size() > 1).findFirst();\n+\n+      repeated.ifPresent(e -> {\n+         String names = e.getValue().stream().map(ProtocolServerConfigurationBuilder::name).collect(Collectors.joining(\",\"));\n+         throw Server.log.multipleEndpointsSameTypeFound(names);\n+      });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cf7ef6234fafcd9d066cd8c050b18ea024393f9"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjM5MzQ0OnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/security/AuthenticationMultiEndpointIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0OTowOVrOHmocNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo0OTowOVrOHmocNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MDUxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 11.0\n          \n          \n            \n             * @since 12.0", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r510270516", "createdAt": "2020-10-22T15:49:09Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/security/AuthenticationMultiEndpointIT.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.infinispan.server.security;\n+\n+import static org.infinispan.server.security.Common.sync;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.client.hotrod.exceptions.HotRodClientException;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.RestResponse;\n+import org.infinispan.client.rest.configuration.Protocol;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.server.test.core.LdapServerRule;\n+import org.infinispan.server.test.core.category.Security;\n+import org.infinispan.server.test.junit4.InfinispanServerRule;\n+import org.infinispan.server.test.junit4.InfinispanServerRuleBuilder;\n+import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.wildfly.security.http.HttpConstants;\n+import org.wildfly.security.sasl.util.SaslMechanismInformation;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cf7ef6234fafcd9d066cd8c050b18ea024393f9"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjQzNjUwOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/ref_endpoints_connectors.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1ODoxMFrOHmo2ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1ODoxMFrOHmo2ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3NzMxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `<rest-connector/>` declares a Hot Rod connector.\n          \n          \n            \n            * `<rest-connector/>` declares a Rest connector.", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r510277315", "createdAt": "2020-10-22T15:58:10Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/ref_endpoints_connectors.adoc", "diffHunk": "@@ -13,11 +13,21 @@ include::config_examples/endpoints_connectors.xml[]\n * `endpoints` contains endpoint connector declarations and defines global\n configuration for endpoints such as default socket bindings, security realms,\n and whether clients must present valid TLS certificates.\n-* `<hotrod-connector name=\"hotrod\"/>` declares a Hot Rod connector.\n-* `<rest-connector name=\"rest\"/>` declares a Hot Rod connector.\n+* `<hotrod-connector/>` declares a Hot Rod connector.\n+* `<rest-connector/>` declares a Hot Rod connector.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cf7ef6234fafcd9d066cd8c050b18ea024393f9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTI3OTQ1OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/endpoint/EndpointConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODozMTozMFrOHnEBhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODozMTozMFrOHnEBhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyMjQzOA==", "bodyText": "nitpick:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 10.0\n          \n          \n            \n             * @since 12.0", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r510722438", "createdAt": "2020-10-23T08:31:30Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/endpoint/EndpointConfiguration.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.infinispan.server.configuration.endpoint;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.infinispan.server.core.configuration.ProtocolServerConfiguration;\n+import org.infinispan.server.router.configuration.SinglePortRouterConfiguration;\n+\n+/**\n+ * @since 10.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7204afe187edc50e84e6c7b107b6eb8e86b20157"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODM1OTM0OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/Server.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoyNjoxOFrOHuQs3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoyNjoxOFrOHuQs3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3MDE3NQ==", "bodyText": "I guess this requires a proper log message :)", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r518270175", "createdAt": "2020-11-05T18:26:18Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/Server.java", "diffHunk": "@@ -348,43 +355,48 @@ public void setExitHandler(ExitHandler exitHandler) {\n          taskManager = bcr.getComponent(TaskManager.class).running();\n          taskManager.registerTaskEngine(extensions.getServerTaskEngine(cm));\n \n-         // Start the protocol servers\n-         SinglePortRouteSource routeSource = new SinglePortRouteSource();\n-         ConcurrentMap<Route<? extends RouteSource, ? extends RouteDestination>, Object> routes = new ConcurrentHashMap<>();\n-         serverConfiguration.endpoints().connectors().parallelStream().forEach(configuration -> {\n-            try {\n-               Class<? extends ProtocolServer> protocolServerClass = configuration.getClass().getAnnotation(ConfigurationFor.class).value().asSubclass(ProtocolServer.class);\n-               ProtocolServer protocolServer = Util.getInstance(protocolServerClass);\n-               if (protocolServer instanceof RestServer) ((RestServer) protocolServer).setServer(this);\n-               protocolServers.put(protocolServer.getName() + \"-\" + configuration.name(), protocolServer);\n-               SecurityActions.startProtocolServer(protocolServer, configuration, cm);\n-               ProtocolServerConfiguration protocolConfig = protocolServer.getConfiguration();\n-               if (protocolConfig.startTransport()) {\n-                  log.protocolStarted(protocolServer.getName(), protocolConfig.host(), protocolConfig.port());\n-               } else {\n-                  if (protocolServer instanceof HotRodServer) {\n-                     routes.put(new Route<>(routeSource, new HotRodServerRouteDestination(protocolServer.getName(), (HotRodServer) protocolServer)), 0);\n-                     extensions.apply((HotRodServer) protocolServer);\n-                  } else if (protocolServer instanceof RestServer) {\n-                     routes.put(new Route<>(routeSource, new RestServerRouteDestination(protocolServer.getName(), (RestServer) protocolServer)), 0);\n+         for (EndpointConfiguration endpoint : serverConfiguration.endpoints().endpoints()) {\n+            // Start the protocol servers\n+            SinglePortRouteSource routeSource = new SinglePortRouteSource();\n+            ConcurrentMap<Route<? extends RouteSource, ? extends RouteDestination>, Object> routes = new ConcurrentHashMap<>();\n+            endpoint.connectors().parallelStream().forEach(configuration -> {\n+               try {\n+                  Class<? extends ProtocolServer> protocolServerClass = configuration.getClass().getAnnotation(ConfigurationFor.class).value().asSubclass(ProtocolServer.class);\n+                  ProtocolServer protocolServer = Util.getInstance(protocolServerClass);\n+                  if (endpoint.admin()) {\n+                     protocolServer.setServer(this);\n+                  }\n+                  protocolServers.put(protocolServer.getName() + \"-\" + configuration.name(), protocolServer);\n+                  SecurityActions.startProtocolServer(protocolServer, configuration, cm);\n+                  ProtocolServerConfiguration protocolConfig = protocolServer.getConfiguration();\n+                  if (protocolConfig.startTransport()) {\n+                     log.protocolStarted(protocolServer.getName(), configuration.socketBinding(), protocolConfig.host(), protocolConfig.port());\n+                  } else {\n+                     if (protocolServer instanceof HotRodServer) {\n+                        routes.put(new Route<>(routeSource, new HotRodServerRouteDestination(protocolServer.getName(), (HotRodServer) protocolServer)), 0);\n+                        extensions.apply((HotRodServer) protocolServer);\n+                     } else if (protocolServer instanceof RestServer) {\n+                        routes.put(new Route<>(routeSource, new RestServerRouteDestination(protocolServer.getName(), (RestServer) protocolServer)), 0);\n+                     }\n+                     log.protocolStarted(protocolServer.getName());\n                   }\n-                  log.protocolStarted(protocolServer.getName());\n+               } catch (Throwable t) {\n+                  System.err.println(t.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5def4cab0155d5055a77b44097b8bbf242ffc760"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODM2NjExOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoyODoxM1rOHuQxNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoyODoxM1rOHuQxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3MTI4Nw==", "bodyText": "nitpick: remove empty line", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r518271287", "createdAt": "2020-11-05T18:28:13Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java", "diffHunk": "@@ -1102,10 +1102,10 @@ private void parseDataSourceConnectionPool(XMLExtendedStreamReader reader, DataS\n    }\n \n    private void parseEndpoints(XMLExtendedStreamReader reader, ConfigurationBuilderHolder holder, ServerConfigurationBuilder builder) throws XMLStreamException {\n-      EndpointsConfigurationBuilder endpoints = builder.endpoints();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5def4cab0155d5055a77b44097b8bbf242ffc760"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODM5MDc1OnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/resources/configuration/endpoints/default-auth-implicit.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozNTowMVrOHuRApg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozNTowMVrOHuRApg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NTIzOA==", "bodyText": "nit: you could remove the connector name for hotrod & rest", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r518275238", "createdAt": "2020-11-05T18:35:01Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/resources/configuration/endpoints/default-auth-implicit.xml", "diffHunk": "@@ -2,6 +2,6 @@\n            xsi:schemaLocation=\"urn:infinispan:server:12.0 https://infinispan.org/schemas/infinispan-server-12.0.xsd\"\n            xmlns=\"urn:infinispan:server:12.0\"\n            socket-binding=\"default\" security-realm=\"default\">\n-   <hotrod-connector name=\"hotrod\" />\n-   <rest-connector name=\"rest\" />\n+   <hotrod-connector name=\"hotrod\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5def4cab0155d5055a77b44097b8bbf242ffc760"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3863, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}