{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MjYyNDc0", "number": 8216, "title": "ISPN-11674 RemoteCache cleanup", "bodyText": "https://issues.redhat.com/browse/ISPN-11674\nhttps://issues.redhat.com/browse/ISPN-11619", "createdAt": "2020-04-17T17:48:35Z", "url": "https://github.com/infinispan/infinispan/pull/8216", "merged": true, "mergeCommit": {"oid": "353eb93c4d3fa5c111abb1cce79748992e5b8a46"}, "closed": true, "closedAt": "2020-05-14T17:02:11Z", "author": {"login": "wburns"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZfrHCABqjMyNTE5Mjk1MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchQhyRAFqTQxMjAwNjI4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6c5ff5e85c5400c7af2d2ff7912b66c5e3274e5", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/f6c5ff5e85c5400c7af2d2ff7912b66c5e3274e5", "committedDate": "2020-04-17T17:46:05Z", "message": "ISPN-11674 Clean up RemoteCache method overrides"}, "afterCommit": {"oid": "6722ebde397318565831961ef05fb66a96688ea3", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/6722ebde397318565831961ef05fb66a96688ea3", "committedDate": "2020-04-20T14:08:11Z", "message": "ISPN-11674 Clean up RemoteCache method overrides"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6722ebde397318565831961ef05fb66a96688ea3", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/6722ebde397318565831961ef05fb66a96688ea3", "committedDate": "2020-04-20T14:08:11Z", "message": "ISPN-11674 Clean up RemoteCache method overrides"}, "afterCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "committedDate": "2020-04-22T18:22:26Z", "message": "ISPN-11674 Clean up RemoteCache method overrides"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NjM4MzY2", "url": "https://github.com/infinispan/infinispan/pull/8216#pullrequestreview-405638366", "createdAt": "2020-05-05T09:46:25Z", "commit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTo0NjoyNVrOGQiAhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDozNToxNlrOGQjjsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4NzU5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private void initRemoteCache(InternalRemoteCache remoteCache, OperationsFactory operationsFactory) {\n          \n          \n            \n               private void initRemoteCache(InternalRemoteCache<?, ?> remoteCache, OperationsFactory operationsFactory) {", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r419987590", "createdAt": "2020-05-05T09:46:25Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCacheManager.java", "diffHunk": "@@ -526,22 +522,19 @@ private Properties loadFromStream(InputStream stream) {\n       return NearCacheService.create(cfg, listenerNotifier);\n    }\n \n-   private void startRemoteCache(RemoteCacheHolder remoteCacheHolder, Codec codec) {\n-      RemoteCacheImpl<?, ?> remoteCache = remoteCacheHolder.remoteCache();\n+   private void startRemoteCache(InternalRemoteCache<?, ?> remoteCache, Codec codec, boolean forceReturnValue) {\n       OperationsFactory operationsFactory = createOperationFactory(remoteCache.getName(),\n-            remoteCacheHolder.forceReturnValue, codec, remoteCache.getClientStatistics());\n+            forceReturnValue, codec, remoteCache.clientStatistics());\n       initRemoteCache(remoteCache, operationsFactory);\n       remoteCache.start();\n    }\n \n    // Method that handles cache initialization - needed as a placeholder\n-   private void initRemoteCache(RemoteCacheImpl remoteCache, OperationsFactory operationsFactory) {\n+   private void initRemoteCache(InternalRemoteCache remoteCache, OperationsFactory operationsFactory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5MDU2MQ==", "bodyText": "Remove the warning from IDE\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return (InternalRemoteCache) this;\n          \n          \n            \n                  //noinspection unchecked\n          \n          \n            \n                  return (InternalRemoteCache<T, U>) this;", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r419990561", "createdAt": "2020-05-05T09:51:58Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/DelegatingRemoteCache.java", "diffHunk": "@@ -0,0 +1,311 @@\n+package org.infinispan.client.hotrod.impl;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.infinispan.client.hotrod.CacheTopologyInfo;\n+import org.infinispan.client.hotrod.DataFormat;\n+import org.infinispan.client.hotrod.Flag;\n+import org.infinispan.client.hotrod.MetadataValue;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.ServerStatistics;\n+import org.infinispan.client.hotrod.StreamingRemoteCache;\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.commons.util.CloseableIteratorCollection;\n+import org.infinispan.commons.util.CloseableIteratorSet;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.query.dsl.Query;\n+\n+/**\n+ * Delegates all invocations to the provided underlying {@link InternalRemoteCache} but provides extensibility to intercept\n+ * when a method is invoked. Currently all methods are supported except for iterators produced from the\n+ * {@link #keyIterator(IntSet)} and {@link #entryIterator(IntSet)} which are known to invoke back into the delegate cache.\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public abstract class DelegatingRemoteCache<K, V> extends RemoteCacheSupport<K, V> implements InternalRemoteCache<K, V> {\n+   protected final InternalRemoteCache<K, V> delegate;\n+\n+   protected DelegatingRemoteCache(InternalRemoteCache<K, V> delegate) {\n+      this.delegate = delegate;\n+   }\n+\n+   abstract <Key, Value> InternalRemoteCache<Key, Value> newDelegatingCache(InternalRemoteCache<Key, Value> innerCache);\n+\n+   @Override\n+   public CompletableFuture<Void> putAllAsync(Map<? extends K, ? extends V> data, long lifespan, TimeUnit lifespanUnit, long maxIdle, TimeUnit maxIdleUnit) {\n+      return delegate.putAllAsync(data, lifespan, lifespanUnit, maxIdle, maxIdleUnit);\n+   }\n+\n+   @Override\n+   public CompletableFuture<Void> clearAsync() {\n+      return delegate.clearAsync();\n+   }\n+\n+   @Override\n+   public ClientStatistics clientStatistics() {\n+      return delegate.clientStatistics();\n+   }\n+\n+   @Override\n+   public ServerStatistics serverStatistics() {\n+      return delegate.serverStatistics();\n+   }\n+\n+   @Override\n+   public InternalRemoteCache<K, V> withFlags(Flag... flags) {\n+      InternalRemoteCache<K, V> newCache = delegate.withFlags(flags);\n+      if (newCache != delegate) {\n+         return newDelegatingCache(newCache);\n+      }\n+      return this;\n+   }\n+\n+   @Override\n+   public RemoteCacheManager getRemoteCacheManager() {\n+      return delegate.getRemoteCacheManager();\n+   }\n+\n+   @Override\n+   public CompletableFuture<Map<K, V>> getAllAsync(Set<?> keys) {\n+      return delegate.getAllAsync(keys);\n+   }\n+\n+   @Override\n+   public String getProtocolVersion() {\n+      return delegate.getProtocolVersion();\n+   }\n+\n+   @Override\n+   public void addClientListener(Object listener) {\n+      delegate.addClientListener(listener);\n+   }\n+\n+   @Override\n+   public void addClientListener(Object listener, Object[] filterFactoryParams, Object[] converterFactoryParams) {\n+      delegate.addClientListener(listener, filterFactoryParams, converterFactoryParams);\n+   }\n+\n+   @Override\n+   public void removeClientListener(Object listener) {\n+      delegate.removeClientListener(listener);\n+   }\n+\n+   @Override\n+   public Set<Object> getListeners() {\n+      return delegate.getListeners();\n+   }\n+\n+   @Override\n+   public <T> T execute(String taskName, Map<String, ?> params) {\n+      return delegate.execute(taskName, params);\n+   }\n+\n+   @Override\n+   public CacheTopologyInfo getCacheTopologyInfo() {\n+      return delegate.getCacheTopologyInfo();\n+   }\n+\n+   @Override\n+   public StreamingRemoteCache<K> streaming() {\n+      return delegate.streaming();\n+   }\n+\n+   @Override\n+   public <T, U> InternalRemoteCache<T, U> withDataFormat(DataFormat dataFormat) {\n+      InternalRemoteCache<T, U> newCache = delegate.withDataFormat(dataFormat);\n+      if (newCache != delegate) {\n+         return newDelegatingCache(newCache);\n+      }\n+      return (InternalRemoteCache) this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5NDUyMA==", "bodyText": "can't org.infinispan.client.hotrod.impl.DelegatingRemoteCache implement these methods?", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r419994520", "createdAt": "2020-05-05T09:59:07Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/InvalidatedNearRemoteCache.java", "diffHunk": "@@ -133,4 +146,24 @@ public void stop() {\n       nearcache.stop(this);\n       super.stop();\n    }\n+\n+   @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5OTE2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private InternalRemoteCache<K, V> remoteCache;\n          \n          \n            \n               private final InternalRemoteCache<K, V> remoteCache;", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r419999166", "createdAt": "2020-05-05T10:07:52Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/RemoteCacheEntrySet.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package org.infinispan.client.hotrod.impl;\n+\n+import java.util.AbstractSet;\n+import java.util.Map;\n+import java.util.Spliterator;\n+import java.util.stream.Stream;\n+\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.commons.util.CloseableIteratorSet;\n+import org.infinispan.commons.util.CloseableSpliterator;\n+import org.infinispan.commons.util.Closeables;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.commons.util.RemovableCloseableIterator;\n+\n+class RemoteCacheEntrySet<K, V> extends AbstractSet<Map.Entry<K, V>> implements CloseableIteratorSet<Map.Entry<K, V>> {\n+   private InternalRemoteCache<K, V> remoteCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwMTQ3Mg==", "bodyText": "You can do only a single if with\nif (!(o instanceof Map.Entry))\n                return false;", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420001472", "createdAt": "2020-05-05T10:12:19Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/RemoteCacheEntrySet.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package org.infinispan.client.hotrod.impl;\n+\n+import java.util.AbstractSet;\n+import java.util.Map;\n+import java.util.Spliterator;\n+import java.util.stream.Stream;\n+\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.commons.util.CloseableIteratorSet;\n+import org.infinispan.commons.util.CloseableSpliterator;\n+import org.infinispan.commons.util.Closeables;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.commons.util.RemovableCloseableIterator;\n+\n+class RemoteCacheEntrySet<K, V> extends AbstractSet<Map.Entry<K, V>> implements CloseableIteratorSet<Map.Entry<K, V>> {\n+   private InternalRemoteCache<K, V> remoteCache;\n+   private final IntSet segments;\n+\n+   public RemoteCacheEntrySet(InternalRemoteCache<K, V> remoteCache, IntSet segments) {\n+      this.remoteCache = remoteCache;\n+      this.segments = segments;\n+   }\n+\n+   @Override\n+   public CloseableIterator<Map.Entry<K, V>> iterator() {\n+      return new RemovableCloseableIterator<>(remoteCache.entryIterator(segments), this::remove);\n+   }\n+\n+   @Override\n+   public CloseableSpliterator<Map.Entry<K, V>> spliterator() {\n+      return Closeables.spliterator(iterator(), Long.MAX_VALUE, Spliterator.NONNULL | Spliterator.CONCURRENT);\n+   }\n+\n+   @Override\n+   public Stream<Map.Entry<K, V>> stream() {\n+      return Closeables.stream(spliterator(), false);\n+   }\n+\n+   @Override\n+   public Stream<Map.Entry<K, V>> parallelStream() {\n+      return Closeables.stream(spliterator(), true);\n+   }\n+\n+   @Override\n+   public int size() {\n+      return remoteCache.size();\n+   }\n+\n+   @Override\n+   public void clear() {\n+      remoteCache.clear();\n+   }\n+\n+   @Override\n+   public boolean contains(Object o) {\n+      Map.Entry entry = toEntry(o);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNDU3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private InternalRemoteCache<?, V> remoteCache;\n          \n          \n            \n               private final InternalRemoteCache<?, V> remoteCache;", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420004573", "createdAt": "2020-05-05T10:18:37Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/RemoteCacheValuesCollection.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.infinispan.client.hotrod.impl;\n+\n+import java.util.AbstractCollection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Spliterator;\n+import java.util.stream.Stream;\n+\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.commons.util.CloseableIteratorCollection;\n+import org.infinispan.commons.util.CloseableSpliterator;\n+import org.infinispan.commons.util.Closeables;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.commons.util.IteratorMapper;\n+import org.infinispan.commons.util.RemovableCloseableIterator;\n+\n+class RemoteCacheValuesCollection<V> extends AbstractCollection<V> implements CloseableIteratorCollection<V> {\n+   private InternalRemoteCache<?, V> remoteCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNTg1MQ==", "bodyText": "you can avoid the cast if you add K as a type: RemoteCacheValuesCollection<K, V>", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420005851", "createdAt": "2020-05-05T10:20:59Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/RemoteCacheValuesCollection.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.infinispan.client.hotrod.impl;\n+\n+import java.util.AbstractCollection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Spliterator;\n+import java.util.stream.Stream;\n+\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.commons.util.CloseableIteratorCollection;\n+import org.infinispan.commons.util.CloseableSpliterator;\n+import org.infinispan.commons.util.Closeables;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.commons.util.IteratorMapper;\n+import org.infinispan.commons.util.RemovableCloseableIterator;\n+\n+class RemoteCacheValuesCollection<V> extends AbstractCollection<V> implements CloseableIteratorCollection<V> {\n+   private InternalRemoteCache<?, V> remoteCache;\n+   private final IntSet segments;\n+\n+   RemoteCacheValuesCollection(InternalRemoteCache<?, V> remoteCache, IntSet segments) {\n+      this.remoteCache = remoteCache;\n+      this.segments = segments;\n+   }\n+\n+   @Override\n+   public CloseableIterator<V> iterator() {\n+      CloseableIterator<Map.Entry<?, V>> entryIterator = ((InternalRemoteCache) remoteCache).entryIterator(segments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNjM3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private InternalRemoteCache<K, Collection<V>> cache;\n          \n          \n            \n               private final InternalRemoteCache<K, Collection<V>> cache;", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420006376", "createdAt": "2020-05-05T10:22:05Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/multimap/RemoteMultimapCacheImpl.java", "diffHunk": "@@ -36,7 +37,7 @@\n    private static final Log log = LogFactory.getLog(RemoteMultimapCacheImpl.class, Log.class);\n    private static final boolean trace = log.isTraceEnabled();\n \n-   private RemoteCacheImpl<K, Collection<V>> cache;\n+   private InternalRemoteCache<K, Collection<V>> cache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNzMxNA==", "bodyText": "offtopic: why do we need lifespan and max idle?\n   private long defaultLifespan = 0;\n   private long defaultMaxIdleTime = 0;\n\nThey never change and they aren't set anywhere\ncc @karesti", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420007314", "createdAt": "2020-05-05T10:24:02Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/multimap/RemoteMultimapCacheImpl.java", "diffHunk": "@@ -36,7 +37,7 @@\n    private static final Log log = LogFactory.getLog(RemoteMultimapCacheImpl.class, Log.class);\n    private static final boolean trace = log.isTraceEnabled();\n \n-   private RemoteCacheImpl<K, Collection<V>> cache;\n+   private InternalRemoteCache<K, Collection<V>> cache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNjM3Ng=="}, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNzg3NA==", "bodyText": "use CompletionStage instead? I think it is the recommended way to do it.", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420007874", "createdAt": "2020-05-05T10:25:11Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/TransactionContext.java", "diffHunk": "@@ -69,17 +69,17 @@ public String toString() {\n              '}';\n    }\n \n-   boolean containsKey(Object key, Function<K, MetadataValue<V>> remoteValueSupplier) {\n-      ByRef<Boolean> result = new ByRef<>(null);\n+   CompletableFuture<Boolean> containsKey(Object key, Function<K, MetadataValue<V>> remoteValueSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwODY2NA==", "bodyText": "create a JIRA please!!!", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420008664", "createdAt": "2020-05-05T10:26:41Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/TransactionalRemoteCacheImpl.java", "diffHunk": "@@ -42,7 +42,8 @@\n    private final TransactionManager transactionManager;\n    private final TransactionTable transactionTable;\n \n-   private final Function<K, MetadataValue<V>> remoteGet = super::getWithMetadata;\n+   // TODO: the remote get is force to be sync and is blocking!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMDM2NQ==", "bodyText": "nitpick: update test name", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420010365", "createdAt": "2020-05-05T10:30:09Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/CacheManagerNotStartedTest.java", "diffHunk": "@@ -107,7 +107,7 @@ public void testPutAllAsync() {\n \n    @Test(expectedExceptions = RemoteCacheManagerNotStartedException.class)\n    public void testVersionedGet() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMDU0OA==", "bodyText": "nitpick: update test name", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420010548", "createdAt": "2020-05-05T10:30:28Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/CacheManagerStoppedTest.java", "diffHunk": "@@ -112,7 +112,7 @@ public void testPutAllAsync() {\n \n    @Test(expectedExceptions = RemoteCacheManagerNotStartedException.class, dependsOnMethods = \"testStopCacheManager\")\n    public void testVersionedGet() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMTExNQ==", "bodyText": "revert?", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420011115", "createdAt": "2020-05-05T10:31:35Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/SecureExecTest.java", "diffHunk": "@@ -156,7 +156,8 @@ private void runTestWithGivenScript(Configuration config, String scriptPath) thr\n          uploadScript(scriptName, script);\n       }\n \n-      String result = remoteCacheManager.getCache(CACHE_NAME).execute(scriptName, params);\n+      String result = remoteCacheManager.getCache(CACHE_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMTk4OQ==", "bodyText": "nitpick: update test name", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420011989", "createdAt": "2020-05-05T10:33:20Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/retry/ReplicationRetryTest.java", "diffHunk": "@@ -59,7 +59,7 @@ public void testContains() {\n    public void testGetWithVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMjk3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private InternalRemoteCache<K, ?> remoteCache;\n          \n          \n            \n               private final InternalRemoteCache<K, ?> remoteCache;", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420012979", "createdAt": "2020-05-05T10:35:16Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/RemoteCacheKeySet.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.infinispan.client.hotrod.impl;\n+\n+import java.util.AbstractSet;\n+import java.util.Collection;\n+import java.util.Spliterator;\n+import java.util.stream.Stream;\n+\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.commons.util.CloseableIteratorSet;\n+import org.infinispan.commons.util.CloseableSpliterator;\n+import org.infinispan.commons.util.Closeables;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.commons.util.RemovableCloseableIterator;\n+\n+class RemoteCacheKeySet<K> extends AbstractSet<K> implements CloseableIteratorSet<K> {\n+   private InternalRemoteCache<K, ?> remoteCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "committedDate": "2020-04-22T18:22:26Z", "message": "ISPN-11674 Clean up RemoteCache method overrides"}, "afterCommit": {"oid": "4d15aa3d4c5221ee208dd9c595c2aa4407bf6527", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/4d15aa3d4c5221ee208dd9c595c2aa4407bf6527", "committedDate": "2020-05-13T14:19:38Z", "message": "ISPN-11674 Clean up RemoteCache method overrides"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTkxOTE4", "url": "https://github.com/infinispan/infinispan/pull/8216#pullrequestreview-411191918", "createdAt": "2020-05-13T18:30:04Z", "commit": {"oid": "4d15aa3d4c5221ee208dd9c595c2aa4407bf6527"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODozMDowNFrOGU-Xzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODozMDowNFrOGU-Xzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0NjYwNg==", "bodyText": "nitpick: extra lines", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424646606", "createdAt": "2020-05-13T18:30:04Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/TransactionalRemoteCacheImpl.java", "diffHunk": "@@ -203,14 +200,16 @@ public V get(Object key) {\n    }\n \n    @Override\n-   public boolean remove(Object key, Object value) {\n+   public CompletableFuture<Boolean> removeAsync(Object key, Object value) {\n       TransactionContext<K, V> txContext = getTransactionContext();\n       //noinspection unchecked\n       return txContext == null ?\n-            super.remove(key, value) :\n-            txContext.computeSync((K) key, entry -> removeEntryIfEquals(entry, value), remoteGet);\n+            super.removeAsync(key, value) :\n+            txContext.compute((K) key, entry -> removeEntryIfEquals(entry, value), remoteGet);\n    }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d15aa3d4c5221ee208dd9c595c2aa4407bf6527"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTk2Mzc5", "url": "https://github.com/infinispan/infinispan/pull/8216#pullrequestreview-411196379", "createdAt": "2020-05-13T18:36:21Z", "commit": {"oid": "4d15aa3d4c5221ee208dd9c595c2aa4407bf6527"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODozNjoyMVrOGU-luQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODozNjoyMVrOGU-luQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MDE2OQ==", "bodyText": "can you check if this class RemoteCacheWrapper can be replaced by DelegatingRemoteCache?", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424650169", "createdAt": "2020-05-13T18:36:21Z", "author": {"login": "pruivo"}, "path": "jcache/remote/src/main/java/org/infinispan/jcache/remote/RemoteCacheWrapper.java", "diffHunk": "@@ -15,7 +15,6 @@\n import org.infinispan.client.hotrod.RemoteCacheManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d15aa3d4c5221ee208dd9c595c2aa4407bf6527"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTk3OTg0", "url": "https://github.com/infinispan/infinispan/pull/8216#pullrequestreview-411197984", "createdAt": "2020-05-13T18:38:36Z", "commit": {"oid": "4d15aa3d4c5221ee208dd9c595c2aa4407bf6527"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODozODozNlrOGU-qpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODozODozNlrOGU-qpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MTQzMA==", "bodyText": "are these methods needed? They don't seem to be invoked in JCache", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424651430", "createdAt": "2020-05-13T18:38:36Z", "author": {"login": "pruivo"}, "path": "jcache/remote/src/main/java/org/infinispan/jcache/remote/RemoteCacheWithStats.java", "diffHunk": "@@ -12,16 +14,25 @@ public RemoteCacheWithStats(RemoteCache<K, V> delegate, LocalStatistics stats) {\n       this.stats = stats;\n    }\n \n-   @Override\n-   public V get(Object key) {\n-      V v = delegate.get(key);\n+   private final Function<V, V> getFunction = v -> {\n       if (v == null) {\n          stats.incrementCacheMisses();\n       } else {\n          stats.incrementCacheHits();\n       }\n       stats.incrementCacheGets();\n       return v;\n+   };\n+\n+   @Override\n+   public CompletableFuture<V> getAsync(K key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d15aa3d4c5221ee208dd9c595c2aa4407bf6527"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d15aa3d4c5221ee208dd9c595c2aa4407bf6527", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/4d15aa3d4c5221ee208dd9c595c2aa4407bf6527", "committedDate": "2020-05-13T14:19:38Z", "message": "ISPN-11674 Clean up RemoteCache method overrides"}, "afterCommit": {"oid": "c5096988d46a3dc003a55439048b5212aec8dc78", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/c5096988d46a3dc003a55439048b5212aec8dc78", "committedDate": "2020-05-13T21:12:46Z", "message": "ISPN-11674 Clean up RemoteCache method overrides"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNTU5NjY4", "url": "https://github.com/infinispan/infinispan/pull/8216#pullrequestreview-411559668", "createdAt": "2020-05-14T08:06:21Z", "commit": {"oid": "c5096988d46a3dc003a55439048b5212aec8dc78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODowNjoyMlrOGVQrFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODowNjoyMlrOGVQrFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0NjQ1NA==", "bodyText": "leftover?", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424946454", "createdAt": "2020-05-14T08:06:22Z", "author": {"login": "pruivo"}, "path": "jcache/remote/src/main/java/org/infinispan/jcache/remote/RemoteCacheWithStats.java", "diffHunk": "@@ -22,7 +22,7 @@ public V get(Object key) {\n       }\n       stats.incrementCacheGets();\n       return v;\n-   }\n+   };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5096988d46a3dc003a55439048b5212aec8dc78"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d2b5c71c501459c277bd1bfeb18e74d6639a63d", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/9d2b5c71c501459c277bd1bfeb18e74d6639a63d", "committedDate": "2020-05-14T14:55:01Z", "message": "ISPN-11619 Remove deprecated RemoteCache#getVersioned"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2a1cf178bb58c4013ded6c8e0ba686f401e5f1f", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/e2a1cf178bb58c4013ded6c8e0ba686f401e5f1f", "committedDate": "2020-05-14T14:55:01Z", "message": "ISPN-11674 Clean up RemoteCache method overrides"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5096988d46a3dc003a55439048b5212aec8dc78", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/c5096988d46a3dc003a55439048b5212aec8dc78", "committedDate": "2020-05-13T21:12:46Z", "message": "ISPN-11674 Clean up RemoteCache method overrides"}, "afterCommit": {"oid": "e2a1cf178bb58c4013ded6c8e0ba686f401e5f1f", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/e2a1cf178bb58c4013ded6c8e0ba686f401e5f1f", "committedDate": "2020-05-14T14:55:01Z", "message": "ISPN-11674 Clean up RemoteCache method overrides"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDA2Mjg0", "url": "https://github.com/infinispan/infinispan/pull/8216#pullrequestreview-412006284", "createdAt": "2020-05-14T17:00:58Z", "commit": {"oid": "e2a1cf178bb58c4013ded6c8e0ba686f401e5f1f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 880, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}