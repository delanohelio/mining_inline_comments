{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MjIyNTQ4", "number": 8129, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODozOTo0OFrODtbsqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODozMDozOFrODwTsKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTY2MzEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/cache/impl/CacheImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODozOTo0OFrOF-2dGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo1MToyNFrOGAOeSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0ODIxOA==", "bodyText": "If/Else to avoid unnecessary assignment?", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r401448218", "createdAt": "2020-04-01T08:39:48Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/cache/impl/CacheImpl.java", "diffHunk": "@@ -400,9 +400,16 @@ V mergeInternal(K key, V value, BiFunction<? super V, ? super V, ? extends V> re\n       assertKeyNotNull(key);\n       assertValueNotNull(value);\n       assertFunctionNotNull(remappingFunction);\n+      DataConversion keyDataConversion = getKeyDataConversion();\n+      DataConversion valueDataConversion = getValueDataConversion();\n+      if (remappingFunction instanceof BiFunctionMapper) {\n+         BiFunctionMapper biFunctionMapper = (BiFunctionMapper) remappingFunction;\n+         keyDataConversion = biFunctionMapper.getKeyDataConversion();\n+         valueDataConversion = biFunctionMapper.getValueDataConversion();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NjAxMQ==", "bodyText": "I am not really happy with that if, but it's an underlying issue with functional commands and DataConversion objects, I will address it in another JIRA: https://issues.redhat.com/browse/ISPN-11584", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402256011", "createdAt": "2020-04-02T11:56:59Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/cache/impl/CacheImpl.java", "diffHunk": "@@ -400,9 +400,16 @@ V mergeInternal(K key, V value, BiFunction<? super V, ? super V, ? extends V> re\n       assertKeyNotNull(key);\n       assertValueNotNull(value);\n       assertFunctionNotNull(remappingFunction);\n+      DataConversion keyDataConversion = getKeyDataConversion();\n+      DataConversion valueDataConversion = getValueDataConversion();\n+      if (remappingFunction instanceof BiFunctionMapper) {\n+         BiFunctionMapper biFunctionMapper = (BiFunctionMapper) remappingFunction;\n+         keyDataConversion = biFunctionMapper.getKeyDataConversion();\n+         valueDataConversion = biFunctionMapper.getValueDataConversion();\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0ODIxOA=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3Mjk3NQ==", "bodyText": "What about compute, computeIfPresent, and computeIfAbsent?", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402772975", "createdAt": "2020-04-03T06:58:48Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/cache/impl/CacheImpl.java", "diffHunk": "@@ -400,9 +400,16 @@ V mergeInternal(K key, V value, BiFunction<? super V, ? super V, ? extends V> re\n       assertKeyNotNull(key);\n       assertValueNotNull(value);\n       assertFunctionNotNull(remappingFunction);\n+      DataConversion keyDataConversion = getKeyDataConversion();\n+      DataConversion valueDataConversion = getValueDataConversion();\n+      if (remappingFunction instanceof BiFunctionMapper) {\n+         BiFunctionMapper biFunctionMapper = (BiFunctionMapper) remappingFunction;\n+         keyDataConversion = biFunctionMapper.getKeyDataConversion();\n+         valueDataConversion = biFunctionMapper.getValueDataConversion();\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0ODIxOA=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5MDMxMw==", "bodyText": "compute doesn't use Functional commands, so it should be fine", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402890313", "createdAt": "2020-04-03T09:51:24Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/cache/impl/CacheImpl.java", "diffHunk": "@@ -400,9 +400,16 @@ V mergeInternal(K key, V value, BiFunction<? super V, ? super V, ? extends V> re\n       assertKeyNotNull(key);\n       assertValueNotNull(value);\n       assertFunctionNotNull(remappingFunction);\n+      DataConversion keyDataConversion = getKeyDataConversion();\n+      DataConversion valueDataConversion = getValueDataConversion();\n+      if (remappingFunction instanceof BiFunctionMapper) {\n+         BiFunctionMapper biFunctionMapper = (BiFunctionMapper) remappingFunction;\n+         keyDataConversion = biFunctionMapper.getKeyDataConversion();\n+         valueDataConversion = biFunctionMapper.getValueDataConversion();\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0ODIxOA=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTY4Mzk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/functional/functions/MergeFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0NTozOFrOF-2qcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0NTozOFrOF-2qcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1MTYzMg==", "bodyText": "Redundant comment", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r401451632", "createdAt": "2020-04-01T08:45:38Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/commands/functional/functions/MergeFunction.java", "diffHunk": "@@ -32,12 +33,26 @@ public V apply(EntryView.ReadWriteEntryView<K, V> entry) {\n       try {\n          V merged = value;\n          if (entry.find().isPresent()) {\n-            merged = remappingFunction.apply(entry.get(), value);\n+            V t = entry.get();\n+            if (remappingFunction instanceof BiFunctionMapper) {\n+               BiFunctionMapper mapper = (BiFunctionMapper) this.remappingFunction;\n+               Object toStorage = mapper.getValueDataConversion().toStorage(t);\n+               merged = remappingFunction.apply((V) toStorage, value);\n+//               merged = remappingFunction.apply((V)fromStorage, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTY4ODQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/functional/functions/MergeFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0Njo1MVrOF-2tXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0Njo1MVrOF-2tXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1MjM4MA==", "bodyText": "else if?", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r401452380", "createdAt": "2020-04-01T08:46:51Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/commands/functional/functions/MergeFunction.java", "diffHunk": "@@ -32,12 +33,26 @@ public V apply(EntryView.ReadWriteEntryView<K, V> entry) {\n       try {\n          V merged = value;\n          if (entry.find().isPresent()) {\n-            merged = remappingFunction.apply(entry.get(), value);\n+            V t = entry.get();\n+            if (remappingFunction instanceof BiFunctionMapper) {\n+               BiFunctionMapper mapper = (BiFunctionMapper) this.remappingFunction;\n+               Object toStorage = mapper.getValueDataConversion().toStorage(t);\n+               merged = remappingFunction.apply((V) toStorage, value);\n+//               merged = remappingFunction.apply((V)fromStorage, value);\n+            } else {\n+               merged = remappingFunction.apply(t, value);\n+            }\n          }\n          if (merged == null) {\n             entry.set(merged);\n          } else {\n-            entry.set(merged, metadata);\n+            if (remappingFunction instanceof BiFunctionMapper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTY5MjMwOnYy", "diffSide": "RIGHT", "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/MediaType.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0Nzo1M1rOF-2v1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo1MjozN1rOGAOhJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1MzAxNQ==", "bodyText": "Method is never used.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r401453015", "createdAt": "2020-04-01T08:47:53Z", "author": {"login": "ryanemerson"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/MediaType.java", "diffHunk": "@@ -245,6 +245,12 @@ public boolean hasStringType() {\n       return classType != null && classType.equals(String.class.getName());\n    }\n \n+   public boolean isBinary() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDY0MA==", "bodyText": "It will be used very soon in https://issues.redhat.com/browse/ISPN-11424", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402254640", "createdAt": "2020-04-02T11:54:22Z", "author": {"login": "gustavonalle"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/MediaType.java", "diffHunk": "@@ -245,6 +245,12 @@ public boolean hasStringType() {\n       return classType != null && classType.equals(String.class.getName());\n    }\n \n+   public boolean isBinary() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1MzAxNQ=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5NDc1NA==", "bodyText": "Shouldn't it be in another PR then?", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402594754", "createdAt": "2020-04-02T20:59:47Z", "author": {"login": "danberindei"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/MediaType.java", "diffHunk": "@@ -245,6 +245,12 @@ public boolean hasStringType() {\n       return classType != null && classType.equals(String.class.getName());\n    }\n \n+   public boolean isBinary() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1MzAxNQ=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5MTA0NQ==", "bodyText": "I can remove it and add it later, np", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402891045", "createdAt": "2020-04-03T09:52:37Z", "author": {"login": "gustavonalle"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/MediaType.java", "diffHunk": "@@ -245,6 +245,12 @@ public boolean hasStringType() {\n       return classType != null && classType.equals(String.class.getName());\n    }\n \n+   public boolean isBinary() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1MzAxNQ=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTcwMTk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/encoding/ProtostreamTranscoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo1MDoxNFrOF-21vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTo1NTo1NlrOF_nuYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NDUyNQ==", "bodyText": "We should remove org.infinispan.server.core.dataconversion.ProtostreamTranscoder and update it's usage to this class.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r401454525", "createdAt": "2020-04-01T08:50:14Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/encoding/ProtostreamTranscoder.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package org.infinispan.encoding;\n+\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_OBJECT;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_OCTET_STREAM;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_PROTOSTREAM;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_UNKNOWN;\n+import static org.infinispan.commons.dataconversion.MediaType.TEXT_PLAIN;\n+import static org.infinispan.commons.dataconversion.StandardConversions.convertTextToObject;\n+import static org.infinispan.commons.dataconversion.StandardConversions.decodeOctetStream;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.util.Optional;\n+\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.OneToManyTranscoder;\n+import org.infinispan.commons.dataconversion.StandardConversions;\n+import org.infinispan.commons.marshall.WrappedByteArray;\n+import org.infinispan.commons.util.Util;\n+import org.infinispan.marshall.protostream.impl.SerializationContextRegistry;\n+import org.infinispan.protostream.ImmutableSerializationContext;\n+import org.infinispan.protostream.ProtobufUtil;\n+import org.infinispan.util.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+/**\n+ * Transcode between application/x-protostream and commons formats\n+ *\n+ * @since 10.0\n+ */\n+public class ProtostreamTranscoder extends OneToManyTranscoder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NTQ1OA==", "bodyText": "Ops, forgot about it", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402255458", "createdAt": "2020-04-02T11:55:56Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/ProtostreamTranscoder.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package org.infinispan.encoding;\n+\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_OBJECT;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_OCTET_STREAM;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_PROTOSTREAM;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_UNKNOWN;\n+import static org.infinispan.commons.dataconversion.MediaType.TEXT_PLAIN;\n+import static org.infinispan.commons.dataconversion.StandardConversions.convertTextToObject;\n+import static org.infinispan.commons.dataconversion.StandardConversions.decodeOctetStream;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.util.Optional;\n+\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.OneToManyTranscoder;\n+import org.infinispan.commons.dataconversion.StandardConversions;\n+import org.infinispan.commons.marshall.WrappedByteArray;\n+import org.infinispan.commons.util.Util;\n+import org.infinispan.marshall.protostream.impl.SerializationContextRegistry;\n+import org.infinispan.protostream.ImmutableSerializationContext;\n+import org.infinispan.protostream.ProtobufUtil;\n+import org.infinispan.util.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+/**\n+ * Transcode between application/x-protostream and commons formats\n+ *\n+ * @since 10.0\n+ */\n+public class ProtostreamTranscoder extends OneToManyTranscoder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NDUyNQ=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTcwNTE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/factories/EncoderRegistryFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo1MToxMVrOF-23yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo1MToxMVrOF-23yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NTA0OQ==", "bodyText": "It would nice to keep these inline as @Inject @ComponentName to be consistent with other classes.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r401455049", "createdAt": "2020-04-01T08:51:11Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/factories/EncoderRegistryFactory.java", "diffHunk": "@@ -29,26 +32,35 @@\n @DefaultFactoryFor(classes = {EncoderRegistry.class})\n public class EncoderRegistryFactory extends AbstractComponentFactory implements AutoInstantiableFactory {\n    // Must not start the global marshaller or it will be too late for modules to register their externalizers\n-   @Inject @ComponentName(KnownComponentNames.INTERNAL_MARSHALLER)\n+   @Inject\n+   @ComponentName(KnownComponentNames.INTERNAL_MARSHALLER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTczODkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/factories/EncoderRegistryFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo1OTo1OVrOF-3NDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo1OTo1OVrOF-3NDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2MDQ5NA==", "bodyText": "This registration ultimately has been moved to the Refactored GlobalMarshaller on my branch ... can you add a comment so I don't forget to remove it here:\n// TODO Move registration to GlobalMarshaller ISPN-9622", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r401460494", "createdAt": "2020-04-01T08:59:59Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/factories/EncoderRegistryFactory.java", "diffHunk": "@@ -29,26 +32,35 @@\n @DefaultFactoryFor(classes = {EncoderRegistry.class})\n public class EncoderRegistryFactory extends AbstractComponentFactory implements AutoInstantiableFactory {\n    // Must not start the global marshaller or it will be too late for modules to register their externalizers\n-   @Inject @ComponentName(KnownComponentNames.INTERNAL_MARSHALLER)\n+   @Inject\n+   @ComponentName(KnownComponentNames.INTERNAL_MARSHALLER)\n    ComponentRef<StreamingMarshaller> globalMarshaller;\n-   @Inject @ComponentName(KnownComponentNames.PERSISTENCE_MARSHALLER)\n+   @Inject\n+   @ComponentName(KnownComponentNames.PERSISTENCE_MARSHALLER)\n    PersistenceMarshaller persistenceMarshaller;\n-   @Inject EmbeddedCacheManager embeddedCacheManager;\n+   @Inject\n+   EmbeddedCacheManager embeddedCacheManager;\n+\n+   @Inject\n+   SerializationContextRegistry ctxRegistry;\n \n    @Override\n    public Object construct(String componentName) {\n+      ClassLoader classLoader = globalConfiguration.classLoader();\n       EncoderRegistryImpl encoderRegistry = new EncoderRegistryImpl();\n       ClassWhiteList classWhiteList = embeddedCacheManager.getClassWhiteList();\n+      String messageName = PersistenceContextInitializer.getFqTypeName(MarshallableUserObject.class);\n+      ctxRegistry.addMarshaller(SerializationContextRegistry.MarshallerType.GLOBAL, new MarshallableUserObject.Marshaller(messageName, persistenceMarshaller.getUserMarshaller()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTc2MDQ5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/eviction/impl/MarshalledValuesEvictionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTowNTo1N1rOF-3auQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTowNTo1N1rOF-3auQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2Mzk5Mw==", "bodyText": "I think you can re-use CountMarshallingPojo here and just configure the org.infinispan.test.TestDataSCI", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r401463993", "createdAt": "2020-04-01T09:05:57Z", "author": {"login": "ryanemerson"}, "path": "core/src/test/java/org/infinispan/eviction/impl/MarshalledValuesEvictionTest.java", "diffHunk": "@@ -67,12 +70,68 @@ public void testEvictPrimitiveKeyCustomValue() {\n             expectedReads++; // unmarshall old value if overwritten\n          expectedWrites++; // just the value\n       }\n-      assertEquals(expectedWrites, EvictionPojo.Externalizer.writes.get());\n-      assertEquals(expectedReads, EvictionPojo.Externalizer.reads.get());\n+      assertEquals(expectedWrites, EvictionPojoMarshaller.writes.get());\n+      assertEquals(expectedReads, EvictionPojoMarshaller.reads.get());\n+   }\n+\n+   static class EvictionPojoMarshaller implements org.infinispan.protostream.MessageMarshaller<EvictionPojo> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTc3ODgyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/eviction/impl/protostream/PrimitiveArrayCtx.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToxMTowMFrOF-3mfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxMjo1NlrOGCYC9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzAwNA==", "bodyText": "This made me think of ProtoStream support and then I saw that you created https://issues.redhat.com/browse/IPROTO-134 \ud83d\ude42", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r401467004", "createdAt": "2020-04-01T09:11:00Z", "author": {"login": "ryanemerson"}, "path": "core/src/test/java/org/infinispan/eviction/impl/protostream/PrimitiveArrayCtx.java", "diffHunk": "@@ -0,0 +1,222 @@\n+package org.infinispan.eviction.impl.protostream;\n+\n+import static org.infinispan.protostream.FileDescriptorSource.fromString;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.SerializationContextInitializer;\n+\n+/**\n+ * Adds support for primitive and primitive wrapper arrays.\n+ */\n+public class PrimitiveArrayCtx implements SerializationContextInitializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1ODcxOA==", "bodyText": "Yes, I added this as a workaround in the tests only, to force Protostream to support it  \ud83d\ude04", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402258718", "createdAt": "2020-04-02T12:01:51Z", "author": {"login": "gustavonalle"}, "path": "core/src/test/java/org/infinispan/eviction/impl/protostream/PrimitiveArrayCtx.java", "diffHunk": "@@ -0,0 +1,222 @@\n+package org.infinispan.eviction.impl.protostream;\n+\n+import static org.infinispan.protostream.FileDescriptorSource.fromString;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.SerializationContextInitializer;\n+\n+/**\n+ * Adds support for primitive and primitive wrapper arrays.\n+ */\n+public class PrimitiveArrayCtx implements SerializationContextInitializer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzAwNA=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg2MzA1NQ==", "bodyText": "Couldn't we just change the test so it doesn't use primitive arrays? :)\nMost cache operations won't work with primitive array keys, because the equals() implementation is wrong, and many cache operations also require equals() to work for values, so I would rather prohibit primitive array keys and values instead of adding special support in protostream.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402863055", "createdAt": "2020-04-03T09:05:48Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/eviction/impl/protostream/PrimitiveArrayCtx.java", "diffHunk": "@@ -0,0 +1,222 @@\n+package org.infinispan.eviction.impl.protostream;\n+\n+import static org.infinispan.protostream.FileDescriptorSource.fromString;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.SerializationContextInitializer;\n+\n+/**\n+ * Adds support for primitive and primitive wrapper arrays.\n+ */\n+public class PrimitiveArrayCtx implements SerializationContextInitializer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzAwNA=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5MjMzMg==", "bodyText": "Woudn't those primitive arrays marshalled form be wrapped in WrappedByteArray, so the equal and hashcode work?", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402892332", "createdAt": "2020-04-03T09:54:44Z", "author": {"login": "gustavonalle"}, "path": "core/src/test/java/org/infinispan/eviction/impl/protostream/PrimitiveArrayCtx.java", "diffHunk": "@@ -0,0 +1,222 @@\n+package org.infinispan.eviction.impl.protostream;\n+\n+import static org.infinispan.protostream.FileDescriptorSource.fromString;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.SerializationContextInitializer;\n+\n+/**\n+ * Adds support for primitive and primitive wrapper arrays.\n+ */\n+public class PrimitiveArrayCtx implements SerializationContextInitializer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzAwNA=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0MzAwNQ==", "bodyText": "Yes, but that would mean primitive arrays would work or would not work depending on the cache encoding, and I would rather they work or not work the same way in any configuration.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404543005", "createdAt": "2020-04-07T05:25:54Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/eviction/impl/protostream/PrimitiveArrayCtx.java", "diffHunk": "@@ -0,0 +1,222 @@\n+package org.infinispan.eviction.impl.protostream;\n+\n+import static org.infinispan.protostream.FileDescriptorSource.fromString;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.SerializationContextInitializer;\n+\n+/**\n+ * Adds support for primitive and primitive wrapper arrays.\n+ */\n+public class PrimitiveArrayCtx implements SerializationContextInitializer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzAwNA=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyMjAyMA==", "bodyText": "Right, I see your point. But this was a very old test and I was just making it pass by offering an alternative that works on protostream. Protostream as a marshaller should support it IMO since every other marshaller in the world does :)\nOn the Infinispan side, we could document the limitation or even throw an exception if someone tries to store those arrays? In either case, I wouldn't want the change to be hidden inside this PR instead of a separate JIRA to get more visibility, as this is a breaking change", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404622020", "createdAt": "2020-04-07T08:16:12Z", "author": {"login": "gustavonalle"}, "path": "core/src/test/java/org/infinispan/eviction/impl/protostream/PrimitiveArrayCtx.java", "diffHunk": "@@ -0,0 +1,222 @@\n+package org.infinispan.eviction.impl.protostream;\n+\n+import static org.infinispan.protostream.FileDescriptorSource.fromString;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.SerializationContextInitializer;\n+\n+/**\n+ * Adds support for primitive and primitive wrapper arrays.\n+ */\n+public class PrimitiveArrayCtx implements SerializationContextInitializer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzAwNA=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NDMwOQ==", "bodyText": "I agree, I over-reacted a bit to the IPROTO-134 comment because I don't want to add a new feature just to keep an old test working.\nPersonally I'd like to throw an exception, but we can also explore non-byte array wrappers.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r405144309", "createdAt": "2020-04-07T22:12:56Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/eviction/impl/protostream/PrimitiveArrayCtx.java", "diffHunk": "@@ -0,0 +1,222 @@\n+package org.infinispan.eviction.impl.protostream;\n+\n+import static org.infinispan.protostream.FileDescriptorSource.fromString;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.SerializationContextInitializer;\n+\n+/**\n+ * Adds support for primitive and primitive wrapper arrays.\n+ */\n+public class PrimitiveArrayCtx implements SerializationContextInitializer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzAwNA=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTc4NDQ1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/marshall/MarshalledValueSingleNodeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToxMjozMVrOF-3qDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzoxMTo1OVrOF_qfYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzkxNg==", "bodyText": "Why do we now get an IllegalArgumentException? I must have missed this change.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r401467916", "createdAt": "2020-04-01T09:12:31Z", "author": {"login": "ryanemerson"}, "path": "core/src/test/java/org/infinispan/marshall/MarshalledValueSingleNodeTest.java", "diffHunk": "@@ -20,12 +19,12 @@ protected EmbeddedCacheManager createCacheManager() throws Exception {\n       return cm;\n    }\n \n-   @Test(expectedExceptions = MarshallingException.class)\n+   @Test(expectedExceptions = IllegalArgumentException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4ODMzNQ==", "bodyText": "Because protostream throws it when it can't marshall something. Before this PR, the GlobalMarshaller used to throw MarshallingException for this case", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402288335", "createdAt": "2020-04-02T12:52:25Z", "author": {"login": "gustavonalle"}, "path": "core/src/test/java/org/infinispan/marshall/MarshalledValueSingleNodeTest.java", "diffHunk": "@@ -20,12 +19,12 @@ protected EmbeddedCacheManager createCacheManager() throws Exception {\n       return cm;\n    }\n \n-   @Test(expectedExceptions = MarshallingException.class)\n+   @Test(expectedExceptions = IllegalArgumentException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzkxNg=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMwMDc3MA==", "bodyText": "Maybe we should wrap this inside ProtoStreamTranscoder#marshall with a MarshallingException and a message. Something like \"Transcoder failed to marshall class %s\".", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402300770", "createdAt": "2020-04-02T13:11:59Z", "author": {"login": "ryanemerson"}, "path": "core/src/test/java/org/infinispan/marshall/MarshalledValueSingleNodeTest.java", "diffHunk": "@@ -20,12 +19,12 @@ protected EmbeddedCacheManager createCacheManager() throws Exception {\n       return cm;\n    }\n \n-   @Test(expectedExceptions = MarshallingException.class)\n+   @Test(expectedExceptions = IllegalArgumentException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzkxNg=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTc5MDMxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/marshall/core/StoreAsBinaryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToxNDowOFrOF-3twg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTozNzoxMFrOGBzjaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2ODg2Ng==", "bodyText": "Why add the extra variable?", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r401468866", "createdAt": "2020-04-01T09:14:08Z", "author": {"login": "ryanemerson"}, "path": "core/src/test/java/org/infinispan/marshall/core/StoreAsBinaryTest.java", "diffHunk": "@@ -412,7 +411,8 @@ public void testEntrySetValueFromEntryCollections() {\n       m.put(key3, value3);\n       cache(0, \"replSync\").putAll(m);\n \n-      Set<Map.Entry<Object, Object>> entries = cache(0, \"replSync\").entrySet();\n+      Cache<Object, Object> replSync = cache(0, \"replSync\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0NjQwOA==", "bodyText": "I liked the extra variable, there's a lot of repetition in this test :)", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404546408", "createdAt": "2020-04-07T05:37:10Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/marshall/core/StoreAsBinaryTest.java", "diffHunk": "@@ -412,7 +411,8 @@ public void testEntrySetValueFromEntryCollections() {\n       m.put(key3, value3);\n       cache(0, \"replSync\").putAll(m);\n \n-      Set<Map.Entry<Object, Object>> entries = cache(0, \"replSync\").entrySet();\n+      Cache<Object, Object> replSync = cache(0, \"replSync\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2ODg2Ng=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTgzMjk1OnYy", "diffSide": "RIGHT", "path": "multimap/src/test/java/org/infinispan/multimap/impl/MultimapSCI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToyNToxNlrOF-4Ivw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToyNToxNlrOF-4Ivw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3NTc3NQ==", "bodyText": "Nitpick, could you split the array over multiple lines like in the other @AutoProtoSchemaBuilder", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r401475775", "createdAt": "2020-04-01T09:25:16Z", "author": {"login": "ryanemerson"}, "path": "multimap/src/test/java/org/infinispan/multimap/impl/MultimapSCI.java", "diffHunk": "@@ -3,10 +3,11 @@\n import org.infinispan.protostream.SerializationContextInitializer;\n import org.infinispan.protostream.annotations.AutoProtoSchemaBuilder;\n import org.infinispan.test.TestDataSCI;\n+import org.infinispan.test.data.Person;\n \n @AutoProtoSchemaBuilder(\n       dependsOn = TestDataSCI.class,\n-      includeClasses = SuperPerson.class,\n+      includeClasses = {Person.class, SuperPerson.class},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTgzOTYzOnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/impl/massindex/IndexWorker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToyNjo0OFrOF-4M1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzo1OTowNlrOF_slYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3NjgyMA==", "bodyText": "Is this for this PR?", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r401476820", "createdAt": "2020-04-01T09:26:48Z", "author": {"login": "ryanemerson"}, "path": "query/src/main/java/org/infinispan/query/impl/massindex/IndexWorker.java", "diffHunk": "@@ -67,42 +61,38 @@\n \n    @Override\n    public Void apply(EmbeddedCacheManager embeddedCacheManager) {\n-      Cache<Object, Object> cache = embeddedCacheManager.getCache(cacheName).getAdvancedCache().withStorageMediaType();\n-      AdvancedCache<Object, Object> unwrapped = SecurityActions.getUnwrappedCache(cache).getAdvancedCache();\n-      StorageType storageType = unwrapped.getCacheConfiguration().memory().storageType();\n-      if (storageType == StorageType.OBJECT) {\n-         cache = unwrapped.withWrapping(ByteArrayWrapper.class, IdentityWrapper.class);\n-      } else {\n-         cache = cache;  //todo [anistor] why not `unwrapped` instead ? do we need security for mass indexing ?\n-      }\n+      AdvancedCache<Object, Object> cache = SecurityActions.getUnwrappedCache(embeddedCacheManager.getCache(cacheName)).getAdvancedCache();\n+      DataConversion valueDataConversion = cache.getValueDataConversion();\n+      Wrapper valueWrapper = valueDataConversion.getWrapper();\n+      boolean valueFilterable = valueWrapper.isFilterable();\n \n-      SearchIntegrator searchIntegrator = ComponentRegistryUtils.getSearchIntegrator(unwrapped);\n-      KeyTransformationHandler keyTransformationHandler = ComponentRegistryUtils.getKeyTransformationHandler(unwrapped);\n-      TimeService timeService = ComponentRegistryUtils.getTimeService(unwrapped);\n+      AdvancedCache<Object, Object> reindexCache = valueFilterable ? cache.withStorageMediaType() : cache;\n+\n+      SearchIntegrator searchIntegrator = ComponentRegistryUtils.getSearchIntegrator(cache);\n+      KeyTransformationHandler keyTransformationHandler = ComponentRegistryUtils.getKeyTransformationHandler(cache);\n+      TimeService timeService = ComponentRegistryUtils.getTimeService(cache);\n \n       IndexUpdater indexUpdater = new IndexUpdater(searchIntegrator, keyTransformationHandler, timeService);\n-      ClusteringDependentLogic clusteringDependentLogic = SecurityActions.getClusteringDependentLogic(unwrapped);\n+      ClusteringDependentLogic clusteringDependentLogic = SecurityActions.getClusteringDependentLogic(cache);\n       KeyPartitioner keyPartitioner = ComponentRegistryUtils.getKeyPartitioner(cache);\n \n-      DataConversion keyDataConversion = unwrapped.getKeyDataConversion();\n-      DataConversion valueDataConversion = unwrapped.getValueDataConversion();\n-\n       if (keys == null || keys.size() == 0) {\n          preIndex(indexUpdater);\n          if (!skipIndex) {\n-            KeyValueFilter filter = getFilter(clusteringDependentLogic, keyDataConversion);\n-            try (Stream<CacheEntry<Object, Object>> stream = cache.getAdvancedCache().withFlags(Flag.CACHE_MODE_LOCAL)\n+            KeyValueFilter filter = getFilter(clusteringDependentLogic, reindexCache.getKeyDataConversion());\n+            try (Stream<CacheEntry<Object, Object>> stream = reindexCache.getAdvancedCache().withFlags(Flag.CACHE_MODE_LOCAL)\n                   .cacheEntrySet().stream()) {\n                Iterator<CacheEntry<Object, Object>> iterator = stream.filter(CacheFilters.predicate(filter)).iterator();\n-               Wrapper wrapper = unwrapped.getValueDataConversion().getWrapper();\n                while (iterator.hasNext()) {\n                   CacheEntry<Object, Object> next = iterator.next();\n-                  Object value = extractValue(next.getValue(), valueDataConversion);\n-                  Object storedKey = keyDataConversion.toStorage(next.getKey());\n-                  int segment = keyPartitioner.getSegment(storedKey);\n-                  if (value instanceof byte[] && storageType != OBJECT) {\n-                     value = wrapper.wrap(value);\n+                  Object key = next.getKey();\n+                  Object storedKey = reindexCache.getKeyDataConversion().toStorage(key);\n+                  Object value = next.getValue();\n+                  // TODO: Way to grab a cache without unwrapping? cache.withStoreMediaType(boolean unwrap)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2MDAyOA==", "bodyText": "let me check if this is still needed", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402260028", "createdAt": "2020-04-02T12:04:15Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/impl/massindex/IndexWorker.java", "diffHunk": "@@ -67,42 +61,38 @@\n \n    @Override\n    public Void apply(EmbeddedCacheManager embeddedCacheManager) {\n-      Cache<Object, Object> cache = embeddedCacheManager.getCache(cacheName).getAdvancedCache().withStorageMediaType();\n-      AdvancedCache<Object, Object> unwrapped = SecurityActions.getUnwrappedCache(cache).getAdvancedCache();\n-      StorageType storageType = unwrapped.getCacheConfiguration().memory().storageType();\n-      if (storageType == StorageType.OBJECT) {\n-         cache = unwrapped.withWrapping(ByteArrayWrapper.class, IdentityWrapper.class);\n-      } else {\n-         cache = cache;  //todo [anistor] why not `unwrapped` instead ? do we need security for mass indexing ?\n-      }\n+      AdvancedCache<Object, Object> cache = SecurityActions.getUnwrappedCache(embeddedCacheManager.getCache(cacheName)).getAdvancedCache();\n+      DataConversion valueDataConversion = cache.getValueDataConversion();\n+      Wrapper valueWrapper = valueDataConversion.getWrapper();\n+      boolean valueFilterable = valueWrapper.isFilterable();\n \n-      SearchIntegrator searchIntegrator = ComponentRegistryUtils.getSearchIntegrator(unwrapped);\n-      KeyTransformationHandler keyTransformationHandler = ComponentRegistryUtils.getKeyTransformationHandler(unwrapped);\n-      TimeService timeService = ComponentRegistryUtils.getTimeService(unwrapped);\n+      AdvancedCache<Object, Object> reindexCache = valueFilterable ? cache.withStorageMediaType() : cache;\n+\n+      SearchIntegrator searchIntegrator = ComponentRegistryUtils.getSearchIntegrator(cache);\n+      KeyTransformationHandler keyTransformationHandler = ComponentRegistryUtils.getKeyTransformationHandler(cache);\n+      TimeService timeService = ComponentRegistryUtils.getTimeService(cache);\n \n       IndexUpdater indexUpdater = new IndexUpdater(searchIntegrator, keyTransformationHandler, timeService);\n-      ClusteringDependentLogic clusteringDependentLogic = SecurityActions.getClusteringDependentLogic(unwrapped);\n+      ClusteringDependentLogic clusteringDependentLogic = SecurityActions.getClusteringDependentLogic(cache);\n       KeyPartitioner keyPartitioner = ComponentRegistryUtils.getKeyPartitioner(cache);\n \n-      DataConversion keyDataConversion = unwrapped.getKeyDataConversion();\n-      DataConversion valueDataConversion = unwrapped.getValueDataConversion();\n-\n       if (keys == null || keys.size() == 0) {\n          preIndex(indexUpdater);\n          if (!skipIndex) {\n-            KeyValueFilter filter = getFilter(clusteringDependentLogic, keyDataConversion);\n-            try (Stream<CacheEntry<Object, Object>> stream = cache.getAdvancedCache().withFlags(Flag.CACHE_MODE_LOCAL)\n+            KeyValueFilter filter = getFilter(clusteringDependentLogic, reindexCache.getKeyDataConversion());\n+            try (Stream<CacheEntry<Object, Object>> stream = reindexCache.getAdvancedCache().withFlags(Flag.CACHE_MODE_LOCAL)\n                   .cacheEntrySet().stream()) {\n                Iterator<CacheEntry<Object, Object>> iterator = stream.filter(CacheFilters.predicate(filter)).iterator();\n-               Wrapper wrapper = unwrapped.getValueDataConversion().getWrapper();\n                while (iterator.hasNext()) {\n                   CacheEntry<Object, Object> next = iterator.next();\n-                  Object value = extractValue(next.getValue(), valueDataConversion);\n-                  Object storedKey = keyDataConversion.toStorage(next.getKey());\n-                  int segment = keyPartitioner.getSegment(storedKey);\n-                  if (value instanceof byte[] && storageType != OBJECT) {\n-                     value = wrapper.wrap(value);\n+                  Object key = next.getKey();\n+                  Object storedKey = reindexCache.getKeyDataConversion().toStorage(key);\n+                  Object value = next.getValue();\n+                  // TODO: Way to grab a cache without unwrapping? cache.withStoreMediaType(boolean unwrap)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3NjgyMA=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzNTA3NA==", "bodyText": "For now, I will just remove this TODO and handle it in the next PR", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402335074", "createdAt": "2020-04-02T13:59:06Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/impl/massindex/IndexWorker.java", "diffHunk": "@@ -67,42 +61,38 @@\n \n    @Override\n    public Void apply(EmbeddedCacheManager embeddedCacheManager) {\n-      Cache<Object, Object> cache = embeddedCacheManager.getCache(cacheName).getAdvancedCache().withStorageMediaType();\n-      AdvancedCache<Object, Object> unwrapped = SecurityActions.getUnwrappedCache(cache).getAdvancedCache();\n-      StorageType storageType = unwrapped.getCacheConfiguration().memory().storageType();\n-      if (storageType == StorageType.OBJECT) {\n-         cache = unwrapped.withWrapping(ByteArrayWrapper.class, IdentityWrapper.class);\n-      } else {\n-         cache = cache;  //todo [anistor] why not `unwrapped` instead ? do we need security for mass indexing ?\n-      }\n+      AdvancedCache<Object, Object> cache = SecurityActions.getUnwrappedCache(embeddedCacheManager.getCache(cacheName)).getAdvancedCache();\n+      DataConversion valueDataConversion = cache.getValueDataConversion();\n+      Wrapper valueWrapper = valueDataConversion.getWrapper();\n+      boolean valueFilterable = valueWrapper.isFilterable();\n \n-      SearchIntegrator searchIntegrator = ComponentRegistryUtils.getSearchIntegrator(unwrapped);\n-      KeyTransformationHandler keyTransformationHandler = ComponentRegistryUtils.getKeyTransformationHandler(unwrapped);\n-      TimeService timeService = ComponentRegistryUtils.getTimeService(unwrapped);\n+      AdvancedCache<Object, Object> reindexCache = valueFilterable ? cache.withStorageMediaType() : cache;\n+\n+      SearchIntegrator searchIntegrator = ComponentRegistryUtils.getSearchIntegrator(cache);\n+      KeyTransformationHandler keyTransformationHandler = ComponentRegistryUtils.getKeyTransformationHandler(cache);\n+      TimeService timeService = ComponentRegistryUtils.getTimeService(cache);\n \n       IndexUpdater indexUpdater = new IndexUpdater(searchIntegrator, keyTransformationHandler, timeService);\n-      ClusteringDependentLogic clusteringDependentLogic = SecurityActions.getClusteringDependentLogic(unwrapped);\n+      ClusteringDependentLogic clusteringDependentLogic = SecurityActions.getClusteringDependentLogic(cache);\n       KeyPartitioner keyPartitioner = ComponentRegistryUtils.getKeyPartitioner(cache);\n \n-      DataConversion keyDataConversion = unwrapped.getKeyDataConversion();\n-      DataConversion valueDataConversion = unwrapped.getValueDataConversion();\n-\n       if (keys == null || keys.size() == 0) {\n          preIndex(indexUpdater);\n          if (!skipIndex) {\n-            KeyValueFilter filter = getFilter(clusteringDependentLogic, keyDataConversion);\n-            try (Stream<CacheEntry<Object, Object>> stream = cache.getAdvancedCache().withFlags(Flag.CACHE_MODE_LOCAL)\n+            KeyValueFilter filter = getFilter(clusteringDependentLogic, reindexCache.getKeyDataConversion());\n+            try (Stream<CacheEntry<Object, Object>> stream = reindexCache.getAdvancedCache().withFlags(Flag.CACHE_MODE_LOCAL)\n                   .cacheEntrySet().stream()) {\n                Iterator<CacheEntry<Object, Object>> iterator = stream.filter(CacheFilters.predicate(filter)).iterator();\n-               Wrapper wrapper = unwrapped.getValueDataConversion().getWrapper();\n                while (iterator.hasNext()) {\n                   CacheEntry<Object, Object> next = iterator.next();\n-                  Object value = extractValue(next.getValue(), valueDataConversion);\n-                  Object storedKey = keyDataConversion.toStorage(next.getKey());\n-                  int segment = keyPartitioner.getSegment(storedKey);\n-                  if (value instanceof byte[] && storageType != OBJECT) {\n-                     value = wrapper.wrap(value);\n+                  Object key = next.getKey();\n+                  Object storedKey = reindexCache.getKeyDataConversion().toStorage(key);\n+                  Object value = next.getValue();\n+                  // TODO: Way to grab a cache without unwrapping? cache.withStoreMediaType(boolean unwrap)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3NjgyMA=="}, "originalCommit": {"oid": "5781343b1f04b53900c78da8caba1bf452374b86"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTA2NTU1OnYy", "diffSide": "RIGHT", "path": "server/core/src/test/java/org/infinispan/server/core/dataconversion/ProtostreamJsonTranscoderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzoxNzo1MlrOF_qulg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzoxNzo1MlrOF_qulg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMwNDY2Mg==", "bodyText": "We should move this and ProtoStreamTextTranscoderTest.java to core as well.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402304662", "createdAt": "2020-04-02T13:17:52Z", "author": {"login": "ryanemerson"}, "path": "server/core/src/test/java/org/infinispan/server/core/dataconversion/ProtostreamJsonTranscoderTest.java", "diffHunk": "@@ -6,6 +6,7 @@\n import java.nio.charset.StandardCharsets;\n \n import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.encoding.ProtostreamTranscoder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4b413869c7311ed37698c92bea52da19475315"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODIzOTQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1ODo1NlrOGAJQIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODoyMzozN1rOGD0c-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNDc2OQ==", "bodyText": "Is this is needed at all? All the constructors already have a storageMediaType parameter.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402804769", "createdAt": "2020-04-03T07:58:56Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -166,28 +173,17 @@ public void injectDependencies(@ComponentName(KnownComponentNames.CACHE_NAME) St\n       }\n       boolean internalCache = icr.isInternalCache(cacheName);\n       boolean embeddedMode = Configurations.isEmbeddedMode(gcr);\n-      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache);\n+      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache, persistenceMarshaller);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNjM0OA==", "bodyText": "This was added to avoid requiring caches to configure a storage media type, and to assume sensible defaults. We can discuss if this config should be mandatory or not, but this is out of scope for this PR", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402906348", "createdAt": "2020-04-03T10:20:37Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -166,28 +173,17 @@ public void injectDependencies(@ComponentName(KnownComponentNames.CACHE_NAME) St\n       }\n       boolean internalCache = icr.isInternalCache(cacheName);\n       boolean embeddedMode = Configurations.isEmbeddedMode(gcr);\n-      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache);\n+      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache, persistenceMarshaller);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNDc2OQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0ODg3Nw==", "bodyText": "IIUC injectDependencies() is only called on the remote nodes, not on the origin node. But storageMediaType is not transient, so the value coming from the origin node should be good enough. Or if injectDependencies() is also called on the origin node, then we don't need to initialize it in the constructor.\nOr were you thinking about a cache that is configured with one storage media type on node A and another storage media type on node B? I'm pretty sure that would break lots of other things, because we don't transcode values in non-functional commands.\nI'm fine with splitting it in a separate JIRA btw, since you're just adding a parameter here, but I would like to clarify it at some point.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404548877", "createdAt": "2020-04-07T05:45:04Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -166,28 +173,17 @@ public void injectDependencies(@ComponentName(KnownComponentNames.CACHE_NAME) St\n       }\n       boolean internalCache = icr.isInternalCache(cacheName);\n       boolean embeddedMode = Configurations.isEmbeddedMode(gcr);\n-      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache);\n+      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache, persistenceMarshaller);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNDc2OQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3MzAyMg==", "bodyText": "Here's where the DataConversion is injected: \n  \n    \n      infinispan/core/src/main/java/org/infinispan/cache/impl/EncoderCache.java\n    \n    \n        Lines 122 to 125\n      in\n      db04d4a\n    \n    \n    \n    \n\n        \n          \n           public void wireRealCache() { \n        \n\n        \n          \n              componentRegistry.wireDependencies(keyDataConversion, false); \n        \n\n        \n          \n              componentRegistry.wireDependencies(valueDataConversion, false); \n        \n\n        \n          \n              componentRegistry.wireDependencies(cache, false);", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404773022", "createdAt": "2020-04-07T12:35:38Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -166,28 +173,17 @@ public void injectDependencies(@ComponentName(KnownComponentNames.CACHE_NAME) St\n       }\n       boolean internalCache = icr.isInternalCache(cacheName);\n       boolean embeddedMode = Configurations.isEmbeddedMode(gcr);\n-      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache);\n+      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache, persistenceMarshaller);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNDc2OQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NTY3OQ==", "bodyText": "I was wrong, injectDependencies() is called, it just skips most of the initialization, including that of storageMediaType (see line 167).\nReading that code again, the initialization is skipped only for the DataConversion.DEFAULT_* static instances, so you are right, the storageMediaType is recomputed.\nSpeaking of the static instances, however, the line this.encoderRegistry = encoderRegistry; should be moved below the if so that they stay constant.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r405145679", "createdAt": "2020-04-07T22:16:24Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -166,28 +173,17 @@ public void injectDependencies(@ComponentName(KnownComponentNames.CACHE_NAME) St\n       }\n       boolean internalCache = icr.isInternalCache(cacheName);\n       boolean embeddedMode = Configurations.isEmbeddedMode(gcr);\n-      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache);\n+      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache, persistenceMarshaller);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNDc2OQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM4NzAwMg==", "bodyText": "One more thing: since we only wire the dependency into DataConversion instances, but we never register them in the component registry, I suggest changing @Scope(NAMED_CACHE) to @Scope(NONE).", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r405387002", "createdAt": "2020-04-08T09:29:22Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -166,28 +173,17 @@ public void injectDependencies(@ComponentName(KnownComponentNames.CACHE_NAME) St\n       }\n       boolean internalCache = icr.isInternalCache(cacheName);\n       boolean embeddedMode = Configurations.isEmbeddedMode(gcr);\n-      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache);\n+      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache, persistenceMarshaller);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNDc2OQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMzkxMQ==", "bodyText": "Moving the this.encoderRegistry = encoderRegistry below the if breaks a bunch of stuff, since the registry can be used in convertToRequestFormat()", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r405433911", "createdAt": "2020-04-08T10:49:53Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -166,28 +173,17 @@ public void injectDependencies(@ComponentName(KnownComponentNames.CACHE_NAME) St\n       }\n       boolean internalCache = icr.isInternalCache(cacheName);\n       boolean embeddedMode = Configurations.isEmbeddedMode(gcr);\n-      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache);\n+      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache, persistenceMarshaller);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNDc2OQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzOTIyOQ==", "bodyText": "@gustavonalle the if should only apply to the static instances like DataConversion.DEFAULT_KEY. The encoder registry is a component, so 2 nodes running in the same JVM will overwrite each other's encoderRegistry reference, which I don't think is correct.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r406039229", "createdAt": "2020-04-09T08:25:45Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -166,28 +173,17 @@ public void injectDependencies(@ComponentName(KnownComponentNames.CACHE_NAME) St\n       }\n       boolean internalCache = icr.isInternalCache(cacheName);\n       boolean embeddedMode = Configurations.isEmbeddedMode(gcr);\n-      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache);\n+      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache, persistenceMarshaller);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNDc2OQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0NzM4NQ==", "bodyText": "AFAICT, the same encoder registry instance is inject in all data conversions of all caches, it's a cache manager level component. If you have 2 nodes in the same JVM, I suppose each node will have a different one, but they won't mix?\nok, I understood what you meant, let me see if I can change it...", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r406047385", "createdAt": "2020-04-09T08:39:39Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -166,28 +173,17 @@ public void injectDependencies(@ComponentName(KnownComponentNames.CACHE_NAME) St\n       }\n       boolean internalCache = icr.isInternalCache(cacheName);\n       boolean embeddedMode = Configurations.isEmbeddedMode(gcr);\n-      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache);\n+      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache, persistenceMarshaller);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNDc2OQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3ODMxOQ==", "bodyText": "Actually, I won't do this for this PR, as it's unrelated.\nhttps://issues.redhat.com/browse/ISPN-11620", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r406078319", "createdAt": "2020-04-09T09:32:30Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -166,28 +173,17 @@ public void injectDependencies(@ComponentName(KnownComponentNames.CACHE_NAME) St\n       }\n       boolean internalCache = icr.isInternalCache(cacheName);\n       boolean embeddedMode = Configurations.isEmbeddedMode(gcr);\n-      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache);\n+      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache, persistenceMarshaller);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNDc2OQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1ODI5OA==", "bodyText": "Excellent, I was actually testing my changes locally and came to the same conclusion: a DataConversion instance should only convert between the storage type and the request type, the transcoder lookup should be elsewhere.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r406658298", "createdAt": "2020-04-10T08:23:37Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -166,28 +173,17 @@ public void injectDependencies(@ComponentName(KnownComponentNames.CACHE_NAME) St\n       }\n       boolean internalCache = icr.isInternalCache(cacheName);\n       boolean embeddedMode = Configurations.isEmbeddedMode(gcr);\n-      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache);\n+      this.storageMediaType = getStorageMediaType(configuration, embeddedMode, internalCache, persistenceMarshaller);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNDc2OQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODI2MTE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "isResolved": true, "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowMjoyNVrOGAJbnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDo1Mzo0NVrOGDTvGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzcxMQ==", "bodyText": "IMO if the cache has a user marshaller and the storage type is not OBJECT, then the cache should already be initialized with the user marshaller's media type as the storage type, we shouldn't do this check only when the DataConversion is shipped to another node and has its dependencies injected.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402807711", "createdAt": "2020-04-03T08:02:25Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -120,9 +120,12 @@ public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegist\n    /**\n     * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache) {\n+   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n       EncodingConfiguration encodingConfiguration = configuration.encoding();\n       ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n+      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n+      MediaType mediaType = userMarshaller.mediaType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwOTE2OA==", "bodyText": "Could you clarify? The DataConversion is initialized when the cache is initialized, it's a component. Also the information about storage type, request type, transcoder, etc is part of the DataConversion", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402909168", "createdAt": "2020-04-03T10:25:59Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -120,9 +120,12 @@ public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegist\n    /**\n     * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache) {\n+   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n       EncodingConfiguration encodingConfiguration = configuration.encoding();\n       ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n+      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n+      MediaType mediaType = userMarshaller.mediaType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzcxMQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1MjUwOA==", "bodyText": "I meant the user marshaller and the storage type must be in sync. I don't see any point in allowing a cache to be configured with both\n<value media-type=\"application/x-protostream\"/>\nand\n<serialization marshaller=\"org.infinispan.jboss.marshalling.core.JBossUserMarshaller\"/>\n\nit's a component.\n\nExactly. There is a DataConversion component, but most of the injectDependencies() logic is skipped for that instance because the same class is trying to be 2 things at the same time.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404552508", "createdAt": "2020-04-07T05:56:17Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -120,9 +120,12 @@ public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegist\n    /**\n     * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache) {\n+   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n       EncodingConfiguration encodingConfiguration = configuration.encoding();\n       ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n+      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n+      MediaType mediaType = userMarshaller.mediaType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzcxMQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwNDMzNg==", "bodyText": "The pair <value media-type=\"application/x-protostream\"/> and <serialization marshaller=\"org.infinispan.jboss.marshalling.core.JBossUserMarshaller\"/> is possible. The later is cache-manager scoped, the former cache scope config.\nIt means the cache will store protobuf and a transcoder that is able to convert between application/x-jboss-marshaller <=> application/x-java-object is registered. This transcoder can be used whenever another cache needs that conversion", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404604336", "createdAt": "2020-04-07T07:46:51Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -120,9 +120,12 @@ public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegist\n    /**\n     * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache) {\n+   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n       EncodingConfiguration encodingConfiguration = configuration.encoding();\n       ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n+      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n+      MediaType mediaType = userMarshaller.mediaType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzcxMQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNTcyOA==", "bodyText": "Good point, I was thinking of the user marshaller as a purely \"to/from storage\" thing, but it's obvious now that it could also be a \"to/from request\" thing.\nHowever, PersistenceManagerImpl.createUserMarshaller() ignores the cache's storage media type, so storageMediaType will always be set to the user marshaller's media type.\nAnd it also made me realize that the <value media-type=\"X\"/> configuration serves a dual purpose. It was even more complicated before, but with your changes IIUC\n\nWith <binary/>, the storage type is X, and the default request type is application/x-java-object.\nWith <object/>, the storage type is application/x-java-object, and the default request type is X.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404625728", "createdAt": "2020-04-07T08:22:01Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -120,9 +120,12 @@ public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegist\n    /**\n     * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache) {\n+   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n       EncodingConfiguration encodingConfiguration = configuration.encoding();\n       ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n+      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n+      MediaType mediaType = userMarshaller.mediaType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzcxMQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNTgyNw==", "bodyText": "Going back to your initial point, injectDependencies() should be always called when the cache is created, otherwise I fear for the transcoding stuff \ud83d\ude04\nAn alternative to what was done here, that aligns with your suggestion, is to move this logic to configuration time, more precisely, if a cache is heap (OBJECT) and don't have a MediaType configured, let's set the key/value mediatype to the \"user marshaller\". I will try doing that.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404625827", "createdAt": "2020-04-07T08:22:11Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -120,9 +120,12 @@ public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegist\n    /**\n     * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache) {\n+   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n       EncodingConfiguration encodingConfiguration = configuration.encoding();\n       ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n+      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n+      MediaType mediaType = userMarshaller.mediaType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzcxMQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzNTczNw==", "bodyText": "<value media-type=\"X\"/>\n\nThis has a single purpose, define the format of the values in the cache. This is configuration and cannot be changed at runtime. If not specified, a best guess will be made, e.g., indexed server caches will be protobuf otherwise there's no way of having query to work.\nThe request type will be app/x-java-object by default, and it's changeable at runtime, that's how the server deals with multiple request formats in REST, for example.\nI will rather say what is planned for the BINARY/OFF_HEAP/OBJECT trio after the last PR which is https://issues.redhat.com/browse/ISPN-11424:\n\nBINARY and OBJECT disappears\nOFF_HEAP is a flag on/off to specify if data will be stored in heap or not\nif off_heap=true for a cache, then we check the media type: it it's not byte[] based format, we throw an exception.\n\nSo we're left only with the mediatype and a flag heap/off-heap", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404635737", "createdAt": "2020-04-07T08:37:49Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -120,9 +120,12 @@ public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegist\n    /**\n     * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache) {\n+   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n       EncodingConfiguration encodingConfiguration = configuration.encoding();\n       ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n+      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n+      MediaType mediaType = userMarshaller.mediaType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzcxMQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMzYxNw==", "bodyText": "@danberindei WRT:\n\nIMO if the cache has a user marshaller and the storage type is not OBJECT, then the cache should already be initialized with the user marshaller's media type as the storage type\n\nI was not able to set the MediaType of the cache at configuration time, since the user marshaller is initialized at runtime and doesn't necessary follow the <serialization> configuration.\nWRT:\n\nBut please have another look at the user marshaller and whether its media type can override the cache's media type with the current code\n\nWhen the DataConversion is initialized, it gives priority to the configured MediaType:\nhttps://github.com/infinispan/infinispan/blob/master/core/src/main/java/org/infinispan/encoding/DataConversion.java#L126-L128", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404813617", "createdAt": "2020-04-07T13:35:44Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -120,9 +120,12 @@ public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegist\n    /**\n     * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache) {\n+   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n       EncodingConfiguration encodingConfiguration = configuration.encoding();\n       ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n+      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n+      MediaType mediaType = userMarshaller.mediaType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzcxMQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3NTA0Ng==", "bodyText": "<value media-type=\"X\"/> [...] has a single purpose, define the format of the values in the cache.\n\nSorry you had to spell that out again, I read \"user marshaller can be used both ways\" and I jumped to \"content type configuration can also be used both ways\". I guess I couldn't accept that the encoding configuration would be simply ignored for caches with OBJECT storage :)\n\nWhen the DataConversion is initialized, it gives priority to the configured MediaType:\n\nI missed that too!\n\nI was not able to set the MediaType of the cache at configuration time\n\nIf you mean during ConfigurationBuilder.build() then I agree, we can't query the user marshaller at that time.\nMy thinking was that the storage type could be computed in InternalCacheFactory.buildEncodingCache(), so it doesn't have to be recomputed every time the DataConversion instance is sent to another node.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r405275046", "createdAt": "2020-04-08T05:57:36Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -120,9 +120,12 @@ public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegist\n    /**\n     * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache) {\n+   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n       EncodingConfiguration encodingConfiguration = configuration.encoding();\n       ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n+      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n+      MediaType mediaType = userMarshaller.mediaType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzcxMQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5NjA2Nw==", "bodyText": "Let me try that", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r405396067", "createdAt": "2020-04-08T09:43:50Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -120,9 +120,12 @@ public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegist\n    /**\n     * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache) {\n+   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n       EncodingConfiguration encodingConfiguration = configuration.encoding();\n       ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n+      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n+      MediaType mediaType = userMarshaller.mediaType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzcxMQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NDM0Ng==", "bodyText": "It didn't work: during InternalCacheFactory.buildEncodingCache() the persistence marshaller is null in the registry", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r405454346", "createdAt": "2020-04-08T11:30:46Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -120,9 +120,12 @@ public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegist\n    /**\n     * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache) {\n+   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n       EncodingConfiguration encodingConfiguration = configuration.encoding();\n       ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n+      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n+      MediaType mediaType = userMarshaller.mediaType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzcxMQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyMDczOQ==", "bodyText": "Yeah, the component registry is not yet bootstrapped there. But the persistence marshaller is a global component, so it doesn't need the cache component registry.\nHere's how I would like it to work: c864043\nLet me know if you want to include my suggestions here, otherwise I can integrate your PR as is and open a separate PR.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r406120739", "createdAt": "2020-04-09T10:50:27Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -120,9 +120,12 @@ public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegist\n    /**\n     * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache) {\n+   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n       EncodingConfiguration encodingConfiguration = configuration.encoding();\n       ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n+      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n+      MediaType mediaType = userMarshaller.mediaType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzcxMQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyMjI2Nw==", "bodyText": "Cool, let's separate from this PR please", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r406122267", "createdAt": "2020-04-09T10:53:45Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -120,9 +120,12 @@ public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegist\n    /**\n     * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache) {\n+   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n       EncodingConfiguration encodingConfiguration = configuration.encoding();\n       ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n+      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n+      MediaType mediaType = userMarshaller.mediaType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNzcxMQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODI4NDg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowNjoxN1rOGAJomw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowNjoxN1rOGAJomw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMTAzNQ==", "bodyText": "Missing whitespace", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402811035", "createdAt": "2020-04-03T08:06:17Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -131,8 +134,11 @@ private MediaType getStorageMediaType(Configuration configuration, boolean embed\n       if (!embeddedMode && configuration.indexing().enabled() && contentTypeConfiguration.mediaType() == null) {\n          return MediaType.APPLICATION_PROTOSTREAM;\n       }\n+      if(internalCache) return MediaType.APPLICATION_OBJECT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODMwNTQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/encoding/ProtostreamTranscoder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowOToyMlrOGAJzcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzo1NzoxMFrOGB3daw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMzgwOQ==", "bodyText": "There seems to be a disconnect between marshall and unmarshall... marshall decides whether to wrap the byte array (whatever that means) based on the wrapped parameter, while unmarshall decides whether the byte array is wrapped or not based on the type parameter. At the very least this deserves a comment to explain the difference. /cc @ryanemerson", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402813809", "createdAt": "2020-04-03T08:09:22Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/ProtostreamTranscoder.java", "diffHunk": "@@ -113,19 +114,27 @@ public Object transcode(Object content, MediaType contentType, MediaType destina\n    }\n \n    private byte[] marshall(Object decoded, MediaType destinationType) throws IOException {\n-      Optional<String> wrappedParam = destinationType.getParameter(\"wrapped\");\n-      if (!wrappedParam.isPresent() || !wrappedParam.get().equals(\"false\"))\n-         return ProtobufUtil.toWrappedByteArray(ctx(), decoded);\n-      return ProtobufUtil.toByteArray(ctx(), decoded);\n+      try {\n+         Optional<String> wrappedParam = destinationType.getParameter(\"wrapped\");\n+         if (!wrappedParam.isPresent() || !wrappedParam.get().equals(\"false\"))\n+            return ProtobufUtil.toWrappedByteArray(ctx(), decoded);\n+         return ProtobufUtil.toByteArray(ctx(), decoded);\n+      } catch (IllegalArgumentException iae) {\n+         throw new MarshallingException(iae.getMessage());\n+      }\n    }\n \n    private Object unmarshall(byte[] bytes, MediaType destinationType) throws IOException {\n-      String type = destinationType.getClassType();\n-      if (type == null) {\n-         return ProtobufUtil.fromWrappedByteArray(ctx(), bytes);\n+      try {\n+         String type = destinationType.getClassType();\n+         if (type == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMjc1Mg==", "bodyText": "When producing protobuf from Something, it's possible to serialize to the protobuf wire format directly or to serialize using a message wrapper containing the protobuf payload, aka  org.infinispan.protostream.WrappedMessage\nThis is used in RemoteQuery, that needs to serialize to those two formats (user payload and query structure itself)\nAFAICT, when umarshalling, it will automatically work \ud83d\ude04\nI will add some test/doc to this", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402912752", "createdAt": "2020-04-03T10:33:02Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/ProtostreamTranscoder.java", "diffHunk": "@@ -113,19 +114,27 @@ public Object transcode(Object content, MediaType contentType, MediaType destina\n    }\n \n    private byte[] marshall(Object decoded, MediaType destinationType) throws IOException {\n-      Optional<String> wrappedParam = destinationType.getParameter(\"wrapped\");\n-      if (!wrappedParam.isPresent() || !wrappedParam.get().equals(\"false\"))\n-         return ProtobufUtil.toWrappedByteArray(ctx(), decoded);\n-      return ProtobufUtil.toByteArray(ctx(), decoded);\n+      try {\n+         Optional<String> wrappedParam = destinationType.getParameter(\"wrapped\");\n+         if (!wrappedParam.isPresent() || !wrappedParam.get().equals(\"false\"))\n+            return ProtobufUtil.toWrappedByteArray(ctx(), decoded);\n+         return ProtobufUtil.toByteArray(ctx(), decoded);\n+      } catch (IllegalArgumentException iae) {\n+         throw new MarshallingException(iae.getMessage());\n+      }\n    }\n \n    private Object unmarshall(byte[] bytes, MediaType destinationType) throws IOException {\n-      String type = destinationType.getClassType();\n-      if (type == null) {\n-         return ProtobufUtil.fromWrappedByteArray(ctx(), bytes);\n+      try {\n+         String type = destinationType.getClassType();\n+         if (type == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMzgwOQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1MzUyNA==", "bodyText": "\ud83d\udc4d\nI don't doubt this feature is needed, I just wanted an explanation of how the wrapped and type parameters work together.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404553524", "createdAt": "2020-04-07T05:59:05Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/ProtostreamTranscoder.java", "diffHunk": "@@ -113,19 +114,27 @@ public Object transcode(Object content, MediaType contentType, MediaType destina\n    }\n \n    private byte[] marshall(Object decoded, MediaType destinationType) throws IOException {\n-      Optional<String> wrappedParam = destinationType.getParameter(\"wrapped\");\n-      if (!wrappedParam.isPresent() || !wrappedParam.get().equals(\"false\"))\n-         return ProtobufUtil.toWrappedByteArray(ctx(), decoded);\n-      return ProtobufUtil.toByteArray(ctx(), decoded);\n+      try {\n+         Optional<String> wrappedParam = destinationType.getParameter(\"wrapped\");\n+         if (!wrappedParam.isPresent() || !wrappedParam.get().equals(\"false\"))\n+            return ProtobufUtil.toWrappedByteArray(ctx(), decoded);\n+         return ProtobufUtil.toByteArray(ctx(), decoded);\n+      } catch (IllegalArgumentException iae) {\n+         throw new MarshallingException(iae.getMessage());\n+      }\n    }\n \n    private Object unmarshall(byte[] bytes, MediaType destinationType) throws IOException {\n-      String type = destinationType.getClassType();\n-      if (type == null) {\n-         return ProtobufUtil.fromWrappedByteArray(ctx(), bytes);\n+      try {\n+         String type = destinationType.getClassType();\n+         if (type == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMzgwOQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMDQxMQ==", "bodyText": "Hope it makes sense now?  ;)", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404610411", "createdAt": "2020-04-07T07:57:10Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/ProtostreamTranscoder.java", "diffHunk": "@@ -113,19 +114,27 @@ public Object transcode(Object content, MediaType contentType, MediaType destina\n    }\n \n    private byte[] marshall(Object decoded, MediaType destinationType) throws IOException {\n-      Optional<String> wrappedParam = destinationType.getParameter(\"wrapped\");\n-      if (!wrappedParam.isPresent() || !wrappedParam.get().equals(\"false\"))\n-         return ProtobufUtil.toWrappedByteArray(ctx(), decoded);\n-      return ProtobufUtil.toByteArray(ctx(), decoded);\n+      try {\n+         Optional<String> wrappedParam = destinationType.getParameter(\"wrapped\");\n+         if (!wrappedParam.isPresent() || !wrappedParam.get().equals(\"false\"))\n+            return ProtobufUtil.toWrappedByteArray(ctx(), decoded);\n+         return ProtobufUtil.toByteArray(ctx(), decoded);\n+      } catch (IllegalArgumentException iae) {\n+         throw new MarshallingException(iae.getMessage());\n+      }\n    }\n \n    private Object unmarshall(byte[] bytes, MediaType destinationType) throws IOException {\n-      String type = destinationType.getClassType();\n-      if (type == null) {\n-         return ProtobufUtil.fromWrappedByteArray(ctx(), bytes);\n+      try {\n+         String type = destinationType.getClassType();\n+         if (type == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMzgwOQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODMyNDk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/interceptors/distribution/DistributionBulkInterceptor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxMjozOFrOGAJ-qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODowMDoxN1rOGB3lDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxNjY4MQ==", "bodyText": "What storage type does the cache injected in components have, if not the storage media type?", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402816681", "createdAt": "2020-04-03T08:12:38Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/interceptors/distribution/DistributionBulkInterceptor.java", "diffHunk": "@@ -70,7 +70,7 @@ public Object visitEntrySetCommand(InvocationContext ctx, EntrySetCommand comman\n       protected final FlagAffectedCommand command;\n \n       private BackingEntrySet(Cache cache, CacheSet<CacheEntry<K, V>> entrySet, FlagAffectedCommand command) {\n-         super(cache);\n+         super(cache.getAdvancedCache().withStorageMediaType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5ODU2NQ==", "bodyText": ".withStorageMediaType() changes the request media type, not the storage media type; this call is simply giving to the interceptor a cache instance that will not try to convert from whatever is stored", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402898565", "createdAt": "2020-04-03T10:05:51Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/interceptors/distribution/DistributionBulkInterceptor.java", "diffHunk": "@@ -70,7 +70,7 @@ public Object visitEntrySetCommand(InvocationContext ctx, EntrySetCommand comman\n       protected final FlagAffectedCommand command;\n \n       private BackingEntrySet(Cache cache, CacheSet<CacheEntry<K, V>> entrySet, FlagAffectedCommand command) {\n-         super(cache);\n+         super(cache.getAdvancedCache().withStorageMediaType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxNjY4MQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1NDU5NA==", "bodyText": "Sorry, I bungled my question.\nI meant why wouldn't the cache injected in components already have the request media type == the storage media type, so that it doesn't do any conversion? The media type of the EncoderCache wrapper is going to be passed as a parameter anyway.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404554594", "createdAt": "2020-04-07T06:02:06Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/interceptors/distribution/DistributionBulkInterceptor.java", "diffHunk": "@@ -70,7 +70,7 @@ public Object visitEntrySetCommand(InvocationContext ctx, EntrySetCommand comman\n       protected final FlagAffectedCommand command;\n \n       private BackingEntrySet(Cache cache, CacheSet<CacheEntry<K, V>> entrySet, FlagAffectedCommand command) {\n-         super(cache);\n+         super(cache.getAdvancedCache().withStorageMediaType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxNjY4MQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMjM2NQ==", "bodyText": "By default, all caches have a request type of application/x-java-object. This was added in the previous issue https://issues.redhat.com/browse/ISPN-11446\nSome components (query, interceptors, etc) need to operate on the data as stored, that's why this decoration was creted", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404612365", "createdAt": "2020-04-07T08:00:17Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/interceptors/distribution/DistributionBulkInterceptor.java", "diffHunk": "@@ -70,7 +70,7 @@ public Object visitEntrySetCommand(InvocationContext ctx, EntrySetCommand comman\n       protected final FlagAffectedCommand command;\n \n       private BackingEntrySet(Cache cache, CacheSet<CacheEntry<K, V>> entrySet, FlagAffectedCommand command) {\n-         super(cache);\n+         super(cache.getAdvancedCache().withStorageMediaType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxNjY4MQ=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODUzNjc4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/dataconversion/DataConversionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODo0NjoyOFrOGALw6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODo0NjoyOFrOGALw6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg0NTkyOA==", "bodyText": "A method would be clearer IMO", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402845928", "createdAt": "2020-04-03T08:46:28Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/dataconversion/DataConversionTest.java", "diffHunk": "@@ -65,11 +66,12 @@ public void testReadUnencoded() {\n       withCacheManager(new CacheManagerCallable(\n             createCacheManager(TestDataSCI.INSTANCE, cfg)) {\n          @Override\n-         public void call() throws IOException, InterruptedException {\n+         public void call() {\n             cm.getClassWhiteList().addClasses(Person.class);\n             Cache<String, Person> cache = cm.getCache();\n \n-            Marshaller marshaller = cache.getAdvancedCache().getComponentRegistry().getInternalMarshaller();\n+            DataConversion conversion = cache.getAdvancedCache().getValueDataConversion();\n+            Function<Object, byte[]> asStored = s -> (byte[]) conversion.convert(s, APPLICATION_OBJECT, APPLICATION_PROTOSTREAM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODU3MzAxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/eviction/impl/ExceptionEvictionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODo1MTo1OFrOGAMEBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToyODowMVrOGAacEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MDgyMA==", "bodyText": "\"16 more\" suddenly doesn't seem that important :)\nIMO we should remove these comments, I'd rather replace the constants in the code (e.g. line 217) with calculations to explain how we got the 144 or 104 bytes of overhead, or maybe a link to another place where the overhead is explained.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402850820", "createdAt": "2020-04-03T08:51:58Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/eviction/impl/ExceptionEvictionTest.java", "diffHunk": "@@ -142,7 +142,7 @@ protected void createCacheManagers() throws Throwable {\n             memoryConfigurationBuilder.size(SIZE);\n             break;\n          case BINARY:\n-            // 64 bytes per entry, however tests that add metadata require 16 more even\n+            // 144 bytes per entry, however tests that add metadata require 16 more even", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4NjM1NA==", "bodyText": "I am not sure about the magic numbers from OFF_HEAP, but I will document the ones from BINARY", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r403086354", "createdAt": "2020-04-03T15:28:01Z", "author": {"login": "gustavonalle"}, "path": "core/src/test/java/org/infinispan/eviction/impl/ExceptionEvictionTest.java", "diffHunk": "@@ -142,7 +142,7 @@ protected void createCacheManagers() throws Throwable {\n             memoryConfigurationBuilder.size(SIZE);\n             break;\n          case BINARY:\n-            // 64 bytes per entry, however tests that add metadata require 16 more even\n+            // 144 bytes per entry, however tests that add metadata require 16 more even", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MDgyMA=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODU3NTU0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/eviction/impl/ExceptionEvictionTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODo1MjoxOVrOGAMFZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjoxNjoxNlrOGB0W9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MTE3Mg==", "bodyText": "putIfAbsent isn't functional, as the method name implies.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402851172", "createdAt": "2020-04-03T08:52:19Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/eviction/impl/ExceptionEvictionTest.java", "diffHunk": "@@ -261,11 +261,11 @@ public void testExceptionOnInsert() {\n \n    public void testExceptionOnInsertFunctional() {\n       for (int i = 0; i < SIZE; ++i) {\n-         cache(0).computeIfAbsent(i, k -> SIZE);\n+         cache(0).putIfAbsent(i * 4096, SIZE * 4096);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5OTQ1Mw==", "bodyText": "This change seems wrong \ud83d\ude04, looks like  bad copy and paste", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402899453", "createdAt": "2020-04-03T10:07:31Z", "author": {"login": "gustavonalle"}, "path": "core/src/test/java/org/infinispan/eviction/impl/ExceptionEvictionTest.java", "diffHunk": "@@ -261,11 +261,11 @@ public void testExceptionOnInsert() {\n \n    public void testExceptionOnInsertFunctional() {\n       for (int i = 0; i < SIZE; ++i) {\n-         cache(0).computeIfAbsent(i, k -> SIZE);\n+         cache(0).putIfAbsent(i * 4096, SIZE * 4096);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MTE3Mg=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNTY1OA==", "bodyText": "No, in fact intellij suggested it and I applied...", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r403005658", "createdAt": "2020-04-03T13:29:38Z", "author": {"login": "gustavonalle"}, "path": "core/src/test/java/org/infinispan/eviction/impl/ExceptionEvictionTest.java", "diffHunk": "@@ -261,11 +261,11 @@ public void testExceptionOnInsert() {\n \n    public void testExceptionOnInsertFunctional() {\n       for (int i = 0; i < SIZE; ++i) {\n-         cache(0).computeIfAbsent(i, k -> SIZE);\n+         cache(0).putIfAbsent(i * 4096, SIZE * 4096);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MTE3Mg=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1OTYwNQ==", "bodyText": "Good guy IntelliJ!\nHowever, since you mentioned ComputeCommand is not really a functional command, maybe the test name was never correct :))", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404559605", "createdAt": "2020-04-07T06:16:16Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/eviction/impl/ExceptionEvictionTest.java", "diffHunk": "@@ -261,11 +261,11 @@ public void testExceptionOnInsert() {\n \n    public void testExceptionOnInsertFunctional() {\n       for (int i = 0; i < SIZE; ++i) {\n-         cache(0).computeIfAbsent(i, k -> SIZE);\n+         cache(0).putIfAbsent(i * 4096, SIZE * 4096);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MTE3Mg=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODU5MzMzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/eviction/impl/MarshalledValuesEvictionTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODo1NTowNFrOGAMPLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTowOTo1MVrOGB6QDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MzY3OA==", "bodyText": "Why keep the random number?\nBut the bigger problem is that CountMarshallingPojo uses static fields for the marshall count, and it breaks when 2 of the many tests that use it run in parallel. Either it should have a custom raw marshaller, with a different marshaller instance in each test, or it should have a test name field and it should maintain a map of marshall counts per test.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402853678", "createdAt": "2020-04-03T08:55:04Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/eviction/impl/MarshalledValuesEvictionTest.java", "diffHunk": "@@ -22,97 +18,50 @@\n \n    private static final int CACHE_SIZE = 128;\n \n-\n    @Override\n    protected EmbeddedCacheManager createCacheManager() throws Exception {\n       ConfigurationBuilder cfg = new ConfigurationBuilder();\n       cfg.memory().size(CACHE_SIZE).evictionType(EvictionType.COUNT).storageType(StorageType.BINARY)\n             .expiration().wakeUpInterval(100L)\n             .locking().useLockStriping(false) // to minimise chances of deadlock in the unit test\n             .build();\n-      cacheManager = TestCacheManagerFactory.createCacheManager(cfg);\n+      cacheManager = TestCacheManagerFactory.createCacheManager(TestDataSCI.INSTANCE, cfg);\n       cache = cacheManager.getCache();\n       return cacheManager;\n    }\n \n    public void testEvictCustomKeyValue() {\n-      EvictionPojo.Externalizer.resetStats();\n+      CountMarshallingPojo.reset();\n       int expectedWrites = 0;\n       int expectedReads = 0;\n       for (int i = 0; i < CACHE_SIZE * 2; i++) {\n-         EvictionPojo p1 = new EvictionPojo();\n-         p1.i = (int) Util.random(2000);\n-         EvictionPojo p2 = new EvictionPojo();\n-         p2.i = 24;\n+         CountMarshallingPojo p1 = new CountMarshallingPojo((int) Util.random(2000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMDA3OA==", "bodyText": "I did not write this test, I was just migrating it to protostream, but I can change it no problem", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402900078", "createdAt": "2020-04-03T10:08:39Z", "author": {"login": "gustavonalle"}, "path": "core/src/test/java/org/infinispan/eviction/impl/MarshalledValuesEvictionTest.java", "diffHunk": "@@ -22,97 +18,50 @@\n \n    private static final int CACHE_SIZE = 128;\n \n-\n    @Override\n    protected EmbeddedCacheManager createCacheManager() throws Exception {\n       ConfigurationBuilder cfg = new ConfigurationBuilder();\n       cfg.memory().size(CACHE_SIZE).evictionType(EvictionType.COUNT).storageType(StorageType.BINARY)\n             .expiration().wakeUpInterval(100L)\n             .locking().useLockStriping(false) // to minimise chances of deadlock in the unit test\n             .build();\n-      cacheManager = TestCacheManagerFactory.createCacheManager(cfg);\n+      cacheManager = TestCacheManagerFactory.createCacheManager(TestDataSCI.INSTANCE, cfg);\n       cache = cacheManager.getCache();\n       return cacheManager;\n    }\n \n    public void testEvictCustomKeyValue() {\n-      EvictionPojo.Externalizer.resetStats();\n+      CountMarshallingPojo.reset();\n       int expectedWrites = 0;\n       int expectedReads = 0;\n       for (int i = 0; i < CACHE_SIZE * 2; i++) {\n-         EvictionPojo p1 = new EvictionPojo();\n-         p1.i = (int) Util.random(2000);\n-         EvictionPojo p2 = new EvictionPojo();\n-         p2.i = 24;\n+         CountMarshallingPojo p1 = new CountMarshallingPojo((int) Util.random(2000));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MzY3OA=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MTA5NQ==", "bodyText": "In fact @ryanemerson suggested the CountMarshallingPojo, I had my own private one, I will just go back to that then", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r403091095", "createdAt": "2020-04-03T15:34:45Z", "author": {"login": "gustavonalle"}, "path": "core/src/test/java/org/infinispan/eviction/impl/MarshalledValuesEvictionTest.java", "diffHunk": "@@ -22,97 +18,50 @@\n \n    private static final int CACHE_SIZE = 128;\n \n-\n    @Override\n    protected EmbeddedCacheManager createCacheManager() throws Exception {\n       ConfigurationBuilder cfg = new ConfigurationBuilder();\n       cfg.memory().size(CACHE_SIZE).evictionType(EvictionType.COUNT).storageType(StorageType.BINARY)\n             .expiration().wakeUpInterval(100L)\n             .locking().useLockStriping(false) // to minimise chances of deadlock in the unit test\n             .build();\n-      cacheManager = TestCacheManagerFactory.createCacheManager(cfg);\n+      cacheManager = TestCacheManagerFactory.createCacheManager(TestDataSCI.INSTANCE, cfg);\n       cache = cacheManager.getCache();\n       return cacheManager;\n    }\n \n    public void testEvictCustomKeyValue() {\n-      EvictionPojo.Externalizer.resetStats();\n+      CountMarshallingPojo.reset();\n       int expectedWrites = 0;\n       int expectedReads = 0;\n       for (int i = 0; i < CACHE_SIZE * 2; i++) {\n-         EvictionPojo p1 = new EvictionPojo();\n-         p1.i = (int) Util.random(2000);\n-         EvictionPojo p2 = new EvictionPojo();\n-         p2.i = 24;\n+         CountMarshallingPojo p1 = new CountMarshallingPojo((int) Util.random(2000));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MzY3OA=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2MDQ0NA==", "bodyText": "I would have rather you fixed CountMarshallingPojo, because it's already used in multiple tests anyway, but know what you mean :)", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404560444", "createdAt": "2020-04-07T06:18:35Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/eviction/impl/MarshalledValuesEvictionTest.java", "diffHunk": "@@ -22,97 +18,50 @@\n \n    private static final int CACHE_SIZE = 128;\n \n-\n    @Override\n    protected EmbeddedCacheManager createCacheManager() throws Exception {\n       ConfigurationBuilder cfg = new ConfigurationBuilder();\n       cfg.memory().size(CACHE_SIZE).evictionType(EvictionType.COUNT).storageType(StorageType.BINARY)\n             .expiration().wakeUpInterval(100L)\n             .locking().useLockStriping(false) // to minimise chances of deadlock in the unit test\n             .build();\n-      cacheManager = TestCacheManagerFactory.createCacheManager(cfg);\n+      cacheManager = TestCacheManagerFactory.createCacheManager(TestDataSCI.INSTANCE, cfg);\n       cache = cacheManager.getCache();\n       return cacheManager;\n    }\n \n    public void testEvictCustomKeyValue() {\n-      EvictionPojo.Externalizer.resetStats();\n+      CountMarshallingPojo.reset();\n       int expectedWrites = 0;\n       int expectedReads = 0;\n       for (int i = 0; i < CACHE_SIZE * 2; i++) {\n-         EvictionPojo p1 = new EvictionPojo();\n-         p1.i = (int) Util.random(2000);\n-         EvictionPojo p2 = new EvictionPojo();\n-         p2.i = 24;\n+         CountMarshallingPojo p1 = new CountMarshallingPojo((int) Util.random(2000));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MzY3OA=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1NjE0MA==", "bodyText": "I've created https://issues.redhat.com/browse/ISPN-11604 so that the issue isn't forgotten.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404656140", "createdAt": "2020-04-07T09:09:51Z", "author": {"login": "ryanemerson"}, "path": "core/src/test/java/org/infinispan/eviction/impl/MarshalledValuesEvictionTest.java", "diffHunk": "@@ -22,97 +18,50 @@\n \n    private static final int CACHE_SIZE = 128;\n \n-\n    @Override\n    protected EmbeddedCacheManager createCacheManager() throws Exception {\n       ConfigurationBuilder cfg = new ConfigurationBuilder();\n       cfg.memory().size(CACHE_SIZE).evictionType(EvictionType.COUNT).storageType(StorageType.BINARY)\n             .expiration().wakeUpInterval(100L)\n             .locking().useLockStriping(false) // to minimise chances of deadlock in the unit test\n             .build();\n-      cacheManager = TestCacheManagerFactory.createCacheManager(cfg);\n+      cacheManager = TestCacheManagerFactory.createCacheManager(TestDataSCI.INSTANCE, cfg);\n       cache = cacheManager.getCache();\n       return cacheManager;\n    }\n \n    public void testEvictCustomKeyValue() {\n-      EvictionPojo.Externalizer.resetStats();\n+      CountMarshallingPojo.reset();\n       int expectedWrites = 0;\n       int expectedReads = 0;\n       for (int i = 0; i < CACHE_SIZE * 2; i++) {\n-         EvictionPojo p1 = new EvictionPojo();\n-         p1.i = (int) Util.random(2000);\n-         EvictionPojo p2 = new EvictionPojo();\n-         p2.i = 24;\n+         CountMarshallingPojo p1 = new CountMarshallingPojo((int) Util.random(2000));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MzY3OA=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODY3NjExOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/persistence/LocalModePassivationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTowODoyMlrOGAM8Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTowODoyMlrOGAM8Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg2NTIzOQ==", "bodyText": "A static method would be clearer IMO, it's always applied directly.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402865239", "createdAt": "2020-04-03T09:08:22Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/persistence/LocalModePassivationTest.java", "diffHunk": "@@ -68,6 +73,13 @@ protected EmbeddedCacheManager createCacheManager() throws Exception {\n       return TestCacheManagerFactory.createCacheManager(builder);\n    }\n \n+   private static BiFunction<Cache<?, ?>, Object, WrappedByteArray> TO_DATA_CONTAINER =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODcwMjU5OnYy", "diffSide": "RIGHT", "path": "jcache/embedded/src/main/java/org/infinispan/jcache/embedded/JCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToxNDoxM1rOGANMaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjoyMDo1MFrOGB0dxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg2OTM1Mg==", "bodyText": "Please reformat only changed lines!\nI've seen quite a few whitespace changes on unmodified lines like this, but this jumped to me because I have Chained method calls / Align when multiline enabled in IntelliJ, and if you have it disabled, formatting the entire file changes the indent of all my lines.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402869352", "createdAt": "2020-04-03T09:14:13Z", "author": {"login": "danberindei"}, "path": "jcache/embedded/src/main/java/org/infinispan/jcache/embedded/JCache.java", "diffHunk": "@@ -220,8 +228,8 @@ public V get(final K key) {\n       // ReadWriteMap.evalMany is not that useful since it forces us to transfer keys\n       List<? extends SimpleEntry<? extends K, CompletableFuture<R>>> list =\n             keys.stream()\n-                .map(k -> new SimpleEntry<>(k, map.eval(k, function)))\n-                .collect(Collectors.toList());\n+                  .map(k -> new SimpleEntry<>(k, map.eval(k, function)))\n+                  .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMTgwOQ==", "bodyText": "Maybe you could check the Intellij style and update it? https://issues.redhat.com/browse/ISPN-11588", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402901809", "createdAt": "2020-04-03T10:11:53Z", "author": {"login": "gustavonalle"}, "path": "jcache/embedded/src/main/java/org/infinispan/jcache/embedded/JCache.java", "diffHunk": "@@ -220,8 +228,8 @@ public V get(final K key) {\n       // ReadWriteMap.evalMany is not that useful since it forces us to transfer keys\n       List<? extends SimpleEntry<? extends K, CompletableFuture<R>>> list =\n             keys.stream()\n-                .map(k -> new SimpleEntry<>(k, map.eval(k, function)))\n-                .collect(Collectors.toList());\n+                  .map(k -> new SimpleEntry<>(k, map.eval(k, function)))\n+                  .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg2OTM1Mg=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2MTM0OQ==", "bodyText": "One day :)", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404561349", "createdAt": "2020-04-07T06:20:50Z", "author": {"login": "danberindei"}, "path": "jcache/embedded/src/main/java/org/infinispan/jcache/embedded/JCache.java", "diffHunk": "@@ -220,8 +228,8 @@ public V get(final K key) {\n       // ReadWriteMap.evalMany is not that useful since it forces us to transfer keys\n       List<? extends SimpleEntry<? extends K, CompletableFuture<R>>> list =\n             keys.stream()\n-                .map(k -> new SimpleEntry<>(k, map.eval(k, function)))\n-                .collect(Collectors.toList());\n+                  .map(k -> new SimpleEntry<>(k, map.eval(k, function)))\n+                  .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg2OTM1Mg=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODcxMDA5OnYy", "diffSide": "RIGHT", "path": "jcache/embedded/src/main/java/org/infinispan/jcache/embedded/JCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToxNjoyOFrOGANRRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxMjowOFrOGAPLrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3MDU5Nw==", "bodyText": "-1", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402870597", "createdAt": "2020-04-03T09:16:28Z", "author": {"login": "danberindei"}, "path": "jcache/embedded/src/main/java/org/infinispan/jcache/embedded/JCache.java", "diffHunk": "@@ -534,11 +543,12 @@ public void removeAll(Set<? extends K> keys) {\n             // does not block the commit of other, already persisted entries\n             AggregateCompletionStage<Void> stage = CompletionStages.aggregateCompletionStage();\n             keys.stream()\n-                .map(k -> rwMapSkipCacheLoad.eval(k, Remove.getInstance()))\n-                .forEach(stage::dependsOn);\n+                  .map(k -> rwMapSkipCacheLoad.eval(k, Remove.getInstance()))\n+                  .forEach(stage::dependsOn);\n             CompletionStages.join(stage.freeze());\n          } else {\n-            rwMapSkipCacheLoad.evalMany(keys, Remove.getInstance()).forEach(b -> {});\n+            rwMapSkipCacheLoad.evalMany(keys, Remove.getInstance()).forEach(b -> {\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMTkzNA==", "bodyText": "Maybe you could check the Intellij style and update it? https://issues.redhat.com/browse/ISPN-11588", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402901934", "createdAt": "2020-04-03T10:12:08Z", "author": {"login": "gustavonalle"}, "path": "jcache/embedded/src/main/java/org/infinispan/jcache/embedded/JCache.java", "diffHunk": "@@ -534,11 +543,12 @@ public void removeAll(Set<? extends K> keys) {\n             // does not block the commit of other, already persisted entries\n             AggregateCompletionStage<Void> stage = CompletionStages.aggregateCompletionStage();\n             keys.stream()\n-                .map(k -> rwMapSkipCacheLoad.eval(k, Remove.getInstance()))\n-                .forEach(stage::dependsOn);\n+                  .map(k -> rwMapSkipCacheLoad.eval(k, Remove.getInstance()))\n+                  .forEach(stage::dependsOn);\n             CompletionStages.join(stage.freeze());\n          } else {\n-            rwMapSkipCacheLoad.evalMany(keys, Remove.getInstance()).forEach(b -> {});\n+            rwMapSkipCacheLoad.evalMany(keys, Remove.getInstance()).forEach(b -> {\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3MDU5Nw=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODc0NTkyOnYy", "diffSide": "RIGHT", "path": "jcache/embedded/src/main/java/org/infinispan/jcache/embedded/functions/Invoke.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToyNjoyN1rOGANnfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNzowOTozOVrOGAvyYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NjI4Ng==", "bodyText": "Is this really necessary? I thought JCache doesn't allow the user to override the data conversion.\nAlso the field/parameter names should include Conversion, key and value is a bit confusing.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402876286", "createdAt": "2020-04-03T09:26:27Z", "author": {"login": "danberindei"}, "path": "jcache/embedded/src/main/java/org/infinispan/jcache/embedded/functions/Invoke.java", "diffHunk": "@@ -28,13 +29,17 @@\n    private final EntryProcessor<K, V, R> processor;\n    private final Object[] arguments;\n    private final boolean storeByReference;\n+   private final DataConversion key;\n+   private final DataConversion value;\n    private PersistenceMarshaller marshaller;\n    private ExpiryPolicy expiryPolicy;\n \n-   public Invoke(EntryProcessor<K, V, R> processor, Object[] arguments, boolean storeByReference) {\n+   public Invoke(EntryProcessor<K, V, R> processor, Object[] arguments, boolean storeByReference, DataConversion key, DataConversion value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNDMyNw==", "bodyText": "hmm, I could try to grab from the cache directly during entry processing, let me try", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402914327", "createdAt": "2020-04-03T10:36:11Z", "author": {"login": "gustavonalle"}, "path": "jcache/embedded/src/main/java/org/infinispan/jcache/embedded/functions/Invoke.java", "diffHunk": "@@ -28,13 +29,17 @@\n    private final EntryProcessor<K, V, R> processor;\n    private final Object[] arguments;\n    private final boolean storeByReference;\n+   private final DataConversion key;\n+   private final DataConversion value;\n    private PersistenceMarshaller marshaller;\n    private ExpiryPolicy expiryPolicy;\n \n-   public Invoke(EntryProcessor<K, V, R> processor, Object[] arguments, boolean storeByReference) {\n+   public Invoke(EntryProcessor<K, V, R> processor, Object[] arguments, boolean storeByReference, DataConversion key, DataConversion value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NjI4Ng=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzNjEzMA==", "bodyText": "Indeed, this is not needed \ud83d\udc4d", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r403436130", "createdAt": "2020-04-04T07:09:39Z", "author": {"login": "gustavonalle"}, "path": "jcache/embedded/src/main/java/org/infinispan/jcache/embedded/functions/Invoke.java", "diffHunk": "@@ -28,13 +29,17 @@\n    private final EntryProcessor<K, V, R> processor;\n    private final Object[] arguments;\n    private final boolean storeByReference;\n+   private final DataConversion key;\n+   private final DataConversion value;\n    private PersistenceMarshaller marshaller;\n    private ExpiryPolicy expiryPolicy;\n \n-   public Invoke(EntryProcessor<K, V, R> processor, Object[] arguments, boolean storeByReference) {\n+   public Invoke(EntryProcessor<K, V, R> processor, Object[] arguments, boolean storeByReference, DataConversion key, DataConversion value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NjI4Ng=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODc1ODkxOnYy", "diffSide": "RIGHT", "path": "lucene/lucene-directory/src/main/java/org/infinispan/lucene/directory/DirectoryBuilder.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToyOTo1OVrOGANviA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1MzoxMVrOGCf7jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3ODM0NA==", "bodyText": "What's the expected media type for a Lucene cache? Couldn't you test for that instead of !APPLICATION_UNKNOWN?", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402878344", "createdAt": "2020-04-03T09:29:59Z", "author": {"login": "danberindei"}, "path": "lucene/lucene-directory/src/main/java/org/infinispan/lucene/directory/DirectoryBuilder.java", "diffHunk": "@@ -42,8 +43,12 @@ public static BuildContext newDirectoryInstance(Cache<?, ?> metadataCache, Cache\n     * Search\n     */\n    private static Cache<?, ?> decorateCache(Cache<?, ?> cache) {\n-      if (cache == null) return null;\n-      return cache.getAdvancedCache().withStorageMediaType();\n+      if(cache == null) return null;\n+      if(cache.getAdvancedCache().getValueDataConversion().getStorageMediaType().equals(MediaType.APPLICATION_UNKNOWN)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5Njg0MA==", "bodyText": "The user can create/configure Lucene caches, so there is no way of knowing.\nIn any case, Lucene caches are being removed on #8137.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402896840", "createdAt": "2020-04-03T10:02:29Z", "author": {"login": "gustavonalle"}, "path": "lucene/lucene-directory/src/main/java/org/infinispan/lucene/directory/DirectoryBuilder.java", "diffHunk": "@@ -42,8 +43,12 @@ public static BuildContext newDirectoryInstance(Cache<?, ?> metadataCache, Cache\n     * Search\n     */\n    private static Cache<?, ?> decorateCache(Cache<?, ?> cache) {\n-      if (cache == null) return null;\n-      return cache.getAdvancedCache().withStorageMediaType();\n+      if(cache == null) return null;\n+      if(cache.getAdvancedCache().getValueDataConversion().getStorageMediaType().equals(MediaType.APPLICATION_UNKNOWN)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3ODM0NA=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2NTIzMA==", "bodyText": "I meant e.g. org.infinispan.query.impl.LifecycleManager#getDefaultLuceneCacheConfig uses MediaType.APPLICATION_OBJECT_TYPE, shouldn't you say that the cache is custom if the media type is != APPLICATION_OBJECT_TYPE?\nIn practice the result may be the same, but the comment isn't very clear to me.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404565230", "createdAt": "2020-04-07T06:30:12Z", "author": {"login": "danberindei"}, "path": "lucene/lucene-directory/src/main/java/org/infinispan/lucene/directory/DirectoryBuilder.java", "diffHunk": "@@ -42,8 +43,12 @@ public static BuildContext newDirectoryInstance(Cache<?, ?> metadataCache, Cache\n     * Search\n     */\n    private static Cache<?, ?> decorateCache(Cache<?, ?> cache) {\n-      if (cache == null) return null;\n-      return cache.getAdvancedCache().withStorageMediaType();\n+      if(cache == null) return null;\n+      if(cache.getAdvancedCache().getValueDataConversion().getStorageMediaType().equals(MediaType.APPLICATION_UNKNOWN)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3ODM0NA=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MjUyMg==", "bodyText": "if I disable transcoding when mediaType != APPLICATION_OBJECT_TYPE it will break Lucene caches that are configured with OFF_HEAP/BINARY.\nBut Lucene caches are literally hours ahead of being removed from master, so I will not try changing this :)", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404852522", "createdAt": "2020-04-07T14:27:20Z", "author": {"login": "gustavonalle"}, "path": "lucene/lucene-directory/src/main/java/org/infinispan/lucene/directory/DirectoryBuilder.java", "diffHunk": "@@ -42,8 +43,12 @@ public static BuildContext newDirectoryInstance(Cache<?, ?> metadataCache, Cache\n     * Search\n     */\n    private static Cache<?, ?> decorateCache(Cache<?, ?> cache) {\n-      if (cache == null) return null;\n-      return cache.getAdvancedCache().withStorageMediaType();\n+      if(cache == null) return null;\n+      if(cache.getAdvancedCache().getValueDataConversion().getStorageMediaType().equals(MediaType.APPLICATION_UNKNOWN)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3ODM0NA=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3MzQ4NA==", "bodyText": "Ok :)", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r405273484", "createdAt": "2020-04-08T05:53:11Z", "author": {"login": "danberindei"}, "path": "lucene/lucene-directory/src/main/java/org/infinispan/lucene/directory/DirectoryBuilder.java", "diffHunk": "@@ -42,8 +43,12 @@ public static BuildContext newDirectoryInstance(Cache<?, ?> metadataCache, Cache\n     * Search\n     */\n    private static Cache<?, ?> decorateCache(Cache<?, ?> cache) {\n-      if (cache == null) return null;\n-      return cache.getAdvancedCache().withStorageMediaType();\n+      if(cache == null) return null;\n+      if(cache.getAdvancedCache().getValueDataConversion().getStorageMediaType().equals(MediaType.APPLICATION_UNKNOWN)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3ODM0NA=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODc2NzkwOnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTozMjozOVrOGAN1Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNzo1Mzo0NVrOGAzhWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3OTc3MA==", "bodyText": "Missing whitespace (also on line 401)\nAlso, the javadoc of Wrapper.isFilterable() says true if the wrapped format is suitable to be indexed or filtered, thus avoiding extra unwrapping, but here you're doing the unwrapping in the true case. Maybe the javadoc is referring to something else?", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r402879770", "createdAt": "2020-04-03T09:32:39Z", "author": {"login": "danberindei"}, "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "diffHunk": "@@ -398,15 +394,19 @@ private void performSearchWork(Work work, TransactionContext transactionContext)\n    }\n \n    private Object extractValue(Object storedValue) {\n-      return valueDataConversion.extractIndexable(storedValue);\n+      return this.cache.getValueDataConversion().extractIndexable(storedValue);\n    }\n \n    private Object extractKey(Object storedKey) {\n-      return keyDataConversion.extractIndexable(storedKey);\n+      if(storedKey == null) return null;\n+      DataConversion valueDataConversion = cache.getValueDataConversion();\n+      boolean protoWrapper = valueDataConversion.getWrapper().isFilterable();\n+      if(protoWrapper) return cache.getKeyDataConversion().getWrapper().unwrap(storedKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5NzMwNQ==", "bodyText": "I am not unwrapping the value (that is filterable), but the key in this method. Let me see if I can simplify this, I agree it's convoluted", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r403497305", "createdAt": "2020-04-04T17:53:45Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "diffHunk": "@@ -398,15 +394,19 @@ private void performSearchWork(Work work, TransactionContext transactionContext)\n    }\n \n    private Object extractValue(Object storedValue) {\n-      return valueDataConversion.extractIndexable(storedValue);\n+      return this.cache.getValueDataConversion().extractIndexable(storedValue);\n    }\n \n    private Object extractKey(Object storedKey) {\n-      return keyDataConversion.extractIndexable(storedKey);\n+      if(storedKey == null) return null;\n+      DataConversion valueDataConversion = cache.getValueDataConversion();\n+      boolean protoWrapper = valueDataConversion.getWrapper().isFilterable();\n+      if(protoWrapper) return cache.getKeyDataConversion().getWrapper().unwrap(storedKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3OTc3MA=="}, "originalCommit": {"oid": "12c2c9fa53d4cb7283abd3e6e024b528b01b3734"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDc0NTU4OnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/CQLazyFetcher.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzo1OToxMVrOGB3iaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowNDoyNVrOGCuPMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMTY4OQ==", "bodyText": "Here too, if the cache injected in components has request media type == storage media type, then the conversion isn't necessary.\nEdit: You would still have to convert the value to the request media type, but I would rather make that conversion explicit here instead of converting the key back and forth.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404611689", "createdAt": "2020-04-07T07:59:11Z", "author": {"login": "danberindei"}, "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/CQLazyFetcher.java", "diffHunk": "@@ -31,7 +31,7 @@ Object extractValue(DocumentExtractor extractor, int docIndex) {\n       }\n       if (projection == null) {\n          Object key = extractKey(extractor, docIndex);\n-         return cache.get(key);\n+         return cache.get(fromStorage(key));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2811525c3f1eb2b39749b5f69fc8ab3a2d5a30f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1OTE5OQ==", "bodyText": "This cache has the default request type, but the QueryInterceptor now indexes keys in the storage format. I did that change because it was always indexing the key in the request format, which is inefficient, since the QueryInterceptor was already receiving the key in the storage format (and was converting back again).", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r404859199", "createdAt": "2020-04-07T14:36:09Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/CQLazyFetcher.java", "diffHunk": "@@ -31,7 +31,7 @@ Object extractValue(DocumentExtractor extractor, int docIndex) {\n       }\n       if (projection == null) {\n          Object key = extractKey(extractor, docIndex);\n-         return cache.get(key);\n+         return cache.get(fromStorage(key));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMTY4OQ=="}, "originalCommit": {"oid": "a2811525c3f1eb2b39749b5f69fc8ab3a2d5a30f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4MTg1NA==", "bodyText": "I agree 100% that QueryInterceptor should index the key in the storage format.\nMy assertion was that the Cache instance should not have the default request type, in fact it should not be an EncoderCache instance at all.", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r405281854", "createdAt": "2020-04-08T06:16:13Z", "author": {"login": "danberindei"}, "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/CQLazyFetcher.java", "diffHunk": "@@ -31,7 +31,7 @@ Object extractValue(DocumentExtractor extractor, int docIndex) {\n       }\n       if (projection == null) {\n          Object key = extractKey(extractor, docIndex);\n-         return cache.get(key);\n+         return cache.get(fromStorage(key));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMTY4OQ=="}, "originalCommit": {"oid": "a2811525c3f1eb2b39749b5f69fc8ab3a2d5a30f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwMDMxOA==", "bodyText": "let me see if I can make a non-encoded cache arrive to this command, can't make any promises  :)", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r405400318", "createdAt": "2020-04-08T09:50:27Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/CQLazyFetcher.java", "diffHunk": "@@ -31,7 +31,7 @@ Object extractValue(DocumentExtractor extractor, int docIndex) {\n       }\n       if (projection == null) {\n          Object key = extractKey(extractor, docIndex);\n-         return cache.get(key);\n+         return cache.get(fromStorage(key));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMTY4OQ=="}, "originalCommit": {"oid": "a2811525c3f1eb2b39749b5f69fc8ab3a2d5a30f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNzg4OQ==", "bodyText": "ok, I changed it", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r405507889", "createdAt": "2020-04-08T13:04:25Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/CQLazyFetcher.java", "diffHunk": "@@ -31,7 +31,7 @@ Object extractValue(DocumentExtractor extractor, int docIndex) {\n       }\n       if (projection == null) {\n          Object key = extractKey(extractor, docIndex);\n-         return cache.get(key);\n+         return cache.get(fromStorage(key));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMTY4OQ=="}, "originalCommit": {"oid": "a2811525c3f1eb2b39749b5f69fc8ab3a2d5a30f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTgwODQwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/dataconversion/ProtostreamTranscoderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODozMDozOFrOGDO2jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo1NzowMVrOGDPyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MjI1NQ==", "bodyText": "Can you make use of one of the POJOs in TestDataSCI, say Key or Person. That way we don't need yet another test class and SerializationContextInitializer implementation.\nWhen I originally made ProtoStream the default I managed to remove a lot of duplicated code from the testsuite by removing internal test classes like these. So it would be great if we could stick to the already provided ones. This is a trivial Pojo, so it should work correctly unlike CountMarshallingPojo \ud83d\ude05", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r406042255", "createdAt": "2020-04-09T08:30:38Z", "author": {"login": "ryanemerson"}, "path": "core/src/test/java/org/infinispan/dataconversion/ProtostreamTranscoderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.infinispan.dataconversion;\n+\n+\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_OBJECT;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_PROTOSTREAM;\n+import static org.infinispan.commons.dataconversion.MediaType.TEXT_PLAIN;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.io.IOException;\n+\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.marshall.MarshallingException;\n+import org.infinispan.encoding.ProtostreamTranscoder;\n+import org.infinispan.marshall.protostream.impl.SerializationContextRegistry;\n+import org.infinispan.protostream.ProtobufUtil;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.SerializationContextInitializer;\n+import org.infinispan.protostream.annotations.AutoProtoSchemaBuilder;\n+import org.infinispan.protostream.annotations.ProtoFactory;\n+import org.infinispan.protostream.annotations.ProtoField;\n+import org.infinispan.test.dataconversion.AbstractTranscoderTest;\n+import org.mockito.Mockito;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+@Test(groups = \"functional\", testName = \"query.remote.impl.ProtostreamTranscoderTest\")\n+public class ProtostreamTranscoderTest extends AbstractTranscoderTest {\n+\n+   protected String dataSrc;\n+   private SerializationContext ctx = createCtx();\n+\n+   static final MediaType UNWRAPPED_PROTOSTREAM = APPLICATION_PROTOSTREAM.withParameter(\"wrapped\", \"false\");\n+   static final MediaType TYPED_OBJECT = APPLICATION_OBJECT.withParameter(\"type\", UserObject.class.getName());\n+\n+\n+   @BeforeClass(alwaysRun = true)\n+   public void setUp() {\n+      dataSrc = \" !\\\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n+      SerializationContextRegistry registry = Mockito.mock(SerializationContextRegistry.class);\n+      Mockito.when(registry.getGlobalCtx()).thenReturn(ctx);\n+      transcoder = new ProtostreamTranscoder(registry, ProtostreamTranscoderTest.class.getClassLoader());\n+      supportedMediaTypes = transcoder.getSupportedMediaTypes();\n+   }\n+\n+   private SerializationContext createCtx() {\n+      SerializationContext ctx = ProtobufUtil.newSerializationContext();\n+      TestContextInitializer.INSTANCE.registerSchema(ctx);\n+      TestContextInitializer.INSTANCE.registerMarshallers(ctx);\n+      return ctx;\n+   }\n+\n+\n+   @Test\n+   @Override\n+   public void testTranscoderTranscode() throws Exception {\n+      Object transcoded = transcoder.transcode(dataSrc, TEXT_PLAIN, APPLICATION_PROTOSTREAM);\n+      assertTrue(transcoded instanceof byte[], \"Must be byte[]\");\n+\n+      Object transcodedBack = transcoder.transcode(transcoded, APPLICATION_PROTOSTREAM, TEXT_PLAIN);\n+\n+      // Must be String as byte[] as sent over the wire by hotrod\n+      assertTrue(transcodedBack instanceof byte[], \"Must be instance of byte[]\");\n+      assertEquals(dataSrc, new String((byte[]) transcodedBack, TEXT_PLAIN.getCharset().name()), \"Must be equal strings\");\n+   }\n+\n+   @Test\n+   public void testWrappedMessage() throws IOException {\n+      UserObject input = new UserObject(\"value\");\n+\n+      // Produces MessageWrapped and unwrapped payloads\n+      byte[] wrapped = (byte[]) transcoder.transcode(input, APPLICATION_OBJECT, APPLICATION_PROTOSTREAM);\n+      byte[] unwrapped = (byte[]) transcoder.transcode(input, APPLICATION_OBJECT, UNWRAPPED_PROTOSTREAM);\n+\n+      assertEquals(input, ProtobufUtil.fromWrappedByteArray(ctx, wrapped));\n+      assertEquals(input, ProtobufUtil.fromByteArray(ctx, unwrapped, UserObject.class));\n+\n+      // Convert from MessageWrapped back to object\n+      Object fromWrapped = transcoder.transcode(wrapped, APPLICATION_PROTOSTREAM, APPLICATION_OBJECT);\n+      assertEquals(input, fromWrapped);\n+\n+      // Convert from unwrapped payload back to object, specifying the object type\n+      Object fromUnWrappedWithType = transcoder.transcode(unwrapped, UNWRAPPED_PROTOSTREAM, TYPED_OBJECT);\n+      assertEquals(input, fromUnWrappedWithType);\n+\n+      // Should throw exception if trying to convert from unwrapped without passing the type\n+      try {\n+         transcoder.transcode(unwrapped, UNWRAPPED_PROTOSTREAM, APPLICATION_OBJECT);\n+         Assert.fail(\"should not convert from unwrapped without type\");\n+      } catch (MarshallingException ignored) {\n+      }\n+   }\n+\n+   @AutoProtoSchemaBuilder(\n+         includeClasses = {UserObject.class},\n+         schemaFileName = \"dataconversion.commons.proto\",\n+         schemaFilePath = \"proto/generated\",\n+         schemaPackageName = \"org.infinispan.dataconversion\")\n+   interface TestContextInitializer extends SerializationContextInitializer {\n+      TestContextInitializer INSTANCE = new TestContextInitializerImpl();\n+   }\n+\n+   static class UserObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15c662a69c03e260563a1ee75c05bb7d0aef245e"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1NzUyMw==", "bodyText": "Done", "url": "https://github.com/infinispan/infinispan/pull/8129#discussion_r406057523", "createdAt": "2020-04-09T08:57:01Z", "author": {"login": "gustavonalle"}, "path": "core/src/test/java/org/infinispan/dataconversion/ProtostreamTranscoderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.infinispan.dataconversion;\n+\n+\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_OBJECT;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_PROTOSTREAM;\n+import static org.infinispan.commons.dataconversion.MediaType.TEXT_PLAIN;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.io.IOException;\n+\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.marshall.MarshallingException;\n+import org.infinispan.encoding.ProtostreamTranscoder;\n+import org.infinispan.marshall.protostream.impl.SerializationContextRegistry;\n+import org.infinispan.protostream.ProtobufUtil;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.SerializationContextInitializer;\n+import org.infinispan.protostream.annotations.AutoProtoSchemaBuilder;\n+import org.infinispan.protostream.annotations.ProtoFactory;\n+import org.infinispan.protostream.annotations.ProtoField;\n+import org.infinispan.test.dataconversion.AbstractTranscoderTest;\n+import org.mockito.Mockito;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+@Test(groups = \"functional\", testName = \"query.remote.impl.ProtostreamTranscoderTest\")\n+public class ProtostreamTranscoderTest extends AbstractTranscoderTest {\n+\n+   protected String dataSrc;\n+   private SerializationContext ctx = createCtx();\n+\n+   static final MediaType UNWRAPPED_PROTOSTREAM = APPLICATION_PROTOSTREAM.withParameter(\"wrapped\", \"false\");\n+   static final MediaType TYPED_OBJECT = APPLICATION_OBJECT.withParameter(\"type\", UserObject.class.getName());\n+\n+\n+   @BeforeClass(alwaysRun = true)\n+   public void setUp() {\n+      dataSrc = \" !\\\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n+      SerializationContextRegistry registry = Mockito.mock(SerializationContextRegistry.class);\n+      Mockito.when(registry.getGlobalCtx()).thenReturn(ctx);\n+      transcoder = new ProtostreamTranscoder(registry, ProtostreamTranscoderTest.class.getClassLoader());\n+      supportedMediaTypes = transcoder.getSupportedMediaTypes();\n+   }\n+\n+   private SerializationContext createCtx() {\n+      SerializationContext ctx = ProtobufUtil.newSerializationContext();\n+      TestContextInitializer.INSTANCE.registerSchema(ctx);\n+      TestContextInitializer.INSTANCE.registerMarshallers(ctx);\n+      return ctx;\n+   }\n+\n+\n+   @Test\n+   @Override\n+   public void testTranscoderTranscode() throws Exception {\n+      Object transcoded = transcoder.transcode(dataSrc, TEXT_PLAIN, APPLICATION_PROTOSTREAM);\n+      assertTrue(transcoded instanceof byte[], \"Must be byte[]\");\n+\n+      Object transcodedBack = transcoder.transcode(transcoded, APPLICATION_PROTOSTREAM, TEXT_PLAIN);\n+\n+      // Must be String as byte[] as sent over the wire by hotrod\n+      assertTrue(transcodedBack instanceof byte[], \"Must be instance of byte[]\");\n+      assertEquals(dataSrc, new String((byte[]) transcodedBack, TEXT_PLAIN.getCharset().name()), \"Must be equal strings\");\n+   }\n+\n+   @Test\n+   public void testWrappedMessage() throws IOException {\n+      UserObject input = new UserObject(\"value\");\n+\n+      // Produces MessageWrapped and unwrapped payloads\n+      byte[] wrapped = (byte[]) transcoder.transcode(input, APPLICATION_OBJECT, APPLICATION_PROTOSTREAM);\n+      byte[] unwrapped = (byte[]) transcoder.transcode(input, APPLICATION_OBJECT, UNWRAPPED_PROTOSTREAM);\n+\n+      assertEquals(input, ProtobufUtil.fromWrappedByteArray(ctx, wrapped));\n+      assertEquals(input, ProtobufUtil.fromByteArray(ctx, unwrapped, UserObject.class));\n+\n+      // Convert from MessageWrapped back to object\n+      Object fromWrapped = transcoder.transcode(wrapped, APPLICATION_PROTOSTREAM, APPLICATION_OBJECT);\n+      assertEquals(input, fromWrapped);\n+\n+      // Convert from unwrapped payload back to object, specifying the object type\n+      Object fromUnWrappedWithType = transcoder.transcode(unwrapped, UNWRAPPED_PROTOSTREAM, TYPED_OBJECT);\n+      assertEquals(input, fromUnWrappedWithType);\n+\n+      // Should throw exception if trying to convert from unwrapped without passing the type\n+      try {\n+         transcoder.transcode(unwrapped, UNWRAPPED_PROTOSTREAM, APPLICATION_OBJECT);\n+         Assert.fail(\"should not convert from unwrapped without type\");\n+      } catch (MarshallingException ignored) {\n+      }\n+   }\n+\n+   @AutoProtoSchemaBuilder(\n+         includeClasses = {UserObject.class},\n+         schemaFileName = \"dataconversion.commons.proto\",\n+         schemaFilePath = \"proto/generated\",\n+         schemaPackageName = \"org.infinispan.dataconversion\")\n+   interface TestContextInitializer extends SerializationContextInitializer {\n+      TestContextInitializer INSTANCE = new TestContextInitializerImpl();\n+   }\n+\n+   static class UserObject {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MjI1NQ=="}, "originalCommit": {"oid": "15c662a69c03e260563a1ee75c05bb7d0aef245e"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4380, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}