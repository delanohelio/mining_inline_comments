{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0OTg1MTYx", "number": 7886, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODoyNDowNFrODfpqoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTozMzowMFrODf0_Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTE1MTA0OnYy", "diffSide": "RIGHT", "path": "cli/cli-interpreter/src/main/java/org/infinispan/cli/interpreter/session/SessionImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODoyNDowNFrOFpepSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzozMzoyMFrOFpnMHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzODAyNw==", "bodyText": "offtopic, this looks like a very old code.\nThe method's code could be replaced with a single line: cacheManager.administration().createCache(cacheName, baseCacheName);", "url": "https://github.com/infinispan/infinispan/pull/7886#discussion_r379038027", "createdAt": "2020-02-13T18:24:04Z", "author": {"login": "pruivo"}, "path": "cli/cli-interpreter/src/main/java/org/infinispan/cli/interpreter/session/SessionImpl.java", "diffHunk": "@@ -117,7 +118,7 @@ public void createCache(String cacheName, String baseCacheName) {\n \n          CreateCacheCommand ccc = factory.buildCreateCacheCommand(cacheName, baseCacheName);\n          try {\n-            rpc.invokeRemotely(null, ccc, rpc.getSyncRpcOptions());\n+            rpc.blocking(rpc.invokeCommandOnAll(ccc, VoidResponseCollector.ignoreLeavers(), rpc.getSyncRpcOptions()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6ce6408bd53583bd30ebdf9c1088fd616d346b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3ODAxMw==", "bodyText": "Good point! This is the legacy code for the wfly server integration, so I'm not sure what the plan is in terms of refactoring and maintenance. @tristantarrant when are we killing these modules?", "url": "https://github.com/infinispan/infinispan/pull/7886#discussion_r379178013", "createdAt": "2020-02-13T23:33:20Z", "author": {"login": "ryanemerson"}, "path": "cli/cli-interpreter/src/main/java/org/infinispan/cli/interpreter/session/SessionImpl.java", "diffHunk": "@@ -117,7 +118,7 @@ public void createCache(String cacheName, String baseCacheName) {\n \n          CreateCacheCommand ccc = factory.buildCreateCacheCommand(cacheName, baseCacheName);\n          try {\n-            rpc.invokeRemotely(null, ccc, rpc.getSyncRpcOptions());\n+            rpc.blocking(rpc.invokeCommandOnAll(ccc, VoidResponseCollector.ignoreLeavers(), rpc.getSyncRpcOptions()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzODAyNw=="}, "originalCommit": {"oid": "bf6ce6408bd53583bd30ebdf9c1088fd616d346b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTE2MjIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/cluster/ClusterLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODoyNzoyMlrOFpewHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODoyNzoyMlrOFpewHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzOTc3Mw==", "bodyText": "use rpcManager.blocking() instead?", "url": "https://github.com/infinispan/infinispan/pull/7886#discussion_r379039773", "createdAt": "2020-02-13T18:27:22Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/persistence/cluster/ClusterLoader.java", "diffHunk": "@@ -71,7 +70,16 @@ public MarshallableEntry loadEntry(Object key) throws PersistenceException {\n       ClusteredGetCommand clusteredGetCommand = commandsFactory.buildClusteredGetCommand(key,\n             keyPartitioner.getSegment(key), EnumUtil.bitSetOf(Flag.SKIP_OWNERSHIP_CHECK));\n \n-      Collection<Response> responses = doRemoteCall(clusteredGetCommand);\n+      Collection<Response> responses;\n+      try {\n+         clusteredGetCommand.setTopologyId(rpcManager.getTopologyId());\n+         CompletionStage<Map<Address, Response>> getAll = rpcManager.invokeCommandOnAll(clusteredGetCommand,\n+               MapResponseCollector.ignoreLeavers(), rpcManager.getSyncRpcOptions());\n+         responses = CompletionStages.join(getAll).values();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6ce6408bd53583bd30ebdf9c1088fd616d346b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTE4NTQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/remoting/rpc/RpcManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODozNDoyMVrOFpe-4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODozNDoyMVrOFpe-4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0MzU1Mg==", "bodyText": "SYNC is correct otherwise you would get an empty Map everytime.", "url": "https://github.com/infinispan/infinispan/pull/7886#discussion_r379043552", "createdAt": "2020-02-13T18:34:21Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/remoting/rpc/RpcManagerImpl.java", "diffHunk": "@@ -303,10 +300,11 @@ private void checkTopologyId(ReplicableCommand command) {\n       long startTimeNanos = statisticsEnabled ? timeService.time() : 0;\n       CompletableFuture<Map<Address, Response>> invocation;\n       try {\n+         // TODO what's the correct ResponseMode?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6ce6408bd53583bd30ebdf9c1088fd616d346b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTE5MDI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/remoting/rpc/RpcOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODozNjowMFrOFpfCMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODozNjowMFrOFpfCMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0NDQwMA==", "bodyText": "nitpick: replace if with &&\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return unit == options.unit;\n          \n          \n            \n                  return timeout == options.timeout && \n          \n          \n            \n                         deliverOrder == options.deliverOrder && \n          \n          \n            \n                         unit == options.unit;", "url": "https://github.com/infinispan/infinispan/pull/7886#discussion_r379044400", "createdAt": "2020-02-13T18:36:00Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/remoting/rpc/RpcOptions.java", "diffHunk": "@@ -111,21 +60,14 @@ public boolean equals(Object o) {\n \n       if (timeout != options.timeout) return false;\n       if (deliverOrder != options.deliverOrder) return false;\n-      if (responseFilter != null ? !responseFilter.equals(options.responseFilter) : options.responseFilter != null)\n-         return false;\n-      if (responseMode != options.responseMode) return false;\n-      if (unit != options.unit) return false;\n-\n-      return true;\n+      return unit == options.unit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6ce6408bd53583bd30ebdf9c1088fd616d346b"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTIyMDgzOnYy", "diffSide": "RIGHT", "path": "hibernate/cache-commons/src/main/java/org/infinispan/hibernate/cache/commons/util/Caches.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODo0NTo0MVrOFpfWGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjo1MDowMlrOFpmTqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0OTQ5Nw==", "bodyText": "suggestion: create RpcManager.getSyncOrderedRpcOptions(); if this method is invoked too often.", "url": "https://github.com/infinispan/infinispan/pull/7886#discussion_r379049497", "createdAt": "2020-02-13T18:45:41Z", "author": {"login": "pruivo"}, "path": "hibernate/cache-commons/src/main/java/org/infinispan/hibernate/cache/commons/util/Caches.java", "diffHunk": "@@ -225,8 +229,10 @@ public static void broadcastEvictAll(AdvancedCache cache) {\n \t\tfinal RpcManager rpcManager = cache.getRpcManager();\n \t\tif ( rpcManager != null ) {\n \t\t\tfinal EvictAllCommand cmd = new EvictAllCommand(ByteString.fromString(cache.getName()));\n-\t\t\tfinal RpcOptions options = rpcManager.getDefaultRpcOptions(isSynchronousCache(cache));\n-\t\t\trpcManager.invokeRemotely(null, cmd, options);\n+\t\t\tfinal RpcOptions options = isSynchronousCache(cache) ? rpcManager.getSyncRpcOptions() :\n+\t\t\t\t\tnew RpcOptions(DeliverOrder.PER_SENDER, cache.getCacheConfiguration().clustering().remoteTimeout(), TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6ce6408bd53583bd30ebdf9c1088fd616d346b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2MzU2MQ==", "bodyText": "I think we should do that if the number of uses increased. At the moment, it's only used twice throughout the codebase AFAICT.", "url": "https://github.com/infinispan/infinispan/pull/7886#discussion_r379163561", "createdAt": "2020-02-13T22:50:02Z", "author": {"login": "ryanemerson"}, "path": "hibernate/cache-commons/src/main/java/org/infinispan/hibernate/cache/commons/util/Caches.java", "diffHunk": "@@ -225,8 +229,10 @@ public static void broadcastEvictAll(AdvancedCache cache) {\n \t\tfinal RpcManager rpcManager = cache.getRpcManager();\n \t\tif ( rpcManager != null ) {\n \t\t\tfinal EvictAllCommand cmd = new EvictAllCommand(ByteString.fromString(cache.getName()));\n-\t\t\tfinal RpcOptions options = rpcManager.getDefaultRpcOptions(isSynchronousCache(cache));\n-\t\t\trpcManager.invokeRemotely(null, cmd, options);\n+\t\t\tfinal RpcOptions options = isSynchronousCache(cache) ? rpcManager.getSyncRpcOptions() :\n+\t\t\t\t\tnew RpcOptions(DeliverOrder.PER_SENDER, cache.getCacheConfiguration().clustering().remoteTimeout(), TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0OTQ5Nw=="}, "originalCommit": {"oid": "bf6ce6408bd53583bd30ebdf9c1088fd616d346b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTIzMTA0OnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryInvoker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODo0ODo0M1rOFpfccw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzo0NDo0OFrOFp29fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1MTEyMw==", "bodyText": "nitpick: no idea why this line has the timeout hardcoded...\ncan it be removed and use rpcManager.getSyncRpcOptions() below?", "url": "https://github.com/infinispan/infinispan/pull/7886#discussion_r379051123", "createdAt": "2020-02-13T18:48:43Z", "author": {"login": "pruivo"}, "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryInvoker.java", "diffHunk": "@@ -46,7 +47,7 @@\n       this.asyncExecutor = asyncExecutor;\n       this.rpcManager = cache.getRpcManager();\n       this.myAddress = rpcManager.getAddress();\n-      this.rpcOptions = rpcManager.getRpcOptionsBuilder(ResponseMode.SYNCHRONOUS).timeout(10000, TimeUnit.MILLISECONDS).build();\n+      this.rpcOptions = new RpcOptions(DeliverOrder.NONE, 10000, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6ce6408bd53583bd30ebdf9c1088fd616d346b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1ODM5OQ==", "bodyText": "Hmm I'm not sure either. @gustavonalle Any idea if this would have a detrimental effect?", "url": "https://github.com/infinispan/infinispan/pull/7886#discussion_r379158399", "createdAt": "2020-02-13T22:36:25Z", "author": {"login": "ryanemerson"}, "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryInvoker.java", "diffHunk": "@@ -46,7 +47,7 @@\n       this.asyncExecutor = asyncExecutor;\n       this.rpcManager = cache.getRpcManager();\n       this.myAddress = rpcManager.getAddress();\n-      this.rpcOptions = rpcManager.getRpcOptionsBuilder(ResponseMode.SYNCHRONOUS).timeout(10000, TimeUnit.MILLISECONDS).build();\n+      this.rpcOptions = new RpcOptions(DeliverOrder.NONE, 10000, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1MTEyMw=="}, "originalCommit": {"oid": "bf6ce6408bd53583bd30ebdf9c1088fd616d346b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzNjQxNA==", "bodyText": "This will be configurable soon, don't worry about it", "url": "https://github.com/infinispan/infinispan/pull/7886#discussion_r379436414", "createdAt": "2020-02-14T13:44:48Z", "author": {"login": "gustavonalle"}, "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryInvoker.java", "diffHunk": "@@ -46,7 +47,7 @@\n       this.asyncExecutor = asyncExecutor;\n       this.rpcManager = cache.getRpcManager();\n       this.myAddress = rpcManager.getAddress();\n-      this.rpcOptions = rpcManager.getRpcOptionsBuilder(ResponseMode.SYNCHRONOUS).timeout(10000, TimeUnit.MILLISECONDS).build();\n+      this.rpcOptions = new RpcOptions(DeliverOrder.NONE, 10000, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1MTEyMw=="}, "originalCommit": {"oid": "bf6ce6408bd53583bd30ebdf9c1088fd616d346b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTIzOTQwOnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/indexmanager/RemoteIndexingBackend.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODo1MToxNVrOFpfhmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODo1MToxNVrOFpfhmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1MjQ0Mw==", "bodyText": "you are ignoring the sync parameter.\nThe recipients can be replaced with a single Address (it doesn't change since it is assigned in the constructor)", "url": "https://github.com/infinispan/infinispan/pull/7886#discussion_r379052443", "createdAt": "2020-02-13T18:51:15Z", "author": {"login": "pruivo"}, "path": "query/src/main/java/org/infinispan/query/indexmanager/RemoteIndexingBackend.java", "diffHunk": "@@ -132,7 +134,8 @@ private void waitForReplacementBackend() {\n    }\n \n    private void sendCommand(ReplicableCommand command, List<LuceneWork> workList, boolean sync) {\n-      rpcManager.invokeRemotely(recipients, command, rpcManager.getDefaultRpcOptions(sync));\n+      CompletionStages.join(rpcManager.invokeCommand(recipients, command, VoidResponseCollector.ignoreLeavers(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6ce6408bd53583bd30ebdf9c1088fd616d346b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Njk5OTk3OnYy", "diffSide": "RIGHT", "path": "hibernate/cache-commons/src/main/java/org/infinispan/hibernate/cache/commons/util/Caches.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTozMTowOFrOFpwZXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTozMTowOFrOFpwZXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMyODg2MQ==", "bodyText": "How I did I miss this before!?\nyou shouldn't do that. invokeCommandOnAll() as it is always sync, i.e. it waits for a response.\nyou need to use sendToAll() for async.", "url": "https://github.com/infinispan/infinispan/pull/7886#discussion_r379328861", "createdAt": "2020-02-14T09:31:08Z", "author": {"login": "pruivo"}, "path": "hibernate/cache-commons/src/main/java/org/infinispan/hibernate/cache/commons/util/Caches.java", "diffHunk": "@@ -223,10 +226,18 @@ public static AdvancedCache failSilentReadCache(AdvancedCache cache) {\n \t */\n \tpublic static void broadcastEvictAll(AdvancedCache cache) {\n \t\tfinal RpcManager rpcManager = cache.getRpcManager();\n-\t\tif ( rpcManager != null ) {\n+\t\tif (rpcManager != null) {\n \t\t\tfinal EvictAllCommand cmd = new EvictAllCommand(ByteString.fromString(cache.getName()));\n-\t\t\tfinal RpcOptions options = rpcManager.getDefaultRpcOptions(isSynchronousCache(cache));\n-\t\t\trpcManager.invokeRemotely(null, cmd, options);\n+\n+\t\t\tfinal RpcOptions options;\n+\t\t\tif (isSynchronousCache(cache)) {\n+\t\t\t\toptions = rpcManager.getSyncRpcOptions();\n+\t\t\t} else {\n+\t\t\t\tlong timeout = cache.getCacheConfiguration().clustering().remoteTimeout();\n+\t\t\t\toptions = new RpcOptions(DeliverOrder.PER_SENDER, timeout, TimeUnit.MILLISECONDS);\n+\t\t\t}\n+\n+\t\t\trpcManager.blocking(rpcManager.invokeCommandOnAll(cmd, VoidResponseCollector.validOnly(), options));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0b4e962ce25e38578515bd5498ab4d106098ab"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzAwMjYzOnYy", "diffSide": "RIGHT", "path": "query/src/main/java/org/infinispan/query/indexmanager/RemoteIndexingBackend.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTozMTo1NVrOFpwa4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTozMTo1NVrOFpwa4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMyOTI1MA==", "bodyText": "DeliverOrder.PER_SENDER!\nrpcManager.getDefaultRpcOptions(sync) with sync=false uses PER_SENDER instead of NONE.", "url": "https://github.com/infinispan/infinispan/pull/7886#discussion_r379329250", "createdAt": "2020-02-14T09:31:55Z", "author": {"login": "pruivo"}, "path": "query/src/main/java/org/infinispan/query/indexmanager/RemoteIndexingBackend.java", "diffHunk": "@@ -132,7 +134,13 @@ private void waitForReplacementBackend() {\n    }\n \n    private void sendCommand(ReplicableCommand command, List<LuceneWork> workList, boolean sync) {\n-      rpcManager.invokeRemotely(recipients, command, rpcManager.getDefaultRpcOptions(sync));\n+      if (sync) {\n+         CompletionStage<Void> completionStage = rpcManager.invokeCommand(recipient, command, VoidResponseCollector.ignoreLeavers(),\n+               rpcManager.getSyncRpcOptions());\n+         rpcManager.blocking(completionStage);\n+      } else {\n+         rpcManager.sendTo(recipient, command, DeliverOrder.NONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0b4e962ce25e38578515bd5498ab4d106098ab"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzAwNTY3OnYy", "diffSide": "RIGHT", "path": "query/src/test/java/org/infinispan/query/backend/AsyncBackendTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTozMzowMFrOFpwcyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTozMzowMFrOFpwcyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMyOTczOA==", "bodyText": "DeliverOrder.PER_SENDER", "url": "https://github.com/infinispan/infinispan/pull/7886#discussion_r379329738", "createdAt": "2020-02-14T09:33:00Z", "author": {"login": "pruivo"}, "path": "query/src/test/java/org/infinispan/query/backend/AsyncBackendTest.java", "diffHunk": "@@ -122,9 +122,12 @@ private void calledIndexAsynchronously(Transport transport, String indexName) th\n \n    private void assertIndexCall(Transport transport, String indexName, boolean sync) throws Exception {\n       ArgumentCaptor<IndexUpdateCommand> argument = ArgumentCaptor.forClass(IndexUpdateCommand.class);\n-      verify(transport, atLeastOnce()).invokeRemotelyAsync(anyCollection(), argument.capture(),\n-                                                           eq(sync ? ResponseMode.SYNCHRONOUS : ResponseMode.ASYNCHRONOUS),\n-                                                           anyLong(), any(), any(), anyBoolean());\n+      if (sync) {\n+         verify(transport, atLeastOnce()).invokeCommand(any(Address.class), argument.capture(), any(VoidResponseCollector.class),\n+               eq(DeliverOrder.NONE), anyLong(), any());\n+      } else {\n+         verify(transport, atLeastOnce()).sendTo(any(Address.class), argument.capture(), eq(DeliverOrder.NONE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0b4e962ce25e38578515bd5498ab4d106098ab"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4476, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}