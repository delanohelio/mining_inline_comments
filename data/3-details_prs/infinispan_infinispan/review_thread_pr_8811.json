{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjAxMTYx", "number": 8811, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo0NjowOVrOFOosag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo0OTo0NFrOFOoxhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODkxMTE0OnYy", "diffSide": "RIGHT", "path": "integrationtests/server-integration/server-integration-commons/src/test/java/org/infinispan/test/integration/util/ITestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo0NjowOVrOIThJNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo0NjowOVrOIThJNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMzNjg4Ng==", "bodyText": "Never used.", "url": "https://github.com/infinispan/infinispan/pull/8811#discussion_r557336886", "createdAt": "2021-01-14T11:46:09Z", "author": {"login": "ryanemerson"}, "path": "integrationtests/server-integration/server-integration-commons/src/test/java/org/infinispan/test/integration/util/ITestUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.infinispan.test.integration.util;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ITestUtils {\n+\n+   public static void sleepForSecs(long numSecs) {\n+      // give the elements time to be evicted\n+      try {\n+         Thread.sleep(numSecs * 1000);\n+      } catch (InterruptedException e) {\n+      }\n+   }\n+\n+   public static void eventually(Condition ec, long timeout) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49b3ea982cbd508490e3e338b6c673bd418bc04"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODkxMjA4OnYy", "diffSide": "RIGHT", "path": "integrationtests/server-integration/server-integration-commons/src/test/java/org/infinispan/test/integration/util/ITestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo0NjoyN1rOIThJyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo0NjoyN1rOIThJyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMzNzAzNQ==", "bodyText": "public is redundant.", "url": "https://github.com/infinispan/infinispan/pull/8811#discussion_r557337035", "createdAt": "2021-01-14T11:46:27Z", "author": {"login": "ryanemerson"}, "path": "integrationtests/server-integration/server-integration-commons/src/test/java/org/infinispan/test/integration/util/ITestUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.infinispan.test.integration.util;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ITestUtils {\n+\n+   public static void sleepForSecs(long numSecs) {\n+      // give the elements time to be evicted\n+      try {\n+         Thread.sleep(numSecs * 1000);\n+      } catch (InterruptedException e) {\n+      }\n+   }\n+\n+   public static void eventually(Condition ec, long timeout) {\n+      eventually(ec, timeout, 10);\n+   }\n+\n+   public static void eventually(Condition ec, long timeout, int loops) {\n+      if (loops <= 0) {\n+         throw new IllegalArgumentException(\"Number of loops must be positive\");\n+      }\n+      long sleepDuration = timeout / loops;\n+      if (sleepDuration == 0) {\n+         sleepDuration = 1;\n+      }\n+      try {\n+         for (int i = 0; i < loops; i++) {\n+\n+            if (ec.isSatisfied())\n+               return;\n+            Thread.sleep(sleepDuration);\n+         }\n+         assertTrue(ec.isSatisfied());\n+      } catch (Exception e) {\n+         throw new RuntimeException(\"Unexpected!\", e);\n+      }\n+   }\n+\n+   public interface Condition {\n+      public boolean isSatisfied() throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49b3ea982cbd508490e3e338b6c673bd418bc04"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODkyNDIzOnYy", "diffSide": "RIGHT", "path": "integrationtests/server-integration/third-party-server/src/test/java/org/infinispan/test/integration/thirdparty/remote/MemcachedClientIT.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo0OTo0NFrOIThRFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNDoyMDoyOFrOITmt4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMzODkwMA==", "bodyText": "Do we need the equivalent of this test for wildfly-modules?", "url": "https://github.com/infinispan/infinispan/pull/8811#discussion_r557338900", "createdAt": "2021-01-14T11:49:44Z", "author": {"login": "ryanemerson"}, "path": "integrationtests/server-integration/third-party-server/src/test/java/org/infinispan/test/integration/thirdparty/remote/MemcachedClientIT.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.infinispan.test.integration.thirdparty.remote;\n+\n+import static org.infinispan.test.integration.thirdparty.DeploymentHelper.addLibrary;\n+\n+import org.infinispan.test.integration.thirdparty.DeploymentHelper;\n+import org.infinispan.test.integration.remote.AbstractMemcacheClientIT;\n+import org.infinispan.test.integration.memcached.SimpleMemcachedClient;\n+import org.infinispan.test.integration.util.ITestUtils;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(Arquillian.class)\n+public class MemcachedClientIT extends AbstractMemcacheClientIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49b3ea982cbd508490e3e338b6c673bd418bc04"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM4MTE0MQ==", "bodyText": "We can add it together with the CDI Tests.", "url": "https://github.com/infinispan/infinispan/pull/8811#discussion_r557381141", "createdAt": "2021-01-14T13:07:08Z", "author": {"login": "diegolovison"}, "path": "integrationtests/server-integration/third-party-server/src/test/java/org/infinispan/test/integration/thirdparty/remote/MemcachedClientIT.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.infinispan.test.integration.thirdparty.remote;\n+\n+import static org.infinispan.test.integration.thirdparty.DeploymentHelper.addLibrary;\n+\n+import org.infinispan.test.integration.thirdparty.DeploymentHelper;\n+import org.infinispan.test.integration.remote.AbstractMemcacheClientIT;\n+import org.infinispan.test.integration.memcached.SimpleMemcachedClient;\n+import org.infinispan.test.integration.util.ITestUtils;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(Arquillian.class)\n+public class MemcachedClientIT extends AbstractMemcacheClientIT {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMzODkwMA=="}, "originalCommit": {"oid": "c49b3ea982cbd508490e3e338b6c673bd418bc04"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMTM2MQ==", "bodyText": "Ok np. Can you create a Jira for this, or add it the CDI test issue.", "url": "https://github.com/infinispan/infinispan/pull/8811#discussion_r557421361", "createdAt": "2021-01-14T14:10:35Z", "author": {"login": "ryanemerson"}, "path": "integrationtests/server-integration/third-party-server/src/test/java/org/infinispan/test/integration/thirdparty/remote/MemcachedClientIT.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.infinispan.test.integration.thirdparty.remote;\n+\n+import static org.infinispan.test.integration.thirdparty.DeploymentHelper.addLibrary;\n+\n+import org.infinispan.test.integration.thirdparty.DeploymentHelper;\n+import org.infinispan.test.integration.remote.AbstractMemcacheClientIT;\n+import org.infinispan.test.integration.memcached.SimpleMemcachedClient;\n+import org.infinispan.test.integration.util.ITestUtils;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(Arquillian.class)\n+public class MemcachedClientIT extends AbstractMemcacheClientIT {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMzODkwMA=="}, "originalCommit": {"oid": "c49b3ea982cbd508490e3e338b6c673bd418bc04"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyODE5NA==", "bodyText": "https://issues.redhat.com/browse/ISPN-12623\nhttps://issues.redhat.com/browse/ISPN-12624", "url": "https://github.com/infinispan/infinispan/pull/8811#discussion_r557428194", "createdAt": "2021-01-14T14:20:28Z", "author": {"login": "diegolovison"}, "path": "integrationtests/server-integration/third-party-server/src/test/java/org/infinispan/test/integration/thirdparty/remote/MemcachedClientIT.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.infinispan.test.integration.thirdparty.remote;\n+\n+import static org.infinispan.test.integration.thirdparty.DeploymentHelper.addLibrary;\n+\n+import org.infinispan.test.integration.thirdparty.DeploymentHelper;\n+import org.infinispan.test.integration.remote.AbstractMemcacheClientIT;\n+import org.infinispan.test.integration.memcached.SimpleMemcachedClient;\n+import org.infinispan.test.integration.util.ITestUtils;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(Arquillian.class)\n+public class MemcachedClientIT extends AbstractMemcacheClientIT {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMzODkwMA=="}, "originalCommit": {"oid": "c49b3ea982cbd508490e3e338b6c673bd418bc04"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3751, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}