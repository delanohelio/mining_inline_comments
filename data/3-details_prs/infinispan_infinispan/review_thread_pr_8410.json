{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MjMyNjYz", "number": 8410, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozMzoxOFrOEBvwhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozODo0M1rOEBv6Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjY2NTAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/util/logging/Log.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozMzoxOFrOGdxyqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoxMzoxMFrOGdzvJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NzY3Mw==", "bodyText": "I think this could be clearer. How about:\n\"Store %s cannot be configured to be transactional as it does not contain the TRANSACTIONAL characteristic\" ?", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433877673", "createdAt": "2020-06-02T13:33:18Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/util/logging/Log.java", "diffHunk": "@@ -2023,4 +2023,7 @@ CacheConfigurationException storeConfiguredHasBothReadAndWriteOnly(String storeC\n    @LogMessage(level = WARN)\n    @Message(value = \"ClusterLoader has been deprecated and will be removed in a future version with no direct replacement\", id = 595)\n    void warnUsingDeprecatedClusterLoader();\n+\n+   @Message(value = \"Store %s cannot be configured to be transactional as the implementation characteristic doesn't support it\", id = 596)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkwOTU0MA==", "bodyText": "Sure.", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433909540", "createdAt": "2020-06-02T14:13:10Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/util/logging/Log.java", "diffHunk": "@@ -2023,4 +2023,7 @@ CacheConfigurationException storeConfiguredHasBothReadAndWriteOnly(String storeC\n    @LogMessage(level = WARN)\n    @Message(value = \"ClusterLoader has been deprecated and will be removed in a future version with no direct replacement\", id = 595)\n    void warnUsingDeprecatedClusterLoader();\n+\n+   @Message(value = \"Store %s cannot be configured to be transactional as the implementation characteristic doesn't support it\", id = 596)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NzY3Mw=="}, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjY3NDE2OnYy", "diffSide": "RIGHT", "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNToyNVrOGdx4jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoxMzoxNVrOGdzvYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3OTE4MQ==", "bodyText": "Can we have this at the top of the class so it's not necessary to scroll to see the parameters.", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433879181", "createdAt": "2020-06-02T13:35:25Z", "author": {"login": "ryanemerson"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.infinispan.persistence.jdbc.stringbased;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNull;\n+\n+import java.lang.reflect.Method;\n+\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+import org.infinispan.configuration.parsing.ConfigurationBuilderHolder;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.persistence.jdbc.configuration.JdbcStringBasedStoreConfigurationBuilder;\n+import org.infinispan.persistence.spi.PersistenceException;\n+import org.infinispan.test.fwk.TestCacheManagerFactory;\n+import org.infinispan.transaction.TransactionMode;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+@Test(groups = {\"functional\", \"smoke\"}, testName = \"persistence.jdbc.stringbased.JdbcStringBasedStoreTxFunctionalTest\")\n+public class JdbcStringBasedStoreTxFunctionalTest extends JdbcStringBasedStoreFunctionalTest {\n+   private boolean transactionalConfig;\n+   private boolean sharedConfig;\n+\n+   JdbcStringBasedStoreTxFunctionalTest transactionalConfig(boolean transactionalConfig) {\n+      this.transactionalConfig = transactionalConfig;\n+      return this;\n+   }\n+\n+   JdbcStringBasedStoreTxFunctionalTest sharedConfig(boolean sharedConfig) {\n+      this.sharedConfig = sharedConfig;\n+      return this;\n+   }\n+\n+   @Override\n+   protected ConfigurationBuilder getDefaultCacheConfiguration() {\n+      ConfigurationBuilder configurationBuilder = super.getDefaultCacheConfiguration();\n+      configurationBuilder.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      if (sharedConfig) {\n+         // Shared requires a clustered config, even though we have a single node\n+         configurationBuilder.clustering().cacheMode(CacheMode.REPL_SYNC);\n+      }\n+      return configurationBuilder;\n+   }\n+\n+   @Override\n+   protected void modifyJdbcConfiguration(JdbcStringBasedStoreConfigurationBuilder builder) {\n+      builder.transactional(transactionalConfig);\n+      builder.shared(sharedConfig);\n+   }\n+\n+   @Override\n+   protected EmbeddedCacheManager createCacheManager(boolean start, GlobalConfigurationBuilder global,\n+         ConfigurationBuilder cb) {\n+      // Make sure defaults are transactional as well for created configs\n+      if (transactionalConfig) {\n+         cb.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      }\n+      if (sharedConfig) {\n+         ConfigurationBuilderHolder holder = new ConfigurationBuilderHolder(Thread.currentThread().getContextClassLoader(), global);\n+         if (cb != null) {\n+            String defaultName = JdbcStringBasedStoreTxFunctionalTest.class.getName() + \"-default\";\n+            global.defaultCacheName(defaultName);\n+            holder.newConfigurationBuilder(defaultName).read(cb.build());\n+         }\n+         global.transport().defaultTransport();\n+         return TestCacheManagerFactory.createClusteredCacheManager(start, holder);\n+      } else {\n+         return super.createCacheManager(start, global, cb);\n+      }\n+   }\n+\n+   @Factory\n+   public Object[] factory() {\n+      return new Object[]{\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(true),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(true),\n+      };\n+   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkwOTYwMQ==", "bodyText": "Okay.", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433909601", "createdAt": "2020-06-02T14:13:15Z", "author": {"login": "wburns"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.infinispan.persistence.jdbc.stringbased;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNull;\n+\n+import java.lang.reflect.Method;\n+\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+import org.infinispan.configuration.parsing.ConfigurationBuilderHolder;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.persistence.jdbc.configuration.JdbcStringBasedStoreConfigurationBuilder;\n+import org.infinispan.persistence.spi.PersistenceException;\n+import org.infinispan.test.fwk.TestCacheManagerFactory;\n+import org.infinispan.transaction.TransactionMode;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+@Test(groups = {\"functional\", \"smoke\"}, testName = \"persistence.jdbc.stringbased.JdbcStringBasedStoreTxFunctionalTest\")\n+public class JdbcStringBasedStoreTxFunctionalTest extends JdbcStringBasedStoreFunctionalTest {\n+   private boolean transactionalConfig;\n+   private boolean sharedConfig;\n+\n+   JdbcStringBasedStoreTxFunctionalTest transactionalConfig(boolean transactionalConfig) {\n+      this.transactionalConfig = transactionalConfig;\n+      return this;\n+   }\n+\n+   JdbcStringBasedStoreTxFunctionalTest sharedConfig(boolean sharedConfig) {\n+      this.sharedConfig = sharedConfig;\n+      return this;\n+   }\n+\n+   @Override\n+   protected ConfigurationBuilder getDefaultCacheConfiguration() {\n+      ConfigurationBuilder configurationBuilder = super.getDefaultCacheConfiguration();\n+      configurationBuilder.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      if (sharedConfig) {\n+         // Shared requires a clustered config, even though we have a single node\n+         configurationBuilder.clustering().cacheMode(CacheMode.REPL_SYNC);\n+      }\n+      return configurationBuilder;\n+   }\n+\n+   @Override\n+   protected void modifyJdbcConfiguration(JdbcStringBasedStoreConfigurationBuilder builder) {\n+      builder.transactional(transactionalConfig);\n+      builder.shared(sharedConfig);\n+   }\n+\n+   @Override\n+   protected EmbeddedCacheManager createCacheManager(boolean start, GlobalConfigurationBuilder global,\n+         ConfigurationBuilder cb) {\n+      // Make sure defaults are transactional as well for created configs\n+      if (transactionalConfig) {\n+         cb.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      }\n+      if (sharedConfig) {\n+         ConfigurationBuilderHolder holder = new ConfigurationBuilderHolder(Thread.currentThread().getContextClassLoader(), global);\n+         if (cb != null) {\n+            String defaultName = JdbcStringBasedStoreTxFunctionalTest.class.getName() + \"-default\";\n+            global.defaultCacheName(defaultName);\n+            holder.newConfigurationBuilder(defaultName).read(cb.build());\n+         }\n+         global.transport().defaultTransport();\n+         return TestCacheManagerFactory.createClusteredCacheManager(start, holder);\n+      } else {\n+         return super.createCacheManager(start, global, cb);\n+      }\n+   }\n+\n+   @Factory\n+   public Object[] factory() {\n+      return new Object[]{\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(true),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(true),\n+      };\n+   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3OTE4MQ=="}, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjY4Mjk1OnYy", "diffSide": "RIGHT", "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNzoyN1rOGdx-CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoxOTo0M1rOGd0CJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MDU4NQ==", "bodyText": "We should probably assert on a configuration exception in this case.", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433880585", "createdAt": "2020-06-02T13:37:27Z", "author": {"login": "ryanemerson"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.infinispan.persistence.jdbc.stringbased;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNull;\n+\n+import java.lang.reflect.Method;\n+\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+import org.infinispan.configuration.parsing.ConfigurationBuilderHolder;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.persistence.jdbc.configuration.JdbcStringBasedStoreConfigurationBuilder;\n+import org.infinispan.persistence.spi.PersistenceException;\n+import org.infinispan.test.fwk.TestCacheManagerFactory;\n+import org.infinispan.transaction.TransactionMode;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+@Test(groups = {\"functional\", \"smoke\"}, testName = \"persistence.jdbc.stringbased.JdbcStringBasedStoreTxFunctionalTest\")\n+public class JdbcStringBasedStoreTxFunctionalTest extends JdbcStringBasedStoreFunctionalTest {\n+   private boolean transactionalConfig;\n+   private boolean sharedConfig;\n+\n+   JdbcStringBasedStoreTxFunctionalTest transactionalConfig(boolean transactionalConfig) {\n+      this.transactionalConfig = transactionalConfig;\n+      return this;\n+   }\n+\n+   JdbcStringBasedStoreTxFunctionalTest sharedConfig(boolean sharedConfig) {\n+      this.sharedConfig = sharedConfig;\n+      return this;\n+   }\n+\n+   @Override\n+   protected ConfigurationBuilder getDefaultCacheConfiguration() {\n+      ConfigurationBuilder configurationBuilder = super.getDefaultCacheConfiguration();\n+      configurationBuilder.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      if (sharedConfig) {\n+         // Shared requires a clustered config, even though we have a single node\n+         configurationBuilder.clustering().cacheMode(CacheMode.REPL_SYNC);\n+      }\n+      return configurationBuilder;\n+   }\n+\n+   @Override\n+   protected void modifyJdbcConfiguration(JdbcStringBasedStoreConfigurationBuilder builder) {\n+      builder.transactional(transactionalConfig);\n+      builder.shared(sharedConfig);\n+   }\n+\n+   @Override\n+   protected EmbeddedCacheManager createCacheManager(boolean start, GlobalConfigurationBuilder global,\n+         ConfigurationBuilder cb) {\n+      // Make sure defaults are transactional as well for created configs\n+      if (transactionalConfig) {\n+         cb.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      }\n+      if (sharedConfig) {\n+         ConfigurationBuilderHolder holder = new ConfigurationBuilderHolder(Thread.currentThread().getContextClassLoader(), global);\n+         if (cb != null) {\n+            String defaultName = JdbcStringBasedStoreTxFunctionalTest.class.getName() + \"-default\";\n+            global.defaultCacheName(defaultName);\n+            holder.newConfigurationBuilder(defaultName).read(cb.build());\n+         }\n+         global.transport().defaultTransport();\n+         return TestCacheManagerFactory.createClusteredCacheManager(start, holder);\n+      } else {\n+         return super.createCacheManager(start, global, cb);\n+      }\n+   }\n+\n+   @Factory\n+   public Object[] factory() {\n+      return new Object[]{\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(true),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(true),\n+      };\n+   }\n+\n+   @Override\n+   protected String parameters() {\n+      return \" [transactionalConfig=\" + transactionalConfig + \", sharedConfig=\" + sharedConfig + \"]\";\n+   }\n+\n+   @Override\n+   public void testRemoveCacheWithPassivation() {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxNDQwNw==", "bodyText": "This is the wrong place to do that imo, but I can add it here. The only reason this was needed is because the super class does some funky tests that aren't the best fit for this.", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433914407", "createdAt": "2020-06-02T14:19:43Z", "author": {"login": "wburns"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.infinispan.persistence.jdbc.stringbased;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNull;\n+\n+import java.lang.reflect.Method;\n+\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+import org.infinispan.configuration.parsing.ConfigurationBuilderHolder;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.persistence.jdbc.configuration.JdbcStringBasedStoreConfigurationBuilder;\n+import org.infinispan.persistence.spi.PersistenceException;\n+import org.infinispan.test.fwk.TestCacheManagerFactory;\n+import org.infinispan.transaction.TransactionMode;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+@Test(groups = {\"functional\", \"smoke\"}, testName = \"persistence.jdbc.stringbased.JdbcStringBasedStoreTxFunctionalTest\")\n+public class JdbcStringBasedStoreTxFunctionalTest extends JdbcStringBasedStoreFunctionalTest {\n+   private boolean transactionalConfig;\n+   private boolean sharedConfig;\n+\n+   JdbcStringBasedStoreTxFunctionalTest transactionalConfig(boolean transactionalConfig) {\n+      this.transactionalConfig = transactionalConfig;\n+      return this;\n+   }\n+\n+   JdbcStringBasedStoreTxFunctionalTest sharedConfig(boolean sharedConfig) {\n+      this.sharedConfig = sharedConfig;\n+      return this;\n+   }\n+\n+   @Override\n+   protected ConfigurationBuilder getDefaultCacheConfiguration() {\n+      ConfigurationBuilder configurationBuilder = super.getDefaultCacheConfiguration();\n+      configurationBuilder.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      if (sharedConfig) {\n+         // Shared requires a clustered config, even though we have a single node\n+         configurationBuilder.clustering().cacheMode(CacheMode.REPL_SYNC);\n+      }\n+      return configurationBuilder;\n+   }\n+\n+   @Override\n+   protected void modifyJdbcConfiguration(JdbcStringBasedStoreConfigurationBuilder builder) {\n+      builder.transactional(transactionalConfig);\n+      builder.shared(sharedConfig);\n+   }\n+\n+   @Override\n+   protected EmbeddedCacheManager createCacheManager(boolean start, GlobalConfigurationBuilder global,\n+         ConfigurationBuilder cb) {\n+      // Make sure defaults are transactional as well for created configs\n+      if (transactionalConfig) {\n+         cb.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      }\n+      if (sharedConfig) {\n+         ConfigurationBuilderHolder holder = new ConfigurationBuilderHolder(Thread.currentThread().getContextClassLoader(), global);\n+         if (cb != null) {\n+            String defaultName = JdbcStringBasedStoreTxFunctionalTest.class.getName() + \"-default\";\n+            global.defaultCacheName(defaultName);\n+            holder.newConfigurationBuilder(defaultName).read(cb.build());\n+         }\n+         global.transport().defaultTransport();\n+         return TestCacheManagerFactory.createClusteredCacheManager(start, holder);\n+      } else {\n+         return super.createCacheManager(start, global, cb);\n+      }\n+   }\n+\n+   @Factory\n+   public Object[] factory() {\n+      return new Object[]{\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(true),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(true),\n+      };\n+   }\n+\n+   @Override\n+   protected String parameters() {\n+      return \" [transactionalConfig=\" + transactionalConfig + \", sharedConfig=\" + sharedConfig + \"]\";\n+   }\n+\n+   @Override\n+   public void testRemoveCacheWithPassivation() {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MDU4NQ=="}, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjY4MzI0OnYy", "diffSide": "RIGHT", "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNzozMFrOGdx-Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoxNTo0OVrOGdz2nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MDYyNg==", "bodyText": "We should probably assert on a configuration exception in this case.", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433880626", "createdAt": "2020-06-02T13:37:30Z", "author": {"login": "ryanemerson"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.infinispan.persistence.jdbc.stringbased;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNull;\n+\n+import java.lang.reflect.Method;\n+\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+import org.infinispan.configuration.parsing.ConfigurationBuilderHolder;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.persistence.jdbc.configuration.JdbcStringBasedStoreConfigurationBuilder;\n+import org.infinispan.persistence.spi.PersistenceException;\n+import org.infinispan.test.fwk.TestCacheManagerFactory;\n+import org.infinispan.transaction.TransactionMode;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+@Test(groups = {\"functional\", \"smoke\"}, testName = \"persistence.jdbc.stringbased.JdbcStringBasedStoreTxFunctionalTest\")\n+public class JdbcStringBasedStoreTxFunctionalTest extends JdbcStringBasedStoreFunctionalTest {\n+   private boolean transactionalConfig;\n+   private boolean sharedConfig;\n+\n+   JdbcStringBasedStoreTxFunctionalTest transactionalConfig(boolean transactionalConfig) {\n+      this.transactionalConfig = transactionalConfig;\n+      return this;\n+   }\n+\n+   JdbcStringBasedStoreTxFunctionalTest sharedConfig(boolean sharedConfig) {\n+      this.sharedConfig = sharedConfig;\n+      return this;\n+   }\n+\n+   @Override\n+   protected ConfigurationBuilder getDefaultCacheConfiguration() {\n+      ConfigurationBuilder configurationBuilder = super.getDefaultCacheConfiguration();\n+      configurationBuilder.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      if (sharedConfig) {\n+         // Shared requires a clustered config, even though we have a single node\n+         configurationBuilder.clustering().cacheMode(CacheMode.REPL_SYNC);\n+      }\n+      return configurationBuilder;\n+   }\n+\n+   @Override\n+   protected void modifyJdbcConfiguration(JdbcStringBasedStoreConfigurationBuilder builder) {\n+      builder.transactional(transactionalConfig);\n+      builder.shared(sharedConfig);\n+   }\n+\n+   @Override\n+   protected EmbeddedCacheManager createCacheManager(boolean start, GlobalConfigurationBuilder global,\n+         ConfigurationBuilder cb) {\n+      // Make sure defaults are transactional as well for created configs\n+      if (transactionalConfig) {\n+         cb.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      }\n+      if (sharedConfig) {\n+         ConfigurationBuilderHolder holder = new ConfigurationBuilderHolder(Thread.currentThread().getContextClassLoader(), global);\n+         if (cb != null) {\n+            String defaultName = JdbcStringBasedStoreTxFunctionalTest.class.getName() + \"-default\";\n+            global.defaultCacheName(defaultName);\n+            holder.newConfigurationBuilder(defaultName).read(cb.build());\n+         }\n+         global.transport().defaultTransport();\n+         return TestCacheManagerFactory.createClusteredCacheManager(start, holder);\n+      } else {\n+         return super.createCacheManager(start, global, cb);\n+      }\n+   }\n+\n+   @Factory\n+   public Object[] factory() {\n+      return new Object[]{\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(true),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(true),\n+      };\n+   }\n+\n+   @Override\n+   protected String parameters() {\n+      return \" [transactionalConfig=\" + transactionalConfig + \", sharedConfig=\" + sharedConfig + \"]\";\n+   }\n+\n+   @Override\n+   public void testRemoveCacheWithPassivation() {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {\n+         super.testRemoveCacheWithPassivation();\n+      }\n+   }\n+\n+   @Override\n+   public void testStoreByteArrays(Method m) throws PersistenceException {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {\n+         super.testStoreByteArrays(m);\n+      }\n+   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxMTQ1Mg==", "bodyText": "It is the same as the other test. I don't think it is necessary to do it twice.", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433911452", "createdAt": "2020-06-02T14:15:49Z", "author": {"login": "wburns"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.infinispan.persistence.jdbc.stringbased;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNull;\n+\n+import java.lang.reflect.Method;\n+\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+import org.infinispan.configuration.parsing.ConfigurationBuilderHolder;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.persistence.jdbc.configuration.JdbcStringBasedStoreConfigurationBuilder;\n+import org.infinispan.persistence.spi.PersistenceException;\n+import org.infinispan.test.fwk.TestCacheManagerFactory;\n+import org.infinispan.transaction.TransactionMode;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+@Test(groups = {\"functional\", \"smoke\"}, testName = \"persistence.jdbc.stringbased.JdbcStringBasedStoreTxFunctionalTest\")\n+public class JdbcStringBasedStoreTxFunctionalTest extends JdbcStringBasedStoreFunctionalTest {\n+   private boolean transactionalConfig;\n+   private boolean sharedConfig;\n+\n+   JdbcStringBasedStoreTxFunctionalTest transactionalConfig(boolean transactionalConfig) {\n+      this.transactionalConfig = transactionalConfig;\n+      return this;\n+   }\n+\n+   JdbcStringBasedStoreTxFunctionalTest sharedConfig(boolean sharedConfig) {\n+      this.sharedConfig = sharedConfig;\n+      return this;\n+   }\n+\n+   @Override\n+   protected ConfigurationBuilder getDefaultCacheConfiguration() {\n+      ConfigurationBuilder configurationBuilder = super.getDefaultCacheConfiguration();\n+      configurationBuilder.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      if (sharedConfig) {\n+         // Shared requires a clustered config, even though we have a single node\n+         configurationBuilder.clustering().cacheMode(CacheMode.REPL_SYNC);\n+      }\n+      return configurationBuilder;\n+   }\n+\n+   @Override\n+   protected void modifyJdbcConfiguration(JdbcStringBasedStoreConfigurationBuilder builder) {\n+      builder.transactional(transactionalConfig);\n+      builder.shared(sharedConfig);\n+   }\n+\n+   @Override\n+   protected EmbeddedCacheManager createCacheManager(boolean start, GlobalConfigurationBuilder global,\n+         ConfigurationBuilder cb) {\n+      // Make sure defaults are transactional as well for created configs\n+      if (transactionalConfig) {\n+         cb.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      }\n+      if (sharedConfig) {\n+         ConfigurationBuilderHolder holder = new ConfigurationBuilderHolder(Thread.currentThread().getContextClassLoader(), global);\n+         if (cb != null) {\n+            String defaultName = JdbcStringBasedStoreTxFunctionalTest.class.getName() + \"-default\";\n+            global.defaultCacheName(defaultName);\n+            holder.newConfigurationBuilder(defaultName).read(cb.build());\n+         }\n+         global.transport().defaultTransport();\n+         return TestCacheManagerFactory.createClusteredCacheManager(start, holder);\n+      } else {\n+         return super.createCacheManager(start, global, cb);\n+      }\n+   }\n+\n+   @Factory\n+   public Object[] factory() {\n+      return new Object[]{\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(true),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(true),\n+      };\n+   }\n+\n+   @Override\n+   protected String parameters() {\n+      return \" [transactionalConfig=\" + transactionalConfig + \", sharedConfig=\" + sharedConfig + \"]\";\n+   }\n+\n+   @Override\n+   public void testRemoveCacheWithPassivation() {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {\n+         super.testRemoveCacheWithPassivation();\n+      }\n+   }\n+\n+   @Override\n+   public void testStoreByteArrays(Method m) throws PersistenceException {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {\n+         super.testStoreByteArrays(m);\n+      }\n+   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MDYyNg=="}, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjY4OTM1OnYy", "diffSide": "RIGHT", "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozODo0M1rOGdyCMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoxNzo0NlrOGdz8cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MTY1MQ==", "bodyText": "Shouldn't we also check that \"rollback-test\" key is not present in the store after rollback when the store is transactional?", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433881651", "createdAt": "2020-06-02T13:38:43Z", "author": {"login": "ryanemerson"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.infinispan.persistence.jdbc.stringbased;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNull;\n+\n+import java.lang.reflect.Method;\n+\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+import org.infinispan.configuration.parsing.ConfigurationBuilderHolder;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.persistence.jdbc.configuration.JdbcStringBasedStoreConfigurationBuilder;\n+import org.infinispan.persistence.spi.PersistenceException;\n+import org.infinispan.test.fwk.TestCacheManagerFactory;\n+import org.infinispan.transaction.TransactionMode;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+@Test(groups = {\"functional\", \"smoke\"}, testName = \"persistence.jdbc.stringbased.JdbcStringBasedStoreTxFunctionalTest\")\n+public class JdbcStringBasedStoreTxFunctionalTest extends JdbcStringBasedStoreFunctionalTest {\n+   private boolean transactionalConfig;\n+   private boolean sharedConfig;\n+\n+   JdbcStringBasedStoreTxFunctionalTest transactionalConfig(boolean transactionalConfig) {\n+      this.transactionalConfig = transactionalConfig;\n+      return this;\n+   }\n+\n+   JdbcStringBasedStoreTxFunctionalTest sharedConfig(boolean sharedConfig) {\n+      this.sharedConfig = sharedConfig;\n+      return this;\n+   }\n+\n+   @Override\n+   protected ConfigurationBuilder getDefaultCacheConfiguration() {\n+      ConfigurationBuilder configurationBuilder = super.getDefaultCacheConfiguration();\n+      configurationBuilder.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      if (sharedConfig) {\n+         // Shared requires a clustered config, even though we have a single node\n+         configurationBuilder.clustering().cacheMode(CacheMode.REPL_SYNC);\n+      }\n+      return configurationBuilder;\n+   }\n+\n+   @Override\n+   protected void modifyJdbcConfiguration(JdbcStringBasedStoreConfigurationBuilder builder) {\n+      builder.transactional(transactionalConfig);\n+      builder.shared(sharedConfig);\n+   }\n+\n+   @Override\n+   protected EmbeddedCacheManager createCacheManager(boolean start, GlobalConfigurationBuilder global,\n+         ConfigurationBuilder cb) {\n+      // Make sure defaults are transactional as well for created configs\n+      if (transactionalConfig) {\n+         cb.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      }\n+      if (sharedConfig) {\n+         ConfigurationBuilderHolder holder = new ConfigurationBuilderHolder(Thread.currentThread().getContextClassLoader(), global);\n+         if (cb != null) {\n+            String defaultName = JdbcStringBasedStoreTxFunctionalTest.class.getName() + \"-default\";\n+            global.defaultCacheName(defaultName);\n+            holder.newConfigurationBuilder(defaultName).read(cb.build());\n+         }\n+         global.transport().defaultTransport();\n+         return TestCacheManagerFactory.createClusteredCacheManager(start, holder);\n+      } else {\n+         return super.createCacheManager(start, global, cb);\n+      }\n+   }\n+\n+   @Factory\n+   public Object[] factory() {\n+      return new Object[]{\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(true),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(true),\n+      };\n+   }\n+\n+   @Override\n+   protected String parameters() {\n+      return \" [transactionalConfig=\" + transactionalConfig + \", sharedConfig=\" + sharedConfig + \"]\";\n+   }\n+\n+   @Override\n+   public void testRemoveCacheWithPassivation() {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {\n+         super.testRemoveCacheWithPassivation();\n+      }\n+   }\n+\n+   @Override\n+   public void testStoreByteArrays(Method m) throws PersistenceException {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {\n+         super.testStoreByteArrays(m);\n+      }\n+   }\n+\n+   public void testRollback() throws SystemException, NotSupportedException {\n+      String cacheName = \"testRollback\";\n+      ConfigurationBuilder cb = getDefaultCacheConfiguration();\n+      createCacheStoreConfig(cb.persistence(), false);\n+      cacheManager.defineConfiguration(cacheName, cb.build());\n+\n+      Cache<String, Object> cache = cacheManager.getCache(cacheName);\n+\n+      String key = \"rollback-test\";\n+      assertNull(cache.get(key));\n+\n+      TransactionManager manager = cache.getAdvancedCache().getTransactionManager();\n+\n+      String value = \"the-value\";\n+      manager.begin();\n+      cache.put(key, value);\n+      assertEquals(value, cache.get(key));\n+      manager.rollback();\n+\n+      assertNull(cache.get(key));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxMjk0NA==", "bodyText": "I personally don't think it is worth it. The cache.get should be doing that already. None of the rest of the tests in this class hierarchy go directly at the store either.", "url": "https://github.com/infinispan/infinispan/pull/8410#discussion_r433912944", "createdAt": "2020-06-02T14:17:46Z", "author": {"login": "wburns"}, "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/JdbcStringBasedStoreTxFunctionalTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.infinispan.persistence.jdbc.stringbased;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNull;\n+\n+import java.lang.reflect.Method;\n+\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.SystemException;\n+import javax.transaction.TransactionManager;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.global.GlobalConfigurationBuilder;\n+import org.infinispan.configuration.parsing.ConfigurationBuilderHolder;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.persistence.jdbc.configuration.JdbcStringBasedStoreConfigurationBuilder;\n+import org.infinispan.persistence.spi.PersistenceException;\n+import org.infinispan.test.fwk.TestCacheManagerFactory;\n+import org.infinispan.transaction.TransactionMode;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+@Test(groups = {\"functional\", \"smoke\"}, testName = \"persistence.jdbc.stringbased.JdbcStringBasedStoreTxFunctionalTest\")\n+public class JdbcStringBasedStoreTxFunctionalTest extends JdbcStringBasedStoreFunctionalTest {\n+   private boolean transactionalConfig;\n+   private boolean sharedConfig;\n+\n+   JdbcStringBasedStoreTxFunctionalTest transactionalConfig(boolean transactionalConfig) {\n+      this.transactionalConfig = transactionalConfig;\n+      return this;\n+   }\n+\n+   JdbcStringBasedStoreTxFunctionalTest sharedConfig(boolean sharedConfig) {\n+      this.sharedConfig = sharedConfig;\n+      return this;\n+   }\n+\n+   @Override\n+   protected ConfigurationBuilder getDefaultCacheConfiguration() {\n+      ConfigurationBuilder configurationBuilder = super.getDefaultCacheConfiguration();\n+      configurationBuilder.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      if (sharedConfig) {\n+         // Shared requires a clustered config, even though we have a single node\n+         configurationBuilder.clustering().cacheMode(CacheMode.REPL_SYNC);\n+      }\n+      return configurationBuilder;\n+   }\n+\n+   @Override\n+   protected void modifyJdbcConfiguration(JdbcStringBasedStoreConfigurationBuilder builder) {\n+      builder.transactional(transactionalConfig);\n+      builder.shared(sharedConfig);\n+   }\n+\n+   @Override\n+   protected EmbeddedCacheManager createCacheManager(boolean start, GlobalConfigurationBuilder global,\n+         ConfigurationBuilder cb) {\n+      // Make sure defaults are transactional as well for created configs\n+      if (transactionalConfig) {\n+         cb.transaction().transactionMode(TransactionMode.TRANSACTIONAL);\n+      }\n+      if (sharedConfig) {\n+         ConfigurationBuilderHolder holder = new ConfigurationBuilderHolder(Thread.currentThread().getContextClassLoader(), global);\n+         if (cb != null) {\n+            String defaultName = JdbcStringBasedStoreTxFunctionalTest.class.getName() + \"-default\";\n+            global.defaultCacheName(defaultName);\n+            holder.newConfigurationBuilder(defaultName).read(cb.build());\n+         }\n+         global.transport().defaultTransport();\n+         return TestCacheManagerFactory.createClusteredCacheManager(start, holder);\n+      } else {\n+         return super.createCacheManager(start, global, cb);\n+      }\n+   }\n+\n+   @Factory\n+   public Object[] factory() {\n+      return new Object[]{\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(false),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(true).sharedConfig(true),\n+            new JdbcStringBasedStoreTxFunctionalTest().transactionalConfig(false).sharedConfig(true),\n+      };\n+   }\n+\n+   @Override\n+   protected String parameters() {\n+      return \" [transactionalConfig=\" + transactionalConfig + \", sharedConfig=\" + sharedConfig + \"]\";\n+   }\n+\n+   @Override\n+   public void testRemoveCacheWithPassivation() {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {\n+         super.testRemoveCacheWithPassivation();\n+      }\n+   }\n+\n+   @Override\n+   public void testStoreByteArrays(Method m) throws PersistenceException {\n+      // Shared and purgeOnStartup don't mix\n+      // Transactional and passivation don't mix\n+      if (!sharedConfig && !transactionalConfig) {\n+         super.testStoreByteArrays(m);\n+      }\n+   }\n+\n+   public void testRollback() throws SystemException, NotSupportedException {\n+      String cacheName = \"testRollback\";\n+      ConfigurationBuilder cb = getDefaultCacheConfiguration();\n+      createCacheStoreConfig(cb.persistence(), false);\n+      cacheManager.defineConfiguration(cacheName, cb.build());\n+\n+      Cache<String, Object> cache = cacheManager.getCache(cacheName);\n+\n+      String key = \"rollback-test\";\n+      assertNull(cache.get(key));\n+\n+      TransactionManager manager = cache.getAdvancedCache().getTransactionManager();\n+\n+      String value = \"the-value\";\n+      manager.begin();\n+      cache.put(key, value);\n+      assertEquals(value, cache.get(key));\n+      manager.rollback();\n+\n+      assertNull(cache.get(key));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MTY1MQ=="}, "originalCommit": {"oid": "46633a32fdeb4eb13647dc3703eb132a174079be"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4041, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}