{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4Mjk3NjMx", "number": 8541, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTozNjoyNVrOEOLnZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxNDozM1rOETKtMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzA1ODMwOnYy", "diffSide": "LEFT", "path": "commons/all/src/main/java/org/infinispan/commons/configuration/ClassAllowList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTozNjoyNVrOGxMCSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozMToyMlrOG4wbnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzMDYwMA==", "bodyText": "As this is a public package, I think we need to keep ClassWhiteList until 14. We can just make it  extend ClassAllowList, that way the constructors/method params that now except ClassAllowList will still be compatible.", "url": "https://github.com/infinispan/infinispan/pull/8541#discussion_r454230600", "createdAt": "2020-07-14T09:36:25Z", "author": {"login": "ryanemerson"}, "path": "commons/all/src/main/java/org/infinispan/commons/configuration/ClassAllowList.java", "diffHunk": "@@ -24,23 +24,27 @@\n import org.infinispan.commons.logging.LogFactory;\n \n /**\n- * The {@link ClassWhiteList} maintains classes definitions either by name or regular expression and is used for\n+ * The {@link ClassAllowList} maintains classes definitions either by name or regular expression and is used for\n  * permissioning.\n  * <p>\n- * By default it includes regular expressions from the system property \"infinispan.deserialization.whitelist.regexps\"\n- * and fully qualified class names from \"infinispan.deserialization.whitelist.classes\".\n+ * By default it includes regular expressions from the system property \"infinispan.deserialization.allowlist.regexps\"\n+ * and fully qualified class names from \"infinispan.deserialization.allowlist.classes\".\n  * <p>\n  * Classes are checked first against the set of class names, and in case not present each of the regular expressions are\n  * evaluated in the order supplied.\n  *\n  * @since 9.4\n  */\n-public final class ClassWhiteList {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7669a1f4ec85e479021b09b4cca4ec05b5ad3bfb"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2Njk0Mw==", "bodyText": "Done", "url": "https://github.com/infinispan/infinispan/pull/8541#discussion_r462166943", "createdAt": "2020-07-29T09:31:22Z", "author": {"login": "tristantarrant"}, "path": "commons/all/src/main/java/org/infinispan/commons/configuration/ClassAllowList.java", "diffHunk": "@@ -24,23 +24,27 @@\n import org.infinispan.commons.logging.LogFactory;\n \n /**\n- * The {@link ClassWhiteList} maintains classes definitions either by name or regular expression and is used for\n+ * The {@link ClassAllowList} maintains classes definitions either by name or regular expression and is used for\n  * permissioning.\n  * <p>\n- * By default it includes regular expressions from the system property \"infinispan.deserialization.whitelist.regexps\"\n- * and fully qualified class names from \"infinispan.deserialization.whitelist.classes\".\n+ * By default it includes regular expressions from the system property \"infinispan.deserialization.allowlist.regexps\"\n+ * and fully qualified class names from \"infinispan.deserialization.allowlist.classes\".\n  * <p>\n  * Classes are checked first against the set of class names, and in case not present each of the regular expressions are\n  * evaluated in the order supplied.\n  *\n  * @since 9.4\n  */\n-public final class ClassWhiteList {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzMDYwMA=="}, "originalCommit": {"oid": "7669a1f4ec85e479021b09b4cca4ec05b5ad3bfb"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzA2MjAzOnYy", "diffSide": "RIGHT", "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/JavaSerializationEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTozNzoyOVrOGxMErw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTozNzoyOVrOGxMErw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzMTIxNQ==", "bodyText": "If we keep ClassWhiteList and make it extend ClassAllowList, this ctor should remain the same for backwards compatibility and we can just pass it to JavaSerializationMarshaller.", "url": "https://github.com/infinispan/infinispan/pull/8541#discussion_r454231215", "createdAt": "2020-07-14T09:37:29Z", "author": {"login": "ryanemerson"}, "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/JavaSerializationEncoder.java", "diffHunk": "@@ -12,8 +12,8 @@\n @Deprecated\n public class JavaSerializationEncoder extends MarshallerEncoder {\n \n-   public JavaSerializationEncoder(ClassWhiteList classWhiteList) {\n-      super(new JavaSerializationMarshaller(classWhiteList));\n+   public JavaSerializationEncoder(ClassAllowList classAllowList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7669a1f4ec85e479021b09b4cca4ec05b5ad3bfb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzA2NzM2OnYy", "diffSide": "LEFT", "path": "core/src/main/java/org/infinispan/configuration/global/AllowListConfigurationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTozOTowOFrOGxMIOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTozOTowOFrOGxMIOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzMjEyMg==", "bodyText": "We probably also need to keep this for backwards compatibility in Embedded mode.", "url": "https://github.com/infinispan/infinispan/pull/8541#discussion_r454232122", "createdAt": "2020-07-14T09:39:08Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/configuration/global/AllowListConfigurationBuilder.java", "diffHunk": "@@ -11,55 +11,55 @@\n import java.util.stream.Collectors;\n \n import org.infinispan.commons.configuration.Builder;\n-import org.infinispan.commons.configuration.ClassWhiteList;\n+import org.infinispan.commons.configuration.ClassAllowList;\n import org.infinispan.commons.configuration.attributes.AttributeSet;\n \n /**\n- * Configures the {@link org.infinispan.manager.EmbeddedCacheManager} {@link org.infinispan.commons.configuration.ClassWhiteList}.\n+ * Configures the {@link org.infinispan.manager.EmbeddedCacheManager} {@link ClassAllowList}.\n  *\n  * @author Ryan Emerson\n  * @since 10.0\n  */\n-public class WhiteListConfigurationBuilder implements Builder<WhiteListConfiguration> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7669a1f4ec85e479021b09b4cca4ec05b5ad3bfb"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzA3MTI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/configuration/parsing/Parser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTo0MDoxMVrOGxMKjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozMTozN1rOG4wcKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzMjcxOA==", "bodyText": "If the 12.0 schema is used shouldn't this thrown unrecognised attribute exception?", "url": "https://github.com/infinispan/infinispan/pull/8541#discussion_r454232718", "createdAt": "2020-07-14T09:40:11Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/configuration/parsing/Parser.java", "diffHunk": "@@ -172,9 +172,11 @@ private void parseSerialization(final XMLExtendedStreamReader reader, final Conf\n                parseSerializationContextInitializer(reader, holder.getClassLoader(), builder.serialization());\n                break;\n             }\n-            case WHITE_LIST: {\n+            case WHITE_LIST:\n+               CONFIG.elementDeprecatedUseOther(Element.WHITE_LIST, Element.ALLOW_LIST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7669a1f4ec85e479021b09b4cca4ec05b5ad3bfb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NzA4Mg==", "bodyText": "Done", "url": "https://github.com/infinispan/infinispan/pull/8541#discussion_r462167082", "createdAt": "2020-07-29T09:31:37Z", "author": {"login": "tristantarrant"}, "path": "core/src/main/java/org/infinispan/configuration/parsing/Parser.java", "diffHunk": "@@ -172,9 +172,11 @@ private void parseSerialization(final XMLExtendedStreamReader reader, final Conf\n                parseSerializationContextInitializer(reader, holder.getClassLoader(), builder.serialization());\n                break;\n             }\n-            case WHITE_LIST: {\n+            case WHITE_LIST:\n+               CONFIG.elementDeprecatedUseOther(Element.WHITE_LIST, Element.ALLOW_LIST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzMjcxOA=="}, "originalCommit": {"oid": "7669a1f4ec85e479021b09b4cca4ec05b5ad3bfb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTMzODExOnYy", "diffSide": "RIGHT", "path": "commons/all/src/main/java/org/infinispan/commons/configuration/ClassWhiteList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxNDozM1rOG4v0CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozMTo1NVrOG4wc5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NjgwOA==", "bodyText": "We still need to keep the old constructors for backwards compatibility:\n   public ClassWhiteList() {\n      super();\n   }\n\n   public ClassWhiteList(List<String> regexps) {\n      super(regexps);\n   }\n\n   public ClassWhiteList(Collection<String> classes, List<String> regexps) {\n      super(classes, regexps);\n   }", "url": "https://github.com/infinispan/infinispan/pull/8541#discussion_r462156808", "createdAt": "2020-07-29T09:14:33Z", "author": {"login": "ryanemerson"}, "path": "commons/all/src/main/java/org/infinispan/commons/configuration/ClassWhiteList.java", "diffHunk": "@@ -1,153 +1,8 @@\n package org.infinispan.commons.configuration;\n \n-import static java.util.Arrays.asList;\n-import static java.util.Arrays.stream;\n-import static java.util.Objects.requireNonNull;\n-\n-import java.math.BigDecimal;\n-import java.math.BigInteger;\n-import java.time.Instant;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.concurrent.CopyOnWriteArraySet;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-\n-import org.infinispan.commons.logging.Log;\n-import org.infinispan.commons.logging.LogFactory;\n-\n /**\n- * The {@link ClassWhiteList} maintains classes definitions either by name or regular expression and is used for\n- * permissioning.\n- * <p>\n- * By default it includes regular expressions from the system property \"infinispan.deserialization.whitelist.regexps\"\n- * and fully qualified class names from \"infinispan.deserialization.whitelist.classes\".\n- * <p>\n- * Classes are checked first against the set of class names, and in case not present each of the regular expressions are\n- * evaluated in the order supplied.\n- *\n- * @since 9.4\n- */\n-public final class ClassWhiteList {\n-\n-   private static final Log log = LogFactory.getLog(ClassWhiteList.class);\n-\n-   private static final String CLASSES_PROPERTY_NAME = \"infinispan.deserialization.whitelist.classes\";\n-   private static final String REGEXPS_PROPERTY_NAME = \"infinispan.deserialization.whitelist.regexps\";\n-\n-   private static final Set<String> SYS_ALLOWED_CLASSES = new HashSet<>();\n-   private static final List<String> SYS_ALLOWED_REGEXP = new ArrayList<>();\n-\n-   static {\n-      // Classes always allowed\n-      // Primitive Arrays\n-      SYS_ALLOWED_CLASSES.add(byte[].class.getName());\n-      SYS_ALLOWED_CLASSES.add(short[].class.getName());\n-      SYS_ALLOWED_CLASSES.add(int[].class.getName());\n-      SYS_ALLOWED_CLASSES.add(long[].class.getName());\n-      SYS_ALLOWED_CLASSES.add(float[].class.getName());\n-      SYS_ALLOWED_CLASSES.add(double[].class.getName());\n-      SYS_ALLOWED_CLASSES.add(char[].class.getName());\n-      SYS_ALLOWED_CLASSES.add(boolean[].class.getName());\n-\n-      // Boxed Primitives\n-      SYS_ALLOWED_CLASSES.add(Byte.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Short.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Integer.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Long.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Float.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Double.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Character.class.getName());\n-      SYS_ALLOWED_CLASSES.add(String.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Boolean.class.getName());\n-\n-      // Java.math\n-      SYS_ALLOWED_CLASSES.add(BigInteger.class.getName());\n-      SYS_ALLOWED_CLASSES.add(BigDecimal.class.getName());\n-\n-      // Java.time\n-      SYS_ALLOWED_CLASSES.add(Instant.class.getName());\n-      SYS_ALLOWED_CLASSES.add(\"java.time.Ser\");\n-\n-\n-      // Util\n-      SYS_ALLOWED_CLASSES.add(Date.class.getName());\n-\n-      // Misc\n-      SYS_ALLOWED_CLASSES.add(Enum.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Number.class.getName());\n-\n-      // Reference array regex, for arrray representations of allowed classes e.g '[Ljava.lang.Byte;'\n-      SYS_ALLOWED_REGEXP.add(\"^\\\\[[\\\\[L].*\\\\;$\");\n-\n-      String regexps = System.getProperty(REGEXPS_PROPERTY_NAME);\n-      if (regexps != null) {\n-         SYS_ALLOWED_REGEXP.addAll(asList(regexps.trim().split(\",\")));\n-      }\n-      String cls = System.getProperty(CLASSES_PROPERTY_NAME);\n-      if (cls != null) {\n-         SYS_ALLOWED_CLASSES.addAll(asList(cls.trim().split(\",\")));\n-      }\n-   }\n-\n-   private final Set<String> classes = new CopyOnWriteArraySet<>(SYS_ALLOWED_CLASSES);\n-   private final List<String> regexps = new CopyOnWriteArrayList<>(SYS_ALLOWED_REGEXP);\n-   private final List<Pattern> compiled = new CopyOnWriteArrayList<>();\n-\n-   public ClassWhiteList() {\n-      this(Collections.emptySet(), Collections.emptyList());\n-   }\n-\n-   public ClassWhiteList(List<String> regexps) {\n-      this(Collections.emptySet(), regexps);\n-   }\n-\n-   public ClassWhiteList(Collection<String> classes, List<String> regexps) {\n-      Collection<String> classList = requireNonNull(classes, \"Classes must not be null\");\n-      Collection<String> regexList = requireNonNull(regexps, \"Regexps must not be null\");\n-      this.classes.addAll(classList);\n-      this.regexps.addAll(regexList);\n-      this.compiled.addAll(this.regexps.stream().map(Pattern::compile).collect(Collectors.toList()));\n-   }\n-\n-   public boolean isSafeClass(String className) {\n-      // Test for classes first (faster)\n-      boolean isClassAllowed = classes.contains(className);\n-      if (isClassAllowed) return true;\n-      boolean regexMatch = compiled.stream().anyMatch(p -> p.matcher(className).find());\n-      if (regexMatch) {\n-         // Add the class name to the classes set to avoid future regex checks\n-         classes.add(className);\n-         return true;\n-      }\n-      if (log.isTraceEnabled())\n-         log.tracef(\"Class '%s' not in whitelist\", className);\n-      return false;\n-   }\n-\n-   public void addClasses(Class<?>... classes) {\n-      stream(classes).forEach(c -> this.classes.add(c.getName()));\n-   }\n-\n-   public void addClasses(String... classes) {\n-      this.classes.addAll(Arrays.asList(classes));\n-   }\n-\n-   public void addRegexps(String... regexps) {\n-      this.regexps.addAll(asList(regexps));\n-      this.compiled.addAll(stream(regexps).map(Pattern::compile).collect(Collectors.toList()));\n-   }\n-\n-   public void read(ClassWhiteList whiteList) {\n-      this.regexps.addAll(whiteList.regexps);\n-      this.compiled.addAll(whiteList.compiled);\n-      this.classes.addAll(whiteList.classes);\n-   }\n+ * @deprecated since 12.0. Will be removed in 14.0. Use {@link ClassAllowList}.\n+ **/\n+@Deprecated\n+public final class ClassWhiteList extends ClassAllowList {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d998022752a052085f65fbae83c090e108d38665"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NzI2OA==", "bodyText": "Done", "url": "https://github.com/infinispan/infinispan/pull/8541#discussion_r462167268", "createdAt": "2020-07-29T09:31:55Z", "author": {"login": "tristantarrant"}, "path": "commons/all/src/main/java/org/infinispan/commons/configuration/ClassWhiteList.java", "diffHunk": "@@ -1,153 +1,8 @@\n package org.infinispan.commons.configuration;\n \n-import static java.util.Arrays.asList;\n-import static java.util.Arrays.stream;\n-import static java.util.Objects.requireNonNull;\n-\n-import java.math.BigDecimal;\n-import java.math.BigInteger;\n-import java.time.Instant;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.concurrent.CopyOnWriteArraySet;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-\n-import org.infinispan.commons.logging.Log;\n-import org.infinispan.commons.logging.LogFactory;\n-\n /**\n- * The {@link ClassWhiteList} maintains classes definitions either by name or regular expression and is used for\n- * permissioning.\n- * <p>\n- * By default it includes regular expressions from the system property \"infinispan.deserialization.whitelist.regexps\"\n- * and fully qualified class names from \"infinispan.deserialization.whitelist.classes\".\n- * <p>\n- * Classes are checked first against the set of class names, and in case not present each of the regular expressions are\n- * evaluated in the order supplied.\n- *\n- * @since 9.4\n- */\n-public final class ClassWhiteList {\n-\n-   private static final Log log = LogFactory.getLog(ClassWhiteList.class);\n-\n-   private static final String CLASSES_PROPERTY_NAME = \"infinispan.deserialization.whitelist.classes\";\n-   private static final String REGEXPS_PROPERTY_NAME = \"infinispan.deserialization.whitelist.regexps\";\n-\n-   private static final Set<String> SYS_ALLOWED_CLASSES = new HashSet<>();\n-   private static final List<String> SYS_ALLOWED_REGEXP = new ArrayList<>();\n-\n-   static {\n-      // Classes always allowed\n-      // Primitive Arrays\n-      SYS_ALLOWED_CLASSES.add(byte[].class.getName());\n-      SYS_ALLOWED_CLASSES.add(short[].class.getName());\n-      SYS_ALLOWED_CLASSES.add(int[].class.getName());\n-      SYS_ALLOWED_CLASSES.add(long[].class.getName());\n-      SYS_ALLOWED_CLASSES.add(float[].class.getName());\n-      SYS_ALLOWED_CLASSES.add(double[].class.getName());\n-      SYS_ALLOWED_CLASSES.add(char[].class.getName());\n-      SYS_ALLOWED_CLASSES.add(boolean[].class.getName());\n-\n-      // Boxed Primitives\n-      SYS_ALLOWED_CLASSES.add(Byte.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Short.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Integer.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Long.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Float.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Double.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Character.class.getName());\n-      SYS_ALLOWED_CLASSES.add(String.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Boolean.class.getName());\n-\n-      // Java.math\n-      SYS_ALLOWED_CLASSES.add(BigInteger.class.getName());\n-      SYS_ALLOWED_CLASSES.add(BigDecimal.class.getName());\n-\n-      // Java.time\n-      SYS_ALLOWED_CLASSES.add(Instant.class.getName());\n-      SYS_ALLOWED_CLASSES.add(\"java.time.Ser\");\n-\n-\n-      // Util\n-      SYS_ALLOWED_CLASSES.add(Date.class.getName());\n-\n-      // Misc\n-      SYS_ALLOWED_CLASSES.add(Enum.class.getName());\n-      SYS_ALLOWED_CLASSES.add(Number.class.getName());\n-\n-      // Reference array regex, for arrray representations of allowed classes e.g '[Ljava.lang.Byte;'\n-      SYS_ALLOWED_REGEXP.add(\"^\\\\[[\\\\[L].*\\\\;$\");\n-\n-      String regexps = System.getProperty(REGEXPS_PROPERTY_NAME);\n-      if (regexps != null) {\n-         SYS_ALLOWED_REGEXP.addAll(asList(regexps.trim().split(\",\")));\n-      }\n-      String cls = System.getProperty(CLASSES_PROPERTY_NAME);\n-      if (cls != null) {\n-         SYS_ALLOWED_CLASSES.addAll(asList(cls.trim().split(\",\")));\n-      }\n-   }\n-\n-   private final Set<String> classes = new CopyOnWriteArraySet<>(SYS_ALLOWED_CLASSES);\n-   private final List<String> regexps = new CopyOnWriteArrayList<>(SYS_ALLOWED_REGEXP);\n-   private final List<Pattern> compiled = new CopyOnWriteArrayList<>();\n-\n-   public ClassWhiteList() {\n-      this(Collections.emptySet(), Collections.emptyList());\n-   }\n-\n-   public ClassWhiteList(List<String> regexps) {\n-      this(Collections.emptySet(), regexps);\n-   }\n-\n-   public ClassWhiteList(Collection<String> classes, List<String> regexps) {\n-      Collection<String> classList = requireNonNull(classes, \"Classes must not be null\");\n-      Collection<String> regexList = requireNonNull(regexps, \"Regexps must not be null\");\n-      this.classes.addAll(classList);\n-      this.regexps.addAll(regexList);\n-      this.compiled.addAll(this.regexps.stream().map(Pattern::compile).collect(Collectors.toList()));\n-   }\n-\n-   public boolean isSafeClass(String className) {\n-      // Test for classes first (faster)\n-      boolean isClassAllowed = classes.contains(className);\n-      if (isClassAllowed) return true;\n-      boolean regexMatch = compiled.stream().anyMatch(p -> p.matcher(className).find());\n-      if (regexMatch) {\n-         // Add the class name to the classes set to avoid future regex checks\n-         classes.add(className);\n-         return true;\n-      }\n-      if (log.isTraceEnabled())\n-         log.tracef(\"Class '%s' not in whitelist\", className);\n-      return false;\n-   }\n-\n-   public void addClasses(Class<?>... classes) {\n-      stream(classes).forEach(c -> this.classes.add(c.getName()));\n-   }\n-\n-   public void addClasses(String... classes) {\n-      this.classes.addAll(Arrays.asList(classes));\n-   }\n-\n-   public void addRegexps(String... regexps) {\n-      this.regexps.addAll(asList(regexps));\n-      this.compiled.addAll(stream(regexps).map(Pattern::compile).collect(Collectors.toList()));\n-   }\n-\n-   public void read(ClassWhiteList whiteList) {\n-      this.regexps.addAll(whiteList.regexps);\n-      this.compiled.addAll(whiteList.compiled);\n-      this.classes.addAll(whiteList.classes);\n-   }\n+ * @deprecated since 12.0. Will be removed in 14.0. Use {@link ClassAllowList}.\n+ **/\n+@Deprecated\n+public final class ClassWhiteList extends ClassAllowList {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NjgwOA=="}, "originalCommit": {"oid": "d998022752a052085f65fbae83c090e108d38665"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3992, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}