{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MzQyNzI0", "number": 8026, "title": "ISPN-11050 StreamDistPartitionHandlingTest.testUsingIteratorButPartit\u2026", "bodyText": "\u2026ionOccursAfterRetrievingRemoteValues random failures\nhttps://issues.redhat.com/browse/ISPN-11050", "createdAt": "2020-03-10T20:15:52Z", "url": "https://github.com/infinispan/infinispan/pull/8026", "merged": true, "mergeCommit": {"oid": "a9314af798c2ce2fd9cdca0493676d9d9d479001"}, "closed": true, "closedAt": "2020-03-13T14:42:40Z", "author": {"login": "wburns"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcM9GUWgFqTM3MzYxMzI5NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNRVAtAFqTM3NDM1MjE4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNjEzMjk1", "url": "https://github.com/infinispan/infinispan/pull/8026#pullrequestreview-373613295", "createdAt": "2020-03-12T14:37:21Z", "commit": {"oid": "8c7e06140530ca8fdca5db055bbd2fb8187c7182"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDozNzoyMVrOF1hYCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTowNDoxMFrOF1ih1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY2NTY3Mw==", "bodyText": "I suggest extracting a variable for the executor.\nCurrently even CheckPoint.future() has an executor parameter, so that we don't block the main thread that's triggering the event, but I wonder if we could make the executor a CheckPoint constructor parameter and always use AbstractInfinispanTest.testExecutor().", "url": "https://github.com/infinispan/infinispan/pull/8026#discussion_r391665673", "createdAt": "2020-03-12T14:37:21Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/partitionhandling/StreamDistPartitionHandlingTest.java", "diffHunk": "@@ -81,7 +87,8 @@ public void testUsingIteratorButPartitionOccursBeforeRetrievingRemoteValues() th\n       // We let the completeable future be returned - but don't let it process the values yet\n       iteratorCP.triggerForever(Mocks.BEFORE_RELEASE);\n       // This must be before the stream is generated or else it won't see the update\n-      blockUntilRemoteNodesRespond(iteratorCP, cache0);\n+      blockUntilRemoteNodesRespond(iteratorCP, cache0, TestingUtil.extractGlobalComponent(cache0.getCacheManager(),\n+            Executor.class, KnownComponentNames.BLOCKING_EXECUTOR));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7e06140530ca8fdca5db055bbd2fb8187c7182"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3MDI1NQ==", "bodyText": "I feel like this obfuscates things a bit, because the CP doesn't block by itself, so the comment should be about who's waiting on those CP events.", "url": "https://github.com/infinispan/infinispan/pull/8026#discussion_r391670255", "createdAt": "2020-03-12T14:44:02Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/partitionhandling/StreamDistPartitionHandlingTest.java", "diffHunk": "@@ -119,11 +126,20 @@ public void testUsingIteratorButPartitionOccursAfterRetrievingRemoteValues() thr\n       cache0.put(new MagicKey(cache(1), cache(2)), \"not-local\");\n       cache0.put(new MagicKey(cache(0), cache(1)), \"local\");\n \n+      CheckPoint iteratorCP = new CheckPoint();\n+      // Let the iterator CP just continue without blocking", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7e06140530ca8fdca5db055bbd2fb8187c7182"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3Mjk0NQ==", "bodyText": "The method name suggests that we're waiting for an event here, but looking at the implementation it looks like the publisher is going to block until we unblock it?\nblockUntilRemoteNodesRespond() has the same problem of appearing to block the current thread at the call site but actually blocking something else.", "url": "https://github.com/infinispan/infinispan/pull/8026#discussion_r391672945", "createdAt": "2020-03-12T14:47:52Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/partitionhandling/StreamDistPartitionHandlingTest.java", "diffHunk": "@@ -119,11 +126,20 @@ public void testUsingIteratorButPartitionOccursAfterRetrievingRemoteValues() thr\n       cache0.put(new MagicKey(cache(1), cache(2)), \"not-local\");\n       cache0.put(new MagicKey(cache(0), cache(1)), \"local\");\n \n+      CheckPoint iteratorCP = new CheckPoint();\n+      // Let the iterator CP just continue without blocking\n+      iteratorCP.triggerForever(Mocks.BEFORE_RELEASE);\n+      iteratorCP.triggerForever(Mocks.AFTER_RELEASE);\n+\n+      blockUntilPublisherComplete(iteratorCP, cache0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7e06140530ca8fdca5db055bbd2fb8187c7182"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY4NDU2NA==", "bodyText": "If at all possible, I'd rather create a mock that delegates to the existing component instead of using spy().\nThe instance created by spy() has all the annotations, so after copying the state of the existing component (without any synchronization), the component registry will call start() on the new instance, which may break things.\nOf course, using mock() has the opposite problem: the component registry won't call stop() on it, which depending on component may hang the test during shutdown. For this reason I've usually written a custom mock class for the component I'm mocking, but it should be possible to use a generic AbstractMockComponent class that delegates injection/start/stop and then use mock(AbstractMockComponent.class, withSettings.additionalInterfaces(componentClass) to implement the needed interface.\nAnd after writing all of this I realize it's probably too much for this PR, which is merely moving the method...\nI'll put it on my TODO list and maybe get to it at some point :)", "url": "https://github.com/infinispan/infinispan/pull/8026#discussion_r391684564", "createdAt": "2020-03-12T15:04:10Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/test/Mocks.java", "diffHunk": "@@ -208,4 +214,20 @@ private Mocks() { }\n          blockingPublisher((Subscriber<? super E> innerSubscriber) -> publisher.subscribe(innerSubscriber, complete), checkPoint).subscribe(s);\n       };\n    }\n+\n+   /**\n+    * Replaces the given component with a spy and returns it for further mocking as needed. Note the original component\n+    * is not retrieved and thus requires retrieving before invoking this method if needed.\n+    * @param cache the cache to get the component from\n+    * @param componentClass the class of the component to retrieve\n+    * @param <C> the component class\n+    * @return the spied component which has already been replaced and wired in the cache\n+    */\n+   public static <C> C replaceComponentWithSpy(Cache<?,?> cache, Class<C> componentClass) {\n+      C component = TestingUtil.extractComponent(cache, componentClass);\n+      C spiedComponent = spy(component);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7e06140530ca8fdca5db055bbd2fb8187c7182"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2df96f6a0a7e094482634d4e2ff160882fd5df6b", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/2df96f6a0a7e094482634d4e2ff160882fd5df6b", "committedDate": "2020-03-12T18:53:11Z", "message": "ISPN-11050 StreamDistPartitionHandlingTest.testUsingIteratorButPartitionOccursAfterRetrievingRemoteValues random failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c7e06140530ca8fdca5db055bbd2fb8187c7182", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/8c7e06140530ca8fdca5db055bbd2fb8187c7182", "committedDate": "2020-03-10T20:15:32Z", "message": "ISPN-11050 StreamDistPartitionHandlingTest.testUsingIteratorButPartitionOccursAfterRetrievingRemoteValues random failures"}, "afterCommit": {"oid": "2df96f6a0a7e094482634d4e2ff160882fd5df6b", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/2df96f6a0a7e094482634d4e2ff160882fd5df6b", "committedDate": "2020-03-12T18:53:11Z", "message": "ISPN-11050 StreamDistPartitionHandlingTest.testUsingIteratorButPartitionOccursAfterRetrievingRemoteValues random failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MzUyMTgx", "url": "https://github.com/infinispan/infinispan/pull/8026#pullrequestreview-374352181", "createdAt": "2020-03-13T14:38:26Z", "commit": {"oid": "2df96f6a0a7e094482634d4e2ff160882fd5df6b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1095, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}