{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2ODQzNTUw", "number": 8832, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjoxNDoxNVrOE2Jexg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo1MDoyMVrOE4ynWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjEzODk0OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/config_examples/jgroups_asym_encrypt.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjoxNDoxNVrOHu0WOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1NzoxMFrOHu18kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1NDIwMQ==", "bodyText": "@tristantarrant I'd like to backport this PR to 11 but INSERT_BEFORE isn't available. I'm not sure how to use stack.combine to get SSL_KEY_EXCHANGE and ASYM_ENCRYPT in the stack before pbcast.NAKACK2. Any recommendations?", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r518854201", "createdAt": "2020-11-06T16:14:15Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/config_examples/jgroups_asym_encrypt.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<infinispan>\n+    <jgroups>\n+         <stack name=\"encrypt-tcp\" extends=\"tcp\"> <1>\n+           <SSL_KEY_EXCHANGE keystore_name=\"mykeystore.jks\" <2>\n+                             keystore_password=\"changeit\" <3>\n+                             stack.combine=\"INSERT_AFTER\"\n+                             stack.position=\"VERIFY_SUSPECT\"/> <4>\n+           <ASYM_ENCRYPT asym_keylength=\"512\" <5>\n+                    asym_algorithm=\"RSA\" <6>\n+                    change_key_on_coord_leave = \"false\" <7>\n+                    change_key_on_leave = \"false\" <8>\n+                    use_external_key_exchange = \"true\" <9>\n+                    stack.combine=\"INSERT_BEFORE\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a50ea88ef05c8e52b330ba4a7fab6a8e01baf7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3NTEyMw==", "bodyText": "Well, since our stacks all have VERIFY_SUSPECT above pbcast.NAKACK2 just use INSERT_AFTER with that. Not ideal, but saves us from backporting", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r518875123", "createdAt": "2020-11-06T16:48:29Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/topics/config_examples/jgroups_asym_encrypt.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<infinispan>\n+    <jgroups>\n+         <stack name=\"encrypt-tcp\" extends=\"tcp\"> <1>\n+           <SSL_KEY_EXCHANGE keystore_name=\"mykeystore.jks\" <2>\n+                             keystore_password=\"changeit\" <3>\n+                             stack.combine=\"INSERT_AFTER\"\n+                             stack.position=\"VERIFY_SUSPECT\"/> <4>\n+           <ASYM_ENCRYPT asym_keylength=\"512\" <5>\n+                    asym_algorithm=\"RSA\" <6>\n+                    change_key_on_coord_leave = \"false\" <7>\n+                    change_key_on_leave = \"false\" <8>\n+                    use_external_key_exchange = \"true\" <9>\n+                    stack.combine=\"INSERT_BEFORE\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1NDIwMQ=="}, "originalCommit": {"oid": "f4a50ea88ef05c8e52b330ba4a7fab6a8e01baf7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3Nzg2OQ==", "bodyText": "Right but the problem I've found is that I can't use INSERT_AFTER with both SSL_KEY_EXCHANGE and ASYM_ENCRYPT.", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r518877869", "createdAt": "2020-11-06T16:53:00Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/config_examples/jgroups_asym_encrypt.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<infinispan>\n+    <jgroups>\n+         <stack name=\"encrypt-tcp\" extends=\"tcp\"> <1>\n+           <SSL_KEY_EXCHANGE keystore_name=\"mykeystore.jks\" <2>\n+                             keystore_password=\"changeit\" <3>\n+                             stack.combine=\"INSERT_AFTER\"\n+                             stack.position=\"VERIFY_SUSPECT\"/> <4>\n+           <ASYM_ENCRYPT asym_keylength=\"512\" <5>\n+                    asym_algorithm=\"RSA\" <6>\n+                    change_key_on_coord_leave = \"false\" <7>\n+                    change_key_on_leave = \"false\" <8>\n+                    use_external_key_exchange = \"true\" <9>\n+                    stack.combine=\"INSERT_BEFORE\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1NDIwMQ=="}, "originalCommit": {"oid": "f4a50ea88ef05c8e52b330ba4a7fab6a8e01baf7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MDQwMQ==", "bodyText": "Actually it looks like it's OK if I do this (on 11):\n<SSL_KEY_EXCHANGE ... stack.combine=\"INSERT_AFTER\" stack.position=\"VERIFY_SUSPECT\"/>\n<ASYM_ENCRYPT ... stack.combine=\"INSERT_AFTER\" stack.position=\"SSL_KEY_EXCHANGE\"/>\n\nThat seems to work fine. I'll update with that config when I create the backport for this content to 11 (unless you see anything wrong with it). Thanks.", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r518880401", "createdAt": "2020-11-06T16:57:10Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/config_examples/jgroups_asym_encrypt.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<infinispan>\n+    <jgroups>\n+         <stack name=\"encrypt-tcp\" extends=\"tcp\"> <1>\n+           <SSL_KEY_EXCHANGE keystore_name=\"mykeystore.jks\" <2>\n+                             keystore_password=\"changeit\" <3>\n+                             stack.combine=\"INSERT_AFTER\"\n+                             stack.position=\"VERIFY_SUSPECT\"/> <4>\n+           <ASYM_ENCRYPT asym_keylength=\"512\" <5>\n+                    asym_algorithm=\"RSA\" <6>\n+                    change_key_on_coord_leave = \"false\" <7>\n+                    change_key_on_leave = \"false\" <8>\n+                    use_external_key_exchange = \"true\" <9>\n+                    stack.combine=\"INSERT_BEFORE\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1NDIwMQ=="}, "originalCommit": {"oid": "f4a50ea88ef05c8e52b330ba4a7fab6a8e01baf7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTY4ODk0OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/config_examples/jgroups_asym_encrypt.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODowNjo0N1rOHy5efA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDozOToyNVrOH0BsJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzMjU0MA==", "bodyText": "what kind of security are we trying to achieve here? RSA 512 bits isn't secure since 2000 and can be crack in a couple of hours currently.", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523132540", "createdAt": "2020-11-13T18:06:47Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/config_examples/jgroups_asym_encrypt.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<infinispan>\n+    <jgroups>\n+         <stack name=\"encrypt-tcp\" extends=\"tcp\"> <1>\n+           <SSL_KEY_EXCHANGE keystore_name=\"mykeystore.jks\" <2>\n+                             keystore_password=\"changeit\" <3>\n+                             stack.combine=\"INSERT_AFTER\"\n+                             stack.position=\"VERIFY_SUSPECT\"/> <4>\n+           <ASYM_ENCRYPT asym_keylength=\"512\" <5>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDExNTM0OQ==", "bodyText": "@pruivo Well spotted. Do you think we should change to 2048 or is there something better?", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r524115349", "createdAt": "2020-11-16T10:52:50Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/config_examples/jgroups_asym_encrypt.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<infinispan>\n+    <jgroups>\n+         <stack name=\"encrypt-tcp\" extends=\"tcp\"> <1>\n+           <SSL_KEY_EXCHANGE keystore_name=\"mykeystore.jks\" <2>\n+                             keystore_password=\"changeit\" <3>\n+                             stack.combine=\"INSERT_AFTER\"\n+                             stack.position=\"VERIFY_SUSPECT\"/> <4>\n+           <ASYM_ENCRYPT asym_keylength=\"512\" <5>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzMjU0MA=="}, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMxNTY4Nw==", "bodyText": "2048 is fine. You have 4096 if you want to be safe for the next +1000 years or so xD", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r524315687", "createdAt": "2020-11-16T14:39:25Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/config_examples/jgroups_asym_encrypt.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<infinispan>\n+    <jgroups>\n+         <stack name=\"encrypt-tcp\" extends=\"tcp\"> <1>\n+           <SSL_KEY_EXCHANGE keystore_name=\"mykeystore.jks\" <2>\n+                             keystore_password=\"changeit\" <3>\n+                             stack.combine=\"INSERT_AFTER\"\n+                             stack.position=\"VERIFY_SUSPECT\"/> <4>\n+           <ASYM_ENCRYPT asym_keylength=\"512\" <5>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzMjU0MA=="}, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTc4Mjg2OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODozMjoxM1rOHy6ZQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNzo0NTozNVrOHzdbsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE0NzU4Nw==", "bodyText": "is the public key encrypted? @belaban ?", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523147587", "createdAt": "2020-11-13T18:32:13Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "diffHunk": "@@ -0,0 +1,49 @@\n+[id='jgroups_encryption-{context}']\n+= {brandname} Cluster Security\n+To secure cluster traffic, you configure {brandname} nodes to encrypt JGroups message payloads with secret keys.\n+\n+{brandname} nodes can obtain secret keys from either:\n+\n+* The coordinator node (asymmetric encryption).\n+* A shared keystore (symmetric encryption).\n+\n+.Retrieving secret keys from coordinator nodes\n+\n+You configure asymmetric encryption by adding the `ASYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to generate and distribute secret keys.\n+\n+[IMPORTANT]\n+====\n+When using asymmetric encryption, you should also provide keystores so that nodes can perform certificate authentication and securely exchange secret keys.\n+This protects your cluster from man-in-the-middle (MitM) attacks.\n+====\n+\n+Asymmetric encryption secures cluster traffic as follows:\n+\n+. The first node in the {brandname} cluster, the coordinator node, generates a secret key.\n+. A joining node performs certificate authentication with the coordinator to mutually verify identity.\n+. The joining node requests the secret key from the coordinator node. That request includes the public key for the joining node.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcyMTY0OA==", "bodyText": "@pruivo If this is with SSL_ENCRYPT, then the entire request goes out over SSL, so, yes.", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523721648", "createdAt": "2020-11-15T07:45:35Z", "author": {"login": "belaban"}, "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "diffHunk": "@@ -0,0 +1,49 @@\n+[id='jgroups_encryption-{context}']\n+= {brandname} Cluster Security\n+To secure cluster traffic, you configure {brandname} nodes to encrypt JGroups message payloads with secret keys.\n+\n+{brandname} nodes can obtain secret keys from either:\n+\n+* The coordinator node (asymmetric encryption).\n+* A shared keystore (symmetric encryption).\n+\n+.Retrieving secret keys from coordinator nodes\n+\n+You configure asymmetric encryption by adding the `ASYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to generate and distribute secret keys.\n+\n+[IMPORTANT]\n+====\n+When using asymmetric encryption, you should also provide keystores so that nodes can perform certificate authentication and securely exchange secret keys.\n+This protects your cluster from man-in-the-middle (MitM) attacks.\n+====\n+\n+Asymmetric encryption secures cluster traffic as follows:\n+\n+. The first node in the {brandname} cluster, the coordinator node, generates a secret key.\n+. A joining node performs certificate authentication with the coordinator to mutually verify identity.\n+. The joining node requests the secret key from the coordinator node. That request includes the public key for the joining node.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE0NzU4Nw=="}, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTc4ODMxOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODozMzo1MlrOHy6dCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODozMzo1MlrOHy6dCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE0ODU1Mw==", "bodyText": "is the message signed? what if an attacker injects a message with some other key encrypted (basically a DoS attack)?\n//crap, I'm overthinking again...", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523148553", "createdAt": "2020-11-13T18:33:52Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "diffHunk": "@@ -0,0 +1,49 @@\n+[id='jgroups_encryption-{context}']\n+= {brandname} Cluster Security\n+To secure cluster traffic, you configure {brandname} nodes to encrypt JGroups message payloads with secret keys.\n+\n+{brandname} nodes can obtain secret keys from either:\n+\n+* The coordinator node (asymmetric encryption).\n+* A shared keystore (symmetric encryption).\n+\n+.Retrieving secret keys from coordinator nodes\n+\n+You configure asymmetric encryption by adding the `ASYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to generate and distribute secret keys.\n+\n+[IMPORTANT]\n+====\n+When using asymmetric encryption, you should also provide keystores so that nodes can perform certificate authentication and securely exchange secret keys.\n+This protects your cluster from man-in-the-middle (MitM) attacks.\n+====\n+\n+Asymmetric encryption secures cluster traffic as follows:\n+\n+. The first node in the {brandname} cluster, the coordinator node, generates a secret key.\n+. A joining node performs certificate authentication with the coordinator to mutually verify identity.\n+. The joining node requests the secret key from the coordinator node. That request includes the public key for the joining node.\n+. The coordinator node encrypts the secret key with the public key and returns it to the joining node.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTgyMTIyOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0MTo0MlrOHy6xjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOTowNDoxM1rOH1jl1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1MzgwNg==", "bodyText": "@belaban can you comment on what \"faster\" means here? If I understood the description properly, the asymmetric algorithm is only used to exchange the session key. Then, all messages are encrypted with a symmetric algorithm (so as in SYM_ENCRYPT); so the performance should be the same (assuming the same sym algo)", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523153806", "createdAt": "2020-11-13T18:41:42Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "diffHunk": "@@ -0,0 +1,49 @@\n+[id='jgroups_encryption-{context}']\n+= {brandname} Cluster Security\n+To secure cluster traffic, you configure {brandname} nodes to encrypt JGroups message payloads with secret keys.\n+\n+{brandname} nodes can obtain secret keys from either:\n+\n+* The coordinator node (asymmetric encryption).\n+* A shared keystore (symmetric encryption).\n+\n+.Retrieving secret keys from coordinator nodes\n+\n+You configure asymmetric encryption by adding the `ASYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to generate and distribute secret keys.\n+\n+[IMPORTANT]\n+====\n+When using asymmetric encryption, you should also provide keystores so that nodes can perform certificate authentication and securely exchange secret keys.\n+This protects your cluster from man-in-the-middle (MitM) attacks.\n+====\n+\n+Asymmetric encryption secures cluster traffic as follows:\n+\n+. The first node in the {brandname} cluster, the coordinator node, generates a secret key.\n+. A joining node performs certificate authentication with the coordinator to mutually verify identity.\n+. The joining node requests the secret key from the coordinator node. That request includes the public key for the joining node.\n+. The coordinator node encrypts the secret key with the public key and returns it to the joining node.\n+. The joining node decrypts and installs the secret key.\n+. The node joins the cluster, encrypting and decrypting messages with the secret key.\n+\n+.Retrieving secret keys from shared keystores\n+\n+You configure symmetric encryption by adding the `SYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to obtain secret keys from keystores that you provide.\n+\n+. Nodes install the secret key from a keystore on the {brandname} classpath at startup.\n+. Node join clusters, encrypting and decrypting messages with the secret key.\n+\n+.Comparison of asymmetric and symmetric encryption\n+\n+`ASYM_ENCRYPT` with certificate authentication provides an additional layer of encryption in comparison with `SYM_ENCRYPT`.\n+You provide keystores that encrypt the requests to coordinator nodes for the secret key.\n+{brandname} automatically generates that secret key and handles cluster traffic, while letting you specify when to generate secret keys.\n+For example, you can configure clusters to generate new secret keys when nodes leave.\n+This ensures that nodes cannot bypass certificate authentication and join with old keys.\n+\n+`SYM_ENCRYPT`, on the other hand, is faster than `ASYM_ENCRYPT` because nodes install secret keys directly from keystores, rather than over the network.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcyMTc1NQ==", "bodyText": "Faster means that establishment of a connection is faster with SYM_ENCRYPT, as we don't need to exchange keys first. After that, during regular operation, both protocols have the same speed.", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523721755", "createdAt": "2020-11-15T07:46:49Z", "author": {"login": "belaban"}, "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "diffHunk": "@@ -0,0 +1,49 @@\n+[id='jgroups_encryption-{context}']\n+= {brandname} Cluster Security\n+To secure cluster traffic, you configure {brandname} nodes to encrypt JGroups message payloads with secret keys.\n+\n+{brandname} nodes can obtain secret keys from either:\n+\n+* The coordinator node (asymmetric encryption).\n+* A shared keystore (symmetric encryption).\n+\n+.Retrieving secret keys from coordinator nodes\n+\n+You configure asymmetric encryption by adding the `ASYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to generate and distribute secret keys.\n+\n+[IMPORTANT]\n+====\n+When using asymmetric encryption, you should also provide keystores so that nodes can perform certificate authentication and securely exchange secret keys.\n+This protects your cluster from man-in-the-middle (MitM) attacks.\n+====\n+\n+Asymmetric encryption secures cluster traffic as follows:\n+\n+. The first node in the {brandname} cluster, the coordinator node, generates a secret key.\n+. A joining node performs certificate authentication with the coordinator to mutually verify identity.\n+. The joining node requests the secret key from the coordinator node. That request includes the public key for the joining node.\n+. The coordinator node encrypts the secret key with the public key and returns it to the joining node.\n+. The joining node decrypts and installs the secret key.\n+. The node joins the cluster, encrypting and decrypting messages with the secret key.\n+\n+.Retrieving secret keys from shared keystores\n+\n+You configure symmetric encryption by adding the `SYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to obtain secret keys from keystores that you provide.\n+\n+. Nodes install the secret key from a keystore on the {brandname} classpath at startup.\n+. Node join clusters, encrypting and decrypting messages with the secret key.\n+\n+.Comparison of asymmetric and symmetric encryption\n+\n+`ASYM_ENCRYPT` with certificate authentication provides an additional layer of encryption in comparison with `SYM_ENCRYPT`.\n+You provide keystores that encrypt the requests to coordinator nodes for the secret key.\n+{brandname} automatically generates that secret key and handles cluster traffic, while letting you specify when to generate secret keys.\n+For example, you can configure clusters to generate new secret keys when nodes leave.\n+This ensures that nodes cannot bypass certificate authentication and join with old keys.\n+\n+`SYM_ENCRYPT`, on the other hand, is faster than `ASYM_ENCRYPT` because nodes install secret keys directly from keystores, rather than over the network.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1MzgwNg=="}, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDExMzYyNA==", "bodyText": "Thanks for the comments here, guys. @pruivo Does the \"because nodes install ...\" phrase not convey the reason why SYM_ENCRYPT is faster? Each node just gets the key from the keystore on it's classpath instead of having to do key exchange with the coordinator, because joining nodes send their public keys to get the secret key from the coordinator. Actually I think I'll just reword to something like this. Cheers. \ud83d\ude38", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r524113624", "createdAt": "2020-11-16T10:51:19Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "diffHunk": "@@ -0,0 +1,49 @@\n+[id='jgroups_encryption-{context}']\n+= {brandname} Cluster Security\n+To secure cluster traffic, you configure {brandname} nodes to encrypt JGroups message payloads with secret keys.\n+\n+{brandname} nodes can obtain secret keys from either:\n+\n+* The coordinator node (asymmetric encryption).\n+* A shared keystore (symmetric encryption).\n+\n+.Retrieving secret keys from coordinator nodes\n+\n+You configure asymmetric encryption by adding the `ASYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to generate and distribute secret keys.\n+\n+[IMPORTANT]\n+====\n+When using asymmetric encryption, you should also provide keystores so that nodes can perform certificate authentication and securely exchange secret keys.\n+This protects your cluster from man-in-the-middle (MitM) attacks.\n+====\n+\n+Asymmetric encryption secures cluster traffic as follows:\n+\n+. The first node in the {brandname} cluster, the coordinator node, generates a secret key.\n+. A joining node performs certificate authentication with the coordinator to mutually verify identity.\n+. The joining node requests the secret key from the coordinator node. That request includes the public key for the joining node.\n+. The coordinator node encrypts the secret key with the public key and returns it to the joining node.\n+. The joining node decrypts and installs the secret key.\n+. The node joins the cluster, encrypting and decrypting messages with the secret key.\n+\n+.Retrieving secret keys from shared keystores\n+\n+You configure symmetric encryption by adding the `SYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to obtain secret keys from keystores that you provide.\n+\n+. Nodes install the secret key from a keystore on the {brandname} classpath at startup.\n+. Node join clusters, encrypting and decrypting messages with the secret key.\n+\n+.Comparison of asymmetric and symmetric encryption\n+\n+`ASYM_ENCRYPT` with certificate authentication provides an additional layer of encryption in comparison with `SYM_ENCRYPT`.\n+You provide keystores that encrypt the requests to coordinator nodes for the secret key.\n+{brandname} automatically generates that secret key and handles cluster traffic, while letting you specify when to generate secret keys.\n+For example, you can configure clusters to generate new secret keys when nodes leave.\n+This ensures that nodes cannot bypass certificate authentication and join with old keys.\n+\n+`SYM_ENCRYPT`, on the other hand, is faster than `ASYM_ENCRYPT` because nodes install secret keys directly from keystores, rather than over the network.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1MzgwNg=="}, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyMDc0MQ==", "bodyText": "@oraNod I wanted to be sure if there isn't anything weird happening in the background.\nUsually, the network latency is quite low, so the time to install the key from the coordinator or the latency accessing the disk to install from the file (keystore) shouldn't differ much (IMO, of course, I could be wrong eh eh).", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r524320741", "createdAt": "2020-11-16T14:46:07Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "diffHunk": "@@ -0,0 +1,49 @@\n+[id='jgroups_encryption-{context}']\n+= {brandname} Cluster Security\n+To secure cluster traffic, you configure {brandname} nodes to encrypt JGroups message payloads with secret keys.\n+\n+{brandname} nodes can obtain secret keys from either:\n+\n+* The coordinator node (asymmetric encryption).\n+* A shared keystore (symmetric encryption).\n+\n+.Retrieving secret keys from coordinator nodes\n+\n+You configure asymmetric encryption by adding the `ASYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to generate and distribute secret keys.\n+\n+[IMPORTANT]\n+====\n+When using asymmetric encryption, you should also provide keystores so that nodes can perform certificate authentication and securely exchange secret keys.\n+This protects your cluster from man-in-the-middle (MitM) attacks.\n+====\n+\n+Asymmetric encryption secures cluster traffic as follows:\n+\n+. The first node in the {brandname} cluster, the coordinator node, generates a secret key.\n+. A joining node performs certificate authentication with the coordinator to mutually verify identity.\n+. The joining node requests the secret key from the coordinator node. That request includes the public key for the joining node.\n+. The coordinator node encrypts the secret key with the public key and returns it to the joining node.\n+. The joining node decrypts and installs the secret key.\n+. The node joins the cluster, encrypting and decrypting messages with the secret key.\n+\n+.Retrieving secret keys from shared keystores\n+\n+You configure symmetric encryption by adding the `SYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to obtain secret keys from keystores that you provide.\n+\n+. Nodes install the secret key from a keystore on the {brandname} classpath at startup.\n+. Node join clusters, encrypting and decrypting messages with the secret key.\n+\n+.Comparison of asymmetric and symmetric encryption\n+\n+`ASYM_ENCRYPT` with certificate authentication provides an additional layer of encryption in comparison with `SYM_ENCRYPT`.\n+You provide keystores that encrypt the requests to coordinator nodes for the secret key.\n+{brandname} automatically generates that secret key and handles cluster traffic, while letting you specify when to generate secret keys.\n+For example, you can configure clusters to generate new secret keys when nodes leave.\n+This ensures that nodes cannot bypass certificate authentication and join with old keys.\n+\n+`SYM_ENCRYPT`, on the other hand, is faster than `ASYM_ENCRYPT` because nodes install secret keys directly from keystores, rather than over the network.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1MzgwNg=="}, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxMDQxOQ==", "bodyText": "@pruivo I got this from Bela who said \"I would also document SYM_ENCRYPT, as it is faster than ASYM_ENCRYPT.\" I've reworded this a little. Maybe I should trim things down some more and say:\n\"SYM_ENCRYPT, on the other hand, is faster than ASYM_ENCRYPT because nodes do not need to perform key exchange with the cluster coordinator.\"\nAnd drop the bit about \"install secret keys directly from keystores on their classpaths\" - I see your point about latency. WDYT?", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r525510419", "createdAt": "2020-11-17T20:40:14Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "diffHunk": "@@ -0,0 +1,49 @@\n+[id='jgroups_encryption-{context}']\n+= {brandname} Cluster Security\n+To secure cluster traffic, you configure {brandname} nodes to encrypt JGroups message payloads with secret keys.\n+\n+{brandname} nodes can obtain secret keys from either:\n+\n+* The coordinator node (asymmetric encryption).\n+* A shared keystore (symmetric encryption).\n+\n+.Retrieving secret keys from coordinator nodes\n+\n+You configure asymmetric encryption by adding the `ASYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to generate and distribute secret keys.\n+\n+[IMPORTANT]\n+====\n+When using asymmetric encryption, you should also provide keystores so that nodes can perform certificate authentication and securely exchange secret keys.\n+This protects your cluster from man-in-the-middle (MitM) attacks.\n+====\n+\n+Asymmetric encryption secures cluster traffic as follows:\n+\n+. The first node in the {brandname} cluster, the coordinator node, generates a secret key.\n+. A joining node performs certificate authentication with the coordinator to mutually verify identity.\n+. The joining node requests the secret key from the coordinator node. That request includes the public key for the joining node.\n+. The coordinator node encrypts the secret key with the public key and returns it to the joining node.\n+. The joining node decrypts and installs the secret key.\n+. The node joins the cluster, encrypting and decrypting messages with the secret key.\n+\n+.Retrieving secret keys from shared keystores\n+\n+You configure symmetric encryption by adding the `SYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to obtain secret keys from keystores that you provide.\n+\n+. Nodes install the secret key from a keystore on the {brandname} classpath at startup.\n+. Node join clusters, encrypting and decrypting messages with the secret key.\n+\n+.Comparison of asymmetric and symmetric encryption\n+\n+`ASYM_ENCRYPT` with certificate authentication provides an additional layer of encryption in comparison with `SYM_ENCRYPT`.\n+You provide keystores that encrypt the requests to coordinator nodes for the secret key.\n+{brandname} automatically generates that secret key and handles cluster traffic, while letting you specify when to generate secret keys.\n+For example, you can configure clusters to generate new secret keys when nodes leave.\n+This ensures that nodes cannot bypass certificate authentication and join with old keys.\n+\n+`SYM_ENCRYPT`, on the other hand, is faster than `ASYM_ENCRYPT` because nodes install secret keys directly from keystores, rather than over the network.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1MzgwNg=="}, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxOTcwMA==", "bodyText": "sound good \ud83d\udc4d", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r525919700", "createdAt": "2020-11-18T09:04:13Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "diffHunk": "@@ -0,0 +1,49 @@\n+[id='jgroups_encryption-{context}']\n+= {brandname} Cluster Security\n+To secure cluster traffic, you configure {brandname} nodes to encrypt JGroups message payloads with secret keys.\n+\n+{brandname} nodes can obtain secret keys from either:\n+\n+* The coordinator node (asymmetric encryption).\n+* A shared keystore (symmetric encryption).\n+\n+.Retrieving secret keys from coordinator nodes\n+\n+You configure asymmetric encryption by adding the `ASYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to generate and distribute secret keys.\n+\n+[IMPORTANT]\n+====\n+When using asymmetric encryption, you should also provide keystores so that nodes can perform certificate authentication and securely exchange secret keys.\n+This protects your cluster from man-in-the-middle (MitM) attacks.\n+====\n+\n+Asymmetric encryption secures cluster traffic as follows:\n+\n+. The first node in the {brandname} cluster, the coordinator node, generates a secret key.\n+. A joining node performs certificate authentication with the coordinator to mutually verify identity.\n+. The joining node requests the secret key from the coordinator node. That request includes the public key for the joining node.\n+. The coordinator node encrypts the secret key with the public key and returns it to the joining node.\n+. The joining node decrypts and installs the secret key.\n+. The node joins the cluster, encrypting and decrypting messages with the secret key.\n+\n+.Retrieving secret keys from shared keystores\n+\n+You configure symmetric encryption by adding the `SYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to obtain secret keys from keystores that you provide.\n+\n+. Nodes install the secret key from a keystore on the {brandname} classpath at startup.\n+. Node join clusters, encrypting and decrypting messages with the secret key.\n+\n+.Comparison of asymmetric and symmetric encryption\n+\n+`ASYM_ENCRYPT` with certificate authentication provides an additional layer of encryption in comparison with `SYM_ENCRYPT`.\n+You provide keystores that encrypt the requests to coordinator nodes for the secret key.\n+{brandname} automatically generates that secret key and handles cluster traffic, while letting you specify when to generate secret keys.\n+For example, you can configure clusters to generate new secret keys when nodes leave.\n+This ensures that nodes cannot bypass certificate authentication and join with old keys.\n+\n+`SYM_ENCRYPT`, on the other hand, is faster than `ASYM_ENCRYPT` because nodes install secret keys directly from keystores, rather than over the network.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1MzgwNg=="}, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTgyNzgzOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_asym_encrypt.adoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0Mzo0NlrOHy61fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDo1MToyMlrOH1n9kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NDgxMg==", "bodyText": "isn't {server_home}/server/conf?", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523154812", "createdAt": "2020-11-13T18:43:46Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_asym_encrypt.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+[id='configuring_jgroups_asym_encrypt-{context}']\n+= Configuring Cluster Transport with Asymmetric Encryption\n+Configure {brandname} clusters to generate and distribute secret keys that encrypt JGroups messages.\n+\n+.Procedure\n+\n+. Create a keystore with certificate chains that enables {brandname} to verify node identity.\n+. Place the keystore on the classpath for each node in the cluster.\n++\n+For {brandname} Server, you put the keystore in the {server_home} directory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE2NDg1NA==", "bodyText": "actually, use the same path as in https://infinispan.org/docs/stable/titles/server/server.html#configuring_infinispan_log_properties\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For {brandname} Server, you put the keystore in the {server_home} directory.\n          \n          \n            \n            For {brandname} Server, you put the keystore in the `{server_home}/${infinispan.server.root}/conf/` directory.", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523164854", "createdAt": "2020-11-13T19:03:15Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_asym_encrypt.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+[id='configuring_jgroups_asym_encrypt-{context}']\n+= Configuring Cluster Transport with Asymmetric Encryption\n+Configure {brandname} clusters to generate and distribute secret keys that encrypt JGroups messages.\n+\n+.Procedure\n+\n+. Create a keystore with certificate chains that enables {brandname} to verify node identity.\n+. Place the keystore on the classpath for each node in the cluster.\n++\n+For {brandname} Server, you put the keystore in the {server_home} directory.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NDgxMg=="}, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEwNzc5Mg==", "bodyText": "@pruivo I think the keystore needs to be in $ISPN_HOME. if not you the server throws an exception.", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r524107792", "createdAt": "2020-11-16T10:45:57Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_asym_encrypt.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+[id='configuring_jgroups_asym_encrypt-{context}']\n+= Configuring Cluster Transport with Asymmetric Encryption\n+Configure {brandname} clusters to generate and distribute secret keys that encrypt JGroups messages.\n+\n+.Procedure\n+\n+. Create a keystore with certificate chains that enables {brandname} to verify node identity.\n+. Place the keystore on the classpath for each node in the cluster.\n++\n+For {brandname} Server, you put the keystore in the {server_home} directory.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NDgxMg=="}, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5MTMxNQ==", "bodyText": "you're right, as usual :)", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r525991315", "createdAt": "2020-11-18T10:51:22Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_asym_encrypt.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+[id='configuring_jgroups_asym_encrypt-{context}']\n+= Configuring Cluster Transport with Asymmetric Encryption\n+Configure {brandname} clusters to generate and distribute secret keys that encrypt JGroups messages.\n+\n+.Procedure\n+\n+. Create a keystore with certificate chains that enables {brandname} to verify node identity.\n+. Place the keystore on the classpath for each node in the cluster.\n++\n+For {brandname} Server, you put the keystore in the {server_home} directory.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NDgxMg=="}, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTgzNDI4OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_sym_encrypt.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0NTo0MVrOHy65RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0NTo0MVrOHy65RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NTc4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * link:{jgroups_schema}[JGroups 4.2 XSD]\n          \n          \n            \n            * link:{jgroups_schema}[JGroups 4.2 Schema]", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523155780", "createdAt": "2020-11-13T18:45:41Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_sym_encrypt.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+[id='configuring_jgroups_sym_encrypt-{context}']\n+= Configuring Cluster Transport with Symmetric Encryption\n+Configure {brandname} clusters to encrypt JGroups messages with secret keys from keystores that you provide.\n+\n+.Procedure\n+\n+. Create a keystore that contains a secret key.\n+. Place the keystore on the classpath for each node in the cluster.\n++\n+For {brandname} Server, you put the keystore in the {server_home} directory.\n++\n+. Add the `SYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration, as in the following example:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/jgroups_sym_encrypt.xml[]\n+----\n++\n+<1> Creates a secure JGroups stack named \"encrypt-tcp\" that extends the default TCP stack for {brandname}.\n+<2> Names the keystore from which nodes obtain secret keys.\n+<3> Specifies the keystore type. JGroups uses JCEKS by default.\n+<4> Specifies the keystore password.\n+<5> Specifies the secret key password.\n+<6> Specifies the secret key alias.\n+<7> Uses the `stack.combine` and `stack.position` attributes to insert `SYM_ENCRYPT` into the default TCP stack after the `VERIFY_SUSPECT` protocol.\n+<8> Configures the {brandname} cluster to use the secure JGroups stack.\n+\n+.Verification\n+\n+When you start your {brandname} cluster, the following log message indicates that the cluster is using the secure JGroups stack:\n+\n+[source,bash,options=\"nowrap\"]\n+----\n+[org.infinispan.CLUSTER] ISPN000078: Starting JGroups channel cluster with stack <encrypted_stack_name>\n+----\n+\n+{brandname} nodes can join the cluster only if they use `SYM_ENCRYPT` and can obtain the secret key from the shared keystore.\n+Otherwise the following message is written to {brandname} logs:\n+\n+----\n+[org.jgroups.protocols.SYM_ENCRYPT] <hostname>: received message without encrypt header from <hostname>; dropping it\n+----\n+\n+.Reference\n+\n+The example `SYM_ENCRYPT` configuration in this procedure shows commonly used parameters.\n+Refer to JGroups documentation for the full set of available parameters.\n+\n+* link:{jgroups_docs}[JGroups 4 Manual]\n+* link:{jgroups_schema}[JGroups 4.2 XSD]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTgzNTgwOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_asym_encrypt.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0NjowNlrOHy66IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0NjowNlrOHy66IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NjAwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * link:{jgroups_schema}[JGroups 4.2 XSD]\n          \n          \n            \n            * link:{jgroups_schema}[JGroups 4.2 Schema]", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523156000", "createdAt": "2020-11-13T18:46:06Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_asym_encrypt.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+[id='configuring_jgroups_asym_encrypt-{context}']\n+= Configuring Cluster Transport with Asymmetric Encryption\n+Configure {brandname} clusters to generate and distribute secret keys that encrypt JGroups messages.\n+\n+.Procedure\n+\n+. Create a keystore with certificate chains that enables {brandname} to verify node identity.\n+. Place the keystore on the classpath for each node in the cluster.\n++\n+For {brandname} Server, you put the keystore in the {server_home} directory.\n++\n+. Add the `SSL_KEY_EXCHANGE` and `ASYM_ENCRYPT` protocols to a JGroups stack in your {brandname} configuration, as in the following example:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/jgroups_asym_encrypt.xml[]\n+----\n++\n+<1> Creates a secure JGroups stack named \"encrypt-tcp\" that extends the default TCP stack for {brandname}.\n+<2> Names the keystore that nodes use to perform certificate authentication.\n+<3> Specifies the keystore password.\n+<4> Uses the `stack.combine` and `stack.position` attributes to insert `SSL_KEY_EXCHANGE` into the default TCP stack after the `VERIFY_SUSPECT` protocol.\n+<5> Specifies the length of the secret key that the coordinator node generates. The default value is `2048`.\n+<6> Specifies the cipher engine the coordinator node uses to generate secret keys. The default value is `RSA`.\n+<7> Configures {brandname} to generate and distribute a new secret key when the coordinator node changes.\n+<8> Configures {brandname} to generate and distribute a new secret key when nodes leave.\n+<9> Configures {brandname} nodes to use the `SSL_KEY_EXCHANGE` protocol for certificate authentication.\n+<10> Uses the `stack.combine` and `stack.position` attributes to insert `ASYM_ENCRYPT` into the default TCP stack before the `pbcast.NAKACK2` protocol.\n+<11> Configures the {brandname} cluster to use the secure JGroups stack.\n+\n+.Verification\n+\n+When you start your {brandname} cluster, the following log message indicates that the cluster is using the secure JGroups stack:\n+\n+[source,bash,options=\"nowrap\"]\n+----\n+[org.infinispan.CLUSTER] ISPN000078: Starting JGroups channel cluster with stack <encrypted_stack_name>\n+----\n+\n+{brandname} nodes can join the cluster only if they use `ASYM_ENCRYPT` and can obtain the secret key from the coordinator node.\n+Otherwise the following message is written to {brandname} logs:\n+\n+----\n+[org.jgroups.protocols.ASYM_ENCRYPT] <hostname>: received message without encrypt header from <hostname>; dropping it\n+----\n+\n+.Reference\n+\n+The example `ASYM_ENCRYPT` configuration in this procedure shows commonly used parameters.\n+Refer to JGroups documentation for the full set of available parameters.\n+\n+* link:{jgroups_docs}[JGroups 4 Manual]\n+* link:{jgroups_schema}[JGroups 4.2 XSD]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTg0OTg3OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_sym_encrypt.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo1MDoyMVrOHy7CqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo1MDoyMVrOHy7CqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1ODE4NQ==", "bodyText": "{server_home}/server/conf I think...", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523158185", "createdAt": "2020-11-13T18:50:21Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_sym_encrypt.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+[id='configuring_jgroups_sym_encrypt-{context}']\n+= Configuring Cluster Transport with Symmetric Encryption\n+Configure {brandname} clusters to encrypt JGroups messages with secret keys from keystores that you provide.\n+\n+.Procedure\n+\n+. Create a keystore that contains a secret key.\n+. Place the keystore on the classpath for each node in the cluster.\n++\n+For {brandname} Server, you put the keystore in the {server_home} directory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3774, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}