{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDAxMjUw", "number": 8400, "title": "ISPN-10373 Store/Loader Non blocking SPI batch method", "bodyText": "Rework batch to allow for atomic write and remove\n\nhttps://issues.redhat.com/browse/ISPN-10373\nThe RocksDBStore implementation can be found here https://github.com/infinispan/infinispan/pull/8405/files#diff-f32efbe49859e690ae6743ec1daf7608R210", "createdAt": "2020-05-27T17:24:41Z", "url": "https://github.com/infinispan/infinispan/pull/8400", "merged": true, "mergeCommit": {"oid": "1ce6f6cbb962bdcc913abf16ad62964860fc4ca1"}, "closed": true, "closedAt": "2020-05-29T16:33:19Z", "author": {"login": "wburns"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcldfNcgBqjMzNzk0OTY5MjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmDNJogBqjMzODczODg5Mjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c668c865b8c73454cb99c800097674fee7b923d", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/7c668c865b8c73454cb99c800097674fee7b923d", "committedDate": "2020-05-27T17:23:24Z", "message": "ISPN-10373 Store/Loader Non blocking SPI\n\n* Rework batch to allow for atomic write and remove"}, "afterCommit": {"oid": "ba4e1bc6a9b0f2541bcdd8fbc665449c4b6571d9", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/ba4e1bc6a9b0f2541bcdd8fbc665449c4b6571d9", "committedDate": "2020-05-27T18:22:31Z", "message": "ISPN-10373 Store/Loader Non blocking SPI\n\n* Rework batch to allow for atomic write and remove"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba4e1bc6a9b0f2541bcdd8fbc665449c4b6571d9", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/ba4e1bc6a9b0f2541bcdd8fbc665449c4b6571d9", "committedDate": "2020-05-27T18:22:31Z", "message": "ISPN-10373 Store/Loader Non blocking SPI\n\n* Rework batch to allow for atomic write and remove"}, "afterCommit": {"oid": "f920e997951c4a8a777a9b1e06adf722d7176f6d", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/f920e997951c4a8a777a9b1e06adf722d7176f6d", "committedDate": "2020-05-29T13:27:05Z", "message": "ISPN-10373 Store/Loader Non blocking SPI\n\n* Rework batch to allow for atomic write and remove"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwOTg0NDE3", "url": "https://github.com/infinispan/infinispan/pull/8400#pullrequestreview-420984417", "createdAt": "2020-05-29T14:08:30Z", "commit": {"oid": "f920e997951c4a8a777a9b1e06adf722d7176f6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDowODozMFrOGceHUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDowODozMFrOGceHUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwNjcwNA==", "bodyText": "Shouldn't this be storeStatus.store.rollback?\nIt's worrying that this wasn't detected by our testsuite \ud83d\ude31", "url": "https://github.com/infinispan/infinispan/pull/8400#discussion_r432506704", "createdAt": "2020-05-29T14:08:30Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "diffHunk": "@@ -885,55 +897,47 @@ private boolean shouldWrite(StoreStatus storeStatus, Predicate<? super StoreConf\n    }\n \n    @Override\n-   public CompletionStage<Void> prepareAllTxStores(Transaction transaction, BatchModification batchModification,\n+   public CompletionStage<Void> prepareAllTxStores(TxInvocationContext<AbstractCacheTransaction> txInvocationContext,\n          Predicate<? super StoreConfiguration> predicate) throws PersistenceException {\n-      return Completable.using(\n-            this::acquireReadLock,\n-            ignore -> {\n-               checkStoreAvailability();\n-               if (trace) {\n-                  log.tracef(\"Preparing batch for store: %s on transaction %s\", batchModification, transaction);\n-               }\n-               return Flowable.fromIterable(stores)\n-                     .filter(storeStatus -> shouldPerformTransactionOperation(storeStatus, predicate))\n-                     // Let the prepare work in parallel across the stores\n-                     .flatMapCompletable(storeStatus -> Completable.fromCompletionStage(storeStatus.store.prepareWithModifications(transaction, batchModification)));\n-            },\n-            this::releaseReadLock\n-      ).toCompletionStage(null);\n+      //noinspection unchecked\n+      return batchOperation(txInvocationContext, null, (stores, segmentCount, removeFlowable,\n+            putFlowable) -> stores.prepareWithModifications(txInvocationContext.getTransaction(), segmentCount, removeFlowable, putFlowable))\n+            .thenApply(CompletableFutures.toNullFunction());\n    }\n \n    @Override\n-   public CompletionStage<Void> commitAllTxStores(Transaction transaction, Predicate<? super StoreConfiguration> predicate) {\n+   public CompletionStage<Void> commitAllTxStores(TxInvocationContext<AbstractCacheTransaction> txInvocationContext,\n+         Predicate<? super StoreConfiguration> predicate) {\n       return Completable.using(\n             this::acquireReadLock,\n             ignore -> {\n                checkStoreAvailability();\n                if (trace) {\n-                  log.tracef(\"Committing transaction %s to stores\", transaction);\n+                  log.tracef(\"Committing transaction %s to stores\", txInvocationContext);\n                }\n                return Flowable.fromIterable(stores)\n                      .filter(storeStatus -> shouldPerformTransactionOperation(storeStatus, predicate))\n                      // Let the commit work in parallel across the stores\n-                     .flatMapCompletable(storeStatus -> Completable.fromCompletionStage(storeStatus.store.commit(transaction)));\n+                     .flatMapCompletable(storeStatus -> Completable.fromCompletionStage(storeStatus.store.commit(txInvocationContext.getTransaction())));\n             },\n             this::releaseReadLock\n       ).toCompletionStage(null);\n    }\n \n    @Override\n-   public CompletionStage<Void> rollbackAllTxStores(Transaction transaction, Predicate<? super StoreConfiguration> predicate) {\n+   public CompletionStage<Void> rollbackAllTxStores(TxInvocationContext<AbstractCacheTransaction> txInvocationContext,\n+         Predicate<? super StoreConfiguration> predicate) {\n       return Completable.using(\n             this::acquireReadLock,\n             ignore -> {\n                checkStoreAvailability();\n                if (trace) {\n-                  log.tracef(\"Rolling back transaction %s for stores\", transaction);\n+                  log.tracef(\"Rolling back transaction %s for stores\", txInvocationContext);\n                }\n                return Flowable.fromIterable(stores)\n                      .filter(storeStatus -> shouldPerformTransactionOperation(storeStatus, predicate))\n                      // Let the rollback work in parallel across the stores\n-                     .flatMapCompletable(storeStatus -> Completable.fromCompletionStage(storeStatus.store.commit(transaction)));\n+                     .flatMapCompletable(storeStatus -> Completable.fromCompletionStage(storeStatus.store.commit(txInvocationContext.getTransaction())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f920e997951c4a8a777a9b1e06adf722d7176f6d"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfd39f54b5ec0076c694b151941b8699545e8d19", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/dfd39f54b5ec0076c694b151941b8699545e8d19", "committedDate": "2020-05-29T14:19:05Z", "message": "ISPN-10373 Store/Loader Non blocking SPI\n\n* Rework batch to allow for atomic write and remove"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f920e997951c4a8a777a9b1e06adf722d7176f6d", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/f920e997951c4a8a777a9b1e06adf722d7176f6d", "committedDate": "2020-05-29T13:27:05Z", "message": "ISPN-10373 Store/Loader Non blocking SPI\n\n* Rework batch to allow for atomic write and remove"}, "afterCommit": {"oid": "dfd39f54b5ec0076c694b151941b8699545e8d19", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/dfd39f54b5ec0076c694b151941b8699545e8d19", "committedDate": "2020-05-29T14:19:05Z", "message": "ISPN-10373 Store/Loader Non blocking SPI\n\n* Rework batch to allow for atomic write and remove"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 677, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}