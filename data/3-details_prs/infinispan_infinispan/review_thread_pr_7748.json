{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNzM1NTQ1", "number": 7748, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjozMzo1NFrODYkQWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNTozNDowOVrODdYElA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDg2NDI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjozMzo1NFrOFef0sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjozNjo1NVrOFef7bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyMjk5Mw==", "bodyText": "Move this down one line btw ;)", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r367522993", "createdAt": "2020-01-16T16:33:54Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java", "diffHunk": "@@ -92,7 +78,14 @@ public void setTopologyId(int topologyId) {\n    }\n \n    @Override\n-   public CompletableFuture<Object> invokeAsync() {\n+   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) {\n+      // Invalidation cache doesn't set topology id - so we don't want to throw OTE in invokeAsync", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c74f9d7b8aad3614e610729201a4c53d0073846"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNDcxNg==", "bodyText": "Done \ud83d\ude42", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r367524716", "createdAt": "2020-01-16T16:36:55Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java", "diffHunk": "@@ -92,7 +78,14 @@ public void setTopologyId(int topologyId) {\n    }\n \n    @Override\n-   public CompletableFuture<Object> invokeAsync() {\n+   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) {\n+      // Invalidation cache doesn't set topology id - so we don't want to throw OTE in invokeAsync", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyMjk5Mw=="}, "originalCommit": {"oid": "9c74f9d7b8aad3614e610729201a4c53d0073846"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzQ3ODUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/CommandsFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzoyNjoyNlrOFkxOeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzoyNjoyNlrOFkxOeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5OTU3Ng==", "bodyText": "\"should be stateless\" is maybe too much, it's ok for an interceptor to set a field in the command for another interceptor to use.\nAlthough the first example I found, GetKeysInGroupCommand, would probably be best handled by computing the segment on the originator and setting in the constructor :)", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374099576", "createdAt": "2020-02-03T13:26:26Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/commands/CommandsFactory.java", "diffHunk": "@@ -359,7 +359,9 @@ ComputeIfAbsentCommand buildComputeIfAbsentCommand(Object key, Function mappingF\n     *\n     * @param command command to initialize.  Cannot be null.\n     * @param isRemote\n+    * @deprecated since 11.0, ReplicableCommands should be stateless and utilise {@link ReplicableCommand#invokeAsync(ComponentRegistry)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839bc74e011bfbba3e1aef04c94d6dd7c2e46a7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDAyNzk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/CancelCommand.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1ODoyMVrOFk2fNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjo1ODoyMlrOFk4nyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTc4Mg==", "bodyText": "can we remove this command?\nAlso,  CancellableCommand and CancellationService? I think it was used by the old distributed executor.", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374185782", "createdAt": "2020-02-03T15:58:21Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/commands/CancelCommand.java", "diffHunk": "@@ -20,13 +20,12 @@\n  * @author Vladimir Blagojevic\n  * @since 5.2\n  */\n-public class CancelCommand extends BaseRpcCommand implements InitializableCommand {\n+public class CancelCommand extends BaseRpcCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4839bc74e011bfbba3e1aef04c94d6dd7c2e46a7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MjE0Nw==", "bodyText": "@wburns any thoughts?", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374192147", "createdAt": "2020-02-03T16:09:04Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/commands/CancelCommand.java", "diffHunk": "@@ -20,13 +20,12 @@\n  * @author Vladimir Blagojevic\n  * @since 5.2\n  */\n-public class CancelCommand extends BaseRpcCommand implements InitializableCommand {\n+public class CancelCommand extends BaseRpcCommand {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTc4Mg=="}, "originalCommit": {"oid": "4839bc74e011bfbba3e1aef04c94d6dd7c2e46a7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NTExNw==", "bodyText": "They were used by the old DistributedExecutor. I don't think they are used by anything else now.", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374195117", "createdAt": "2020-02-03T16:14:06Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/commands/CancelCommand.java", "diffHunk": "@@ -20,13 +20,12 @@\n  * @author Vladimir Blagojevic\n  * @since 5.2\n  */\n-public class CancelCommand extends BaseRpcCommand implements InitializableCommand {\n+public class CancelCommand extends BaseRpcCommand {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTc4Mg=="}, "originalCommit": {"oid": "4839bc74e011bfbba3e1aef04c94d6dd7c2e46a7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyMDc0Ng==", "bodyText": "I've created https://issues.redhat.com/browse/ISPN-11269 and I'll add a commit to this PR", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374220746", "createdAt": "2020-02-03T16:58:22Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/commands/CancelCommand.java", "diffHunk": "@@ -20,13 +20,12 @@\n  * @author Vladimir Blagojevic\n  * @since 5.2\n  */\n-public class CancelCommand extends BaseRpcCommand implements InitializableCommand {\n+public class CancelCommand extends BaseRpcCommand {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTc4Mg=="}, "originalCommit": {"oid": "4839bc74e011bfbba3e1aef04c94d6dd7c2e46a7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTYwMDY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/CancellableCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMTozOTowNVrOFlFsmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMTozOTowNVrOFlFsmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQzNDk2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @deprecated since 11.0 has the affect.\n          \n          \n            \n             * @deprecated since 11.0 has no effect.", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374434969", "createdAt": "2020-02-04T01:39:05Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/commands/CancellableCommand.java", "diffHunk": "@@ -9,7 +9,9 @@\n  *\n  * @author Vladimir Blagojevic\n  * @since 5.2\n+ * @deprecated since 11.0 has the affect.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTYwNTczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/CancellationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMTo0MjowOVrOFlFvjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjozNDoxMlrOFl2LDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQzNTcyNw==", "bodyText": "It's not a public package, so I'd just delete it.\nBesides, user implementations were ignored anyway, because EmptyConstructorFactory referenced CancellationServiceImpl directly.", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374435727", "createdAt": "2020-02-04T01:42:09Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/commands/CancellationService.java", "diffHunk": "@@ -11,8 +11,10 @@\n  *\n  * @author Vladimir Blagojevic\n  * @since 5.2\n+ * @deprecated since 11.0 implementations of this interface are ignored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyOTE5Nw==", "bodyText": "I've just removed the interface in the end.", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r375229197", "createdAt": "2020-02-05T12:34:12Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/commands/CancellationService.java", "diffHunk": "@@ -11,8 +11,10 @@\n  *\n  * @author Vladimir Blagojevic\n  * @since 5.2\n+ * @deprecated since 11.0 implementations of this interface are ignored", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQzNTcyNw=="}, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTY0NzEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/ReplicableCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMjoxMjo0NlrOFlGJrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDo0NjozMVrOFlWpBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjQxNQ==", "bodyText": "Please make the new invokeAsync method return a CompletionStage and move it to CacheRpcCommand + GlobalRpcCommand.\nSingleXSiteRpcCommand.invokeAsync() currently uses it on VisitableCommand, but it could throw an UnsupportedOperationException instead.\nSame with CallInterceptor.visitUnknownCommand(), there's no reason why a command that the interceptors don't know about should go through the interceptor chain.\nTrue, the current RpcManager javadoc doesn't put any restrictions on the command, but IMO it's ok to change RpcManagerCustomReplicableCommandTest to assert that an unknown VisitableCommand is not supported, and also that a GlobalRpcCommand is not supported (global commands should be invoked via Transport).", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374442415", "createdAt": "2020-02-04T02:12:46Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/commands/ReplicableCommand.java", "diffHunk": "@@ -19,17 +19,33 @@\n  * @since 4.0\n  */\n public interface ReplicableCommand {\n+\n+   /**\n+    * Invoke the command asynchronously.\n+    * <p>\n+    * <p>This method replaces {@link #invoke()} for remote execution.\n+    * The default implementation and {@link #invoke()} will be removed in future versions.\n+    * </p>\n+    *\n+    * @since 11.0\n+    */\n+   default CompletableFuture<Object> invokeAsync(ComponentRegistry registry) throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3ODU5OA==", "bodyText": "Should we also deprecate the Visitor::visitUnknownCommand method then?", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374678598", "createdAt": "2020-02-04T13:47:53Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/commands/ReplicableCommand.java", "diffHunk": "@@ -19,17 +19,33 @@\n  * @since 4.0\n  */\n public interface ReplicableCommand {\n+\n+   /**\n+    * Invoke the command asynchronously.\n+    * <p>\n+    * <p>This method replaces {@link #invoke()} for remote execution.\n+    * The default implementation and {@link #invoke()} will be removed in future versions.\n+    * </p>\n+    *\n+    * @since 11.0\n+    */\n+   default CompletableFuture<Object> invokeAsync(ComponentRegistry registry) throws Throwable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjQxNQ=="}, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxMjU4MA==", "bodyText": "+1", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374712580", "createdAt": "2020-02-04T14:46:31Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/commands/ReplicableCommand.java", "diffHunk": "@@ -19,17 +19,33 @@\n  * @since 4.0\n  */\n public interface ReplicableCommand {\n+\n+   /**\n+    * Invoke the command asynchronously.\n+    * <p>\n+    * <p>This method replaces {@link #invoke()} for remote execution.\n+    * The default implementation and {@link #invoke()} will be removed in future versions.\n+    * </p>\n+    *\n+    * @since 11.0\n+    */\n+   default CompletableFuture<Object> invokeAsync(ComponentRegistry registry) throws Throwable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjQxNQ=="}, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTY0ODY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/ReplicableCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMjoxNDowMVrOFlGKqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMjoxNDowMVrOFlGKqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjY2Nw==", "bodyText": "I suggest removing both lines and keeping only the deprecation tag.", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374442667", "createdAt": "2020-02-04T02:14:01Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/commands/ReplicableCommand.java", "diffHunk": "@@ -19,17 +19,33 @@\n  * @since 4.0\n  */\n public interface ReplicableCommand {\n+\n+   /**\n+    * Invoke the command asynchronously.\n+    * <p>\n+    * <p>This method replaces {@link #invoke()} for remote execution.\n+    * The default implementation and {@link #invoke()} will be removed in future versions.\n+    * </p>\n+    *\n+    * @since 11.0\n+    */\n+   default CompletableFuture<Object> invokeAsync(ComponentRegistry registry) throws Throwable {\n+      return invokeAsync();\n+   }\n+\n    /**\n     * Invoke the command asynchronously.\n     * <p>\n-    * <p>This method replaces {@link #perform(InvocationContext)} for remote execution.\n-    * The default implementation and {@link #perform(InvocationContext)} will be removed in future versions.\n+    * <p>This method replaces {@link #invoke()} for remote execution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTY1NTM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/remote/CheckTransactionRpcCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMjoxOTowMFrOFlGO8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMjoxOTowMFrOFlGO8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0Mzc2MQ==", "bodyText": "Please extract componentRegistry.getTransactionTable() to a local variable outside the lambda, even if it's not expensive it would make the line shorter.", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374443761", "createdAt": "2020-02-04T02:19:00Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/commands/remote/CheckTransactionRpcCommand.java", "diffHunk": "@@ -57,21 +50,15 @@ public CheckTransactionRpcCommand(ByteString cacheName) {\n       return INSTANCE;\n    }\n \n-   @Override\n-   public void init(ComponentRegistry componentRegistry, boolean isRemote) {\n-      transactionTable = componentRegistry.getTransactionTable();\n-   }\n-\n    @Override\n    public ByteString getCacheName() {\n       return cacheName;\n    }\n \n    @Override\n-   public CompletableFuture<Object> invokeAsync() {\n-      //modify the collection destructively\n-      //and return the list of completed transactions.\n-      gtxToCheck.removeIf(this);\n+   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) {\n+      // Modify the collection destructively and return the list of completed transactions.\n+      gtxToCheck.removeIf(globalTransaction -> componentRegistry.getTransactionTable().containsLocalTx(globalTransaction));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTY4NTYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/remote/SingleRpcCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMjozOTozNFrOFlGg1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMjozOTozNFrOFlGg1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0ODM0Mw==", "bodyText": "We've been throwing this exception since 4.2, it's high time we change the field and the constructor to VisitableCommand.", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374448343", "createdAt": "2020-02-04T02:39:34Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/commands/remote/SingleRpcCommand.java", "diffHunk": "@@ -58,13 +58,23 @@ public void readFrom(ObjectInput input) throws IOException, ClassNotFoundExcepti\n    }\n \n    @Override\n-   public Object perform(InvocationContext ctx) throws Throwable {\n-      throw new UnsupportedOperationException();\n-   }\n-\n-   @Override\n-   public CompletableFuture<Object> invokeAsync() throws Throwable {\n-      return processVisitableCommandAsync(command);\n+   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) throws Throwable {\n+      if (command instanceof VisitableCommand) {\n+         VisitableCommand vc = (VisitableCommand) command;\n+         vc.init(componentRegistry);\n+         InvocationContextFactory icf = componentRegistry.getInvocationContextFactory().running();\n+         InvocationContext ctx = icf.createRemoteInvocationContextForCommand(vc, getOrigin());\n+         if (command instanceof RemoteLockCommand) {\n+            ctx.setLockOwner(((RemoteLockCommand) command).getKeyLockOwner());\n+         }\n+         if (trace)\n+            log.tracef(\"Invoking command %s, with originLocal flag set to %b\", command, ctx\n+                  .isOriginLocal());\n+         return componentRegistry.getInterceptorChain().running().invokeAsync(ctx, vc);\n+      } else {\n+         throw new RuntimeException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTcyMzY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzowNzoxNFrOFlG3sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzowNzoxNFrOFlG3sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NDE5Mw==", "bodyText": "You should have initialized the variable with null to replicate the behaviour of init, but I don't think the cache mode check is needed because it's also checking if topologyId != -1 below.\nI suggest removing this if and changing the comment below to say topologyId can be -1 both in invalidation mode and in Hibernate 2LC.", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374454193", "createdAt": "2020-02-04T03:07:14Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java", "diffHunk": "@@ -91,7 +77,14 @@ public void setTopologyId(int topologyId) {\n    }\n \n    @Override\n-   public CompletableFuture<Object> invokeAsync() {\n+   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) {\n+      DistributionManager distributionManager = componentRegistry.getDistributionManager();\n+      // Invalidation cache doesn't set topology id - so we don't want to throw OTE in invokeAsync\n+      if (!componentRegistry.getConfiguration().clustering().cacheMode().isInvalidation()) {\n+         distributionManager = componentRegistry.getDistributionManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTczMDE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/factories/ComponentRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzoxMjoxNFrOFlG7gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzoxMjoxNFrOFlG7gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NTE3MA==", "bodyText": "This is not ok, cacheComponents() is called by rewire() and registerComponent() will fail the second time.\nIf you really think it's not ok for getCancellationService() to return null, you should register it in the constructor.", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374455170", "createdAt": "2020-02-04T03:12:14Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/factories/ComponentRegistry.java", "diffHunk": "@@ -361,7 +359,8 @@ public void cacheComponents() {\n       backupSender = basicComponentRegistry.getComponent(BackupSender.class);\n       cache = basicComponentRegistry.getComponent(AdvancedCache.class);\n       cacheNotifier = basicComponentRegistry.getComponent(CacheNotifier.class);\n-      cancellationService = basicComponentRegistry.getComponent(CancellationService.class);\n+      cancellationService = basicComponentRegistry.registerComponent(CancellationService.class, new CancellationService() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTc1MTAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/interceptors/impl/AsyncInterceptorChainImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzoyODoxM1rOFlHHlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMToyMDo0M1rOFl0TIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODI2Mw==", "bodyText": "I don't think this is needed on the originator: keyDataConversion and valueDataConversion are not private to the command, they're already wired, and even if wireDependencies is idempotent, it's not that cheap.\nSingleRpcCommand and PrepareCommand already init the sub-commands on the target nodes, you just need to add it in BackupWriteCommand.", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374458263", "createdAt": "2020-02-04T03:28:13Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/interceptors/impl/AsyncInterceptorChainImpl.java", "diffHunk": "@@ -223,6 +223,7 @@ public void appendInterceptor(AsyncInterceptor ci, boolean isCustom) {\n    @Override\n    public CompletableFuture<Object> invokeAsync(InvocationContext ctx, VisitableCommand command) {\n       try {\n+         command.init(componentRegistry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NDA0Ng==", "bodyText": "If we remove this, it's also necessary to call .init on the PrepareCommands modifications when invokeAsync(ComponentRegistry)", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374794046", "createdAt": "2020-02-04T16:51:56Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/interceptors/impl/AsyncInterceptorChainImpl.java", "diffHunk": "@@ -223,6 +223,7 @@ public void appendInterceptor(AsyncInterceptor ci, boolean isCustom) {\n    @Override\n    public CompletableFuture<Object> invokeAsync(InvocationContext ctx, VisitableCommand command) {\n       try {\n+         command.init(componentRegistry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODI2Mw=="}, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5ODQ5Ng==", "bodyText": "Right, I saw PrepareCommand calling init() on the modifications and I didn't realize it was in the init() method. But it should be safe to move that code to invokeAsync(), because we don't expect init() to be called on commands that are both CacheRpcCommand and VisitableCommand.", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r375198496", "createdAt": "2020-02-05T11:20:43Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/interceptors/impl/AsyncInterceptorChainImpl.java", "diffHunk": "@@ -223,6 +223,7 @@ public void appendInterceptor(AsyncInterceptor ci, boolean isCustom) {\n    @Override\n    public CompletableFuture<Object> invokeAsync(InvocationContext ctx, VisitableCommand command) {\n       try {\n+         command.init(componentRegistry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODI2Mw=="}, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTc1MzY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/interceptors/impl/CallInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzozMDozM1rOFlHJMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzozMDozM1rOFlHJMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODY3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return CompletableFutures.await(command.invokeAsync(componentRegistry));\n          \n          \n            \n                  throw new UnsupportedOperationException();", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374458673", "createdAt": "2020-02-04T03:30:33Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/interceptors/impl/CallInterceptor.java", "diffHunk": "@@ -769,7 +772,7 @@ public Object visitLockControlCommand(TxInvocationContext ctx, LockControlComman\n \n    @Override\n    public Object visitUnknownCommand(InvocationContext ctx, VisitableCommand command) throws Throwable {\n-      return command.perform(ctx);\n+      return CompletableFutures.await(command.invokeAsync(componentRegistry));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTI2OTE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/commands/tx/PrepareCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNToyNzo0M1rOFl8Ayg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNToyNzo0M1rOFl8Ayg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyNDg3NA==", "bodyText": "init() is not going to be called any more, unless you call it from invokeAsync.\nTBH I don't think we really need ':local' and ':remote' in GlobalTransaction.toString(), but that's for another PR.", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r375324874", "createdAt": "2020-02-05T15:27:43Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/commands/tx/PrepareCommand.java", "diffHunk": "@@ -68,21 +69,14 @@\n \n    protected WriteCommand[] modifications;\n    protected boolean onePhaseCommit;\n-   protected CacheNotifier notifier;\n-   protected RecoveryManager recoveryManager;\n    private transient boolean replayEntryWrapping  = false;\n    protected boolean retriedCommand;\n \n    private static final WriteCommand[] EMPTY_WRITE_COMMAND_ARRAY = new WriteCommand[0];\n \n    @Override\n-   public void init(ComponentRegistry componentRegistry, boolean isRemote) {\n-      super.init(componentRegistry, isRemote);\n-      this.notifier = componentRegistry.getCacheNotifier().running();\n-      this.recoveryManager = componentRegistry.getRecoveryManager().running();\n-\n-      for (ReplicableCommand nested : getModifications())\n-         componentRegistry.getCommandsFactory().initializeReplicableCommand(nested, false);\n+   public void init(ComponentRegistry componentRegistry) {\n+      markTransactionAsRemote(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39224d5a1a9300c69ac4ef6c4229e960361bbb7"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTI5Njg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/statetransfer/StateResponseCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNTozNDowOVrOFl8R8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNTozNDowOVrOFl8R8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyOTI2NA==", "bodyText": "Redundant cast", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r375329264", "createdAt": "2020-02-05T15:34:09Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/statetransfer/StateResponseCommand.java", "diffHunk": "@@ -77,20 +70,15 @@ public StateResponseCommand(ByteString cacheName, Address origin, int topologyId\n    }\n \n    @Override\n-   public void init(ComponentRegistry componentRegistry, boolean isRemote) {\n-      this.stateConsumer = componentRegistry.getStateTransferManager().getStateConsumer();\n-      this.stateReceiver = componentRegistry.getConflictManager().running().getStateReceiver();\n-   }\n-\n-   @Override\n-   public CompletableFuture<Object> invokeAsync() throws Throwable {\n+   public CompletionStage<?> invokeAsync(ComponentRegistry componentRegistry) throws Throwable {\n       final boolean trace = log.isTraceEnabled();\n       LogFactory.pushNDC(cacheName, trace);\n       try {\n          if (applyState) {\n-            return (CompletableFuture) stateConsumer.applyState(getOrigin(), topologyId, pushTransfer, stateChunks)\n-                                                    .toCompletableFuture();\n+            StateConsumer stateConsumer = componentRegistry.getStateTransferManager().getStateConsumer();\n+            return (CompletionStage) stateConsumer.applyState(getOrigin(), topologyId, pushTransfer, stateChunks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39224d5a1a9300c69ac4ef6c4229e960361bbb7"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4150, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}