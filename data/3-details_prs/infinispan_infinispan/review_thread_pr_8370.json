{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNTc3Mjkz", "number": 8370, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToyNzoxOVrOD-4zEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDozMjowNFrOD-53yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjY4ODgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/InitializationContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToyNzoxOVrOGZQtHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToyNzoxOVrOGZQtHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0MTI3Nw==", "bodyText": "\"are used extensively\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429141277", "createdAt": "2020-05-22T09:27:19Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/InitializationContext.java", "diffHunk": "@@ -51,14 +51,17 @@\n    ExecutorService getExecutor();\n \n    /**\n-    * TODO: need to document\n-    * @return\n+    * Returns an executor that Infinispan uses internally for non blocking tasks. The user must guarantee tasks\n+    * submitted to this executor will not block the thread it is ran on. Failure to do so can slow down Infinispan's\n+    * handling of operations as these threads are limited to the number of cores and used extensively.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjY5MTQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToyODoxNFrOGZQu2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToyODoxNFrOGZQu2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0MTcyMw==", "bodyText": "\"defining a way for a cache to interface\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429141723", "createdAt": "2020-05-22T09:28:14Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -19,9 +24,51 @@\n import io.reactivex.rxjava3.core.Flowable;\n \n /**\n+ * The contract for defining a way to interface with external source of data, such as a database, filesystem etc. As", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjcwMDM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozMDo1M1rOGZQ0Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozMTo0NVrOGZQ1rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0MzA5NA==", "bodyText": "\"in a working state and is ready to handle operations.\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429143094", "createdAt": "2020-05-22T09:30:53Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -19,9 +24,51 @@\n import io.reactivex.rxjava3.core.Flowable;\n \n /**\n+ * The contract for defining a way to interface with external source of data, such as a database, filesystem etc. As\n+ * the name implies, all of the methods in this class must <b>never</b> block the invoking thread.\n  * <p>\n- * Implementations of this store must be thread safe if concurrent operations are performed on it. This should include\n- * possibly invoking start or stop multiple times\n+ * The first method that will be invoked on this store will be the {@link #start(InitializationContext)} to allow\n+ * it to initialize and startup. Once the returned stage has completed the store is assumed to be in working condition\n+ * for other operations to be performed upon it. Infinispan will guarantee visibility of variables written during", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0MzQ2OQ==", "bodyText": "\"Infinispan guarantees the visibility...\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429143469", "createdAt": "2020-05-22T09:31:45Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -19,9 +24,51 @@\n import io.reactivex.rxjava3.core.Flowable;\n \n /**\n+ * The contract for defining a way to interface with external source of data, such as a database, filesystem etc. As\n+ * the name implies, all of the methods in this class must <b>never</b> block the invoking thread.\n  * <p>\n- * Implementations of this store must be thread safe if concurrent operations are performed on it. This should include\n- * possibly invoking start or stop multiple times\n+ * The first method that will be invoked on this store will be the {@link #start(InitializationContext)} to allow\n+ * it to initialize and startup. Once the returned stage has completed the store is assumed to be in working condition\n+ * for other operations to be performed upon it. Infinispan will guarantee visibility of variables written during", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0MzA5NA=="}, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjcxMjg3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozNToyNVrOGZQ8ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozNToyNVrOGZQ8ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0NTE4OA==", "bodyText": "\"After the store has started, Infinispan will utilise the {@link #characteristics()} method to query the store's characteristics.\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429145188", "createdAt": "2020-05-22T09:35:25Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -19,9 +24,51 @@\n import io.reactivex.rxjava3.core.Flowable;\n \n /**\n+ * The contract for defining a way to interface with external source of data, such as a database, filesystem etc. As\n+ * the name implies, all of the methods in this class must <b>never</b> block the invoking thread.\n  * <p>\n- * Implementations of this store must be thread safe if concurrent operations are performed on it. This should include\n- * possibly invoking start or stop multiple times\n+ * The first method that will be invoked on this store will be the {@link #start(InitializationContext)} to allow\n+ * it to initialize and startup. Once the returned stage has completed the store is assumed to be in working condition\n+ * for other operations to be performed upon it. Infinispan will guarantee visibility of variables written during\n+ * the start method, so there is no need to synchronize these manually, unless they are mutated in the normal operations\n+ * of the store itself.\n+ * <p>\n+ * Infinispan may at any point after this store has started query what characteristics this store has via", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjcxMzgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozNTo0NFrOGZQ8_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozNTo0NFrOGZQ8_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0NTM0MQ==", "bodyText": "\"change the values\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429145341", "createdAt": "2020-05-22T09:35:44Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -19,9 +24,51 @@\n import io.reactivex.rxjava3.core.Flowable;\n \n /**\n+ * The contract for defining a way to interface with external source of data, such as a database, filesystem etc. As\n+ * the name implies, all of the methods in this class must <b>never</b> block the invoking thread.\n  * <p>\n- * Implementations of this store must be thread safe if concurrent operations are performed on it. This should include\n- * possibly invoking start or stop multiple times\n+ * The first method that will be invoked on this store will be the {@link #start(InitializationContext)} to allow\n+ * it to initialize and startup. Once the returned stage has completed the store is assumed to be in working condition\n+ * for other operations to be performed upon it. Infinispan will guarantee visibility of variables written during\n+ * the start method, so there is no need to synchronize these manually, unless they are mutated in the normal operations\n+ * of the store itself.\n+ * <p>\n+ * Infinispan may at any point after this store has started query what characteristics this store has via\n+ * {@link #characteristics()}. It is highly recommended that this method never change what values it returns once the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjcxNTg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozNjozMVrOGZQ-Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozNjozMVrOGZQ-Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0NTY3MA==", "bodyText": "\"this interface\"\nThe store is the implementation.", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429145670", "createdAt": "2020-05-22T09:36:31Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -19,9 +24,51 @@\n import io.reactivex.rxjava3.core.Flowable;\n \n /**\n+ * The contract for defining a way to interface with external source of data, such as a database, filesystem etc. As\n+ * the name implies, all of the methods in this class must <b>never</b> block the invoking thread.\n  * <p>\n- * Implementations of this store must be thread safe if concurrent operations are performed on it. This should include\n- * possibly invoking start or stop multiple times\n+ * The first method that will be invoked on this store will be the {@link #start(InitializationContext)} to allow\n+ * it to initialize and startup. Once the returned stage has completed the store is assumed to be in working condition\n+ * for other operations to be performed upon it. Infinispan will guarantee visibility of variables written during\n+ * the start method, so there is no need to synchronize these manually, unless they are mutated in the normal operations\n+ * of the store itself.\n+ * <p>\n+ * Infinispan may at any point after this store has started query what characteristics this store has via\n+ * {@link #characteristics()}. It is highly recommended that this method never change what values it returns once the\n+ * store has been started as these may or may not be cached. For more information on how the characteristics affect\n+ * the store operations, please see {@link Characteristic} and its various values.\n+ * <p>\n+ * By default this store only requires half a dozen or so methods to be implemented. However, there are more", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjcxODgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozNzozMFrOGZRACQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozNzozMFrOGZRACQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0NjEyMQ==", "bodyText": "I would remove \"Note that\" and continue with \"If Infinispan...\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429146121", "createdAt": "2020-05-22T09:37:30Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -19,9 +24,51 @@\n import io.reactivex.rxjava3.core.Flowable;\n \n /**\n+ * The contract for defining a way to interface with external source of data, such as a database, filesystem etc. As\n+ * the name implies, all of the methods in this class must <b>never</b> block the invoking thread.\n  * <p>\n- * Implementations of this store must be thread safe if concurrent operations are performed on it. This should include\n- * possibly invoking start or stop multiple times\n+ * The first method that will be invoked on this store will be the {@link #start(InitializationContext)} to allow\n+ * it to initialize and startup. Once the returned stage has completed the store is assumed to be in working condition\n+ * for other operations to be performed upon it. Infinispan will guarantee visibility of variables written during\n+ * the start method, so there is no need to synchronize these manually, unless they are mutated in the normal operations\n+ * of the store itself.\n+ * <p>\n+ * Infinispan may at any point after this store has started query what characteristics this store has via\n+ * {@link #characteristics()}. It is highly recommended that this method never change what values it returns once the\n+ * store has been started as these may or may not be cached. For more information on how the characteristics affect\n+ * the store operations, please see {@link Characteristic} and its various values.\n+ * <p>\n+ * By default this store only requires half a dozen or so methods to be implemented. However, there are more\n+ * optional methods that may be implemented. If you implement such a method, please be sure to advertise the appropriate\n+ * characteristic for that method, so Infinispan knows to invoke it. Note that if Infinispan has been told a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjc1NTYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo1MDoyNVrOGZRXQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo1MDoyNVrOGZRXQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1MjA2NQ==", "bodyText": "This sentence needs rewording as I don't think it's clear. How about:\n\"Although recommended, Segmentation support in a store implementation is not required. Segment parameters are provided for all methods where segment information would be required, for example {@link #load(int, Object)} and {@link #publishEntries(IntSet, Predicate, boolean). When a store does not support segmentation, these parameters can simply be ignored by the implementation. As previously stated, it's recommended that segmentation is supported as an Infinispan cache can perform ...\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429152065", "createdAt": "2020-05-22T09:50:25Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -19,9 +24,51 @@\n import io.reactivex.rxjava3.core.Flowable;\n \n /**\n+ * The contract for defining a way to interface with external source of data, such as a database, filesystem etc. As\n+ * the name implies, all of the methods in this class must <b>never</b> block the invoking thread.\n  * <p>\n- * Implementations of this store must be thread safe if concurrent operations are performed on it. This should include\n- * possibly invoking start or stop multiple times\n+ * The first method that will be invoked on this store will be the {@link #start(InitializationContext)} to allow\n+ * it to initialize and startup. Once the returned stage has completed the store is assumed to be in working condition\n+ * for other operations to be performed upon it. Infinispan will guarantee visibility of variables written during\n+ * the start method, so there is no need to synchronize these manually, unless they are mutated in the normal operations\n+ * of the store itself.\n+ * <p>\n+ * Infinispan may at any point after this store has started query what characteristics this store has via\n+ * {@link #characteristics()}. It is highly recommended that this method never change what values it returns once the\n+ * store has been started as these may or may not be cached. For more information on how the characteristics affect\n+ * the store operations, please see {@link Characteristic} and its various values.\n+ * <p>\n+ * By default this store only requires half a dozen or so methods to be implemented. However, there are more\n+ * optional methods that may be implemented. If you implement such a method, please be sure to advertise the appropriate\n+ * characteristic for that method, so Infinispan knows to invoke it. Note that if Infinispan has been told a\n+ * characteristic is available and the method is not overridden, an {@link UnsupportedOperationException} will be\n+ * thrown when trying to invoke the appropriate method. Each {@link Characteristic} defines what methods map to which\n+ * characteristic.\n+ * <p>\n+ * All methods that are able include segment arguments in them, such as {@link #load(int, Object)} and\n+ * {@link #publishEntries(IntSet, Predicate, boolean)}. It is not required, but recommended if possible, for a store", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjc1Nzk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo1MToxNVrOGZRYzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo1MToxNVrOGZRYzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1MjQ2MQ==", "bodyText": "\"It also decreases state transfer duration when {@link PersistenceConfiguration#fetchPersistentState()} is enabled, as well as the time required to remove data by segments.\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429152461", "createdAt": "2020-05-22T09:51:15Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -19,9 +24,51 @@\n import io.reactivex.rxjava3.core.Flowable;\n \n /**\n+ * The contract for defining a way to interface with external source of data, such as a database, filesystem etc. As\n+ * the name implies, all of the methods in this class must <b>never</b> block the invoking thread.\n  * <p>\n- * Implementations of this store must be thread safe if concurrent operations are performed on it. This should include\n- * possibly invoking start or stop multiple times\n+ * The first method that will be invoked on this store will be the {@link #start(InitializationContext)} to allow\n+ * it to initialize and startup. Once the returned stage has completed the store is assumed to be in working condition\n+ * for other operations to be performed upon it. Infinispan will guarantee visibility of variables written during\n+ * the start method, so there is no need to synchronize these manually, unless they are mutated in the normal operations\n+ * of the store itself.\n+ * <p>\n+ * Infinispan may at any point after this store has started query what characteristics this store has via\n+ * {@link #characteristics()}. It is highly recommended that this method never change what values it returns once the\n+ * store has been started as these may or may not be cached. For more information on how the characteristics affect\n+ * the store operations, please see {@link Characteristic} and its various values.\n+ * <p>\n+ * By default this store only requires half a dozen or so methods to be implemented. However, there are more\n+ * optional methods that may be implemented. If you implement such a method, please be sure to advertise the appropriate\n+ * characteristic for that method, so Infinispan knows to invoke it. Note that if Infinispan has been told a\n+ * characteristic is available and the method is not overridden, an {@link UnsupportedOperationException} will be\n+ * thrown when trying to invoke the appropriate method. Each {@link Characteristic} defines what methods map to which\n+ * characteristic.\n+ * <p>\n+ * All methods that are able include segment arguments in them, such as {@link #load(int, Object)} and\n+ * {@link #publishEntries(IntSet, Predicate, boolean)}. It is not required, but recommended if possible, for a store\n+ * to support segmentation. An Infinispan Cache can perform much more efficiently when segmentation is supported when\n+ * performing bulk operations such as {@code Cache.size()} or {@code Cache.entrySet().stream()}. It also can very greatly\n+ * increase state transfer time, when {@link PersistenceConfiguration#fetchPersistentState()} is enabled and also when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjc3NTIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo1NzozNFrOGZRkKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo1NzozNFrOGZRkKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NTM2OA==", "bodyText": "\"To indicate that a store implementation supports segmentation, it's necessary that the {@link Characteristic#SEGMENTABLE} characteristic is returned via the {@link #characteristics()} method.\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429155368", "createdAt": "2020-05-22T09:57:34Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -19,9 +24,51 @@\n import io.reactivex.rxjava3.core.Flowable;\n \n /**\n+ * The contract for defining a way to interface with external source of data, such as a database, filesystem etc. As\n+ * the name implies, all of the methods in this class must <b>never</b> block the invoking thread.\n  * <p>\n- * Implementations of this store must be thread safe if concurrent operations are performed on it. This should include\n- * possibly invoking start or stop multiple times\n+ * The first method that will be invoked on this store will be the {@link #start(InitializationContext)} to allow\n+ * it to initialize and startup. Once the returned stage has completed the store is assumed to be in working condition\n+ * for other operations to be performed upon it. Infinispan will guarantee visibility of variables written during\n+ * the start method, so there is no need to synchronize these manually, unless they are mutated in the normal operations\n+ * of the store itself.\n+ * <p>\n+ * Infinispan may at any point after this store has started query what characteristics this store has via\n+ * {@link #characteristics()}. It is highly recommended that this method never change what values it returns once the\n+ * store has been started as these may or may not be cached. For more information on how the characteristics affect\n+ * the store operations, please see {@link Characteristic} and its various values.\n+ * <p>\n+ * By default this store only requires half a dozen or so methods to be implemented. However, there are more\n+ * optional methods that may be implemented. If you implement such a method, please be sure to advertise the appropriate\n+ * characteristic for that method, so Infinispan knows to invoke it. Note that if Infinispan has been told a\n+ * characteristic is available and the method is not overridden, an {@link UnsupportedOperationException} will be\n+ * thrown when trying to invoke the appropriate method. Each {@link Characteristic} defines what methods map to which\n+ * characteristic.\n+ * <p>\n+ * All methods that are able include segment arguments in them, such as {@link #load(int, Object)} and\n+ * {@link #publishEntries(IntSet, Predicate, boolean)}. It is not required, but recommended if possible, for a store\n+ * to support segmentation. An Infinispan Cache can perform much more efficiently when segmentation is supported when\n+ * performing bulk operations such as {@code Cache.size()} or {@code Cache.entrySet().stream()}. It also can very greatly\n+ * increase state transfer time, when {@link PersistenceConfiguration#fetchPersistentState()} is enabled and also when\n+ * removing data by segments. Ensure that it the store implementation supports segmentation that it returns the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjc4Njc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDowMTo1NVrOGZRr1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDowMTo1NVrOGZRr1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NzMzMg==", "bodyText": "\"A store implementation may have to interact with blocking APIs to perform their required operations, however we should never block the invoking thread, therefore Infinispan provides a utility helper for these operations.\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429157332", "createdAt": "2020-05-22T10:01:55Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -19,9 +24,51 @@\n import io.reactivex.rxjava3.core.Flowable;\n \n /**\n+ * The contract for defining a way to interface with external source of data, such as a database, filesystem etc. As\n+ * the name implies, all of the methods in this class must <b>never</b> block the invoking thread.\n  * <p>\n- * Implementations of this store must be thread safe if concurrent operations are performed on it. This should include\n- * possibly invoking start or stop multiple times\n+ * The first method that will be invoked on this store will be the {@link #start(InitializationContext)} to allow\n+ * it to initialize and startup. Once the returned stage has completed the store is assumed to be in working condition\n+ * for other operations to be performed upon it. Infinispan will guarantee visibility of variables written during\n+ * the start method, so there is no need to synchronize these manually, unless they are mutated in the normal operations\n+ * of the store itself.\n+ * <p>\n+ * Infinispan may at any point after this store has started query what characteristics this store has via\n+ * {@link #characteristics()}. It is highly recommended that this method never change what values it returns once the\n+ * store has been started as these may or may not be cached. For more information on how the characteristics affect\n+ * the store operations, please see {@link Characteristic} and its various values.\n+ * <p>\n+ * By default this store only requires half a dozen or so methods to be implemented. However, there are more\n+ * optional methods that may be implemented. If you implement such a method, please be sure to advertise the appropriate\n+ * characteristic for that method, so Infinispan knows to invoke it. Note that if Infinispan has been told a\n+ * characteristic is available and the method is not overridden, an {@link UnsupportedOperationException} will be\n+ * thrown when trying to invoke the appropriate method. Each {@link Characteristic} defines what methods map to which\n+ * characteristic.\n+ * <p>\n+ * All methods that are able include segment arguments in them, such as {@link #load(int, Object)} and\n+ * {@link #publishEntries(IntSet, Predicate, boolean)}. It is not required, but recommended if possible, for a store\n+ * to support segmentation. An Infinispan Cache can perform much more efficiently when segmentation is supported when\n+ * performing bulk operations such as {@code Cache.size()} or {@code Cache.entrySet().stream()}. It also can very greatly\n+ * increase state transfer time, when {@link PersistenceConfiguration#fetchPersistentState()} is enabled and also when\n+ * removing data by segments. Ensure that it the store implementation supports segmentation that it returns the\n+ * {@link Characteristic#SEGMENTABLE} characteristic when {@link #characteristics()} is invoked. A store implementation\n+ * can tell if segmentation is enabled by checking the store configuration {@link StoreConfiguration#segmented()} available\n+ * from the {@code InitializationContext}.\n+ * <p>\n+ * Some stores may have to interact with blocking APIs to perform their desired operation. Since we can never block", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjc5NjkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDowNTo1MlrOGZRyhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoxNDo1NFrOGZU-zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1OTA0NQ==", "bodyText": "Hmm this is making me thinking that even write() etc should have no-op default methods that throw a UnsupportedOperationException. If I'm creating a READ_ONLY store why should I have to implement the method?", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429159045", "createdAt": "2020-05-22T10:05:52Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -32,33 +79,52 @@\n @Experimental\n public interface NonBlockingStore<K, V> {\n \n+   /**\n+    * Enumeration defining the various characteristics of the underlying store to communicate what features it may\n+    * or may not support.\n+    */\n    enum Characteristic {\n       /**\n        * Whether this cache can be shared between multiple nodes. An example would be an external system, such as\n-       * a database.\n+       * a database. This characteristic is here solely for validation of the store configuration.\n        */\n       SHAREABLE,\n       /**\n        * If this store only supports being read from.  Any write based operations will never be invoked on this store.\n+       * No optional methods map to this characteristic. The {@link #write(int, MarshallableEntry)},\n+       * {@link #delete(int, Object)}, {@link #bulkWrite(int, Publisher)}, and {@link #bulkDelete(int, Publisher)} methods\n+       * will not be invoked on a store that has this characteristic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMjc4NQ==", "bodyText": "I had debated about that, however I felt that this case was rare enough that it is simpler to ensure they implement it. Because you can say the same thing with load in which case we wouldn't have many method to implement.\nThe other thing is we can always add a default later, however we can't remove default once it is there.", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429202785", "createdAt": "2020-05-22T11:53:27Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -32,33 +79,52 @@\n @Experimental\n public interface NonBlockingStore<K, V> {\n \n+   /**\n+    * Enumeration defining the various characteristics of the underlying store to communicate what features it may\n+    * or may not support.\n+    */\n    enum Characteristic {\n       /**\n        * Whether this cache can be shared between multiple nodes. An example would be an external system, such as\n-       * a database.\n+       * a database. This characteristic is here solely for validation of the store configuration.\n        */\n       SHAREABLE,\n       /**\n        * If this store only supports being read from.  Any write based operations will never be invoked on this store.\n+       * No optional methods map to this characteristic. The {@link #write(int, MarshallableEntry)},\n+       * {@link #delete(int, Object)}, {@link #bulkWrite(int, Publisher)}, and {@link #bulkDelete(int, Publisher)} methods\n+       * will not be invoked on a store that has this characteristic.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1OTA0NQ=="}, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMTM0Mg==", "bodyText": "Yeah that's a good point. We can always address this if required later on.", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429211342", "createdAt": "2020-05-22T12:14:54Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -32,33 +79,52 @@\n @Experimental\n public interface NonBlockingStore<K, V> {\n \n+   /**\n+    * Enumeration defining the various characteristics of the underlying store to communicate what features it may\n+    * or may not support.\n+    */\n    enum Characteristic {\n       /**\n        * Whether this cache can be shared between multiple nodes. An example would be an external system, such as\n-       * a database.\n+       * a database. This characteristic is here solely for validation of the store configuration.\n        */\n       SHAREABLE,\n       /**\n        * If this store only supports being read from.  Any write based operations will never be invoked on this store.\n+       * No optional methods map to this characteristic. The {@link #write(int, MarshallableEntry)},\n+       * {@link #delete(int, Object)}, {@link #bulkWrite(int, Publisher)}, and {@link #bulkDelete(int, Publisher)} methods\n+       * will not be invoked on a store that has this characteristic.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1OTA0NQ=="}, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjgwMjg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDowODoxMVrOGZR2Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo1NDo0OVrOGZUfVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2MDAyMg==", "bodyText": "I think we should describe characteristics being ignored one way, i.e. describe on a given characteristic if another can override it. So in this case just add the Note to BULK_READ that it is ignored if WRITE_ONLY is present, no need for both Javadocs to contain the note.", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429160022", "createdAt": "2020-05-22T10:08:11Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -32,33 +79,52 @@\n @Experimental\n public interface NonBlockingStore<K, V> {\n \n+   /**\n+    * Enumeration defining the various characteristics of the underlying store to communicate what features it may\n+    * or may not support.\n+    */\n    enum Characteristic {\n       /**\n        * Whether this cache can be shared between multiple nodes. An example would be an external system, such as\n-       * a database.\n+       * a database. This characteristic is here solely for validation of the store configuration.\n        */\n       SHAREABLE,\n       /**\n        * If this store only supports being read from.  Any write based operations will never be invoked on this store.\n+       * No optional methods map to this characteristic. The {@link #write(int, MarshallableEntry)},\n+       * {@link #delete(int, Object)}, {@link #bulkWrite(int, Publisher)}, and {@link #bulkDelete(int, Publisher)} methods\n+       * will not be invoked on a store that has this characteristic.\n+       * <p>\n+       * If this characteristic is provided, {@link #TRANSACTIONAL} will be ignored if also present.\n        */\n       READ_ONLY,\n       /**\n        * If this store only supports being written to. Any read based operations will never be invoked on this store.\n+       * No optional methods map to this characteristic. The {@link #load(int, Object)} and\n+       * {@link #containsKey(int, Object)} methods will not be invoked on a store that has this characteristic.\n+       * <p>\n+       * If this characteristic is provided, {@link #BULK_READ} will be ignored if also present.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMzI4NQ==", "bodyText": "Okay. I was trying to just be overly cautious as to how they were affected, I wondered about doing this.", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429203285", "createdAt": "2020-05-22T11:54:49Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -32,33 +79,52 @@\n @Experimental\n public interface NonBlockingStore<K, V> {\n \n+   /**\n+    * Enumeration defining the various characteristics of the underlying store to communicate what features it may\n+    * or may not support.\n+    */\n    enum Characteristic {\n       /**\n        * Whether this cache can be shared between multiple nodes. An example would be an external system, such as\n-       * a database.\n+       * a database. This characteristic is here solely for validation of the store configuration.\n        */\n       SHAREABLE,\n       /**\n        * If this store only supports being read from.  Any write based operations will never be invoked on this store.\n+       * No optional methods map to this characteristic. The {@link #write(int, MarshallableEntry)},\n+       * {@link #delete(int, Object)}, {@link #bulkWrite(int, Publisher)}, and {@link #bulkDelete(int, Publisher)} methods\n+       * will not be invoked on a store that has this characteristic.\n+       * <p>\n+       * If this characteristic is provided, {@link #TRANSACTIONAL} will be ignored if also present.\n        */\n       READ_ONLY,\n       /**\n        * If this store only supports being written to. Any read based operations will never be invoked on this store.\n+       * No optional methods map to this characteristic. The {@link #load(int, Object)} and\n+       * {@link #containsKey(int, Object)} methods will not be invoked on a store that has this characteristic.\n+       * <p>\n+       * If this characteristic is provided, {@link #BULK_READ} will be ignored if also present.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2MDAyMg=="}, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjgwODc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxMDozNVrOGZR6Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxMDozNVrOGZR6Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2MDk5OQ==", "bodyText": "\"The first method that will be invoked to allow the store to be configured and for any additional steps, such as connecting via a socket or opening file descriptors, to be performed.\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429160999", "createdAt": "2020-05-22T10:10:35Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjgxMjE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxMTo0N1rOGZR8Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxMTo0N1rOGZR8Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2MTU1MQ==", "bodyText": "\"This method will be invoked when the cache is being shutdown.\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429161551", "createdAt": "2020-05-22T10:11:47Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjgxNDA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxMjoyMlrOGZR9aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoxNDowMVrOGZU9gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2MTgzNQ==", "bodyText": "\"This method will be invoked multiple times to ...\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429161835", "createdAt": "2020-05-22T10:12:22Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNDkyMw==", "bodyText": "Tweaked to \"This method may be invoked multiple times to ...\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429204923", "createdAt": "2020-05-22T11:58:47Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2MTgzNQ=="}, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNTExMQ==", "bodyText": "Although that doesn't convey it will be invoked at least one time, which is what I was going for before. WDYT?", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429205111", "createdAt": "2020-05-22T11:59:14Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2MTgzNQ=="}, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMTAxMQ==", "bodyText": "\"One or more times\"?\nAs long as the user knows to handle the fact that the method may be invoked multiple times, I don't think that it could be called just once really matters.", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429211011", "createdAt": "2020-05-22T12:14:01Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2MTgzNQ=="}, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjgxODk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxNDoxNlrOGZSAjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxNDoxNlrOGZSAjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2MjYzOA==", "bodyText": "\"that when complete returns a boolean indicating whether the current store can be ...\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429162638", "createdAt": "2020-05-22T10:14:16Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.\n+    * <p>\n+    * Please see {@link Characteristic} and its values for a description of what each characteristic declares the\n+    * store as supporting.\n+    * @implSpec\n+    * The default implementation returns an empty set\n+    * @return the set of characteristics that this store supports\n     */\n    default Set<Characteristic> characteristics() {\n       return EnumSet.noneOf(Characteristic.class);\n    }\n \n    /**\n-    *\n-    * @return\n+    * Returns a stage that when complete will tell if the current store can be accessed for requests. This can be useful", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjgyMTAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxNTowN1rOGZSB8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxNTowN1rOGZSB8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2Mjk5NA==", "bodyText": "\"This can be useful for store implementations that rely on an external source, such as a remote database, that may become unreachable.\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429162994", "createdAt": "2020-05-22T10:15:07Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.\n+    * <p>\n+    * Please see {@link Characteristic} and its values for a description of what each characteristic declares the\n+    * store as supporting.\n+    * @implSpec\n+    * The default implementation returns an empty set\n+    * @return the set of characteristics that this store supports\n     */\n    default Set<Characteristic> characteristics() {\n       return EnumSet.noneOf(Characteristic.class);\n    }\n \n    /**\n-    *\n-    * @return\n+    * Returns a stage that when complete will tell if the current store can be accessed for requests. This can be useful\n+    * for some store implementations that may rely on an external source that may become unreachable. This can reduce", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjgyNjA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxNzowN1rOGZSFLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxNzowN1rOGZSFLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2MzgyMA==", "bodyText": "\"not available, as subsequent cache requests will result in a {@link StoreUnavailableException} being thrown until the store becomes available again.\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429163820", "createdAt": "2020-05-22T10:17:07Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.\n+    * <p>\n+    * Please see {@link Characteristic} and its values for a description of what each characteristic declares the\n+    * store as supporting.\n+    * @implSpec\n+    * The default implementation returns an empty set\n+    * @return the set of characteristics that this store supports\n     */\n    default Set<Characteristic> characteristics() {\n       return EnumSet.noneOf(Characteristic.class);\n    }\n \n    /**\n-    *\n-    * @return\n+    * Returns a stage that when complete will tell if the current store can be accessed for requests. This can be useful\n+    * for some store implementations that may rely on an external source that may become unreachable. This can reduce\n+    * sending requests to a store that is not available as future Cache requests will all be met with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjgyODQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxNzo1OVrOGZSGpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxNzo1OVrOGZSGpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2NDE5Nw==", "bodyText": "\"is polled periodically to update a store's status if it's availability changes.", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429164197", "createdAt": "2020-05-22T10:17:59Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.\n+    * <p>\n+    * Please see {@link Characteristic} and its values for a description of what each characteristic declares the\n+    * store as supporting.\n+    * @implSpec\n+    * The default implementation returns an empty set\n+    * @return the set of characteristics that this store supports\n     */\n    default Set<Characteristic> characteristics() {\n       return EnumSet.noneOf(Characteristic.class);\n    }\n \n    /**\n-    *\n-    * @return\n+    * Returns a stage that when complete will tell if the current store can be accessed for requests. This can be useful\n+    * for some store implementations that may rely on an external source that may become unreachable. This can reduce\n+    * sending requests to a store that is not available as future Cache requests will all be met with\n+    * {@link StoreUnavailableException}.\n+    * <p>\n+    * Store availability is polled automatically every so often to update the status if the underlying store changes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjgyOTYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxODoyOVrOGZSHWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoxODoyOVrOGZSHWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2NDM3OA==", "bodyText": "link to the methods?", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429164378", "createdAt": "2020-05-22T10:18:29Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.\n+    * <p>\n+    * Please see {@link Characteristic} and its values for a description of what each characteristic declares the\n+    * store as supporting.\n+    * @implSpec\n+    * The default implementation returns an empty set\n+    * @return the set of characteristics that this store supports\n     */\n    default Set<Characteristic> characteristics() {\n       return EnumSet.noneOf(Characteristic.class);\n    }\n \n    /**\n-    *\n-    * @return\n+    * Returns a stage that when complete will tell if the current store can be accessed for requests. This can be useful\n+    * for some store implementations that may rely on an external source that may become unreachable. This can reduce\n+    * sending requests to a store that is not available as future Cache requests will all be met with\n+    * {@link StoreUnavailableException}.\n+    * <p>\n+    * Store availability is polled automatically every so often to update the status if the underlying store changes\n+    * availability. This method will not be invoked concurrently with itself (ie. this method will not be invoked\n+    * until after the previous stage has completed), but will be invoked concurrently with other operations, excluding\n+    * start and stop.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjg0NTY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyNDozMlrOGZSRkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyNDozMlrOGZSRkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2Njk5NA==", "bodyText": "\"If a store is configured to be {@link StoreConfiguration#async()} and the store becomes unavailable, then it's possible for the cache operations to be accepted in the interim period between the loss of availability and the modification-queue becoming full. This allows for this store to be unavailable for short periods of time without a {@link StoreUnavailableException} being thrown, however if the store does not become available before the queue fills, then a {@link StoreUnavailableException} is eventually thrown.", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429166994", "createdAt": "2020-05-22T10:24:32Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.\n+    * <p>\n+    * Please see {@link Characteristic} and its values for a description of what each characteristic declares the\n+    * store as supporting.\n+    * @implSpec\n+    * The default implementation returns an empty set\n+    * @return the set of characteristics that this store supports\n     */\n    default Set<Characteristic> characteristics() {\n       return EnumSet.noneOf(Characteristic.class);\n    }\n \n    /**\n-    *\n-    * @return\n+    * Returns a stage that when complete will tell if the current store can be accessed for requests. This can be useful\n+    * for some store implementations that may rely on an external source that may become unreachable. This can reduce\n+    * sending requests to a store that is not available as future Cache requests will all be met with\n+    * {@link StoreUnavailableException}.\n+    * <p>\n+    * Store availability is polled automatically every so often to update the status if the underlying store changes\n+    * availability. This method will not be invoked concurrently with itself (ie. this method will not be invoked\n+    * until after the previous stage has completed), but will be invoked concurrently with other operations, excluding\n+    * start and stop.\n+    * <p>\n+    * The other benefit of implementing this method is if the store is configured to be\n+    * {@link StoreConfiguration#async()}. This allows for this store to be unavailable for short periods of time\n+    * until its buffer fills.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjg0ODI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyNTozNFrOGZSTKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjowNDo1MVrOGZUvDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2NzQwMw==", "bodyText": "\"to assist\" is redundant.", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429167403", "createdAt": "2020-05-22T10:25:34Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.\n+    * <p>\n+    * Please see {@link Characteristic} and its values for a description of what each characteristic declares the\n+    * store as supporting.\n+    * @implSpec\n+    * The default implementation returns an empty set\n+    * @return the set of characteristics that this store supports\n     */\n    default Set<Characteristic> characteristics() {\n       return EnumSet.noneOf(Characteristic.class);\n    }\n \n    /**\n-    *\n-    * @return\n+    * Returns a stage that when complete will tell if the current store can be accessed for requests. This can be useful\n+    * for some store implementations that may rely on an external source that may become unreachable. This can reduce\n+    * sending requests to a store that is not available as future Cache requests will all be met with\n+    * {@link StoreUnavailableException}.\n+    * <p>\n+    * Store availability is polled automatically every so often to update the status if the underlying store changes\n+    * availability. This method will not be invoked concurrently with itself (ie. this method will not be invoked\n+    * until after the previous stage has completed), but will be invoked concurrently with other operations, excluding\n+    * start and stop.\n+    * <p>\n+    * The other benefit of implementing this method is if the store is configured to be\n+    * {@link StoreConfiguration#async()}. This allows for this store to be unavailable for short periods of time\n+    * until its buffer fills.\n+    * @implSpec\n+    * The default implementations returns a completed stage with the value {@code Boolean.TRUE}\n+    * @return stage that when complete signals if the store is available\n     */\n    default CompletionStage<Boolean> isAvailable() {\n       return CompletableFutures.completedTrue();\n    }\n \n    /**\n-    *\n-    * @param segment\n-    * @param key\n-    * @return\n+    * Returns a stage that will contain the value loaded from the store. If a {@link MarshallableEntry} needs to be\n+    * created here, {@link InitializationContext#getMarshallableEntryFactory()} ()} and {@link\n+    * InitializationContext#getByteBufferFactory()} should be used to assist.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNzMxMA==", "bodyText": "That is what I get from copying from the original, haha.", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429207310", "createdAt": "2020-05-22T12:04:51Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.\n+    * <p>\n+    * Please see {@link Characteristic} and its values for a description of what each characteristic declares the\n+    * store as supporting.\n+    * @implSpec\n+    * The default implementation returns an empty set\n+    * @return the set of characteristics that this store supports\n     */\n    default Set<Characteristic> characteristics() {\n       return EnumSet.noneOf(Characteristic.class);\n    }\n \n    /**\n-    *\n-    * @return\n+    * Returns a stage that when complete will tell if the current store can be accessed for requests. This can be useful\n+    * for some store implementations that may rely on an external source that may become unreachable. This can reduce\n+    * sending requests to a store that is not available as future Cache requests will all be met with\n+    * {@link StoreUnavailableException}.\n+    * <p>\n+    * Store availability is polled automatically every so often to update the status if the underlying store changes\n+    * availability. This method will not be invoked concurrently with itself (ie. this method will not be invoked\n+    * until after the previous stage has completed), but will be invoked concurrently with other operations, excluding\n+    * start and stop.\n+    * <p>\n+    * The other benefit of implementing this method is if the store is configured to be\n+    * {@link StoreConfiguration#async()}. This allows for this store to be unavailable for short periods of time\n+    * until its buffer fills.\n+    * @implSpec\n+    * The default implementations returns a completed stage with the value {@code Boolean.TRUE}\n+    * @return stage that when complete signals if the store is available\n     */\n    default CompletionStage<Boolean> isAvailable() {\n       return CompletableFutures.completedTrue();\n    }\n \n    /**\n-    *\n-    * @param segment\n-    * @param key\n-    * @return\n+    * Returns a stage that will contain the value loaded from the store. If a {@link MarshallableEntry} needs to be\n+    * created here, {@link InitializationContext#getMarshallableEntryFactory()} ()} and {@link\n+    * InitializationContext#getByteBufferFactory()} should be used to assist.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2NzQwMw=="}, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjg1MjM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyNzoxM1rOGZSVsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyNzo1M1rOGZSWvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2ODA0OA==", "bodyText": "\"If a problem is encountered, it is recommended to wrap any created/caught throwables in a {@link PersistenceException} and the stage be completed exceptionally.\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429168048", "createdAt": "2020-05-22T10:27:13Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.\n+    * <p>\n+    * Please see {@link Characteristic} and its values for a description of what each characteristic declares the\n+    * store as supporting.\n+    * @implSpec\n+    * The default implementation returns an empty set\n+    * @return the set of characteristics that this store supports\n     */\n    default Set<Characteristic> characteristics() {\n       return EnumSet.noneOf(Characteristic.class);\n    }\n \n    /**\n-    *\n-    * @return\n+    * Returns a stage that when complete will tell if the current store can be accessed for requests. This can be useful\n+    * for some store implementations that may rely on an external source that may become unreachable. This can reduce\n+    * sending requests to a store that is not available as future Cache requests will all be met with\n+    * {@link StoreUnavailableException}.\n+    * <p>\n+    * Store availability is polled automatically every so often to update the status if the underlying store changes\n+    * availability. This method will not be invoked concurrently with itself (ie. this method will not be invoked\n+    * until after the previous stage has completed), but will be invoked concurrently with other operations, excluding\n+    * start and stop.\n+    * <p>\n+    * The other benefit of implementing this method is if the store is configured to be\n+    * {@link StoreConfiguration#async()}. This allows for this store to be unavailable for short periods of time\n+    * until its buffer fills.\n+    * @implSpec\n+    * The default implementations returns a completed stage with the value {@code Boolean.TRUE}\n+    * @return stage that when complete signals if the store is available\n     */\n    default CompletionStage<Boolean> isAvailable() {\n       return CompletableFutures.completedTrue();\n    }\n \n    /**\n-    *\n-    * @param segment\n-    * @param key\n-    * @return\n+    * Returns a stage that will contain the value loaded from the store. If a {@link MarshallableEntry} needs to be\n+    * created here, {@link InitializationContext#getMarshallableEntryFactory()} ()} and {@link\n+    * InitializationContext#getByteBufferFactory()} should be used to assist.\n+    * <p>\n+    * <h4>Summary of Characteristics Effects</h4>\n+    * <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" summary=\"Summary of Characteristics Effects\">\n+    *    <tr>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Characteristic</th>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Effect</th>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#WRITE_ONLY}</td>\n+    *       <td valign=\"top\">This method will never be invoked</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#EXPIRATION}</td>\n+    *       <td valign=\"top\">When set this method must not return expired entries</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SEGMENTABLE}</td>\n+    *       <td valign=\"top\">When this is not set the provided {@code segment} parameter may be ignored</td>\n+    *    </tr>\n+    * </table>\n+    * <p>\n+    * If any problem is encountered, it is recommended that the store wrap any such Throwable in a PersistenceException\n+    * completing the stage exceptionally.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2ODMxNw==", "bodyText": "This appers for most methods, so I won't duplicate the comment.", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429168317", "createdAt": "2020-05-22T10:27:53Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.\n+    * <p>\n+    * Please see {@link Characteristic} and its values for a description of what each characteristic declares the\n+    * store as supporting.\n+    * @implSpec\n+    * The default implementation returns an empty set\n+    * @return the set of characteristics that this store supports\n     */\n    default Set<Characteristic> characteristics() {\n       return EnumSet.noneOf(Characteristic.class);\n    }\n \n    /**\n-    *\n-    * @return\n+    * Returns a stage that when complete will tell if the current store can be accessed for requests. This can be useful\n+    * for some store implementations that may rely on an external source that may become unreachable. This can reduce\n+    * sending requests to a store that is not available as future Cache requests will all be met with\n+    * {@link StoreUnavailableException}.\n+    * <p>\n+    * Store availability is polled automatically every so often to update the status if the underlying store changes\n+    * availability. This method will not be invoked concurrently with itself (ie. this method will not be invoked\n+    * until after the previous stage has completed), but will be invoked concurrently with other operations, excluding\n+    * start and stop.\n+    * <p>\n+    * The other benefit of implementing this method is if the store is configured to be\n+    * {@link StoreConfiguration#async()}. This allows for this store to be unavailable for short periods of time\n+    * until its buffer fills.\n+    * @implSpec\n+    * The default implementations returns a completed stage with the value {@code Boolean.TRUE}\n+    * @return stage that when complete signals if the store is available\n     */\n    default CompletionStage<Boolean> isAvailable() {\n       return CompletableFutures.completedTrue();\n    }\n \n    /**\n-    *\n-    * @param segment\n-    * @param key\n-    * @return\n+    * Returns a stage that will contain the value loaded from the store. If a {@link MarshallableEntry} needs to be\n+    * created here, {@link InitializationContext#getMarshallableEntryFactory()} ()} and {@link\n+    * InitializationContext#getByteBufferFactory()} should be used to assist.\n+    * <p>\n+    * <h4>Summary of Characteristics Effects</h4>\n+    * <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" summary=\"Summary of Characteristics Effects\">\n+    *    <tr>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Characteristic</th>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Effect</th>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#WRITE_ONLY}</td>\n+    *       <td valign=\"top\">This method will never be invoked</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#EXPIRATION}</td>\n+    *       <td valign=\"top\">When set this method must not return expired entries</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SEGMENTABLE}</td>\n+    *       <td valign=\"top\">When this is not set the provided {@code segment} parameter may be ignored</td>\n+    *    </tr>\n+    * </table>\n+    * <p>\n+    * If any problem is encountered, it is recommended that the store wrap any such Throwable in a PersistenceException\n+    * completing the stage exceptionally.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2ODA0OA=="}, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjg1NzI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyOToxNVrOGZSY7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyOToxNVrOGZSY7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2ODg3OQ==", "bodyText": "\"related to the..\"", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429168879", "createdAt": "2020-05-22T10:29:15Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.\n+    * <p>\n+    * Please see {@link Characteristic} and its values for a description of what each characteristic declares the\n+    * store as supporting.\n+    * @implSpec\n+    * The default implementation returns an empty set\n+    * @return the set of characteristics that this store supports\n     */\n    default Set<Characteristic> characteristics() {\n       return EnumSet.noneOf(Characteristic.class);\n    }\n \n    /**\n-    *\n-    * @return\n+    * Returns a stage that when complete will tell if the current store can be accessed for requests. This can be useful\n+    * for some store implementations that may rely on an external source that may become unreachable. This can reduce\n+    * sending requests to a store that is not available as future Cache requests will all be met with\n+    * {@link StoreUnavailableException}.\n+    * <p>\n+    * Store availability is polled automatically every so often to update the status if the underlying store changes\n+    * availability. This method will not be invoked concurrently with itself (ie. this method will not be invoked\n+    * until after the previous stage has completed), but will be invoked concurrently with other operations, excluding\n+    * start and stop.\n+    * <p>\n+    * The other benefit of implementing this method is if the store is configured to be\n+    * {@link StoreConfiguration#async()}. This allows for this store to be unavailable for short periods of time\n+    * until its buffer fills.\n+    * @implSpec\n+    * The default implementations returns a completed stage with the value {@code Boolean.TRUE}\n+    * @return stage that when complete signals if the store is available\n     */\n    default CompletionStage<Boolean> isAvailable() {\n       return CompletableFutures.completedTrue();\n    }\n \n    /**\n-    *\n-    * @param segment\n-    * @param key\n-    * @return\n+    * Returns a stage that will contain the value loaded from the store. If a {@link MarshallableEntry} needs to be\n+    * created here, {@link InitializationContext#getMarshallableEntryFactory()} ()} and {@link\n+    * InitializationContext#getByteBufferFactory()} should be used to assist.\n+    * <p>\n+    * <h4>Summary of Characteristics Effects</h4>\n+    * <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" summary=\"Summary of Characteristics Effects\">\n+    *    <tr>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Characteristic</th>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Effect</th>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#WRITE_ONLY}</td>\n+    *       <td valign=\"top\">This method will never be invoked</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#EXPIRATION}</td>\n+    *       <td valign=\"top\">When set this method must not return expired entries</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SEGMENTABLE}</td>\n+    *       <td valign=\"top\">When this is not set the provided {@code segment} parameter may be ignored</td>\n+    *    </tr>\n+    * </table>\n+    * <p>\n+    * If any problem is encountered, it is recommended that the store wrap any such Throwable in a PersistenceException\n+    * completing the stage exceptionally.\n+    * @param segment the segment for the given key if segmentation is enabled otherwise 0\n+    * @param key key of the entry to load\n+    * @return a stage that when complete contains the store value or null if not present\n     */\n    CompletionStage<MarshallableEntry<K, V>> load(int segment, Object key);\n \n    /**\n-    *\n-    * @param segment\n-    * @param key\n-    * @return\n+    * Returns a stage that will contain whether the value can be found in the store.\n+    * <p>\n+    * <h4>Summary of Characteristics Effects</h4>\n+    * <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" summary=\"Summary of Characteristics Effects\">\n+    *    <tr>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Characteristic</th>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Effect</th>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#WRITE_ONLY}</td>\n+    *       <td valign=\"top\">This method will never be invoked</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#EXPIRATION}</td>\n+    *       <td valign=\"top\">When set this method must not return true if the entry was expired</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SEGMENTABLE}</td>\n+    *       <td valign=\"top\">When this is not set the provided {@code segment} parameter may be ignored</td>\n+    *    </tr>\n+    * </table>\n+    * <p>\n+    * If any problem is encountered, it is recommended that the store wrap any such Throwable in a PersistenceException\n+    * completing the stage exceptionally.\n+    * <p>\n+    * @implSpec\n+    * A default implementation is provided that does the following:\n+    * <pre>{@code\n+    * return load(segment, key)\n+    *        .thenApply(Objects::nonNull);}\n+    * </pre>\n+    * @param segment the segment for the given key if segmentation is enabled otherwise 0\n+    * @param key key of the entry to check\n+    * @return a stage that when complete contains a boolean stating if the value is contained in the store\n     */\n    default CompletionStage<Boolean> containsKey(int segment, Object key) {\n       return load(segment, key)\n             .thenApply(Objects::nonNull);\n    }\n \n    /**\n-    *\n-    * @param segment\n-    * @param entry\n-    * @return\n+    * Writes the entry to the store for the given segment returning a stage that completes normally when it is finished.\n+    * <p>\n+    * <h4>Summary of Characteristics Effects</h4>\n+    * <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" summary=\"Summary of Characteristics Effects\">\n+    *    <tr>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Characteristic</th>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Effect</th>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#READ_ONLY}</td>\n+    *       <td valign=\"top\">This method will never be invoked</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#EXPIRATION}</td>\n+    *       <td valign=\"top\">When set this method must store the expiration metadata</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SEGMENTABLE}</td>\n+    *       <td valign=\"top\">When set this method must ensure the segment is stored with the entry</td>\n+    *    </tr>\n+    * </table>\n+    * <p>\n+    * If any problem is encountered, it is recommended that the store wrap any such Throwable in a PersistenceException\n+    * completing the stage exceptionally.\n+    * @param segment the segment for the given key if segmentation is enabled otherwise 0\n+    * @param entry the entry to persist to the store\n+    * @return a stage that when complete signals that the store has written the value\n     */\n    CompletionStage<Void> write(int segment, MarshallableEntry<? extends K, ? extends V> entry);\n \n    /**\n-    *\n-    * @param segment\n-    * @param key\n-    * @return\n+    * Removes the entry for given key and segment from the store returning a stage that when completes normally\n+    * contains whether the entry was actually removed or not.\n+    * <p>\n+    * <h4>Summary of Characteristics Effects</h4>\n+    * <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" summary=\"Summary of Characteristics Effects\">\n+    *    <tr>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Characteristic</th>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Effect</th>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#READ_ONLY}</td>\n+    *       <td valign=\"top\">This method will never be invoked</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SEGMENTABLE}</td>\n+    *       <td valign=\"top\">When this is not set the provided {@code segment} parameter may be ignored</td>\n+    *    </tr>\n+    * </table>\n+    * <p>\n+    * If any problem is encountered, it is recommended that the store wrap any such Throwable in a PersistenceException\n+    * completing the stage exceptionally.\n+    * @param segment the segment for the given key if segmentation is enabled otherwise 0\n+    * @param key key of the entry to delete from the store\n+    * @return a stage that when complete contains a boolean stating if the value was removed from the store\n     */\n    CompletionStage<Boolean> delete(int segment, Object key);\n \n    /**\n-    *\n-    * @param segments\n-    * @return\n+    * Invoked when a node becomes an owner of the given segments. Some store implementations may require initializing\n+    * additional resources when a new segment is required. For example a store could store entries in a different file\n+    * per segment.\n+    * <p>\n+    * <h4>Summary of Characteristics Effects</h4>\n+    * <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" summary=\"Summary of Characteristics Effects\">\n+    *    <tr>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Characteristic</th>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Effect</th>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SHAREABLE}</td>\n+    *       <td valign=\"top\">If the store has this characteristic and is configured to be {@link StoreConfiguration#shared()},\n+    *          this method will never be invoked</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SEGMENTABLE}</td>\n+    *       <td valign=\"top\">This method is only invoked if the store has this characteristic</td>\n+    *    </tr>\n+    * </table>\n+    * <p>\n+    * If any problem is encountered, it is recommended that the store wrap any such Throwable in a PersistenceException\n+    * completing the stage exceptionally.\n+    * @param segments the segments to add\n+    * @return a stage that when complete signals that the segments have been added\n     */\n    default CompletionStage<Void> addSegments(IntSet segments) {\n       throw new UnsupportedOperationException(\"Store characteristic included \" + Characteristic.SEGMENTABLE + \", but it does not implement addSegments\");\n    }\n \n    /**\n-    *\n-    * @param segments\n-    * @return\n+    * Invoked when a node loses ownership of the given segments. A store must then remove any entries that map to the\n+    * given segments and can remove any resources related to the given segments. For example a database store can\n+    * delete rows of the given segment or a file based store may delete files related the given segments.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 413}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjg1OTE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyOTo1NlrOGZSaLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyOTo1NlrOGZSaLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2OTE5OA==", "bodyText": "first comma is unnecessary", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429169198", "createdAt": "2020-05-22T10:29:56Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/persistence/spi/NonBlockingStore.java", "diffHunk": "@@ -80,114 +146,344 @@\n        * SEGMENTABLE will never be allowed to be configured as segmented.\n        * <p>\n        * Stores that have this characteristic must override the {@link #addSegments(IntSet)} and\n-       * {@link #removeSegments(IntSet)} methods.\n+       * {@link #removeSegments(IntSet)} methods. If a store is {@link #SHAREABLE} and is configured to be shared\n+       * via configuration these methods will not be invoked though.\n        */\n       SEGMENTABLE,\n       /**\n-       * If this store supports storing expiration metadata. Certain methods may or may not include expired entries.\n+       * If this store supports storing expiration metadata. That is this store should never return an expired entry\n+       * via any methods such as {@link #load(int, Object)}, {@link #publishKeys(IntSet, Predicate)} or\n+       * {@link #publishEntries(IntSet, Predicate, boolean)}. It is recommended that a store use the provided\n+       * {@link org.infinispan.commons.time.TimeService} in the {@code InitializationContext} to determine if an\n+       * entry has expired.\n+       * <p>\n+       * The information about an entry and its expiration is included in the {@link org.infinispan.metadata.Metadata}\n+       * which is accessible from the {@link MarshallableEntry} which is provided.\n        * <p>\n        * Stores that have this characteristic must override the {@link #purgeExpired()} method.\n        */\n       EXPIRATION\n    }\n \n    /**\n+    * The first method that will be invoked on this store to allow for the store to configure and do any additional\n+    * steps, such as connecting via socket or opening file descriptors.\n     * <p>\n-    * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n+    * The provided {@link InitializationContext} contains many helpful objects, including the configuration of the\n+    * cache and store, concurrency utilities such as {@link org.infinispan.util.concurrent.BlockingManager} or\n+    * an executor reserved for non blocking operations only {@link InitializationContext#getNonBlockingExecutor()}.\n+    * <p>\n+    * This method is guaranteed to not be invoked concurrently with other operations. This means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@code start} a second time if\n+    * {@link #stop()} has been invoked and allowed for its stage to complete.\n     * @param ctx initialization context used to initialize this store\n     * @return a stage that when complete signals that this store has been successfully started\n     */\n    CompletionStage<Void> start(InitializationContext ctx);\n \n    /**\n+    * This method will be invoked is being shut down. It is expected that all resources related to the store to be\n+    * freed upon completion of the returned stage.\n     * <p>\n     * This method is guaranteed to not be invoked concurrently with other operations. This also means another method\n     * will not be invoked on this store until after the returned Stage completes.\n+    * <p>\n+    * It is expected that an implementation should be able to \"restart\" by invoking {@link #start(InitializationContext)}\n+    * a second time if {@code stop} has been invoked and allowed for its stage to complete.\n     * @return a stage that when complete signals that this store has been stopped\n     */\n    CompletionStage<Void> stop();\n \n    /**\n-    *\n-    * @return\n+    * Returns a set of characteristics for this store and its elements. This method will be invoked one to many times\n+    * to determine which methods of the store can be used and how its data can be handled.\n+    * <p>\n+    * Please see {@link Characteristic} and its values for a description of what each characteristic declares the\n+    * store as supporting.\n+    * @implSpec\n+    * The default implementation returns an empty set\n+    * @return the set of characteristics that this store supports\n     */\n    default Set<Characteristic> characteristics() {\n       return EnumSet.noneOf(Characteristic.class);\n    }\n \n    /**\n-    *\n-    * @return\n+    * Returns a stage that when complete will tell if the current store can be accessed for requests. This can be useful\n+    * for some store implementations that may rely on an external source that may become unreachable. This can reduce\n+    * sending requests to a store that is not available as future Cache requests will all be met with\n+    * {@link StoreUnavailableException}.\n+    * <p>\n+    * Store availability is polled automatically every so often to update the status if the underlying store changes\n+    * availability. This method will not be invoked concurrently with itself (ie. this method will not be invoked\n+    * until after the previous stage has completed), but will be invoked concurrently with other operations, excluding\n+    * start and stop.\n+    * <p>\n+    * The other benefit of implementing this method is if the store is configured to be\n+    * {@link StoreConfiguration#async()}. This allows for this store to be unavailable for short periods of time\n+    * until its buffer fills.\n+    * @implSpec\n+    * The default implementations returns a completed stage with the value {@code Boolean.TRUE}\n+    * @return stage that when complete signals if the store is available\n     */\n    default CompletionStage<Boolean> isAvailable() {\n       return CompletableFutures.completedTrue();\n    }\n \n    /**\n-    *\n-    * @param segment\n-    * @param key\n-    * @return\n+    * Returns a stage that will contain the value loaded from the store. If a {@link MarshallableEntry} needs to be\n+    * created here, {@link InitializationContext#getMarshallableEntryFactory()} ()} and {@link\n+    * InitializationContext#getByteBufferFactory()} should be used to assist.\n+    * <p>\n+    * <h4>Summary of Characteristics Effects</h4>\n+    * <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" summary=\"Summary of Characteristics Effects\">\n+    *    <tr>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Characteristic</th>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Effect</th>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#WRITE_ONLY}</td>\n+    *       <td valign=\"top\">This method will never be invoked</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#EXPIRATION}</td>\n+    *       <td valign=\"top\">When set this method must not return expired entries</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SEGMENTABLE}</td>\n+    *       <td valign=\"top\">When this is not set the provided {@code segment} parameter may be ignored</td>\n+    *    </tr>\n+    * </table>\n+    * <p>\n+    * If any problem is encountered, it is recommended that the store wrap any such Throwable in a PersistenceException\n+    * completing the stage exceptionally.\n+    * @param segment the segment for the given key if segmentation is enabled otherwise 0\n+    * @param key key of the entry to load\n+    * @return a stage that when complete contains the store value or null if not present\n     */\n    CompletionStage<MarshallableEntry<K, V>> load(int segment, Object key);\n \n    /**\n-    *\n-    * @param segment\n-    * @param key\n-    * @return\n+    * Returns a stage that will contain whether the value can be found in the store.\n+    * <p>\n+    * <h4>Summary of Characteristics Effects</h4>\n+    * <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" summary=\"Summary of Characteristics Effects\">\n+    *    <tr>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Characteristic</th>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Effect</th>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#WRITE_ONLY}</td>\n+    *       <td valign=\"top\">This method will never be invoked</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#EXPIRATION}</td>\n+    *       <td valign=\"top\">When set this method must not return true if the entry was expired</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SEGMENTABLE}</td>\n+    *       <td valign=\"top\">When this is not set the provided {@code segment} parameter may be ignored</td>\n+    *    </tr>\n+    * </table>\n+    * <p>\n+    * If any problem is encountered, it is recommended that the store wrap any such Throwable in a PersistenceException\n+    * completing the stage exceptionally.\n+    * <p>\n+    * @implSpec\n+    * A default implementation is provided that does the following:\n+    * <pre>{@code\n+    * return load(segment, key)\n+    *        .thenApply(Objects::nonNull);}\n+    * </pre>\n+    * @param segment the segment for the given key if segmentation is enabled otherwise 0\n+    * @param key key of the entry to check\n+    * @return a stage that when complete contains a boolean stating if the value is contained in the store\n     */\n    default CompletionStage<Boolean> containsKey(int segment, Object key) {\n       return load(segment, key)\n             .thenApply(Objects::nonNull);\n    }\n \n    /**\n-    *\n-    * @param segment\n-    * @param entry\n-    * @return\n+    * Writes the entry to the store for the given segment returning a stage that completes normally when it is finished.\n+    * <p>\n+    * <h4>Summary of Characteristics Effects</h4>\n+    * <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" summary=\"Summary of Characteristics Effects\">\n+    *    <tr>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Characteristic</th>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Effect</th>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#READ_ONLY}</td>\n+    *       <td valign=\"top\">This method will never be invoked</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#EXPIRATION}</td>\n+    *       <td valign=\"top\">When set this method must store the expiration metadata</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SEGMENTABLE}</td>\n+    *       <td valign=\"top\">When set this method must ensure the segment is stored with the entry</td>\n+    *    </tr>\n+    * </table>\n+    * <p>\n+    * If any problem is encountered, it is recommended that the store wrap any such Throwable in a PersistenceException\n+    * completing the stage exceptionally.\n+    * @param segment the segment for the given key if segmentation is enabled otherwise 0\n+    * @param entry the entry to persist to the store\n+    * @return a stage that when complete signals that the store has written the value\n     */\n    CompletionStage<Void> write(int segment, MarshallableEntry<? extends K, ? extends V> entry);\n \n    /**\n-    *\n-    * @param segment\n-    * @param key\n-    * @return\n+    * Removes the entry for given key and segment from the store returning a stage that when completes normally\n+    * contains whether the entry was actually removed or not.\n+    * <p>\n+    * <h4>Summary of Characteristics Effects</h4>\n+    * <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" summary=\"Summary of Characteristics Effects\">\n+    *    <tr>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Characteristic</th>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Effect</th>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#READ_ONLY}</td>\n+    *       <td valign=\"top\">This method will never be invoked</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SEGMENTABLE}</td>\n+    *       <td valign=\"top\">When this is not set the provided {@code segment} parameter may be ignored</td>\n+    *    </tr>\n+    * </table>\n+    * <p>\n+    * If any problem is encountered, it is recommended that the store wrap any such Throwable in a PersistenceException\n+    * completing the stage exceptionally.\n+    * @param segment the segment for the given key if segmentation is enabled otherwise 0\n+    * @param key key of the entry to delete from the store\n+    * @return a stage that when complete contains a boolean stating if the value was removed from the store\n     */\n    CompletionStage<Boolean> delete(int segment, Object key);\n \n    /**\n-    *\n-    * @param segments\n-    * @return\n+    * Invoked when a node becomes an owner of the given segments. Some store implementations may require initializing\n+    * additional resources when a new segment is required. For example a store could store entries in a different file\n+    * per segment.\n+    * <p>\n+    * <h4>Summary of Characteristics Effects</h4>\n+    * <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" summary=\"Summary of Characteristics Effects\">\n+    *    <tr>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Characteristic</th>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Effect</th>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SHAREABLE}</td>\n+    *       <td valign=\"top\">If the store has this characteristic and is configured to be {@link StoreConfiguration#shared()},\n+    *          this method will never be invoked</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SEGMENTABLE}</td>\n+    *       <td valign=\"top\">This method is only invoked if the store has this characteristic</td>\n+    *    </tr>\n+    * </table>\n+    * <p>\n+    * If any problem is encountered, it is recommended that the store wrap any such Throwable in a PersistenceException\n+    * completing the stage exceptionally.\n+    * @param segments the segments to add\n+    * @return a stage that when complete signals that the segments have been added\n     */\n    default CompletionStage<Void> addSegments(IntSet segments) {\n       throw new UnsupportedOperationException(\"Store characteristic included \" + Characteristic.SEGMENTABLE + \", but it does not implement addSegments\");\n    }\n \n    /**\n-    *\n-    * @param segments\n-    * @return\n+    * Invoked when a node loses ownership of the given segments. A store must then remove any entries that map to the\n+    * given segments and can remove any resources related to the given segments. For example a database store can\n+    * delete rows of the given segment or a file based store may delete files related the given segments.\n+    * <p>\n+    * <h4>Summary of Characteristics Effects</h4>\n+    * <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" summary=\"Summary of Characteristics Effects\">\n+    *    <tr>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Characteristic</th>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Effect</th>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SHAREABLE}</td>\n+    *       <td valign=\"top\">If the store has this characteristic and is configured to be {@link StoreConfiguration#shared()},\n+    *          this method will never be invoked</td>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#SEGMENTABLE}</td>\n+    *       <td valign=\"top\">This method is only invoked if the store has this characteristic</td>\n+    *    </tr>\n+    * </table>\n+    * <p>\n+    * If any problem is encountered, it is recommended that the store wrap any such Throwable in a PersistenceException\n+    * completing the stage exceptionally.\n+    * @param segments the segments to remove\n+    * @return a stage that when complete signals that the segments have been removed\n     */\n    default CompletionStage<Void> removeSegments(IntSet segments) {\n       throw new UnsupportedOperationException(\"Store characteristic included \" + Characteristic.SEGMENTABLE + \", but it does not implement removeSegments\");\n    }\n \n    /**\n-    *\n-    * @return\n+    * Clears all entries from the store.\n+    * <p>\n+    * <h4>Summary of Characteristics Effects</h4>\n+    * <table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" summary=\"Summary of Characteristics Effects\">\n+    *    <tr>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Characteristic</th>\n+    *       <th bgcolor=\"#CCCCFF\" align=\"left\">Effect</th>\n+    *    </tr>\n+    *    <tr>\n+    *       <td valign=\"top\">{@link Characteristic#READ_ONLY}</td>\n+    *       <td valign=\"top\">This method will never be invoked</td>\n+    *    </tr>\n+    * </table>\n+    * <p>\n+    * If any problem is encountered, it is recommended that the store wrap any such Throwable in a PersistenceException\n+    * completing the stage exceptionally.\n+    * @return a stage that when complete signals that the store has been cleared\n     */\n    CompletionStage<Void> clear();\n \n    /**\n-    *\n-    * @param publisherCount\n-    * @param publisher\n-    * @return\n+    * Writes the entries provided by the publisher into the underlying store. The Publisher will provide a\n+    * {@link SegmentedPublisher}, for every segment in the batch, which contains at least one entry that maps to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 470}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjg2NDc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/util/concurrent/BlockingManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDozMjowNFrOGZSd0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDozMjowNFrOGZSd0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3MDEzMQ==", "bodyText": "Just \"This id will be printed to the TRACE log.\"?", "url": "https://github.com/infinispan/infinispan/pull/8370#discussion_r429170131", "createdAt": "2020-05-22T10:32:04Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/util/concurrent/BlockingManager.java", "diffHunk": "@@ -14,6 +14,10 @@\n  * <p>\n  * If the current thread is blocking, it blocks until the task may run, runs the task in the current thread, and returns a\n  * completed {@code CompletionStage}, so it <em>does not</em> continue the execution on the non-blocking executor.\n+ * <p>\n+ * Many of the methods on {@code BlockingManager} allow an id to be passed when performing the operation. This id will\n+ * be printed to the log, assuming TRACE level is enabled. It is therefore advised to provide something unique so that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ac5ae2b79bcea3f221fd82b59cf636ecec9ac4"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4246, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}