{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNTAwNTU5", "number": 8191, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOToyMDo1MVrODxjqzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1Mjo1NVrOD2l7IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjkxMjE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOToyMDo1MVrOGFFxVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOTo1NDowNVrOGM0_mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MDYxMg==", "bodyText": "I don't think we can deprecate this and remove with no replacement, the problem is RemoteQuery uses a complicated Wrapper that is not part of core, and it drags lots of dependencies to Hibernate Search.", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r407990612", "createdAt": "2020-04-14T09:20:51Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -91,26 +94,29 @@ private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(null, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5Mzg5OA==", "bodyText": "It's yet to see the role this wrapper will play after the Hibernate Search 6 migration though...", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r407993898", "createdAt": "2020-04-14T09:25:55Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -91,26 +94,29 @@ private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(null, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MDYxMg=="}, "originalCommit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5NjM2Mg==", "bodyText": "@gustavonalle is there a description somewhere of why we need messageDescriptor as a field in ProtobufValueWrapper instead of lazily computing it from the first few bytes of the payload when needed?", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r407996362", "createdAt": "2020-04-14T09:29:41Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -91,26 +94,29 @@ private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(null, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MDYxMg=="}, "originalCommit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5OTkxNw==", "bodyText": "How could it be computed? AFAICT, messageDescriptor is the schema that describe the blob", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r407999917", "createdAt": "2020-04-14T09:35:24Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -91,26 +94,29 @@ private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(null, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MDYxMg=="}, "originalCommit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMDIzOQ==", "bodyText": "@anistor can tell more about it", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r408000239", "createdAt": "2020-04-14T09:35:53Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -91,26 +94,29 @@ private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(null, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MDYxMg=="}, "originalCommit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyMTQ4MQ==", "bodyText": "The description is in the javadocs of ProtobufValueWrapper, I remember I wrote something there @danberindei . ProtobufValueWrapper is required for indexing. It needs that messageDescriptor to be able to decode the protobuf object. No, it cannot be really lazily computed without any external help.  ProtobufValueWrapper can obtain the type name or type id from the first few bytes but then it need a reference to a SerializationContext to be able to obtain that descriptor. So a bit more moving parts are involved here. What it the reason to remove/deprecate? And what ? :) [I did not follow discussion here and on zulip]", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r408021481", "createdAt": "2020-04-14T10:09:46Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -91,26 +94,29 @@ private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(null, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MDYxMg=="}, "originalCommit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAzNTM4Ng==", "bodyText": "@anistor deprecation would be a method in the cache that overrides a wrapper after the cache is created, and since ProtobufValueWrapper is not part of core, it'd be more difficult to associated it with a cache at creation time rather than in the RemoteQuery server lifecycle methods, but Dan has a proposal for it", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r408035386", "createdAt": "2020-04-14T10:34:06Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -91,26 +94,29 @@ private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(null, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MDYxMg=="}, "originalCommit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4OTIxNQ==", "bodyText": "@gustavonalle I have updated the PR to just move overrideWrapper() from DataConversion to a component named ConversionManager for now. I got a bit carried away and made a lot more changes to the initialization of the cache wrappers, so the PR is much bigger now.\n@anistor the javadoc in ProtobufValueWrapper says just\nThe Descriptor of the message (if it's a Message and not a primitive value, or null otherwise). Transient field!\nAFAICT WrappedMessageTagHandler reads a WRAPPED_DESCRIPTOR_FULL_NAME field from the payload and computes the descriptor based on that, so I was thinking maybe ProtobufValueWrapperFieldBridge could also use a WrappedMessageTagHandler to compute the descriptor on demand.", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r412789215", "createdAt": "2020-04-22T08:41:27Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -91,26 +94,29 @@ private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(null, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MDYxMg=="}, "originalCommit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc2OTcyOA==", "bodyText": "@danberindei I'm glad the very informative javadoc of ProtobufValueWrapper.messageDescriptor field piqued your interest. But you may want to read also the javadoc of the setter of this field or even follow the (unfortunately) half-broken link from that description, or alternatively read the code :).\nmessageDescriptor field is set by WrappedMessageTagHandler once, to (possibly) be accessed many times and avoid the penalty of being recomputed on demand many times. That field must exist to cache this expensive thing.\nTwo places where it is used are ProtobufValueWrapperAnalyzerDiscriminator and ProtobufValueWrapperIndexingInterceptor.\nProtobufValueWrapperFieldBridge is cache-scoped, not entry-scoped. So it must store that descriptor somewhereelse ....\nI do not understand yet what and why you need to change ProtobufValueWrapper and his many ugly friends @danberindei", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r415769728", "createdAt": "2020-04-27T12:28:53Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -91,26 +94,29 @@ private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(null, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MDYxMg=="}, "originalCommit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0MzAwNg==", "bodyText": "@anistor I do not intend to change ProtobufValueWrapper, but I am curious about why it is needed, so I asked \"Is there a description somewhere of why we need messageDescriptor as a field in ProtobufValueWrapper instead of lazily computing it from the first few bytes of the payload when needed?\"\nSo far I haven't seen an explanation in the javadoc or here of why computing the messageDescriptor lazily is so expensive that it's worth keeping the extra field in the heap at all times. I was imagining that the parsing of the message descriptor would be just reading a few bytes at a known offset in the value byte[], is it much more than that?", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r415943006", "createdAt": "2020-04-27T16:03:12Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -91,26 +94,29 @@ private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(null, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MDYxMg=="}, "originalCommit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNzE3NQ==", "bodyText": "The primordial need for ProtobufValueWrapper is rooted in hibernate-search 5. It needs to discriminate on the class of an object (plus eventually configured class bridges) to be able to index it. But in 6 this changes a lot. I'd keep this ProtobufValueWrapper undisturbed until we have 6 merged, then we can try to re-analyse its worthiness.", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r416037175", "createdAt": "2020-04-27T18:09:45Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -91,26 +94,29 @@ private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(null, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MDYxMg=="}, "originalCommit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEwNDM0NQ==", "bodyText": "Ok, fair enough", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r416104345", "createdAt": "2020-04-27T19:54:05Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -91,26 +94,29 @@ private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(null, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MDYxMg=="}, "originalCommit": {"oid": "e426708ba9e03c8b6606d7877cd55a4887521297"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTY3MTM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo0NDoxM1rOGMaTfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDozODo1MVrOGMcdww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY2NzA2OA==", "bodyText": "14.0? Is this 2 years from now?  :)", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r415667068", "createdAt": "2020-04-27T09:44:13Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -43,152 +38,155 @@\n @Scope(Scopes.NONE)\n public final class DataConversion {\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwMjQ2Nw==", "bodyText": "I hope it's going to be sooner than 2 years, but it's the example Tristan gave in the removal policy discussion.", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r415702467", "createdAt": "2020-04-27T10:38:51Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -43,152 +38,155 @@\n @Scope(Scopes.NONE)\n public final class DataConversion {\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY2NzA2OA=="}, "originalCommit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTY5NzM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/encoding/impl/ConversionManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1MDowMlrOGMai0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoxNToxM1rOGOrT8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MDk5NA==", "bodyText": "Not sure about this name, this class is not doing conversion, but providing info about the storage type which does not change for all decorations a cache may have at runtime.", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r415670994", "createdAt": "2020-04-27T09:50:02Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/impl/ConversionManager.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.infinispan.encoding.impl;\n+\n+import org.infinispan.commons.dataconversion.ByteArrayWrapper;\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.Wrapper;\n+import org.infinispan.commons.marshall.Marshaller;\n+import org.infinispan.configuration.cache.Configuration;\n+import org.infinispan.configuration.cache.Configurations;\n+import org.infinispan.configuration.cache.ContentTypeConfiguration;\n+import org.infinispan.configuration.cache.EncodingConfiguration;\n+import org.infinispan.configuration.cache.StorageType;\n+import org.infinispan.configuration.global.GlobalConfiguration;\n+import org.infinispan.factories.KnownComponentNames;\n+import org.infinispan.factories.annotations.ComponentName;\n+import org.infinispan.factories.annotations.Inject;\n+import org.infinispan.factories.scopes.Scope;\n+import org.infinispan.factories.scopes.Scopes;\n+import org.infinispan.marshall.core.EncoderRegistry;\n+import org.infinispan.marshall.persistence.PersistenceMarshaller;\n+import org.infinispan.registry.InternalCacheRegistry;\n+\n+/**\n+ * Key/value conversion information.\n+ *\n+ * @author Dan Berindei\n+ * @since 11\n+ */\n+@Scope(Scopes.NAMED_CACHE)\n+public class ConversionManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwMzYwOA==", "bodyText": "I wasn't sure about the name either, WDYT about StorageManager or StorageHelper @gustavonalle ?", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r415703608", "createdAt": "2020-04-27T10:40:45Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/impl/ConversionManager.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.infinispan.encoding.impl;\n+\n+import org.infinispan.commons.dataconversion.ByteArrayWrapper;\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.Wrapper;\n+import org.infinispan.commons.marshall.Marshaller;\n+import org.infinispan.configuration.cache.Configuration;\n+import org.infinispan.configuration.cache.Configurations;\n+import org.infinispan.configuration.cache.ContentTypeConfiguration;\n+import org.infinispan.configuration.cache.EncodingConfiguration;\n+import org.infinispan.configuration.cache.StorageType;\n+import org.infinispan.configuration.global.GlobalConfiguration;\n+import org.infinispan.factories.KnownComponentNames;\n+import org.infinispan.factories.annotations.ComponentName;\n+import org.infinispan.factories.annotations.Inject;\n+import org.infinispan.factories.scopes.Scope;\n+import org.infinispan.factories.scopes.Scopes;\n+import org.infinispan.marshall.core.EncoderRegistry;\n+import org.infinispan.marshall.persistence.PersistenceMarshaller;\n+import org.infinispan.registry.InternalCacheRegistry;\n+\n+/**\n+ * Key/value conversion information.\n+ *\n+ * @author Dan Berindei\n+ * @since 11\n+ */\n+@Scope(Scopes.NAMED_CACHE)\n+public class ConversionManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MDk5NA=="}, "originalCommit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5MjkyNA==", "bodyText": "StorageConfigurationManager ?", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r416492924", "createdAt": "2020-04-28T10:08:49Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/impl/ConversionManager.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.infinispan.encoding.impl;\n+\n+import org.infinispan.commons.dataconversion.ByteArrayWrapper;\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.Wrapper;\n+import org.infinispan.commons.marshall.Marshaller;\n+import org.infinispan.configuration.cache.Configuration;\n+import org.infinispan.configuration.cache.Configurations;\n+import org.infinispan.configuration.cache.ContentTypeConfiguration;\n+import org.infinispan.configuration.cache.EncodingConfiguration;\n+import org.infinispan.configuration.cache.StorageType;\n+import org.infinispan.configuration.global.GlobalConfiguration;\n+import org.infinispan.factories.KnownComponentNames;\n+import org.infinispan.factories.annotations.ComponentName;\n+import org.infinispan.factories.annotations.Inject;\n+import org.infinispan.factories.scopes.Scope;\n+import org.infinispan.factories.scopes.Scopes;\n+import org.infinispan.marshall.core.EncoderRegistry;\n+import org.infinispan.marshall.persistence.PersistenceMarshaller;\n+import org.infinispan.registry.InternalCacheRegistry;\n+\n+/**\n+ * Key/value conversion information.\n+ *\n+ * @author Dan Berindei\n+ * @since 11\n+ */\n+@Scope(Scopes.NAMED_CACHE)\n+public class ConversionManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MDk5NA=="}, "originalCommit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Mjg2NQ==", "bodyText": "Sounds good, updated @gustavonalle", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r418042865", "createdAt": "2020-04-30T14:15:13Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/encoding/impl/ConversionManager.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.infinispan.encoding.impl;\n+\n+import org.infinispan.commons.dataconversion.ByteArrayWrapper;\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.Wrapper;\n+import org.infinispan.commons.marshall.Marshaller;\n+import org.infinispan.configuration.cache.Configuration;\n+import org.infinispan.configuration.cache.Configurations;\n+import org.infinispan.configuration.cache.ContentTypeConfiguration;\n+import org.infinispan.configuration.cache.EncodingConfiguration;\n+import org.infinispan.configuration.cache.StorageType;\n+import org.infinispan.configuration.global.GlobalConfiguration;\n+import org.infinispan.factories.KnownComponentNames;\n+import org.infinispan.factories.annotations.ComponentName;\n+import org.infinispan.factories.annotations.Inject;\n+import org.infinispan.factories.scopes.Scope;\n+import org.infinispan.factories.scopes.Scopes;\n+import org.infinispan.marshall.core.EncoderRegistry;\n+import org.infinispan.marshall.persistence.PersistenceMarshaller;\n+import org.infinispan.registry.InternalCacheRegistry;\n+\n+/**\n+ * Key/value conversion information.\n+ *\n+ * @author Dan Berindei\n+ * @since 11\n+ */\n+@Scope(Scopes.NAMED_CACHE)\n+public class ConversionManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MDk5NA=="}, "originalCommit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTcwNzgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1MjoxOFrOGMao0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1MjoxOFrOGMao0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MjUyOA==", "bodyText": "I just updated #8196", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r415672528", "createdAt": "2020-04-27T09:52:18Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -43,152 +38,155 @@\n @Scope(Scopes.NONE)\n public final class DataConversion {\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated\n    public static final DataConversion DEFAULT_KEY = new DataConversion(IdentityEncoder.INSTANCE, ByteArrayWrapper.INSTANCE, true);\n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated\n    public static final DataConversion DEFAULT_VALUE = new DataConversion(IdentityEncoder.INSTANCE, ByteArrayWrapper.INSTANCE, false);\n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0. For internal use only.\n+    */\n+   @Deprecated\n    public static final DataConversion IDENTITY_KEY = new DataConversion(IdentityEncoder.INSTANCE, IdentityWrapper.INSTANCE, true);\n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0. For internal use only.\n+    */\n+   @Deprecated\n    public static final DataConversion IDENTITY_VALUE = new DataConversion(IdentityEncoder.INSTANCE, IdentityWrapper.INSTANCE, false);\n \n    // On the origin node the conversion is initialized with the encoder/wrapper classes, on remote nodes with the ids\n-   private Class<? extends Encoder> encoderClass;\n-   private Class<? extends Wrapper> wrapperClass;\n-   private short encoderId;\n-   private byte wrapperId;\n-   private MediaType requestMediaType;\n-   private MediaType storageMediaType;\n-   private boolean isKey;\n-\n+   private final transient Class<? extends Encoder> encoderClass;\n+   // TODO Make final after removing overrideWrapper()\n+   private transient Class<? extends Wrapper> wrapperClass;\n+   private final short encoderId;\n+   private final byte wrapperId;\n+   private final MediaType requestMediaType;\n+   private final boolean isKey;\n+\n+   private transient MediaType storageMediaType;\n    private transient Encoder encoder;\n-   private transient Wrapper wrapper;\n+   private transient Wrapper customWrapper;\n    private transient Transcoder transcoder;\n    private transient EncoderRegistry encoderRegistry;\n+   private transient ConversionManager conversionManager;\n \n    private DataConversion(Class<? extends Encoder> encoderClass, Class<? extends Wrapper> wrapperClass,\n-                          MediaType requestMediaType, MediaType storageMediaType, boolean isKey) {\n+                          MediaType requestMediaType, boolean isKey) {\n       this.encoderClass = encoderClass;\n       this.wrapperClass = wrapperClass;\n       this.requestMediaType = requestMediaType;\n-      this.storageMediaType = storageMediaType;\n       this.isKey = isKey;\n+      this.encoderId = EncoderIds.NO_ENCODER;\n+      this.wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    /**\n     * Used for de-serialization\n     */\n-   private DataConversion(Short encoderId, Byte wrapperId, MediaType requestMediaType, MediaType storageMediaType,\n-                          boolean isKey) {\n+   private DataConversion(Short encoderId, Byte wrapperId, MediaType requestMediaType, boolean isKey) {\n       this.encoderId = encoderId;\n       this.wrapperId = wrapperId;\n       this.requestMediaType = requestMediaType;\n-      this.storageMediaType = storageMediaType;\n       this.isKey = isKey;\n+      this.encoderClass = null;\n+      this.wrapperClass = null;\n    }\n \n    private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.encoder = encoder;\n-      this.wrapper = wrapper;\n+      this.customWrapper = wrapper;\n       this.encoderClass = encoder.getClass();\n       this.wrapperClass = wrapper.getClass();\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated\n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated\n    public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegistry cr) {\n-      this.wrapper = null;\n+      this.customWrapper = null;\n       this.wrapperClass = newWrapper;\n       cr.wireDependencies(this);\n    }\n \n    /**\n-    * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n-      EncodingConfiguration encodingConfiguration = configuration.encoding();\n-      ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n-      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n-      MediaType mediaType = userMarshaller.mediaType();\n-      boolean heap = configuration.memory().storageType() == StorageType.OBJECT;\n-      // If explicitly configured, use the value provided\n-      if (contentTypeConfiguration.isMediaTypeChanged()) {\n-         return contentTypeConfiguration.mediaType();\n-      }\n-      // Indexed caches started by the server will assume application/protostream as storage media type\n-      if (!embeddedMode && configuration.indexing().enabled() && contentTypeConfiguration.mediaType() == null) {\n-         return MediaType.APPLICATION_PROTOSTREAM;\n-      }\n-      if (internalCache) return MediaType.APPLICATION_OBJECT;\n-\n-      if (embeddedMode) {\n-         return heap ? MediaType.APPLICATION_OBJECT : mediaType;\n-      }\n-\n-      return MediaType.APPLICATION_UNKNOWN;\n-   }\n-\n+   @Deprecated\n    public boolean isConversionSupported(MediaType mediaType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTcxMDQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1Mjo1NVrOGMaqVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1Mjo1NVrOGMaqVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MjkxOQ==", "bodyText": "I just updated #8196, could you handle it first, since you are including that commit in this PR?", "url": "https://github.com/infinispan/infinispan/pull/8191#discussion_r415672919", "createdAt": "2020-04-27T09:52:55Z", "author": {"login": "gustavonalle"}, "path": "core/src/main/java/org/infinispan/encoding/DataConversion.java", "diffHunk": "@@ -43,152 +38,155 @@\n @Scope(Scopes.NONE)\n public final class DataConversion {\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated\n    public static final DataConversion DEFAULT_KEY = new DataConversion(IdentityEncoder.INSTANCE, ByteArrayWrapper.INSTANCE, true);\n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated\n    public static final DataConversion DEFAULT_VALUE = new DataConversion(IdentityEncoder.INSTANCE, ByteArrayWrapper.INSTANCE, false);\n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0. For internal use only.\n+    */\n+   @Deprecated\n    public static final DataConversion IDENTITY_KEY = new DataConversion(IdentityEncoder.INSTANCE, IdentityWrapper.INSTANCE, true);\n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0. For internal use only.\n+    */\n+   @Deprecated\n    public static final DataConversion IDENTITY_VALUE = new DataConversion(IdentityEncoder.INSTANCE, IdentityWrapper.INSTANCE, false);\n \n    // On the origin node the conversion is initialized with the encoder/wrapper classes, on remote nodes with the ids\n-   private Class<? extends Encoder> encoderClass;\n-   private Class<? extends Wrapper> wrapperClass;\n-   private short encoderId;\n-   private byte wrapperId;\n-   private MediaType requestMediaType;\n-   private MediaType storageMediaType;\n-   private boolean isKey;\n-\n+   private final transient Class<? extends Encoder> encoderClass;\n+   // TODO Make final after removing overrideWrapper()\n+   private transient Class<? extends Wrapper> wrapperClass;\n+   private final short encoderId;\n+   private final byte wrapperId;\n+   private final MediaType requestMediaType;\n+   private final boolean isKey;\n+\n+   private transient MediaType storageMediaType;\n    private transient Encoder encoder;\n-   private transient Wrapper wrapper;\n+   private transient Wrapper customWrapper;\n    private transient Transcoder transcoder;\n    private transient EncoderRegistry encoderRegistry;\n+   private transient ConversionManager conversionManager;\n \n    private DataConversion(Class<? extends Encoder> encoderClass, Class<? extends Wrapper> wrapperClass,\n-                          MediaType requestMediaType, MediaType storageMediaType, boolean isKey) {\n+                          MediaType requestMediaType, boolean isKey) {\n       this.encoderClass = encoderClass;\n       this.wrapperClass = wrapperClass;\n       this.requestMediaType = requestMediaType;\n-      this.storageMediaType = storageMediaType;\n       this.isKey = isKey;\n+      this.encoderId = EncoderIds.NO_ENCODER;\n+      this.wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    /**\n     * Used for de-serialization\n     */\n-   private DataConversion(Short encoderId, Byte wrapperId, MediaType requestMediaType, MediaType storageMediaType,\n-                          boolean isKey) {\n+   private DataConversion(Short encoderId, Byte wrapperId, MediaType requestMediaType, boolean isKey) {\n       this.encoderId = encoderId;\n       this.wrapperId = wrapperId;\n       this.requestMediaType = requestMediaType;\n-      this.storageMediaType = storageMediaType;\n       this.isKey = isKey;\n+      this.encoderClass = null;\n+      this.wrapperClass = null;\n    }\n \n    private DataConversion(Encoder encoder, Wrapper wrapper, boolean isKey) {\n       this.encoder = encoder;\n-      this.wrapper = wrapper;\n+      this.customWrapper = wrapper;\n       this.encoderClass = encoder.getClass();\n       this.wrapperClass = wrapper.getClass();\n       this.isKey = isKey;\n       this.storageMediaType = MediaType.APPLICATION_OBJECT;\n       this.requestMediaType = MediaType.APPLICATION_OBJECT;\n+      encoderId = EncoderIds.NO_ENCODER;\n+      wrapperId = WrapperIds.NO_WRAPPER;\n    }\n \n    public DataConversion withRequestMediaType(MediaType requestMediaType) {\n       if (Objects.equals(this.requestMediaType, requestMediaType)) return this;\n-      return new DataConversion(null, this.wrapperClass, requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, this.wrapperClass, requestMediaType, this.isKey);\n    }\n \n    public DataConversion withEncoding(Class<? extends Encoder> encoderClass) {\n       if (Objects.equals(this.encoderClass, encoderClass)) return this;\n-      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(encoderClass, this.wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated\n    public DataConversion withWrapping(Class<? extends Wrapper> wrapperClass) {\n       if (Objects.equals(this.wrapperClass, wrapperClass)) return this;\n-      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.storageMediaType,\n-            this.isKey);\n+      return new DataConversion(this.encoderClass, wrapperClass, this.requestMediaType, this.isKey);\n    }\n \n+   /**\n+    * @deprecated Since 11.0, will be removed with no replacement\n+    */\n+   @Deprecated\n    public void overrideWrapper(Class<? extends Wrapper> newWrapper, ComponentRegistry cr) {\n-      this.wrapper = null;\n+      this.customWrapper = null;\n       this.wrapperClass = newWrapper;\n       cr.wireDependencies(this);\n    }\n \n    /**\n-    * Obtain the configured {@link MediaType} for this instance, or assume sensible defaults.\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n     */\n-   private MediaType getStorageMediaType(Configuration configuration, boolean embeddedMode, boolean internalCache, PersistenceMarshaller persistenceMarshaller) {\n-      EncodingConfiguration encodingConfiguration = configuration.encoding();\n-      ContentTypeConfiguration contentTypeConfiguration = isKey ? encodingConfiguration.keyDataType() : encodingConfiguration.valueDataType();\n-      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n-      MediaType mediaType = userMarshaller.mediaType();\n-      boolean heap = configuration.memory().storageType() == StorageType.OBJECT;\n-      // If explicitly configured, use the value provided\n-      if (contentTypeConfiguration.isMediaTypeChanged()) {\n-         return contentTypeConfiguration.mediaType();\n-      }\n-      // Indexed caches started by the server will assume application/protostream as storage media type\n-      if (!embeddedMode && configuration.indexing().enabled() && contentTypeConfiguration.mediaType() == null) {\n-         return MediaType.APPLICATION_PROTOSTREAM;\n-      }\n-      if (internalCache) return MediaType.APPLICATION_OBJECT;\n-\n-      if (embeddedMode) {\n-         return heap ? MediaType.APPLICATION_OBJECT : mediaType;\n-      }\n-\n-      return MediaType.APPLICATION_UNKNOWN;\n-   }\n-\n+   @Deprecated\n    public boolean isConversionSupported(MediaType mediaType) {\n-      return storageMediaType == null || encoderRegistry.isConversionSupported(storageMediaType, mediaType);\n+      if (encoderRegistry == null) return false;\n+      return encoderRegistry.isConversionSupported(storageMediaType, mediaType);\n    }\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated\n    public Object convert(Object o, MediaType from, MediaType to) {\n-      if (o == null) return null;\n-      if (encoderRegistry == null) return o;\n-      Transcoder transcoder = encoderRegistry.getTranscoder(from, to);\n-      return transcoder.transcode(o, from, to);\n+      return encoderRegistry.convert(o, from, to);\n    }\n \n+   /**\n+    * @deprecated Since 11.0. To be removed in 14.0, with no replacement.\n+    */\n+   @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d1ae8f05eca3b372cc75ca1dd7939398a4e9fd"}, "originalPosition": 202}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4263, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}