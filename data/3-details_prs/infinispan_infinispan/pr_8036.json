{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NzM5NzQ3", "number": 8036, "title": "ISPN-11367 Update cache manager javadoc for default caches", "bodyText": "https://issues.redhat.com/browse/ISPN-11367\nQuick follow-up to update the javadoc.\nI have also updated the javadoc of the deprecated methods, but we might decide to remove those before 11.0", "createdAt": "2020-03-11T14:55:37Z", "url": "https://github.com/infinispan/infinispan/pull/8036", "merged": true, "mergeCommit": {"oid": "7fa432c42fcde20dc8adf77f95dcb0b707f28ed1"}, "closed": true, "closedAt": "2020-03-20T12:34:46Z", "author": {"login": "danberindei"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOPpBIAFqTM3NTMxMzY0MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPKvD6ABqjMxNDUyNTcyNTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MzEzNjQw", "url": "https://github.com/infinispan/infinispan/pull/8036#pullrequestreview-375313640", "createdAt": "2020-03-16T15:14:24Z", "commit": {"oid": "caaf8dabe43fe5927fd9344cc344f8b88b56f11f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNToxNDoyNFrOF245QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNToxNDoyNFrOF245QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5OTU4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                * @param createIfAbsent if <tt>false</tt>, the cache must be running.\n          \n          \n            \n                * @param createIfAbsent if <tt>false</tt>, returns the running cache otherwise null.", "url": "https://github.com/infinispan/infinispan/pull/8036#discussion_r393099585", "createdAt": "2020-03-16T15:14:24Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/manager/EmbeddedCacheManager.java", "diffHunk": "@@ -208,54 +237,45 @@\n    <K, V> Cache<K, V> createCache(String name, Configuration configuration);\n \n    /**\n-    * Retrieves a named cache from the system in the same way that {@link\n-    * #getCache(String)} does except that if offers the possibility for the\n-    * named cache not to be retrieved if it has not yet been started, or if\n-    * it's been removed after being started. If a non-template configuration\n-    * exists with the same name, it will be used to configure the cache.\n-    *\n+    * Similar to {@link #getCache(String)}, except if has the option\n+    * to not create the cache if it is not already running.\n     *\n     * @param cacheName name of cache to retrieve\n-    * @param createIfAbsent if <tt>false</tt>, the named cache will not be\n-    *        retrieved if it hasn't been retrieved previously or if it's been\n-    *        removed. If <tt>true</tt>, this methods works just like {@link\n-    *        #getCache(String)}\n-    * @return null if no named cache exists as per rules set above, otherwise\n-    *         returns a cache instance identified by cacheName\n+    * @param createIfAbsent if <tt>false</tt>, the cache must be running.\n+    *        If <tt>true</tt>, this methods works just like {@link #getCache(String)}.\n+    * @return <tt>null</tt> if the cache does not exist and <tt>createIfAbsent == false</tt>,\n+    *        otherwise a cache instance identified by cacheName\n     */\n    <K, V> Cache<K, V> getCache(String cacheName, boolean createIfAbsent);\n \n    /**\n-    * Retrieves a named cache from the system in the same way that {@link\n-    * #getCache(String)} does except that if offers the possibility to specify\n-    * a specific configuration template. Multiple caches can be created using\n-    * the same configuration.\n+    * Similar to {@link #getCache(String)}, only with an explicit configuration template name.\n+    * <p/>\n+    * Multiple caches can be created using the same configuration.\n     *\n     * @param cacheName name of cache to retrieve\n     * @param configurationName name of the configuration template to use\n-    * @return null if no configuration exists as per rules set above, otherwise\n-    *         returns a cache instance identified by cacheName\n+    * @return a cache instance identified by cacheName\n+    * @throws org.infinispan.commons.CacheConfigurationException if the configuration does not exist\n+    *         or if a configuration named <tt>cacheName</tt> already exists.\n     * @deprecated as of 9.0. Use {@link EmbeddedCacheManager#defineConfiguration(String, String, Configuration)} and\n     * {@link EmbeddedCacheManager#getCache(String)} instead\n     */\n    <K, V> Cache<K, V> getCache(String cacheName, String configurationName);\n \n    /**\n-    * Retrieves a named cache from the system in the same way that {@link\n-    * #getCache(String)} does except that if offers the possibility to specify\n-    * a specific configuration template. Multiple caches can be created using\n-    * the same configuration. Tihs method also offers the possibility for the\n-    * named cache not to be retrieved if it has not yet been started, or if\n-    * it's been removed after being started.\n+    * Similar to {@link #getCache(String, boolean)}, only with an explicit configuration template name.\n+    * <p/>\n+    * Multiple caches can be created using the same configuration.\n     *\n     * @param cacheName name of cache to retrieve\n     * @param configurationTemplate name of the configuration template to use\n-    * @param createIfAbsent if <tt>false</tt>, the named cache will not be\n-    *        retrieved if it hasn't been retrieved previously or if it's been\n-    *        removed. If <tt>true</tt>, this methods works just like {@link\n-    *        #getCache(String, String)}\n-    * @return null if no configuration exists as per rules set above, otherwise\n-    *         returns a cache instance identified by cacheName\n+    * @param createIfAbsent if <tt>false</tt>, the cache must be running.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caaf8dabe43fe5927fd9344cc344f8b88b56f11f"}, "originalPosition": 237}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "752781ea60253950d9e036ece3bca6d931619b8b", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/752781ea60253950d9e036ece3bca6d931619b8b", "committedDate": "2020-03-19T12:04:43Z", "message": "ISPN-11367 Update cache manager javadoc for default caches"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "caaf8dabe43fe5927fd9344cc344f8b88b56f11f", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/caaf8dabe43fe5927fd9344cc344f8b88b56f11f", "committedDate": "2020-03-11T14:54:15Z", "message": "ISPN-11367 Update cache manager javadoc for default caches"}, "afterCommit": {"oid": "752781ea60253950d9e036ece3bca6d931619b8b", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/752781ea60253950d9e036ece3bca6d931619b8b", "committedDate": "2020-03-19T12:04:43Z", "message": "ISPN-11367 Update cache manager javadoc for default caches"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1097, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}