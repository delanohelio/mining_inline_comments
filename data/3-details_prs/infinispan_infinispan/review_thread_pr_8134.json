{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTM4MzU5", "number": 8134, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozMjowNlrODt314g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMjozMVrODvk36A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI3NDI2OnYy", "diffSide": "RIGHT", "path": "server/hotrod/src/main/java/org/infinispan/server/hotrod/configuration/SaslConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozMjowNlrOF_jAwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozMjowNlrOF_jAwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3ODI0MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402178240", "createdAt": "2020-04-02T09:32:06Z", "author": {"login": "karesti"}, "path": "server/hotrod/src/main/java/org/infinispan/server/hotrod/configuration/SaslConfiguration.java", "diffHunk": "@@ -19,7 +19,7 @@\n  */\n @SuppressWarnings(\"unchecked\")\n public class SaslConfiguration implements ConfigurationInfo {\n-   public static final AttributeDefinition<String> SERVER_NAME = AttributeDefinition.builder(\"serverName\", null, String.class).immutable().build();\n+   public static final AttributeDefinition<String> SERVER_NAME = AttributeDefinition.builder(\"serverName\", \"infinispan\", String.class).immutable().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI4MDg0OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozMzo1MlrOF_jE8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzo0ODowMlrOGB3IGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3OTMxMg==", "bodyText": "may this Server log be used in the REST endpoints for tracing/debugging ? not a review request but a question for adding logs that actually lack IMO", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402179312", "createdAt": "2020-04-02T09:33:52Z", "author": {"login": "karesti"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "diffHunk": "@@ -123,6 +128,50 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n+      if (implicitAuthentication) {\n+         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n+         builder.authentication().enable().securityRealm(securityRealm.getName());\n+         String serverPrincipal = null;\n+         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n+            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n+               builder.authentication()\n+                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n+               serverPrincipal = identity.getPrincipal();\n+               break;\n+            }\n+            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n+            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.EXTERNAL);\n+            Server.log.debug(\"Enabled EXTERNAL mechanism for Hot Rod\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwNDk1NA==", "bodyText": "Only add logs that would be useful for helping in user scenarios. For internal aid, just use debugging. Also, in performance-critical areas debug/trace logs should be surrounded by if(log.isxxxenabled())", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404604954", "createdAt": "2020-04-07T07:48:02Z", "author": {"login": "tristantarrant"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "diffHunk": "@@ -123,6 +128,50 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n+      if (implicitAuthentication) {\n+         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n+         builder.authentication().enable().securityRealm(securityRealm.getName());\n+         String serverPrincipal = null;\n+         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n+            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n+               builder.authentication()\n+                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n+               serverPrincipal = identity.getPrincipal();\n+               break;\n+            }\n+            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n+            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.EXTERNAL);\n+            Server.log.debug(\"Enabled EXTERNAL mechanism for Hot Rod\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3OTMxMg=="}, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI5Njk1OnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozODoxOVrOF_jPSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzo0OTozMlrOGB3Lww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MTk2MA==", "bodyText": "I would add the comment in the debug. Encryption is on. PLAIN mechanism enabled for Hot Rod", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402181960", "createdAt": "2020-04-02T09:38:19Z", "author": {"login": "karesti"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "diffHunk": "@@ -123,6 +128,50 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n+      if (implicitAuthentication) {\n+         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n+         builder.authentication().enable().securityRealm(securityRealm.getName());\n+         String serverPrincipal = null;\n+         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n+            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n+               builder.authentication()\n+                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n+               serverPrincipal = identity.getPrincipal();\n+               break;\n+            }\n+            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n+            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.EXTERNAL);\n+            Server.log.debug(\"Enabled EXTERNAL mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.PASSWORD)) {\n+            builder.authentication()\n+                  .addMechanisms(\n+                        SaslMechanismInformation.Names.SCRAM_SHA_512,\n+                        SaslMechanismInformation.Names.SCRAM_SHA_384,\n+                        SaslMechanismInformation.Names.SCRAM_SHA_256,\n+                        SaslMechanismInformation.Names.SCRAM_SHA_1,\n+                        SaslMechanismInformation.Names.DIGEST_SHA_512,\n+                        SaslMechanismInformation.Names.DIGEST_SHA_384,\n+                        SaslMechanismInformation.Names.DIGEST_SHA_256,\n+                        SaslMechanismInformation.Names.DIGEST_SHA,\n+                        SaslMechanismInformation.Names.CRAM_MD5,\n+                        SaslMechanismInformation.Names.DIGEST_MD5\n+                  );\n+            Server.log.debug(\"Enabled SCRAM, DIGEST and CRAM mechanisms for Hot Rod\");\n+         }\n+         // Only enable PLAIN if encryption is on\n+         if (serverBuilder.endpoint().ssl().isEnabled()) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.PLAIN);\n+            Server.log.debug(\"Enabled PLAIN mechanism for Hot Rod\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwNTg5MQ==", "bodyText": "If we see this log, it already means that.", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404605891", "createdAt": "2020-04-07T07:49:32Z", "author": {"login": "tristantarrant"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "diffHunk": "@@ -123,6 +128,50 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n+      if (implicitAuthentication) {\n+         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n+         builder.authentication().enable().securityRealm(securityRealm.getName());\n+         String serverPrincipal = null;\n+         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n+            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n+               builder.authentication()\n+                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n+               serverPrincipal = identity.getPrincipal();\n+               break;\n+            }\n+            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n+            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.EXTERNAL);\n+            Server.log.debug(\"Enabled EXTERNAL mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.PASSWORD)) {\n+            builder.authentication()\n+                  .addMechanisms(\n+                        SaslMechanismInformation.Names.SCRAM_SHA_512,\n+                        SaslMechanismInformation.Names.SCRAM_SHA_384,\n+                        SaslMechanismInformation.Names.SCRAM_SHA_256,\n+                        SaslMechanismInformation.Names.SCRAM_SHA_1,\n+                        SaslMechanismInformation.Names.DIGEST_SHA_512,\n+                        SaslMechanismInformation.Names.DIGEST_SHA_384,\n+                        SaslMechanismInformation.Names.DIGEST_SHA_256,\n+                        SaslMechanismInformation.Names.DIGEST_SHA,\n+                        SaslMechanismInformation.Names.CRAM_MD5,\n+                        SaslMechanismInformation.Names.DIGEST_MD5\n+                  );\n+            Server.log.debug(\"Enabled SCRAM, DIGEST and CRAM mechanisms for Hot Rod\");\n+         }\n+         // Only enable PLAIN if encryption is on\n+         if (serverBuilder.endpoint().ssl().isEnabled()) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.PLAIN);\n+            Server.log.debug(\"Enabled PLAIN mechanism for Hot Rod\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MTk2MA=="}, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDMxMTEwOnYy", "diffSide": "RIGHT", "path": "server/tests/src/test/java/org/infinispan/server/security/AuthenticationImplicitIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0MTo1N1rOF_jYEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzo1MToyMFrOGB3P-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NDIwOA==", "bodyText": "is the server name mandatory still ?", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402184208", "createdAt": "2020-04-02T09:41:57Z", "author": {"login": "karesti"}, "path": "server/tests/src/test/java/org/infinispan/server/security/AuthenticationImplicitIT.java", "diffHunk": "@@ -30,67 +32,86 @@\n \n /**\n  * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n- * @since 10.1\n+ * @since 11.0\n  **/\n \n @RunWith(Parameterized.class)\n @Category(Security.class)\n-public class AuthenticationKerberosSpnegoIT {\n+public class AuthenticationImplicitIT {\n    @ClassRule\n    public static InfinispanServerRule SERVERS =\n-         InfinispanServerRuleBuilder.config(\"configuration/AuthenticationKerberosTest.xml\")\n-                                    .numServers(1)\n-                                    .property(\"java.security.krb5.conf\", \"${infinispan.server.config.path}/krb5.conf\")\n+         InfinispanServerRuleBuilder.config(\"configuration/AuthenticationServerImplicitTest.xml\")\n                                     .build();\n \n    @ClassRule\n-   public static LdapServerRule LDAP = new LdapServerRule(SERVERS, \"ldif/infinispan-kerberos.ldif\", true);\n+   public static LdapServerRule LDAP = new LdapServerRule(SERVERS);\n \n    @Rule\n    public InfinispanServerTestMethodRule SERVER_TEST = new InfinispanServerTestMethodRule(SERVERS);\n \n-   private final Protocol protocol;\n    private final String mechanism;\n-\n-   private static String oldKrb5Conf;\n+   private final String protocol;\n \n    @Parameterized.Parameters(name = \"{1}({0})\")\n    public static Collection<Object[]> data() {\n-      List<Object[]> params = new ArrayList<>(HTTP_KERBEROS_MECHS.size() * HTTP_PROTOCOLS.size());\n+      List<Object[]> params = new ArrayList<>();\n+      for(Object[] mech : Common.SASL_MECHS) {\n+         params.add(new Object[]{\"Hot Rod\", mech[0]});\n+      }\n       for (Protocol protocol : HTTP_PROTOCOLS) {\n-         for (Object[] mech : HTTP_KERBEROS_MECHS) {\n-            params.add(new Object[]{protocol, mech[0]});\n+         for (Object[] mech : HTTP_MECHS) {\n+            params.add(new Object[]{protocol.name(), mech[0]});\n          }\n       }\n       return params;\n    }\n \n-   public AuthenticationKerberosSpnegoIT(Protocol protocol, String mechanism) {\n+   public AuthenticationImplicitIT(String protocol, String mechanism) {\n       this.protocol = protocol;\n       this.mechanism = mechanism;\n    }\n \n-   @BeforeClass\n-   public static void setKrb5Conf() {\n-      oldKrb5Conf = System.setProperty(\"java.security.krb5.conf\", AuthenticationKerberosSpnegoIT.class.getClassLoader().getResource(\"configuration/krb5.conf\").getPath());\n+   @Test\n+   public void testProtocol() {\n+      if (\"Hot Rod\".equals(protocol)) {\n+         testHotRod();\n+      } else {\n+         testRest(Protocol.valueOf(protocol));\n+      }\n    }\n \n-   @AfterClass\n-   public static void restoreKrb5Conf() {\n-      if (oldKrb5Conf != null) {\n-         System.setProperty(\"java.security.krb5.conf\", oldKrb5Conf);\n+   public void testHotRod() {\n+      ConfigurationBuilder builder = new ConfigurationBuilder();\n+      if (!mechanism.isEmpty()) {\n+         builder.security().authentication()\n+               .saslMechanism(mechanism)\n+               .serverName(\"infinispan\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwNjk3MQ==", "bodyText": "Actually, it already defaults to infinispan", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404606971", "createdAt": "2020-04-07T07:51:20Z", "author": {"login": "tristantarrant"}, "path": "server/tests/src/test/java/org/infinispan/server/security/AuthenticationImplicitIT.java", "diffHunk": "@@ -30,67 +32,86 @@\n \n /**\n  * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n- * @since 10.1\n+ * @since 11.0\n  **/\n \n @RunWith(Parameterized.class)\n @Category(Security.class)\n-public class AuthenticationKerberosSpnegoIT {\n+public class AuthenticationImplicitIT {\n    @ClassRule\n    public static InfinispanServerRule SERVERS =\n-         InfinispanServerRuleBuilder.config(\"configuration/AuthenticationKerberosTest.xml\")\n-                                    .numServers(1)\n-                                    .property(\"java.security.krb5.conf\", \"${infinispan.server.config.path}/krb5.conf\")\n+         InfinispanServerRuleBuilder.config(\"configuration/AuthenticationServerImplicitTest.xml\")\n                                     .build();\n \n    @ClassRule\n-   public static LdapServerRule LDAP = new LdapServerRule(SERVERS, \"ldif/infinispan-kerberos.ldif\", true);\n+   public static LdapServerRule LDAP = new LdapServerRule(SERVERS);\n \n    @Rule\n    public InfinispanServerTestMethodRule SERVER_TEST = new InfinispanServerTestMethodRule(SERVERS);\n \n-   private final Protocol protocol;\n    private final String mechanism;\n-\n-   private static String oldKrb5Conf;\n+   private final String protocol;\n \n    @Parameterized.Parameters(name = \"{1}({0})\")\n    public static Collection<Object[]> data() {\n-      List<Object[]> params = new ArrayList<>(HTTP_KERBEROS_MECHS.size() * HTTP_PROTOCOLS.size());\n+      List<Object[]> params = new ArrayList<>();\n+      for(Object[] mech : Common.SASL_MECHS) {\n+         params.add(new Object[]{\"Hot Rod\", mech[0]});\n+      }\n       for (Protocol protocol : HTTP_PROTOCOLS) {\n-         for (Object[] mech : HTTP_KERBEROS_MECHS) {\n-            params.add(new Object[]{protocol, mech[0]});\n+         for (Object[] mech : HTTP_MECHS) {\n+            params.add(new Object[]{protocol.name(), mech[0]});\n          }\n       }\n       return params;\n    }\n \n-   public AuthenticationKerberosSpnegoIT(Protocol protocol, String mechanism) {\n+   public AuthenticationImplicitIT(String protocol, String mechanism) {\n       this.protocol = protocol;\n       this.mechanism = mechanism;\n    }\n \n-   @BeforeClass\n-   public static void setKrb5Conf() {\n-      oldKrb5Conf = System.setProperty(\"java.security.krb5.conf\", AuthenticationKerberosSpnegoIT.class.getClassLoader().getResource(\"configuration/krb5.conf\").getPath());\n+   @Test\n+   public void testProtocol() {\n+      if (\"Hot Rod\".equals(protocol)) {\n+         testHotRod();\n+      } else {\n+         testRest(Protocol.valueOf(protocol));\n+      }\n    }\n \n-   @AfterClass\n-   public static void restoreKrb5Conf() {\n-      if (oldKrb5Conf != null) {\n-         System.setProperty(\"java.security.krb5.conf\", oldKrb5Conf);\n+   public void testHotRod() {\n+      ConfigurationBuilder builder = new ConfigurationBuilder();\n+      if (!mechanism.isEmpty()) {\n+         builder.security().authentication()\n+               .saslMechanism(mechanism)\n+               .serverName(\"infinispan\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NDIwOA=="}, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDMzOTAwOnYy", "diffSide": "RIGHT", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0OToyMFrOF_jpbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToxMDoyNFrOGB6RZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4ODY1Mg==", "bodyText": "The JSON parser works by inspecting ATTRIBUTES and ELEMENT, I'm afraid all this logic will only happen for XML. Can all this be moved to the builders themselves?", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402188652", "createdAt": "2020-04-02T09:49:20Z", "author": {"login": "gustavonalle"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "diffHunk": "@@ -123,6 +128,50 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n+      if (implicitAuthentication) {\n+         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n+         builder.authentication().enable().securityRealm(securityRealm.getName());\n+         String serverPrincipal = null;\n+         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n+            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n+               builder.authentication()\n+                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n+               serverPrincipal = identity.getPrincipal();\n+               break;\n+            }\n+            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n+            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5MjE5Mg==", "bodyText": "EDIT: We actually don't parse JSON server files because nobody needs it currently, we are mostly rendering the server config via REST. In any case, it'd be nice that the builder themselves take care of enriching the config based on certain situations", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402192192", "createdAt": "2020-04-02T09:55:14Z", "author": {"login": "gustavonalle"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "diffHunk": "@@ -123,6 +128,50 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n+      if (implicitAuthentication) {\n+         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n+         builder.authentication().enable().securityRealm(securityRealm.getName());\n+         String serverPrincipal = null;\n+         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n+            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n+               builder.authentication()\n+                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n+               serverPrincipal = identity.getPrincipal();\n+               break;\n+            }\n+            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n+            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4ODY1Mg=="}, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1NjQ4Nw==", "bodyText": "@gustavonalle I've reworked it so that this is now done in the builders. Much cleaner", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404656487", "createdAt": "2020-04-07T09:10:24Z", "author": {"login": "tristantarrant"}, "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "diffHunk": "@@ -123,6 +128,50 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n+      if (implicitAuthentication) {\n+         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n+         builder.authentication().enable().securityRealm(securityRealm.getName());\n+         String serverPrincipal = null;\n+         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n+            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n+               builder.authentication()\n+                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n+               serverPrincipal = identity.getPrincipal();\n+               break;\n+            }\n+            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n+            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4ODY1Mg=="}, "originalCommit": {"oid": "047e33390dc2435d18de3c659e6787c6efd9578f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjEyMjk3OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/stories/assembly_server_security.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo1OTowOFrOGCE7Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo1OTowOFrOGCE7Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzMTAyNg==", "bodyText": "add CLI", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404831026", "createdAt": "2020-04-07T13:59:08Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/stories/assembly_server_security.adoc", "diffHunk": "@@ -3,11 +3,15 @@\n = Securing {brandname} Servers\n Protect {brandname} servers against network attacks and unauthorized access.\n \n-The default {brandname} server configuration requires authentication out-of-the-box.\n+By default {brandname} servers require user authentication to access the\n+console as well as Hot Rod or REST endpoints. {brandname} servers also ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7797f233a02ba6e03ac83184a0f9d3eebba71d9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjEzNDc2OnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/ref_server_authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMTo0NlrOGCFC1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMTo0NlrOGCFC1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzMjk4MA==", "bodyText": "This is wrong: since there isn't a SSL identity, PLAIN and Basic will not be available. All of the Digest and Scram methods will be", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404832980", "createdAt": "2020-04-07T14:01:46Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/topics/ref_server_authentication.adoc", "diffHunk": "@@ -0,0 +1,85 @@\n+[id='server_endpoint_auth-{context}']\n+= {brandname} Server Authentication\n+{brandname} servers automatically configure authentication mechanisms based on\n+the security realm that you assign to endpoints.\n+\n+.SASL Authentication Mechanisms\n+\n+The following SASL authentication mechanisms apply to Hot Rod endpoints:\n+\n+|===\n+|Security Realm |SASL Authentication Mechanism\n+\n+|Property Realms and LDAP Realms\n+|PLAIN, SCRAM-+*+, DIGEST-+*+, CRAM-MD5\n+\n+|Token Realms\n+|OAUTHBEARER\n+\n+|Trust Realms\n+|EXTERNAL\n+\n+|Kerberos Identities\n+|GSSAPI, GS2-KRB5\n+\n+|SSL/TLS Identities\n+|PLAIN\n+|===\n+\n+\n+.HTTP Authentication Mechanisms\n+\n+The following HTTP authentication mechanisms apply to REST endpoints:\n+\n+|===\n+|Security Realm |HTTP Authentication Mechanism\n+\n+|Property Realms and LDAP Realms\n+|BASIC, DIGEST\n+\n+|Token Realms\n+|BEARER_TOKEN\n+\n+|Trust Realms\n+|CLIENT_CERT\n+\n+|Kerberos Identities\n+|SPNEGO\n+\n+|SSL/TLS Identities\n+|BASIC\n+|===\n+\n+.Default Configuration\n+\n+{brandname} servers provide a security realm named \"default\" that uses a\n+property realm with plain text credentials defined in `{server_home}/server/\n+conf/users.properties`, as shown in the following snippet:\n+\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+<security-realm name=\"default\">\n+  <properties-realm groups-attribute=\"Roles\">\n+    <user-properties path=\"users.properties\"\n+                     relative-to=\"infinispan.server.config.path\"\n+                     plain-text=\"true\"/>\n+    <group-properties path=\"groups.properties\"\n+                      relative-to=\"infinispan.server.config.path\" />\n+  </properties-realm>\n+</security-realm>\n+----\n+\n+The `endpoints` configuration assigns the \"default\" security realm to the Hot\n+Rod and REST connectors, as follows:\n+\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+<endpoints socket-binding=\"default\" security-realm=\"default\">\n+  <hotrod-connector name=\"hotrod\"/>\n+  <rest-connector name=\"rest\"/>\n+</endpoints>\n+----\n+\n+As a result of the preceding configuration, {brandname} servers require\n+authentication with a mechanism that the property realm supports, in this case \n+either `PLAIN` or `BASIC`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7797f233a02ba6e03ac83184a0f9d3eebba71d9"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjEzNjEyOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/ref_server_authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMjowNFrOGCFDtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMjowNFrOGCFDtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzMzIwNQ==", "bodyText": "remove BASIC (will only be enabled with SSL)", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404833205", "createdAt": "2020-04-07T14:02:04Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/topics/ref_server_authentication.adoc", "diffHunk": "@@ -0,0 +1,85 @@\n+[id='server_endpoint_auth-{context}']\n+= {brandname} Server Authentication\n+{brandname} servers automatically configure authentication mechanisms based on\n+the security realm that you assign to endpoints.\n+\n+.SASL Authentication Mechanisms\n+\n+The following SASL authentication mechanisms apply to Hot Rod endpoints:\n+\n+|===\n+|Security Realm |SASL Authentication Mechanism\n+\n+|Property Realms and LDAP Realms\n+|PLAIN, SCRAM-+*+, DIGEST-+*+, CRAM-MD5\n+\n+|Token Realms\n+|OAUTHBEARER\n+\n+|Trust Realms\n+|EXTERNAL\n+\n+|Kerberos Identities\n+|GSSAPI, GS2-KRB5\n+\n+|SSL/TLS Identities\n+|PLAIN\n+|===\n+\n+\n+.HTTP Authentication Mechanisms\n+\n+The following HTTP authentication mechanisms apply to REST endpoints:\n+\n+|===\n+|Security Realm |HTTP Authentication Mechanism\n+\n+|Property Realms and LDAP Realms\n+|BASIC, DIGEST", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7797f233a02ba6e03ac83184a0f9d3eebba71d9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjEzODAwOnYy", "diffSide": "RIGHT", "path": "documentation/src/main/asciidoc/topics/ref_server_authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMjozMVrOGCFE7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMjozMVrOGCFE7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzMzUxOQ==", "bodyText": "Remove PLAIN (will only be enabled with SSL)", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404833519", "createdAt": "2020-04-07T14:02:31Z", "author": {"login": "tristantarrant"}, "path": "documentation/src/main/asciidoc/topics/ref_server_authentication.adoc", "diffHunk": "@@ -0,0 +1,85 @@\n+[id='server_endpoint_auth-{context}']\n+= {brandname} Server Authentication\n+{brandname} servers automatically configure authentication mechanisms based on\n+the security realm that you assign to endpoints.\n+\n+.SASL Authentication Mechanisms\n+\n+The following SASL authentication mechanisms apply to Hot Rod endpoints:\n+\n+|===\n+|Security Realm |SASL Authentication Mechanism\n+\n+|Property Realms and LDAP Realms\n+|PLAIN, SCRAM-+*+, DIGEST-+*+, CRAM-MD5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7797f233a02ba6e03ac83184a0f9d3eebba71d9"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4383, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}