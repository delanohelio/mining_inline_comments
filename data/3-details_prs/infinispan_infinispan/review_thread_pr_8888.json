{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MDk1ODc4", "number": 8888, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDoxNTo0NFrOE9pxww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTo0NzoxN1rOE_DVOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDgzMDc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/configuration/parsing/FragmentParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDoxNTo0NFrOH6dJ3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMToxODozOFrOH66rVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA1NzExOQ==", "bodyText": "How about CacheConfigParser or CacheParser?", "url": "https://github.com/infinispan/infinispan/pull/8888#discussion_r531057119", "createdAt": "2020-11-26T14:15:44Z", "author": {"login": "ryanemerson"}, "path": "core/src/main/java/org/infinispan/configuration/parsing/FragmentParser.java", "diffHunk": "@@ -0,0 +1,1911 @@\n+package org.infinispan.configuration.parsing;\n+\n+import static org.infinispan.configuration.parsing.ParseUtils.ignoreAttribute;\n+import static org.infinispan.configuration.parsing.ParseUtils.ignoreElement;\n+import static org.infinispan.configuration.parsing.Parser.NAMESPACE;\n+import static org.infinispan.util.logging.Log.CONFIG;\n+\n+import java.util.Collections;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.xml.stream.XMLStreamConstants;\n+import javax.xml.stream.XMLStreamException;\n+\n+import org.infinispan.commons.configuration.BuiltBy;\n+import org.infinispan.commons.configuration.ConfiguredBy;\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.util.GlobUtils;\n+import org.infinispan.commons.util.Util;\n+import org.infinispan.configuration.cache.AbstractStoreConfigurationBuilder;\n+import org.infinispan.configuration.cache.AsyncStoreConfigurationBuilder;\n+import org.infinispan.configuration.cache.AuthorizationConfigurationBuilder;\n+import org.infinispan.configuration.cache.BackupConfiguration;\n+import org.infinispan.configuration.cache.BackupConfigurationBuilder;\n+import org.infinispan.configuration.cache.BackupFailurePolicy;\n+import org.infinispan.configuration.cache.BiasAcquisition;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ClusterLoaderConfigurationBuilder;\n+import org.infinispan.configuration.cache.ClusteringConfigurationBuilder;\n+import org.infinispan.configuration.cache.Configuration;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.cache.ContentTypeConfigurationBuilder;\n+import org.infinispan.configuration.cache.CustomStoreConfigurationBuilder;\n+import org.infinispan.configuration.cache.EncodingConfigurationBuilder;\n+import org.infinispan.configuration.cache.Index;\n+import org.infinispan.configuration.cache.InterceptorConfiguration;\n+import org.infinispan.configuration.cache.InterceptorConfigurationBuilder;\n+import org.infinispan.configuration.cache.MemoryConfigurationBuilder;\n+import org.infinispan.configuration.cache.PartitionHandlingConfigurationBuilder;\n+import org.infinispan.configuration.cache.SecurityConfigurationBuilder;\n+import org.infinispan.configuration.cache.SingleFileStoreConfigurationBuilder;\n+import org.infinispan.configuration.cache.StorageType;\n+import org.infinispan.configuration.cache.StoreConfigurationBuilder;\n+import org.infinispan.configuration.cache.TransactionConfiguration;\n+import org.infinispan.conflict.MergePolicy;\n+import org.infinispan.eviction.EvictionStrategy;\n+import org.infinispan.eviction.EvictionType;\n+import org.infinispan.partitionhandling.PartitionHandling;\n+import org.infinispan.persistence.cluster.ClusterLoader;\n+import org.infinispan.persistence.file.SingleFileStore;\n+import org.infinispan.transaction.LockingMode;\n+import org.infinispan.util.concurrent.IsolationLevel;\n+import org.infinispan.xsite.spi.XSiteMergePolicy;\n+import org.kohsuke.MetaInfServices;\n+\n+/**\n+ * This class implements the parser for Infinispan/AS7/EAP/JDG schema files\n+ *\n+ * @author Tristan Tarrant\n+ * @author Galder Zamarre\u00f1o\n+ * @since 12.0\n+ */\n+@MetaInfServices(ConfigurationParser.class)\n+@Namespace(root = \"local-cache\")\n+@Namespace(root = \"distributed-cache\")\n+@Namespace(root = \"replicated-cache\")\n+@Namespace(root = \"scattered-cache\")\n+@Namespace(uri = NAMESPACE + \"*\", root = \"local-cache\")\n+@Namespace(uri = NAMESPACE + \"*\", root = \"distributed-cache\")\n+@Namespace(uri = NAMESPACE + \"*\", root = \"replicated-cache\")\n+@Namespace(uri = NAMESPACE + \"*\", root = \"scattered-cache\")\n+public class FragmentParser implements ConfigurationParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f5bf2e89da28dbf806863fbfe7e9ce87f7c889c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU0MDgyMA==", "bodyText": "CacheParser it is. Updated.", "url": "https://github.com/infinispan/infinispan/pull/8888#discussion_r531540820", "createdAt": "2020-11-27T11:18:38Z", "author": {"login": "tristantarrant"}, "path": "core/src/main/java/org/infinispan/configuration/parsing/FragmentParser.java", "diffHunk": "@@ -0,0 +1,1911 @@\n+package org.infinispan.configuration.parsing;\n+\n+import static org.infinispan.configuration.parsing.ParseUtils.ignoreAttribute;\n+import static org.infinispan.configuration.parsing.ParseUtils.ignoreElement;\n+import static org.infinispan.configuration.parsing.Parser.NAMESPACE;\n+import static org.infinispan.util.logging.Log.CONFIG;\n+\n+import java.util.Collections;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.xml.stream.XMLStreamConstants;\n+import javax.xml.stream.XMLStreamException;\n+\n+import org.infinispan.commons.configuration.BuiltBy;\n+import org.infinispan.commons.configuration.ConfiguredBy;\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.util.GlobUtils;\n+import org.infinispan.commons.util.Util;\n+import org.infinispan.configuration.cache.AbstractStoreConfigurationBuilder;\n+import org.infinispan.configuration.cache.AsyncStoreConfigurationBuilder;\n+import org.infinispan.configuration.cache.AuthorizationConfigurationBuilder;\n+import org.infinispan.configuration.cache.BackupConfiguration;\n+import org.infinispan.configuration.cache.BackupConfigurationBuilder;\n+import org.infinispan.configuration.cache.BackupFailurePolicy;\n+import org.infinispan.configuration.cache.BiasAcquisition;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.configuration.cache.ClusterLoaderConfigurationBuilder;\n+import org.infinispan.configuration.cache.ClusteringConfigurationBuilder;\n+import org.infinispan.configuration.cache.Configuration;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.configuration.cache.ContentTypeConfigurationBuilder;\n+import org.infinispan.configuration.cache.CustomStoreConfigurationBuilder;\n+import org.infinispan.configuration.cache.EncodingConfigurationBuilder;\n+import org.infinispan.configuration.cache.Index;\n+import org.infinispan.configuration.cache.InterceptorConfiguration;\n+import org.infinispan.configuration.cache.InterceptorConfigurationBuilder;\n+import org.infinispan.configuration.cache.MemoryConfigurationBuilder;\n+import org.infinispan.configuration.cache.PartitionHandlingConfigurationBuilder;\n+import org.infinispan.configuration.cache.SecurityConfigurationBuilder;\n+import org.infinispan.configuration.cache.SingleFileStoreConfigurationBuilder;\n+import org.infinispan.configuration.cache.StorageType;\n+import org.infinispan.configuration.cache.StoreConfigurationBuilder;\n+import org.infinispan.configuration.cache.TransactionConfiguration;\n+import org.infinispan.conflict.MergePolicy;\n+import org.infinispan.eviction.EvictionStrategy;\n+import org.infinispan.eviction.EvictionType;\n+import org.infinispan.partitionhandling.PartitionHandling;\n+import org.infinispan.persistence.cluster.ClusterLoader;\n+import org.infinispan.persistence.file.SingleFileStore;\n+import org.infinispan.transaction.LockingMode;\n+import org.infinispan.util.concurrent.IsolationLevel;\n+import org.infinispan.xsite.spi.XSiteMergePolicy;\n+import org.kohsuke.MetaInfServices;\n+\n+/**\n+ * This class implements the parser for Infinispan/AS7/EAP/JDG schema files\n+ *\n+ * @author Tristan Tarrant\n+ * @author Galder Zamarre\u00f1o\n+ * @since 12.0\n+ */\n+@MetaInfServices(ConfigurationParser.class)\n+@Namespace(root = \"local-cache\")\n+@Namespace(root = \"distributed-cache\")\n+@Namespace(root = \"replicated-cache\")\n+@Namespace(root = \"scattered-cache\")\n+@Namespace(uri = NAMESPACE + \"*\", root = \"local-cache\")\n+@Namespace(uri = NAMESPACE + \"*\", root = \"distributed-cache\")\n+@Namespace(uri = NAMESPACE + \"*\", root = \"replicated-cache\")\n+@Namespace(uri = NAMESPACE + \"*\", root = \"scattered-cache\")\n+public class FragmentParser implements ConfigurationParser {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA1NzExOQ=="}, "originalCommit": {"oid": "7f5bf2e89da28dbf806863fbfe7e9ce87f7c889c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTUwMDc5OnYy", "diffSide": "RIGHT", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCacheManagerAdmin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTo0Njo1OVrOH8ieuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTo0Njo1OVrOH8ieuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI0MTUyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                *                      by the server. The XML may be limited to just the cache configuration fragment.\n          \n          \n            \n                *                      by the server. A cache configuration fragment on its own is valid XML.", "url": "https://github.com/infinispan/infinispan/pull/8888#discussion_r533241529", "createdAt": "2020-12-01T09:46:59Z", "author": {"login": "oraNod"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCacheManagerAdmin.java", "diffHunk": "@@ -41,7 +41,7 @@\n     * @param name the name of the cache to create\n     * @param configuration a concrete configuration that will be sent to the server. The XML representation of this\n     *                      configuration must use the Infinispan embedded configuration schema in a version supported\n-    *                      by the server.\n+    *                      by the server. The XML may be limited to just the cache configuration fragment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08c043784af0c239bdc97fe4eb7eeed90b9ae8dd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTUwMzI5OnYy", "diffSide": "RIGHT", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCacheManagerAdmin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTo0NzoxN1rOH8igTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTo0NzoxN1rOH8igTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI0MTkzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                *                      by the server. The XML may be limited to just the cache configuration fragment.\n          \n          \n            \n                *                      by the server. A cache configuration fragment on its own is valid XML.", "url": "https://github.com/infinispan/infinispan/pull/8888#discussion_r533241935", "createdAt": "2020-12-01T09:47:17Z", "author": {"login": "oraNod"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCacheManagerAdmin.java", "diffHunk": "@@ -79,7 +79,7 @@\n     * @param name the name of the cache to create\n     * @param configuration a concrete configuration that will be sent to the server. The XML representation of this\n     *                      configuration must use the Infinispan embedded configuration schema in a version supported\n-    *                      by the server.\n+    *                      by the server. The XML may be limited to just the cache configuration fragment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08c043784af0c239bdc97fe4eb7eeed90b9ae8dd"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3810, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}