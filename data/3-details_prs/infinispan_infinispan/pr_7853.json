{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMjg1Njk2", "number": 7853, "title": " ISPN-11280 ConcurrentModificationException in ConditionFuture", "bodyText": "https://issues.redhat.com/browse/ISPN-11280\nhttps://issues.redhat.com/browse/ISPN-11296", "createdAt": "2020-02-07T08:09:21Z", "url": "https://github.com/infinispan/infinispan/pull/7853", "merged": true, "mergeCommit": {"oid": "35d5dec73c95836a953d1c313478aa3fb9fc36df"}, "closed": true, "closedAt": "2020-02-14T15:41:23Z", "author": {"login": "danberindei"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDQK7EAFqTM1NjU4NTkwMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcERokwgFqTM1OTA0MDA5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTg1OTAw", "url": "https://github.com/infinispan/infinispan/pull/7853#pullrequestreview-356585900", "createdAt": "2020-02-11T11:32:53Z", "commit": {"oid": "0136e8627521ac2008cfc31696823142e0bec225"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTozMjo1NFrOFoFrqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTozNDo1NVrOFoFvBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4MDQ1OA==", "bodyText": "doesn't need to be synchronized as well? futures.values()", "url": "https://github.com/infinispan/infinispan/pull/7853#discussion_r377580458", "createdAt": "2020-02-11T11:32:54Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/util/concurrent/ConditionFuture.java", "diffHunk": "@@ -96,24 +99,31 @@ public void updateAsync(T value, Executor executor) {\n \n       try {\n          executor.execute(() -> checkConditions(value));\n-      } catch (Exception e) {\n+      } catch (Throwable t) {\n          for (Data data : futures.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0136e8627521ac2008cfc31696823142e0bec225"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4MTMxNw==", "bodyText": "ps. same for stop()", "url": "https://github.com/infinispan/infinispan/pull/7853#discussion_r377581317", "createdAt": "2020-02-11T11:34:55Z", "author": {"login": "pruivo"}, "path": "core/src/main/java/org/infinispan/util/concurrent/ConditionFuture.java", "diffHunk": "@@ -96,24 +99,31 @@ public void updateAsync(T value, Executor executor) {\n \n       try {\n          executor.execute(() -> checkConditions(value));\n-      } catch (Exception e) {\n+      } catch (Throwable t) {\n          for (Data data : futures.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4MDQ1OA=="}, "originalCommit": {"oid": "0136e8627521ac2008cfc31696823142e0bec225"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2de0196c8f71b15c2a586535270089173616d946", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/2de0196c8f71b15c2a586535270089173616d946", "committedDate": "2020-02-14T09:06:31Z", "message": "ISPN-11296 StateResponseOrderingTest uncaught IllegalArgumentException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1055267e6693e45bf9cd491458158e7a9a417f31", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/1055267e6693e45bf9cd491458158e7a9a417f31", "committedDate": "2020-02-14T13:18:47Z", "message": "ISPN-11280 ConcurrentModificationException in ConditionFuture"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0136e8627521ac2008cfc31696823142e0bec225", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/0136e8627521ac2008cfc31696823142e0bec225", "committedDate": "2020-02-07T07:45:32Z", "message": "ISPN-11280 ConcurrentModificationException in ConditionFuture"}, "afterCommit": {"oid": "1055267e6693e45bf9cd491458158e7a9a417f31", "author": {"user": {"login": "danberindei", "name": "Dan Berindei"}}, "url": "https://github.com/infinispan/infinispan/commit/1055267e6693e45bf9cd491458158e7a9a417f31", "committedDate": "2020-02-14T13:18:47Z", "message": "ISPN-11280 ConcurrentModificationException in ConditionFuture"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4OTUzNTYz", "url": "https://github.com/infinispan/infinispan/pull/7853#pullrequestreview-358953563", "createdAt": "2020-02-14T13:53:09Z", "commit": {"oid": "1055267e6693e45bf9cd491458158e7a9a417f31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDM5MDE4", "url": "https://github.com/infinispan/infinispan/pull/7853#pullrequestreview-359039018", "createdAt": "2020-02-14T15:53:01Z", "commit": {"oid": "1055267e6693e45bf9cd491458158e7a9a417f31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTo1MzowMlrOFp7NSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTo1MzowMlrOFp7NSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwNTk5NQ==", "bodyText": "@danberindei how about something like this to cut down on the sync scope?\n        final List<Data> copy;\n        synchronized (futures) {\n            copy = new ArrayList<>(futures.values());\n            futures.clear();\n        }\n        for (Data data : copy) {\n            data.cancelFuture.cancel(false);\n        }", "url": "https://github.com/infinispan/infinispan/pull/7853#discussion_r379505995", "createdAt": "2020-02-14T15:53:02Z", "author": {"login": "johnou"}, "path": "core/src/main/java/org/infinispan/util/concurrent/ConditionFuture.java", "diffHunk": "@@ -96,35 +99,58 @@ public void updateAsync(T value, Executor executor) {\n \n       try {\n          executor.execute(() -> checkConditions(value));\n-      } catch (Exception e) {\n-         for (Data data : futures.values()) {\n-            data.cancelFuture.cancel(false);\n-            data.completeExceptionally(e);\n+      } catch (Throwable t) {\n+         List<CompletableFuture<?>> completed;\n+         synchronized (futures) {\n+            completed = new ArrayList<>(futures.size());\n+            for (Data data : futures.values()) {\n+               data.cancelFuture.cancel(false);\n+               completed.add(data);\n+            }\n+         }\n+         for (CompletableFuture<?> future : completed) {\n+            future.completeExceptionally(t);\n          }\n       }\n    }\n \n    private void checkConditions(T value) {\n-      for (Iterator<Map.Entry<Predicate<T>, Data>> iterator = futures.entrySet().iterator(); iterator.hasNext(); ) {\n-         Map.Entry<Predicate<T>, Data> e = iterator.next();\n-         if (e.getKey().test(value)) {\n-            Data data = e.getValue();\n-            data.cancelFuture.cancel(false);\n-            data.complete(null);\n-            iterator.remove();\n+      List<Data> completed;\n+      synchronized (futures) {\n+         completed = new ArrayList<>(futures.size());\n+         for (Iterator<Map.Entry<Predicate<T>, Data>> iterator = futures.entrySet().iterator(); iterator.hasNext(); ) {\n+            Map.Entry<Predicate<T>, Data> e = iterator.next();\n+            if (e.getKey().test(value)) {\n+               Data data = e.getValue();\n+               data.cancelFuture.cancel(false);\n+               completed.add(data);\n+               iterator.remove();\n+            }\n          }\n       }\n+      for (Data data : completed) {\n+         data.complete(null);\n+      }\n    }\n \n    public void stop() {\n       running = false;\n       lastValue = null;\n+\n+      List<CompletableFuture<?>> completed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055267e6693e45bf9cd491458158e7a9a417f31"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDQwMDkz", "url": "https://github.com/infinispan/infinispan/pull/7853#pullrequestreview-359040093", "createdAt": "2020-02-14T15:54:28Z", "commit": {"oid": "1055267e6693e45bf9cd491458158e7a9a417f31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTo1NDoyOFrOFp7Qiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTo1NDoyOFrOFp7Qiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwNjgyNw==", "bodyText": "same sync optimisation can be applied here too.", "url": "https://github.com/infinispan/infinispan/pull/7853#discussion_r379506827", "createdAt": "2020-02-14T15:54:28Z", "author": {"login": "johnou"}, "path": "core/src/main/java/org/infinispan/util/concurrent/ConditionFuture.java", "diffHunk": "@@ -96,35 +99,58 @@ public void updateAsync(T value, Executor executor) {\n \n       try {\n          executor.execute(() -> checkConditions(value));\n-      } catch (Exception e) {\n-         for (Data data : futures.values()) {\n-            data.cancelFuture.cancel(false);\n-            data.completeExceptionally(e);\n+      } catch (Throwable t) {\n+         List<CompletableFuture<?>> completed;\n+         synchronized (futures) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055267e6693e45bf9cd491458158e7a9a417f31"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1303, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}