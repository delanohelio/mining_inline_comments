{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTA0ODI5", "number": 7860, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0MjoyMFrODedPtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjo0NTo1N1rODf4OFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjYzMDMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/util/concurrent/locks/impl/DefaultLockManager.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0MjoyMFrOFnmbpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMToyMTozOVrOFrkgZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw==", "bodyText": "I think the execution needs to stay on a non-blocking thread here, and only needs a new thread so that the thread that unlocked the keys can continue executing (possibly unlocking other keys, or sending back a response).\nSame thing in PerKeyLockContainer and StripedLockContainer.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r377068453", "createdAt": "2020-02-10T13:42:20Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/util/concurrent/locks/impl/DefaultLockManager.java", "diffHunk": "@@ -120,7 +120,7 @@ public KeyAwareLockPromise lockAll(Collection<?> keys, Object lockOwner, long ti\n                unit);\n       }\n \n-      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), executor);\n+      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), blockingExecutor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzNTQ4NQ==", "bodyText": "I created https://issues.redhat.com/browse/ISPN-11295 to handle this a week ago. It will be on the plan moving forward, I just didn't want to get into that in this PR. If you want I can revert the use of blockingExecutor for now though.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379435485", "createdAt": "2020-02-14T13:42:51Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/util/concurrent/locks/impl/DefaultLockManager.java", "diffHunk": "@@ -120,7 +120,7 @@ public KeyAwareLockPromise lockAll(Collection<?> keys, Object lockOwner, long ti\n                unit);\n       }\n \n-      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), executor);\n+      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), blockingExecutor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw=="}, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzNTkxMg==", "bodyText": "Unless you are thinking of something else? Need to somehow get CompletionStages#continueOnExecutor in there.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379435912", "createdAt": "2020-02-14T13:43:42Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/util/concurrent/locks/impl/DefaultLockManager.java", "diffHunk": "@@ -120,7 +120,7 @@ public KeyAwareLockPromise lockAll(Collection<?> keys, Object lockOwner, long ti\n                unit);\n       }\n \n-      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), executor);\n+      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), blockingExecutor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw=="}, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwNDEzNQ==", "bodyText": "The problem is that the InfinispanLock#lock method can invoke await. I have reverted back to non blocking thread and the JIRA I logged can move that await block into continuteExecutor it looks like.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379504135", "createdAt": "2020-02-14T15:49:49Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/util/concurrent/locks/impl/DefaultLockManager.java", "diffHunk": "@@ -120,7 +120,7 @@ public KeyAwareLockPromise lockAll(Collection<?> keys, Object lockOwner, long ti\n                unit);\n       }\n \n-      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), executor);\n+      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), blockingExecutor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw=="}, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIzMTIwNA==", "bodyText": "@wburns Ok. I was pretty certain that LockPlaceholder#lock would never be called while the lock is still in the WAITING state, but that code is pretty complex so can't be 100% sure until we remove that code path completely.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r381231204", "createdAt": "2020-02-19T11:21:39Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/util/concurrent/locks/impl/DefaultLockManager.java", "diffHunk": "@@ -120,7 +120,7 @@ public KeyAwareLockPromise lockAll(Collection<?> keys, Object lockOwner, long ti\n                unit);\n       }\n \n-      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), executor);\n+      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), blockingExecutor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw=="}, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY1OTc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/util/logging/Log.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1MDowNlrOFnmsyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzo0Mzo1NVrOFp276w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3Mjg0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               @Message(value = \"Thread Pool Factory %s is blocking, but the pool %s requires non blocking threads\", id = 566)\n          \n          \n            \n               @Message(value = \"Thread Pool Factory %s is blocking, but pool %s requires non blocking threads\", id = 566)", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r377072842", "createdAt": "2020-02-10T13:50:06Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/util/logging/Log.java", "diffHunk": "@@ -1921,8 +1921,8 @@ CacheConfigurationException offHeapMemoryEvictionSizeNotLargeEnoughForAddresses(\n    @Message(value = \"Index.LOCAL is no longer supported since version 10.0. Deprecated usages are automatically converted to Index.PRIMARY_OWNER. Please update your configuration!\", id = 565)\n    void indexLocalIsNotSupported();\n \n-   @Message(value = \"Thread Pool Factory %s is blocking, but this pool requires non blocking threads\", id = 566)\n-   CacheConfigurationException threadPoolFactoryIsBlocking(String name);\n+   @Message(value = \"Thread Pool Factory %s is blocking, but the pool %s requires non blocking threads\", id = 566)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzNjAxMQ==", "bodyText": "Sure", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379436011", "createdAt": "2020-02-14T13:43:55Z", "author": {"login": "wburns"}, "path": "core/src/main/java/org/infinispan/util/logging/Log.java", "diffHunk": "@@ -1921,8 +1921,8 @@ CacheConfigurationException offHeapMemoryEvictionSizeNotLargeEnoughForAddresses(\n    @Message(value = \"Index.LOCAL is no longer supported since version 10.0. Deprecated usages are automatically converted to Index.PRIMARY_OWNER. Please update your configuration!\", id = 565)\n    void indexLocalIsNotSupported();\n \n-   @Message(value = \"Thread Pool Factory %s is blocking, but this pool requires non blocking threads\", id = 566)\n-   CacheConfigurationException threadPoolFactoryIsBlocking(String name);\n+   @Message(value = \"Thread Pool Factory %s is blocking, but the pool %s requires non blocking threads\", id = 566)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3Mjg0Mg=="}, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY2NTQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1MTo0MlrOFnmwHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzo0NjozMFrOFp3Agw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MzY5Mw==", "bodyText": "keepalive-time is an attribute, not an element", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r377073693", "createdAt": "2020-02-10T13:51:42Z", "author": {"login": "danberindei"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -177,6 +177,37 @@\n           <xs:attribute name=\"queue-length\" type=\"xs:string\"/>\n         </xs:complexType>\n       </xs:element>\n+      <xs:element name=\"non-blocking-bounded-queue-thread-pool\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+        <xs:complexType>\n+          <xs:annotation>\n+            <xs:documentation>\n+              <![CDATA[\n+                A thread pool executor with a bounded queue which should only run non blocking operations.  Such a\n+                thread pool has a core size and a queue with an\n+                upper bound.  When a task is submitted, if the number of running threads is less than the core size,\n+                a new thread is created.  Otherwise, the task is placed in queue.  If too many tasks are allowed to be\n+                submitted to this type of executor, an out of memory condition may occur.\n+\n+                The \"name\" attribute is the bean name of the created executor.\n+\n+                The \"max-threads\" attribute must be used to specify the maximum thread pool size.\n+                The \"core-threads\" attribute defines the number of threads to keep in the pool.\n+\n+                The nested \"keepalive-time\" element may used to specify the amount of time that pool threads should", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzNzE4Nw==", "bodyText": "Yeah, I just copied from the existing comments, I can fix it in all the places though.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379437187", "createdAt": "2020-02-14T13:46:30Z", "author": {"login": "wburns"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -177,6 +177,37 @@\n           <xs:attribute name=\"queue-length\" type=\"xs:string\"/>\n         </xs:complexType>\n       </xs:element>\n+      <xs:element name=\"non-blocking-bounded-queue-thread-pool\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+        <xs:complexType>\n+          <xs:annotation>\n+            <xs:documentation>\n+              <![CDATA[\n+                A thread pool executor with a bounded queue which should only run non blocking operations.  Such a\n+                thread pool has a core size and a queue with an\n+                upper bound.  When a task is submitted, if the number of running threads is less than the core size,\n+                a new thread is created.  Otherwise, the task is placed in queue.  If too many tasks are allowed to be\n+                submitted to this type of executor, an out of memory condition may occur.\n+\n+                The \"name\" attribute is the bean name of the created executor.\n+\n+                The \"max-threads\" attribute must be used to specify the maximum thread pool size.\n+                The \"core-threads\" attribute defines the number of threads to keep in the pool.\n+\n+                The nested \"keepalive-time\" element may used to specify the amount of time that pool threads should", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MzY5Mw=="}, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY4NDMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1Njo0OFrOFnm7WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzo1MzowNlrOFp3Mgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NjU2OA==", "bodyText": "Maybe you should add a warning about having a queue that's too short as well?\nIMO it's pretty hard, if not impossible, to find the ideal queue size when core-threads < max-threads so that threads are created soon enough but tasks aren't rejected for no reason. In fact, before embracing the WildFly thread subsystem, we used to have a single setting for the number of threads and set core-threads == max-threads automatically when the executor had a queue.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r377076568", "createdAt": "2020-02-10T13:56:48Z", "author": {"login": "danberindei"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -177,6 +177,37 @@\n           <xs:attribute name=\"queue-length\" type=\"xs:string\"/>\n         </xs:complexType>\n       </xs:element>\n+      <xs:element name=\"non-blocking-bounded-queue-thread-pool\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+        <xs:complexType>\n+          <xs:annotation>\n+            <xs:documentation>\n+              <![CDATA[\n+                A thread pool executor with a bounded queue which should only run non blocking operations.  Such a\n+                thread pool has a core size and a queue with an\n+                upper bound.  When a task is submitted, if the number of running threads is less than the core size,\n+                a new thread is created.  Otherwise, the task is placed in queue.  If too many tasks are allowed to be\n+                submitted to this type of executor, an out of memory condition may occur.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0MDI1OQ==", "bodyText": "This was what was here before, I only copied it. But we can update this section as well :)\nI can add something about saying what happens if the queue is too small in both cases.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379440259", "createdAt": "2020-02-14T13:53:06Z", "author": {"login": "wburns"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -177,6 +177,37 @@\n           <xs:attribute name=\"queue-length\" type=\"xs:string\"/>\n         </xs:complexType>\n       </xs:element>\n+      <xs:element name=\"non-blocking-bounded-queue-thread-pool\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+        <xs:complexType>\n+          <xs:annotation>\n+            <xs:documentation>\n+              <![CDATA[\n+                A thread pool executor with a bounded queue which should only run non blocking operations.  Such a\n+                thread pool has a core size and a queue with an\n+                upper bound.  When a task is submitted, if the number of running threads is less than the core size,\n+                a new thread is created.  Otherwise, the task is placed in queue.  If too many tasks are allowed to be\n+                submitted to this type of executor, an out of memory condition may occur.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NjU2OA=="}, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzUyNzI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjo0Mjo1OVrOFp1aaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzoxOTo0OVrOFrnung==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTA1MQ==", "bodyText": "I think the previous version was more accurate, because the definition is elsewhere.\nI suggest something more direct, like \"The name of the executor used for non-blocking operations. Must be non-blocking and must have a queue\" (how big?)", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379411051", "createdAt": "2020-02-14T12:42:59Z", "author": {"login": "danberindei"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -322,37 +350,25 @@\n     <xs:attribute name=\"start\">\n       <xs:annotation><xs:documentation>Unused XML attribute</xs:documentation></xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"async-executor\" type=\"xs:string\">\n-      <xs:annotation>\n-        <xs:documentation>Defines the executor used for asynchronous cache operations.\n-        </xs:documentation>\n-      </xs:annotation>\n-    </xs:attribute>\n     <xs:attribute name=\"listener-executor\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>Defines the executor used for asynchronous cache listener notifications.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"eviction-executor\" type=\"xs:string\">\n-      <xs:annotation>\n-        <xs:documentation>DEPRECATED Defines the scheduled executor used for evictions.  The expiration-executor type should be used instead.</xs:documentation>\n-      </xs:annotation>\n-    </xs:attribute>\n     <xs:attribute name=\"expiration-executor\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>Defines the scheduled executor used for expirations.</xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"persistence-executor\" type=\"xs:string\">\n+    <xs:attribute name=\"non-blocking-executor\" type=\"xs:string\">\n       <xs:annotation>\n-        <xs:documentation>Configuration for the executor service used when interacting with the persistent store.</xs:documentation>\n+        <xs:documentation>Defines the executor used for non blocking operations. This is required to reference a non blocking queued executor.</xs:documentation>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef5c12f64fb29329c799c7b0131b4c1512f581f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzOTg4MA==", "bodyText": "Technically they could configure a cached thread pool without a queue ;) Unless we want to add validations in config to ensure they used a bounded thread pool with a queue of non zero size.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379439880", "createdAt": "2020-02-14T13:52:17Z", "author": {"login": "wburns"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -322,37 +350,25 @@\n     <xs:attribute name=\"start\">\n       <xs:annotation><xs:documentation>Unused XML attribute</xs:documentation></xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"async-executor\" type=\"xs:string\">\n-      <xs:annotation>\n-        <xs:documentation>Defines the executor used for asynchronous cache operations.\n-        </xs:documentation>\n-      </xs:annotation>\n-    </xs:attribute>\n     <xs:attribute name=\"listener-executor\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>Defines the executor used for asynchronous cache listener notifications.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"eviction-executor\" type=\"xs:string\">\n-      <xs:annotation>\n-        <xs:documentation>DEPRECATED Defines the scheduled executor used for evictions.  The expiration-executor type should be used instead.</xs:documentation>\n-      </xs:annotation>\n-    </xs:attribute>\n     <xs:attribute name=\"expiration-executor\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>Defines the scheduled executor used for expirations.</xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"persistence-executor\" type=\"xs:string\">\n+    <xs:attribute name=\"non-blocking-executor\" type=\"xs:string\">\n       <xs:annotation>\n-        <xs:documentation>Configuration for the executor service used when interacting with the persistent store.</xs:documentation>\n+        <xs:documentation>Defines the executor used for non blocking operations. This is required to reference a non blocking queued executor.</xs:documentation>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTA1MQ=="}, "originalCommit": {"oid": "7ef5c12f64fb29329c799c7b0131b4c1512f581f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxNzc2MQ==", "bodyText": "And I was keeping the wording similar to all the other ones.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379517761", "createdAt": "2020-02-14T16:14:38Z", "author": {"login": "wburns"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -322,37 +350,25 @@\n     <xs:attribute name=\"start\">\n       <xs:annotation><xs:documentation>Unused XML attribute</xs:documentation></xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"async-executor\" type=\"xs:string\">\n-      <xs:annotation>\n-        <xs:documentation>Defines the executor used for asynchronous cache operations.\n-        </xs:documentation>\n-      </xs:annotation>\n-    </xs:attribute>\n     <xs:attribute name=\"listener-executor\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>Defines the executor used for asynchronous cache listener notifications.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"eviction-executor\" type=\"xs:string\">\n-      <xs:annotation>\n-        <xs:documentation>DEPRECATED Defines the scheduled executor used for evictions.  The expiration-executor type should be used instead.</xs:documentation>\n-      </xs:annotation>\n-    </xs:attribute>\n     <xs:attribute name=\"expiration-executor\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>Defines the scheduled executor used for expirations.</xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"persistence-executor\" type=\"xs:string\">\n+    <xs:attribute name=\"non-blocking-executor\" type=\"xs:string\">\n       <xs:annotation>\n-        <xs:documentation>Configuration for the executor service used when interacting with the persistent store.</xs:documentation>\n+        <xs:documentation>Defines the executor used for non blocking operations. This is required to reference a non blocking queued executor.</xs:documentation>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTA1MQ=="}, "originalCommit": {"oid": "7ef5c12f64fb29329c799c7b0131b4c1512f581f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIzOTc2NA==", "bodyText": "The comments were probably copy/paste from an old age when the executors were defined inline.\nPlease change the blocking-executor documentation the same way.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r381239764", "createdAt": "2020-02-19T11:41:44Z", "author": {"login": "danberindei"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -322,37 +350,25 @@\n     <xs:attribute name=\"start\">\n       <xs:annotation><xs:documentation>Unused XML attribute</xs:documentation></xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"async-executor\" type=\"xs:string\">\n-      <xs:annotation>\n-        <xs:documentation>Defines the executor used for asynchronous cache operations.\n-        </xs:documentation>\n-      </xs:annotation>\n-    </xs:attribute>\n     <xs:attribute name=\"listener-executor\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>Defines the executor used for asynchronous cache listener notifications.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"eviction-executor\" type=\"xs:string\">\n-      <xs:annotation>\n-        <xs:documentation>DEPRECATED Defines the scheduled executor used for evictions.  The expiration-executor type should be used instead.</xs:documentation>\n-      </xs:annotation>\n-    </xs:attribute>\n     <xs:attribute name=\"expiration-executor\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>Defines the scheduled executor used for expirations.</xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"persistence-executor\" type=\"xs:string\">\n+    <xs:attribute name=\"non-blocking-executor\" type=\"xs:string\">\n       <xs:annotation>\n-        <xs:documentation>Configuration for the executor service used when interacting with the persistent store.</xs:documentation>\n+        <xs:documentation>Defines the executor used for non blocking operations. This is required to reference a non blocking queued executor.</xs:documentation>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTA1MQ=="}, "originalCommit": {"oid": "7ef5c12f64fb29329c799c7b0131b4c1512f581f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI4Mzk5OA==", "bodyText": "Updated", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r381283998", "createdAt": "2020-02-19T13:19:49Z", "author": {"login": "wburns"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -322,37 +350,25 @@\n     <xs:attribute name=\"start\">\n       <xs:annotation><xs:documentation>Unused XML attribute</xs:documentation></xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"async-executor\" type=\"xs:string\">\n-      <xs:annotation>\n-        <xs:documentation>Defines the executor used for asynchronous cache operations.\n-        </xs:documentation>\n-      </xs:annotation>\n-    </xs:attribute>\n     <xs:attribute name=\"listener-executor\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>Defines the executor used for asynchronous cache listener notifications.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"eviction-executor\" type=\"xs:string\">\n-      <xs:annotation>\n-        <xs:documentation>DEPRECATED Defines the scheduled executor used for evictions.  The expiration-executor type should be used instead.</xs:documentation>\n-      </xs:annotation>\n-    </xs:attribute>\n     <xs:attribute name=\"expiration-executor\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>Defines the scheduled executor used for expirations.</xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"persistence-executor\" type=\"xs:string\">\n+    <xs:attribute name=\"non-blocking-executor\" type=\"xs:string\">\n       <xs:annotation>\n-        <xs:documentation>Configuration for the executor service used when interacting with the persistent store.</xs:documentation>\n+        <xs:documentation>Defines the executor used for non blocking operations. This is required to reference a non blocking queued executor.</xs:documentation>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTA1MQ=="}, "originalCommit": {"oid": "7ef5c12f64fb29329c799c7b0131b4c1512f581f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzUyOTE2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/configuration/JsonSerializationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjo0MzozNVrOFp1bcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzo1MzoxOFrOFp3M3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTMxNA==", "bodyText": "No assert for the new executors?", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379411314", "createdAt": "2020-02-14T12:43:35Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/configuration/JsonSerializationTest.java", "diffHunk": "@@ -299,9 +299,9 @@ public void testFullConfig() throws Exception {\n       assertEquals(\"REGISTER\", cacheContainer.get(\"shutdown-hook\").asText());\n       assertTrue(cacheContainer.get(\"statistics\").asBoolean());\n       assertEquals(\"listener\", cacheContainer.get(\"listener-executor\").asText());\n-      assertEquals(\"persistence\", cacheContainer.get(\"persistence-executor\").asText());\n+      assertNull(cacheContainer.get(\"persistence-executor\"));\n       assertNull(cacheContainer.get(\"state-transfer-executor\"));\n-      assertEquals(\"async\", cacheContainer.get(\"async-executor\").asText());\n+      assertNull(cacheContainer.get(\"async-executor\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef5c12f64fb29329c799c7b0131b4c1512f581f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0MDM1MQ==", "bodyText": "I can add something.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379440351", "createdAt": "2020-02-14T13:53:18Z", "author": {"login": "wburns"}, "path": "core/src/test/java/org/infinispan/configuration/JsonSerializationTest.java", "diffHunk": "@@ -299,9 +299,9 @@ public void testFullConfig() throws Exception {\n       assertEquals(\"REGISTER\", cacheContainer.get(\"shutdown-hook\").asText());\n       assertTrue(cacheContainer.get(\"statistics\").asBoolean());\n       assertEquals(\"listener\", cacheContainer.get(\"listener-executor\").asText());\n-      assertEquals(\"persistence\", cacheContainer.get(\"persistence-executor\").asText());\n+      assertNull(cacheContainer.get(\"persistence-executor\"));\n       assertNull(cacheContainer.get(\"state-transfer-executor\"));\n-      assertEquals(\"async\", cacheContainer.get(\"async-executor\").asText());\n+      assertNull(cacheContainer.get(\"async-executor\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTMxNA=="}, "originalCommit": {"oid": "7ef5c12f64fb29329c799c7b0131b4c1512f581f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzUzNTU5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/configuration/XmlFileParsingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjo0NTo1N1rOFp1fPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzo1MzoyNFrOFp3NDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMjI4Ng==", "bodyText": "Should check the new executors instead", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379412286", "createdAt": "2020-02-14T12:45:57Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/configuration/XmlFileParsingTest.java", "diffHunk": "@@ -364,20 +364,11 @@ private void assertNamedCacheFile(ConfigurationBuilderHolder holder, boolean dep\n \n       BlockingThreadPoolExecutorFactory persistenceThreadPool =\n          gc.persistenceThreadPool().threadPoolFactory();\n-      assertEquals(6, persistenceThreadPool.maxThreads());\n-      assertEquals(10001, persistenceThreadPool.queueLength());\n-      DefaultThreadFactory persistenceThreadFactory =\n-         gc.persistenceThreadPool().threadFactory();\n-      assertEquals(\"PersistenceThread\", persistenceThreadFactory.threadNamePattern());\n+      assertNull(persistenceThreadPool);\n \n       BlockingThreadPoolExecutorFactory asyncThreadPool =\n          gc.asyncThreadPool().threadPoolFactory();\n-      assertEquals(5, asyncThreadPool.coreThreads());\n-      assertEquals(5, asyncThreadPool.maxThreads());\n-      assertEquals(10000, asyncThreadPool.queueLength());\n-      assertEquals(0, asyncThreadPool.keepAlive());\n-      DefaultThreadFactory asyncThreadFactory = gc.asyncThreadPool().threadFactory();\n-      assertEquals(\"AsyncOperationsThread\", asyncThreadFactory.threadNamePattern());\n+      assertNull(asyncThreadPool);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6f8304d969cad04d4381cae839a4a9c70522b3a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0MDM5Ng==", "bodyText": "I can add something.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379440396", "createdAt": "2020-02-14T13:53:24Z", "author": {"login": "wburns"}, "path": "core/src/test/java/org/infinispan/configuration/XmlFileParsingTest.java", "diffHunk": "@@ -364,20 +364,11 @@ private void assertNamedCacheFile(ConfigurationBuilderHolder holder, boolean dep\n \n       BlockingThreadPoolExecutorFactory persistenceThreadPool =\n          gc.persistenceThreadPool().threadPoolFactory();\n-      assertEquals(6, persistenceThreadPool.maxThreads());\n-      assertEquals(10001, persistenceThreadPool.queueLength());\n-      DefaultThreadFactory persistenceThreadFactory =\n-         gc.persistenceThreadPool().threadFactory();\n-      assertEquals(\"PersistenceThread\", persistenceThreadFactory.threadNamePattern());\n+      assertNull(persistenceThreadPool);\n \n       BlockingThreadPoolExecutorFactory asyncThreadPool =\n          gc.asyncThreadPool().threadPoolFactory();\n-      assertEquals(5, asyncThreadPool.coreThreads());\n-      assertEquals(5, asyncThreadPool.maxThreads());\n-      assertEquals(10000, asyncThreadPool.queueLength());\n-      assertEquals(0, asyncThreadPool.keepAlive());\n-      DefaultThreadFactory asyncThreadFactory = gc.asyncThreadPool().threadFactory();\n-      assertEquals(\"AsyncOperationsThread\", asyncThreadFactory.threadNamePattern());\n+      assertNull(asyncThreadPool);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMjI4Ng=="}, "originalCommit": {"oid": "a6f8304d969cad04d4381cae839a4a9c70522b3a"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4574, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}