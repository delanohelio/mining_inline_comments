{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMTU4ODcz", "number": 8176, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyMDozNFrODvr2WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyNDozOVrODvr8cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzI4MDg4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/infinispan/notifications/cachelistener/cluster/AbstractClusterListenerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyMDozNFrOGCQXzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyMDozNFrOGCQXzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxODU3Mg==", "bodyText": "Can make this one line and remove brackets now.", "url": "https://github.com/infinispan/infinispan/pull/8176#discussion_r405018572", "createdAt": "2020-04-07T18:20:34Z", "author": {"login": "wburns"}, "path": "core/src/test/java/org/infinispan/notifications/cachelistener/cluster/AbstractClusterListenerTest.java", "diffHunk": "@@ -734,4 +730,11 @@ public void testMetadataExpirationConverterSuccessNotOwner() {\n       verifySimpleExpirationEvents(clusterListener, clusterListener.hasIncludeState() ? 2 : 1, key, expectedValue);\n    }\n \n+   private CacheEventFilter<Object, String> filter(Object keyToFilter) {\n+      return (Serializable & CacheEventFilter<Object, String>)\n+            (k, oldValue, oldMetadata, newValue, newMetadata, eventType) -> {\n+         boolean retVal = Objects.equals(k, keyToFilter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a9777b8393ea9e4ccccdca34f5acd99a83450de"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzI4ODYxOnYy", "diffSide": "RIGHT", "path": "counter/src/main/java/org/infinispan/counter/impl/listener/CounterManagerNotificationManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyMjozOFrOGCQczg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODo1MTozN1rOGCRhow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTg1NA==", "bodyText": "This looks wrong, we aren't using the filter anymore.", "url": "https://github.com/infinispan/infinispan/pull/8176#discussion_r405019854", "createdAt": "2020-04-07T18:22:38Z", "author": {"login": "wburns"}, "path": "counter/src/main/java/org/infinispan/counter/impl/listener/CounterManagerNotificationManager.java", "diffHunk": "@@ -119,7 +120,8 @@ public synchronized void listenOn(Cache<CounterKey, CounterValue> cache) throws\n          topologyListener.register(cache);\n       }\n       if (!listenersRegistered) {\n-         this.cache.addListener(valueListener, CounterKeyFilter.getInstance());\n+         this.cache.addFilteredListener(valueListener, null, null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a9777b8393ea9e4ccccdca34f5acd99a83450de"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyMDQ4Mg==", "bodyText": "Also the override to specify the events is more for remote, not for embedded as we can properly ascertain this from the annotations of the methods.", "url": "https://github.com/infinispan/infinispan/pull/8176#discussion_r405020482", "createdAt": "2020-04-07T18:23:43Z", "author": {"login": "wburns"}, "path": "counter/src/main/java/org/infinispan/counter/impl/listener/CounterManagerNotificationManager.java", "diffHunk": "@@ -119,7 +120,8 @@ public synchronized void listenOn(Cache<CounterKey, CounterValue> cache) throws\n          topologyListener.register(cache);\n       }\n       if (!listenersRegistered) {\n-         this.cache.addListener(valueListener, CounterKeyFilter.getInstance());\n+         this.cache.addFilteredListener(valueListener, null, null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTg1NA=="}, "originalCommit": {"oid": "6a9777b8393ea9e4ccccdca34f5acd99a83450de"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzNzQ3NQ==", "bodyText": "This looks wrong, we aren't using the filter anymore.\n\nPreviously we were using CounterKeyFilter whose accept method is return key instanceof CounterKey; which will always be the case for the counter cache. As CounterManagerNotificationManager is in a .impl package this isn't API, so AFAIK it will work for our internal needs without a filter.", "url": "https://github.com/infinispan/infinispan/pull/8176#discussion_r405037475", "createdAt": "2020-04-07T18:51:37Z", "author": {"login": "ryanemerson"}, "path": "counter/src/main/java/org/infinispan/counter/impl/listener/CounterManagerNotificationManager.java", "diffHunk": "@@ -119,7 +120,8 @@ public synchronized void listenOn(Cache<CounterKey, CounterValue> cache) throws\n          topologyListener.register(cache);\n       }\n       if (!listenersRegistered) {\n-         this.cache.addListener(valueListener, CounterKeyFilter.getInstance());\n+         this.cache.addFilteredListener(valueListener, null, null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTg1NA=="}, "originalCommit": {"oid": "6a9777b8393ea9e4ccccdca34f5acd99a83450de"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzI5NTQzOnYy", "diffSide": "RIGHT", "path": "counter/src/main/java/org/infinispan/counter/impl/manager/CounterConfigurationManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyNDoyM1rOGCQg9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODo0Nzo0NVrOGCRYLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyMDkxNg==", "bodyText": "Shouldn't need to specify the event types, as this is handled by the annotation itself. This is for remote listeners which we don't have access to the annotations at this point.", "url": "https://github.com/infinispan/infinispan/pull/8176#discussion_r405020916", "createdAt": "2020-04-07T18:24:23Z", "author": {"login": "wburns"}, "path": "counter/src/main/java/org/infinispan/counter/impl/manager/CounterConfigurationManager.java", "diffHunk": "@@ -84,7 +85,7 @@ public void start() {\n       Map<String, CounterConfiguration> persisted = storage.loadAll();\n       persisted.forEach((name, cfg) -> stateCache.putIfAbsent(stateKey(name), cfg));\n       counterCacheStarted.set(false);\n-      stateCache.addListener(listener, new ScopeFilter(COUNTER_SCOPE));\n+      stateCache.addFilteredListener(listener, new ScopeFilter(COUNTER_SCOPE), null, Util.asSet(CacheEntryCreated.class, CacheEntryModified.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a9777b8393ea9e4ccccdca34f5acd99a83450de"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzNTA1Mw==", "bodyText": "I didn't realise it was for remote. I figured that it might be more efficient explicitly stating them ... I didn't look into the internals. I'll update now \ud83d\udc4d", "url": "https://github.com/infinispan/infinispan/pull/8176#discussion_r405035053", "createdAt": "2020-04-07T18:47:45Z", "author": {"login": "ryanemerson"}, "path": "counter/src/main/java/org/infinispan/counter/impl/manager/CounterConfigurationManager.java", "diffHunk": "@@ -84,7 +85,7 @@ public void start() {\n       Map<String, CounterConfiguration> persisted = storage.loadAll();\n       persisted.forEach((name, cfg) -> stateCache.putIfAbsent(stateKey(name), cfg));\n       counterCacheStarted.set(false);\n-      stateCache.addListener(listener, new ScopeFilter(COUNTER_SCOPE));\n+      stateCache.addFilteredListener(listener, new ScopeFilter(COUNTER_SCOPE), null, Util.asSet(CacheEntryCreated.class, CacheEntryModified.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyMDkxNg=="}, "originalCommit": {"oid": "6a9777b8393ea9e4ccccdca34f5acd99a83450de"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzI5NjUxOnYy", "diffSide": "RIGHT", "path": "lucene/lucene-directory/src/test/java/org/infinispan/lucene/cacheloader/CacheLoaderAPITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyNDozOVrOGCQhmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyNDozOVrOGCQhmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyMTA4MQ==", "bodyText": "Unneeded.", "url": "https://github.com/infinispan/infinispan/pull/8176#discussion_r405021081", "createdAt": "2020-04-07T18:24:39Z", "author": {"login": "wburns"}, "path": "lucene/lucene-directory/src/test/java/org/infinispan/lucene/cacheloader/CacheLoaderAPITest.java", "diffHunk": "@@ -11,8 +11,8 @@\n import org.infinispan.commons.test.CommonsTestingUtil;\n import org.infinispan.commons.util.Util;\n import org.infinispan.configuration.cache.ConfigurationBuilder;\n-import org.infinispan.container.impl.InternalEntryFactory;\n import org.infinispan.container.entries.InternalCacheEntry;\n+import org.infinispan.container.impl.InternalEntryFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a9777b8393ea9e4ccccdca34f5acd99a83450de"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4253, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}