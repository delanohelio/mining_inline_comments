{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1Mjg2NTc4", "number": 8295, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo1NDoxM1rOD8oJfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo1NDoyMVrOD9fyig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODk4OTQwOnYy", "diffSide": "RIGHT", "path": "cli/cli-client/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo1NDoxM1rOGVr6zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo1NDoxM1rOGVr6zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5Mjg0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                          <argument>org.infinispan.cli.commands.CLI</argument>\n          \n          \n            \n                                          <argument>${cli.main.class}</argument>", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r425392846", "createdAt": "2020-05-14T19:54:13Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/pom.xml", "diffHunk": "@@ -118,12 +123,134 @@\n                      <goal>java</goal>\n                   </goals>\n                   <configuration>\n-                     <mainClass>org.infinispan.cli.CLI</mainClass>\n+                     <mainClass>${cli.main.class}</mainClass>\n                      <cleanupDaemonThreads>false</cleanupDaemonThreads>\n                   </configuration>\n                </execution>\n             </executions>\n          </plugin>\n       </plugins>\n    </build>\n+\n+   <profiles>\n+      <profile>\n+         <id>shade</id>\n+         <build>\n+            <plugins>\n+               <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-shade-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <phase>package</phase>\n+                        <goals>\n+                           <goal>shade</goal>\n+                        </goals>\n+                        <configuration>\n+                           <transformers>\n+                              <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n+                                 <mainClass>${cli.main.class}</mainClass>\n+                              </transformer>\n+                           </transformers>\n+                        </configuration>\n+                     </execution>\n+                  </executions>\n+               </plugin>\n+            </plugins>\n+         </build>\n+      </profile>\n+      <profile>\n+         <id>native</id>\n+         <build>\n+            <plugins>\n+               <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-enforcer-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <id>graalvm-check</id>\n+                        <goals>\n+                           <goal>enforce</goal>\n+                        </goals>\n+                        <configuration>\n+                           <rules>\n+                              <requireEnvironmentVariable>\n+                                 <variableName>GRAALVM_HOME</variableName>\n+                              </requireEnvironmentVariable>\n+                           </rules>\n+                           <fail>true</fail>\n+                        </configuration>\n+                     </execution>\n+                  </executions>\n+               </plugin>\n+               <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-dependency-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <id>copy</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                           <goal>build-classpath</goal>\n+                        </goals>\n+                        <configuration>\n+                           <outputProperty>maven.compile.classpath</outputProperty>\n+                           <pathSeparator>:</pathSeparator>\n+                           <includeScope>compile</includeScope>\n+                        </configuration>\n+                     </execution>\n+                  </executions>\n+                  <configuration>\n+                     <outputDirectory>${project.build.directory}/lib</outputDirectory>\n+                     <silent>true</silent>\n+                  </configuration>\n+               </plugin>\n+               <plugin>\n+                  <groupId>org.codehaus.mojo</groupId>\n+                  <artifactId>exec-maven-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <id>generate-native-reflection</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                           <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                           <executable>java</executable>\n+                           <workingDirectory>target</workingDirectory>\n+                           <arguments>\n+                              <argument>-cp</argument>\n+                              <classpath/>\n+                              <argument>org.aesh.util.GraalReflectionGenerator</argument>\n+                              <argument>org.infinispan.cli.commands.CLI</argument>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601565f28b341e1a53eb76f6597e4b7c4eb3938c"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODk5OTQ2OnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/Context.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo1NzowM1rOGVsBTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo1NzowM1rOGVsBTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5NDUxMA==", "bodyText": "nitpick: remove", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r425394510", "createdAt": "2020-05-14T19:57:03Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/Context.java", "diffHunk": "@@ -66,4 +66,6 @@\n    void setConsole(ReadlineConsole console);\n \n    CommandRegistry<? extends CommandInvocation> getRegistry();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601565f28b341e1a53eb76f6597e4b7c4eb3938c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTA0MDY4OnYy", "diffSide": "RIGHT", "path": "cli/cli-client/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoxMDoxOVrOGVsb6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzozNzo0OFrOGWFONg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwMTMyMA==", "bodyText": "is this plugin required? I don't see any reference to the lib folder.", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r425401320", "createdAt": "2020-05-14T20:10:19Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/pom.xml", "diffHunk": "@@ -118,12 +123,134 @@\n                      <goal>java</goal>\n                   </goals>\n                   <configuration>\n-                     <mainClass>org.infinispan.cli.CLI</mainClass>\n+                     <mainClass>${cli.main.class}</mainClass>\n                      <cleanupDaemonThreads>false</cleanupDaemonThreads>\n                   </configuration>\n                </execution>\n             </executions>\n          </plugin>\n       </plugins>\n    </build>\n+\n+   <profiles>\n+      <profile>\n+         <id>shade</id>\n+         <build>\n+            <plugins>\n+               <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-shade-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <phase>package</phase>\n+                        <goals>\n+                           <goal>shade</goal>\n+                        </goals>\n+                        <configuration>\n+                           <transformers>\n+                              <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n+                                 <mainClass>${cli.main.class}</mainClass>\n+                              </transformer>\n+                           </transformers>\n+                        </configuration>\n+                     </execution>\n+                  </executions>\n+               </plugin>\n+            </plugins>\n+         </build>\n+      </profile>\n+      <profile>\n+         <id>native</id>\n+         <build>\n+            <plugins>\n+               <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-enforcer-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <id>graalvm-check</id>\n+                        <goals>\n+                           <goal>enforce</goal>\n+                        </goals>\n+                        <configuration>\n+                           <rules>\n+                              <requireEnvironmentVariable>\n+                                 <variableName>GRAALVM_HOME</variableName>\n+                              </requireEnvironmentVariable>\n+                           </rules>\n+                           <fail>true</fail>\n+                        </configuration>\n+                     </execution>\n+                  </executions>\n+               </plugin>\n+               <plugin>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601565f28b341e1a53eb76f6597e4b7c4eb3938c"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNzQxNA==", "bodyText": "It puts the classpath in a property which is then used by the native image build", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r425807414", "createdAt": "2020-05-15T13:37:48Z", "author": {"login": "tristantarrant"}, "path": "cli/cli-client/pom.xml", "diffHunk": "@@ -118,12 +123,134 @@\n                      <goal>java</goal>\n                   </goals>\n                   <configuration>\n-                     <mainClass>org.infinispan.cli.CLI</mainClass>\n+                     <mainClass>${cli.main.class}</mainClass>\n                      <cleanupDaemonThreads>false</cleanupDaemonThreads>\n                   </configuration>\n                </execution>\n             </executions>\n          </plugin>\n       </plugins>\n    </build>\n+\n+   <profiles>\n+      <profile>\n+         <id>shade</id>\n+         <build>\n+            <plugins>\n+               <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-shade-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <phase>package</phase>\n+                        <goals>\n+                           <goal>shade</goal>\n+                        </goals>\n+                        <configuration>\n+                           <transformers>\n+                              <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n+                                 <mainClass>${cli.main.class}</mainClass>\n+                              </transformer>\n+                           </transformers>\n+                        </configuration>\n+                     </execution>\n+                  </executions>\n+               </plugin>\n+            </plugins>\n+         </build>\n+      </profile>\n+      <profile>\n+         <id>native</id>\n+         <build>\n+            <plugins>\n+               <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-enforcer-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <id>graalvm-check</id>\n+                        <goals>\n+                           <goal>enforce</goal>\n+                        </goals>\n+                        <configuration>\n+                           <rules>\n+                              <requireEnvironmentVariable>\n+                                 <variableName>GRAALVM_HOME</variableName>\n+                              </requireEnvironmentVariable>\n+                           </rules>\n+                           <fail>true</fail>\n+                        </configuration>\n+                     </execution>\n+                  </executions>\n+               </plugin>\n+               <plugin>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwMTMyMA=="}, "originalCommit": {"oid": "601565f28b341e1a53eb76f6597e4b7c4eb3938c"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTA1MjM3OnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/SecurityActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoxMzo1NlrOGVsjLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoxMzo1NlrOGVsjLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwMzE4MQ==", "bodyText": "isn't it going to replace the Provider in position 1?\nAlso, I don't see any use of this class.", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r425403181", "createdAt": "2020-05-14T20:13:56Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/SecurityActions.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.infinispan.cli;\n+\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.security.Provider;\n+\n+/**\n+ * SecurityActions for the org.infinispan.cli package.\n+ * <p>\n+ * Do not move. Do not change class and method visibility to avoid being called from other {@link\n+ * java.security.CodeSource}s, thus granting privilege escalation to external code.\n+ *\n+ * @author Tristan Tarrant <tristan@infinispan.org>\n+ * @since 11.0\n+ */\n+final class SecurityActions {\n+   private static <T> T doPrivileged(PrivilegedAction<T> action) {\n+      if (System.getSecurityManager() != null) {\n+         return AccessController.doPrivileged(action);\n+      } else {\n+         return action.run();\n+      }\n+   }\n+\n+   static void addSecurityProvider(Provider provider) {\n+      doPrivileged(() -> {\n+               if (java.security.Security.getProvider(provider.getName()) == null) {\n+                  java.security.Security.insertProviderAt(provider, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601565f28b341e1a53eb76f6597e4b7c4eb3938c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTA4NTA1OnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/CLI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyMzo1NlrOGVs31w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyMzo1NlrOGVs31w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwODQ3MQ==", "bodyText": "is this supposed to continue executing after showing the version?", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r425408471", "createdAt": "2020-05-14T20:23:56Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/CLI.java", "diffHunk": "@@ -0,0 +1,247 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import org.aesh.AeshRuntimeRunner;\n+import org.aesh.command.AeshCommandRuntimeBuilder;\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.impl.completer.FileOptionCompleter;\n+import org.aesh.command.impl.registry.AeshCommandRegistryBuilder;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.registry.CommandRegistry;\n+import org.aesh.command.registry.CommandRegistryException;\n+import org.aesh.command.settings.SettingsBuilder;\n+import org.aesh.command.shell.Shell;\n+import org.aesh.io.Resource;\n+import org.aesh.readline.ReadlineConsole;\n+import org.infinispan.cli.Context;\n+import org.infinispan.cli.activators.ContextAwareCommandActivatorProvider;\n+import org.infinispan.cli.completers.ContextAwareCompleterInvocationProvider;\n+import org.infinispan.cli.impl.AeshDelegatingShell;\n+import org.infinispan.cli.impl.CliCommandNotFoundHandler;\n+import org.infinispan.cli.impl.CliRuntimeRunner;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocationProvider;\n+import org.infinispan.cli.impl.ContextAwareQuitHandler;\n+import org.infinispan.cli.impl.ContextImpl;\n+import org.infinispan.cli.impl.SSLContextSettings;\n+import org.infinispan.cli.util.ZeroSecurityHostnameVerifier;\n+import org.infinispan.cli.util.ZeroSecurityTrustManager;\n+import org.infinispan.commons.util.ServiceFinder;\n+import org.wildfly.security.keystore.KeyStoreUtil;\n+import org.wildfly.security.provider.util.ProviderUtil;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+@GroupCommandDefinition(\n+      name = CLI.CMD,\n+      description = \"\",\n+      groupCommands = {\n+            Add.class,\n+            Cache.class,\n+            Cas.class,\n+            Cd.class,\n+            Clear.class,\n+            ClearCache.class,\n+            Connect.class,\n+            Container.class,\n+            Counter.class,\n+            Create.class,\n+            Describe.class,\n+            Disconnect.class,\n+            Drop.class,\n+            Echo.class,\n+            Encoding.class,\n+            Get.class,\n+            Ls.class,\n+            Patch.class,\n+            Put.class,\n+            Query.class,\n+            Remove.class,\n+            Replace.class,\n+            Reset.class,\n+            Run.class,\n+            Schema.class,\n+            Shutdown.class,\n+            Site.class,\n+            User.class,\n+            Version.class\n+      })\n+public class CLI extends CliCommand {\n+   public static final String CMD = \"cli\";\n+\n+   @Option(completer = FileOptionCompleter.class, shortName = 't', name = \"truststore\", description = \"A truststore to use when connecting to SSL/TLS-enabled servers\")\n+   Resource truststore;\n+\n+   @Option(shortName = 's', name = \"truststore-password\", description = \"The password for the truststore\")\n+   String truststorePassword;\n+\n+   @Option(shortName = 'v', hasValue = false, description = \"Shows version information\")\n+   boolean version;\n+\n+   @Option(hasValue = false, description = \"Whether to trust all certificates\", name = \"trustall\")\n+   boolean trustAll;\n+\n+   @Option(completer = FileOptionCompleter.class, shortName = 'f', description = \"File for batch mode\")\n+   Resource file;\n+\n+   @Option(shortName = 'c', description = \"A connection URL. Use '-' to connect to http://localhost:11222\")\n+   String connect;\n+\n+   private Context context;\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      if (help) {\n+         invocation.println(invocation.getHelpInfo());\n+         return CommandResult.SUCCESS;\n+      }\n+      if (version) {\n+         invocation.printf(\"%s CLI %s\\n\", org.infinispan.commons.util.Version.getBrandName(), org.infinispan.commons.util.Version.getVersion());\n+         invocation.printf(\"Copyright (C) Red Hat Inc. and/or its affiliates and other contributors\\n\");\n+         invocation.printf(\"License Apache License, v. 2.0. http://www.apache.org/licenses/LICENSE-2.0\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601565f28b341e1a53eb76f6597e4b7c4eb3938c"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTA5NDUwOnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/CLI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyNjo1MlrOGVs94g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyNjo1MlrOGVs94g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxMDAxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     invocation.printf(\"%s CLI %s\\n\", org.infinispan.commons.util.Version.getBrandName(), org.infinispan.commons.util.Version.getVersion());\n          \n          \n            \n                     invocation.printf(\"%s CLI %s\\n\", org.infinispan.commons.util.Version.getBrandName(), org.infinispan.commons.util.Version.getBrandVersion());", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r425410018", "createdAt": "2020-05-14T20:26:52Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/CLI.java", "diffHunk": "@@ -0,0 +1,247 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import org.aesh.AeshRuntimeRunner;\n+import org.aesh.command.AeshCommandRuntimeBuilder;\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.impl.completer.FileOptionCompleter;\n+import org.aesh.command.impl.registry.AeshCommandRegistryBuilder;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.registry.CommandRegistry;\n+import org.aesh.command.registry.CommandRegistryException;\n+import org.aesh.command.settings.SettingsBuilder;\n+import org.aesh.command.shell.Shell;\n+import org.aesh.io.Resource;\n+import org.aesh.readline.ReadlineConsole;\n+import org.infinispan.cli.Context;\n+import org.infinispan.cli.activators.ContextAwareCommandActivatorProvider;\n+import org.infinispan.cli.completers.ContextAwareCompleterInvocationProvider;\n+import org.infinispan.cli.impl.AeshDelegatingShell;\n+import org.infinispan.cli.impl.CliCommandNotFoundHandler;\n+import org.infinispan.cli.impl.CliRuntimeRunner;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocationProvider;\n+import org.infinispan.cli.impl.ContextAwareQuitHandler;\n+import org.infinispan.cli.impl.ContextImpl;\n+import org.infinispan.cli.impl.SSLContextSettings;\n+import org.infinispan.cli.util.ZeroSecurityHostnameVerifier;\n+import org.infinispan.cli.util.ZeroSecurityTrustManager;\n+import org.infinispan.commons.util.ServiceFinder;\n+import org.wildfly.security.keystore.KeyStoreUtil;\n+import org.wildfly.security.provider.util.ProviderUtil;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+@GroupCommandDefinition(\n+      name = CLI.CMD,\n+      description = \"\",\n+      groupCommands = {\n+            Add.class,\n+            Cache.class,\n+            Cas.class,\n+            Cd.class,\n+            Clear.class,\n+            ClearCache.class,\n+            Connect.class,\n+            Container.class,\n+            Counter.class,\n+            Create.class,\n+            Describe.class,\n+            Disconnect.class,\n+            Drop.class,\n+            Echo.class,\n+            Encoding.class,\n+            Get.class,\n+            Ls.class,\n+            Patch.class,\n+            Put.class,\n+            Query.class,\n+            Remove.class,\n+            Replace.class,\n+            Reset.class,\n+            Run.class,\n+            Schema.class,\n+            Shutdown.class,\n+            Site.class,\n+            User.class,\n+            Version.class\n+      })\n+public class CLI extends CliCommand {\n+   public static final String CMD = \"cli\";\n+\n+   @Option(completer = FileOptionCompleter.class, shortName = 't', name = \"truststore\", description = \"A truststore to use when connecting to SSL/TLS-enabled servers\")\n+   Resource truststore;\n+\n+   @Option(shortName = 's', name = \"truststore-password\", description = \"The password for the truststore\")\n+   String truststorePassword;\n+\n+   @Option(shortName = 'v', hasValue = false, description = \"Shows version information\")\n+   boolean version;\n+\n+   @Option(hasValue = false, description = \"Whether to trust all certificates\", name = \"trustall\")\n+   boolean trustAll;\n+\n+   @Option(completer = FileOptionCompleter.class, shortName = 'f', description = \"File for batch mode\")\n+   Resource file;\n+\n+   @Option(shortName = 'c', description = \"A connection URL. Use '-' to connect to http://localhost:11222\")\n+   String connect;\n+\n+   private Context context;\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      if (help) {\n+         invocation.println(invocation.getHelpInfo());\n+         return CommandResult.SUCCESS;\n+      }\n+      if (version) {\n+         invocation.printf(\"%s CLI %s\\n\", org.infinispan.commons.util.Version.getBrandName(), org.infinispan.commons.util.Version.getVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601565f28b341e1a53eb76f6597e4b7c4eb3938c"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjU3MjQxOnYy", "diffSide": "RIGHT", "path": "cli/cli-client/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoxMTo1MVrOGWPBjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjozMzoyOVrOGWpJhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2ODAxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                          <argument>infinispan</argument>\n          \n          \n            \n                                          <argument>${infinispan.brand.short-name}-cli</argument>\n          \n      \n    \n    \n  \n\nnot sure if we are going to ship this downstream, but let's make it future proof", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r425968014", "createdAt": "2020-05-15T18:11:51Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/pom.xml", "diffHunk": "@@ -118,12 +127,135 @@\n                      <goal>java</goal>\n                   </goals>\n                   <configuration>\n-                     <mainClass>org.infinispan.cli.CLI</mainClass>\n+                     <mainClass>${cli.main.class}</mainClass>\n                      <cleanupDaemonThreads>false</cleanupDaemonThreads>\n                   </configuration>\n                </execution>\n             </executions>\n          </plugin>\n       </plugins>\n    </build>\n+\n+   <profiles>\n+      <profile>\n+         <id>shade</id>\n+         <build>\n+            <plugins>\n+               <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-shade-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <phase>package</phase>\n+                        <goals>\n+                           <goal>shade</goal>\n+                        </goals>\n+                        <configuration>\n+                           <transformers>\n+                              <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n+                                 <mainClass>${cli.main.class}</mainClass>\n+                              </transformer>\n+                           </transformers>\n+                        </configuration>\n+                     </execution>\n+                  </executions>\n+               </plugin>\n+            </plugins>\n+         </build>\n+      </profile>\n+      <profile>\n+         <id>native</id>\n+         <build>\n+            <plugins>\n+               <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-enforcer-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <id>graalvm-check</id>\n+                        <goals>\n+                           <goal>enforce</goal>\n+                        </goals>\n+                        <configuration>\n+                           <rules>\n+                              <requireEnvironmentVariable>\n+                                 <variableName>GRAALVM_HOME</variableName>\n+                              </requireEnvironmentVariable>\n+                           </rules>\n+                           <fail>true</fail>\n+                        </configuration>\n+                     </execution>\n+                  </executions>\n+               </plugin>\n+               <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-dependency-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <id>classpath</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                           <goal>build-classpath</goal>\n+                        </goals>\n+                        <configuration>\n+                           <outputProperty>maven.compile.classpath</outputProperty>\n+                           <pathSeparator>:</pathSeparator>\n+                           <includeScope>compile</includeScope>\n+                        </configuration>\n+                     </execution>\n+                  </executions>\n+                  <configuration>\n+                     <outputDirectory>${project.build.directory}/lib</outputDirectory>\n+                     <silent>true</silent>\n+                  </configuration>\n+               </plugin>\n+               <plugin>\n+                  <groupId>org.codehaus.mojo</groupId>\n+                  <artifactId>exec-maven-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <id>generate-native-reflection</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                           <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                           <executable>java</executable>\n+                           <workingDirectory>target</workingDirectory>\n+                           <arguments>\n+                              <argument>-cp</argument>\n+                              <classpath/>\n+                              <argument>org.aesh.util.GraalReflectionGenerator</argument>\n+                              <argument>${cli.main.class}</argument>\n+                           </arguments>\n+                        </configuration>\n+                     </execution>\n+                     <execution>\n+                        <id>native</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                           <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                           <executable>${env.GRAALVM_HOME}/bin/native-image</executable>\n+                           <workingDirectory>${project.build.directory}</workingDirectory>\n+                           <arguments>\n+                              <argument>--verbose</argument>\n+                              <argument>-H:+ReportUnsupportedElementsAtRuntime</argument>\n+                              <argument>-H:+ReportExceptionStackTraces</argument>\n+                              <argument>-H:ReflectionConfigurationFiles=cli_reflection.json</argument>\n+                              <argument>-cp</argument>\n+                              <argument>${maven.compile.classpath}</argument>\n+                              <argument>-jar</argument>\n+                              <argument>${project.build.finalName}.jar</argument>\n+                              <argument>infinispan</argument>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM5NjAzNw==", "bodyText": "This is actually a little more complex: I don't want to make commands \"branded\" as it makes things unportable between the two sides. In WildFly/EAP the CLI is called jboss-cli.sh and does not change. Using the upstream name here (or a neutral one) is probably the best. Bear in mind that we will also have to create an alias/symbolic link to a kubectl-infinispan (or whatever) so that it can be invoked as a slave CLI to kubectl/oc", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426396037", "createdAt": "2020-05-18T06:33:29Z", "author": {"login": "tristantarrant"}, "path": "cli/cli-client/pom.xml", "diffHunk": "@@ -118,12 +127,135 @@\n                      <goal>java</goal>\n                   </goals>\n                   <configuration>\n-                     <mainClass>org.infinispan.cli.CLI</mainClass>\n+                     <mainClass>${cli.main.class}</mainClass>\n                      <cleanupDaemonThreads>false</cleanupDaemonThreads>\n                   </configuration>\n                </execution>\n             </executions>\n          </plugin>\n       </plugins>\n    </build>\n+\n+   <profiles>\n+      <profile>\n+         <id>shade</id>\n+         <build>\n+            <plugins>\n+               <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-shade-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <phase>package</phase>\n+                        <goals>\n+                           <goal>shade</goal>\n+                        </goals>\n+                        <configuration>\n+                           <transformers>\n+                              <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n+                                 <mainClass>${cli.main.class}</mainClass>\n+                              </transformer>\n+                           </transformers>\n+                        </configuration>\n+                     </execution>\n+                  </executions>\n+               </plugin>\n+            </plugins>\n+         </build>\n+      </profile>\n+      <profile>\n+         <id>native</id>\n+         <build>\n+            <plugins>\n+               <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-enforcer-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <id>graalvm-check</id>\n+                        <goals>\n+                           <goal>enforce</goal>\n+                        </goals>\n+                        <configuration>\n+                           <rules>\n+                              <requireEnvironmentVariable>\n+                                 <variableName>GRAALVM_HOME</variableName>\n+                              </requireEnvironmentVariable>\n+                           </rules>\n+                           <fail>true</fail>\n+                        </configuration>\n+                     </execution>\n+                  </executions>\n+               </plugin>\n+               <plugin>\n+                  <groupId>org.apache.maven.plugins</groupId>\n+                  <artifactId>maven-dependency-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <id>classpath</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                           <goal>build-classpath</goal>\n+                        </goals>\n+                        <configuration>\n+                           <outputProperty>maven.compile.classpath</outputProperty>\n+                           <pathSeparator>:</pathSeparator>\n+                           <includeScope>compile</includeScope>\n+                        </configuration>\n+                     </execution>\n+                  </executions>\n+                  <configuration>\n+                     <outputDirectory>${project.build.directory}/lib</outputDirectory>\n+                     <silent>true</silent>\n+                  </configuration>\n+               </plugin>\n+               <plugin>\n+                  <groupId>org.codehaus.mojo</groupId>\n+                  <artifactId>exec-maven-plugin</artifactId>\n+                  <executions>\n+                     <execution>\n+                        <id>generate-native-reflection</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                           <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                           <executable>java</executable>\n+                           <workingDirectory>target</workingDirectory>\n+                           <arguments>\n+                              <argument>-cp</argument>\n+                              <classpath/>\n+                              <argument>org.aesh.util.GraalReflectionGenerator</argument>\n+                              <argument>${cli.main.class}</argument>\n+                           </arguments>\n+                        </configuration>\n+                     </execution>\n+                     <execution>\n+                        <id>native</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                           <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                           <executable>${env.GRAALVM_HOME}/bin/native-image</executable>\n+                           <workingDirectory>${project.build.directory}</workingDirectory>\n+                           <arguments>\n+                              <argument>--verbose</argument>\n+                              <argument>-H:+ReportUnsupportedElementsAtRuntime</argument>\n+                              <argument>-H:+ReportExceptionStackTraces</argument>\n+                              <argument>-H:ReflectionConfigurationFiles=cli_reflection.json</argument>\n+                              <argument>-cp</argument>\n+                              <argument>${maven.compile.classpath}</argument>\n+                              <argument>-jar</argument>\n+                              <argument>${project.build.finalName}.jar</argument>\n+                              <argument>infinispan</argument>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2ODAxNA=="}, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjU3NDM5OnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/Abort.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoxMjoyNFrOGWPCrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjoyOTo0NFrOGWpEFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2ODMwMg==", "bodyText": "all these changes just to fix the native compilation? :(", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r425968302", "createdAt": "2020-05-15T18:12:24Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/Abort.java", "diffHunk": "@@ -17,6 +18,14 @@\n \n    public static final String CMD = \"abort\";\n \n+   @Option(shortName = 'h', hasValue = false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM5NDY0NA==", "bodyText": "Unfortunately I have not found a way to make inheritance work. Method visibility, allow all fields, etc: none worked for me.", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426394644", "createdAt": "2020-05-18T06:29:44Z", "author": {"login": "tristantarrant"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/Abort.java", "diffHunk": "@@ -17,6 +18,14 @@\n \n    public static final String CMD = \"abort\";\n \n+   @Option(shortName = 'h', hasValue = false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2ODMwMg=="}, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjgwMzc0OnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOToyODo0MFrOGWRT5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOToyODo0MFrOGWRT5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwNTQ3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  @Option(description = \"Whether the password should be stored in plain text\", name = \"plain-text\")\n          \n          \n            \n                  @Option(description = \"Whether the password should be stored in plain text\", name = \"plain-text\", hasValue = false)\n          \n      \n    \n    \n  \n\nhasValue=false is missing\n[disconnected]> user modify b -p c --plain-text\nOption plain-text was specified, but no value was given.", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426005476", "createdAt": "2020-05-15T19:28:40Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.user.UserTool;\n+import org.kohsuke.MetaInfServices;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = User.CMD, description = \"User operations\", groupCommands = {User.Create.class, User.Describe.class, User.Remove.class, User.Modify.class, User.Ls.class})\n+public class User extends CliCommand {\n+\n+   public static final String CMD = \"user\";\n+\n+   @Option(shortName = 'h', hasValue = false)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   @CommandDefinition(name = Create.CMD, description = \"Creates a user\", aliases = \"add\")\n+   public static class Create extends CliCommand {\n+      public static final String CMD = \"create\";\n+\n+      @Argument(description = \"The username for the user\")\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a')\n+      List<String> algorithms;\n+\n+      @OptionList(description = \"The groups the user should belong to\", shortName = 'g')\n+      List<String> groups;\n+\n+      @Option(description = \"Whether the password should be stored in plain text (not recommended)\", name = \"plain-text\", hasValue = false)\n+      boolean plainText;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         try {\n+            while (username == null || username.isEmpty()) {\n+               username = invocation.getShell().readLine(MSG.userToolUsername());\n+            }\n+         } catch (InterruptedException e) {\n+            return CommandResult.FAILURE;\n+         }\n+\n+         if (password == null) { // Get the password interactively\n+            try {\n+               while (password == null || password.isEmpty()) {\n+                  password = invocation.getShell().readLine(new Prompt(MSG.userToolPassword(), '*'));\n+               }\n+               String confirm = null;\n+               while (confirm == null || !confirm.equals(password)) {\n+                  confirm = invocation.getShell().readLine(new Prompt(MSG.userToolPasswordConfirm(), '*'));\n+               }\n+            } catch (InterruptedException e) {\n+               return CommandResult.FAILURE;\n+            }\n+         }\n+         userTool.createUser(username, password, realm, plainText, groups, algorithms);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Describe.CMD, description = \"Describes a user\")\n+   public static class Describe extends CliCommand {\n+      public static final String CMD = \"describe\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         invocation.getShell().writeln(userTool.describeUser(username));\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Remove.CMD, description = \"Removes a user\", aliases = \"rm\")\n+   public static class Remove extends CliCommand {\n+      public static final String CMD = \"remove\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         userTool.removeUser(username);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Modify.CMD, description = \"Modifies a user\")\n+   public static class Modify extends CliCommand {\n+      public static final String CMD = \"modify\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a')\n+      List<String> algorithms;\n+\n+      @OptionList(description = \"The groups the user should belong to\", shortName = 'g')\n+      List<String> groups;\n+\n+      @Option(description = \"Whether the password should be stored in plain text\", name = \"plain-text\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg0MjUwOnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/user/UserTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0Mjo1M1rOGWRrtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTowNzoyM1rOGWyVcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTU3NQ==", "bodyText": "can you fix the algorithm in this PR?\nif you mix clear and encrypted passwords you can't login with some users:\n[disconnected]> user create test -p test\n[disconnected]> user create unsecure -p weak --plain-text \n[disconnected]> connect -u test -p test\nThe supplied credentials are invalid \n[null]> connect -u unsecure -p weak                # where the \"null\" comes from!?\n[pedro-laptop-3-17779@cluster//containers/default]> \n\nmay I suggest to have the \"algorithm\" per user? like <user>:<type>:<password> where type can be 0 (==clear) or 1 (==encrypted)\nProbably work for another PR...", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426011575", "createdAt": "2020-05-15T19:42:53Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/user/UserTool.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.infinispan.cli.user;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+\n+import org.wildfly.common.iteration.ByteIterator;\n+import org.wildfly.security.password.Password;\n+import org.wildfly.security.password.PasswordFactory;\n+import org.wildfly.security.password.WildFlyElytronPasswordProvider;\n+import org.wildfly.security.password.interfaces.DigestPassword;\n+import org.wildfly.security.password.interfaces.ScramDigestPassword;\n+import org.wildfly.security.password.spec.BasicPasswordSpecEncoding;\n+import org.wildfly.security.password.spec.DigestPasswordAlgorithmSpec;\n+import org.wildfly.security.password.spec.EncryptablePasswordSpec;\n+import org.wildfly.security.password.spec.IteratedSaltedPasswordAlgorithmSpec;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 10.0\n+ **/\n+public class UserTool {\n+   public static final String DEFAULT_USERS_PROPERTIES_FILE = \"users.properties\";\n+   public static final String DEFAULT_GROUPS_PROPERTIES_FILE = \"groups.properties\";\n+   public static final String DEFAULT_REALM_NAME = \"default\";\n+   public static final String DEFAULT_SERVER_ROOT = \"server\";\n+\n+   private static final List<String> DEFAULT_ALGORITHMS = Arrays.asList(\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_1,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_256,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_384,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_512,\n+         DigestPassword.ALGORITHM_DIGEST_MD5,\n+         DigestPassword.ALGORITHM_DIGEST_SHA,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_256,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_384,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_512\n+   );\n+\n+   private final Path serverRoot;\n+   private final Path usersFile;\n+   private final Path groupsFile;\n+   private Properties users = new Properties();\n+   private Properties groups = new Properties();\n+   private String realm = DEFAULT_REALM_NAME;\n+   private Boolean plainText = false;\n+\n+   public UserTool(String serverRoot) {\n+      this(serverRoot, DEFAULT_USERS_PROPERTIES_FILE, DEFAULT_GROUPS_PROPERTIES_FILE);\n+   }\n+\n+   public UserTool(String serverRoot, String usersFile, String groupsFile) {\n+      this(serverRoot != null ? Paths.get(serverRoot) : null,\n+            usersFile != null ? Paths.get(usersFile) : null,\n+            groupsFile != null ? Paths.get(groupsFile) : null);\n+   }\n+\n+   public UserTool(Path serverRoot, Path usersFile, Path groupsFile) {\n+      installSecurityProvider();\n+      if (serverRoot != null && serverRoot.isAbsolute()) {\n+         this.serverRoot = serverRoot;\n+      } else {\n+         String serverHome = System.getProperty(\"infinispan.server.home.path\");\n+         Path serverHomePath = serverHome == null ? Paths.get(\"\") : Paths.get(serverHome);\n+         if (serverRoot == null) {\n+            this.serverRoot = serverHomePath.resolve(\"server\");\n+         } else {\n+            this.serverRoot = serverHomePath.resolve(serverRoot);\n+         }\n+      }\n+\n+      if (usersFile == null) {\n+         this.usersFile = this.serverRoot.resolve(\"conf\").resolve(DEFAULT_USERS_PROPERTIES_FILE);\n+      } else if (usersFile.isAbsolute()) {\n+         this.usersFile = usersFile;\n+      } else {\n+         this.usersFile = this.serverRoot.resolve(\"conf\").resolve(usersFile);\n+      }\n+      if (groupsFile == null) {\n+         this.groupsFile = this.serverRoot.resolve(\"conf\").resolve(DEFAULT_GROUPS_PROPERTIES_FILE);\n+      } else if (groupsFile.isAbsolute()) {\n+         this.groupsFile = groupsFile;\n+      } else {\n+         this.groupsFile = this.serverRoot.resolve(\"conf\").resolve(groupsFile);\n+      }\n+      load();\n+   }\n+\n+   private void installSecurityProvider() {\n+      WildFlyElytronPasswordProvider instance = WildFlyElytronPasswordProvider.getInstance();\n+      if (java.security.Security.getProvider(instance.getName()) == null) {\n+         java.security.Security.insertProviderAt(instance, 1);\n+      }\n+   }\n+\n+   private void load() {\n+      if (Files.exists(usersFile)) {\n+         try (Reader reader = Files.newBufferedReader(usersFile)) {\n+            users.load(reader);\n+            // TODO: detect REALM_NAME and ALGORITHM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0NjU0NQ==", "bodyText": "No, I've made it so that you cannot add encrypted users to a clear-text password file and vice-versa. I've also added an encrypt-all subcommand which converts a clear-text file to encrypted in one fell swoop", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426546545", "createdAt": "2020-05-18T11:07:23Z", "author": {"login": "tristantarrant"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/user/UserTool.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.infinispan.cli.user;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+\n+import org.wildfly.common.iteration.ByteIterator;\n+import org.wildfly.security.password.Password;\n+import org.wildfly.security.password.PasswordFactory;\n+import org.wildfly.security.password.WildFlyElytronPasswordProvider;\n+import org.wildfly.security.password.interfaces.DigestPassword;\n+import org.wildfly.security.password.interfaces.ScramDigestPassword;\n+import org.wildfly.security.password.spec.BasicPasswordSpecEncoding;\n+import org.wildfly.security.password.spec.DigestPasswordAlgorithmSpec;\n+import org.wildfly.security.password.spec.EncryptablePasswordSpec;\n+import org.wildfly.security.password.spec.IteratedSaltedPasswordAlgorithmSpec;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 10.0\n+ **/\n+public class UserTool {\n+   public static final String DEFAULT_USERS_PROPERTIES_FILE = \"users.properties\";\n+   public static final String DEFAULT_GROUPS_PROPERTIES_FILE = \"groups.properties\";\n+   public static final String DEFAULT_REALM_NAME = \"default\";\n+   public static final String DEFAULT_SERVER_ROOT = \"server\";\n+\n+   private static final List<String> DEFAULT_ALGORITHMS = Arrays.asList(\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_1,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_256,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_384,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_512,\n+         DigestPassword.ALGORITHM_DIGEST_MD5,\n+         DigestPassword.ALGORITHM_DIGEST_SHA,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_256,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_384,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_512\n+   );\n+\n+   private final Path serverRoot;\n+   private final Path usersFile;\n+   private final Path groupsFile;\n+   private Properties users = new Properties();\n+   private Properties groups = new Properties();\n+   private String realm = DEFAULT_REALM_NAME;\n+   private Boolean plainText = false;\n+\n+   public UserTool(String serverRoot) {\n+      this(serverRoot, DEFAULT_USERS_PROPERTIES_FILE, DEFAULT_GROUPS_PROPERTIES_FILE);\n+   }\n+\n+   public UserTool(String serverRoot, String usersFile, String groupsFile) {\n+      this(serverRoot != null ? Paths.get(serverRoot) : null,\n+            usersFile != null ? Paths.get(usersFile) : null,\n+            groupsFile != null ? Paths.get(groupsFile) : null);\n+   }\n+\n+   public UserTool(Path serverRoot, Path usersFile, Path groupsFile) {\n+      installSecurityProvider();\n+      if (serverRoot != null && serverRoot.isAbsolute()) {\n+         this.serverRoot = serverRoot;\n+      } else {\n+         String serverHome = System.getProperty(\"infinispan.server.home.path\");\n+         Path serverHomePath = serverHome == null ? Paths.get(\"\") : Paths.get(serverHome);\n+         if (serverRoot == null) {\n+            this.serverRoot = serverHomePath.resolve(\"server\");\n+         } else {\n+            this.serverRoot = serverHomePath.resolve(serverRoot);\n+         }\n+      }\n+\n+      if (usersFile == null) {\n+         this.usersFile = this.serverRoot.resolve(\"conf\").resolve(DEFAULT_USERS_PROPERTIES_FILE);\n+      } else if (usersFile.isAbsolute()) {\n+         this.usersFile = usersFile;\n+      } else {\n+         this.usersFile = this.serverRoot.resolve(\"conf\").resolve(usersFile);\n+      }\n+      if (groupsFile == null) {\n+         this.groupsFile = this.serverRoot.resolve(\"conf\").resolve(DEFAULT_GROUPS_PROPERTIES_FILE);\n+      } else if (groupsFile.isAbsolute()) {\n+         this.groupsFile = groupsFile;\n+      } else {\n+         this.groupsFile = this.serverRoot.resolve(\"conf\").resolve(groupsFile);\n+      }\n+      load();\n+   }\n+\n+   private void installSecurityProvider() {\n+      WildFlyElytronPasswordProvider instance = WildFlyElytronPasswordProvider.getInstance();\n+      if (java.security.Security.getProvider(instance.getName()) == null) {\n+         java.security.Security.insertProviderAt(instance, 1);\n+      }\n+   }\n+\n+   private void load() {\n+      if (Files.exists(usersFile)) {\n+         try (Reader reader = Files.newBufferedReader(usersFile)) {\n+            users.load(reader);\n+            // TODO: detect REALM_NAME and ALGORITHM", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTU3NQ=="}, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg2MDEwOnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0OTowMVrOGWR2xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjoxNToxMVrOGW0b4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxNDQwNQ==", "bodyText": "can we have autocompletion?", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426014405", "createdAt": "2020-05-15T19:49:01Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.user.UserTool;\n+import org.kohsuke.MetaInfServices;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = User.CMD, description = \"User operations\", groupCommands = {User.Create.class, User.Describe.class, User.Remove.class, User.Modify.class, User.Ls.class})\n+public class User extends CliCommand {\n+\n+   public static final String CMD = \"user\";\n+\n+   @Option(shortName = 'h', hasValue = false)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   @CommandDefinition(name = Create.CMD, description = \"Creates a user\", aliases = \"add\")\n+   public static class Create extends CliCommand {\n+      public static final String CMD = \"create\";\n+\n+      @Argument(description = \"The username for the user\")\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxODE0Ng==", "bodyText": "this may be a stupid question, but... are all the \"default\" algorithms supported?\n[disconnected]> user create test2 -a scram-sha-1 -p test2\n[disconnected]> connect -u test2 -p test2\nThe supplied credentials are invalid", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426018146", "createdAt": "2020-05-15T19:57:18Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.user.UserTool;\n+import org.kohsuke.MetaInfServices;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = User.CMD, description = \"User operations\", groupCommands = {User.Create.class, User.Describe.class, User.Remove.class, User.Modify.class, User.Ls.class})\n+public class User extends CliCommand {\n+\n+   public static final String CMD = \"user\";\n+\n+   @Option(shortName = 'h', hasValue = false)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   @CommandDefinition(name = Create.CMD, description = \"Creates a user\", aliases = \"add\")\n+   public static class Create extends CliCommand {\n+      public static final String CMD = \"create\";\n+\n+      @Argument(description = \"The username for the user\")\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxNDQwNQ=="}, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MDk2MQ==", "bodyText": "Added completer.\nThe CLI uses the HTTP authentication mechs. SCRAM* mechs are for Hot Rod only", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426580961", "createdAt": "2020-05-18T12:15:11Z", "author": {"login": "tristantarrant"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.user.UserTool;\n+import org.kohsuke.MetaInfServices;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = User.CMD, description = \"User operations\", groupCommands = {User.Create.class, User.Describe.class, User.Remove.class, User.Modify.class, User.Ls.class})\n+public class User extends CliCommand {\n+\n+   public static final String CMD = \"user\";\n+\n+   @Option(shortName = 'h', hasValue = false)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   @CommandDefinition(name = Create.CMD, description = \"Creates a user\", aliases = \"add\")\n+   public static class Create extends CliCommand {\n+      public static final String CMD = \"create\";\n+\n+      @Argument(description = \"The username for the user\")\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxNDQwNQ=="}, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjkxMDQ0OnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowNzozOVrOGWSW1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTowNjowMFrOGWyS4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMjYxNQ==", "bodyText": "wdyt of splitting this subcommand in 2?\n\none for change password (set new password, encrypt with new algorithm)\nanother one for groups (add or remove groups)", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426022615", "createdAt": "2020-05-15T20:07:39Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.user.UserTool;\n+import org.kohsuke.MetaInfServices;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = User.CMD, description = \"User operations\", groupCommands = {User.Create.class, User.Describe.class, User.Remove.class, User.Modify.class, User.Ls.class})\n+public class User extends CliCommand {\n+\n+   public static final String CMD = \"user\";\n+\n+   @Option(shortName = 'h', hasValue = false)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   @CommandDefinition(name = Create.CMD, description = \"Creates a user\", aliases = \"add\")\n+   public static class Create extends CliCommand {\n+      public static final String CMD = \"create\";\n+\n+      @Argument(description = \"The username for the user\")\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a')\n+      List<String> algorithms;\n+\n+      @OptionList(description = \"The groups the user should belong to\", shortName = 'g')\n+      List<String> groups;\n+\n+      @Option(description = \"Whether the password should be stored in plain text (not recommended)\", name = \"plain-text\", hasValue = false)\n+      boolean plainText;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         try {\n+            while (username == null || username.isEmpty()) {\n+               username = invocation.getShell().readLine(MSG.userToolUsername());\n+            }\n+         } catch (InterruptedException e) {\n+            return CommandResult.FAILURE;\n+         }\n+\n+         if (password == null) { // Get the password interactively\n+            try {\n+               while (password == null || password.isEmpty()) {\n+                  password = invocation.getShell().readLine(new Prompt(MSG.userToolPassword(), '*'));\n+               }\n+               String confirm = null;\n+               while (confirm == null || !confirm.equals(password)) {\n+                  confirm = invocation.getShell().readLine(new Prompt(MSG.userToolPasswordConfirm(), '*'));\n+               }\n+            } catch (InterruptedException e) {\n+               return CommandResult.FAILURE;\n+            }\n+         }\n+         userTool.createUser(username, password, realm, plainText, groups, algorithms);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Describe.CMD, description = \"Describes a user\")\n+   public static class Describe extends CliCommand {\n+      public static final String CMD = \"describe\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         invocation.getShell().writeln(userTool.describeUser(username));\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Remove.CMD, description = \"Removes a user\", aliases = \"rm\")\n+   public static class Remove extends CliCommand {\n+      public static final String CMD = \"remove\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         userTool.removeUser(username);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Modify.CMD, description = \"Modifies a user\")\n+   public static class Modify extends CliCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0NTg4OA==", "bodyText": "Good idea: I've done that.\nuser password will change a user's password\nuser groups will change the groups", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426545888", "createdAt": "2020-05-18T11:06:00Z", "author": {"login": "tristantarrant"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.user.UserTool;\n+import org.kohsuke.MetaInfServices;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = User.CMD, description = \"User operations\", groupCommands = {User.Create.class, User.Describe.class, User.Remove.class, User.Modify.class, User.Ls.class})\n+public class User extends CliCommand {\n+\n+   public static final String CMD = \"user\";\n+\n+   @Option(shortName = 'h', hasValue = false)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   @CommandDefinition(name = Create.CMD, description = \"Creates a user\", aliases = \"add\")\n+   public static class Create extends CliCommand {\n+      public static final String CMD = \"create\";\n+\n+      @Argument(description = \"The username for the user\")\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a')\n+      List<String> algorithms;\n+\n+      @OptionList(description = \"The groups the user should belong to\", shortName = 'g')\n+      List<String> groups;\n+\n+      @Option(description = \"Whether the password should be stored in plain text (not recommended)\", name = \"plain-text\", hasValue = false)\n+      boolean plainText;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         try {\n+            while (username == null || username.isEmpty()) {\n+               username = invocation.getShell().readLine(MSG.userToolUsername());\n+            }\n+         } catch (InterruptedException e) {\n+            return CommandResult.FAILURE;\n+         }\n+\n+         if (password == null) { // Get the password interactively\n+            try {\n+               while (password == null || password.isEmpty()) {\n+                  password = invocation.getShell().readLine(new Prompt(MSG.userToolPassword(), '*'));\n+               }\n+               String confirm = null;\n+               while (confirm == null || !confirm.equals(password)) {\n+                  confirm = invocation.getShell().readLine(new Prompt(MSG.userToolPasswordConfirm(), '*'));\n+               }\n+            } catch (InterruptedException e) {\n+               return CommandResult.FAILURE;\n+            }\n+         }\n+         userTool.createUser(username, password, realm, plainText, groups, algorithms);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Describe.CMD, description = \"Describes a user\")\n+   public static class Describe extends CliCommand {\n+      public static final String CMD = \"describe\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         invocation.getShell().writeln(userTool.describeUser(username));\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Remove.CMD, description = \"Removes a user\", aliases = \"rm\")\n+   public static class Remove extends CliCommand {\n+      public static final String CMD = \"remove\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         userTool.removeUser(username);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Modify.CMD, description = \"Modifies a user\")\n+   public static class Modify extends CliCommand {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMjYxNQ=="}, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjkxMzY4OnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowOTowMFrOGWSY4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjoxNTo1NlrOGW0dmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMzEzOQ==", "bodyText": "can it fail if password and groups are null? (so, no change)", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426023139", "createdAt": "2020-05-15T20:09:00Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.user.UserTool;\n+import org.kohsuke.MetaInfServices;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = User.CMD, description = \"User operations\", groupCommands = {User.Create.class, User.Describe.class, User.Remove.class, User.Modify.class, User.Ls.class})\n+public class User extends CliCommand {\n+\n+   public static final String CMD = \"user\";\n+\n+   @Option(shortName = 'h', hasValue = false)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   @CommandDefinition(name = Create.CMD, description = \"Creates a user\", aliases = \"add\")\n+   public static class Create extends CliCommand {\n+      public static final String CMD = \"create\";\n+\n+      @Argument(description = \"The username for the user\")\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a')\n+      List<String> algorithms;\n+\n+      @OptionList(description = \"The groups the user should belong to\", shortName = 'g')\n+      List<String> groups;\n+\n+      @Option(description = \"Whether the password should be stored in plain text (not recommended)\", name = \"plain-text\", hasValue = false)\n+      boolean plainText;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         try {\n+            while (username == null || username.isEmpty()) {\n+               username = invocation.getShell().readLine(MSG.userToolUsername());\n+            }\n+         } catch (InterruptedException e) {\n+            return CommandResult.FAILURE;\n+         }\n+\n+         if (password == null) { // Get the password interactively\n+            try {\n+               while (password == null || password.isEmpty()) {\n+                  password = invocation.getShell().readLine(new Prompt(MSG.userToolPassword(), '*'));\n+               }\n+               String confirm = null;\n+               while (confirm == null || !confirm.equals(password)) {\n+                  confirm = invocation.getShell().readLine(new Prompt(MSG.userToolPasswordConfirm(), '*'));\n+               }\n+            } catch (InterruptedException e) {\n+               return CommandResult.FAILURE;\n+            }\n+         }\n+         userTool.createUser(username, password, realm, plainText, groups, algorithms);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Describe.CMD, description = \"Describes a user\")\n+   public static class Describe extends CliCommand {\n+      public static final String CMD = \"describe\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         invocation.getShell().writeln(userTool.describeUser(username));\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Remove.CMD, description = \"Removes a user\", aliases = \"rm\")\n+   public static class Remove extends CliCommand {\n+      public static final String CMD = \"remove\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         userTool.removeUser(username);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Modify.CMD, description = \"Modifies a user\")\n+   public static class Modify extends CliCommand {\n+      public static final String CMD = \"modify\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a')\n+      List<String> algorithms;\n+\n+      @OptionList(description = \"The groups the user should belong to\", shortName = 'g')\n+      List<String> groups;\n+\n+      @Option(description = \"Whether the password should be stored in plain text\", name = \"plain-text\")\n+      boolean plainText;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MTQwMQ==", "bodyText": "Splitting the command makes this moot", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426581401", "createdAt": "2020-05-18T12:15:56Z", "author": {"login": "tristantarrant"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.user.UserTool;\n+import org.kohsuke.MetaInfServices;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = User.CMD, description = \"User operations\", groupCommands = {User.Create.class, User.Describe.class, User.Remove.class, User.Modify.class, User.Ls.class})\n+public class User extends CliCommand {\n+\n+   public static final String CMD = \"user\";\n+\n+   @Option(shortName = 'h', hasValue = false)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   @CommandDefinition(name = Create.CMD, description = \"Creates a user\", aliases = \"add\")\n+   public static class Create extends CliCommand {\n+      public static final String CMD = \"create\";\n+\n+      @Argument(description = \"The username for the user\")\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a')\n+      List<String> algorithms;\n+\n+      @OptionList(description = \"The groups the user should belong to\", shortName = 'g')\n+      List<String> groups;\n+\n+      @Option(description = \"Whether the password should be stored in plain text (not recommended)\", name = \"plain-text\", hasValue = false)\n+      boolean plainText;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         try {\n+            while (username == null || username.isEmpty()) {\n+               username = invocation.getShell().readLine(MSG.userToolUsername());\n+            }\n+         } catch (InterruptedException e) {\n+            return CommandResult.FAILURE;\n+         }\n+\n+         if (password == null) { // Get the password interactively\n+            try {\n+               while (password == null || password.isEmpty()) {\n+                  password = invocation.getShell().readLine(new Prompt(MSG.userToolPassword(), '*'));\n+               }\n+               String confirm = null;\n+               while (confirm == null || !confirm.equals(password)) {\n+                  confirm = invocation.getShell().readLine(new Prompt(MSG.userToolPasswordConfirm(), '*'));\n+               }\n+            } catch (InterruptedException e) {\n+               return CommandResult.FAILURE;\n+            }\n+         }\n+         userTool.createUser(username, password, realm, plainText, groups, algorithms);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Describe.CMD, description = \"Describes a user\")\n+   public static class Describe extends CliCommand {\n+      public static final String CMD = \"describe\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         invocation.getShell().writeln(userTool.describeUser(username));\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Remove.CMD, description = \"Removes a user\", aliases = \"rm\")\n+   public static class Remove extends CliCommand {\n+      public static final String CMD = \"remove\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         userTool.removeUser(username);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Modify.CMD, description = \"Modifies a user\")\n+   public static class Modify extends CliCommand {\n+      public static final String CMD = \"modify\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a')\n+      List<String> algorithms;\n+\n+      @OptionList(description = \"The groups the user should belong to\", shortName = 'g')\n+      List<String> groups;\n+\n+      @Option(description = \"Whether the password should be stored in plain text\", name = \"plain-text\")\n+      boolean plainText;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName= 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMzEzOQ=="}, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjkzNTkyOnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/resources/help/user.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDoxNzoxNlrOGWSmrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDoxNzoxNlrOGWSmrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyNjY3MA==", "bodyText": "typo:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Removes the specified user grom the property files.\n          \n          \n            \n            Removes the specified user from the property files.", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426026670", "createdAt": "2020-05-15T20:17:16Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/resources/help/user.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+USER(1)\n+=======\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+user - manages ${infinispan.brand.name} users in property security realms.\n+\n+\n+SYNOPSIS\n+--------\n+*user ls*\n+\n+*user create* 'username'\n+\n+*user describe* 'username'\n+\n+*user remove* 'username'\n+\n+*user modify* 'username'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, created, describe, remove, modify) users stored in a property security realm.\n+Note: this command cannot interact with other security realms.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List users in the property security realm\n+\n+*user ls*::\n+Lists the users or groups which are present in the property files.\n+\n+Create a user\n+\n+*user create* 'username'::\n+Creates a user. The command will prompt for a password and confirmation.\n+\n+Describes a user\n+\n+*user describe* 'username'::\n+Describes a user, including its username, realm and any groups it belongs to.\n+\n+Remove a user\n+\n+*user remove* 'username'::\n+Removes the specified user grom the property files.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjk0NjMxOnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/resources/help/user.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDoyMDo0OVrOGWSs4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDoyMDo0OVrOGWSs4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyODI1Ng==", "bodyText": "it needs 2 new lines between sections.\nThe same issue for USER CREATE/MODIFY OPTIONS section", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426028256", "createdAt": "2020-05-15T20:20:49Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/resources/help/user.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+USER(1)\n+=======\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+user - manages ${infinispan.brand.name} users in property security realms.\n+\n+\n+SYNOPSIS\n+--------\n+*user ls*\n+\n+*user create* 'username'\n+\n+*user describe* 'username'\n+\n+*user remove* 'username'\n+\n+*user modify* 'username'\n+\n+\n+DESCRIPTION\n+-----------\n+Manage (list, created, describe, remove, modify) users stored in a property security realm.\n+Note: this command cannot interact with other security realms.\n+\n+\n+COMMAND SYNOPSIS\n+----------------\n+\n+List users in the property security realm\n+\n+*user ls*::\n+Lists the users or groups which are present in the property files.\n+\n+Create a user\n+\n+*user create* 'username'::\n+Creates a user. The command will prompt for a password and confirmation.\n+\n+Describes a user\n+\n+*user describe* 'username'::\n+Describes a user, including its username, realm and any groups it belongs to.\n+\n+Remove a user\n+\n+*user remove* 'username'::\n+Removes the specified user grom the property files.\n+\n+Modify a user\n+\n+*user modify* 'username'::\n+Modifies a user by changing its password or the groups it belongs to.\n+\n+COMMON OPTIONS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fffda63dbb83ab653197c281f0d0f08be74fb270"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzk4NDQ1OnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/user/UserTool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxODowNlrOGXAi9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxODowNlrOGXAi9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3OTM4Mg==", "bodyText": "shouldn't be Encryption.ENCRYPTED?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     store(realm, encryption);\n          \n          \n            \n                     store(realm, Encryption.ENCRYPTED);", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426779382", "createdAt": "2020-05-18T17:18:06Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/user/UserTool.java", "diffHunk": "@@ -0,0 +1,370 @@\n+package org.infinispan.cli.user;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.cli.logging.Messages;\n+import org.wildfly.common.iteration.ByteIterator;\n+import org.wildfly.common.iteration.CodePointIterator;\n+import org.wildfly.security.password.Password;\n+import org.wildfly.security.password.PasswordFactory;\n+import org.wildfly.security.password.WildFlyElytronPasswordProvider;\n+import org.wildfly.security.password.interfaces.DigestPassword;\n+import org.wildfly.security.password.interfaces.ScramDigestPassword;\n+import org.wildfly.security.password.spec.BasicPasswordSpecEncoding;\n+import org.wildfly.security.password.spec.DigestPasswordAlgorithmSpec;\n+import org.wildfly.security.password.spec.EncryptablePasswordSpec;\n+import org.wildfly.security.password.spec.IteratedSaltedPasswordAlgorithmSpec;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 10.0\n+ **/\n+public class UserTool {\n+   public static final String DEFAULT_USERS_PROPERTIES_FILE = \"users.properties\";\n+   public static final String DEFAULT_GROUPS_PROPERTIES_FILE = \"groups.properties\";\n+   public static final String DEFAULT_REALM_NAME = \"default\";\n+   public static final String DEFAULT_SERVER_ROOT = \"server\";\n+\n+   private static final String COMMENT_PREFIX1 = \"#\";\n+   private static final String COMMENT_PREFIX2 = \"!\";\n+   private static final String REALM_COMMENT_PREFIX = \"$REALM_NAME=\";\n+   private static final String COMMENT_SUFFIX = \"$\";\n+   private static final String ALGORITHM_COMMENT_PREFIX = \"$ALGORITHM=\";\n+\n+\n+   public static final List<String> DEFAULT_ALGORITHMS = Arrays.asList(\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_1,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_256,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_384,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_512,\n+         DigestPassword.ALGORITHM_DIGEST_MD5,\n+         DigestPassword.ALGORITHM_DIGEST_SHA,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_256,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_384,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_512\n+   );\n+\n+   private final Path serverRoot;\n+   private final Path usersFile;\n+   private final Path groupsFile;\n+   private Properties users = new Properties();\n+   private Properties groups = new Properties();\n+   private String realm = null;\n+   private Encryption encryption = Encryption.DEFAULT;\n+\n+   public UserTool(String serverRoot) {\n+      this(serverRoot, DEFAULT_USERS_PROPERTIES_FILE, DEFAULT_GROUPS_PROPERTIES_FILE);\n+   }\n+\n+   public UserTool(String serverRoot, String usersFile, String groupsFile) {\n+      this(serverRoot != null ? Paths.get(serverRoot) : null,\n+            usersFile != null ? Paths.get(usersFile) : null,\n+            groupsFile != null ? Paths.get(groupsFile) : null);\n+   }\n+\n+   public UserTool(Path serverRoot, Path usersFile, Path groupsFile) {\n+      installSecurityProvider();\n+      if (serverRoot != null && serverRoot.isAbsolute()) {\n+         this.serverRoot = serverRoot;\n+      } else {\n+         String serverHome = System.getProperty(\"infinispan.server.home.path\");\n+         Path serverHomePath = serverHome == null ? Paths.get(\"\") : Paths.get(serverHome);\n+         if (serverRoot == null) {\n+            this.serverRoot = serverHomePath.resolve(\"server\");\n+         } else {\n+            this.serverRoot = serverHomePath.resolve(serverRoot);\n+         }\n+      }\n+\n+      if (usersFile == null) {\n+         this.usersFile = this.serverRoot.resolve(\"conf\").resolve(DEFAULT_USERS_PROPERTIES_FILE);\n+      } else if (usersFile.isAbsolute()) {\n+         this.usersFile = usersFile;\n+      } else {\n+         this.usersFile = this.serverRoot.resolve(\"conf\").resolve(usersFile);\n+      }\n+      if (groupsFile == null) {\n+         this.groupsFile = this.serverRoot.resolve(\"conf\").resolve(DEFAULT_GROUPS_PROPERTIES_FILE);\n+      } else if (groupsFile.isAbsolute()) {\n+         this.groupsFile = groupsFile;\n+      } else {\n+         this.groupsFile = this.serverRoot.resolve(\"conf\").resolve(groupsFile);\n+      }\n+      load();\n+   }\n+\n+   private void installSecurityProvider() {\n+      WildFlyElytronPasswordProvider instance = WildFlyElytronPasswordProvider.getInstance();\n+      if (java.security.Security.getProvider(instance.getName()) == null) {\n+         java.security.Security.insertProviderAt(instance, 1);\n+      }\n+   }\n+\n+\n+   public void reload() {\n+      this.realm = null;\n+      this.encryption = Encryption.DEFAULT;\n+      load();\n+   }\n+\n+   private void load() {\n+      if (Files.exists(usersFile)) {\n+         try (BufferedReader reader = Files.newBufferedReader(usersFile, StandardCharsets.UTF_8)) {\n+            String currentLine;\n+            while ((currentLine = reader.readLine()) != null) {\n+               final String trimmed = currentLine.trim();\n+               if (trimmed.startsWith(COMMENT_PREFIX1) && trimmed.contains(REALM_COMMENT_PREFIX)) {\n+                  // this is the line that contains the realm name.\n+                  int start = trimmed.indexOf(REALM_COMMENT_PREFIX) + REALM_COMMENT_PREFIX.length();\n+                  int end = trimmed.indexOf(COMMENT_SUFFIX, start);\n+                  if (end > -1) {\n+                     realm = trimmed.substring(start, end);\n+                  }\n+               } else if (trimmed.startsWith(COMMENT_PREFIX1) && trimmed.contains(ALGORITHM_COMMENT_PREFIX)) {\n+                  // this is the line that contains the algorithm name.\n+                  int start = trimmed.indexOf(ALGORITHM_COMMENT_PREFIX) + ALGORITHM_COMMENT_PREFIX.length();\n+                  int end = trimmed.indexOf(COMMENT_SUFFIX, start);\n+                  if (end > -1) {\n+                     encryption = Encryption.valueOf(trimmed.substring(start, end).toUpperCase());\n+                  }\n+               } else {\n+                  if (!(trimmed.startsWith(COMMENT_PREFIX1) || trimmed.startsWith(COMMENT_PREFIX2))) {\n+                     String username = null;\n+                     StringBuilder builder = new StringBuilder();\n+\n+                     CodePointIterator it = CodePointIterator.ofString(trimmed);\n+                     while (it.hasNext()) {\n+                        int cp = it.next();\n+                        if (cp == '\\\\' && it.hasNext()) { // escape\n+                           //might be regular escape of regex like characters \\\\t \\\\! or unicode \\\\uxxxx\n+                           int marker = it.next();\n+                           if (marker != 'u') {\n+                              builder.appendCodePoint(marker);\n+                           } else {\n+                              StringBuilder hex = new StringBuilder();\n+                              try {\n+                                 hex.appendCodePoint(it.next());\n+                                 hex.appendCodePoint(it.next());\n+                                 hex.appendCodePoint(it.next());\n+                                 hex.appendCodePoint(it.next());\n+                                 builder.appendCodePoint((char) Integer.parseInt(hex.toString(), 16));\n+                              } catch (NoSuchElementException nsee) {\n+                                 throw Messages.MSG.invalidUnicodeSequence(hex.toString(), nsee);\n+                              }\n+                           }\n+                        } else if (username == null && (cp == '=' || cp == ':')) { // username-password delimiter\n+                           username = builder.toString().trim();\n+                           builder = new StringBuilder();\n+                        } else {\n+                           builder.appendCodePoint(cp);\n+                        }\n+                     }\n+                     if (username != null) { // end of line and delimiter was read\n+                        users.setProperty(username, builder.toString());\n+                     }\n+                  }\n+               }\n+            }\n+         } catch (IOException e) {\n+            throw MSG.userToolIOError(usersFile, e);\n+         }\n+      }\n+      if (Files.exists(groupsFile)) {\n+         try (Reader reader = Files.newBufferedReader(groupsFile)) {\n+            groups.load(reader);\n+         } catch (IOException e) {\n+            throw MSG.userToolIOError(groupsFile, e);\n+         }\n+      }\n+   }\n+\n+   private void store() {\n+      store(this.realm, this.encryption);\n+   }\n+\n+   private void store(String realm, Encryption encryption) {\n+      encryption = checkAlgorithm(encryption);\n+      if (realm == null) {\n+         realm = this.realm;\n+      }\n+      try (Writer writer = Files.newBufferedWriter(usersFile, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)) {\n+         users.store(writer, REALM_COMMENT_PREFIX + realm + COMMENT_SUFFIX + \"\\n\" + ALGORITHM_COMMENT_PREFIX + (encryption == Encryption.CLEAR ? \"clear\" : \"encrypted\") + COMMENT_SUFFIX);\n+      } catch (IOException e) {\n+         throw MSG.userToolIOError(usersFile, e);\n+      }\n+      try (Writer writer = Files.newBufferedWriter(groupsFile, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)) {\n+         groups.store(writer, null);\n+      } catch (IOException e) {\n+         throw MSG.userToolIOError(groupsFile, e);\n+      }\n+   }\n+\n+   private Encryption checkAlgorithm(Encryption encryption) {\n+      if (encryption == Encryption.DEFAULT) {\n+         // Not forcing anything, use what the current user.properties file specifies or the default\n+         return this.encryption;\n+      } else {\n+         if (this.encryption == Encryption.DEFAULT) {\n+            // We can override the default\n+            return encryption;\n+         } else if (this.encryption == encryption) {\n+            // Compatible\n+            return encryption;\n+         } else {\n+            throw MSG.userToolIncompatibleEncrypyion(encryption, this.encryption);\n+         }\n+      }\n+   }\n+\n+   public String checkRealm(String realm) {\n+      if (realm == null) {\n+         return this.realm == null ? DEFAULT_REALM_NAME : this.realm;\n+      } else {\n+         if (this.realm == null || this.realm.equals(realm)) {\n+            return realm;\n+         } else {\n+            throw MSG.userToolWrongRealm(realm, this.realm);\n+         }\n+      }\n+   }\n+\n+   public void createUser(String username, String password, String realm, Encryption encryption, List<String> userGroups, List<String> algorithms) {\n+      if (users.containsKey(username)) {\n+         throw MSG.userToolUserExists(username);\n+      }\n+      realm = checkRealm(realm);\n+      users.put(username, Encryption.CLEAR.equals(encryption) ? password : encryptPassword(username, realm, password, algorithms));\n+      groups.put(username, userGroups != null ? String.join(\",\", userGroups) : \"\");\n+      store(realm, encryption);\n+   }\n+\n+   public String describeUser(String username) {\n+      if (users.containsKey(username)) {\n+         String[] userGroups = groups.containsKey(username) ? groups.getProperty(username).trim().split(\"\\\\s*,\\\\s*\") : new String[]{};\n+         return MSG.userDescribe(username, realm, userGroups);\n+      } else {\n+         throw MSG.userToolNoSuchUser(username);\n+      }\n+   }\n+\n+   public void removeUser(String username) {\n+      users.remove(username);\n+      groups.remove(username);\n+      store();\n+   }\n+\n+   public void modifyUser(String username, String password, String realm, Encryption encryption, List<String> userGroups, List<String> algorithms) {\n+      if (!users.containsKey(username)) {\n+         throw MSG.userToolNoSuchUser(username);\n+      } else {\n+         realm = checkRealm(realm);\n+         if (password != null) { // change password\n+            users.put(username, Encryption.CLEAR.equals(encryption) ? password : encryptPassword(username, realm, password, algorithms));\n+         }\n+         if (userGroups != null) { // change groups\n+            groups.put(username, String.join(\",\", userGroups));\n+         }\n+         store(realm, encryption);\n+      }\n+   }\n+\n+   public void encryptAll(List<String> algorithms) {\n+      if (this.encryption == Encryption.CLEAR) {\n+         users.replaceAll((u, p) -> encryptPassword((String) u, realm, (String) p, algorithms));\n+         store(realm, encryption);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714cc4f74379295aace14074dbecfd21630d2174"}, "originalPosition": 295}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODAwNTE3OnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/user/UserTool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoyNDoyMFrOGXAwPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoyNDoyMFrOGXAwPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4Mjc4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private Encryption checkAlgorithm(Encryption encryption) {\n          \n          \n            \n               private Encryption checkEncryption(Encryption encryption) {", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426782783", "createdAt": "2020-05-18T17:24:20Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/user/UserTool.java", "diffHunk": "@@ -0,0 +1,370 @@\n+package org.infinispan.cli.user;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.cli.logging.Messages;\n+import org.wildfly.common.iteration.ByteIterator;\n+import org.wildfly.common.iteration.CodePointIterator;\n+import org.wildfly.security.password.Password;\n+import org.wildfly.security.password.PasswordFactory;\n+import org.wildfly.security.password.WildFlyElytronPasswordProvider;\n+import org.wildfly.security.password.interfaces.DigestPassword;\n+import org.wildfly.security.password.interfaces.ScramDigestPassword;\n+import org.wildfly.security.password.spec.BasicPasswordSpecEncoding;\n+import org.wildfly.security.password.spec.DigestPasswordAlgorithmSpec;\n+import org.wildfly.security.password.spec.EncryptablePasswordSpec;\n+import org.wildfly.security.password.spec.IteratedSaltedPasswordAlgorithmSpec;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 10.0\n+ **/\n+public class UserTool {\n+   public static final String DEFAULT_USERS_PROPERTIES_FILE = \"users.properties\";\n+   public static final String DEFAULT_GROUPS_PROPERTIES_FILE = \"groups.properties\";\n+   public static final String DEFAULT_REALM_NAME = \"default\";\n+   public static final String DEFAULT_SERVER_ROOT = \"server\";\n+\n+   private static final String COMMENT_PREFIX1 = \"#\";\n+   private static final String COMMENT_PREFIX2 = \"!\";\n+   private static final String REALM_COMMENT_PREFIX = \"$REALM_NAME=\";\n+   private static final String COMMENT_SUFFIX = \"$\";\n+   private static final String ALGORITHM_COMMENT_PREFIX = \"$ALGORITHM=\";\n+\n+\n+   public static final List<String> DEFAULT_ALGORITHMS = Arrays.asList(\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_1,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_256,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_384,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_512,\n+         DigestPassword.ALGORITHM_DIGEST_MD5,\n+         DigestPassword.ALGORITHM_DIGEST_SHA,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_256,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_384,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_512\n+   );\n+\n+   private final Path serverRoot;\n+   private final Path usersFile;\n+   private final Path groupsFile;\n+   private Properties users = new Properties();\n+   private Properties groups = new Properties();\n+   private String realm = null;\n+   private Encryption encryption = Encryption.DEFAULT;\n+\n+   public UserTool(String serverRoot) {\n+      this(serverRoot, DEFAULT_USERS_PROPERTIES_FILE, DEFAULT_GROUPS_PROPERTIES_FILE);\n+   }\n+\n+   public UserTool(String serverRoot, String usersFile, String groupsFile) {\n+      this(serverRoot != null ? Paths.get(serverRoot) : null,\n+            usersFile != null ? Paths.get(usersFile) : null,\n+            groupsFile != null ? Paths.get(groupsFile) : null);\n+   }\n+\n+   public UserTool(Path serverRoot, Path usersFile, Path groupsFile) {\n+      installSecurityProvider();\n+      if (serverRoot != null && serverRoot.isAbsolute()) {\n+         this.serverRoot = serverRoot;\n+      } else {\n+         String serverHome = System.getProperty(\"infinispan.server.home.path\");\n+         Path serverHomePath = serverHome == null ? Paths.get(\"\") : Paths.get(serverHome);\n+         if (serverRoot == null) {\n+            this.serverRoot = serverHomePath.resolve(\"server\");\n+         } else {\n+            this.serverRoot = serverHomePath.resolve(serverRoot);\n+         }\n+      }\n+\n+      if (usersFile == null) {\n+         this.usersFile = this.serverRoot.resolve(\"conf\").resolve(DEFAULT_USERS_PROPERTIES_FILE);\n+      } else if (usersFile.isAbsolute()) {\n+         this.usersFile = usersFile;\n+      } else {\n+         this.usersFile = this.serverRoot.resolve(\"conf\").resolve(usersFile);\n+      }\n+      if (groupsFile == null) {\n+         this.groupsFile = this.serverRoot.resolve(\"conf\").resolve(DEFAULT_GROUPS_PROPERTIES_FILE);\n+      } else if (groupsFile.isAbsolute()) {\n+         this.groupsFile = groupsFile;\n+      } else {\n+         this.groupsFile = this.serverRoot.resolve(\"conf\").resolve(groupsFile);\n+      }\n+      load();\n+   }\n+\n+   private void installSecurityProvider() {\n+      WildFlyElytronPasswordProvider instance = WildFlyElytronPasswordProvider.getInstance();\n+      if (java.security.Security.getProvider(instance.getName()) == null) {\n+         java.security.Security.insertProviderAt(instance, 1);\n+      }\n+   }\n+\n+\n+   public void reload() {\n+      this.realm = null;\n+      this.encryption = Encryption.DEFAULT;\n+      load();\n+   }\n+\n+   private void load() {\n+      if (Files.exists(usersFile)) {\n+         try (BufferedReader reader = Files.newBufferedReader(usersFile, StandardCharsets.UTF_8)) {\n+            String currentLine;\n+            while ((currentLine = reader.readLine()) != null) {\n+               final String trimmed = currentLine.trim();\n+               if (trimmed.startsWith(COMMENT_PREFIX1) && trimmed.contains(REALM_COMMENT_PREFIX)) {\n+                  // this is the line that contains the realm name.\n+                  int start = trimmed.indexOf(REALM_COMMENT_PREFIX) + REALM_COMMENT_PREFIX.length();\n+                  int end = trimmed.indexOf(COMMENT_SUFFIX, start);\n+                  if (end > -1) {\n+                     realm = trimmed.substring(start, end);\n+                  }\n+               } else if (trimmed.startsWith(COMMENT_PREFIX1) && trimmed.contains(ALGORITHM_COMMENT_PREFIX)) {\n+                  // this is the line that contains the algorithm name.\n+                  int start = trimmed.indexOf(ALGORITHM_COMMENT_PREFIX) + ALGORITHM_COMMENT_PREFIX.length();\n+                  int end = trimmed.indexOf(COMMENT_SUFFIX, start);\n+                  if (end > -1) {\n+                     encryption = Encryption.valueOf(trimmed.substring(start, end).toUpperCase());\n+                  }\n+               } else {\n+                  if (!(trimmed.startsWith(COMMENT_PREFIX1) || trimmed.startsWith(COMMENT_PREFIX2))) {\n+                     String username = null;\n+                     StringBuilder builder = new StringBuilder();\n+\n+                     CodePointIterator it = CodePointIterator.ofString(trimmed);\n+                     while (it.hasNext()) {\n+                        int cp = it.next();\n+                        if (cp == '\\\\' && it.hasNext()) { // escape\n+                           //might be regular escape of regex like characters \\\\t \\\\! or unicode \\\\uxxxx\n+                           int marker = it.next();\n+                           if (marker != 'u') {\n+                              builder.appendCodePoint(marker);\n+                           } else {\n+                              StringBuilder hex = new StringBuilder();\n+                              try {\n+                                 hex.appendCodePoint(it.next());\n+                                 hex.appendCodePoint(it.next());\n+                                 hex.appendCodePoint(it.next());\n+                                 hex.appendCodePoint(it.next());\n+                                 builder.appendCodePoint((char) Integer.parseInt(hex.toString(), 16));\n+                              } catch (NoSuchElementException nsee) {\n+                                 throw Messages.MSG.invalidUnicodeSequence(hex.toString(), nsee);\n+                              }\n+                           }\n+                        } else if (username == null && (cp == '=' || cp == ':')) { // username-password delimiter\n+                           username = builder.toString().trim();\n+                           builder = new StringBuilder();\n+                        } else {\n+                           builder.appendCodePoint(cp);\n+                        }\n+                     }\n+                     if (username != null) { // end of line and delimiter was read\n+                        users.setProperty(username, builder.toString());\n+                     }\n+                  }\n+               }\n+            }\n+         } catch (IOException e) {\n+            throw MSG.userToolIOError(usersFile, e);\n+         }\n+      }\n+      if (Files.exists(groupsFile)) {\n+         try (Reader reader = Files.newBufferedReader(groupsFile)) {\n+            groups.load(reader);\n+         } catch (IOException e) {\n+            throw MSG.userToolIOError(groupsFile, e);\n+         }\n+      }\n+   }\n+\n+   private void store() {\n+      store(this.realm, this.encryption);\n+   }\n+\n+   private void store(String realm, Encryption encryption) {\n+      encryption = checkAlgorithm(encryption);\n+      if (realm == null) {\n+         realm = this.realm;\n+      }\n+      try (Writer writer = Files.newBufferedWriter(usersFile, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)) {\n+         users.store(writer, REALM_COMMENT_PREFIX + realm + COMMENT_SUFFIX + \"\\n\" + ALGORITHM_COMMENT_PREFIX + (encryption == Encryption.CLEAR ? \"clear\" : \"encrypted\") + COMMENT_SUFFIX);\n+      } catch (IOException e) {\n+         throw MSG.userToolIOError(usersFile, e);\n+      }\n+      try (Writer writer = Files.newBufferedWriter(groupsFile, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)) {\n+         groups.store(writer, null);\n+      } catch (IOException e) {\n+         throw MSG.userToolIOError(groupsFile, e);\n+      }\n+   }\n+\n+   private Encryption checkAlgorithm(Encryption encryption) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714cc4f74379295aace14074dbecfd21630d2174"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODAyODUzOnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/user/UserTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzozMTowMlrOGXA--Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjo1MDowNlrOGXSJLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NjU1Mw==", "bodyText": "well, you could have paid the cost of reading the file twice instead of writing / copying the parser.", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426786553", "createdAt": "2020-05-18T17:31:02Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/user/UserTool.java", "diffHunk": "@@ -0,0 +1,370 @@\n+package org.infinispan.cli.user;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.cli.logging.Messages;\n+import org.wildfly.common.iteration.ByteIterator;\n+import org.wildfly.common.iteration.CodePointIterator;\n+import org.wildfly.security.password.Password;\n+import org.wildfly.security.password.PasswordFactory;\n+import org.wildfly.security.password.WildFlyElytronPasswordProvider;\n+import org.wildfly.security.password.interfaces.DigestPassword;\n+import org.wildfly.security.password.interfaces.ScramDigestPassword;\n+import org.wildfly.security.password.spec.BasicPasswordSpecEncoding;\n+import org.wildfly.security.password.spec.DigestPasswordAlgorithmSpec;\n+import org.wildfly.security.password.spec.EncryptablePasswordSpec;\n+import org.wildfly.security.password.spec.IteratedSaltedPasswordAlgorithmSpec;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 10.0\n+ **/\n+public class UserTool {\n+   public static final String DEFAULT_USERS_PROPERTIES_FILE = \"users.properties\";\n+   public static final String DEFAULT_GROUPS_PROPERTIES_FILE = \"groups.properties\";\n+   public static final String DEFAULT_REALM_NAME = \"default\";\n+   public static final String DEFAULT_SERVER_ROOT = \"server\";\n+\n+   private static final String COMMENT_PREFIX1 = \"#\";\n+   private static final String COMMENT_PREFIX2 = \"!\";\n+   private static final String REALM_COMMENT_PREFIX = \"$REALM_NAME=\";\n+   private static final String COMMENT_SUFFIX = \"$\";\n+   private static final String ALGORITHM_COMMENT_PREFIX = \"$ALGORITHM=\";\n+\n+\n+   public static final List<String> DEFAULT_ALGORITHMS = Arrays.asList(\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_1,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_256,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_384,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_512,\n+         DigestPassword.ALGORITHM_DIGEST_MD5,\n+         DigestPassword.ALGORITHM_DIGEST_SHA,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_256,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_384,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_512\n+   );\n+\n+   private final Path serverRoot;\n+   private final Path usersFile;\n+   private final Path groupsFile;\n+   private Properties users = new Properties();\n+   private Properties groups = new Properties();\n+   private String realm = null;\n+   private Encryption encryption = Encryption.DEFAULT;\n+\n+   public UserTool(String serverRoot) {\n+      this(serverRoot, DEFAULT_USERS_PROPERTIES_FILE, DEFAULT_GROUPS_PROPERTIES_FILE);\n+   }\n+\n+   public UserTool(String serverRoot, String usersFile, String groupsFile) {\n+      this(serverRoot != null ? Paths.get(serverRoot) : null,\n+            usersFile != null ? Paths.get(usersFile) : null,\n+            groupsFile != null ? Paths.get(groupsFile) : null);\n+   }\n+\n+   public UserTool(Path serverRoot, Path usersFile, Path groupsFile) {\n+      installSecurityProvider();\n+      if (serverRoot != null && serverRoot.isAbsolute()) {\n+         this.serverRoot = serverRoot;\n+      } else {\n+         String serverHome = System.getProperty(\"infinispan.server.home.path\");\n+         Path serverHomePath = serverHome == null ? Paths.get(\"\") : Paths.get(serverHome);\n+         if (serverRoot == null) {\n+            this.serverRoot = serverHomePath.resolve(\"server\");\n+         } else {\n+            this.serverRoot = serverHomePath.resolve(serverRoot);\n+         }\n+      }\n+\n+      if (usersFile == null) {\n+         this.usersFile = this.serverRoot.resolve(\"conf\").resolve(DEFAULT_USERS_PROPERTIES_FILE);\n+      } else if (usersFile.isAbsolute()) {\n+         this.usersFile = usersFile;\n+      } else {\n+         this.usersFile = this.serverRoot.resolve(\"conf\").resolve(usersFile);\n+      }\n+      if (groupsFile == null) {\n+         this.groupsFile = this.serverRoot.resolve(\"conf\").resolve(DEFAULT_GROUPS_PROPERTIES_FILE);\n+      } else if (groupsFile.isAbsolute()) {\n+         this.groupsFile = groupsFile;\n+      } else {\n+         this.groupsFile = this.serverRoot.resolve(\"conf\").resolve(groupsFile);\n+      }\n+      load();\n+   }\n+\n+   private void installSecurityProvider() {\n+      WildFlyElytronPasswordProvider instance = WildFlyElytronPasswordProvider.getInstance();\n+      if (java.security.Security.getProvider(instance.getName()) == null) {\n+         java.security.Security.insertProviderAt(instance, 1);\n+      }\n+   }\n+\n+\n+   public void reload() {\n+      this.realm = null;\n+      this.encryption = Encryption.DEFAULT;\n+      load();\n+   }\n+\n+   private void load() {\n+      if (Files.exists(usersFile)) {\n+         try (BufferedReader reader = Files.newBufferedReader(usersFile, StandardCharsets.UTF_8)) {\n+            String currentLine;\n+            while ((currentLine = reader.readLine()) != null) {\n+               final String trimmed = currentLine.trim();\n+               if (trimmed.startsWith(COMMENT_PREFIX1) && trimmed.contains(REALM_COMMENT_PREFIX)) {\n+                  // this is the line that contains the realm name.\n+                  int start = trimmed.indexOf(REALM_COMMENT_PREFIX) + REALM_COMMENT_PREFIX.length();\n+                  int end = trimmed.indexOf(COMMENT_SUFFIX, start);\n+                  if (end > -1) {\n+                     realm = trimmed.substring(start, end);\n+                  }\n+               } else if (trimmed.startsWith(COMMENT_PREFIX1) && trimmed.contains(ALGORITHM_COMMENT_PREFIX)) {\n+                  // this is the line that contains the algorithm name.\n+                  int start = trimmed.indexOf(ALGORITHM_COMMENT_PREFIX) + ALGORITHM_COMMENT_PREFIX.length();\n+                  int end = trimmed.indexOf(COMMENT_SUFFIX, start);\n+                  if (end > -1) {\n+                     encryption = Encryption.valueOf(trimmed.substring(start, end).toUpperCase());\n+                  }\n+               } else {\n+                  if (!(trimmed.startsWith(COMMENT_PREFIX1) || trimmed.startsWith(COMMENT_PREFIX2))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714cc4f74379295aace14074dbecfd21630d2174"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2NzY5Mg==", "bodyText": "You mean one pass to find the comments and then use the standard properties loader ? True, but that code is what the actual realm loader uses, so it's tested and I feel safer :)", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r427067692", "createdAt": "2020-05-19T06:50:06Z", "author": {"login": "tristantarrant"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/user/UserTool.java", "diffHunk": "@@ -0,0 +1,370 @@\n+package org.infinispan.cli.user;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidKeySpecException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.cli.logging.Messages;\n+import org.wildfly.common.iteration.ByteIterator;\n+import org.wildfly.common.iteration.CodePointIterator;\n+import org.wildfly.security.password.Password;\n+import org.wildfly.security.password.PasswordFactory;\n+import org.wildfly.security.password.WildFlyElytronPasswordProvider;\n+import org.wildfly.security.password.interfaces.DigestPassword;\n+import org.wildfly.security.password.interfaces.ScramDigestPassword;\n+import org.wildfly.security.password.spec.BasicPasswordSpecEncoding;\n+import org.wildfly.security.password.spec.DigestPasswordAlgorithmSpec;\n+import org.wildfly.security.password.spec.EncryptablePasswordSpec;\n+import org.wildfly.security.password.spec.IteratedSaltedPasswordAlgorithmSpec;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 10.0\n+ **/\n+public class UserTool {\n+   public static final String DEFAULT_USERS_PROPERTIES_FILE = \"users.properties\";\n+   public static final String DEFAULT_GROUPS_PROPERTIES_FILE = \"groups.properties\";\n+   public static final String DEFAULT_REALM_NAME = \"default\";\n+   public static final String DEFAULT_SERVER_ROOT = \"server\";\n+\n+   private static final String COMMENT_PREFIX1 = \"#\";\n+   private static final String COMMENT_PREFIX2 = \"!\";\n+   private static final String REALM_COMMENT_PREFIX = \"$REALM_NAME=\";\n+   private static final String COMMENT_SUFFIX = \"$\";\n+   private static final String ALGORITHM_COMMENT_PREFIX = \"$ALGORITHM=\";\n+\n+\n+   public static final List<String> DEFAULT_ALGORITHMS = Arrays.asList(\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_1,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_256,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_384,\n+         ScramDigestPassword.ALGORITHM_SCRAM_SHA_512,\n+         DigestPassword.ALGORITHM_DIGEST_MD5,\n+         DigestPassword.ALGORITHM_DIGEST_SHA,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_256,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_384,\n+         DigestPassword.ALGORITHM_DIGEST_SHA_512\n+   );\n+\n+   private final Path serverRoot;\n+   private final Path usersFile;\n+   private final Path groupsFile;\n+   private Properties users = new Properties();\n+   private Properties groups = new Properties();\n+   private String realm = null;\n+   private Encryption encryption = Encryption.DEFAULT;\n+\n+   public UserTool(String serverRoot) {\n+      this(serverRoot, DEFAULT_USERS_PROPERTIES_FILE, DEFAULT_GROUPS_PROPERTIES_FILE);\n+   }\n+\n+   public UserTool(String serverRoot, String usersFile, String groupsFile) {\n+      this(serverRoot != null ? Paths.get(serverRoot) : null,\n+            usersFile != null ? Paths.get(usersFile) : null,\n+            groupsFile != null ? Paths.get(groupsFile) : null);\n+   }\n+\n+   public UserTool(Path serverRoot, Path usersFile, Path groupsFile) {\n+      installSecurityProvider();\n+      if (serverRoot != null && serverRoot.isAbsolute()) {\n+         this.serverRoot = serverRoot;\n+      } else {\n+         String serverHome = System.getProperty(\"infinispan.server.home.path\");\n+         Path serverHomePath = serverHome == null ? Paths.get(\"\") : Paths.get(serverHome);\n+         if (serverRoot == null) {\n+            this.serverRoot = serverHomePath.resolve(\"server\");\n+         } else {\n+            this.serverRoot = serverHomePath.resolve(serverRoot);\n+         }\n+      }\n+\n+      if (usersFile == null) {\n+         this.usersFile = this.serverRoot.resolve(\"conf\").resolve(DEFAULT_USERS_PROPERTIES_FILE);\n+      } else if (usersFile.isAbsolute()) {\n+         this.usersFile = usersFile;\n+      } else {\n+         this.usersFile = this.serverRoot.resolve(\"conf\").resolve(usersFile);\n+      }\n+      if (groupsFile == null) {\n+         this.groupsFile = this.serverRoot.resolve(\"conf\").resolve(DEFAULT_GROUPS_PROPERTIES_FILE);\n+      } else if (groupsFile.isAbsolute()) {\n+         this.groupsFile = groupsFile;\n+      } else {\n+         this.groupsFile = this.serverRoot.resolve(\"conf\").resolve(groupsFile);\n+      }\n+      load();\n+   }\n+\n+   private void installSecurityProvider() {\n+      WildFlyElytronPasswordProvider instance = WildFlyElytronPasswordProvider.getInstance();\n+      if (java.security.Security.getProvider(instance.getName()) == null) {\n+         java.security.Security.insertProviderAt(instance, 1);\n+      }\n+   }\n+\n+\n+   public void reload() {\n+      this.realm = null;\n+      this.encryption = Encryption.DEFAULT;\n+      load();\n+   }\n+\n+   private void load() {\n+      if (Files.exists(usersFile)) {\n+         try (BufferedReader reader = Files.newBufferedReader(usersFile, StandardCharsets.UTF_8)) {\n+            String currentLine;\n+            while ((currentLine = reader.readLine()) != null) {\n+               final String trimmed = currentLine.trim();\n+               if (trimmed.startsWith(COMMENT_PREFIX1) && trimmed.contains(REALM_COMMENT_PREFIX)) {\n+                  // this is the line that contains the realm name.\n+                  int start = trimmed.indexOf(REALM_COMMENT_PREFIX) + REALM_COMMENT_PREFIX.length();\n+                  int end = trimmed.indexOf(COMMENT_SUFFIX, start);\n+                  if (end > -1) {\n+                     realm = trimmed.substring(start, end);\n+                  }\n+               } else if (trimmed.startsWith(COMMENT_PREFIX1) && trimmed.contains(ALGORITHM_COMMENT_PREFIX)) {\n+                  // this is the line that contains the algorithm name.\n+                  int start = trimmed.indexOf(ALGORITHM_COMMENT_PREFIX) + ALGORITHM_COMMENT_PREFIX.length();\n+                  int end = trimmed.indexOf(COMMENT_SUFFIX, start);\n+                  if (end > -1) {\n+                     encryption = Encryption.valueOf(trimmed.substring(start, end).toUpperCase());\n+                  }\n+               } else {\n+                  if (!(trimmed.startsWith(COMMENT_PREFIX1) || trimmed.startsWith(COMMENT_PREFIX2))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NjU1Mw=="}, "originalCommit": {"oid": "714cc4f74379295aace14074dbecfd21630d2174"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODA1MzU4OnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/CLI.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzozODo0MVrOGXBOsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjo1Mjo0NVrOGXSNpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5MDU3OA==", "bodyText": "suggestion: add options to set the user/password so users could do:\n./bin/cli.sh -c - -u <user> -p <pass> [-f commands.cli]\nwdyt?", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426790578", "createdAt": "2020-05-18T17:38:41Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/CLI.java", "diffHunk": "@@ -0,0 +1,257 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import org.aesh.AeshRuntimeRunner;\n+import org.aesh.command.AeshCommandRuntimeBuilder;\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.impl.completer.FileOptionCompleter;\n+import org.aesh.command.impl.registry.AeshCommandRegistryBuilder;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.registry.CommandRegistry;\n+import org.aesh.command.registry.CommandRegistryException;\n+import org.aesh.command.settings.SettingsBuilder;\n+import org.aesh.command.shell.Shell;\n+import org.aesh.io.Resource;\n+import org.aesh.readline.ReadlineConsole;\n+import org.infinispan.cli.Context;\n+import org.infinispan.cli.activators.ContextAwareCommandActivatorProvider;\n+import org.infinispan.cli.completers.ContextAwareCompleterInvocationProvider;\n+import org.infinispan.cli.impl.AeshDelegatingShell;\n+import org.infinispan.cli.impl.CliCommandNotFoundHandler;\n+import org.infinispan.cli.impl.CliRuntimeRunner;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocationProvider;\n+import org.infinispan.cli.impl.ContextAwareQuitHandler;\n+import org.infinispan.cli.impl.ContextImpl;\n+import org.infinispan.cli.impl.DefaultShell;\n+import org.infinispan.cli.impl.SSLContextSettings;\n+import org.infinispan.cli.util.ZeroSecurityHostnameVerifier;\n+import org.infinispan.cli.util.ZeroSecurityTrustManager;\n+import org.infinispan.commons.util.ServiceFinder;\n+import org.wildfly.security.keystore.KeyStoreUtil;\n+import org.wildfly.security.provider.util.ProviderUtil;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+@GroupCommandDefinition(\n+      name = CLI.CMD,\n+      description = \"\",\n+      groupCommands = {\n+            Add.class,\n+            Cache.class,\n+            Cas.class,\n+            Cd.class,\n+            Clear.class,\n+            ClearCache.class,\n+            Connect.class,\n+            Container.class,\n+            Counter.class,\n+            Create.class,\n+            Describe.class,\n+            Disconnect.class,\n+            Drop.class,\n+            Echo.class,\n+            Encoding.class,\n+            Get.class,\n+            Ls.class,\n+            Patch.class,\n+            Put.class,\n+            Query.class,\n+            Remove.class,\n+            Replace.class,\n+            Reset.class,\n+            Run.class,\n+            Schema.class,\n+            Shutdown.class,\n+            Site.class,\n+            User.class,\n+            Version.class\n+      })\n+public class CLI extends CliCommand {\n+   public static final String CMD = \"cli\";\n+\n+   private Context context;\n+\n+   @Option(completer = FileOptionCompleter.class, shortName = 't', name = \"truststore\", description = \"A truststore to use when connecting to SSL/TLS-enabled servers\")\n+   Resource truststore;\n+\n+   @Option(shortName = 's', name = \"truststore-password\", description = \"The password for the truststore\")\n+   String truststorePassword;\n+\n+   @Option(shortName = 'v', hasValue = false, description = \"Shows version information\")\n+   boolean version;\n+\n+   @Option(hasValue = false, description = \"Whether to trust all certificates\", name = \"trustall\")\n+   boolean trustAll;\n+\n+   @Option(completer = FileOptionCompleter.class, shortName = 'f', description = \"File for batch mode\")\n+   Resource file;\n+\n+   @Option(shortName = 'c', description = \"A connection URL. Use '-' to connect to http://localhost:11222\")\n+   String connect;\n+\n+   @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      if (help) {\n+         invocation.println(invocation.getHelpInfo());\n+         return CommandResult.SUCCESS;\n+      }\n+      if (version) {\n+         invocation.printf(\"%s CLI %s\\n\", org.infinispan.commons.util.Version.getBrandName(), org.infinispan.commons.util.Version.getBrandVersion());\n+         invocation.printf(\"Copyright (C) Red Hat Inc. and/or its affiliates and other contributors\\n\");\n+         invocation.printf(\"License Apache License, v. 2.0. http://www.apache.org/licenses/LICENSE-2.0\\n\");\n+         return CommandResult.SUCCESS;\n+      }\n+\n+      context = invocation.getContext();\n+\n+      if (truststore != null) {\n+         try (FileInputStream f = new FileInputStream(truststore.getAbsolutePath())) {\n+            KeyStore keyStore = KeyStoreUtil.loadKeyStore(ProviderUtil.INSTALLED_PROVIDERS, null, f, truststore.getAbsolutePath(), truststorePassword.toCharArray());\n+            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+            trustManagerFactory.init(keyStore);\n+            SSLContextSettings sslContext = SSLContextSettings.getInstance(\"TLS\", null, trustManagerFactory.getTrustManagers(), null, null);\n+            context.setSslContext(sslContext);\n+         } catch (Exception e) {\n+            invocation.getShell().writeln(MSG.keyStoreError(truststore.getAbsolutePath(), e));\n+            return CommandResult.FAILURE;\n+         }\n+      } else if (trustAll) {\n+         SSLContextSettings sslContext = SSLContextSettings.getInstance(\"TLS\", null, new TrustManager[]{new ZeroSecurityTrustManager()}, null, new ZeroSecurityHostnameVerifier());\n+         context.setSslContext(sslContext);\n+      }\n+\n+      if (connect != null) {\n+         context.connect(null, connect);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714cc4f74379295aace14074dbecfd21630d2174"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2ODgzNw==", "bodyText": "Yet one more way to do cli.sh -c http://user:pass@localhost:11222 ?", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r427068837", "createdAt": "2020-05-19T06:52:45Z", "author": {"login": "tristantarrant"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/CLI.java", "diffHunk": "@@ -0,0 +1,257 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import org.aesh.AeshRuntimeRunner;\n+import org.aesh.command.AeshCommandRuntimeBuilder;\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.impl.completer.FileOptionCompleter;\n+import org.aesh.command.impl.registry.AeshCommandRegistryBuilder;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.registry.CommandRegistry;\n+import org.aesh.command.registry.CommandRegistryException;\n+import org.aesh.command.settings.SettingsBuilder;\n+import org.aesh.command.shell.Shell;\n+import org.aesh.io.Resource;\n+import org.aesh.readline.ReadlineConsole;\n+import org.infinispan.cli.Context;\n+import org.infinispan.cli.activators.ContextAwareCommandActivatorProvider;\n+import org.infinispan.cli.completers.ContextAwareCompleterInvocationProvider;\n+import org.infinispan.cli.impl.AeshDelegatingShell;\n+import org.infinispan.cli.impl.CliCommandNotFoundHandler;\n+import org.infinispan.cli.impl.CliRuntimeRunner;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocationProvider;\n+import org.infinispan.cli.impl.ContextAwareQuitHandler;\n+import org.infinispan.cli.impl.ContextImpl;\n+import org.infinispan.cli.impl.DefaultShell;\n+import org.infinispan.cli.impl.SSLContextSettings;\n+import org.infinispan.cli.util.ZeroSecurityHostnameVerifier;\n+import org.infinispan.cli.util.ZeroSecurityTrustManager;\n+import org.infinispan.commons.util.ServiceFinder;\n+import org.wildfly.security.keystore.KeyStoreUtil;\n+import org.wildfly.security.provider.util.ProviderUtil;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+@GroupCommandDefinition(\n+      name = CLI.CMD,\n+      description = \"\",\n+      groupCommands = {\n+            Add.class,\n+            Cache.class,\n+            Cas.class,\n+            Cd.class,\n+            Clear.class,\n+            ClearCache.class,\n+            Connect.class,\n+            Container.class,\n+            Counter.class,\n+            Create.class,\n+            Describe.class,\n+            Disconnect.class,\n+            Drop.class,\n+            Echo.class,\n+            Encoding.class,\n+            Get.class,\n+            Ls.class,\n+            Patch.class,\n+            Put.class,\n+            Query.class,\n+            Remove.class,\n+            Replace.class,\n+            Reset.class,\n+            Run.class,\n+            Schema.class,\n+            Shutdown.class,\n+            Site.class,\n+            User.class,\n+            Version.class\n+      })\n+public class CLI extends CliCommand {\n+   public static final String CMD = \"cli\";\n+\n+   private Context context;\n+\n+   @Option(completer = FileOptionCompleter.class, shortName = 't', name = \"truststore\", description = \"A truststore to use when connecting to SSL/TLS-enabled servers\")\n+   Resource truststore;\n+\n+   @Option(shortName = 's', name = \"truststore-password\", description = \"The password for the truststore\")\n+   String truststorePassword;\n+\n+   @Option(shortName = 'v', hasValue = false, description = \"Shows version information\")\n+   boolean version;\n+\n+   @Option(hasValue = false, description = \"Whether to trust all certificates\", name = \"trustall\")\n+   boolean trustAll;\n+\n+   @Option(completer = FileOptionCompleter.class, shortName = 'f', description = \"File for batch mode\")\n+   Resource file;\n+\n+   @Option(shortName = 'c', description = \"A connection URL. Use '-' to connect to http://localhost:11222\")\n+   String connect;\n+\n+   @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      if (help) {\n+         invocation.println(invocation.getHelpInfo());\n+         return CommandResult.SUCCESS;\n+      }\n+      if (version) {\n+         invocation.printf(\"%s CLI %s\\n\", org.infinispan.commons.util.Version.getBrandName(), org.infinispan.commons.util.Version.getBrandVersion());\n+         invocation.printf(\"Copyright (C) Red Hat Inc. and/or its affiliates and other contributors\\n\");\n+         invocation.printf(\"License Apache License, v. 2.0. http://www.apache.org/licenses/LICENSE-2.0\\n\");\n+         return CommandResult.SUCCESS;\n+      }\n+\n+      context = invocation.getContext();\n+\n+      if (truststore != null) {\n+         try (FileInputStream f = new FileInputStream(truststore.getAbsolutePath())) {\n+            KeyStore keyStore = KeyStoreUtil.loadKeyStore(ProviderUtil.INSTALLED_PROVIDERS, null, f, truststore.getAbsolutePath(), truststorePassword.toCharArray());\n+            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+            trustManagerFactory.init(keyStore);\n+            SSLContextSettings sslContext = SSLContextSettings.getInstance(\"TLS\", null, trustManagerFactory.getTrustManagers(), null, null);\n+            context.setSslContext(sslContext);\n+         } catch (Exception e) {\n+            invocation.getShell().writeln(MSG.keyStoreError(truststore.getAbsolutePath(), e));\n+            return CommandResult.FAILURE;\n+         }\n+      } else if (trustAll) {\n+         SSLContextSettings sslContext = SSLContextSettings.getInstance(\"TLS\", null, new TrustManager[]{new ZeroSecurityTrustManager()}, null, new ZeroSecurityHostnameVerifier());\n+         context.setSslContext(sslContext);\n+      }\n+\n+      if (connect != null) {\n+         context.connect(null, connect);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5MDU3OA=="}, "originalCommit": {"oid": "714cc4f74379295aace14074dbecfd21630d2174"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODEwNTcwOnYy", "diffSide": "RIGHT", "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo1NDoyMVrOGXBvUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjo1MzoyM1rOGXSOzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5ODkyOA==", "bodyText": "probably a limitation of aesh, but you can't use user groups -g <group> <user>\n[disconnected]> user groups -g abc pedro\nThe username for the user is required for this command.\n[disconnected]> user groups pedro -g abc", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r426798928", "createdAt": "2020-05-18T17:54:21Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "diffHunk": "@@ -0,0 +1,350 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.completers.EncryptionAlgorithmCompleter;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.user.UserTool;\n+import org.kohsuke.MetaInfServices;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = User.CMD, description = \"User operations\", groupCommands = {User.Create.class, User.Describe.class, User.Remove.class, User.Password.class, User.Groups.class, User.Ls.class, User.Encrypt.class})\n+public class User extends CliCommand {\n+\n+   public static final String CMD = \"user\";\n+\n+   @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   static String getPasswordInteractively(ContextAwareCommandInvocation invocation) throws InterruptedException {\n+      String password = null;\n+      while (password == null || password.isEmpty()) {\n+         password = invocation.getShell().readLine(new Prompt(MSG.userToolPassword(), '*'));\n+      }\n+      String confirm = null;\n+      while (confirm == null || !confirm.equals(password)) {\n+         confirm = invocation.getShell().readLine(new Prompt(MSG.userToolPasswordConfirm(), '*'));\n+      }\n+      return password;\n+   }\n+\n+   @CommandDefinition(name = Create.CMD, description = \"Creates a user\", aliases = \"add\")\n+   public static class Create extends CliCommand {\n+      public static final String CMD = \"create\";\n+\n+      @Argument(description = \"The username for the user\")\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a', completer = EncryptionAlgorithmCompleter.class)\n+      List<String> algorithms;\n+\n+      @OptionList(description = \"The groups the user should belong to\", shortName = 'g')\n+      List<String> groups;\n+\n+      @Option(description = \"Whether the password should be stored in plain text (not recommended)\", name = \"plain-text\", hasValue = false)\n+      boolean plainText;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName = 's')\n+      String serverRoot;\n+\n+\n+      @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         try {\n+            while (username == null || username.isEmpty()) {\n+               username = invocation.getShell().readLine(MSG.userToolUsername());\n+            }\n+         } catch (InterruptedException e) {\n+            return CommandResult.FAILURE;\n+         }\n+\n+         if (password == null) { // Get the password interactively\n+            try {\n+               password = getPasswordInteractively(invocation);\n+            } catch (InterruptedException e) {\n+               return CommandResult.FAILURE;\n+            }\n+         }\n+         userTool.createUser(username, password, realm, UserTool.Encryption.valueOf(plainText), groups, algorithms);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Describe.CMD, description = \"Describes a user\")\n+   public static class Describe extends CliCommand {\n+      public static final String CMD = \"describe\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName = 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         invocation.getShell().writeln(userTool.describeUser(username));\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Remove.CMD, description = \"Removes a user\", aliases = \"rm\")\n+   public static class Remove extends CliCommand {\n+      public static final String CMD = \"remove\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName = 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         userTool.removeUser(username);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Password.CMD, description = \"Changes a user's password\")\n+   public static class Password extends CliCommand {\n+      public static final String CMD = \"password\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a', completer = EncryptionAlgorithmCompleter.class)\n+      List<String> algorithms;\n+\n+      @Option(description = \"Whether the password should be stored in plain text\", name = \"plain-text\", hasValue = false)\n+      boolean plainText;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName = 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+         if (password == null) { // Get the password interactively\n+            try {\n+               password = getPasswordInteractively(invocation);\n+            } catch (InterruptedException e) {\n+               return CommandResult.FAILURE;\n+            }\n+         }\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         userTool.modifyUser(username, password, realm, UserTool.Encryption.valueOf(plainText), null, algorithms);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Groups.CMD, description = \"Sets a user's groups\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714cc4f74379295aace14074dbecfd21630d2174"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2OTEzNA==", "bodyText": "That looks like a bug", "url": "https://github.com/infinispan/infinispan/pull/8295#discussion_r427069134", "createdAt": "2020-05-19T06:53:23Z", "author": {"login": "tristantarrant"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/User.java", "diffHunk": "@@ -0,0 +1,350 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.completers.EncryptionAlgorithmCompleter;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.infinispan.cli.user.UserTool;\n+import org.kohsuke.MetaInfServices;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = User.CMD, description = \"User operations\", groupCommands = {User.Create.class, User.Describe.class, User.Remove.class, User.Password.class, User.Groups.class, User.Ls.class, User.Encrypt.class})\n+public class User extends CliCommand {\n+\n+   public static final String CMD = \"user\";\n+\n+   @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   static String getPasswordInteractively(ContextAwareCommandInvocation invocation) throws InterruptedException {\n+      String password = null;\n+      while (password == null || password.isEmpty()) {\n+         password = invocation.getShell().readLine(new Prompt(MSG.userToolPassword(), '*'));\n+      }\n+      String confirm = null;\n+      while (confirm == null || !confirm.equals(password)) {\n+         confirm = invocation.getShell().readLine(new Prompt(MSG.userToolPasswordConfirm(), '*'));\n+      }\n+      return password;\n+   }\n+\n+   @CommandDefinition(name = Create.CMD, description = \"Creates a user\", aliases = \"add\")\n+   public static class Create extends CliCommand {\n+      public static final String CMD = \"create\";\n+\n+      @Argument(description = \"The username for the user\")\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a', completer = EncryptionAlgorithmCompleter.class)\n+      List<String> algorithms;\n+\n+      @OptionList(description = \"The groups the user should belong to\", shortName = 'g')\n+      List<String> groups;\n+\n+      @Option(description = \"Whether the password should be stored in plain text (not recommended)\", name = \"plain-text\", hasValue = false)\n+      boolean plainText;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName = 's')\n+      String serverRoot;\n+\n+\n+      @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         try {\n+            while (username == null || username.isEmpty()) {\n+               username = invocation.getShell().readLine(MSG.userToolUsername());\n+            }\n+         } catch (InterruptedException e) {\n+            return CommandResult.FAILURE;\n+         }\n+\n+         if (password == null) { // Get the password interactively\n+            try {\n+               password = getPasswordInteractively(invocation);\n+            } catch (InterruptedException e) {\n+               return CommandResult.FAILURE;\n+            }\n+         }\n+         userTool.createUser(username, password, realm, UserTool.Encryption.valueOf(plainText), groups, algorithms);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Describe.CMD, description = \"Describes a user\")\n+   public static class Describe extends CliCommand {\n+      public static final String CMD = \"describe\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName = 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         invocation.getShell().writeln(userTool.describeUser(username));\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Remove.CMD, description = \"Removes a user\", aliases = \"rm\")\n+   public static class Remove extends CliCommand {\n+      public static final String CMD = \"remove\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName = 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         userTool.removeUser(username);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Password.CMD, description = \"Changes a user's password\")\n+   public static class Password extends CliCommand {\n+      public static final String CMD = \"password\";\n+\n+      @Argument(description = \"The username for the user\", required = true)\n+      String username;\n+\n+      @Option(description = \"The password for the user\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The realm \", defaultValue = UserTool.DEFAULT_REALM_NAME, shortName = 'r')\n+      String realm;\n+\n+      @OptionList(description = \"The algorithms used to encrypt the password\", shortName = 'a', completer = EncryptionAlgorithmCompleter.class)\n+      List<String> algorithms;\n+\n+      @Option(description = \"Whether the password should be stored in plain text\", name = \"plain-text\", hasValue = false)\n+      boolean plainText;\n+\n+      @Option(description = \"The path of the users.properties file\", name = \"users-file\", shortName = 'f')\n+      String usersFile;\n+\n+      @Option(description = \"The path of the groups.properties file\", name = \"groups-file\", shortName = 'w')\n+      String groupsFile;\n+\n+      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName = 's')\n+      String serverRoot;\n+\n+      @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+         if (password == null) { // Get the password interactively\n+            try {\n+               password = getPasswordInteractively(invocation);\n+            } catch (InterruptedException e) {\n+               return CommandResult.FAILURE;\n+            }\n+         }\n+         UserTool userTool = new UserTool(serverRoot, usersFile, groupsFile);\n+         userTool.modifyUser(username, password, realm, UserTool.Encryption.valueOf(plainText), null, algorithms);\n+         return CommandResult.SUCCESS;\n+      }\n+   }\n+\n+   @CommandDefinition(name = Groups.CMD, description = \"Sets a user's groups\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5ODkyOA=="}, "originalCommit": {"oid": "714cc4f74379295aace14074dbecfd21630d2174"}, "originalPosition": 240}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4184, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}