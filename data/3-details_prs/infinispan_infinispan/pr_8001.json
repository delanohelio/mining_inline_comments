{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MjcxMjc2", "number": 8001, "title": "ISPN-10539 Server loggers management", "bodyText": "https://issues.redhat.com/browse/ISPN-10539\nhttps://issues.redhat.com/browse/ISPN-11238\nhttps://issues.redhat.com/browse/ISPN-11477", "createdAt": "2020-03-05T13:19:23Z", "url": "https://github.com/infinispan/infinispan/pull/8001", "merged": true, "mergeCommit": {"oid": "11a211b6310e872b7fd9d331c2efa5a7f8664350"}, "closed": true, "closedAt": "2020-03-19T16:47:47Z", "author": {"login": "tristantarrant"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKrcS-gBqjMxMDExNjU5Njg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPgp__gFqTM3ODQ4ODI3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1b92d5ea9956691d530f413b5811436f26a7fd3", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/c1b92d5ea9956691d530f413b5811436f26a7fd3", "committedDate": "2020-03-05T13:19:10Z", "message": "ISPN-10539 Server loggers"}, "afterCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/b4bbf5a3966fbc90a13b82880e250e6bba36335a", "committedDate": "2020-03-05T13:21:38Z", "message": "ISPN-11238 Server Logging management via CLI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NjE2ODI1", "url": "https://github.com/infinispan/infinispan/pull/8001#pullrequestreview-369616825", "createdAt": "2020-03-05T14:33:23Z", "commit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDozMzoyM1rOFyV0qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo0MjowNFrOFyYqeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMDY2NQ==", "bodyText": "unused?", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388330665", "createdAt": "2020-03-05T14:33:23Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/commands/CommandInputLine.java", "diffHunk": "@@ -80,6 +80,9 @@ public long longOption(String option) {\n    public boolean boolOption(String option) {\n       return (Boolean) options.get(option);\n    }\n+   public <T> T optionAs(String option) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzNjczNQ==", "bodyText": "it isn't clear for me how to set multiple appenders.", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388336735", "createdAt": "2020-03-05T14:42:48Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/resources/help/logging.adoc", "diffHunk": "@@ -0,0 +1,38 @@\n+LOGGING(1)\n+=========\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+logging - inspects and manipulates the ${infinispan.brand.name} server runtime logging configuration.\n+\n+\n+SYNOPSIS\n+--------\n+*logging list-loggers*\n+\n+*logging list-appenders*\n+\n+*logging set ['OPTIONS'] `LOGGER_NAME`*\n+\n+*logging remove `LOGGER_NAME`*\n+\n+\n+LOGGING SET OPTIONS\n+--------------------\n+*-l, --level*='OFF|TRACE|DEBUG|INFO|WARN|ERROR|ALL'::\n+Specifies the logging level for the specific logger.\n+\n+*-a, --appender*='APPENDER'::\n+Specifies one or more appenders to set on the specific logger.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzOTIwMg==", "bodyText": "The formatting isn't working properly\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *logging set ['OPTIONS'] `LOGGER_NAME`*\n          \n          \n            \n            *logging set* ['OPTIONS'] `LOGGER_NAME`", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388339202", "createdAt": "2020-03-05T14:46:34Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/resources/help/logging.adoc", "diffHunk": "@@ -0,0 +1,38 @@\n+LOGGING(1)\n+=========\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+logging - inspects and manipulates the ${infinispan.brand.name} server runtime logging configuration.\n+\n+\n+SYNOPSIS\n+--------\n+*logging list-loggers*\n+\n+*logging list-appenders*\n+\n+*logging set ['OPTIONS'] `LOGGER_NAME`*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzOTMwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *logging remove `LOGGER_NAME`*\n          \n          \n            \n            *logging remove* `LOGGER_NAME`", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388339301", "createdAt": "2020-03-05T14:46:43Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/resources/help/logging.adoc", "diffHunk": "@@ -0,0 +1,38 @@\n+LOGGING(1)\n+=========\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+logging - inspects and manipulates the ${infinispan.brand.name} server runtime logging configuration.\n+\n+\n+SYNOPSIS\n+--------\n+*logging list-loggers*\n+\n+*logging list-appenders*\n+\n+*logging set ['OPTIONS'] `LOGGER_NAME`*\n+\n+*logging remove `LOGGER_NAME`*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzOTgzMw==", "bodyText": "The options aren't shown because of an extra -\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            LOGGING SET OPTIONS\n          \n          \n            \n            --------------------\n          \n          \n            \n            LOGGING SET OPTIONS\n          \n          \n            \n            -------------------", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388339833", "createdAt": "2020-03-05T14:47:35Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/resources/help/logging.adoc", "diffHunk": "@@ -0,0 +1,38 @@\n+LOGGING(1)\n+=========\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+logging - inspects and manipulates the ${infinispan.brand.name} server runtime logging configuration.\n+\n+\n+SYNOPSIS\n+--------\n+*logging list-loggers*\n+\n+*logging list-appenders*\n+\n+*logging set ['OPTIONS'] `LOGGER_NAME`*\n+\n+*logging remove `LOGGER_NAME`*\n+\n+\n+LOGGING SET OPTIONS\n+--------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0MDg1Mg==", "bodyText": "[pedro-desktop-5962@cluster//containers/default]> logging set --level=DEBUG --appenders=File org.infinispan\nError: appender does not exist\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `logging set --level=DEBUG --appenders=File org.infinispan` +\n          \n          \n            \n            `logging set --level=DEBUG --appenders=FILE org.infinispan` +", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388340852", "createdAt": "2020-03-05T14:49:07Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/resources/help/logging.adoc", "diffHunk": "@@ -0,0 +1,38 @@\n+LOGGING(1)\n+=========\n+:doctype: manpage\n+\n+\n+NAME\n+----\n+logging - inspects and manipulates the ${infinispan.brand.name} server runtime logging configuration.\n+\n+\n+SYNOPSIS\n+--------\n+*logging list-loggers*\n+\n+*logging list-appenders*\n+\n+*logging set ['OPTIONS'] `LOGGER_NAME`*\n+\n+*logging remove `LOGGER_NAME`*\n+\n+\n+LOGGING SET OPTIONS\n+--------------------\n+*-l, --level*='OFF|TRACE|DEBUG|INFO|WARN|ERROR|ALL'::\n+Specifies the logging level for the specific logger.\n+\n+*-a, --appender*='APPENDER'::\n+Specifies one or more appenders to set on the specific logger.\n+\n+\n+EXAMPLES\n+--------\n+`logging list-loggers` +\n+Lists all available loggers\n+\n+`logging set --level=DEBUG --appenders=File org.infinispan` +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1MzI0Nw==", "bodyText": "why?", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388353247", "createdAt": "2020-03-05T15:06:43Z", "author": {"login": "pruivo"}, "path": "cli/cli-client/src/main/java/org/infinispan/cli/connection/rest/RestConnection.java", "diffHunk": "@@ -361,7 +361,7 @@ public String execute(List<CommandInputLine> commands) throws IOException {\n                response = cache.get(command.arg(CliCommand.KEY));\n                break;\n             }\n-            case Ls.CMD: {\n+            case org.infinispan.cli.commands.Ls.CMD: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1NDgyMg==", "bodyText": "why in RestServerClient? Shouldn't the logging affect all nodes in the cluster?\nmaybe under RestClient or RestClusterClient?", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388354822", "createdAt": "2020-03-05T15:09:14Z", "author": {"login": "pruivo"}, "path": "client/rest-client/src/main/java/org/infinispan/client/rest/RestServerClient.java", "diffHunk": "@@ -36,4 +36,6 @@\n    CompletionStage<RestResponse> unIgnoreCache(String cacheManagerName, String cacheName);\n \n    CompletionStage<RestResponse> listIgnoredCaches(String cacheManagerName);\n+\n+   RestLoggingClient logging();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1NTI0OA==", "bodyText": "isn't \"/loggers/\" missing?", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388355248", "createdAt": "2020-03-05T15:09:53Z", "author": {"login": "pruivo"}, "path": "client/rest-client/src/main/java/org/infinispan/client/rest/impl/okhttp/RestLoggingClientOkHttp.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.infinispan.client.rest.impl.okhttp;\n+\n+import static org.infinispan.client.rest.impl.okhttp.RestClientOkHttp.sanitize;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.client.rest.RestLoggingClient;\n+import org.infinispan.client.rest.RestResponse;\n+\n+import okhttp3.Request;\n+import okhttp3.internal.Util;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+public class RestLoggingClientOkHttp implements RestLoggingClient {\n+\n+   private final RestClientOkHttp client;\n+   private final String baseLoggingURL;\n+\n+   RestLoggingClientOkHttp(RestClientOkHttp restClient) {\n+      this.client = restClient;\n+      this.baseLoggingURL = String.format(\"%s%s/v2/logging\", restClient.getBaseURL(), restClient.getConfiguration().contextPath());\n+   }\n+\n+   @Override\n+   public CompletionStage<RestResponse> listLoggers() {\n+      return client.execute(baseLoggingURL, \"loggers\");\n+   }\n+\n+   @Override\n+   public CompletionStage<RestResponse> listAppenders() {\n+      return client.execute(baseLoggingURL, \"appenders\");\n+   }\n+\n+   @Override\n+   public CompletionStage<RestResponse> setLogger(String name, String level, String... appenders) {\n+      Request.Builder builder = new Request.Builder();\n+      StringBuilder sb = new StringBuilder(baseLoggingURL);\n+      sb.append(\"/loggers/\").append(sanitize(name)).append(\"?\");\n+      boolean amp = false;\n+      if (level != null) {\n+         sb.append(\"level=\").append(level);\n+         amp = true;\n+      }\n+      if (appenders != null) {\n+         for(String appender : appenders) {\n+            if (amp) {\n+               sb.append(\"&\");\n+            }\n+            sb.append(\"appender=\").append(appender);\n+            amp = true;\n+         }\n+      }\n+      builder.url(sb.toString()).put(Util.EMPTY_REQUEST);\n+      return client.execute(builder);\n+   }\n+\n+   @Override\n+   public CompletionStage<RestResponse> removeLogger(String name) {\n+      Request.Builder builder = new Request.Builder();\n+      builder.url(baseLoggingURL + \"/\" + sanitize(name)).delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1NjYxOQ==", "bodyText": "nitpick: sb.append(\"appender=\").append(String.join(\"%appender=\", appenders))", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388356619", "createdAt": "2020-03-05T15:11:51Z", "author": {"login": "pruivo"}, "path": "client/rest-client/src/main/java/org/infinispan/client/rest/impl/okhttp/RestLoggingClientOkHttp.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.infinispan.client.rest.impl.okhttp;\n+\n+import static org.infinispan.client.rest.impl.okhttp.RestClientOkHttp.sanitize;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.client.rest.RestLoggingClient;\n+import org.infinispan.client.rest.RestResponse;\n+\n+import okhttp3.Request;\n+import okhttp3.internal.Util;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+public class RestLoggingClientOkHttp implements RestLoggingClient {\n+\n+   private final RestClientOkHttp client;\n+   private final String baseLoggingURL;\n+\n+   RestLoggingClientOkHttp(RestClientOkHttp restClient) {\n+      this.client = restClient;\n+      this.baseLoggingURL = String.format(\"%s%s/v2/logging\", restClient.getBaseURL(), restClient.getConfiguration().contextPath());\n+   }\n+\n+   @Override\n+   public CompletionStage<RestResponse> listLoggers() {\n+      return client.execute(baseLoggingURL, \"loggers\");\n+   }\n+\n+   @Override\n+   public CompletionStage<RestResponse> listAppenders() {\n+      return client.execute(baseLoggingURL, \"appenders\");\n+   }\n+\n+   @Override\n+   public CompletionStage<RestResponse> setLogger(String name, String level, String... appenders) {\n+      Request.Builder builder = new Request.Builder();\n+      StringBuilder sb = new StringBuilder(baseLoggingURL);\n+      sb.append(\"/loggers/\").append(sanitize(name)).append(\"?\");\n+      boolean amp = false;\n+      if (level != null) {\n+         sb.append(\"level=\").append(level);\n+         amp = true;\n+      }\n+      if (appenders != null) {\n+         for(String appender : appenders) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1ODg0NQ==", "bodyText": "[source,json,options=\"nowrap\",subs=attributes+]\n----\ninclude::json_examples/rest_logging_appenders_response.json[]\n----", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388358845", "createdAt": "2020-03-05T15:15:00Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/proc_cli_logging.adoc", "diffHunk": "@@ -0,0 +1,93 @@\n+[id='adding_scripts_cli-{context}']\n+= Changing the runtime logging configuration of {brandname} Servers\n+\n+Use the command line interface to change the logging configuration of {brandname} servers at runtime.\n+Use this functionality to temporarily make modifications to the logging configuration, for example while investigating a problem.\n+\n+.Note\n+Modifying the logging configuration via the CLI is a runtime-only operation:\n+\n+* any changes will not be persisted to the `log4j2.xml` file.\n+Restarting any individual server or the entire cluster will cause the logging configuration to be reset to that defined in the `log4j2.xml` file.\n+* the changes only apply to the nodes that are present in the cluster at invocation time.\n+Any nodes that are started after the modifications will be using their default logging configuration.\n+\n+\n+.Listing appenders\n+List all appenders defined on the server:\n+\n+----\n+[//containers/default]> logging list-appenders\n+----\n+\n+The above command will return:\n+\n+[source,javascript]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM2MDkzMA==", "bodyText": "[source,json,options=\"nowrap\",subs=attributes+]\n----\ninclude::json_examples/rest_logging_loggers_response.json[]\n----", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388360930", "createdAt": "2020-03-05T15:18:05Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/proc_cli_logging.adoc", "diffHunk": "@@ -0,0 +1,93 @@\n+[id='adding_scripts_cli-{context}']\n+= Changing the runtime logging configuration of {brandname} Servers\n+\n+Use the command line interface to change the logging configuration of {brandname} servers at runtime.\n+Use this functionality to temporarily make modifications to the logging configuration, for example while investigating a problem.\n+\n+.Note\n+Modifying the logging configuration via the CLI is a runtime-only operation:\n+\n+* any changes will not be persisted to the `log4j2.xml` file.\n+Restarting any individual server or the entire cluster will cause the logging configuration to be reset to that defined in the `log4j2.xml` file.\n+* the changes only apply to the nodes that are present in the cluster at invocation time.\n+Any nodes that are started after the modifications will be using their default logging configuration.\n+\n+\n+.Listing appenders\n+List all appenders defined on the server:\n+\n+----\n+[//containers/default]> logging list-appenders\n+----\n+\n+The above command will return:\n+\n+[source,javascript]\n+----\n+{\n+  \"STDOUT\" : {\n+    \"name\" : \"STDOUT\"\n+  },\n+  \"JSON-FILE\" : {\n+    \"name\" : \"JSON-FILE\"\n+  },\n+  \"HR-ACCESS-FILE\" : {\n+    \"name\" : \"HR-ACCESS-FILE\"\n+  },\n+  \"FILE\" : {\n+    \"name\" : \"FILE\"\n+  },\n+  \"REST-ACCESS-FILE\" : {\n+    \"name\" : \"REST-ACCESS-FILE\"\n+  }\n+}\n+----\n+\n+.Listing loggers\n+List all logger configurations defined on the server:\n+\n+----\n+[//containers/default]> logging list-loggers\n+----\n+\n+The above command will return:\n+\n+[source,javascript]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM2NDY4Nw==", "bodyText": "layout isn't used.", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388364687", "createdAt": "2020-03-05T15:23:33Z", "author": {"login": "pruivo"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/LoggingResource.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.infinispan.rest.resources;\n+\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON_TYPE;\n+import static org.infinispan.rest.framework.Method.DELETE;\n+import static org.infinispan.rest.framework.Method.GET;\n+import static org.infinispan.rest.framework.Method.PUT;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.Layout;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.ResourceHandler;\n+import org.infinispan.rest.framework.RestRequest;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.framework.impl.Invocations;\n+import org.infinispan.tasks.TaskContext;\n+import org.infinispan.tasks.TaskManager;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Logging configuration resource. This resource is log4j 2.x-specific\n+ *\n+ * @author tristan@infinispan.org\n+ * @since 11.0\n+ */\n+public final class LoggingResource implements ResourceHandler {\n+   private final InvocationHelper invocationHelper;\n+\n+   public LoggingResource(InvocationHelper invocationHelper) {\n+      this.invocationHelper = invocationHelper;\n+      // Register our custom serializers\n+      SimpleModule module = new SimpleModule();\n+      module.addSerializer(LoggerConfig.class, new Log4j2LoggerConfigSerializer());\n+      module.addSerializer(Appender.class, new Log4j2AppenderSerializer());\n+      this.invocationHelper.getMapper().registerModule(module);\n+   }\n+\n+   @Override\n+   public Invocations getInvocations() {\n+      return new Invocations.Builder()\n+            .invocation().methods(GET).path(\"/v2/logging/loggers\").handleWith(this::listLoggers)\n+            .invocation().methods(GET).path(\"/v2/logging/appenders\").handleWith(this::listAppenders)\n+            .invocation().methods(DELETE).path(\"/v2/logging/loggers/{loggerName}\").handleWith(this::deleteLogger)\n+            .invocation().methods(PUT).path(\"/v2/logging/loggers/{loggerName}\").handleWith(this::setLogger)\n+            .create();\n+   }\n+\n+   private CompletionStage<RestResponse> setLogger(RestRequest request) {\n+      TaskManager taskManager = invocationHelper.getServer().getTaskManager();\n+      String loggerName = request.variables().get(\"loggerName\");\n+      String level = request.getParameter(\"level\");\n+      List<String> appenders = request.parameters().get(\"appender\");\n+      if (level == null && appenders == null) {\n+         return completedFuture(new NettyRestResponse.Builder().status(HttpResponseStatus.BAD_REQUEST).build());\n+      }\n+      return taskManager.runTask(\"@@logging@set\",\n+            new TaskContext()\n+                  .addParameter(\"loggerName\", loggerName)\n+                  .addOptionalParameter(\"level\", level)\n+                  .addOptionalParameter(\"appenders\", appenders)\n+      ).handle((o, t) -> {\n+         NettyRestResponse.Builder response = new NettyRestResponse.Builder();\n+         if (t == null) {\n+            response.status(HttpResponseStatus.NO_CONTENT);\n+         } else {\n+            while (t.getCause() != null) {\n+               t = t.getCause();\n+            }\n+            if (t instanceof IllegalStateException) {\n+               response.status(HttpResponseStatus.CONFLICT).entity(t.getMessage());\n+            } else if (t instanceof IllegalArgumentException) {\n+               response.status(HttpResponseStatus.BAD_REQUEST).entity(t.getMessage());\n+            } else if (t instanceof NoSuchElementException) {\n+               response.status(HttpResponseStatus.NOT_FOUND).entity(t.getMessage());\n+            } else {\n+               response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(t.getMessage());\n+            }\n+         }\n+         return response.build();\n+      });\n+   }\n+\n+   private CompletionStage<RestResponse> deleteLogger(RestRequest request) {\n+      TaskManager taskManager = invocationHelper.getServer().getTaskManager();\n+      String loggerName = request.variables().get(\"loggerName\");\n+      return taskManager.runTask(\"@@logging@remove\", new TaskContext().addParameter(\"loggerName\", loggerName))\n+            .thenApply(o -> {\n+               NettyRestResponse.Builder response = new NettyRestResponse.Builder();\n+               response.status(HttpResponseStatus.NO_CONTENT);\n+               return response.build();\n+            });\n+   }\n+\n+   private CompletionStage<RestResponse> listLoggers(RestRequest request) {\n+      LoggerContext logContext = (LoggerContext) LogManager.getContext(false);\n+      NettyRestResponse.Builder response = new NettyRestResponse.Builder();\n+      try {\n+         // We only return loggers declared in the configuration\n+         Collection<LoggerConfig> loggers = logContext.getConfiguration().getLoggers().values();\n+         byte[] resultBytes = invocationHelper.getMapper().writeValueAsBytes(loggers);\n+         response.contentType(APPLICATION_JSON_TYPE).entity(resultBytes);\n+      } catch (JsonProcessingException e) {\n+         response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(e.getMessage());\n+      }\n+      return completedFuture(response.build());\n+   }\n+\n+   private CompletionStage<RestResponse> listAppenders(RestRequest request) {\n+      LoggerContext logContext = (LoggerContext) LogManager.getContext(false);\n+      NettyRestResponse.Builder response = new NettyRestResponse.Builder();\n+      try {\n+         byte[] resultBytes = invocationHelper.getMapper().writeValueAsBytes(logContext.getConfiguration().getAppenders());\n+         response.contentType(APPLICATION_JSON_TYPE).entity(resultBytes);\n+      } catch (JsonProcessingException e) {\n+         response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(e.getMessage());\n+      }\n+      return completedFuture(response.build());\n+   }\n+\n+   public static class Log4j2LoggerConfigSerializer extends StdSerializer<LoggerConfig> {\n+\n+      public Log4j2LoggerConfigSerializer() {\n+         this(null);\n+      }\n+\n+      public Log4j2LoggerConfigSerializer(Class<LoggerConfig> t) {\n+         super(t);\n+      }\n+\n+      @Override\n+      public void serialize(LoggerConfig logger, JsonGenerator json, SerializerProvider serializerProvider) throws IOException {\n+         json.writeStartObject();\n+         json.writeStringField(\"name\", logger.getName());\n+         json.writeStringField(\"level\", logger.getLevel().name());\n+         json.writeArrayFieldStart(\"appenders\");\n+         for (String appender : logger.getAppenders().keySet()) {\n+            json.writeString(appender);\n+         }\n+         json.writeEndArray();\n+         json.writeEndObject();\n+      }\n+   }\n+\n+   public static class Log4j2AppenderSerializer extends StdSerializer<Appender> {\n+\n+      public Log4j2AppenderSerializer() {\n+         this(null);\n+      }\n+\n+      public Log4j2AppenderSerializer(Class<Appender> t) {\n+         super(t);\n+      }\n+\n+      @Override\n+      public void serialize(Appender appender, JsonGenerator json, SerializerProvider serializerProvider) throws IOException {\n+         json.writeStartObject();\n+         json.writeStringField(\"name\", appender.getName());\n+         Layout<? extends Serializable> layout = appender.getLayout();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM3MjY5Ng==", "bodyText": "static?", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388372696", "createdAt": "2020-03-05T15:35:24Z", "author": {"login": "pruivo"}, "path": "server/runtime/src/main/java/org/infinispan/server/tasks/admin/LoggingSetTask.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.infinispan.server.tasks.admin;\n+\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.infinispan.commons.api.CacheContainerAdmin;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.server.core.admin.AdminServerTask;\n+import org.infinispan.tasks.TaskExecutionMode;\n+\n+/**\n+ * Admin operation to add/modify a logger\n+ *\n+ * @author Tristan Tarrant\n+ * @since 11.0\n+ */\n+public class LoggingSetTask extends AdminServerTask<byte[]> {\n+   private final Set<String> PARAMETERS;\n+\n+   public LoggingSetTask() {\n+      PARAMETERS = Stream.of(\"loggerName\", \"level\", \"appenders\", \"create\").collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM3NzIxMA==", "bodyText": "can you duplicate the test using RestLoggingClient? It would avoid issues in RestLoggingClient :)", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r388377210", "createdAt": "2020-03-05T15:42:04Z", "author": {"login": "pruivo"}, "path": "server/tests/src/test/java/org/infinispan/server/functional/RestLoggingResource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.infinispan.server.functional;\n+\n+import static org.infinispan.server.security.Common.sync;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.RestResponse;\n+import org.infinispan.server.test.junit4.InfinispanServerRule;\n+import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * @since 11.0\n+ */\n+public class RestLoggingResource {\n+\n+   @ClassRule\n+   public static InfinispanServerRule SERVERS = ClusteredIT.SERVERS;\n+\n+   @Rule\n+   public InfinispanServerTestMethodRule SERVER_TEST = new InfinispanServerTestMethodRule(SERVERS);\n+\n+   private final ObjectMapper mapper = new ObjectMapper();\n+\n+   @Test\n+   public void testListLoggers() throws Exception {\n+      RestClient client = SERVER_TEST.rest().create();\n+      RestResponse response = sync(client.raw().get(\"/rest/v2/logging/loggers\"));\n+      JsonNode loggers = mapper.readTree(response.getBody());\n+      assertTrue(loggers.size() > 0);\n+   }\n+\n+   @Test\n+   public void testListAppenders() throws Exception {\n+      RestClient client = SERVER_TEST.rest().create();\n+      RestResponse response = sync(client.raw().get(\"/rest/v2/logging/appenders\"));\n+      JsonNode appenders = mapper.readTree(response.getBody());\n+      assertEquals(2, appenders.size());\n+   }\n+\n+   @Test\n+   public void testManipulateLogger() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4bbf5a3966fbc90a13b82880e250e6bba36335a", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/b4bbf5a3966fbc90a13b82880e250e6bba36335a", "committedDate": "2020-03-05T13:21:38Z", "message": "ISPN-11238 Server Logging management via CLI"}, "afterCommit": {"oid": "8f76af7f076e854b27a432df728a4ea3a8ee55a8", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/8f76af7f076e854b27a432df728a4ea3a8ee55a8", "committedDate": "2020-03-09T13:41:05Z", "message": "ISPN-11238 Server Logging management via CLI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjA0NzQ1", "url": "https://github.com/infinispan/infinispan/pull/8001#pullrequestreview-371204745", "createdAt": "2020-03-09T13:58:36Z", "commit": {"oid": "8f76af7f076e854b27a432df728a4ea3a8ee55a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzo1ODozNlrOFzpRXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzo1ODozNlrOFzpRXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY5Nzg4NA==", "bodyText": "This resource will only affect the local server, correct? I am wondering if it should be mapped under /v2/server/logging", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r389697884", "createdAt": "2020-03-09T13:58:36Z", "author": {"login": "gustavonalle"}, "path": "server/rest/src/main/java/org/infinispan/rest/resources/LoggingResource.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.infinispan.rest.resources;\n+\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON_TYPE;\n+import static org.infinispan.rest.framework.Method.DELETE;\n+import static org.infinispan.rest.framework.Method.GET;\n+import static org.infinispan.rest.framework.Method.PUT;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.ResourceHandler;\n+import org.infinispan.rest.framework.RestRequest;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.framework.impl.Invocations;\n+import org.infinispan.tasks.TaskContext;\n+import org.infinispan.tasks.TaskManager;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Logging configuration resource. This resource is log4j 2.x-specific\n+ *\n+ * @author tristan@infinispan.org\n+ * @since 11.0\n+ */\n+public final class LoggingResource implements ResourceHandler {\n+   private final InvocationHelper invocationHelper;\n+\n+   public LoggingResource(InvocationHelper invocationHelper) {\n+      this.invocationHelper = invocationHelper;\n+      // Register our custom serializers\n+      SimpleModule module = new SimpleModule();\n+      module.addSerializer(LoggerConfig.class, new Log4j2LoggerConfigSerializer());\n+      module.addSerializer(Appender.class, new Log4j2AppenderSerializer());\n+      this.invocationHelper.getMapper().registerModule(module);\n+   }\n+\n+   @Override\n+   public Invocations getInvocations() {\n+      return new Invocations.Builder()\n+            .invocation().methods(GET).path(\"/v2/logging/loggers\").handleWith(this::listLoggers)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f76af7f076e854b27a432df728a4ea3a8ee55a8"}, "originalPosition": 57}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f76af7f076e854b27a432df728a4ea3a8ee55a8", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/8f76af7f076e854b27a432df728a4ea3a8ee55a8", "committedDate": "2020-03-09T13:41:05Z", "message": "ISPN-11238 Server Logging management via CLI"}, "afterCommit": {"oid": "a86e5f83b8edbf77000b1ddeeccb80ea7345725d", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/a86e5f83b8edbf77000b1ddeeccb80ea7345725d", "committedDate": "2020-03-09T14:23:01Z", "message": "ISPN-11238 Server Logging management via CLI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a86e5f83b8edbf77000b1ddeeccb80ea7345725d", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/a86e5f83b8edbf77000b1ddeeccb80ea7345725d", "committedDate": "2020-03-09T14:23:01Z", "message": "ISPN-11238 Server Logging management via CLI"}, "afterCommit": {"oid": "bf2ffb8e6ae717ca8bc5384fb31b420d19724be4", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/bf2ffb8e6ae717ca8bc5384fb31b420d19724be4", "committedDate": "2020-03-10T10:39:32Z", "message": "ISPN-11238 Server Logging management via CLI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf2ffb8e6ae717ca8bc5384fb31b420d19724be4", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/bf2ffb8e6ae717ca8bc5384fb31b420d19724be4", "committedDate": "2020-03-10T10:39:32Z", "message": "ISPN-11238 Server Logging management via CLI"}, "afterCommit": {"oid": "601c4e3d07daef470a3456c386e618bad806f8e9", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/601c4e3d07daef470a3456c386e618bad806f8e9", "committedDate": "2020-03-12T15:25:22Z", "message": "ISPN-11238 Server Logging management via CLI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "601c4e3d07daef470a3456c386e618bad806f8e9", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/601c4e3d07daef470a3456c386e618bad806f8e9", "committedDate": "2020-03-12T15:25:22Z", "message": "ISPN-11238 Server Logging management via CLI"}, "afterCommit": {"oid": "9a6c4b648e99d2fc421f1cf3e8f1a48eed2125a2", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/9a6c4b648e99d2fc421f1cf3e8f1a48eed2125a2", "committedDate": "2020-03-16T14:09:27Z", "message": "ISPN-11238 Server Logging management via CLI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a6c4b648e99d2fc421f1cf3e8f1a48eed2125a2", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/9a6c4b648e99d2fc421f1cf3e8f1a48eed2125a2", "committedDate": "2020-03-16T14:09:27Z", "message": "ISPN-11238 Server Logging management via CLI"}, "afterCommit": {"oid": "5aca06209cb43f2034c7ad107f18eada8ca5c469", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/5aca06209cb43f2034c7ad107f18eada8ca5c469", "committedDate": "2020-03-16T16:39:55Z", "message": "ISPN-11238 Server Logging management via CLI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTA3MzE3", "url": "https://github.com/infinispan/infinispan/pull/8001#pullrequestreview-376107317", "createdAt": "2020-03-17T14:49:42Z", "commit": {"oid": "5aca06209cb43f2034c7ad107f18eada8ca5c469"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0OTo0MlrOF3fuxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0OTo0MlrOF3fuxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczNTg3OA==", "bodyText": "remove? it doesn't belong here. (I think)", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r393735878", "createdAt": "2020-03-17T14:49:42Z", "author": {"login": "pruivo"}, "path": "server/testdriver/junit5/pom.xml", "diffHunk": "@@ -0,0 +1,54 @@\n+<?xml version='1.0' encoding='UTF-8'?>\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+   <modelVersion>4.0.0</modelVersion>\n+   <parent>\n+      <groupId>org.infinispan</groupId>\n+      <artifactId>infinispan-server-parent</artifactId>\n+      <version>11.0.0-SNAPSHOT</version>\n+      <relativePath>../../pom.xml</relativePath>\n+   </parent>\n+\n+   <artifactId>infinispan-server-testdriver-junit4</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aca06209cb43f2034c7ad107f18eada8ca5c469"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aeb0bcc50e00b07b1ccd0c141155d80d22bef6c", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/4aeb0bcc50e00b07b1ccd0c141155d80d22bef6c", "committedDate": "2020-03-19T13:28:38Z", "message": "ISPN-11477 CLI: show available help commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e7ba0f02f54b55732c4a4ad73b9c47ea4c7ae00", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/8e7ba0f02f54b55732c4a4ad73b9c47ea4c7ae00", "committedDate": "2020-03-19T13:30:22Z", "message": "ISPN-10539 Server Logging management via REST"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e9b242cd44fe18b031a8a543a0228c932cbdbb9", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/8e9b242cd44fe18b031a8a543a0228c932cbdbb9", "committedDate": "2020-03-19T13:30:22Z", "message": "ISPN-11238 Server Logging management via CLI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5aca06209cb43f2034c7ad107f18eada8ca5c469", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/5aca06209cb43f2034c7ad107f18eada8ca5c469", "committedDate": "2020-03-16T16:39:55Z", "message": "ISPN-11238 Server Logging management via CLI"}, "afterCommit": {"oid": "8e9b242cd44fe18b031a8a543a0228c932cbdbb9", "author": {"user": {"login": "tristantarrant", "name": "Tristan Tarrant"}}, "url": "https://github.com/infinispan/infinispan/commit/8e9b242cd44fe18b031a8a543a0228c932cbdbb9", "committedDate": "2020-03-19T13:30:22Z", "message": "ISPN-11238 Server Logging management via CLI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NzI5NDM5", "url": "https://github.com/infinispan/infinispan/pull/8001#pullrequestreview-377729439", "createdAt": "2020-03-19T13:42:26Z", "commit": {"oid": "8e9b242cd44fe18b031a8a543a0228c932cbdbb9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDg3MzYz", "url": "https://github.com/infinispan/infinispan/pull/8001#pullrequestreview-378487363", "createdAt": "2020-03-20T13:36:38Z", "commit": {"oid": "8e9b242cd44fe18b031a8a543a0228c932cbdbb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzozNjozOFrOF5T8kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzozNjozOFrOF5T8kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzOTk1Mg==", "bodyText": "It should be documented that it will only get the logger from the local server, or move the API to under /server", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r395639952", "createdAt": "2020-03-20T13:36:38Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/ref_rest_logging.adoc", "diffHunk": "@@ -0,0 +1,57 @@\n+[id='rest_v2_logging_list_appenders']\n+= Listing the logging appenders\n+View a list of all configured appenders with `GET` requests.\n+\n+[source,options=\"nowrap\",subs=attributes+]\n+----\n+GET /rest/v2/logging/appenders", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e9b242cd44fe18b031a8a543a0228c932cbdbb9"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDg4MDUz", "url": "https://github.com/infinispan/infinispan/pull/8001#pullrequestreview-378488053", "createdAt": "2020-03-20T13:37:30Z", "commit": {"oid": "8e9b242cd44fe18b031a8a543a0228c932cbdbb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzozNzozMFrOF5T-qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzozNzozMFrOF5T-qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0MDQ5MQ==", "bodyText": "It should be document that it will affect all servers in the cluster", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r395640491", "createdAt": "2020-03-20T13:37:30Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/ref_rest_logging.adoc", "diffHunk": "@@ -0,0 +1,57 @@\n+[id='rest_v2_logging_list_appenders']\n+= Listing the logging appenders\n+View a list of all configured appenders with `GET` requests.\n+\n+[source,options=\"nowrap\",subs=attributes+]\n+----\n+GET /rest/v2/logging/appenders\n+----\n+\n+{brandname} responds with a list of appenders in JSON format as in the following example:\n+\n+[source,json,options=\"nowrap\",subs=attributes+]\n+----\n+include::json_examples/rest_logging_appenders_response.json[]\n+----\n+\n+\n+[id='rest_v2_logging_list_loggers']\n+= Listing the loggers\n+View a list of all configured loggers with `GET` requests.\n+\n+[source,options=\"nowrap\",subs=attributes+]\n+----\n+GET /rest/v2/logging/loggers\n+----\n+\n+{brandname} responds with a list of loggers in JSON format as in the following example:\n+\n+[source,json,options=\"nowrap\",subs=attributes+]\n+----\n+include::json_examples/rest_logging_loggers_response.json[]\n+----\n+\n+[id='rest_v2_logging_set_logger']\n+= Creating/modifying a logger\n+Create a new logger or modify an existing one with `PUT` requests.\n+\n+[source,options=\"nowrap\",subs=attributes+]\n+----\n+PUT /rest/v2/logging/loggers/{loggerName}&level={level}&appender={appender}&appender={appender}...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e9b242cd44fe18b031a8a543a0228c932cbdbb9"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDg4Mjcw", "url": "https://github.com/infinispan/infinispan/pull/8001#pullrequestreview-378488270", "createdAt": "2020-03-20T13:37:47Z", "commit": {"oid": "8e9b242cd44fe18b031a8a543a0228c932cbdbb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzozNzo0N1rOF5T_VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzozNzo0N1rOF5T_VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0MDY2MA==", "bodyText": "Same as above, it should be document that it will affect all servers in the cluster", "url": "https://github.com/infinispan/infinispan/pull/8001#discussion_r395640660", "createdAt": "2020-03-20T13:37:47Z", "author": {"login": "gustavonalle"}, "path": "documentation/src/main/asciidoc/topics/ref_rest_logging.adoc", "diffHunk": "@@ -0,0 +1,57 @@\n+[id='rest_v2_logging_list_appenders']\n+= Listing the logging appenders\n+View a list of all configured appenders with `GET` requests.\n+\n+[source,options=\"nowrap\",subs=attributes+]\n+----\n+GET /rest/v2/logging/appenders\n+----\n+\n+{brandname} responds with a list of appenders in JSON format as in the following example:\n+\n+[source,json,options=\"nowrap\",subs=attributes+]\n+----\n+include::json_examples/rest_logging_appenders_response.json[]\n+----\n+\n+\n+[id='rest_v2_logging_list_loggers']\n+= Listing the loggers\n+View a list of all configured loggers with `GET` requests.\n+\n+[source,options=\"nowrap\",subs=attributes+]\n+----\n+GET /rest/v2/logging/loggers\n+----\n+\n+{brandname} responds with a list of loggers in JSON format as in the following example:\n+\n+[source,json,options=\"nowrap\",subs=attributes+]\n+----\n+include::json_examples/rest_logging_loggers_response.json[]\n+----\n+\n+[id='rest_v2_logging_set_logger']\n+= Creating/modifying a logger\n+Create a new logger or modify an existing one with `PUT` requests.\n+\n+[source,options=\"nowrap\",subs=attributes+]\n+----\n+PUT /rest/v2/logging/loggers/{loggerName}&level={level}&appender={appender}&appender={appender}...\n+----\n+\n+{brandname} sets the level of the logger identified by `{loggerName}` to `{level}`.\n+Optionally, it is possible to set one or more appenders for the logger.\n+If no appenders are specified, those specified in the root logger will be used.\n+\n+\n+[id='rest_v2_logging_remove_logger']\n+= Removing a logger\n+Remove an existing logger with `DELETE` requests.\n+\n+[source,options=\"nowrap\",subs=attributes+]\n+----\n+DELETE /rest/v2/logging/loggers/{loggerName}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e9b242cd44fe18b031a8a543a0228c932cbdbb9"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1070, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}