{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMzM5MzY5", "number": 8268, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODozNzowN1rOD4UUCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODozNzowN1rOD4UUCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzc5NjU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODozNzowN1rOGPE89A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDoxODowN1rOGPGmHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2Mjk2NA==", "bodyText": "The current form of this boolean condition is based on its previous + the need to re-index if the indexing provider is volatile. The two put together ... look odd to me @gustavonalle", "url": "https://github.com/infinispan/infinispan/pull/8268#discussion_r418462964", "createdAt": "2020-05-01T08:37:07Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "diffHunk": "@@ -1261,33 +1261,26 @@ private long getFlagsForStateInsertion() {\n             FlagBitSets.SKIP_LOCKING |\n             FlagBitSets.SKIP_XSITE_BACKUP;\n \n-      boolean hasShared = false;\n+      boolean hasSharedStore = false;\n       acquireReadLock();\n       try {\n          for (CacheWriter w : nonTxWriters) {\n             if (getStoreConfig(w).shared()) {\n-               hasShared = true;\n+               hasSharedStore = true;\n                break;\n             }\n          }\n       } finally {\n          releaseReadLock();\n       }\n \n-      if (hasShared) {\n-         if (indexShareable())\n-            flags = EnumUtil.mergeBitSets(flags, FlagBitSets.SKIP_INDEXING);\n-      } else {\n+      if (!hasSharedStore && !configuration.indexing().isVolatile()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f42a5fdb41495e48b40d873934994f3322e88b1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ4OTg4NQ==", "bodyText": "I've changed the && to || and seems ok now.", "url": "https://github.com/infinispan/infinispan/pull/8268#discussion_r418489885", "createdAt": "2020-05-01T10:18:07Z", "author": {"login": "anistor"}, "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "diffHunk": "@@ -1261,33 +1261,26 @@ private long getFlagsForStateInsertion() {\n             FlagBitSets.SKIP_LOCKING |\n             FlagBitSets.SKIP_XSITE_BACKUP;\n \n-      boolean hasShared = false;\n+      boolean hasSharedStore = false;\n       acquireReadLock();\n       try {\n          for (CacheWriter w : nonTxWriters) {\n             if (getStoreConfig(w).shared()) {\n-               hasShared = true;\n+               hasSharedStore = true;\n                break;\n             }\n          }\n       } finally {\n          releaseReadLock();\n       }\n \n-      if (hasShared) {\n-         if (indexShareable())\n-            flags = EnumUtil.mergeBitSets(flags, FlagBitSets.SKIP_INDEXING);\n-      } else {\n+      if (!hasSharedStore && !configuration.indexing().isVolatile()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2Mjk2NA=="}, "originalCommit": {"oid": "6f42a5fdb41495e48b40d873934994f3322e88b1"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4319, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}