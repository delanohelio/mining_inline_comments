{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNTI3ODMx", "number": 7969, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowNjoxOFrODkTPwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowNjoxOFrODkTPwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzkwNjU2OnYy", "diffSide": "RIGHT", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowNjoxOFrOFwi3xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoyODowMFrOFxNJ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0NzMwMg==", "bodyText": "I wonder if we should word this differently, since it isn't always an update and it is only the entries provided. And why does only the prior method mention the performance?", "url": "https://github.com/infinispan/infinispan/pull/7969#discussion_r386447302", "createdAt": "2020-03-02T15:06:18Z", "author": {"login": "wburns"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCache.java", "diffHunk": "@@ -352,47 +347,45 @@\n    CloseableIteratorSet<Entry<K, V>> entrySet(IntSet segments);\n \n    /**\n-    * Synthetic operation. The client iterates over the set of keys and calls put for each one of them. This results in\n-    * operation not being atomic (if a failure happens after few puts it is not rolled back) and costly (for each key in\n-    * the parameter map a remote call is performed).\n+    * Updates all entries in the remote cache. This operation provides better performance than calling put for each entry.\n     */\n    @Override\n    void putAll(Map<? extends K, ? extends V> map, long lifespan, TimeUnit unit);\n \n    /**\n-    * Synthetic operation.\n+    * Updates all entries in the remote cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d9aa01af1988f7ee644eedba4751c0a72ad644"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0MDA3Ng==", "bodyText": "@wburns thanks, I've made some changes. hopefully getting closer to the mark now.", "url": "https://github.com/infinispan/infinispan/pull/7969#discussion_r387140076", "createdAt": "2020-03-03T16:28:00Z", "author": {"login": "oraNod"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCache.java", "diffHunk": "@@ -352,47 +347,45 @@\n    CloseableIteratorSet<Entry<K, V>> entrySet(IntSet segments);\n \n    /**\n-    * Synthetic operation. The client iterates over the set of keys and calls put for each one of them. This results in\n-    * operation not being atomic (if a failure happens after few puts it is not rolled back) and costly (for each key in\n-    * the parameter map a remote call is performed).\n+    * Updates all entries in the remote cache. This operation provides better performance than calling put for each entry.\n     */\n    @Override\n    void putAll(Map<? extends K, ? extends V> map, long lifespan, TimeUnit unit);\n \n    /**\n-    * Synthetic operation.\n+    * Updates all entries in the remote cache.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0NzMwMg=="}, "originalCommit": {"oid": "92d9aa01af1988f7ee644eedba4751c0a72ad644"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4516, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}