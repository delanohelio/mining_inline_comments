{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2ODQzNTUw", "number": 8832, "title": "ISPN-10851 JGroups encrypt docs", "bodyText": "https://issues.redhat.com/browse/ISPN-10851", "createdAt": "2020-11-06T16:12:03Z", "url": "https://github.com/infinispan/infinispan/pull/8832", "merged": true, "mergeCommit": {"oid": "69452c04d16f4b649cdab259cbab81420647a094"}, "closed": true, "closedAt": "2020-11-23T17:36:26Z", "author": {"login": "oraNod"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZ5WR8AFqTUyNTI5NjIwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfYb-fABqjQwMjg3Nzc3NDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1Mjk2MjA0", "url": "https://github.com/infinispan/infinispan/pull/8832#pullrequestreview-525296204", "createdAt": "2020-11-06T16:14:15Z", "commit": {"oid": "f4a50ea88ef05c8e52b330ba4a7fab6a8e01baf7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjoxNDoxNVrOHu0WOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjoxNDoxNVrOHu0WOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1NDIwMQ==", "bodyText": "@tristantarrant I'd like to backport this PR to 11 but INSERT_BEFORE isn't available. I'm not sure how to use stack.combine to get SSL_KEY_EXCHANGE and ASYM_ENCRYPT in the stack before pbcast.NAKACK2. Any recommendations?", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r518854201", "createdAt": "2020-11-06T16:14:15Z", "author": {"login": "oraNod"}, "path": "documentation/src/main/asciidoc/topics/config_examples/jgroups_asym_encrypt.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<infinispan>\n+    <jgroups>\n+         <stack name=\"encrypt-tcp\" extends=\"tcp\"> <1>\n+           <SSL_KEY_EXCHANGE keystore_name=\"mykeystore.jks\" <2>\n+                             keystore_password=\"changeit\" <3>\n+                             stack.combine=\"INSERT_AFTER\"\n+                             stack.position=\"VERIFY_SUSPECT\"/> <4>\n+           <ASYM_ENCRYPT asym_keylength=\"512\" <5>\n+                    asym_algorithm=\"RSA\" <6>\n+                    change_key_on_coord_leave = \"false\" <7>\n+                    change_key_on_leave = \"false\" <8>\n+                    use_external_key_exchange = \"true\" <9>\n+                    stack.combine=\"INSERT_BEFORE\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a50ea88ef05c8e52b330ba4a7fab6a8e01baf7"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDMzODE4", "url": "https://github.com/infinispan/infinispan/pull/8832#pullrequestreview-526033818", "createdAt": "2020-11-09T08:48:58Z", "commit": {"oid": "f4a50ea88ef05c8e52b330ba4a7fab6a8e01baf7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4a50ea88ef05c8e52b330ba4a7fab6a8e01baf7", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/f4a50ea88ef05c8e52b330ba4a7fab6a8e01baf7", "committedDate": "2020-11-06T16:11:14Z", "message": "ISPN-10851 JGroups encrypt docs"}, "afterCommit": {"oid": "77474288678f63b533beaf9d89e350c3f424406d", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/77474288678f63b533beaf9d89e350c3f424406d", "committedDate": "2020-11-09T15:34:39Z", "message": "clarify sym_encrypt is not less secure than asym_encrypt"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77474288678f63b533beaf9d89e350c3f424406d", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/77474288678f63b533beaf9d89e350c3f424406d", "committedDate": "2020-11-09T15:34:39Z", "message": "clarify sym_encrypt is not less secure than asym_encrypt"}, "afterCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/483e1051c14c5106819a8b559b5da6000ae0d1e3", "committedDate": "2020-11-13T14:23:12Z", "message": "ISPN-10851 JGroups encrypt docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjkxNDIz", "url": "https://github.com/infinispan/infinispan/pull/8832#pullrequestreview-530291423", "createdAt": "2020-11-13T18:06:47Z", "commit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODowNjo0N1rOHy5efA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODowNjo0N1rOHy5efA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzMjU0MA==", "bodyText": "what kind of security are we trying to achieve here? RSA 512 bits isn't secure since 2000 and can be crack in a couple of hours currently.", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523132540", "createdAt": "2020-11-13T18:06:47Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/config_examples/jgroups_asym_encrypt.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<infinispan>\n+    <jgroups>\n+         <stack name=\"encrypt-tcp\" extends=\"tcp\"> <1>\n+           <SSL_KEY_EXCHANGE keystore_name=\"mykeystore.jks\" <2>\n+                             keystore_password=\"changeit\" <3>\n+                             stack.combine=\"INSERT_AFTER\"\n+                             stack.position=\"VERIFY_SUSPECT\"/> <4>\n+           <ASYM_ENCRYPT asym_keylength=\"512\" <5>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMzEwMzQ1", "url": "https://github.com/infinispan/infinispan/pull/8832#pullrequestreview-530310345", "createdAt": "2020-11-13T18:32:13Z", "commit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODozMjoxM1rOHy6ZQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODozMjoxM1rOHy6ZQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE0NzU4Nw==", "bodyText": "is the public key encrypted? @belaban ?", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523147587", "createdAt": "2020-11-13T18:32:13Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "diffHunk": "@@ -0,0 +1,49 @@\n+[id='jgroups_encryption-{context}']\n+= {brandname} Cluster Security\n+To secure cluster traffic, you configure {brandname} nodes to encrypt JGroups message payloads with secret keys.\n+\n+{brandname} nodes can obtain secret keys from either:\n+\n+* The coordinator node (asymmetric encryption).\n+* A shared keystore (symmetric encryption).\n+\n+.Retrieving secret keys from coordinator nodes\n+\n+You configure asymmetric encryption by adding the `ASYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to generate and distribute secret keys.\n+\n+[IMPORTANT]\n+====\n+When using asymmetric encryption, you should also provide keystores so that nodes can perform certificate authentication and securely exchange secret keys.\n+This protects your cluster from man-in-the-middle (MitM) attacks.\n+====\n+\n+Asymmetric encryption secures cluster traffic as follows:\n+\n+. The first node in the {brandname} cluster, the coordinator node, generates a secret key.\n+. A joining node performs certificate authentication with the coordinator to mutually verify identity.\n+. The joining node requests the secret key from the coordinator node. That request includes the public key for the joining node.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMzExODAw", "url": "https://github.com/infinispan/infinispan/pull/8832#pullrequestreview-530311800", "createdAt": "2020-11-13T18:33:52Z", "commit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODozMzo1MlrOHy6dCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODozMzo1MlrOHy6dCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE0ODU1Mw==", "bodyText": "is the message signed? what if an attacker injects a message with some other key encrypted (basically a DoS attack)?\n//crap, I'm overthinking again...", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523148553", "createdAt": "2020-11-13T18:33:52Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "diffHunk": "@@ -0,0 +1,49 @@\n+[id='jgroups_encryption-{context}']\n+= {brandname} Cluster Security\n+To secure cluster traffic, you configure {brandname} nodes to encrypt JGroups message payloads with secret keys.\n+\n+{brandname} nodes can obtain secret keys from either:\n+\n+* The coordinator node (asymmetric encryption).\n+* A shared keystore (symmetric encryption).\n+\n+.Retrieving secret keys from coordinator nodes\n+\n+You configure asymmetric encryption by adding the `ASYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to generate and distribute secret keys.\n+\n+[IMPORTANT]\n+====\n+When using asymmetric encryption, you should also provide keystores so that nodes can perform certificate authentication and securely exchange secret keys.\n+This protects your cluster from man-in-the-middle (MitM) attacks.\n+====\n+\n+Asymmetric encryption secures cluster traffic as follows:\n+\n+. The first node in the {brandname} cluster, the coordinator node, generates a secret key.\n+. A joining node performs certificate authentication with the coordinator to mutually verify identity.\n+. The joining node requests the secret key from the coordinator node. That request includes the public key for the joining node.\n+. The coordinator node encrypts the secret key with the public key and returns it to the joining node.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMzE2ODg4", "url": "https://github.com/infinispan/infinispan/pull/8832#pullrequestreview-530316888", "createdAt": "2020-11-13T18:41:42Z", "commit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0MTo0MlrOHy6xjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0MTo0MlrOHy6xjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1MzgwNg==", "bodyText": "@belaban can you comment on what \"faster\" means here? If I understood the description properly, the asymmetric algorithm is only used to exchange the session key. Then, all messages are encrypted with a symmetric algorithm (so as in SYM_ENCRYPT); so the performance should be the same (assuming the same sym algo)", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523153806", "createdAt": "2020-11-13T18:41:42Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/con_jgroups_encrypt.adoc", "diffHunk": "@@ -0,0 +1,49 @@\n+[id='jgroups_encryption-{context}']\n+= {brandname} Cluster Security\n+To secure cluster traffic, you configure {brandname} nodes to encrypt JGroups message payloads with secret keys.\n+\n+{brandname} nodes can obtain secret keys from either:\n+\n+* The coordinator node (asymmetric encryption).\n+* A shared keystore (symmetric encryption).\n+\n+.Retrieving secret keys from coordinator nodes\n+\n+You configure asymmetric encryption by adding the `ASYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to generate and distribute secret keys.\n+\n+[IMPORTANT]\n+====\n+When using asymmetric encryption, you should also provide keystores so that nodes can perform certificate authentication and securely exchange secret keys.\n+This protects your cluster from man-in-the-middle (MitM) attacks.\n+====\n+\n+Asymmetric encryption secures cluster traffic as follows:\n+\n+. The first node in the {brandname} cluster, the coordinator node, generates a secret key.\n+. A joining node performs certificate authentication with the coordinator to mutually verify identity.\n+. The joining node requests the secret key from the coordinator node. That request includes the public key for the joining node.\n+. The coordinator node encrypts the secret key with the public key and returns it to the joining node.\n+. The joining node decrypts and installs the secret key.\n+. The node joins the cluster, encrypting and decrypting messages with the secret key.\n+\n+.Retrieving secret keys from shared keystores\n+\n+You configure symmetric encryption by adding the `SYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration.\n+This allows {brandname} clusters to obtain secret keys from keystores that you provide.\n+\n+. Nodes install the secret key from a keystore on the {brandname} classpath at startup.\n+. Node join clusters, encrypting and decrypting messages with the secret key.\n+\n+.Comparison of asymmetric and symmetric encryption\n+\n+`ASYM_ENCRYPT` with certificate authentication provides an additional layer of encryption in comparison with `SYM_ENCRYPT`.\n+You provide keystores that encrypt the requests to coordinator nodes for the secret key.\n+{brandname} automatically generates that secret key and handles cluster traffic, while letting you specify when to generate secret keys.\n+For example, you can configure clusters to generate new secret keys when nodes leave.\n+This ensures that nodes cannot bypass certificate authentication and join with old keys.\n+\n+`SYM_ENCRYPT`, on the other hand, is faster than `ASYM_ENCRYPT` because nodes install secret keys directly from keystores, rather than over the network.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMzE4MTY4", "url": "https://github.com/infinispan/infinispan/pull/8832#pullrequestreview-530318168", "createdAt": "2020-11-13T18:43:46Z", "commit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0Mzo0NlrOHy61fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0Mzo0NlrOHy61fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NDgxMg==", "bodyText": "isn't {server_home}/server/conf?", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523154812", "createdAt": "2020-11-13T18:43:46Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_asym_encrypt.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+[id='configuring_jgroups_asym_encrypt-{context}']\n+= Configuring Cluster Transport with Asymmetric Encryption\n+Configure {brandname} clusters to generate and distribute secret keys that encrypt JGroups messages.\n+\n+.Procedure\n+\n+. Create a keystore with certificate chains that enables {brandname} to verify node identity.\n+. Place the keystore on the classpath for each node in the cluster.\n++\n+For {brandname} Server, you put the keystore in the {server_home} directory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMzE5NDYz", "url": "https://github.com/infinispan/infinispan/pull/8832#pullrequestreview-530319463", "createdAt": "2020-11-13T18:45:41Z", "commit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0NTo0MVrOHy65RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0NjowNlrOHy66IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NTc4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * link:{jgroups_schema}[JGroups 4.2 XSD]\n          \n          \n            \n            * link:{jgroups_schema}[JGroups 4.2 Schema]", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523155780", "createdAt": "2020-11-13T18:45:41Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_sym_encrypt.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+[id='configuring_jgroups_sym_encrypt-{context}']\n+= Configuring Cluster Transport with Symmetric Encryption\n+Configure {brandname} clusters to encrypt JGroups messages with secret keys from keystores that you provide.\n+\n+.Procedure\n+\n+. Create a keystore that contains a secret key.\n+. Place the keystore on the classpath for each node in the cluster.\n++\n+For {brandname} Server, you put the keystore in the {server_home} directory.\n++\n+. Add the `SYM_ENCRYPT` protocol to a JGroups stack in your {brandname} configuration, as in the following example:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/jgroups_sym_encrypt.xml[]\n+----\n++\n+<1> Creates a secure JGroups stack named \"encrypt-tcp\" that extends the default TCP stack for {brandname}.\n+<2> Names the keystore from which nodes obtain secret keys.\n+<3> Specifies the keystore type. JGroups uses JCEKS by default.\n+<4> Specifies the keystore password.\n+<5> Specifies the secret key password.\n+<6> Specifies the secret key alias.\n+<7> Uses the `stack.combine` and `stack.position` attributes to insert `SYM_ENCRYPT` into the default TCP stack after the `VERIFY_SUSPECT` protocol.\n+<8> Configures the {brandname} cluster to use the secure JGroups stack.\n+\n+.Verification\n+\n+When you start your {brandname} cluster, the following log message indicates that the cluster is using the secure JGroups stack:\n+\n+[source,bash,options=\"nowrap\"]\n+----\n+[org.infinispan.CLUSTER] ISPN000078: Starting JGroups channel cluster with stack <encrypted_stack_name>\n+----\n+\n+{brandname} nodes can join the cluster only if they use `SYM_ENCRYPT` and can obtain the secret key from the shared keystore.\n+Otherwise the following message is written to {brandname} logs:\n+\n+----\n+[org.jgroups.protocols.SYM_ENCRYPT] <hostname>: received message without encrypt header from <hostname>; dropping it\n+----\n+\n+.Reference\n+\n+The example `SYM_ENCRYPT` configuration in this procedure shows commonly used parameters.\n+Refer to JGroups documentation for the full set of available parameters.\n+\n+* link:{jgroups_docs}[JGroups 4 Manual]\n+* link:{jgroups_schema}[JGroups 4.2 XSD]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NjAwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * link:{jgroups_schema}[JGroups 4.2 XSD]\n          \n          \n            \n            * link:{jgroups_schema}[JGroups 4.2 Schema]", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523156000", "createdAt": "2020-11-13T18:46:06Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_asym_encrypt.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+[id='configuring_jgroups_asym_encrypt-{context}']\n+= Configuring Cluster Transport with Asymmetric Encryption\n+Configure {brandname} clusters to generate and distribute secret keys that encrypt JGroups messages.\n+\n+.Procedure\n+\n+. Create a keystore with certificate chains that enables {brandname} to verify node identity.\n+. Place the keystore on the classpath for each node in the cluster.\n++\n+For {brandname} Server, you put the keystore in the {server_home} directory.\n++\n+. Add the `SSL_KEY_EXCHANGE` and `ASYM_ENCRYPT` protocols to a JGroups stack in your {brandname} configuration, as in the following example:\n++\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+include::config_examples/jgroups_asym_encrypt.xml[]\n+----\n++\n+<1> Creates a secure JGroups stack named \"encrypt-tcp\" that extends the default TCP stack for {brandname}.\n+<2> Names the keystore that nodes use to perform certificate authentication.\n+<3> Specifies the keystore password.\n+<4> Uses the `stack.combine` and `stack.position` attributes to insert `SSL_KEY_EXCHANGE` into the default TCP stack after the `VERIFY_SUSPECT` protocol.\n+<5> Specifies the length of the secret key that the coordinator node generates. The default value is `2048`.\n+<6> Specifies the cipher engine the coordinator node uses to generate secret keys. The default value is `RSA`.\n+<7> Configures {brandname} to generate and distribute a new secret key when the coordinator node changes.\n+<8> Configures {brandname} to generate and distribute a new secret key when nodes leave.\n+<9> Configures {brandname} nodes to use the `SSL_KEY_EXCHANGE` protocol for certificate authentication.\n+<10> Uses the `stack.combine` and `stack.position` attributes to insert `ASYM_ENCRYPT` into the default TCP stack before the `pbcast.NAKACK2` protocol.\n+<11> Configures the {brandname} cluster to use the secure JGroups stack.\n+\n+.Verification\n+\n+When you start your {brandname} cluster, the following log message indicates that the cluster is using the secure JGroups stack:\n+\n+[source,bash,options=\"nowrap\"]\n+----\n+[org.infinispan.CLUSTER] ISPN000078: Starting JGroups channel cluster with stack <encrypted_stack_name>\n+----\n+\n+{brandname} nodes can join the cluster only if they use `ASYM_ENCRYPT` and can obtain the secret key from the coordinator node.\n+Otherwise the following message is written to {brandname} logs:\n+\n+----\n+[org.jgroups.protocols.ASYM_ENCRYPT] <hostname>: received message without encrypt header from <hostname>; dropping it\n+----\n+\n+.Reference\n+\n+The example `ASYM_ENCRYPT` configuration in this procedure shows commonly used parameters.\n+Refer to JGroups documentation for the full set of available parameters.\n+\n+* link:{jgroups_docs}[JGroups 4 Manual]\n+* link:{jgroups_schema}[JGroups 4.2 XSD]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMzIyNTEz", "url": "https://github.com/infinispan/infinispan/pull/8832#pullrequestreview-530322513", "createdAt": "2020-11-13T18:50:21Z", "commit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo1MDoyMVrOHy7CqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo1MDoyMVrOHy7CqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1ODE4NQ==", "bodyText": "{server_home}/server/conf I think...", "url": "https://github.com/infinispan/infinispan/pull/8832#discussion_r523158185", "createdAt": "2020-11-13T18:50:21Z", "author": {"login": "pruivo"}, "path": "documentation/src/main/asciidoc/topics/proc_configuring_jgroups_sym_encrypt.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+[id='configuring_jgroups_sym_encrypt-{context}']\n+= Configuring Cluster Transport with Symmetric Encryption\n+Configure {brandname} clusters to encrypt JGroups messages with secret keys from keystores that you provide.\n+\n+.Procedure\n+\n+. Create a keystore that contains a secret key.\n+. Place the keystore on the classpath for each node in the cluster.\n++\n+For {brandname} Server, you put the keystore in the {server_home} directory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483e1051c14c5106819a8b559b5da6000ae0d1e3"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a5b879f42454019c4c1bd0e1c052007dcd7edf7", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/7a5b879f42454019c4c1bd0e1c052007dcd7edf7", "committedDate": "2020-11-16T10:46:12Z", "message": "Update documentation/src/main/asciidoc/topics/proc_configuring_jgroups_asym_encrypt.adoc\n\nCo-authored-by: Pedro Ruivo <pruivo@users.noreply.github.com>"}, "afterCommit": {"oid": "1c1beb6ebd3946e7b857f2e156920f3aab0de24b", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/1c1beb6ebd3946e7b857f2e156920f3aab0de24b", "committedDate": "2020-11-16T10:56:06Z", "message": "ISPN-10851 JGroups encrypt docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c1beb6ebd3946e7b857f2e156920f3aab0de24b", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/1c1beb6ebd3946e7b857f2e156920f3aab0de24b", "committedDate": "2020-11-16T10:56:06Z", "message": "ISPN-10851 JGroups encrypt docs"}, "afterCommit": {"oid": "8cfd53645e8b3b4f723f10429a498f2967b03059", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/8cfd53645e8b3b4f723f10429a498f2967b03059", "committedDate": "2020-11-17T20:40:34Z", "message": "RSA length"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8cfd53645e8b3b4f723f10429a498f2967b03059", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/8cfd53645e8b3b4f723f10429a498f2967b03059", "committedDate": "2020-11-17T20:40:34Z", "message": "RSA length"}, "afterCommit": {"oid": "2df08f63c34b9e2f63706d0c62c72dc7e5377f58", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/2df08f63c34b9e2f63706d0c62c72dc7e5377f58", "committedDate": "2020-11-18T09:16:16Z", "message": "ISPN-10851 JGroups encrypt docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMzI0Nzg0", "url": "https://github.com/infinispan/infinispan/pull/8832#pullrequestreview-533324784", "createdAt": "2020-11-18T10:54:13Z", "commit": {"oid": "2df08f63c34b9e2f63706d0c62c72dc7e5377f58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "272021c5540ed7bddda03b24a834d24b412c6764", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/272021c5540ed7bddda03b24a834d24b412c6764", "committedDate": "2020-11-23T17:16:59Z", "message": "ISPN-10851 JGroups encrypt docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2df08f63c34b9e2f63706d0c62c72dc7e5377f58", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/2df08f63c34b9e2f63706d0c62c72dc7e5377f58", "committedDate": "2020-11-18T09:16:16Z", "message": "ISPN-10851 JGroups encrypt docs"}, "afterCommit": {"oid": "272021c5540ed7bddda03b24a834d24b412c6764", "author": {"user": {"login": "oraNod", "name": "Don Naro"}}, "url": "https://github.com/infinispan/infinispan/commit/272021c5540ed7bddda03b24a834d24b412c6764", "committedDate": "2020-11-23T17:16:59Z", "message": "ISPN-10851 JGroups encrypt docs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 284, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}