{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTA0ODI5", "number": 7860, "title": "ISPN-11292 Add in (non)blocking thread pools", "bodyText": "https://issues.redhat.com/browse/ISPN-11292", "createdAt": "2020-02-07T16:49:23Z", "url": "https://github.com/infinispan/infinispan/pull/7860", "merged": true, "mergeCommit": {"oid": "5331ce165b37f3b60169d2f096a0a0dc3e70a754"}, "closed": true, "closedAt": "2020-02-19T13:37:00Z", "author": {"login": "wburns"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCCRetABqjMwMTgzNjIyOTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcF2iFCABqjMwNTE3NDUxMjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a61fa5b91d378bb8624dbfcf19e61e69c73c8bd", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/8a61fa5b91d378bb8624dbfcf19e61e69c73c8bd", "committedDate": "2020-02-07T16:45:41Z", "message": "ISPN-11292 Add in (non)blocking thread pools"}, "afterCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/16172b6018a70076bf5d5a7edc4b92b3295de80a", "committedDate": "2020-02-07T16:52:41Z", "message": "ISPN-11292 Add in (non)blocking thread pools"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTQzNTQz", "url": "https://github.com/infinispan/infinispan/pull/7860#pullrequestreview-355943543", "createdAt": "2020-02-10T13:42:20Z", "commit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0MjoyMFrOFnmbpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjo0NTo1N1rOFp1fPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw==", "bodyText": "I think the execution needs to stay on a non-blocking thread here, and only needs a new thread so that the thread that unlocked the keys can continue executing (possibly unlocking other keys, or sending back a response).\nSame thing in PerKeyLockContainer and StripedLockContainer.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r377068453", "createdAt": "2020-02-10T13:42:20Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/util/concurrent/locks/impl/DefaultLockManager.java", "diffHunk": "@@ -120,7 +120,7 @@ public KeyAwareLockPromise lockAll(Collection<?> keys, Object lockOwner, long ti\n                unit);\n       }\n \n-      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), executor);\n+      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), blockingExecutor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3Mjg0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               @Message(value = \"Thread Pool Factory %s is blocking, but the pool %s requires non blocking threads\", id = 566)\n          \n          \n            \n               @Message(value = \"Thread Pool Factory %s is blocking, but pool %s requires non blocking threads\", id = 566)", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r377072842", "createdAt": "2020-02-10T13:50:06Z", "author": {"login": "danberindei"}, "path": "core/src/main/java/org/infinispan/util/logging/Log.java", "diffHunk": "@@ -1921,8 +1921,8 @@ CacheConfigurationException offHeapMemoryEvictionSizeNotLargeEnoughForAddresses(\n    @Message(value = \"Index.LOCAL is no longer supported since version 10.0. Deprecated usages are automatically converted to Index.PRIMARY_OWNER. Please update your configuration!\", id = 565)\n    void indexLocalIsNotSupported();\n \n-   @Message(value = \"Thread Pool Factory %s is blocking, but this pool requires non blocking threads\", id = 566)\n-   CacheConfigurationException threadPoolFactoryIsBlocking(String name);\n+   @Message(value = \"Thread Pool Factory %s is blocking, but the pool %s requires non blocking threads\", id = 566)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MzY5Mw==", "bodyText": "keepalive-time is an attribute, not an element", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r377073693", "createdAt": "2020-02-10T13:51:42Z", "author": {"login": "danberindei"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -177,6 +177,37 @@\n           <xs:attribute name=\"queue-length\" type=\"xs:string\"/>\n         </xs:complexType>\n       </xs:element>\n+      <xs:element name=\"non-blocking-bounded-queue-thread-pool\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+        <xs:complexType>\n+          <xs:annotation>\n+            <xs:documentation>\n+              <![CDATA[\n+                A thread pool executor with a bounded queue which should only run non blocking operations.  Such a\n+                thread pool has a core size and a queue with an\n+                upper bound.  When a task is submitted, if the number of running threads is less than the core size,\n+                a new thread is created.  Otherwise, the task is placed in queue.  If too many tasks are allowed to be\n+                submitted to this type of executor, an out of memory condition may occur.\n+\n+                The \"name\" attribute is the bean name of the created executor.\n+\n+                The \"max-threads\" attribute must be used to specify the maximum thread pool size.\n+                The \"core-threads\" attribute defines the number of threads to keep in the pool.\n+\n+                The nested \"keepalive-time\" element may used to specify the amount of time that pool threads should", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NjU2OA==", "bodyText": "Maybe you should add a warning about having a queue that's too short as well?\nIMO it's pretty hard, if not impossible, to find the ideal queue size when core-threads < max-threads so that threads are created soon enough but tasks aren't rejected for no reason. In fact, before embracing the WildFly thread subsystem, we used to have a single setting for the number of threads and set core-threads == max-threads automatically when the executor had a queue.", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r377076568", "createdAt": "2020-02-10T13:56:48Z", "author": {"login": "danberindei"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -177,6 +177,37 @@\n           <xs:attribute name=\"queue-length\" type=\"xs:string\"/>\n         </xs:complexType>\n       </xs:element>\n+      <xs:element name=\"non-blocking-bounded-queue-thread-pool\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+        <xs:complexType>\n+          <xs:annotation>\n+            <xs:documentation>\n+              <![CDATA[\n+                A thread pool executor with a bounded queue which should only run non blocking operations.  Such a\n+                thread pool has a core size and a queue with an\n+                upper bound.  When a task is submitted, if the number of running threads is less than the core size,\n+                a new thread is created.  Otherwise, the task is placed in queue.  If too many tasks are allowed to be\n+                submitted to this type of executor, an out of memory condition may occur.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTA1MQ==", "bodyText": "I think the previous version was more accurate, because the definition is elsewhere.\nI suggest something more direct, like \"The name of the executor used for non-blocking operations. Must be non-blocking and must have a queue\" (how big?)", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379411051", "createdAt": "2020-02-14T12:42:59Z", "author": {"login": "danberindei"}, "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -322,37 +350,25 @@\n     <xs:attribute name=\"start\">\n       <xs:annotation><xs:documentation>Unused XML attribute</xs:documentation></xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"async-executor\" type=\"xs:string\">\n-      <xs:annotation>\n-        <xs:documentation>Defines the executor used for asynchronous cache operations.\n-        </xs:documentation>\n-      </xs:annotation>\n-    </xs:attribute>\n     <xs:attribute name=\"listener-executor\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>Defines the executor used for asynchronous cache listener notifications.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"eviction-executor\" type=\"xs:string\">\n-      <xs:annotation>\n-        <xs:documentation>DEPRECATED Defines the scheduled executor used for evictions.  The expiration-executor type should be used instead.</xs:documentation>\n-      </xs:annotation>\n-    </xs:attribute>\n     <xs:attribute name=\"expiration-executor\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>Defines the scheduled executor used for expirations.</xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"persistence-executor\" type=\"xs:string\">\n+    <xs:attribute name=\"non-blocking-executor\" type=\"xs:string\">\n       <xs:annotation>\n-        <xs:documentation>Configuration for the executor service used when interacting with the persistent store.</xs:documentation>\n+        <xs:documentation>Defines the executor used for non blocking operations. This is required to reference a non blocking queued executor.</xs:documentation>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef5c12f64fb29329c799c7b0131b4c1512f581f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTMxNA==", "bodyText": "No assert for the new executors?", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379411314", "createdAt": "2020-02-14T12:43:35Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/configuration/JsonSerializationTest.java", "diffHunk": "@@ -299,9 +299,9 @@ public void testFullConfig() throws Exception {\n       assertEquals(\"REGISTER\", cacheContainer.get(\"shutdown-hook\").asText());\n       assertTrue(cacheContainer.get(\"statistics\").asBoolean());\n       assertEquals(\"listener\", cacheContainer.get(\"listener-executor\").asText());\n-      assertEquals(\"persistence\", cacheContainer.get(\"persistence-executor\").asText());\n+      assertNull(cacheContainer.get(\"persistence-executor\"));\n       assertNull(cacheContainer.get(\"state-transfer-executor\"));\n-      assertEquals(\"async\", cacheContainer.get(\"async-executor\").asText());\n+      assertNull(cacheContainer.get(\"async-executor\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef5c12f64fb29329c799c7b0131b4c1512f581f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMjI4Ng==", "bodyText": "Should check the new executors instead", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379412286", "createdAt": "2020-02-14T12:45:57Z", "author": {"login": "danberindei"}, "path": "core/src/test/java/org/infinispan/configuration/XmlFileParsingTest.java", "diffHunk": "@@ -364,20 +364,11 @@ private void assertNamedCacheFile(ConfigurationBuilderHolder holder, boolean dep\n \n       BlockingThreadPoolExecutorFactory persistenceThreadPool =\n          gc.persistenceThreadPool().threadPoolFactory();\n-      assertEquals(6, persistenceThreadPool.maxThreads());\n-      assertEquals(10001, persistenceThreadPool.queueLength());\n-      DefaultThreadFactory persistenceThreadFactory =\n-         gc.persistenceThreadPool().threadFactory();\n-      assertEquals(\"PersistenceThread\", persistenceThreadFactory.threadNamePattern());\n+      assertNull(persistenceThreadPool);\n \n       BlockingThreadPoolExecutorFactory asyncThreadPool =\n          gc.asyncThreadPool().threadPoolFactory();\n-      assertEquals(5, asyncThreadPool.coreThreads());\n-      assertEquals(5, asyncThreadPool.maxThreads());\n-      assertEquals(10000, asyncThreadPool.queueLength());\n-      assertEquals(0, asyncThreadPool.keepAlive());\n-      DefaultThreadFactory asyncThreadFactory = gc.asyncThreadPool().threadFactory();\n-      assertEquals(\"AsyncOperationsThread\", asyncThreadFactory.threadNamePattern());\n+      assertNull(asyncThreadPool);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6f8304d969cad04d4381cae839a4a9c70522b3a"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6f8304d969cad04d4381cae839a4a9c70522b3a", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/a6f8304d969cad04d4381cae839a4a9c70522b3a", "committedDate": "2020-02-11T17:21:55Z", "message": "more serializer fixes"}, "afterCommit": {"oid": "80d7159f2c86b876841c8988742540aebd70b701", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/80d7159f2c86b876841c8988742540aebd70b701", "committedDate": "2020-02-14T18:38:10Z", "message": "Review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "80d7159f2c86b876841c8988742540aebd70b701", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/80d7159f2c86b876841c8988742540aebd70b701", "committedDate": "2020-02-14T18:38:10Z", "message": "Review comments"}, "afterCommit": {"oid": "f703736f41b67a3f4c3dbb89356234de17b7125d", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/f703736f41b67a3f4c3dbb89356234de17b7125d", "committedDate": "2020-02-18T17:53:42Z", "message": "Review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f703736f41b67a3f4c3dbb89356234de17b7125d", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/f703736f41b67a3f4c3dbb89356234de17b7125d", "committedDate": "2020-02-18T17:53:42Z", "message": "Review comments"}, "afterCommit": {"oid": "a34526a96e42d23a962673854a3376b88bfb1030", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/a34526a96e42d23a962673854a3376b88bfb1030", "committedDate": "2020-02-19T13:19:16Z", "message": "ISPN-11292 Add in (non)blocking thread pools"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3635464e11d189b85e8757284edc1d973639b0b3", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/3635464e11d189b85e8757284edc1d973639b0b3", "committedDate": "2020-02-19T13:27:42Z", "message": "ISPN-11292 Add in (non)blocking thread pools"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a34526a96e42d23a962673854a3376b88bfb1030", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/a34526a96e42d23a962673854a3376b88bfb1030", "committedDate": "2020-02-19T13:19:16Z", "message": "ISPN-11292 Add in (non)blocking thread pools"}, "afterCommit": {"oid": "3635464e11d189b85e8757284edc1d973639b0b3", "author": {"user": {"login": "wburns", "name": "William Burns"}}, "url": "https://github.com/infinispan/infinispan/commit/3635464e11d189b85e8757284edc1d973639b0b3", "committedDate": "2020-02-19T13:27:42Z", "message": "ISPN-11292 Add in (non)blocking thread pools"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1323, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}