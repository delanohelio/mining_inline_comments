{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMzQwNjkz", "number": 8075, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo1MTozOVrODt0Ynw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo1MTozOVrODt0Ynw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzcwNzgzOnYy", "diffSide": "RIGHT", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/operations/PrepareTransactionOperation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo1MTozOVrOF_dgFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDoyNDowNVrOGFIKag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4Nzk1Nw==", "bodyText": "I'd simplify this to only use the key owner on the first try.\nIMO retries should be rare enough that we shouldn't worry about the server we're retrying on being a key owner, and we're going to send the request to an unrelated server anyway if the 2nd modification's key is owned by the failed server.", "url": "https://github.com/infinispan/infinispan/pull/8075#discussion_r402087957", "createdAt": "2020-04-02T06:51:39Z", "author": {"login": "danberindei"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/operations/PrepareTransactionOperation.java", "diffHunk": "@@ -80,8 +82,18 @@ protected void executeOperation(Channel channel) {\n       channel.writeAndFlush(buf);\n    }\n \n+   @Override\n+   protected void fetchChannelAndInvoke(int retryCount, Set<SocketAddress> failedServers) {\n+      if (retryCount < modifications.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e89abf508a21e6e2767d811af82ebb4a1881c37"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyNTI0OA==", "bodyText": "I don't see any advantage in doing that.\nIf there is a chance of hitting a primary owner of some key, I'll take it.\nIf you are worried about modifications.size(), the list is an ArrayList; it just reads a field.", "url": "https://github.com/infinispan/infinispan/pull/8075#discussion_r402125248", "createdAt": "2020-04-02T08:04:59Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/operations/PrepareTransactionOperation.java", "diffHunk": "@@ -80,8 +82,18 @@ protected void executeOperation(Channel channel) {\n       channel.writeAndFlush(buf);\n    }\n \n+   @Override\n+   protected void fetchChannelAndInvoke(int retryCount, Set<SocketAddress> failedServers) {\n+      if (retryCount < modifications.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4Nzk1Nw=="}, "originalCommit": {"oid": "6e89abf508a21e6e2767d811af82ebb4a1881c37"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MjMzNQ==", "bodyText": "I wasn't worried about size(), I was just thinking it's simpler if we use the same logic here as we use for other multi-key operations:\n\n  \n    \n      infinispan/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/operations/PutAllOperation.java\n    \n    \n         Line 76\n      in\n      a2a183a\n    \n    \n    \n    \n\n        \n          \n           channelFactory.fetchChannelAndInvoke(map.keySet().iterator().next(), failedServers, cacheName, this);", "url": "https://github.com/infinispan/infinispan/pull/8075#discussion_r407992335", "createdAt": "2020-04-14T09:23:33Z", "author": {"login": "danberindei"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/operations/PrepareTransactionOperation.java", "diffHunk": "@@ -80,8 +82,18 @@ protected void executeOperation(Channel channel) {\n       channel.writeAndFlush(buf);\n    }\n \n+   @Override\n+   protected void fetchChannelAndInvoke(int retryCount, Set<SocketAddress> failedServers) {\n+      if (retryCount < modifications.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4Nzk1Nw=="}, "originalCommit": {"oid": "6e89abf508a21e6e2767d811af82ebb4a1881c37"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyOTgwMg==", "bodyText": "@danberindei  done.", "url": "https://github.com/infinispan/infinispan/pull/8075#discussion_r408029802", "createdAt": "2020-04-14T10:24:05Z", "author": {"login": "pruivo"}, "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/operations/PrepareTransactionOperation.java", "diffHunk": "@@ -80,8 +82,18 @@ protected void executeOperation(Channel channel) {\n       channel.writeAndFlush(buf);\n    }\n \n+   @Override\n+   protected void fetchChannelAndInvoke(int retryCount, Set<SocketAddress> failedServers) {\n+      if (retryCount < modifications.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4Nzk1Nw=="}, "originalCommit": {"oid": "6e89abf508a21e6e2767d811af82ebb4a1881c37"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4330, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}