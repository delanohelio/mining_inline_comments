{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTE1MzQy", "number": 5843, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowMjozM1rOD4YBgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToyMzowMFrOD5CdPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDQwNDQ5OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepositoryDbQueryCallback.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowMjozM1rOGPKhLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowMjozM1rOGPKhLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NDE1OQ==", "bodyText": "There is a mismatch between making this interface public while the methods on CentralRepository that user it are package-private.", "url": "https://github.com/sleuthkit/autopsy/pull/5843#discussion_r418554159", "createdAt": "2020-05-01T14:02:33Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepositoryDbQueryCallback.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2015-2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+/**\n+ * An interface to process the resultset from a Central Repository DB query.\n+ * This enables clients of Central Repository to run custom queries and process\n+ * the results themselves.\n+ *\n+ */\n+public interface CentralRepositoryDbQueryCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d542ac7ce9a2e0350dadfc2eca601ad7f6ee0303"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDcyMjYzOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo1NjoyMVrOGPNn-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo1NjoyMVrOGPNn-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwNTA1MA==", "bodyText": "See discussion in Jira.", "url": "https://github.com/sleuthkit/autopsy/pull/5843#discussion_r418605050", "createdAt": "2020-05-01T15:56:21Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepository.java", "diffHunk": "@@ -159,6 +161,23 @@ static boolean isEnabled() {\n      * @param eamCase The case to update\n      */\n     void updateCase(CorrelationCase eamCase) throws CentralRepoException;\n+    \n+    /**\n+     * Updates the examiners table, by adding current logged in user to\n+     * examiners table, if not already in there.\n+     * \n+     * @throws CentralRepoException If there is an error.\n+     *\n+     */\n+    void updateExaminers() throws CentralRepoException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d542ac7ce9a2e0350dadfc2eca601ad7f6ee0303"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDcyNjExOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo1NzoyMFrOGPNp6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoyNzo1OVrOGQIJpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwNTU0NA==", "bodyText": "The only place this method, which exposes implementation details, appears to be called outside of the implementations of this interface is in test code where it is called on a newly created database that should have empty caches. Do we need to expose this method as part of this interface?", "url": "https://github.com/sleuthkit/autopsy/pull/5843#discussion_r418605544", "createdAt": "2020-05-01T15:57:20Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepository.java", "diffHunk": "@@ -828,4 +874,8 @@ CorrelationAttributeInstance getCorrelationAttributeInstance(CorrelationAttribut\n     CentralRepoAccount getOrCreateAccount(CentralRepoAccount.CentralRepoAccountType crAccountType, String accountUniqueID) throws CentralRepoException;\n     \n              \n+    /**\n+     * Clears all caches.\n+     */\n+    void clearCaches();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d542ac7ce9a2e0350dadfc2eca601ad7f6ee0303"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2Mzk0MA==", "bodyText": "As it happens, although the setup() method in the test that gets called between EVERY test method wipes out the underlying database before the start of each test, the CentralRepository object, as returned by CentralRepository.getInstance(), is only created once.  With each invocation of the setup method, the caches held by the CentralRepository instance go out of sync and inconsistent with the database, causing errors due to database integrity.\nSince we've taken out caching of Examiners, this may not be necessary at the moment though.", "url": "https://github.com/sleuthkit/autopsy/pull/5843#discussion_r419563940", "createdAt": "2020-05-04T16:27:59Z", "author": {"login": "raman-bt"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepository.java", "diffHunk": "@@ -828,4 +874,8 @@ CorrelationAttributeInstance getCorrelationAttributeInstance(CorrelationAttribut\n     CentralRepoAccount getOrCreateAccount(CentralRepoAccount.CentralRepoAccountType crAccountType, String accountUniqueID) throws CentralRepoException;\n     \n              \n+    /**\n+     * Clears all caches.\n+     */\n+    void clearCaches();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwNTU0NA=="}, "originalCommit": {"oid": "d542ac7ce9a2e0350dadfc2eca601ad7f6ee0303"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDgyNjkxOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/Persona.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjozNDozMFrOGPOp6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjozNDozMFrOGPOp6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMTkzMA==", "bodyText": "What is the intended use of this string? This seems to force the UI to check for \"NoName\" and either put empty text in the UI or swap in something more human readable. From a data modeling perspective, NULL seems more standard and it makes sense in terms of separation of the data layer from the presentation layer to allow the UI decide how to display NULL optional data.", "url": "https://github.com/sleuthkit/autopsy/pull/5843#discussion_r418621930", "createdAt": "2020-05-01T16:34:30Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/Persona.java", "diffHunk": "@@ -79,9 +101,578 @@ public String toString() {\n             return description;\n         }\n \n-        public int getStatus() {\n+        public int getStatusId() {\n             return this.status_id;\n         }\n+\n+        static PersonaStatus fromId(int value) {\n+            for (PersonaStatus status : PersonaStatus.values()) {\n+                if (status.getStatusId() == value) {\n+                    return status;\n+                }\n+            }\n+            return PersonaStatus.UNKNOWN;\n+        }\n+    }\n+\n+    // Persona name to use if no name is specified.\n+    private static final String DEFAULT_PERSONA_NAME = \"NoName\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d542ac7ce9a2e0350dadfc2eca601ad7f6ee0303"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDM4NjE4OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoExaminer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMToyMToxOFrOGP8GlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMToyMToxOFrOGP8GlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM2NjU0OQ==", "bodyText": "I don't believe we have any way of populating this displayName field in the database or this class at this time. It is not in the ERD. What is the use case envisioned for it? I think we can leave the table column alone since it already exists in the last release, but we can ignore it in this class.", "url": "https://github.com/sleuthkit/autopsy/pull/5843#discussion_r419366549", "createdAt": "2020-05-04T11:21:18Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoExaminer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+/**\n+ * Encapsulates the concept of an examiner.\n+ */\n+final public class CentralRepoExaminer {\n+\n+    private final long id;  // Row id in the examiners table in central repo database.\n+    private final String loginName;\n+    private final String displayName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c682739d8ea74a032f8026d6986e152b568b98fc"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDM5MzgzOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMToyNDoxNFrOGP8LWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMToyNDoxNFrOGP8LWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM2Nzc3MA==", "bodyText": "See discussion in Jira.", "url": "https://github.com/sleuthkit/autopsy/pull/5843#discussion_r419367770", "createdAt": "2020-05-04T11:24:14Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepository.java", "diffHunk": "@@ -159,6 +160,23 @@ static boolean isEnabled() {\n      * @param eamCase The case to update\n      */\n     void updateCase(CorrelationCase eamCase) throws CentralRepoException;\n+    \n+    /**\n+     * Updates the examiners table, by adding current logged in user to\n+     * examiners table, if not already in there.\n+     * \n+     * @throws CentralRepoException If there is an error.\n+     *\n+     */\n+    void updateExaminers() throws CentralRepoException;\n+\n+    /**\n+     * Get the Examiner object for the current logged in user.\n+     *\n+     * @return Examiner Current examiner.\n+     * @throws CentralRepoException\n+     */\n+    CentralRepoExaminer getCurrentCentralRepoExaminer() throws CentralRepoException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c682739d8ea74a032f8026d6986e152b568b98fc"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDQzNTI2OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepositoryDbQueryCallback.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTozODoyOFrOGP8k-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTozODoyOFrOGP8k-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3NDMzMQ==", "bodyText": "This is a new file, the copyright should start in 2020.", "url": "https://github.com/sleuthkit/autopsy/pull/5843#discussion_r419374331", "createdAt": "2020-05-04T11:38:28Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepositoryDbQueryCallback.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2015-2020 Basis Technology Corp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c682739d8ea74a032f8026d6986e152b568b98fc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDUwMjAwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/Persona.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjowMToxMFrOGP9OHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjowMToxMFrOGP9OHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NDg2Mg==", "bodyText": "This method appears to be unused and able to be removed.", "url": "https://github.com/sleuthkit/autopsy/pull/5843#discussion_r419384862", "createdAt": "2020-05-04T12:01:10Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/Persona.java", "diffHunk": "@@ -79,9 +100,626 @@ public String toString() {\n             return description;\n         }\n \n-        public int getStatus() {\n+        public int getStatusId() {\n             return this.status_id;\n         }\n+\n+        static PersonaStatus fromId(int value) {\n+            for (PersonaStatus status : PersonaStatus.values()) {\n+                if (status.getStatusId() == value) {\n+                    return status;\n+                }\n+            }\n+            return PersonaStatus.UNKNOWN;\n+        }\n+    }\n+\n+    // Persona name to use if no name is specified.\n+    private static final String DEFAULT_PERSONA_NAME = \"NoName\";\n+\n+    // primary key in the Personas table in CR database\n+    private final long id;\n+    private final String uuidStr;\n+    private final String name;\n+    private final String comment;\n+    private final long createdDate;\n+    private final long modifiedDate;\n+    private final PersonaStatus status;\n+    private final CentralRepoExaminer examiner;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getUuidStr() {\n+        return uuidStr;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getComment() {\n+        return comment;\n+    }\n+\n+    public long getCreatedDate() {\n+        return createdDate;\n+    }\n+\n+    public long getModifiedDate() {\n+        return modifiedDate;\n+    }\n+\n+    public PersonaStatus getStatus() {\n+        return status;\n+    }\n+\n+    public CentralRepoExaminer getExaminer() {\n+        return examiner;\n+    }\n+\n+    Persona(long id, String uuidStr, String name, String comment, long created_date, long modified_date, PersonaStatus status, CentralRepoExaminer examiner) {\n+        this.id = id;\n+        this.uuidStr = uuidStr;\n+        this.name = name;\n+        this.comment = comment;\n+        this.createdDate = created_date;\n+        this.modifiedDate = modified_date;\n+        this.status = status;\n+        this.examiner = examiner;\n+    }\n+\n+    /**\n+     * Creates a Persona and associates the specified account with it.\n+     *\n+     * @param personaName Persona name.\n+     * @param comment Comment to associate with persona, may be null.\n+     * @param status Persona status\n+     * @param account Account for which the persona is being created.\n+     * @param justification Justification for why this account belongs to this\n+     * persona, may be null.\n+     * @param confidence Confidence level for this association of Persona &\n+     * account.\n+     *\n+     * @return PersonaAccount\n+     * @throws CentralRepoException If there is an error creating the Persona.\n+     */\n+    public static PersonaAccount createPersonaForAccount(String personaName, String comment, PersonaStatus status, CentralRepoAccount account, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+        Persona persona = createPersona(personaName, comment, status);\n+        return persona.addAccountToPersona(account, justification, confidence);\n+    }\n+\n+    /**\n+     * Inserts a row in the Persona tables.\n+     *\n+     * @param name Persona name, may be null - default name is used in that\n+     * case.\n+     * @param comment Comment to associate with persona, may be null.\n+     * @param status Persona status.\n+     *\n+     * @return Persona corresponding to the row inserted in the personas table.\n+     *\n+     * @throws CentralRepoException If there is an error in adding a row to\n+     * personas table.\n+     */\n+    private static Persona createPersona(String name, String comment, PersonaStatus status) throws CentralRepoException {\n+        // generate a UUID for the persona\n+        String uuidStr = UUID.randomUUID().toString();\n+        CentralRepoExaminer examiner = CentralRepository.getInstance().getCurrentCentralRepoExaminer();\n+\n+        Instant instant = Instant.now();\n+        Long timeStampMillis = instant.toEpochMilli();\n+        String insertClause = \" INTO personas (uuid, comment, name, created_date, modified_date, status_id, examiner_id ) \"\n+                + \"VALUES ( '\" + uuidStr + \"', \"\n+                + \"'\" + ((StringUtils.isBlank(comment) ? \"\" : SleuthkitCase.escapeSingleQuotes(comment))) + \"',\"\n+                + \"'\" + ((StringUtils.isBlank(name) ? DEFAULT_PERSONA_NAME : SleuthkitCase.escapeSingleQuotes(name))) + \"',\"\n+                + timeStampMillis.toString() + \",\"\n+                + timeStampMillis.toString() + \",\"\n+                + status.getStatusId() + \",\"\n+                + examiner.getId()\n+                + \")\";\n+\n+        CentralRepository.getInstance().executeInsertSQL(insertClause);\n+        return getPersonaByUUID(uuidStr);\n+    }\n+\n+    /**\n+     * Associates an account with a persona by creating a row in the\n+     * PersonaAccounts table.\n+     *\n+     * @param persona Persona to add the account to.\n+     * @param account Account to add to persona.\n+     * @param justification Reason for adding the account to persona, may be\n+     * null.\n+     * @param confidence Confidence level.\n+     *\n+     * @return PersonaAccount\n+     * @throws CentralRepoException If there is an error.\n+     */\n+    public PersonaAccount addAccountToPersona(CentralRepoAccount account, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+\n+        CentralRepoExaminer currentExaminer = CentralRepository.getInstance().getCurrentCentralRepoExaminer();\n+\n+        Instant instant = Instant.now();\n+        Long timeStampMillis = instant.toEpochMilli();\n+        String insertClause = \" INTO persona_accounts (persona_id, account_id, justification, confidence_id, date_added, examiner_id ) \"\n+                + \"VALUES ( \"\n+                + this.getId() + \", \"\n+                + account.getAccountId() + \", \"\n+                + \"'\" + ((StringUtils.isBlank(justification) ? \"\" : SleuthkitCase.escapeSingleQuotes(justification))) + \"', \"\n+                + confidence.getLevelId() + \", \"\n+                + timeStampMillis.toString() + \", \"\n+                + currentExaminer.getId()\n+                + \")\";\n+\n+        CentralRepository.getInstance().executeInsertSQL(insertClause);\n+        return new PersonaAccount(this, account, justification, confidence, timeStampMillis, currentExaminer);\n+    }\n+\n+    /**\n+     * Callback to process a Persona query from the persona table.\n+     */\n+    private static class PersonaQueryCallback implements CentralRepositoryDbQueryCallback {\n+\n+        private final Collection<Persona> personaList =  new ArrayList<>();\n+\n+        @Override\n+        public void process(ResultSet rs) throws SQLException {\n+\n+            while (rs.next()) {\n+                CentralRepoExaminer examiner = new CentralRepoExaminer(\n+                        rs.getInt(\"examiner_id\"),\n+                        rs.getString(\"login_name\"),\n+                        rs.getString(\"display_name\"));\n+\n+                PersonaStatus status = PersonaStatus.fromId(rs.getInt(\"status_id\"));\n+                Persona persona = new Persona(\n+                        rs.getInt(\"id\"),\n+                        rs.getString(\"uuid\"),\n+                        rs.getString(\"name\"),\n+                        rs.getString(\"comment\"),\n+                        Long.parseLong(rs.getString(\"created_date\")),\n+                        Long.parseLong(rs.getString(\"modified_date\")),\n+                        status,\n+                        examiner\n+                );\n+                \n+                personaList.add(persona);\n+            }\n+        }\n+\n+        Collection<Persona> getPersonas() {\n+            return Collections.unmodifiableCollection(personaList);\n+        }\n+    };\n+\n+    // Partial query string to select from personas table, \n+    // just supply the where clause.\n+    private static final String PERSONA_QUERY = \n+                  \"SELECT p.id, p.uuid, p.name, p.comment, p.created_date, p.modified_date, p.status_id, p.examiner_id, e.login_name, e.display_name \"\n+                + \"FROM personas as p \"\n+                + \"INNER JOIN examiners as e ON e.id = p.examiner_id \";\n+              \n+     \n+    /**\n+     * Gets the row from the Personas table with the given UUID, creates and\n+     * returns the Persona from that data.\n+     *\n+     * @param uuid Persona UUID to match.\n+     * @return Persona matching the given UUID, may be null if no match is\n+     * found.\n+     *\n+     * @throws CentralRepoException If there is an error in querying the\n+     * Personas table.\n+     */\n+    private static Persona getPersonaByUUID(String uuid) throws CentralRepoException {\n+\n+        String queryClause = \n+                PERSONA_QUERY\n+                + \"WHERE p.uuid = '\" + uuid + \"'\";\n+\n+        PersonaQueryCallback queryCallback = new PersonaQueryCallback();\n+        CentralRepository.getInstance().executeSelectSQL(queryClause, queryCallback);\n+\n+        Collection<Persona> personas = queryCallback.getPersonas();\n+        \n+        Persona persona = personas.isEmpty() ? null : personas.iterator().next();\n+        return persona;\n+    }\n+\n+    /**\n+     * Gets the row from the Personas table with the given id, creates and\n+     * returns the Persona from that data.\n+     *\n+     * @param id Persona id to match.\n+     * @return Persona matching the given UUID, may be null if no match is\n+     * found.\n+     *\n+     * @throws CentralRepoException If there is an error in querying the\n+     * Personas table.\n+     */\n+    public static Persona getPersonaById(long id) throws CentralRepoException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c682739d8ea74a032f8026d6986e152b568b98fc"}, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTEwNDgwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/Persona.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoyNzo1MVrOGQC69w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoyNzo1MVrOGQC69w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3ODI2Mw==", "bodyText": "This method seems misplaced here. Does it add anything vs. just calling the PersonaAccount API directly?", "url": "https://github.com/sleuthkit/autopsy/pull/5843#discussion_r419478263", "createdAt": "2020-05-04T14:27:51Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/Persona.java", "diffHunk": "@@ -79,9 +100,626 @@ public String toString() {\n             return description;\n         }\n \n-        public int getStatus() {\n+        public int getStatusId() {\n             return this.status_id;\n         }\n+\n+        static PersonaStatus fromId(int value) {\n+            for (PersonaStatus status : PersonaStatus.values()) {\n+                if (status.getStatusId() == value) {\n+                    return status;\n+                }\n+            }\n+            return PersonaStatus.UNKNOWN;\n+        }\n+    }\n+\n+    // Persona name to use if no name is specified.\n+    private static final String DEFAULT_PERSONA_NAME = \"NoName\";\n+\n+    // primary key in the Personas table in CR database\n+    private final long id;\n+    private final String uuidStr;\n+    private final String name;\n+    private final String comment;\n+    private final long createdDate;\n+    private final long modifiedDate;\n+    private final PersonaStatus status;\n+    private final CentralRepoExaminer examiner;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getUuidStr() {\n+        return uuidStr;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getComment() {\n+        return comment;\n+    }\n+\n+    public long getCreatedDate() {\n+        return createdDate;\n+    }\n+\n+    public long getModifiedDate() {\n+        return modifiedDate;\n+    }\n+\n+    public PersonaStatus getStatus() {\n+        return status;\n+    }\n+\n+    public CentralRepoExaminer getExaminer() {\n+        return examiner;\n+    }\n+\n+    Persona(long id, String uuidStr, String name, String comment, long created_date, long modified_date, PersonaStatus status, CentralRepoExaminer examiner) {\n+        this.id = id;\n+        this.uuidStr = uuidStr;\n+        this.name = name;\n+        this.comment = comment;\n+        this.createdDate = created_date;\n+        this.modifiedDate = modified_date;\n+        this.status = status;\n+        this.examiner = examiner;\n+    }\n+\n+    /**\n+     * Creates a Persona and associates the specified account with it.\n+     *\n+     * @param personaName Persona name.\n+     * @param comment Comment to associate with persona, may be null.\n+     * @param status Persona status\n+     * @param account Account for which the persona is being created.\n+     * @param justification Justification for why this account belongs to this\n+     * persona, may be null.\n+     * @param confidence Confidence level for this association of Persona &\n+     * account.\n+     *\n+     * @return PersonaAccount\n+     * @throws CentralRepoException If there is an error creating the Persona.\n+     */\n+    public static PersonaAccount createPersonaForAccount(String personaName, String comment, PersonaStatus status, CentralRepoAccount account, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+        Persona persona = createPersona(personaName, comment, status);\n+        return persona.addAccountToPersona(account, justification, confidence);\n+    }\n+\n+    /**\n+     * Inserts a row in the Persona tables.\n+     *\n+     * @param name Persona name, may be null - default name is used in that\n+     * case.\n+     * @param comment Comment to associate with persona, may be null.\n+     * @param status Persona status.\n+     *\n+     * @return Persona corresponding to the row inserted in the personas table.\n+     *\n+     * @throws CentralRepoException If there is an error in adding a row to\n+     * personas table.\n+     */\n+    private static Persona createPersona(String name, String comment, PersonaStatus status) throws CentralRepoException {\n+        // generate a UUID for the persona\n+        String uuidStr = UUID.randomUUID().toString();\n+        CentralRepoExaminer examiner = CentralRepository.getInstance().getCurrentCentralRepoExaminer();\n+\n+        Instant instant = Instant.now();\n+        Long timeStampMillis = instant.toEpochMilli();\n+        String insertClause = \" INTO personas (uuid, comment, name, created_date, modified_date, status_id, examiner_id ) \"\n+                + \"VALUES ( '\" + uuidStr + \"', \"\n+                + \"'\" + ((StringUtils.isBlank(comment) ? \"\" : SleuthkitCase.escapeSingleQuotes(comment))) + \"',\"\n+                + \"'\" + ((StringUtils.isBlank(name) ? DEFAULT_PERSONA_NAME : SleuthkitCase.escapeSingleQuotes(name))) + \"',\"\n+                + timeStampMillis.toString() + \",\"\n+                + timeStampMillis.toString() + \",\"\n+                + status.getStatusId() + \",\"\n+                + examiner.getId()\n+                + \")\";\n+\n+        CentralRepository.getInstance().executeInsertSQL(insertClause);\n+        return getPersonaByUUID(uuidStr);\n+    }\n+\n+    /**\n+     * Associates an account with a persona by creating a row in the\n+     * PersonaAccounts table.\n+     *\n+     * @param persona Persona to add the account to.\n+     * @param account Account to add to persona.\n+     * @param justification Reason for adding the account to persona, may be\n+     * null.\n+     * @param confidence Confidence level.\n+     *\n+     * @return PersonaAccount\n+     * @throws CentralRepoException If there is an error.\n+     */\n+    public PersonaAccount addAccountToPersona(CentralRepoAccount account, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+\n+        CentralRepoExaminer currentExaminer = CentralRepository.getInstance().getCurrentCentralRepoExaminer();\n+\n+        Instant instant = Instant.now();\n+        Long timeStampMillis = instant.toEpochMilli();\n+        String insertClause = \" INTO persona_accounts (persona_id, account_id, justification, confidence_id, date_added, examiner_id ) \"\n+                + \"VALUES ( \"\n+                + this.getId() + \", \"\n+                + account.getAccountId() + \", \"\n+                + \"'\" + ((StringUtils.isBlank(justification) ? \"\" : SleuthkitCase.escapeSingleQuotes(justification))) + \"', \"\n+                + confidence.getLevelId() + \", \"\n+                + timeStampMillis.toString() + \", \"\n+                + currentExaminer.getId()\n+                + \")\";\n+\n+        CentralRepository.getInstance().executeInsertSQL(insertClause);\n+        return new PersonaAccount(this, account, justification, confidence, timeStampMillis, currentExaminer);\n+    }\n+\n+    /**\n+     * Callback to process a Persona query from the persona table.\n+     */\n+    private static class PersonaQueryCallback implements CentralRepositoryDbQueryCallback {\n+\n+        private final Collection<Persona> personaList =  new ArrayList<>();\n+\n+        @Override\n+        public void process(ResultSet rs) throws SQLException {\n+\n+            while (rs.next()) {\n+                CentralRepoExaminer examiner = new CentralRepoExaminer(\n+                        rs.getInt(\"examiner_id\"),\n+                        rs.getString(\"login_name\"),\n+                        rs.getString(\"display_name\"));\n+\n+                PersonaStatus status = PersonaStatus.fromId(rs.getInt(\"status_id\"));\n+                Persona persona = new Persona(\n+                        rs.getInt(\"id\"),\n+                        rs.getString(\"uuid\"),\n+                        rs.getString(\"name\"),\n+                        rs.getString(\"comment\"),\n+                        Long.parseLong(rs.getString(\"created_date\")),\n+                        Long.parseLong(rs.getString(\"modified_date\")),\n+                        status,\n+                        examiner\n+                );\n+                \n+                personaList.add(persona);\n+            }\n+        }\n+\n+        Collection<Persona> getPersonas() {\n+            return Collections.unmodifiableCollection(personaList);\n+        }\n+    };\n+\n+    // Partial query string to select from personas table, \n+    // just supply the where clause.\n+    private static final String PERSONA_QUERY = \n+                  \"SELECT p.id, p.uuid, p.name, p.comment, p.created_date, p.modified_date, p.status_id, p.examiner_id, e.login_name, e.display_name \"\n+                + \"FROM personas as p \"\n+                + \"INNER JOIN examiners as e ON e.id = p.examiner_id \";\n+              \n+     \n+    /**\n+     * Gets the row from the Personas table with the given UUID, creates and\n+     * returns the Persona from that data.\n+     *\n+     * @param uuid Persona UUID to match.\n+     * @return Persona matching the given UUID, may be null if no match is\n+     * found.\n+     *\n+     * @throws CentralRepoException If there is an error in querying the\n+     * Personas table.\n+     */\n+    private static Persona getPersonaByUUID(String uuid) throws CentralRepoException {\n+\n+        String queryClause = \n+                PERSONA_QUERY\n+                + \"WHERE p.uuid = '\" + uuid + \"'\";\n+\n+        PersonaQueryCallback queryCallback = new PersonaQueryCallback();\n+        CentralRepository.getInstance().executeSelectSQL(queryClause, queryCallback);\n+\n+        Collection<Persona> personas = queryCallback.getPersonas();\n+        \n+        Persona persona = personas.isEmpty() ? null : personas.iterator().next();\n+        return persona;\n+    }\n+\n+    /**\n+     * Gets the row from the Personas table with the given id, creates and\n+     * returns the Persona from that data.\n+     *\n+     * @param id Persona id to match.\n+     * @return Persona matching the given UUID, may be null if no match is\n+     * found.\n+     *\n+     * @throws CentralRepoException If there is an error in querying the\n+     * Personas table.\n+     */\n+    public static Persona getPersonaById(long id) throws CentralRepoException {\n+\n+        String queryClause = PERSONA_QUERY\n+                + \"WHERE p.id = \" + id;\n+\n+        PersonaQueryCallback queryCallback = new PersonaQueryCallback();\n+        CentralRepository.getInstance().executeSelectSQL(queryClause, queryCallback);\n+\n+        Collection<Persona> personas = queryCallback.getPersonas();\n+        \n+        return personas.isEmpty() ? null : personas.iterator().next();\n+    }\n+\n+    /**\n+     * Gets the rows from the Personas table with matching name.\n+     *\n+     * @param partialName Name substring to match.\n+     * @return Collection of personas matching the given name substring, may be\n+     * empty if no match is found.\n+     *\n+     * @throws CentralRepoException If there is an error in querying the\n+     * Personas table.\n+     */\n+    public static Collection<Persona> getPersonaByName(String partialName) throws CentralRepoException {\n+\n+        String queryClause = PERSONA_QUERY\n+                + \"WHERE LOWER(p.name) LIKE \" + \"LOWER('%\" + partialName + \"%')\" ;\n+\n+        PersonaQueryCallback queryCallback = new PersonaQueryCallback();\n+        CentralRepository.getInstance().executeSelectSQL(queryClause, queryCallback);\n+\n+        return queryCallback.getPersonas();\n+    }\n+    \n+    /**\n+     * Creates an alias for the Persona.\n+     *\n+     * @param alias Alias name.\n+     * @param justification Reason for assigning the alias, may be null.\n+     * @param confidence Confidence level.\n+     *\n+     * @return PersonaAlias\n+     * @throws CentralRepoException If there is an error in creating the alias.\n+     */\n+    public PersonaAlias addAlias(String alias, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+        return PersonaAlias.addPersonaAlias(this, alias, justification, confidence);\n+    }\n+\n+    /**\n+     * Gets all aliases for the persona.\n+     *\n+     * @return A collection of aliases, may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in retrieving aliases.\n+     */\n+    public Collection<PersonaAlias> getAliases() throws CentralRepoException {\n+        return PersonaAlias.getPersonaAliases(this.getId());\n+    }\n+\n+    /**\n+     * Adds specified metadata to the persona.\n+     *\n+     * @param name Metadata name.\n+     * @param value Metadata value.\n+     * @param justification Reason for adding the metadata, may be null.\n+     * @param confidence Confidence level.\n+     *\n+     * @return PersonaMetadata\n+     * @throws CentralRepoException If there is an error in adding metadata.\n+     */\n+    public PersonaMetadata addMetadata(String name, String value, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+        return PersonaMetadata.addPersonaMetadata(this.getId(), name, value, justification, confidence);\n+    }\n+\n+    /**\n+     * Gets all metadata for the persona.\n+     *\n+     * @return A collection of metadata, may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in retrieving aliases.\n+     */\n+    public Collection<PersonaMetadata> getMetadata() throws CentralRepoException {\n+        return PersonaMetadata.getPersonaMetadata(this.getId());\n+    }\n+\n+    /**\n+     * Gets all the Accounts for the Persona.\n+     *\n+     * @return Collection of PersonaAccounts, may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in getting the\n+     * persona_account.\n+     */\n+    public Collection<PersonaAccount> getPersonaAccounts() throws CentralRepoException {\n+        return PersonaAccount.getPersonaAccountsForPersona(this.getId());\n     }\n \n+    /**\n+     * Gets all the Persona for the specified Account.\n+     *\n+     * @param accountId Id of account for which to get the Personas for.\n+     * @return Collection of PersonaAccounts. may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in getting the\n+     * persona_account.\n+     */\n+    public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c682739d8ea74a032f8026d6986e152b568b98fc"}, "originalPosition": 397}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTEwNTIwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/Persona.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoyNzo1NlrOGQC7PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoyNzo1NlrOGQC7PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3ODMzMw==", "bodyText": "This method seems misplaced here. Does it add anything vs. just calling the PersonaAccount API directly?", "url": "https://github.com/sleuthkit/autopsy/pull/5843#discussion_r419478333", "createdAt": "2020-05-04T14:27:56Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/Persona.java", "diffHunk": "@@ -79,9 +100,626 @@ public String toString() {\n             return description;\n         }\n \n-        public int getStatus() {\n+        public int getStatusId() {\n             return this.status_id;\n         }\n+\n+        static PersonaStatus fromId(int value) {\n+            for (PersonaStatus status : PersonaStatus.values()) {\n+                if (status.getStatusId() == value) {\n+                    return status;\n+                }\n+            }\n+            return PersonaStatus.UNKNOWN;\n+        }\n+    }\n+\n+    // Persona name to use if no name is specified.\n+    private static final String DEFAULT_PERSONA_NAME = \"NoName\";\n+\n+    // primary key in the Personas table in CR database\n+    private final long id;\n+    private final String uuidStr;\n+    private final String name;\n+    private final String comment;\n+    private final long createdDate;\n+    private final long modifiedDate;\n+    private final PersonaStatus status;\n+    private final CentralRepoExaminer examiner;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getUuidStr() {\n+        return uuidStr;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getComment() {\n+        return comment;\n+    }\n+\n+    public long getCreatedDate() {\n+        return createdDate;\n+    }\n+\n+    public long getModifiedDate() {\n+        return modifiedDate;\n+    }\n+\n+    public PersonaStatus getStatus() {\n+        return status;\n+    }\n+\n+    public CentralRepoExaminer getExaminer() {\n+        return examiner;\n+    }\n+\n+    Persona(long id, String uuidStr, String name, String comment, long created_date, long modified_date, PersonaStatus status, CentralRepoExaminer examiner) {\n+        this.id = id;\n+        this.uuidStr = uuidStr;\n+        this.name = name;\n+        this.comment = comment;\n+        this.createdDate = created_date;\n+        this.modifiedDate = modified_date;\n+        this.status = status;\n+        this.examiner = examiner;\n+    }\n+\n+    /**\n+     * Creates a Persona and associates the specified account with it.\n+     *\n+     * @param personaName Persona name.\n+     * @param comment Comment to associate with persona, may be null.\n+     * @param status Persona status\n+     * @param account Account for which the persona is being created.\n+     * @param justification Justification for why this account belongs to this\n+     * persona, may be null.\n+     * @param confidence Confidence level for this association of Persona &\n+     * account.\n+     *\n+     * @return PersonaAccount\n+     * @throws CentralRepoException If there is an error creating the Persona.\n+     */\n+    public static PersonaAccount createPersonaForAccount(String personaName, String comment, PersonaStatus status, CentralRepoAccount account, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+        Persona persona = createPersona(personaName, comment, status);\n+        return persona.addAccountToPersona(account, justification, confidence);\n+    }\n+\n+    /**\n+     * Inserts a row in the Persona tables.\n+     *\n+     * @param name Persona name, may be null - default name is used in that\n+     * case.\n+     * @param comment Comment to associate with persona, may be null.\n+     * @param status Persona status.\n+     *\n+     * @return Persona corresponding to the row inserted in the personas table.\n+     *\n+     * @throws CentralRepoException If there is an error in adding a row to\n+     * personas table.\n+     */\n+    private static Persona createPersona(String name, String comment, PersonaStatus status) throws CentralRepoException {\n+        // generate a UUID for the persona\n+        String uuidStr = UUID.randomUUID().toString();\n+        CentralRepoExaminer examiner = CentralRepository.getInstance().getCurrentCentralRepoExaminer();\n+\n+        Instant instant = Instant.now();\n+        Long timeStampMillis = instant.toEpochMilli();\n+        String insertClause = \" INTO personas (uuid, comment, name, created_date, modified_date, status_id, examiner_id ) \"\n+                + \"VALUES ( '\" + uuidStr + \"', \"\n+                + \"'\" + ((StringUtils.isBlank(comment) ? \"\" : SleuthkitCase.escapeSingleQuotes(comment))) + \"',\"\n+                + \"'\" + ((StringUtils.isBlank(name) ? DEFAULT_PERSONA_NAME : SleuthkitCase.escapeSingleQuotes(name))) + \"',\"\n+                + timeStampMillis.toString() + \",\"\n+                + timeStampMillis.toString() + \",\"\n+                + status.getStatusId() + \",\"\n+                + examiner.getId()\n+                + \")\";\n+\n+        CentralRepository.getInstance().executeInsertSQL(insertClause);\n+        return getPersonaByUUID(uuidStr);\n+    }\n+\n+    /**\n+     * Associates an account with a persona by creating a row in the\n+     * PersonaAccounts table.\n+     *\n+     * @param persona Persona to add the account to.\n+     * @param account Account to add to persona.\n+     * @param justification Reason for adding the account to persona, may be\n+     * null.\n+     * @param confidence Confidence level.\n+     *\n+     * @return PersonaAccount\n+     * @throws CentralRepoException If there is an error.\n+     */\n+    public PersonaAccount addAccountToPersona(CentralRepoAccount account, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+\n+        CentralRepoExaminer currentExaminer = CentralRepository.getInstance().getCurrentCentralRepoExaminer();\n+\n+        Instant instant = Instant.now();\n+        Long timeStampMillis = instant.toEpochMilli();\n+        String insertClause = \" INTO persona_accounts (persona_id, account_id, justification, confidence_id, date_added, examiner_id ) \"\n+                + \"VALUES ( \"\n+                + this.getId() + \", \"\n+                + account.getAccountId() + \", \"\n+                + \"'\" + ((StringUtils.isBlank(justification) ? \"\" : SleuthkitCase.escapeSingleQuotes(justification))) + \"', \"\n+                + confidence.getLevelId() + \", \"\n+                + timeStampMillis.toString() + \", \"\n+                + currentExaminer.getId()\n+                + \")\";\n+\n+        CentralRepository.getInstance().executeInsertSQL(insertClause);\n+        return new PersonaAccount(this, account, justification, confidence, timeStampMillis, currentExaminer);\n+    }\n+\n+    /**\n+     * Callback to process a Persona query from the persona table.\n+     */\n+    private static class PersonaQueryCallback implements CentralRepositoryDbQueryCallback {\n+\n+        private final Collection<Persona> personaList =  new ArrayList<>();\n+\n+        @Override\n+        public void process(ResultSet rs) throws SQLException {\n+\n+            while (rs.next()) {\n+                CentralRepoExaminer examiner = new CentralRepoExaminer(\n+                        rs.getInt(\"examiner_id\"),\n+                        rs.getString(\"login_name\"),\n+                        rs.getString(\"display_name\"));\n+\n+                PersonaStatus status = PersonaStatus.fromId(rs.getInt(\"status_id\"));\n+                Persona persona = new Persona(\n+                        rs.getInt(\"id\"),\n+                        rs.getString(\"uuid\"),\n+                        rs.getString(\"name\"),\n+                        rs.getString(\"comment\"),\n+                        Long.parseLong(rs.getString(\"created_date\")),\n+                        Long.parseLong(rs.getString(\"modified_date\")),\n+                        status,\n+                        examiner\n+                );\n+                \n+                personaList.add(persona);\n+            }\n+        }\n+\n+        Collection<Persona> getPersonas() {\n+            return Collections.unmodifiableCollection(personaList);\n+        }\n+    };\n+\n+    // Partial query string to select from personas table, \n+    // just supply the where clause.\n+    private static final String PERSONA_QUERY = \n+                  \"SELECT p.id, p.uuid, p.name, p.comment, p.created_date, p.modified_date, p.status_id, p.examiner_id, e.login_name, e.display_name \"\n+                + \"FROM personas as p \"\n+                + \"INNER JOIN examiners as e ON e.id = p.examiner_id \";\n+              \n+     \n+    /**\n+     * Gets the row from the Personas table with the given UUID, creates and\n+     * returns the Persona from that data.\n+     *\n+     * @param uuid Persona UUID to match.\n+     * @return Persona matching the given UUID, may be null if no match is\n+     * found.\n+     *\n+     * @throws CentralRepoException If there is an error in querying the\n+     * Personas table.\n+     */\n+    private static Persona getPersonaByUUID(String uuid) throws CentralRepoException {\n+\n+        String queryClause = \n+                PERSONA_QUERY\n+                + \"WHERE p.uuid = '\" + uuid + \"'\";\n+\n+        PersonaQueryCallback queryCallback = new PersonaQueryCallback();\n+        CentralRepository.getInstance().executeSelectSQL(queryClause, queryCallback);\n+\n+        Collection<Persona> personas = queryCallback.getPersonas();\n+        \n+        Persona persona = personas.isEmpty() ? null : personas.iterator().next();\n+        return persona;\n+    }\n+\n+    /**\n+     * Gets the row from the Personas table with the given id, creates and\n+     * returns the Persona from that data.\n+     *\n+     * @param id Persona id to match.\n+     * @return Persona matching the given UUID, may be null if no match is\n+     * found.\n+     *\n+     * @throws CentralRepoException If there is an error in querying the\n+     * Personas table.\n+     */\n+    public static Persona getPersonaById(long id) throws CentralRepoException {\n+\n+        String queryClause = PERSONA_QUERY\n+                + \"WHERE p.id = \" + id;\n+\n+        PersonaQueryCallback queryCallback = new PersonaQueryCallback();\n+        CentralRepository.getInstance().executeSelectSQL(queryClause, queryCallback);\n+\n+        Collection<Persona> personas = queryCallback.getPersonas();\n+        \n+        return personas.isEmpty() ? null : personas.iterator().next();\n+    }\n+\n+    /**\n+     * Gets the rows from the Personas table with matching name.\n+     *\n+     * @param partialName Name substring to match.\n+     * @return Collection of personas matching the given name substring, may be\n+     * empty if no match is found.\n+     *\n+     * @throws CentralRepoException If there is an error in querying the\n+     * Personas table.\n+     */\n+    public static Collection<Persona> getPersonaByName(String partialName) throws CentralRepoException {\n+\n+        String queryClause = PERSONA_QUERY\n+                + \"WHERE LOWER(p.name) LIKE \" + \"LOWER('%\" + partialName + \"%')\" ;\n+\n+        PersonaQueryCallback queryCallback = new PersonaQueryCallback();\n+        CentralRepository.getInstance().executeSelectSQL(queryClause, queryCallback);\n+\n+        return queryCallback.getPersonas();\n+    }\n+    \n+    /**\n+     * Creates an alias for the Persona.\n+     *\n+     * @param alias Alias name.\n+     * @param justification Reason for assigning the alias, may be null.\n+     * @param confidence Confidence level.\n+     *\n+     * @return PersonaAlias\n+     * @throws CentralRepoException If there is an error in creating the alias.\n+     */\n+    public PersonaAlias addAlias(String alias, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+        return PersonaAlias.addPersonaAlias(this, alias, justification, confidence);\n+    }\n+\n+    /**\n+     * Gets all aliases for the persona.\n+     *\n+     * @return A collection of aliases, may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in retrieving aliases.\n+     */\n+    public Collection<PersonaAlias> getAliases() throws CentralRepoException {\n+        return PersonaAlias.getPersonaAliases(this.getId());\n+    }\n+\n+    /**\n+     * Adds specified metadata to the persona.\n+     *\n+     * @param name Metadata name.\n+     * @param value Metadata value.\n+     * @param justification Reason for adding the metadata, may be null.\n+     * @param confidence Confidence level.\n+     *\n+     * @return PersonaMetadata\n+     * @throws CentralRepoException If there is an error in adding metadata.\n+     */\n+    public PersonaMetadata addMetadata(String name, String value, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+        return PersonaMetadata.addPersonaMetadata(this.getId(), name, value, justification, confidence);\n+    }\n+\n+    /**\n+     * Gets all metadata for the persona.\n+     *\n+     * @return A collection of metadata, may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in retrieving aliases.\n+     */\n+    public Collection<PersonaMetadata> getMetadata() throws CentralRepoException {\n+        return PersonaMetadata.getPersonaMetadata(this.getId());\n+    }\n+\n+    /**\n+     * Gets all the Accounts for the Persona.\n+     *\n+     * @return Collection of PersonaAccounts, may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in getting the\n+     * persona_account.\n+     */\n+    public Collection<PersonaAccount> getPersonaAccounts() throws CentralRepoException {\n+        return PersonaAccount.getPersonaAccountsForPersona(this.getId());\n     }\n \n+    /**\n+     * Gets all the Persona for the specified Account.\n+     *\n+     * @param accountId Id of account for which to get the Personas for.\n+     * @return Collection of PersonaAccounts. may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in getting the\n+     * persona_account.\n+     */\n+    public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException {\n+        return PersonaAccount.getPersonaAccountsForAccount(accountId);\n+    }\n+\n+    /**\n+     * Gets all the Persona associated with all the accounts matching the given\n+     * account identifier substring.\n+     *\n+     * @param accountIdentifierSubstring Account identifier substring to search\n+     * for.\n+     * @return Collection of PersonaAccounts. may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in getting the\n+     * persona_account.\n+     */\n+    public static Collection<PersonaAccount> getPersonaAccountsForAccountIdentifier(String accountIdentifierSubstring) throws CentralRepoException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c682739d8ea74a032f8026d6986e152b568b98fc"}, "originalPosition": 412}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTI4OTMwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoExaminer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTowNzozNlrOGQEtyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTowNzozNlrOGQEtyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUwNzY1Nw==", "bodyText": "Missing period in comment.", "url": "https://github.com/sleuthkit/autopsy/pull/5843#discussion_r419507657", "createdAt": "2020-05-04T15:07:36Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoExaminer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+/**\n+ * Encapsulates the concept of an examiner.\n+ */\n+final public class CentralRepoExaminer {\n+\n+    private final long id;  // Row id in the examiners table in central repo database.\n+    private final String loginName;\n+    private final String displayName;\n+\n+    public CentralRepoExaminer(long id, String loginName, String displayName) {\n+        this.id = id;\n+        this.loginName = loginName;\n+        this.displayName = displayName;\n+    }\n+\n+    /**\n+     * Returns the id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c682739d8ea74a032f8026d6986e152b568b98fc"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTMzMDcwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/Persona.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToxNzowN1rOGQFHvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToxNzowN1rOGQFHvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUxNDMwMw==", "bodyText": "I don't think we need this since we have getPersonaAccounts.", "url": "https://github.com/sleuthkit/autopsy/pull/5843#discussion_r419514303", "createdAt": "2020-05-04T15:17:07Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/Persona.java", "diffHunk": "@@ -79,9 +100,626 @@ public String toString() {\n             return description;\n         }\n \n-        public int getStatus() {\n+        public int getStatusId() {\n             return this.status_id;\n         }\n+\n+        static PersonaStatus fromId(int value) {\n+            for (PersonaStatus status : PersonaStatus.values()) {\n+                if (status.getStatusId() == value) {\n+                    return status;\n+                }\n+            }\n+            return PersonaStatus.UNKNOWN;\n+        }\n+    }\n+\n+    // Persona name to use if no name is specified.\n+    private static final String DEFAULT_PERSONA_NAME = \"NoName\";\n+\n+    // primary key in the Personas table in CR database\n+    private final long id;\n+    private final String uuidStr;\n+    private final String name;\n+    private final String comment;\n+    private final long createdDate;\n+    private final long modifiedDate;\n+    private final PersonaStatus status;\n+    private final CentralRepoExaminer examiner;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getUuidStr() {\n+        return uuidStr;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getComment() {\n+        return comment;\n+    }\n+\n+    public long getCreatedDate() {\n+        return createdDate;\n+    }\n+\n+    public long getModifiedDate() {\n+        return modifiedDate;\n+    }\n+\n+    public PersonaStatus getStatus() {\n+        return status;\n+    }\n+\n+    public CentralRepoExaminer getExaminer() {\n+        return examiner;\n+    }\n+\n+    Persona(long id, String uuidStr, String name, String comment, long created_date, long modified_date, PersonaStatus status, CentralRepoExaminer examiner) {\n+        this.id = id;\n+        this.uuidStr = uuidStr;\n+        this.name = name;\n+        this.comment = comment;\n+        this.createdDate = created_date;\n+        this.modifiedDate = modified_date;\n+        this.status = status;\n+        this.examiner = examiner;\n+    }\n+\n+    /**\n+     * Creates a Persona and associates the specified account with it.\n+     *\n+     * @param personaName Persona name.\n+     * @param comment Comment to associate with persona, may be null.\n+     * @param status Persona status\n+     * @param account Account for which the persona is being created.\n+     * @param justification Justification for why this account belongs to this\n+     * persona, may be null.\n+     * @param confidence Confidence level for this association of Persona &\n+     * account.\n+     *\n+     * @return PersonaAccount\n+     * @throws CentralRepoException If there is an error creating the Persona.\n+     */\n+    public static PersonaAccount createPersonaForAccount(String personaName, String comment, PersonaStatus status, CentralRepoAccount account, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+        Persona persona = createPersona(personaName, comment, status);\n+        return persona.addAccountToPersona(account, justification, confidence);\n+    }\n+\n+    /**\n+     * Inserts a row in the Persona tables.\n+     *\n+     * @param name Persona name, may be null - default name is used in that\n+     * case.\n+     * @param comment Comment to associate with persona, may be null.\n+     * @param status Persona status.\n+     *\n+     * @return Persona corresponding to the row inserted in the personas table.\n+     *\n+     * @throws CentralRepoException If there is an error in adding a row to\n+     * personas table.\n+     */\n+    private static Persona createPersona(String name, String comment, PersonaStatus status) throws CentralRepoException {\n+        // generate a UUID for the persona\n+        String uuidStr = UUID.randomUUID().toString();\n+        CentralRepoExaminer examiner = CentralRepository.getInstance().getCurrentCentralRepoExaminer();\n+\n+        Instant instant = Instant.now();\n+        Long timeStampMillis = instant.toEpochMilli();\n+        String insertClause = \" INTO personas (uuid, comment, name, created_date, modified_date, status_id, examiner_id ) \"\n+                + \"VALUES ( '\" + uuidStr + \"', \"\n+                + \"'\" + ((StringUtils.isBlank(comment) ? \"\" : SleuthkitCase.escapeSingleQuotes(comment))) + \"',\"\n+                + \"'\" + ((StringUtils.isBlank(name) ? DEFAULT_PERSONA_NAME : SleuthkitCase.escapeSingleQuotes(name))) + \"',\"\n+                + timeStampMillis.toString() + \",\"\n+                + timeStampMillis.toString() + \",\"\n+                + status.getStatusId() + \",\"\n+                + examiner.getId()\n+                + \")\";\n+\n+        CentralRepository.getInstance().executeInsertSQL(insertClause);\n+        return getPersonaByUUID(uuidStr);\n+    }\n+\n+    /**\n+     * Associates an account with a persona by creating a row in the\n+     * PersonaAccounts table.\n+     *\n+     * @param persona Persona to add the account to.\n+     * @param account Account to add to persona.\n+     * @param justification Reason for adding the account to persona, may be\n+     * null.\n+     * @param confidence Confidence level.\n+     *\n+     * @return PersonaAccount\n+     * @throws CentralRepoException If there is an error.\n+     */\n+    public PersonaAccount addAccountToPersona(CentralRepoAccount account, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+\n+        CentralRepoExaminer currentExaminer = CentralRepository.getInstance().getCurrentCentralRepoExaminer();\n+\n+        Instant instant = Instant.now();\n+        Long timeStampMillis = instant.toEpochMilli();\n+        String insertClause = \" INTO persona_accounts (persona_id, account_id, justification, confidence_id, date_added, examiner_id ) \"\n+                + \"VALUES ( \"\n+                + this.getId() + \", \"\n+                + account.getAccountId() + \", \"\n+                + \"'\" + ((StringUtils.isBlank(justification) ? \"\" : SleuthkitCase.escapeSingleQuotes(justification))) + \"', \"\n+                + confidence.getLevelId() + \", \"\n+                + timeStampMillis.toString() + \", \"\n+                + currentExaminer.getId()\n+                + \")\";\n+\n+        CentralRepository.getInstance().executeInsertSQL(insertClause);\n+        return new PersonaAccount(this, account, justification, confidence, timeStampMillis, currentExaminer);\n+    }\n+\n+    /**\n+     * Callback to process a Persona query from the persona table.\n+     */\n+    private static class PersonaQueryCallback implements CentralRepositoryDbQueryCallback {\n+\n+        private final Collection<Persona> personaList =  new ArrayList<>();\n+\n+        @Override\n+        public void process(ResultSet rs) throws SQLException {\n+\n+            while (rs.next()) {\n+                CentralRepoExaminer examiner = new CentralRepoExaminer(\n+                        rs.getInt(\"examiner_id\"),\n+                        rs.getString(\"login_name\"),\n+                        rs.getString(\"display_name\"));\n+\n+                PersonaStatus status = PersonaStatus.fromId(rs.getInt(\"status_id\"));\n+                Persona persona = new Persona(\n+                        rs.getInt(\"id\"),\n+                        rs.getString(\"uuid\"),\n+                        rs.getString(\"name\"),\n+                        rs.getString(\"comment\"),\n+                        Long.parseLong(rs.getString(\"created_date\")),\n+                        Long.parseLong(rs.getString(\"modified_date\")),\n+                        status,\n+                        examiner\n+                );\n+                \n+                personaList.add(persona);\n+            }\n+        }\n+\n+        Collection<Persona> getPersonas() {\n+            return Collections.unmodifiableCollection(personaList);\n+        }\n+    };\n+\n+    // Partial query string to select from personas table, \n+    // just supply the where clause.\n+    private static final String PERSONA_QUERY = \n+                  \"SELECT p.id, p.uuid, p.name, p.comment, p.created_date, p.modified_date, p.status_id, p.examiner_id, e.login_name, e.display_name \"\n+                + \"FROM personas as p \"\n+                + \"INNER JOIN examiners as e ON e.id = p.examiner_id \";\n+              \n+     \n+    /**\n+     * Gets the row from the Personas table with the given UUID, creates and\n+     * returns the Persona from that data.\n+     *\n+     * @param uuid Persona UUID to match.\n+     * @return Persona matching the given UUID, may be null if no match is\n+     * found.\n+     *\n+     * @throws CentralRepoException If there is an error in querying the\n+     * Personas table.\n+     */\n+    private static Persona getPersonaByUUID(String uuid) throws CentralRepoException {\n+\n+        String queryClause = \n+                PERSONA_QUERY\n+                + \"WHERE p.uuid = '\" + uuid + \"'\";\n+\n+        PersonaQueryCallback queryCallback = new PersonaQueryCallback();\n+        CentralRepository.getInstance().executeSelectSQL(queryClause, queryCallback);\n+\n+        Collection<Persona> personas = queryCallback.getPersonas();\n+        \n+        Persona persona = personas.isEmpty() ? null : personas.iterator().next();\n+        return persona;\n+    }\n+\n+    /**\n+     * Gets the row from the Personas table with the given id, creates and\n+     * returns the Persona from that data.\n+     *\n+     * @param id Persona id to match.\n+     * @return Persona matching the given UUID, may be null if no match is\n+     * found.\n+     *\n+     * @throws CentralRepoException If there is an error in querying the\n+     * Personas table.\n+     */\n+    public static Persona getPersonaById(long id) throws CentralRepoException {\n+\n+        String queryClause = PERSONA_QUERY\n+                + \"WHERE p.id = \" + id;\n+\n+        PersonaQueryCallback queryCallback = new PersonaQueryCallback();\n+        CentralRepository.getInstance().executeSelectSQL(queryClause, queryCallback);\n+\n+        Collection<Persona> personas = queryCallback.getPersonas();\n+        \n+        return personas.isEmpty() ? null : personas.iterator().next();\n+    }\n+\n+    /**\n+     * Gets the rows from the Personas table with matching name.\n+     *\n+     * @param partialName Name substring to match.\n+     * @return Collection of personas matching the given name substring, may be\n+     * empty if no match is found.\n+     *\n+     * @throws CentralRepoException If there is an error in querying the\n+     * Personas table.\n+     */\n+    public static Collection<Persona> getPersonaByName(String partialName) throws CentralRepoException {\n+\n+        String queryClause = PERSONA_QUERY\n+                + \"WHERE LOWER(p.name) LIKE \" + \"LOWER('%\" + partialName + \"%')\" ;\n+\n+        PersonaQueryCallback queryCallback = new PersonaQueryCallback();\n+        CentralRepository.getInstance().executeSelectSQL(queryClause, queryCallback);\n+\n+        return queryCallback.getPersonas();\n+    }\n+    \n+    /**\n+     * Creates an alias for the Persona.\n+     *\n+     * @param alias Alias name.\n+     * @param justification Reason for assigning the alias, may be null.\n+     * @param confidence Confidence level.\n+     *\n+     * @return PersonaAlias\n+     * @throws CentralRepoException If there is an error in creating the alias.\n+     */\n+    public PersonaAlias addAlias(String alias, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+        return PersonaAlias.addPersonaAlias(this, alias, justification, confidence);\n+    }\n+\n+    /**\n+     * Gets all aliases for the persona.\n+     *\n+     * @return A collection of aliases, may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in retrieving aliases.\n+     */\n+    public Collection<PersonaAlias> getAliases() throws CentralRepoException {\n+        return PersonaAlias.getPersonaAliases(this.getId());\n+    }\n+\n+    /**\n+     * Adds specified metadata to the persona.\n+     *\n+     * @param name Metadata name.\n+     * @param value Metadata value.\n+     * @param justification Reason for adding the metadata, may be null.\n+     * @param confidence Confidence level.\n+     *\n+     * @return PersonaMetadata\n+     * @throws CentralRepoException If there is an error in adding metadata.\n+     */\n+    public PersonaMetadata addMetadata(String name, String value, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+        return PersonaMetadata.addPersonaMetadata(this.getId(), name, value, justification, confidence);\n+    }\n+\n+    /**\n+     * Gets all metadata for the persona.\n+     *\n+     * @return A collection of metadata, may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in retrieving aliases.\n+     */\n+    public Collection<PersonaMetadata> getMetadata() throws CentralRepoException {\n+        return PersonaMetadata.getPersonaMetadata(this.getId());\n+    }\n+\n+    /**\n+     * Gets all the Accounts for the Persona.\n+     *\n+     * @return Collection of PersonaAccounts, may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in getting the\n+     * persona_account.\n+     */\n+    public Collection<PersonaAccount> getPersonaAccounts() throws CentralRepoException {\n+        return PersonaAccount.getPersonaAccountsForPersona(this.getId());\n     }\n \n+    /**\n+     * Gets all the Persona for the specified Account.\n+     *\n+     * @param accountId Id of account for which to get the Personas for.\n+     * @return Collection of PersonaAccounts. may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in getting the\n+     * persona_account.\n+     */\n+    public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException {\n+        return PersonaAccount.getPersonaAccountsForAccount(accountId);\n+    }\n+\n+    /**\n+     * Gets all the Persona associated with all the accounts matching the given\n+     * account identifier substring.\n+     *\n+     * @param accountIdentifierSubstring Account identifier substring to search\n+     * for.\n+     * @return Collection of PersonaAccounts. may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in getting the\n+     * persona_account.\n+     */\n+    public static Collection<PersonaAccount> getPersonaAccountsForAccountIdentifier(String accountIdentifierSubstring) throws CentralRepoException {\n+        return PersonaAccount.getPersonaAccountsForAccountIdentifier(accountIdentifierSubstring);\n+    }\n+    \n+    /**\n+     * Get all accounts associated with the persona.\n+     *\n+     * @return Collection of all accounts associated with the given persona, may\n+     * be empty.\n+     * @throws CentralRepoException If there is an error in getting the\n+     * accounts.\n+     */\n+    public Collection<CentralRepoAccount> getAccounts() throws CentralRepoException {\n+        return PersonaAccount.getAccountsForPersona(this.getId());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c682739d8ea74a032f8026d6986e152b568b98fc"}, "originalPosition": 426}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTM1Njc5OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/Persona.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToyMzowMFrOGQFYQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToyMzowMFrOGQFYQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUxODUyOQ==", "bodyText": "getPersonaForDataSource => getPersonasForDataSource", "url": "https://github.com/sleuthkit/autopsy/pull/5843#discussion_r419518529", "createdAt": "2020-05-04T15:23:00Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/Persona.java", "diffHunk": "@@ -79,9 +100,626 @@ public String toString() {\n             return description;\n         }\n \n-        public int getStatus() {\n+        public int getStatusId() {\n             return this.status_id;\n         }\n+\n+        static PersonaStatus fromId(int value) {\n+            for (PersonaStatus status : PersonaStatus.values()) {\n+                if (status.getStatusId() == value) {\n+                    return status;\n+                }\n+            }\n+            return PersonaStatus.UNKNOWN;\n+        }\n+    }\n+\n+    // Persona name to use if no name is specified.\n+    private static final String DEFAULT_PERSONA_NAME = \"NoName\";\n+\n+    // primary key in the Personas table in CR database\n+    private final long id;\n+    private final String uuidStr;\n+    private final String name;\n+    private final String comment;\n+    private final long createdDate;\n+    private final long modifiedDate;\n+    private final PersonaStatus status;\n+    private final CentralRepoExaminer examiner;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getUuidStr() {\n+        return uuidStr;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getComment() {\n+        return comment;\n+    }\n+\n+    public long getCreatedDate() {\n+        return createdDate;\n+    }\n+\n+    public long getModifiedDate() {\n+        return modifiedDate;\n+    }\n+\n+    public PersonaStatus getStatus() {\n+        return status;\n+    }\n+\n+    public CentralRepoExaminer getExaminer() {\n+        return examiner;\n+    }\n+\n+    Persona(long id, String uuidStr, String name, String comment, long created_date, long modified_date, PersonaStatus status, CentralRepoExaminer examiner) {\n+        this.id = id;\n+        this.uuidStr = uuidStr;\n+        this.name = name;\n+        this.comment = comment;\n+        this.createdDate = created_date;\n+        this.modifiedDate = modified_date;\n+        this.status = status;\n+        this.examiner = examiner;\n+    }\n+\n+    /**\n+     * Creates a Persona and associates the specified account with it.\n+     *\n+     * @param personaName Persona name.\n+     * @param comment Comment to associate with persona, may be null.\n+     * @param status Persona status\n+     * @param account Account for which the persona is being created.\n+     * @param justification Justification for why this account belongs to this\n+     * persona, may be null.\n+     * @param confidence Confidence level for this association of Persona &\n+     * account.\n+     *\n+     * @return PersonaAccount\n+     * @throws CentralRepoException If there is an error creating the Persona.\n+     */\n+    public static PersonaAccount createPersonaForAccount(String personaName, String comment, PersonaStatus status, CentralRepoAccount account, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+        Persona persona = createPersona(personaName, comment, status);\n+        return persona.addAccountToPersona(account, justification, confidence);\n+    }\n+\n+    /**\n+     * Inserts a row in the Persona tables.\n+     *\n+     * @param name Persona name, may be null - default name is used in that\n+     * case.\n+     * @param comment Comment to associate with persona, may be null.\n+     * @param status Persona status.\n+     *\n+     * @return Persona corresponding to the row inserted in the personas table.\n+     *\n+     * @throws CentralRepoException If there is an error in adding a row to\n+     * personas table.\n+     */\n+    private static Persona createPersona(String name, String comment, PersonaStatus status) throws CentralRepoException {\n+        // generate a UUID for the persona\n+        String uuidStr = UUID.randomUUID().toString();\n+        CentralRepoExaminer examiner = CentralRepository.getInstance().getCurrentCentralRepoExaminer();\n+\n+        Instant instant = Instant.now();\n+        Long timeStampMillis = instant.toEpochMilli();\n+        String insertClause = \" INTO personas (uuid, comment, name, created_date, modified_date, status_id, examiner_id ) \"\n+                + \"VALUES ( '\" + uuidStr + \"', \"\n+                + \"'\" + ((StringUtils.isBlank(comment) ? \"\" : SleuthkitCase.escapeSingleQuotes(comment))) + \"',\"\n+                + \"'\" + ((StringUtils.isBlank(name) ? DEFAULT_PERSONA_NAME : SleuthkitCase.escapeSingleQuotes(name))) + \"',\"\n+                + timeStampMillis.toString() + \",\"\n+                + timeStampMillis.toString() + \",\"\n+                + status.getStatusId() + \",\"\n+                + examiner.getId()\n+                + \")\";\n+\n+        CentralRepository.getInstance().executeInsertSQL(insertClause);\n+        return getPersonaByUUID(uuidStr);\n+    }\n+\n+    /**\n+     * Associates an account with a persona by creating a row in the\n+     * PersonaAccounts table.\n+     *\n+     * @param persona Persona to add the account to.\n+     * @param account Account to add to persona.\n+     * @param justification Reason for adding the account to persona, may be\n+     * null.\n+     * @param confidence Confidence level.\n+     *\n+     * @return PersonaAccount\n+     * @throws CentralRepoException If there is an error.\n+     */\n+    public PersonaAccount addAccountToPersona(CentralRepoAccount account, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+\n+        CentralRepoExaminer currentExaminer = CentralRepository.getInstance().getCurrentCentralRepoExaminer();\n+\n+        Instant instant = Instant.now();\n+        Long timeStampMillis = instant.toEpochMilli();\n+        String insertClause = \" INTO persona_accounts (persona_id, account_id, justification, confidence_id, date_added, examiner_id ) \"\n+                + \"VALUES ( \"\n+                + this.getId() + \", \"\n+                + account.getAccountId() + \", \"\n+                + \"'\" + ((StringUtils.isBlank(justification) ? \"\" : SleuthkitCase.escapeSingleQuotes(justification))) + \"', \"\n+                + confidence.getLevelId() + \", \"\n+                + timeStampMillis.toString() + \", \"\n+                + currentExaminer.getId()\n+                + \")\";\n+\n+        CentralRepository.getInstance().executeInsertSQL(insertClause);\n+        return new PersonaAccount(this, account, justification, confidence, timeStampMillis, currentExaminer);\n+    }\n+\n+    /**\n+     * Callback to process a Persona query from the persona table.\n+     */\n+    private static class PersonaQueryCallback implements CentralRepositoryDbQueryCallback {\n+\n+        private final Collection<Persona> personaList =  new ArrayList<>();\n+\n+        @Override\n+        public void process(ResultSet rs) throws SQLException {\n+\n+            while (rs.next()) {\n+                CentralRepoExaminer examiner = new CentralRepoExaminer(\n+                        rs.getInt(\"examiner_id\"),\n+                        rs.getString(\"login_name\"),\n+                        rs.getString(\"display_name\"));\n+\n+                PersonaStatus status = PersonaStatus.fromId(rs.getInt(\"status_id\"));\n+                Persona persona = new Persona(\n+                        rs.getInt(\"id\"),\n+                        rs.getString(\"uuid\"),\n+                        rs.getString(\"name\"),\n+                        rs.getString(\"comment\"),\n+                        Long.parseLong(rs.getString(\"created_date\")),\n+                        Long.parseLong(rs.getString(\"modified_date\")),\n+                        status,\n+                        examiner\n+                );\n+                \n+                personaList.add(persona);\n+            }\n+        }\n+\n+        Collection<Persona> getPersonas() {\n+            return Collections.unmodifiableCollection(personaList);\n+        }\n+    };\n+\n+    // Partial query string to select from personas table, \n+    // just supply the where clause.\n+    private static final String PERSONA_QUERY = \n+                  \"SELECT p.id, p.uuid, p.name, p.comment, p.created_date, p.modified_date, p.status_id, p.examiner_id, e.login_name, e.display_name \"\n+                + \"FROM personas as p \"\n+                + \"INNER JOIN examiners as e ON e.id = p.examiner_id \";\n+              \n+     \n+    /**\n+     * Gets the row from the Personas table with the given UUID, creates and\n+     * returns the Persona from that data.\n+     *\n+     * @param uuid Persona UUID to match.\n+     * @return Persona matching the given UUID, may be null if no match is\n+     * found.\n+     *\n+     * @throws CentralRepoException If there is an error in querying the\n+     * Personas table.\n+     */\n+    private static Persona getPersonaByUUID(String uuid) throws CentralRepoException {\n+\n+        String queryClause = \n+                PERSONA_QUERY\n+                + \"WHERE p.uuid = '\" + uuid + \"'\";\n+\n+        PersonaQueryCallback queryCallback = new PersonaQueryCallback();\n+        CentralRepository.getInstance().executeSelectSQL(queryClause, queryCallback);\n+\n+        Collection<Persona> personas = queryCallback.getPersonas();\n+        \n+        Persona persona = personas.isEmpty() ? null : personas.iterator().next();\n+        return persona;\n+    }\n+\n+    /**\n+     * Gets the row from the Personas table with the given id, creates and\n+     * returns the Persona from that data.\n+     *\n+     * @param id Persona id to match.\n+     * @return Persona matching the given UUID, may be null if no match is\n+     * found.\n+     *\n+     * @throws CentralRepoException If there is an error in querying the\n+     * Personas table.\n+     */\n+    public static Persona getPersonaById(long id) throws CentralRepoException {\n+\n+        String queryClause = PERSONA_QUERY\n+                + \"WHERE p.id = \" + id;\n+\n+        PersonaQueryCallback queryCallback = new PersonaQueryCallback();\n+        CentralRepository.getInstance().executeSelectSQL(queryClause, queryCallback);\n+\n+        Collection<Persona> personas = queryCallback.getPersonas();\n+        \n+        return personas.isEmpty() ? null : personas.iterator().next();\n+    }\n+\n+    /**\n+     * Gets the rows from the Personas table with matching name.\n+     *\n+     * @param partialName Name substring to match.\n+     * @return Collection of personas matching the given name substring, may be\n+     * empty if no match is found.\n+     *\n+     * @throws CentralRepoException If there is an error in querying the\n+     * Personas table.\n+     */\n+    public static Collection<Persona> getPersonaByName(String partialName) throws CentralRepoException {\n+\n+        String queryClause = PERSONA_QUERY\n+                + \"WHERE LOWER(p.name) LIKE \" + \"LOWER('%\" + partialName + \"%')\" ;\n+\n+        PersonaQueryCallback queryCallback = new PersonaQueryCallback();\n+        CentralRepository.getInstance().executeSelectSQL(queryClause, queryCallback);\n+\n+        return queryCallback.getPersonas();\n+    }\n+    \n+    /**\n+     * Creates an alias for the Persona.\n+     *\n+     * @param alias Alias name.\n+     * @param justification Reason for assigning the alias, may be null.\n+     * @param confidence Confidence level.\n+     *\n+     * @return PersonaAlias\n+     * @throws CentralRepoException If there is an error in creating the alias.\n+     */\n+    public PersonaAlias addAlias(String alias, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+        return PersonaAlias.addPersonaAlias(this, alias, justification, confidence);\n+    }\n+\n+    /**\n+     * Gets all aliases for the persona.\n+     *\n+     * @return A collection of aliases, may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in retrieving aliases.\n+     */\n+    public Collection<PersonaAlias> getAliases() throws CentralRepoException {\n+        return PersonaAlias.getPersonaAliases(this.getId());\n+    }\n+\n+    /**\n+     * Adds specified metadata to the persona.\n+     *\n+     * @param name Metadata name.\n+     * @param value Metadata value.\n+     * @param justification Reason for adding the metadata, may be null.\n+     * @param confidence Confidence level.\n+     *\n+     * @return PersonaMetadata\n+     * @throws CentralRepoException If there is an error in adding metadata.\n+     */\n+    public PersonaMetadata addMetadata(String name, String value, String justification, Persona.Confidence confidence) throws CentralRepoException {\n+        return PersonaMetadata.addPersonaMetadata(this.getId(), name, value, justification, confidence);\n+    }\n+\n+    /**\n+     * Gets all metadata for the persona.\n+     *\n+     * @return A collection of metadata, may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in retrieving aliases.\n+     */\n+    public Collection<PersonaMetadata> getMetadata() throws CentralRepoException {\n+        return PersonaMetadata.getPersonaMetadata(this.getId());\n+    }\n+\n+    /**\n+     * Gets all the Accounts for the Persona.\n+     *\n+     * @return Collection of PersonaAccounts, may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in getting the\n+     * persona_account.\n+     */\n+    public Collection<PersonaAccount> getPersonaAccounts() throws CentralRepoException {\n+        return PersonaAccount.getPersonaAccountsForPersona(this.getId());\n     }\n \n+    /**\n+     * Gets all the Persona for the specified Account.\n+     *\n+     * @param accountId Id of account for which to get the Personas for.\n+     * @return Collection of PersonaAccounts. may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in getting the\n+     * persona_account.\n+     */\n+    public static Collection<PersonaAccount> getPersonaAccountsForAccount(long accountId) throws CentralRepoException {\n+        return PersonaAccount.getPersonaAccountsForAccount(accountId);\n+    }\n+\n+    /**\n+     * Gets all the Persona associated with all the accounts matching the given\n+     * account identifier substring.\n+     *\n+     * @param accountIdentifierSubstring Account identifier substring to search\n+     * for.\n+     * @return Collection of PersonaAccounts. may be empty.\n+     *\n+     * @throws CentralRepoException If there is an error in getting the\n+     * persona_account.\n+     */\n+    public static Collection<PersonaAccount> getPersonaAccountsForAccountIdentifier(String accountIdentifierSubstring) throws CentralRepoException {\n+        return PersonaAccount.getPersonaAccountsForAccountIdentifier(accountIdentifierSubstring);\n+    }\n+    \n+    /**\n+     * Get all accounts associated with the persona.\n+     *\n+     * @return Collection of all accounts associated with the given persona, may\n+     * be empty.\n+     * @throws CentralRepoException If there is an error in getting the\n+     * accounts.\n+     */\n+    public Collection<CentralRepoAccount> getAccounts() throws CentralRepoException {\n+        return PersonaAccount.getAccountsForPersona(this.getId());\n+    }\n+\n+    /**\n+     * Callback to process a query that gets cases for account instances of an\n+     * account\n+     */\n+    private static class CaseForAccountInstanceQueryCallback implements CentralRepositoryDbQueryCallback {\n+\n+        Collection<CorrelationCase> correlationCases = new ArrayList<>();\n+\n+        @Override\n+        public void process(ResultSet resultSet) throws CentralRepoException, SQLException {\n+\n+            while (resultSet.next()) {\n+                // get Case for case_id\n+                CorrelationCase correlationCase = CentralRepository.getInstance().getCaseById(resultSet.getInt(\"case_id\"));\n+                correlationCases.add(correlationCase);\n+            }\n+        }\n+\n+        Collection<CorrelationCase> getCases() {\n+            return Collections.unmodifiableCollection(correlationCases);\n+        }\n+    };\n+\n+    /**\n+     * Gets a list of cases that the persona appears in.\n+     *\n+     * @return Collection of cases that the persona appears in, may be empty.\n+     * @throws CentralRepoException If there is an error in getting the cases\n+     * from the database.\n+     */\n+    public Collection<CorrelationCase> getCases() throws CentralRepoException {\n+\n+        Collection<CorrelationCase> casesForPersona = new ArrayList<>();\n+\n+        // get all accounts for this persona\n+        Collection<CentralRepoAccount> accounts = this.getAccounts();\n+        for (CentralRepoAccount account : accounts) {\n+            int corrTypeId = account.getAccountType().getCorrelationTypeId();\n+            CorrelationAttributeInstance.Type correlationType = CentralRepository.getInstance().getCorrelationTypeById(corrTypeId);\n+\n+            String tableName = CentralRepoDbUtil.correlationTypeToInstanceTableName(correlationType);\n+            String querySql = \"SELECT DISTINCT case_id FROM \" + tableName\n+                    + \" WHERE account_id = \" + account.getAccountId();\n+\n+            CaseForAccountInstanceQueryCallback queryCallback = new CaseForAccountInstanceQueryCallback();\n+            CentralRepository.getInstance().executeSelectSQL(querySql, queryCallback);\n+\n+            // Add any cases that aren't already on the list.\n+            for (CorrelationCase corrCase : queryCallback.getCases()) {\n+                if (!casesForPersona.stream().anyMatch(p -> p.getCaseUUID().equalsIgnoreCase(corrCase.getCaseUUID()))) {\n+                    casesForPersona.add(corrCase);\n+                }\n+            }\n+        }\n+\n+        return casesForPersona;\n+    }\n+\n+    /**\n+     * Callback to process a query that gets data source for account instances\n+     * of an account\n+     */\n+    private static class DatasourceForAccountInstanceQueryCallback implements CentralRepositoryDbQueryCallback {\n+\n+        Collection<CorrelationDataSource> correlationDataSources = new ArrayList<>();\n+\n+        @Override\n+        public void process(ResultSet resultSet) throws CentralRepoException, SQLException {\n+\n+            while (resultSet.next()) {\n+                // get Case for case_id\n+\n+                CorrelationCase correlationCase = CentralRepository.getInstance().getCaseById(resultSet.getInt(\"case_id\"));\n+                CorrelationDataSource correlationDatasource = CentralRepository.getInstance().getDataSourceById(correlationCase, resultSet.getInt(\"data_source_id\"));\n+\n+                // Add data source to list if not already on it.\n+                if (!correlationDataSources.stream().anyMatch(p -> Objects.equals(p.getDataSourceObjectID(), correlationDatasource.getDataSourceObjectID()))) {\n+                    correlationDataSources.add(correlationDatasource);\n+                }\n+            }\n+        }\n+\n+        Collection<CorrelationDataSource> getDataSources() {\n+            return Collections.unmodifiableCollection(correlationDataSources);\n+        }\n+    };\n+\n+    /**\n+     * Gets all data sources that the persona appears in.\n+     *\n+     * @return Collection of data sources that the persona appears in, may be\n+     * empty.\n+     *\n+     * @throws CentralRepoException\n+     */\n+    public Collection<CorrelationDataSource> getDataSources() throws CentralRepoException {\n+        Collection<CorrelationDataSource> correlationDataSources = new ArrayList<>();\n+\n+        Collection<CentralRepoAccount> accounts = this.getAccounts();\n+        for (CentralRepoAccount account : accounts) {\n+            int corrTypeId = account.getAccountType().getCorrelationTypeId();\n+            CorrelationAttributeInstance.Type correlationType = CentralRepository.getInstance().getCorrelationTypeById(corrTypeId);\n+\n+            String tableName = CentralRepoDbUtil.correlationTypeToInstanceTableName(correlationType);\n+            String querySql = \"SELECT case_id, data_source_id FROM \" + tableName\n+                    + \" WHERE account_id = \" + account.getAccountId();\n+\n+            DatasourceForAccountInstanceQueryCallback queryCallback = new DatasourceForAccountInstanceQueryCallback();\n+            CentralRepository.getInstance().executeSelectSQL(querySql, queryCallback);\n+\n+            // Add any data sources that aren't already on the list.\n+            for (CorrelationDataSource correlationDatasource : queryCallback.getDataSources()) {\n+                if (!correlationDataSources.stream().anyMatch(p -> Objects.equals(p.getDataSourceObjectID(), correlationDatasource.getDataSourceObjectID()))) {\n+                    correlationDataSources.add(correlationDatasource);\n+                }\n+            }\n+        }\n+\n+        return correlationDataSources;\n+    }\n+\n+    /**\n+     * Callback to process a query that gets Personas for a case/datasource.\n+     */\n+    private static class PersonaFromAccountInstanceQueryCallback implements CentralRepositoryDbQueryCallback {\n+\n+        Collection<Persona> personasList = new ArrayList<>();\n+\n+        @Override\n+        public void process(ResultSet resultSet) throws CentralRepoException, SQLException {\n+\n+            while (resultSet.next()) {\n+\n+                // examiner that created the persona\n+                CentralRepoExaminer personaExaminer = new CentralRepoExaminer(\n+                        resultSet.getInt(\"persona_examiner_id\"),\n+                        resultSet.getString(\"persona_examiner_login_name\"),\n+                        resultSet.getString(\"persona_examiner_display_name\"));\n+\n+                // create persona\n+                PersonaStatus status = PersonaStatus.fromId(resultSet.getInt(\"status_id\"));\n+                Persona persona = new Persona(\n+                        resultSet.getInt(\"persona_id\"),\n+                        resultSet.getString(\"uuid\"),\n+                        resultSet.getString(\"name\"),\n+                        resultSet.getString(\"comment\"),\n+                        Long.parseLong(resultSet.getString(\"created_date\")),\n+                        Long.parseLong(resultSet.getString(\"modified_date\")),\n+                        status,\n+                        personaExaminer\n+                );\n+\n+                personasList.add(persona);\n+            }\n+        }\n+\n+        Collection<Persona> getPersonasList() {\n+            return Collections.unmodifiableCollection(personasList);\n+        }\n+    };\n+\n+    /**\n+     * Returns a query string for selecting personas for a case/datasource from\n+     * the X_instance table for the given account type.\n+     *\n+     * @param crAccountType Account type to generate the query string for.\n+     * @return Query substring.\n+     * @throws CentralRepoException\n+     */\n+    private static String getPersonaFromInstanceTableQueryTemplate(CentralRepoAccount.CentralRepoAccountType crAccountType) throws CentralRepoException {\n+\n+        int corrTypeId = crAccountType.getCorrelationTypeId();\n+        CorrelationAttributeInstance.Type correlationType = CentralRepository.getInstance().getCorrelationTypeById(corrTypeId);\n+\n+        String instanceTableName = CentralRepoDbUtil.correlationTypeToInstanceTableName(correlationType);\n+        return \"SELECT \" + instanceTableName + \".account_id, case_id, data_source_id, \"\n+                + \" personas.id as persona_id, personas.uuid, personas.name, personas.comment, personas.created_date, personas.modified_date, personas.status_id, \"\n+                + \" personas.examiner_id as persona_examiner_id, persona_examiner.login_name as persona_examiner_login_name, persona_examiner.display_name as persona_examiner_display_name \"\n+                + \" FROM \" + instanceTableName\n+                + \" JOIN persona_accounts as pa on pa.account_id = \" + instanceTableName + \".account_id\"\n+                + \" JOIN personas as personas on personas.id = pa.persona_id\"\n+                + \" JOIN examiners as persona_examiner ON persona_examiner.id = personas.examiner_id \";\n+\n+    }\n+\n+    /**\n+     * Get all the persona for a given case.\n+     *\n+     * @param correlationCase Case to look the persona in.\n+     *\n+     * @return Collection of personas, may be empty.\n+     * @throws CentralRepoException\n+     */\n+    public static Collection<Persona> getPersonasForCase(CorrelationCase correlationCase) throws CentralRepoException {\n+        Collection<Persona> personaList = new ArrayList<>();\n+\n+        Collection<CentralRepoAccount.CentralRepoAccountType> accountTypes = CentralRepository.getInstance().getAllAccountTypes();\n+        for (CentralRepoAccount.CentralRepoAccountType crAccountType : accountTypes) {\n+\n+            String querySql = getPersonaFromInstanceTableQueryTemplate(crAccountType)\n+                    + \" WHERE case_id = \" + correlationCase.getID();\n+\n+            PersonaFromAccountInstanceQueryCallback queryCallback = new PersonaFromAccountInstanceQueryCallback();\n+            CentralRepository.getInstance().executeSelectSQL(querySql, queryCallback);\n+\n+            // Add persona that aren't already on the list.\n+            for (Persona persona : queryCallback.getPersonasList()) {\n+                if (!personaList.stream().anyMatch(p -> Objects.equals(p.getUuidStr(), persona.getUuidStr()))) {\n+                    personaList.add(persona);\n+                }\n+            }\n+\n+        }\n+        return personaList;\n+    }\n+\n+    /**\n+     * Get all the persona for a given data source.\n+     *\n+     * @param CorrelationDataSource Data source to look the persona in.\n+     *\n+     * @return Collection of personas, may be empty.\n+     * @throws CentralRepoException\n+     */\n+    public static Collection<Persona> getPersonaForDataSource(CorrelationDataSource dataSource) throws CentralRepoException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c682739d8ea74a032f8026d6986e152b568b98fc"}, "originalPosition": 652}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 584, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}