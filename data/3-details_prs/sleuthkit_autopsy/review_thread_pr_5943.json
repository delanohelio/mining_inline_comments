{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MTQ1NzQ3", "number": 5943, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDoyNTozMlrOEF9ouw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDozODozMlrOEF-Atw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Njg4MTg3OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/discovery/DiscoveryEventUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDoyNTozMlrOGkd9BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo0Nzo0NlrOGkfAMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5MjY3Ng==", "bodyText": "Again, it seems like there's an argument given...", "url": "https://github.com/sleuthkit/autopsy/pull/5943#discussion_r440892676", "createdAt": "2020-06-16T14:25:32Z", "author": {"login": "APriestman"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/DiscoveryEventUtils.java", "diffHunk": "@@ -332,4 +373,33 @@ int getGroupSize() {\n         }\n \n     }\n+\n+    /**\n+     * Event to signal that the visibility of the Details area should change.\n+     */\n+    static class DetailsVisibleEvent {\n+\n+        private final boolean showDetailsArea;\n+\n+        /**\n+         * Construct a new DetailsVisibleEvent.\n+         *\n+         * @param isVisible True if the details area should be visible, false\n+         *                  otherwise.\n+         */\n+        DetailsVisibleEvent(boolean isVisible) {\n+            showDetailsArea = isVisible;\n+            //no arg constructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b66951e74610dc3f913cbeeb225df2e299778b22"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwOTg3NA==", "bodyText": "yeah woops", "url": "https://github.com/sleuthkit/autopsy/pull/5943#discussion_r440909874", "createdAt": "2020-06-16T14:47:46Z", "author": {"login": "wschaeferB"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/DiscoveryEventUtils.java", "diffHunk": "@@ -332,4 +373,33 @@ int getGroupSize() {\n         }\n \n     }\n+\n+    /**\n+     * Event to signal that the visibility of the Details area should change.\n+     */\n+    static class DetailsVisibleEvent {\n+\n+        private final boolean showDetailsArea;\n+\n+        /**\n+         * Construct a new DetailsVisibleEvent.\n+         *\n+         * @param isVisible True if the details area should be visible, false\n+         *                  otherwise.\n+         */\n+        DetailsVisibleEvent(boolean isVisible) {\n+            showDetailsArea = isVisible;\n+            //no arg constructor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5MjY3Ng=="}, "originalCommit": {"oid": "b66951e74610dc3f913cbeeb225df2e299778b22"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Njg4MzQ0OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/discovery/DiscoveryEventUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDoyNTo1MVrOGkd-DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo0Njo1NVrOGke9ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5Mjk0MA==", "bodyText": "There seems to be an arg though?", "url": "https://github.com/sleuthkit/autopsy/pull/5943#discussion_r440892940", "createdAt": "2020-06-16T14:25:51Z", "author": {"login": "APriestman"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/DiscoveryEventUtils.java", "diffHunk": "@@ -70,6 +75,42 @@ FileType getType() {\n         }\n     }\n \n+    /**\n+     * Event to signal that the Instances list should have selection cleared.\n+     */\n+    static final class ClearInstanceSelectionEvent {\n+\n+        /**\n+         * Construct a new ClearInstanceSelectionEvent.\n+         */\n+        ClearInstanceSelectionEvent() {\n+            //no arg constructor\n+        }\n+    }\n+\n+    /**\n+     * Event to signal that the Instances list should be populated.\n+     */\n+    static final class PopulateInstancesListEvent {\n+\n+        private final List<AbstractFile> instances;\n+\n+        /**\n+         * Construct a new PopulateInstancesListEvent.\n+         */\n+        PopulateInstancesListEvent(List<AbstractFile> files) {\n+            instances = files;\n+            //no arg constructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b66951e74610dc3f913cbeeb225df2e299778b22"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwOTIxNA==", "bodyText": "woopsie", "url": "https://github.com/sleuthkit/autopsy/pull/5943#discussion_r440909214", "createdAt": "2020-06-16T14:46:55Z", "author": {"login": "wschaeferB"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/DiscoveryEventUtils.java", "diffHunk": "@@ -70,6 +75,42 @@ FileType getType() {\n         }\n     }\n \n+    /**\n+     * Event to signal that the Instances list should have selection cleared.\n+     */\n+    static final class ClearInstanceSelectionEvent {\n+\n+        /**\n+         * Construct a new ClearInstanceSelectionEvent.\n+         */\n+        ClearInstanceSelectionEvent() {\n+            //no arg constructor\n+        }\n+    }\n+\n+    /**\n+     * Event to signal that the Instances list should be populated.\n+     */\n+    static final class PopulateInstancesListEvent {\n+\n+        private final List<AbstractFile> instances;\n+\n+        /**\n+         * Construct a new PopulateInstancesListEvent.\n+         */\n+        PopulateInstancesListEvent(List<AbstractFile> files) {\n+            instances = files;\n+            //no arg constructor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5Mjk0MA=="}, "originalCommit": {"oid": "b66951e74610dc3f913cbeeb225df2e299778b22"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjkxOTQzOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/discovery/ParentFolderFilterPanel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDozMzozM1rOGkeVWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo0NzowOVrOGke-Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5ODkwNg==", "bodyText": "Should probably just delete this (and the one in the next method) if no longer needed", "url": "https://github.com/sleuthkit/autopsy/pull/5943#discussion_r440898906", "createdAt": "2020-06-16T14:33:33Z", "author": {"login": "APriestman"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/ParentFolderFilterPanel.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.DefaultListModel;\n+import javax.swing.JCheckBox;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import org.sleuthkit.autopsy.discovery.FileSearchFiltering.ParentSearchTerm;\n+\n+/**\n+ * Panel to allow configuration of the Parent Folder filter.\n+ */\n+final class ParentFolderFilterPanel extends AbstractDiscoveryFilterPanel {\n+\n+    private static final long serialVersionUID = 1L;\n+    private DefaultListModel<FileSearchFiltering.ParentSearchTerm> parentListModel;\n+    private static final String[] DEFAULT_IGNORED_PATHS = {\"/Windows/\", \"/Program Files/\"}; //NON-NLS\n+\n+    /**\n+     * Creates new form ParentFolderFilterPanel.\n+     */\n+    ParentFolderFilterPanel() {\n+        initComponents();\n+        setUpParentPathFilter();\n+    }\n+\n+    /**\n+     * Initialize the parent path filter.\n+     */\n+    private void setUpParentPathFilter() {\n+        fullRadioButton.setSelected(true);\n+        includeRadioButton.setSelected(true);\n+        parentListModel = (DefaultListModel<FileSearchFiltering.ParentSearchTerm>) parentList.getModel();\n+        for (String ignorePath : DEFAULT_IGNORED_PATHS) {\n+            parentListModel.add(parentListModel.size(), new ParentSearchTerm(ignorePath, false, false));\n+        }\n+    }\n+\n+    /**\n+     * This method is called from within the constructor to initialize the form.\n+     * WARNING: Do NOT modify this code. The content of this method is always\n+     * regenerated by the Form Editor.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n+    private void initComponents() {\n+\n+        parentCheckbox = new javax.swing.JCheckBox();\n+        parentLabel = new javax.swing.JLabel();\n+        parentScrollPane = new javax.swing.JScrollPane();\n+        parentList = new javax.swing.JList<>();\n+        fullRadioButton = new javax.swing.JRadioButton();\n+        includeRadioButton = new javax.swing.JRadioButton();\n+        substringRadioButton = new javax.swing.JRadioButton();\n+        excludeRadioButton = new javax.swing.JRadioButton();\n+        deleteButton = new javax.swing.JButton();\n+        addButton = new javax.swing.JButton();\n+        parentTextField = new javax.swing.JTextField();\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(parentCheckbox, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.parentCheckbox.text_1\")); // NOI18N\n+        parentCheckbox.setMaximumSize(new java.awt.Dimension(150, 25));\n+        parentCheckbox.setMinimumSize(new java.awt.Dimension(150, 25));\n+        parentCheckbox.setPreferredSize(new java.awt.Dimension(150, 25));\n+        parentCheckbox.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                parentCheckboxActionPerformed(evt);\n+            }\n+        });\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(parentLabel, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.parentLabel.text_1\")); // NOI18N\n+        parentLabel.setMaximumSize(new java.awt.Dimension(150, 25));\n+        parentLabel.setMinimumSize(new java.awt.Dimension(150, 25));\n+        parentLabel.setPreferredSize(new java.awt.Dimension(150, 25));\n+\n+        setMinimumSize(new java.awt.Dimension(250, 120));\n+        setPreferredSize(new java.awt.Dimension(250, 120));\n+\n+        parentScrollPane.setPreferredSize(new java.awt.Dimension(27, 27));\n+\n+        parentList.setModel(new DefaultListModel<ParentSearchTerm>());\n+        parentList.setEnabled(false);\n+        parentList.setVisibleRowCount(4);\n+        parentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {\n+            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {\n+                parentListValueChanged(evt);\n+            }\n+        });\n+        parentScrollPane.setViewportView(parentList);\n+\n+        fullRadioButton.setSelected(true);\n+        org.openide.awt.Mnemonics.setLocalizedText(fullRadioButton, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.fullRadioButton.text_1\")); // NOI18N\n+        fullRadioButton.setEnabled(false);\n+\n+        includeRadioButton.setSelected(true);\n+        org.openide.awt.Mnemonics.setLocalizedText(includeRadioButton, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.includeRadioButton.text_1\")); // NOI18N\n+        includeRadioButton.setEnabled(false);\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(substringRadioButton, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.substringRadioButton.text_1\")); // NOI18N\n+        substringRadioButton.setEnabled(false);\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(excludeRadioButton, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.excludeRadioButton.text_1\")); // NOI18N\n+        excludeRadioButton.setEnabled(false);\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(deleteButton, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.deleteButton.text_1\")); // NOI18N\n+        deleteButton.setEnabled(false);\n+        deleteButton.setMaximumSize(new java.awt.Dimension(70, 23));\n+        deleteButton.setMinimumSize(new java.awt.Dimension(70, 23));\n+        deleteButton.setPreferredSize(new java.awt.Dimension(70, 23));\n+        deleteButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                deleteButtonActionPerformed(evt);\n+            }\n+        });\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(addButton, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.addButton.text_1\")); // NOI18N\n+        addButton.setEnabled(false);\n+        addButton.setMaximumSize(new java.awt.Dimension(70, 23));\n+        addButton.setMinimumSize(new java.awt.Dimension(70, 23));\n+        addButton.setPreferredSize(new java.awt.Dimension(70, 23));\n+        addButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                addButtonActionPerformed(evt);\n+            }\n+        });\n+\n+        parentTextField.setEnabled(false);\n+\n+        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n+        this.setLayout(layout);\n+        layout.setHorizontalGroup(\n+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addGroup(layout.createSequentialGroup()\n+                .addGap(8, 8, 8)\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+                    .addComponent(includeRadioButton)\n+                    .addComponent(fullRadioButton))\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+                    .addComponent(substringRadioButton)\n+                    .addComponent(excludeRadioButton)))\n+            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n+                .addComponent(parentScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n+                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n+                    .addComponent(parentTextField)\n+                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n+                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))\n+        );\n+        layout.setVerticalGroup(\n+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n+                .addComponent(parentScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n+                    .addComponent(fullRadioButton)\n+                    .addComponent(substringRadioButton))\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n+                    .addComponent(includeRadioButton)\n+                    .addComponent(excludeRadioButton)\n+                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n+                    .addComponent(parentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n+                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n+                .addGap(0, 0, 0))\n+        );\n+    }// </editor-fold>//GEN-END:initComponents\n+\n+    private void parentCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parentCheckboxActionPerformed\n+//        parentFilterSettings(true, true, parentCheckbox.isSelected(), null);\n+    }//GEN-LAST:event_parentCheckboxActionPerformed\n+\n+    private void parentListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_parentListValueChanged\n+        if (parentList.getSelectedValuesList().isEmpty()) {\n+            deleteButton.setEnabled(false);\n+        } else {\n+            deleteButton.setEnabled(true);\n+        }\n+    }//GEN-LAST:event_parentListValueChanged\n+\n+    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed\n+        int index = parentList.getSelectedIndex();\n+        if (index >= 0) {\n+            parentListModel.remove(index);\n+        }\n+//        validateFields();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b66951e74610dc3f913cbeeb225df2e299778b22"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwOTQxMA==", "bodyText": "agreed, thank you", "url": "https://github.com/sleuthkit/autopsy/pull/5943#discussion_r440909410", "createdAt": "2020-06-16T14:47:09Z", "author": {"login": "wschaeferB"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/ParentFolderFilterPanel.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.DefaultListModel;\n+import javax.swing.JCheckBox;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import org.sleuthkit.autopsy.discovery.FileSearchFiltering.ParentSearchTerm;\n+\n+/**\n+ * Panel to allow configuration of the Parent Folder filter.\n+ */\n+final class ParentFolderFilterPanel extends AbstractDiscoveryFilterPanel {\n+\n+    private static final long serialVersionUID = 1L;\n+    private DefaultListModel<FileSearchFiltering.ParentSearchTerm> parentListModel;\n+    private static final String[] DEFAULT_IGNORED_PATHS = {\"/Windows/\", \"/Program Files/\"}; //NON-NLS\n+\n+    /**\n+     * Creates new form ParentFolderFilterPanel.\n+     */\n+    ParentFolderFilterPanel() {\n+        initComponents();\n+        setUpParentPathFilter();\n+    }\n+\n+    /**\n+     * Initialize the parent path filter.\n+     */\n+    private void setUpParentPathFilter() {\n+        fullRadioButton.setSelected(true);\n+        includeRadioButton.setSelected(true);\n+        parentListModel = (DefaultListModel<FileSearchFiltering.ParentSearchTerm>) parentList.getModel();\n+        for (String ignorePath : DEFAULT_IGNORED_PATHS) {\n+            parentListModel.add(parentListModel.size(), new ParentSearchTerm(ignorePath, false, false));\n+        }\n+    }\n+\n+    /**\n+     * This method is called from within the constructor to initialize the form.\n+     * WARNING: Do NOT modify this code. The content of this method is always\n+     * regenerated by the Form Editor.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n+    private void initComponents() {\n+\n+        parentCheckbox = new javax.swing.JCheckBox();\n+        parentLabel = new javax.swing.JLabel();\n+        parentScrollPane = new javax.swing.JScrollPane();\n+        parentList = new javax.swing.JList<>();\n+        fullRadioButton = new javax.swing.JRadioButton();\n+        includeRadioButton = new javax.swing.JRadioButton();\n+        substringRadioButton = new javax.swing.JRadioButton();\n+        excludeRadioButton = new javax.swing.JRadioButton();\n+        deleteButton = new javax.swing.JButton();\n+        addButton = new javax.swing.JButton();\n+        parentTextField = new javax.swing.JTextField();\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(parentCheckbox, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.parentCheckbox.text_1\")); // NOI18N\n+        parentCheckbox.setMaximumSize(new java.awt.Dimension(150, 25));\n+        parentCheckbox.setMinimumSize(new java.awt.Dimension(150, 25));\n+        parentCheckbox.setPreferredSize(new java.awt.Dimension(150, 25));\n+        parentCheckbox.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                parentCheckboxActionPerformed(evt);\n+            }\n+        });\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(parentLabel, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.parentLabel.text_1\")); // NOI18N\n+        parentLabel.setMaximumSize(new java.awt.Dimension(150, 25));\n+        parentLabel.setMinimumSize(new java.awt.Dimension(150, 25));\n+        parentLabel.setPreferredSize(new java.awt.Dimension(150, 25));\n+\n+        setMinimumSize(new java.awt.Dimension(250, 120));\n+        setPreferredSize(new java.awt.Dimension(250, 120));\n+\n+        parentScrollPane.setPreferredSize(new java.awt.Dimension(27, 27));\n+\n+        parentList.setModel(new DefaultListModel<ParentSearchTerm>());\n+        parentList.setEnabled(false);\n+        parentList.setVisibleRowCount(4);\n+        parentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {\n+            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {\n+                parentListValueChanged(evt);\n+            }\n+        });\n+        parentScrollPane.setViewportView(parentList);\n+\n+        fullRadioButton.setSelected(true);\n+        org.openide.awt.Mnemonics.setLocalizedText(fullRadioButton, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.fullRadioButton.text_1\")); // NOI18N\n+        fullRadioButton.setEnabled(false);\n+\n+        includeRadioButton.setSelected(true);\n+        org.openide.awt.Mnemonics.setLocalizedText(includeRadioButton, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.includeRadioButton.text_1\")); // NOI18N\n+        includeRadioButton.setEnabled(false);\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(substringRadioButton, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.substringRadioButton.text_1\")); // NOI18N\n+        substringRadioButton.setEnabled(false);\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(excludeRadioButton, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.excludeRadioButton.text_1\")); // NOI18N\n+        excludeRadioButton.setEnabled(false);\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(deleteButton, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.deleteButton.text_1\")); // NOI18N\n+        deleteButton.setEnabled(false);\n+        deleteButton.setMaximumSize(new java.awt.Dimension(70, 23));\n+        deleteButton.setMinimumSize(new java.awt.Dimension(70, 23));\n+        deleteButton.setPreferredSize(new java.awt.Dimension(70, 23));\n+        deleteButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                deleteButtonActionPerformed(evt);\n+            }\n+        });\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(addButton, org.openide.util.NbBundle.getMessage(ParentFolderFilterPanel.class, \"ParentFolderFilterPanel.addButton.text_1\")); // NOI18N\n+        addButton.setEnabled(false);\n+        addButton.setMaximumSize(new java.awt.Dimension(70, 23));\n+        addButton.setMinimumSize(new java.awt.Dimension(70, 23));\n+        addButton.setPreferredSize(new java.awt.Dimension(70, 23));\n+        addButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                addButtonActionPerformed(evt);\n+            }\n+        });\n+\n+        parentTextField.setEnabled(false);\n+\n+        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n+        this.setLayout(layout);\n+        layout.setHorizontalGroup(\n+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addGroup(layout.createSequentialGroup()\n+                .addGap(8, 8, 8)\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+                    .addComponent(includeRadioButton)\n+                    .addComponent(fullRadioButton))\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+                    .addComponent(substringRadioButton)\n+                    .addComponent(excludeRadioButton)))\n+            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n+                .addComponent(parentScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n+                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n+                    .addComponent(parentTextField)\n+                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n+                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))\n+        );\n+        layout.setVerticalGroup(\n+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n+                .addComponent(parentScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n+                    .addComponent(fullRadioButton)\n+                    .addComponent(substringRadioButton))\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n+                    .addComponent(includeRadioButton)\n+                    .addComponent(excludeRadioButton)\n+                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n+                    .addComponent(parentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n+                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n+                .addGap(0, 0, 0))\n+        );\n+    }// </editor-fold>//GEN-END:initComponents\n+\n+    private void parentCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parentCheckboxActionPerformed\n+//        parentFilterSettings(true, true, parentCheckbox.isSelected(), null);\n+    }//GEN-LAST:event_parentCheckboxActionPerformed\n+\n+    private void parentListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_parentListValueChanged\n+        if (parentList.getSelectedValuesList().isEmpty()) {\n+            deleteButton.setEnabled(false);\n+        } else {\n+            deleteButton.setEnabled(true);\n+        }\n+    }//GEN-LAST:event_parentListValueChanged\n+\n+    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed\n+        int index = parentList.getSelectedIndex();\n+        if (index >= 0) {\n+            parentListModel.remove(index);\n+        }\n+//        validateFields();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5ODkwNg=="}, "originalCommit": {"oid": "b66951e74610dc3f913cbeeb225df2e299778b22"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjkzNTIzOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/discovery/SizeFilterPanel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDozNjo0OFrOGkefJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDozNjo0OFrOGkefJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwMTQxNQ==", "bodyText": "Typo (=)", "url": "https://github.com/sleuthkit/autopsy/pull/5943#discussion_r440901415", "createdAt": "2020-06-16T14:36:48Z", "author": {"login": "APriestman"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/SizeFilterPanel.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.DefaultListModel;\n+import javax.swing.JCheckBox;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import org.sleuthkit.autopsy.discovery.FileSearchData.FileSize;\n+\n+/**\n+ * Panel to allow configuration of the Size Filter.\n+ */\n+final class SizeFilterPanel extends AbstractDiscoveryFilterPanel {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * Creates new form SizeFilterPanel=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b66951e74610dc3f913cbeeb225df2e299778b22"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Njk0MzI3OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/discovery/SizeFilterPanel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDozODozMlrOGkekZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo0NzoyOVrOGke_Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwMjc1OA==", "bodyText": "Can we maybe rename the image sizes to be more \"default size options\" (in various places) so it won't seem weird that we're using it for images and videos?", "url": "https://github.com/sleuthkit/autopsy/pull/5943#discussion_r440902758", "createdAt": "2020-06-16T14:38:32Z", "author": {"login": "APriestman"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/SizeFilterPanel.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.DefaultListModel;\n+import javax.swing.JCheckBox;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import org.sleuthkit.autopsy.discovery.FileSearchData.FileSize;\n+\n+/**\n+ * Panel to allow configuration of the Size Filter.\n+ */\n+final class SizeFilterPanel extends AbstractDiscoveryFilterPanel {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * Creates new form SizeFilterPanel=\n+     *\n+     * @param type The type of result being searched for.\n+     */\n+    SizeFilterPanel(FileSearchData.FileType type) {\n+        initComponents();\n+        setUpSizeFilter(type);\n+    }\n+\n+    /**\n+     * This method is called from within the constructor to initialize the form.\n+     * WARNING: Do NOT modify this code. The content of this method is always\n+     * regenerated by the Form Editor.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n+    private void initComponents() {\n+\n+        sizeCheckbox = new javax.swing.JCheckBox();\n+        sizeScrollPane = new javax.swing.JScrollPane();\n+        sizeList = new javax.swing.JList<>();\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(sizeCheckbox, org.openide.util.NbBundle.getMessage(SizeFilterPanel.class, \"SizeFilterPanel.sizeCheckbox.text\")); // NOI18N\n+        sizeCheckbox.setMaximumSize(new java.awt.Dimension(150, 25));\n+        sizeCheckbox.setMinimumSize(new java.awt.Dimension(150, 25));\n+        sizeCheckbox.setPreferredSize(new java.awt.Dimension(150, 25));\n+        sizeCheckbox.setVerticalAlignment(javax.swing.SwingConstants.TOP);\n+        sizeCheckbox.setVerticalTextPosition(javax.swing.SwingConstants.TOP);\n+        sizeCheckbox.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                sizeCheckboxActionPerformed(evt);\n+            }\n+        });\n+\n+        setMinimumSize(new java.awt.Dimension(250, 30));\n+        setName(\"\"); // NOI18N\n+        setPreferredSize(new java.awt.Dimension(250, 30));\n+\n+        sizeScrollPane.setPreferredSize(new java.awt.Dimension(27, 27));\n+\n+        sizeList.setModel(new DefaultListModel<FileSize>());\n+        sizeList.setEnabled(false);\n+        sizeList.setMaximumSize(new java.awt.Dimension(32767, 32767));\n+        sizeList.setVisibleRowCount(5);\n+        sizeScrollPane.setViewportView(sizeList);\n+\n+        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n+        this.setLayout(layout);\n+        layout.setHorizontalGroup(\n+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addComponent(sizeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n+        );\n+        layout.setVerticalGroup(\n+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addGroup(layout.createSequentialGroup()\n+                .addComponent(sizeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n+                .addGap(0, 0, 0))\n+        );\n+    }// </editor-fold>//GEN-END:initComponents\n+\n+    private void sizeCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeCheckboxActionPerformed\n+        sizeList.setEnabled(sizeCheckbox.isSelected());\n+    }//GEN-LAST:event_sizeCheckboxActionPerformed\n+\n+\n+    // Variables declaration - do not modify//GEN-BEGIN:variables\n+    private javax.swing.JCheckBox sizeCheckbox;\n+    private javax.swing.JList<FileSize> sizeList;\n+    private javax.swing.JScrollPane sizeScrollPane;\n+    // End of variables declaration//GEN-END:variables\n+\n+    @Override\n+    void configurePanel(boolean selected, int[] indicesSelected) {\n+        sizeCheckbox.setSelected(selected);\n+        if (sizeCheckbox.isEnabled() && sizeCheckbox.isSelected()) {\n+            sizeScrollPane.setEnabled(true);\n+            sizeList.setEnabled(true);\n+            if (indicesSelected != null) {\n+                sizeList.setSelectedIndices(indicesSelected);\n+            }\n+        } else {\n+            sizeScrollPane.setEnabled(false);\n+            sizeList.setEnabled(false);\n+        }\n+    }\n+\n+    @Override\n+    JCheckBox getCheckbox() {\n+        return sizeCheckbox;\n+    }\n+\n+    @Override\n+    JLabel getAdditionalLabel() {\n+        return null;\n+    }\n+\n+    /**\n+     * Initialize the file size filter.\n+     */\n+    private void setUpSizeFilter(FileSearchData.FileType fileType) {\n+        int count = 0;\n+        DefaultListModel<FileSize> sizeListModel = (DefaultListModel<FileSize>) sizeList.getModel();\n+        sizeListModel.removeAllElements();\n+        if (null == fileType) {\n+            for (FileSize size : FileSize.values()) {\n+                sizeListModel.add(count, size);\n+            }\n+        } else {\n+            List<FileSearchData.FileSize> sizes;\n+            switch (fileType) {\n+                case VIDEO:\n+                    sizes = FileSize.getOptionsForVideos();\n+                    break;\n+                case IMAGE:\n+                    sizes = FileSize.getOptionsForImages();\n+                    break;\n+                case DOCUMENTS:\n+                    sizes = FileSize.getOptionsForImages();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b66951e74610dc3f913cbeeb225df2e299778b22"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwOTY0Ng==", "bodyText": "yeah good call", "url": "https://github.com/sleuthkit/autopsy/pull/5943#discussion_r440909646", "createdAt": "2020-06-16T14:47:29Z", "author": {"login": "wschaeferB"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/SizeFilterPanel.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.DefaultListModel;\n+import javax.swing.JCheckBox;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import org.sleuthkit.autopsy.discovery.FileSearchData.FileSize;\n+\n+/**\n+ * Panel to allow configuration of the Size Filter.\n+ */\n+final class SizeFilterPanel extends AbstractDiscoveryFilterPanel {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * Creates new form SizeFilterPanel=\n+     *\n+     * @param type The type of result being searched for.\n+     */\n+    SizeFilterPanel(FileSearchData.FileType type) {\n+        initComponents();\n+        setUpSizeFilter(type);\n+    }\n+\n+    /**\n+     * This method is called from within the constructor to initialize the form.\n+     * WARNING: Do NOT modify this code. The content of this method is always\n+     * regenerated by the Form Editor.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n+    private void initComponents() {\n+\n+        sizeCheckbox = new javax.swing.JCheckBox();\n+        sizeScrollPane = new javax.swing.JScrollPane();\n+        sizeList = new javax.swing.JList<>();\n+\n+        org.openide.awt.Mnemonics.setLocalizedText(sizeCheckbox, org.openide.util.NbBundle.getMessage(SizeFilterPanel.class, \"SizeFilterPanel.sizeCheckbox.text\")); // NOI18N\n+        sizeCheckbox.setMaximumSize(new java.awt.Dimension(150, 25));\n+        sizeCheckbox.setMinimumSize(new java.awt.Dimension(150, 25));\n+        sizeCheckbox.setPreferredSize(new java.awt.Dimension(150, 25));\n+        sizeCheckbox.setVerticalAlignment(javax.swing.SwingConstants.TOP);\n+        sizeCheckbox.setVerticalTextPosition(javax.swing.SwingConstants.TOP);\n+        sizeCheckbox.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                sizeCheckboxActionPerformed(evt);\n+            }\n+        });\n+\n+        setMinimumSize(new java.awt.Dimension(250, 30));\n+        setName(\"\"); // NOI18N\n+        setPreferredSize(new java.awt.Dimension(250, 30));\n+\n+        sizeScrollPane.setPreferredSize(new java.awt.Dimension(27, 27));\n+\n+        sizeList.setModel(new DefaultListModel<FileSize>());\n+        sizeList.setEnabled(false);\n+        sizeList.setMaximumSize(new java.awt.Dimension(32767, 32767));\n+        sizeList.setVisibleRowCount(5);\n+        sizeScrollPane.setViewportView(sizeList);\n+\n+        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n+        this.setLayout(layout);\n+        layout.setHorizontalGroup(\n+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addComponent(sizeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n+        );\n+        layout.setVerticalGroup(\n+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n+            .addGroup(layout.createSequentialGroup()\n+                .addComponent(sizeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n+                .addGap(0, 0, 0))\n+        );\n+    }// </editor-fold>//GEN-END:initComponents\n+\n+    private void sizeCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeCheckboxActionPerformed\n+        sizeList.setEnabled(sizeCheckbox.isSelected());\n+    }//GEN-LAST:event_sizeCheckboxActionPerformed\n+\n+\n+    // Variables declaration - do not modify//GEN-BEGIN:variables\n+    private javax.swing.JCheckBox sizeCheckbox;\n+    private javax.swing.JList<FileSize> sizeList;\n+    private javax.swing.JScrollPane sizeScrollPane;\n+    // End of variables declaration//GEN-END:variables\n+\n+    @Override\n+    void configurePanel(boolean selected, int[] indicesSelected) {\n+        sizeCheckbox.setSelected(selected);\n+        if (sizeCheckbox.isEnabled() && sizeCheckbox.isSelected()) {\n+            sizeScrollPane.setEnabled(true);\n+            sizeList.setEnabled(true);\n+            if (indicesSelected != null) {\n+                sizeList.setSelectedIndices(indicesSelected);\n+            }\n+        } else {\n+            sizeScrollPane.setEnabled(false);\n+            sizeList.setEnabled(false);\n+        }\n+    }\n+\n+    @Override\n+    JCheckBox getCheckbox() {\n+        return sizeCheckbox;\n+    }\n+\n+    @Override\n+    JLabel getAdditionalLabel() {\n+        return null;\n+    }\n+\n+    /**\n+     * Initialize the file size filter.\n+     */\n+    private void setUpSizeFilter(FileSearchData.FileType fileType) {\n+        int count = 0;\n+        DefaultListModel<FileSize> sizeListModel = (DefaultListModel<FileSize>) sizeList.getModel();\n+        sizeListModel.removeAllElements();\n+        if (null == fileType) {\n+            for (FileSize size : FileSize.values()) {\n+                sizeListModel.add(count, size);\n+            }\n+        } else {\n+            List<FileSearchData.FileSize> sizes;\n+            switch (fileType) {\n+                case VIDEO:\n+                    sizes = FileSize.getOptionsForVideos();\n+                    break;\n+                case IMAGE:\n+                    sizes = FileSize.getOptionsForImages();\n+                    break;\n+                case DOCUMENTS:\n+                    sizes = FileSize.getOptionsForImages();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwMjc1OA=="}, "originalCommit": {"oid": "b66951e74610dc3f913cbeeb225df2e299778b22"}, "originalPosition": 154}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 500, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}