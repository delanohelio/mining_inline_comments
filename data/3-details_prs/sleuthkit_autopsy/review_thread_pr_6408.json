{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MDc5NTc1", "number": 6408, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzoyOToyNlrOE4wv6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzozNjowMFrOE4w-Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTU0NDA5OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datamodel/BlackboardArtifactNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzoyOToyN1rOHy4GzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODowMzoyNlrOHy5Xnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExMDA5Mw==", "bodyText": "\"which content\" => \"for which content\"", "url": "https://github.com/sleuthkit/autopsy/pull/6408#discussion_r523110093", "createdAt": "2020-11-13T17:29:27Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datamodel/BlackboardArtifactNode.java", "diffHunk": "@@ -284,17 +284,50 @@ public BlackboardArtifactNode(BlackboardArtifact artifact) {\n      */\n     private static Lookup createLookup(BlackboardArtifact artifact) {\n         final long objectID = artifact.getObjectID();\n+        Content content = null;\n         try {\n-            Content content = contentCache.get(objectID, () -> artifact.getSleuthkitCase().getContentById(objectID));\n+            if (artifact.getArtifactTypeID() == BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_DOWNLOAD.getTypeID() || artifact.getArtifactTypeID() == BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_CACHE.getTypeID()) {\n+                content = getPathIdFile(artifact);\n+            }\n             if (content == null) {\n-                return Lookups.fixed(artifact);\n-            } else {\n-                return Lookups.fixed(artifact, content);\n+                content = contentCache.get(objectID, () -> artifact.getSleuthkitCase().getContentById(objectID));\n             }\n         } catch (ExecutionException ex) {\n             logger.log(Level.SEVERE, MessageFormat.format(\"Error getting source content (artifact objID={0}\", artifact.getId()), ex); //NON-NLS\n+            content = null;\n+        }\n+        if (content == null) {\n             return Lookups.fixed(artifact);\n+        } else {\n+            return Lookups.fixed(artifact, content);\n+        }\n+\n+    }\n+\n+    /**\n+     * Private helper method to allow content specified in a path id attribute\n+     * to be retrieved.\n+     *\n+     * @param artifact The artifact which content may be specified as a tsk path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efb1e9f62ffe14c016340071177f7112038dfe7c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzMDc4Mw==", "bodyText": "Thank you.", "url": "https://github.com/sleuthkit/autopsy/pull/6408#discussion_r523130783", "createdAt": "2020-11-13T18:03:26Z", "author": {"login": "wschaeferB"}, "path": "Core/src/org/sleuthkit/autopsy/datamodel/BlackboardArtifactNode.java", "diffHunk": "@@ -284,17 +284,50 @@ public BlackboardArtifactNode(BlackboardArtifact artifact) {\n      */\n     private static Lookup createLookup(BlackboardArtifact artifact) {\n         final long objectID = artifact.getObjectID();\n+        Content content = null;\n         try {\n-            Content content = contentCache.get(objectID, () -> artifact.getSleuthkitCase().getContentById(objectID));\n+            if (artifact.getArtifactTypeID() == BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_DOWNLOAD.getTypeID() || artifact.getArtifactTypeID() == BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_CACHE.getTypeID()) {\n+                content = getPathIdFile(artifact);\n+            }\n             if (content == null) {\n-                return Lookups.fixed(artifact);\n-            } else {\n-                return Lookups.fixed(artifact, content);\n+                content = contentCache.get(objectID, () -> artifact.getSleuthkitCase().getContentById(objectID));\n             }\n         } catch (ExecutionException ex) {\n             logger.log(Level.SEVERE, MessageFormat.format(\"Error getting source content (artifact objID={0}\", artifact.getId()), ex); //NON-NLS\n+            content = null;\n+        }\n+        if (content == null) {\n             return Lookups.fixed(artifact);\n+        } else {\n+            return Lookups.fixed(artifact, content);\n+        }\n+\n+    }\n+\n+    /**\n+     * Private helper method to allow content specified in a path id attribute\n+     * to be retrieved.\n+     *\n+     * @param artifact The artifact which content may be specified as a tsk path", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExMDA5Mw=="}, "originalCommit": {"oid": "efb1e9f62ffe14c016340071177f7112038dfe7c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTU4MDgyOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datamodel/BlackboardArtifactNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzozNjowMFrOHy4cxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODowNDowMlrOHy5YyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExNTcxNw==", "bodyText": "I think that we can simplify this code slightly by taking advantage of this BlackboardArtifact method:\nBlackboardAttribute getAttribute(BlackboardAttribute.Type attributeType).", "url": "https://github.com/sleuthkit/autopsy/pull/6408#discussion_r523115717", "createdAt": "2020-11-13T17:36:00Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datamodel/BlackboardArtifactNode.java", "diffHunk": "@@ -284,17 +284,50 @@ public BlackboardArtifactNode(BlackboardArtifact artifact) {\n      */\n     private static Lookup createLookup(BlackboardArtifact artifact) {\n         final long objectID = artifact.getObjectID();\n+        Content content = null;\n         try {\n-            Content content = contentCache.get(objectID, () -> artifact.getSleuthkitCase().getContentById(objectID));\n+            if (artifact.getArtifactTypeID() == BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_DOWNLOAD.getTypeID() || artifact.getArtifactTypeID() == BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_CACHE.getTypeID()) {\n+                content = getPathIdFile(artifact);\n+            }\n             if (content == null) {\n-                return Lookups.fixed(artifact);\n-            } else {\n-                return Lookups.fixed(artifact, content);\n+                content = contentCache.get(objectID, () -> artifact.getSleuthkitCase().getContentById(objectID));\n             }\n         } catch (ExecutionException ex) {\n             logger.log(Level.SEVERE, MessageFormat.format(\"Error getting source content (artifact objID={0}\", artifact.getId()), ex); //NON-NLS\n+            content = null;\n+        }\n+        if (content == null) {\n             return Lookups.fixed(artifact);\n+        } else {\n+            return Lookups.fixed(artifact, content);\n+        }\n+\n+    }\n+\n+    /**\n+     * Private helper method to allow content specified in a path id attribute\n+     * to be retrieved.\n+     *\n+     * @param artifact The artifact which content may be specified as a tsk path\n+     *                 attribute.\n+     *\n+     * @return The Content specified by the artifact's path id attribute or null\n+     *         if there was no content available.\n+     *\n+     * @throws ExecutionException Error retrieving the file specified by the\n+     *                            path id from the cache.\n+     */\n+    private static Content getPathIdFile(BlackboardArtifact artifact) throws ExecutionException {\n+        try {\n+            for (BlackboardAttribute attribute : artifact.getAttributes()) {\n+                if (attribute.getAttributeType().getTypeID() == BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PATH_ID.getTypeID()) {\n+                    return contentCache.get(attribute.getValueLong(), () -> artifact.getSleuthkitCase().getContentById(attribute.getValueLong()));\n+                }\n+            }\n+        } catch (TskCoreException ex) {\n+            logger.log(Level.WARNING, MessageFormat.format(\"Error getting content for path id attrbiute for artifact: \", artifact.getId()), ex); //NON-NLS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efb1e9f62ffe14c016340071177f7112038dfe7c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzMTA4MA==", "bodyText": "Good catch. Thank you.", "url": "https://github.com/sleuthkit/autopsy/pull/6408#discussion_r523131080", "createdAt": "2020-11-13T18:04:02Z", "author": {"login": "wschaeferB"}, "path": "Core/src/org/sleuthkit/autopsy/datamodel/BlackboardArtifactNode.java", "diffHunk": "@@ -284,17 +284,50 @@ public BlackboardArtifactNode(BlackboardArtifact artifact) {\n      */\n     private static Lookup createLookup(BlackboardArtifact artifact) {\n         final long objectID = artifact.getObjectID();\n+        Content content = null;\n         try {\n-            Content content = contentCache.get(objectID, () -> artifact.getSleuthkitCase().getContentById(objectID));\n+            if (artifact.getArtifactTypeID() == BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_DOWNLOAD.getTypeID() || artifact.getArtifactTypeID() == BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_CACHE.getTypeID()) {\n+                content = getPathIdFile(artifact);\n+            }\n             if (content == null) {\n-                return Lookups.fixed(artifact);\n-            } else {\n-                return Lookups.fixed(artifact, content);\n+                content = contentCache.get(objectID, () -> artifact.getSleuthkitCase().getContentById(objectID));\n             }\n         } catch (ExecutionException ex) {\n             logger.log(Level.SEVERE, MessageFormat.format(\"Error getting source content (artifact objID={0}\", artifact.getId()), ex); //NON-NLS\n+            content = null;\n+        }\n+        if (content == null) {\n             return Lookups.fixed(artifact);\n+        } else {\n+            return Lookups.fixed(artifact, content);\n+        }\n+\n+    }\n+\n+    /**\n+     * Private helper method to allow content specified in a path id attribute\n+     * to be retrieved.\n+     *\n+     * @param artifact The artifact which content may be specified as a tsk path\n+     *                 attribute.\n+     *\n+     * @return The Content specified by the artifact's path id attribute or null\n+     *         if there was no content available.\n+     *\n+     * @throws ExecutionException Error retrieving the file specified by the\n+     *                            path id from the cache.\n+     */\n+    private static Content getPathIdFile(BlackboardArtifact artifact) throws ExecutionException {\n+        try {\n+            for (BlackboardAttribute attribute : artifact.getAttributes()) {\n+                if (attribute.getAttributeType().getTypeID() == BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PATH_ID.getTypeID()) {\n+                    return contentCache.get(attribute.getValueLong(), () -> artifact.getSleuthkitCase().getContentById(attribute.getValueLong()));\n+                }\n+            }\n+        } catch (TskCoreException ex) {\n+            logger.log(Level.WARNING, MessageFormat.format(\"Error getting content for path id attrbiute for artifact: \", artifact.getId()), ex); //NON-NLS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExNTcxNw=="}, "originalCommit": {"oid": "efb1e9f62ffe14c016340071177f7112038dfe7c"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 795, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}