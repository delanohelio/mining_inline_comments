{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NDg3NDAx", "number": 6493, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0MjoyOVrOE86grA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0NTowOFrOE86j5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzA4NjUyOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/geolocation/MapPanel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0MjoyOVrOH5UaWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0MjoyOVrOH5UaWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NTMwNA==", "bodyText": "Missing method header.", "url": "https://github.com/sleuthkit/autopsy/pull/6493#discussion_r529865304", "createdAt": "2020-11-24T20:42:29Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/MapPanel.java", "diffHunk": "@@ -903,4 +943,66 @@ public void paint(Graphics2D g, JXMapViewer map, int w, int h) {\n             g2d.dispose();\n         }\n     }\n+    \n+    /**\n+     * Renderer for map areas\n+     */\n+    private class MapAreaRenderer implements Painter<JXMapViewer> {\n+\n+        private final List<Set<MapWaypoint>> areas;\n+\n+        MapAreaRenderer(List<Set<MapWaypoint>> areas) {\n+            this.areas = areas;\n+        }\n+\n+        private void drawArea(Set<MapWaypoint> area, Graphics2D g, JXMapViewer map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821b733428c258b2600b4938a89bfad9cfa7293d"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzA4ODY0OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/geolocation/MapPanel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0MzoxMlrOH5Ubpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0MzoxMlrOH5Ubpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NTYzOA==", "bodyText": "Put 255.0 into constant.", "url": "https://github.com/sleuthkit/autopsy/pull/6493#discussion_r529865638", "createdAt": "2020-11-24T20:43:12Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/MapPanel.java", "diffHunk": "@@ -903,4 +943,66 @@ public void paint(Graphics2D g, JXMapViewer map, int w, int h) {\n             g2d.dispose();\n         }\n     }\n+    \n+    /**\n+     * Renderer for map areas\n+     */\n+    private class MapAreaRenderer implements Painter<JXMapViewer> {\n+\n+        private final List<Set<MapWaypoint>> areas;\n+\n+        MapAreaRenderer(List<Set<MapWaypoint>> areas) {\n+            this.areas = areas;\n+        }\n+\n+        private void drawArea(Set<MapWaypoint> area, Graphics2D g, JXMapViewer map) {\n+            if (area.isEmpty()) {\n+                return;\n+            }\n+            boolean first = true;\n+            \n+            GeneralPath polygon = new GeneralPath(GeneralPath.WIND_EVEN_ODD, area.size());\n+\n+            for (MapWaypoint wp : area) {\n+                Point2D p = map.getTileFactory().geoToPixel(wp.getPosition(), map.getZoom());\n+                int thisX = (int) p.getX();\n+                int thisY = (int) p.getY();\n+\n+                if (first) {\n+                    polygon.moveTo(thisX, thisY);\n+                    first = false;\n+                } else {\n+                    polygon.lineTo(thisX, thisY);\n+                }\n+            }\n+            polygon.closePath();\n+            \n+            Color areaColor = area.iterator().next().getColor();\n+            g.setPaint(new Color((float)(areaColor.getRed() / 255.0), ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821b733428c258b2600b4938a89bfad9cfa7293d"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzA5MDExOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/Area.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0Mzo0M1rOH5Ucnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0Mzo0M1rOH5Ucnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NTg4Nw==", "bodyText": "Should the class for the logger be Track or Area?", "url": "https://github.com/sleuthkit/autopsy/pull/6493#discussion_r529865887", "createdAt": "2020-11-24T20:43:43Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/Area.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.geolocation.datamodel;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.blackboardutils.attributes.BlackboardJsonAttrUtil;\n+import org.sleuthkit.datamodel.blackboardutils.attributes.BlackboardJsonAttrUtil.InvalidJsonException;\n+import org.sleuthkit.datamodel.blackboardutils.attributes.GeoAreaPoints;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A GPS track with which wraps the TSK_GPS_AREA artifact.\n+ */\n+public final class Area extends GeoPath {\n+    private static final Logger LOGGER = Logger.getLogger(Track.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821b733428c258b2600b4938a89bfad9cfa7293d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzA5NDc5OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/Area.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0NTowOFrOH5UfeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMToyMTozOVrOH5VqEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NjYxNw==", "bodyText": "Do we need to log the error and throw an exception?  Will the calling code write an error too?", "url": "https://github.com/sleuthkit/autopsy/pull/6493#discussion_r529866617", "createdAt": "2020-11-24T20:45:08Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/Area.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.geolocation.datamodel;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.blackboardutils.attributes.BlackboardJsonAttrUtil;\n+import org.sleuthkit.datamodel.blackboardutils.attributes.BlackboardJsonAttrUtil.InvalidJsonException;\n+import org.sleuthkit.datamodel.blackboardutils.attributes.GeoAreaPoints;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A GPS track with which wraps the TSK_GPS_AREA artifact.\n+ */\n+public final class Area extends GeoPath {\n+    private static final Logger LOGGER = Logger.getLogger(Track.class.getName());\n+\n+    /**\n+     * Construct a new Area for the given artifact.\n+     *\n+     * @param artifact\n+     *\n+     * @throws GeoLocationDataException\n+     */\n+    public Area(BlackboardArtifact artifact) throws GeoLocationDataException {\n+        this(artifact, Waypoint.getAttributesFromArtifactAsMap(artifact));\n+    }\n+\n+    /**\n+     * Construct an Area for the given artifact and attributeMap.\n+     *\n+     * @param artifact     TSK_GPD_TRACK artifact\n+     * @param attributeMap Map of the artifact attributes\n+     *\n+     * @throws GeoLocationDataException\n+     */\n+    private Area(BlackboardArtifact artifact, Map<BlackboardAttribute.ATTRIBUTE_TYPE, BlackboardAttribute> attributeMap) throws GeoLocationDataException {\n+        super(artifact, getAreaName(attributeMap));\n+\n+        GeoAreaPoints points = getPointsList(attributeMap);\n+        buildPath(points, artifact);\n+    }\n+\n+    /**\n+     * Return the name of the area from the attributeMap. Track name is stored\n+     * in the attribute TSK_NAME\n+     *\n+     * @param attributeMap\n+     *\n+     * @return Area name or empty string if none was available.\n+     */\n+    private static String getAreaName(Map<BlackboardAttribute.ATTRIBUTE_TYPE, BlackboardAttribute> attributeMap) {\n+        BlackboardAttribute attribute = attributeMap.get(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_NAME);\n+\n+        return attribute != null ? attribute.getValueString() : \"\";\n+    }\n+\n+    /**\n+     * Create the list of AreaWaypoints from the GeoTrackPoint list.\n+     *\n+     * @param points   GeoAreaPoints object.\n+     * @param artifact The artifact to which these points belong\n+     *\n+     * @throws GeoLocationDataException\n+     */\n+    @Messages({\n+        \"# {0} - area name\",\n+        \"GEOArea_point_label_header=Area outline point for area: {0}\"\n+    })\n+    private void buildPath(GeoAreaPoints points, BlackboardArtifact artifact) throws GeoLocationDataException {\n+        for (GeoAreaPoints.AreaPoint point : points) {\n+            addToPath(new AreaWaypoint(artifact, Bundle.GEOArea_point_label_header(getLabel()), point));\n+        }\n+    }\n+\n+    /**\n+     * Returns the list of GeoAreaPoints from the attributeMap. Creates the\n+     * GeoAreaPoint list from the TSK_GEO_AREAPOINTS attribute.\n+     *\n+     * @param attributeMap Map of artifact attributes.\n+     *\n+     * @return GeoTrackPoint list empty list if the attribute was not found.\n+     *\n+     * @throws GeoLocationDataException\n+     */\n+    private GeoAreaPoints getPointsList(Map<BlackboardAttribute.ATTRIBUTE_TYPE, BlackboardAttribute> attributeMap) throws GeoLocationDataException {\n+        BlackboardAttribute attribute = attributeMap.get(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_GEO_AREAPOINTS);\n+        if (attribute == null) {\n+            LOGGER.log(Level.SEVERE, \"No TSK_GEO_AREAPOINTS attribute was present on the artifact.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821b733428c258b2600b4938a89bfad9cfa7293d"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4NTcxNA==", "bodyText": "So that's copied from the Track class, and the error actually isn't logged in the one place I see it being caught in GeoPath.\n} catch (GeoLocationDataException e) {\nallParsedSuccessfully = false;\n}\nBut I think it is better behavior to throw the exception and then log it up there where we have access to the artifactID, so I'll update my code and the Track code.", "url": "https://github.com/sleuthkit/autopsy/pull/6493#discussion_r529885714", "createdAt": "2020-11-24T21:21:39Z", "author": {"login": "APriestman"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/Area.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.geolocation.datamodel;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.blackboardutils.attributes.BlackboardJsonAttrUtil;\n+import org.sleuthkit.datamodel.blackboardutils.attributes.BlackboardJsonAttrUtil.InvalidJsonException;\n+import org.sleuthkit.datamodel.blackboardutils.attributes.GeoAreaPoints;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A GPS track with which wraps the TSK_GPS_AREA artifact.\n+ */\n+public final class Area extends GeoPath {\n+    private static final Logger LOGGER = Logger.getLogger(Track.class.getName());\n+\n+    /**\n+     * Construct a new Area for the given artifact.\n+     *\n+     * @param artifact\n+     *\n+     * @throws GeoLocationDataException\n+     */\n+    public Area(BlackboardArtifact artifact) throws GeoLocationDataException {\n+        this(artifact, Waypoint.getAttributesFromArtifactAsMap(artifact));\n+    }\n+\n+    /**\n+     * Construct an Area for the given artifact and attributeMap.\n+     *\n+     * @param artifact     TSK_GPD_TRACK artifact\n+     * @param attributeMap Map of the artifact attributes\n+     *\n+     * @throws GeoLocationDataException\n+     */\n+    private Area(BlackboardArtifact artifact, Map<BlackboardAttribute.ATTRIBUTE_TYPE, BlackboardAttribute> attributeMap) throws GeoLocationDataException {\n+        super(artifact, getAreaName(attributeMap));\n+\n+        GeoAreaPoints points = getPointsList(attributeMap);\n+        buildPath(points, artifact);\n+    }\n+\n+    /**\n+     * Return the name of the area from the attributeMap. Track name is stored\n+     * in the attribute TSK_NAME\n+     *\n+     * @param attributeMap\n+     *\n+     * @return Area name or empty string if none was available.\n+     */\n+    private static String getAreaName(Map<BlackboardAttribute.ATTRIBUTE_TYPE, BlackboardAttribute> attributeMap) {\n+        BlackboardAttribute attribute = attributeMap.get(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_NAME);\n+\n+        return attribute != null ? attribute.getValueString() : \"\";\n+    }\n+\n+    /**\n+     * Create the list of AreaWaypoints from the GeoTrackPoint list.\n+     *\n+     * @param points   GeoAreaPoints object.\n+     * @param artifact The artifact to which these points belong\n+     *\n+     * @throws GeoLocationDataException\n+     */\n+    @Messages({\n+        \"# {0} - area name\",\n+        \"GEOArea_point_label_header=Area outline point for area: {0}\"\n+    })\n+    private void buildPath(GeoAreaPoints points, BlackboardArtifact artifact) throws GeoLocationDataException {\n+        for (GeoAreaPoints.AreaPoint point : points) {\n+            addToPath(new AreaWaypoint(artifact, Bundle.GEOArea_point_label_header(getLabel()), point));\n+        }\n+    }\n+\n+    /**\n+     * Returns the list of GeoAreaPoints from the attributeMap. Creates the\n+     * GeoAreaPoint list from the TSK_GEO_AREAPOINTS attribute.\n+     *\n+     * @param attributeMap Map of artifact attributes.\n+     *\n+     * @return GeoTrackPoint list empty list if the attribute was not found.\n+     *\n+     * @throws GeoLocationDataException\n+     */\n+    private GeoAreaPoints getPointsList(Map<BlackboardAttribute.ATTRIBUTE_TYPE, BlackboardAttribute> attributeMap) throws GeoLocationDataException {\n+        BlackboardAttribute attribute = attributeMap.get(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_GEO_AREAPOINTS);\n+        if (attribute == null) {\n+            LOGGER.log(Level.SEVERE, \"No TSK_GEO_AREAPOINTS attribute was present on the artifact.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NjYxNw=="}, "originalCommit": {"oid": "821b733428c258b2600b4938a89bfad9cfa7293d"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 821, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}