{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNzQ0NjM0", "number": 6552, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzoyNjowMVrOFJlD4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODoxNjoxMVrOFK_wYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTg4NzA1OnYy", "diffSide": "LEFT", "path": "Core/src/org/sleuthkit/autopsy/modules/embeddedfileextractor/Bundle.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzoyNjowMVrOIL-L7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzoyNjowMVrOIL-L7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyNDEwOA==", "bodyText": "This duplicated error message, displayed to the user, was updated and moved into an annotation.", "url": "https://github.com/sleuthkit/autopsy/pull/6552#discussion_r549424108", "createdAt": "2020-12-28T17:26:01Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/modules/embeddedfileextractor/Bundle.properties", "diffHunk": "@@ -31,8 +31,6 @@ EmbeddedFileExtractorIngestModule.ImageExtractor.pptxContainer.init.err=Pptx con\n EmbeddedFileExtractorIngestModule.ImageExtractor.xlsContainer.init.err=Xls container could not be initialized while reading: {0}\n EmbeddedFileExtractorIngestModule.ImageExtractor.xlsxContainer.init.err=Xlsx container could not be initialized while reading: {0}\n EmbeddedFileExtractorIngestModule.ImageExtractor.extractImage.addToDB.exception.msg=Unable to add the derived files to the database.\n-EmbeddedFileExtractorIngestModule.ImageExtractor.getOutputFolderPath.exception.msg=Could not get path for image extraction from Abstract File: {0}\n-EmbeddedFileExtractorIngestModule.ImageExtractor.getOutputFolderPath.exception.msg=Could not get path for image extraction from Abstract File: {0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab02aa2b95988e3b83f63229dabacbbfb171ef0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTg5MDQxOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/modules/embeddedfileextractor/Bundle.properties-MERGED", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzoyNzo0NFrOIL-N2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzoyNzo0NFrOIL-N2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyNDYwMQ==", "bodyText": "This message is for an ingest module start up exception that is display to the user, so it must be both localized and user friendly.", "url": "https://github.com/sleuthkit/autopsy/pull/6552#discussion_r549424601", "createdAt": "2020-12-28T17:27:44Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/modules/embeddedfileextractor/Bundle.properties-MERGED", "diffHunk": "@@ -1,5 +1,6 @@\n CannotCreateOutputFolder=Unable to create output folder.\n CannotRunFileTypeDetection=Unable to run file type detection.\n+EmbeddedFileExtractor_make_output_dir_err=Failed to create module output directory for Embedded File Extractor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab02aa2b95988e3b83f63229dabacbbfb171ef0"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjAzNDkyOnYy", "diffSide": "LEFT", "path": "Core/src/org/sleuthkit/autopsy/modules/embeddedfileextractor/Bundle_ja.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxODozMDoyMlrOIL_gsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxODozMDoyMlrOIL_gsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ0NTgwOA==", "bodyText": "This duplicated error message, displayed to the user, was updated and moved into an annotation.", "url": "https://github.com/sleuthkit/autopsy/pull/6552#discussion_r549445808", "createdAt": "2020-12-28T18:30:22Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/modules/embeddedfileextractor/Bundle_ja.properties", "diffHunk": "@@ -22,7 +22,6 @@ EmbeddedFileExtractorIngestModule.ArchiveExtractor.unpack.warnMsg.zipBomb=ZIP\\u7\n EmbeddedFileExtractorIngestModule.ImageExtractor.docContainer.init.err=\\u8aad\\u307f\\u53d6\\u308a\\u4e2d\\u306bDOC\\u30b3\\u30f3\\u30c6\\u30ca\\u30fc\\u3092\\u521d\\u671f\\u5316\\u3067\\u304d\\u307e\\u305b\\u3093\\u3067\\u3057\\u305f \n EmbeddedFileExtractorIngestModule.ImageExtractor.docxContainer.init.err=\\u6b21\\u3092\\u8aad\\u307f\\u53d6\\u308a\\u4e2d\\u306bDOCX\\u30b3\\u30f3\\u30c6\\u30ca\\u30fc\\u3092\\u521d\\u671f\\u5316\\u3067\\u304d\\u307e\\u305b\\u3093\\u3067\\u3057\\u305f\\: {0}\n EmbeddedFileExtractorIngestModule.ImageExtractor.extractImage.addToDB.exception.msg=\\u6d3e\\u751f\\u30d5\\u30a1\\u30a4\\u30eb\\u3092\\u30c7\\u30fc\\u30bf\\u30d9\\u30fc\\u30b9\\u306b\\u8ffd\\u52a0\\u3067\\u304d\\u307e\\u305b\\u3093.\n-EmbeddedFileExtractorIngestModule.ImageExtractor.getOutputFolderPath.exception.msg=\\u6b21\\u306e\\u62bd\\u8c61\\u30d5\\u30a1\\u30a4\\u30eb\\u304b\\u3089\\u306e\\u30a4\\u30e1\\u30fc\\u30b8\\u62bd\\u51fa\\u30d1\\u30b9\\u3092\\u53d6\\u5f97\\u3067\\u304d\\u307e\\u305b\\u3093\\u3067\\u3057\\u305f\\: {0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dc6507715c9a28ce44f289d3d7a581d4b0d456d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjEwNjM1OnYy", "diffSide": "LEFT", "path": "Core/src/org/sleuthkit/autopsy/modules/embeddedfileextractor/Bundle.properties-MERGED", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowNjo1N1rOIMAHrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowNjo1N1rOIMAHrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NTc4OQ==", "bodyText": "This duplicated error message, displayed to the user, was updated and moved into an annotation.", "url": "https://github.com/sleuthkit/autopsy/pull/6552#discussion_r549455789", "createdAt": "2020-12-28T19:06:57Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/modules/embeddedfileextractor/Bundle.properties-MERGED", "diffHunk": "@@ -43,8 +44,6 @@ EmbeddedFileExtractorIngestModule.ImageExtractor.pptxContainer.init.err=Pptx con\n EmbeddedFileExtractorIngestModule.ImageExtractor.xlsContainer.init.err=Xls container could not be initialized while reading: {0}\n EmbeddedFileExtractorIngestModule.ImageExtractor.xlsxContainer.init.err=Xlsx container could not be initialized while reading: {0}\n EmbeddedFileExtractorIngestModule.ImageExtractor.extractImage.addToDB.exception.msg=Unable to add the derived files to the database.\n-EmbeddedFileExtractorIngestModule.ImageExtractor.getOutputFolderPath.exception.msg=Could not get path for image extraction from Abstract File: {0}\n-EmbeddedFileExtractorIngestModule.ImageExtractor.getOutputFolderPath.exception.msg=Could not get path for image extraction from Abstract File: {0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f96111669a85c5cd755eef1bc3b1a8516c8976b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDc0MzcwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/threadutils/TaskRetryUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODoxNToyNFrOIN71lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODoxNToyNFrOIN71lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4Mjc3Mg==", "bodyText": "I think I would note here that the units for the delay (and the timeout in the next getter) come from getTimeUnit()", "url": "https://github.com/sleuthkit/autopsy/pull/6552#discussion_r551482772", "createdAt": "2021-01-04T18:15:24Z", "author": {"login": "APriestman"}, "path": "Core/src/org/sleuthkit/autopsy/threadutils/TaskRetryUtil.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.threadutils;\n+\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A utility that attempts a task a specified number of times with a specified\n+ * delay before each attempt and an optional timeout for each attempt. If an\n+ * attempt times out, the attempt will be cancelled and the next attempt, if\n+ * any, will begin.\n+ */\n+public class TaskRetryUtil {\n+\n+    private static final AtomicLong totalTasks = new AtomicLong();\n+    private static final AtomicLong totalTaskRetries = new AtomicLong();\n+    private static final AtomicLong totalTaskAttemptTimeOuts = new AtomicLong();\n+    private static final AtomicLong totalFailedTasks = new AtomicLong();\n+\n+    /**\n+     * Encapsulates the specification of a task attempt for the attemptTask()\n+     * utility.\n+     */\n+    public static class TaskAttempt {\n+\n+        private final Long delay;\n+        private final Long timeOut;\n+        private final TimeUnit timeUnit;\n+\n+        /**\n+         * Constructs an object that encapsulates the specification of a task\n+         * attempt for the attemptTask() utility. The attempt will have neither\n+         * a delay nor a time out.\n+         *\n+         * @param delay         The delay before the task should be attempted,\n+         *                      may be zero or any positive integer.\n+         * @param delayTimeUnit The time unit for the delay before the task\n+         *                      should be attempted.\n+         */\n+        public TaskAttempt() {\n+            this.delay = 0L;\n+            this.timeOut = 0L;\n+            this.timeUnit = TimeUnit.SECONDS;\n+        }\n+\n+        /**\n+         * Constructs an object that encapsulates the specification of a task\n+         * attempt for the attemptTask() utility.\n+         *\n+         * @param delay    The delay before the task should be attempted, may be\n+         *                 zero or any positive integer.\n+         * @param timeUnit The time unit for the delay before the task should be\n+         *                 attempted.\n+         */\n+        public TaskAttempt(Long delay, TimeUnit timeUnit) {\n+            if (delay == null || delay < 0) {\n+                throw new IllegalArgumentException(String.format(\"Argument for delay parameter = %d, must be zero or any positive integer\", delay));\n+            }\n+            if (timeUnit == null) {\n+                throw new IllegalArgumentException(\"Argument for timeUnit parameter is null\");\n+            }\n+            this.delay = delay;\n+            this.timeOut = 0L;\n+            this.timeUnit = TimeUnit.SECONDS;\n+        }\n+\n+        /**\n+         * Constructs an object that encapsulates the specification of a task\n+         * attempt for the attemptTask() utility.\n+         *\n+         * @param delay    The delay before the task should be attempted, must\n+         *                 be zero or any positive integer.\n+         * @param timeOut  The timeout for the task attempt, must be zero or any\n+         *                 positive integer.\n+         * @param timeUnit The time unit for the delay before the task should be\n+         *                 attempted and the time out.\n+         */\n+        public TaskAttempt(Long delay, Long timeOut, TimeUnit timeUnit) {\n+            if (delay == null || delay < 0) {\n+                throw new IllegalArgumentException(String.format(\"Argument for delay parameter = %d, must be zero or any positive integer\", delay));\n+            }\n+            if (timeOut == null || timeOut < 0) {\n+                throw new IllegalArgumentException(String.format(\"Argument for timeOut parameter = %d, must be zero or any positive integer\", delay));\n+            }\n+            if (timeUnit == null) {\n+                throw new IllegalArgumentException(\"Argument for timeUnit parameter is null\");\n+            }\n+            this.delay = delay;\n+            this.timeOut = timeOut;\n+            this.timeUnit = timeUnit;\n+        }\n+\n+        /**\n+         * Gets the optional delay before the task should be attempted, may be\n+         * zero.\n+         *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd91b15838200498b61b0ee429df58cfdcdac1ef"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDc0NjU2OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/threadutils/TaskRetryUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODoxNjoxMVrOIN73aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODo0MToxNFrOIN8oUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MzI0MQ==", "bodyText": "I think this should be saving the passed in timeUnit", "url": "https://github.com/sleuthkit/autopsy/pull/6552#discussion_r551483241", "createdAt": "2021-01-04T18:16:11Z", "author": {"login": "APriestman"}, "path": "Core/src/org/sleuthkit/autopsy/threadutils/TaskRetryUtil.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.threadutils;\n+\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A utility that attempts a task a specified number of times with a specified\n+ * delay before each attempt and an optional timeout for each attempt. If an\n+ * attempt times out, the attempt will be cancelled and the next attempt, if\n+ * any, will begin.\n+ */\n+public class TaskRetryUtil {\n+\n+    private static final AtomicLong totalTasks = new AtomicLong();\n+    private static final AtomicLong totalTaskRetries = new AtomicLong();\n+    private static final AtomicLong totalTaskAttemptTimeOuts = new AtomicLong();\n+    private static final AtomicLong totalFailedTasks = new AtomicLong();\n+\n+    /**\n+     * Encapsulates the specification of a task attempt for the attemptTask()\n+     * utility.\n+     */\n+    public static class TaskAttempt {\n+\n+        private final Long delay;\n+        private final Long timeOut;\n+        private final TimeUnit timeUnit;\n+\n+        /**\n+         * Constructs an object that encapsulates the specification of a task\n+         * attempt for the attemptTask() utility. The attempt will have neither\n+         * a delay nor a time out.\n+         *\n+         * @param delay         The delay before the task should be attempted,\n+         *                      may be zero or any positive integer.\n+         * @param delayTimeUnit The time unit for the delay before the task\n+         *                      should be attempted.\n+         */\n+        public TaskAttempt() {\n+            this.delay = 0L;\n+            this.timeOut = 0L;\n+            this.timeUnit = TimeUnit.SECONDS;\n+        }\n+\n+        /**\n+         * Constructs an object that encapsulates the specification of a task\n+         * attempt for the attemptTask() utility.\n+         *\n+         * @param delay    The delay before the task should be attempted, may be\n+         *                 zero or any positive integer.\n+         * @param timeUnit The time unit for the delay before the task should be\n+         *                 attempted.\n+         */\n+        public TaskAttempt(Long delay, TimeUnit timeUnit) {\n+            if (delay == null || delay < 0) {\n+                throw new IllegalArgumentException(String.format(\"Argument for delay parameter = %d, must be zero or any positive integer\", delay));\n+            }\n+            if (timeUnit == null) {\n+                throw new IllegalArgumentException(\"Argument for timeUnit parameter is null\");\n+            }\n+            this.delay = delay;\n+            this.timeOut = 0L;\n+            this.timeUnit = TimeUnit.SECONDS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd91b15838200498b61b0ee429df58cfdcdac1ef"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5NTc2MA==", "bodyText": "Yes, good catch, thanks.", "url": "https://github.com/sleuthkit/autopsy/pull/6552#discussion_r551495760", "createdAt": "2021-01-04T18:41:14Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/threadutils/TaskRetryUtil.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.threadutils;\n+\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A utility that attempts a task a specified number of times with a specified\n+ * delay before each attempt and an optional timeout for each attempt. If an\n+ * attempt times out, the attempt will be cancelled and the next attempt, if\n+ * any, will begin.\n+ */\n+public class TaskRetryUtil {\n+\n+    private static final AtomicLong totalTasks = new AtomicLong();\n+    private static final AtomicLong totalTaskRetries = new AtomicLong();\n+    private static final AtomicLong totalTaskAttemptTimeOuts = new AtomicLong();\n+    private static final AtomicLong totalFailedTasks = new AtomicLong();\n+\n+    /**\n+     * Encapsulates the specification of a task attempt for the attemptTask()\n+     * utility.\n+     */\n+    public static class TaskAttempt {\n+\n+        private final Long delay;\n+        private final Long timeOut;\n+        private final TimeUnit timeUnit;\n+\n+        /**\n+         * Constructs an object that encapsulates the specification of a task\n+         * attempt for the attemptTask() utility. The attempt will have neither\n+         * a delay nor a time out.\n+         *\n+         * @param delay         The delay before the task should be attempted,\n+         *                      may be zero or any positive integer.\n+         * @param delayTimeUnit The time unit for the delay before the task\n+         *                      should be attempted.\n+         */\n+        public TaskAttempt() {\n+            this.delay = 0L;\n+            this.timeOut = 0L;\n+            this.timeUnit = TimeUnit.SECONDS;\n+        }\n+\n+        /**\n+         * Constructs an object that encapsulates the specification of a task\n+         * attempt for the attemptTask() utility.\n+         *\n+         * @param delay    The delay before the task should be attempted, may be\n+         *                 zero or any positive integer.\n+         * @param timeUnit The time unit for the delay before the task should be\n+         *                 attempted.\n+         */\n+        public TaskAttempt(Long delay, TimeUnit timeUnit) {\n+            if (delay == null || delay < 0) {\n+                throw new IllegalArgumentException(String.format(\"Argument for delay parameter = %d, must be zero or any positive integer\", delay));\n+            }\n+            if (timeUnit == null) {\n+                throw new IllegalArgumentException(\"Argument for timeUnit parameter is null\");\n+            }\n+            this.delay = delay;\n+            this.timeOut = 0L;\n+            this.timeUnit = TimeUnit.SECONDS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MzI0MQ=="}, "originalCommit": {"oid": "dd91b15838200498b61b0ee429df58cfdcdac1ef"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 786, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}