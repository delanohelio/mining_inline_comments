{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MDM0MzQ1", "number": 6223, "title": "6721 finish user activity", "bodyText": "", "createdAt": "2020-09-01T12:08:34Z", "url": "https://github.com/sleuthkit/autopsy/pull/6223", "merged": true, "mergeCommit": {"oid": "86d0debe66594c99fdd51a067111796859e5d576"}, "closed": true, "closedAt": "2020-09-04T14:25:29Z", "author": {"login": "gdicristofaro"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdETSKZAH2gAyNDc3MDM0MzQ1OjNjMjAyNDE5OTU1ZmE4MjI3MWI0ZGYwMDk2MjgzYzVmMDU3ZTFlMjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFl-4xAFqTQ4MjY5MzUxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3c202419955fa82271b4df0096283c5f057e1e25", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/3c202419955fa82271b4df0096283c5f057e1e25", "committedDate": "2020-08-31T14:00:58Z", "message": "adding in table and data requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21ea947b66c7fdb07fb17dca82c50f73937aa4ea", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/21ea947b66c7fdb07fb17dca82c50f73937aa4ea", "committedDate": "2020-08-31T14:37:28Z", "message": "updated User Activity panel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42b04b749199b4d7ddb9740f2dec89df416d70fb", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/42b04b749199b4d7ddb9740f2dec89df416d70fb", "committedDate": "2020-08-31T17:21:52Z", "message": "tweaking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10faa7d8ef03445db60382e787a6c36c89587805", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/10faa7d8ef03445db60382e787a6c36c89587805", "committedDate": "2020-08-31T20:02:47Z", "message": "commenting and formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f225c5514e48cbe57028ca7b91b16f60cefca75", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/0f225c5514e48cbe57028ca7b91b16f60cefca75", "committedDate": "2020-09-01T11:35:08Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79a94a638f3c192c20f269f844a05748d8d63e56", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/79a94a638f3c192c20f269f844a05748d8d63e56", "committedDate": "2020-09-01T12:08:02Z", "message": "Merge branch 'develop' of github.com:sleuthkit/autopsy into 6721-finishUserActivity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d9cee2a4a0e2de0536ae79d9e2661658ecf86c1", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/8d9cee2a4a0e2de0536ae79d9e2661658ecf86c1", "committedDate": "2020-09-01T12:28:09Z", "message": "codacy adjustments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "031c3f7d16c7ffb03f2c789db70081d1ee3e749d", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/031c3f7d16c7ffb03f2c789db70081d1ee3e749d", "committedDate": "2020-09-01T12:54:12Z", "message": "update for codacy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a8b51d51c2ab7af930174448ab640f402e59600", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/9a8b51d51c2ab7af930174448ab640f402e59600", "committedDate": "2020-09-01T13:08:11Z", "message": "rename for codacy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd5169678916f7c644caaa88ad3d2997b306f296", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/cd5169678916f7c644caaa88ad3d2997b306f296", "committedDate": "2020-09-01T13:08:17Z", "message": "rename for codacy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6c41a3f67010f27f2d139cceec779d4dbb56ce1", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/e6c41a3f67010f27f2d139cceec779d4dbb56ce1", "committedDate": "2020-09-01T13:41:13Z", "message": "update for codacy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMTc4ODQ0", "url": "https://github.com/sleuthkit/autopsy/pull/6223#pullrequestreview-481178844", "createdAt": "2020-09-02T18:59:21Z", "commit": {"oid": "e6c41a3f67010f27f2d139cceec779d4dbb56ce1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODo1OToyMlrOHL97fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowNDo0OVrOHL-PQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxMTAzNg==", "bodyText": "Why are you passing in the logger?  I don't think I have seen that before.", "url": "https://github.com/sleuthkit/autopsy/pull/6223#discussion_r482311036", "createdAt": "2020-09-02T18:59:22Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceUserActivitySummary.java", "diffHunk": "@@ -0,0 +1,439 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.datamodel;\n+\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sleuthkit.autopsy.datasourcesummary.datamodel.SleuthkitCaseProvider.SleuthkitCaseProviderException;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.DataSource;\n+import org.sleuthkit.datamodel.TskCoreException;\n+import org.sleuthkit.autopsy.texttranslation.NoServiceProviderException;\n+import org.sleuthkit.autopsy.texttranslation.TextTranslationService;\n+import org.sleuthkit.autopsy.texttranslation.TranslationException;\n+import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE;\n+import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE;\n+\n+/**\n+ * Provides summary information about user activity in a datasource. At this\n+ * time, the data being provided for domains is fictitious and is done as a\n+ * placeholder.\n+ */\n+public class DataSourceUserActivitySummary {\n+\n+    private static final BlackboardArtifact.Type TYPE_DEVICE_ATTACHED = new BlackboardArtifact.Type(ARTIFACT_TYPE.TSK_DEVICE_ATTACHED);\n+\n+    private static final BlackboardAttribute.Type TYPE_DATETIME = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DATETIME);\n+    private static final BlackboardAttribute.Type TYPE_DATETIME_ACCESSED = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DATETIME_ACCESSED);\n+    private static final BlackboardAttribute.Type TYPE_DEVICE_ID = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DEVICE_ID);\n+    private static final BlackboardAttribute.Type TYPE_DEVICE_MAKE = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DEVICE_MAKE);\n+    private static final BlackboardAttribute.Type TYPE_DEVICE_MODEL = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DEVICE_MODEL);\n+    private static final BlackboardAttribute.Type TYPE_MESSAGE_TYPE = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_MESSAGE_TYPE);\n+    private static final BlackboardAttribute.Type TYPE_TEXT = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_TEXT);\n+\n+    private static final Comparator<TopAccountResult> TOP_ACCOUNT_RESULT_DATE_COMPARE = (a, b) -> a.getLastAccess().compareTo(b.getLastAccess());\n+    private static final Comparator<TopWebSearchResult> TOP_WEBSEARCH_RESULT_DATE_COMPARE = (a, b) -> a.getDateAccessed().compareTo(b.getDateAccessed());\n+    private static final String ROOT_HUB_IDENTIFIER = \"ROOT_HUB\";\n+\n+    private static final long SLEEP_TIME = 5000;\n+\n+    /**\n+     * A function to calculate a result from 2 parameters.\n+     */\n+    interface Function2<A1, A2, O> {\n+\n+        O apply(A1 a1, A2 a2);\n+    }\n+\n+    /**\n+     * Gets a list of recent domains based on the datasource.\n+     *\n+     * @param dataSource The datasource to query for recent domains.\n+     * @param count      The max count of items to return.\n+     *\n+     * @return The list of items retrieved from the database.\n+     *\n+     * @throws InterruptedException\n+     */\n+    public List<TopDomainsResult> getRecentDomains(DataSource dataSource, int count) throws InterruptedException {\n+        Thread.sleep(SLEEP_TIME);\n+        final String dId = Long.toString(dataSource.getId());\n+        final Function2<String, Integer, String> getId = (s, idx) -> String.format(\"d:%s, f:%s, i:%d\", dId, s, idx);\n+        return IntStream.range(0, count)\n+                .mapToObj(num -> new TopDomainsResult(\n+                getId.apply(\"domain\", num),\n+                getId.apply(\"url\", num),\n+                (long) num,\n+                new Date(((long) num) * 1000 * 60 * 60 * 24)\n+        ))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private final SleuthkitCaseProvider caseProvider;\n+    private final TextTranslationService translationService;\n+    private final java.util.logging.Logger logger;\n+\n+    /**\n+     * Main constructor.\n+     */\n+    public DataSourceUserActivitySummary() {\n+        this(SleuthkitCaseProvider.DEFAULT, TextTranslationService.getInstance(),\n+                org.sleuthkit.autopsy.coreutils.Logger.getLogger(DataSourceUserActivitySummary.class.getName()));\n+    }\n+\n+    /**\n+     * Main constructor with external dependencies specified. This constructor\n+     * is designed with unit testing in mind since mocked dependencies can be\n+     * utilized.\n+     *\n+     * @param provider           The object providing the current SleuthkitCase.\n+     * @param translationService The translation service.\n+     * @param logger             The logger to use.\n+     */\n+    public DataSourceUserActivitySummary(\n+            SleuthkitCaseProvider provider,\n+            TextTranslationService translationService,\n+            java.util.logging.Logger logger) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c41a3f67010f27f2d139cceec779d4dbb56ce1"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxMjg1MQ==", "bodyText": "There is a warning about dereferencing a null pointer.", "url": "https://github.com/sleuthkit/autopsy/pull/6223#discussion_r482312851", "createdAt": "2020-09-02T19:01:16Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceUserActivitySummary.java", "diffHunk": "@@ -0,0 +1,439 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.datamodel;\n+\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sleuthkit.autopsy.datasourcesummary.datamodel.SleuthkitCaseProvider.SleuthkitCaseProviderException;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.DataSource;\n+import org.sleuthkit.datamodel.TskCoreException;\n+import org.sleuthkit.autopsy.texttranslation.NoServiceProviderException;\n+import org.sleuthkit.autopsy.texttranslation.TextTranslationService;\n+import org.sleuthkit.autopsy.texttranslation.TranslationException;\n+import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE;\n+import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE;\n+\n+/**\n+ * Provides summary information about user activity in a datasource. At this\n+ * time, the data being provided for domains is fictitious and is done as a\n+ * placeholder.\n+ */\n+public class DataSourceUserActivitySummary {\n+\n+    private static final BlackboardArtifact.Type TYPE_DEVICE_ATTACHED = new BlackboardArtifact.Type(ARTIFACT_TYPE.TSK_DEVICE_ATTACHED);\n+\n+    private static final BlackboardAttribute.Type TYPE_DATETIME = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DATETIME);\n+    private static final BlackboardAttribute.Type TYPE_DATETIME_ACCESSED = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DATETIME_ACCESSED);\n+    private static final BlackboardAttribute.Type TYPE_DEVICE_ID = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DEVICE_ID);\n+    private static final BlackboardAttribute.Type TYPE_DEVICE_MAKE = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DEVICE_MAKE);\n+    private static final BlackboardAttribute.Type TYPE_DEVICE_MODEL = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DEVICE_MODEL);\n+    private static final BlackboardAttribute.Type TYPE_MESSAGE_TYPE = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_MESSAGE_TYPE);\n+    private static final BlackboardAttribute.Type TYPE_TEXT = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_TEXT);\n+\n+    private static final Comparator<TopAccountResult> TOP_ACCOUNT_RESULT_DATE_COMPARE = (a, b) -> a.getLastAccess().compareTo(b.getLastAccess());\n+    private static final Comparator<TopWebSearchResult> TOP_WEBSEARCH_RESULT_DATE_COMPARE = (a, b) -> a.getDateAccessed().compareTo(b.getDateAccessed());\n+    private static final String ROOT_HUB_IDENTIFIER = \"ROOT_HUB\";\n+\n+    private static final long SLEEP_TIME = 5000;\n+\n+    /**\n+     * A function to calculate a result from 2 parameters.\n+     */\n+    interface Function2<A1, A2, O> {\n+\n+        O apply(A1 a1, A2 a2);\n+    }\n+\n+    /**\n+     * Gets a list of recent domains based on the datasource.\n+     *\n+     * @param dataSource The datasource to query for recent domains.\n+     * @param count      The max count of items to return.\n+     *\n+     * @return The list of items retrieved from the database.\n+     *\n+     * @throws InterruptedException\n+     */\n+    public List<TopDomainsResult> getRecentDomains(DataSource dataSource, int count) throws InterruptedException {\n+        Thread.sleep(SLEEP_TIME);\n+        final String dId = Long.toString(dataSource.getId());\n+        final Function2<String, Integer, String> getId = (s, idx) -> String.format(\"d:%s, f:%s, i:%d\", dId, s, idx);\n+        return IntStream.range(0, count)\n+                .mapToObj(num -> new TopDomainsResult(\n+                getId.apply(\"domain\", num),\n+                getId.apply(\"url\", num),\n+                (long) num,\n+                new Date(((long) num) * 1000 * 60 * 60 * 24)\n+        ))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private final SleuthkitCaseProvider caseProvider;\n+    private final TextTranslationService translationService;\n+    private final java.util.logging.Logger logger;\n+\n+    /**\n+     * Main constructor.\n+     */\n+    public DataSourceUserActivitySummary() {\n+        this(SleuthkitCaseProvider.DEFAULT, TextTranslationService.getInstance(),\n+                org.sleuthkit.autopsy.coreutils.Logger.getLogger(DataSourceUserActivitySummary.class.getName()));\n+    }\n+\n+    /**\n+     * Main constructor with external dependencies specified. This constructor\n+     * is designed with unit testing in mind since mocked dependencies can be\n+     * utilized.\n+     *\n+     * @param provider           The object providing the current SleuthkitCase.\n+     * @param translationService The translation service.\n+     * @param logger             The logger to use.\n+     */\n+    public DataSourceUserActivitySummary(\n+            SleuthkitCaseProvider provider,\n+            TextTranslationService translationService,\n+            java.util.logging.Logger logger) {\n+\n+        this.caseProvider = provider;\n+        this.translationService = translationService;\n+        this.logger = logger;\n+    }\n+\n+    /**\n+     * Throws an IllegalArgumentException if count <= 0.\n+     *\n+     * @param count The count being checked.\n+     */\n+    private void assertValidCount(int count) {\n+        if (count <= 0) {\n+            throw new IllegalArgumentException(\"Count must be greater than 0\");\n+        }\n+    }\n+\n+    /**\n+     * Retrieves most recent web searches by most recent date grouped by search\n+     * term.\n+     *\n+     * @param dataSource The data source.\n+     * @param count      The maximum number of records to be shown (must be >\n+     *                   0).\n+     *\n+     * @return The list of most recent web searches where most recent search\n+     *         appears first.\n+     *\n+     * @throws\n+     * org.sleuthkit.autopsy.datasourcesummary.datamodel.SleuthkitCaseProvider.SleuthkitCaseProviderException\n+     * @throws TskCoreException\n+     */\n+    public List<TopWebSearchResult> getMostRecentWebSearches(DataSource dataSource, int count) throws SleuthkitCaseProviderException, TskCoreException {\n+        assertValidCount(count);\n+\n+        List<TopWebSearchResult> results = caseProvider.get().getBlackboard().getArtifacts(ARTIFACT_TYPE.TSK_WEB_SEARCH_QUERY.getTypeID(), dataSource.getId())\n+                .stream()\n+                // get items where search string and date is not null\n+                .map(artifact -> {\n+                    String searchString = DataSourceInfoUtilities.getStringOrNull(artifact, TYPE_TEXT);\n+                    Date dateAccessed = DataSourceInfoUtilities.getDateOrNull(artifact, TYPE_DATETIME_ACCESSED);\n+                    return (StringUtils.isNotBlank(searchString) && dateAccessed != null)\n+                            ? new TopWebSearchResult(searchString, dateAccessed)\n+                            : null;\n+                })\n+                // remove null records\n+                .filter(result -> result != null)\n+                // get these messages grouped by search to string\n+                .collect(Collectors.groupingBy((result) -> result.getSearchString().toUpperCase()))\n+                .entrySet()\n+                .stream()\n+                // get the most recent access per account type\n+                .map((entry) -> entry.getValue().stream().max(TOP_WEBSEARCH_RESULT_DATE_COMPARE).get())\n+                // get most recent accounts accessed\n+                .sorted(TOP_WEBSEARCH_RESULT_DATE_COMPARE.reversed())\n+                .limit(count)\n+                // get as list\n+                .collect(Collectors.toList());\n+\n+        // get translation if possible\n+        if (translationService.hasProvider()) {\n+            for (TopWebSearchResult result : results) {\n+                result.setTranslatedResult(getTranslationOrNull(result.getSearchString()));\n+            }\n+        }\n+\n+        return results;\n+    }\n+\n+    /**\n+     * Return the translation of the original text if possible and differs from\n+     * the original. Otherwise, return null.\n+     *\n+     * @param original The original text.\n+     *\n+     * @return The translated text or null if no translation can be determined\n+     *         or exists.\n+     */\n+    private String getTranslationOrNull(String original) {\n+        if (!translationService.hasProvider() || StringUtils.isBlank(original)) {\n+            return null;\n+        }\n+\n+        String translated = null;\n+        try {\n+            translated = translationService.translate(original);\n+        } catch (NoServiceProviderException | TranslationException ex) {\n+            logger.log(Level.WARNING, String.format(\"There was an error translating text: '%s'\", original), ex);\n+        }\n+\n+        // if there is no translation or the translation is the same as the original, return null.\n+        if (StringUtils.isBlank(translated)\n+                || translated.toUpperCase().trim().equals(original.toUpperCase().trim())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c41a3f67010f27f2d139cceec779d4dbb56ce1"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNDcxNA==", "bodyText": "This would be very difficult to debug if there was an issue.  You might want to consider revising.", "url": "https://github.com/sleuthkit/autopsy/pull/6223#discussion_r482314714", "createdAt": "2020-09-02T19:03:19Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceUserActivitySummary.java", "diffHunk": "@@ -0,0 +1,439 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.datamodel;\n+\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sleuthkit.autopsy.datasourcesummary.datamodel.SleuthkitCaseProvider.SleuthkitCaseProviderException;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.DataSource;\n+import org.sleuthkit.datamodel.TskCoreException;\n+import org.sleuthkit.autopsy.texttranslation.NoServiceProviderException;\n+import org.sleuthkit.autopsy.texttranslation.TextTranslationService;\n+import org.sleuthkit.autopsy.texttranslation.TranslationException;\n+import static org.sleuthkit.datamodel.BlackboardArtifact.ARTIFACT_TYPE;\n+import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE;\n+\n+/**\n+ * Provides summary information about user activity in a datasource. At this\n+ * time, the data being provided for domains is fictitious and is done as a\n+ * placeholder.\n+ */\n+public class DataSourceUserActivitySummary {\n+\n+    private static final BlackboardArtifact.Type TYPE_DEVICE_ATTACHED = new BlackboardArtifact.Type(ARTIFACT_TYPE.TSK_DEVICE_ATTACHED);\n+\n+    private static final BlackboardAttribute.Type TYPE_DATETIME = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DATETIME);\n+    private static final BlackboardAttribute.Type TYPE_DATETIME_ACCESSED = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DATETIME_ACCESSED);\n+    private static final BlackboardAttribute.Type TYPE_DEVICE_ID = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DEVICE_ID);\n+    private static final BlackboardAttribute.Type TYPE_DEVICE_MAKE = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DEVICE_MAKE);\n+    private static final BlackboardAttribute.Type TYPE_DEVICE_MODEL = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_DEVICE_MODEL);\n+    private static final BlackboardAttribute.Type TYPE_MESSAGE_TYPE = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_MESSAGE_TYPE);\n+    private static final BlackboardAttribute.Type TYPE_TEXT = new BlackboardAttribute.Type(ATTRIBUTE_TYPE.TSK_TEXT);\n+\n+    private static final Comparator<TopAccountResult> TOP_ACCOUNT_RESULT_DATE_COMPARE = (a, b) -> a.getLastAccess().compareTo(b.getLastAccess());\n+    private static final Comparator<TopWebSearchResult> TOP_WEBSEARCH_RESULT_DATE_COMPARE = (a, b) -> a.getDateAccessed().compareTo(b.getDateAccessed());\n+    private static final String ROOT_HUB_IDENTIFIER = \"ROOT_HUB\";\n+\n+    private static final long SLEEP_TIME = 5000;\n+\n+    /**\n+     * A function to calculate a result from 2 parameters.\n+     */\n+    interface Function2<A1, A2, O> {\n+\n+        O apply(A1 a1, A2 a2);\n+    }\n+\n+    /**\n+     * Gets a list of recent domains based on the datasource.\n+     *\n+     * @param dataSource The datasource to query for recent domains.\n+     * @param count      The max count of items to return.\n+     *\n+     * @return The list of items retrieved from the database.\n+     *\n+     * @throws InterruptedException\n+     */\n+    public List<TopDomainsResult> getRecentDomains(DataSource dataSource, int count) throws InterruptedException {\n+        Thread.sleep(SLEEP_TIME);\n+        final String dId = Long.toString(dataSource.getId());\n+        final Function2<String, Integer, String> getId = (s, idx) -> String.format(\"d:%s, f:%s, i:%d\", dId, s, idx);\n+        return IntStream.range(0, count)\n+                .mapToObj(num -> new TopDomainsResult(\n+                getId.apply(\"domain\", num),\n+                getId.apply(\"url\", num),\n+                (long) num,\n+                new Date(((long) num) * 1000 * 60 * 60 * 24)\n+        ))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private final SleuthkitCaseProvider caseProvider;\n+    private final TextTranslationService translationService;\n+    private final java.util.logging.Logger logger;\n+\n+    /**\n+     * Main constructor.\n+     */\n+    public DataSourceUserActivitySummary() {\n+        this(SleuthkitCaseProvider.DEFAULT, TextTranslationService.getInstance(),\n+                org.sleuthkit.autopsy.coreutils.Logger.getLogger(DataSourceUserActivitySummary.class.getName()));\n+    }\n+\n+    /**\n+     * Main constructor with external dependencies specified. This constructor\n+     * is designed with unit testing in mind since mocked dependencies can be\n+     * utilized.\n+     *\n+     * @param provider           The object providing the current SleuthkitCase.\n+     * @param translationService The translation service.\n+     * @param logger             The logger to use.\n+     */\n+    public DataSourceUserActivitySummary(\n+            SleuthkitCaseProvider provider,\n+            TextTranslationService translationService,\n+            java.util.logging.Logger logger) {\n+\n+        this.caseProvider = provider;\n+        this.translationService = translationService;\n+        this.logger = logger;\n+    }\n+\n+    /**\n+     * Throws an IllegalArgumentException if count <= 0.\n+     *\n+     * @param count The count being checked.\n+     */\n+    private void assertValidCount(int count) {\n+        if (count <= 0) {\n+            throw new IllegalArgumentException(\"Count must be greater than 0\");\n+        }\n+    }\n+\n+    /**\n+     * Retrieves most recent web searches by most recent date grouped by search\n+     * term.\n+     *\n+     * @param dataSource The data source.\n+     * @param count      The maximum number of records to be shown (must be >\n+     *                   0).\n+     *\n+     * @return The list of most recent web searches where most recent search\n+     *         appears first.\n+     *\n+     * @throws\n+     * org.sleuthkit.autopsy.datasourcesummary.datamodel.SleuthkitCaseProvider.SleuthkitCaseProviderException\n+     * @throws TskCoreException\n+     */\n+    public List<TopWebSearchResult> getMostRecentWebSearches(DataSource dataSource, int count) throws SleuthkitCaseProviderException, TskCoreException {\n+        assertValidCount(count);\n+\n+        List<TopWebSearchResult> results = caseProvider.get().getBlackboard().getArtifacts(ARTIFACT_TYPE.TSK_WEB_SEARCH_QUERY.getTypeID(), dataSource.getId())\n+                .stream()\n+                // get items where search string and date is not null\n+                .map(artifact -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c41a3f67010f27f2d139cceec779d4dbb56ce1"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxNjA5OA==", "bodyText": "I have already fixed this in my PR, might want to remove this so there is no conflicts.", "url": "https://github.com/sleuthkit/autopsy/pull/6223#discussion_r482316098", "createdAt": "2020-09-02T19:04:49Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/ui/DataSourceSummaryTabbedPane.java", "diffHunk": "@@ -45,7 +45,7 @@\n     private final List<Pair<String, BaseDataSourceSummaryPanel>> tabs = Arrays.asList(\n             Pair.of(Bundle.DataSourceSummaryTabbedPane_detailsTab_title(), new DataSourceSummaryDetailsPanel()),\n             Pair.of(Bundle.DataSourceSummaryTabbedPane_countsTab_title(), new DataSourceSummaryCountsPanel()),\n-            Pair.of(Bundle.DataSourceSummaryTabbedPane_detailsTab_title(), new DataSourceSummaryUserActivityPanel())\n+            Pair.of(Bundle.DataSourceSummaryTabbedPane_userActivityTab_title(), new DataSourceSummaryUserActivityPanel())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c41a3f67010f27f2d139cceec779d4dbb56ce1"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c58d6a41644a9550dd72430f08160d0750a7e36", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/1c58d6a41644a9550dd72430f08160d0750a7e36", "committedDate": "2020-09-02T21:10:48Z", "message": "addressing review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16bb1f5dbb06d3237f7c5a3b2cfbe52915947257", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/16bb1f5dbb06d3237f7c5a3b2cfbe52915947257", "committedDate": "2020-09-02T21:17:07Z", "message": "address codacy remark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fac7b6dfa615bd0747516060b93fcf38f59b60b1", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/fac7b6dfa615bd0747516060b93fcf38f59b60b1", "committedDate": "2020-09-03T13:28:49Z", "message": "resizing for panel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a7905480f1d95afa16bcdc7211719b0bec49436", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/9a7905480f1d95afa16bcdc7211719b0bec49436", "committedDate": "2020-09-03T16:06:52Z", "message": "updates to include call log and emails in accounts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df2593008ab915b922f0ac5fa37559622b72424d", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/df2593008ab915b922f0ac5fa37559622b72424d", "committedDate": "2020-09-03T16:12:02Z", "message": "merge from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e31abcb0d7e614fcfa033501fbbc3a9c9eba3ffd", "author": {"user": {"login": "gdicristofaro", "name": "Greg DiCristofaro"}}, "url": "https://github.com/sleuthkit/autopsy/commit/e31abcb0d7e614fcfa033501fbbc3a9c9eba3ffd", "committedDate": "2020-09-03T16:14:53Z", "message": "merge from master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNjkyMDIz", "url": "https://github.com/sleuthkit/autopsy/pull/6223#pullrequestreview-482692023", "createdAt": "2020-09-04T14:20:08Z", "commit": {"oid": "e31abcb0d7e614fcfa033501fbbc3a9c9eba3ffd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNjkzNTEz", "url": "https://github.com/sleuthkit/autopsy/pull/6223#pullrequestreview-482693513", "createdAt": "2020-09-04T14:22:02Z", "commit": {"oid": "e31abcb0d7e614fcfa033501fbbc3a9c9eba3ffd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2871, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}