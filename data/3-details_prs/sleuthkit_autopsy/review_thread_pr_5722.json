{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMDIzMTUx", "number": 5722, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDo0Njo1NVrODprAiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDo0Njo1NVrODprAiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDIyODU5OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datamodel/TagNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDo0Njo1NVrOF4_0Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDoyOTo0MFrOF5WB4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMxMDEyNg==", "bodyText": "This is the wrong substitution if translatedName is not null.", "url": "https://github.com/sleuthkit/autopsy/pull/5722#discussion_r395310126", "createdAt": "2020-03-19T20:46:55Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/datamodel/TagNode.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020-2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datamodel;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import org.openide.nodes.Children;\n+import org.openide.nodes.Sheet;\n+import org.openide.util.Lookup;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.core.UserPreferences;\n+import org.sleuthkit.autopsy.datamodel.utils.FileNameTransTask;\n+import org.sleuthkit.autopsy.texttranslation.TextTranslationService;\n+import org.sleuthkit.datamodel.Content;\n+\n+/**\n+ * An abstract superclass for a node that represents a tag, uses the name of a\n+ * given Content object as its display name, and has a property sheet with an\n+ * original name property when machine translation is enabled.\n+ *\n+ * The translation of the Content name is done in a background thread. The\n+ * translated name is made the display name of the node and the untranslated\n+ * name is put into both the original name property and into the node's tooltip.\n+ *\n+ * TODO (Jira-6174): Consider modifying this class to be able to use it more broadly\n+ * within the Autopsy data model (i.e., AbstractNode suclasses). It's not really\n+ * specific to a tag node.\n+ */\n+@NbBundle.Messages({\n+    \"TagNode.propertySheet.origName=Original Name\",\n+    \"TagNode.propertySheet.origNameDisplayName=Original Name\"\n+})\n+abstract class TagNode extends DisplayableItemNode {\n+\n+    private final static String ORIG_NAME_PROP_NAME = Bundle.TagNode_propertySheet_origName();\n+    private final static String ORIG_NAME_PROP_DISPLAY_NAME = Bundle.TagNode_propertySheet_origNameDisplayName();\n+\n+    private final String originalName;\n+    private volatile String translatedName;\n+\n+    /**\n+     * An abstract superclass for a node that represents a tag, uses the name of\n+     * a given Content object as its display name, and has a property sheet with\n+     * an untranslated file name property when machine translation is enabled.\n+     *\n+     * @param lookup  The Lookup of the node.\n+     * @param content The Content to use for the node display name.\n+     */\n+    TagNode(Lookup lookup, Content content) {\n+        super(Children.LEAF, lookup);\n+        originalName = content.getName();\n+    }\n+\n+    @Override\n+    public boolean isLeafTypeNode() {\n+        return true;\n+    }\n+\n+    @Override\n+    abstract public String getItemType();\n+\n+    @Override\n+    abstract public <T> T accept(DisplayableItemNodeVisitor<T> visitor);\n+\n+    /**\n+     * Adds an original name property to the node's property sheet and submits\n+     * an original name translation task.\n+     *\n+     * The translation of the original name is done in a background thread. The\n+     * translated name is made the display name of the node and the untranslated\n+     * name is put into both the original name property and into the node's\n+     * tooltip.\n+     *\n+     * @param properties The node's property sheet.\n+     */\n+    protected void addOriginalNameProp(Sheet.Set properties) {\n+        if (TextTranslationService.getInstance().hasProvider() && UserPreferences.displayTranslatedFileNames()) {\n+            properties.put(new NodeProperty<>(\n+                    ORIG_NAME_PROP_NAME,\n+                    ORIG_NAME_PROP_DISPLAY_NAME,\n+                    \"\",\n+                    translatedName != null ? translatedName : \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df3f1ec2e81eaa68ddff0239765efd981d4c9e67"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3NDA4MA==", "bodyText": "Good catch, This problem appears in another place as well. Fix submitted, please review, @dannysmyda.", "url": "https://github.com/sleuthkit/autopsy/pull/5722#discussion_r395674080", "createdAt": "2020-03-20T14:29:40Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datamodel/TagNode.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020-2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datamodel;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import org.openide.nodes.Children;\n+import org.openide.nodes.Sheet;\n+import org.openide.util.Lookup;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.core.UserPreferences;\n+import org.sleuthkit.autopsy.datamodel.utils.FileNameTransTask;\n+import org.sleuthkit.autopsy.texttranslation.TextTranslationService;\n+import org.sleuthkit.datamodel.Content;\n+\n+/**\n+ * An abstract superclass for a node that represents a tag, uses the name of a\n+ * given Content object as its display name, and has a property sheet with an\n+ * original name property when machine translation is enabled.\n+ *\n+ * The translation of the Content name is done in a background thread. The\n+ * translated name is made the display name of the node and the untranslated\n+ * name is put into both the original name property and into the node's tooltip.\n+ *\n+ * TODO (Jira-6174): Consider modifying this class to be able to use it more broadly\n+ * within the Autopsy data model (i.e., AbstractNode suclasses). It's not really\n+ * specific to a tag node.\n+ */\n+@NbBundle.Messages({\n+    \"TagNode.propertySheet.origName=Original Name\",\n+    \"TagNode.propertySheet.origNameDisplayName=Original Name\"\n+})\n+abstract class TagNode extends DisplayableItemNode {\n+\n+    private final static String ORIG_NAME_PROP_NAME = Bundle.TagNode_propertySheet_origName();\n+    private final static String ORIG_NAME_PROP_DISPLAY_NAME = Bundle.TagNode_propertySheet_origNameDisplayName();\n+\n+    private final String originalName;\n+    private volatile String translatedName;\n+\n+    /**\n+     * An abstract superclass for a node that represents a tag, uses the name of\n+     * a given Content object as its display name, and has a property sheet with\n+     * an untranslated file name property when machine translation is enabled.\n+     *\n+     * @param lookup  The Lookup of the node.\n+     * @param content The Content to use for the node display name.\n+     */\n+    TagNode(Lookup lookup, Content content) {\n+        super(Children.LEAF, lookup);\n+        originalName = content.getName();\n+    }\n+\n+    @Override\n+    public boolean isLeafTypeNode() {\n+        return true;\n+    }\n+\n+    @Override\n+    abstract public String getItemType();\n+\n+    @Override\n+    abstract public <T> T accept(DisplayableItemNodeVisitor<T> visitor);\n+\n+    /**\n+     * Adds an original name property to the node's property sheet and submits\n+     * an original name translation task.\n+     *\n+     * The translation of the original name is done in a background thread. The\n+     * translated name is made the display name of the node and the untranslated\n+     * name is put into both the original name property and into the node's\n+     * tooltip.\n+     *\n+     * @param properties The node's property sheet.\n+     */\n+    protected void addOriginalNameProp(Sheet.Set properties) {\n+        if (TextTranslationService.getInstance().hasProvider() && UserPreferences.displayTranslatedFileNames()) {\n+            properties.put(new NodeProperty<>(\n+                    ORIG_NAME_PROP_NAME,\n+                    ORIG_NAME_PROP_DISPLAY_NAME,\n+                    \"\",\n+                    translatedName != null ? translatedName : \"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMxMDEyNg=="}, "originalCommit": {"oid": "df3f1ec2e81eaa68ddff0239765efd981d4c9e67"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 664, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}