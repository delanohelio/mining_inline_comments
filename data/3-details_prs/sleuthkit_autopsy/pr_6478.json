{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NzU5MDkz", "number": 6478, "title": "6965 complete aleapp module", "bodyText": "", "createdAt": "2020-11-20T14:56:02Z", "url": "https://github.com/sleuthkit/autopsy/pull/6478", "merged": true, "mergeCommit": {"oid": "071dadd475b1df344bdc8ca7d3f70fcae117340e"}, "closed": true, "closedAt": "2020-12-07T16:36:14Z", "author": {"login": "markmckinnon"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUdRVVAH2gAyNTI0NzU5MDkzOjcyOTkxZmViNDJmODQzMGJmNDQ5NmRlNTcwNzdiOTNiYTMxN2U1OWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdj30wLgFqTU0NjI5NzAwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "72991feb42f8430bf4496de57077b93ba317e59c", "author": {"user": {"login": "markmckinnon", "name": "Mark McKinnon"}}, "url": "https://github.com/sleuthkit/autopsy/commit/72991feb42f8430bf4496de57077b93ba317e59c", "committedDate": "2020-10-20T18:41:54Z", "message": "Rename parent Directory\n\nRename parent directory to better fit both ileapp and aleapp programs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2eb4c80204aee6ffa66989de7e68093f2913c0f6", "author": {"user": {"login": "markmckinnon", "name": "Mark McKinnon"}}, "url": "https://github.com/sleuthkit/autopsy/commit/2eb4c80204aee6ffa66989de7e68093f2913c0f6", "committedDate": "2020-10-20T18:46:13Z", "message": "Add aLeapp executable and build script\n\nAdd aleapp executable and update build script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0bf54dc42cd4a7a8fc3a9dc9233cefca7d837f6", "author": {"user": {"login": "markmckinnon", "name": "Mark McKinnon"}}, "url": "https://github.com/sleuthkit/autopsy/commit/a0bf54dc42cd4a7a8fc3a9dc9233cefca7d837f6", "committedDate": "2020-10-20T19:28:24Z", "message": "Update aleapp.exe\n\nExecutable iwth -p option"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ebc4046556a7e4a38ecb0eabc75205b7131a5fc", "author": {"user": {"login": "markmckinnon", "name": "Mark McKinnon"}}, "url": "https://github.com/sleuthkit/autopsy/commit/2ebc4046556a7e4a38ecb0eabc75205b7131a5fc", "committedDate": "2020-10-20T19:28:53Z", "message": "Create aleap-artifact-attribute-reference.xml\n\ninitial commit of artifact-attribute cross reference xml file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "618020b275961eee97fba39f990e5c86d76bb55f", "author": {"user": {"login": "markmckinnon", "name": "Mark McKinnon"}}, "url": "https://github.com/sleuthkit/autopsy/commit/618020b275961eee97fba39f990e5c86d76bb55f", "committedDate": "2020-10-20T19:29:30Z", "message": "Added aLeapp Module\n\nAdded aLeapp module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37eacd41da632606f5f50d70bd1cddbe8fd97530", "author": {"user": {"login": "markmckinnon", "name": "Mark McKinnon"}}, "url": "https://github.com/sleuthkit/autopsy/commit/37eacd41da632606f5f50d70bd1cddbe8fd97530", "committedDate": "2020-10-23T14:27:44Z", "message": "Aleap additions\n\nMaking aLeapp work the same as iLeapp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d74d76f428224e81755ea52b0456c18402c1e2d7", "author": {"user": {"login": "markmckinnon", "name": "Mark McKinnon"}}, "url": "https://github.com/sleuthkit/autopsy/commit/d74d76f428224e81755ea52b0456c18402c1e2d7", "committedDate": "2020-11-20T14:39:17Z", "message": "Update aleap-artifact-attribute-reference.xml\n\nAdd more Artifacts to process"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2Nzg1MTcx", "url": "https://github.com/sleuthkit/autopsy/pull/6478#pullrequestreview-536785171", "createdAt": "2020-11-23T19:34:19Z", "commit": {"oid": "d74d76f428224e81755ea52b0456c18402c1e2d7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTozNDoyMFrOH4cbNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTozNDozOVrOH4cb-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0ODAyMQ==", "bodyText": "Missing method header", "url": "https://github.com/sleuthkit/autopsy/pull/6478#discussion_r528948021", "createdAt": "2020-11-23T19:34:20Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/modules/leappanalyzers/ALeappAnalyzerIngestModule.java", "diffHunk": "@@ -0,0 +1,468 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.modules.leappanalyzers;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Locale;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.io.FilenameUtils;\n+import org.openide.modules.InstalledFileLocator;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import static org.sleuthkit.autopsy.casemodule.Case.getCurrentCase;\n+import org.sleuthkit.autopsy.casemodule.NoCurrentCaseException;\n+import org.sleuthkit.autopsy.casemodule.services.FileManager;\n+import org.sleuthkit.autopsy.coreutils.ExecUtil;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.PlatformUtil;\n+import org.sleuthkit.autopsy.datamodel.ContentUtils;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModule;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProcessTerminator;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProgress;\n+import org.sleuthkit.autopsy.ingest.IngestJobContext;\n+import org.sleuthkit.autopsy.ingest.IngestMessage;\n+import org.sleuthkit.autopsy.ingest.IngestServices;\n+import org.sleuthkit.autopsy.ingest.IngestModule.IngestModuleException;\n+import org.sleuthkit.datamodel.AbstractFile;\n+import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.LocalFilesDataSource;\n+import org.sleuthkit.datamodel.ReadContentInputStream;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Data source ingest module that runs aLeapp against logical iOS files.\n+ */\n+public class ALeappAnalyzerIngestModule implements DataSourceIngestModule {\n+\n+    private static final Logger logger = Logger.getLogger(ALeappAnalyzerIngestModule.class.getName());\n+    private static final String MODULE_NAME = ALeappAnalyzerModuleFactory.getModuleName();\n+\n+    private static final String ALEAPP = \"aLeapp\"; //NON-NLS\n+    private static final String ALEAPP_FS = \"fs_\"; //NON-NLS\n+    private static final String ALEAPP_EXECUTABLE = \"aleapp.exe\";//NON-NLS\n+    private static final String ALEAPP_PATHS_FILE = \"aLeapp_paths.txt\"; //NON-NLS\n+    \n+    private static final String XMLFILE = \"aleap-artifact-attribute-reference.xml\"; //NON-NLS\n+\n+\n+    private File aLeappExecutable;\n+\n+    private IngestJobContext context;\n+\n+    private LeappFileProcessor aLeappFileProcessor;\n+\n+    ALeappAnalyzerIngestModule() {\n+        // This constructor is intentionally empty. Nothing special is needed here.     \n+    }\n+\n+    @NbBundle.Messages({\n+        \"ALeappAnalyzerIngestModule.executable.not.found=aLeapp Executable Not Found.\",\n+        \"ALeappAnalyzerIngestModule.requires.windows=aLeapp module requires windows.\",\n+        \"ALeappAnalyzerIngestModule.error.ileapp.file.processor.init=Failure to initialize aLeappProcessFile\"})\n+    @Override\n+    public void startUp(IngestJobContext context) throws IngestModuleException {\n+        this.context = context;\n+\n+        if (false == PlatformUtil.isWindowsOS()) {\n+            throw new IngestModuleException(Bundle.ALeappAnalyzerIngestModule_requires_windows());\n+        }\n+\n+        try {\n+            aLeappFileProcessor = new LeappFileProcessor(XMLFILE);\n+        } catch (IOException | IngestModuleException | NoCurrentCaseException ex) {\n+            throw new IngestModuleException(Bundle.ALeappAnalyzerIngestModule_error_ileapp_file_processor_init(), ex);\n+        }\n+\n+        try {\n+            aLeappExecutable = locateExecutable(ALEAPP_EXECUTABLE);\n+        } catch (FileNotFoundException exception) {\n+            logger.log(Level.WARNING, \"aLeapp executable not found.\", exception); //NON-NLS\n+            throw new IngestModuleException(Bundle.ALeappAnalyzerIngestModule_executable_not_found(), exception);\n+        }\n+\n+    }\n+\n+    @NbBundle.Messages({\n+        \"ALeappAnalyzerIngestModule.error.running.aLeapp=Error running aLeapp, see log file.\",\n+        \"ALeappAnalyzerIngestModule.error.creating.output.dir=Error creating aLeapp module output directory.\",\n+        \"ALeappAnalyzerIngestModule.starting.aLeapp=Starting aLeapp\",\n+        \"ALeappAnalyzerIngestModule.running.aLeapp=Running aLeapp\",\n+        \"ALeappAnalyzerIngestModule.has.run=aLeapp\",\n+        \"ALeappAnalyzerIngestModule.aLeapp.cancelled=aLeapp run was canceled\",\n+        \"ALeappAnalyzerIngestModule.completed=aLeapp Processing Completed\",\n+        \"ALeappAnalyzerIngestModule.report.name=aLeapp Html Report\"})\n+    @Override\n+    public ProcessResult process(Content dataSource, DataSourceIngestModuleProgress statusHelper) {\n+\n+        Case currentCase = Case.getCurrentCase();\n+        Path tempOutputPath = Paths.get(currentCase.getTempDirectory(), ALEAPP, ALEAPP_FS + dataSource.getId());\n+        try {\n+            Files.createDirectories(tempOutputPath);\n+        } catch (IOException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error creating aLeapp output directory %s\", tempOutputPath.toString()), ex);\n+            return ProcessResult.ERROR;\n+        }\n+\n+        List<String> aLeappPathsToProcess = new ArrayList<>();\n+        ProcessBuilder aLeappCommand = buildaLeappListCommand(tempOutputPath);\n+        try {\n+            int result = ExecUtil.execute(aLeappCommand, new DataSourceIngestModuleProcessTerminator(context, true));\n+            if (result != 0) {\n+                logger.log(Level.SEVERE, String.format(\"Error when trying to execute aLeapp program getting file paths to search for result is %d\", result));\n+                return ProcessResult.ERROR;\n+            }\n+            aLeappPathsToProcess = loadIleappPathFile(tempOutputPath);\n+        } catch (IOException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error when trying to execute aLeapp program getting file paths to search\"), ex);\n+            return ProcessResult.ERROR;\n+        }\n+\n+        statusHelper.progress(Bundle.ALeappAnalyzerIngestModule_starting_aLeapp(), 0);\n+\n+        List<AbstractFile> aLeappFilesToProcess = new ArrayList<>();\n+\n+        if (!(context.getDataSource() instanceof LocalFilesDataSource)) {\n+            extractFilesFromImage(dataSource, aLeappPathsToProcess, tempOutputPath);\n+            statusHelper.switchToDeterminate(aLeappFilesToProcess.size());\n+            processALeappFs(dataSource, currentCase, statusHelper, tempOutputPath.toString());\n+        } else {\n+            aLeappFilesToProcess = findaLeappFilesToProcess(dataSource);\n+            statusHelper.switchToDeterminate(aLeappFilesToProcess.size());\n+\n+            Integer filesProcessedCount = 0;\n+            for (AbstractFile aLeappFile : aLeappFilesToProcess) {\n+                processALeappFile(dataSource, currentCase, statusHelper, filesProcessedCount, aLeappFile);\n+                filesProcessedCount++;\n+            }\n+            // Process the logical image as a fs in aLeapp to make sure this is not a logical fs that was added\n+            extractFilesFromImage(dataSource, aLeappPathsToProcess, tempOutputPath);\n+            processALeappFs(dataSource, currentCase, statusHelper, tempOutputPath.toString());\n+        }\n+\n+        IngestMessage message = IngestMessage.createMessage(IngestMessage.MessageType.DATA,\n+                Bundle.ALeappAnalyzerIngestModule_has_run(),\n+                Bundle.ALeappAnalyzerIngestModule_completed());\n+        IngestServices.getInstance().postMessage(message);\n+        return ProcessResult.OK;\n+    }\n+\n+    private void processALeappFile(Content dataSource, Case currentCase, DataSourceIngestModuleProgress statusHelper, int filesProcessedCount,\n+            AbstractFile aLeappFile) {\n+        String currentTime = new SimpleDateFormat(\"yyyy-MM-dd HH-mm-ss z\", Locale.US).format(System.currentTimeMillis());//NON-NLS\n+        Path moduleOutputPath = Paths.get(currentCase.getModuleDirectory(), ALEAPP, currentTime);\n+        try {\n+            Files.createDirectories(moduleOutputPath);\n+        } catch (IOException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error creating aLeapp output directory %s\", moduleOutputPath.toString()), ex);\n+            return;\n+        }\n+\n+        statusHelper.progress(NbBundle.getMessage(this.getClass(), \"ALeappAnalyzerIngestModule.processing.file\", aLeappFile.getName()), filesProcessedCount);\n+        ProcessBuilder aLeappCommand = buildaLeappCommand(moduleOutputPath, aLeappFile.getLocalAbsPath(), aLeappFile.getNameExtension());\n+        try {\n+            int result = ExecUtil.execute(aLeappCommand, new DataSourceIngestModuleProcessTerminator(context, true));\n+            if (result != 0) {\n+                logger.log(Level.WARNING, String.format(\"Error when trying to execute aLeapp program getting file paths to search for result is %d\", result));\n+                return;\n+            }\n+\n+            addILeappReportToReports(moduleOutputPath, currentCase);\n+\n+        } catch (IOException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error when trying to execute aLeapp program against file %s\", aLeappFile.getLocalAbsPath()), ex);\n+            return;\n+        }\n+\n+        if (context.dataSourceIngestIsCancelled()) {\n+            logger.log(Level.INFO, \"ILeapp Analyser ingest module run was canceled\"); //NON-NLS\n+            return;\n+        }\n+\n+        ProcessResult fileProcessorResult = aLeappFileProcessor.processFiles(dataSource, moduleOutputPath, aLeappFile);\n+\n+        if (fileProcessorResult == ProcessResult.ERROR) {\n+            return;\n+        }\n+    }\n+\n+    private void processALeappFs(Content dataSource, Case currentCase, DataSourceIngestModuleProgress statusHelper, String directoryToProcess) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d74d76f428224e81755ea52b0456c18402c1e2d7"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0ODIxNw==", "bodyText": "Missing method header", "url": "https://github.com/sleuthkit/autopsy/pull/6478#discussion_r528948217", "createdAt": "2020-11-23T19:34:39Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/modules/leappanalyzers/ALeappAnalyzerIngestModule.java", "diffHunk": "@@ -0,0 +1,468 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.modules.leappanalyzers;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Locale;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.io.FilenameUtils;\n+import org.openide.modules.InstalledFileLocator;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import static org.sleuthkit.autopsy.casemodule.Case.getCurrentCase;\n+import org.sleuthkit.autopsy.casemodule.NoCurrentCaseException;\n+import org.sleuthkit.autopsy.casemodule.services.FileManager;\n+import org.sleuthkit.autopsy.coreutils.ExecUtil;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.PlatformUtil;\n+import org.sleuthkit.autopsy.datamodel.ContentUtils;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModule;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProcessTerminator;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProgress;\n+import org.sleuthkit.autopsy.ingest.IngestJobContext;\n+import org.sleuthkit.autopsy.ingest.IngestMessage;\n+import org.sleuthkit.autopsy.ingest.IngestServices;\n+import org.sleuthkit.autopsy.ingest.IngestModule.IngestModuleException;\n+import org.sleuthkit.datamodel.AbstractFile;\n+import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.LocalFilesDataSource;\n+import org.sleuthkit.datamodel.ReadContentInputStream;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Data source ingest module that runs aLeapp against logical iOS files.\n+ */\n+public class ALeappAnalyzerIngestModule implements DataSourceIngestModule {\n+\n+    private static final Logger logger = Logger.getLogger(ALeappAnalyzerIngestModule.class.getName());\n+    private static final String MODULE_NAME = ALeappAnalyzerModuleFactory.getModuleName();\n+\n+    private static final String ALEAPP = \"aLeapp\"; //NON-NLS\n+    private static final String ALEAPP_FS = \"fs_\"; //NON-NLS\n+    private static final String ALEAPP_EXECUTABLE = \"aleapp.exe\";//NON-NLS\n+    private static final String ALEAPP_PATHS_FILE = \"aLeapp_paths.txt\"; //NON-NLS\n+    \n+    private static final String XMLFILE = \"aleap-artifact-attribute-reference.xml\"; //NON-NLS\n+\n+\n+    private File aLeappExecutable;\n+\n+    private IngestJobContext context;\n+\n+    private LeappFileProcessor aLeappFileProcessor;\n+\n+    ALeappAnalyzerIngestModule() {\n+        // This constructor is intentionally empty. Nothing special is needed here.     \n+    }\n+\n+    @NbBundle.Messages({\n+        \"ALeappAnalyzerIngestModule.executable.not.found=aLeapp Executable Not Found.\",\n+        \"ALeappAnalyzerIngestModule.requires.windows=aLeapp module requires windows.\",\n+        \"ALeappAnalyzerIngestModule.error.ileapp.file.processor.init=Failure to initialize aLeappProcessFile\"})\n+    @Override\n+    public void startUp(IngestJobContext context) throws IngestModuleException {\n+        this.context = context;\n+\n+        if (false == PlatformUtil.isWindowsOS()) {\n+            throw new IngestModuleException(Bundle.ALeappAnalyzerIngestModule_requires_windows());\n+        }\n+\n+        try {\n+            aLeappFileProcessor = new LeappFileProcessor(XMLFILE);\n+        } catch (IOException | IngestModuleException | NoCurrentCaseException ex) {\n+            throw new IngestModuleException(Bundle.ALeappAnalyzerIngestModule_error_ileapp_file_processor_init(), ex);\n+        }\n+\n+        try {\n+            aLeappExecutable = locateExecutable(ALEAPP_EXECUTABLE);\n+        } catch (FileNotFoundException exception) {\n+            logger.log(Level.WARNING, \"aLeapp executable not found.\", exception); //NON-NLS\n+            throw new IngestModuleException(Bundle.ALeappAnalyzerIngestModule_executable_not_found(), exception);\n+        }\n+\n+    }\n+\n+    @NbBundle.Messages({\n+        \"ALeappAnalyzerIngestModule.error.running.aLeapp=Error running aLeapp, see log file.\",\n+        \"ALeappAnalyzerIngestModule.error.creating.output.dir=Error creating aLeapp module output directory.\",\n+        \"ALeappAnalyzerIngestModule.starting.aLeapp=Starting aLeapp\",\n+        \"ALeappAnalyzerIngestModule.running.aLeapp=Running aLeapp\",\n+        \"ALeappAnalyzerIngestModule.has.run=aLeapp\",\n+        \"ALeappAnalyzerIngestModule.aLeapp.cancelled=aLeapp run was canceled\",\n+        \"ALeappAnalyzerIngestModule.completed=aLeapp Processing Completed\",\n+        \"ALeappAnalyzerIngestModule.report.name=aLeapp Html Report\"})\n+    @Override\n+    public ProcessResult process(Content dataSource, DataSourceIngestModuleProgress statusHelper) {\n+\n+        Case currentCase = Case.getCurrentCase();\n+        Path tempOutputPath = Paths.get(currentCase.getTempDirectory(), ALEAPP, ALEAPP_FS + dataSource.getId());\n+        try {\n+            Files.createDirectories(tempOutputPath);\n+        } catch (IOException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error creating aLeapp output directory %s\", tempOutputPath.toString()), ex);\n+            return ProcessResult.ERROR;\n+        }\n+\n+        List<String> aLeappPathsToProcess = new ArrayList<>();\n+        ProcessBuilder aLeappCommand = buildaLeappListCommand(tempOutputPath);\n+        try {\n+            int result = ExecUtil.execute(aLeappCommand, new DataSourceIngestModuleProcessTerminator(context, true));\n+            if (result != 0) {\n+                logger.log(Level.SEVERE, String.format(\"Error when trying to execute aLeapp program getting file paths to search for result is %d\", result));\n+                return ProcessResult.ERROR;\n+            }\n+            aLeappPathsToProcess = loadIleappPathFile(tempOutputPath);\n+        } catch (IOException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error when trying to execute aLeapp program getting file paths to search\"), ex);\n+            return ProcessResult.ERROR;\n+        }\n+\n+        statusHelper.progress(Bundle.ALeappAnalyzerIngestModule_starting_aLeapp(), 0);\n+\n+        List<AbstractFile> aLeappFilesToProcess = new ArrayList<>();\n+\n+        if (!(context.getDataSource() instanceof LocalFilesDataSource)) {\n+            extractFilesFromImage(dataSource, aLeappPathsToProcess, tempOutputPath);\n+            statusHelper.switchToDeterminate(aLeappFilesToProcess.size());\n+            processALeappFs(dataSource, currentCase, statusHelper, tempOutputPath.toString());\n+        } else {\n+            aLeappFilesToProcess = findaLeappFilesToProcess(dataSource);\n+            statusHelper.switchToDeterminate(aLeappFilesToProcess.size());\n+\n+            Integer filesProcessedCount = 0;\n+            for (AbstractFile aLeappFile : aLeappFilesToProcess) {\n+                processALeappFile(dataSource, currentCase, statusHelper, filesProcessedCount, aLeappFile);\n+                filesProcessedCount++;\n+            }\n+            // Process the logical image as a fs in aLeapp to make sure this is not a logical fs that was added\n+            extractFilesFromImage(dataSource, aLeappPathsToProcess, tempOutputPath);\n+            processALeappFs(dataSource, currentCase, statusHelper, tempOutputPath.toString());\n+        }\n+\n+        IngestMessage message = IngestMessage.createMessage(IngestMessage.MessageType.DATA,\n+                Bundle.ALeappAnalyzerIngestModule_has_run(),\n+                Bundle.ALeappAnalyzerIngestModule_completed());\n+        IngestServices.getInstance().postMessage(message);\n+        return ProcessResult.OK;\n+    }\n+\n+    private void processALeappFile(Content dataSource, Case currentCase, DataSourceIngestModuleProgress statusHelper, int filesProcessedCount,\n+            AbstractFile aLeappFile) {\n+        String currentTime = new SimpleDateFormat(\"yyyy-MM-dd HH-mm-ss z\", Locale.US).format(System.currentTimeMillis());//NON-NLS\n+        Path moduleOutputPath = Paths.get(currentCase.getModuleDirectory(), ALEAPP, currentTime);\n+        try {\n+            Files.createDirectories(moduleOutputPath);\n+        } catch (IOException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error creating aLeapp output directory %s\", moduleOutputPath.toString()), ex);\n+            return;\n+        }\n+\n+        statusHelper.progress(NbBundle.getMessage(this.getClass(), \"ALeappAnalyzerIngestModule.processing.file\", aLeappFile.getName()), filesProcessedCount);\n+        ProcessBuilder aLeappCommand = buildaLeappCommand(moduleOutputPath, aLeappFile.getLocalAbsPath(), aLeappFile.getNameExtension());\n+        try {\n+            int result = ExecUtil.execute(aLeappCommand, new DataSourceIngestModuleProcessTerminator(context, true));\n+            if (result != 0) {\n+                logger.log(Level.WARNING, String.format(\"Error when trying to execute aLeapp program getting file paths to search for result is %d\", result));\n+                return;\n+            }\n+\n+            addILeappReportToReports(moduleOutputPath, currentCase);\n+\n+        } catch (IOException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error when trying to execute aLeapp program against file %s\", aLeappFile.getLocalAbsPath()), ex);\n+            return;\n+        }\n+\n+        if (context.dataSourceIngestIsCancelled()) {\n+            logger.log(Level.INFO, \"ILeapp Analyser ingest module run was canceled\"); //NON-NLS\n+            return;\n+        }\n+\n+        ProcessResult fileProcessorResult = aLeappFileProcessor.processFiles(dataSource, moduleOutputPath, aLeappFile);\n+\n+        if (fileProcessorResult == ProcessResult.ERROR) {\n+            return;\n+        }\n+    }\n+\n+    private void processALeappFs(Content dataSource, Case currentCase, DataSourceIngestModuleProgress statusHelper, String directoryToProcess) {\n+        String currentTime = new SimpleDateFormat(\"yyyy-MM-dd HH-mm-ss z\", Locale.US).format(System.currentTimeMillis());//NON-NLS\n+        Path moduleOutputPath = Paths.get(currentCase.getModuleDirectory(), ALEAPP, currentTime);\n+        try {\n+            Files.createDirectories(moduleOutputPath);\n+        } catch (IOException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error creating aLeapp output directory %s\", moduleOutputPath.toString()), ex);\n+            return;\n+        }\n+\n+        statusHelper.progress(NbBundle.getMessage(this.getClass(), \"ALeappAnalyzerIngestModule.processing.filesystem\"));\n+        ProcessBuilder aLeappCommand = buildaLeappCommand(moduleOutputPath, directoryToProcess, \"fs\");\n+        try {\n+            int result = ExecUtil.execute(aLeappCommand, new DataSourceIngestModuleProcessTerminator(context, true));\n+            if (result != 0) {\n+                logger.log(Level.WARNING, String.format(\"Error when trying to execute aLeapp program getting file paths to search for result is %d\", result));\n+                return;\n+            }\n+\n+            addILeappReportToReports(moduleOutputPath, currentCase);\n+\n+        } catch (IOException ex) {\n+            logger.log(Level.SEVERE, String.format(\"Error when trying to execute aLeapp program against file system\"), ex);\n+            return;\n+        }\n+\n+        if (context.dataSourceIngestIsCancelled()) {\n+            logger.log(Level.INFO, \"ILeapp Analyser ingest module run was canceled\"); //NON-NLS\n+            return;\n+        }\n+\n+        ProcessResult fileProcessorResult = aLeappFileProcessor.processFileSystem(dataSource, moduleOutputPath);\n+\n+        if (fileProcessorResult == ProcessResult.ERROR) {\n+            return;\n+        }\n+\n+    }\n+\n+    /**\n+     * Find the files that will be processed by the aLeapp program\n+     *\n+     * @param dataSource\n+     *\n+     * @return List of abstract files to process.\n+     */\n+    private List<AbstractFile> findaLeappFilesToProcess(Content dataSource) {\n+\n+        List<AbstractFile> aLeappFiles = new ArrayList<>();\n+\n+        FileManager fileManager = getCurrentCase().getServices().getFileManager();\n+\n+        // findFiles use the SQL wildcard % in the file name\n+        try {\n+            aLeappFiles = fileManager.findFiles(dataSource, \"%\", \"/\"); //NON-NLS\n+        } catch (TskCoreException ex) {\n+            logger.log(Level.WARNING, \"No files found to process\"); //NON-NLS\n+            return aLeappFiles;\n+        }\n+\n+        List<AbstractFile> aLeappFilesToProcess = new ArrayList<>();\n+        for (AbstractFile aLeappFile : aLeappFiles) {\n+            if (((aLeappFile.getLocalAbsPath() != null)\n+                    && (!aLeappFile.getNameExtension().isEmpty() && (!aLeappFile.isVirtual())))\n+                    && ((aLeappFile.getName().toLowerCase().contains(\".zip\") || (aLeappFile.getName().toLowerCase().contains(\".tar\")))\n+                    || aLeappFile.getName().toLowerCase().contains(\".tgz\"))) {\n+                aLeappFilesToProcess.add(aLeappFile);\n+\n+            }\n+        }\n+\n+        return aLeappFilesToProcess;\n+    }\n+\n+    private ProcessBuilder buildaLeappCommand(Path moduleOutputPath, String sourceFilePath, String aLeappFileSystemType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d74d76f428224e81755ea52b0456c18402c1e2d7"}, "originalPosition": 291}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c50d86edf89b9731b40ced12bfd287a4f389bece", "author": {"user": {"login": "markmckinnon", "name": "Mark McKinnon"}}, "url": "https://github.com/sleuthkit/autopsy/commit/c50d86edf89b9731b40ced12bfd287a4f389bece", "committedDate": "2020-12-03T19:07:47Z", "message": "Update ALeappAnalyzerIngestModule.java\n\nAddress comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffd2e1e719672a5bcc4d5850423fabb922781c5b", "author": {"user": {"login": "markmckinnon", "name": "Mark McKinnon"}}, "url": "https://github.com/sleuthkit/autopsy/commit/ffd2e1e719672a5bcc4d5850423fabb922781c5b", "committedDate": "2020-12-03T19:11:48Z", "message": "Merge remote-tracking branch 'upstream/develop' into 6965-Complete-aLeapp-Module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2Mjk3MDAw", "url": "https://github.com/sleuthkit/autopsy/pull/6478#pullrequestreview-546297000", "createdAt": "2020-12-07T16:06:59Z", "commit": {"oid": "ffd2e1e719672a5bcc4d5850423fabb922781c5b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2835, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}