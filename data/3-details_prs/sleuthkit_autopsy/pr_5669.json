{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNTM0NzAw", "number": 5669, "title": "6013: Insert row in CR accounts table when accounts are created in Ca\u2026", "bodyText": "\u2026se database.", "createdAt": "2020-03-02T18:18:06Z", "url": "https://github.com/sleuthkit/autopsy/pull/5669", "merged": true, "mergeCommit": {"oid": "5d40701543db0db057dd130c29ba9ac02858e112"}, "closed": true, "closedAt": "2020-03-04T22:51:14Z", "author": {"login": "raman-bt"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJxzYKAH2gAyMzgyNTM0NzAwOjlhMjdiMTU1Zjg5ZjgwOTcxMDM1NTk0MGM5MDkxN2M2MGQ2MDVmYTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKasYcAFqTM2ODk5Mjc2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9a27b155f89f809710355940c90917c60d605fa8", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/9a27b155f89f809710355940c90917c60d605fa8", "committedDate": "2020-03-02T18:12:52Z", "message": "6013: Insert row in CR accounts table when accounts are created in Case database."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "863f5f3f499f9e2b468298461c137e5b6d4f4285", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/863f5f3f499f9e2b468298461c137e5b6d4f4285", "committedDate": "2020-03-02T19:14:01Z", "message": "Address Codacy comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDQ3MzQ0", "url": "https://github.com/sleuthkit/autopsy/pull/5669#pullrequestreview-367447344", "createdAt": "2020-03-02T19:00:57Z", "commit": {"oid": "9a27b155f89f809710355940c90917c60d605fa8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTowMDo1N1rOFwrZkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoyMTozNVrOFwt7Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4NzAyNw==", "bodyText": "Could we unravel abbreviations? How about CentralRepositoryAccount? If you are concerned with length, what about CentralRepoAccount?", "url": "https://github.com/sleuthkit/autopsy/pull/5669#discussion_r386587027", "createdAt": "2020-03-02T19:00:57Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CRAccount.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+import org.sleuthkit.datamodel.Account;\n+\n+\n+/**\n+ * This class abstracts an Account as stored in the CR database.\n+ */\n+public final class CRAccount {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a27b155f89f809710355940c90917c60d605fa8"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4ODU3Ng==", "bodyText": "I think CR can be dropped here. If the method is simply getAccountTypeByName, it is self explanatory from the return type and the interface what type of account it is.", "url": "https://github.com/sleuthkit/autopsy/pull/5669#discussion_r386588576", "createdAt": "2020-03-02T19:03:53Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepository.java", "diffHunk": "@@ -808,8 +809,32 @@ CorrelationAttributeInstance getCorrelationAttributeInstance(CorrelationAttribut\n    /**\n     * Returns list of all correlation types. \n     * \n-    * @return  list of Correlation types  \n+    * @return  list of Correlation types\n     * @throws CentralRepoException \n     */\n     List<CorrelationAttributeInstance.Type> getCorrelationTypes() throws CentralRepoException;\n+    \n+    \n+    /**\n+     * Get CR account type by type name.\n+     * \n+     * @param accountTypeName account type name to look for\n+     * @return CR account type\n+     * @throws CentralRepoException \n+     */\n+    CRAccountType getCRAccountTypeByName(String accountTypeName) throws CentralRepoException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a27b155f89f809710355940c90917c60d605fa8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4ODYyNQ==", "bodyText": "Same here.", "url": "https://github.com/sleuthkit/autopsy/pull/5669#discussion_r386588625", "createdAt": "2020-03-02T19:03:59Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepository.java", "diffHunk": "@@ -808,8 +809,32 @@ CorrelationAttributeInstance getCorrelationAttributeInstance(CorrelationAttribut\n    /**\n     * Returns list of all correlation types. \n     * \n-    * @return  list of Correlation types  \n+    * @return  list of Correlation types\n     * @throws CentralRepoException \n     */\n     List<CorrelationAttributeInstance.Type> getCorrelationTypes() throws CentralRepoException;\n+    \n+    \n+    /**\n+     * Get CR account type by type name.\n+     * \n+     * @param accountTypeName account type name to look for\n+     * @return CR account type\n+     * @throws CentralRepoException \n+     */\n+    CRAccountType getCRAccountTypeByName(String accountTypeName) throws CentralRepoException;\n+     \n+    /**\n+     * Get an account from the accounts table matching the given type/ID.  \n+     * Inserts a row if one doesn't exists.\n+     * \n+     * @param crAccountType CR account type to look for or create\n+     * @param accountUniqueID type specific unique account id\n+     * @return CR account\n+     * \n+     * @throws CentralRepoException \n+     */\n+    CRAccount getOrCreateCRAccount(CRAccount.CRAccountType crAccountType, String accountUniqueID) throws CentralRepoException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a27b155f89f809710355940c90917c60d605fa8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MDM0Ng==", "bodyText": "Same here.", "url": "https://github.com/sleuthkit/autopsy/pull/5669#discussion_r386590346", "createdAt": "2020-03-02T19:07:24Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CRAccount.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+import org.sleuthkit.datamodel.Account;\n+\n+\n+/**\n+ * This class abstracts an Account as stored in the CR database.\n+ */\n+public final class CRAccount {\n+    \n+\t// primary key in the Accounts table in CR database\n+\tprivate final long account_id;\n+\n+\tprivate final CRAccountType crAccountType;\n+\tprivate final String typeSpecificID;\n+        \n+    /**\n+     * A CRAccounType encapsulates an account type and the correlation type\n+     * that it maps to.\n+     */\n+    public static final class CRAccountType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a27b155f89f809710355940c90917c60d605fa8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNTYzNg==", "bodyText": "Is a public setter necessary? Can the abstraction be the CentralRepositoryAccount instance itself, rather than the primitive?", "url": "https://github.com/sleuthkit/autopsy/pull/5669#discussion_r386615636", "createdAt": "2020-03-02T19:55:19Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CorrelationAttributeInstance.java", "diffHunk": "@@ -210,6 +228,24 @@ public Long getFileObjectId() {\n         return objectId;\n     }\n \n+    /**\n+     * Get the accountId of the account associated with the correlation\n+     * attribute.\n+     *\n+     * @return the accountId of the account\n+     */\n+    public Long getAccountId() {\n+        return accountId;\n+    }\n+\n+    /**\n+     * Set the accountId of the account associated with this correlation\n+     * attribute.\n+     */\n+    public void setAccountId(Long accountId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a27b155f89f809710355940c90917c60d605fa8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNzIyNw==", "bodyText": "If this is used to just follow up with a query to get the Type instance with this id, can't the CentralRepoAccountType just be initialized with that instance?", "url": "https://github.com/sleuthkit/autopsy/pull/5669#discussion_r386627227", "createdAt": "2020-03-02T20:19:11Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CRAccount.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+import org.sleuthkit.datamodel.Account;\n+\n+\n+/**\n+ * This class abstracts an Account as stored in the CR database.\n+ */\n+public final class CRAccount {\n+    \n+\t// primary key in the Accounts table in CR database\n+\tprivate final long account_id;\n+\n+\tprivate final CRAccountType crAccountType;\n+\tprivate final String typeSpecificID;\n+        \n+    /**\n+     * A CRAccounType encapsulates an account type and the correlation type\n+     * that it maps to.\n+     */\n+    public static final class CRAccountType {\n+\n+        // id is the primary key in the account_types table\n+        private final int crAccountTypeID;\n+        private final Account.Type acctType;\n+        private final int correlationTypeID;\n+\n+        CRAccountType(int acctTypeID, Account.Type acctType, int correlation_type_id) {\n+            this.acctType = acctType;\n+            this.correlationTypeID = correlation_type_id;\n+            this.crAccountTypeID = acctTypeID;\n+        }\n+        \n+\n+        /**\n+         * @return the acctType\n+         */\n+        public Account.Type getAcctType() {\n+            return acctType;\n+        }\n+\n+        public int getCorrelationTypeId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "863f5f3f499f9e2b468298461c137e5b6d4f4285"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNzg1MQ==", "bodyText": "Why mix of camel and underscore casing?", "url": "https://github.com/sleuthkit/autopsy/pull/5669#discussion_r386627851", "createdAt": "2020-03-02T20:20:31Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CRAccount.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+import org.sleuthkit.datamodel.Account;\n+\n+\n+/**\n+ * This class abstracts an Account as stored in the CR database.\n+ */\n+public final class CRAccount {\n+    \n+\t// primary key in the Accounts table in CR database\n+\tprivate final long account_id;\n+\n+\tprivate final CRAccountType crAccountType;\n+\tprivate final String typeSpecificID;\n+        \n+    /**\n+     * A CRAccounType encapsulates an account type and the correlation type\n+     * that it maps to.\n+     */\n+    public static final class CRAccountType {\n+\n+        // id is the primary key in the account_types table\n+        private final int crAccountTypeID;\n+        private final Account.Type acctType;\n+        private final int correlationTypeID;\n+\n+        CRAccountType(int acctTypeID, Account.Type acctType, int correlation_type_id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "863f5f3f499f9e2b468298461c137e5b6d4f4285"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyODE4OQ==", "bodyText": "Why is this cased using underscores?", "url": "https://github.com/sleuthkit/autopsy/pull/5669#discussion_r386628189", "createdAt": "2020-03-02T20:21:14Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CRAccount.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+import org.sleuthkit.datamodel.Account;\n+\n+\n+/**\n+ * This class abstracts an Account as stored in the CR database.\n+ */\n+public final class CRAccount {\n+    \n+\t// primary key in the Accounts table in CR database\n+\tprivate final long account_id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "863f5f3f499f9e2b468298461c137e5b6d4f4285"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyODM2Mw==", "bodyText": "Same here", "url": "https://github.com/sleuthkit/autopsy/pull/5669#discussion_r386628363", "createdAt": "2020-03-02T20:21:35Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CRAccount.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Central Repository\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.centralrepository.datamodel;\n+\n+import org.sleuthkit.datamodel.Account;\n+\n+\n+/**\n+ * This class abstracts an Account as stored in the CR database.\n+ */\n+public final class CRAccount {\n+    \n+\t// primary key in the Accounts table in CR database\n+\tprivate final long account_id;\n+\n+\tprivate final CRAccountType crAccountType;\n+\tprivate final String typeSpecificID;\n+        \n+    /**\n+     * A CRAccounType encapsulates an account type and the correlation type\n+     * that it maps to.\n+     */\n+    public static final class CRAccountType {\n+\n+        // id is the primary key in the account_types table\n+        private final int crAccountTypeID;\n+        private final Account.Type acctType;\n+        private final int correlationTypeID;\n+\n+        CRAccountType(int acctTypeID, Account.Type acctType, int correlation_type_id) {\n+            this.acctType = acctType;\n+            this.correlationTypeID = correlation_type_id;\n+            this.crAccountTypeID = acctTypeID;\n+        }\n+        \n+\n+        /**\n+         * @return the acctType\n+         */\n+        public Account.Type getAcctType() {\n+            return acctType;\n+        }\n+\n+        public int getCorrelationTypeId() {\n+            return this.correlationTypeID;\n+        }\n+\n+        public int getCRAccountTypeId() {\n+            return this.crAccountTypeID;\n+        }\n+    }\n+    \n+    public CRAccount(long account_id, CRAccountType accountType, String typeSpecificId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "863f5f3f499f9e2b468298461c137e5b6d4f4285"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54ea1f9265f323cf21f0ee0dfb940d913fbfee5b", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/54ea1f9265f323cf21f0ee0dfb940d913fbfee5b", "committedDate": "2020-03-03T15:25:10Z", "message": "Addressed review comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4OTkyNzY1", "url": "https://github.com/sleuthkit/autopsy/pull/5669#pullrequestreview-368992765", "createdAt": "2020-03-04T17:51:20Z", "commit": {"oid": "54ea1f9265f323cf21f0ee0dfb940d913fbfee5b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2786, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}