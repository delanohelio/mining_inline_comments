{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODAxMjky", "number": 6257, "title": "6768 Extract role from URL", "bodyText": "Depends on sleuthkit/sleuthkit#2022", "createdAt": "2020-09-14T18:26:50Z", "url": "https://github.com/sleuthkit/autopsy/pull/6257", "merged": true, "mergeCommit": {"oid": "945c0b70c2f0cd23e5f7faba206edcbbbac96410"}, "closed": true, "closedAt": "2020-09-17T20:40:51Z", "author": {"login": "APriestman"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI3UImAH2gAyNDg2ODAxMjkyOjZhN2RhYTVhOTcyNDk5ODAzYjQxZTA2NWE5OThiNzIzNjcyZDIwNTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJ26vJgFqTQ5MDk1OTAwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6a7daa5a972499803b41e065a998b723672d2050", "author": {"user": {"login": "APriestman", "name": "Ann Priestman"}}, "url": "https://github.com/sleuthkit/autopsy/commit/6a7daa5a972499803b41e065a998b723672d2050", "committedDate": "2020-09-14T18:15:24Z", "message": "Add extractor for web account role"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62733e0722a28722b9a78db696c5144c03e06f51", "author": {"user": {"login": "APriestman", "name": "Ann Priestman"}}, "url": "https://github.com/sleuthkit/autopsy/commit/62733e0722a28722b9a78db696c5144c03e06f51", "committedDate": "2020-09-14T18:18:07Z", "message": "Renamed icon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95007b15d76d8097f1dc94e2da1d4da5d55479d1", "author": {"user": {"login": "APriestman", "name": "Ann Priestman"}}, "url": "https://github.com/sleuthkit/autopsy/commit/95007b15d76d8097f1dc94e2da1d4da5d55479d1", "committedDate": "2020-09-14T19:32:11Z", "message": "Codacy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwODgxNTYz", "url": "https://github.com/sleuthkit/autopsy/pull/6257#pullrequestreview-490881563", "createdAt": "2020-09-17T18:37:21Z", "commit": {"oid": "95007b15d76d8097f1dc94e2da1d4da5d55479d1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODozNzoyMlrOHTwK8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo0Mjo0NlrOHTwWgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3NDIyNQ==", "bodyText": "Could this be lower-cased since the contains checks are looking for lower-cased strings? Unless there is a reason this must be case sensitive.", "url": "https://github.com/sleuthkit/autopsy/pull/6257#discussion_r490474225", "createdAt": "2020-09-17T18:37:22Z", "author": {"login": "dannysmyda"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractWebAccountType.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.recentactivity;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProgress;\n+import org.sleuthkit.autopsy.ingest.IngestJobContext;\n+import org.sleuthkit.datamodel.AbstractFile;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+\n+/**\n+ * Attempts to determine a user's role on a domain based on the URL.\n+ */\n+class ExtractWebAccountType extends Extract {\n+\n+    private static final Logger logger = Logger.getLogger(ExtractWebAccountType.class.getName());\n+    \n+    ExtractWebAccountType() {\n+        moduleName = NbBundle.getMessage(ExtractWebAccountType.class, \"ExtractWebAccountType.moduleName.text\");\n+    }\n+    \n+    private void extractDomainRoles(Content dataSource, IngestJobContext context) {\n+        try {\n+            // Get web history blackboard artifacts\n+            Collection<BlackboardArtifact> listArtifacts = currentCase.getSleuthkitCase().getBlackboard().getArtifacts(\n+                    Arrays.asList(new BlackboardArtifact.Type(BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_HISTORY)),\n+                    Arrays.asList(dataSource.getId()));\n+            logger.log(Level.INFO, \"Processing {0} blackboard artifacts.\", listArtifacts.size()); //NON-NLS\n+\n+            // Set up collector for roles\n+            RoleProcessor roleProcessor = new RoleProcessor(context);\n+            \n+            // Process each URL\n+            for (BlackboardArtifact artifact : listArtifacts) {\n+                if (context.dataSourceIngestIsCancelled()) {\n+                    return;\n+                }\n+                \n+                findRolesForUrl(artifact, roleProcessor);\n+            }\n+            \n+            // Create artifacts\n+            roleProcessor.createArtifacts();\n+            \n+        } catch (TskCoreException e) {\n+            logger.log(Level.SEVERE, \"Encountered error retrieving artifacts for domain role analysis\", e); //NON-NLS\n+        }\n+    }\n+    \n+    /**\n+     * Extract and store any role found in the given artifact.\n+     * \n+     * @param artifact      The original artifact\n+     * @param roleProcessor Object to collect and process domain roles.\n+     * \n+     * @throws TskCoreException \n+     */\n+    private void findRolesForUrl(BlackboardArtifact artifact, RoleProcessor roleProcessor) throws TskCoreException {\n+        \n+        BlackboardAttribute urlAttr = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_URL));\n+        if (urlAttr == null) {\n+            return;\n+        }\n+\n+        BlackboardAttribute domainAttr = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DOMAIN));\n+        if (domainAttr == null) {\n+            return;\n+        }\n+\n+        String url = urlAttr.getValueString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95007b15d76d8097f1dc94e2da1d4da5d55479d1"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3NjQ4NA==", "bodyText": "Very minor point, but should the platform suffix be a bundle message? Or is that part of the proper noun? Same for all instances of platformName variable in the various methods.", "url": "https://github.com/sleuthkit/autopsy/pull/6257#discussion_r490476484", "createdAt": "2020-09-17T18:41:32Z", "author": {"login": "dannysmyda"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractWebAccountType.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.recentactivity;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProgress;\n+import org.sleuthkit.autopsy.ingest.IngestJobContext;\n+import org.sleuthkit.datamodel.AbstractFile;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+\n+/**\n+ * Attempts to determine a user's role on a domain based on the URL.\n+ */\n+class ExtractWebAccountType extends Extract {\n+\n+    private static final Logger logger = Logger.getLogger(ExtractWebAccountType.class.getName());\n+    \n+    ExtractWebAccountType() {\n+        moduleName = NbBundle.getMessage(ExtractWebAccountType.class, \"ExtractWebAccountType.moduleName.text\");\n+    }\n+    \n+    private void extractDomainRoles(Content dataSource, IngestJobContext context) {\n+        try {\n+            // Get web history blackboard artifacts\n+            Collection<BlackboardArtifact> listArtifacts = currentCase.getSleuthkitCase().getBlackboard().getArtifacts(\n+                    Arrays.asList(new BlackboardArtifact.Type(BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_HISTORY)),\n+                    Arrays.asList(dataSource.getId()));\n+            logger.log(Level.INFO, \"Processing {0} blackboard artifacts.\", listArtifacts.size()); //NON-NLS\n+\n+            // Set up collector for roles\n+            RoleProcessor roleProcessor = new RoleProcessor(context);\n+            \n+            // Process each URL\n+            for (BlackboardArtifact artifact : listArtifacts) {\n+                if (context.dataSourceIngestIsCancelled()) {\n+                    return;\n+                }\n+                \n+                findRolesForUrl(artifact, roleProcessor);\n+            }\n+            \n+            // Create artifacts\n+            roleProcessor.createArtifacts();\n+            \n+        } catch (TskCoreException e) {\n+            logger.log(Level.SEVERE, \"Encountered error retrieving artifacts for domain role analysis\", e); //NON-NLS\n+        }\n+    }\n+    \n+    /**\n+     * Extract and store any role found in the given artifact.\n+     * \n+     * @param artifact      The original artifact\n+     * @param roleProcessor Object to collect and process domain roles.\n+     * \n+     * @throws TskCoreException \n+     */\n+    private void findRolesForUrl(BlackboardArtifact artifact, RoleProcessor roleProcessor) throws TskCoreException {\n+        \n+        BlackboardAttribute urlAttr = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_URL));\n+        if (urlAttr == null) {\n+            return;\n+        }\n+\n+        BlackboardAttribute domainAttr = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DOMAIN));\n+        if (domainAttr == null) {\n+            return;\n+        }\n+\n+        String url = urlAttr.getValueString();\n+        String domain = domainAttr.getValueString(); \n+        \n+        findMyBbRole(url, domain, artifact, roleProcessor);\n+        findPhpBbRole(url, domain, artifact, roleProcessor);\n+        findJoomlaRole(url, domain, artifact, roleProcessor);\n+        findWordPressRole(url, domain, artifact, roleProcessor);\n+    }\n+\n+    /**\n+     * Extract myBB role.\n+     * \n+     * @param url       The full URL.\n+     * @param domain    The domain.\n+     * @param artifact  The original artifact.\n+     * @param roleProcessor Object to collect and process domain roles.\n+     */    \n+    private void findMyBbRole(String url, String domain, BlackboardArtifact artifact, RoleProcessor roleProcessor) {    \n+        String platformName = \"myBB platform\"; // NON-NLS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95007b15d76d8097f1dc94e2da1d4da5d55479d1"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3NzE4NQ==", "bodyText": "I think these should be bundle messages.", "url": "https://github.com/sleuthkit/autopsy/pull/6257#discussion_r490477185", "createdAt": "2020-09-17T18:42:46Z", "author": {"login": "dannysmyda"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractWebAccountType.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.recentactivity;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.ingest.DataSourceIngestModuleProgress;\n+import org.sleuthkit.autopsy.ingest.IngestJobContext;\n+import org.sleuthkit.datamodel.AbstractFile;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+\n+/**\n+ * Attempts to determine a user's role on a domain based on the URL.\n+ */\n+class ExtractWebAccountType extends Extract {\n+\n+    private static final Logger logger = Logger.getLogger(ExtractWebAccountType.class.getName());\n+    \n+    ExtractWebAccountType() {\n+        moduleName = NbBundle.getMessage(ExtractWebAccountType.class, \"ExtractWebAccountType.moduleName.text\");\n+    }\n+    \n+    private void extractDomainRoles(Content dataSource, IngestJobContext context) {\n+        try {\n+            // Get web history blackboard artifacts\n+            Collection<BlackboardArtifact> listArtifacts = currentCase.getSleuthkitCase().getBlackboard().getArtifacts(\n+                    Arrays.asList(new BlackboardArtifact.Type(BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_HISTORY)),\n+                    Arrays.asList(dataSource.getId()));\n+            logger.log(Level.INFO, \"Processing {0} blackboard artifacts.\", listArtifacts.size()); //NON-NLS\n+\n+            // Set up collector for roles\n+            RoleProcessor roleProcessor = new RoleProcessor(context);\n+            \n+            // Process each URL\n+            for (BlackboardArtifact artifact : listArtifacts) {\n+                if (context.dataSourceIngestIsCancelled()) {\n+                    return;\n+                }\n+                \n+                findRolesForUrl(artifact, roleProcessor);\n+            }\n+            \n+            // Create artifacts\n+            roleProcessor.createArtifacts();\n+            \n+        } catch (TskCoreException e) {\n+            logger.log(Level.SEVERE, \"Encountered error retrieving artifacts for domain role analysis\", e); //NON-NLS\n+        }\n+    }\n+    \n+    /**\n+     * Extract and store any role found in the given artifact.\n+     * \n+     * @param artifact      The original artifact\n+     * @param roleProcessor Object to collect and process domain roles.\n+     * \n+     * @throws TskCoreException \n+     */\n+    private void findRolesForUrl(BlackboardArtifact artifact, RoleProcessor roleProcessor) throws TskCoreException {\n+        \n+        BlackboardAttribute urlAttr = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_URL));\n+        if (urlAttr == null) {\n+            return;\n+        }\n+\n+        BlackboardAttribute domainAttr = artifact.getAttribute(new BlackboardAttribute.Type(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DOMAIN));\n+        if (domainAttr == null) {\n+            return;\n+        }\n+\n+        String url = urlAttr.getValueString();\n+        String domain = domainAttr.getValueString(); \n+        \n+        findMyBbRole(url, domain, artifact, roleProcessor);\n+        findPhpBbRole(url, domain, artifact, roleProcessor);\n+        findJoomlaRole(url, domain, artifact, roleProcessor);\n+        findWordPressRole(url, domain, artifact, roleProcessor);\n+    }\n+\n+    /**\n+     * Extract myBB role.\n+     * \n+     * @param url       The full URL.\n+     * @param domain    The domain.\n+     * @param artifact  The original artifact.\n+     * @param roleProcessor Object to collect and process domain roles.\n+     */    \n+    private void findMyBbRole(String url, String domain, BlackboardArtifact artifact, RoleProcessor roleProcessor) {    \n+        String platformName = \"myBB platform\"; // NON-NLS\n+        \n+        if (url.contains(\"/admin/index.php\")) {\n+            roleProcessor.addRole(domain, platformName, Role.ADMIN, url, artifact);\n+        } else if (url.contains(\"/modcp.php\")) {\n+            roleProcessor.addRole(domain, platformName, Role.MOD, url, artifact);\n+        } else if (url.contains(\"/usercp.php\")) {\n+            roleProcessor.addRole(domain, platformName, Role.USER, url, artifact);\n+        }\n+    }\n+\n+    /**\n+     * Extract phpBB role.\n+     * \n+     * @param url       The full URL.\n+     * @param domain    The domain.\n+     * @param artifact  The original artifact.\n+     * @param roleProcessor Object to collect and process domain roles.\n+     */    \n+    private void findPhpBbRole(String url, String domain, BlackboardArtifact artifact, RoleProcessor roleProcessor) {\n+        String platformName = \"phpBB platform\"; // NON-NLS\n+        \n+        if (url.contains(\"/adm/index.php\")) {\n+            roleProcessor.addRole(domain, platformName, Role.ADMIN, url, artifact);\n+        } else if (url.contains(\"/mcp.php\")) {\n+            roleProcessor.addRole(domain, platformName, Role.MOD, url, artifact);\n+        } else if (url.contains(\"/ucp.php\")) {\n+            roleProcessor.addRole(domain, platformName, Role.USER, url, artifact);\n+        }\n+    }    \n+    \n+    /**\n+     * Extract Joomla role.\n+     * \n+     * @param url       The full URL.\n+     * @param domain    The domain.\n+     * @param artifact  The original artifact.\n+     * @param roleProcessor Object to collect and process domain roles.\n+     */\n+    private void findJoomlaRole(String url, String domain, BlackboardArtifact artifact, RoleProcessor roleProcessor) {\n+        String platformName = \"Joomla platform\"; // NON-NLS\n+        \n+        if (url.contains(\"/administrator/index.php\")) { // NON-NLS\n+            roleProcessor.addRole(domain, platformName, Role.ADMIN, url, artifact);\n+        }\n+    }\n+    \n+    /**\n+     * Extract WordPress role.\n+     * \n+     * @param url       The full URL.\n+     * @param domain    The domain.\n+     * @param artifact  The original artifact.\n+     * @param roleProcessor Object to collect and process domain roles.\n+     */\n+    private void findWordPressRole(String url, String domain, BlackboardArtifact artifact, RoleProcessor roleProcessor) {\n+        String platformName = \"WordPress platform\"; // NON-NLS\n+        \n+        // For WordPress, any logged in user can get to /wp-admin/, /wp-admin/index.php and /wp-admin/profile.php, so\n+        // assume that any other .php file will indicate an administrator\n+        if (url.contains(\"/wp-admin/\")) {\n+            \n+            if (url.endsWith(\"/wp-admin/\") \n+                    || url.contains(\"/wp-admin/index.php\")\n+                    || url.contains(\"/wp-admin/profile.php\")) {\n+                roleProcessor.addRole(domain, platformName, Role.USER, url, artifact);\n+            } else {\n+                roleProcessor.addRole(domain, platformName, Role.ADMIN, url, artifact);\n+            }\n+        }\n+    }  \n+    \n+    @Override\n+    void process(Content dataSource, IngestJobContext context, DataSourceIngestModuleProgress progressBar) {\n+        extractDomainRoles(dataSource, context);\n+    }\n+    \n+    \n+    /**\n+     * Collects data for making blackboard artifacts.\n+     * \n+     * We only want a max of one role per domain, and the role should be the\n+     * highest level found. The full URL and associated file will belong to the first\n+     * artifact found with the recorded level.\n+     */\n+    private class RoleProcessor {\n+        private final IngestJobContext context;\n+        private final Map<RoleKey, DomainRole> roles = new HashMap<>();\n+        \n+        RoleProcessor(IngestJobContext context) {\n+            this.context = context;\n+        }\n+        \n+        /**\n+         * Add a role to the map if:\n+         * - This is the first time we've seen this domain/platform\n+         * - The level of the role is higher than previously seen for this domain/platform\n+         * \n+         * @param domain   The domain.\n+         * @param platform The probable platform for this role.\n+         * @param role     The role level.\n+         * @param url      The URL (stored for efficiency).\n+         * @param artifact The original blackboard artifact the URL came from.\n+         */\n+        void addRole(String domain, String platform, Role role, String url, BlackboardArtifact artifact) {\n+            RoleKey key = new RoleKey(domain, platform);\n+            if ((! roles.containsKey(key)) ||\n+                    (roles.containsKey(key) && (role.getRank() > roles.get(key).getRole().getRank()))) {\n+                roles.put(key, new DomainRole(domain, platform, role, url, artifact));\n+            }\n+        }\n+        \n+        /**\n+         * Create artifacts for the domain roles.\n+         */\n+        void createArtifacts() {\n+            \n+            if (roles.isEmpty()) {\n+                logger.log(Level.INFO, \"Didn't find any web accounts.\");\n+                return;\n+            } else {\n+                logger.log(Level.INFO, \"Found {0} web accounts.\", roles.keySet().size());\n+            }\n+            \n+            try {\n+                for (RoleKey key : roles.keySet()) {\n+                    if (context.dataSourceIngestIsCancelled()) {\n+                        return;\n+                    }\n+                \n+                    DomainRole role = roles.get(key);\n+\n+                    AbstractFile file = tskCase.getAbstractFileById(role.getArtifact().getObjectID());\n+                    if (file == null) {\n+                        continue;\n+                    }\n+\n+                    String desc = role.getRole().getDesc() + \" role (\" + role.getPlatform() + \")\"; // NON-NLS\n+\n+                    Collection<BlackboardAttribute> bbattributes = new ArrayList<>();\n+                    bbattributes.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DOMAIN,\n+                            NbBundle.getMessage(this.getClass(),\n+                                    \"ExtractWebAccountType.parentModuleName\"), role.getDomain()));\n+                    bbattributes.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_TEXT,\n+                            NbBundle.getMessage(this.getClass(),\n+                                    \"ExtractWebAccountType.parentModuleName\"), desc));\n+                    bbattributes.add(new BlackboardAttribute(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_URL,\n+                            NbBundle.getMessage(this.getClass(),\n+                                    \"ExtractWebAccountType.parentModuleName\"), role.getUrl()));\n+\n+                    postArtifact(createArtifactWithAttributes(BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_ACCOUNT_TYPE, file, bbattributes));\n+                } \n+            } catch (TskCoreException ex) {\n+                logger.log(Level.SEVERE, \"Error creating web accounts\", ex);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Possible roles with rank and display name.\n+     */\n+    private enum Role {\n+        USER(\"User\", 0),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95007b15d76d8097f1dc94e2da1d4da5d55479d1"}, "originalPosition": 278}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cbebfb33fb20e7d9266091fcde28f93bcc69b57", "author": {"user": {"login": "APriestman", "name": "Ann Priestman"}}, "url": "https://github.com/sleuthkit/autopsy/commit/6cbebfb33fb20e7d9266091fcde28f93bcc69b57", "committedDate": "2020-09-17T19:29:14Z", "message": "Change to Bundle message.\nConvert to lower case."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwOTU5MDA2", "url": "https://github.com/sleuthkit/autopsy/pull/6257#pullrequestreview-490959006", "createdAt": "2020-09-17T20:21:35Z", "commit": {"oid": "6cbebfb33fb20e7d9266091fcde28f93bcc69b57"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2884, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}