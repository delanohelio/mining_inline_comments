{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NjcwOTU5", "number": 6112, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoyNzoxNVrOEReYmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzowMDo0MVrOEVf9UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzU5MDY2OnYy", "diffSide": "RIGHT", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoyNzoxNVrOG2NHmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTo1NDo1NFrOG4TZaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MTIyNw==", "bodyText": "Could this line be made lowercase so that the regexes below match without casing being an issue?", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r459491227", "createdAt": "2020-07-23T14:27:15Z", "author": {"login": "dannysmyda"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,112 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9132ceeede036550924d8789d0e5b715da41a89b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MTI0MA==", "bodyText": "Done", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r461691240", "createdAt": "2020-07-28T15:54:54Z", "author": {"login": "markmckinnon"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,112 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MTIyNw=="}, "originalCommit": {"oid": "9132ceeede036550924d8789d0e5b715da41a89b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzU5NjEwOnYy", "diffSide": "RIGHT", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoyODoyNVrOG2NLAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTo1NDo0NFrOG4TZAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MjA5Nw==", "bodyText": "Could this be made lowercase and all contains calls be made lowercase too? Or alternatively you can use http://commons.apache.org/proper/commons-lang//apidocs/org/apache/commons/lang3/StringUtils.html#containsIgnoreCase-java.lang.CharSequence-java.lang.CharSequence-", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r459492097", "createdAt": "2020-07-23T14:28:25Z", "author": {"login": "dannysmyda"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,112 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();\n+\n+                if (line.matches(\"^bam v.*\")) {\n+                    parseBamKey(regAbstractFile, reader, Bundle.Registry_System_Bam());\n+                } else if (line.matches(\"^bthport v..*\")) {\n+                    parseBlueToothDevices(regAbstractFile, reader)  ;\n+                }  \n+                line = reader.readLine();\n+            }\n+            return true;\n+        } catch (FileNotFoundException ex) {\n+            logger.log(Level.WARNING, \"Error finding the registry file.\", ex); //NON-NLS\n+        } catch (IOException ex) {\n+            logger.log(Level.WARNING, \"Error reading the system hive: {0}\", ex); //NON-NLS\n+        }\n+        \n+        return false;\n+        \n+    }\n+    \n+    /**\n+     * Create recently used artifacts to parse the regripper plugin output, this format is used in several diffent plugins\n+     * \n+     * @param regFile registry file the artifact is associated with\n+     * \n+     * @param reader buffered reader to parse adobemru records\n+     * \n+     * @param comment string that will populate attribute TSK_COMMENT\n+     * \n+     * @throws FileNotFound and IOException\n+     */\n+    private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n+        List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n+        String line = reader.readLine();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9132ceeede036550924d8789d0e5b715da41a89b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MTEzNg==", "bodyText": "Done", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r461691136", "createdAt": "2020-07-28T15:54:44Z", "author": {"login": "markmckinnon"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,112 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();\n+\n+                if (line.matches(\"^bam v.*\")) {\n+                    parseBamKey(regAbstractFile, reader, Bundle.Registry_System_Bam());\n+                } else if (line.matches(\"^bthport v..*\")) {\n+                    parseBlueToothDevices(regAbstractFile, reader)  ;\n+                }  \n+                line = reader.readLine();\n+            }\n+            return true;\n+        } catch (FileNotFoundException ex) {\n+            logger.log(Level.WARNING, \"Error finding the registry file.\", ex); //NON-NLS\n+        } catch (IOException ex) {\n+            logger.log(Level.WARNING, \"Error reading the system hive: {0}\", ex); //NON-NLS\n+        }\n+        \n+        return false;\n+        \n+    }\n+    \n+    /**\n+     * Create recently used artifacts to parse the regripper plugin output, this format is used in several diffent plugins\n+     * \n+     * @param regFile registry file the artifact is associated with\n+     * \n+     * @param reader buffered reader to parse adobemru records\n+     * \n+     * @param comment string that will populate attribute TSK_COMMENT\n+     * \n+     * @throws FileNotFound and IOException\n+     */\n+    private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n+        List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n+        String line = reader.readLine();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MjA5Nw=="}, "originalCommit": {"oid": "9132ceeede036550924d8789d0e5b715da41a89b"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzYwNjM3OnYy", "diffSide": "RIGHT", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDozMDozOFrOG2NRzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTo1NDozNlrOG4TYjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MzgzOQ==", "bodyText": "There is a lot of unchecked array access. Can you verify that the split arrays are at least length 2?", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r459493839", "createdAt": "2020-07-23T14:30:38Z", "author": {"login": "dannysmyda"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,112 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();\n+\n+                if (line.matches(\"^bam v.*\")) {\n+                    parseBamKey(regAbstractFile, reader, Bundle.Registry_System_Bam());\n+                } else if (line.matches(\"^bthport v..*\")) {\n+                    parseBlueToothDevices(regAbstractFile, reader)  ;\n+                }  \n+                line = reader.readLine();\n+            }\n+            return true;\n+        } catch (FileNotFoundException ex) {\n+            logger.log(Level.WARNING, \"Error finding the registry file.\", ex); //NON-NLS\n+        } catch (IOException ex) {\n+            logger.log(Level.WARNING, \"Error reading the system hive: {0}\", ex); //NON-NLS\n+        }\n+        \n+        return false;\n+        \n+    }\n+    \n+    /**\n+     * Create recently used artifacts to parse the regripper plugin output, this format is used in several diffent plugins\n+     * \n+     * @param regFile registry file the artifact is associated with\n+     * \n+     * @param reader buffered reader to parse adobemru records\n+     * \n+     * @param comment string that will populate attribute TSK_COMMENT\n+     * \n+     * @throws FileNotFound and IOException\n+     */\n+    private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n+        List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n+        String line = reader.readLine();\n+        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n+        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n+        Long bthLastSeen = Long.valueOf(0);\n+        Long bthLastConnected = Long.valueOf(0);\n+        while (!line.contains(SECTION_DIVIDER)) {\n+            line = reader.readLine();\n+            line = line.trim();\n+            if (line.contains(\"Device Unique ID\")) {\n+                // Columns are seperated by colons :\n+                // Data : Values\n+                // Record is 4 lines in length (Device Unique Id, Name, Last Seen,  LastConnected\n+                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.contains(\"Radio Support not found\")) {\n+                    // Split line on \"> \" which is the record delimiter between position and file\n+                    String deviceTokens[] = line.split(\": \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9132ceeede036550924d8789d0e5b715da41a89b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MTAyMg==", "bodyText": "Done", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r461691022", "createdAt": "2020-07-28T15:54:36Z", "author": {"login": "markmckinnon"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,112 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();\n+\n+                if (line.matches(\"^bam v.*\")) {\n+                    parseBamKey(regAbstractFile, reader, Bundle.Registry_System_Bam());\n+                } else if (line.matches(\"^bthport v..*\")) {\n+                    parseBlueToothDevices(regAbstractFile, reader)  ;\n+                }  \n+                line = reader.readLine();\n+            }\n+            return true;\n+        } catch (FileNotFoundException ex) {\n+            logger.log(Level.WARNING, \"Error finding the registry file.\", ex); //NON-NLS\n+        } catch (IOException ex) {\n+            logger.log(Level.WARNING, \"Error reading the system hive: {0}\", ex); //NON-NLS\n+        }\n+        \n+        return false;\n+        \n+    }\n+    \n+    /**\n+     * Create recently used artifacts to parse the regripper plugin output, this format is used in several diffent plugins\n+     * \n+     * @param regFile registry file the artifact is associated with\n+     * \n+     * @param reader buffered reader to parse adobemru records\n+     * \n+     * @param comment string that will populate attribute TSK_COMMENT\n+     * \n+     * @throws FileNotFound and IOException\n+     */\n+    private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n+        List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n+        String line = reader.readLine();\n+        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n+        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n+        Long bthLastSeen = Long.valueOf(0);\n+        Long bthLastConnected = Long.valueOf(0);\n+        while (!line.contains(SECTION_DIVIDER)) {\n+            line = reader.readLine();\n+            line = line.trim();\n+            if (line.contains(\"Device Unique ID\")) {\n+                // Columns are seperated by colons :\n+                // Data : Values\n+                // Record is 4 lines in length (Device Unique Id, Name, Last Seen,  LastConnected\n+                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.contains(\"Radio Support not found\")) {\n+                    // Split line on \"> \" which is the record delimiter between position and file\n+                    String deviceTokens[] = line.split(\": \");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MzgzOQ=="}, "originalCommit": {"oid": "9132ceeede036550924d8789d0e5b715da41a89b"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTUyOTcyOnYy", "diffSide": "RIGHT", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDo0Mzo1M1rOG2yIPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTo1NDoyNlrOG4TYMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NzU5OQ==", "bodyText": "Also, if there are no more lines in the reader, a null value will be returned.", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r460097599", "createdAt": "2020-07-24T14:43:53Z", "author": {"login": "dannysmyda"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,112 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();\n+\n+                if (line.matches(\"^bam v.*\")) {\n+                    parseBamKey(regAbstractFile, reader, Bundle.Registry_System_Bam());\n+                } else if (line.matches(\"^bthport v..*\")) {\n+                    parseBlueToothDevices(regAbstractFile, reader)  ;\n+                }  \n+                line = reader.readLine();\n+            }\n+            return true;\n+        } catch (FileNotFoundException ex) {\n+            logger.log(Level.WARNING, \"Error finding the registry file.\", ex); //NON-NLS\n+        } catch (IOException ex) {\n+            logger.log(Level.WARNING, \"Error reading the system hive: {0}\", ex); //NON-NLS\n+        }\n+        \n+        return false;\n+        \n+    }\n+    \n+    /**\n+     * Create recently used artifacts to parse the regripper plugin output, this format is used in several diffent plugins\n+     * \n+     * @param regFile registry file the artifact is associated with\n+     * \n+     * @param reader buffered reader to parse adobemru records\n+     * \n+     * @param comment string that will populate attribute TSK_COMMENT\n+     * \n+     * @throws FileNotFound and IOException\n+     */\n+    private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n+        List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n+        String line = reader.readLine();\n+        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n+        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n+        Long bthLastSeen = Long.valueOf(0);\n+        Long bthLastConnected = Long.valueOf(0);\n+        while (!line.contains(SECTION_DIVIDER)) {\n+            line = reader.readLine();\n+            line = line.trim();\n+            if (line.contains(\"Device Unique ID\")) {\n+                // Columns are seperated by colons :\n+                // Data : Values\n+                // Record is 4 lines in length (Device Unique Id, Name, Last Seen,  LastConnected\n+                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.contains(\"Radio Support not found\")) {\n+                    // Split line on \"> \" which is the record delimiter between position and file\n+                    String deviceTokens[] = line.split(\": \");\n+                    String deviceUniqueId = deviceTokens[1];\n+                    line = reader.readLine();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9132ceeede036550924d8789d0e5b715da41a89b"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5ODAyNw==", "bodyText": "I think if at any point the line is null you can just bail.", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r460098027", "createdAt": "2020-07-24T14:44:32Z", "author": {"login": "dannysmyda"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,112 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();\n+\n+                if (line.matches(\"^bam v.*\")) {\n+                    parseBamKey(regAbstractFile, reader, Bundle.Registry_System_Bam());\n+                } else if (line.matches(\"^bthport v..*\")) {\n+                    parseBlueToothDevices(regAbstractFile, reader)  ;\n+                }  \n+                line = reader.readLine();\n+            }\n+            return true;\n+        } catch (FileNotFoundException ex) {\n+            logger.log(Level.WARNING, \"Error finding the registry file.\", ex); //NON-NLS\n+        } catch (IOException ex) {\n+            logger.log(Level.WARNING, \"Error reading the system hive: {0}\", ex); //NON-NLS\n+        }\n+        \n+        return false;\n+        \n+    }\n+    \n+    /**\n+     * Create recently used artifacts to parse the regripper plugin output, this format is used in several diffent plugins\n+     * \n+     * @param regFile registry file the artifact is associated with\n+     * \n+     * @param reader buffered reader to parse adobemru records\n+     * \n+     * @param comment string that will populate attribute TSK_COMMENT\n+     * \n+     * @throws FileNotFound and IOException\n+     */\n+    private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n+        List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n+        String line = reader.readLine();\n+        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n+        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n+        Long bthLastSeen = Long.valueOf(0);\n+        Long bthLastConnected = Long.valueOf(0);\n+        while (!line.contains(SECTION_DIVIDER)) {\n+            line = reader.readLine();\n+            line = line.trim();\n+            if (line.contains(\"Device Unique ID\")) {\n+                // Columns are seperated by colons :\n+                // Data : Values\n+                // Record is 4 lines in length (Device Unique Id, Name, Last Seen,  LastConnected\n+                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.contains(\"Radio Support not found\")) {\n+                    // Split line on \"> \" which is the record delimiter between position and file\n+                    String deviceTokens[] = line.split(\": \");\n+                    String deviceUniqueId = deviceTokens[1];\n+                    line = reader.readLine();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NzU5OQ=="}, "originalCommit": {"oid": "9132ceeede036550924d8789d0e5b715da41a89b"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MDkyOQ==", "bodyText": "Done.", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r461690929", "createdAt": "2020-07-28T15:54:26Z", "author": {"login": "markmckinnon"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,112 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();\n+\n+                if (line.matches(\"^bam v.*\")) {\n+                    parseBamKey(regAbstractFile, reader, Bundle.Registry_System_Bam());\n+                } else if (line.matches(\"^bthport v..*\")) {\n+                    parseBlueToothDevices(regAbstractFile, reader)  ;\n+                }  \n+                line = reader.readLine();\n+            }\n+            return true;\n+        } catch (FileNotFoundException ex) {\n+            logger.log(Level.WARNING, \"Error finding the registry file.\", ex); //NON-NLS\n+        } catch (IOException ex) {\n+            logger.log(Level.WARNING, \"Error reading the system hive: {0}\", ex); //NON-NLS\n+        }\n+        \n+        return false;\n+        \n+    }\n+    \n+    /**\n+     * Create recently used artifacts to parse the regripper plugin output, this format is used in several diffent plugins\n+     * \n+     * @param regFile registry file the artifact is associated with\n+     * \n+     * @param reader buffered reader to parse adobemru records\n+     * \n+     * @param comment string that will populate attribute TSK_COMMENT\n+     * \n+     * @throws FileNotFound and IOException\n+     */\n+    private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n+        List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n+        String line = reader.readLine();\n+        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n+        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n+        Long bthLastSeen = Long.valueOf(0);\n+        Long bthLastConnected = Long.valueOf(0);\n+        while (!line.contains(SECTION_DIVIDER)) {\n+            line = reader.readLine();\n+            line = line.trim();\n+            if (line.contains(\"Device Unique ID\")) {\n+                // Columns are seperated by colons :\n+                // Data : Values\n+                // Record is 4 lines in length (Device Unique Id, Name, Last Seen,  LastConnected\n+                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.contains(\"Radio Support not found\")) {\n+                    // Split line on \"> \" which is the record delimiter between position and file\n+                    String deviceTokens[] = line.split(\": \");\n+                    String deviceUniqueId = deviceTokens[1];\n+                    line = reader.readLine();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NzU5OQ=="}, "originalCommit": {"oid": "9132ceeede036550924d8789d0e5b715da41a89b"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTc1OTUxOnYy", "diffSide": "RIGHT", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNjo1MjoyMlrOG8SRLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDo0MjozN1rOG-Rlkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NzA1Mw==", "bodyText": "Could you check line != null before the contains? It's still unsafe.", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r465867053", "createdAt": "2020-08-05T16:52:22Z", "author": {"login": "dannysmyda"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,113 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();\n+\n+                if (line.toLowerCase().matches(\"^bam v.*\")) {\n+                    parseBamKey(regAbstractFile, reader, Bundle.Registry_System_Bam());\n+                } else if (line.toLowerCase().matches(\"^bthport v..*\")) {\n+                    parseBlueToothDevices(regAbstractFile, reader)  ;\n+                }  \n+                line = reader.readLine();\n+            }\n+            return true;\n+        } catch (FileNotFoundException ex) {\n+            logger.log(Level.WARNING, \"Error finding the registry file.\", ex); //NON-NLS\n+        } catch (IOException ex) {\n+            logger.log(Level.WARNING, \"Error reading the system hive: {0}\", ex); //NON-NLS\n+        }\n+        \n+        return false;\n+        \n+    }\n+    \n+    /**\n+     * Create recently used artifacts to parse the regripper plugin output, this format is used in several diffent plugins\n+     * \n+     * @param regFile registry file the artifact is associated with\n+     * \n+     * @param reader buffered reader to parse adobemru records\n+     * \n+     * @param comment string that will populate attribute TSK_COMMENT\n+     * \n+     * @throws FileNotFound and IOException\n+     */\n+    private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n+        List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n+        String line = reader.readLine();\n+        while (!line.contains(SECTION_DIVIDER)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aa868b0a35b22b485d9337446a6b98568f7f53b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk1MzA0Mg==", "bodyText": "Done", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r467953042", "createdAt": "2020-08-10T14:42:37Z", "author": {"login": "markmckinnon"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -952,6 +953,113 @@ private boolean parseAutopsyPluginOutput(String regFilePath, AbstractFile regFil\n         return false;\n     }\n \n+    \n+    private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbstractFile) {\n+        File regfile = new File(regfilePath);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(regfile))) {\n+            String line = reader.readLine();\n+            while (line != null) {\n+                line = line.trim();\n+\n+                if (line.toLowerCase().matches(\"^bam v.*\")) {\n+                    parseBamKey(regAbstractFile, reader, Bundle.Registry_System_Bam());\n+                } else if (line.toLowerCase().matches(\"^bthport v..*\")) {\n+                    parseBlueToothDevices(regAbstractFile, reader)  ;\n+                }  \n+                line = reader.readLine();\n+            }\n+            return true;\n+        } catch (FileNotFoundException ex) {\n+            logger.log(Level.WARNING, \"Error finding the registry file.\", ex); //NON-NLS\n+        } catch (IOException ex) {\n+            logger.log(Level.WARNING, \"Error reading the system hive: {0}\", ex); //NON-NLS\n+        }\n+        \n+        return false;\n+        \n+    }\n+    \n+    /**\n+     * Create recently used artifacts to parse the regripper plugin output, this format is used in several diffent plugins\n+     * \n+     * @param regFile registry file the artifact is associated with\n+     * \n+     * @param reader buffered reader to parse adobemru records\n+     * \n+     * @param comment string that will populate attribute TSK_COMMENT\n+     * \n+     * @throws FileNotFound and IOException\n+     */\n+    private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n+        List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n+        String line = reader.readLine();\n+        while (!line.contains(SECTION_DIVIDER)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NzA1Mw=="}, "originalCommit": {"oid": "5aa868b0a35b22b485d9337446a6b98568f7f53b"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTc3NTcyOnYy", "diffSide": "RIGHT", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNjo1NjozOVrOG8Sbcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNjo1NjozOVrOG8Sbcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2OTY4Mg==", "bodyText": "This if statement should check if line != null before the contains.", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r465869682", "createdAt": "2020-08-05T16:56:39Z", "author": {"login": "dannysmyda"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -993,56 +993,25 @@ private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbst\n     private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n         List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n         String line = reader.readLine();\n-        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n-        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n-        Long bthLastSeen = Long.valueOf(0);\n-        Long bthLastConnected = Long.valueOf(0);\n         while (!line.contains(SECTION_DIVIDER)) {\n             line = reader.readLine();\n             line = line.trim();\n-            if (line.contains(\"Device Unique ID\")) {\n+            if (line.toLowerCase().contains(\"device unique id\")) {\n                 // Columns are seperated by colons :\n                 // Data : Values\n                 // Record is 4 lines in length (Device Unique Id, Name, Last Seen,  LastConnected\n-                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.contains(\"Radio Support not found\")) {\n-                    // Split line on \"> \" which is the record delimiter between position and file\n-                    String deviceTokens[] = line.split(\": \");\n-                    String deviceUniqueId = deviceTokens[1];\n+                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.toLowerCase().contains(\"radio support not found\")) {\n+                    Collection<BlackboardAttribute> attributes = new ArrayList<>();\n+                    addBlueToothAttribute(line, attributes, TSK_DEVICE_ID);\n                     line = reader.readLine();\n-                    // Default device name to unknown as a device name may not exist.\n-                    String deviceName = \"Unknown\";\n-                    if (line.contains(\"Name\")) {\n-                        String nameTokens[] = line.split(\": \");\n-                        deviceName = nameTokens[1];\n+                    // Name may not exist, check for it to make sure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aa868b0a35b22b485d9337446a6b98568f7f53b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTc4ODEzOnYy", "diffSide": "RIGHT", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNjo1OTo1MVrOG8Sjhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDo1MjowOFrOG-R_jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MTc1MA==", "bodyText": "Could you add a line != null condition before all of these other checks?", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r465871750", "createdAt": "2020-08-05T16:59:51Z", "author": {"login": "dannysmyda"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -993,56 +993,25 @@ private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbst\n     private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n         List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n         String line = reader.readLine();\n-        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n-        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n-        Long bthLastSeen = Long.valueOf(0);\n-        Long bthLastConnected = Long.valueOf(0);\n         while (!line.contains(SECTION_DIVIDER)) {\n             line = reader.readLine();\n             line = line.trim();\n-            if (line.contains(\"Device Unique ID\")) {\n+            if (line.toLowerCase().contains(\"device unique id\")) {\n                 // Columns are seperated by colons :\n                 // Data : Values\n                 // Record is 4 lines in length (Device Unique Id, Name, Last Seen,  LastConnected\n-                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.contains(\"Radio Support not found\")) {\n-                    // Split line on \"> \" which is the record delimiter between position and file\n-                    String deviceTokens[] = line.split(\": \");\n-                    String deviceUniqueId = deviceTokens[1];\n+                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.toLowerCase().contains(\"radio support not found\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aa868b0a35b22b485d9337446a6b98568f7f53b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk1OTY5NA==", "bodyText": "Done", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r467959694", "createdAt": "2020-08-10T14:52:08Z", "author": {"login": "markmckinnon"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -993,56 +993,25 @@ private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbst\n     private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n         List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n         String line = reader.readLine();\n-        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n-        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n-        Long bthLastSeen = Long.valueOf(0);\n-        Long bthLastConnected = Long.valueOf(0);\n         while (!line.contains(SECTION_DIVIDER)) {\n             line = reader.readLine();\n             line = line.trim();\n-            if (line.contains(\"Device Unique ID\")) {\n+            if (line.toLowerCase().contains(\"device unique id\")) {\n                 // Columns are seperated by colons :\n                 // Data : Values\n                 // Record is 4 lines in length (Device Unique Id, Name, Last Seen,  LastConnected\n-                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.contains(\"Radio Support not found\")) {\n-                    // Split line on \"> \" which is the record delimiter between position and file\n-                    String deviceTokens[] = line.split(\": \");\n-                    String deviceUniqueId = deviceTokens[1];\n+                while (!line.contains(SECTION_DIVIDER) && !line.isEmpty() && !line.toLowerCase().contains(\"radio support not found\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MTc1MA=="}, "originalCommit": {"oid": "5aa868b0a35b22b485d9337446a6b98568f7f53b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTc5MTUzOnYy", "diffSide": "RIGHT", "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzowMDo0MVrOG8Slpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDo1MjoyMVrOG-SAJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MjI5NQ==", "bodyText": "Could you add a check after this readLine to break/return if null?", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r465872295", "createdAt": "2020-08-05T17:00:41Z", "author": {"login": "dannysmyda"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -993,56 +993,25 @@ private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbst\n     private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n         List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n         String line = reader.readLine();\n-        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n-        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n-        Long bthLastSeen = Long.valueOf(0);\n-        Long bthLastConnected = Long.valueOf(0);\n         while (!line.contains(SECTION_DIVIDER)) {\n             line = reader.readLine();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5aa868b0a35b22b485d9337446a6b98568f7f53b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk1OTg0NA==", "bodyText": "Done", "url": "https://github.com/sleuthkit/autopsy/pull/6112#discussion_r467959844", "createdAt": "2020-08-10T14:52:21Z", "author": {"login": "markmckinnon"}, "path": "RecentActivity/src/org/sleuthkit/autopsy/recentactivity/ExtractRegistry.java", "diffHunk": "@@ -993,56 +993,25 @@ private boolean parseSystemPluginOutput(String regfilePath, AbstractFile regAbst\n     private void parseBlueToothDevices(AbstractFile regFile, BufferedReader reader) throws FileNotFoundException, IOException {\n         List<BlackboardArtifact> bbartifacts = new ArrayList<>();\n         String line = reader.readLine();\n-        // date format for plugin Tue Jun 23 10:27:54 2020 Z\n-        SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE MMM d HH:mm:ss yyyy\", US);\n-        Long bthLastSeen = Long.valueOf(0);\n-        Long bthLastConnected = Long.valueOf(0);\n         while (!line.contains(SECTION_DIVIDER)) {\n             line = reader.readLine();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MjI5NQ=="}, "originalCommit": {"oid": "5aa868b0a35b22b485d9337446a6b98568f7f53b"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 918, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}