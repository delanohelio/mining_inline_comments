{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNTIxMjU1", "number": 6511, "title": "6912 Add option to not copy files that are present in file repository.", "bodyText": "", "createdAt": "2020-12-01T19:25:04Z", "url": "https://github.com/sleuthkit/autopsy/pull/6511", "merged": true, "mergeCommit": {"oid": "bf426928b31cbd18ccfac9d4bd80f16f07a55165"}, "closed": true, "closedAt": "2020-12-07T18:57:37Z", "author": {"login": "APriestman"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdh_CVHAH2gAyNTMwNTIxMjU1OjliYjI2MDY3MzYwZjIxYWUwYzgzYzZiMjExY2U3ZGMxMmZhZmVhNjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdj6HsegFqTU0NjQzNDYzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9bb26067360f21ae0c83c6b211ce7dc12fafea69", "author": {"user": {"login": "APriestman", "name": "Ann Priestman"}}, "url": "https://github.com/sleuthkit/autopsy/commit/9bb26067360f21ae0c83c6b211ce7dc12fafea69", "committedDate": "2020-12-01T19:23:18Z", "message": "Add option to not copy files that are present in file repository."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MTQ1MzAz", "url": "https://github.com/sleuthkit/autopsy/pull/6511#pullrequestreview-545145303", "createdAt": "2020-12-04T17:13:48Z", "commit": {"oid": "9bb26067360f21ae0c83c6b211ce7dc12fafea69"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxMzo0OFrOH_aGlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxODo1M1rOH_aR5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1MDAwNA==", "bodyText": "Hmm, maybe my BulkExistenceEnum should have EXISTS, DOES_NOT_EXIST, INVALID_HASH, instead of True, False, Invalid.", "url": "https://github.com/sleuthkit/autopsy/pull/6511#discussion_r536250004", "createdAt": "2020-12-04T17:13:48Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/report/modules/portablecase/PortableCaseReportModule.java", "diffHunk": "@@ -1230,6 +1317,123 @@ private void createAppLaunchBatFile(String destBaseFolder) throws IOException {\n             writer.write(exePath + \" \\\"\" + casePath + \"\\\"\");\n         }\n     }\n+    \n+    /**\n+     * Get a set of the content associated with the given artifacts.\n+     * \n+     * @param arts The list of artifacts.\n+     * \n+     * @return The set of content objects.\n+     */\n+    private Set<Content> getContentForArtifacts(List<BlackboardArtifact> arts) throws TskCoreException {\n+        Set<Content> results = new HashSet<>();\n+        for (BlackboardArtifact art : arts) {\n+            results.add(art.getParent());\n+        }\n+        return results;\n+    }\n+    \n+    /**\n+     * Check if a given file is in the file repository.\n+     * \n+     * @param file The file to look up.\n+     * \n+     * @return \n+     * \n+     * @throws TskCoreException \n+     */\n+    private boolean fileIsInRepository(AbstractFile file) throws TskCoreException {\n+        if (fileRepositoryLookupCache.containsKey(file.getId())) {\n+            return fileRepositoryLookupCache.get(file.getId()).equals(FileRepoState.EXISTS);\n+        }\n+        \n+        if (file.getSha256Hash() == null || file.getSha256Hash().isEmpty()) {\n+            throw new TskCoreException(\"Missing SHA-256 hash for file \" + file.getName() + \"(ID: \" + file.getId() + \")\");\n+        }\n+        \n+        try {\n+            // Do a single lookup then cache and return the result\n+            boolean exists = FileRepository.exists(file);\n+            if (exists) {\n+                fileRepositoryLookupCache.put(file.getId(), FileRepoState.EXISTS);\n+            } else {\n+                fileRepositoryLookupCache.put(file.getId(), FileRepoState.DOES_NOT_EXIST);\n+            }\n+            return exists;\n+        } catch (IOException | FileRepositoryException ex) {\n+            throw new TskCoreException(\"Error looking up file in file repository\");\n+        }\n+    }\n+    \n+    /**\n+     * Looks up a list of files in the file repository and caches the results.\n+     * The idea is to do the majority of the file lookups in bulk queries.\n+     * \n+     * @param contentList   The list of content to check in the file repository.\n+     * @param progressPanel the progress panel.\n+     * \n+     * @throws TskCoreException \n+     */\n+    private void prepopulateFileRepositoryCache(Set<Content> contentList, ReportProgressPanel progressPanel) throws TskCoreException {\n+        List<AbstractFile> filesToLookUp = new ArrayList<>();\n+        for (Content content : contentList) {\n+            \n+            if (progressPanel.getStatus() == ReportProgressPanel.ReportStatus.CANCELED) {\n+                return;\n+            }\n+            \n+            if (! (content instanceof AbstractFile)) {\n+                continue;\n+            }\n+            AbstractFile file = (AbstractFile)content;\n+            \n+            // Make sure the hash has been calculated\n+            if (file.getSha256Hash() == null || file.getSha256Hash().isEmpty()) {\n+                throw new TskCoreException(\"Missing SHA-256 hash for file \" + file.getName() + \"(ID: \" + file.getId() + \")\");\n+            }\n+            \n+            // Check whether we've already looked up this file\n+            if (! fileRepositoryLookupCache.containsKey(file.getId())) {\n+                filesToLookUp.add(file);\n+            }\n+            \n+            // Look up a batch of files\n+            if (filesToLookUp.size() > 200) {\n+                doBulkFileRepositoryLookup(filesToLookUp);\n+                filesToLookUp.clear();\n+            }\n+        }\n+        \n+        // Look up the final batch of files\n+        if (! filesToLookUp.isEmpty()) {\n+            doBulkFileRepositoryLookup(filesToLookUp);\n+            filesToLookUp.clear();\n+        }\n+    }\n+    \n+    /**\n+     * Look up the batch of files in the file repository and save the returned state\n+     * to the cache.\n+     * \n+     * @param files File to look up.\n+     * \n+     * @throws TskCoreException \n+     */\n+    private void doBulkFileRepositoryLookup(List<AbstractFile> files) throws TskCoreException {\n+        try {\n+            BulkExistenceResult results = FileRepository.exists(files);\n+            for (AbstractFile file : files) {\n+                BulkExistenceEnum result = results.getResult(file);\n+                if (result != null && result.equals(BulkExistenceEnum.TRUE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb26067360f21ae0c83c6b211ce7dc12fafea69"}, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1MDI4OQ==", "bodyText": "And maybe it should be renamed FileRepoExistenceEnum and FileRepoExistenceResults", "url": "https://github.com/sleuthkit/autopsy/pull/6511#discussion_r536250289", "createdAt": "2020-12-04T17:14:22Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/report/modules/portablecase/PortableCaseReportModule.java", "diffHunk": "@@ -1230,6 +1317,123 @@ private void createAppLaunchBatFile(String destBaseFolder) throws IOException {\n             writer.write(exePath + \" \\\"\" + casePath + \"\\\"\");\n         }\n     }\n+    \n+    /**\n+     * Get a set of the content associated with the given artifacts.\n+     * \n+     * @param arts The list of artifacts.\n+     * \n+     * @return The set of content objects.\n+     */\n+    private Set<Content> getContentForArtifacts(List<BlackboardArtifact> arts) throws TskCoreException {\n+        Set<Content> results = new HashSet<>();\n+        for (BlackboardArtifact art : arts) {\n+            results.add(art.getParent());\n+        }\n+        return results;\n+    }\n+    \n+    /**\n+     * Check if a given file is in the file repository.\n+     * \n+     * @param file The file to look up.\n+     * \n+     * @return \n+     * \n+     * @throws TskCoreException \n+     */\n+    private boolean fileIsInRepository(AbstractFile file) throws TskCoreException {\n+        if (fileRepositoryLookupCache.containsKey(file.getId())) {\n+            return fileRepositoryLookupCache.get(file.getId()).equals(FileRepoState.EXISTS);\n+        }\n+        \n+        if (file.getSha256Hash() == null || file.getSha256Hash().isEmpty()) {\n+            throw new TskCoreException(\"Missing SHA-256 hash for file \" + file.getName() + \"(ID: \" + file.getId() + \")\");\n+        }\n+        \n+        try {\n+            // Do a single lookup then cache and return the result\n+            boolean exists = FileRepository.exists(file);\n+            if (exists) {\n+                fileRepositoryLookupCache.put(file.getId(), FileRepoState.EXISTS);\n+            } else {\n+                fileRepositoryLookupCache.put(file.getId(), FileRepoState.DOES_NOT_EXIST);\n+            }\n+            return exists;\n+        } catch (IOException | FileRepositoryException ex) {\n+            throw new TskCoreException(\"Error looking up file in file repository\");\n+        }\n+    }\n+    \n+    /**\n+     * Looks up a list of files in the file repository and caches the results.\n+     * The idea is to do the majority of the file lookups in bulk queries.\n+     * \n+     * @param contentList   The list of content to check in the file repository.\n+     * @param progressPanel the progress panel.\n+     * \n+     * @throws TskCoreException \n+     */\n+    private void prepopulateFileRepositoryCache(Set<Content> contentList, ReportProgressPanel progressPanel) throws TskCoreException {\n+        List<AbstractFile> filesToLookUp = new ArrayList<>();\n+        for (Content content : contentList) {\n+            \n+            if (progressPanel.getStatus() == ReportProgressPanel.ReportStatus.CANCELED) {\n+                return;\n+            }\n+            \n+            if (! (content instanceof AbstractFile)) {\n+                continue;\n+            }\n+            AbstractFile file = (AbstractFile)content;\n+            \n+            // Make sure the hash has been calculated\n+            if (file.getSha256Hash() == null || file.getSha256Hash().isEmpty()) {\n+                throw new TskCoreException(\"Missing SHA-256 hash for file \" + file.getName() + \"(ID: \" + file.getId() + \")\");\n+            }\n+            \n+            // Check whether we've already looked up this file\n+            if (! fileRepositoryLookupCache.containsKey(file.getId())) {\n+                filesToLookUp.add(file);\n+            }\n+            \n+            // Look up a batch of files\n+            if (filesToLookUp.size() > 200) {\n+                doBulkFileRepositoryLookup(filesToLookUp);\n+                filesToLookUp.clear();\n+            }\n+        }\n+        \n+        // Look up the final batch of files\n+        if (! filesToLookUp.isEmpty()) {\n+            doBulkFileRepositoryLookup(filesToLookUp);\n+            filesToLookUp.clear();\n+        }\n+    }\n+    \n+    /**\n+     * Look up the batch of files in the file repository and save the returned state\n+     * to the cache.\n+     * \n+     * @param files File to look up.\n+     * \n+     * @throws TskCoreException \n+     */\n+    private void doBulkFileRepositoryLookup(List<AbstractFile> files) throws TskCoreException {\n+        try {\n+            BulkExistenceResult results = FileRepository.exists(files);\n+            for (AbstractFile file : files) {\n+                BulkExistenceEnum result = results.getResult(file);\n+                if (result != null && result.equals(BulkExistenceEnum.TRUE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1MDAwNA=="}, "originalCommit": {"oid": "9bb26067360f21ae0c83c6b211ce7dc12fafea69"}, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1MjkwMg==", "bodyText": "Are we not going to deal with if the state changes? Also, if the FileRepo is redirected to another server in the settings, this cache needs to be invalidated. Will this PortableCase object be GC'd between Case close and open?", "url": "https://github.com/sleuthkit/autopsy/pull/6511#discussion_r536252902", "createdAt": "2020-12-04T17:18:53Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/report/modules/portablecase/PortableCaseReportModule.java", "diffHunk": "@@ -103,6 +111,12 @@\n     private String caseName = \"\";\n     private File caseFolder = null;\n     private File copiedFilesFolder = null;\n+    \n+    // Stores whether files are present in the file repository\n+    private enum FileRepoState {\n+        EXISTS, DOES_NOT_EXIST;\n+    }\n+    private final Map<Long, FileRepoState> fileRepositoryLookupCache = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb26067360f21ae0c83c6b211ce7dc12fafea69"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4c3119b2118d134def4596fc15178cc66518f2a", "author": {"user": {"login": "APriestman", "name": "Ann Priestman"}}, "url": "https://github.com/sleuthkit/autopsy/commit/d4c3119b2118d134def4596fc15178cc66518f2a", "committedDate": "2020-12-04T17:32:41Z", "message": "Clear out the file repo cache between runs."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NzY2NzQ5", "url": "https://github.com/sleuthkit/autopsy/pull/6511#pullrequestreview-545766749", "createdAt": "2020-12-07T00:14:59Z", "commit": {"oid": "d4c3119b2118d134def4596fc15178cc66518f2a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMDoxNDo1OVrOIARgfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMDoxNToxOVrOIARgpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE1Nzc1OQ==", "bodyText": "Exception containing the cause is dropped.", "url": "https://github.com/sleuthkit/autopsy/pull/6511#discussion_r537157759", "createdAt": "2020-12-07T00:14:59Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/report/modules/portablecase/PortableCaseReportModule.java", "diffHunk": "@@ -1230,6 +1317,123 @@ private void createAppLaunchBatFile(String destBaseFolder) throws IOException {\n             writer.write(exePath + \" \\\"\" + casePath + \"\\\"\");\n         }\n     }\n+    \n+    /**\n+     * Get a set of the content associated with the given artifacts.\n+     * \n+     * @param arts The list of artifacts.\n+     * \n+     * @return The set of content objects.\n+     */\n+    private Set<Content> getContentForArtifacts(List<BlackboardArtifact> arts) throws TskCoreException {\n+        Set<Content> results = new HashSet<>();\n+        for (BlackboardArtifact art : arts) {\n+            results.add(art.getParent());\n+        }\n+        return results;\n+    }\n+    \n+    /**\n+     * Check if a given file is in the file repository.\n+     * \n+     * @param file The file to look up.\n+     * \n+     * @return \n+     * \n+     * @throws TskCoreException \n+     */\n+    private boolean fileIsInRepository(AbstractFile file) throws TskCoreException {\n+        if (fileRepositoryLookupCache.containsKey(file.getId())) {\n+            return fileRepositoryLookupCache.get(file.getId()).equals(FileRepoState.EXISTS);\n+        }\n+        \n+        if (file.getSha256Hash() == null || file.getSha256Hash().isEmpty()) {\n+            throw new TskCoreException(\"Missing SHA-256 hash for file \" + file.getName() + \"(ID: \" + file.getId() + \")\");\n+        }\n+        \n+        try {\n+            // Do a single lookup then cache and return the result\n+            boolean exists = FileRepository.exists(file);\n+            if (exists) {\n+                fileRepositoryLookupCache.put(file.getId(), FileRepoState.EXISTS);\n+            } else {\n+                fileRepositoryLookupCache.put(file.getId(), FileRepoState.DOES_NOT_EXIST);\n+            }\n+            return exists;\n+        } catch (IOException | FileRepositoryException ex) {\n+            throw new TskCoreException(\"Error looking up file in file repository\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c3119b2118d134def4596fc15178cc66518f2a"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE1Nzc5Nw==", "bodyText": "Exception containing the cause is dropped.", "url": "https://github.com/sleuthkit/autopsy/pull/6511#discussion_r537157797", "createdAt": "2020-12-07T00:15:19Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/report/modules/portablecase/PortableCaseReportModule.java", "diffHunk": "@@ -1230,6 +1317,123 @@ private void createAppLaunchBatFile(String destBaseFolder) throws IOException {\n             writer.write(exePath + \" \\\"\" + casePath + \"\\\"\");\n         }\n     }\n+    \n+    /**\n+     * Get a set of the content associated with the given artifacts.\n+     * \n+     * @param arts The list of artifacts.\n+     * \n+     * @return The set of content objects.\n+     */\n+    private Set<Content> getContentForArtifacts(List<BlackboardArtifact> arts) throws TskCoreException {\n+        Set<Content> results = new HashSet<>();\n+        for (BlackboardArtifact art : arts) {\n+            results.add(art.getParent());\n+        }\n+        return results;\n+    }\n+    \n+    /**\n+     * Check if a given file is in the file repository.\n+     * \n+     * @param file The file to look up.\n+     * \n+     * @return \n+     * \n+     * @throws TskCoreException \n+     */\n+    private boolean fileIsInRepository(AbstractFile file) throws TskCoreException {\n+        if (fileRepositoryLookupCache.containsKey(file.getId())) {\n+            return fileRepositoryLookupCache.get(file.getId()).equals(FileRepoState.EXISTS);\n+        }\n+        \n+        if (file.getSha256Hash() == null || file.getSha256Hash().isEmpty()) {\n+            throw new TskCoreException(\"Missing SHA-256 hash for file \" + file.getName() + \"(ID: \" + file.getId() + \")\");\n+        }\n+        \n+        try {\n+            // Do a single lookup then cache and return the result\n+            boolean exists = FileRepository.exists(file);\n+            if (exists) {\n+                fileRepositoryLookupCache.put(file.getId(), FileRepoState.EXISTS);\n+            } else {\n+                fileRepositoryLookupCache.put(file.getId(), FileRepoState.DOES_NOT_EXIST);\n+            }\n+            return exists;\n+        } catch (IOException | FileRepositoryException ex) {\n+            throw new TskCoreException(\"Error looking up file in file repository\");\n+        }\n+    }\n+    \n+    /**\n+     * Looks up a list of files in the file repository and caches the results.\n+     * The idea is to do the majority of the file lookups in bulk queries.\n+     * \n+     * @param contentList   The list of content to check in the file repository.\n+     * @param progressPanel the progress panel.\n+     * \n+     * @throws TskCoreException \n+     */\n+    private void prepopulateFileRepositoryCache(Set<Content> contentList, ReportProgressPanel progressPanel) throws TskCoreException {\n+        List<AbstractFile> filesToLookUp = new ArrayList<>();\n+        for (Content content : contentList) {\n+            \n+            if (progressPanel.getStatus() == ReportProgressPanel.ReportStatus.CANCELED) {\n+                return;\n+            }\n+            \n+            if (! (content instanceof AbstractFile)) {\n+                continue;\n+            }\n+            AbstractFile file = (AbstractFile)content;\n+            \n+            // Make sure the hash has been calculated\n+            if (file.getSha256Hash() == null || file.getSha256Hash().isEmpty()) {\n+                throw new TskCoreException(\"Missing SHA-256 hash for file \" + file.getName() + \"(ID: \" + file.getId() + \")\");\n+            }\n+            \n+            // Check whether we've already looked up this file\n+            if (! fileRepositoryLookupCache.containsKey(file.getId())) {\n+                filesToLookUp.add(file);\n+            }\n+            \n+            // Look up a batch of files\n+            if (filesToLookUp.size() > 200) {\n+                doBulkFileRepositoryLookup(filesToLookUp);\n+                filesToLookUp.clear();\n+            }\n+        }\n+        \n+        // Look up the final batch of files\n+        if (! filesToLookUp.isEmpty()) {\n+            doBulkFileRepositoryLookup(filesToLookUp);\n+            filesToLookUp.clear();\n+        }\n+    }\n+    \n+    /**\n+     * Look up the batch of files in the file repository and save the returned state\n+     * to the cache.\n+     * \n+     * @param files File to look up.\n+     * \n+     * @throws TskCoreException \n+     */\n+    private void doBulkFileRepositoryLookup(List<AbstractFile> files) throws TskCoreException {\n+        try {\n+            BulkExistenceResult results = FileRepository.exists(files);\n+            for (AbstractFile file : files) {\n+                BulkExistenceEnum result = results.getResult(file);\n+                if (result != null && result.equals(BulkExistenceEnum.TRUE)) {\n+                    fileRepositoryLookupCache.put(file.getId(), FileRepoState.EXISTS);\n+                } else if (result != null && result.equals(BulkExistenceEnum.FALSE)) {\n+                    fileRepositoryLookupCache.put(file.getId(), FileRepoState.DOES_NOT_EXIST);\n+                }\n+            }\n+        } catch (IOException | FileRepositoryException ex) {\n+            throw new TskCoreException(\"Error looking up file in file repository\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c3119b2118d134def4596fc15178cc66518f2a"}, "originalPosition": 306}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "027a39560eb57628e455c0291ea0b77096a62dcf", "author": {"user": {"login": "APriestman", "name": "Ann Priestman"}}, "url": "https://github.com/sleuthkit/autopsy/commit/027a39560eb57628e455c0291ea0b77096a62dcf", "committedDate": "2020-12-07T18:10:37Z", "message": "Improve exception handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NDM0NjM5", "url": "https://github.com/sleuthkit/autopsy/pull/6511#pullrequestreview-546434639", "createdAt": "2020-12-07T18:47:29Z", "commit": {"oid": "027a39560eb57628e455c0291ea0b77096a62dcf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2848, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}