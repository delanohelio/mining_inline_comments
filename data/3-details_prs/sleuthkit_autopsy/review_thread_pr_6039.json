{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMjc2MTc2", "number": 6039, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozMzo0NFrOEKnoXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozMzo0NFrOEKnoXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTcwNTI2OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datamodel/FileTypesByMimeType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozMzo0NFrOGrxE1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyODoxMlrOGsPZeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NjAwNQ==", "bodyText": "Did we come to the conclusion that there was no point in checking to see if the file actually has a mime type before refreshing?", "url": "https://github.com/sleuthkit/autopsy/pull/6039#discussion_r448546005", "createdAt": "2020-07-01T18:33:44Z", "author": {"login": "esaunders"}, "path": "Core/src/org/sleuthkit/autopsy/datamodel/FileTypesByMimeType.java", "diffHunk": "@@ -212,6 +207,37 @@ public static boolean isEmptyMimeTypeNode(Node node) {\n \n     }\n \n+    private void refreshMimeTypes() {\n+        /**\n+         * Checking for a current case is a stop gap measure until a different\n+         * way of handling the closing of cases is worked out. Currently, remote\n+         * events may be received for a case that is already closed.\n+         */\n+        try {\n+            Case.getCurrentCaseThrows();\n+            typesRoot.updateShowCounts();\n+            populateHashMap();\n+        } catch (NoCurrentCaseException notUsed) {\n+            /**\n+             * Case is closed, do nothing.\n+             */\n+        }\n+    }\n+\n+    private class FileTypesByMimeTypeRefresher implements RefreshThrottler.Refresher {\n+\n+        @Override\n+        public void refresh() {\n+            refreshMimeTypes();\n+        }\n+\n+        @Override\n+        public boolean isRefreshRequired(PropertyChangeEvent evt) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db91970c7e5d7633f3e87c686d43e92e8ad77a59"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MjgwOQ==", "bodyText": "Yes", "url": "https://github.com/sleuthkit/autopsy/pull/6039#discussion_r449042809", "createdAt": "2020-07-02T14:28:12Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/datamodel/FileTypesByMimeType.java", "diffHunk": "@@ -212,6 +207,37 @@ public static boolean isEmptyMimeTypeNode(Node node) {\n \n     }\n \n+    private void refreshMimeTypes() {\n+        /**\n+         * Checking for a current case is a stop gap measure until a different\n+         * way of handling the closing of cases is worked out. Currently, remote\n+         * events may be received for a case that is already closed.\n+         */\n+        try {\n+            Case.getCurrentCaseThrows();\n+            typesRoot.updateShowCounts();\n+            populateHashMap();\n+        } catch (NoCurrentCaseException notUsed) {\n+            /**\n+             * Case is closed, do nothing.\n+             */\n+        }\n+    }\n+\n+    private class FileTypesByMimeTypeRefresher implements RefreshThrottler.Refresher {\n+\n+        @Override\n+        public void refresh() {\n+            refreshMimeTypes();\n+        }\n+\n+        @Override\n+        public boolean isRefreshRequired(PropertyChangeEvent evt) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NjAwNQ=="}, "originalCommit": {"oid": "db91970c7e5d7633f3e87c686d43e92e8ad77a59"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 569, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}