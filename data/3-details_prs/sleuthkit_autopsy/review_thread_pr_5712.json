{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4OTc5Mzgz", "number": 5712, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo1Njo1NVrODryiiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzowNzoyM1rODsDmHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjQzNDAxOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourceprocessors/xry/XRYContactsFileParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo1Njo1NVrOF8V47w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0Mjo1N1rOF_BPtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNzUxOQ==", "bodyText": "Is there a reason we don't need to normalize to lower case any more?", "url": "https://github.com/sleuthkit/autopsy/pull/5712#discussion_r398817519", "createdAt": "2020-03-26T18:56:55Z", "author": {"login": "raman-bt"}, "path": "Core/src/org/sleuthkit/autopsy/datasourceprocessors/xry/XRYContactsFileParser.java", "diffHunk": "@@ -19,49 +19,30 @@\n package org.sleuthkit.autopsy.datasourceprocessors.xry;\n \n import java.util.ArrayList;\n-import java.util.HashMap;\n+import java.util.Collection;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n import java.util.logging.Level;\n import org.sleuthkit.autopsy.coreutils.Logger;\n-import org.sleuthkit.datamodel.BlackboardAttribute;\n+import static org.sleuthkit.autopsy.datasourceprocessors.xry.AbstractSingleEntityParser.PARSER_NAME;\n+import org.sleuthkit.datamodel.Account;\n+import org.sleuthkit.datamodel.Blackboard;\n import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.SleuthkitCase;\n import org.sleuthkit.datamodel.TskCoreException;\n+import org.sleuthkit.datamodel.blackboardutils.CommunicationArtifactsHelper;\n \n /**\n  * Parses XRY Contacts-Contacts files and creates artifacts.\n  */\n final class XRYContactsFileParser extends AbstractSingleEntityParser {\n-    \n+\n     private static final Logger logger = Logger.getLogger(XRYContactsFileParser.class.getName());\n \n-    //All of the known XRY keys for contacts.\n-    private static final Map<String, BlackboardAttribute.ATTRIBUTE_TYPE> XRY_KEYS = \n-            new HashMap<String, BlackboardAttribute.ATTRIBUTE_TYPE>() {{\n-        put(\"name\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_NAME);\n-        put(\"tel\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER);\n-        put(\"mobile\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_MOBILE);\n-        put(\"home\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_HOME);\n-        put(\"related application\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PROG_NAME);\n-        put(\"address home\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_LOCATION);\n-        put(\"email home\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_HOME);\n-        put(\"deleted\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ISDELETED);\n-        \n-        //Ignoring or need more information to decide.\n-        put(\"storage\", null);\n-        put(\"other\", null);\n-        put(\"picture\", null);\n-        put(\"index\", null);\n-        put(\"account name\", null);\n-        \n-    }};\n-    \n     @Override\n     boolean canProcess(XRYKeyValuePair pair) {\n-        String normalizedKey = pair.getKey().toLowerCase();\n-        return XRY_KEYS.containsKey(normalizedKey);\n+        return XryKey.contains(pair.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13bc5f4abe13512b6ed8c74a2d5a7998d6c03054"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNTAxNA==", "bodyText": "Yes, the key is lower-cased in XryKey.contains() method.", "url": "https://github.com/sleuthkit/autopsy/pull/5712#discussion_r401625014", "createdAt": "2020-04-01T13:42:57Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/datasourceprocessors/xry/XRYContactsFileParser.java", "diffHunk": "@@ -19,49 +19,30 @@\n package org.sleuthkit.autopsy.datasourceprocessors.xry;\n \n import java.util.ArrayList;\n-import java.util.HashMap;\n+import java.util.Collection;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n import java.util.logging.Level;\n import org.sleuthkit.autopsy.coreutils.Logger;\n-import org.sleuthkit.datamodel.BlackboardAttribute;\n+import static org.sleuthkit.autopsy.datasourceprocessors.xry.AbstractSingleEntityParser.PARSER_NAME;\n+import org.sleuthkit.datamodel.Account;\n+import org.sleuthkit.datamodel.Blackboard;\n import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n import org.sleuthkit.datamodel.Content;\n+import org.sleuthkit.datamodel.SleuthkitCase;\n import org.sleuthkit.datamodel.TskCoreException;\n+import org.sleuthkit.datamodel.blackboardutils.CommunicationArtifactsHelper;\n \n /**\n  * Parses XRY Contacts-Contacts files and creates artifacts.\n  */\n final class XRYContactsFileParser extends AbstractSingleEntityParser {\n-    \n+\n     private static final Logger logger = Logger.getLogger(XRYContactsFileParser.class.getName());\n \n-    //All of the known XRY keys for contacts.\n-    private static final Map<String, BlackboardAttribute.ATTRIBUTE_TYPE> XRY_KEYS = \n-            new HashMap<String, BlackboardAttribute.ATTRIBUTE_TYPE>() {{\n-        put(\"name\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_NAME);\n-        put(\"tel\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER);\n-        put(\"mobile\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_MOBILE);\n-        put(\"home\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PHONE_NUMBER_HOME);\n-        put(\"related application\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PROG_NAME);\n-        put(\"address home\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_LOCATION);\n-        put(\"email home\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_EMAIL_HOME);\n-        put(\"deleted\", BlackboardAttribute.ATTRIBUTE_TYPE.TSK_ISDELETED);\n-        \n-        //Ignoring or need more information to decide.\n-        put(\"storage\", null);\n-        put(\"other\", null);\n-        put(\"picture\", null);\n-        put(\"index\", null);\n-        put(\"account name\", null);\n-        \n-    }};\n-    \n     @Override\n     boolean canProcess(XRYKeyValuePair pair) {\n-        String normalizedKey = pair.getKey().toLowerCase();\n-        return XRY_KEYS.containsKey(normalizedKey);\n+        return XryKey.contains(pair.getKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNzUxOQ=="}, "originalCommit": {"oid": "13bc5f4abe13512b6ed8c74a2d5a7998d6c03054"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTIyODQ1OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourceprocessors/xry/XRYUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzowNzoyM1rOF8wSww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0MzoxMlrOF_BQTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MDExNQ==", "bodyText": "None of these Util methods are being used outside this package, at least not at the moment.\nLeave them with package access instead of public?", "url": "https://github.com/sleuthkit/autopsy/pull/5712#discussion_r399250115", "createdAt": "2020-03-27T13:07:23Z", "author": {"login": "raman-bt"}, "path": "Core/src/org/sleuthkit/autopsy/datasourceprocessors/xry/XRYUtils.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2019-2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourceprocessors.xry;\n+\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.temporal.TemporalAccessor;\n+import java.time.temporal.TemporalQueries;\n+import org.sleuthkit.datamodel.CommunicationsUtils;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Common utility methods shared among all XRY parser implementations.\n+ */\n+public final class XRYUtils {\n+\n+    // Pattern is in reverse due to a Java 8 bug, see calculateSecondsSinceEpoch()\n+    // function for more details.\n+    private static final DateTimeFormatter DATE_TIME_PARSER\n+            = DateTimeFormatter.ofPattern(\"[(XXX) ][O ][(O) ]a h:m:s M/d/y\");\n+\n+    private static final String DEVICE_LOCALE = \"(device)\";\n+    private static final String NETWORK_LOCALE = \"(network)\";\n+\n+    public static boolean isPhoneValid(String phoneNumber) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a58a6083512750a9a8f8a52b27d08dbb8c33ed"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNTE2Ng==", "bodyText": "Sounds good.", "url": "https://github.com/sleuthkit/autopsy/pull/5712#discussion_r401625166", "createdAt": "2020-04-01T13:43:12Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/datasourceprocessors/xry/XRYUtils.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2019-2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourceprocessors.xry;\n+\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.temporal.TemporalAccessor;\n+import java.time.temporal.TemporalQueries;\n+import org.sleuthkit.datamodel.CommunicationsUtils;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Common utility methods shared among all XRY parser implementations.\n+ */\n+public final class XRYUtils {\n+\n+    // Pattern is in reverse due to a Java 8 bug, see calculateSecondsSinceEpoch()\n+    // function for more details.\n+    private static final DateTimeFormatter DATE_TIME_PARSER\n+            = DateTimeFormatter.ofPattern(\"[(XXX) ][O ][(O) ]a h:m:s M/d/y\");\n+\n+    private static final String DEVICE_LOCALE = \"(device)\";\n+    private static final String NETWORK_LOCALE = \"(network)\";\n+\n+    public static boolean isPhoneValid(String phoneNumber) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MDExNQ=="}, "originalCommit": {"oid": "88a58a6083512750a9a8f8a52b27d08dbb8c33ed"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 655, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}