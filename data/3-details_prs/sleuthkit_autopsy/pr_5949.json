{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMzE0OTQ0", "number": 5949, "title": "6410 contactbook personas", "bodyText": "", "createdAt": "2020-06-08T18:24:38Z", "url": "https://github.com/sleuthkit/autopsy/pull/5949", "merged": true, "mergeCommit": {"oid": "5591c61afb4143a44a031510ed727300b8f4dae8"}, "closed": true, "closedAt": "2020-06-11T16:38:10Z", "author": {"login": "raman-bt"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpUh_GAH2gAyNDMxMzE0OTQ0OmMxNzI1ZmRiNTNjYzY3M2MyM2FlNzJmYTExZTQ1NjUzMTIwYmQ5MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqQ1XGAFqTQyOTA4NDQ0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c1725fdb53cc673c23ae72fa11e45653120bd925", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/c1725fdb53cc673c23ae72fa11e45653120bd925", "committedDate": "2020-06-08T18:12:12Z", "message": "6410: Add personas and buttons to Contact artifact viewer."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "417105694fe0f1d5048fe63f5e4944e3a2d9b222", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/417105694fe0f1d5048fe63f5e4944e3a2d9b222", "committedDate": "2020-06-08T18:23:15Z", "message": "Merge branch 'develop' of https://github.com/sleuthkit/autopsy into 6410-contactbook-personas\n\n# Conflicts:\n#\tCore/src/org/sleuthkit/autopsy/centralrepository/persona/PersonaDetailsDialog.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1844ab646f34a2c2b163abfc110fad4f93c61258", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/1844ab646f34a2c2b163abfc110fad4f93c61258", "committedDate": "2020-06-08T20:25:55Z", "message": "Addressed Codacy comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/551dd2016c9c69517d4dd08e70d1aa5a8f3646dc", "committedDate": "2020-06-08T23:38:14Z", "message": "Fix the dialog pre-population."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3Mzk5MDk4", "url": "https://github.com/sleuthkit/autopsy/pull/5949#pullrequestreview-427399098", "createdAt": "2020-06-09T17:45:18Z", "commit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo0NToxOFrOGhViBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODo0NDoxOVrOGhXmkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwODk2NA==", "bodyText": "I would add a call to repaint here.", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437608964", "createdAt": "2020-06-09T17:45:18Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -305,16 +396,410 @@ private void updateSection(List<BlackboardAttribute> sectionAttributesList, JLab\n         sectionPanel.revalidate();\n     }\n \n+    /**\n+     * Kicks of a search for personas, based in the list of attributes.\n+     * \n+     * @param accountAttributesList a list of account identifying attributes.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_searching= Searching...\"\n+    })\n+    private void initiatePersonasSearch(List<BlackboardAttribute> accountAttributesList) throws CentralRepoException {\n+        \n+        // create a Gridbag layout\n+        // create a gridbag layout to show each participant on one line\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+        \n+        // Add a Persona Name label \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        \n+        javax.swing.Box.Filler filler1 = this.createFiller(5, 0);\n+        personasPanel.add(filler1, constraints);\n+\n+        constraints.gridx++;\n+        javax.swing.JLabel primaryPersonaNameLabel = new javax.swing.JLabel();\n+        primaryPersonaNameLabel.setText(Bundle.ContactArtifactViewer_persona_searching());\n+        gridBagLayout.setConstraints(primaryPersonaNameLabel, constraints);\n+        personasPanel.add(primaryPersonaNameLabel);\n+        \n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.revalidate();\n+        \n+        // kick off a background task to serach for personas for the contact\n+        ContactPersonaSearcherTask personaSearchTask = new ContactPersonaSearcherTask(accountAttributesList);\n+        personaSearchTask.execute();\n+     \n+    }\n+    \n+    /**\n+     * Updates the Persona panel with the gathered persona information.\n+     */\n+    private void updatePersonasPanel() {\n+        // Clear out the panel\n+        personasPanel.removeAll();\n+\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+\n+        if (contactUniquePersonasMap.isEmpty()) {\n+            showPersona(null, Collections.emptyList(), gridBagLayout, constraints);\n+        } else {\n+            for (Map.Entry<Persona, ArrayList<CentralRepoAccount> > entry : contactUniquePersonasMap.entrySet()) {\n+                List<CentralRepoAccount> missingAccounts = new ArrayList<>();\n+                ArrayList<CentralRepoAccount> personaAccounts = entry.getValue();\n+                \n+                // create a list of accounts missing from this persona\n+                for (CentralRepoAccount account : contactUniqueAccountsList) {\n+                    if (personaAccounts.contains(account) == false) {\n+                        missingAccounts.add(account);\n+                    }\n+                }\n+                 \n+                showPersona(entry.getKey(), missingAccounts, gridBagLayout, constraints);\n+                constraints.gridy += 2;\n+            }\n+        }\n+\n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.setSize(personasPanel.getPreferredSize());\n+        personasPanel.revalidate();\n+    }\n+    \n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_label= Persona: \",\n+        \"ContactArtifactViewer_persona_text_none=No Persona\",\n+        \"ContactArtifactViewer_persona_button_view=View\",\n+        \"ContactArtifactViewer_persona_button_new=New\",\n+        \"ContactArtifactViewer_missing_account_label=Missing Account: \"\n+    })\n+    \n+    \n+    /**\n+     * Displays the given persona in the persona panel.\n+     * \n+     * @param persona Persona to display.\n+     * @param missingAccountsList List of accounts this persona may be missing.\n+     * @param gridBagLayout Layout to use.\n+     * @param constraints layout constraints.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    private void showPersona(Persona persona, List<CentralRepoAccount> missingAccountsList, GridBagLayout gridBagLayout, GridBagConstraints constraints  ) {\n+        \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        constraints.gridx = 0;\n+\n+        javax.swing.Box.Filler filler1 = createFiller(5, 0 );\n+        gridBagLayout.setConstraints(filler1, constraints);\n+        personasPanel.add(filler1);\n+\n+         // Add a \"Persona: \" label\n+        constraints.gridx++;\n+        javax.swing.JLabel personaLabel = new javax.swing.JLabel();\n+        personaLabel.setText(Bundle.ContactArtifactViewer_persona_label());\n+        gridBagLayout.setConstraints(personaLabel, constraints);\n+        personasPanel.add(personaLabel);\n+        \n+        javax.swing.JLabel personaNameLabel = new javax.swing.JLabel();\n+        javax.swing.JButton personaButton = new javax.swing.JButton();\n+        \n+        String personaName;\n+        String personaButtonText;\n+        ActionListener personaButtonListener;\n+        \n+        if (persona != null) {\n+            personaName = persona.getName();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_view();\n+            personaButtonListener = new ViewPersonaButtonListener(persona);\n+        } else {\n+            personaName = Bundle.ContactArtifactViewer_persona_text_none();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_new();\n+            personaButtonListener = new CreatePersonaButtonListener(new PersonaUIComponents(personaNameLabel, personaButton));\n+        }\n+        \n+         // Add the label for persona name, \n+        constraints.gridx++;\n+        personaNameLabel.setText(personaName);\n+        gridBagLayout.setConstraints(personaNameLabel, constraints);\n+        personasPanel.add(personaNameLabel);\n+        \n+        constraints.gridx++;\n+        personasPanel.add(createFiller(5, 0), constraints);\n+          \n+        // Add a Persona action button\n+        constraints.gridx++;\n+        personaButton.setText(personaButtonText);\n+        personaButton.addActionListener(personaButtonListener);\n+        \n+ \n+        // no top inset of the button, in order to center align with the labels.\n+        constraints.insets = new java.awt.Insets(0, 0, 0, 0);\n+   \n+        gridBagLayout.setConstraints(personaButton, constraints);\n+        personasPanel.add(personaButton);\n+\n+        // restore normal inset\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+          \n+       \n+        // show missing accounts.\n+        for (CentralRepoAccount missingAccount: missingAccountsList) {\n+             constraints.weightx = 0;\n+             constraints.gridx = 0;\n+             constraints.gridy++;\n+            \n+            // Add a \"Missing Account: \" label\n+            constraints.gridx += 2; // Ident \n+            javax.swing.JLabel missingAccountLabel = new javax.swing.JLabel();\n+            missingAccountLabel.setText(Bundle.ContactArtifactViewer_missing_account_label());\n+            gridBagLayout.setConstraints(missingAccountLabel, constraints);\n+            personasPanel.add(missingAccountLabel);\n+        \n+             // Add the label for account id, \n+            constraints.gridx++;\n+            javax.swing.JLabel missingAccountIdentifierLabel = new javax.swing.JLabel();\n+            missingAccountIdentifierLabel.setText(missingAccount.getIdentifier());\n+            gridBagLayout.setConstraints(missingAccountIdentifierLabel, constraints);\n+            personasPanel.add(missingAccountIdentifierLabel);\n+        }\n+    }\n+    \n+    \n+    private javax.swing.Box.Filler createFiller(int width, int height ) {\n+        return new javax.swing.Box.Filler(new Dimension(width, height), new Dimension(width,height), new Dimension(width, height));\n+    }\n+    \n+   /**\n+     * Thread to search for a personas for all account identifier attributes for a contact.\n+     */\n+    private class ContactPersonaSearcherTask extends SwingWorker<Map<Persona, ArrayList<CentralRepoAccount>>, Void> {\n+\n+        private final List<BlackboardAttribute> accountAttributesList;\n+        private final List<CentralRepoAccount> uniqueAccountsList = new ArrayList<>();\n+       \n+        \n+        ContactPersonaSearcherTask(List<BlackboardAttribute> accountAttributesList) {\n+            this.accountAttributesList = accountAttributesList;\n+        }\n+\n+        \n+        @Override\n+        protected Map<Persona, ArrayList<CentralRepoAccount>> doInBackground() throws Exception {\n+\n+            Map<Persona, ArrayList<CentralRepoAccount>> uniquePersonas = new HashMap<>();\n+\n+            for (BlackboardAttribute bba : accountAttributesList) {\n+\n+                // Get account, add to accounts list\n+                Collection<Persona> personas;\n+\n+                Collection<CentralRepoAccount> accountCandidates\n+                        = CentralRepoAccount.getAccountsWithIdentifier(bba.getValueString());\n+\n+                if (accountCandidates.isEmpty() == false) {\n+                    CentralRepoAccount account = accountCandidates.iterator().next();\n+                    if (uniqueAccountsList.contains(account) == false) {\n+                        uniqueAccountsList.add(account);\n+                    }\n+\n+                    // get personas for the account\n+                    personas = PersonaAccount.getPersonaAccountsForAccount(account.getId())\n+                            .stream()\n+                            .map(PersonaAccount::getPersona)\n+                            .collect(Collectors.toList());\n+\n+                    // make a list of unique personas, along with all their accounts\n+                    for (Persona persona : personas) {\n+                        if (uniquePersonas.containsKey(persona) == false) {\n+                            Collection<CentralRepoAccount> accounts = persona.getPersonaAccounts()\n+                                    .stream()\n+                                    .map(PersonaAccount::getAccount)\n+                                    .collect(Collectors.toList());\n+\n+                            ArrayList<CentralRepoAccount> personaAccountsList = new ArrayList<>(accounts);\n+                            uniquePersonas.put(persona, personaAccountsList);\n+                        }\n+                    }\n+                }\n+\n+            }\n+\n+            return uniquePersonas;\n+        }\n+\n+\n+        @Override\n+        protected void done() {\n+           \n+            Map<Persona, ArrayList<CentralRepoAccount>> personasMap;\n+            try {\n+                personasMap = super.get();\n+\n+                if (this.isCancelled()) {\n+                    return;\n+                }\n+                \n+                contactUniquePersonasMap.clear();\n+                contactUniquePersonasMap.putAll(personasMap);\n+                contactUniqueAccountsList.clear();\n+                contactUniqueAccountsList.addAll(uniqueAccountsList);\n+\n+                updatePersonasPanel();\n+               \n+            } catch (CancellationException ex) {\n+                logger.log(Level.INFO, \"Persona searching was canceled.\"); //NON-NLS\n+            } catch (InterruptedException ex) {\n+                logger.log(Level.INFO, \"Persona searching was interrupted.\"); //NON-NLS\n+            } catch (ExecutionException ex) {\n+                logger.log(Level.SEVERE, \"Fatal error during Persona search.\", ex); //NON-NLS\n+            }\n+        \n+        }\n+    } \n+    \n+    /**\n+     * A wrapper class that bags the UI components that need to be updated when \n+     * a persona search task or a create dialog returns.\n+     */\n+    private class PersonaUIComponents {\n+        \n+        private final JLabel personaNameLabel;\n+        private final JButton personaActionButton;\n+    \n+        PersonaUIComponents(JLabel personaNameLabel, JButton personaActionButton) {\n+            this.personaNameLabel = personaNameLabel;\n+            this.personaActionButton = personaActionButton;\n+        }\n+\n+        public JLabel getPersonaNameLabel() {\n+            return personaNameLabel;\n+        }\n+\n+        public JButton getPersonaActionButton() {\n+            return personaActionButton;\n+        }\n+    }\n+    \n+     /**\n+     * Action listener for Create persona button.\n+     */\n+    private class CreatePersonaButtonListener implements ActionListener {\n+\n+        private final PersonaUIComponents personaUIComponents;\n+\n+        CreatePersonaButtonListener(PersonaUIComponents personaUIComponents) {\n+            this.personaUIComponents = personaUIComponents;\n+        }\n+         \n+        @Override\n+        public void actionPerformed(java.awt.event.ActionEvent evt) {\n+            // Launch the Persona Create dialog - do not display immediately\n+            PersonaDetailsDialog createPersonaDialog = new PersonaDetailsDialog(ContactArtifactViewer.this,\n+                    PersonaDetailsMode.CREATE, null, new PersonaCreateCallbackImpl(personaUIComponents), false);\n+\n+            // Pre populate the persona name and accounts if we have them.\n+            PersonaDetailsPanel personaPanel = createPersonaDialog.getDetailsPanel();\n+            \n+            if (contactName != null) {\n+                personaPanel.setPersonaName(contactName);\n+            }\n+\n+            // pass the list of accounts to the dialog\n+            for (CentralRepoAccount account : contactUniqueAccountsList) {\n+                personaPanel.addAccount(account, \"Account found in Contact artifact.\", Persona.Confidence.UNKNOWN);\n+            }\n+\n+            // display the dialog now\n+            createPersonaDialog.display();\n+        }\n+    }\n+        \n+    /**\n+     * Action listener for View persona button.\n+     */\n+    private class ViewPersonaButtonListener implements ActionListener {\n+\n+        private final Persona persona;\n+\n+        ViewPersonaButtonListener(Persona persona) {\n+            this.persona = persona;\n+        }\n+\n+        @Override\n+        public void actionPerformed(java.awt.event.ActionEvent evt) {\n+            new PersonaDetailsDialog(ContactArtifactViewer.this,\n+                    PersonaDetailsMode.VIEW, persona, new PersonaViewCallbackImpl());\n+        }\n+    }\n+    \n+    /**\n+     * Callback method for the create mode of the PersonaDetailsDialog\n+     */\n+    class PersonaCreateCallbackImpl implements PersonaDetailsDialogCallback {\n+        \n+        private final PersonaUIComponents personaUIComponents;\n+        PersonaCreateCallbackImpl(PersonaUIComponents personaUIComponents) {\n+            this.personaUIComponents = personaUIComponents;\n+        }\n+        \n+        @Override\n+        public void callback(Persona persona) {\n+            JButton personaButton = personaUIComponents.getPersonaActionButton();\n+            if (persona != null) {\n+                // update the persona name label with newly created persona, \n+                // and change the button to a \"View\" button\n+                personaUIComponents.getPersonaNameLabel().setText(persona.getName());\n+                personaUIComponents.getPersonaActionButton().setText(Bundle.ContactArtifactViewer_persona_button_view());\n+                \n+                // replace action listener with a View button listener\n+                for (ActionListener act : personaButton.getActionListeners()) {\n+                    personaButton.removeActionListener(act);\n+                }\n+                personaButton.addActionListener(new ViewPersonaButtonListener (persona));\n+                \n+            }\n+           \n+            personaButton.getParent().revalidate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 581}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwOTIzMw==", "bodyText": "Missing method header.", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437609233", "createdAt": "2020-06-09T17:45:44Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -305,16 +396,410 @@ private void updateSection(List<BlackboardAttribute> sectionAttributesList, JLab\n         sectionPanel.revalidate();\n     }\n \n+    /**\n+     * Kicks of a search for personas, based in the list of attributes.\n+     * \n+     * @param accountAttributesList a list of account identifying attributes.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_searching= Searching...\"\n+    })\n+    private void initiatePersonasSearch(List<BlackboardAttribute> accountAttributesList) throws CentralRepoException {\n+        \n+        // create a Gridbag layout\n+        // create a gridbag layout to show each participant on one line\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+        \n+        // Add a Persona Name label \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        \n+        javax.swing.Box.Filler filler1 = this.createFiller(5, 0);\n+        personasPanel.add(filler1, constraints);\n+\n+        constraints.gridx++;\n+        javax.swing.JLabel primaryPersonaNameLabel = new javax.swing.JLabel();\n+        primaryPersonaNameLabel.setText(Bundle.ContactArtifactViewer_persona_searching());\n+        gridBagLayout.setConstraints(primaryPersonaNameLabel, constraints);\n+        personasPanel.add(primaryPersonaNameLabel);\n+        \n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.revalidate();\n+        \n+        // kick off a background task to serach for personas for the contact\n+        ContactPersonaSearcherTask personaSearchTask = new ContactPersonaSearcherTask(accountAttributesList);\n+        personaSearchTask.execute();\n+     \n+    }\n+    \n+    /**\n+     * Updates the Persona panel with the gathered persona information.\n+     */\n+    private void updatePersonasPanel() {\n+        // Clear out the panel\n+        personasPanel.removeAll();\n+\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+\n+        if (contactUniquePersonasMap.isEmpty()) {\n+            showPersona(null, Collections.emptyList(), gridBagLayout, constraints);\n+        } else {\n+            for (Map.Entry<Persona, ArrayList<CentralRepoAccount> > entry : contactUniquePersonasMap.entrySet()) {\n+                List<CentralRepoAccount> missingAccounts = new ArrayList<>();\n+                ArrayList<CentralRepoAccount> personaAccounts = entry.getValue();\n+                \n+                // create a list of accounts missing from this persona\n+                for (CentralRepoAccount account : contactUniqueAccountsList) {\n+                    if (personaAccounts.contains(account) == false) {\n+                        missingAccounts.add(account);\n+                    }\n+                }\n+                 \n+                showPersona(entry.getKey(), missingAccounts, gridBagLayout, constraints);\n+                constraints.gridy += 2;\n+            }\n+        }\n+\n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.setSize(personasPanel.getPreferredSize());\n+        personasPanel.revalidate();\n+    }\n+    \n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_label= Persona: \",\n+        \"ContactArtifactViewer_persona_text_none=No Persona\",\n+        \"ContactArtifactViewer_persona_button_view=View\",\n+        \"ContactArtifactViewer_persona_button_new=New\",\n+        \"ContactArtifactViewer_missing_account_label=Missing Account: \"\n+    })\n+    \n+    \n+    /**\n+     * Displays the given persona in the persona panel.\n+     * \n+     * @param persona Persona to display.\n+     * @param missingAccountsList List of accounts this persona may be missing.\n+     * @param gridBagLayout Layout to use.\n+     * @param constraints layout constraints.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    private void showPersona(Persona persona, List<CentralRepoAccount> missingAccountsList, GridBagLayout gridBagLayout, GridBagConstraints constraints  ) {\n+        \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        constraints.gridx = 0;\n+\n+        javax.swing.Box.Filler filler1 = createFiller(5, 0 );\n+        gridBagLayout.setConstraints(filler1, constraints);\n+        personasPanel.add(filler1);\n+\n+         // Add a \"Persona: \" label\n+        constraints.gridx++;\n+        javax.swing.JLabel personaLabel = new javax.swing.JLabel();\n+        personaLabel.setText(Bundle.ContactArtifactViewer_persona_label());\n+        gridBagLayout.setConstraints(personaLabel, constraints);\n+        personasPanel.add(personaLabel);\n+        \n+        javax.swing.JLabel personaNameLabel = new javax.swing.JLabel();\n+        javax.swing.JButton personaButton = new javax.swing.JButton();\n+        \n+        String personaName;\n+        String personaButtonText;\n+        ActionListener personaButtonListener;\n+        \n+        if (persona != null) {\n+            personaName = persona.getName();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_view();\n+            personaButtonListener = new ViewPersonaButtonListener(persona);\n+        } else {\n+            personaName = Bundle.ContactArtifactViewer_persona_text_none();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_new();\n+            personaButtonListener = new CreatePersonaButtonListener(new PersonaUIComponents(personaNameLabel, personaButton));\n+        }\n+        \n+         // Add the label for persona name, \n+        constraints.gridx++;\n+        personaNameLabel.setText(personaName);\n+        gridBagLayout.setConstraints(personaNameLabel, constraints);\n+        personasPanel.add(personaNameLabel);\n+        \n+        constraints.gridx++;\n+        personasPanel.add(createFiller(5, 0), constraints);\n+          \n+        // Add a Persona action button\n+        constraints.gridx++;\n+        personaButton.setText(personaButtonText);\n+        personaButton.addActionListener(personaButtonListener);\n+        \n+ \n+        // no top inset of the button, in order to center align with the labels.\n+        constraints.insets = new java.awt.Insets(0, 0, 0, 0);\n+   \n+        gridBagLayout.setConstraints(personaButton, constraints);\n+        personasPanel.add(personaButton);\n+\n+        // restore normal inset\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+          \n+       \n+        // show missing accounts.\n+        for (CentralRepoAccount missingAccount: missingAccountsList) {\n+             constraints.weightx = 0;\n+             constraints.gridx = 0;\n+             constraints.gridy++;\n+            \n+            // Add a \"Missing Account: \" label\n+            constraints.gridx += 2; // Ident \n+            javax.swing.JLabel missingAccountLabel = new javax.swing.JLabel();\n+            missingAccountLabel.setText(Bundle.ContactArtifactViewer_missing_account_label());\n+            gridBagLayout.setConstraints(missingAccountLabel, constraints);\n+            personasPanel.add(missingAccountLabel);\n+        \n+             // Add the label for account id, \n+            constraints.gridx++;\n+            javax.swing.JLabel missingAccountIdentifierLabel = new javax.swing.JLabel();\n+            missingAccountIdentifierLabel.setText(missingAccount.getIdentifier());\n+            gridBagLayout.setConstraints(missingAccountIdentifierLabel, constraints);\n+            personasPanel.add(missingAccountIdentifierLabel);\n+        }\n+    }\n+    \n+    \n+    private javax.swing.Box.Filler createFiller(int width, int height ) {\n+        return new javax.swing.Box.Filler(new Dimension(width, height), new Dimension(width,height), new Dimension(width, height));\n+    }\n+    \n+   /**\n+     * Thread to search for a personas for all account identifier attributes for a contact.\n+     */\n+    private class ContactPersonaSearcherTask extends SwingWorker<Map<Persona, ArrayList<CentralRepoAccount>>, Void> {\n+\n+        private final List<BlackboardAttribute> accountAttributesList;\n+        private final List<CentralRepoAccount> uniqueAccountsList = new ArrayList<>();\n+       \n+        \n+        ContactPersonaSearcherTask(List<BlackboardAttribute> accountAttributesList) {\n+            this.accountAttributesList = accountAttributesList;\n+        }\n+\n+        \n+        @Override\n+        protected Map<Persona, ArrayList<CentralRepoAccount>> doInBackground() throws Exception {\n+\n+            Map<Persona, ArrayList<CentralRepoAccount>> uniquePersonas = new HashMap<>();\n+\n+            for (BlackboardAttribute bba : accountAttributesList) {\n+\n+                // Get account, add to accounts list\n+                Collection<Persona> personas;\n+\n+                Collection<CentralRepoAccount> accountCandidates\n+                        = CentralRepoAccount.getAccountsWithIdentifier(bba.getValueString());\n+\n+                if (accountCandidates.isEmpty() == false) {\n+                    CentralRepoAccount account = accountCandidates.iterator().next();\n+                    if (uniqueAccountsList.contains(account) == false) {\n+                        uniqueAccountsList.add(account);\n+                    }\n+\n+                    // get personas for the account\n+                    personas = PersonaAccount.getPersonaAccountsForAccount(account.getId())\n+                            .stream()\n+                            .map(PersonaAccount::getPersona)\n+                            .collect(Collectors.toList());\n+\n+                    // make a list of unique personas, along with all their accounts\n+                    for (Persona persona : personas) {\n+                        if (uniquePersonas.containsKey(persona) == false) {\n+                            Collection<CentralRepoAccount> accounts = persona.getPersonaAccounts()\n+                                    .stream()\n+                                    .map(PersonaAccount::getAccount)\n+                                    .collect(Collectors.toList());\n+\n+                            ArrayList<CentralRepoAccount> personaAccountsList = new ArrayList<>(accounts);\n+                            uniquePersonas.put(persona, personaAccountsList);\n+                        }\n+                    }\n+                }\n+\n+            }\n+\n+            return uniquePersonas;\n+        }\n+\n+\n+        @Override\n+        protected void done() {\n+           \n+            Map<Persona, ArrayList<CentralRepoAccount>> personasMap;\n+            try {\n+                personasMap = super.get();\n+\n+                if (this.isCancelled()) {\n+                    return;\n+                }\n+                \n+                contactUniquePersonasMap.clear();\n+                contactUniquePersonasMap.putAll(personasMap);\n+                contactUniqueAccountsList.clear();\n+                contactUniqueAccountsList.addAll(uniqueAccountsList);\n+\n+                updatePersonasPanel();\n+               \n+            } catch (CancellationException ex) {\n+                logger.log(Level.INFO, \"Persona searching was canceled.\"); //NON-NLS\n+            } catch (InterruptedException ex) {\n+                logger.log(Level.INFO, \"Persona searching was interrupted.\"); //NON-NLS\n+            } catch (ExecutionException ex) {\n+                logger.log(Level.SEVERE, \"Fatal error during Persona search.\", ex); //NON-NLS\n+            }\n+        \n+        }\n+    } \n+    \n+    /**\n+     * A wrapper class that bags the UI components that need to be updated when \n+     * a persona search task or a create dialog returns.\n+     */\n+    private class PersonaUIComponents {\n+        \n+        private final JLabel personaNameLabel;\n+        private final JButton personaActionButton;\n+    \n+        PersonaUIComponents(JLabel personaNameLabel, JButton personaActionButton) {\n+            this.personaNameLabel = personaNameLabel;\n+            this.personaActionButton = personaActionButton;\n+        }\n+\n+        public JLabel getPersonaNameLabel() {\n+            return personaNameLabel;\n+        }\n+\n+        public JButton getPersonaActionButton() {\n+            return personaActionButton;\n+        }\n+    }\n+    \n+     /**\n+     * Action listener for Create persona button.\n+     */\n+    private class CreatePersonaButtonListener implements ActionListener {\n+\n+        private final PersonaUIComponents personaUIComponents;\n+\n+        CreatePersonaButtonListener(PersonaUIComponents personaUIComponents) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 509}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwOTYzNA==", "bodyText": "Method header.", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437609634", "createdAt": "2020-06-09T17:46:23Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -305,16 +396,410 @@ private void updateSection(List<BlackboardAttribute> sectionAttributesList, JLab\n         sectionPanel.revalidate();\n     }\n \n+    /**\n+     * Kicks of a search for personas, based in the list of attributes.\n+     * \n+     * @param accountAttributesList a list of account identifying attributes.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_searching= Searching...\"\n+    })\n+    private void initiatePersonasSearch(List<BlackboardAttribute> accountAttributesList) throws CentralRepoException {\n+        \n+        // create a Gridbag layout\n+        // create a gridbag layout to show each participant on one line\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+        \n+        // Add a Persona Name label \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        \n+        javax.swing.Box.Filler filler1 = this.createFiller(5, 0);\n+        personasPanel.add(filler1, constraints);\n+\n+        constraints.gridx++;\n+        javax.swing.JLabel primaryPersonaNameLabel = new javax.swing.JLabel();\n+        primaryPersonaNameLabel.setText(Bundle.ContactArtifactViewer_persona_searching());\n+        gridBagLayout.setConstraints(primaryPersonaNameLabel, constraints);\n+        personasPanel.add(primaryPersonaNameLabel);\n+        \n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.revalidate();\n+        \n+        // kick off a background task to serach for personas for the contact\n+        ContactPersonaSearcherTask personaSearchTask = new ContactPersonaSearcherTask(accountAttributesList);\n+        personaSearchTask.execute();\n+     \n+    }\n+    \n+    /**\n+     * Updates the Persona panel with the gathered persona information.\n+     */\n+    private void updatePersonasPanel() {\n+        // Clear out the panel\n+        personasPanel.removeAll();\n+\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+\n+        if (contactUniquePersonasMap.isEmpty()) {\n+            showPersona(null, Collections.emptyList(), gridBagLayout, constraints);\n+        } else {\n+            for (Map.Entry<Persona, ArrayList<CentralRepoAccount> > entry : contactUniquePersonasMap.entrySet()) {\n+                List<CentralRepoAccount> missingAccounts = new ArrayList<>();\n+                ArrayList<CentralRepoAccount> personaAccounts = entry.getValue();\n+                \n+                // create a list of accounts missing from this persona\n+                for (CentralRepoAccount account : contactUniqueAccountsList) {\n+                    if (personaAccounts.contains(account) == false) {\n+                        missingAccounts.add(account);\n+                    }\n+                }\n+                 \n+                showPersona(entry.getKey(), missingAccounts, gridBagLayout, constraints);\n+                constraints.gridy += 2;\n+            }\n+        }\n+\n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.setSize(personasPanel.getPreferredSize());\n+        personasPanel.revalidate();\n+    }\n+    \n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_label= Persona: \",\n+        \"ContactArtifactViewer_persona_text_none=No Persona\",\n+        \"ContactArtifactViewer_persona_button_view=View\",\n+        \"ContactArtifactViewer_persona_button_new=New\",\n+        \"ContactArtifactViewer_missing_account_label=Missing Account: \"\n+    })\n+    \n+    \n+    /**\n+     * Displays the given persona in the persona panel.\n+     * \n+     * @param persona Persona to display.\n+     * @param missingAccountsList List of accounts this persona may be missing.\n+     * @param gridBagLayout Layout to use.\n+     * @param constraints layout constraints.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    private void showPersona(Persona persona, List<CentralRepoAccount> missingAccountsList, GridBagLayout gridBagLayout, GridBagConstraints constraints  ) {\n+        \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        constraints.gridx = 0;\n+\n+        javax.swing.Box.Filler filler1 = createFiller(5, 0 );\n+        gridBagLayout.setConstraints(filler1, constraints);\n+        personasPanel.add(filler1);\n+\n+         // Add a \"Persona: \" label\n+        constraints.gridx++;\n+        javax.swing.JLabel personaLabel = new javax.swing.JLabel();\n+        personaLabel.setText(Bundle.ContactArtifactViewer_persona_label());\n+        gridBagLayout.setConstraints(personaLabel, constraints);\n+        personasPanel.add(personaLabel);\n+        \n+        javax.swing.JLabel personaNameLabel = new javax.swing.JLabel();\n+        javax.swing.JButton personaButton = new javax.swing.JButton();\n+        \n+        String personaName;\n+        String personaButtonText;\n+        ActionListener personaButtonListener;\n+        \n+        if (persona != null) {\n+            personaName = persona.getName();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_view();\n+            personaButtonListener = new ViewPersonaButtonListener(persona);\n+        } else {\n+            personaName = Bundle.ContactArtifactViewer_persona_text_none();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_new();\n+            personaButtonListener = new CreatePersonaButtonListener(new PersonaUIComponents(personaNameLabel, personaButton));\n+        }\n+        \n+         // Add the label for persona name, \n+        constraints.gridx++;\n+        personaNameLabel.setText(personaName);\n+        gridBagLayout.setConstraints(personaNameLabel, constraints);\n+        personasPanel.add(personaNameLabel);\n+        \n+        constraints.gridx++;\n+        personasPanel.add(createFiller(5, 0), constraints);\n+          \n+        // Add a Persona action button\n+        constraints.gridx++;\n+        personaButton.setText(personaButtonText);\n+        personaButton.addActionListener(personaButtonListener);\n+        \n+ \n+        // no top inset of the button, in order to center align with the labels.\n+        constraints.insets = new java.awt.Insets(0, 0, 0, 0);\n+   \n+        gridBagLayout.setConstraints(personaButton, constraints);\n+        personasPanel.add(personaButton);\n+\n+        // restore normal inset\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+          \n+       \n+        // show missing accounts.\n+        for (CentralRepoAccount missingAccount: missingAccountsList) {\n+             constraints.weightx = 0;\n+             constraints.gridx = 0;\n+             constraints.gridy++;\n+            \n+            // Add a \"Missing Account: \" label\n+            constraints.gridx += 2; // Ident \n+            javax.swing.JLabel missingAccountLabel = new javax.swing.JLabel();\n+            missingAccountLabel.setText(Bundle.ContactArtifactViewer_missing_account_label());\n+            gridBagLayout.setConstraints(missingAccountLabel, constraints);\n+            personasPanel.add(missingAccountLabel);\n+        \n+             // Add the label for account id, \n+            constraints.gridx++;\n+            javax.swing.JLabel missingAccountIdentifierLabel = new javax.swing.JLabel();\n+            missingAccountIdentifierLabel.setText(missingAccount.getIdentifier());\n+            gridBagLayout.setConstraints(missingAccountIdentifierLabel, constraints);\n+            personasPanel.add(missingAccountIdentifierLabel);\n+        }\n+    }\n+    \n+    \n+    private javax.swing.Box.Filler createFiller(int width, int height ) {\n+        return new javax.swing.Box.Filler(new Dimension(width, height), new Dimension(width,height), new Dimension(width, height));\n+    }\n+    \n+   /**\n+     * Thread to search for a personas for all account identifier attributes for a contact.\n+     */\n+    private class ContactPersonaSearcherTask extends SwingWorker<Map<Persona, ArrayList<CentralRepoAccount>>, Void> {\n+\n+        private final List<BlackboardAttribute> accountAttributesList;\n+        private final List<CentralRepoAccount> uniqueAccountsList = new ArrayList<>();\n+       \n+        \n+        ContactPersonaSearcherTask(List<BlackboardAttribute> accountAttributesList) {\n+            this.accountAttributesList = accountAttributesList;\n+        }\n+\n+        \n+        @Override\n+        protected Map<Persona, ArrayList<CentralRepoAccount>> doInBackground() throws Exception {\n+\n+            Map<Persona, ArrayList<CentralRepoAccount>> uniquePersonas = new HashMap<>();\n+\n+            for (BlackboardAttribute bba : accountAttributesList) {\n+\n+                // Get account, add to accounts list\n+                Collection<Persona> personas;\n+\n+                Collection<CentralRepoAccount> accountCandidates\n+                        = CentralRepoAccount.getAccountsWithIdentifier(bba.getValueString());\n+\n+                if (accountCandidates.isEmpty() == false) {\n+                    CentralRepoAccount account = accountCandidates.iterator().next();\n+                    if (uniqueAccountsList.contains(account) == false) {\n+                        uniqueAccountsList.add(account);\n+                    }\n+\n+                    // get personas for the account\n+                    personas = PersonaAccount.getPersonaAccountsForAccount(account.getId())\n+                            .stream()\n+                            .map(PersonaAccount::getPersona)\n+                            .collect(Collectors.toList());\n+\n+                    // make a list of unique personas, along with all their accounts\n+                    for (Persona persona : personas) {\n+                        if (uniquePersonas.containsKey(persona) == false) {\n+                            Collection<CentralRepoAccount> accounts = persona.getPersonaAccounts()\n+                                    .stream()\n+                                    .map(PersonaAccount::getAccount)\n+                                    .collect(Collectors.toList());\n+\n+                            ArrayList<CentralRepoAccount> personaAccountsList = new ArrayList<>(accounts);\n+                            uniquePersonas.put(persona, personaAccountsList);\n+                        }\n+                    }\n+                }\n+\n+            }\n+\n+            return uniquePersonas;\n+        }\n+\n+\n+        @Override\n+        protected void done() {\n+           \n+            Map<Persona, ArrayList<CentralRepoAccount>> personasMap;\n+            try {\n+                personasMap = super.get();\n+\n+                if (this.isCancelled()) {\n+                    return;\n+                }\n+                \n+                contactUniquePersonasMap.clear();\n+                contactUniquePersonasMap.putAll(personasMap);\n+                contactUniqueAccountsList.clear();\n+                contactUniqueAccountsList.addAll(uniqueAccountsList);\n+\n+                updatePersonasPanel();\n+               \n+            } catch (CancellationException ex) {\n+                logger.log(Level.INFO, \"Persona searching was canceled.\"); //NON-NLS\n+            } catch (InterruptedException ex) {\n+                logger.log(Level.INFO, \"Persona searching was interrupted.\"); //NON-NLS\n+            } catch (ExecutionException ex) {\n+                logger.log(Level.SEVERE, \"Fatal error during Persona search.\", ex); //NON-NLS\n+            }\n+        \n+        }\n+    } \n+    \n+    /**\n+     * A wrapper class that bags the UI components that need to be updated when \n+     * a persona search task or a create dialog returns.\n+     */\n+    private class PersonaUIComponents {\n+        \n+        private final JLabel personaNameLabel;\n+        private final JButton personaActionButton;\n+    \n+        PersonaUIComponents(JLabel personaNameLabel, JButton personaActionButton) {\n+            this.personaNameLabel = personaNameLabel;\n+            this.personaActionButton = personaActionButton;\n+        }\n+\n+        public JLabel getPersonaNameLabel() {\n+            return personaNameLabel;\n+        }\n+\n+        public JButton getPersonaActionButton() {\n+            return personaActionButton;\n+        }\n+    }\n+    \n+     /**\n+     * Action listener for Create persona button.\n+     */\n+    private class CreatePersonaButtonListener implements ActionListener {\n+\n+        private final PersonaUIComponents personaUIComponents;\n+\n+        CreatePersonaButtonListener(PersonaUIComponents personaUIComponents) {\n+            this.personaUIComponents = personaUIComponents;\n+        }\n+         \n+        @Override\n+        public void actionPerformed(java.awt.event.ActionEvent evt) {\n+            // Launch the Persona Create dialog - do not display immediately\n+            PersonaDetailsDialog createPersonaDialog = new PersonaDetailsDialog(ContactArtifactViewer.this,\n+                    PersonaDetailsMode.CREATE, null, new PersonaCreateCallbackImpl(personaUIComponents), false);\n+\n+            // Pre populate the persona name and accounts if we have them.\n+            PersonaDetailsPanel personaPanel = createPersonaDialog.getDetailsPanel();\n+            \n+            if (contactName != null) {\n+                personaPanel.setPersonaName(contactName);\n+            }\n+\n+            // pass the list of accounts to the dialog\n+            for (CentralRepoAccount account : contactUniqueAccountsList) {\n+                personaPanel.addAccount(account, \"Account found in Contact artifact.\", Persona.Confidence.UNKNOWN);\n+            }\n+\n+            // display the dialog now\n+            createPersonaDialog.display();\n+        }\n+    }\n+        \n+    /**\n+     * Action listener for View persona button.\n+     */\n+    private class ViewPersonaButtonListener implements ActionListener {\n+\n+        private final Persona persona;\n+\n+        ViewPersonaButtonListener(Persona persona) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 543}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwOTgyNg==", "bodyText": "Method header.", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437609826", "createdAt": "2020-06-09T17:46:41Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -305,16 +396,410 @@ private void updateSection(List<BlackboardAttribute> sectionAttributesList, JLab\n         sectionPanel.revalidate();\n     }\n \n+    /**\n+     * Kicks of a search for personas, based in the list of attributes.\n+     * \n+     * @param accountAttributesList a list of account identifying attributes.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_searching= Searching...\"\n+    })\n+    private void initiatePersonasSearch(List<BlackboardAttribute> accountAttributesList) throws CentralRepoException {\n+        \n+        // create a Gridbag layout\n+        // create a gridbag layout to show each participant on one line\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+        \n+        // Add a Persona Name label \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        \n+        javax.swing.Box.Filler filler1 = this.createFiller(5, 0);\n+        personasPanel.add(filler1, constraints);\n+\n+        constraints.gridx++;\n+        javax.swing.JLabel primaryPersonaNameLabel = new javax.swing.JLabel();\n+        primaryPersonaNameLabel.setText(Bundle.ContactArtifactViewer_persona_searching());\n+        gridBagLayout.setConstraints(primaryPersonaNameLabel, constraints);\n+        personasPanel.add(primaryPersonaNameLabel);\n+        \n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.revalidate();\n+        \n+        // kick off a background task to serach for personas for the contact\n+        ContactPersonaSearcherTask personaSearchTask = new ContactPersonaSearcherTask(accountAttributesList);\n+        personaSearchTask.execute();\n+     \n+    }\n+    \n+    /**\n+     * Updates the Persona panel with the gathered persona information.\n+     */\n+    private void updatePersonasPanel() {\n+        // Clear out the panel\n+        personasPanel.removeAll();\n+\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+\n+        if (contactUniquePersonasMap.isEmpty()) {\n+            showPersona(null, Collections.emptyList(), gridBagLayout, constraints);\n+        } else {\n+            for (Map.Entry<Persona, ArrayList<CentralRepoAccount> > entry : contactUniquePersonasMap.entrySet()) {\n+                List<CentralRepoAccount> missingAccounts = new ArrayList<>();\n+                ArrayList<CentralRepoAccount> personaAccounts = entry.getValue();\n+                \n+                // create a list of accounts missing from this persona\n+                for (CentralRepoAccount account : contactUniqueAccountsList) {\n+                    if (personaAccounts.contains(account) == false) {\n+                        missingAccounts.add(account);\n+                    }\n+                }\n+                 \n+                showPersona(entry.getKey(), missingAccounts, gridBagLayout, constraints);\n+                constraints.gridy += 2;\n+            }\n+        }\n+\n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.setSize(personasPanel.getPreferredSize());\n+        personasPanel.revalidate();\n+    }\n+    \n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_label= Persona: \",\n+        \"ContactArtifactViewer_persona_text_none=No Persona\",\n+        \"ContactArtifactViewer_persona_button_view=View\",\n+        \"ContactArtifactViewer_persona_button_new=New\",\n+        \"ContactArtifactViewer_missing_account_label=Missing Account: \"\n+    })\n+    \n+    \n+    /**\n+     * Displays the given persona in the persona panel.\n+     * \n+     * @param persona Persona to display.\n+     * @param missingAccountsList List of accounts this persona may be missing.\n+     * @param gridBagLayout Layout to use.\n+     * @param constraints layout constraints.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    private void showPersona(Persona persona, List<CentralRepoAccount> missingAccountsList, GridBagLayout gridBagLayout, GridBagConstraints constraints  ) {\n+        \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        constraints.gridx = 0;\n+\n+        javax.swing.Box.Filler filler1 = createFiller(5, 0 );\n+        gridBagLayout.setConstraints(filler1, constraints);\n+        personasPanel.add(filler1);\n+\n+         // Add a \"Persona: \" label\n+        constraints.gridx++;\n+        javax.swing.JLabel personaLabel = new javax.swing.JLabel();\n+        personaLabel.setText(Bundle.ContactArtifactViewer_persona_label());\n+        gridBagLayout.setConstraints(personaLabel, constraints);\n+        personasPanel.add(personaLabel);\n+        \n+        javax.swing.JLabel personaNameLabel = new javax.swing.JLabel();\n+        javax.swing.JButton personaButton = new javax.swing.JButton();\n+        \n+        String personaName;\n+        String personaButtonText;\n+        ActionListener personaButtonListener;\n+        \n+        if (persona != null) {\n+            personaName = persona.getName();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_view();\n+            personaButtonListener = new ViewPersonaButtonListener(persona);\n+        } else {\n+            personaName = Bundle.ContactArtifactViewer_persona_text_none();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_new();\n+            personaButtonListener = new CreatePersonaButtonListener(new PersonaUIComponents(personaNameLabel, personaButton));\n+        }\n+        \n+         // Add the label for persona name, \n+        constraints.gridx++;\n+        personaNameLabel.setText(personaName);\n+        gridBagLayout.setConstraints(personaNameLabel, constraints);\n+        personasPanel.add(personaNameLabel);\n+        \n+        constraints.gridx++;\n+        personasPanel.add(createFiller(5, 0), constraints);\n+          \n+        // Add a Persona action button\n+        constraints.gridx++;\n+        personaButton.setText(personaButtonText);\n+        personaButton.addActionListener(personaButtonListener);\n+        \n+ \n+        // no top inset of the button, in order to center align with the labels.\n+        constraints.insets = new java.awt.Insets(0, 0, 0, 0);\n+   \n+        gridBagLayout.setConstraints(personaButton, constraints);\n+        personasPanel.add(personaButton);\n+\n+        // restore normal inset\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+          \n+       \n+        // show missing accounts.\n+        for (CentralRepoAccount missingAccount: missingAccountsList) {\n+             constraints.weightx = 0;\n+             constraints.gridx = 0;\n+             constraints.gridy++;\n+            \n+            // Add a \"Missing Account: \" label\n+            constraints.gridx += 2; // Ident \n+            javax.swing.JLabel missingAccountLabel = new javax.swing.JLabel();\n+            missingAccountLabel.setText(Bundle.ContactArtifactViewer_missing_account_label());\n+            gridBagLayout.setConstraints(missingAccountLabel, constraints);\n+            personasPanel.add(missingAccountLabel);\n+        \n+             // Add the label for account id, \n+            constraints.gridx++;\n+            javax.swing.JLabel missingAccountIdentifierLabel = new javax.swing.JLabel();\n+            missingAccountIdentifierLabel.setText(missingAccount.getIdentifier());\n+            gridBagLayout.setConstraints(missingAccountIdentifierLabel, constraints);\n+            personasPanel.add(missingAccountIdentifierLabel);\n+        }\n+    }\n+    \n+    \n+    private javax.swing.Box.Filler createFiller(int width, int height ) {\n+        return new javax.swing.Box.Filler(new Dimension(width, height), new Dimension(width,height), new Dimension(width, height));\n+    }\n+    \n+   /**\n+     * Thread to search for a personas for all account identifier attributes for a contact.\n+     */\n+    private class ContactPersonaSearcherTask extends SwingWorker<Map<Persona, ArrayList<CentralRepoAccount>>, Void> {\n+\n+        private final List<BlackboardAttribute> accountAttributesList;\n+        private final List<CentralRepoAccount> uniqueAccountsList = new ArrayList<>();\n+       \n+        \n+        ContactPersonaSearcherTask(List<BlackboardAttribute> accountAttributesList) {\n+            this.accountAttributesList = accountAttributesList;\n+        }\n+\n+        \n+        @Override\n+        protected Map<Persona, ArrayList<CentralRepoAccount>> doInBackground() throws Exception {\n+\n+            Map<Persona, ArrayList<CentralRepoAccount>> uniquePersonas = new HashMap<>();\n+\n+            for (BlackboardAttribute bba : accountAttributesList) {\n+\n+                // Get account, add to accounts list\n+                Collection<Persona> personas;\n+\n+                Collection<CentralRepoAccount> accountCandidates\n+                        = CentralRepoAccount.getAccountsWithIdentifier(bba.getValueString());\n+\n+                if (accountCandidates.isEmpty() == false) {\n+                    CentralRepoAccount account = accountCandidates.iterator().next();\n+                    if (uniqueAccountsList.contains(account) == false) {\n+                        uniqueAccountsList.add(account);\n+                    }\n+\n+                    // get personas for the account\n+                    personas = PersonaAccount.getPersonaAccountsForAccount(account.getId())\n+                            .stream()\n+                            .map(PersonaAccount::getPersona)\n+                            .collect(Collectors.toList());\n+\n+                    // make a list of unique personas, along with all their accounts\n+                    for (Persona persona : personas) {\n+                        if (uniquePersonas.containsKey(persona) == false) {\n+                            Collection<CentralRepoAccount> accounts = persona.getPersonaAccounts()\n+                                    .stream()\n+                                    .map(PersonaAccount::getAccount)\n+                                    .collect(Collectors.toList());\n+\n+                            ArrayList<CentralRepoAccount> personaAccountsList = new ArrayList<>(accounts);\n+                            uniquePersonas.put(persona, personaAccountsList);\n+                        }\n+                    }\n+                }\n+\n+            }\n+\n+            return uniquePersonas;\n+        }\n+\n+\n+        @Override\n+        protected void done() {\n+           \n+            Map<Persona, ArrayList<CentralRepoAccount>> personasMap;\n+            try {\n+                personasMap = super.get();\n+\n+                if (this.isCancelled()) {\n+                    return;\n+                }\n+                \n+                contactUniquePersonasMap.clear();\n+                contactUniquePersonasMap.putAll(personasMap);\n+                contactUniqueAccountsList.clear();\n+                contactUniqueAccountsList.addAll(uniqueAccountsList);\n+\n+                updatePersonasPanel();\n+               \n+            } catch (CancellationException ex) {\n+                logger.log(Level.INFO, \"Persona searching was canceled.\"); //NON-NLS\n+            } catch (InterruptedException ex) {\n+                logger.log(Level.INFO, \"Persona searching was interrupted.\"); //NON-NLS\n+            } catch (ExecutionException ex) {\n+                logger.log(Level.SEVERE, \"Fatal error during Persona search.\", ex); //NON-NLS\n+            }\n+        \n+        }\n+    } \n+    \n+    /**\n+     * A wrapper class that bags the UI components that need to be updated when \n+     * a persona search task or a create dialog returns.\n+     */\n+    private class PersonaUIComponents {\n+        \n+        private final JLabel personaNameLabel;\n+        private final JButton personaActionButton;\n+    \n+        PersonaUIComponents(JLabel personaNameLabel, JButton personaActionButton) {\n+            this.personaNameLabel = personaNameLabel;\n+            this.personaActionButton = personaActionButton;\n+        }\n+\n+        public JLabel getPersonaNameLabel() {\n+            return personaNameLabel;\n+        }\n+\n+        public JButton getPersonaActionButton() {\n+            return personaActionButton;\n+        }\n+    }\n+    \n+     /**\n+     * Action listener for Create persona button.\n+     */\n+    private class CreatePersonaButtonListener implements ActionListener {\n+\n+        private final PersonaUIComponents personaUIComponents;\n+\n+        CreatePersonaButtonListener(PersonaUIComponents personaUIComponents) {\n+            this.personaUIComponents = personaUIComponents;\n+        }\n+         \n+        @Override\n+        public void actionPerformed(java.awt.event.ActionEvent evt) {\n+            // Launch the Persona Create dialog - do not display immediately\n+            PersonaDetailsDialog createPersonaDialog = new PersonaDetailsDialog(ContactArtifactViewer.this,\n+                    PersonaDetailsMode.CREATE, null, new PersonaCreateCallbackImpl(personaUIComponents), false);\n+\n+            // Pre populate the persona name and accounts if we have them.\n+            PersonaDetailsPanel personaPanel = createPersonaDialog.getDetailsPanel();\n+            \n+            if (contactName != null) {\n+                personaPanel.setPersonaName(contactName);\n+            }\n+\n+            // pass the list of accounts to the dialog\n+            for (CentralRepoAccount account : contactUniqueAccountsList) {\n+                personaPanel.addAccount(account, \"Account found in Contact artifact.\", Persona.Confidence.UNKNOWN);\n+            }\n+\n+            // display the dialog now\n+            createPersonaDialog.display();\n+        }\n+    }\n+        \n+    /**\n+     * Action listener for View persona button.\n+     */\n+    private class ViewPersonaButtonListener implements ActionListener {\n+\n+        private final Persona persona;\n+\n+        ViewPersonaButtonListener(Persona persona) {\n+            this.persona = persona;\n+        }\n+\n+        @Override\n+        public void actionPerformed(java.awt.event.ActionEvent evt) {\n+            new PersonaDetailsDialog(ContactArtifactViewer.this,\n+                    PersonaDetailsMode.VIEW, persona, new PersonaViewCallbackImpl());\n+        }\n+    }\n+    \n+    /**\n+     * Callback method for the create mode of the PersonaDetailsDialog\n+     */\n+    class PersonaCreateCallbackImpl implements PersonaDetailsDialogCallback {\n+        \n+        private final PersonaUIComponents personaUIComponents;\n+        PersonaCreateCallbackImpl(PersonaUIComponents personaUIComponents) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 560}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNTkzNw==", "bodyText": "This should have a call to repaint(),", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437625937", "createdAt": "2020-06-09T18:14:40Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -305,16 +396,410 @@ private void updateSection(List<BlackboardAttribute> sectionAttributesList, JLab\n         sectionPanel.revalidate();\n     }\n \n+    /**\n+     * Kicks of a search for personas, based in the list of attributes.\n+     * \n+     * @param accountAttributesList a list of account identifying attributes.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_searching= Searching...\"\n+    })\n+    private void initiatePersonasSearch(List<BlackboardAttribute> accountAttributesList) throws CentralRepoException {\n+        \n+        // create a Gridbag layout\n+        // create a gridbag layout to show each participant on one line\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+        \n+        // Add a Persona Name label \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        \n+        javax.swing.Box.Filler filler1 = this.createFiller(5, 0);\n+        personasPanel.add(filler1, constraints);\n+\n+        constraints.gridx++;\n+        javax.swing.JLabel primaryPersonaNameLabel = new javax.swing.JLabel();\n+        primaryPersonaNameLabel.setText(Bundle.ContactArtifactViewer_persona_searching());\n+        gridBagLayout.setConstraints(primaryPersonaNameLabel, constraints);\n+        personasPanel.add(primaryPersonaNameLabel);\n+        \n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.revalidate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNjc2Mg==", "bodyText": "Fix the comment", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437626762", "createdAt": "2020-06-09T18:16:07Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -305,16 +396,410 @@ private void updateSection(List<BlackboardAttribute> sectionAttributesList, JLab\n         sectionPanel.revalidate();\n     }\n \n+    /**\n+     * Kicks of a search for personas, based in the list of attributes.\n+     * \n+     * @param accountAttributesList a list of account identifying attributes.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_searching= Searching...\"\n+    })\n+    private void initiatePersonasSearch(List<BlackboardAttribute> accountAttributesList) throws CentralRepoException {\n+        \n+        // create a Gridbag layout\n+        // create a gridbag layout to show each participant on one line", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNzQwNA==", "bodyText": "Brian was looking for one resetComponent method that would reset the state of all of the components.", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437627404", "createdAt": "2020-06-09T18:17:12Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -231,6 +311,16 @@ public boolean isSupported(BlackboardArtifact artifact) {\n         return artifact.getArtifactTypeID() == BlackboardArtifact.ARTIFACT_TYPE.TSK_CONTACT.getTypeID();\n     }\n \n+    /**\n+     * Clear any artifact specific state.\n+     */\n+    private void reset() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNzc0MQ==", "bodyText": "initComponent should not be called in setArtifacts.  It should only be called in the constructor.", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437627741", "createdAt": "2020-06-09T18:17:45Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -158,43 +194,81 @@ private void initComponents() {\n         gridBagConstraints = new java.awt.GridBagConstraints();\n         gridBagConstraints.gridx = 0;\n         gridBagConstraints.gridy = 7;\n+        gridBagConstraints.gridheight = 2;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;\n+        gridBagConstraints.weighty = 0.1;\n+        add(interPanelfiller, gridBagConstraints);\n+\n+        personasLabel.setFont(personasLabel.getFont().deriveFont((personasLabel.getFont().getStyle() | java.awt.Font.ITALIC) | java.awt.Font.BOLD, personasLabel.getFont().getSize()+2));\n+        org.openide.awt.Mnemonics.setLocalizedText(personasLabel, org.openide.util.NbBundle.getMessage(ContactArtifactViewer.class, \"ContactArtifactViewer.personasLabel.text\")); // NOI18N\n+        personasLabel.setMaximumSize(new java.awt.Dimension(60, 19));\n+        personasLabel.setMinimumSize(new java.awt.Dimension(60, 19));\n+        personasLabel.setPreferredSize(new java.awt.Dimension(60, 19));\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 8;\n+        gridBagConstraints.gridwidth = 3;\n+        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new java.awt.Insets(6, 19, 0, 0);\n+        add(personasLabel, gridBagConstraints);\n+\n+        personasPanel.setLayout(new java.awt.GridBagLayout());\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 9;\n+        gridBagConstraints.gridwidth = 4;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;\n+        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n+        gridBagConstraints.insets = new java.awt.Insets(6, 19, 0, 0);\n+        add(personasPanel, gridBagConstraints);\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 10;\n         gridBagConstraints.gridwidth = 4;\n         gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n         gridBagConstraints.weighty = 1.0;\n-        add(filler1, gridBagConstraints);\n+        add(bottomFiller, gridBagConstraints);\n         gridBagConstraints = new java.awt.GridBagConstraints();\n         gridBagConstraints.gridx = 4;\n         gridBagConstraints.gridy = 0;\n         gridBagConstraints.gridheight = 8;\n         gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n         gridBagConstraints.ipadx = 2;\n         gridBagConstraints.weightx = 1.0;\n-        add(filler2, gridBagConstraints);\n+        add(rightFiller, gridBagConstraints);\n     }// </editor-fold>//GEN-END:initComponents\n \n     @Override\n     public void setArtifact(BlackboardArtifact artifact) {\n \n         // wipe the panel clean\n         this.removeAll();\n+        \n+        reset();\n         initComponents();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyODQwNw==", "bodyText": "Kicks off a search", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437628407", "createdAt": "2020-06-09T18:19:02Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -305,16 +396,410 @@ private void updateSection(List<BlackboardAttribute> sectionAttributesList, JLab\n         sectionPanel.revalidate();\n     }\n \n+    /**\n+     * Kicks of a search for personas, based in the list of attributes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyODYxNQ==", "bodyText": "A list of account", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437628615", "createdAt": "2020-06-09T18:19:27Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -305,16 +396,410 @@ private void updateSection(List<BlackboardAttribute> sectionAttributesList, JLab\n         sectionPanel.revalidate();\n     }\n \n+    /**\n+     * Kicks of a search for personas, based in the list of attributes.\n+     * \n+     * @param accountAttributesList a list of account identifying attributes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyODc4OA==", "bodyText": "Kick off a", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437628788", "createdAt": "2020-06-09T18:19:47Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -305,16 +396,410 @@ private void updateSection(List<BlackboardAttribute> sectionAttributesList, JLab\n         sectionPanel.revalidate();\n     }\n \n+    /**\n+     * Kicks of a search for personas, based in the list of attributes.\n+     * \n+     * @param accountAttributesList a list of account identifying attributes.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_searching= Searching...\"\n+    })\n+    private void initiatePersonasSearch(List<BlackboardAttribute> accountAttributesList) throws CentralRepoException {\n+        \n+        // create a Gridbag layout\n+        // create a gridbag layout to show each participant on one line\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+        \n+        // Add a Persona Name label \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        \n+        javax.swing.Box.Filler filler1 = this.createFiller(5, 0);\n+        personasPanel.add(filler1, constraints);\n+\n+        constraints.gridx++;\n+        javax.swing.JLabel primaryPersonaNameLabel = new javax.swing.JLabel();\n+        primaryPersonaNameLabel.setText(Bundle.ContactArtifactViewer_persona_searching());\n+        gridBagLayout.setConstraints(primaryPersonaNameLabel, constraints);\n+        personasPanel.add(primaryPersonaNameLabel);\n+        \n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.revalidate();\n+        \n+        // kick off a background task to serach for personas for the contact", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzMjAzMQ==", "bodyText": "Method header", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437632031", "createdAt": "2020-06-09T18:24:41Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -305,16 +396,410 @@ private void updateSection(List<BlackboardAttribute> sectionAttributesList, JLab\n         sectionPanel.revalidate();\n     }\n \n+    /**\n+     * Kicks of a search for personas, based in the list of attributes.\n+     * \n+     * @param accountAttributesList a list of account identifying attributes.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_searching= Searching...\"\n+    })\n+    private void initiatePersonasSearch(List<BlackboardAttribute> accountAttributesList) throws CentralRepoException {\n+        \n+        // create a Gridbag layout\n+        // create a gridbag layout to show each participant on one line\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+        \n+        // Add a Persona Name label \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        \n+        javax.swing.Box.Filler filler1 = this.createFiller(5, 0);\n+        personasPanel.add(filler1, constraints);\n+\n+        constraints.gridx++;\n+        javax.swing.JLabel primaryPersonaNameLabel = new javax.swing.JLabel();\n+        primaryPersonaNameLabel.setText(Bundle.ContactArtifactViewer_persona_searching());\n+        gridBagLayout.setConstraints(primaryPersonaNameLabel, constraints);\n+        personasPanel.add(primaryPersonaNameLabel);\n+        \n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.revalidate();\n+        \n+        // kick off a background task to serach for personas for the contact\n+        ContactPersonaSearcherTask personaSearchTask = new ContactPersonaSearcherTask(accountAttributesList);\n+        personaSearchTask.execute();\n+     \n+    }\n+    \n+    /**\n+     * Updates the Persona panel with the gathered persona information.\n+     */\n+    private void updatePersonasPanel() {\n+        // Clear out the panel\n+        personasPanel.removeAll();\n+\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+\n+        if (contactUniquePersonasMap.isEmpty()) {\n+            showPersona(null, Collections.emptyList(), gridBagLayout, constraints);\n+        } else {\n+            for (Map.Entry<Persona, ArrayList<CentralRepoAccount> > entry : contactUniquePersonasMap.entrySet()) {\n+                List<CentralRepoAccount> missingAccounts = new ArrayList<>();\n+                ArrayList<CentralRepoAccount> personaAccounts = entry.getValue();\n+                \n+                // create a list of accounts missing from this persona\n+                for (CentralRepoAccount account : contactUniqueAccountsList) {\n+                    if (personaAccounts.contains(account) == false) {\n+                        missingAccounts.add(account);\n+                    }\n+                }\n+                 \n+                showPersona(entry.getKey(), missingAccounts, gridBagLayout, constraints);\n+                constraints.gridy += 2;\n+            }\n+        }\n+\n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.setSize(personasPanel.getPreferredSize());\n+        personasPanel.revalidate();\n+    }\n+    \n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_label= Persona: \",\n+        \"ContactArtifactViewer_persona_text_none=No Persona\",\n+        \"ContactArtifactViewer_persona_button_view=View\",\n+        \"ContactArtifactViewer_persona_button_new=New\",\n+        \"ContactArtifactViewer_missing_account_label=Missing Account: \"\n+    })\n+    \n+    \n+    /**\n+     * Displays the given persona in the persona panel.\n+     * \n+     * @param persona Persona to display.\n+     * @param missingAccountsList List of accounts this persona may be missing.\n+     * @param gridBagLayout Layout to use.\n+     * @param constraints layout constraints.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    private void showPersona(Persona persona, List<CentralRepoAccount> missingAccountsList, GridBagLayout gridBagLayout, GridBagConstraints constraints  ) {\n+        \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        constraints.gridx = 0;\n+\n+        javax.swing.Box.Filler filler1 = createFiller(5, 0 );\n+        gridBagLayout.setConstraints(filler1, constraints);\n+        personasPanel.add(filler1);\n+\n+         // Add a \"Persona: \" label\n+        constraints.gridx++;\n+        javax.swing.JLabel personaLabel = new javax.swing.JLabel();\n+        personaLabel.setText(Bundle.ContactArtifactViewer_persona_label());\n+        gridBagLayout.setConstraints(personaLabel, constraints);\n+        personasPanel.add(personaLabel);\n+        \n+        javax.swing.JLabel personaNameLabel = new javax.swing.JLabel();\n+        javax.swing.JButton personaButton = new javax.swing.JButton();\n+        \n+        String personaName;\n+        String personaButtonText;\n+        ActionListener personaButtonListener;\n+        \n+        if (persona != null) {\n+            personaName = persona.getName();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_view();\n+            personaButtonListener = new ViewPersonaButtonListener(persona);\n+        } else {\n+            personaName = Bundle.ContactArtifactViewer_persona_text_none();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_new();\n+            personaButtonListener = new CreatePersonaButtonListener(new PersonaUIComponents(personaNameLabel, personaButton));\n+        }\n+        \n+         // Add the label for persona name, \n+        constraints.gridx++;\n+        personaNameLabel.setText(personaName);\n+        gridBagLayout.setConstraints(personaNameLabel, constraints);\n+        personasPanel.add(personaNameLabel);\n+        \n+        constraints.gridx++;\n+        personasPanel.add(createFiller(5, 0), constraints);\n+          \n+        // Add a Persona action button\n+        constraints.gridx++;\n+        personaButton.setText(personaButtonText);\n+        personaButton.addActionListener(personaButtonListener);\n+        \n+ \n+        // no top inset of the button, in order to center align with the labels.\n+        constraints.insets = new java.awt.Insets(0, 0, 0, 0);\n+   \n+        gridBagLayout.setConstraints(personaButton, constraints);\n+        personasPanel.add(personaButton);\n+\n+        // restore normal inset\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+          \n+       \n+        // show missing accounts.\n+        for (CentralRepoAccount missingAccount: missingAccountsList) {\n+             constraints.weightx = 0;\n+             constraints.gridx = 0;\n+             constraints.gridy++;\n+            \n+            // Add a \"Missing Account: \" label\n+            constraints.gridx += 2; // Ident \n+            javax.swing.JLabel missingAccountLabel = new javax.swing.JLabel();\n+            missingAccountLabel.setText(Bundle.ContactArtifactViewer_missing_account_label());\n+            gridBagLayout.setConstraints(missingAccountLabel, constraints);\n+            personasPanel.add(missingAccountLabel);\n+        \n+             // Add the label for account id, \n+            constraints.gridx++;\n+            javax.swing.JLabel missingAccountIdentifierLabel = new javax.swing.JLabel();\n+            missingAccountIdentifierLabel.setText(missingAccount.getIdentifier());\n+            gridBagLayout.setConstraints(missingAccountIdentifierLabel, constraints);\n+            personasPanel.add(missingAccountIdentifierLabel);\n+        }\n+    }\n+    \n+    \n+    private javax.swing.Box.Filler createFiller(int width, int height ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 387}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzMzE2MQ==", "bodyText": "Should that string be in a @messages block?", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437633161", "createdAt": "2020-06-09T18:26:46Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -305,16 +396,410 @@ private void updateSection(List<BlackboardAttribute> sectionAttributesList, JLab\n         sectionPanel.revalidate();\n     }\n \n+    /**\n+     * Kicks of a search for personas, based in the list of attributes.\n+     * \n+     * @param accountAttributesList a list of account identifying attributes.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_searching= Searching...\"\n+    })\n+    private void initiatePersonasSearch(List<BlackboardAttribute> accountAttributesList) throws CentralRepoException {\n+        \n+        // create a Gridbag layout\n+        // create a gridbag layout to show each participant on one line\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+        \n+        // Add a Persona Name label \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        \n+        javax.swing.Box.Filler filler1 = this.createFiller(5, 0);\n+        personasPanel.add(filler1, constraints);\n+\n+        constraints.gridx++;\n+        javax.swing.JLabel primaryPersonaNameLabel = new javax.swing.JLabel();\n+        primaryPersonaNameLabel.setText(Bundle.ContactArtifactViewer_persona_searching());\n+        gridBagLayout.setConstraints(primaryPersonaNameLabel, constraints);\n+        personasPanel.add(primaryPersonaNameLabel);\n+        \n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.revalidate();\n+        \n+        // kick off a background task to serach for personas for the contact\n+        ContactPersonaSearcherTask personaSearchTask = new ContactPersonaSearcherTask(accountAttributesList);\n+        personaSearchTask.execute();\n+     \n+    }\n+    \n+    /**\n+     * Updates the Persona panel with the gathered persona information.\n+     */\n+    private void updatePersonasPanel() {\n+        // Clear out the panel\n+        personasPanel.removeAll();\n+\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+\n+        if (contactUniquePersonasMap.isEmpty()) {\n+            showPersona(null, Collections.emptyList(), gridBagLayout, constraints);\n+        } else {\n+            for (Map.Entry<Persona, ArrayList<CentralRepoAccount> > entry : contactUniquePersonasMap.entrySet()) {\n+                List<CentralRepoAccount> missingAccounts = new ArrayList<>();\n+                ArrayList<CentralRepoAccount> personaAccounts = entry.getValue();\n+                \n+                // create a list of accounts missing from this persona\n+                for (CentralRepoAccount account : contactUniqueAccountsList) {\n+                    if (personaAccounts.contains(account) == false) {\n+                        missingAccounts.add(account);\n+                    }\n+                }\n+                 \n+                showPersona(entry.getKey(), missingAccounts, gridBagLayout, constraints);\n+                constraints.gridy += 2;\n+            }\n+        }\n+\n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.setSize(personasPanel.getPreferredSize());\n+        personasPanel.revalidate();\n+    }\n+    \n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_label= Persona: \",\n+        \"ContactArtifactViewer_persona_text_none=No Persona\",\n+        \"ContactArtifactViewer_persona_button_view=View\",\n+        \"ContactArtifactViewer_persona_button_new=New\",\n+        \"ContactArtifactViewer_missing_account_label=Missing Account: \"\n+    })\n+    \n+    \n+    /**\n+     * Displays the given persona in the persona panel.\n+     * \n+     * @param persona Persona to display.\n+     * @param missingAccountsList List of accounts this persona may be missing.\n+     * @param gridBagLayout Layout to use.\n+     * @param constraints layout constraints.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    private void showPersona(Persona persona, List<CentralRepoAccount> missingAccountsList, GridBagLayout gridBagLayout, GridBagConstraints constraints  ) {\n+        \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        constraints.gridx = 0;\n+\n+        javax.swing.Box.Filler filler1 = createFiller(5, 0 );\n+        gridBagLayout.setConstraints(filler1, constraints);\n+        personasPanel.add(filler1);\n+\n+         // Add a \"Persona: \" label\n+        constraints.gridx++;\n+        javax.swing.JLabel personaLabel = new javax.swing.JLabel();\n+        personaLabel.setText(Bundle.ContactArtifactViewer_persona_label());\n+        gridBagLayout.setConstraints(personaLabel, constraints);\n+        personasPanel.add(personaLabel);\n+        \n+        javax.swing.JLabel personaNameLabel = new javax.swing.JLabel();\n+        javax.swing.JButton personaButton = new javax.swing.JButton();\n+        \n+        String personaName;\n+        String personaButtonText;\n+        ActionListener personaButtonListener;\n+        \n+        if (persona != null) {\n+            personaName = persona.getName();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_view();\n+            personaButtonListener = new ViewPersonaButtonListener(persona);\n+        } else {\n+            personaName = Bundle.ContactArtifactViewer_persona_text_none();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_new();\n+            personaButtonListener = new CreatePersonaButtonListener(new PersonaUIComponents(personaNameLabel, personaButton));\n+        }\n+        \n+         // Add the label for persona name, \n+        constraints.gridx++;\n+        personaNameLabel.setText(personaName);\n+        gridBagLayout.setConstraints(personaNameLabel, constraints);\n+        personasPanel.add(personaNameLabel);\n+        \n+        constraints.gridx++;\n+        personasPanel.add(createFiller(5, 0), constraints);\n+          \n+        // Add a Persona action button\n+        constraints.gridx++;\n+        personaButton.setText(personaButtonText);\n+        personaButton.addActionListener(personaButtonListener);\n+        \n+ \n+        // no top inset of the button, in order to center align with the labels.\n+        constraints.insets = new java.awt.Insets(0, 0, 0, 0);\n+   \n+        gridBagLayout.setConstraints(personaButton, constraints);\n+        personasPanel.add(personaButton);\n+\n+        // restore normal inset\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+          \n+       \n+        // show missing accounts.\n+        for (CentralRepoAccount missingAccount: missingAccountsList) {\n+             constraints.weightx = 0;\n+             constraints.gridx = 0;\n+             constraints.gridy++;\n+            \n+            // Add a \"Missing Account: \" label\n+            constraints.gridx += 2; // Ident \n+            javax.swing.JLabel missingAccountLabel = new javax.swing.JLabel();\n+            missingAccountLabel.setText(Bundle.ContactArtifactViewer_missing_account_label());\n+            gridBagLayout.setConstraints(missingAccountLabel, constraints);\n+            personasPanel.add(missingAccountLabel);\n+        \n+             // Add the label for account id, \n+            constraints.gridx++;\n+            javax.swing.JLabel missingAccountIdentifierLabel = new javax.swing.JLabel();\n+            missingAccountIdentifierLabel.setText(missingAccount.getIdentifier());\n+            gridBagLayout.setConstraints(missingAccountIdentifierLabel, constraints);\n+            personasPanel.add(missingAccountIdentifierLabel);\n+        }\n+    }\n+    \n+    \n+    private javax.swing.Box.Filler createFiller(int width, int height ) {\n+        return new javax.swing.Box.Filler(new Dimension(width, height), new Dimension(width,height), new Dimension(width, height));\n+    }\n+    \n+   /**\n+     * Thread to search for a personas for all account identifier attributes for a contact.\n+     */\n+    private class ContactPersonaSearcherTask extends SwingWorker<Map<Persona, ArrayList<CentralRepoAccount>>, Void> {\n+\n+        private final List<BlackboardAttribute> accountAttributesList;\n+        private final List<CentralRepoAccount> uniqueAccountsList = new ArrayList<>();\n+       \n+        \n+        ContactPersonaSearcherTask(List<BlackboardAttribute> accountAttributesList) {\n+            this.accountAttributesList = accountAttributesList;\n+        }\n+\n+        \n+        @Override\n+        protected Map<Persona, ArrayList<CentralRepoAccount>> doInBackground() throws Exception {\n+\n+            Map<Persona, ArrayList<CentralRepoAccount>> uniquePersonas = new HashMap<>();\n+\n+            for (BlackboardAttribute bba : accountAttributesList) {\n+\n+                // Get account, add to accounts list\n+                Collection<Persona> personas;\n+\n+                Collection<CentralRepoAccount> accountCandidates\n+                        = CentralRepoAccount.getAccountsWithIdentifier(bba.getValueString());\n+\n+                if (accountCandidates.isEmpty() == false) {\n+                    CentralRepoAccount account = accountCandidates.iterator().next();\n+                    if (uniqueAccountsList.contains(account) == false) {\n+                        uniqueAccountsList.add(account);\n+                    }\n+\n+                    // get personas for the account\n+                    personas = PersonaAccount.getPersonaAccountsForAccount(account.getId())\n+                            .stream()\n+                            .map(PersonaAccount::getPersona)\n+                            .collect(Collectors.toList());\n+\n+                    // make a list of unique personas, along with all their accounts\n+                    for (Persona persona : personas) {\n+                        if (uniquePersonas.containsKey(persona) == false) {\n+                            Collection<CentralRepoAccount> accounts = persona.getPersonaAccounts()\n+                                    .stream()\n+                                    .map(PersonaAccount::getAccount)\n+                                    .collect(Collectors.toList());\n+\n+                            ArrayList<CentralRepoAccount> personaAccountsList = new ArrayList<>(accounts);\n+                            uniquePersonas.put(persona, personaAccountsList);\n+                        }\n+                    }\n+                }\n+\n+            }\n+\n+            return uniquePersonas;\n+        }\n+\n+\n+        @Override\n+        protected void done() {\n+           \n+            Map<Persona, ArrayList<CentralRepoAccount>> personasMap;\n+            try {\n+                personasMap = super.get();\n+\n+                if (this.isCancelled()) {\n+                    return;\n+                }\n+                \n+                contactUniquePersonasMap.clear();\n+                contactUniquePersonasMap.putAll(personasMap);\n+                contactUniqueAccountsList.clear();\n+                contactUniqueAccountsList.addAll(uniqueAccountsList);\n+\n+                updatePersonasPanel();\n+               \n+            } catch (CancellationException ex) {\n+                logger.log(Level.INFO, \"Persona searching was canceled.\"); //NON-NLS\n+            } catch (InterruptedException ex) {\n+                logger.log(Level.INFO, \"Persona searching was interrupted.\"); //NON-NLS\n+            } catch (ExecutionException ex) {\n+                logger.log(Level.SEVERE, \"Fatal error during Persona search.\", ex); //NON-NLS\n+            }\n+        \n+        }\n+    } \n+    \n+    /**\n+     * A wrapper class that bags the UI components that need to be updated when \n+     * a persona search task or a create dialog returns.\n+     */\n+    private class PersonaUIComponents {\n+        \n+        private final JLabel personaNameLabel;\n+        private final JButton personaActionButton;\n+    \n+        PersonaUIComponents(JLabel personaNameLabel, JButton personaActionButton) {\n+            this.personaNameLabel = personaNameLabel;\n+            this.personaActionButton = personaActionButton;\n+        }\n+\n+        public JLabel getPersonaNameLabel() {\n+            return personaNameLabel;\n+        }\n+\n+        public JButton getPersonaActionButton() {\n+            return personaActionButton;\n+        }\n+    }\n+    \n+     /**\n+     * Action listener for Create persona button.\n+     */\n+    private class CreatePersonaButtonListener implements ActionListener {\n+\n+        private final PersonaUIComponents personaUIComponents;\n+\n+        CreatePersonaButtonListener(PersonaUIComponents personaUIComponents) {\n+            this.personaUIComponents = personaUIComponents;\n+        }\n+         \n+        @Override\n+        public void actionPerformed(java.awt.event.ActionEvent evt) {\n+            // Launch the Persona Create dialog - do not display immediately\n+            PersonaDetailsDialog createPersonaDialog = new PersonaDetailsDialog(ContactArtifactViewer.this,\n+                    PersonaDetailsMode.CREATE, null, new PersonaCreateCallbackImpl(personaUIComponents), false);\n+\n+            // Pre populate the persona name and accounts if we have them.\n+            PersonaDetailsPanel personaPanel = createPersonaDialog.getDetailsPanel();\n+            \n+            if (contactName != null) {\n+                personaPanel.setPersonaName(contactName);\n+            }\n+\n+            // pass the list of accounts to the dialog\n+            for (CentralRepoAccount account : contactUniqueAccountsList) {\n+                personaPanel.addAccount(account, \"Account found in Contact artifact.\", Persona.Confidence.UNKNOWN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 528}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNDk3Mw==", "bodyText": "Method header", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437634973", "createdAt": "2020-06-09T18:30:09Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -305,16 +396,410 @@ private void updateSection(List<BlackboardAttribute> sectionAttributesList, JLab\n         sectionPanel.revalidate();\n     }\n \n+    /**\n+     * Kicks of a search for personas, based in the list of attributes.\n+     * \n+     * @param accountAttributesList a list of account identifying attributes.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_searching= Searching...\"\n+    })\n+    private void initiatePersonasSearch(List<BlackboardAttribute> accountAttributesList) throws CentralRepoException {\n+        \n+        // create a Gridbag layout\n+        // create a gridbag layout to show each participant on one line\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+        \n+        // Add a Persona Name label \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        \n+        javax.swing.Box.Filler filler1 = this.createFiller(5, 0);\n+        personasPanel.add(filler1, constraints);\n+\n+        constraints.gridx++;\n+        javax.swing.JLabel primaryPersonaNameLabel = new javax.swing.JLabel();\n+        primaryPersonaNameLabel.setText(Bundle.ContactArtifactViewer_persona_searching());\n+        gridBagLayout.setConstraints(primaryPersonaNameLabel, constraints);\n+        personasPanel.add(primaryPersonaNameLabel);\n+        \n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.revalidate();\n+        \n+        // kick off a background task to serach for personas for the contact\n+        ContactPersonaSearcherTask personaSearchTask = new ContactPersonaSearcherTask(accountAttributesList);\n+        personaSearchTask.execute();\n+     \n+    }\n+    \n+    /**\n+     * Updates the Persona panel with the gathered persona information.\n+     */\n+    private void updatePersonasPanel() {\n+        // Clear out the panel\n+        personasPanel.removeAll();\n+\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+\n+        if (contactUniquePersonasMap.isEmpty()) {\n+            showPersona(null, Collections.emptyList(), gridBagLayout, constraints);\n+        } else {\n+            for (Map.Entry<Persona, ArrayList<CentralRepoAccount> > entry : contactUniquePersonasMap.entrySet()) {\n+                List<CentralRepoAccount> missingAccounts = new ArrayList<>();\n+                ArrayList<CentralRepoAccount> personaAccounts = entry.getValue();\n+                \n+                // create a list of accounts missing from this persona\n+                for (CentralRepoAccount account : contactUniqueAccountsList) {\n+                    if (personaAccounts.contains(account) == false) {\n+                        missingAccounts.add(account);\n+                    }\n+                }\n+                 \n+                showPersona(entry.getKey(), missingAccounts, gridBagLayout, constraints);\n+                constraints.gridy += 2;\n+            }\n+        }\n+\n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.setSize(personasPanel.getPreferredSize());\n+        personasPanel.revalidate();\n+    }\n+    \n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_label= Persona: \",\n+        \"ContactArtifactViewer_persona_text_none=No Persona\",\n+        \"ContactArtifactViewer_persona_button_view=View\",\n+        \"ContactArtifactViewer_persona_button_new=New\",\n+        \"ContactArtifactViewer_missing_account_label=Missing Account: \"\n+    })\n+    \n+    \n+    /**\n+     * Displays the given persona in the persona panel.\n+     * \n+     * @param persona Persona to display.\n+     * @param missingAccountsList List of accounts this persona may be missing.\n+     * @param gridBagLayout Layout to use.\n+     * @param constraints layout constraints.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    private void showPersona(Persona persona, List<CentralRepoAccount> missingAccountsList, GridBagLayout gridBagLayout, GridBagConstraints constraints  ) {\n+        \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        constraints.gridx = 0;\n+\n+        javax.swing.Box.Filler filler1 = createFiller(5, 0 );\n+        gridBagLayout.setConstraints(filler1, constraints);\n+        personasPanel.add(filler1);\n+\n+         // Add a \"Persona: \" label\n+        constraints.gridx++;\n+        javax.swing.JLabel personaLabel = new javax.swing.JLabel();\n+        personaLabel.setText(Bundle.ContactArtifactViewer_persona_label());\n+        gridBagLayout.setConstraints(personaLabel, constraints);\n+        personasPanel.add(personaLabel);\n+        \n+        javax.swing.JLabel personaNameLabel = new javax.swing.JLabel();\n+        javax.swing.JButton personaButton = new javax.swing.JButton();\n+        \n+        String personaName;\n+        String personaButtonText;\n+        ActionListener personaButtonListener;\n+        \n+        if (persona != null) {\n+            personaName = persona.getName();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_view();\n+            personaButtonListener = new ViewPersonaButtonListener(persona);\n+        } else {\n+            personaName = Bundle.ContactArtifactViewer_persona_text_none();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_new();\n+            personaButtonListener = new CreatePersonaButtonListener(new PersonaUIComponents(personaNameLabel, personaButton));\n+        }\n+        \n+         // Add the label for persona name, \n+        constraints.gridx++;\n+        personaNameLabel.setText(personaName);\n+        gridBagLayout.setConstraints(personaNameLabel, constraints);\n+        personasPanel.add(personaNameLabel);\n+        \n+        constraints.gridx++;\n+        personasPanel.add(createFiller(5, 0), constraints);\n+          \n+        // Add a Persona action button\n+        constraints.gridx++;\n+        personaButton.setText(personaButtonText);\n+        personaButton.addActionListener(personaButtonListener);\n+        \n+ \n+        // no top inset of the button, in order to center align with the labels.\n+        constraints.insets = new java.awt.Insets(0, 0, 0, 0);\n+   \n+        gridBagLayout.setConstraints(personaButton, constraints);\n+        personasPanel.add(personaButton);\n+\n+        // restore normal inset\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+          \n+       \n+        // show missing accounts.\n+        for (CentralRepoAccount missingAccount: missingAccountsList) {\n+             constraints.weightx = 0;\n+             constraints.gridx = 0;\n+             constraints.gridy++;\n+            \n+            // Add a \"Missing Account: \" label\n+            constraints.gridx += 2; // Ident \n+            javax.swing.JLabel missingAccountLabel = new javax.swing.JLabel();\n+            missingAccountLabel.setText(Bundle.ContactArtifactViewer_missing_account_label());\n+            gridBagLayout.setConstraints(missingAccountLabel, constraints);\n+            personasPanel.add(missingAccountLabel);\n+        \n+             // Add the label for account id, \n+            constraints.gridx++;\n+            javax.swing.JLabel missingAccountIdentifierLabel = new javax.swing.JLabel();\n+            missingAccountIdentifierLabel.setText(missingAccount.getIdentifier());\n+            gridBagLayout.setConstraints(missingAccountIdentifierLabel, constraints);\n+            personasPanel.add(missingAccountIdentifierLabel);\n+        }\n+    }\n+    \n+    \n+    private javax.swing.Box.Filler createFiller(int width, int height ) {\n+        return new javax.swing.Box.Filler(new Dimension(width, height), new Dimension(width,height), new Dimension(width, height));\n+    }\n+    \n+   /**\n+     * Thread to search for a personas for all account identifier attributes for a contact.\n+     */\n+    private class ContactPersonaSearcherTask extends SwingWorker<Map<Persona, ArrayList<CentralRepoAccount>>, Void> {\n+\n+        private final List<BlackboardAttribute> accountAttributesList;\n+        private final List<CentralRepoAccount> uniqueAccountsList = new ArrayList<>();\n+       \n+        \n+        ContactPersonaSearcherTask(List<BlackboardAttribute> accountAttributesList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 400}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNTI4NA==", "bodyText": "This whole class is missing method headers.", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437635284", "createdAt": "2020-06-09T18:30:38Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java", "diffHunk": "@@ -305,16 +396,410 @@ private void updateSection(List<BlackboardAttribute> sectionAttributesList, JLab\n         sectionPanel.revalidate();\n     }\n \n+    /**\n+     * Kicks of a search for personas, based in the list of attributes.\n+     * \n+     * @param accountAttributesList a list of account identifying attributes.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_searching= Searching...\"\n+    })\n+    private void initiatePersonasSearch(List<BlackboardAttribute> accountAttributesList) throws CentralRepoException {\n+        \n+        // create a Gridbag layout\n+        // create a gridbag layout to show each participant on one line\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+        \n+        // Add a Persona Name label \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        \n+        javax.swing.Box.Filler filler1 = this.createFiller(5, 0);\n+        personasPanel.add(filler1, constraints);\n+\n+        constraints.gridx++;\n+        javax.swing.JLabel primaryPersonaNameLabel = new javax.swing.JLabel();\n+        primaryPersonaNameLabel.setText(Bundle.ContactArtifactViewer_persona_searching());\n+        gridBagLayout.setConstraints(primaryPersonaNameLabel, constraints);\n+        personasPanel.add(primaryPersonaNameLabel);\n+        \n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.revalidate();\n+        \n+        // kick off a background task to serach for personas for the contact\n+        ContactPersonaSearcherTask personaSearchTask = new ContactPersonaSearcherTask(accountAttributesList);\n+        personaSearchTask.execute();\n+     \n+    }\n+    \n+    /**\n+     * Updates the Persona panel with the gathered persona information.\n+     */\n+    private void updatePersonasPanel() {\n+        // Clear out the panel\n+        personasPanel.removeAll();\n+\n+        GridBagLayout gridBagLayout = new GridBagLayout();\n+        GridBagConstraints constraints = new GridBagConstraints();\n+        constraints.anchor = GridBagConstraints.FIRST_LINE_START;\n+        constraints.gridx = 0;\n+        constraints.gridy = 0;\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+\n+        if (contactUniquePersonasMap.isEmpty()) {\n+            showPersona(null, Collections.emptyList(), gridBagLayout, constraints);\n+        } else {\n+            for (Map.Entry<Persona, ArrayList<CentralRepoAccount> > entry : contactUniquePersonasMap.entrySet()) {\n+                List<CentralRepoAccount> missingAccounts = new ArrayList<>();\n+                ArrayList<CentralRepoAccount> personaAccounts = entry.getValue();\n+                \n+                // create a list of accounts missing from this persona\n+                for (CentralRepoAccount account : contactUniqueAccountsList) {\n+                    if (personaAccounts.contains(account) == false) {\n+                        missingAccounts.add(account);\n+                    }\n+                }\n+                 \n+                showPersona(entry.getKey(), missingAccounts, gridBagLayout, constraints);\n+                constraints.gridy += 2;\n+            }\n+        }\n+\n+        personasPanel.setLayout(gridBagLayout);\n+        personasPanel.setSize(personasPanel.getPreferredSize());\n+        personasPanel.revalidate();\n+    }\n+    \n+    @NbBundle.Messages({\n+        \"ContactArtifactViewer_persona_label= Persona: \",\n+        \"ContactArtifactViewer_persona_text_none=No Persona\",\n+        \"ContactArtifactViewer_persona_button_view=View\",\n+        \"ContactArtifactViewer_persona_button_new=New\",\n+        \"ContactArtifactViewer_missing_account_label=Missing Account: \"\n+    })\n+    \n+    \n+    /**\n+     * Displays the given persona in the persona panel.\n+     * \n+     * @param persona Persona to display.\n+     * @param missingAccountsList List of accounts this persona may be missing.\n+     * @param gridBagLayout Layout to use.\n+     * @param constraints layout constraints.\n+     * \n+     * @throws CentralRepoException \n+     */\n+    private void showPersona(Persona persona, List<CentralRepoAccount> missingAccountsList, GridBagLayout gridBagLayout, GridBagConstraints constraints  ) {\n+        \n+        constraints.fill = GridBagConstraints.NONE;\n+        constraints.weightx = 0;\n+        constraints.gridx = 0;\n+\n+        javax.swing.Box.Filler filler1 = createFiller(5, 0 );\n+        gridBagLayout.setConstraints(filler1, constraints);\n+        personasPanel.add(filler1);\n+\n+         // Add a \"Persona: \" label\n+        constraints.gridx++;\n+        javax.swing.JLabel personaLabel = new javax.swing.JLabel();\n+        personaLabel.setText(Bundle.ContactArtifactViewer_persona_label());\n+        gridBagLayout.setConstraints(personaLabel, constraints);\n+        personasPanel.add(personaLabel);\n+        \n+        javax.swing.JLabel personaNameLabel = new javax.swing.JLabel();\n+        javax.swing.JButton personaButton = new javax.swing.JButton();\n+        \n+        String personaName;\n+        String personaButtonText;\n+        ActionListener personaButtonListener;\n+        \n+        if (persona != null) {\n+            personaName = persona.getName();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_view();\n+            personaButtonListener = new ViewPersonaButtonListener(persona);\n+        } else {\n+            personaName = Bundle.ContactArtifactViewer_persona_text_none();\n+            personaButtonText = Bundle.ContactArtifactViewer_persona_button_new();\n+            personaButtonListener = new CreatePersonaButtonListener(new PersonaUIComponents(personaNameLabel, personaButton));\n+        }\n+        \n+         // Add the label for persona name, \n+        constraints.gridx++;\n+        personaNameLabel.setText(personaName);\n+        gridBagLayout.setConstraints(personaNameLabel, constraints);\n+        personasPanel.add(personaNameLabel);\n+        \n+        constraints.gridx++;\n+        personasPanel.add(createFiller(5, 0), constraints);\n+          \n+        // Add a Persona action button\n+        constraints.gridx++;\n+        personaButton.setText(personaButtonText);\n+        personaButton.addActionListener(personaButtonListener);\n+        \n+ \n+        // no top inset of the button, in order to center align with the labels.\n+        constraints.insets = new java.awt.Insets(0, 0, 0, 0);\n+   \n+        gridBagLayout.setConstraints(personaButton, constraints);\n+        personasPanel.add(personaButton);\n+\n+        // restore normal inset\n+        constraints.insets = new java.awt.Insets(TOP_INSET, 0, 0, 0);\n+          \n+       \n+        // show missing accounts.\n+        for (CentralRepoAccount missingAccount: missingAccountsList) {\n+             constraints.weightx = 0;\n+             constraints.gridx = 0;\n+             constraints.gridy++;\n+            \n+            // Add a \"Missing Account: \" label\n+            constraints.gridx += 2; // Ident \n+            javax.swing.JLabel missingAccountLabel = new javax.swing.JLabel();\n+            missingAccountLabel.setText(Bundle.ContactArtifactViewer_missing_account_label());\n+            gridBagLayout.setConstraints(missingAccountLabel, constraints);\n+            personasPanel.add(missingAccountLabel);\n+        \n+             // Add the label for account id, \n+            constraints.gridx++;\n+            javax.swing.JLabel missingAccountIdentifierLabel = new javax.swing.JLabel();\n+            missingAccountIdentifierLabel.setText(missingAccount.getIdentifier());\n+            gridBagLayout.setConstraints(missingAccountIdentifierLabel, constraints);\n+            personasPanel.add(missingAccountIdentifierLabel);\n+        }\n+    }\n+    \n+    \n+    private javax.swing.Box.Filler createFiller(int width, int height ) {\n+        return new javax.swing.Box.Filler(new Dimension(width, height), new Dimension(width,height), new Dimension(width, height));\n+    }\n+    \n+   /**\n+     * Thread to search for a personas for all account identifier attributes for a contact.\n+     */\n+    private class ContactPersonaSearcherTask extends SwingWorker<Map<Persona, ArrayList<CentralRepoAccount>>, Void> {\n+\n+        private final List<BlackboardAttribute> accountAttributesList;\n+        private final List<CentralRepoAccount> uniqueAccountsList = new ArrayList<>();\n+       \n+        \n+        ContactPersonaSearcherTask(List<BlackboardAttribute> accountAttributesList) {\n+            this.accountAttributesList = accountAttributesList;\n+        }\n+\n+        \n+        @Override\n+        protected Map<Persona, ArrayList<CentralRepoAccount>> doInBackground() throws Exception {\n+\n+            Map<Persona, ArrayList<CentralRepoAccount>> uniquePersonas = new HashMap<>();\n+\n+            for (BlackboardAttribute bba : accountAttributesList) {\n+\n+                // Get account, add to accounts list\n+                Collection<Persona> personas;\n+\n+                Collection<CentralRepoAccount> accountCandidates\n+                        = CentralRepoAccount.getAccountsWithIdentifier(bba.getValueString());\n+\n+                if (accountCandidates.isEmpty() == false) {\n+                    CentralRepoAccount account = accountCandidates.iterator().next();\n+                    if (uniqueAccountsList.contains(account) == false) {\n+                        uniqueAccountsList.add(account);\n+                    }\n+\n+                    // get personas for the account\n+                    personas = PersonaAccount.getPersonaAccountsForAccount(account.getId())\n+                            .stream()\n+                            .map(PersonaAccount::getPersona)\n+                            .collect(Collectors.toList());\n+\n+                    // make a list of unique personas, along with all their accounts\n+                    for (Persona persona : personas) {\n+                        if (uniquePersonas.containsKey(persona) == false) {\n+                            Collection<CentralRepoAccount> accounts = persona.getPersonaAccounts()\n+                                    .stream()\n+                                    .map(PersonaAccount::getAccount)\n+                                    .collect(Collectors.toList());\n+\n+                            ArrayList<CentralRepoAccount> personaAccountsList = new ArrayList<>(accounts);\n+                            uniquePersonas.put(persona, personaAccountsList);\n+                        }\n+                    }\n+                }\n+\n+            }\n+\n+            return uniquePersonas;\n+        }\n+\n+\n+        @Override\n+        protected void done() {\n+           \n+            Map<Persona, ArrayList<CentralRepoAccount>> personasMap;\n+            try {\n+                personasMap = super.get();\n+\n+                if (this.isCancelled()) {\n+                    return;\n+                }\n+                \n+                contactUniquePersonasMap.clear();\n+                contactUniquePersonasMap.putAll(personasMap);\n+                contactUniqueAccountsList.clear();\n+                contactUniqueAccountsList.addAll(uniqueAccountsList);\n+\n+                updatePersonasPanel();\n+               \n+            } catch (CancellationException ex) {\n+                logger.log(Level.INFO, \"Persona searching was canceled.\"); //NON-NLS\n+            } catch (InterruptedException ex) {\n+                logger.log(Level.INFO, \"Persona searching was interrupted.\"); //NON-NLS\n+            } catch (ExecutionException ex) {\n+                logger.log(Level.SEVERE, \"Fatal error during Persona search.\", ex); //NON-NLS\n+            }\n+        \n+        }\n+    } \n+    \n+    /**\n+     * A wrapper class that bags the UI components that need to be updated when \n+     * a persona search task or a create dialog returns.\n+     */\n+    private class PersonaUIComponents {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 483}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzODc1Mg==", "bodyText": "Would it make sense for normalizeAccountIdentifier to take care of putting the  identifier into lowercase?  An email address passed into that method would already be in all lower case as CommunicationsUtils does that.", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437638752", "createdAt": "2020-06-09T18:36:55Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepoAccount.java", "diffHunk": "@@ -209,9 +245,17 @@ public void process(ResultSet rs) throws CentralRepoException, SQLException {\n      * @throws CentralRepoException If there is an error in getting the accounts.\n      */\n     public static Collection<CentralRepoAccount> getAccountsWithIdentifier(String accountIdentifier) throws CentralRepoException {\n-       \n+\n+        String normalizedAccountIdentifier;\n+\n+        try {\n+            normalizedAccountIdentifier = normalizeAccountIdentifier(accountIdentifier);\n+        } catch (TskCoreException ex) {\n+            throw new CentralRepoException(\"Failed to normalize account identifier.\", ex);\n+        }\n+\n         String queryClause = ACCOUNTS_QUERY_CLAUSE\n-                + \" WHERE LOWER(accounts.account_unique_identifier) = LOWER('\" + accountIdentifier + \"')\";\n+                + \" WHERE LOWER(accounts.account_unique_identifier) = LOWER('\" + normalizedAccountIdentifier + \"')\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0Mjg5Ng==", "bodyText": "Instead of passing in whether or not to display the dialog I would just have the calling code call display.  This will also help fix the lightbulb warnings in netbeans that you are not using your new instances.", "url": "https://github.com/sleuthkit/autopsy/pull/5949#discussion_r437642896", "createdAt": "2020-06-09T18:44:19Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/persona/PersonaDetailsDialog.java", "diffHunk": "@@ -44,6 +44,10 @@\n         \"PersonaDetailsDialogEditTitle=Edit Persona\",\n         \"PersonaDetailsDialogViewTitle=View Persona\",})\n     public PersonaDetailsDialog(Component parent, PersonaDetailsMode mode, Persona persona, PersonaDetailsDialogCallback callback) {\n+        // by default, display the dialog right away\n+        this(parent, mode, persona, callback, true);\n+    }\n+    public PersonaDetailsDialog(Component parent, PersonaDetailsMode mode, Persona persona, PersonaDetailsDialogCallback callback, boolean displayDialog) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551dd2016c9c69517d4dd08e70d1aa5a8f3646dc"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e4f4d197c101243445411e986880a0be578679f", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/4e4f4d197c101243445411e986880a0be578679f", "committedDate": "2020-06-09T23:18:11Z", "message": "Address review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6679d97e5d4169a4c5a0d5fc68ba1a6fabde08df", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/6679d97e5d4169a4c5a0d5fc68ba1a6fabde08df", "committedDate": "2020-06-10T00:54:09Z", "message": "Removed period."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d4e352533eedab6cb49797cf9deaab53a607b3e", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/9d4e352533eedab6cb49797cf9deaab53a607b3e", "committedDate": "2020-06-10T21:06:57Z", "message": "Changed Personas layout.\nCodacy comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62073dea9153798570e02f9d38530327accbfa97", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/62073dea9153798570e02f9d38530327accbfa97", "committedDate": "2020-06-10T21:25:38Z", "message": "Remove unused method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bbd8b8a27dda01383df6e4f437e975c3225417d", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/8bbd8b8a27dda01383df6e4f437e975c3225417d", "committedDate": "2020-06-10T22:03:33Z", "message": "Remove unused import."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b345be55ad89dca6c71b470d721ea74d83b8b8e7", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/b345be55ad89dca6c71b470d721ea74d83b8b8e7", "committedDate": "2020-06-10T22:18:33Z", "message": "Merge branch 'develop' of https://github.com/sleuthkit/autopsy into 6410-contactbook-personas"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cc4786eb6386e39a0aafce2680fb2f34426c005", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/6cc4786eb6386e39a0aafce2680fb2f34426c005", "committedDate": "2020-06-11T14:47:24Z", "message": "Merge branch 'develop' of https://github.com/sleuthkit/autopsy into 6410-contactbook-personas\n\n# Conflicts:\n#\tCore/src/org/sleuthkit/autopsy/contentviewers/ContactArtifactViewer.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69fb161575b1250b1658b8146531189f537d382e", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/69fb161575b1250b1658b8146531189f537d382e", "committedDate": "2020-06-11T15:21:55Z", "message": "Change confidence value."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDg0NDQy", "url": "https://github.com/sleuthkit/autopsy/pull/5949#pullrequestreview-429084442", "createdAt": "2020-06-11T16:27:40Z", "commit": {"oid": "69fb161575b1250b1658b8146531189f537d382e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2611, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}