{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NjYyMjE5", "number": 6502, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNTo1OTo1OVrOE_ONiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjozMjoxMlrOFAOAoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzI4NTg3OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNTo1OTo1OVrOH8z5Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODowMjoyNVrOH9nhtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUyNjg4Mw==", "bodyText": "Should the InterruptedException here be treated as a cancellation?", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r533526883", "createdAt": "2020-12-01T15:59:59Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery.ui;\n+\n+import org.sleuthkit.autopsy.discovery.search.MiniTimelineResult;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Level;\n+import javax.swing.SwingWorker;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.discovery.search.DiscoveryEventUtils;\n+import org.sleuthkit.autopsy.discovery.search.DomainSearch;\n+\n+/**\n+ * SwingWorker to retrieve a list of artifacts for a specified type and domain.\n+ */\n+class MiniTimelineWorker extends SwingWorker<List<MiniTimelineResult>, Void> {\n+\n+    private final static Logger logger = Logger.getLogger(MiniTimelineWorker.class.getName());\n+    private final String domain;\n+\n+    /**\n+     * Construct a new ArtifactsWorker.\n+     *\n+     * @param artifactType The type of artifact being retrieved.\n+     * @param domain       The domain the artifacts should have as an attribute.\n+     */\n+    MiniTimelineWorker(String domain) {\n+        this.domain = domain;\n+    }\n+\n+    @Override\n+    protected List<MiniTimelineResult> doInBackground() throws Exception {\n+        if (!StringUtils.isBlank(domain)) {\n+            DomainSearch domainSearch = new DomainSearch();\n+            return domainSearch.getAllArtifactsForDomain(Case.getCurrentCase().getSleuthkitCase(), domain);\n+        } else {\n+            return new ArrayList<>();\n+        }\n+    }\n+\n+    @Override\n+    protected void done() {\n+        List<MiniTimelineResult> results = null;\n+        if (!isCancelled()) {\n+            try {\n+                results = get();\n+            } catch (InterruptedException | ExecutionException ex) {\n+                logger.log(Level.SEVERE, \"Exception while trying to get list of artifacts for Domain details for mini timeline view for domain: \" + domain, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "186ca85b4594a47ea977a56d7183b1c9802ff970"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3Mjc5MQ==", "bodyText": "I don't think it should at this point, since we only want to entirely ignore things if the swing worker is cancelled in which case there will be a cancellation exception instead of an interruptedexception.", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r534372791", "createdAt": "2020-12-02T18:02:25Z", "author": {"login": "wschaeferB"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery.ui;\n+\n+import org.sleuthkit.autopsy.discovery.search.MiniTimelineResult;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Level;\n+import javax.swing.SwingWorker;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.discovery.search.DiscoveryEventUtils;\n+import org.sleuthkit.autopsy.discovery.search.DomainSearch;\n+\n+/**\n+ * SwingWorker to retrieve a list of artifacts for a specified type and domain.\n+ */\n+class MiniTimelineWorker extends SwingWorker<List<MiniTimelineResult>, Void> {\n+\n+    private final static Logger logger = Logger.getLogger(MiniTimelineWorker.class.getName());\n+    private final String domain;\n+\n+    /**\n+     * Construct a new ArtifactsWorker.\n+     *\n+     * @param artifactType The type of artifact being retrieved.\n+     * @param domain       The domain the artifacts should have as an attribute.\n+     */\n+    MiniTimelineWorker(String domain) {\n+        this.domain = domain;\n+    }\n+\n+    @Override\n+    protected List<MiniTimelineResult> doInBackground() throws Exception {\n+        if (!StringUtils.isBlank(domain)) {\n+            DomainSearch domainSearch = new DomainSearch();\n+            return domainSearch.getAllArtifactsForDomain(Case.getCurrentCase().getSleuthkitCase(), domain);\n+        } else {\n+            return new ArrayList<>();\n+        }\n+    }\n+\n+    @Override\n+    protected void done() {\n+        List<MiniTimelineResult> results = null;\n+        if (!isCancelled()) {\n+            try {\n+                results = get();\n+            } catch (InterruptedException | ExecutionException ex) {\n+                logger.log(Level.SEVERE, \"Exception while trying to get list of artifacts for Domain details for mini timeline view for domain: \" + domain, ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUyNjg4Mw=="}, "originalCommit": {"oid": "186ca85b4594a47ea977a56d7183b1c9802ff970"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzI5ODA0OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjowMjoyMVrOH80BGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjowMjoyMVrOH80BGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUyODg1OA==", "bodyText": "It would help readability if this was broken up into multiple lines.", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r533528858", "createdAt": "2020-12-01T16:02:21Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JPanel;\n+import javax.swing.event.ListSelectionListener;\n+import javax.swing.table.AbstractTableModel;\n+import org.apache.commons.lang.StringUtils;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.ThreadConfined;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.BlackboardAttribute.Type;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Panel to display list of dates and counts.\n+ */\n+class MiniTimelineArtifactListPanel extends JPanel {\n+\n+    private static final long serialVersionUID = 1L;\n+    private final TypeDescriptionTableModel tableModel;\n+    private static final Logger logger = Logger.getLogger(MiniTimelineArtifactListPanel.class.getName());\n+    private static final BlackboardAttribute.ATTRIBUTE_TYPE[] DESCRIPTION_TYPES = {BlackboardAttribute.ATTRIBUTE_TYPE.TSK_TITLE, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_NAME, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PROG_NAME, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_TEXT, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_URL};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "186ca85b4594a47ea977a56d7183b1c9802ff970"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzMzNTQwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjowOTo1MVrOH80YCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjowOTo1MVrOH80YCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzNDczMA==", "bodyText": "It looks like this file was generated with the gui designer.  Is there are corresponding .form file?", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r533534730", "createdAt": "2020-12-01T16:09:51Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "186ca85b4594a47ea977a56d7183b1c9802ff970"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzMzOTUyOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineDateListPanel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoxMDo0M1rOH80agw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjozMzozNFrOH81eWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzNTM2Mw==", "bodyText": "It looks like this file was generated with the gui designer.  Is there are corresponding .form file?", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r533535363", "createdAt": "2020-12-01T16:10:43Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineDateListPanel.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "186ca85b4594a47ea977a56d7183b1c9802ff970"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1MjczMQ==", "bodyText": "Same as the other list no form file because it was a refactored copy", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r533552731", "createdAt": "2020-12-01T16:33:34Z", "author": {"login": "wschaeferB"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineDateListPanel.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzNTM2Mw=="}, "originalCommit": {"oid": "186ca85b4594a47ea977a56d7183b1c9802ff970"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzQzNDczOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjozMDoyOVrOH81Vcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjo1MzoxNlrOH82XOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1MDQ1MA==", "bodyText": "It was a copy refactor so there is not a form file. I did put this comment in the initComponents file to reflect the nature of this file.", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r533550450", "createdAt": "2020-12-01T16:30:29Z", "author": {"login": "wschaeferB"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JPanel;\n+import javax.swing.event.ListSelectionListener;\n+import javax.swing.table.AbstractTableModel;\n+import org.apache.commons.lang.StringUtils;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.ThreadConfined;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.BlackboardAttribute.Type;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Panel to display list of dates and counts.\n+ */\n+class MiniTimelineArtifactListPanel extends JPanel {\n+\n+    private static final long serialVersionUID = 1L;\n+    private final TypeDescriptionTableModel tableModel;\n+    private static final Logger logger = Logger.getLogger(MiniTimelineArtifactListPanel.class.getName());\n+    private static final BlackboardAttribute.ATTRIBUTE_TYPE[] DESCRIPTION_TYPES = {BlackboardAttribute.ATTRIBUTE_TYPE.TSK_TITLE, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_NAME, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PROG_NAME, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_TEXT, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_URL};\n+\n+    /**\n+     * Creates new form DiscoveryTimelineListPanel.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    MiniTimelineArtifactListPanel() {\n+        tableModel = new TypeDescriptionTableModel();\n+        initComponents();\n+        jTable1.getRowSorter().toggleSortOrder(0);\n+        jTable1.getRowSorter().toggleSortOrder(0);\n+    }\n+\n+    /**\n+     * Add a listener to the table of dates to perform actions when a date is\n+     * selected.\n+     *\n+     * @param listener The listener to add to the table of artifacts.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void addSelectionListener(ListSelectionListener listener) {\n+        jTable1.getSelectionModel().addListSelectionListener(listener);\n+    }\n+\n+    /**\n+     * Remove a listener from the table of dates.\n+     *\n+     * @param listener The listener to remove from the table of dates.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void removeListSelectionListener(ListSelectionListener listener) {\n+        jTable1.getSelectionModel().removeListSelectionListener(listener);\n+    }\n+\n+    /**\n+     * Whether the list of dates is empty.\n+     *\n+     * @return True if the list of dates is empty, false if there are dates.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    boolean isEmpty() {\n+        return tableModel.getRowCount() <= 0;\n+    }\n+\n+    /**\n+     * Select the first available date in the list if it is not empty to\n+     * populate the list to the right.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void selectFirst() {\n+        if (!isEmpty()) {\n+            jTable1.setRowSelectionInterval(0, 0);\n+        } else {\n+            jTable1.clearSelection();\n+        }\n+    }\n+\n+    /**\n+     * The artifact which is currently selected, null if no artifact is\n+     * selected.\n+     *\n+     * @return The currently selected BlackboardArtifact or null if none is\n+     *         selected.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    BlackboardArtifact getSelectedArtifact() {\n+        int selectedIndex = jTable1.getSelectionModel().getLeadSelectionIndex();\n+        if (selectedIndex < jTable1.getSelectionModel().getMinSelectionIndex() || jTable1.getSelectionModel().getMaxSelectionIndex() < 0 || selectedIndex > jTable1.getSelectionModel().getMaxSelectionIndex()) {\n+            return null;\n+        }\n+        return tableModel.getArtifactByRow(jTable1.convertRowIndexToModel(selectedIndex));\n+    }\n+\n+    /**\n+     * Add the specified list of dates to the list of dates which should be\n+     * displayed.\n+     *\n+     * @param dateCountList The list of dates to display.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void addArtifacts(List<BlackboardArtifact> dateCountList) {\n+        tableModel.setContents(dateCountList);\n+        jTable1.validate();\n+        jTable1.repaint();\n+        tableModel.fireTableDataChanged();\n+    }\n+\n+    /**\n+     * Remove all artifacts from the list of artifacts displayed.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void clearDates() {\n+        tableModel.setContents(new ArrayList<>());\n+        tableModel.fireTableDataChanged();\n+    }\n+\n+    /**\n+     * Initialize the UI components.\n+     */\n+    private void initComponents() {\n+        //This class is a refactored copy of ArtifactsListPanel so lacks the form however the init method still constructs the proper UI elements.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "186ca85b4594a47ea977a56d7183b1c9802ff970"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2NzI5MA==", "bodyText": "Yeah, I missed that.", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r533567290", "createdAt": "2020-12-01T16:53:16Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineArtifactListPanel.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery.ui;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JPanel;\n+import javax.swing.event.ListSelectionListener;\n+import javax.swing.table.AbstractTableModel;\n+import org.apache.commons.lang.StringUtils;\n+import org.openide.util.NbBundle;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.coreutils.ThreadConfined;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+import org.sleuthkit.datamodel.BlackboardAttribute;\n+import org.sleuthkit.datamodel.BlackboardAttribute.Type;\n+import org.sleuthkit.datamodel.TskCoreException;\n+\n+/**\n+ * Panel to display list of dates and counts.\n+ */\n+class MiniTimelineArtifactListPanel extends JPanel {\n+\n+    private static final long serialVersionUID = 1L;\n+    private final TypeDescriptionTableModel tableModel;\n+    private static final Logger logger = Logger.getLogger(MiniTimelineArtifactListPanel.class.getName());\n+    private static final BlackboardAttribute.ATTRIBUTE_TYPE[] DESCRIPTION_TYPES = {BlackboardAttribute.ATTRIBUTE_TYPE.TSK_TITLE, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_NAME, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PROG_NAME, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_TEXT, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_URL};\n+\n+    /**\n+     * Creates new form DiscoveryTimelineListPanel.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    MiniTimelineArtifactListPanel() {\n+        tableModel = new TypeDescriptionTableModel();\n+        initComponents();\n+        jTable1.getRowSorter().toggleSortOrder(0);\n+        jTable1.getRowSorter().toggleSortOrder(0);\n+    }\n+\n+    /**\n+     * Add a listener to the table of dates to perform actions when a date is\n+     * selected.\n+     *\n+     * @param listener The listener to add to the table of artifacts.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void addSelectionListener(ListSelectionListener listener) {\n+        jTable1.getSelectionModel().addListSelectionListener(listener);\n+    }\n+\n+    /**\n+     * Remove a listener from the table of dates.\n+     *\n+     * @param listener The listener to remove from the table of dates.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void removeListSelectionListener(ListSelectionListener listener) {\n+        jTable1.getSelectionModel().removeListSelectionListener(listener);\n+    }\n+\n+    /**\n+     * Whether the list of dates is empty.\n+     *\n+     * @return True if the list of dates is empty, false if there are dates.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    boolean isEmpty() {\n+        return tableModel.getRowCount() <= 0;\n+    }\n+\n+    /**\n+     * Select the first available date in the list if it is not empty to\n+     * populate the list to the right.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void selectFirst() {\n+        if (!isEmpty()) {\n+            jTable1.setRowSelectionInterval(0, 0);\n+        } else {\n+            jTable1.clearSelection();\n+        }\n+    }\n+\n+    /**\n+     * The artifact which is currently selected, null if no artifact is\n+     * selected.\n+     *\n+     * @return The currently selected BlackboardArtifact or null if none is\n+     *         selected.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    BlackboardArtifact getSelectedArtifact() {\n+        int selectedIndex = jTable1.getSelectionModel().getLeadSelectionIndex();\n+        if (selectedIndex < jTable1.getSelectionModel().getMinSelectionIndex() || jTable1.getSelectionModel().getMaxSelectionIndex() < 0 || selectedIndex > jTable1.getSelectionModel().getMaxSelectionIndex()) {\n+            return null;\n+        }\n+        return tableModel.getArtifactByRow(jTable1.convertRowIndexToModel(selectedIndex));\n+    }\n+\n+    /**\n+     * Add the specified list of dates to the list of dates which should be\n+     * displayed.\n+     *\n+     * @param dateCountList The list of dates to display.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void addArtifacts(List<BlackboardArtifact> dateCountList) {\n+        tableModel.setContents(dateCountList);\n+        jTable1.validate();\n+        jTable1.repaint();\n+        tableModel.fireTableDataChanged();\n+    }\n+\n+    /**\n+     * Remove all artifacts from the list of artifacts displayed.\n+     */\n+    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)\n+    void clearDates() {\n+        tableModel.setContents(new ArrayList<>());\n+        tableModel.fireTableDataChanged();\n+    }\n+\n+    /**\n+     * Initialize the UI components.\n+     */\n+    private void initComponents() {\n+        //This class is a refactored copy of ArtifactsListPanel so lacks the form however the init method still constructs the proper UI elements.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1MDQ1MA=="}, "originalCommit": {"oid": "186ca85b4594a47ea977a56d7183b1c9802ff970"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzczODU2OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjozMjoxMlrOH-ZY6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjozMjoxMlrOH-ZY6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE4OTczOQ==", "bodyText": "I think the CancellationException is thrown if the get method is called after the swing worker has been cancelled and the InterruptedException is thrown if a waiting thread receives an interrupt during cancellation based on https://docs.oracle.com/javase/tutorial/uiswing/concurrency/cancel.html and https://docs.oracle.com/javase/7/docs/api/javax/swing/SwingWorker.html#get(). I'm not seeing anything in your get method that would directly throw an InterruptedException so it is probably okay, but if the background method was changed to use, say the cache or a sql query directly where an InterruptedException could potentially be thrown, it might be good to treat as a cancellation.", "url": "https://github.com/sleuthkit/autopsy/pull/6502#discussion_r535189739", "createdAt": "2020-12-03T12:32:12Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/discovery/ui/MiniTimelineWorker.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Autopsy\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.discovery.ui;\n+\n+import org.sleuthkit.autopsy.discovery.search.MiniTimelineResult;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Level;\n+import javax.swing.SwingWorker;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.discovery.search.DiscoveryEventUtils;\n+import org.sleuthkit.autopsy.discovery.search.DiscoveryException;\n+import org.sleuthkit.autopsy.discovery.search.DomainSearch;\n+\n+/**\n+ * SwingWorker to retrieve a list of artifacts for a specified type and domain.\n+ */\n+class MiniTimelineWorker extends SwingWorker<List<MiniTimelineResult>, Void> {\n+\n+    private final static Logger logger = Logger.getLogger(MiniTimelineWorker.class.getName());\n+    private final String domain;\n+\n+    /**\n+     * Construct a new ArtifactsWorker.\n+     *\n+     * @param artifactType The type of artifact being retrieved.\n+     * @param domain       The domain the artifacts should have as an attribute.\n+     */\n+    MiniTimelineWorker(String domain) {\n+        this.domain = domain;\n+    }\n+\n+    @Override\n+    protected List<MiniTimelineResult> doInBackground() throws Exception {\n+        if (!StringUtils.isBlank(domain)) {\n+            DomainSearch domainSearch = new DomainSearch();\n+            try {\n+                return domainSearch.getAllArtifactsForDomain(Case.getCurrentCase().getSleuthkitCase(), domain);\n+            } catch (DiscoveryException ex) {\n+                if (ex.getCause() instanceof InterruptedException) {\n+                    logger.log(Level.INFO, \"MiniTimeline search was cancelled or interrupted for domain: {0}\", domain);\n+                } else {\n+                    throw ex;\n+                }\n+            }\n+        }\n+        return new ArrayList<>();\n+    }\n+\n+    @Override\n+    protected void done() {\n+        List<MiniTimelineResult> results = null;\n+        if (!isCancelled()) {\n+            try {\n+                results = get();\n+            } catch (InterruptedException | ExecutionException ex) {\n+                logger.log(Level.SEVERE, \"Exception while trying to get list of artifacts for Domain details for mini timeline view for domain: \" + domain, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccf2ebdb6d666b9ed2fd2f1589e46e8ce90e4baa"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 836, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}