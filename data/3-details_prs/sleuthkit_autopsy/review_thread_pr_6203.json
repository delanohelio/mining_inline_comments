{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxODQ3MjEy", "number": 6203, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODo1NDo1MVrOEbs2ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozOTowM1rOEdt1uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDgxODkxOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceInfoUtilities.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODo1NDo1MVrOHFyLKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODo1NDo1MVrOHFyLKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgyNjk4NQ==", "bodyText": "I think this is 'DESCENDING'", "url": "https://github.com/sleuthkit/autopsy/pull/6203#discussion_r475826985", "createdAt": "2020-08-24T18:54:51Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceInfoUtilities.java", "diffHunk": "@@ -133,9 +139,126 @@ static String getMetaFlagsContainsStatement(TSK_FS_META_FLAG_ENUM flag) {\n         return \"meta_flags & \" + flag.getValue() + \" > 0\";\n     }\n \n+    /**\n+     * Enum for specifying the sort order for getAttributes.\n+     */\n+    enum SortOrder {\n+        DECENDING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b697a4472c2c4df2a5bd1d68d4822fe631e922bd"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDgyNzUyOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceInfoUtilities.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODo1NzoxNFrOHFyQZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDowMTo0NFrOHF0Qlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgyODMyNA==", "bodyText": "I think this may need to be a different data structure.  Right now, artifacts that have a null value for the attribute being sorted on are removed.  Also, if two items have the same sort value, then I believe only one is stored.", "url": "https://github.com/sleuthkit/autopsy/pull/6203#discussion_r475828324", "createdAt": "2020-08-24T18:57:14Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceInfoUtilities.java", "diffHunk": "@@ -133,9 +139,126 @@ static String getMetaFlagsContainsStatement(TSK_FS_META_FLAG_ENUM flag) {\n         return \"meta_flags & \" + flag.getValue() + \" > 0\";\n     }\n \n+    /**\n+     * Enum for specifying the sort order for getAttributes.\n+     */\n+    enum SortOrder {\n+        DECENDING,\n+        ASCENDING\n+    }\n+\n+    /**\n+     * Return a list of artifacts that have been sorted by their attribute of\n+     * attributeType.\n+     *\n+     * Sorting on attributes of type byte[] and JSON is not currently supported.\n+     *\n+     * @param skCase        SleuthkitCase instance.\n+     * @param artifactType  Type of artifacts to sort.\n+     * @param dataSource    Data Source that the artifact belongs to.\n+     * @param attributeType Attribute type to sort by.\n+     * @param sortOrder     Sort order of the attributes, either ascending or\n+     *                      descending.\n+     * @param maxCount      Maximum number of results to return. To return all\n+     *                      values maxCount should be -1.\n+     *\n+     * @return A list of artifacts of type artifactType sorted by the attribute\n+     *         of attributeType in the given sortOrder. If no artifacts are\n+     *         found an empty list will be returned.\n+     *\n+     * @throws TskCoreException\n+     */\n+    static List<BlackboardArtifact> getArtifacts(SleuthkitCase skCase, BlackboardArtifact.Type artifactType, DataSource dataSource, BlackboardAttribute.Type attributeType, SortOrder sortOrder, int maxCount) throws TskCoreException {\n+        if (maxCount < 1 && maxCount != -1) {\n+            throw new IllegalArgumentException(\"Invalid maxCount passed to getArtifacts, value must be at greater 0\");\n+        }\n+\n+        TreeMap<BlackboardAttribute, BlackboardArtifact> sortedMap = new TreeMap<>(new AttributeComparator(sortOrder));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b697a4472c2c4df2a5bd1d68d4822fe631e922bd"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0MjMyOQ==", "bodyText": "If an artifact does not have the attribute being sorted on it is not included.  Why would artifacts that doesn't have the attribute be of interest?\nYou are correct, the TreeMap doesn't allow for multiple of the same key.  I will fix that.", "url": "https://github.com/sleuthkit/autopsy/pull/6203#discussion_r475842329", "createdAt": "2020-08-24T19:24:36Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceInfoUtilities.java", "diffHunk": "@@ -133,9 +139,126 @@ static String getMetaFlagsContainsStatement(TSK_FS_META_FLAG_ENUM flag) {\n         return \"meta_flags & \" + flag.getValue() + \" > 0\";\n     }\n \n+    /**\n+     * Enum for specifying the sort order for getAttributes.\n+     */\n+    enum SortOrder {\n+        DECENDING,\n+        ASCENDING\n+    }\n+\n+    /**\n+     * Return a list of artifacts that have been sorted by their attribute of\n+     * attributeType.\n+     *\n+     * Sorting on attributes of type byte[] and JSON is not currently supported.\n+     *\n+     * @param skCase        SleuthkitCase instance.\n+     * @param artifactType  Type of artifacts to sort.\n+     * @param dataSource    Data Source that the artifact belongs to.\n+     * @param attributeType Attribute type to sort by.\n+     * @param sortOrder     Sort order of the attributes, either ascending or\n+     *                      descending.\n+     * @param maxCount      Maximum number of results to return. To return all\n+     *                      values maxCount should be -1.\n+     *\n+     * @return A list of artifacts of type artifactType sorted by the attribute\n+     *         of attributeType in the given sortOrder. If no artifacts are\n+     *         found an empty list will be returned.\n+     *\n+     * @throws TskCoreException\n+     */\n+    static List<BlackboardArtifact> getArtifacts(SleuthkitCase skCase, BlackboardArtifact.Type artifactType, DataSource dataSource, BlackboardAttribute.Type attributeType, SortOrder sortOrder, int maxCount) throws TskCoreException {\n+        if (maxCount < 1 && maxCount != -1) {\n+            throw new IllegalArgumentException(\"Invalid maxCount passed to getArtifacts, value must be at greater 0\");\n+        }\n+\n+        TreeMap<BlackboardAttribute, BlackboardArtifact> sortedMap = new TreeMap<>(new AttributeComparator(sortOrder));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgyODMyNA=="}, "originalCommit": {"oid": "b697a4472c2c4df2a5bd1d68d4822fe631e922bd"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2MTE0Mw==", "bodyText": "Ok.  I think it would be good to document that behavior in the comment.  I initially thought it was going to behave comparable to a sql sort where rows with null for the sort value are still included.  It would be good to update the comment for the 'maxCount' parameter for the same reason.", "url": "https://github.com/sleuthkit/autopsy/pull/6203#discussion_r475861143", "createdAt": "2020-08-24T20:01:44Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceInfoUtilities.java", "diffHunk": "@@ -133,9 +139,126 @@ static String getMetaFlagsContainsStatement(TSK_FS_META_FLAG_ENUM flag) {\n         return \"meta_flags & \" + flag.getValue() + \" > 0\";\n     }\n \n+    /**\n+     * Enum for specifying the sort order for getAttributes.\n+     */\n+    enum SortOrder {\n+        DECENDING,\n+        ASCENDING\n+    }\n+\n+    /**\n+     * Return a list of artifacts that have been sorted by their attribute of\n+     * attributeType.\n+     *\n+     * Sorting on attributes of type byte[] and JSON is not currently supported.\n+     *\n+     * @param skCase        SleuthkitCase instance.\n+     * @param artifactType  Type of artifacts to sort.\n+     * @param dataSource    Data Source that the artifact belongs to.\n+     * @param attributeType Attribute type to sort by.\n+     * @param sortOrder     Sort order of the attributes, either ascending or\n+     *                      descending.\n+     * @param maxCount      Maximum number of results to return. To return all\n+     *                      values maxCount should be -1.\n+     *\n+     * @return A list of artifacts of type artifactType sorted by the attribute\n+     *         of attributeType in the given sortOrder. If no artifacts are\n+     *         found an empty list will be returned.\n+     *\n+     * @throws TskCoreException\n+     */\n+    static List<BlackboardArtifact> getArtifacts(SleuthkitCase skCase, BlackboardArtifact.Type artifactType, DataSource dataSource, BlackboardAttribute.Type attributeType, SortOrder sortOrder, int maxCount) throws TskCoreException {\n+        if (maxCount < 1 && maxCount != -1) {\n+            throw new IllegalArgumentException(\"Invalid maxCount passed to getArtifacts, value must be at greater 0\");\n+        }\n+\n+        TreeMap<BlackboardAttribute, BlackboardArtifact> sortedMap = new TreeMap<>(new AttributeComparator(sortOrder));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgyODMyNA=="}, "originalCommit": {"oid": "b697a4472c2c4df2a5bd1d68d4822fe631e922bd"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjkzODMwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceInfoUtilities.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDowODoyMlrOHIlPnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDowODoyMlrOHIlPnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2MDg2MA==", "bodyText": "I think this is an unused import causing a codacy issue.", "url": "https://github.com/sleuthkit/autopsy/pull/6203#discussion_r478760860", "createdAt": "2020-08-28T00:08:22Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceInfoUtilities.java", "diffHunk": "@@ -20,13 +20,21 @@\n \n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c455f728d079309c0ae764294c9c7e4668036a9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjkzOTY4OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceInfoUtilities.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDowOTowOVrOHIlQZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDowOTowOVrOHIlQZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2MTA2Mw==", "bodyText": "I think this is supposed to be \"Invalid maxCount passed to getArtifacts; value must be greater than or equal to 0.\"", "url": "https://github.com/sleuthkit/autopsy/pull/6203#discussion_r478761063", "createdAt": "2020-08-28T00:09:09Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceInfoUtilities.java", "diffHunk": "@@ -133,9 +141,204 @@ static String getMetaFlagsContainsStatement(TSK_FS_META_FLAG_ENUM flag) {\n         return \"meta_flags & \" + flag.getValue() + \" > 0\";\n     }\n \n+    /**\n+     * Enum for specifying the sort order for getAttributes.\n+     */\n+    enum SortOrder {\n+        DESCENDING,\n+        ASCENDING\n+    }\n+\n+    /**\n+     * Returns a list of all artifacts of the given type that have an attribute\n+     * of the given type sorted by given attribute type value. Artifacts that do\n+     * not have the given attribute will not be included in the list.\n+     *\n+     * Sorting on attributes of type byte[] and JSON is not currently supported.\n+     *\n+     * @param skCase        SleuthkitCase instance.\n+     * @param artifactType  Type of artifacts to sort.\n+     * @param dataSource    Data Source that the artifact belongs to.\n+     * @param attributeType Attribute type to sort by.\n+     * @param sortOrder     Sort order of the attributes, either ascending or\n+     *                      descending.\n+     *\n+     * @return A list of artifacts of type artifactType sorted by the attribute\n+     *         of attributeType in the given sortOrder. If no artifacts are\n+     *         found an empty list will be returned.\n+     *\n+     * @throws TskCoreException\n+     */\n+    static List<BlackboardArtifact> getArtifacts(SleuthkitCase skCase, BlackboardArtifact.Type artifactType, DataSource dataSource, BlackboardAttribute.Type attributeType, SortOrder sortOrder) throws TskCoreException {\n+        return getArtifacts(skCase, artifactType, dataSource, attributeType, sortOrder, 0);\n+    }\n+\n+    /**\n+     * Return a list of artifacts that have been sorted by their attribute of\n+     * attributeType. If an artifact of the given type does not have the given\n+     * attribute it will not be included in the returned list.\n+     *\n+     * Sorting on attributes of type byte[] and JSON is not currently supported.\n+     *\n+     * @param skCase        SleuthkitCase instance.\n+     * @param artifactType  Type of artifacts to sort.\n+     * @param dataSource    Data Source that the artifact belongs to.\n+     * @param attributeType Attribute type to sort by.\n+     * @param sortOrder     Sort order of the attributes, either ascending or\n+     *                      descending.\n+     * @param maxCount      Maximum number of results to return. To return all\n+     *                      values maxCount should be 0.\n+     *\n+     * @return A list of artifacts of type artifactType sorted by the attribute\n+     *         of attributeType in the given sortOrder. If no artifacts are\n+     *         found an empty list will be returned.\n+     *\n+     * @throws TskCoreException\n+     */\n+    static List<BlackboardArtifact> getArtifacts(SleuthkitCase skCase, BlackboardArtifact.Type artifactType, DataSource dataSource, BlackboardAttribute.Type attributeType, SortOrder sortOrder, int maxCount) throws TskCoreException {\n+        if (maxCount < 0) {\n+            throw new IllegalArgumentException(\"Invalid maxCount passed to getArtifacts, value must be at greater 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c455f728d079309c0ae764294c9c7e4668036a9"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTk1MTkzOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceInfoUtilities.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozOTowNFrOHJCw7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozOTowNFrOHJCw7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NDUyNg==", "bodyText": "I believe the intent is that if maxCount is zero, return all records.  It looks like this line causes no records to be returned in that event.", "url": "https://github.com/sleuthkit/autopsy/pull/6203#discussion_r479244526", "createdAt": "2020-08-28T12:39:04Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceInfoUtilities.java", "diffHunk": "@@ -133,9 +141,204 @@ static String getMetaFlagsContainsStatement(TSK_FS_META_FLAG_ENUM flag) {\n         return \"meta_flags & \" + flag.getValue() + \" > 0\";\n     }\n \n+    /**\n+     * Enum for specifying the sort order for getAttributes.\n+     */\n+    enum SortOrder {\n+        DESCENDING,\n+        ASCENDING\n+    }\n+\n+    /**\n+     * Returns a list of all artifacts of the given type that have an attribute\n+     * of the given type sorted by given attribute type value. Artifacts that do\n+     * not have the given attribute will not be included in the list.\n+     *\n+     * Sorting on attributes of type byte[] and JSON is not currently supported.\n+     *\n+     * @param skCase        SleuthkitCase instance.\n+     * @param artifactType  Type of artifacts to sort.\n+     * @param dataSource    Data Source that the artifact belongs to.\n+     * @param attributeType Attribute type to sort by.\n+     * @param sortOrder     Sort order of the attributes, either ascending or\n+     *                      descending.\n+     *\n+     * @return A list of artifacts of type artifactType sorted by the attribute\n+     *         of attributeType in the given sortOrder. If no artifacts are\n+     *         found an empty list will be returned.\n+     *\n+     * @throws TskCoreException\n+     */\n+    static List<BlackboardArtifact> getArtifacts(SleuthkitCase skCase, BlackboardArtifact.Type artifactType, DataSource dataSource, BlackboardAttribute.Type attributeType, SortOrder sortOrder) throws TskCoreException {\n+        return getArtifacts(skCase, artifactType, dataSource, attributeType, sortOrder, 0);\n+    }\n+\n+    /**\n+     * Return a list of artifacts that have been sorted by their attribute of\n+     * attributeType. If an artifact of the given type does not have the given\n+     * attribute it will not be included in the returned list.\n+     *\n+     * Sorting on attributes of type byte[] and JSON is not currently supported.\n+     *\n+     * @param skCase        SleuthkitCase instance.\n+     * @param artifactType  Type of artifacts to sort.\n+     * @param dataSource    Data Source that the artifact belongs to.\n+     * @param attributeType Attribute type to sort by.\n+     * @param sortOrder     Sort order of the attributes, either ascending or\n+     *                      descending.\n+     * @param maxCount      Maximum number of results to return. To return all\n+     *                      values maxCount should be 0.\n+     *\n+     * @return A list of artifacts of type artifactType sorted by the attribute\n+     *         of attributeType in the given sortOrder. If no artifacts are\n+     *         found an empty list will be returned.\n+     *\n+     * @throws TskCoreException\n+     */\n+    static List<BlackboardArtifact> getArtifacts(SleuthkitCase skCase, BlackboardArtifact.Type artifactType, DataSource dataSource, BlackboardAttribute.Type attributeType, SortOrder sortOrder, int maxCount) throws TskCoreException {\n+        if (maxCount < 0) {\n+            throw new IllegalArgumentException(\"Invalid maxCount passed to getArtifacts, value must be at greater 0\");\n+        }\n+\n+        return createListFromMap(getArtifactMap(skCase, artifactType, dataSource, attributeType, sortOrder), maxCount);\n+    }\n+\n     /**\n      * Empty private constructor\n      */\n     private DataSourceInfoUtilities() {\n     }\n+    \n+     /**\n+     * Create a Map of lists of artifacts sorted by the given attribute.\n+     *\n+     * @param skCase        SleuthkitCase instance.\n+     * @param artifactType  Type of artifacts to sort.\n+     * @param dataSource    Data Source that the artifact belongs to.\n+     * @param attributeType Attribute type to sort by.\n+     * @param sortOrder     Sort order of the attributes, either ascending or\n+     *                      descending.\n+     *\n+     * @return A Map of lists of artifacts sorted by the value of attribute\n+     *         given type. Artifacts that do not have an attribute of the given\n+     *         type will not be included.\n+     *\n+     * @throws TskCoreException\n+     */\n+    static private SortedMap<BlackboardAttribute, List<BlackboardArtifact>> getArtifactMap(SleuthkitCase skCase, BlackboardArtifact.Type artifactType, DataSource dataSource, BlackboardAttribute.Type attributeType, SortOrder sortOrder) throws TskCoreException {\n+        SortedMap<BlackboardAttribute, List<BlackboardArtifact>> sortedMap = new TreeMap<>(new AttributeComparator(sortOrder));\n+        List<BlackboardArtifact> artifactList = skCase.getBlackboard().getArtifacts(artifactType.getTypeID(), dataSource.getId());\n+\n+        for (BlackboardArtifact artifact : artifactList) {\n+            BlackboardAttribute attribute = artifact.getAttribute(attributeType);\n+            if (attribute == null) {\n+                continue;\n+            }\n+\n+            List<BlackboardArtifact> mapArtifactList = sortedMap.get(attribute);\n+            if (mapArtifactList == null) {\n+                mapArtifactList = new ArrayList<>();\n+                sortedMap.put(attribute, mapArtifactList);\n+            }\n+\n+            mapArtifactList.add(artifact);\n+        }\n+\n+        return sortedMap;\n+    }\n+\n+    /**\n+     * Creates the list of artifacts from the sorted map and the given count.\n+     *\n+     * @param sortedMap Sorted map of artifact lists.\n+     * @param maxCount  Maximum number of artifacts to return.\n+     *\n+     * @return List of artifacts, list will be empty if none were found.\n+     */\n+    static private List<BlackboardArtifact> createListFromMap(SortedMap<BlackboardAttribute, List<BlackboardArtifact>> sortedMap, int maxCount) {\n+        List<BlackboardArtifact> artifactList = new ArrayList<>();\n+\n+        for (List<BlackboardArtifact> mapArtifactList : sortedMap.values()) {\n+\n+            if (maxCount == artifactList.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c455f728d079309c0ae764294c9c7e4668036a9"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 862, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}