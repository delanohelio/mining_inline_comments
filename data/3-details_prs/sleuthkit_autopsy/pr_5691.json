{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODM2MTE2", "number": 5691, "title": "5052 utility class for AbstractNode background tasks", "bodyText": "", "createdAt": "2020-03-09T21:52:13Z", "url": "https://github.com/sleuthkit/autopsy/pull/5691", "merged": true, "mergeCommit": {"oid": "5bb85c5d5e26d11934eac1fbc34d9c033ce67804"}, "closed": true, "closedAt": "2020-03-10T19:00:43Z", "author": {"login": "rcordovano"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMFIMfgH2gAyMzg1ODM2MTE2OjQ2OGUwYjk1ZTllZThjMTZlNzI3YmE3NTExMjhkNmFmYjQzYjg4ZTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMXJQZAFqTM3MjIzMjEzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "468e0b95e9ee8c16e727ba751128d6afb43b88e6", "author": {"user": {"login": "rcordovano", "name": "Richard Cordovano"}}, "url": "https://github.com/sleuthkit/autopsy/commit/468e0b95e9ee8c16e727ba751128d6afb43b88e6", "committedDate": "2020-03-09T21:51:39Z", "message": "5052 utility class for AbstractNode backforund tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd42ee66a937adcab5735afd78f19e6c9efe15a6", "author": {"user": {"login": "rcordovano", "name": "Richard Cordovano"}}, "url": "https://github.com/sleuthkit/autopsy/commit/bd42ee66a937adcab5735afd78f19e6c9efe15a6", "committedDate": "2020-03-09T21:56:15Z", "message": "5052 utility class for AbstractNode backforund tasks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTE0Mjcy", "url": "https://github.com/sleuthkit/autopsy/pull/5691#pullrequestreview-372114272", "createdAt": "2020-03-10T16:23:11Z", "commit": {"oid": "bd42ee66a937adcab5735afd78f19e6c9efe15a6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoyMzoxMlrOF0Wr9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoyMzo0OVrOF0WttA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0MTk3Mw==", "bodyText": "Future.cancel() will set the interrupt flag on the underlying thread. What additional functionality do you want from Future that couldn't be solved with a check to Thread.currentThread().isInterrupted()?", "url": "https://github.com/sleuthkit/autopsy/pull/5691#discussion_r390441973", "createdAt": "2020-03-10T16:23:12Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/datamodel/utils/BackgroundTaskRunner.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datamodel.utils;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.logging.Level;\n+import org.openide.nodes.AbstractNode;\n+import org.openide.util.WeakListeners;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.datamodel.AbstractContentNode;\n+\n+/**\n+ * A utility that allows AbstractNode subclasses to execute background tasks in\n+ * threads in a thread pool. An AbstractNode subclass client needs to provide an\n+ * implementation of the NodeTask interface that does the background task and\n+ * returns the task result in the form of a PropertyChangeEvent. It also needs\n+ * to provide an implementation of a PropertyChangeListener to handle the\n+ * PropertyChangeEvent returned by the NodeTask. The utility uses weak\n+ * references to the AbstractNode and the PropertyChangeListener to safely\n+ * return results to the node, if it has not been destroyed by the NetBeans\n+ * framework at the time the task is completed.\n+ */\n+public final class BackgroundTaskRunner {\n+\n+    private static final Logger logger = Logger.getLogger(AbstractContentNode.class.getName());\n+    private static final Integer THREAD_POOL_SIZE = 10;\n+    private static final ExecutorService executor = Executors.newFixedThreadPool(THREAD_POOL_SIZE, new ThreadFactoryBuilder().setNameFormat(\"node-background-task-%d\").build());\n+\n+    /**\n+     * Implementations of this interface do a task in a background thread\n+     * supplied by this utility.\n+     */\n+    @FunctionalInterface\n+    public interface NodeTask {\n+\n+        /**\n+         * Performs a task in a thread supplied by this utility.\n+         *\n+         * @param future The future of the actual background task executing this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd42ee66a937adcab5735afd78f19e6c9efe15a6"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0MjQyMA==", "bodyText": "For instance, this could be a check to Thread.currentThread().isInterrupted(). Then the problem of passing the Future before execution is gone.", "url": "https://github.com/sleuthkit/autopsy/pull/5691#discussion_r390442420", "createdAt": "2020-03-10T16:23:49Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/datamodel/utils/BackgroundTaskRunner.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datamodel.utils;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.logging.Level;\n+import org.openide.nodes.AbstractNode;\n+import org.openide.util.WeakListeners;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.datamodel.AbstractContentNode;\n+\n+/**\n+ * A utility that allows AbstractNode subclasses to execute background tasks in\n+ * threads in a thread pool. An AbstractNode subclass client needs to provide an\n+ * implementation of the NodeTask interface that does the background task and\n+ * returns the task result in the form of a PropertyChangeEvent. It also needs\n+ * to provide an implementation of a PropertyChangeListener to handle the\n+ * PropertyChangeEvent returned by the NodeTask. The utility uses weak\n+ * references to the AbstractNode and the PropertyChangeListener to safely\n+ * return results to the node, if it has not been destroyed by the NetBeans\n+ * framework at the time the task is completed.\n+ */\n+public final class BackgroundTaskRunner {\n+\n+    private static final Logger logger = Logger.getLogger(AbstractContentNode.class.getName());\n+    private static final Integer THREAD_POOL_SIZE = 10;\n+    private static final ExecutorService executor = Executors.newFixedThreadPool(THREAD_POOL_SIZE, new ThreadFactoryBuilder().setNameFormat(\"node-background-task-%d\").build());\n+\n+    /**\n+     * Implementations of this interface do a task in a background thread\n+     * supplied by this utility.\n+     */\n+    @FunctionalInterface\n+    public interface NodeTask {\n+\n+        /**\n+         * Performs a task in a thread supplied by this utility.\n+         *\n+         * @param future The future of the actual background task executing this\n+         *               method, may be checked for task cancellation.\n+         *\n+         * @return A PropertyChangeEvent holding the result of the task.\n+         *\n+         * @throws Exception If there is an error performing the task.\n+         */\n+        PropertyChangeEvent run(Future<?> future) throws Exception;\n+    }\n+\n+    /**\n+     * Submits a background task for an AbstractNode to a dedicated thread pool.\n+     *\n+     * @param node     The AbstractNode.\n+     * @param task     The task to be done in the background.\n+     * @param listener A PropertyChangeListener for the AbstractNode to handle\n+     *                 the PropertyChangeEvent produced by the task.\n+     *\n+     * @return The Future for the Runnable used to run the task.\n+     */\n+    public static Future<?> submitTask(AbstractNode node, NodeTask task, PropertyChangeListener listener) {\n+        NodeBackgroundTask backgroundTask = new NodeBackgroundTask(node, task, listener);\n+        Future<?> future = executor.submit(backgroundTask);\n+        backgroundTask.setFuture(future);\n+        return future;\n+    }\n+\n+    /**\n+     * A Runnable that uses weak references to an AbstractNode and the\n+     * PropertyChangeListener for the node to safely return results to the node,\n+     * if it has not been destroyed by the NetBeans framework at the time the\n+     * task is completed.\n+     */\n+    private static class NodeBackgroundTask implements Runnable {\n+\n+        private final WeakReference<AbstractNode> weakNodeRef;\n+        private final NodeTask task;\n+        private final PropertyChangeListener weakListenerRef;\n+        private Future<?> future;\n+\n+        /**\n+         * Constructs a Runnable that uses weak references to an AbstractNode\n+         * and the PropertyChangeListener for the node to safely return results\n+         * to the node, if it still exists at the time the task is completed.\n+         *\n+         * @param node     The AbstractNode.\n+         * @param task     The task to be done in the background.\n+         * @param listener A PropertyChangeListener for the AbstractNode to\n+         *                 handle the PropertyChangeEvent produced by the task.\n+         */\n+        private NodeBackgroundTask(AbstractNode node, NodeTask task, PropertyChangeListener listener) {\n+            this.weakNodeRef = new WeakReference<>(node);\n+            this.task = task;\n+            this.weakListenerRef = WeakListeners.propertyChange(listener, null);\n+        }\n+\n+        @Override\n+        public void run() {\n+            AbstractNode node = weakNodeRef.get();\n+            if (node == null) {\n+                return;\n+            }\n+\n+            if (future.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd42ee66a937adcab5735afd78f19e6c9efe15a6"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e93ff5e39f9b8e70479e3f7b2d8deba9af36d1c5", "author": {"user": {"login": "rcordovano", "name": "Richard Cordovano"}}, "url": "https://github.com/sleuthkit/autopsy/commit/e93ff5e39f9b8e70479e3f7b2d8deba9af36d1c5", "committedDate": "2020-03-10T18:05:58Z", "message": "NodeBackgroundTaskRunner to AbstractNodePropertySheetTask"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8fe6ec1e57be944070c456c1fe767945d9b6c17", "author": {"user": {"login": "rcordovano", "name": "Richard Cordovano"}}, "url": "https://github.com/sleuthkit/autopsy/commit/e8fe6ec1e57be944070c456c1fe767945d9b6c17", "committedDate": "2020-03-10T18:09:14Z", "message": "NodeBackgroundTaskRunner to AbstractNodePropertySheetTask"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5d36505514a9ae2e6a1c57ed49eabaacd3896a2", "author": {"user": {"login": "rcordovano", "name": "Richard Cordovano"}}, "url": "https://github.com/sleuthkit/autopsy/commit/e5d36505514a9ae2e6a1c57ed49eabaacd3896a2", "committedDate": "2020-03-10T18:11:27Z", "message": "NodeBackgroundTaskRunner to AbstractNodePropertySheetTask"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjEyNTk1", "url": "https://github.com/sleuthkit/autopsy/pull/5691#pullrequestreview-372212595", "createdAt": "2020-03-10T18:24:14Z", "commit": {"oid": "e5d36505514a9ae2e6a1c57ed49eabaacd3896a2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNDoxNFrOF0bj0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNjoxM1rOF0bojw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMTgxMQ==", "bodyText": "The signature should likely be PropertySheetTask<T extends AbstractNode>. See the comment on computePropertyValue for more details.", "url": "https://github.com/sleuthkit/autopsy/pull/5691#discussion_r390521811", "createdAt": "2020-03-10T18:24:14Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/datamodel/utils/AbstractNodePropertySheetTask.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datamodel.utils;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.logging.Level;\n+import org.openide.nodes.AbstractNode;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.datamodel.AbstractContentNode;\n+\n+/**\n+ * An abstract base class for background tasks needed to compute values for the\n+ * property sheet of an AbstractNode.\n+ *\n+ * The results of the computation are returned by firing a PropertyChangeEvent\n+ * and the run method has an exception firewall with logging. These features\n+ * relieve the AbstractNode from having to create a thread to block on the get()\n+ * method of the task Future.\n+ *\n+ * Only weak references to the AbstractNode and its PropertyChangeListener are\n+ * held prior to task execution so that a queued task does not interfere with\n+ * garbage collection if the node has been destroyed by the NetBeans framework.\n+ *\n+ * A thread pool with descriptively named threads (node-background-task-N) is\n+ * provided for executing instances of the tasks.\n+ */\n+public abstract class AbstractNodePropertySheetTask implements Runnable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d36505514a9ae2e6a1c57ed49eabaacd3896a2"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMzAyMw==", "bodyText": "Lets assume the background task logic we are submitting is for a LocalFileNode. Its routine depends entirely on the result of LocalFileNode.hasContentChildren(). How will I be able to utilize this class for my use case?", "url": "https://github.com/sleuthkit/autopsy/pull/5691#discussion_r390523023", "createdAt": "2020-03-10T18:26:13Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/datamodel/utils/AbstractNodePropertySheetTask.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datamodel.utils;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.logging.Level;\n+import org.openide.nodes.AbstractNode;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+import org.sleuthkit.autopsy.datamodel.AbstractContentNode;\n+\n+/**\n+ * An abstract base class for background tasks needed to compute values for the\n+ * property sheet of an AbstractNode.\n+ *\n+ * The results of the computation are returned by firing a PropertyChangeEvent\n+ * and the run method has an exception firewall with logging. These features\n+ * relieve the AbstractNode from having to create a thread to block on the get()\n+ * method of the task Future.\n+ *\n+ * Only weak references to the AbstractNode and its PropertyChangeListener are\n+ * held prior to task execution so that a queued task does not interfere with\n+ * garbage collection if the node has been destroyed by the NetBeans framework.\n+ *\n+ * A thread pool with descriptively named threads (node-background-task-N) is\n+ * provided for executing instances of the tasks.\n+ */\n+public abstract class AbstractNodePropertySheetTask implements Runnable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(AbstractContentNode.class.getName());\n+    private static final Integer THREAD_POOL_SIZE = 10;\n+    private static final ExecutorService executor = Executors.newFixedThreadPool(THREAD_POOL_SIZE, new ThreadFactoryBuilder().setNameFormat(\"node-background-task-%d\").build());\n+    private final WeakReference<AbstractNode> weakNodeRef;\n+    private final WeakReference<PropertyChangeListener> weakListenerRef;\n+\n+    /**\n+     * Submits a task to compute values for the property sheet of an\n+     * AbstractNode to a thread pool dedicated to such tasks with descriptively\n+     * named threads (node-background-task-N).\n+     *\n+     * @param task The task.\n+     *\n+     * @return The Future of the task, may be used for task cancellation by\n+     *         calling Future.cancel(true).\n+     */\n+    public static Future<?> submitTask(AbstractNodePropertySheetTask task) {\n+        return executor.submit(task);\n+    }\n+\n+    /**\n+     * Constructs an abstract base class for background tasks needed to compute\n+     * values for the property sheet of an AbstractNode.\n+     *\n+     * The results of the computation are returned by firing a\n+     * PropertyChangeEvent and the run method has an exception firewall with\n+     * logging. These features relieve the AbstractNode from having to create a\n+     * thread to block on the get() method of the task Future.\n+     *\n+     * Only weak references to the AbstractNode and its PropertyChangeListener\n+     * are held prior to task execution so that a queued task does not interfere\n+     * with garbage collection if the node has been destroyed by the NetBeans\n+     * framework.\n+     *\n+     * A thread pool with descriptively named threads (node-background-task-N)\n+     * is provided for executing instances of the tasks.\n+     *\n+     * @param node     The node.\n+     * @param listener A property change listener for the node.\n+     */\n+    protected AbstractNodePropertySheetTask(AbstractNode node, PropertyChangeListener listener) {\n+        this.weakNodeRef = new WeakReference<>(node);\n+        this.weakListenerRef = new WeakReference<>(listener);\n+    }\n+\n+    /**\n+     * Computes the values for the property sheet of an AbstractNode. The\n+     * results of the computation are returned as a PropertyChangeEvent which is\n+     * fired to the PropertyChangeEventListener of the node.\n+     *\n+     * IMPORTANT: Implementations of this method should check for cancellation\n+     * by calling Thread.currentThread().isInterrupted() at approoraite\n+     * intervals.\n+     *\n+     * @param node The AbstractNode.\n+     *\n+     * @return The result of the computation as a PropertyChangeEvent.\n+     */\n+    protected abstract PropertyChangeEvent computePropertyValue(AbstractNode node) throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d36505514a9ae2e6a1c57ed49eabaacd3896a2"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3038a9b869c26cb4a960cc6a633478caf75fb8b5", "author": {"user": {"login": "rcordovano", "name": "Richard Cordovano"}}, "url": "https://github.com/sleuthkit/autopsy/commit/3038a9b869c26cb4a960cc6a633478caf75fb8b5", "committedDate": "2020-03-10T18:36:47Z", "message": "NodeBackgroundTaskRunner to AbstractNodePropertySheetTask"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjMyMTMz", "url": "https://github.com/sleuthkit/autopsy/pull/5691#pullrequestreview-372232133", "createdAt": "2020-03-10T18:51:06Z", "commit": {"oid": "3038a9b869c26cb4a960cc6a633478caf75fb8b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2794, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}