{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1OTM5Mzg3", "number": 5926, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMzo1NzowMFrOEBlciw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDo1ODo0NlrOEByLuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDk3NTQ3OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/GeoLocationParseResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMzo1NzowMFrOGdhO-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMzo1NzowMFrOGdhO-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNjM5Mw==", "bodyText": "Why not throw an illegal argument here? By wrapping it into this checked exception it becomes impossible to differentiate between programming error vs unrecoverable error.", "url": "https://github.com/sleuthkit/autopsy/pull/5926#discussion_r433606393", "createdAt": "2020-06-02T03:57:00Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/GeoLocationParseResult.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.geolocation.datamodel;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.ListUtils;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+\n+/**\n+ * The result of attempting to parse a GeoLocation object.\n+ */\n+public class GeoLocationParseResult<T> {\n+\n+    private final boolean successfullyParsed;\n+    private final GeoLocationDataException exception;\n+    private final BlackboardArtifact artifact;\n+    private final T geoObject;\n+\n+    GeoLocationParseResult(BlackboardArtifact artifact,\n+            boolean successfullyParsed, GeoLocationDataException exception, T geoObject) {\n+\n+        this.successfullyParsed = successfullyParsed;\n+        this.exception = exception;\n+        this.artifact = artifact;\n+        this.geoObject = geoObject;\n+    }\n+\n+    /**\n+     * Creates a GeoLocationParseResult as the result of a successful parse.\n+     * @param <T>           The type of object to parse.\n+     * @param artifact      The artifact that was parsed or failed in parsing\n+     *                      (could be null).\n+     * @param geoObject     The GeoLocation object to include in result.\n+     *\n+     * @return The generated WaypointParseResult.\n+     */\n+    public static <T> GeoLocationParseResult<T> create(BlackboardArtifact artifact, T geoObject) {\n+        if (geoObject == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22c8cb8bf60a13b65eb4a3a837108978548d9999"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDk5MDQyOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/GeoLocationParseResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDowNzoxMFrOGdhXqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMToxNTozN1rOGdtAxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwODYxOA==", "bodyText": "What is the need for separating the failed vs the parsed? From what I can tell, you just use the returned lists to answer boolean queries (not null, is empty, etc).", "url": "https://github.com/sleuthkit/autopsy/pull/5926#discussion_r433608618", "createdAt": "2020-06-02T04:07:10Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/GeoLocationParseResult.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.geolocation.datamodel;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.ListUtils;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+\n+/**\n+ * The result of attempting to parse a GeoLocation object.\n+ */\n+public class GeoLocationParseResult<T> {\n+\n+    private final boolean successfullyParsed;\n+    private final GeoLocationDataException exception;\n+    private final BlackboardArtifact artifact;\n+    private final T geoObject;\n+\n+    GeoLocationParseResult(BlackboardArtifact artifact,\n+            boolean successfullyParsed, GeoLocationDataException exception, T geoObject) {\n+\n+        this.successfullyParsed = successfullyParsed;\n+        this.exception = exception;\n+        this.artifact = artifact;\n+        this.geoObject = geoObject;\n+    }\n+\n+    /**\n+     * Creates a GeoLocationParseResult as the result of a successful parse.\n+     * @param <T>           The type of object to parse.\n+     * @param artifact      The artifact that was parsed or failed in parsing\n+     *                      (could be null).\n+     * @param geoObject     The GeoLocation object to include in result.\n+     *\n+     * @return The generated WaypointParseResult.\n+     */\n+    public static <T> GeoLocationParseResult<T> create(BlackboardArtifact artifact, T geoObject) {\n+        if (geoObject == null) {\n+            return new GeoLocationParseResult(artifact, false, new GeoLocationDataException(\"GeoLocation object provided was null\"), null);\n+        }\n+\n+        return new GeoLocationParseResult(artifact, true, null, geoObject);\n+    }\n+\n+    /**\n+     * Creates a GeoLocationParseResult indicating a failed parsing.\n+     *\n+     * @param <T>           The type of GeoLocation object that was supposed to\n+     *                      be parsed.\n+     * @param artifact      The artifact that was parsed or failed in parsing\n+     *                      (could be null).\n+     * @param exception     The exception generated.\n+     *\n+     * @return The GeoLocationParseResult indicating an error.\n+     */\n+    public static <T> GeoLocationParseResult<T> error(BlackboardArtifact artifact, GeoLocationDataException exception) {\n+        return new GeoLocationParseResult(artifact, false, exception, null);\n+    }\n+\n+    /**\n+     * The result of splitting an iterable of GeoLocationParseResults into a\n+     * list of successfully parsed items and a list of failures.\n+     *\n+     * @param <T> The parsed item type.\n+     */\n+    public static class SeparationResult<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22c8cb8bf60a13b65eb4a3a837108978548d9999"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc5OTM2NA==", "bodyText": "I initially created this because of a misunderstanding I had that I would need to report the track items that failed to parse to the user along with returning the items that successfully parsed.  Since the error that is reported to the user is generalized, this could potentially be simplified, but methods like GeoPath.getTracks and WaypointBuilder.getWaypointForArtifact will need to have something that returns an object containing the list of successfully parsed items for display and some indication that there was an error.", "url": "https://github.com/sleuthkit/autopsy/pull/5926#discussion_r433799364", "createdAt": "2020-06-02T11:15:37Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/GeoLocationParseResult.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.geolocation.datamodel;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.ListUtils;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+\n+/**\n+ * The result of attempting to parse a GeoLocation object.\n+ */\n+public class GeoLocationParseResult<T> {\n+\n+    private final boolean successfullyParsed;\n+    private final GeoLocationDataException exception;\n+    private final BlackboardArtifact artifact;\n+    private final T geoObject;\n+\n+    GeoLocationParseResult(BlackboardArtifact artifact,\n+            boolean successfullyParsed, GeoLocationDataException exception, T geoObject) {\n+\n+        this.successfullyParsed = successfullyParsed;\n+        this.exception = exception;\n+        this.artifact = artifact;\n+        this.geoObject = geoObject;\n+    }\n+\n+    /**\n+     * Creates a GeoLocationParseResult as the result of a successful parse.\n+     * @param <T>           The type of object to parse.\n+     * @param artifact      The artifact that was parsed or failed in parsing\n+     *                      (could be null).\n+     * @param geoObject     The GeoLocation object to include in result.\n+     *\n+     * @return The generated WaypointParseResult.\n+     */\n+    public static <T> GeoLocationParseResult<T> create(BlackboardArtifact artifact, T geoObject) {\n+        if (geoObject == null) {\n+            return new GeoLocationParseResult(artifact, false, new GeoLocationDataException(\"GeoLocation object provided was null\"), null);\n+        }\n+\n+        return new GeoLocationParseResult(artifact, true, null, geoObject);\n+    }\n+\n+    /**\n+     * Creates a GeoLocationParseResult indicating a failed parsing.\n+     *\n+     * @param <T>           The type of GeoLocation object that was supposed to\n+     *                      be parsed.\n+     * @param artifact      The artifact that was parsed or failed in parsing\n+     *                      (could be null).\n+     * @param exception     The exception generated.\n+     *\n+     * @return The GeoLocationParseResult indicating an error.\n+     */\n+    public static <T> GeoLocationParseResult<T> error(BlackboardArtifact artifact, GeoLocationDataException exception) {\n+        return new GeoLocationParseResult(artifact, false, exception, null);\n+    }\n+\n+    /**\n+     * The result of splitting an iterable of GeoLocationParseResults into a\n+     * list of successfully parsed items and a list of failures.\n+     *\n+     * @param <T> The parsed item type.\n+     */\n+    public static class SeparationResult<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwODYxOA=="}, "originalCommit": {"oid": "22c8cb8bf60a13b65eb4a3a837108978548d9999"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTAwOTI2OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/WaypointBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDoyMDozM1rOGdhjHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMToyMDo1OVrOGdtK_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxMTU1MQ==", "bodyText": "This is very confusing. Could you instead go for an API like parseWaypoint(artifact, EXIFWaypoint.class)?", "url": "https://github.com/sleuthkit/autopsy/pull/5926#discussion_r433611551", "createdAt": "2020-06-02T04:20:33Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/WaypointBuilder.java", "diffHunk": "@@ -619,44 +622,88 @@ static private String getWaypointListQuery(List<DataSource> dataSources) {\n                 dataSourceList);\n     }\n \n+    /**\n+     * A parser that could throw a GeoLocationDataException when there is a\n+     * parse issue.\n+     *\n+     * @param <T> The return type.\n+     */\n+    private interface ParserWithError<T> {\n+\n+        T parse(BlackboardArtifact artifact) throws GeoLocationDataException;\n+    }\n+\n+    /**\n+     * Parses one waypoint.\n+     *\n+     * @param parser The parser to use.\n+     * @param artifact The artifact to be parsed.\n+     *\n+     * @return Returns a parse result that is either successful with a parsed\n+     *         waypoint or unsuccessful with an exception.\n+     */\n+    private static GeoLocationParseResult<Waypoint> parseWaypoint(ParserWithError<Waypoint> parser, BlackboardArtifact artifact) {\n+        try {\n+            return GeoLocationParseResult.create(artifact, parser.parse(artifact));\n+        } catch (GeoLocationDataException ex) {\n+            return GeoLocationParseResult.error(artifact, ex);\n+        }\n+    }\n+\n+    /**\n+     * Parses a list of waypoints.\n+     *\n+     * @param parser The parser to use.\n+     * @param artifact The artifact to be parsed.\n+     *\n+     * @return Returns a list of parse results with the successfully parsed\n+     *         items or a list with one item indicating the failure.\n+     */\n+    private static List<GeoLocationParseResult<Waypoint>> parseWaypoints(ParserWithError<List<Waypoint>> parser, BlackboardArtifact artifact) {\n+        try {\n+            return parser.parse(artifact).stream()\n+                    .map((result) -> GeoLocationParseResult.create(artifact, result))\n+                    .collect(Collectors.toList());\n+\n+        } catch (GeoLocationDataException ex) {\n+            return Arrays.asList(GeoLocationParseResult.error(artifact, ex));\n+        }\n+    }\n+\n     /**\n      * Create a Waypoint object for the given Blackboard artifact.\n      *\n      * @param artifact The artifact to create the waypoint from\n      * @param type     The type of artifact\n      *\n      * @return A new waypoint object\n-     *\n-     * @throws GeoLocationDataException\n      */\n-    static private List<Waypoint> getWaypointForArtifact(BlackboardArtifact artifact, ARTIFACT_TYPE type) throws GeoLocationDataException {\n-        List<Waypoint> waypoints = new ArrayList<>();\n+    private static List<GeoLocationParseResult<Waypoint>> getWaypointForArtifact(BlackboardArtifact artifact, ARTIFACT_TYPE type) {\n+        List<GeoLocationParseResult<Waypoint>> waypoints = new ArrayList<>();\n         switch (type) {\n             case TSK_METADATA_EXIF:\n-                waypoints.add(new EXIFWaypoint(artifact));\n+                waypoints.add(parseWaypoint((a) -> new EXIFWaypoint(a), artifact));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22c8cb8bf60a13b65eb4a3a837108978548d9999"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgwMTk4MA==", "bodyText": "How about something like waypoints.add(parseWaypoint(EXIFWaypoint::new, artifact));?", "url": "https://github.com/sleuthkit/autopsy/pull/5926#discussion_r433801980", "createdAt": "2020-06-02T11:20:59Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/WaypointBuilder.java", "diffHunk": "@@ -619,44 +622,88 @@ static private String getWaypointListQuery(List<DataSource> dataSources) {\n                 dataSourceList);\n     }\n \n+    /**\n+     * A parser that could throw a GeoLocationDataException when there is a\n+     * parse issue.\n+     *\n+     * @param <T> The return type.\n+     */\n+    private interface ParserWithError<T> {\n+\n+        T parse(BlackboardArtifact artifact) throws GeoLocationDataException;\n+    }\n+\n+    /**\n+     * Parses one waypoint.\n+     *\n+     * @param parser The parser to use.\n+     * @param artifact The artifact to be parsed.\n+     *\n+     * @return Returns a parse result that is either successful with a parsed\n+     *         waypoint or unsuccessful with an exception.\n+     */\n+    private static GeoLocationParseResult<Waypoint> parseWaypoint(ParserWithError<Waypoint> parser, BlackboardArtifact artifact) {\n+        try {\n+            return GeoLocationParseResult.create(artifact, parser.parse(artifact));\n+        } catch (GeoLocationDataException ex) {\n+            return GeoLocationParseResult.error(artifact, ex);\n+        }\n+    }\n+\n+    /**\n+     * Parses a list of waypoints.\n+     *\n+     * @param parser The parser to use.\n+     * @param artifact The artifact to be parsed.\n+     *\n+     * @return Returns a list of parse results with the successfully parsed\n+     *         items or a list with one item indicating the failure.\n+     */\n+    private static List<GeoLocationParseResult<Waypoint>> parseWaypoints(ParserWithError<List<Waypoint>> parser, BlackboardArtifact artifact) {\n+        try {\n+            return parser.parse(artifact).stream()\n+                    .map((result) -> GeoLocationParseResult.create(artifact, result))\n+                    .collect(Collectors.toList());\n+\n+        } catch (GeoLocationDataException ex) {\n+            return Arrays.asList(GeoLocationParseResult.error(artifact, ex));\n+        }\n+    }\n+\n     /**\n      * Create a Waypoint object for the given Blackboard artifact.\n      *\n      * @param artifact The artifact to create the waypoint from\n      * @param type     The type of artifact\n      *\n      * @return A new waypoint object\n-     *\n-     * @throws GeoLocationDataException\n      */\n-    static private List<Waypoint> getWaypointForArtifact(BlackboardArtifact artifact, ARTIFACT_TYPE type) throws GeoLocationDataException {\n-        List<Waypoint> waypoints = new ArrayList<>();\n+    private static List<GeoLocationParseResult<Waypoint>> getWaypointForArtifact(BlackboardArtifact artifact, ARTIFACT_TYPE type) {\n+        List<GeoLocationParseResult<Waypoint>> waypoints = new ArrayList<>();\n         switch (type) {\n             case TSK_METADATA_EXIF:\n-                waypoints.add(new EXIFWaypoint(artifact));\n+                waypoints.add(parseWaypoint((a) -> new EXIFWaypoint(a), artifact));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxMTU1MQ=="}, "originalCommit": {"oid": "22c8cb8bf60a13b65eb4a3a837108978548d9999"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTAyNjcwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/Track.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDozMjoxMVrOGdhtvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMToyNDozNVrOGdtSCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxNDI2OQ==", "bodyText": "Can this become an illegal argument? And preferably out in the constructor of Track? I'm worried that GeoLocationDataException is becoming a 'god' exception.", "url": "https://github.com/sleuthkit/autopsy/pull/5926#discussion_r433614269", "createdAt": "2020-06-02T04:32:11Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/Track.java", "diffHunk": "@@ -130,14 +133,17 @@ private void buildPath(GeoTrackPoints points, BlackboardArtifact artifact) throw\n      */\n     private GeoTrackPoints getPointsList(Map<BlackboardAttribute.ATTRIBUTE_TYPE, BlackboardAttribute> attributeMap) throws GeoLocationDataException {\n         BlackboardAttribute attribute = attributeMap.get(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_GEO_TRACKPOINTS);\n-        if (attribute != null) {\n-            try {\n-                return BlackboardJsonAttrUtil.fromAttribute(attribute, GeoTrackPoints.class);\n-            } catch (InvalidJsonException ex) {\n-                throw new GeoLocationDataException(\"Unable to parse track points in TSK_GEO_TRACKPOINTS attribute\", ex);\n-            }\n+        if (attribute == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22c8cb8bf60a13b65eb4a3a837108978548d9999"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgwMzc4Ng==", "bodyText": "I had a conversation where I think we decided on a GeoLocationDataException, because, similar to json parsing, the artifact attributes being passed were in a malformed state if they did not contain track information.", "url": "https://github.com/sleuthkit/autopsy/pull/5926#discussion_r433803786", "createdAt": "2020-06-02T11:24:35Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/Track.java", "diffHunk": "@@ -130,14 +133,17 @@ private void buildPath(GeoTrackPoints points, BlackboardArtifact artifact) throw\n      */\n     private GeoTrackPoints getPointsList(Map<BlackboardAttribute.ATTRIBUTE_TYPE, BlackboardAttribute> attributeMap) throws GeoLocationDataException {\n         BlackboardAttribute attribute = attributeMap.get(BlackboardAttribute.ATTRIBUTE_TYPE.TSK_GEO_TRACKPOINTS);\n-        if (attribute != null) {\n-            try {\n-                return BlackboardJsonAttrUtil.fromAttribute(attribute, GeoTrackPoints.class);\n-            } catch (InvalidJsonException ex) {\n-                throw new GeoLocationDataException(\"Unable to parse track points in TSK_GEO_TRACKPOINTS attribute\", ex);\n-            }\n+        if (attribute == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxNDI2OQ=="}, "originalCommit": {"oid": "22c8cb8bf60a13b65eb4a3a837108978548d9999"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTAzMjM2OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/GeoLocationParseResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDozNTo1OFrOGdhxRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDozNTo1OFrOGdhxRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxNTE3Mw==", "bodyText": "Is getException() or getArtifact() used?", "url": "https://github.com/sleuthkit/autopsy/pull/5926#discussion_r433615173", "createdAt": "2020-06-02T04:35:58Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/GeoLocationParseResult.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.geolocation.datamodel;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.ListUtils;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+\n+/**\n+ * The result of attempting to parse a GeoLocation object.\n+ */\n+public class GeoLocationParseResult<T> {\n+\n+    private final boolean successfullyParsed;\n+    private final GeoLocationDataException exception;\n+    private final BlackboardArtifact artifact;\n+    private final T geoObject;\n+\n+    GeoLocationParseResult(BlackboardArtifact artifact,\n+            boolean successfullyParsed, GeoLocationDataException exception, T geoObject) {\n+\n+        this.successfullyParsed = successfullyParsed;\n+        this.exception = exception;\n+        this.artifact = artifact;\n+        this.geoObject = geoObject;\n+    }\n+\n+    /**\n+     * Creates a GeoLocationParseResult as the result of a successful parse.\n+     * @param <T>           The type of object to parse.\n+     * @param artifact      The artifact that was parsed or failed in parsing\n+     *                      (could be null).\n+     * @param geoObject     The GeoLocation object to include in result.\n+     *\n+     * @return The generated WaypointParseResult.\n+     */\n+    public static <T> GeoLocationParseResult<T> create(BlackboardArtifact artifact, T geoObject) {\n+        if (geoObject == null) {\n+            return new GeoLocationParseResult(artifact, false, new GeoLocationDataException(\"GeoLocation object provided was null\"), null);\n+        }\n+\n+        return new GeoLocationParseResult(artifact, true, null, geoObject);\n+    }\n+\n+    /**\n+     * Creates a GeoLocationParseResult indicating a failed parsing.\n+     *\n+     * @param <T>           The type of GeoLocation object that was supposed to\n+     *                      be parsed.\n+     * @param artifact      The artifact that was parsed or failed in parsing\n+     *                      (could be null).\n+     * @param exception     The exception generated.\n+     *\n+     * @return The GeoLocationParseResult indicating an error.\n+     */\n+    public static <T> GeoLocationParseResult<T> error(BlackboardArtifact artifact, GeoLocationDataException exception) {\n+        return new GeoLocationParseResult(artifact, false, exception, null);\n+    }\n+\n+    /**\n+     * The result of splitting an iterable of GeoLocationParseResults into a\n+     * list of successfully parsed items and a list of failures.\n+     *\n+     * @param <T> The parsed item type.\n+     */\n+    public static class SeparationResult<T> {\n+\n+        private final List<GeoLocationParseResult<T>> failedItems;\n+        private final List<T> parsedItems;\n+\n+        SeparationResult(List<GeoLocationParseResult<T>> failedItems, List<T> parsedItems) {\n+            this.failedItems = failedItems;\n+            this.parsedItems = parsedItems;\n+        }\n+\n+        /**\n+         * @return The items that failed to parse properly.\n+         */\n+        public List<GeoLocationParseResult<T>> getFailedItems() {\n+            return failedItems;\n+        }\n+\n+        /**\n+         * @return The underlying items that were successfully parsed.\n+         */\n+        public List<T> getParsedItems() {\n+            return parsedItems;\n+        }\n+    }\n+\n+    /**\n+     * Separates an iterable of GeoLocationParseResult objects into failed items\n+     * and successfully parsed items.\n+     *\n+     * @param <T>   The underlying type that was parsed.\n+     * @param items The items to separate.\n+     *\n+     * @return The SeparationResult with successfully parsed and failed items.\n+     */\n+    public static <T> SeparationResult<T> separate(Iterable<? extends GeoLocationParseResult<T>> items) {\n+        List<GeoLocationParseResult<T>> failedItems = new ArrayList<>();\n+        List<T> parsedItems = new ArrayList<>();\n+        for (GeoLocationParseResult<T> item : items) {\n+            if (item.isSuccessfullyParsed()) {\n+                parsedItems.add(item.getGeoLocationObject());\n+            } else {\n+                failedItems.add(item);\n+            }\n+        }\n+\n+        return new SeparationResult<T>(ListUtils.unmodifiableList(failedItems), ListUtils.unmodifiableList(parsedItems));\n+    }\n+\n+    /**\n+     * Whether or not the GeoLocation object has been successfully parsed. If\n+     * true, there should be a non-null GeoLocation object present. Otherwise,\n+     * there should be a non-null exception.\n+     *\n+     * @return Whether or not the GeoLocation object has been successfully\n+     *         parsed.\n+     */\n+    public boolean isSuccessfullyParsed() {\n+        return successfullyParsed;\n+    }\n+\n+    /**\n+     * @return The exception caused in attempting to parse the GeoLocation\n+     *         object if there was an exception.\n+     */\n+    public GeoLocationDataException getException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22c8cb8bf60a13b65eb4a3a837108978548d9999"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTAzNzQwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/GeoLocationParseResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDo0MDowMVrOGdh0nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMToyMjozM1rOGdtOLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxNjAzMQ==", "bodyText": "Since these are aggregated everywhere and then partition and managed in code outside of this class, what if the granularity of this class was not on a single ParseResult, but multiple? I think that might simplify things, what do you think?", "url": "https://github.com/sleuthkit/autopsy/pull/5926#discussion_r433616031", "createdAt": "2020-06-02T04:40:01Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/GeoLocationParseResult.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.geolocation.datamodel;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.ListUtils;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+\n+/**\n+ * The result of attempting to parse a GeoLocation object.\n+ */\n+public class GeoLocationParseResult<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22c8cb8bf60a13b65eb4a3a837108978548d9999"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgwMjc5OA==", "bodyText": "Sure.", "url": "https://github.com/sleuthkit/autopsy/pull/5926#discussion_r433802798", "createdAt": "2020-06-02T11:22:33Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/GeoLocationParseResult.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.geolocation.datamodel;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.ListUtils;\n+import org.sleuthkit.datamodel.BlackboardArtifact;\n+\n+/**\n+ * The result of attempting to parse a GeoLocation object.\n+ */\n+public class GeoLocationParseResult<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxNjAzMQ=="}, "originalCommit": {"oid": "22c8cb8bf60a13b65eb4a3a837108978548d9999"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzA1OTEwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/GeoLocationParseResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDo1ODowNlrOGd1v_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDo1ODowNlrOGd1v_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk0MjUyNw==", "bodyText": "I believed Codacy flagged this. I think this could be replaced with this.successfullyParsed &&= toAdd.isSuccessfullyParsed().", "url": "https://github.com/sleuthkit/autopsy/pull/5926#discussion_r433942527", "createdAt": "2020-06-02T14:58:06Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/GeoLocationParseResult.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.geolocation.datamodel;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.python.google.common.collect.ImmutableList;\n+\n+/**\n+ * The result of attempting to parse a GeoLocation object.\n+ */\n+public class GeoLocationParseResult<T> {\n+\n+    private boolean successfullyParsed;\n+    private List<T> items = new ArrayList<>();\n+\n+    /**\n+     * Returns a GeoLocationParseResult with no items and declared successfully\n+     * parsed.\n+     */\n+    public GeoLocationParseResult() {\n+        successfullyParsed = true;\n+    }\n+\n+    /**\n+     * Returns a new GeoLocationParseResult.\n+     *\n+     * @param items              The items to copy to this result (can be null).\n+     * @param successfullyParsed Whether or not the operation was entirely\n+     *                           successful.\n+     */\n+    public GeoLocationParseResult(List<T> items, boolean successfullyParsed) {\n+        this.successfullyParsed = successfullyParsed;\n+\n+        if (items != null) {\n+            this.items.addAll(items);\n+        }\n+    }\n+\n+    /**\n+     * Adds the content of the GeoLocationParseResult parameter to this. Items\n+     * will be concatenated and this object's successfullyParsed status will be\n+     * true if it is already true and the object is true as well.\n+     *\n+     * @param toAdd The GeoLocationParseResult to add.\n+     */\n+    public void add(GeoLocationParseResult<T> toAdd) {\n+        this.successfullyParsed = (this.successfullyParsed == false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ade5a4f344741007b1c72cb5247b8c04a5cbaf6"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzA2MjM1OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/GeoLocationParseResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDo1ODo0N1rOGd1yAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDo1ODo0N1rOGd1yAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk0MzA0MQ==", "bodyText": "Could you update this header while you're in here?", "url": "https://github.com/sleuthkit/autopsy/pull/5926#discussion_r433943041", "createdAt": "2020-06-02T14:58:47Z", "author": {"login": "dannysmyda"}, "path": "Core/src/org/sleuthkit/autopsy/geolocation/datamodel/GeoLocationParseResult.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.geolocation.datamodel;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.python.google.common.collect.ImmutableList;\n+\n+/**\n+ * The result of attempting to parse a GeoLocation object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ade5a4f344741007b1c72cb5247b8c04a5cbaf6"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 639, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}