{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNTk2NzYx", "number": 6205, "reviewThreads": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzoxMzozNVrOEbqmwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDowMzoyOFrOEcuolA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDQ1MDU3OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceTopDomainsSummary.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzoxMzozNVrOHFumEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozMzo0M1rOHFxehA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2ODMzOQ==", "bodyText": "Remove the commented out code?", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475768339", "createdAt": "2020-08-24T17:13:35Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceTopDomainsSummary.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.datamodel;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.sleuthkit.datamodel.DataSource;\n+\n+/**\n+ * Provides summary information about top domains in a datasource.\n+ */\n+public class DataSourceTopDomainsSummary {\n+    private static final long SLEEP_TIME = 5000;\n+        \n+//    private final SleuthkitCaseProvider provider;\n+//    \n+//    public DataSourceTopDomainsSummary() {\n+//        this(SleuthkitCaseProvider.DEFAULT);\n+//    }\n+//        \n+//    public DataSourceTopDomainsSummary(SleuthkitCaseProvider provider) {\n+//        this.provider = provider;\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwNzQwNg==", "bodyText": "Same here.  I can remove or provide an explanation of why this is commented out, but I'm hoping this code will be of use when we have the underlying query.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475807406", "createdAt": "2020-08-24T18:18:16Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceTopDomainsSummary.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.datamodel;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.sleuthkit.datamodel.DataSource;\n+\n+/**\n+ * Provides summary information about top domains in a datasource.\n+ */\n+public class DataSourceTopDomainsSummary {\n+    private static final long SLEEP_TIME = 5000;\n+        \n+//    private final SleuthkitCaseProvider provider;\n+//    \n+//    public DataSourceTopDomainsSummary() {\n+//        this(SleuthkitCaseProvider.DEFAULT);\n+//    }\n+//        \n+//    public DataSourceTopDomainsSummary(SleuthkitCaseProvider provider) {\n+//        this.provider = provider;\n+//    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2ODMzOQ=="}, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNTU1Ng==", "bodyText": "I can take it out for now.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475815556", "createdAt": "2020-08-24T18:33:43Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceTopDomainsSummary.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.datamodel;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.sleuthkit.datamodel.DataSource;\n+\n+/**\n+ * Provides summary information about top domains in a datasource.\n+ */\n+public class DataSourceTopDomainsSummary {\n+    private static final long SLEEP_TIME = 5000;\n+        \n+//    private final SleuthkitCaseProvider provider;\n+//    \n+//    public DataSourceTopDomainsSummary() {\n+//        this(SleuthkitCaseProvider.DEFAULT);\n+//    }\n+//        \n+//    public DataSourceTopDomainsSummary(SleuthkitCaseProvider provider) {\n+//        this.provider = provider;\n+//    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2ODMzOQ=="}, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDUwMTU3OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/TopDomainsResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzoyMzozMFrOHFvFxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODoxNzozMlrOHFw9Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NjQ1NA==", "bodyText": "This whole file needs method headers.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475776454", "createdAt": "2020-08-24T17:23:30Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/TopDomainsResult.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.datamodel;\n+\n+import java.util.Date;\n+\n+/**\n+ * Describes a result of a program run on a datasource.\n+ */\n+public class TopDomainsResult {\n+\n+    private final String domain;\n+    private final String url;\n+    private final Long visitTimes;\n+    private final Date lastVisit;\n+\n+    public TopDomainsResult(String domain, String url, Long visitTimes, Date lastVisit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwNzAzOQ==", "bodyText": "I can put in headers for this file, but I'm assuming this will likely change once we have a better understanding of the expectation for this table as well as where we are acquiring this data.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475807039", "createdAt": "2020-08-24T18:17:32Z", "author": {"login": "gdicristofaro"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/TopDomainsResult.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.datamodel;\n+\n+import java.util.Date;\n+\n+/**\n+ * Describes a result of a program run on a datasource.\n+ */\n+public class TopDomainsResult {\n+\n+    private final String domain;\n+    private final String url;\n+    private final Long visitTimes;\n+    private final Date lastVisit;\n+\n+    public TopDomainsResult(String domain, String url, Long visitTimes, Date lastVisit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NjQ1NA=="}, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDUxODk3OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/ui/DataSourceSummaryUserActivityPanel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzoyODoxNFrOHFvQVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzoyODoxNFrOHFvQVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3OTE1OQ==", "bodyText": "Method header.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475779159", "createdAt": "2020-08-24T17:28:14Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/ui/DataSourceSummaryUserActivityPanel.java", "diffHunk": "@@ -44,27 +50,83 @@\n     \"DataSourceSummaryUserActivityPanel_TopProgramsTableModel_name_header=Program\",\n     \"DataSourceSummaryUserActivityPanel_TopProgramsTableModel_folder_header=Folder\",\n     \"DataSourceSummaryUserActivityPanel_TopProgramsTableModel_count_header=Run Times\",\n-    \"DataSourceSummaryUserActivityPanel_TopProgramsTableModel_lastrun_header=Last Run\"\n-})\n+    \"DataSourceSummaryUserActivityPanel_TopProgramsTableModel_lastrun_header=Last Run\",\n+    \"DataSourceSummaryUserActivityPanel_TopDomainsTableModel_domain_header=Domain\",\n+    \"DataSourceSummaryUserActivityPanel_TopDomainsTableModel_url_header=URL\",\n+    \"DataSourceSummaryUserActivityPanel_TopDomainsTableModel_lastAccess_header=Last Access\",})\n public class DataSourceSummaryUserActivityPanel extends javax.swing.JPanel {\n \n     private static final long serialVersionUID = 1L;\n     private static final DateFormat DATETIME_FORMAT = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\", Locale.getDefault());\n     private static final int TOP_PROGS_COUNT = 10;\n-    private static final DefaultTableCellRenderer RIGHT_ALIGNED_RENDERER = new DefaultTableCellRenderer();\n+    private static final int TOP_DOMAINS_COUNT = 10;\n \n-    static {\n-        RIGHT_ALIGNED_RENDERER.setHorizontalAlignment(JLabel.RIGHT);\n-    }\n+    private final SwingWorkerSequentialRunner loader = new SwingWorkerSequentialRunner();\n+    private final DataResultJTable<TopProgramsResult> topProgramsTable;\n+    private final DataResultJTable<TopDomainsResult> recentDomainsTable;\n+    private final List<DataFetchComponents<DataSource, ?>> dataFetchComponents;\n \n     private DataSource dataSource;\n \n     /**\n      * Creates new form DataSourceUserActivityPanel\n      */\n     public DataSourceSummaryUserActivityPanel() {\n+        this(new DataSourceTopProgramsSummary(), new DataSourceTopDomainsSummary());\n+    }\n+\n+    public DataSourceSummaryUserActivityPanel(DataSourceTopProgramsSummary topProgramsData, DataSourceTopDomainsSummary topDomainsData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDU3Njc1OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataLoadingResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo0NTozMFrOHFv0FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo0NTozMFrOHFv0FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc4ODMwOQ==", "bodyText": "method header", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475788309", "createdAt": "2020-08-24T17:45:30Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataLoadingResult.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.guiutils.internal;\n+\n+/**\n+ * The intermediate or end result of a loading process.\n+ */\n+public final class DataLoadingResult<R> {\n+\n+    /**\n+     * The state of loading in the result.\n+     */\n+    public enum ProcessorState {\n+        LOADING, NOT_LOADED, LOADED, LOAD_ERROR\n+    }\n+\n+    // Since loading doesn't have any typed arguments, a static final instance is used.\n+    private static final DataLoadingResult<Object> LOADING = new DataLoadingResult(ProcessorState.LOADING, null, null);\n+\n+    // Since not loaded doesn't have any typed arguments, a static final instance is used.\n+    private static final DataLoadingResult<Object> NOT_LOADED = new DataLoadingResult(ProcessorState.LOADED, null, null);\n+\n+    /**\n+     * @return Returns a data loading result.\n+     */\n+    public static <R> DataLoadingResult<R> getLoading() {\n+        return (DataLoadingResult<R>) LOADING;\n+    }\n+\n+    /**\n+     * @return Returns a 'not loaded' result.\n+     */\n+    public static <R> DataLoadingResult<R> getNotLoaded() {\n+        return (DataLoadingResult<R>) NOT_LOADED;\n+    }\n+\n+    /**\n+     * Creates a DataLoadingResult of loaded data including the data.\n+     * @param data The data.\n+     * @return The loaded data result.\n+     */\n+    public static <R> DataLoadingResult<R> getLoaded(R data) {\n+        return new DataLoadingResult<R>(ProcessorState.LOADED, data, null);\n+    }\n+\n+    /**\n+     * Returns a load error result.\n+     * @param e The exception (if any) present with the error.\n+     * @return \n+     */\n+    static <R> DataLoadingResult<R> getLoadError(DataProcessorException e) {\n+        return new DataLoadingResult<R>(ProcessorState.LOAD_ERROR, null, e);\n+    }\n+\n+    private final ProcessorState state;\n+    private final R data;\n+    private final DataProcessorException exception;\n+\n+    private DataLoadingResult(ProcessorState state, R data, DataProcessorException exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDU4MzczOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataLoadingResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo0NzozMFrOHFv4ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo0NzozMFrOHFv4ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc4OTQxMw==", "bodyText": "General comment for the file, make sure you are formatting the file.  This file has not been formatted.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475789413", "createdAt": "2020-08-24T17:47:30Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataLoadingResult.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDU4ODE5OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataLoadingResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo0ODo1MFrOHFv7RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo0ODo1MFrOHFv7RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5MDE0OQ==", "bodyText": "DataLoadingResult<>, the R is not needed.  netbeans is saying:\nRedundant type arguments in new expression (use diamond operator instead)\nThis is happening multiple places in the file.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475790149", "createdAt": "2020-08-24T17:48:50Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataLoadingResult.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.guiutils.internal;\n+\n+/**\n+ * The intermediate or end result of a loading process.\n+ */\n+public final class DataLoadingResult<R> {\n+\n+    /**\n+     * The state of loading in the result.\n+     */\n+    public enum ProcessorState {\n+        LOADING, NOT_LOADED, LOADED, LOAD_ERROR\n+    }\n+\n+    // Since loading doesn't have any typed arguments, a static final instance is used.\n+    private static final DataLoadingResult<Object> LOADING = new DataLoadingResult(ProcessorState.LOADING, null, null);\n+\n+    // Since not loaded doesn't have any typed arguments, a static final instance is used.\n+    private static final DataLoadingResult<Object> NOT_LOADED = new DataLoadingResult(ProcessorState.LOADED, null, null);\n+\n+    /**\n+     * @return Returns a data loading result.\n+     */\n+    public static <R> DataLoadingResult<R> getLoading() {\n+        return (DataLoadingResult<R>) LOADING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDU5MzMyOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataProcessorException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo1MDoxOFrOHFv-Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo1MDoxOFrOHFv-Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5MDk1MQ==", "bodyText": "Format this file.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475790951", "createdAt": "2020-08-24T17:50:18Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataProcessorException.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Autopsy Forensic Browser", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDU5ODkwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo1MTo0NlrOHFwBwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo1MTo0NlrOHFwBwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5MTgxMA==", "bodyText": "Format the file", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475791810", "createdAt": "2020-08-24T17:51:46Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDU5OTcwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo1MjowMlrOHFwCSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo1MjowMlrOHFwCSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5MTk0Nw==", "bodyText": "Method header", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475791947", "createdAt": "2020-08-24T17:52:02Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.guiutils.internal;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A JTable that displays a list of POJO items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultJTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultJTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultJTable<T> extends JPanel {\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * JTables don't allow display messages. So this LayerUI is used to display\n+     * the contents of a child JLabel. Inspired by TableWaitLayerTest (Animating\n+     * a Busy Indicator):\n+     * https://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html.\n+     */\n+    private static class Overlay extends LayerUI<JComponent> {\n+        private static final long serialVersionUID = 1L;\n+        \n+        private final JLabel child;\n+        private boolean visible;\n+\n+        Overlay() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDYyNjQ0OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo1OTozMVrOHFwSww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo1OTozMVrOHFwSww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5NjE2Mw==", "bodyText": "This description could be better, but if I understand what you are saying... if the user calls this method they will then need to also call repaint?  Correct?  Is there an event that could be fired when this is changed to automatically cause the repaint and avoid the user from having to call it every time they call setVisible?  Even if it was a simple property change event that was fired, the client code could catch the event and repaint.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475796163", "createdAt": "2020-08-24T17:59:31Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.guiutils.internal;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A JTable that displays a list of POJO items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultJTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultJTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultJTable<T> extends JPanel {\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * JTables don't allow display messages. So this LayerUI is used to display\n+     * the contents of a child JLabel. Inspired by TableWaitLayerTest (Animating\n+     * a Busy Indicator):\n+     * https://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html.\n+     */\n+    private static class Overlay extends LayerUI<JComponent> {\n+        private static final long serialVersionUID = 1L;\n+        \n+        private final JLabel child;\n+        private boolean visible;\n+\n+        Overlay() {\n+            child = new JLabel();\n+            child.setHorizontalAlignment(JLabel.CENTER);\n+            child.setVerticalAlignment(JLabel.CENTER);\n+            child.setOpaque(false);\n+\n+        }\n+\n+        /**\n+         * @return Whether or not this message overlay should be visible.\n+         */\n+        boolean isVisible() {\n+            return visible;\n+        }\n+\n+        /**\n+         * Sets this layer visible when painted. In order to be shown in UI,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDYzNTY0OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODowMjoxM1rOHFwYwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODowMjoxM1rOHFwYwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5NzY5Nw==", "bodyText": "Why are these in the middle of the file and not at the top?  Is it because the above is an inner class?  Would it make more sense to move that class down?  That's sort of a style thing, but I don't think I have come across many files in our code base that put the inner class first.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475797697", "createdAt": "2020-08-24T18:02:13Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.guiutils.internal;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A JTable that displays a list of POJO items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultJTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultJTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultJTable<T> extends JPanel {\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * JTables don't allow display messages. So this LayerUI is used to display\n+     * the contents of a child JLabel. Inspired by TableWaitLayerTest (Animating\n+     * a Busy Indicator):\n+     * https://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html.\n+     */\n+    private static class Overlay extends LayerUI<JComponent> {\n+        private static final long serialVersionUID = 1L;\n+        \n+        private final JLabel child;\n+        private boolean visible;\n+\n+        Overlay() {\n+            child = new JLabel();\n+            child.setHorizontalAlignment(JLabel.CENTER);\n+            child.setVerticalAlignment(JLabel.CENTER);\n+            child.setOpaque(false);\n+\n+        }\n+\n+        /**\n+         * @return Whether or not this message overlay should be visible.\n+         */\n+        boolean isVisible() {\n+            return visible;\n+        }\n+\n+        /**\n+         * Sets this layer visible when painted. In order to be shown in UI,\n+         * this component needs to be repainted.\n+         *\n+         * @param visible Whether or not it is visible.\n+         */\n+        void setVisible(boolean visible) {\n+            this.visible = visible;\n+        }\n+\n+        /**\n+         * @return The child JLabel component.\n+         */\n+        JLabel getChild() {\n+            return child;\n+        }\n+\n+        /**\n+         * Sets the message to be displayed in the child jlabel.\n+         * @param message The message to be displayed.\n+         */\n+        void setMessage(String message) {\n+            child.setText(String.format(\"<html><div style='text-align: center;'>%s</div></html>\", message));\n+        }\n+\n+        @Override\n+        public void paint(Graphics g, JComponent c) {\n+            // Paint the underlying view.\n+            super.paint(g, c);\n+\n+            if (!visible) {\n+                return;\n+            }\n+\n+            int w = c.getWidth();\n+            int h = c.getHeight();\n+            \n+            // paint the jlabel if visible.\n+            child.setBounds(0, 0, w, h);\n+            child.paint(g);\n+        }\n+    }\n+\n+    private static final Logger logger = Logger.getLogger(DataResultJTable.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDYzODQ1OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODowMzowMVrOHFwalw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODowMzowMVrOHFwalw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5ODE2Nw==", "bodyText": "File needs to be formatted properly and the method headers need to be reviewed.  I will put a general comment.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475798167", "createdAt": "2020-08-24T18:03:01Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDY1MTQ0OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODowNzowM1rOHFwixg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODowNzowM1rOHFwixg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwMDI2Mg==", "bodyText": "This method is confusing, since its not a static method the user should have already had a handle to \"this\" to call the method, why would you return it from a method called \"setLoadingMessage\".\nThis goes for the next bunch of methods.  I don't understand why you are returning this from a set method.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r475800262", "createdAt": "2020-08-24T18:07:03Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.guiutils.internal;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A JTable that displays a list of POJO items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultJTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultJTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultJTable<T> extends JPanel {\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * JTables don't allow display messages. So this LayerUI is used to display\n+     * the contents of a child JLabel. Inspired by TableWaitLayerTest (Animating\n+     * a Busy Indicator):\n+     * https://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html.\n+     */\n+    private static class Overlay extends LayerUI<JComponent> {\n+        private static final long serialVersionUID = 1L;\n+        \n+        private final JLabel child;\n+        private boolean visible;\n+\n+        Overlay() {\n+            child = new JLabel();\n+            child.setHorizontalAlignment(JLabel.CENTER);\n+            child.setVerticalAlignment(JLabel.CENTER);\n+            child.setOpaque(false);\n+\n+        }\n+\n+        /**\n+         * @return Whether or not this message overlay should be visible.\n+         */\n+        boolean isVisible() {\n+            return visible;\n+        }\n+\n+        /**\n+         * Sets this layer visible when painted. In order to be shown in UI,\n+         * this component needs to be repainted.\n+         *\n+         * @param visible Whether or not it is visible.\n+         */\n+        void setVisible(boolean visible) {\n+            this.visible = visible;\n+        }\n+\n+        /**\n+         * @return The child JLabel component.\n+         */\n+        JLabel getChild() {\n+            return child;\n+        }\n+\n+        /**\n+         * Sets the message to be displayed in the child jlabel.\n+         * @param message The message to be displayed.\n+         */\n+        void setMessage(String message) {\n+            child.setText(String.format(\"<html><div style='text-align: center;'>%s</div></html>\", message));\n+        }\n+\n+        @Override\n+        public void paint(Graphics g, JComponent c) {\n+            // Paint the underlying view.\n+            super.paint(g, c);\n+\n+            if (!visible) {\n+                return;\n+            }\n+\n+            int w = c.getWidth();\n+            int h = c.getHeight();\n+            \n+            // paint the jlabel if visible.\n+            child.setBounds(0, 0, w, h);\n+            child.paint(g);\n+        }\n+    }\n+\n+    private static final Logger logger = Logger.getLogger(DataResultJTable.class.getName());\n+\n+    private static final String DEFAULT_LOADING_MESSAGE = Bundle.DataResultJTable_loadingMessage_defaultText();\n+    private static final String DEFAULT_ERROR_MESSAGE = Bundle.DataResultJTable_errorMessage_defaultText();\n+    private static final String DEFAULT_NO_RESULTS_MESSAGE = \"\";\n+    private static final String DEFAULT_NOT_LOADED_MESSAGE = \"\";\n+\n+    private final JScrollPane tableScrollPane;\n+    private final Overlay overlayLayer;\n+    private final PojoListTableDataModel<T> tableModel;\n+\n+    private String loadingMessage = DEFAULT_LOADING_MESSAGE;\n+    private String errorMessage = DEFAULT_ERROR_MESSAGE;\n+    private String noResultsMessage = DEFAULT_NO_RESULTS_MESSAGE;\n+    private String notLoadedMessage = DEFAULT_NOT_LOADED_MESSAGE;\n+\n+    \n+\n+    /**\n+     * Main constructor.\n+     * @param tableModel The model to use for the table. \n+     */\n+    public DataResultJTable(PojoListTableDataModel<T> tableModel) {\n+        this.tableModel = tableModel;\n+        JTable table = new JTable(tableModel, tableModel.getTableColumnModel());\n+        table.getTableHeader().setReorderingAllowed(false);\n+\n+        this.overlayLayer = new Overlay();\n+        this.tableScrollPane = new JScrollPane(table);\n+        JLayer<JComponent> dualLayer = new JLayer<JComponent>(tableScrollPane, overlayLayer);\n+        setLayout(new BorderLayout());\n+        add(dualLayer, BorderLayout.CENTER);\n+    }\n+\n+    /**\n+     * @return The message shown when loading.\n+     */\n+    public String getLoadingMessage() {\n+        return loadingMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there is an exception.\n+     */\n+    public String getErrorMessage() {\n+        return errorMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there are no results.\n+     */\n+    public String getNoResultsMessage() {\n+        return noResultsMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when the table has not been loaded.\n+     */\n+    public String getNotLoadedMessage() {\n+        return notLoadedMessage;\n+    }\n+\n+    /**\n+     * Sets the loading message.\n+     * @param loadingMessage The loading message.\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultJTable<T> setLoadingMessage(String loadingMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTQwNDYyOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowMzoyOFrOHGfF9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowMzoyOFrOHGfF9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MjkzNA==", "bodyText": "Rename to DataResultTablePanel", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r476562934", "createdAt": "2020-08-25T16:03:28Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.guiutils.internal;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A JTable that displays a list of POJO items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultJTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultJTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultJTable<T> extends JPanel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDEzMzk0OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToxMzo0N1rOHGmJcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToxMzo0N1rOHGmJcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3ODUxMg==", "bodyText": "I would change this to setOverlayVisible()", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r476678512", "createdAt": "2020-08-25T19:13:47Z", "author": {"login": "kellykelly3"}, "path": "Core/src/org/sleuthkit/autopsy/guiutils/internal/DataResultJTable.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.guiutils.internal;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A JTable that displays a list of POJO items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultJTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultJTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultJTable<T> extends JPanel {\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * JTables don't allow display messages. So this LayerUI is used to display\n+     * the contents of a child JLabel. Inspired by TableWaitLayerTest (Animating\n+     * a Busy Indicator):\n+     * https://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html.\n+     */\n+    private static class Overlay extends LayerUI<JComponent> {\n+        private static final long serialVersionUID = 1L;\n+        \n+        private final JLabel child;\n+        private boolean visible;\n+\n+        Overlay() {\n+            child = new JLabel();\n+            child.setHorizontalAlignment(JLabel.CENTER);\n+            child.setVerticalAlignment(JLabel.CENTER);\n+            child.setOpaque(false);\n+\n+        }\n+\n+        /**\n+         * @return Whether or not this message overlay should be visible.\n+         */\n+        boolean isVisible() {\n+            return visible;\n+        }\n+\n+        /**\n+         * Sets this layer visible when painted. In order to be shown in UI,\n+         * this component needs to be repainted.\n+         *\n+         * @param visible Whether or not it is visible.\n+         */\n+        void setVisible(boolean visible) {\n+            this.visible = visible;\n+        }\n+\n+        /**\n+         * @return The child JLabel component.\n+         */\n+        JLabel getChild() {\n+            return child;\n+        }\n+\n+        /**\n+         * Sets the message to be displayed in the child jlabel.\n+         * @param message The message to be displayed.\n+         */\n+        void setMessage(String message) {\n+            child.setText(String.format(\"<html><div style='text-align: center;'>%s</div></html>\", message));\n+        }\n+\n+        @Override\n+        public void paint(Graphics g, JComponent c) {\n+            // Paint the underlying view.\n+            super.paint(g, c);\n+\n+            if (!visible) {\n+                return;\n+            }\n+\n+            int w = c.getWidth();\n+            int h = c.getHeight();\n+            \n+            // paint the jlabel if visible.\n+            child.setBounds(0, 0, w, h);\n+            child.paint(g);\n+        }\n+    }\n+\n+    private static final Logger logger = Logger.getLogger(DataResultJTable.class.getName());\n+\n+    private static final String DEFAULT_LOADING_MESSAGE = Bundle.DataResultJTable_loadingMessage_defaultText();\n+    private static final String DEFAULT_ERROR_MESSAGE = Bundle.DataResultJTable_errorMessage_defaultText();\n+    private static final String DEFAULT_NO_RESULTS_MESSAGE = \"\";\n+    private static final String DEFAULT_NOT_LOADED_MESSAGE = \"\";\n+\n+    private final JScrollPane tableScrollPane;\n+    private final Overlay overlayLayer;\n+    private final PojoListTableDataModel<T> tableModel;\n+\n+    private String loadingMessage = DEFAULT_LOADING_MESSAGE;\n+    private String errorMessage = DEFAULT_ERROR_MESSAGE;\n+    private String noResultsMessage = DEFAULT_NO_RESULTS_MESSAGE;\n+    private String notLoadedMessage = DEFAULT_NOT_LOADED_MESSAGE;\n+\n+    \n+\n+    /**\n+     * Main constructor.\n+     * @param tableModel The model to use for the table. \n+     */\n+    public DataResultJTable(PojoListTableDataModel<T> tableModel) {\n+        this.tableModel = tableModel;\n+        JTable table = new JTable(tableModel, tableModel.getTableColumnModel());\n+        table.getTableHeader().setReorderingAllowed(false);\n+\n+        this.overlayLayer = new Overlay();\n+        this.tableScrollPane = new JScrollPane(table);\n+        JLayer<JComponent> dualLayer = new JLayer<JComponent>(tableScrollPane, overlayLayer);\n+        setLayout(new BorderLayout());\n+        add(dualLayer, BorderLayout.CENTER);\n+    }\n+\n+    /**\n+     * @return The message shown when loading.\n+     */\n+    public String getLoadingMessage() {\n+        return loadingMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there is an exception.\n+     */\n+    public String getErrorMessage() {\n+        return errorMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there are no results.\n+     */\n+    public String getNoResultsMessage() {\n+        return noResultsMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when the table has not been loaded.\n+     */\n+    public String getNotLoadedMessage() {\n+        return notLoadedMessage;\n+    }\n+\n+    /**\n+     * Sets the loading message.\n+     * @param loadingMessage The loading message.\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultJTable<T> setLoadingMessage(String loadingMessage) {\n+        this.loadingMessage = loadingMessage;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the error message\n+     * @param errorMessage The error message.\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultJTable<T> setErrorMessage(String errorMessage) {\n+        this.errorMessage = errorMessage;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the message to be shown when no results are present.\n+     * @param noResultsMessage The 'no results' message.\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultJTable<T> setNoResultsMessage(String noResultsMessage) {\n+        this.noResultsMessage = noResultsMessage;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the 'not loaded' message.\n+     * @param notLoadedMessage The message to be shown when results are not loaded.\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultJTable<T> setNotLoadedMessage(String notLoadedMessage) {\n+        this.notLoadedMessage = notLoadedMessage;\n+        return this;\n+    }\n+\n+    private void setResultList(List<T> data) {\n+        List<T> dataToSet = (data != null)\n+                ? Collections.unmodifiableList(data)\n+                : Collections.emptyList();\n+\n+        tableScrollPane.getVerticalScrollBar().setValue(0);\n+        this.tableModel.setDataRows(dataToSet);\n+        repaint();\n+    }\n+\n+    private void setOverlay(boolean visible, String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b37bffcaca4bf8877632066cab7513e1a05f9cd"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDUyMTQwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/SwingWorkerSequentialRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNToyMToxOFrOHHRRww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNToyMToxOFrOHHRRww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM4NTE1NQ==", "bodyText": "I propose we call this the SwingWorkerSequentialExecutor.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477385155", "createdAt": "2020-08-26T15:21:18Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/SwingWorkerSequentialRunner.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.swing.SwingWorker;\n+\n+/**\n+ * Runs a list of swing workers in sequential order. Also, provides the ability\n+ * to reset or cancel a run.\n+ *\n+ * Based on:\n+ * https://stackoverflow.com/questions/31580805/java-swingworker-one-after-another-and-update-gui\n+ */\n+public class SwingWorkerSequentialRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDU3NDU2OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/SwingWorkerSequentialRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTozMjozOFrOHHRycQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTozMjozOFrOHHRycQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5MzUyMQ==", "bodyText": "I'm not sure this line is doing what you want it to do. You are assigning an unmodifiable view of submittedWorkers to workers. This does not prevent the caller from modifying submittedWorkers, e.g., clearing the list,  and any such modifications will be reflected in workers. I think what you want to do is simply:\nthis.workers = new ArrayList(submittedWorkers);", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477393521", "createdAt": "2020-08-26T15:32:38Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/SwingWorkerSequentialRunner.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.swing.SwingWorker;\n+\n+/**\n+ * Runs a list of swing workers in sequential order. Also, provides the ability\n+ * to reset or cancel a run.\n+ *\n+ * Based on:\n+ * https://stackoverflow.com/questions/31580805/java-swingworker-one-after-another-and-update-gui\n+ */\n+public class SwingWorkerSequentialRunner {\n+\n+    private final ExecutorService executorService = Executors.newFixedThreadPool(1);\n+    private List<? extends SwingWorker<?, ?>> workers = Collections.emptyList();\n+    private List<Future<?>> futures = Collections.emptyList();\n+\n+    /**\n+     * Cancels currently running operations and starts running the new list of\n+     * swing workers.\n+     *\n+     * @param submittedWorkers The list of submitted swing workers.\n+     */\n+    public synchronized void submit(List<? extends SwingWorker<?, ?>> submittedWorkers) {\n+        // cancel currently running operations\n+        cancelRunning();\n+\n+        // if no workers, there is nothing to run\n+        if (submittedWorkers == null) {\n+            return;\n+        }\n+\n+        this.workers = Collections.unmodifiableList(submittedWorkers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDU5ODUxOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/CellModelTableCellRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTozODowNVrOHHSBdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTozODowNVrOHHSBdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NzM2NQ==", "bodyText": "I imagine we will want to move NonEditableTableModel, RightAlignedTableCellRenderer and possibly FileTypePieChart into this package.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477397365", "createdAt": "2020-08-26T15:38:05Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/CellModelTableCellRenderer.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDgwMTYwOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/SleuthkitCaseProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjoyNjoyMFrOHHUAzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjoyNjoyMFrOHHUAzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyOTk2Nw==", "bodyText": "We should make it clear that this class exists to support testing.\nAlso, note that there is a typo in \"getSleuthkkitCase.\"", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477429967", "createdAt": "2020-08-26T16:26:20Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/SleuthkitCaseProvider.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.datamodel;\n+\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import org.sleuthkit.autopsy.casemodule.NoCurrentCaseException;\n+import org.sleuthkit.datamodel.SleuthkitCase;\n+\n+/**\n+ * An interface to provide the current SleuthkitCase object. By default, this\n+ * uses Case.getCurrentCaseThrows().getSleuthkkitCase().\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDkyNjQyOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/SleuthkitCaseProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1Nzo0NVrOHHVPGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1Nzo0NVrOHHVPGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1MDAxMA==", "bodyText": "Rather than make the interface throw an exception type specific to the a single concrete implementation using the Case class, let's add a more generic exception as an inner class of this interface. Then the default implementation can wrap the NoCurrentCaseException in the generic exception type. This will be more flexible.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477450010", "createdAt": "2020-08-26T16:57:45Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/SleuthkitCaseProvider.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.datamodel;\n+\n+import org.sleuthkit.autopsy.casemodule.Case;\n+import org.sleuthkit.autopsy.casemodule.NoCurrentCaseException;\n+import org.sleuthkit.datamodel.SleuthkitCase;\n+\n+/**\n+ * An interface to provide the current SleuthkitCase object. By default, this\n+ * uses Case.getCurrentCaseThrows().getSleuthkkitCase().\n+ */\n+public interface SleuthkitCaseProvider {\n+\n+    /**\n+     * The default SleuthkitCaseProvider. This uses\n+     * Case.getCurrentCaseThrows().getSleuthkitCase().\n+     */\n+    SleuthkitCaseProvider DEFAULT = () -> Case.getCurrentCaseThrows().getSleuthkitCase();\n+\n+    /**\n+     * @return Returns the current SleuthkitCase object.\n+     *\n+     * @throws NoCurrentCaseException Thrown if no case is open.\n+     */\n+    SleuthkitCase get() throws NoCurrentCaseException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTA1NTI3OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceTopDomainsSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzozMjoxN1rOHHWffA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzozMjoxN1rOHHWffA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3MDU4OA==", "bodyText": "A comment about this being placeholder code would probably be nice.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477470588", "createdAt": "2020-08-26T17:32:17Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/datamodel/DataSourceTopDomainsSummary.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.datamodel;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.sleuthkit.datamodel.DataSource;\n+\n+/**\n+ * Provides summary information about top domains in a datasource.\n+ */\n+public class DataSourceTopDomainsSummary {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTI2NTA3OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/ui/BaseDataSourceSummaryTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozMTo0OFrOHHYjCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozMTo0OFrOHHYjCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNDI2NA==", "bodyText": "Should this method cancel any currently running SwingWorkers?\nIs it possible that there is going to be access to the data source reference by multiple threads? Is some sort of guarding of the dataSource field warranted?", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477504264", "createdAt": "2020-08-26T18:31:48Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/ui/BaseDataSourceSummaryTab.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.ui;\n+\n+import javax.swing.JPanel;\n+import org.sleuthkit.autopsy.datasourcesummary.uiutils.SwingWorkerSequentialRunner;\n+import org.sleuthkit.datamodel.DataSource;\n+\n+/**\n+ * Base class from which other tabs in data source summary derive.\n+ */\n+abstract class BaseDataSourceSummaryTab extends JPanel {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final SwingWorkerSequentialRunner loader = new SwingWorkerSequentialRunner();\n+    private DataSource dataSource;\n+\n+    /**\n+     * The datasource currently used as the model in this panel.\n+     *\n+     * @return The datasource currently being used as the model in this panel.\n+     */\n+    DataSource getDataSource() {\n+        return dataSource;\n+    }\n+\n+    /**\n+     * Sets datasource to visualize in the panel.\n+     *\n+     * @param dataSource The datasource to use in this panel.\n+     */\n+    void setDataSource(DataSource dataSource) {\n+        DataSource oldDataSource = this.dataSource;\n+        this.dataSource = dataSource;\n+        if (this.dataSource != oldDataSource) {\n+            onNewDataSource(this.dataSource);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTI3OTYyOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/ui/BaseDataSourceSummaryTab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozNTo1NFrOHHYsHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozNTo1NFrOHHYsHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNjU4OQ==", "bodyText": "I would prefer to encapsulate the task executor within this class. Why not have a submit() or execute() method by which sub classes provide a list of SwingWorkers?\nI don't like the idea of calling the executor the \"loader.\" The executor is not loading anything. It is just executing one or more generic tasks (SwingWorkers) sequentially and providing for cancellation of those tasks.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477506589", "createdAt": "2020-08-26T18:35:54Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/ui/BaseDataSourceSummaryTab.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.ui;\n+\n+import javax.swing.JPanel;\n+import org.sleuthkit.autopsy.datasourcesummary.uiutils.SwingWorkerSequentialRunner;\n+import org.sleuthkit.datamodel.DataSource;\n+\n+/**\n+ * Base class from which other tabs in data source summary derive.\n+ */\n+abstract class BaseDataSourceSummaryTab extends JPanel {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final SwingWorkerSequentialRunner loader = new SwingWorkerSequentialRunner();\n+    private DataSource dataSource;\n+\n+    /**\n+     * The datasource currently used as the model in this panel.\n+     *\n+     * @return The datasource currently being used as the model in this panel.\n+     */\n+    DataSource getDataSource() {\n+        return dataSource;\n+    }\n+\n+    /**\n+     * Sets datasource to visualize in the panel.\n+     *\n+     * @param dataSource The datasource to use in this panel.\n+     */\n+    void setDataSource(DataSource dataSource) {\n+        DataSource oldDataSource = this.dataSource;\n+        this.dataSource = dataSource;\n+        if (this.dataSource != oldDataSource) {\n+            onNewDataSource(this.dataSource);\n+        }\n+    }\n+\n+    /**\n+     * @return The sequential runner associated with this panel.\n+     */\n+    protected SwingWorkerSequentialRunner getLoader() {\n+        return loader;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTMwMzkxOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/ui/DataSourceSummaryCountsPanel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODo0MzoxNVrOHHY7SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODo0MzoxNVrOHHY7SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxMDQ3Mg==", "bodyText": "A small point, but I would to use either \"Panel\" or \"Tab\" in the names of both the super class and the sub classes. Since the fact that the panels are appearing in a tabbed container is not a concern of the individual panels, I would go with \"Panel.\"", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477510472", "createdAt": "2020-08-26T18:43:15Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/ui/DataSourceSummaryCountsPanel.java", "diffHunk": "@@ -37,7 +37,7 @@\n     \"DataSourceSummaryCountsPanel.FilesByCategoryTableModel.type.header=File Type\",\n     \"DataSourceSummaryCountsPanel.FilesByCategoryTableModel.count.header=Count\"\n })\n-final class DataSourceSummaryCountsPanel extends javax.swing.JPanel {\n+class DataSourceSummaryCountsPanel extends BaseDataSourceSummaryTab {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTM4MjQ1OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTowMzozM1rOHHZsVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTowMzozM1rOHHZsVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyMzAzMA==", "bodyText": "This functional interface seems to be trying to be generic while also claiming to be specific to DataFetchWorker. I think that we should tie it in to DataFetchWorker more explicitly, using a more specific concept than data processing to help client developers understand this critical aspect of using the infrastructure we are building here. Perhaps we could call it DataFetcher - that fits nicely with DataFetchWorker. Or perhaps we call it DataSourceQuery. In fact, I think it would probably be a good idea to make this part of DataFetchWorker.\nThe method could become query() or runQuery() instead of process().", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477523030", "createdAt": "2020-08-26T19:03:33Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataProcessor.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;\n+\n+/**\n+ * A function that accepts input of type I and outputs type O. This function is\n+ * meant to be utilized with DataFetchWorker and can therefore, throw an\n+ * interrupted exception if the processing is cancelled or a\n+ * DataProcessorException in the event that the processing encountered an error.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQxMzY0OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataLoadingResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTowOToxNVrOHHaBTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTowOToxNVrOHHaBTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyODM5Ng==", "bodyText": "If I am a user of this class, what exactly is a \"loading process\"?\nIt has actually taken some time reading all of the code to figure out that we are trying to be very economical and compact with this class and as a result it is trying to do two things, in violation of the SRP: 1) It is providing the state, possibly transitory or possibly final, of a data fetch operation and 2) It is carrying the actual fetched data, or lack thereof.\nI think that we need to provide separate mechanisms for (see other comments for revsiion of class names) a DataFetcher to report its state and to supply data. In fact, it seems reasonable that a DataSummaryPanel acting as a controller for a JTablePanel would call methods to make the JTablePanel display various messages up until the point when it provides a result, at which point the JTablePanel would stop overlaying a message and display the result.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477528396", "createdAt": "2020-08-26T19:09:15Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataLoadingResult.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;\n+\n+/**\n+ * The intermediate or end result of a loading process.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQ0MzI2OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataLoadingResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToxODoyM1rOHHaTyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToxODoyM1rOHHaTyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMzEyOA==", "bodyText": "A processor state and a loading result seem to be two different concepts. If a DataProcessor is actually a DataFetcher (see comments elsewhere), the fetching of data is a distinct operation from loading the fetched data into the GUI. See immediately prior comment.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477533128", "createdAt": "2020-08-26T19:18:23Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataLoadingResult.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;\n+\n+/**\n+ * The intermediate or end result of a loading process.\n+ */\n+public final class DataLoadingResult<R> {\n+\n+    /**\n+     * The state of loading in the result.\n+     */\n+    public enum ProcessorState {\n+        LOADING, NOT_LOADED, LOADED, LOAD_ERROR\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQ3NjQ0OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToyODoxMVrOHHan4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToyODoxMVrOHHan4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzODI3NQ==", "bodyText": "I feel that DataResultTable is too generic. It also clashes with the unfortunate and extensive use of DataResult elsewhere in the application: DataResult, DataResultTopComponent, DataResultViewer, DataResultViewerTable, etc., etc. Some ideas for alternate names: JTablePanel, DataSourceSummaryTable, DataSourceSummaryTablePanel. JTablePanel would still be generic in hopes of eventual reuse elsewhere; DataSourceSummaryTable would be a pretty clear statement of its use in this context. I think I would go with JTablePanel if we are going with DataFetchWorker, DataFetcher, DataFetchResult, etc., striking with the generic theme that may one day be able to be generalized (although there are less generic tie ins to a DataSource reference running through all of this).", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477538275", "createdAt": "2020-08-26T19:28:11Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import javax.swing.table.TableColumnModel;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A table that displays a list of items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultTable<T> extends JPanel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQ4MDAxOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToyOToxNVrOHHaqIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToyOToxNVrOHHaqIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzODg1MA==", "bodyText": "\"Child\" is rather vague.  It is something like the table name, right?", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477538850", "createdAt": "2020-08-26T19:29:15Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import javax.swing.table.TableColumnModel;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A table that displays a list of items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultTable<T> extends JPanel {\n+\n+    /**\n+     * JTables don't allow displaying messages. So this LayerUI is used to\n+     * display the contents of a child JLabel. Inspired by TableWaitLayerTest\n+     * (Animating a Busy Indicator):\n+     * https://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html.\n+     */\n+    private static class Overlay extends LayerUI<JComponent> {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        private final JLabel child;\n+        private boolean visible;\n+\n+        /**\n+         * Main constructor for the Overlay.\n+         */\n+        Overlay() {\n+            child = new JLabel();\n+            child.setHorizontalAlignment(JLabel.CENTER);\n+            child.setVerticalAlignment(JLabel.CENTER);\n+            child.setOpaque(false);\n+\n+        }\n+\n+        /**\n+         * @return Whether or not this message overlay should be visible.\n+         */\n+        boolean isVisible() {\n+            return visible;\n+        }\n+\n+        /**\n+         * Sets this layer visible when painted. In order to be shown in UI,\n+         * this component needs to be repainted.\n+         *\n+         * @param visible Whether or not it is visible.\n+         */\n+        void setVisible(boolean visible) {\n+            this.visible = visible;\n+        }\n+\n+        /**\n+         * @return The child JLabel component.\n+         */\n+        JLabel getChild() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQ4NzAxOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozMToyNFrOHHaueQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozMToyNFrOHHaueQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzOTk2MQ==", "bodyText": "What is the client for this method? Class interfaces should be minimal but sufficient.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477539961", "createdAt": "2020-08-26T19:31:24Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import javax.swing.table.TableColumnModel;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A table that displays a list of items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultTable<T> extends JPanel {\n+\n+    /**\n+     * JTables don't allow displaying messages. So this LayerUI is used to\n+     * display the contents of a child JLabel. Inspired by TableWaitLayerTest\n+     * (Animating a Busy Indicator):\n+     * https://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html.\n+     */\n+    private static class Overlay extends LayerUI<JComponent> {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        private final JLabel child;\n+        private boolean visible;\n+\n+        /**\n+         * Main constructor for the Overlay.\n+         */\n+        Overlay() {\n+            child = new JLabel();\n+            child.setHorizontalAlignment(JLabel.CENTER);\n+            child.setVerticalAlignment(JLabel.CENTER);\n+            child.setOpaque(false);\n+\n+        }\n+\n+        /**\n+         * @return Whether or not this message overlay should be visible.\n+         */\n+        boolean isVisible() {\n+            return visible;\n+        }\n+\n+        /**\n+         * Sets this layer visible when painted. In order to be shown in UI,\n+         * this component needs to be repainted.\n+         *\n+         * @param visible Whether or not it is visible.\n+         */\n+        void setVisible(boolean visible) {\n+            this.visible = visible;\n+        }\n+\n+        /**\n+         * @return The child JLabel component.\n+         */\n+        JLabel getChild() {\n+            return child;\n+        }\n+\n+        /**\n+         * Sets the message to be displayed in the child jlabel.\n+         *\n+         * @param message The message to be displayed.\n+         */\n+        void setMessage(String message) {\n+            child.setText(String.format(\"<html><div style='text-align: center;'>%s</div></html>\", message));\n+        }\n+\n+        @Override\n+        public void paint(Graphics g, JComponent c) {\n+            // Paint the underlying view.\n+            super.paint(g, c);\n+\n+            if (!visible) {\n+                return;\n+            }\n+\n+            int w = c.getWidth();\n+            int h = c.getHeight();\n+\n+            // paint the jlabel if visible.\n+            child.setBounds(0, 0, w, h);\n+            child.paint(g);\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger logger = Logger.getLogger(DataResultTable.class.getName());\n+\n+    private static final String DEFAULT_LOADING_MESSAGE = Bundle.DataResultTable_loadingMessage_defaultText();\n+    private static final String DEFAULT_ERROR_MESSAGE = Bundle.DataResultTable_errorMessage_defaultText();\n+    private static final String DEFAULT_NO_RESULTS_MESSAGE = \"\";\n+    private static final String DEFAULT_NOT_LOADED_MESSAGE = \"\";\n+\n+    private final JScrollPane tableScrollPane;\n+    private final Overlay overlayLayer;\n+    private final ListTableModel<T> tableModel;\n+    private final JTable table;\n+\n+    private String loadingMessage = DEFAULT_LOADING_MESSAGE;\n+    private String errorMessage = DEFAULT_ERROR_MESSAGE;\n+    private String noResultsMessage = DEFAULT_NO_RESULTS_MESSAGE;\n+    private String notLoadedMessage = DEFAULT_NOT_LOADED_MESSAGE;\n+\n+    /**\n+     * Main constructor.\n+     *\n+     * @param tableModel The model to use for the table.\n+     */\n+    public DataResultTable(ListTableModel<T> tableModel) {\n+        this.tableModel = tableModel;\n+        this.table = new JTable(tableModel);\n+        this.table.getTableHeader().setReorderingAllowed(false);\n+\n+        this.overlayLayer = new Overlay();\n+        this.tableScrollPane = new JScrollPane(table);\n+        JLayer<JComponent> dualLayer = new JLayer<JComponent>(tableScrollPane, overlayLayer);\n+        setLayout(new BorderLayout());\n+        add(dualLayer, BorderLayout.CENTER);\n+    }\n+\n+    /**\n+     * @return The underlying JTable's column model.\n+     */\n+    public TableColumnModel getColumnModel() {\n+        return this.table.getColumnModel();\n+    }\n+\n+    /**\n+     * Sets the underlying JTable's column model.\n+     *\n+     * @param columnModel The table column model to use with the JTable.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setColumnModel(TableColumnModel columnModel) {\n+        this.table.setColumnModel(columnModel);\n+        return this;\n+    }\n+\n+    /**\n+     * @return The message shown when loading.\n+     */\n+    public String getLoadingMessage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQ4NzQyOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozMTozMFrOHHautA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozMTozMFrOHHautA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0MDAyMA==", "bodyText": "What is the client for this method? Class interfaces should be minimal but sufficient.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477540020", "createdAt": "2020-08-26T19:31:30Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import javax.swing.table.TableColumnModel;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A table that displays a list of items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultTable<T> extends JPanel {\n+\n+    /**\n+     * JTables don't allow displaying messages. So this LayerUI is used to\n+     * display the contents of a child JLabel. Inspired by TableWaitLayerTest\n+     * (Animating a Busy Indicator):\n+     * https://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html.\n+     */\n+    private static class Overlay extends LayerUI<JComponent> {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        private final JLabel child;\n+        private boolean visible;\n+\n+        /**\n+         * Main constructor for the Overlay.\n+         */\n+        Overlay() {\n+            child = new JLabel();\n+            child.setHorizontalAlignment(JLabel.CENTER);\n+            child.setVerticalAlignment(JLabel.CENTER);\n+            child.setOpaque(false);\n+\n+        }\n+\n+        /**\n+         * @return Whether or not this message overlay should be visible.\n+         */\n+        boolean isVisible() {\n+            return visible;\n+        }\n+\n+        /**\n+         * Sets this layer visible when painted. In order to be shown in UI,\n+         * this component needs to be repainted.\n+         *\n+         * @param visible Whether or not it is visible.\n+         */\n+        void setVisible(boolean visible) {\n+            this.visible = visible;\n+        }\n+\n+        /**\n+         * @return The child JLabel component.\n+         */\n+        JLabel getChild() {\n+            return child;\n+        }\n+\n+        /**\n+         * Sets the message to be displayed in the child jlabel.\n+         *\n+         * @param message The message to be displayed.\n+         */\n+        void setMessage(String message) {\n+            child.setText(String.format(\"<html><div style='text-align: center;'>%s</div></html>\", message));\n+        }\n+\n+        @Override\n+        public void paint(Graphics g, JComponent c) {\n+            // Paint the underlying view.\n+            super.paint(g, c);\n+\n+            if (!visible) {\n+                return;\n+            }\n+\n+            int w = c.getWidth();\n+            int h = c.getHeight();\n+\n+            // paint the jlabel if visible.\n+            child.setBounds(0, 0, w, h);\n+            child.paint(g);\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger logger = Logger.getLogger(DataResultTable.class.getName());\n+\n+    private static final String DEFAULT_LOADING_MESSAGE = Bundle.DataResultTable_loadingMessage_defaultText();\n+    private static final String DEFAULT_ERROR_MESSAGE = Bundle.DataResultTable_errorMessage_defaultText();\n+    private static final String DEFAULT_NO_RESULTS_MESSAGE = \"\";\n+    private static final String DEFAULT_NOT_LOADED_MESSAGE = \"\";\n+\n+    private final JScrollPane tableScrollPane;\n+    private final Overlay overlayLayer;\n+    private final ListTableModel<T> tableModel;\n+    private final JTable table;\n+\n+    private String loadingMessage = DEFAULT_LOADING_MESSAGE;\n+    private String errorMessage = DEFAULT_ERROR_MESSAGE;\n+    private String noResultsMessage = DEFAULT_NO_RESULTS_MESSAGE;\n+    private String notLoadedMessage = DEFAULT_NOT_LOADED_MESSAGE;\n+\n+    /**\n+     * Main constructor.\n+     *\n+     * @param tableModel The model to use for the table.\n+     */\n+    public DataResultTable(ListTableModel<T> tableModel) {\n+        this.tableModel = tableModel;\n+        this.table = new JTable(tableModel);\n+        this.table.getTableHeader().setReorderingAllowed(false);\n+\n+        this.overlayLayer = new Overlay();\n+        this.tableScrollPane = new JScrollPane(table);\n+        JLayer<JComponent> dualLayer = new JLayer<JComponent>(tableScrollPane, overlayLayer);\n+        setLayout(new BorderLayout());\n+        add(dualLayer, BorderLayout.CENTER);\n+    }\n+\n+    /**\n+     * @return The underlying JTable's column model.\n+     */\n+    public TableColumnModel getColumnModel() {\n+        return this.table.getColumnModel();\n+    }\n+\n+    /**\n+     * Sets the underlying JTable's column model.\n+     *\n+     * @param columnModel The table column model to use with the JTable.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setColumnModel(TableColumnModel columnModel) {\n+        this.table.setColumnModel(columnModel);\n+        return this;\n+    }\n+\n+    /**\n+     * @return The message shown when loading.\n+     */\n+    public String getLoadingMessage() {\n+        return loadingMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there is an exception.\n+     */\n+    public String getErrorMessage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQ4Nzc4OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozMTozN1rOHHau8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozMTozN1rOHHau8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0MDA4Mg==", "bodyText": "What is the client for this method? Class interfaces should be minimal but sufficient.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477540082", "createdAt": "2020-08-26T19:31:37Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import javax.swing.table.TableColumnModel;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A table that displays a list of items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultTable<T> extends JPanel {\n+\n+    /**\n+     * JTables don't allow displaying messages. So this LayerUI is used to\n+     * display the contents of a child JLabel. Inspired by TableWaitLayerTest\n+     * (Animating a Busy Indicator):\n+     * https://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html.\n+     */\n+    private static class Overlay extends LayerUI<JComponent> {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        private final JLabel child;\n+        private boolean visible;\n+\n+        /**\n+         * Main constructor for the Overlay.\n+         */\n+        Overlay() {\n+            child = new JLabel();\n+            child.setHorizontalAlignment(JLabel.CENTER);\n+            child.setVerticalAlignment(JLabel.CENTER);\n+            child.setOpaque(false);\n+\n+        }\n+\n+        /**\n+         * @return Whether or not this message overlay should be visible.\n+         */\n+        boolean isVisible() {\n+            return visible;\n+        }\n+\n+        /**\n+         * Sets this layer visible when painted. In order to be shown in UI,\n+         * this component needs to be repainted.\n+         *\n+         * @param visible Whether or not it is visible.\n+         */\n+        void setVisible(boolean visible) {\n+            this.visible = visible;\n+        }\n+\n+        /**\n+         * @return The child JLabel component.\n+         */\n+        JLabel getChild() {\n+            return child;\n+        }\n+\n+        /**\n+         * Sets the message to be displayed in the child jlabel.\n+         *\n+         * @param message The message to be displayed.\n+         */\n+        void setMessage(String message) {\n+            child.setText(String.format(\"<html><div style='text-align: center;'>%s</div></html>\", message));\n+        }\n+\n+        @Override\n+        public void paint(Graphics g, JComponent c) {\n+            // Paint the underlying view.\n+            super.paint(g, c);\n+\n+            if (!visible) {\n+                return;\n+            }\n+\n+            int w = c.getWidth();\n+            int h = c.getHeight();\n+\n+            // paint the jlabel if visible.\n+            child.setBounds(0, 0, w, h);\n+            child.paint(g);\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger logger = Logger.getLogger(DataResultTable.class.getName());\n+\n+    private static final String DEFAULT_LOADING_MESSAGE = Bundle.DataResultTable_loadingMessage_defaultText();\n+    private static final String DEFAULT_ERROR_MESSAGE = Bundle.DataResultTable_errorMessage_defaultText();\n+    private static final String DEFAULT_NO_RESULTS_MESSAGE = \"\";\n+    private static final String DEFAULT_NOT_LOADED_MESSAGE = \"\";\n+\n+    private final JScrollPane tableScrollPane;\n+    private final Overlay overlayLayer;\n+    private final ListTableModel<T> tableModel;\n+    private final JTable table;\n+\n+    private String loadingMessage = DEFAULT_LOADING_MESSAGE;\n+    private String errorMessage = DEFAULT_ERROR_MESSAGE;\n+    private String noResultsMessage = DEFAULT_NO_RESULTS_MESSAGE;\n+    private String notLoadedMessage = DEFAULT_NOT_LOADED_MESSAGE;\n+\n+    /**\n+     * Main constructor.\n+     *\n+     * @param tableModel The model to use for the table.\n+     */\n+    public DataResultTable(ListTableModel<T> tableModel) {\n+        this.tableModel = tableModel;\n+        this.table = new JTable(tableModel);\n+        this.table.getTableHeader().setReorderingAllowed(false);\n+\n+        this.overlayLayer = new Overlay();\n+        this.tableScrollPane = new JScrollPane(table);\n+        JLayer<JComponent> dualLayer = new JLayer<JComponent>(tableScrollPane, overlayLayer);\n+        setLayout(new BorderLayout());\n+        add(dualLayer, BorderLayout.CENTER);\n+    }\n+\n+    /**\n+     * @return The underlying JTable's column model.\n+     */\n+    public TableColumnModel getColumnModel() {\n+        return this.table.getColumnModel();\n+    }\n+\n+    /**\n+     * Sets the underlying JTable's column model.\n+     *\n+     * @param columnModel The table column model to use with the JTable.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setColumnModel(TableColumnModel columnModel) {\n+        this.table.setColumnModel(columnModel);\n+        return this;\n+    }\n+\n+    /**\n+     * @return The message shown when loading.\n+     */\n+    public String getLoadingMessage() {\n+        return loadingMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there is an exception.\n+     */\n+    public String getErrorMessage() {\n+        return errorMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there are no results.\n+     */\n+    public String getNoResultsMessage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQ4ODA3OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozMTo0NFrOHHavKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozMTo0NFrOHHavKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0MDEzNg==", "bodyText": "What is the client for this method? Class interfaces should be minimal but sufficient.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477540136", "createdAt": "2020-08-26T19:31:44Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import javax.swing.table.TableColumnModel;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A table that displays a list of items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultTable<T> extends JPanel {\n+\n+    /**\n+     * JTables don't allow displaying messages. So this LayerUI is used to\n+     * display the contents of a child JLabel. Inspired by TableWaitLayerTest\n+     * (Animating a Busy Indicator):\n+     * https://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html.\n+     */\n+    private static class Overlay extends LayerUI<JComponent> {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        private final JLabel child;\n+        private boolean visible;\n+\n+        /**\n+         * Main constructor for the Overlay.\n+         */\n+        Overlay() {\n+            child = new JLabel();\n+            child.setHorizontalAlignment(JLabel.CENTER);\n+            child.setVerticalAlignment(JLabel.CENTER);\n+            child.setOpaque(false);\n+\n+        }\n+\n+        /**\n+         * @return Whether or not this message overlay should be visible.\n+         */\n+        boolean isVisible() {\n+            return visible;\n+        }\n+\n+        /**\n+         * Sets this layer visible when painted. In order to be shown in UI,\n+         * this component needs to be repainted.\n+         *\n+         * @param visible Whether or not it is visible.\n+         */\n+        void setVisible(boolean visible) {\n+            this.visible = visible;\n+        }\n+\n+        /**\n+         * @return The child JLabel component.\n+         */\n+        JLabel getChild() {\n+            return child;\n+        }\n+\n+        /**\n+         * Sets the message to be displayed in the child jlabel.\n+         *\n+         * @param message The message to be displayed.\n+         */\n+        void setMessage(String message) {\n+            child.setText(String.format(\"<html><div style='text-align: center;'>%s</div></html>\", message));\n+        }\n+\n+        @Override\n+        public void paint(Graphics g, JComponent c) {\n+            // Paint the underlying view.\n+            super.paint(g, c);\n+\n+            if (!visible) {\n+                return;\n+            }\n+\n+            int w = c.getWidth();\n+            int h = c.getHeight();\n+\n+            // paint the jlabel if visible.\n+            child.setBounds(0, 0, w, h);\n+            child.paint(g);\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger logger = Logger.getLogger(DataResultTable.class.getName());\n+\n+    private static final String DEFAULT_LOADING_MESSAGE = Bundle.DataResultTable_loadingMessage_defaultText();\n+    private static final String DEFAULT_ERROR_MESSAGE = Bundle.DataResultTable_errorMessage_defaultText();\n+    private static final String DEFAULT_NO_RESULTS_MESSAGE = \"\";\n+    private static final String DEFAULT_NOT_LOADED_MESSAGE = \"\";\n+\n+    private final JScrollPane tableScrollPane;\n+    private final Overlay overlayLayer;\n+    private final ListTableModel<T> tableModel;\n+    private final JTable table;\n+\n+    private String loadingMessage = DEFAULT_LOADING_MESSAGE;\n+    private String errorMessage = DEFAULT_ERROR_MESSAGE;\n+    private String noResultsMessage = DEFAULT_NO_RESULTS_MESSAGE;\n+    private String notLoadedMessage = DEFAULT_NOT_LOADED_MESSAGE;\n+\n+    /**\n+     * Main constructor.\n+     *\n+     * @param tableModel The model to use for the table.\n+     */\n+    public DataResultTable(ListTableModel<T> tableModel) {\n+        this.tableModel = tableModel;\n+        this.table = new JTable(tableModel);\n+        this.table.getTableHeader().setReorderingAllowed(false);\n+\n+        this.overlayLayer = new Overlay();\n+        this.tableScrollPane = new JScrollPane(table);\n+        JLayer<JComponent> dualLayer = new JLayer<JComponent>(tableScrollPane, overlayLayer);\n+        setLayout(new BorderLayout());\n+        add(dualLayer, BorderLayout.CENTER);\n+    }\n+\n+    /**\n+     * @return The underlying JTable's column model.\n+     */\n+    public TableColumnModel getColumnModel() {\n+        return this.table.getColumnModel();\n+    }\n+\n+    /**\n+     * Sets the underlying JTable's column model.\n+     *\n+     * @param columnModel The table column model to use with the JTable.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setColumnModel(TableColumnModel columnModel) {\n+        this.table.setColumnModel(columnModel);\n+        return this;\n+    }\n+\n+    /**\n+     * @return The message shown when loading.\n+     */\n+    public String getLoadingMessage() {\n+        return loadingMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there is an exception.\n+     */\n+    public String getErrorMessage() {\n+        return errorMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there are no results.\n+     */\n+    public String getNoResultsMessage() {\n+        return noResultsMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when the table has not been loaded.\n+     */\n+    public String getNotLoadedMessage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQ5MjMzOnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozMzowNlrOHHaxxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozMzowNlrOHHaxxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0MDgwNw==", "bodyText": "I am not convinced we need this much flexibility. Why not have have a generic message that can be localized once for Japanese, Spanish, etc.? It would also support the design goal of having consistency across all of the summary panels.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477540807", "createdAt": "2020-08-26T19:33:06Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import javax.swing.table.TableColumnModel;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A table that displays a list of items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultTable<T> extends JPanel {\n+\n+    /**\n+     * JTables don't allow displaying messages. So this LayerUI is used to\n+     * display the contents of a child JLabel. Inspired by TableWaitLayerTest\n+     * (Animating a Busy Indicator):\n+     * https://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html.\n+     */\n+    private static class Overlay extends LayerUI<JComponent> {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        private final JLabel child;\n+        private boolean visible;\n+\n+        /**\n+         * Main constructor for the Overlay.\n+         */\n+        Overlay() {\n+            child = new JLabel();\n+            child.setHorizontalAlignment(JLabel.CENTER);\n+            child.setVerticalAlignment(JLabel.CENTER);\n+            child.setOpaque(false);\n+\n+        }\n+\n+        /**\n+         * @return Whether or not this message overlay should be visible.\n+         */\n+        boolean isVisible() {\n+            return visible;\n+        }\n+\n+        /**\n+         * Sets this layer visible when painted. In order to be shown in UI,\n+         * this component needs to be repainted.\n+         *\n+         * @param visible Whether or not it is visible.\n+         */\n+        void setVisible(boolean visible) {\n+            this.visible = visible;\n+        }\n+\n+        /**\n+         * @return The child JLabel component.\n+         */\n+        JLabel getChild() {\n+            return child;\n+        }\n+\n+        /**\n+         * Sets the message to be displayed in the child jlabel.\n+         *\n+         * @param message The message to be displayed.\n+         */\n+        void setMessage(String message) {\n+            child.setText(String.format(\"<html><div style='text-align: center;'>%s</div></html>\", message));\n+        }\n+\n+        @Override\n+        public void paint(Graphics g, JComponent c) {\n+            // Paint the underlying view.\n+            super.paint(g, c);\n+\n+            if (!visible) {\n+                return;\n+            }\n+\n+            int w = c.getWidth();\n+            int h = c.getHeight();\n+\n+            // paint the jlabel if visible.\n+            child.setBounds(0, 0, w, h);\n+            child.paint(g);\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger logger = Logger.getLogger(DataResultTable.class.getName());\n+\n+    private static final String DEFAULT_LOADING_MESSAGE = Bundle.DataResultTable_loadingMessage_defaultText();\n+    private static final String DEFAULT_ERROR_MESSAGE = Bundle.DataResultTable_errorMessage_defaultText();\n+    private static final String DEFAULT_NO_RESULTS_MESSAGE = \"\";\n+    private static final String DEFAULT_NOT_LOADED_MESSAGE = \"\";\n+\n+    private final JScrollPane tableScrollPane;\n+    private final Overlay overlayLayer;\n+    private final ListTableModel<T> tableModel;\n+    private final JTable table;\n+\n+    private String loadingMessage = DEFAULT_LOADING_MESSAGE;\n+    private String errorMessage = DEFAULT_ERROR_MESSAGE;\n+    private String noResultsMessage = DEFAULT_NO_RESULTS_MESSAGE;\n+    private String notLoadedMessage = DEFAULT_NOT_LOADED_MESSAGE;\n+\n+    /**\n+     * Main constructor.\n+     *\n+     * @param tableModel The model to use for the table.\n+     */\n+    public DataResultTable(ListTableModel<T> tableModel) {\n+        this.tableModel = tableModel;\n+        this.table = new JTable(tableModel);\n+        this.table.getTableHeader().setReorderingAllowed(false);\n+\n+        this.overlayLayer = new Overlay();\n+        this.tableScrollPane = new JScrollPane(table);\n+        JLayer<JComponent> dualLayer = new JLayer<JComponent>(tableScrollPane, overlayLayer);\n+        setLayout(new BorderLayout());\n+        add(dualLayer, BorderLayout.CENTER);\n+    }\n+\n+    /**\n+     * @return The underlying JTable's column model.\n+     */\n+    public TableColumnModel getColumnModel() {\n+        return this.table.getColumnModel();\n+    }\n+\n+    /**\n+     * Sets the underlying JTable's column model.\n+     *\n+     * @param columnModel The table column model to use with the JTable.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setColumnModel(TableColumnModel columnModel) {\n+        this.table.setColumnModel(columnModel);\n+        return this;\n+    }\n+\n+    /**\n+     * @return The message shown when loading.\n+     */\n+    public String getLoadingMessage() {\n+        return loadingMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there is an exception.\n+     */\n+    public String getErrorMessage() {\n+        return errorMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there are no results.\n+     */\n+    public String getNoResultsMessage() {\n+        return noResultsMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when the table has not been loaded.\n+     */\n+    public String getNotLoadedMessage() {\n+        return notLoadedMessage;\n+    }\n+\n+    /**\n+     * Sets the loading message.\n+     *\n+     * @param loadingMessage The loading message.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setLoadingMessage(String loadingMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQ5Mjc0OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozMzoxNFrOHHayDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozMzoxNFrOHHayDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0MDg3Nw==", "bodyText": "I am not convinced we need this much flexibility. Why not have have a generic message that can be localized once for Japanese, Spanish, etc.? It would also support the design goal of having consistency across all of the summary panels.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477540877", "createdAt": "2020-08-26T19:33:14Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import javax.swing.table.TableColumnModel;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A table that displays a list of items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultTable<T> extends JPanel {\n+\n+    /**\n+     * JTables don't allow displaying messages. So this LayerUI is used to\n+     * display the contents of a child JLabel. Inspired by TableWaitLayerTest\n+     * (Animating a Busy Indicator):\n+     * https://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html.\n+     */\n+    private static class Overlay extends LayerUI<JComponent> {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        private final JLabel child;\n+        private boolean visible;\n+\n+        /**\n+         * Main constructor for the Overlay.\n+         */\n+        Overlay() {\n+            child = new JLabel();\n+            child.setHorizontalAlignment(JLabel.CENTER);\n+            child.setVerticalAlignment(JLabel.CENTER);\n+            child.setOpaque(false);\n+\n+        }\n+\n+        /**\n+         * @return Whether or not this message overlay should be visible.\n+         */\n+        boolean isVisible() {\n+            return visible;\n+        }\n+\n+        /**\n+         * Sets this layer visible when painted. In order to be shown in UI,\n+         * this component needs to be repainted.\n+         *\n+         * @param visible Whether or not it is visible.\n+         */\n+        void setVisible(boolean visible) {\n+            this.visible = visible;\n+        }\n+\n+        /**\n+         * @return The child JLabel component.\n+         */\n+        JLabel getChild() {\n+            return child;\n+        }\n+\n+        /**\n+         * Sets the message to be displayed in the child jlabel.\n+         *\n+         * @param message The message to be displayed.\n+         */\n+        void setMessage(String message) {\n+            child.setText(String.format(\"<html><div style='text-align: center;'>%s</div></html>\", message));\n+        }\n+\n+        @Override\n+        public void paint(Graphics g, JComponent c) {\n+            // Paint the underlying view.\n+            super.paint(g, c);\n+\n+            if (!visible) {\n+                return;\n+            }\n+\n+            int w = c.getWidth();\n+            int h = c.getHeight();\n+\n+            // paint the jlabel if visible.\n+            child.setBounds(0, 0, w, h);\n+            child.paint(g);\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger logger = Logger.getLogger(DataResultTable.class.getName());\n+\n+    private static final String DEFAULT_LOADING_MESSAGE = Bundle.DataResultTable_loadingMessage_defaultText();\n+    private static final String DEFAULT_ERROR_MESSAGE = Bundle.DataResultTable_errorMessage_defaultText();\n+    private static final String DEFAULT_NO_RESULTS_MESSAGE = \"\";\n+    private static final String DEFAULT_NOT_LOADED_MESSAGE = \"\";\n+\n+    private final JScrollPane tableScrollPane;\n+    private final Overlay overlayLayer;\n+    private final ListTableModel<T> tableModel;\n+    private final JTable table;\n+\n+    private String loadingMessage = DEFAULT_LOADING_MESSAGE;\n+    private String errorMessage = DEFAULT_ERROR_MESSAGE;\n+    private String noResultsMessage = DEFAULT_NO_RESULTS_MESSAGE;\n+    private String notLoadedMessage = DEFAULT_NOT_LOADED_MESSAGE;\n+\n+    /**\n+     * Main constructor.\n+     *\n+     * @param tableModel The model to use for the table.\n+     */\n+    public DataResultTable(ListTableModel<T> tableModel) {\n+        this.tableModel = tableModel;\n+        this.table = new JTable(tableModel);\n+        this.table.getTableHeader().setReorderingAllowed(false);\n+\n+        this.overlayLayer = new Overlay();\n+        this.tableScrollPane = new JScrollPane(table);\n+        JLayer<JComponent> dualLayer = new JLayer<JComponent>(tableScrollPane, overlayLayer);\n+        setLayout(new BorderLayout());\n+        add(dualLayer, BorderLayout.CENTER);\n+    }\n+\n+    /**\n+     * @return The underlying JTable's column model.\n+     */\n+    public TableColumnModel getColumnModel() {\n+        return this.table.getColumnModel();\n+    }\n+\n+    /**\n+     * Sets the underlying JTable's column model.\n+     *\n+     * @param columnModel The table column model to use with the JTable.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setColumnModel(TableColumnModel columnModel) {\n+        this.table.setColumnModel(columnModel);\n+        return this;\n+    }\n+\n+    /**\n+     * @return The message shown when loading.\n+     */\n+    public String getLoadingMessage() {\n+        return loadingMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there is an exception.\n+     */\n+    public String getErrorMessage() {\n+        return errorMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there are no results.\n+     */\n+    public String getNoResultsMessage() {\n+        return noResultsMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when the table has not been loaded.\n+     */\n+    public String getNotLoadedMessage() {\n+        return notLoadedMessage;\n+    }\n+\n+    /**\n+     * Sets the loading message.\n+     *\n+     * @param loadingMessage The loading message.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setLoadingMessage(String loadingMessage) {\n+        this.loadingMessage = loadingMessage;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the error message\n+     *\n+     * @param errorMessage The error message.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setErrorMessage(String errorMessage) {\n+        this.errorMessage = errorMessage;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the message to be shown when no results are present.\n+     *\n+     * @param noResultsMessage The 'no results' message.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setNoResultsMessage(String noResultsMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQ5MzA4OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozMzoyMFrOHHayPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTozMzoyMFrOHHayPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0MDkyNg==", "bodyText": "I am not convinced we need this much flexibility. Why not have have a generic message that can be localized once for Japanese, Spanish, etc.? It would also support the design goal of having consistency across all of the summary panels.", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477540926", "createdAt": "2020-08-26T19:33:20Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTable.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Autopsy Forensic Browser\n+ *\n+ * Copyright 2020 Basis Technology Corp.\n+ * Contact: carrier <at> sleuthkit <dot> org\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sleuthkit.autopsy.datasourcesummary.uiutils;\n+\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.JLayer;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.plaf.LayerUI;\n+import javax.swing.table.TableColumnModel;\n+import org.openide.util.NbBundle.Messages;\n+import org.sleuthkit.autopsy.coreutils.Logger;\n+\n+/**\n+ * A table that displays a list of items and also can display messages for\n+ * loading, load error, and not loaded.\n+ */\n+@Messages({\n+    \"DataResultTable_loadingMessage_defaultText=Loading results...\",\n+    \"DataResultTable_errorMessage_defaultText=There was an error loading results.\"\n+})\n+public class DataResultTable<T> extends JPanel {\n+\n+    /**\n+     * JTables don't allow displaying messages. So this LayerUI is used to\n+     * display the contents of a child JLabel. Inspired by TableWaitLayerTest\n+     * (Animating a Busy Indicator):\n+     * https://docs.oracle.com/javase/tutorial/uiswing/misc/jlayer.html.\n+     */\n+    private static class Overlay extends LayerUI<JComponent> {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        private final JLabel child;\n+        private boolean visible;\n+\n+        /**\n+         * Main constructor for the Overlay.\n+         */\n+        Overlay() {\n+            child = new JLabel();\n+            child.setHorizontalAlignment(JLabel.CENTER);\n+            child.setVerticalAlignment(JLabel.CENTER);\n+            child.setOpaque(false);\n+\n+        }\n+\n+        /**\n+         * @return Whether or not this message overlay should be visible.\n+         */\n+        boolean isVisible() {\n+            return visible;\n+        }\n+\n+        /**\n+         * Sets this layer visible when painted. In order to be shown in UI,\n+         * this component needs to be repainted.\n+         *\n+         * @param visible Whether or not it is visible.\n+         */\n+        void setVisible(boolean visible) {\n+            this.visible = visible;\n+        }\n+\n+        /**\n+         * @return The child JLabel component.\n+         */\n+        JLabel getChild() {\n+            return child;\n+        }\n+\n+        /**\n+         * Sets the message to be displayed in the child jlabel.\n+         *\n+         * @param message The message to be displayed.\n+         */\n+        void setMessage(String message) {\n+            child.setText(String.format(\"<html><div style='text-align: center;'>%s</div></html>\", message));\n+        }\n+\n+        @Override\n+        public void paint(Graphics g, JComponent c) {\n+            // Paint the underlying view.\n+            super.paint(g, c);\n+\n+            if (!visible) {\n+                return;\n+            }\n+\n+            int w = c.getWidth();\n+            int h = c.getHeight();\n+\n+            // paint the jlabel if visible.\n+            child.setBounds(0, 0, w, h);\n+            child.paint(g);\n+        }\n+    }\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger logger = Logger.getLogger(DataResultTable.class.getName());\n+\n+    private static final String DEFAULT_LOADING_MESSAGE = Bundle.DataResultTable_loadingMessage_defaultText();\n+    private static final String DEFAULT_ERROR_MESSAGE = Bundle.DataResultTable_errorMessage_defaultText();\n+    private static final String DEFAULT_NO_RESULTS_MESSAGE = \"\";\n+    private static final String DEFAULT_NOT_LOADED_MESSAGE = \"\";\n+\n+    private final JScrollPane tableScrollPane;\n+    private final Overlay overlayLayer;\n+    private final ListTableModel<T> tableModel;\n+    private final JTable table;\n+\n+    private String loadingMessage = DEFAULT_LOADING_MESSAGE;\n+    private String errorMessage = DEFAULT_ERROR_MESSAGE;\n+    private String noResultsMessage = DEFAULT_NO_RESULTS_MESSAGE;\n+    private String notLoadedMessage = DEFAULT_NOT_LOADED_MESSAGE;\n+\n+    /**\n+     * Main constructor.\n+     *\n+     * @param tableModel The model to use for the table.\n+     */\n+    public DataResultTable(ListTableModel<T> tableModel) {\n+        this.tableModel = tableModel;\n+        this.table = new JTable(tableModel);\n+        this.table.getTableHeader().setReorderingAllowed(false);\n+\n+        this.overlayLayer = new Overlay();\n+        this.tableScrollPane = new JScrollPane(table);\n+        JLayer<JComponent> dualLayer = new JLayer<JComponent>(tableScrollPane, overlayLayer);\n+        setLayout(new BorderLayout());\n+        add(dualLayer, BorderLayout.CENTER);\n+    }\n+\n+    /**\n+     * @return The underlying JTable's column model.\n+     */\n+    public TableColumnModel getColumnModel() {\n+        return this.table.getColumnModel();\n+    }\n+\n+    /**\n+     * Sets the underlying JTable's column model.\n+     *\n+     * @param columnModel The table column model to use with the JTable.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setColumnModel(TableColumnModel columnModel) {\n+        this.table.setColumnModel(columnModel);\n+        return this;\n+    }\n+\n+    /**\n+     * @return The message shown when loading.\n+     */\n+    public String getLoadingMessage() {\n+        return loadingMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there is an exception.\n+     */\n+    public String getErrorMessage() {\n+        return errorMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when there are no results.\n+     */\n+    public String getNoResultsMessage() {\n+        return noResultsMessage;\n+    }\n+\n+    /**\n+     * @return The message shown when the table has not been loaded.\n+     */\n+    public String getNotLoadedMessage() {\n+        return notLoadedMessage;\n+    }\n+\n+    /**\n+     * Sets the loading message.\n+     *\n+     * @param loadingMessage The loading message.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setLoadingMessage(String loadingMessage) {\n+        this.loadingMessage = loadingMessage;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the error message\n+     *\n+     * @param errorMessage The error message.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setErrorMessage(String errorMessage) {\n+        this.errorMessage = errorMessage;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the message to be shown when no results are present.\n+     *\n+     * @param noResultsMessage The 'no results' message.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setNoResultsMessage(String noResultsMessage) {\n+        this.noResultsMessage = noResultsMessage;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the 'not loaded' message.\n+     *\n+     * @param notLoadedMessage The message to be shown when results are not\n+     *                         loaded.\n+     *\n+     * @return As a utility, returns this.\n+     */\n+    public DataResultTable<T> setNotLoadedMessage(String notLoadedMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTU5NjM2OnYy", "diffSide": "RIGHT", "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTableUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDowMzoyOFrOHHbxVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDowMzoyOFrOHHbxVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NzA3Ng==", "bodyText": "Why put these methods in a separate class?", "url": "https://github.com/sleuthkit/autopsy/pull/6205#discussion_r477557076", "createdAt": "2020-08-26T20:03:28Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/datasourcesummary/uiutils/DataResultTableUtils.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Autopsy Forensic Browser", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67eaa71de9e53b8a73b22fd75d2f25a8f7aed7ec"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 869, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}