{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2Mjk1MDQz", "number": 6057, "title": "6579: Input from user can cause SQL exceptions in Personas", "bodyText": "Modified persona classes to run SQL as prepared statements.", "createdAt": "2020-07-08T14:49:37Z", "url": "https://github.com/sleuthkit/autopsy/pull/6057", "merged": true, "mergeCommit": {"oid": "21fcf8eeb44aedcbea112cfaf5b277f36b87c03a"}, "closed": true, "closedAt": "2020-07-09T19:35:17Z", "author": {"login": "raman-bt"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcy7mbUAH2gAyNDQ2Mjk1MDQzOjQ0MjZiYmEzNThjN2ZhODAwNzY3MzAwYzQ5MDM3MTFhZjdlZDliMTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczUTEcgFqTQ0NTkxMTIwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4426bba358c7fa800767300c4903711af7ed9b18", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/4426bba358c7fa800767300c4903711af7ed9b18", "committedDate": "2020-07-08T14:48:40Z", "message": "6579: Input from user can cause SQL exceptions in Personas\n\nModified persona classes to run SQL as prepared statements."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NTY4NTIy", "url": "https://github.com/sleuthkit/autopsy/pull/6057#pullrequestreview-445568522", "createdAt": "2020-07-09T12:30:12Z", "commit": {"oid": "4426bba358c7fa800767300c4903711af7ed9b18"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1ODIwOTg5", "url": "https://github.com/sleuthkit/autopsy/pull/6057#pullrequestreview-445820989", "createdAt": "2020-07-09T17:23:02Z", "commit": {"oid": "4426bba358c7fa800767300c4903711af7ed9b18"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzoyMzowMlrOGvawRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzozOToyNVrOGvbTwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NDU5OA==", "bodyText": "@raman-bt and @gdicristofaro, I think we can hadnle closing of the ResultSet more cleanly using another try with resources.", "url": "https://github.com/sleuthkit/autopsy/pull/6057#discussion_r452374598", "createdAt": "2020-07-09T17:23:02Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/RdbmsCentralRepo.java", "diffHunk": "@@ -2543,88 +2547,55 @@ public void processSelectClause(String selectClause, InstanceTableCallback insta\n     }\n \n     @Override\n-    public void executeInsertSQL(String insertClause) throws CentralRepoException {\n-\n-        if (insertClause == null) {\n-            throw new CentralRepoException(\"Insert SQL is null\");\n-        }\n-\n-        String sql = getPlatformSpecificInsertSQL(insertClause);\n-        try (Connection conn = connect();\n-                PreparedStatement preparedStatement = conn.prepareStatement(sql);) {\n+    public void executeSqlAsPreparedStatement(String sql, List<Object> params) throws CentralRepoException {\n+      \n+        try (Connection conn = connect();) {\n+            \n+            PreparedStatement preparedStatement = conn.prepareStatement(sql);\n+                \n+             // Fill in the params\n+             if (params != null) {\n+                int paramIndex = 1;\n+                for (Object param : params) {\n+                    preparedStatement.setObject(paramIndex, param);\n+                    paramIndex += 1;\n+                }\n+            }\n+            // execute the prepared statement\n             preparedStatement.executeUpdate();\n         } catch (SQLException ex) {\n-            throw new CentralRepoException(String.format(\"Error running SQL %s, exception = %s\", sql, ex.getMessage()), ex);\n+            throw new CentralRepoException(String.format(\"Error executing prepared statement for SQL %s\", sql), ex);\n         }\n     }\n \n     @Override\n-    public void executeSelectSQL(String selectSQL, CentralRepositoryDbQueryCallback queryCallback) throws CentralRepoException {\n+    public void executeQueryAsPreparedStatement(String sql, List<Object> params, CentralRepositoryDbQueryCallback queryCallback) throws CentralRepoException {\n         if (queryCallback == null) {\n             throw new CentralRepoException(\"Query callback is null\");\n         }\n \n-        if (selectSQL == null) {\n-            throw new CentralRepoException(\"Select SQL is null\");\n-        }\n-\n-        StringBuilder sqlSb = new StringBuilder(QUERY_STR_MAX_LEN);\n-        if (selectSQL.trim().toUpperCase().startsWith(\"SELECT\") == false) {\n-            sqlSb.append(\"SELECT \");\n-        }\n-\n-        sqlSb.append(selectSQL);\n-\n-        try (Connection conn = connect();\n-                PreparedStatement preparedStatement = conn.prepareStatement(sqlSb.toString());\n-                ResultSet resultSet = preparedStatement.executeQuery();) {\n+        ResultSet resultSet = null;\n+        try ( Connection conn = connect();)   {\n+             PreparedStatement preparedStatement = conn.prepareStatement(sql);\n+             \n+            // fill in the params\n+            if (params != null) {\n+                int paramIndex = 1;\n+                for (Object param : params) {\n+                    preparedStatement.setObject(paramIndex, param);\n+                    paramIndex += 1;\n+                }\n+            }\n+            // execute query\n+            resultSet = preparedStatement.executeQuery();\n+           \n             queryCallback.process(resultSet);\n         } catch (SQLException ex) {\n-            throw new CentralRepoException(String.format(\"Error running SQL %s, exception = %s\", selectSQL, ex.getMessage()), ex);\n-        }\n-    }\n-    \n-    @Override\n-    public void executeUpdateSQL(String updateSQL) throws CentralRepoException {\n-\n-        if (updateSQL == null) {\n-            throw new CentralRepoException(\"Update SQL is null\");\n-        }\n-\n-        StringBuilder sqlSb = new StringBuilder(QUERY_STR_MAX_LEN);\n-        if (updateSQL.trim().toUpperCase().startsWith(\"UPDATE\") == false) {\n-            sqlSb.append(\"UPDATE \");\n-        }\n-        \n-        sqlSb.append(updateSQL);\n-        \n-        try (Connection conn = connect();\n-                PreparedStatement preparedStatement = conn.prepareStatement(sqlSb.toString());) {\n-            preparedStatement.executeUpdate();\n-        } catch (SQLException ex) {\n-            throw new CentralRepoException(String.format(\"Error running SQL %s, exception = %s\", updateSQL, ex.getMessage()), ex);\n-        }\n-    }\n-    \n-    @Override\n-    public void executeDeleteSQL(String deleteSQL) throws CentralRepoException {\n-        \n-        if (deleteSQL == null) {\n-            throw new CentralRepoException(\"Delete SQL is null\");\n-        }\n-\n-        StringBuilder sqlSb = new StringBuilder(QUERY_STR_MAX_LEN);\n-        if (deleteSQL.trim().toUpperCase().startsWith(\"DELETE\") == false) {\n-            sqlSb.append(\"DELETE \");\n-        }\n-\n-        sqlSb.append(deleteSQL);\n-\n-        try (Connection conn = connect();\n-                PreparedStatement preparedStatement = conn.prepareStatement(sqlSb.toString());) {\n-            preparedStatement.executeUpdate();\n-        } catch (SQLException ex) {\n-            throw new CentralRepoException(String.format(\"Error running SQL %s, exception = %s\", deleteSQL, ex.getMessage()), ex);\n+            throw new CentralRepoException(String.format(\"Error executing prepared statement for SQL query %s\", sql), ex);\n+        } finally {\n+            if (resultSet != null) {\n+                CentralRepoDbUtil.closeResultSet(resultSet);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4426bba358c7fa800767300c4903711af7ed9b18"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NjE1OQ==", "bodyText": "@raman-bt and @gdicristofaro, this method is documented as executing an UPDATE/INSERT/DELETE statement. We need to acquire the exclusive (write) lock, not the shared (read) lock.", "url": "https://github.com/sleuthkit/autopsy/pull/6057#discussion_r452376159", "createdAt": "2020-07-09T17:25:51Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/SqliteCentralRepo.java", "diffHunk": "@@ -832,48 +832,27 @@ public void processSelectClause(String selectClause, InstanceTableCallback insta\n             releaseSharedLock();\n         }        \n     }      \n-\n-    @Override\n-    public void executeInsertSQL(String insertSQL) throws CentralRepoException {\n-        try {\n-            acquireSharedLock();\n-            super.executeInsertSQL(insertSQL);\n-        } finally {\n-            releaseSharedLock();\n-        }\n-    }\n     \n     @Override\n-    public void executeSelectSQL(String selectSQL, CentralRepositoryDbQueryCallback queryCallback) throws CentralRepoException {\n+    public void executeSqlAsPreparedStatement(String sql, List<Object> params) throws CentralRepoException {\n         try {\n             acquireSharedLock();\n-            super.executeSelectSQL(selectSQL, queryCallback);\n+            super.executeSqlAsPreparedStatement(sql, params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4426bba358c7fa800767300c4903711af7ed9b18"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4MzY4MA==", "bodyText": "Perhaps we want to call the new methods:\nexecuteCommand\nexecuteQuery\n?", "url": "https://github.com/sleuthkit/autopsy/pull/6057#discussion_r452383680", "createdAt": "2020-07-09T17:39:25Z", "author": {"login": "rcordovano"}, "path": "Core/src/org/sleuthkit/autopsy/centralrepository/datamodel/CentralRepository.java", "diffHunk": "@@ -827,78 +825,64 @@ CorrelationAttributeInstance getCorrelationAttributeInstance(CorrelationAttribut\n     /**\n      * Process a SELECT query\n      *\n-     * @param selectClause          query string to execute\n+     * @param selectClause query string to execute\n      * @param instanceTableCallback callback to process the instance\n      *\n      * @throws CentralRepoException\n      */\n-    public void processSelectClause(String selectClause, InstanceTableCallback instanceTableCallback) throws CentralRepoException;     \n-    \n-    \n-    /**\n-     * Executes an INSERT sql statement on the central repository database.\n-     * @param sql INSERT sql to execute.\n-     * \n-     * @throws CentralRepoException  If there is an error.\n-     */\n-    void executeInsertSQL(String sql) throws CentralRepoException;\n-    \n-    /**\n-     * Executes a SELECT sql statement on the central repository database.\n-     * \n-     * @param sql SELECT sql to execute.\n-     * @param queryCallback Query callback to handle the result of the query.\n-     * \n-     * @throws CentralRepoException If there is an error.\n-     */\n-    void executeSelectSQL(String sql, CentralRepositoryDbQueryCallback queryCallback) throws CentralRepoException;\n-    \n+    public void processSelectClause(String selectClause, InstanceTableCallback instanceTableCallback) throws CentralRepoException;\n+\n     /**\n-     * Executes an UPDATE sql statement on the central repository database.\n-     * \n-     * @param sql UPDATE sql to execute.\n-     * \n+     * Executes an INSERT/UPDATE/DELETE sql as a prepared statement, on the\n+     * central repository database.\n+     *\n+     * @param sql sql to execute.\n+     * @param params List of query params to use, may be empty.\n+     *\n      * @throws CentralRepoException If there is an error.\n      */\n-    void executeUpdateSQL(String sql) throws CentralRepoException;\n-    \n+    void executeSqlAsPreparedStatement(String sql, List<Object> params) throws CentralRepoException;\n+\n     /**\n-     * Executes a DELETE sql statement on the central repository database.\n-     * \n-     * @param sql DELETE sql to execute.\n-     * \n+     * Executes a SELECT query sql as a prepared statement, on the central\n+     * repository database.\n+     *\n+     * @param sql sql to execute.\n+     * @param params List of query params to use, may be empty.\n+     * @param queryCallback Query callback to handle the result of the query.\n+     *\n      * @throws CentralRepoException If there is an error.\n      */\n-    void executeDeleteSQL(String sql) throws CentralRepoException;\n-    \n+    void executeQueryAsPreparedStatement(String sql, List<Object> params, CentralRepositoryDbQueryCallback queryCallback) throws CentralRepoException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4426bba358c7fa800767300c4903711af7ed9b18"}, "originalPosition": 394}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c19ff6cf960f2dd02919024f64341b1b8e67caa0", "author": {"user": {"login": "raman-bt", "name": null}}, "url": "https://github.com/sleuthkit/autopsy/commit/c19ff6cf960f2dd02919024f64341b1b8e67caa0", "committedDate": "2020-07-09T18:45:58Z", "message": "Addressed review comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1OTExMjA4", "url": "https://github.com/sleuthkit/autopsy/pull/6057#pullrequestreview-445911208", "createdAt": "2020-07-09T19:35:09Z", "commit": {"oid": "c19ff6cf960f2dd02919024f64341b1b8e67caa0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2923, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}