{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NjE3NDAz", "number": 3697, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjozMTowMVrOESJPOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyNzoyMVrOETR7xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDYxMTc4OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjozMTowMVrOG3MBFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjozMTowMVrOG3MBFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyMTc1MQ==", "bodyText": "These can all be deleted. Make the members public instead (see below) and Kotlin will generate them automatically.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                fun setAnswerVariable(answerVariable: UserVariable?) {\n          \n          \n            \n                    if (answerVariable == null) {\n          \n          \n            \n                        return\n          \n          \n            \n                    }\n          \n          \n            \n                    this.answerVariable = answerVariable\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                fun setQuestionFormula(questionFormula: Formula?) {\n          \n          \n            \n                    this.questionFormula = questionFormula\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                fun setSprite(sprite: Sprite?) {\n          \n          \n            \n                    this.sprite = sprite\n          \n          \n            \n                }", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460521751", "createdAt": "2020-07-26T12:31:01Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        val message = StageActivity.messageHandler.obtainMessage(StageActivity.REGISTER_INTENT, params)\n+        message.sendToTarget()\n+\n+        questionAsked = true\n+    }\n+\n+    private fun createRecognitionIntent(question: String?): Intent {\n+        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)\n+        intent.putExtra(\n+            RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n+            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n+        )\n+        if (question != null && question.length != 0) {\n+            intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n+        }\n+        return intent\n+    }\n+\n+    fun setAnswerText(answer: String?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        answerVariable!!.value = answer\n+\n+        answerReceived = true\n+    }\n+\n+    fun setAnswerVariable(answerVariable: UserVariable?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        this.answerVariable = answerVariable\n+    }\n+\n+    fun setQuestionFormula(questionFormula: Formula?) {\n+        this.questionFormula = questionFormula\n+    }\n+\n+    fun setSprite(sprite: Sprite?) {\n+        this.sprite = sprite\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDYzMDk3OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjo1Mjo0OVrOG3MKfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjo1Mjo0OVrOG3MKfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNDE1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                private var sprite: Sprite? = null\n          \n          \n            \n                private var questionFormula: Formula? = null\n          \n          \n            \n                private var answerVariable: UserVariable? = null\n          \n          \n            \n                var sprite: Sprite? = null\n          \n          \n            \n                var questionFormula: Formula? = null\n          \n          \n            \n                var answerVariable: UserVariable? = null", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460524159", "createdAt": "2020-07-26T12:52:49Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDYzMTM3OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjo1MzoyNFrOG3MKtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjo1MzoyNFrOG3MKtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNDIxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (StageActivity.messageHandler == null) {\n          \n          \n            \n                        return\n          \n          \n            \n                    }\n          \n          \n            \n                    val params = ArrayList<Any>()\n          \n          \n            \n                    params.add(this)\n          \n          \n            \n                    val message = StageActivity.messageHandler.obtainMessage(StageActivity.REGISTER_INTENT, params)\n          \n          \n            \n                    message.sendToTarget()\n          \n          \n            \n            \n          \n          \n            \n                    questionAsked = true\n          \n          \n            \n                    StageActivity.messageHandler?.obtainMessage(\n          \n          \n            \n                        StageActivity.REGISTER_INTENT,\n          \n          \n            \n                        listOf(this)\n          \n          \n            \n                    )?.sendToTarget()\n          \n          \n            \n                    questionAsked = true", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460524215", "createdAt": "2020-07-26T12:53:24Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        val message = StageActivity.messageHandler.obtainMessage(StageActivity.REGISTER_INTENT, params)\n+        message.sendToTarget()\n+\n+        questionAsked = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDYzMTkwOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjo1NDoxMFrOG3MLBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjo1NDoxMFrOG3MLBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNDI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private fun createRecognitionIntent(question: String?): Intent {\n          \n          \n            \n                    val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)\n          \n          \n            \n                    intent.putExtra(\n          \n          \n            \n                        RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n          \n          \n            \n                        RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n          \n          \n            \n                    )\n          \n          \n            \n                    if (question != null && question.length != 0) {\n          \n          \n            \n                        intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n          \n          \n            \n                    }\n          \n          \n            \n                    return intent\n          \n          \n            \n                }\n          \n          \n            \n                private fun createRecognitionIntent(question: String) =\n          \n          \n            \n                    Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).also { intent ->\n          \n          \n            \n                        intent.putExtra(\n          \n          \n            \n                            RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n          \n          \n            \n                            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n          \n          \n            \n                        )\n          \n          \n            \n                        if (question.isNotBlank()) {\n          \n          \n            \n                            intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n          \n          \n            \n                        }\n          \n          \n            \n                    }", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460524292", "createdAt": "2020-07-26T12:54:10Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        val message = StageActivity.messageHandler.obtainMessage(StageActivity.REGISTER_INTENT, params)\n+        message.sendToTarget()\n+\n+        questionAsked = true\n+    }\n+\n+    private fun createRecognitionIntent(question: String?): Intent {\n+        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)\n+        intent.putExtra(\n+            RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n+            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n+        )\n+        if (question != null && question.length != 0) {\n+            intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n+        }\n+        return intent\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDYzNTAwOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjo1NzowOFrOG3MMeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjo1NzowOFrOG3MMeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNDY2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                fun setAnswerText(answer: String?) {\n          \n          \n            \n                    if (answerVariable == null) {\n          \n          \n            \n                        return\n          \n          \n            \n                    }\n          \n          \n            \n                    answerVariable!!.value = answer\n          \n          \n            \n            \n          \n          \n            \n                    answerReceived = true\n          \n          \n            \n                }\n          \n          \n            \n                private fun setAnswerText(answer: String) {\n          \n          \n            \n                    answerVariable?.apply {\n          \n          \n            \n                        value = answer\n          \n          \n            \n                    }\n          \n          \n            \n                    answerReceived = true\n          \n          \n            \n                }", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460524664", "createdAt": "2020-07-26T12:57:08Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        val message = StageActivity.messageHandler.obtainMessage(StageActivity.REGISTER_INTENT, params)\n+        message.sendToTarget()\n+\n+        questionAsked = true\n+    }\n+\n+    private fun createRecognitionIntent(question: String?): Intent {\n+        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)\n+        intent.putExtra(\n+            RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n+            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n+        )\n+        if (question != null && question.length != 0) {\n+            intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n+        }\n+        return intent\n+    }\n+\n+    fun setAnswerText(answer: String?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        answerVariable!!.value = answer\n+\n+        answerReceived = true\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDYzNjIzOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjo1ODo0MlrOG3MNFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjo1ODo0MlrOG3MNFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNDgyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var question: String? = \"\"\n          \n          \n            \n                    try {\n          \n          \n            \n                        if (questionFormula != null) {\n          \n          \n            \n                            question = questionFormula!!.interpretString(sprite)\n          \n          \n            \n                        }\n          \n          \n            \n                    } catch (e: InterpretationException) {\n          \n          \n            \n                        Log.e(javaClass.simpleName, \"formula interpretation in ask brick failed\")\n          \n          \n            \n                    }\n          \n          \n            \n                    val question = try {\n          \n          \n            \n                        questionFormula?.interpretString(sprite) ?: \"\"\n          \n          \n            \n                    } catch (e: InterpretationException) {\n          \n          \n            \n                        Log.e(TAG, \"Formula interpretation in ask brick failed\")\n          \n          \n            \n                        \"\"\n          \n          \n            \n                    }", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460524823", "createdAt": "2020-07-26T12:58:42Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        val message = StageActivity.messageHandler.obtainMessage(StageActivity.REGISTER_INTENT, params)\n+        message.sendToTarget()\n+\n+        questionAsked = true\n+    }\n+\n+    private fun createRecognitionIntent(question: String?): Intent {\n+        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)\n+        intent.putExtra(\n+            RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n+            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n+        )\n+        if (question != null && question.length != 0) {\n+            intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n+        }\n+        return intent\n+    }\n+\n+    fun setAnswerText(answer: String?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        answerVariable!!.value = answer\n+\n+        answerReceived = true\n+    }\n+\n+    fun setAnswerVariable(answerVariable: UserVariable?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        this.answerVariable = answerVariable\n+    }\n+\n+    fun setQuestionFormula(questionFormula: Formula?) {\n+        this.questionFormula = questionFormula\n+    }\n+\n+    fun setSprite(sprite: Sprite?) {\n+        this.sprite = sprite\n+    }\n+\n+    override fun act(delta: Float): Boolean {\n+        if (!questionAsked) {\n+            askQuestion()\n+        }\n+        return answerReceived\n+    }\n+\n+    override fun restart() {\n+        questionAsked = false\n+        answerReceived = false\n+        super.restart()\n+    }\n+\n+    override fun getTargetIntent(): Intent {\n+        var question: String? = \"\"\n+        try {\n+            if (questionFormula != null) {\n+                question = questionFormula!!.interpretString(sprite)\n+            }\n+        } catch (e: InterpretationException) {\n+            Log.e(javaClass.simpleName, \"formula interpretation in ask brick failed\")\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDYzNzMzOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjo1OTo1M1rOG3MNow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjo1OTo1M1rOG3MNow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNDk2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    val matches: ArrayList<String>?\n          \n          \n            \n                    when (resultCode) {\n          \n          \n            \n                        Activity.RESULT_OK -> {\n          \n          \n            \n                            matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)\n          \n          \n            \n                            Log.d(TAG, \"Results Speechrecognition: $matches\")\n          \n          \n            \n                            if (matches != null && matches.size > 0) {\n          \n          \n            \n                                setAnswerText(matches[0])\n          \n          \n            \n                            } else {\n          \n          \n            \n                                setAnswerText(\"\")\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        Activity.RESULT_CANCELED, Activity.RESULT_FIRST_USER -> setAnswerText(\"\") // User canceled action\n          \n          \n            \n                        else -> Log.e(TAG, \"unhandled speech recognizer resultCode $resultCode\")\n          \n          \n            \n                    }\n          \n          \n            \n                    when (resultCode) {\n          \n          \n            \n                        Activity.RESULT_OK -> {\n          \n          \n            \n                            val matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)\n          \n          \n            \n                            Log.d(TAG, \"Speech recognition results: $matches\")\n          \n          \n            \n                            setAnswerText(matches?.elementAtOrNull(0) ?: \"\")\n          \n          \n            \n                        }\n          \n          \n            \n                        Activity.RESULT_CANCELED, Activity.RESULT_FIRST_USER -> setAnswerText(\"\")\n          \n          \n            \n                        else -> Log.e(TAG, \"unhandled speech recognizer resultCode $resultCode\")\n          \n          \n            \n                    }", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460524963", "createdAt": "2020-07-26T12:59:53Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        val message = StageActivity.messageHandler.obtainMessage(StageActivity.REGISTER_INTENT, params)\n+        message.sendToTarget()\n+\n+        questionAsked = true\n+    }\n+\n+    private fun createRecognitionIntent(question: String?): Intent {\n+        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)\n+        intent.putExtra(\n+            RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n+            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n+        )\n+        if (question != null && question.length != 0) {\n+            intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n+        }\n+        return intent\n+    }\n+\n+    fun setAnswerText(answer: String?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        answerVariable!!.value = answer\n+\n+        answerReceived = true\n+    }\n+\n+    fun setAnswerVariable(answerVariable: UserVariable?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        this.answerVariable = answerVariable\n+    }\n+\n+    fun setQuestionFormula(questionFormula: Formula?) {\n+        this.questionFormula = questionFormula\n+    }\n+\n+    fun setSprite(sprite: Sprite?) {\n+        this.sprite = sprite\n+    }\n+\n+    override fun act(delta: Float): Boolean {\n+        if (!questionAsked) {\n+            askQuestion()\n+        }\n+        return answerReceived\n+    }\n+\n+    override fun restart() {\n+        questionAsked = false\n+        answerReceived = false\n+        super.restart()\n+    }\n+\n+    override fun getTargetIntent(): Intent {\n+        var question: String? = \"\"\n+        try {\n+            if (questionFormula != null) {\n+                question = questionFormula!!.interpretString(sprite)\n+            }\n+        } catch (e: InterpretationException) {\n+            Log.e(javaClass.simpleName, \"formula interpretation in ask brick failed\")\n+        }\n+        return createRecognitionIntent(question)\n+    }\n+\n+    override fun onIntentResult(resultCode: Int, data: Intent) {\n+        val matches: ArrayList<String>?\n+        when (resultCode) {\n+            Activity.RESULT_OK -> {\n+                matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)\n+                Log.d(TAG, \"Results Speechrecognition: $matches\")\n+                if (matches != null && matches.size > 0) {\n+                    setAnswerText(matches[0])\n+                } else {\n+                    setAnswerText(\"\")\n+                }\n+            }\n+            Activity.RESULT_CANCELED, Activity.RESULT_FIRST_USER -> setAnswerText(\"\") // User canceled action\n+            else -> Log.e(TAG, \"unhandled speech recognizer resultCode $resultCode\")\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzE5OTE3OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzozOToxNFrOG3i3Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODowODo0OVrOG3tyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5NjA3NQ==", "bodyText": "you can use AskSpeechAction::class.java.simpleName instead of hard coding", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460896075", "createdAt": "2020-07-27T13:39:14Z", "author": {"login": "ndrnour"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    var sprite: Sprite? = null\n+    var questionFormula: Formula? = null\n+    var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        StageActivity.messageHandler?.obtainMessage(StageActivity.REGISTER_INTENT,\n+            listOf(this))?.sendToTarget()\n+\n+        questionAsked = true\n+    }\n+\n+    private fun createRecognitionIntent(question: String?) =\n+        Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).also { intent ->\n+            intent.putExtra(\n+                RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n+                RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n+            )\n+\n+            if (question != null && question.length != 0) {\n+                intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n+            }\n+        }\n+\n+    fun setAnswerText(answer: String?) {\n+        answerVariable?.apply {\n+            value = answer\n+        }\n+\n+        answerReceived = true\n+    }\n+\n+    override fun act(delta: Float): Boolean {\n+        if (!questionAsked) {\n+            askQuestion()\n+        }\n+        return answerReceived\n+    }\n+\n+    override fun restart() {\n+        questionAsked = false\n+        answerReceived = false\n+        super.restart()\n+    }\n+\n+    override fun getTargetIntent(): Intent {\n+        val question = try {\n+            questionFormula?.interpretString(sprite) ?: \"\"\n+        } catch (e: InterpretationException) {\n+            Log.e(TAG, \"Formula interpretation in ask brick failed\")\n+            \"\"\n+        }\n+        return createRecognitionIntent(question)\n+    }\n+\n+    override fun onIntentResult(resultCode: Int, data: Intent) {\n+        val matches: ArrayList<String>?\n+        when (resultCode) {\n+            Activity.RESULT_OK -> {\n+                matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)\n+                Log.d(TAG, \"Results Speechrecognition: $matches\")\n+                if (matches != null && matches.size > 0) {\n+                    setAnswerText(matches[0])\n+                } else {\n+                    setAnswerText(\"\")\n+                }\n+            }\n+            Activity.RESULT_CANCELED, Activity.RESULT_FIRST_USER -> setAnswerText(\"\") // User canceled action\n+            else -> Log.e(TAG, \"unhandled speech recognizer resultCode $resultCode\")\n+        }\n+    }\n+\n+    companion object {\n+        private const val TAG = \"AskSpeechAction\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3381988076b68f8451c55dfccd47799f731928d"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NDk5Mg==", "bodyText": "Just javaClass.simpleName also works", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r461074992", "createdAt": "2020-07-27T18:08:49Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    var sprite: Sprite? = null\n+    var questionFormula: Formula? = null\n+    var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        StageActivity.messageHandler?.obtainMessage(StageActivity.REGISTER_INTENT,\n+            listOf(this))?.sendToTarget()\n+\n+        questionAsked = true\n+    }\n+\n+    private fun createRecognitionIntent(question: String?) =\n+        Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).also { intent ->\n+            intent.putExtra(\n+                RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n+                RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n+            )\n+\n+            if (question != null && question.length != 0) {\n+                intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n+            }\n+        }\n+\n+    fun setAnswerText(answer: String?) {\n+        answerVariable?.apply {\n+            value = answer\n+        }\n+\n+        answerReceived = true\n+    }\n+\n+    override fun act(delta: Float): Boolean {\n+        if (!questionAsked) {\n+            askQuestion()\n+        }\n+        return answerReceived\n+    }\n+\n+    override fun restart() {\n+        questionAsked = false\n+        answerReceived = false\n+        super.restart()\n+    }\n+\n+    override fun getTargetIntent(): Intent {\n+        val question = try {\n+            questionFormula?.interpretString(sprite) ?: \"\"\n+        } catch (e: InterpretationException) {\n+            Log.e(TAG, \"Formula interpretation in ask brick failed\")\n+            \"\"\n+        }\n+        return createRecognitionIntent(question)\n+    }\n+\n+    override fun onIntentResult(resultCode: Int, data: Intent) {\n+        val matches: ArrayList<String>?\n+        when (resultCode) {\n+            Activity.RESULT_OK -> {\n+                matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)\n+                Log.d(TAG, \"Results Speechrecognition: $matches\")\n+                if (matches != null && matches.size > 0) {\n+                    setAnswerText(matches[0])\n+                } else {\n+                    setAnswerText(\"\")\n+                }\n+            }\n+            Activity.RESULT_CANCELED, Activity.RESULT_FIRST_USER -> setAnswerText(\"\") // User canceled action\n+            else -> Log.e(TAG, \"unhandled speech recognizer resultCode $resultCode\")\n+        }\n+    }\n+\n+    companion object {\n+        private const val TAG = \"AskSpeechAction\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5NjA3NQ=="}, "originalCommit": {"oid": "f3381988076b68f8451c55dfccd47799f731928d"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjUyMjI5OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyNzoyMVrOG47Hkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDozMDowN1rOG47QPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MjAzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StageActivity.messageHandler?.obtainMessage(StageActivity.REGISTER_INTENT,\n          \n          \n            \n                        listOf(this))?.sendToTarget()\n          \n          \n            \n                    StageActivity.messageHandler?.obtainMessage(\n          \n          \n            \n                        StageActivity.REGISTER_INTENT,\n          \n          \n            \n                        listOf(this)\n          \n          \n            \n                    )?.sendToTarget()\n          \n      \n    \n    \n  \n\nKotlin convention is to have a separate line for each argument if they don't fit in one", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r462342035", "createdAt": "2020-07-29T14:27:21Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+    var sprite: Sprite? = null\n+    var questionFormula: Formula? = null\n+    var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        StageActivity.messageHandler?.obtainMessage(StageActivity.REGISTER_INTENT,\n+            listOf(this))?.sendToTarget()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "536a67dafa866d540c59d83ce8b420497076b9be"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NDI1NA==", "bodyText": "And please remove the unused import", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r462344254", "createdAt": "2020-07-29T14:30:07Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+    var sprite: Sprite? = null\n+    var questionFormula: Formula? = null\n+    var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        StageActivity.messageHandler?.obtainMessage(StageActivity.REGISTER_INTENT,\n+            listOf(this))?.sendToTarget()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MjAzNQ=="}, "originalCommit": {"oid": "536a67dafa866d540c59d83ce8b420497076b9be"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3889, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}