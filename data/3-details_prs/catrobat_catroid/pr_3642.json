{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTE4NjE4", "number": 3642, "title": "CATROID-291: Refactoring", "bodyText": "Changes done by @ThomasSchwengler:\n\nCreate a EnumUtils helper class to avoid code duplications among enums.\nSimplify readability of NumberFormatsTest by fixating the expected output\nFormulaElement\n\nMove access to static variables from within functions into parameters\nMove common functions into a common package to reduce code duplication\nand enhance readability\nAdd a function package and move all function interpretation into classes following the open-closed principle\nSplit up many functions to improve readability\nSimplify many functions\n\n\nFormula\n\nSimplify many functions by reducing the number of concerns per function\n\n\nCollisionDetection\n\nImprove memory consumption by reducing the number of memory allocations in loops\n\n\nHide direct references to android context in wrappers\nRename functions to be more precise\nReplace some class instances with mocks in tests where possible\n\nChanges done by @gPathpp:\n\nRebase onto develop\nFix NumberFormats\n\nYour checklist for this pull request\nPlease review the contributing guidelines and wiki pages of this repository.\n\n Include the name of the Jira ticket in the PR\u2019s title\n Include a summary of the changes plus the relevant context\n Choose the proper base branch (develop)\n Confirm that the changes follow the project\u2019s coding guidelines\n Verify that the changes generate no compiler or linter warnings\n Perform a self-review of the changes\n Verify to commit no other files than the intentionally changed ones\n Include reasonable and readable tests verifying the added or changed behavior\n Confirm that new and existing unit tests pass locally\n Check that the commits\u2019 message style matches the project\u2019s guideline\n Stick to the project\u2019s gitflow workflow\n Verify that your changes do not have any conflicts with the base branch\n After the PR, verify that all CI checks have passed\n Post a message in the catroid-stage or catroid-ide Slack channel and ask for a code reviewer", "createdAt": "2020-06-21T09:11:45Z", "url": "https://github.com/Catrobat/Catroid/pull/3642", "merged": true, "mergeCommit": {"oid": "59e791457fbac549aeac286cee254fbd8aae68e0"}, "closed": true, "closedAt": "2020-07-10T16:32:50Z", "author": {"login": "gPathpp"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvAO6ugFqTQzODA4NzkwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABczlA_DgFqTQ0NjQ3NjIwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDg3OTA0", "url": "https://github.com/Catrobat/Catroid/pull/3642#pullrequestreview-438087904", "createdAt": "2020-06-26T07:56:11Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo1NjoxMVrOGpXXUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOTo1NDo1NlrOGpa_dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNzYwMw==", "bodyText": "Please remove this from this PR, IDE specific stuff", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446027603", "createdAt": "2020-06-26T07:56:11Z", "author": {"login": "DinosaurierRex"}, "path": ".idea/codeStyles/Project.xml", "diffHunk": "@@ -100,7 +94,6 @@\n       </indentOptions>\n     </codeStyleSettings>\n     <codeStyleSettings language=\"XML\">\n-      <option name=\"FORCE_REARRANGE_MODE\" value=\"1\" />\n       <indentOptions>\n         <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\n       </indentOptions>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDY1OQ==", "bodyText": "This searches general for the index of a look, not only Background. Please rename it", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446070659", "createdAt": "2020-06-26T09:22:13Z", "author": {"login": "DinosaurierRex"}, "path": "catroid/src/main/java/org/catrobat/catroid/formulaeditor/common/FormulaElementOperations.kt", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.formulaeditor.common\n+\n+import android.content.res.Resources\n+import com.badlogic.gdx.math.Rectangle\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.common.LookData\n+import org.catrobat.catroid.content.GroupSprite\n+import org.catrobat.catroid.content.Look\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.Scene\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.SensorHandler\n+import org.catrobat.catroid.formulaeditor.Sensors\n+import org.catrobat.catroid.formulaeditor.UserList\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.nfc.NfcHandler\n+import org.catrobat.catroid.sensing.CollisionDetection\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageListener\n+import org.catrobat.catroid.utils.NumberFormats\n+import org.catrobat.catroid.utils.TouchUtil\n+import java.lang.Double.valueOf\n+import kotlin.math.round\n+\n+object FormulaElementOperations {\n+    @JvmStatic\n+    fun getLookLayerIndex(sprite: Sprite?, look: Look, spriteList: List<Sprite?>): Double {\n+        val lookZIndex = look.zIndex\n+        return when {\n+            lookZIndex == 0 -> 0.0\n+            lookZIndex < 0 -> spriteList.indexOf(sprite).toDouble()\n+            else -> lookZIndex.toDouble() - Constants.Z_INDEX_NUMBER_VIRTUAL_LAYERS\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun equalsDoubleIEEE754(left: Double, right: Double) =\n+        left.isNaN() && right.isNaN() || !left.isNaN() && !right.isNaN() && left >= right && left <= right\n+\n+    @JvmStatic\n+    fun interpretOperatorEqual(left: Any, right: Any): Boolean {\n+        val leftString = left.toString()\n+        val rightString = right.toString()\n+        return try {\n+            equalsDoubleIEEE754(leftString.toDouble(), rightString.toDouble())\n+        } catch (_: NumberFormatException) {\n+            leftString == rightString\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun tryInterpretDoubleValue(obj: Any): Double {\n+        return when (obj) {\n+            is String -> try {\n+                valueOf(obj)\n+            } catch (_: NumberFormatException) {\n+                Double.NaN\n+            }\n+            else -> obj as Double\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun normalizeDegeneratedDoubleValues(value: Any?): Any {\n+        return when (value) {\n+            is String,\n+            is Char -> value\n+            is Double -> when (value) {\n+                Double.NEGATIVE_INFINITY -> -Double.MAX_VALUE\n+                Double.POSITIVE_INFINITY -> Double.MAX_VALUE\n+                else -> value\n+            }\n+            else -> 0.0\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun isInteger(value: Double) = value.isFinite() && value == round(value)\n+\n+    @JvmStatic\n+    fun tryGetLookBackgroundNumber(lookData: LookData?, lookDataList: List<LookData>) =", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDk2OQ==", "bodyText": "same as above", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446070969", "createdAt": "2020-06-26T09:22:47Z", "author": {"login": "DinosaurierRex"}, "path": "catroid/src/main/java/org/catrobat/catroid/formulaeditor/common/FormulaElementOperations.kt", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.formulaeditor.common\n+\n+import android.content.res.Resources\n+import com.badlogic.gdx.math.Rectangle\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.common.LookData\n+import org.catrobat.catroid.content.GroupSprite\n+import org.catrobat.catroid.content.Look\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.Scene\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.SensorHandler\n+import org.catrobat.catroid.formulaeditor.Sensors\n+import org.catrobat.catroid.formulaeditor.UserList\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.nfc.NfcHandler\n+import org.catrobat.catroid.sensing.CollisionDetection\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageListener\n+import org.catrobat.catroid.utils.NumberFormats\n+import org.catrobat.catroid.utils.TouchUtil\n+import java.lang.Double.valueOf\n+import kotlin.math.round\n+\n+object FormulaElementOperations {\n+    @JvmStatic\n+    fun getLookLayerIndex(sprite: Sprite?, look: Look, spriteList: List<Sprite?>): Double {\n+        val lookZIndex = look.zIndex\n+        return when {\n+            lookZIndex == 0 -> 0.0\n+            lookZIndex < 0 -> spriteList.indexOf(sprite).toDouble()\n+            else -> lookZIndex.toDouble() - Constants.Z_INDEX_NUMBER_VIRTUAL_LAYERS\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun equalsDoubleIEEE754(left: Double, right: Double) =\n+        left.isNaN() && right.isNaN() || !left.isNaN() && !right.isNaN() && left >= right && left <= right\n+\n+    @JvmStatic\n+    fun interpretOperatorEqual(left: Any, right: Any): Boolean {\n+        val leftString = left.toString()\n+        val rightString = right.toString()\n+        return try {\n+            equalsDoubleIEEE754(leftString.toDouble(), rightString.toDouble())\n+        } catch (_: NumberFormatException) {\n+            leftString == rightString\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun tryInterpretDoubleValue(obj: Any): Double {\n+        return when (obj) {\n+            is String -> try {\n+                valueOf(obj)\n+            } catch (_: NumberFormatException) {\n+                Double.NaN\n+            }\n+            else -> obj as Double\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun normalizeDegeneratedDoubleValues(value: Any?): Any {\n+        return when (value) {\n+            is String,\n+            is Char -> value\n+            is Double -> when (value) {\n+                Double.NEGATIVE_INFINITY -> -Double.MAX_VALUE\n+                Double.POSITIVE_INFINITY -> Double.MAX_VALUE\n+                else -> value\n+            }\n+            else -> 0.0\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun isInteger(value: Double) = value.isFinite() && value == round(value)\n+\n+    @JvmStatic\n+    fun tryGetLookBackgroundNumber(lookData: LookData?, lookDataList: List<LookData>) =\n+        lookData?.let { lookDataList.indexOf(it) + 1.0 } ?: 1.0\n+\n+    @JvmStatic\n+    fun getLookBackgroundName(lookData: LookData?) = lookData?.name ?: \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3ODc2Mw==", "bodyText": "Patrick already mentioned this issue, please refactor to dont use context here for only fetching a string", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446078763", "createdAt": "2020-06-26T09:38:24Z", "author": {"login": "DinosaurierRex"}, "path": "catroid/src/main/java/org/catrobat/catroid/ui/dialogs/FormulaEditorComputeDialog.java", "diffHunk": "@@ -145,22 +149,40 @@ public void onAccuracyChanged(Sensor sensor, int accuracy) {\n \n \t@Override\n \tpublic void onSensorChanged(SensorEvent event) {\n-\t\tshowFormulaResult();\n+\t\tProjectManager projectManager = ProjectManager.getInstance();\n+\t\tSprite currentSprite = projectManager.getCurrentSprite();\n+\t\tAndroidStringProvider stringProvider = new AndroidStringProvider(context);\n+\t\tshowFormulaResult(currentSprite, stringProvider);\n \t}\n \n \tprivate void setDialogTextView(final String newString) {\n-\t\tcomputeTextView.post(new Runnable() {\n-\t\t\t@Override\n-\t\t\tpublic void run() {\n-\t\t\t\tcomputeTextView.setText(newString);\n-\n-\t\t\t\tViewGroup.LayoutParams params = computeTextView.getLayoutParams();\n-\t\t\t\tint height = computeTextView.getLineCount() * computeTextView.getLineHeight();\n-\t\t\t\tint heightMargin = (int) (height * 0.5);\n-\t\t\t\tparams.width = ViewGroup.LayoutParams.MATCH_PARENT;\n-\t\t\t\tparams.height = height + heightMargin;\n-\t\t\t\tcomputeTextView.setLayoutParams(params);\n-\t\t\t}\n+\t\tcomputeTextView.post(() -> {\n+\t\t\tcomputeTextView.setText(newString);\n+\n+\t\t\tViewGroup.LayoutParams params = computeTextView.getLayoutParams();\n+\t\t\tint height = computeTextView.getLineCount() * computeTextView.getLineHeight();\n+\t\t\tint heightMargin = (int) (height * 0.5);\n+\t\t\tparams.width = ViewGroup.LayoutParams.MATCH_PARENT;\n+\t\t\tparams.height = height + heightMargin;\n+\t\t\tcomputeTextView.setLayoutParams(params);\n \t\t});\n \t}\n+\n+\tprivate static class AndroidStringProvider implements Formula.StringProvider {\n+\t\tprivate final Context context;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4MzQ4Nw==", "bodyText": "Please remove unused Singleton reference to Projectmanager.", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446083487", "createdAt": "2020-06-26T09:47:36Z", "author": {"login": "DinosaurierRex"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/formulaeditor/FormulaTest.java", "diffHunk": "@@ -49,19 +53,23 @@\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n \n-@RunWith(JUnit4.class)\n+@RunWith(MockitoJUnitRunner.class)\n public class FormulaTest {\n \n \tprivate List<InternToken> internTokenList;\n \n \t@Before\n \tpublic void setUp() {\n-\t\tinternTokenList = new LinkedList<InternToken>();\n+\t\tinternTokenList = new LinkedList<>();\n+\t\tif (ProjectManager.getInstance() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4MzczNw==", "bodyText": "Please try to put duplicate code into setup if possible", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446083737", "createdAt": "2020-06-26T09:48:09Z", "author": {"login": "DinosaurierRex"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/formulaeditor/FormulaTest.java", "diffHunk": "@@ -208,7 +216,8 @@ public void stringConcatenationTest() {\n \t\tFormulaElement joinFunctionFormulaElement = new FormulaElement(ElementType.FUNCTION,\n \t\t\t\tFunctions.JOIN.name(), null, helloStringFormulaElement, worldStringFormulaElement);\n \t\tFormula joinFormula = new Formula(joinFunctionFormulaElement);\n-\t\tString computeDialogResult = joinFormula.getResultForComputeDialog(null);\n+\t\tStringProvider stringProvider = mock(StringProvider.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4NTc5OA==", "bodyText": "Future Refactoring Ticket (Training). Next step could be to rewrite this class to a parameterized test.", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446085798", "createdAt": "2020-06-26T09:52:24Z", "author": {"login": "DinosaurierRex"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/formulaeditor/parser/ParserTest.java", "diffHunk": "@@ -152,7 +129,7 @@ public void testEmptyInput() {\n \n \t@Test\n \tpublic void testFuctionalAndSimpleBracketsCorrection() {\n-\t\tList<InternToken> internTokenList = new LinkedList<InternToken>();\n+\t\tList<InternToken> internTokenList = new LinkedList<>();\n \n \t\tinternTokenList.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.ABS.name()));\n \t\tinternTokenList.add(new InternToken(InternTokenType.FUNCTION_PARAMETERS_BRACKET_OPEN));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4NzAzMA==", "bodyText": "Nice, check if your Implementation works exactly how you implemented it \ud83e\udd23", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446087030", "createdAt": "2020-06-26T09:54:56Z", "author": {"login": "DinosaurierRex"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/utiltests/NumberFormatsTest.java", "diffHunk": "@@ -33,35 +34,34 @@\n \n import static junit.framework.Assert.assertEquals;\n \n-import static org.catrobat.catroid.utils.NumberFormats.stringWithoutTrailingZero;\n-\n @RunWith(Parameterized.class)\n public class NumberFormatsTest {\n-\n \t@Parameterized.Parameter\n-\tpublic @IdRes String name;\n+\tpublic @IdRes String input;\n \t@Parameterized.Parameter(1)\n-\tpublic @IdRes String stringWithoutTrailingZero;\n+\tpublic @IdRes String expected;\n \n \t@Parameterized.Parameters(name = \"{0}\")\n \tpublic static Iterable<Object[]> data() {\n \t\treturn Arrays.asList(new Object[][]{\n-\t\t\t\t{\"0\", stringWithoutTrailingZero(String.valueOf(0))},\n-\t\t\t\t{\"8\", stringWithoutTrailingZero(String.valueOf(8))},\n-\t\t\t\t{\"-120\", stringWithoutTrailingZero(String.valueOf(-120))},\n-\t\t\t\t{\"0\", stringWithoutTrailingZero(String.valueOf(0.0))},\n-\t\t\t\t{\"0.5\", stringWithoutTrailingZero(String.valueOf(0.5))},\n-\t\t\t\t{\"0.7\", stringWithoutTrailingZero(String.valueOf(0.70))},\n-\t\t\t\t{\"0.103\", stringWithoutTrailingZero(String.valueOf(0.1030))},\n-\t\t\t\t{\"15.05\", stringWithoutTrailingZero(String.valueOf(15.050))},\n-\t\t\t\t{\"string.1900\", stringWithoutTrailingZero(\"string.1900\")},\n-\t\t\t\t{\"Pocket\", stringWithoutTrailingZero(\"Pocket\")}\n+\t\t\t\t{\"0\", \"0\"},\n+\t\t\t\t{\"8\", \"8\"},\n+\t\t\t\t{\"-120\", \"-120\"},\n+\t\t\t\t{\"0.0\", \"0\"},\n+\t\t\t\t{\"0.5\", \"0.5\"},\n+\t\t\t\t{\"0.70\", \"0.7\"},\n+\t\t\t\t{\"0.1030\", \"0.103\"},\n+\t\t\t\t{\"15.050\", \"15.05\"},\n+\t\t\t\t{\"string.1900\", \"string.1900\"},\n+\t\t\t\t{\"string0.10\", \"string0.10\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "06e0a226a547f9989f7f644461634602694084c7", "author": {"user": {"login": "gPathpp", "name": "Patrick Gaisberger"}}, "url": "https://github.com/Catrobat/Catroid/commit/06e0a226a547f9989f7f644461634602694084c7", "committedDate": "2020-07-09T19:18:04Z", "message": "CATROID-291: Refactoring\n\n* Create a `EnumUtils` helper class to avoid code duplications among enums.\n* Simplify readability of `NumberFormatsTest` by fixating the expected output\n* `FormulaElement`\n  * Move access to static variables from within functions into parameters\n  * Move common functions into a `common` package to reduce code duplication\n    and enhance readability\n  * Add a `function` package and move all function interpretation into classes following the open-closed principle\n  * Split up many functions to improve readability\n  * Simplify many functions\n* `Formula`\n  * Simplify many functions by reducing the number of concerns per function\n* `CollisionDetection`\n  * Improve memory consumption by reducing the number of memory allocations in loops\n* Hide direct references to android context in wrappers\n* Rename functions to be more precise\n* Replace some class instances with mocks in tests where possible\n\nConvert classes to kotlin, cleanup\n\ncleanup\n\nConvert numberformats to kotlin\n\nFix NumberFormats\n\n\nfix Static Analysis Warnings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "06e0a226a547f9989f7f644461634602694084c7", "author": {"user": {"login": "gPathpp", "name": "Patrick Gaisberger"}}, "url": "https://github.com/Catrobat/Catroid/commit/06e0a226a547f9989f7f644461634602694084c7", "committedDate": "2020-07-09T19:18:04Z", "message": "CATROID-291: Refactoring\n\n* Create a `EnumUtils` helper class to avoid code duplications among enums.\n* Simplify readability of `NumberFormatsTest` by fixating the expected output\n* `FormulaElement`\n  * Move access to static variables from within functions into parameters\n  * Move common functions into a `common` package to reduce code duplication\n    and enhance readability\n  * Add a `function` package and move all function interpretation into classes following the open-closed principle\n  * Split up many functions to improve readability\n  * Simplify many functions\n* `Formula`\n  * Simplify many functions by reducing the number of concerns per function\n* `CollisionDetection`\n  * Improve memory consumption by reducing the number of memory allocations in loops\n* Hide direct references to android context in wrappers\n* Rename functions to be more precise\n* Replace some class instances with mocks in tests where possible\n\nConvert classes to kotlin, cleanup\n\ncleanup\n\nConvert numberformats to kotlin\n\nFix NumberFormats\n\n\nfix Static Analysis Warnings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDI3Njk0", "url": "https://github.com/Catrobat/Catroid/pull/3642#pullrequestreview-446427694", "createdAt": "2020-07-10T14:03:12Z", "commit": {"oid": "06e0a226a547f9989f7f644461634602694084c7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDc2MjAw", "url": "https://github.com/Catrobat/Catroid/pull/3642#pullrequestreview-446476200", "createdAt": "2020-07-10T15:03:47Z", "commit": {"oid": "06e0a226a547f9989f7f644461634602694084c7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1820, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}