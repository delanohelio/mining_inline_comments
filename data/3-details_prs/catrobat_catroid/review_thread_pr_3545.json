{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMDY5NzUz", "number": 3545, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo1ODo1OVrODq28Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoxMDo0OVrODq3RlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjY2ODk1OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/embroidery/RunningStitchType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo1ODo1OVrOF63RTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo1ODo1OVrOF63RTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2NzI3OQ==", "bodyText": "Nice!", "url": "https://github.com/Catrobat/Catroid/pull/3545#discussion_r397267279", "createdAt": "2020-03-24T15:58:59Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/embroidery/RunningStitchType.java", "diffHunk": "@@ -23,7 +23,17 @@\n \n package org.catrobat.catroid.embroidery;\n \n-public interface RunningStitchType {\n-\tvoid setStartCoordinates(float x, float y);\n-\tvoid update(float currentX, float currentY);\n+public abstract class RunningStitchType {\n+\tabstract public void setStartCoordinates(float x, float y);\n+\tabstract public void update(float currentX, float currentY);\n+\n+\tfloat interpolate(float endValue, float startValue, float percentage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjcyMjQxOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/embroidery/ZigZagRunningStitch.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoxMDozMFrOF630uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoxMDozMFrOF630uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3NjM0NA==", "bodyText": "Please find a better solution. Thanks!", "url": "https://github.com/Catrobat/Catroid/pull/3545#discussion_r397276344", "createdAt": "2020-03-24T16:10:30Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/embroidery/ZigZagRunningStitch.java", "diffHunk": "@@ -72,38 +81,28 @@ private void interpolateStitches(int interpolationCount, float currentX, float c\n \t\tif (first) {\n \t\t\tfirst = false;\n \t\t\taddPointInDirection(firstX, firstY, degrees);\n-\t\t\taddPointInDirection(firstX, firstY, degrees);\n \t\t}\n \n \t\tfor (int count = 1; count < interpolationCount; count++) {\n \t\t\tfloat splitFactor = (float) count / interpolationCount;\n \t\t\tfloat x = interpolate(currentX, firstX, splitFactor);\n \t\t\tfloat y = interpolate(currentY, firstY, splitFactor);\n \t\t\taddPointInDirection(x, y, degrees);\n-\t\t\taddPointInDirection(x, y, degrees);\n \t\t}\n-\n-\t\taddPointInDirection(currentX, currentY, degrees);\n \t\taddPointInDirection(currentX, currentY, degrees);\n \t}\n \n \tprivate void addPointInDirection(float x, float y, float degrees) {\n-\t\tfloat xCoord = (float) (x + (width / 2) * Math.sin(Math.toRadians(degrees + 90)) * direction);\n-\t\tfloat yCoord = (float) (y + (width / 2) * Math.cos(Math.toRadians(degrees + 90)) * direction);\n+\t\tfloat xCoord = (float) (x - (width / 2) * Math.sin(Math.toRadians(degrees + 90)) * direction);\n+\t\tfloat yCoord = (float) (y - (width / 2) * Math.cos(Math.toRadians(degrees + 90)) * direction);\n \t\tdirection *= (-1);\n-\t\tStageActivity.stageListener.embroideryPatternManager.addStitchCommand(new DSTStitchCommand(xCoord, yCoord,\n-\t\t\t\tsprite.look.getZIndex(), sprite));\n-\t}\n-\n-\tprivate float interpolate(float endValue, float startValue, float percentage) {\n-\t\tfloat value = Math.round(startValue + percentage * (endValue - startValue));\n-\t\treturn value;\n+\t\tStageActivity.stageListener.embroideryPatternManager.addStitchCommand(new DSTStitchCommand(xCoord,\n+\t\t\t\tyCoord, sprite.look.getZIndex(), sprite));\n+\t\taddStitchesToList(xCoord, yCoord);\n \t}\n \n-\tprivate float getDistanceToPoint(float currentX, float currentY) {\n-\t\tdouble xDistance = Math.pow(currentX - firstX, 2);\n-\t\tdouble yDistance = Math.pow(currentY - firstY, 2);\n-\t\tdouble difference = Math.sqrt(xDistance + yDistance);\n-\t\treturn (float) difference;\n+\tprivate void addStitchesToList(float x, float y) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjcyNDA1OnYy", "diffSide": "RIGHT", "path": "catroid/src/androidTest/java/org/catrobat/catroid/test/embroidery/ZigZagParametrizedTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoxMDo0OVrOF631qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoxMDo0OVrOF631qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3NjU4Ng==", "bodyText": "Please add more tests, thanks!", "url": "https://github.com/Catrobat/Catroid/pull/3545#discussion_r397276586", "createdAt": "2020-03-24T16:10:49Z", "author": {"login": "gPathpp"}, "path": "catroid/src/androidTest/java/org/catrobat/catroid/test/embroidery/ZigZagParametrizedTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.embroidery;\n+\n+import org.catrobat.catroid.content.Look;\n+import org.catrobat.catroid.content.Sprite;\n+import org.catrobat.catroid.embroidery.EmbroideryPatternManager;\n+import org.catrobat.catroid.embroidery.ZigZagRunningStitch;\n+import org.catrobat.catroid.stage.StageActivity;\n+import org.catrobat.catroid.stage.StageListener;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.mockito.Mockito;\n+\n+import java.util.List;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import static java.util.Arrays.asList;\n+\n+@RunWith(Parameterized.class)\n+public class ZigZagParametrizedTest {\n+\t@Parameterized.Parameters(name = \"{0}\")\n+\tpublic static Iterable<Object[]> data() {\n+\t\treturn asList(new Object[][] {\n+\t\t\t\t{\"Test ZigZagPoints\", 10.F, 5.F, asList(10.0F, 20.F, 30.F), asList(2.5F,-2.5F, 2.5F)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3910, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}