{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MzAwODMz", "number": 3636, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOTo1NDo1MlrOEHtWxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzoyMzoyNFrOEHwqmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTE4NTk4OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/ForVariableFromToAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOTo1NDo1MlrOGnOz_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOTo1NDo1MlrOGnOz_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5MDMzNA==", "bodyText": "The loop currently isn't executed for the last value of the range. I'd do something like\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (fromValue == toValue) {\n          \n          \n            \n            \t\t\treturn true;\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\tif (getCurrentIteration() == toValue) {\n          \n          \n            \n            \t\t\treturn true;\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\treturn false;\n          \n          \n            \n            \t\treturn executedCount == Math.abs(toValue - fromValue) + 1;\n          \n      \n    \n    \n  \n\nand check for invalid types (float, String, ...) at the beginning.", "url": "https://github.com/Catrobat/Catroid/pull/3636#discussion_r443790334", "createdAt": "2020-06-22T19:54:52Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/ForVariableFromToAction.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.content.actions;\n+\n+import android.util.Log;\n+\n+import org.catrobat.catroid.content.Sprite;\n+import org.catrobat.catroid.formulaeditor.Formula;\n+import org.catrobat.catroid.formulaeditor.InterpretationException;\n+import org.catrobat.catroid.formulaeditor.UserVariable;\n+\n+public class ForVariableFromToAction extends com.badlogic.gdx.scenes.scene2d.actions.RepeatAction {\n+\n+\tprivate int executedCount;\n+\tprivate UserVariable controlVariable;\n+\tprivate Formula from;\n+\tprivate Formula to;\n+\tprivate Sprite sprite;\n+\tprivate boolean isCurrentLoopInitialized = false;\n+\tprivate boolean isRepeatActionInitialized = false;\n+\tprivate int fromValue;\n+\tprivate int toValue;\n+\tprivate static final float LOOP_DELAY = 0.02f;\n+\tprivate float currentTime = 0f;\n+\n+\t@Override\n+\tpublic boolean delegate(float delta) {\n+\n+\t\tif (!isRepeatActionInitialized) {\n+\t\t\tinterpretParameters();\n+\t\t\tif (isConditionTrue()) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (!isCurrentLoopInitialized) {\n+\t\t\tcurrentTime = 0f;\n+\t\t\tisCurrentLoopInitialized = true;\n+\t\t}\n+\n+\t\tcurrentTime += delta;\n+\n+\t\tif (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+\t\t\tcontrolVariable.setValue((double) getCurrentIteration());\n+\t\t\texecutedCount++;\n+\n+\t\t\tif (isConditionTrue()) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\n+\t\t\tisCurrentLoopInitialized = false;\n+\t\t\tif (action != null) {\n+\t\t\t\taction.restart();\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic void restart() {\n+\t\tisCurrentLoopInitialized = false;\n+\t\tisRepeatActionInitialized = false;\n+\t\texecutedCount = 0;\n+\t\tsuper.restart();\n+\t}\n+\n+\tpublic void setSprite(Sprite sprite) {\n+\t\tthis.sprite = sprite;\n+\t}\n+\n+\tpublic void setRange(Formula from, Formula to) {\n+\t\tthis.from = from;\n+\t\tthis.to = to;\n+\t}\n+\n+\tpublic void setControlVariable(UserVariable variable) {\n+\t\tcontrolVariable = variable;\n+\t}\n+\n+\tprivate void interpretParameters() {\n+\t\tisRepeatActionInitialized = true;\n+\t\ttry {\n+\t\t\tDouble fromInterpretation = from == null ? Double.valueOf(0d) : from.interpretDouble(sprite);\n+\t\t\tfromValue = fromInterpretation.intValue();\n+\t\t\tDouble toInterpretation = to == null ? Double.valueOf(0d) : to.interpretDouble(sprite);\n+\t\t\ttoValue = toInterpretation.intValue();\n+\t\t} catch (InterpretationException interpretationException) {\n+\t\t\tfromValue = 0;\n+\t\t\ttoValue = 0;\n+\t\t\tLog.d(getClass().getSimpleName(), \"Formula interpretation for this specific Brick failed.\", interpretationException);\n+\t\t}\n+\t}\n+\n+\tprivate Boolean isConditionTrue() {\n+\t\tif (fromValue == toValue) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (getCurrentIteration() == toValue) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\treturn false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTE5ODg1OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/ForVariableFromToAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOTo1ODo1NFrOGnO8Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOTo1ODo1NFrOGnO8Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5MjQwMw==", "bodyText": "Considering setting a \"step\" constant to -1 or 1 at the beginning and just do return fromValue + step * executedCount;.  That would also make it easier to expand on the functionality later on.", "url": "https://github.com/Catrobat/Catroid/pull/3636#discussion_r443792403", "createdAt": "2020-06-22T19:58:54Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/ForVariableFromToAction.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.content.actions;\n+\n+import android.util.Log;\n+\n+import org.catrobat.catroid.content.Sprite;\n+import org.catrobat.catroid.formulaeditor.Formula;\n+import org.catrobat.catroid.formulaeditor.InterpretationException;\n+import org.catrobat.catroid.formulaeditor.UserVariable;\n+\n+public class ForVariableFromToAction extends com.badlogic.gdx.scenes.scene2d.actions.RepeatAction {\n+\n+\tprivate int executedCount;\n+\tprivate UserVariable controlVariable;\n+\tprivate Formula from;\n+\tprivate Formula to;\n+\tprivate Sprite sprite;\n+\tprivate boolean isCurrentLoopInitialized = false;\n+\tprivate boolean isRepeatActionInitialized = false;\n+\tprivate int fromValue;\n+\tprivate int toValue;\n+\tprivate static final float LOOP_DELAY = 0.02f;\n+\tprivate float currentTime = 0f;\n+\n+\t@Override\n+\tpublic boolean delegate(float delta) {\n+\n+\t\tif (!isRepeatActionInitialized) {\n+\t\t\tinterpretParameters();\n+\t\t\tif (isConditionTrue()) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (!isCurrentLoopInitialized) {\n+\t\t\tcurrentTime = 0f;\n+\t\t\tisCurrentLoopInitialized = true;\n+\t\t}\n+\n+\t\tcurrentTime += delta;\n+\n+\t\tif (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+\t\t\tcontrolVariable.setValue((double) getCurrentIteration());\n+\t\t\texecutedCount++;\n+\n+\t\t\tif (isConditionTrue()) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\n+\t\t\tisCurrentLoopInitialized = false;\n+\t\t\tif (action != null) {\n+\t\t\t\taction.restart();\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic void restart() {\n+\t\tisCurrentLoopInitialized = false;\n+\t\tisRepeatActionInitialized = false;\n+\t\texecutedCount = 0;\n+\t\tsuper.restart();\n+\t}\n+\n+\tpublic void setSprite(Sprite sprite) {\n+\t\tthis.sprite = sprite;\n+\t}\n+\n+\tpublic void setRange(Formula from, Formula to) {\n+\t\tthis.from = from;\n+\t\tthis.to = to;\n+\t}\n+\n+\tpublic void setControlVariable(UserVariable variable) {\n+\t\tcontrolVariable = variable;\n+\t}\n+\n+\tprivate void interpretParameters() {\n+\t\tisRepeatActionInitialized = true;\n+\t\ttry {\n+\t\t\tDouble fromInterpretation = from == null ? Double.valueOf(0d) : from.interpretDouble(sprite);\n+\t\t\tfromValue = fromInterpretation.intValue();\n+\t\t\tDouble toInterpretation = to == null ? Double.valueOf(0d) : to.interpretDouble(sprite);\n+\t\t\ttoValue = toInterpretation.intValue();\n+\t\t} catch (InterpretationException interpretationException) {\n+\t\t\tfromValue = 0;\n+\t\t\ttoValue = 0;\n+\t\t\tLog.d(getClass().getSimpleName(), \"Formula interpretation for this specific Brick failed.\", interpretationException);\n+\t\t}\n+\t}\n+\n+\tprivate Boolean isConditionTrue() {\n+\t\tif (fromValue == toValue) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (getCurrentIteration() == toValue) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\treturn false;\n+\t}\n+\n+\tprivate int getCurrentIteration() {\n+\t\tif (fromValue < toValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTcyODI0OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/ForVariableFromToTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzoyMzoyNFrOGnUHjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzoyMzoyNFrOGnUHjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3NzI2Mw==", "bodyText": "Rename to ForVariableFromToActionTest", "url": "https://github.com/Catrobat/Catroid/pull/3636#discussion_r443877263", "createdAt": "2020-06-22T23:23:24Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/ForVariableFromToTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.content.actions;\n+\n+import org.catrobat.catroid.content.Script;\n+import org.catrobat.catroid.content.Sprite;\n+import org.catrobat.catroid.content.StartScript;\n+import org.catrobat.catroid.content.bricks.ChangeVariableBrick;\n+import org.catrobat.catroid.content.bricks.ForVariableFromToBrick;\n+import org.catrobat.catroid.content.eventids.EventId;\n+import org.catrobat.catroid.formulaeditor.Formula;\n+import org.catrobat.catroid.formulaeditor.UserVariable;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import static junit.framework.Assert.assertEquals;\n+\n+@RunWith(JUnit4.class)\n+public class ForVariableFromToTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3853, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}