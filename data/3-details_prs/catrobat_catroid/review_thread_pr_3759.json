{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDYzNjQ3", "number": 3759, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo0MzowNVrOEiZwtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMzo0MTozMVrOEi0bDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTA5MTEwOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo0MzowNVrOHQQTpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo0MzowNVrOHQQTpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwNjQzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    context.getString(R.string.preference_white_list_file_key),\n          \n          \n            \n                    context.getString(R.string.preference_approved_list_file_key),\n          \n      \n    \n    \n  \n\nMany software projects, including us in 6124d53 have, due to the developments in society, recently changed all references to white and black lists to something more racially neutral, such as trusted list or approved list.\nPlease also change at all other places in this PR that refers to whitelists.", "url": "https://github.com/Catrobat/Catroid/pull/3759#discussion_r486806439", "createdAt": "2020-09-11T06:43:05Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+@file:JvmName(\"ProjectUtils\")\n+\n+/**\n+ * black listed bricks as defined in CATROID-681\n+ *\n+ * StartListeningBrick and WebRequestBrick or BackgroundRequestBrick or LookRequestBrick\n+ * */\n+\n+package org.catrobat.catroid.ui\n+\n+import android.content.Context\n+import android.content.Context.MODE_PRIVATE\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.bricks.BackgroundRequestBrick\n+import org.catrobat.catroid.content.bricks.Brick\n+import org.catrobat.catroid.content.bricks.LookRequestBrick\n+import org.catrobat.catroid.content.bricks.StartListeningBrick\n+import org.catrobat.catroid.content.bricks.WebRequestBrick\n+\n+/**\n+ * extension boolean function for List<Brick> data type.\n+ * check if the list contains black-listed bricks\n+ * */\n+private fun List<Brick>.containsBlackListedBricks(): Boolean {\n+    val startListeningBrickExists = any { brick ->\n+        brick is StartListeningBrick\n+    }\n+    val backgroundRequestOrWebRequestBrickExists = any { brick ->\n+        brick is WebRequestBrick || brick is BackgroundRequestBrick || brick is LookRequestBrick\n+    }\n+    return startListeningBrickExists and backgroundRequestOrWebRequestBrickExists\n+}\n+\n+/**\n+ * extension boolean function for Project data type.\n+ * check if the project contains black-listed bricks\n+ * */\n+private fun Project.shouldDisplayWarning(): Boolean {\n+    val brickList = arrayListOf<Brick>()\n+    sceneList.forEach { scene ->\n+        brickList.run {\n+            addAll(scene.backgroundSprite.allBricks)\n+            scene.spriteList.forEach { sprite ->\n+                addAll(sprite.allBricks)\n+            }\n+        }\n+    }\n+    return brickList.containsBlackListedBricks()\n+}\n+\n+/**\n+ * [only once]!\n+ * show warning dialog for downloaded projects which contains black-listed bricks\n+ * */\n+\n+fun showWarningDialogIfNeeded(context: Context) {\n+    // used for not showing the dialog again\n+    val sharedPreferences = context.getSharedPreferences(\n+        context.getString(R.string.preference_white_list_file_key),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084ae124bc971e32e58386ccb9f0e5e4dfeff85d"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTE0MzkwOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/res/values/strings-global.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNTo1NzoyNlrOHQ17aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxODo0NzozMVrOHQ20Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMjgyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <!-- name of shared preference file used for storing names of white listed projects -->\n          \n          \n            \n                <string name=\"preference_approved_list_file_key\" translatable=\"false\">\n          \n          \n            \n                    security_warning_white_listed_projects</string>\n          \n          \n            \n                <!-- name of shared preference file used for storing names of approved projects -->\n          \n          \n            \n                <string name=\"preference_approved_list_file_key\" translatable=\"false\">\n          \n          \n            \n                    security_warning_approved_listed_projects</string>\n          \n      \n    \n    \n  \n\nIs this actually used anywhere?", "url": "https://github.com/Catrobat/Catroid/pull/3759#discussion_r487422827", "createdAt": "2020-09-12T15:57:26Z", "author": {"login": "wslany"}, "path": "catroid/src/main/res/values/strings-global.xml", "diffHunk": "@@ -53,4 +53,8 @@\n     <string name=\"terms_of_use_link_template\" translatable=\"false\">&lt;a href=%1$s>%2$s&lt;/a></string>\n     <string name=\"preference_raspi_help_link\">https://catrob.at/RaspberryPi</string>\n \n+    <!-- name of shared preference file used for storing names of white listed projects -->\n+    <string name=\"preference_approved_list_file_key\" translatable=\"false\">\n+        security_warning_white_listed_projects</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cafd2b3274e4638b69554cd332d3f1136cdfce"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNzM0Nw==", "bodyText": "just once, as you see it's a not translatable string (instead of hard coding), so this won't be shown on Crowdin", "url": "https://github.com/Catrobat/Catroid/pull/3759#discussion_r487437347", "createdAt": "2020-09-12T18:47:31Z", "author": {"login": "ndrnour"}, "path": "catroid/src/main/res/values/strings-global.xml", "diffHunk": "@@ -53,4 +53,8 @@\n     <string name=\"terms_of_use_link_template\" translatable=\"false\">&lt;a href=%1$s>%2$s&lt;/a></string>\n     <string name=\"preference_raspi_help_link\">https://catrob.at/RaspberryPi</string>\n \n+    <!-- name of shared preference file used for storing names of white listed projects -->\n+    <string name=\"preference_approved_list_file_key\" translatable=\"false\">\n+        security_warning_white_listed_projects</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMjgyNw=="}, "originalCommit": {"oid": "01cafd2b3274e4638b69554cd332d3f1136cdfce"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTE0NTA4OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNTo1OToxOFrOHQ17_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNTo1OToxOFrOHQ17_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMjk3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * black listed bricks as defined in CATROID-681\n          \n          \n            \n             * suspicious bricks as defined in CATROID-681\n          \n      \n    \n    \n  \n\nSame here: let's not use black and white for social reasons.", "url": "https://github.com/Catrobat/Catroid/pull/3759#discussion_r487422972", "createdAt": "2020-09-12T15:59:18Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+@file:JvmName(\"ProjectUtils\")\n+\n+/**\n+ * black listed bricks as defined in CATROID-681", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cafd2b3274e4638b69554cd332d3f1136cdfce"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTE0NzA2OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNjowMTo0NVrOHQ184Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNjowMTo0NVrOHQ184Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMzIwMQ==", "bodyText": "Do we need a comment here? According to the clean code principle, unnecessary comments should be eliminated. I know I know ;-) there are many places, but we need to start somewhere. Anyway, if we keep it, let's replace the word \"black-listed\" by \"suspicious\" or something similar.", "url": "https://github.com/Catrobat/Catroid/pull/3759#discussion_r487423201", "createdAt": "2020-09-12T16:01:45Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+@file:JvmName(\"ProjectUtils\")\n+\n+/**\n+ * black listed bricks as defined in CATROID-681\n+ *\n+ * StartListeningBrick and WebRequestBrick or BackgroundRequestBrick or LookRequestBrick\n+ * */\n+\n+package org.catrobat.catroid.ui\n+\n+import android.content.Context\n+import android.content.Context.MODE_PRIVATE\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.bricks.BackgroundRequestBrick\n+import org.catrobat.catroid.content.bricks.Brick\n+import org.catrobat.catroid.content.bricks.ForeverBrick\n+import org.catrobat.catroid.content.bricks.LookRequestBrick\n+import org.catrobat.catroid.content.bricks.StartListeningBrick\n+import org.catrobat.catroid.content.bricks.WebRequestBrick\n+\n+/**\n+ * extension boolean function for List<Brick> data type.\n+ * check if the list contains black-listed bricks\n+ * */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cafd2b3274e4638b69554cd332d3f1136cdfce"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTE0NzI4OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNjowMjowM1rOHQ18-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNjowMjowM1rOHQ18-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMzIyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            private fun List<Brick>.containsBlackListedBricks(): Boolean {\n          \n          \n            \n            private fun List<Brick>.containsSuspiciousBricks(): Boolean {", "url": "https://github.com/Catrobat/Catroid/pull/3759#discussion_r487423225", "createdAt": "2020-09-12T16:02:03Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+@file:JvmName(\"ProjectUtils\")\n+\n+/**\n+ * black listed bricks as defined in CATROID-681\n+ *\n+ * StartListeningBrick and WebRequestBrick or BackgroundRequestBrick or LookRequestBrick\n+ * */\n+\n+package org.catrobat.catroid.ui\n+\n+import android.content.Context\n+import android.content.Context.MODE_PRIVATE\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.bricks.BackgroundRequestBrick\n+import org.catrobat.catroid.content.bricks.Brick\n+import org.catrobat.catroid.content.bricks.ForeverBrick\n+import org.catrobat.catroid.content.bricks.LookRequestBrick\n+import org.catrobat.catroid.content.bricks.StartListeningBrick\n+import org.catrobat.catroid.content.bricks.WebRequestBrick\n+\n+/**\n+ * extension boolean function for List<Brick> data type.\n+ * check if the list contains black-listed bricks\n+ * */\n+private fun List<Brick>.containsBlackListedBricks(): Boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cafd2b3274e4638b69554cd332d3f1136cdfce"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTE0OTc1OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNjowNTozOFrOHQ1-Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNjowNTozOFrOHQ1-Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMzUyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /**\n          \n          \n            \n             * extension boolean function for Project data type.\n          \n          \n            \n             * check if the project contains black-listed bricks\n          \n          \n            \n             * */\n          \n          \n            \n            private fun Project.shouldDisplayWarning(): Boolean {\n          \n          \n            \n            private fun Project.shouldDisplaySuspiciousBricksWarning(): Boolean {\n          \n      \n    \n    \n  \n\nIdeally, no comments, instead use clearer names.", "url": "https://github.com/Catrobat/Catroid/pull/3759#discussion_r487423526", "createdAt": "2020-09-12T16:05:38Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+@file:JvmName(\"ProjectUtils\")\n+\n+/**\n+ * black listed bricks as defined in CATROID-681\n+ *\n+ * StartListeningBrick and WebRequestBrick or BackgroundRequestBrick or LookRequestBrick\n+ * */\n+\n+package org.catrobat.catroid.ui\n+\n+import android.content.Context\n+import android.content.Context.MODE_PRIVATE\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.bricks.BackgroundRequestBrick\n+import org.catrobat.catroid.content.bricks.Brick\n+import org.catrobat.catroid.content.bricks.ForeverBrick\n+import org.catrobat.catroid.content.bricks.LookRequestBrick\n+import org.catrobat.catroid.content.bricks.StartListeningBrick\n+import org.catrobat.catroid.content.bricks.WebRequestBrick\n+\n+/**\n+ * extension boolean function for List<Brick> data type.\n+ * check if the list contains black-listed bricks\n+ * */\n+private fun List<Brick>.containsBlackListedBricks(): Boolean {\n+    val startListeningBrickExists = any { brick ->\n+        brick is StartListeningBrick\n+    }\n+    val backgroundRequestOrWebRequestBrickExists = any { brick ->\n+        brick is WebRequestBrick || brick is BackgroundRequestBrick || brick is LookRequestBrick\n+    }\n+    return startListeningBrickExists and backgroundRequestOrWebRequestBrickExists\n+}\n+\n+/**\n+ * extension boolean function for Project data type.\n+ * check if the project contains black-listed bricks\n+ * */\n+private fun Project.shouldDisplayWarning(): Boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cafd2b3274e4638b69554cd332d3f1136cdfce"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTE1MDY3OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNjowNzowN1rOHQ1-kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxODozOTo1MFrOHQ2xaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMzYzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /**\n          \n          \n            \n             * [only once]!\n          \n          \n            \n             * show warning dialog for downloaded projects which contains black-listed bricks\n          \n          \n            \n             * */\n          \n          \n            \n            \n          \n          \n            \n            fun showWarningDialogIfNeeded(context: Context) {\n          \n          \n            \n            fun showWarningForSuspiciousBricksOnce(context: Context) {\n          \n      \n    \n    \n  \n\nIdeally, no comments, instead use clearer names.", "url": "https://github.com/Catrobat/Catroid/pull/3759#discussion_r487423634", "createdAt": "2020-09-12T16:07:07Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+@file:JvmName(\"ProjectUtils\")\n+\n+/**\n+ * black listed bricks as defined in CATROID-681\n+ *\n+ * StartListeningBrick and WebRequestBrick or BackgroundRequestBrick or LookRequestBrick\n+ * */\n+\n+package org.catrobat.catroid.ui\n+\n+import android.content.Context\n+import android.content.Context.MODE_PRIVATE\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.bricks.BackgroundRequestBrick\n+import org.catrobat.catroid.content.bricks.Brick\n+import org.catrobat.catroid.content.bricks.ForeverBrick\n+import org.catrobat.catroid.content.bricks.LookRequestBrick\n+import org.catrobat.catroid.content.bricks.StartListeningBrick\n+import org.catrobat.catroid.content.bricks.WebRequestBrick\n+\n+/**\n+ * extension boolean function for List<Brick> data type.\n+ * check if the list contains black-listed bricks\n+ * */\n+private fun List<Brick>.containsBlackListedBricks(): Boolean {\n+    val startListeningBrickExists = any { brick ->\n+        brick is StartListeningBrick\n+    }\n+    val backgroundRequestOrWebRequestBrickExists = any { brick ->\n+        brick is WebRequestBrick || brick is BackgroundRequestBrick || brick is LookRequestBrick\n+    }\n+    return startListeningBrickExists and backgroundRequestOrWebRequestBrickExists\n+}\n+\n+/**\n+ * extension boolean function for Project data type.\n+ * check if the project contains black-listed bricks\n+ * */\n+private fun Project.shouldDisplayWarning(): Boolean {\n+    val brickList = arrayListOf<Brick>()\n+    sceneList.forEach { scene ->\n+        brickList.run {\n+            scene.backgroundSprite.allBricks.forEach {\n+                add(it)\n+                if (it is ForeverBrick) {\n+                    addAll(it.nestedBricks)\n+                    add(it.allParts.last())\n+                }\n+            }\n+            scene.spriteList.forEach { sprite ->\n+                sprite.allBricks.forEach {\n+                    add(it)\n+                    if (it is ForeverBrick) {\n+                        addAll(it.nestedBricks)\n+                        add(it.allParts.last())\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return brickList.containsBlackListedBricks()\n+}\n+\n+/**\n+ * [only once]!\n+ * show warning dialog for downloaded projects which contains black-listed bricks\n+ * */\n+\n+fun showWarningDialogIfNeeded(context: Context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cafd2b3274e4638b69554cd332d3f1136cdfce"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNjY0OA==", "bodyText": "true in the ideal world & non-open-source project.", "url": "https://github.com/Catrobat/Catroid/pull/3759#discussion_r487436648", "createdAt": "2020-09-12T18:39:50Z", "author": {"login": "ndrnour"}, "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+@file:JvmName(\"ProjectUtils\")\n+\n+/**\n+ * black listed bricks as defined in CATROID-681\n+ *\n+ * StartListeningBrick and WebRequestBrick or BackgroundRequestBrick or LookRequestBrick\n+ * */\n+\n+package org.catrobat.catroid.ui\n+\n+import android.content.Context\n+import android.content.Context.MODE_PRIVATE\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.bricks.BackgroundRequestBrick\n+import org.catrobat.catroid.content.bricks.Brick\n+import org.catrobat.catroid.content.bricks.ForeverBrick\n+import org.catrobat.catroid.content.bricks.LookRequestBrick\n+import org.catrobat.catroid.content.bricks.StartListeningBrick\n+import org.catrobat.catroid.content.bricks.WebRequestBrick\n+\n+/**\n+ * extension boolean function for List<Brick> data type.\n+ * check if the list contains black-listed bricks\n+ * */\n+private fun List<Brick>.containsBlackListedBricks(): Boolean {\n+    val startListeningBrickExists = any { brick ->\n+        brick is StartListeningBrick\n+    }\n+    val backgroundRequestOrWebRequestBrickExists = any { brick ->\n+        brick is WebRequestBrick || brick is BackgroundRequestBrick || brick is LookRequestBrick\n+    }\n+    return startListeningBrickExists and backgroundRequestOrWebRequestBrickExists\n+}\n+\n+/**\n+ * extension boolean function for Project data type.\n+ * check if the project contains black-listed bricks\n+ * */\n+private fun Project.shouldDisplayWarning(): Boolean {\n+    val brickList = arrayListOf<Brick>()\n+    sceneList.forEach { scene ->\n+        brickList.run {\n+            scene.backgroundSprite.allBricks.forEach {\n+                add(it)\n+                if (it is ForeverBrick) {\n+                    addAll(it.nestedBricks)\n+                    add(it.allParts.last())\n+                }\n+            }\n+            scene.spriteList.forEach { sprite ->\n+                sprite.allBricks.forEach {\n+                    add(it)\n+                    if (it is ForeverBrick) {\n+                        addAll(it.nestedBricks)\n+                        add(it.allParts.last())\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return brickList.containsBlackListedBricks()\n+}\n+\n+/**\n+ * [only once]!\n+ * show warning dialog for downloaded projects which contains black-listed bricks\n+ * */\n+\n+fun showWarningDialogIfNeeded(context: Context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMzYzNA=="}, "originalCommit": {"oid": "01cafd2b3274e4638b69554cd332d3f1136cdfce"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTE1MTI5OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNjowODozN1rOHQ1-7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxODo0NTo0MlrOHQ2zZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMzcyNQ==", "bodyText": "This is not clear to me. Why would that be necessary? Isn't that executed only once anyway?", "url": "https://github.com/Catrobat/Catroid/pull/3759#discussion_r487423725", "createdAt": "2020-09-12T16:08:37Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+@file:JvmName(\"ProjectUtils\")\n+\n+/**\n+ * black listed bricks as defined in CATROID-681\n+ *\n+ * StartListeningBrick and WebRequestBrick or BackgroundRequestBrick or LookRequestBrick\n+ * */\n+\n+package org.catrobat.catroid.ui\n+\n+import android.content.Context\n+import android.content.Context.MODE_PRIVATE\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.bricks.BackgroundRequestBrick\n+import org.catrobat.catroid.content.bricks.Brick\n+import org.catrobat.catroid.content.bricks.ForeverBrick\n+import org.catrobat.catroid.content.bricks.LookRequestBrick\n+import org.catrobat.catroid.content.bricks.StartListeningBrick\n+import org.catrobat.catroid.content.bricks.WebRequestBrick\n+\n+/**\n+ * extension boolean function for List<Brick> data type.\n+ * check if the list contains black-listed bricks\n+ * */\n+private fun List<Brick>.containsBlackListedBricks(): Boolean {\n+    val startListeningBrickExists = any { brick ->\n+        brick is StartListeningBrick\n+    }\n+    val backgroundRequestOrWebRequestBrickExists = any { brick ->\n+        brick is WebRequestBrick || brick is BackgroundRequestBrick || brick is LookRequestBrick\n+    }\n+    return startListeningBrickExists and backgroundRequestOrWebRequestBrickExists\n+}\n+\n+/**\n+ * extension boolean function for Project data type.\n+ * check if the project contains black-listed bricks\n+ * */\n+private fun Project.shouldDisplayWarning(): Boolean {\n+    val brickList = arrayListOf<Brick>()\n+    sceneList.forEach { scene ->\n+        brickList.run {\n+            scene.backgroundSprite.allBricks.forEach {\n+                add(it)\n+                if (it is ForeverBrick) {\n+                    addAll(it.nestedBricks)\n+                    add(it.allParts.last())\n+                }\n+            }\n+            scene.spriteList.forEach { sprite ->\n+                sprite.allBricks.forEach {\n+                    add(it)\n+                    if (it is ForeverBrick) {\n+                        addAll(it.nestedBricks)\n+                        add(it.allParts.last())\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return brickList.containsBlackListedBricks()\n+}\n+\n+/**\n+ * [only once]!\n+ * show warning dialog for downloaded projects which contains black-listed bricks\n+ * */\n+\n+fun showWarningDialogIfNeeded(context: Context) {\n+    // used for not showing the dialog again\n+    val sharedPreferences = context.getSharedPreferences(\n+        context.getString(R.string.preference_approved_list_file_key),\n+        MODE_PRIVATE\n+    )\n+    val currentProject = ProjectManager.getInstance().currentProject\n+    val projectUrl = currentProject.xmlHeader.remixParentsUrlString\n+    // if project has an url => is a downloaded project\n+    val isDownloadedProject = projectUrl.isNotBlank()\n+    // since the projectUrl is kinda unique, ues it as key for the shared preference, if it's null\n+    // that means the dialog hasn't been displayed yet\n+    val showForFirstTime = sharedPreferences.getString(projectUrl, null).isNullOrBlank()\n+\n+    if (isDownloadedProject && currentProject.shouldDisplayWarning() && showForFirstTime) {\n+        AlertDialog.Builder(context)\n+            .setTitle(context.resources.getString(R.string.warning))\n+            .setMessage(context.resources.getString(R.string.security_warning_dialog_msg))\n+            .setCancelable(false)\n+            .setPositiveButton(context.resources.getString(R.string.ok)) { dialog, _ ->\n+                sharedPreferences\n+                    .edit()\n+                    .putString(projectUrl, projectUrl)\n+                    .apply()\n+                dialog.dismiss()\n+            }\n+            .show()\n+    } else if (isDownloadedProject) {\n+        // add it anyway to avoid showing this dialog for downloaded projects, but have\n+        // black-listed bricks added by the user afterwards..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cafd2b3274e4638b69554cd332d3f1136cdfce"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNzE1Ng==", "bodyText": "this scenario will explain why is this needed:\n1- download a project which doesn't have the combination of 2 suspicious bricks,\n2- modify the project by adding suspicious bricks\n3- go to the Projects screen\n4- click on the downloaded modified project\n5- the dialog is shown, which is not the case!", "url": "https://github.com/Catrobat/Catroid/pull/3759#discussion_r487437156", "createdAt": "2020-09-12T18:45:42Z", "author": {"login": "ndrnour"}, "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+@file:JvmName(\"ProjectUtils\")\n+\n+/**\n+ * black listed bricks as defined in CATROID-681\n+ *\n+ * StartListeningBrick and WebRequestBrick or BackgroundRequestBrick or LookRequestBrick\n+ * */\n+\n+package org.catrobat.catroid.ui\n+\n+import android.content.Context\n+import android.content.Context.MODE_PRIVATE\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.bricks.BackgroundRequestBrick\n+import org.catrobat.catroid.content.bricks.Brick\n+import org.catrobat.catroid.content.bricks.ForeverBrick\n+import org.catrobat.catroid.content.bricks.LookRequestBrick\n+import org.catrobat.catroid.content.bricks.StartListeningBrick\n+import org.catrobat.catroid.content.bricks.WebRequestBrick\n+\n+/**\n+ * extension boolean function for List<Brick> data type.\n+ * check if the list contains black-listed bricks\n+ * */\n+private fun List<Brick>.containsBlackListedBricks(): Boolean {\n+    val startListeningBrickExists = any { brick ->\n+        brick is StartListeningBrick\n+    }\n+    val backgroundRequestOrWebRequestBrickExists = any { brick ->\n+        brick is WebRequestBrick || brick is BackgroundRequestBrick || brick is LookRequestBrick\n+    }\n+    return startListeningBrickExists and backgroundRequestOrWebRequestBrickExists\n+}\n+\n+/**\n+ * extension boolean function for Project data type.\n+ * check if the project contains black-listed bricks\n+ * */\n+private fun Project.shouldDisplayWarning(): Boolean {\n+    val brickList = arrayListOf<Brick>()\n+    sceneList.forEach { scene ->\n+        brickList.run {\n+            scene.backgroundSprite.allBricks.forEach {\n+                add(it)\n+                if (it is ForeverBrick) {\n+                    addAll(it.nestedBricks)\n+                    add(it.allParts.last())\n+                }\n+            }\n+            scene.spriteList.forEach { sprite ->\n+                sprite.allBricks.forEach {\n+                    add(it)\n+                    if (it is ForeverBrick) {\n+                        addAll(it.nestedBricks)\n+                        add(it.allParts.last())\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return brickList.containsBlackListedBricks()\n+}\n+\n+/**\n+ * [only once]!\n+ * show warning dialog for downloaded projects which contains black-listed bricks\n+ * */\n+\n+fun showWarningDialogIfNeeded(context: Context) {\n+    // used for not showing the dialog again\n+    val sharedPreferences = context.getSharedPreferences(\n+        context.getString(R.string.preference_approved_list_file_key),\n+        MODE_PRIVATE\n+    )\n+    val currentProject = ProjectManager.getInstance().currentProject\n+    val projectUrl = currentProject.xmlHeader.remixParentsUrlString\n+    // if project has an url => is a downloaded project\n+    val isDownloadedProject = projectUrl.isNotBlank()\n+    // since the projectUrl is kinda unique, ues it as key for the shared preference, if it's null\n+    // that means the dialog hasn't been displayed yet\n+    val showForFirstTime = sharedPreferences.getString(projectUrl, null).isNullOrBlank()\n+\n+    if (isDownloadedProject && currentProject.shouldDisplayWarning() && showForFirstTime) {\n+        AlertDialog.Builder(context)\n+            .setTitle(context.resources.getString(R.string.warning))\n+            .setMessage(context.resources.getString(R.string.security_warning_dialog_msg))\n+            .setCancelable(false)\n+            .setPositiveButton(context.resources.getString(R.string.ok)) { dialog, _ ->\n+                sharedPreferences\n+                    .edit()\n+                    .putString(projectUrl, projectUrl)\n+                    .apply()\n+                dialog.dismiss()\n+            }\n+            .show()\n+    } else if (isDownloadedProject) {\n+        // add it anyway to avoid showing this dialog for downloaded projects, but have\n+        // black-listed bricks added by the user afterwards..", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMzcyNQ=="}, "originalCommit": {"oid": "01cafd2b3274e4638b69554cd332d3f1136cdfce"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTE1MTY3OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNjowOTowOFrOHQ1_GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNjowOTowOFrOHQ1_GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMzc2OA==", "bodyText": "...", "url": "https://github.com/Catrobat/Catroid/pull/3759#discussion_r487423768", "createdAt": "2020-09-12T16:09:08Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/ui/ProjectUtils.kt", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+@file:JvmName(\"ProjectUtils\")\n+\n+/**\n+ * black listed bricks as defined in CATROID-681\n+ *\n+ * StartListeningBrick and WebRequestBrick or BackgroundRequestBrick or LookRequestBrick\n+ * */\n+\n+package org.catrobat.catroid.ui\n+\n+import android.content.Context\n+import android.content.Context.MODE_PRIVATE\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.bricks.BackgroundRequestBrick\n+import org.catrobat.catroid.content.bricks.Brick\n+import org.catrobat.catroid.content.bricks.ForeverBrick\n+import org.catrobat.catroid.content.bricks.LookRequestBrick\n+import org.catrobat.catroid.content.bricks.StartListeningBrick\n+import org.catrobat.catroid.content.bricks.WebRequestBrick\n+\n+/**\n+ * extension boolean function for List<Brick> data type.\n+ * check if the list contains black-listed bricks\n+ * */\n+private fun List<Brick>.containsBlackListedBricks(): Boolean {\n+    val startListeningBrickExists = any { brick ->\n+        brick is StartListeningBrick\n+    }\n+    val backgroundRequestOrWebRequestBrickExists = any { brick ->\n+        brick is WebRequestBrick || brick is BackgroundRequestBrick || brick is LookRequestBrick\n+    }\n+    return startListeningBrickExists and backgroundRequestOrWebRequestBrickExists\n+}\n+\n+/**\n+ * extension boolean function for Project data type.\n+ * check if the project contains black-listed bricks\n+ * */\n+private fun Project.shouldDisplayWarning(): Boolean {\n+    val brickList = arrayListOf<Brick>()\n+    sceneList.forEach { scene ->\n+        brickList.run {\n+            scene.backgroundSprite.allBricks.forEach {\n+                add(it)\n+                if (it is ForeverBrick) {\n+                    addAll(it.nestedBricks)\n+                    add(it.allParts.last())\n+                }\n+            }\n+            scene.spriteList.forEach { sprite ->\n+                sprite.allBricks.forEach {\n+                    add(it)\n+                    if (it is ForeverBrick) {\n+                        addAll(it.nestedBricks)\n+                        add(it.allParts.last())\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return brickList.containsBlackListedBricks()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cafd2b3274e4638b69554cd332d3f1136cdfce"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTQ1OTM1OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/res/values/strings-global.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQyMzo0MTozMVrOHQ4NNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QwMDo1NToyNVrOHQ4hDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ2MDE0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    security_warning_white_listed_projects</string>\n          \n          \n            \n                    security_warning_approved_projects</string>", "url": "https://github.com/Catrobat/Catroid/pull/3759#discussion_r487460149", "createdAt": "2020-09-12T23:41:31Z", "author": {"login": "wslany"}, "path": "catroid/src/main/res/values/strings-global.xml", "diffHunk": "@@ -53,4 +53,8 @@\n     <string name=\"terms_of_use_link_template\" translatable=\"false\">&lt;a href=%1$s>%2$s&lt;/a></string>\n     <string name=\"preference_raspi_help_link\">https://catrob.at/RaspberryPi</string>\n \n+    <!-- name of shared preference file used for storing names of approved projects -->\n+    <string name=\"preference_approved_list_file_key\" translatable=\"false\">\n+        security_warning_white_listed_projects</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "385a43d8c7738b9eb56f152fe5f747a682f51f3c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ2NTIyOA==", "bodyText": "done.", "url": "https://github.com/Catrobat/Catroid/pull/3759#discussion_r487465228", "createdAt": "2020-09-13T00:55:25Z", "author": {"login": "ndrnour"}, "path": "catroid/src/main/res/values/strings-global.xml", "diffHunk": "@@ -53,4 +53,8 @@\n     <string name=\"terms_of_use_link_template\" translatable=\"false\">&lt;a href=%1$s>%2$s&lt;/a></string>\n     <string name=\"preference_raspi_help_link\">https://catrob.at/RaspberryPi</string>\n \n+    <!-- name of shared preference file used for storing names of approved projects -->\n+    <string name=\"preference_approved_list_file_key\" translatable=\"false\">\n+        security_warning_white_listed_projects</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ2MDE0OQ=="}, "originalCommit": {"oid": "385a43d8c7738b9eb56f152fe5f747a682f51f3c"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3748, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}