{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNTM4NjYx", "number": 3507, "title": "CATROID-500 Fix variable interpretation in WebRequestBrick", "bodyText": "Moved the interpretation of the input formula of the WebRequestBrick\nfrom the ActionFactory to the action, so that the formula is\ninterpreted at run-time.\nCATROID-500\nYour checklist for this pull request\nPlease review the contributing guidelines and wiki pages of this repository.\n\n Include the name of the Jira ticket in the PR\u2019s title\n Include a summary of the changes plus the relevant context\n Choose the proper base branch (develop)\n Confirm that the changes follow the project\u2019s coding guidelines\n Verify that the changes generate no compiler or linter warnings\n Perform a self-review of the changes\n Verify to commit no other files than the intentionally changed ones\n Include reasonable and readable tests verifying the added or changed behavior\n Confirm that new and existing unit tests pass locally\n Check that the commits\u2019 message style matches the project\u2019s guideline\n Stick to the project\u2019s gitflow workflow\n Verify that your changes do not have any conflicts with the base branch\n After the PR, verify that all CI checks have passed\n Post a message in the catroid-stage or catroid-ide Slack channel and ask for a code reviewer", "createdAt": "2020-03-02T18:27:37Z", "url": "https://github.com/Catrobat/Catroid/pull/3507", "merged": true, "mergeCommit": {"oid": "d5a342ef940f110f451c077f79b00765f2635693"}, "closed": true, "closedAt": "2020-05-12T10:00:15Z", "author": {"login": "stefanreichenauer"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKHK3sABqjMwOTM0ODY4OTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgfMHcgFqTQwOTc3MTA4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMTk2NzUz", "url": "https://github.com/Catrobat/Catroid/pull/3507#pullrequestreview-381196753", "createdAt": "2020-03-25T14:24:12Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoyNDoxM1rOF7dhxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoyNzo1OVrOF7duAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NDA4NQ==", "bodyText": "Could you split up the test in a way that its sepparated from setup and the code lines which really do test something. Also please think about implementing the teardown function because you are using static members like the StageActivity.stageListener. .... This mocks will remain for further tests and may bring them to fail if not reset", "url": "https://github.com/Catrobat/Catroid/pull/3507#discussion_r397894085", "createdAt": "2020-03-25T14:24:13Z", "author": {"login": "DinosaurierRex"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/WebRequestActionTest.java", "diffHunk": "@@ -185,4 +190,50 @@ public void testCancelledCallAndResendRequest() {\n \t\tverify(StageActivity.stageListener.webConnectionHolder, times(2)).addConnection(any());\n \t\tverify(webConnection, times(2)).sendWebRequest();\n \t}\n+\n+\t@Test\n+\tpublic void testSuccessfulResponseWithInputVariable() {\n+\t\tUserVariable inputVariable = new UserVariable(TEST_INPUTVARIABLE, TEST_URL);\n+\t\tFormulaElement formulaElement = new FormulaElement(\n+\t\t\t\tFormulaElement.ElementType.USER_VARIABLE, inputVariable.getName(), null);\n+\t\tfinal String responseString = \"Response\";\n+\n+\t\tFormula formula = Mockito.spy(new Formula(formulaElement));\n+\n+\t\ttestSprite.addUserVariable(userVariable);\n+\t\ttestSprite.addUserVariable(inputVariable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NjI0MA==", "bodyText": "An Exception will automatically cause the test to fail. So please dont catch Excpetions just to make the test \"fail\". Also think about another test where this failing could be triggered in a way that you want the test to pass if the Exception is thrown. Hint: Annotations @Test(expected = NullPointerException.class) like this will make the test pass if the mentioned exception is thrown.", "url": "https://github.com/Catrobat/Catroid/pull/3507#discussion_r397896240", "createdAt": "2020-03-25T14:26:51Z", "author": {"login": "DinosaurierRex"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/WebRequestActionTest.java", "diffHunk": "@@ -185,4 +190,50 @@ public void testCancelledCallAndResendRequest() {\n \t\tverify(StageActivity.stageListener.webConnectionHolder, times(2)).addConnection(any());\n \t\tverify(webConnection, times(2)).sendWebRequest();\n \t}\n+\n+\t@Test\n+\tpublic void testSuccessfulResponseWithInputVariable() {\n+\t\tUserVariable inputVariable = new UserVariable(TEST_INPUTVARIABLE, TEST_URL);\n+\t\tFormulaElement formulaElement = new FormulaElement(\n+\t\t\t\tFormulaElement.ElementType.USER_VARIABLE, inputVariable.getName(), null);\n+\t\tfinal String responseString = \"Response\";\n+\n+\t\tFormula formula = Mockito.spy(new Formula(formulaElement));\n+\n+\t\ttestSprite.addUserVariable(userVariable);\n+\t\ttestSprite.addUserVariable(inputVariable);\n+\n+\t\tWebRequestAction action = (WebRequestAction) testSprite.getActionFactory().createWebRequestAction(\n+\t\t\t\ttestSprite,\n+\t\t\t\tformula,\n+\t\t\t\tuserVariable\n+\t\t);\n+\t\taction.setWebConnectionFactory(webConnectionFactory);\n+\n+\t\twhen(StageActivity.stageListener.webConnectionHolder.addConnection(any())).thenReturn(true);\n+\n+\t\ttry {\n+\t\t\tdoAnswer(invocation -> {\n+\t\t\t\tSprite sprite = invocation.getArgument(0);\n+\t\t\t\treturn String.valueOf(sprite.getUserVariable(TEST_INPUTVARIABLE).getValue());\n+\t\t\t}).when(formula).interpretString(any(Sprite.class));\n+\t\t} catch (InterpretationException e) {\n+\t\t\tfail(\"Formula could not be interpreted\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NzIxNg==", "bodyText": "Split these asserts up in several TCs as far as possible. If a setup function is implemented, for each Testcase your setup will be loaded and then its easier to split up", "url": "https://github.com/Catrobat/Catroid/pull/3507#discussion_r397897216", "createdAt": "2020-03-25T14:27:59Z", "author": {"login": "DinosaurierRex"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/WebRequestActionTest.java", "diffHunk": "@@ -185,4 +190,50 @@ public void testCancelledCallAndResendRequest() {\n \t\tverify(StageActivity.stageListener.webConnectionHolder, times(2)).addConnection(any());\n \t\tverify(webConnection, times(2)).sendWebRequest();\n \t}\n+\n+\t@Test\n+\tpublic void testSuccessfulResponseWithInputVariable() {\n+\t\tUserVariable inputVariable = new UserVariable(TEST_INPUTVARIABLE, TEST_URL);\n+\t\tFormulaElement formulaElement = new FormulaElement(\n+\t\t\t\tFormulaElement.ElementType.USER_VARIABLE, inputVariable.getName(), null);\n+\t\tfinal String responseString = \"Response\";\n+\n+\t\tFormula formula = Mockito.spy(new Formula(formulaElement));\n+\n+\t\ttestSprite.addUserVariable(userVariable);\n+\t\ttestSprite.addUserVariable(inputVariable);\n+\n+\t\tWebRequestAction action = (WebRequestAction) testSprite.getActionFactory().createWebRequestAction(\n+\t\t\t\ttestSprite,\n+\t\t\t\tformula,\n+\t\t\t\tuserVariable\n+\t\t);\n+\t\taction.setWebConnectionFactory(webConnectionFactory);\n+\n+\t\twhen(StageActivity.stageListener.webConnectionHolder.addConnection(any())).thenReturn(true);\n+\n+\t\ttry {\n+\t\t\tdoAnswer(invocation -> {\n+\t\t\t\tSprite sprite = invocation.getArgument(0);\n+\t\t\t\treturn String.valueOf(sprite.getUserVariable(TEST_INPUTVARIABLE).getValue());\n+\t\t\t}).when(formula).interpretString(any(Sprite.class));\n+\t\t} catch (InterpretationException e) {\n+\t\t\tfail(\"Formula could not be interpreted\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tdoAnswer(invocation -> {\n+\t\t\tString url = invocation.getArgument(0);\n+\t\t\tassertEquals(url, TEST_URL);\n+\t\t\treturn webConnection;\n+\t\t}).when(webConnectionFactory).createWebConnection(anyString(), any());\n+\n+\t\tdoAnswer(invocation -> {\n+\t\t\taction.onRequestFinished(responseString);\n+\t\t\treturn null;\n+\t\t}).when(webConnection).sendWebRequest();\n+\n+\t\tassertTrue(action.act(0f));\n+\t\tassertEquals(responseString, userVariable.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "10417aafb2fd6d82abc405a8bfeab24012a70865", "author": {"user": {"login": "stefanreichenauer", "name": "Stefan Reichenauer"}}, "url": "https://github.com/Catrobat/Catroid/commit/10417aafb2fd6d82abc405a8bfeab24012a70865", "committedDate": "2020-04-21T19:08:31Z", "message": "CATROID-500 Fix variable interpretation in WebRequestBrick\n\nMove the interpretation of the input formula of the WebRequestBrick\nfrom the ActionFactory to the action, so that the formula is\ninterpreted at run-time."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "10417aafb2fd6d82abc405a8bfeab24012a70865", "author": {"user": {"login": "stefanreichenauer", "name": "Stefan Reichenauer"}}, "url": "https://github.com/Catrobat/Catroid/commit/10417aafb2fd6d82abc405a8bfeab24012a70865", "committedDate": "2020-04-21T19:08:31Z", "message": "CATROID-500 Fix variable interpretation in WebRequestBrick\n\nMove the interpretation of the input formula of the WebRequestBrick\nfrom the ActionFactory to the action, so that the formula is\ninterpreted at run-time."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NzcxMDg1", "url": "https://github.com/Catrobat/Catroid/pull/3507#pullrequestreview-409771085", "createdAt": "2020-05-12T07:31:58Z", "commit": {"oid": "10417aafb2fd6d82abc405a8bfeab24012a70865"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2003, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}