{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MTM4Njkz", "number": 3597, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNzowNDozNlrOEBKSQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxODoyOTo0MVrOEBMuBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjUyNTQ2OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/res/values/strings.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNzowNDozNlrOGc3KSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNzowNDozNlrOGc3KSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxNzA2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <string name=\"brick_web_request_default_value\">https://official-joke-api.appspot.com/random_joke</string>\n          \n          \n            \n                <string name=\"brick_web_request_default_value\">https://catrob.at/joke</string>\n          \n      \n    \n    \n  \n\nThis change allows us to collect statistics, and also change the link in case the https://official-joke-api.appspot.com/random_joke does not work anymore sometimes in the future.", "url": "https://github.com/Catrobat/Catroid/pull/3597#discussion_r432917066", "createdAt": "2020-05-31T07:04:36Z", "author": {"login": "wslany"}, "path": "catroid/src/main/res/values/strings.xml", "diffHunk": "@@ -1269,6 +1269,8 @@\n     <string name=\"brick_replace_item_in_userlist_with_value\">with</string>\n     <string name=\"brick_web_request\">Send web request to</string>\n     <string name=\"brick_web_request_result\">and store answer in</string>\n+    <string name=\"brick_web_request_ask_permission\">Allow web access?</string>\n+    <string name=\"brick_web_request_dialog_url\">URL: %1$s</string>\n     <string name=\"brick_web_request_default_value\">https://official-joke-api.appspot.com/random_joke</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjUyNzY2OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/res/values/strings.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNzowODoxNFrOGc3LaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNzowODoxNFrOGc3LaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxNzM1Mw==", "bodyText": "Please, as discussed on Slack, let's get rid of the \"URL: \" here and as a consequence also of the brick_web_request_dialog_url text resource, since the former does not add information and anyway is not so well known among our user group, the latter anyway should never be translated, and there's a bit more space in the one line on the display if we can remove the URL: in front of the actual url on the phone's screen. Sorry, this was already specified in a suboptimal way by me on the ticket.", "url": "https://github.com/Catrobat/Catroid/pull/3597#discussion_r432917353", "createdAt": "2020-05-31T07:08:14Z", "author": {"login": "wslany"}, "path": "catroid/src/main/res/values/strings.xml", "diffHunk": "@@ -1269,6 +1269,8 @@\n     <string name=\"brick_replace_item_in_userlist_with_value\">with</string>\n     <string name=\"brick_web_request\">Send web request to</string>\n     <string name=\"brick_web_request_result\">and store answer in</string>\n+    <string name=\"brick_web_request_ask_permission\">Allow web access?</string>\n+    <string name=\"brick_web_request_dialog_url\">URL: %1$s</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjUzNjgzOnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/utiltests/URLWhiteListTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNzoyNTozN1rOGc3QMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNzoyNTozN1rOGc3QMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxODU3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"http://www.ist.tugraz.at:8080/blablabla\"))\n          \n          \n            \n                    assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"http://www.ist.tugraz.at:8080/blablabla\"))\n          \n          \n            \n                    assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"http://www.ist.tugraz.at:8080/\"))\n          \n      \n    \n    \n  \n\nThe second, additional line currently incorrectly does not match yet, but should. Please change the regex to allow for it as well.", "url": "https://github.com/Catrobat/Catroid/pull/3597#discussion_r432918579", "createdAt": "2020-05-31T07:25:37Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/utiltests/URLWhiteListTest.kt", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.utiltests\n+\n+import android.content.Context\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.utils.Utils\n+import org.json.JSONArray\n+import org.json.JSONObject\n+import org.junit.After\n+import org.junit.Assert.assertFalse\n+import org.junit.Assert.assertTrue\n+import org.junit.Before\n+import org.junit.BeforeClass\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.mockito.ArgumentMatchers.any\n+import org.mockito.ArgumentMatchers.anyString\n+import org.mockito.BDDMockito.given\n+import org.powermock.api.mockito.PowerMockito.doReturn\n+import org.powermock.api.mockito.PowerMockito.mock\n+import org.powermock.api.mockito.PowerMockito.mockStatic\n+import org.powermock.core.classloader.annotations.PrepareForTest\n+import org.powermock.modules.junit4.PowerMockRunner\n+import java.io.InputStream\n+\n+@RunWith(PowerMockRunner::class)\n+@PrepareForTest(Utils::class)\n+class URLWhiteListTest {\n+    private lateinit var domains: JSONArray\n+\n+    companion object {\n+        @BeforeClass\n+        @JvmStatic\n+        fun setUpBeforeClass() {\n+            ProjectManager(mock(Context::class.java))\n+        }\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        val stream = mock(InputStream::class.java)\n+        val whiteList = mock(JSONObject::class.java)\n+        domains = mock(JSONArray::class.java)\n+        mockStatic(Utils::class.java)\n+        given(Utils.getInputStreamFromAsset(any(), anyString())).willReturn(stream)\n+        given(Utils.getJsonObjectFromInputStream(stream)).willReturn(whiteList)\n+        doReturn(domains).`when`(whiteList).getJSONArray(Constants.URL_WHITELIST_JSON_ARRAY_NAME)\n+        doReturn(1).`when`(domains).length()\n+    }\n+\n+    @Test\n+    fun testNoProtocol() {\n+        doReturn(\"tugraz.at\").`when`(domains).getString(0)\n+        assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"https://www.tugraz.at\"))\n+        assertFalse(ProjectManager.checkIfURLIsInWhitelist(\"www.tugraz.at\"))\n+    }\n+\n+    @Test\n+    fun testEnding() {\n+        doReturn(\"net\").`when`(domains).getString(0)\n+        assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"https://www.wikipedia.net/blabla\"))\n+        assertFalse(ProjectManager.checkIfURLIsInWhitelist(\"https://something.net.com/blabla\"))\n+    }\n+\n+    @Test\n+    fun testCommonInternetScheme() {\n+        doReturn(\"tugraz.at\").`when`(domains).getString(0)\n+        assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"http://myaccount:@www.ist.tugraz.at/blablabla\"))\n+        assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"http://myaccount:mypassword@www.ist.tugraz.at/blablabla\"))\n+        assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"http://www.ist.tugraz.at:8080/blablabla\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjkyNDIxOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/ProjectManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxODoyOTo0MVrOGc6gyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxODoyOTo0MVrOGc6gyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3MTk3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\turlWhitelistPattern = Pattern.compile(\"https?://([a-zA-Z-.:@]+\\\\.)?\"\n          \n          \n            \n            \t\t\t\t+ trustedDomains.toString().replaceAll(\"\\\\.\", \"\\\\\\\\.\")\n          \n          \n            \n            \t\t\t\t+ \"(:[0-9]{1,5})?(/[a-zA-Z0-9-()@:%_\\\\\\\\+~#.?&/=]*)?\");\n          \n          \n            \n            \t\turlWhitelistPattern = Pattern.compile(\"https?://([a-zA-Z0-9-]+\\\\.)*\"\n          \n          \n            \n            \t\t\t\t+ trustedDomains.toString().replaceAll(\"\\\\.\", \"\\\\\\\\.\")\n          \n          \n            \n            \t\t\t\t+ \"(:[0-9]{1,5})?(/.*)?\");\n          \n      \n    \n    \n  \n\nAfter finding some examples that did not work because numbers incorrectly were not allowed at the front (e.g, connect4.ist.tugraz.at) and understanding that https://www.ietf.org/rfc/rfc1738.txt has been superceded by the newer https://tools.ietf.org/html/rfc3986 (also see https://en.wikipedia.org/wiki/Basic_access_authentication ) meaning that passwords have been depreciated in https? requests, and that basically any character can follow in the path/query/fragment part of the URI after the host and option port number.", "url": "https://github.com/Catrobat/Catroid/pull/3597#discussion_r432971979", "createdAt": "2020-05-31T18:29:41Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/ProjectManager.java", "diffHunk": "@@ -305,6 +313,43 @@ private static void loadLegoEV3SettingsFromProject(Project project, Context cont\n \t\treturn conflicts;\n \t}\n \n+\tpublic static synchronized boolean checkIfURLIsInWhitelist(String url) {\n+\t\tif (urlWhitelistPattern == null) {\n+\t\t\ttry {\n+\t\t\t\tinitializeURLWhitelistPattern();\n+\t\t\t} catch (IOException | JSONException | NullPointerException e) {\n+\t\t\t\tLog.e(TAG, \"Cannot read URL whitelist.\", e);\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\treturn urlWhitelistPattern.matcher(url).matches();\n+\t}\n+\n+\tprivate static void initializeURLWhitelistPattern() throws IOException, JSONException, NullPointerException {\n+\t\tInputStream stream = Utils.getInputStreamFromAsset(instance.applicationContext, Constants.URL_WHITELIST_JSON_FILE_NAME);\n+\t\tJSONObject whiteList = Utils.getJsonObjectFromInputStream(stream);\n+\t\tJSONArray domains = whiteList.getJSONArray(Constants.URL_WHITELIST_JSON_ARRAY_NAME);\n+\n+\t\tStringBuilder trustedDomains = new StringBuilder(\"(\");\n+\t\tfor (int i = 0; i < domains.length(); i++) {\n+\t\t\ttrustedDomains.append(domains.getString(i));\n+\n+\t\t\tif (i < domains.length() - 1) {\n+\t\t\t\ttrustedDomains.append('|');\n+\t\t\t}\n+\t\t}\n+\t\ttrustedDomains.append(')');\n+\n+\t\turlWhitelistPattern = Pattern.compile(\"https?://([a-zA-Z-.:@]+\\\\.)?\"\n+\t\t\t\t+ trustedDomains.toString().replaceAll(\"\\\\.\", \"\\\\\\\\.\")\n+\t\t\t\t+ \"(:[0-9]{1,5})?(/[a-zA-Z0-9-()@:%_\\\\\\\\+~#.?&/=]*)?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3da8682245adf5695865ba2ada5ea1b9d9bb25e5"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3937, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}