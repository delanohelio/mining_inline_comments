{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MzIxNjQ5", "number": 3812, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxODoxODo0OVrOElS2wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTo1OTowOFrOEsS3tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NTQxNjk4OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxODoxODo0OVrOHUtjSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOToyNDowNlrOHVHQLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ3OTg4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\": (?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";\n          \n          \n            \n            \t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*(?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";\n          \n      \n    \n    \n  \n\nSpaces may or may not occur before and after the \":\", see https://www.json.org/json-en.html --- case in point is our default URL for the \"Send web request\" brick which is https://catrob.at/joke which uses no spaces and looks for instance like this:\n{\"id\":378,\"type\":\"programming\",\"setup\":\"What's the best part about TCP jokes?\",\"punchline\":\"I get to keep telling them until you get them.\"}\nor https://geocode.xyz/api that returns json with spaces before the \":\", e.g.,\n{   \"statename\" : {},   \"distance\" : \"0.000\",   \"elevation\" : \"20\", \"state\" : \"UK\",   \"latt\" : \"51.50354\",   \"city\" : \"LONDON\",   \"prov\" : \"UK\",   \"geocode\" : \"LONDON-MCRXA\",   \"geonumber\" : \"3154700960970\", \"country\" : \"United Kingdom\",   \"stnumber\" : \"10\",   \"staddress\" : \"DOWNING STREET\",   \"inlatt\" : \"51.50354\",   \"alt\" : {      \"loc\" : { \"staddress\" : \"DOWNING STREET\",         \"stnumber\" : \"10\", \"postal\" : \"SW1A 2AA\",         \"latt\" : \"51.50354\",         \"city\" : \"LONDON\",         \"prov\" : \"UK\",         \"longt\" : \"-0.12768\", \"class\" : {}      }   },   \"timezone\" : \"Europe/London\", \"region\" : \"Greater London, England\",   \"postal\" : \"SW1A 2AA\",   \"longt\" : \"-0.12768\",   \"remaining_credits\" : {},   \"confidence\" : \"1\", \"inlongt\" : \"-0.12768\",   \"class\" : {},   \"altgeocode\" : \"SYNERGY-MCRXA\"}", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r491479881", "createdAt": "2020-09-19T18:18:49Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\": (?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d798d117c8bd2c7eacfc38e0dbc94d2f8874e37"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkwMDk3Mg==", "bodyText": "Maybe even add a \\\\ in the backward negated non-capturing parentheses before the closing \" so that \" cannot occur in front of the \" in the data field. Would need some testing though whether it actually works ;)", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r491900972", "createdAt": "2020-09-21T09:24:06Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\": (?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ3OTg4MQ=="}, "originalCommit": {"oid": "3d798d117c8bd2c7eacfc38e0dbc94d2f8874e37"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzQyMTcwOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/ui/dialogs/regexassistant/RegularExpressionAssistantDialog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODo0Njo1N1rOHfVEXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODo0Njo1N1rOHfVEXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxMzA4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t  listOfFeatures.add(new HtmlExtractorDialog(fragmentManager));\n          \n          \n            \n            \t\tlistOfFeatures.add(new HtmlExtractorDialog(fragmentManager));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502613085", "createdAt": "2020-10-09T18:46:57Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/ui/dialogs/regexassistant/RegularExpressionAssistantDialog.java", "diffHunk": "@@ -79,10 +79,8 @@ public void onClick(DialogInterface dialog, int indexInList) {\n \n \tprivate void createListOfFeatures() {\n \t\tlistOfFeatures = new ArrayList<>();\n-\t\tif (BuildConfig.FEATURE_REGULAR_EXPRESSION_ASSISTANT_ENABLED) {\n-\t\t\tlistOfFeatures.add(new HtmlExtractorDialog(fragmentManager));\n-\t\t\tlistOfFeatures.add(new JsonExtractorDialog());\n-\t\t}\n+\t  listOfFeatures.add(new HtmlExtractorDialog(fragmentManager));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c937bd62da940e8b8bc4d6283659f2aec694f9ca"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODEzMjg1OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDoyODozM1rOHfbqwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDoyODozM1rOHfbqwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTIxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*(?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";\n          \n          \n            \n            \t\treturn \"(?x) # with comments & spaces ignored\\n\"\n          \n          \n            \n            \t\t\t+ \"\\\"\" + keyword + \"\\\" \\\\s* : \\\\s* \\\"? # find keyword\\n\"\n          \n          \n            \n            \t\t\t+ \"( # start capturing, see https://www.json.org/json-en.html :\\n\"\n          \n          \n            \n            \t\t\t+ \"(?<=\\\") (\\\\\\\\\\\"|[^\\\"])* (?=\\\") # text\\n\"\n          \n          \n            \n            \t\t\t+ \"| ((?<!\\\") # other cases:\\n\"\n          \n          \n            \n            \t\t\t+ \"  [+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)? # numbers\\n\"\n          \n          \n            \n            \t\t\t+ \"| ( true | false | null ) # logical values\\n\"\n          \n          \n            \n            \t\t\t+ \"| \\\\{ [^{]* \\\\} # un-nested object\\n\"\n          \n          \n            \n            \t\t\t+ \"| \\\\[ [^\\\\[]* \\\\] # un-nested array\\n\"\n          \n          \n            \n            \t\t\t+ \"(?!\\\") ) # end of other cases\\n\"\n          \n          \n            \n            \t\t\t+ \")\\\"? # end of captured return value\\n\" \n          \n          \n            \n            \t\t\t+ \"(?=\\\\s*[,\\\\]}]) # correct ending of json\";\n          \n      \n    \n    \n  \n\nSimplify start and end, but also allow more of the cases as listed in https://www.json.org/json-en.html\nResults in the following regex expression, if the keyword is for instance keyword:\n(?x) # with comments & spaces ignored\n\"keyword\" \\s* : \\s* \"? # find keyword\n( # start capturing, see https://www.json.org/json-en.html :\n(?<=\") (\\\\\"|[^\"])* (?=\") # text\n| ((?<!\") # other cases:\n  [+-]?(0|[1-9]\\d*)(\\.\\d+)?([eE][+-]?\\d+)? # numbers\n| ( true | false | null ) # logical values\n| \\{ [^{]* \\} # un-nested object\n| \\[ [^\\[]* \\] # un-nested array\n(?!\") ) # end of other cases\n)\"? # end of captured return value\n(?=\\s*[,\\]}]) # correct ending of json", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502721217", "createdAt": "2020-10-10T00:28:33Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*(?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODI2MzY1OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzowNjowOFrOHfcstg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzowNjowOFrOHfcstg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczODEwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"size\\\": 36,\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502738102", "createdAt": "2020-10-10T03:06:08Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODI2NDY0OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzowNzo1OFrOHfctLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzowNzo1OFrOHfctLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczODIyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"36\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"-36.45e-45\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502738223", "createdAt": "2020-10-10T03:07:58Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"36\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODI2NTk0OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzoxMDowN1rOHfct0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzoxMDowN1rOHfct0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczODM4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n          \n      \n    \n    \n  \n\nThis is the second match, but the first match, 250 higher up, should be the one returned.", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502738387", "createdAt": "2020-10-10T03:10:07Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODI3NTg4OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzoyNDoyM1rOHfcygw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzoyNDoyM1rOHfcygw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczOTU4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"    }\\n\"\n          \n          \n            \n            \t\t\t+ \"    }\\n\"\n          \n          \n            \n            \t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n          \n          \n            \n            \t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t+ \"            }\\n\"\n          \n          \n            \n            \t\t\t+ \"    }\\n\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502739587", "createdAt": "2020-10-10T03:24:23Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODI4MTEyOnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzozMTo0NlrOHfc1JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzozMTo0NlrOHfc1JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0MDI2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t}\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \t@Test\n          \n          \n            \n            \tpublic void testParserExpressionLogic() {\n          \n          \n            \n            \t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n          \n          \n            \n            \t\tMatcher matcher = regexPattern.matcher(jsonExample);\n          \n          \n            \n            \t\tmatcher.find();\n          \n          \n            \n            \t\tassertEquals(\"true\", matcher.group(1));\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \t@Test\n          \n          \n            \n            \tpublic void testParserExpressionArray() {\n          \n          \n            \n            \t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n          \n          \n            \n            \t\tMatcher matcher = regexPattern.matcher(jsonExample);\n          \n          \n            \n            \t\tmatcher.find();\n          \n          \n            \n            \t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \t@Test\n          \n          \n            \n            \tpublic void testParserExpressionObject() {\n          \n          \n            \n            \t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n          \n          \n            \n            \t\tMatcher matcher = regexPattern.matcher(jsonExample);\n          \n          \n            \n            \t\tmatcher.find();\n          \n          \n            \n            \t\tassertEquals(\n          \n          \n            \n            \t\t\t\"{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t+ \"            }\", matcher.group(1));\n          \n          \n            \n            \t}", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502740260", "createdAt": "2020-10-10T03:31:46Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"36\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODMzNDM3OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNDo1Njo0NFrOHfdN2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNDo1Njo0NFrOHfdN2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0NjU4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\"{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t+ \"            }\", matcher.group(1));\n          \n          \n            \n            \t\t\t\t\"{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t\t+ \"            }\", matcher.group(1));\n          \n      \n    \n    \n  \n\nFix static analysis indentation warning.", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502746586", "createdAt": "2020-10-10T04:56:44Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n+\t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\n+\t\t\t\"{ \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1ae5e2d46ea0b34d75d86315750071045940973"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODM3NjA3OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjowMToyMFrOHfdhdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjowMToyMFrOHfdhdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MTYwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"(?x) # with comments & spaces ignored\\n\"\n          \n          \n            \n            \t\t\t+ \"\\\"\" + keyword + \"\\\" \\\\s* : \\\\s* \\\"? # find keyword\\n\"\n          \n          \n            \n            \t\t\t+ \"( # start capturing, see https://www.json.org/json-en.html :\\n\"\n          \n          \n            \n            \t\t\t+ \"(?<=\\\") (\\\\\\\\\\\"|[^\\\"])* (?=\\\") # text\\n\"\n          \n          \n            \n            \t\t\t+ \"| ((?<!\\\") # other cases:\\n\"\n          \n          \n            \n            \t\t\t+ \"  [+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)? # numbers\\n\"\n          \n          \n            \n            \t\t\t+ \"| ( true | false | null ) # logical values\\n\"\n          \n          \n            \n            \t\t\t+ \"| \\\\{ [^{]* \\\\} # un-nested object\\n\"\n          \n          \n            \n            \t\t\t+ \"| \\\\[ [^\\\\[]* \\\\] # un-nested array\\n\"\n          \n          \n            \n            \t\t\t+ \"(?!\\\") ) # end of other cases\\n\"\n          \n          \n            \n            \t\t\t+ \")\\\"? # end of captured return value\\n\" \n          \n          \n            \n            \t\t\t+ \"(?=\\\\s*[,\\\\]}]) # correct ending of json\";\n          \n          \n            \n            \t\treturn \"\\\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword\n          \n          \n            \n            \t\t\t\t+ \"\\\"?((?<=\\\")(\\\\\\\\\\\"|[^\\\"])*(?=\\\")\" // string\n          \n          \n            \n            \t\t\t\t+ \"|(?<!\\\")([+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?\" // number\n          \n          \n            \n            \t\t\t\t+ \"|(true|false|null)\" // boolean\n          \n          \n            \n            \t\t\t\t+ \"|\\\\{[^{]*\\\\}\" // un-nested object\n          \n          \n            \n            \t\t\t\t+ \"|\\\\[[^\\\\[]*\\\\])\" // un-nested array\n          \n          \n            \n            \t\t\t\t+ \"(?!\\\"))\\\"?(?=\\\\s*[,\\\\]}])\"; // correct json expression format\n          \n      \n    \n    \n  \n\nMoved comments inside the regex to the code, since otherwise spaces in the keyword would be ignored.", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502751605", "createdAt": "2020-10-10T06:01:20Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"(?x) # with comments & spaces ignored\\n\"\n+\t\t\t+ \"\\\"\" + keyword + \"\\\" \\\\s* : \\\\s* \\\"? # find keyword\\n\"\n+\t\t\t+ \"( # start capturing, see https://www.json.org/json-en.html :\\n\"\n+\t\t\t+ \"(?<=\\\") (\\\\\\\\\\\"|[^\\\"])* (?=\\\") # text\\n\"\n+\t\t\t+ \"| ((?<!\\\") # other cases:\\n\"\n+\t\t\t+ \"  [+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)? # numbers\\n\"\n+\t\t\t+ \"| ( true | false | null ) # logical values\\n\"\n+\t\t\t+ \"| \\\\{ [^{]* \\\\} # un-nested object\\n\"\n+\t\t\t+ \"| \\\\[ [^\\\\[]* \\\\] # un-nested array\\n\"\n+\t\t\t+ \"(?!\\\") ) # end of other cases\\n\"\n+\t\t\t+ \")\\\"? # end of captured return value\\n\" \n+\t\t\t+ \"(?=\\\\s*[,\\\\]}]) # correct ending of json\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1ae5e2d46ea0b34d75d86315750071045940973"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQxMzk0OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo1NjoxMlrOHfdzMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo1NjoxMlrOHfdzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NjE0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"\\\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword\n          \n          \n            \n            \t\treturn \"\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502756145", "createdAt": "2020-10-10T06:56:12Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"\\\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abdd180efa6bf0898870d3fcc8c35d5108874e91"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQxNjMyOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo1OTo1OFrOHfd0WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo1OTo1OFrOHfd0WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NjQ0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import android.content.Context;\n          \n          \n            \n            \n          \n          \n            \n            public class JsonRegexExtractor {\n          \n          \n            \n            \tprivate Context context;\n          \n          \n            \n            \tpublic JsonRegexExtractor(Context context) {\n          \n          \n            \n            \t\tthis.context = context;\n          \n          \n            \n            \t}\n          \n          \n            \n            public class JsonRegexExtractor {\n          \n      \n    \n    \n  \n\nContext is not used. This is part of the fix to solve the static analysis warning \"Avoid unused private fields such as 'context'.\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502756440", "createdAt": "2020-10-10T06:59:58Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c3978d07bdda037328817f31345ed15e8b56e5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQyMjQ4OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowODo0M1rOHfd3Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowODo0M1rOHfd3Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NzE4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import android.app.Activity;\n          \n      \n    \n    \n  \n\nActivity is not used. This is part of the fix to solve the static analysis warning \"Avoid unused private fields such as 'context'.\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502757182", "createdAt": "2020-10-10T07:08:43Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c3978d07bdda037328817f31345ed15e8b56e5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQyMzA0OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowOToyMlrOHfd3fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowOToyMlrOHfd3fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NzI0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tActivity context = new Activity();\n          \n          \n            \n            \t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n          \n          \n            \n            \t\tthis.jsonExtractor = new JsonRegexExtractor();\n          \n      \n    \n    \n  \n\nContext is not used. This is part of the fix to solve the static analysis warning \"Avoid unused private fields such as 'context'.\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502757246", "createdAt": "2020-10-10T07:09:22Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c3978d07bdda037328817f31345ed15e8b56e5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQ0MjIxOnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzozNTozMVrOHfeAQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzozNTozMVrOHfeAQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1OTQ5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\"{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t\t+ \"            }\", matcher.group(1));\n          \n          \n            \n            \t\t\t\t\"\\{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t\t+ \"            \\}\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502759490", "createdAt": "2020-10-10T07:35:31Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n+\t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\n+\t\t\t\t\"{ \\\"number\\\": 0, \\n\"\n+\t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t\t+ \"            }\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c3978d07bdda037328817f31345ed15e8b56e5"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQ3MDMxOnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODoxNDoxOFrOHfeNvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODoxNDoxOFrOHfeNvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2Mjk0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n          \n          \n            \n            \t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t+ \"            }\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502762943", "createdAt": "2020-10-10T08:14:18Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n+\t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d66a15bd1093286977cdfe33f1f393d9df3f9d9"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQ3MjExOnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODoxNjo1MFrOHfeOlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODoxNjo1MFrOHfeOlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2MzE1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\n          \n          \n            \n            \t\t\t\t\"\\{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t\t+ \"            \\}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals({\"\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502763156", "createdAt": "2020-10-10T08:16:50Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n+\t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\n+\t\t\t\t\"\\{ \\\"number\\\": 0, \\n\"\n+\t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t\t+ \"            \\}\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d66a15bd1093286977cdfe33f1f393d9df3f9d9"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQ4ODA3OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODozODo1NFrOHfeV9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODozODo1NFrOHfeV9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2NTA0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals({\"\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502765046", "createdAt": "2020-10-10T08:38:54Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals({\"\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bfcd984946cb4ac986bb975d3e3bcc2ac63c6c9"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODU1MzgxOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDowNDoxN1rOHfe03w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDowNDoxN1rOHfe03w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3Mjk1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class JsonRegexExtractor {\n          \n          \n            \n            public class JsonRegexExtractor {\n          \n          \n            \n            \n          \n          \n            \n            \tprivate JsonRegexExtractor() {\n          \n          \n            \n            \t\tthrow new IllegalStateException(\"Utility class\");\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\nAccording to https://rules.sonarsource.com/java/tag/design/RSPEC-1118", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502772959", "createdAt": "2020-10-10T10:04:17Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+public class JsonRegexExtractor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ad344587cfd009fc7320237112c18315b2929a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODU1NTU3OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDowNjozMVrOHfe1pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDowNjozMVrOHfe1pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3MzE1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void setUp() {\n          \n          \n            \n            \t\tthis.jsonExtractor = new JsonRegexExtractor();\n          \n          \n            \n            \t}\n          \n          \n            \n            \tpublic void setUp() {}", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502773156", "createdAt": "2020-10-10T10:06:31Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ad344587cfd009fc7320237112c18315b2929a"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODU1ODQwOnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDoxMDozNFrOHfe2-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDoxMDozNFrOHfe2-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3MzQ5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\\n\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502773497", "createdAt": "2020-10-10T10:10:34Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ad344587cfd009fc7320237112c18315b2929a"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODU1ODcwOnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDoxMTowMlrOHfe3HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDoxMTowMlrOHfe3HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3MzUzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502773532", "createdAt": "2020-10-10T10:11:02Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ad344587cfd009fc7320237112c18315b2929a"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODYxMTAxOnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMToyMTowNlrOHffPnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMToyMTowNlrOHffPnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3OTgwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\\n\"\n          \n          \n            \n            \t\t\t+ \"    }\\n\"\t\t\t\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"else\\\":null\\n\"\n          \n          \n            \n            \t\t\t+ \"    }\\n\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502779804", "createdAt": "2020-10-10T11:21:06Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6cf8ed304334dfdabf0a8259b96bbd44c69d53f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODYxMTIyOnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMToyMTozMFrOHffPtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMToyMTozMFrOHffPtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3OTgzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502779830", "createdAt": "2020-10-10T11:21:30Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6cf8ed304334dfdabf0a8259b96bbd44c69d53f"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODcyOTI3OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDowMzo1OVrOHfgHFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDowMzo1OVrOHfgHFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NDAwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class JsonRegexExtractor {\n          \n          \n            \n            public final class JsonRegexExtractor {", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502794005", "createdAt": "2020-10-10T14:03:59Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+public class JsonRegexExtractor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ad000a4bbcb65f6eb9df037cbc2322131d12f0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODczMTc5OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDowNjo1OFrOHfgINg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDowNjo1OFrOHfgINg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NDI5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void setUp() {}\n          \n          \n            \n            \tpublic void setUp() {\n          \n          \n            \n            \t}", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502794294", "createdAt": "2020-10-10T14:06:58Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ad000a4bbcb65f6eb9df037cbc2322131d12f0"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODczNDE4OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDowOTo0OVrOHfgJTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDowOTo0OVrOHfgJTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NDU3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", \"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\");\n          \n      \n    \n    \n  \n\nJust to test why??? the two strings are reported as different by junit (it works fine inside the app!)", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502794572", "createdAt": "2020-10-10T14:09:49Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"else\\\":null\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ad000a4bbcb65f6eb9df037cbc2322131d12f0"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODc0ODkxOnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDoyOTowN1rOHfgQOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDoyOTowN1rOHfgQOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NjM0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n            \t@Test\n          \n          \n            \n            \tpublic void testParserExpressionStringWithEscapedQuotationMark() {\n          \n          \n            \n            \t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"escaped\"));\n          \n          \n            \n            \t\tMatcher matcher = regexPattern.matcher(jsonExample);\n          \n          \n            \n            \t\tmatcher.find();\n          \n          \n            \n            \t\tassertEquals(\"\\\"hello world\\\"\", matcher.group(1));\n          \n          \n            \n            \t}\n          \n          \n            \n            }", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502796346", "createdAt": "2020-10-10T14:29:07Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"else\\\":null\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", \"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\");\n+\t}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODc1MTYxOnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDozMTo0OFrOHfgRdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDozMTo0OFrOHfgRdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NjY2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"else\\\":null\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\"hello world\\\\\"\\\"\\n\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502796660", "createdAt": "2020-10-10T14:31:48Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"else\\\":null\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODc1NjIwOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDozNzo1M1rOHfgTmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDozNzo1M1rOHfgTmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NzIxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t+ \"|\\\\{[^{]*\\\\}\" // un-nested object\n          \n          \n            \n            \t\t\t\t+ \"|\\\\[[^\\\\[]*\\\\])\" // un-nested array\n          \n          \n            \n            \t\t\t\t+ \"|\\\\{[^{]*?\\\\}\" // un-nested object\n          \n          \n            \n            \t\t\t\t+ \"|\\\\[[^\\\\[]*?\\\\])\" // un-nested array", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502797210", "createdAt": "2020-10-10T14:37:53Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+public final class JsonRegexExtractor {\n+\n+\tprivate JsonRegexExtractor() {\n+\t\tthrow new IllegalStateException(\"Utility class\");\n+\t}\n+\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword\n+\t\t\t\t+ \"\\\"?((?<=\\\")(\\\\\\\\\\\"|[^\\\"])*(?=\\\")\" // string\n+\t\t\t\t+ \"|(?<!\\\")([+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?\" // number\n+\t\t\t\t+ \"|(true|false|null)\" // boolean\n+\t\t\t\t+ \"|\\\\{[^{]*\\\\}\" // un-nested object\n+\t\t\t\t+ \"|\\\\[[^\\\\[]*\\\\])\" // un-nested array", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODc1NzI1OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDozODo1OVrOHfgUEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDozODo1OVrOHfgUEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NzMzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", \"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\");\n          \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502797331", "createdAt": "2020-10-10T14:38:59Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"else\\\":null\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", \"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODgwMzk4OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTozOToxMlrOHfgqFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTozOToxMlrOHfgqFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjk2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\"hello world\\\\\"\\\"\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\\\"hello world\\\\\\\"\\\"\\n\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502802965", "createdAt": "2020-10-10T15:39:12Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\"hello world\\\\\"\\\"\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccd8283c3a22130fd77a24e33f234e12828e953"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODgxOTcyOnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTo1OTowOFrOHfgxhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTo1OTowOFrOHfgxhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwNDg2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"\\\"hello world\\\"\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"\\\\\\\"hello world\\\\\\\"\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502804868", "createdAt": "2020-10-10T15:59:08Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\\\"hello world\\\\\\\"\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringWithEscapedQuotationMark() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"escaped\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"\\\"hello world\\\"\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09128eac3f625d1d5abaf99ab5433c59bf2b552"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3800, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}