{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MjA0NTE3", "number": 3646, "title": "CATROID-564 Refactor RepeatAction to Kotlin", "bodyText": "Your checklist for this pull request\nPlease review the contributing guidelines and wiki pages of this repository.\n\n Include the name of the Jira ticket in the PR\u2019s title\n Include a summary of the changes plus the relevant context\n Choose the proper base branch (develop)\n Confirm that the changes follow the project\u2019s coding guidelines\n Verify that the changes generate no compiler or linter warnings\n Perform a self-review of the changes\n Verify to commit no other files than the intentionally changed ones\n Include reasonable and readable tests verifying the added or changed behavior\n Confirm that new and existing unit tests pass locally\n Check that the commits\u2019 message style matches the project\u2019s guideline\n Stick to the project\u2019s gitflow workflow\n Verify that your changes do not have any conflicts with the base branch\n After the PR, verify that all CI checks have passed\n Post a message in the catroid-stage or catroid-ide Slack channel and ask for a code reviewer", "createdAt": "2020-06-24T13:22:57Z", "url": "https://github.com/Catrobat/Catroid/pull/3646", "merged": true, "mergeCommit": {"oid": "adfdc377210e96774e0c6636fedb7bfc4c39e153"}, "closed": true, "closedAt": "2020-09-13T05:55:59Z", "author": {"login": "trummerp"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuaA32gBqjM0Nzc0OTE3MzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHLCcmAFqTQ4NDkzOTE1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTk4ODY4", "url": "https://github.com/Catrobat/Catroid/pull/3646#pullrequestreview-438198868", "createdAt": "2020-06-26T10:50:32Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDo1MDozMlrOGpcfZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDo1MTo0MlrOGpchNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjExMTU5MA==", "bodyText": "val interpretation = repeatCount?.interpretDouble(sprite) ?: 0.0\n?. returns null if repeatCount is null instead of trying to use interpretDouble\n?: return 0.0 if the statement before it is null", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r446111590", "createdAt": "2020-06-26T10:50:32Z", "author": {"login": "Koell"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var repeatCount: Formula? = null\n+    private var sprite: Sprite? = null\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    private var isForeverRepeat = false\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isRepeatActionInitialized) {\n+            isRepeatActionInitialized = true\n+            interpretRepeatCount()\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (repeatCountValue < 0) {\n+            repeatCountValue = 0\n+        }\n+        if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+            return true\n+        }\n+        if (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            if (action != null) {\n+                action.restart()\n+            }\n+        }\n+        return false\n+    }\n+\n+    override fun restart() {\n+        isCurrentLoopInitialized = false\n+        isRepeatActionInitialized = false\n+        executedCount = 0\n+        super.restart()\n+    }\n+\n+    private fun interpretRepeatCount() {\n+        try {\n+            val interpretation =\n+                if (repeatCount == null) java.lang.Double.valueOf(0.0) else repeatCount!!.interpretDouble(\n+                    sprite\n+                )", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjExMjA1Mw==", "bodyText": "action?.restart()\nif action is null restart is not invoked", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r446112053", "createdAt": "2020-06-26T10:51:42Z", "author": {"login": "Koell"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var repeatCount: Formula? = null\n+    private var sprite: Sprite? = null\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    private var isForeverRepeat = false\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isRepeatActionInitialized) {\n+            isRepeatActionInitialized = true\n+            interpretRepeatCount()\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (repeatCountValue < 0) {\n+            repeatCountValue = 0\n+        }\n+        if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+            return true\n+        }\n+        if (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            if (action != null) {\n+                action.restart()\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NTEzNzEx", "url": "https://github.com/Catrobat/Catroid/pull/3646#pullrequestreview-438513711", "createdAt": "2020-06-26T18:35:56Z", "commit": null, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODozNTo1NlrOGpq5Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODozNTo1NlrOGpq5Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NzYyMw==", "bodyText": "Since the setter is public, why not change private var to var? Kotlin will create implicit functions to interact with Java.\nFor other cases, where you only need a public getter, you can also declare it as var and declare the setter as private. See https://kotlinlang.org/docs/reference/properties.html under setterVisibility.", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r446347623", "createdAt": "2020-06-26T18:35:56Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var repeatCount: Formula? = null\n+    private var sprite: Sprite? = null\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    private var isForeverRepeat = false\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isRepeatActionInitialized) {\n+            isRepeatActionInitialized = true\n+            interpretRepeatCount()\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (repeatCountValue < 0) {\n+            repeatCountValue = 0\n+        }\n+        if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+            return true\n+        }\n+        if (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            if (action != null) {\n+                action.restart()\n+            }\n+        }\n+        return false\n+    }\n+\n+    override fun restart() {\n+        isCurrentLoopInitialized = false\n+        isRepeatActionInitialized = false\n+        executedCount = 0\n+        super.restart()\n+    }\n+\n+    private fun interpretRepeatCount() {\n+        try {\n+            val interpretation =\n+                if (repeatCount == null) java.lang.Double.valueOf(0.0) else repeatCount!!.interpretDouble(\n+                    sprite\n+                )\n+            repeatCountValue = interpretation.toInt()\n+        } catch (interpretationException: InterpretationException) {\n+            repeatCountValue = 0\n+            Log.d(\n+                javaClass.simpleName,\n+                \"Formula interpretation for this specific Brick failed.\",\n+                interpretationException\n+            )\n+        }\n+    }\n+\n+    fun setSprite(sprite: Sprite?) {\n+        this.sprite = sprite\n+    }\n+\n+    fun setIsForeverRepeat(isForeverRepeat: Boolean) {\n+        this.isForeverRepeat = isForeverRepeat\n+    }\n+\n+    fun setRepeatCount(repeatCount: Formula?) {\n+        this.repeatCount = repeatCount", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 102}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a", "author": {"user": {"login": "trummerp", "name": "Patrick Trummer"}}, "url": "https://github.com/Catrobat/Catroid/commit/3344a3371ef72cf8b4086b1db40029535c2ea42a", "committedDate": "2020-07-23T10:45:45Z", "message": "CATROID-564 Refactor RepeatAction to Kotlin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NzE4NjM0", "url": "https://github.com/Catrobat/Catroid/pull/3646#pullrequestreview-454718634", "createdAt": "2020-07-24T08:34:51Z", "commit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDI5MjUy", "url": "https://github.com/Catrobat/Catroid/pull/3646#pullrequestreview-471029252", "createdAt": "2020-08-19T23:25:08Z", "commit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzoyNTowOVrOHDfzvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzoyNTowOVrOHDfzvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyODkyNw==", "bodyText": "please change to  lateinit var sprite: Sprite, sprite is never gonna be null.", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r473428927", "createdAt": "2020-08-19T23:25:09Z", "author": {"login": "ndrnour"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    var sprite: Sprite? = null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDI5NTk4", "url": "https://github.com/Catrobat/Catroid/pull/3646#pullrequestreview-471029598", "createdAt": "2020-08-19T23:26:09Z", "commit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzoyNjowOVrOHDf2xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzoyNjowOVrOHDf2xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyOTcwMA==", "bodyText": "please change this to  lateinit var repeatCountFormula: Formula", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r473429700", "createdAt": "2020-08-19T23:26:09Z", "author": {"login": "ndrnour"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    var sprite: Sprite? = null\n+    var isForeverRepeat = false\n+    var repeatCount: Formula? = null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDMyMTAw", "url": "https://github.com/Catrobat/Catroid/pull/3646#pullrequestreview-471032100", "createdAt": "2020-08-19T23:32:00Z", "commit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzozMjowMFrOHDgHbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzozMjowMFrOHDgHbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzMzk2NA==", "bodyText": "please remove this line repeatCountValue = interpretation.toInt()\nand change the line before to val interpretation = repeatCountFormula.interpretInteger(sprite) no need for ?: 0.0 cause the function goona throw an InterpretationException when it fails..", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r473433964", "createdAt": "2020-08-19T23:32:00Z", "author": {"login": "ndrnour"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    var sprite: Sprite? = null\n+    var isForeverRepeat = false\n+    var repeatCount: Formula? = null\n+\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isRepeatActionInitialized) {\n+            isRepeatActionInitialized = true\n+            interpretRepeatCount()\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (repeatCountValue < 0) {\n+            repeatCountValue = 0\n+        }\n+        if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+            return true\n+        }\n+        if (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            action?.restart()\n+        }\n+        return false\n+    }\n+\n+    override fun restart() {\n+        isCurrentLoopInitialized = false\n+        isRepeatActionInitialized = false\n+        executedCount = 0\n+        super.restart()\n+    }\n+\n+    private fun interpretRepeatCount() {\n+        try {\n+            val interpretation = repeatCount?.interpretDouble(sprite) ?: 0.0\n+            repeatCountValue = interpretation.toInt()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDM0MTM0", "url": "https://github.com/Catrobat/Catroid/pull/3646#pullrequestreview-471034134", "createdAt": "2020-08-19T23:38:09Z", "commit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a", "author": {"user": {"login": "trummerp", "name": "Patrick Trummer"}}, "url": "https://github.com/Catrobat/Catroid/commit/3344a3371ef72cf8b4086b1db40029535c2ea42a", "committedDate": "2020-07-23T10:45:45Z", "message": "CATROID-564 Refactor RepeatAction to Kotlin"}, "afterCommit": {"oid": "e2e776ed667921609fa73406f30a6dbf2c04857f", "author": {"user": {"login": "trummerp", "name": "Patrick Trummer"}}, "url": "https://github.com/Catrobat/Catroid/commit/e2e776ed667921609fa73406f30a6dbf2c04857f", "committedDate": "2020-08-26T16:08:58Z", "message": "CATROID-564 Refactor RepeatAction to Kotlin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74c7c8cb0037b44c7787aad2f71b3864e0fd82f5", "author": {"user": {"login": "trummerp", "name": "Patrick Trummer"}}, "url": "https://github.com/Catrobat/Catroid/commit/74c7c8cb0037b44c7787aad2f71b3864e0fd82f5", "committedDate": "2020-08-26T16:29:11Z", "message": "CATROID-564 Refactor RepeatAction to Kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2e776ed667921609fa73406f30a6dbf2c04857f", "author": {"user": {"login": "trummerp", "name": "Patrick Trummer"}}, "url": "https://github.com/Catrobat/Catroid/commit/e2e776ed667921609fa73406f30a6dbf2c04857f", "committedDate": "2020-08-26T16:08:58Z", "message": "CATROID-564 Refactor RepeatAction to Kotlin"}, "afterCommit": {"oid": "74c7c8cb0037b44c7787aad2f71b3864e0fd82f5", "author": {"user": {"login": "trummerp", "name": "Patrick Trummer"}}, "url": "https://github.com/Catrobat/Catroid/commit/74c7c8cb0037b44c7787aad2f71b3864e0fd82f5", "committedDate": "2020-08-26T16:29:11Z", "message": "CATROID-564 Refactor RepeatAction to Kotlin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTM5MTU0", "url": "https://github.com/Catrobat/Catroid/pull/3646#pullrequestreview-484939154", "createdAt": "2020-09-09T12:06:20Z", "commit": {"oid": "74c7c8cb0037b44c7787aad2f71b3864e0fd82f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1827, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}