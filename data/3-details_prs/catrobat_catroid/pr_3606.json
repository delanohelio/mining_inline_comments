{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3Njc0MzEw", "number": 3606, "title": "CATROID-568 REFACTOR ChangeVariableActionTest to Kotlin", "bodyText": "Converted test to Kotlin, added parameterization\nYour checklist for this pull request\nPlease review the contributing guidelines and wiki pages of this repository.\n\n Include the name of the Jira ticket in the PR\u2019s title\n Include a summary of the changes plus the relevant context\n Choose the proper base branch (develop)\n Confirm that the changes follow the project\u2019s coding guidelines\n Verify that the changes generate no compiler or linter warnings\n Perform a self-review of the changes\n Verify to commit no other files than the intentionally changed ones\n Include reasonable and readable tests verifying the added or changed behavior\n Confirm that new and existing unit tests pass locally\n Check that the commits\u2019 message style matches the project\u2019s guideline\n Stick to the project\u2019s gitflow workflow\n Verify that your changes do not have any conflicts with the base branch\n After the PR, verify that all CI checks have passed\n Post a message in the catroid-stage or catroid-ide Slack channel and ask for a code reviewer", "createdAt": "2020-05-13T23:58:49Z", "url": "https://github.com/Catrobat/Catroid/pull/3606", "merged": true, "mergeCommit": {"oid": "627e96beb5414b9f0d88008692d5bf8f66db00d0"}, "closed": true, "closedAt": "2020-05-16T10:55:59Z", "author": {"login": "lweitzendorf"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchCPpYgBqjMzMzQzNjk0OTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchzmStABqjMzNDM0MjI0MzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNjM4ODc2", "url": "https://github.com/Catrobat/Catroid/pull/3606#pullrequestreview-411638876", "createdAt": "2020-05-14T09:44:57Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0NDo1N1rOGVUdPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1MDo1MFrOGVUryQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwODQ0NA==", "bodyText": "Please don't use random values for testing.\nInstead, run a whole range like this as parameters:\nIntRange(0, 99).flatMap { ... } (don't forget the .toDouble())", "url": "https://github.com/Catrobat/Catroid/pull/3606#discussion_r425008444", "createdAt": "2020-05-14T09:44:57Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/ChangeVariableActionTest.kt", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.junit.Assert\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+import java.util.concurrent.ThreadLocalRandom\n+\n+@RunWith(Parameterized::class)\n+class ChangeVariableActionTest(private val formula: Formula?, private val variable: UserVariable?, private val expectedValue: Double) {\n+    private lateinit var testSprite: Sprite\n+    private lateinit var userVariable: UserVariable\n+    private lateinit var project: Project\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters\n+        fun parameters() = listOf(\n+            arrayOf(Formula(CHANGE_VARIABLE_VALUE), UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), EXPECTED_NEW_VALUE),\n+            arrayOf(Formula(CHANGE_VARIABLE_VALUE), null, INITIALIZED_VALUE),\n+            arrayOf(Formula(CHANGE_VARIABLE_VALUE.toString()), UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), EXPECTED_NEW_VALUE),\n+            arrayOf(Formula(NOT_NUMERICAL_STRING), UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), INITIALIZED_VALUE),\n+            arrayOf(null, UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), INITIALIZED_VALUE),\n+            arrayOf(Formula(Double.NaN), UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), INITIALIZED_VALUE)\n+        )\n+\n+        private const val NOT_NUMERICAL_STRING = \"changeVariable\"\n+        private const val TEST_USERVARIABLE = \"testUservariable\"\n+        private val CHANGE_VARIABLE_VALUE = ThreadLocalRandom.current().nextDouble(-100.0, 100.0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMTc3Mg==", "bodyText": "The \"userVariable\" is always UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE) except test-case 1.\nAs discussed, please edit the test-case and delete this variable.", "url": "https://github.com/Catrobat/Catroid/pull/3606#discussion_r425011772", "createdAt": "2020-05-14T09:50:17Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/ChangeVariableActionTest.kt", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.junit.Assert\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+import java.util.concurrent.ThreadLocalRandom\n+\n+@RunWith(Parameterized::class)\n+class ChangeVariableActionTest(private val formula: Formula?, private val variable: UserVariable?, private val expectedValue: Double) {\n+    private lateinit var testSprite: Sprite\n+    private lateinit var userVariable: UserVariable\n+    private lateinit var project: Project\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters\n+        fun parameters() = listOf(\n+            arrayOf(Formula(CHANGE_VARIABLE_VALUE), UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), EXPECTED_NEW_VALUE),\n+            arrayOf(Formula(CHANGE_VARIABLE_VALUE), null, INITIALIZED_VALUE),\n+            arrayOf(Formula(CHANGE_VARIABLE_VALUE.toString()), UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), EXPECTED_NEW_VALUE),\n+            arrayOf(Formula(NOT_NUMERICAL_STRING), UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), INITIALIZED_VALUE),\n+            arrayOf(null, UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), INITIALIZED_VALUE),\n+            arrayOf(Formula(Double.NaN), UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), INITIALIZED_VALUE)\n+        )\n+\n+        private const val NOT_NUMERICAL_STRING = \"changeVariable\"\n+        private const val TEST_USERVARIABLE = \"testUservariable\"\n+        private val CHANGE_VARIABLE_VALUE = ThreadLocalRandom.current().nextDouble(-100.0, 100.0)\n+        private val INITIALIZED_VALUE = ThreadLocalRandom.current().nextDouble(-100.0, 100.0)\n+        private val EXPECTED_NEW_VALUE = INITIALIZED_VALUE + CHANGE_VARIABLE_VALUE\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        testSprite = SingleSprite(\"testSprite\")\n+        project = Project(MockUtil.mockContextForProject(), \"testProject\")\n+        ProjectManager.getInstance().currentProject = project\n+        userVariable = variable ?: UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMjE2OQ==", "bodyText": "Please add a name for the test-cases.", "url": "https://github.com/Catrobat/Catroid/pull/3606#discussion_r425012169", "createdAt": "2020-05-14T09:50:50Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/ChangeVariableActionTest.kt", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.junit.Assert\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+import java.util.concurrent.ThreadLocalRandom\n+\n+@RunWith(Parameterized::class)\n+class ChangeVariableActionTest(private val formula: Formula?, private val variable: UserVariable?, private val expectedValue: Double) {\n+    private lateinit var testSprite: Sprite\n+    private lateinit var userVariable: UserVariable\n+    private lateinit var project: Project\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNjQ1ODM2", "url": "https://github.com/Catrobat/Catroid/pull/3606#pullrequestreview-411645836", "createdAt": "2020-05-14T09:53:43Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1Mzo0M1rOGVUyrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1Mzo0M1rOGVUyrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMzkzNQ==", "bodyText": "Great! It looks much better now!", "url": "https://github.com/Catrobat/Catroid/pull/3606#discussion_r425013935", "createdAt": "2020-05-14T09:53:43Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/ChangeVariableActionTest.java", "diffHunk": "@@ -1,94 +0,0 @@\n-/*\n- * Catroid: An on-device visual programming system for Android devices\n- * Copyright (C) 2010-2018 The Catrobat Team\n- * (<http://developer.catrobat.org/credits>)\n- *\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as\n- * published by the Free Software Foundation, either version 3 of the\n- * License, or (at your option) any later version.\n- *\n- * An additional term exception under section 7 of the GNU Affero\n- * General Public License, version 3, is available at\n- * http://developer.catrobat.org/license_additional_term\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-package org.catrobat.catroid.test.content.actions;\n-\n-import org.catrobat.catroid.ProjectManager;\n-import org.catrobat.catroid.content.Project;\n-import org.catrobat.catroid.content.SingleSprite;\n-import org.catrobat.catroid.content.Sprite;\n-import org.catrobat.catroid.formulaeditor.Formula;\n-import org.catrobat.catroid.formulaeditor.UserVariable;\n-import org.catrobat.catroid.test.MockUtil;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.JUnit4;\n-\n-import static junit.framework.Assert.assertEquals;\n-\n-@RunWith(JUnit4.class)\n-public class ChangeVariableActionTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNjQ3NTQ1", "url": "https://github.com/Catrobat/Catroid/pull/3606#pullrequestreview-411647545", "createdAt": "2020-05-14T09:55:45Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NTo0NVrOGVU4EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NTo0NVrOGVU4EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNTMxMg==", "bodyText": "Please also verify that \"act\" always returns true.", "url": "https://github.com/Catrobat/Catroid/pull/3606#discussion_r425015312", "createdAt": "2020-05-14T09:55:45Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/ChangeVariableActionTest.kt", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.junit.Assert\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+import java.util.concurrent.ThreadLocalRandom\n+\n+@RunWith(Parameterized::class)\n+class ChangeVariableActionTest(private val formula: Formula?, private val variable: UserVariable?, private val expectedValue: Double) {\n+    private lateinit var testSprite: Sprite\n+    private lateinit var userVariable: UserVariable\n+    private lateinit var project: Project\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters\n+        fun parameters() = listOf(\n+            arrayOf(Formula(CHANGE_VARIABLE_VALUE), UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), EXPECTED_NEW_VALUE),\n+            arrayOf(Formula(CHANGE_VARIABLE_VALUE), null, INITIALIZED_VALUE),\n+            arrayOf(Formula(CHANGE_VARIABLE_VALUE.toString()), UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), EXPECTED_NEW_VALUE),\n+            arrayOf(Formula(NOT_NUMERICAL_STRING), UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), INITIALIZED_VALUE),\n+            arrayOf(null, UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), INITIALIZED_VALUE),\n+            arrayOf(Formula(Double.NaN), UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE), INITIALIZED_VALUE)\n+        )\n+\n+        private const val NOT_NUMERICAL_STRING = \"changeVariable\"\n+        private const val TEST_USERVARIABLE = \"testUservariable\"\n+        private val CHANGE_VARIABLE_VALUE = ThreadLocalRandom.current().nextDouble(-100.0, 100.0)\n+        private val INITIALIZED_VALUE = ThreadLocalRandom.current().nextDouble(-100.0, 100.0)\n+        private val EXPECTED_NEW_VALUE = INITIALIZED_VALUE + CHANGE_VARIABLE_VALUE\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        testSprite = SingleSprite(\"testSprite\")\n+        project = Project(MockUtil.mockContextForProject(), \"testProject\")\n+        ProjectManager.getInstance().currentProject = project\n+        userVariable = variable ?: UserVariable(TEST_USERVARIABLE, INITIALIZED_VALUE)\n+        project.addUserVariable(userVariable)\n+    }\n+\n+    @Test\n+    fun testChangeUserVariableAndCheckResult() {\n+        testSprite.actionFactory.createChangeVariableAction(testSprite, formula, variable).act(1f)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExODE0MzEz", "url": "https://github.com/Catrobat/Catroid/pull/3606#pullrequestreview-411814313", "createdAt": "2020-05-14T13:40:28Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNTc2MTk5", "url": "https://github.com/Catrobat/Catroid/pull/3606#pullrequestreview-412576199", "createdAt": "2020-05-15T11:47:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDYzODAx", "url": "https://github.com/Catrobat/Catroid/pull/3606#pullrequestreview-413063801", "createdAt": "2020-05-16T09:46:17Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwOTo0NjoxN1rOGWZaMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwOTo0NjoxN1rOGWZaMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzODE2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        arrayOf(\"NUMBER_ZERO\", Formula(CHANGE_VARIABLE_VALUE), UserVariable(TEST_USERVARIABLE), + CHANGE_VARIABLE_VALUE),\n          \n          \n            \n                        arrayOf(\"NUMBER_ZERO\", Formula(CHANGE_VARIABLE_VALUE), UserVariable(TEST_USERVARIABLE), CHANGE_VARIABLE_VALUE),", "url": "https://github.com/Catrobat/Catroid/pull/3606#discussion_r426138160", "createdAt": "2020-05-16T09:46:17Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/ChangeVariableActionTest.kt", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.junit.Assert\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+\n+@RunWith(Parameterized::class)\n+class ChangeVariableActionTest(\n+    private val name: String,\n+    private val formula: Formula?,\n+    private val userVariable: UserVariable?,\n+    private val expectedValue: Double?\n+) {\n+    private lateinit var testSprite: Sprite\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{0}\")\n+        fun parameters() = listOf(\n+            arrayOf(\"INVALID_USER_VARIABLE\", Formula(CHANGE_VARIABLE_VALUE), null, null),\n+            arrayOf(\"NUMBER_NEGATIVE\", Formula(CHANGE_VARIABLE_VALUE), UserVariable(TEST_USERVARIABLE, -1.0), -1.0 + CHANGE_VARIABLE_VALUE),\n+            arrayOf(\"NUMBER_ZERO\", Formula(CHANGE_VARIABLE_VALUE), UserVariable(TEST_USERVARIABLE), + CHANGE_VARIABLE_VALUE),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c37f67940db4c5121c64da25159b070e5381b829", "author": {"user": null}, "url": "https://github.com/Catrobat/Catroid/commit/c37f67940db4c5121c64da25159b070e5381b829", "committedDate": "2020-05-16T09:52:23Z", "message": "CATROID-568 REFACTOR ChangeVariableActionTest to Kotlin\n\nConverted to Kotlin, added parameterization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c37f67940db4c5121c64da25159b070e5381b829", "author": {"user": null}, "url": "https://github.com/Catrobat/Catroid/commit/c37f67940db4c5121c64da25159b070e5381b829", "committedDate": "2020-05-16T09:52:23Z", "message": "CATROID-568 REFACTOR ChangeVariableActionTest to Kotlin\n\nConverted to Kotlin, added parameterization"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1936, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}