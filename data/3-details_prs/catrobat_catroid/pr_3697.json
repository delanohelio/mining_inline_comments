{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NjE3NDAz", "number": 3697, "title": "CATROID-566 Refactor AskSpeechAction.java to kotlin", "bodyText": "Refactoring of AskSpeechAction.java to kotlin. https://jira.catrob.at/browse/CATROID-566\n\n Include the name of the Jira ticket in the PR\u2019s title\n Include a summary of the changes plus the relevant context\n Choose the proper base branch (develop)\n Confirm that the changes follow the project\u2019s coding guidelines\n Verify that the changes generate no compiler or linter warnings\n Perform a self-review of the changes\n Verify to commit no other files than the intentionally changed ones\n Include reasonable and readable tests verifying the added or changed behavior\n Confirm that new and existing unit tests pass locally\n Check that the commits\u2019 message style matches the project\u2019s guideline\n Stick to the project\u2019s gitflow workflow\n Verify that your changes do not have any conflicts with the base branch\n After the PR, verify that all CI checks have passed\n Post a message in the catroid-stage or catroid-ide Slack channel and ask for a code reviewer", "createdAt": "2020-07-23T10:30:12Z", "url": "https://github.com/Catrobat/Catroid/pull/3697", "merged": true, "mergeCommit": {"oid": "0a3b9823c1e1293f06d393b544e825f1f5ddd51e"}, "closed": true, "closedAt": "2020-08-12T15:38:14Z", "author": {"login": "adnaribo"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3s6yUgBqjM1NzkzNjAwNjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc67uRnABqjM2MTMyNjQxMzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MzYwMjI3", "url": "https://github.com/Catrobat/Catroid/pull/3697#pullrequestreview-455360227", "createdAt": "2020-07-26T12:31:01Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjozMTowMVrOG3MBFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMjo1OTo1M1rOG3MNow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyMTc1MQ==", "bodyText": "These can all be deleted. Make the members public instead (see below) and Kotlin will generate them automatically.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                fun setAnswerVariable(answerVariable: UserVariable?) {\n          \n          \n            \n                    if (answerVariable == null) {\n          \n          \n            \n                        return\n          \n          \n            \n                    }\n          \n          \n            \n                    this.answerVariable = answerVariable\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                fun setQuestionFormula(questionFormula: Formula?) {\n          \n          \n            \n                    this.questionFormula = questionFormula\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                fun setSprite(sprite: Sprite?) {\n          \n          \n            \n                    this.sprite = sprite\n          \n          \n            \n                }", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460521751", "createdAt": "2020-07-26T12:31:01Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        val message = StageActivity.messageHandler.obtainMessage(StageActivity.REGISTER_INTENT, params)\n+        message.sendToTarget()\n+\n+        questionAsked = true\n+    }\n+\n+    private fun createRecognitionIntent(question: String?): Intent {\n+        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)\n+        intent.putExtra(\n+            RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n+            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n+        )\n+        if (question != null && question.length != 0) {\n+            intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n+        }\n+        return intent\n+    }\n+\n+    fun setAnswerText(answer: String?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        answerVariable!!.value = answer\n+\n+        answerReceived = true\n+    }\n+\n+    fun setAnswerVariable(answerVariable: UserVariable?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        this.answerVariable = answerVariable\n+    }\n+\n+    fun setQuestionFormula(questionFormula: Formula?) {\n+        this.questionFormula = questionFormula\n+    }\n+\n+    fun setSprite(sprite: Sprite?) {\n+        this.sprite = sprite\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNDE1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                private var sprite: Sprite? = null\n          \n          \n            \n                private var questionFormula: Formula? = null\n          \n          \n            \n                private var answerVariable: UserVariable? = null\n          \n          \n            \n                var sprite: Sprite? = null\n          \n          \n            \n                var questionFormula: Formula? = null\n          \n          \n            \n                var answerVariable: UserVariable? = null", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460524159", "createdAt": "2020-07-26T12:52:49Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNDIxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (StageActivity.messageHandler == null) {\n          \n          \n            \n                        return\n          \n          \n            \n                    }\n          \n          \n            \n                    val params = ArrayList<Any>()\n          \n          \n            \n                    params.add(this)\n          \n          \n            \n                    val message = StageActivity.messageHandler.obtainMessage(StageActivity.REGISTER_INTENT, params)\n          \n          \n            \n                    message.sendToTarget()\n          \n          \n            \n            \n          \n          \n            \n                    questionAsked = true\n          \n          \n            \n                    StageActivity.messageHandler?.obtainMessage(\n          \n          \n            \n                        StageActivity.REGISTER_INTENT,\n          \n          \n            \n                        listOf(this)\n          \n          \n            \n                    )?.sendToTarget()\n          \n          \n            \n                    questionAsked = true", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460524215", "createdAt": "2020-07-26T12:53:24Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        val message = StageActivity.messageHandler.obtainMessage(StageActivity.REGISTER_INTENT, params)\n+        message.sendToTarget()\n+\n+        questionAsked = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNDI5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private fun createRecognitionIntent(question: String?): Intent {\n          \n          \n            \n                    val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)\n          \n          \n            \n                    intent.putExtra(\n          \n          \n            \n                        RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n          \n          \n            \n                        RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n          \n          \n            \n                    )\n          \n          \n            \n                    if (question != null && question.length != 0) {\n          \n          \n            \n                        intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n          \n          \n            \n                    }\n          \n          \n            \n                    return intent\n          \n          \n            \n                }\n          \n          \n            \n                private fun createRecognitionIntent(question: String) =\n          \n          \n            \n                    Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).also { intent ->\n          \n          \n            \n                        intent.putExtra(\n          \n          \n            \n                            RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n          \n          \n            \n                            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n          \n          \n            \n                        )\n          \n          \n            \n                        if (question.isNotBlank()) {\n          \n          \n            \n                            intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n          \n          \n            \n                        }\n          \n          \n            \n                    }", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460524292", "createdAt": "2020-07-26T12:54:10Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        val message = StageActivity.messageHandler.obtainMessage(StageActivity.REGISTER_INTENT, params)\n+        message.sendToTarget()\n+\n+        questionAsked = true\n+    }\n+\n+    private fun createRecognitionIntent(question: String?): Intent {\n+        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)\n+        intent.putExtra(\n+            RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n+            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n+        )\n+        if (question != null && question.length != 0) {\n+            intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n+        }\n+        return intent\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNDY2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                fun setAnswerText(answer: String?) {\n          \n          \n            \n                    if (answerVariable == null) {\n          \n          \n            \n                        return\n          \n          \n            \n                    }\n          \n          \n            \n                    answerVariable!!.value = answer\n          \n          \n            \n            \n          \n          \n            \n                    answerReceived = true\n          \n          \n            \n                }\n          \n          \n            \n                private fun setAnswerText(answer: String) {\n          \n          \n            \n                    answerVariable?.apply {\n          \n          \n            \n                        value = answer\n          \n          \n            \n                    }\n          \n          \n            \n                    answerReceived = true\n          \n          \n            \n                }", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460524664", "createdAt": "2020-07-26T12:57:08Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        val message = StageActivity.messageHandler.obtainMessage(StageActivity.REGISTER_INTENT, params)\n+        message.sendToTarget()\n+\n+        questionAsked = true\n+    }\n+\n+    private fun createRecognitionIntent(question: String?): Intent {\n+        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)\n+        intent.putExtra(\n+            RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n+            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n+        )\n+        if (question != null && question.length != 0) {\n+            intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n+        }\n+        return intent\n+    }\n+\n+    fun setAnswerText(answer: String?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        answerVariable!!.value = answer\n+\n+        answerReceived = true\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNDgyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var question: String? = \"\"\n          \n          \n            \n                    try {\n          \n          \n            \n                        if (questionFormula != null) {\n          \n          \n            \n                            question = questionFormula!!.interpretString(sprite)\n          \n          \n            \n                        }\n          \n          \n            \n                    } catch (e: InterpretationException) {\n          \n          \n            \n                        Log.e(javaClass.simpleName, \"formula interpretation in ask brick failed\")\n          \n          \n            \n                    }\n          \n          \n            \n                    val question = try {\n          \n          \n            \n                        questionFormula?.interpretString(sprite) ?: \"\"\n          \n          \n            \n                    } catch (e: InterpretationException) {\n          \n          \n            \n                        Log.e(TAG, \"Formula interpretation in ask brick failed\")\n          \n          \n            \n                        \"\"\n          \n          \n            \n                    }", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460524823", "createdAt": "2020-07-26T12:58:42Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        val message = StageActivity.messageHandler.obtainMessage(StageActivity.REGISTER_INTENT, params)\n+        message.sendToTarget()\n+\n+        questionAsked = true\n+    }\n+\n+    private fun createRecognitionIntent(question: String?): Intent {\n+        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)\n+        intent.putExtra(\n+            RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n+            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n+        )\n+        if (question != null && question.length != 0) {\n+            intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n+        }\n+        return intent\n+    }\n+\n+    fun setAnswerText(answer: String?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        answerVariable!!.value = answer\n+\n+        answerReceived = true\n+    }\n+\n+    fun setAnswerVariable(answerVariable: UserVariable?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        this.answerVariable = answerVariable\n+    }\n+\n+    fun setQuestionFormula(questionFormula: Formula?) {\n+        this.questionFormula = questionFormula\n+    }\n+\n+    fun setSprite(sprite: Sprite?) {\n+        this.sprite = sprite\n+    }\n+\n+    override fun act(delta: Float): Boolean {\n+        if (!questionAsked) {\n+            askQuestion()\n+        }\n+        return answerReceived\n+    }\n+\n+    override fun restart() {\n+        questionAsked = false\n+        answerReceived = false\n+        super.restart()\n+    }\n+\n+    override fun getTargetIntent(): Intent {\n+        var question: String? = \"\"\n+        try {\n+            if (questionFormula != null) {\n+                question = questionFormula!!.interpretString(sprite)\n+            }\n+        } catch (e: InterpretationException) {\n+            Log.e(javaClass.simpleName, \"formula interpretation in ask brick failed\")\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNDk2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    val matches: ArrayList<String>?\n          \n          \n            \n                    when (resultCode) {\n          \n          \n            \n                        Activity.RESULT_OK -> {\n          \n          \n            \n                            matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)\n          \n          \n            \n                            Log.d(TAG, \"Results Speechrecognition: $matches\")\n          \n          \n            \n                            if (matches != null && matches.size > 0) {\n          \n          \n            \n                                setAnswerText(matches[0])\n          \n          \n            \n                            } else {\n          \n          \n            \n                                setAnswerText(\"\")\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        Activity.RESULT_CANCELED, Activity.RESULT_FIRST_USER -> setAnswerText(\"\") // User canceled action\n          \n          \n            \n                        else -> Log.e(TAG, \"unhandled speech recognizer resultCode $resultCode\")\n          \n          \n            \n                    }\n          \n          \n            \n                    when (resultCode) {\n          \n          \n            \n                        Activity.RESULT_OK -> {\n          \n          \n            \n                            val matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)\n          \n          \n            \n                            Log.d(TAG, \"Speech recognition results: $matches\")\n          \n          \n            \n                            setAnswerText(matches?.elementAtOrNull(0) ?: \"\")\n          \n          \n            \n                        }\n          \n          \n            \n                        Activity.RESULT_CANCELED, Activity.RESULT_FIRST_USER -> setAnswerText(\"\")\n          \n          \n            \n                        else -> Log.e(TAG, \"unhandled speech recognizer resultCode $resultCode\")\n          \n          \n            \n                    }", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460524963", "createdAt": "2020-07-26T12:59:53Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        val message = StageActivity.messageHandler.obtainMessage(StageActivity.REGISTER_INTENT, params)\n+        message.sendToTarget()\n+\n+        questionAsked = true\n+    }\n+\n+    private fun createRecognitionIntent(question: String?): Intent {\n+        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)\n+        intent.putExtra(\n+            RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n+            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n+        )\n+        if (question != null && question.length != 0) {\n+            intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n+        }\n+        return intent\n+    }\n+\n+    fun setAnswerText(answer: String?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        answerVariable!!.value = answer\n+\n+        answerReceived = true\n+    }\n+\n+    fun setAnswerVariable(answerVariable: UserVariable?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        this.answerVariable = answerVariable\n+    }\n+\n+    fun setQuestionFormula(questionFormula: Formula?) {\n+        this.questionFormula = questionFormula\n+    }\n+\n+    fun setSprite(sprite: Sprite?) {\n+        this.sprite = sprite\n+    }\n+\n+    override fun act(delta: Float): Boolean {\n+        if (!questionAsked) {\n+            askQuestion()\n+        }\n+        return answerReceived\n+    }\n+\n+    override fun restart() {\n+        questionAsked = false\n+        answerReceived = false\n+        super.restart()\n+    }\n+\n+    override fun getTargetIntent(): Intent {\n+        var question: String? = \"\"\n+        try {\n+            if (questionFormula != null) {\n+                question = questionFormula!!.interpretString(sprite)\n+            }\n+        } catch (e: InterpretationException) {\n+            Log.e(javaClass.simpleName, \"formula interpretation in ask brick failed\")\n+        }\n+        return createRecognitionIntent(question)\n+    }\n+\n+    override fun onIntentResult(resultCode: Int, data: Intent) {\n+        val matches: ArrayList<String>?\n+        when (resultCode) {\n+            Activity.RESULT_OK -> {\n+                matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)\n+                Log.d(TAG, \"Results Speechrecognition: $matches\")\n+                if (matches != null && matches.size > 0) {\n+                    setAnswerText(matches[0])\n+                } else {\n+                    setAnswerText(\"\")\n+                }\n+            }\n+            Activity.RESULT_CANCELED, Activity.RESULT_FIRST_USER -> setAnswerText(\"\") // User canceled action\n+            else -> Log.e(TAG, \"unhandled speech recognizer resultCode $resultCode\")\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 133}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "f3381988076b68f8451c55dfccd47799f731928d", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/f3381988076b68f8451c55dfccd47799f731928d", "committedDate": "2020-07-27T08:56:38Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1Nzg5NjM1", "url": "https://github.com/Catrobat/Catroid/pull/3697#pullrequestreview-455789635", "createdAt": "2020-07-27T13:39:14Z", "commit": {"oid": "f3381988076b68f8451c55dfccd47799f731928d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzozOToxNFrOG3i3Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzozOToxNFrOG3i3Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5NjA3NQ==", "bodyText": "you can use AskSpeechAction::class.java.simpleName instead of hard coding", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r460896075", "createdAt": "2020-07-27T13:39:14Z", "author": {"login": "ndrnour"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+\n+    var sprite: Sprite? = null\n+    var questionFormula: Formula? = null\n+    var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        StageActivity.messageHandler?.obtainMessage(StageActivity.REGISTER_INTENT,\n+            listOf(this))?.sendToTarget()\n+\n+        questionAsked = true\n+    }\n+\n+    private fun createRecognitionIntent(question: String?) =\n+        Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).also { intent ->\n+            intent.putExtra(\n+                RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n+                RecognizerIntent.LANGUAGE_MODEL_FREE_FORM\n+            )\n+\n+            if (question != null && question.length != 0) {\n+                intent.putExtra(RecognizerIntent.EXTRA_PROMPT, question)\n+            }\n+        }\n+\n+    fun setAnswerText(answer: String?) {\n+        answerVariable?.apply {\n+            value = answer\n+        }\n+\n+        answerReceived = true\n+    }\n+\n+    override fun act(delta: Float): Boolean {\n+        if (!questionAsked) {\n+            askQuestion()\n+        }\n+        return answerReceived\n+    }\n+\n+    override fun restart() {\n+        questionAsked = false\n+        answerReceived = false\n+        super.restart()\n+    }\n+\n+    override fun getTargetIntent(): Intent {\n+        val question = try {\n+            questionFormula?.interpretString(sprite) ?: \"\"\n+        } catch (e: InterpretationException) {\n+            Log.e(TAG, \"Formula interpretation in ask brick failed\")\n+            \"\"\n+        }\n+        return createRecognitionIntent(question)\n+    }\n+\n+    override fun onIntentResult(resultCode: Int, data: Intent) {\n+        val matches: ArrayList<String>?\n+        when (resultCode) {\n+            Activity.RESULT_OK -> {\n+                matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)\n+                Log.d(TAG, \"Results Speechrecognition: $matches\")\n+                if (matches != null && matches.size > 0) {\n+                    setAnswerText(matches[0])\n+                } else {\n+                    setAnswerText(\"\")\n+                }\n+            }\n+            Activity.RESULT_CANCELED, Activity.RESULT_FIRST_USER -> setAnswerText(\"\") // User canceled action\n+            else -> Log.e(TAG, \"unhandled speech recognizer resultCode $resultCode\")\n+        }\n+    }\n+\n+    companion object {\n+        private const val TAG = \"AskSpeechAction\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3381988076b68f8451c55dfccd47799f731928d"}, "originalPosition": 114}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3381988076b68f8451c55dfccd47799f731928d", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/f3381988076b68f8451c55dfccd47799f731928d", "committedDate": "2020-07-27T08:56:38Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}, "afterCommit": {"oid": "a2339ca7e1c7f25834a76a4c521ff72546bad524", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/a2339ca7e1c7f25834a76a4c521ff72546bad524", "committedDate": "2020-07-29T08:09:36Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2339ca7e1c7f25834a76a4c521ff72546bad524", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/a2339ca7e1c7f25834a76a4c521ff72546bad524", "committedDate": "2020-07-29T08:09:36Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}, "afterCommit": {"oid": "0eece107943bf29545638b9380e84e3067b11924", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/0eece107943bf29545638b9380e84e3067b11924", "committedDate": "2020-07-29T08:12:47Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0eece107943bf29545638b9380e84e3067b11924", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/0eece107943bf29545638b9380e84e3067b11924", "committedDate": "2020-07-29T08:12:47Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}, "afterCommit": {"oid": "536a67dafa866d540c59d83ce8b420497076b9be", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/536a67dafa866d540c59d83ce8b420497076b9be", "committedDate": "2020-07-29T08:18:18Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NTc3ODEx", "url": "https://github.com/Catrobat/Catroid/pull/3697#pullrequestreview-457577811", "createdAt": "2020-07-29T14:27:21Z", "commit": {"oid": "536a67dafa866d540c59d83ce8b420497076b9be"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyNzoyMVrOG47Hkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyNzoyMVrOG47Hkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MjAzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StageActivity.messageHandler?.obtainMessage(StageActivity.REGISTER_INTENT,\n          \n          \n            \n                        listOf(this))?.sendToTarget()\n          \n          \n            \n                    StageActivity.messageHandler?.obtainMessage(\n          \n          \n            \n                        StageActivity.REGISTER_INTENT,\n          \n          \n            \n                        listOf(this)\n          \n          \n            \n                    )?.sendToTarget()\n          \n      \n    \n    \n  \n\nKotlin convention is to have a separate line for each argument if they don't fit in one", "url": "https://github.com/Catrobat/Catroid/pull/3697#discussion_r462342035", "createdAt": "2020-07-29T14:27:21Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskSpeechAction.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.speech.RecognizerIntent\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageActivity.IntentListener\n+import java.util.ArrayList\n+\n+class AskSpeechAction : Action(), IntentListener {\n+    var sprite: Sprite? = null\n+    var questionFormula: Formula? = null\n+    var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+\n+    private fun askQuestion() {\n+        StageActivity.messageHandler?.obtainMessage(StageActivity.REGISTER_INTENT,\n+            listOf(this))?.sendToTarget()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "536a67dafa866d540c59d83ce8b420497076b9be"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "536a67dafa866d540c59d83ce8b420497076b9be", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/536a67dafa866d540c59d83ce8b420497076b9be", "committedDate": "2020-07-29T08:18:18Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}, "afterCommit": {"oid": "24f41761952b29de77f5cd22e037965a04317413", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/24f41761952b29de77f5cd22e037965a04317413", "committedDate": "2020-07-29T14:50:26Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NjE2NDE0", "url": "https://github.com/Catrobat/Catroid/pull/3697#pullrequestreview-457616414", "createdAt": "2020-07-29T15:05:39Z", "commit": {"oid": "24f41761952b29de77f5cd22e037965a04317413"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MTEyOTE1", "url": "https://github.com/Catrobat/Catroid/pull/3697#pullrequestreview-459112915", "createdAt": "2020-07-31T11:45:43Z", "commit": {"oid": "24f41761952b29de77f5cd22e037965a04317413"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24f41761952b29de77f5cd22e037965a04317413", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/24f41761952b29de77f5cd22e037965a04317413", "committedDate": "2020-07-29T14:50:26Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}, "afterCommit": {"oid": "83a040be924448d93d84beb1be3fb902fee802a0", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/83a040be924448d93d84beb1be3fb902fee802a0", "committedDate": "2020-08-02T10:29:59Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83a040be924448d93d84beb1be3fb902fee802a0", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/83a040be924448d93d84beb1be3fb902fee802a0", "committedDate": "2020-08-02T10:29:59Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}, "afterCommit": {"oid": "c4cdb81ede16b0e0497133ba9cff106a3bf7381c", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/c4cdb81ede16b0e0497133ba9cff106a3bf7381c", "committedDate": "2020-08-02T11:05:12Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4cdb81ede16b0e0497133ba9cff106a3bf7381c", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/c4cdb81ede16b0e0497133ba9cff106a3bf7381c", "committedDate": "2020-08-02T11:05:12Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}, "afterCommit": {"oid": "a42c6e729b1e6315ccf857c1c2f9836974b1a052", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/a42c6e729b1e6315ccf857c1c2f9836974b1a052", "committedDate": "2020-08-02T11:11:27Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9025d6ff2d2eb2aadf471ff38a8152824f4dd857", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/9025d6ff2d2eb2aadf471ff38a8152824f4dd857", "committedDate": "2020-08-02T11:28:24Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a42c6e729b1e6315ccf857c1c2f9836974b1a052", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/a42c6e729b1e6315ccf857c1c2f9836974b1a052", "committedDate": "2020-08-02T11:11:27Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}, "afterCommit": {"oid": "9025d6ff2d2eb2aadf471ff38a8152824f4dd857", "author": {"user": {"login": "adnaribo", "name": "Adna Ribo"}}, "url": "https://github.com/Catrobat/Catroid/commit/9025d6ff2d2eb2aadf471ff38a8152824f4dd857", "committedDate": "2020-08-02T11:28:24Z", "message": "CATROID-566 Refactor AskSpeechAction.java to kotlin"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1861, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}