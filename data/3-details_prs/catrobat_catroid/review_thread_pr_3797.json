{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MDk2NDQz", "number": 3797, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoyMToyOFrOEjne9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTowNDozNVrOEk7Aiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzgyNTE4OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/HtmlRegexExtractorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoyMToyOFrOHSEWTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoyMToyOFrOHSEWTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwNzY2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tAssert.assertEquals(true, htmlExtractor.getKeywordIndex(\"Key Word\", \"Key&nbspWord\"));\n          \n          \n            \n            \t\tAssert.assertTrue(htmlExtractor.getKeywordIndex(\"Key Word\", \"Key&nbsp;Word\"));\n          \n      \n    \n    \n  \n\nassertTrue must also then be imported. Please also for all other cases where you compare with true or false.\nAlso, \u00a0 has a \";\" at the end.", "url": "https://github.com/Catrobat/Catroid/pull/3797#discussion_r488707661", "createdAt": "2020-09-15T14:21:28Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/HtmlRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.HtmlRegexExtractor;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class HtmlRegexExtractorTest {\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\thtmlExtractor = new HtmlRegexExtractor(context);\n+\t}\n+\tprivate HtmlRegexExtractor htmlExtractor;\n+\n+\t@Test\n+\tpublic void testKeywordWithNonBreakingSpace() {\n+\t\tAssert.assertEquals(true, htmlExtractor.getKeywordIndex(\"Key Word\", \"Key&nbspWord\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd7204b7ab3d74e9fd208db0ed87676a5482eac"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Nzg0ODA4OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/utils/HtmlRegexExtractor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoyNjoxMFrOHSEk2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoyNjoxMFrOHSEk2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcxMTM4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tString keywordRegex = keyword.replace(\" \", \".*\");\n          \n          \n            \n            \t\t\tString keywordRegex = keyword.replace(\" \", \".*?\");\n          \n      \n    \n    \n  \n\nMatch a pattern that is as short as possible. This may avoid issues with multiple occurrences of the keywords.", "url": "https://github.com/Catrobat/Catroid/pull/3797#discussion_r488711386", "createdAt": "2020-09-15T14:26:10Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/HtmlRegexExtractor.java", "diffHunk": "@@ -27,19 +27,43 @@\n \n import org.catrobat.catroid.R;\n \n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n public class HtmlRegexExtractor {\n+\n \tprivate Context context;\n+\n \tpublic HtmlRegexExtractor(Context context) {\n \t\tthis.context = context;\n \t}\n-\tpublic void searchKeyword(String search, String text) {\n-\t\tint index = text.indexOf(search);\n+\n+\tpublic void searchKeyword(String keyword, String text) {\n+\t\tif (getKeywordIndex(keyword, text)) {\n+\t\t\tshowSuccess();\n+\t\t} else {\n+\t\t\tshowError();\n+\t\t}\n+\t}\n+\n+\tpublic boolean getKeywordIndex(String keyword, String text) {\n+\t\tint index = text.indexOf(keyword);\n \t\tif (index >= 0) {\n-\t\t\tToastUtil.showSuccess(context,\n-\t\t\t\t\tR.string.formula_editor_function_regex_html_extractor_found);\n+\t\t\treturn true;\n \t\t} else {\n-\t\t\tToastUtil.showError(context,\n-\t\t\t\t\tR.string.formula_editor_function_regex_html_extractor_not_found);\n+\t\t\tString keywordRegex = keyword.replace(\" \", \".*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd7204b7ab3d74e9fd208db0ed87676a5482eac"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDYyNjQ2OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/HtmlRegexExtractorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjo0NDozNFrOHUAG6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTowMzowMVrOHUIXxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNTMzNw==", "bodyText": "Redundant Test", "url": "https://github.com/Catrobat/Catroid/pull/3797#discussion_r490735337", "createdAt": "2020-09-18T06:44:34Z", "author": {"login": "david-loe"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/HtmlRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.HtmlRegexExtractor;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class HtmlRegexExtractorTest {\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\thtmlExtractor = new HtmlRegexExtractor(context);\n+\t}\n+\tprivate HtmlRegexExtractor htmlExtractor;\n+\n+\t@Test(expected = IllegalArgumentException.class)\n+\tpublic void testFindKeywordWithEmptyKeyword() {\n+\t\thtmlExtractor.findKeyword(\"\", \"abc\");\n+\t}\n+\n+\t@Test\n+\tpublic void testFindKeywordWithWrongKeyword() {\n+\t\tAssert.assertNull(htmlExtractor.findKeyword(\"def\", \"abc\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testFindOneKeywordInLongWord() {\n+\t\tAssert.assertEquals(\"abc\", htmlExtractor.findKeyword(\"abc\", \"abcdefg\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testFindKeywordInSentence() {\n+\t\tAssert.assertEquals(\"abc\", htmlExtractor.findKeyword(\"abc\", \"Wer are looking for the abc \"\n+\t\t\t\t+ \"statement in long text\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testFindKeywordInSentenceWithSpaceInKeyword() {\n+\t\tAssert.assertEquals(\"ab c\", htmlExtractor.findKeyword(\"ab c\", \"Wer are looking for the \"\n+\t\t\t\t+ \"ab c statement in long text\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testFindKeywordInSentenceWithNoSpaceInKeyword() {\n+\t\tAssert.assertNull(htmlExtractor.findKeyword(\"abc\", \"Wer are looking for the \"\n+\t\t\t\t+ \"ab c statement in long text\"));\n+\t}\n+\n+\t@Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06e4189457106806120aa88374e358a68063bf13"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3MDcyNA==", "bodyText": "IMHO this is a meaningful test. It shows that nothing bad happens in the normal spaces case, which is good to know as spaces are handled in a different way. Please keep it.", "url": "https://github.com/Catrobat/Catroid/pull/3797#discussion_r490870724", "createdAt": "2020-09-18T11:03:01Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/HtmlRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.HtmlRegexExtractor;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class HtmlRegexExtractorTest {\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\thtmlExtractor = new HtmlRegexExtractor(context);\n+\t}\n+\tprivate HtmlRegexExtractor htmlExtractor;\n+\n+\t@Test(expected = IllegalArgumentException.class)\n+\tpublic void testFindKeywordWithEmptyKeyword() {\n+\t\thtmlExtractor.findKeyword(\"\", \"abc\");\n+\t}\n+\n+\t@Test\n+\tpublic void testFindKeywordWithWrongKeyword() {\n+\t\tAssert.assertNull(htmlExtractor.findKeyword(\"def\", \"abc\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testFindOneKeywordInLongWord() {\n+\t\tAssert.assertEquals(\"abc\", htmlExtractor.findKeyword(\"abc\", \"abcdefg\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testFindKeywordInSentence() {\n+\t\tAssert.assertEquals(\"abc\", htmlExtractor.findKeyword(\"abc\", \"Wer are looking for the abc \"\n+\t\t\t\t+ \"statement in long text\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testFindKeywordInSentenceWithSpaceInKeyword() {\n+\t\tAssert.assertEquals(\"ab c\", htmlExtractor.findKeyword(\"ab c\", \"Wer are looking for the \"\n+\t\t\t\t+ \"ab c statement in long text\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testFindKeywordInSentenceWithNoSpaceInKeyword() {\n+\t\tAssert.assertNull(htmlExtractor.findKeyword(\"abc\", \"Wer are looking for the \"\n+\t\t\t\t+ \"ab c statement in long text\"));\n+\t}\n+\n+\t@Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNTMzNw=="}, "originalCommit": {"oid": "06e4189457106806120aa88374e358a68063bf13"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTUwOTg3OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/utils/HtmlRegexExtractor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTowNDozNVrOHUIa1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTowNDozNVrOHUIa1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3MTUwOA==", "bodyText": "I'm now wondering if that's not too much sometimes. Anything can go in between, after all, also long bunches of visible parts of text. Well, we'll see. I guess in normal cases it will be useful anyway.", "url": "https://github.com/Catrobat/Catroid/pull/3797#discussion_r490871508", "createdAt": "2020-09-18T11:04:35Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/HtmlRegexExtractor.java", "diffHunk": "@@ -27,19 +27,70 @@\n \n import org.catrobat.catroid.R;\n \n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import androidx.annotation.VisibleForTesting;\n+\n public class HtmlRegexExtractor {\n+\n \tprivate Context context;\n+\n \tpublic HtmlRegexExtractor(Context context) {\n \t\tthis.context = context;\n \t}\n-\tpublic void searchKeyword(String search, String text) {\n-\t\tint index = text.indexOf(search);\n-\t\tif (index >= 0) {\n-\t\t\tToastUtil.showSuccess(context,\n-\t\t\t\t\tR.string.formula_editor_function_regex_html_extractor_found);\n+\n+\tpublic void searchKeyword(String keyword, String text) {\n+\t\tif (findKeyword(keyword, text) == null) {\n+\t\t\tshowError();\n \t\t} else {\n-\t\t\tToastUtil.showError(context,\n-\t\t\t\t\tR.string.formula_editor_function_regex_html_extractor_not_found);\n+\t\t\tshowSuccess();\n+\t\t}\n+\t}\n+\n+\tprivate void showSuccess() {\n+\t\tToastUtil.showSuccess(context,\n+\t\t\t\tR.string.formula_editor_function_regex_html_extractor_found);\n+\t}\n+\tprivate void showError() {\n+\t\tToastUtil.showError(context,\n+\t\t\t\tR.string.formula_editor_function_regex_html_extractor_not_found);\n+\t}\n+\n+\t@VisibleForTesting\n+\tpublic String findKeyword(String keyword, String text) {\n+\t\tif (keyword.equals(\"\")) {\n+\t\t\tthrow new IllegalArgumentException(\"No empty keywords allowed\");\n+\t\t}\n+\t\tif (text.indexOf(keyword) >= 0) {\n+\t\t\treturn keyword;\n+\t\t} else {\n+\t\t\treturn findKeywordWithHtmlBetweenWordsInText(keyword, text);\n+\t\t}\n+\t}\n+\n+\tprivate String findKeywordWithHtmlBetweenWordsInText(String keyword, String text) {\n+\t\tString[] splittedKeyword = keyword.split(\" \");\n+\t\tString regex = Pattern.quote(splittedKeyword[0]);\n+\n+\t\tfor (int i = 1; i < splittedKeyword.length; i++) {\n+\t\t\tregex += \".*?\" + Pattern.quote(splittedKeyword[i]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b89fda158d742b1b84f8d8ea71820082e5937ca0"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3781, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}