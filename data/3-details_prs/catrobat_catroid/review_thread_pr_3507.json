{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNTM4NjYx", "number": 3507, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoyNDoxMlrODrPJ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoyNzo1OVrODrPRaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjYzNjM5OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/WebRequestActionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoyNDoxM1rOF7dhxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo0NzoxMFrOGJTNzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NDA4NQ==", "bodyText": "Could you split up the test in a way that its sepparated from setup and the code lines which really do test something. Also please think about implementing the teardown function because you are using static members like the StageActivity.stageListener. .... This mocks will remain for further tests and may bring them to fail if not reset", "url": "https://github.com/Catrobat/Catroid/pull/3507#discussion_r397894085", "createdAt": "2020-03-25T14:24:13Z", "author": {"login": "DinosaurierRex"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/WebRequestActionTest.java", "diffHunk": "@@ -185,4 +190,50 @@ public void testCancelledCallAndResendRequest() {\n \t\tverify(StageActivity.stageListener.webConnectionHolder, times(2)).addConnection(any());\n \t\tverify(webConnection, times(2)).sendWebRequest();\n \t}\n+\n+\t@Test\n+\tpublic void testSuccessfulResponseWithInputVariable() {\n+\t\tUserVariable inputVariable = new UserVariable(TEST_INPUTVARIABLE, TEST_URL);\n+\t\tFormulaElement formulaElement = new FormulaElement(\n+\t\t\t\tFormulaElement.ElementType.USER_VARIABLE, inputVariable.getName(), null);\n+\t\tfinal String responseString = \"Response\";\n+\n+\t\tFormula formula = Mockito.spy(new Formula(formulaElement));\n+\n+\t\ttestSprite.addUserVariable(userVariable);\n+\t\ttestSprite.addUserVariable(inputVariable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNTE5OQ==", "bodyText": "Setup is now in a seperate function.\nCan you please specify, how the existing teardown-function is not sufficient?\nI have only seen other tests setting the Stagelister.stageListener to null.", "url": "https://github.com/Catrobat/Catroid/pull/3507#discussion_r412405199", "createdAt": "2020-04-21T18:47:10Z", "author": {"login": "stefanreichenauer"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/WebRequestActionTest.java", "diffHunk": "@@ -185,4 +190,50 @@ public void testCancelledCallAndResendRequest() {\n \t\tverify(StageActivity.stageListener.webConnectionHolder, times(2)).addConnection(any());\n \t\tverify(webConnection, times(2)).sendWebRequest();\n \t}\n+\n+\t@Test\n+\tpublic void testSuccessfulResponseWithInputVariable() {\n+\t\tUserVariable inputVariable = new UserVariable(TEST_INPUTVARIABLE, TEST_URL);\n+\t\tFormulaElement formulaElement = new FormulaElement(\n+\t\t\t\tFormulaElement.ElementType.USER_VARIABLE, inputVariable.getName(), null);\n+\t\tfinal String responseString = \"Response\";\n+\n+\t\tFormula formula = Mockito.spy(new Formula(formulaElement));\n+\n+\t\ttestSprite.addUserVariable(userVariable);\n+\t\ttestSprite.addUserVariable(inputVariable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NDA4NQ=="}, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjY0OTUxOnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/WebRequestActionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoyNjo1MVrOF7dqMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo0NzozOFrOGJTO7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NjI0MA==", "bodyText": "An Exception will automatically cause the test to fail. So please dont catch Excpetions just to make the test \"fail\". Also think about another test where this failing could be triggered in a way that you want the test to pass if the Exception is thrown. Hint: Annotations @Test(expected = NullPointerException.class) like this will make the test pass if the mentioned exception is thrown.", "url": "https://github.com/Catrobat/Catroid/pull/3507#discussion_r397896240", "createdAt": "2020-03-25T14:26:51Z", "author": {"login": "DinosaurierRex"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/WebRequestActionTest.java", "diffHunk": "@@ -185,4 +190,50 @@ public void testCancelledCallAndResendRequest() {\n \t\tverify(StageActivity.stageListener.webConnectionHolder, times(2)).addConnection(any());\n \t\tverify(webConnection, times(2)).sendWebRequest();\n \t}\n+\n+\t@Test\n+\tpublic void testSuccessfulResponseWithInputVariable() {\n+\t\tUserVariable inputVariable = new UserVariable(TEST_INPUTVARIABLE, TEST_URL);\n+\t\tFormulaElement formulaElement = new FormulaElement(\n+\t\t\t\tFormulaElement.ElementType.USER_VARIABLE, inputVariable.getName(), null);\n+\t\tfinal String responseString = \"Response\";\n+\n+\t\tFormula formula = Mockito.spy(new Formula(formulaElement));\n+\n+\t\ttestSprite.addUserVariable(userVariable);\n+\t\ttestSprite.addUserVariable(inputVariable);\n+\n+\t\tWebRequestAction action = (WebRequestAction) testSprite.getActionFactory().createWebRequestAction(\n+\t\t\t\ttestSprite,\n+\t\t\t\tformula,\n+\t\t\t\tuserVariable\n+\t\t);\n+\t\taction.setWebConnectionFactory(webConnectionFactory);\n+\n+\t\twhen(StageActivity.stageListener.webConnectionHolder.addConnection(any())).thenReturn(true);\n+\n+\t\ttry {\n+\t\t\tdoAnswer(invocation -> {\n+\t\t\t\tSprite sprite = invocation.getArgument(0);\n+\t\t\t\treturn String.valueOf(sprite.getUserVariable(TEST_INPUTVARIABLE).getValue());\n+\t\t\t}).when(formula).interpretString(any(Sprite.class));\n+\t\t} catch (InterpretationException e) {\n+\t\t\tfail(\"Formula could not be interpreted\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNTQ4Nw==", "bodyText": "I removed the try-catch-block, and added the exception to the method signature.\nI choose to not add a test for testing the failing exception, because the exception is triggered by the function Formula.interpretString, which is not to test in this test-class, and the function is mocked anyway.\nPlease let me know, if I should add a test for it.", "url": "https://github.com/Catrobat/Catroid/pull/3507#discussion_r412405487", "createdAt": "2020-04-21T18:47:38Z", "author": {"login": "stefanreichenauer"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/WebRequestActionTest.java", "diffHunk": "@@ -185,4 +190,50 @@ public void testCancelledCallAndResendRequest() {\n \t\tverify(StageActivity.stageListener.webConnectionHolder, times(2)).addConnection(any());\n \t\tverify(webConnection, times(2)).sendWebRequest();\n \t}\n+\n+\t@Test\n+\tpublic void testSuccessfulResponseWithInputVariable() {\n+\t\tUserVariable inputVariable = new UserVariable(TEST_INPUTVARIABLE, TEST_URL);\n+\t\tFormulaElement formulaElement = new FormulaElement(\n+\t\t\t\tFormulaElement.ElementType.USER_VARIABLE, inputVariable.getName(), null);\n+\t\tfinal String responseString = \"Response\";\n+\n+\t\tFormula formula = Mockito.spy(new Formula(formulaElement));\n+\n+\t\ttestSprite.addUserVariable(userVariable);\n+\t\ttestSprite.addUserVariable(inputVariable);\n+\n+\t\tWebRequestAction action = (WebRequestAction) testSprite.getActionFactory().createWebRequestAction(\n+\t\t\t\ttestSprite,\n+\t\t\t\tformula,\n+\t\t\t\tuserVariable\n+\t\t);\n+\t\taction.setWebConnectionFactory(webConnectionFactory);\n+\n+\t\twhen(StageActivity.stageListener.webConnectionHolder.addConnection(any())).thenReturn(true);\n+\n+\t\ttry {\n+\t\t\tdoAnswer(invocation -> {\n+\t\t\t\tSprite sprite = invocation.getArgument(0);\n+\t\t\t\treturn String.valueOf(sprite.getUserVariable(TEST_INPUTVARIABLE).getValue());\n+\t\t\t}).when(formula).interpretString(any(Sprite.class));\n+\t\t} catch (InterpretationException e) {\n+\t\t\tfail(\"Formula could not be interpreted\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NjI0MA=="}, "originalCommit": null, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjY1NTc5OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/WebRequestActionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoyNzo1OVrOF7duAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo0OToxOFrOGJTTHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NzIxNg==", "bodyText": "Split these asserts up in several TCs as far as possible. If a setup function is implemented, for each Testcase your setup will be loaded and then its easier to split up", "url": "https://github.com/Catrobat/Catroid/pull/3507#discussion_r397897216", "createdAt": "2020-03-25T14:27:59Z", "author": {"login": "DinosaurierRex"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/WebRequestActionTest.java", "diffHunk": "@@ -185,4 +190,50 @@ public void testCancelledCallAndResendRequest() {\n \t\tverify(StageActivity.stageListener.webConnectionHolder, times(2)).addConnection(any());\n \t\tverify(webConnection, times(2)).sendWebRequest();\n \t}\n+\n+\t@Test\n+\tpublic void testSuccessfulResponseWithInputVariable() {\n+\t\tUserVariable inputVariable = new UserVariable(TEST_INPUTVARIABLE, TEST_URL);\n+\t\tFormulaElement formulaElement = new FormulaElement(\n+\t\t\t\tFormulaElement.ElementType.USER_VARIABLE, inputVariable.getName(), null);\n+\t\tfinal String responseString = \"Response\";\n+\n+\t\tFormula formula = Mockito.spy(new Formula(formulaElement));\n+\n+\t\ttestSprite.addUserVariable(userVariable);\n+\t\ttestSprite.addUserVariable(inputVariable);\n+\n+\t\tWebRequestAction action = (WebRequestAction) testSprite.getActionFactory().createWebRequestAction(\n+\t\t\t\ttestSprite,\n+\t\t\t\tformula,\n+\t\t\t\tuserVariable\n+\t\t);\n+\t\taction.setWebConnectionFactory(webConnectionFactory);\n+\n+\t\twhen(StageActivity.stageListener.webConnectionHolder.addConnection(any())).thenReturn(true);\n+\n+\t\ttry {\n+\t\t\tdoAnswer(invocation -> {\n+\t\t\t\tSprite sprite = invocation.getArgument(0);\n+\t\t\t\treturn String.valueOf(sprite.getUserVariable(TEST_INPUTVARIABLE).getValue());\n+\t\t\t}).when(formula).interpretString(any(Sprite.class));\n+\t\t} catch (InterpretationException e) {\n+\t\t\tfail(\"Formula could not be interpreted\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tdoAnswer(invocation -> {\n+\t\t\tString url = invocation.getArgument(0);\n+\t\t\tassertEquals(url, TEST_URL);\n+\t\t\treturn webConnection;\n+\t\t}).when(webConnectionFactory).createWebConnection(anyString(), any());\n+\n+\t\tdoAnswer(invocation -> {\n+\t\t\taction.onRequestFinished(responseString);\n+\t\t\treturn null;\n+\t\t}).when(webConnection).sendWebRequest();\n+\n+\t\tassertTrue(action.act(0f));\n+\t\tassertEquals(responseString, userVariable.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNjU1Ng==", "bodyText": "Done.", "url": "https://github.com/Catrobat/Catroid/pull/3507#discussion_r412406556", "createdAt": "2020-04-21T18:49:18Z", "author": {"login": "stefanreichenauer"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/WebRequestActionTest.java", "diffHunk": "@@ -185,4 +190,50 @@ public void testCancelledCallAndResendRequest() {\n \t\tverify(StageActivity.stageListener.webConnectionHolder, times(2)).addConnection(any());\n \t\tverify(webConnection, times(2)).sendWebRequest();\n \t}\n+\n+\t@Test\n+\tpublic void testSuccessfulResponseWithInputVariable() {\n+\t\tUserVariable inputVariable = new UserVariable(TEST_INPUTVARIABLE, TEST_URL);\n+\t\tFormulaElement formulaElement = new FormulaElement(\n+\t\t\t\tFormulaElement.ElementType.USER_VARIABLE, inputVariable.getName(), null);\n+\t\tfinal String responseString = \"Response\";\n+\n+\t\tFormula formula = Mockito.spy(new Formula(formulaElement));\n+\n+\t\ttestSprite.addUserVariable(userVariable);\n+\t\ttestSprite.addUserVariable(inputVariable);\n+\n+\t\tWebRequestAction action = (WebRequestAction) testSprite.getActionFactory().createWebRequestAction(\n+\t\t\t\ttestSprite,\n+\t\t\t\tformula,\n+\t\t\t\tuserVariable\n+\t\t);\n+\t\taction.setWebConnectionFactory(webConnectionFactory);\n+\n+\t\twhen(StageActivity.stageListener.webConnectionHolder.addConnection(any())).thenReturn(true);\n+\n+\t\ttry {\n+\t\t\tdoAnswer(invocation -> {\n+\t\t\t\tSprite sprite = invocation.getArgument(0);\n+\t\t\t\treturn String.valueOf(sprite.getUserVariable(TEST_INPUTVARIABLE).getValue());\n+\t\t\t}).when(formula).interpretString(any(Sprite.class));\n+\t\t} catch (InterpretationException e) {\n+\t\t\tfail(\"Formula could not be interpreted\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tdoAnswer(invocation -> {\n+\t\t\tString url = invocation.getArgument(0);\n+\t\t\tassertEquals(url, TEST_URL);\n+\t\t\treturn webConnection;\n+\t\t}).when(webConnectionFactory).createWebConnection(anyString(), any());\n+\n+\t\tdoAnswer(invocation -> {\n+\t\t\taction.onRequestFinished(responseString);\n+\t\t\treturn null;\n+\t\t}).when(webConnection).sendWebRequest();\n+\n+\t\tassertTrue(action.act(0f));\n+\t\tassertEquals(responseString, userVariable.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NzIxNg=="}, "originalCommit": null, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4003, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}