{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNzI2NDMz", "number": 3836, "title": "CATROID-793 Fix ANR of regex HTML assistant", "bodyText": "https://jira.catrob.at/browse/CATROID-793\nFixes inefficiencies that made the html assistant exponentially slow for common scenarios\nRemoval of spurious comment\nAdded visibility for testing annotation\nAdded a real life example from timeanddate.com\nEscapes the html code in the regex\n\n Include the name of the Jira ticket in the PR\u2019s title\n Include a summary of the changes plus the relevant context\n Choose the proper base branch (develop)\n Confirm that the changes follow the project\u2019s coding guidelines\n Verify that the changes generate no compiler or linter warnings\n Perform a self-review of the changes\n Verify to commit no other files than the intentionally changed ones\n Include reasonable and readable tests verifying the added or changed behavior\n Confirm that new and existing unit tests pass locally\n Check that the commits\u2019 message style matches the project\u2019s guideline\n Stick to the project\u2019s gitflow workflow\n Verify that your changes do not have any conflicts with the base branch\n After the PR, verify that all CI checks have passed\n Post a message in the catroid-stage or catroid-ide Slack channel and ask for a code reviewer", "createdAt": "2020-10-15T00:25:17Z", "url": "https://github.com/Catrobat/Catroid/pull/3836", "merged": true, "mergeCommit": {"oid": "22f9da6173e3e066ce7fe491158a187c5503ad7c"}, "closed": true, "closedAt": "2020-10-16T16:27:29Z", "author": {"login": "wslany"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSmiEygH2gAyNTAzNzI2NDMzOjQzZWQ2OWNiZmQ4YmJlYzA3MzlkMDkxYjQyOTc3YzAwZGZlYTgyNGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTIi3PgH2gAyNTAzNzI2NDMzOjA3YmQyODM0ZGYyNThhMDg0MDJjNDI3NDQ1MTFhZjdjN2QwNGEyYmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "43ed69cbfd8bbec0739d091b42977c00dfea824f", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/43ed69cbfd8bbec0739d091b42977c00dfea824f", "committedDate": "2020-10-15T00:21:29Z", "message": "CATROID-793 Fix ANR of regex HTML assistant (#1)\n\n* Simplifications, fixes, and efficiency\r\n* Removal of spurious comment\r\n* Added visibility for testing annotation\r\n* Real life example from timeanddate.com\r\n* Escaping the html code in the regex"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNDE1NTA2", "url": "https://github.com/Catrobat/Catroid/pull/3836#pullrequestreview-510415506", "createdAt": "2020-10-16T12:19:12Z", "commit": {"oid": "43ed69cbfd8bbec0739d091b42977c00dfea824f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNTU5MDY2", "url": "https://github.com/Catrobat/Catroid/pull/3836#pullrequestreview-510559066", "createdAt": "2020-10-16T15:06:34Z", "commit": {"oid": "43ed69cbfd8bbec0739d091b42977c00dfea824f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTowNjozNFrOHjD2sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToyMzo0NFrOHjEzzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyNTM2MQ==", "bodyText": "PLEASE REFACTOR:\nIn my opinion, it's a bit hard to read.\nMy suggestion would be:\nif (keyword == null) {\n\treturn null;\n}\nint keywordIndex = html.indexOf(keyword);\nif (keyword.equals(html) || keywordIndex < 0) {\n\treturn \"(.+)\";\n}", "url": "https://github.com/Catrobat/Catroid/pull/3836#discussion_r506525361", "createdAt": "2020-10-16T15:06:34Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/HtmlRegexExtractor.java", "diffHunk": "@@ -56,87 +57,64 @@ private void showError() {\n \t\t\t\tR.string.formula_editor_function_regex_html_extractor_not_found);\n \t}\n \n-\t@VisibleForTesting\n-\tpublic String findKeyword(String keyword, String text) {\n+\t@VisibleForTesting(otherwise = VisibleForTesting.PROTECTED)\n+\tpublic String findKeyword(String keyword, String html) {\n \t\tif (keyword.equals(\"\")) {\n \t\t\treturn null;\n \t\t}\n-\t\tif (text.indexOf(keyword) >= 0) {\n+\t\tif (html.contains(keyword)) {\n \t\t\treturn keyword;\n \t\t} else {\n-\t\t\treturn findKeywordWithHtmlBetweenWordsInText(keyword, text);\n+\t\t\treturn findKeywordWithHtmlBetweenWordsInText(keyword, html);\n \t\t}\n \t}\n \n-\tprivate String findKeywordWithHtmlBetweenWordsInText(String keyword, String text) {\n-\t\tString[] splittedKeyword = keyword.split(\" \");\n-\t\tString regex = Pattern.quote(splittedKeyword[0]);\n-\n-\t\tfor (int i = 1; i < splittedKeyword.length; i++) {\n-\t\t\tregex += \".*?\" + Pattern.quote(splittedKeyword[i]);\n-\t\t}\n-\t\treturn findShortestOccurrenceInText(regex, text);\n-\t}\n+\tprivate String findKeywordWithHtmlBetweenWordsInText(String keywords, String html) {\n \n-\tprivate String findShortestOccurrenceInText(String regex, String text) {\n-\t\tMatcher m = Pattern.compile(regex).matcher(text);\n+\t\tString[] splittedKeywords = keywords.split(\"\\\\s+\");\n+\t\tString keywordsWithHtmlBetweenWords = Pattern.quote(splittedKeywords[0]);\n \n-\t\tString shortestOccurrence = null;\n-\t\tint lastIndex = -1;\n-\t\twhile (m.find(lastIndex + 1)) {\n-\t\t\tString found = m.group();\n-\t\t\tif (shortestOccurrence == null || shortestOccurrence.length() > found.length()) {\n-\t\t\t\tshortestOccurrence = found;\n-\t\t\t\tlastIndex = m.start();\n-\t\t\t}\n+\t\tfor (int i = 1; i < splittedKeywords.length; i++) {\n+\t\t\tkeywordsWithHtmlBetweenWords += \"(\\\\s|&nbsp;|<[^>]+>)+?\" + Pattern.quote(splittedKeywords[i]);\n \t\t}\n-\t\treturn shortestOccurrence;\n+\t\tMatcher matcher = Pattern.compile(keywordsWithHtmlBetweenWords).matcher(html);\n+\t\tif (matcher.find()) {\n+\t\t\treturn matcher.group();\n+\t\t} \n+\t\treturn null;\n \t}\n \n-\tpublic String htmlToRegexConverter(String keyword, String htmlText) {\n-\t\tint keywordIndex;\n-\t\tString regex;\n+\t@VisibleForTesting(otherwise = VisibleForTesting.PROTECTED)\n+\tpublic String htmlToRegexConverter(String keyword, String html) {\n \n \t\tif (keyword != null) {\n-\t\t\tkeywordIndex = htmlText.indexOf(keyword);\n-\t\t\tif (keyword.equals(htmlText)) {\n-\t\t\t\tregex = \"(.*)\";\n-\t\t\t} else {\n-\t\t\t\tregex = \"(.*)\";\n+\t\t\tint keywordIndex = html.indexOf(keyword);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43ed69cbfd8bbec0739d091b42977c00dfea824f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0MTAwNw==", "bodyText": "QUESTION: Do we need such a long text? And why was \"testCreateRegexWhereTextOnlyKeywords()\" deleted?", "url": "https://github.com/Catrobat/Catroid/pull/3836#discussion_r506541007", "createdAt": "2020-10-16T15:23:44Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/HtmlRegexExtractorTest.java", "diffHunk": "@@ -105,50 +104,79 @@ public void testFindKeywordSmallestOccurrence() {\n \n \t@Test\n \tpublic void testCreateRegexWithOneCharContext() {\n-\t\tassertEquals(\"b(.*)e\", htmlExtractor.htmlToRegexConverter(\"cd\", \"abcdefg\"));\n+\t\tassertEquals(\"\\\\Qb\\\\E(.+?)\\\\Qe\\\\E\", htmlExtractor.htmlToRegexConverter(\"cd\", \"abcdefg\"));\n \t}\n \n \t@Test\n \tpublic void testCreateRegexWithKeywordAtStart() {\n-\t\tassertEquals(\"(.*)c\", htmlExtractor.htmlToRegexConverter(\"ab\", \"abcdefg\"));\n-\t}\n-\n-\t@Test\n-\tpublic void testCreateRegexWithKeywordAtEnd() {\n-\t\tassertEquals(\"d(.*)\", htmlExtractor.htmlToRegexConverter(\"efg\", \"abcdefg\"));\n+\t\tassertEquals(\"\\\\Q\\\\E(.+?)\\\\Qc\\\\E\", htmlExtractor.htmlToRegexConverter(\"ab\", \"abcdefg\"));\n \t}\n \n \t@Test\n \tpublic void testCreateRegexWithDuplicateKeywordFirstOccurrence1CharContext() {\n-\t\tassertEquals(\"ab(.*)defga\", htmlExtractor.htmlToRegexConverter(\"KEY\", \"abKEYdefgadKEYdefg\"));\n+\t\tassertEquals(\"\\\\Qb\\\\E(.+?)\\\\Qd\\\\E\", htmlExtractor.htmlToRegexConverter(\"KEY\", \"abKEYdefgadKEYdefg\"));\n \t}\n \n \t@Test\n \tpublic void testCreateRegexWith2CharContext() {\n-\t\tassertEquals(\"yb(.*)de\", htmlExtractor.htmlToRegexConverter(\"KEY\", \"abcdefg ybKEYdefg\"));\n+\t\tassertEquals(\"\\\\Qyb\\\\E(.+?)\\\\Qde\\\\E\", htmlExtractor.htmlToRegexConverter(\"KEY\", \"abcdefg ybKEYdefg\"));\n \t}\n \n \t@Test\n \tpublic void testCreateRegexWhereKeywordEqualsHtmlText() {\n-\t\tassertEquals(\"(.*)\", htmlExtractor.htmlToRegexConverter(\"abcdefg\", \"abcdefg\"));\n+\t\tassertEquals(\"(.+)\", htmlExtractor.htmlToRegexConverter(\"abcdefg\", \"abcdefg\"));\n \t}\n \n \t@Test\n \tpublic void testCreateRegexPostfixInKeyword() {\n-\t\tassertEquals(\"(.*)b\", htmlExtractor.htmlToRegexConverter(\"abc\", \"abcbc\"));\n+\t\tassertEquals(\"\\\\Q\\\\E(.+?)\\\\Qbd\\\\E\", htmlExtractor.htmlToRegexConverter(\"abc\", \"abcbd\"));\n \t}\n \n \t@Test\n \tpublic void testCreateRegexOutOfBoundsAfter2CharContext() {\n-\t\tassertEquals(\"b(.*)ba\", htmlExtractor.htmlToRegexConverter(\"abc\", \"babcbabcb\"));\n+\t\tassertEquals(\"\\\\Qb\\\\E(.+?)\\\\Qba\\\\E\", htmlExtractor.htmlToRegexConverter(\"abc\", \"babcbabcb\"));\n \t}\n \t@Test\n \tpublic void testFirstKeyBordersOnSecondKey() {\n-\t\tassertEquals(\"baaaa(.*)aaaaK\", htmlExtractor.htmlToRegexConverter(\"KEY\",\n-\t\t\t\t\"baaaaKEYaaaaKEYaaaa\"));\n-\t}\n-\t@Test\n-\tpublic void testCreateRegexWhereTextOnlyKeywords() {\n-\t\tassertEquals(\"(.*)aa\", htmlExtractor.htmlToRegexConverter(\"a\", \"aaa\"));\n+\t\tassertEquals(\"\\\\Qa\\\\E(.+?)\\\\Qa\\\\E\", htmlExtractor.htmlToRegexConverter(\"KEY\",\n+\t\t\t\t\"baKEYaKEYaa\"));\n+\t}\n+\t@Test\n+\tpublic void testTemperatureTimeAndDateDotCom() {\n+\t\tString htmlTimeAndDateDotCom = \n+\t\t\t\t\"</script><nav class=nav-3><div class=fixed><a href='/weather/germany/hildesheim'\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43ed69cbfd8bbec0739d091b42977c00dfea824f"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07bd2834df258a08402c42744511af7c7d04a2bc", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/07bd2834df258a08402c42744511af7c7d04a2bc", "committedDate": "2020-10-16T15:59:07Z", "message": "Easier to read."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2202, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}