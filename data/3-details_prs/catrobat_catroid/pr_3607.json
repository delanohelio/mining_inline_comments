{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3OTM1NzY4", "number": 3607, "title": "CATROID-562 REFACTOR IfOnEdgeBounceActionTest to Kotlin", "bodyText": "Converted tests to Kotlin, added parameterization\nYour checklist for this pull request\nPlease review the contributing guidelines and wiki pages of this repository.\n\n Include the name of the Jira ticket in the PR\u2019s title\n Include a summary of the changes plus the relevant context\n Choose the proper base branch (develop)\n Confirm that the changes follow the project\u2019s coding guidelines\n Verify that the changes generate no compiler or linter warnings\n Perform a self-review of the changes\n Verify to commit no other files than the intentionally changed ones\n Include reasonable and readable tests verifying the added or changed behavior\n Confirm that new and existing unit tests pass locally\n Check that the commits\u2019 message style matches the project\u2019s guideline\n Stick to the project\u2019s gitflow workflow\n Verify that your changes do not have any conflicts with the base branch\n After the PR, verify that all CI checks have passed\n Post a message in the catroid-stage or catroid-ide Slack channel and ask for a code reviewer", "createdAt": "2020-05-14T11:33:57Z", "url": "https://github.com/Catrobat/Catroid/pull/3607", "merged": true, "mergeCommit": {"oid": "453a3c63f3428d13ae90986d9969114bca4bbdc0"}, "closed": true, "closedAt": "2020-05-15T10:33:31Z", "author": {"login": "lweitzendorf"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchL94oABqjMzMzYxOTYyOTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcheQAUgBqjMzNDAwMjE1ODI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExODAxMDQz", "url": "https://github.com/Catrobat/Catroid/pull/3607#pullrequestreview-411801043", "createdAt": "2020-05-14T13:26:15Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzoyNjoxNVrOGVcJBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozMjo1N1rOGVccOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzNDM0MQ==", "bodyText": "Please use flatMap instead ;)", "url": "https://github.com/Catrobat/Catroid/pull/3607#discussion_r425134341", "createdAt": "2020-05-14T13:26:15Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/IfOnEdgeBounceActionTest.kt", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+import java.util.HashMap\n+\n+@RunWith(Parameterized::class)\n+class IfOnEdgeBounceActionTest(\n+    private val name: String,\n+    private val initialPosX: Float,\n+    private val initialPosY: Float,\n+    private val expectedPosX: Float,\n+    private val expectedPosY: Float,\n+    private val expectedDirections: Map<Float, Float>\n+) {\n+\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{0}\")\n+        fun parameters() = listOf(\n+            arrayOf(\"NO_BOUNCE\", 0f, 0f, 0f, 0f, mapOf(90f to 90f)),\n+            arrayOf(\"TOP_BOUNCE\", 0f, TOP_BORDER_POSITION, 0f, BOUNCE_TOP_POSITION,\n+                    getExpectedDirections(-90 until 0, 0 until 90, 180)),\n+            arrayOf(\"BOTTOM_BOUNCE\", 0f, BOTTOM_BORDER_POSITION, 0f, BOUNCE_BOTTOM_POSITION,\n+                    getExpectedDirections(-180 until -90, 90..180, 180)),\n+            arrayOf(\"LEFT_BOUNCE\", LEFT_BORDER_POSITION, 0f, BOUNCE_LEFT_POSITION, 0f,\n+                    getExpectedDirections(-180 until -90, -90 until 0, 0)),\n+            arrayOf(\"RIGHT_BOUNCE\", RIGHT_BORDER_POSITION, 0f, BOUNCE_RIGHT_POSITION, 0f,\n+                    getExpectedDirections(0 until 180, 90 until 180, 0)),\n+            arrayOf(\"LEFT_TOP_BOUNCE\", LEFT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_TOP_POSITION, mapOf(135f to 135f, -45f to 135f)),\n+            arrayOf(\"RIGHT_TOP_BOUNCE\", RIGHT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_TOP_POSITION, mapOf(-135f to -135f, 45f to -135f)),\n+            arrayOf(\"LEFT_BOTTOM_BOUNCE\", LEFT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_BOTTOM_POSITION, mapOf(-135f to 45f, 45f to 45f)),\n+            arrayOf(\"RIGHT_BOTTOM_BOUNCE\", RIGHT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_BOTTOM_POSITION, mapOf(-45f to -45f, 135f to -45f))\n+        )\n+\n+        private const val WIDTH = 100f\n+        private const val HEIGHT = 100f\n+        private const val SCREEN_WIDTH = 480\n+        private const val SCREEN_HEIGHT = 800\n+        private const val TOP_BORDER_POSITION = SCREEN_HEIGHT / 2f\n+        private const val BOTTOM_BORDER_POSITION = -TOP_BORDER_POSITION\n+        private const val RIGHT_BORDER_POSITION = SCREEN_WIDTH / 2f\n+        private const val LEFT_BORDER_POSITION = -RIGHT_BORDER_POSITION\n+        private const val BOUNCE_TOP_POSITION = TOP_BORDER_POSITION - HEIGHT / 2f\n+        private const val BOUNCE_BOTTOM_POSITION = -BOUNCE_TOP_POSITION\n+        private const val BOUNCE_RIGHT_POSITION = RIGHT_BORDER_POSITION - WIDTH / 2f\n+        private const val BOUNCE_LEFT_POSITION = -BOUNCE_RIGHT_POSITION\n+\n+        private fun getExpectedDirections(quadrant1: IntRange, quadrant2: IntRange, axis: Int):\n+            MutableMap<Float, Float> {\n+            val expectedDirections: MutableMap<Float, Float> = HashMap()\n+            for (direction in -165..180 step 15) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzNDUxNA==", "bodyText": "Please rename", "url": "https://github.com/Catrobat/Catroid/pull/3607#discussion_r425134514", "createdAt": "2020-05-14T13:26:28Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/IfOnEdgeBounceActionTest.kt", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+import java.util.HashMap\n+\n+@RunWith(Parameterized::class)\n+class IfOnEdgeBounceActionTest(\n+    private val name: String,\n+    private val initialPosX: Float,\n+    private val initialPosY: Float,\n+    private val expectedPosX: Float,\n+    private val expectedPosY: Float,\n+    private val expectedDirections: Map<Float, Float>\n+) {\n+\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{0}\")\n+        fun parameters() = listOf(\n+            arrayOf(\"NO_BOUNCE\", 0f, 0f, 0f, 0f, mapOf(90f to 90f)),\n+            arrayOf(\"TOP_BOUNCE\", 0f, TOP_BORDER_POSITION, 0f, BOUNCE_TOP_POSITION,\n+                    getExpectedDirections(-90 until 0, 0 until 90, 180)),\n+            arrayOf(\"BOTTOM_BOUNCE\", 0f, BOTTOM_BORDER_POSITION, 0f, BOUNCE_BOTTOM_POSITION,\n+                    getExpectedDirections(-180 until -90, 90..180, 180)),\n+            arrayOf(\"LEFT_BOUNCE\", LEFT_BORDER_POSITION, 0f, BOUNCE_LEFT_POSITION, 0f,\n+                    getExpectedDirections(-180 until -90, -90 until 0, 0)),\n+            arrayOf(\"RIGHT_BOUNCE\", RIGHT_BORDER_POSITION, 0f, BOUNCE_RIGHT_POSITION, 0f,\n+                    getExpectedDirections(0 until 180, 90 until 180, 0)),\n+            arrayOf(\"LEFT_TOP_BOUNCE\", LEFT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_TOP_POSITION, mapOf(135f to 135f, -45f to 135f)),\n+            arrayOf(\"RIGHT_TOP_BOUNCE\", RIGHT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_TOP_POSITION, mapOf(-135f to -135f, 45f to -135f)),\n+            arrayOf(\"LEFT_BOTTOM_BOUNCE\", LEFT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_BOTTOM_POSITION, mapOf(-135f to 45f, 45f to 45f)),\n+            arrayOf(\"RIGHT_BOTTOM_BOUNCE\", RIGHT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_BOTTOM_POSITION, mapOf(-45f to -45f, 135f to -45f))\n+        )\n+\n+        private const val WIDTH = 100f\n+        private const val HEIGHT = 100f\n+        private const val SCREEN_WIDTH = 480\n+        private const val SCREEN_HEIGHT = 800\n+        private const val TOP_BORDER_POSITION = SCREEN_HEIGHT / 2f\n+        private const val BOTTOM_BORDER_POSITION = -TOP_BORDER_POSITION\n+        private const val RIGHT_BORDER_POSITION = SCREEN_WIDTH / 2f\n+        private const val LEFT_BORDER_POSITION = -RIGHT_BORDER_POSITION\n+        private const val BOUNCE_TOP_POSITION = TOP_BORDER_POSITION - HEIGHT / 2f\n+        private const val BOUNCE_BOTTOM_POSITION = -BOUNCE_TOP_POSITION\n+        private const val BOUNCE_RIGHT_POSITION = RIGHT_BORDER_POSITION - WIDTH / 2f\n+        private const val BOUNCE_LEFT_POSITION = -BOUNCE_RIGHT_POSITION\n+\n+        private fun getExpectedDirections(quadrant1: IntRange, quadrant2: IntRange, axis: Int):\n+            MutableMap<Float, Float> {\n+            val expectedDirections: MutableMap<Float, Float> = HashMap()\n+            for (direction in -165..180 step 15) {\n+                if (direction in quadrant1.union(quadrant2)) {\n+                    if (direction >= 0) {\n+                        expectedDirections[direction.toFloat()] = (axis - direction).toFloat()\n+                    } else {\n+                        expectedDirections[direction.toFloat()] = (-axis - direction).toFloat()\n+                    }\n+                } else {\n+                    expectedDirections[direction.toFloat()] = direction.toFloat()\n+                }\n+            }\n+            return expectedDirections\n+        }\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        sprite = SingleSprite(\"Test\")\n+        sprite.look.width = WIDTH\n+        sprite.look.height = HEIGHT\n+        sprite.look.setPositionInUserInterfaceDimensionUnit(0f, 0f)\n+        project = Project(MockUtil.mockContextForProject(), \"Test\", false)\n+        project.xmlHeader.virtualScreenWidth = SCREEN_WIDTH\n+        project.xmlHeader.virtualScreenHeight = SCREEN_HEIGHT\n+        ProjectManager.getInstance().currentProject = project\n+    }\n+\n+    @Test\n+    fun testNoBounce() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzNTc0MA==", "bodyText": "Please try to minimize the logic.\nWe don't want to write a test for our test ;D", "url": "https://github.com/Catrobat/Catroid/pull/3607#discussion_r425135740", "createdAt": "2020-05-14T13:28:08Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/IfOnEdgeBounceActionTest.kt", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+import java.util.HashMap\n+\n+@RunWith(Parameterized::class)\n+class IfOnEdgeBounceActionTest(\n+    private val name: String,\n+    private val initialPosX: Float,\n+    private val initialPosY: Float,\n+    private val expectedPosX: Float,\n+    private val expectedPosY: Float,\n+    private val expectedDirections: Map<Float, Float>\n+) {\n+\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{0}\")\n+        fun parameters() = listOf(\n+            arrayOf(\"NO_BOUNCE\", 0f, 0f, 0f, 0f, mapOf(90f to 90f)),\n+            arrayOf(\"TOP_BOUNCE\", 0f, TOP_BORDER_POSITION, 0f, BOUNCE_TOP_POSITION,\n+                    getExpectedDirections(-90 until 0, 0 until 90, 180)),\n+            arrayOf(\"BOTTOM_BOUNCE\", 0f, BOTTOM_BORDER_POSITION, 0f, BOUNCE_BOTTOM_POSITION,\n+                    getExpectedDirections(-180 until -90, 90..180, 180)),\n+            arrayOf(\"LEFT_BOUNCE\", LEFT_BORDER_POSITION, 0f, BOUNCE_LEFT_POSITION, 0f,\n+                    getExpectedDirections(-180 until -90, -90 until 0, 0)),\n+            arrayOf(\"RIGHT_BOUNCE\", RIGHT_BORDER_POSITION, 0f, BOUNCE_RIGHT_POSITION, 0f,\n+                    getExpectedDirections(0 until 180, 90 until 180, 0)),\n+            arrayOf(\"LEFT_TOP_BOUNCE\", LEFT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_TOP_POSITION, mapOf(135f to 135f, -45f to 135f)),\n+            arrayOf(\"RIGHT_TOP_BOUNCE\", RIGHT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_TOP_POSITION, mapOf(-135f to -135f, 45f to -135f)),\n+            arrayOf(\"LEFT_BOTTOM_BOUNCE\", LEFT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_BOTTOM_POSITION, mapOf(-135f to 45f, 45f to 45f)),\n+            arrayOf(\"RIGHT_BOTTOM_BOUNCE\", RIGHT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_BOTTOM_POSITION, mapOf(-45f to -45f, 135f to -45f))\n+        )\n+\n+        private const val WIDTH = 100f\n+        private const val HEIGHT = 100f\n+        private const val SCREEN_WIDTH = 480\n+        private const val SCREEN_HEIGHT = 800\n+        private const val TOP_BORDER_POSITION = SCREEN_HEIGHT / 2f\n+        private const val BOTTOM_BORDER_POSITION = -TOP_BORDER_POSITION\n+        private const val RIGHT_BORDER_POSITION = SCREEN_WIDTH / 2f\n+        private const val LEFT_BORDER_POSITION = -RIGHT_BORDER_POSITION\n+        private const val BOUNCE_TOP_POSITION = TOP_BORDER_POSITION - HEIGHT / 2f\n+        private const val BOUNCE_BOTTOM_POSITION = -BOUNCE_TOP_POSITION\n+        private const val BOUNCE_RIGHT_POSITION = RIGHT_BORDER_POSITION - WIDTH / 2f\n+        private const val BOUNCE_LEFT_POSITION = -BOUNCE_RIGHT_POSITION\n+\n+        private fun getExpectedDirections(quadrant1: IntRange, quadrant2: IntRange, axis: Int):\n+            MutableMap<Float, Float> {\n+            val expectedDirections: MutableMap<Float, Float> = HashMap()\n+            for (direction in -165..180 step 15) {\n+                if (direction in quadrant1.union(quadrant2)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzOTI1OQ==", "bodyText": "Instead of\nif (b) {\nx = y\n} else {\nx = z\n}\nyou can write\nx = if(b) {\ny\n} else {\nz\n}\nOr if there are more cases use 'when'\nhttps://kotlinlang.org/docs/reference/control-flow.html", "url": "https://github.com/Catrobat/Catroid/pull/3607#discussion_r425139259", "createdAt": "2020-05-14T13:32:57Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/IfOnEdgeBounceActionTest.kt", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+import java.util.HashMap\n+\n+@RunWith(Parameterized::class)\n+class IfOnEdgeBounceActionTest(\n+    private val name: String,\n+    private val initialPosX: Float,\n+    private val initialPosY: Float,\n+    private val expectedPosX: Float,\n+    private val expectedPosY: Float,\n+    private val expectedDirections: Map<Float, Float>\n+) {\n+\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{0}\")\n+        fun parameters() = listOf(\n+            arrayOf(\"NO_BOUNCE\", 0f, 0f, 0f, 0f, mapOf(90f to 90f)),\n+            arrayOf(\"TOP_BOUNCE\", 0f, TOP_BORDER_POSITION, 0f, BOUNCE_TOP_POSITION,\n+                    getExpectedDirections(-90 until 0, 0 until 90, 180)),\n+            arrayOf(\"BOTTOM_BOUNCE\", 0f, BOTTOM_BORDER_POSITION, 0f, BOUNCE_BOTTOM_POSITION,\n+                    getExpectedDirections(-180 until -90, 90..180, 180)),\n+            arrayOf(\"LEFT_BOUNCE\", LEFT_BORDER_POSITION, 0f, BOUNCE_LEFT_POSITION, 0f,\n+                    getExpectedDirections(-180 until -90, -90 until 0, 0)),\n+            arrayOf(\"RIGHT_BOUNCE\", RIGHT_BORDER_POSITION, 0f, BOUNCE_RIGHT_POSITION, 0f,\n+                    getExpectedDirections(0 until 180, 90 until 180, 0)),\n+            arrayOf(\"LEFT_TOP_BOUNCE\", LEFT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_TOP_POSITION, mapOf(135f to 135f, -45f to 135f)),\n+            arrayOf(\"RIGHT_TOP_BOUNCE\", RIGHT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_TOP_POSITION, mapOf(-135f to -135f, 45f to -135f)),\n+            arrayOf(\"LEFT_BOTTOM_BOUNCE\", LEFT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_BOTTOM_POSITION, mapOf(-135f to 45f, 45f to 45f)),\n+            arrayOf(\"RIGHT_BOTTOM_BOUNCE\", RIGHT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_BOTTOM_POSITION, mapOf(-45f to -45f, 135f to -45f))\n+        )\n+\n+        private const val WIDTH = 100f\n+        private const val HEIGHT = 100f\n+        private const val SCREEN_WIDTH = 480\n+        private const val SCREEN_HEIGHT = 800\n+        private const val TOP_BORDER_POSITION = SCREEN_HEIGHT / 2f\n+        private const val BOTTOM_BORDER_POSITION = -TOP_BORDER_POSITION\n+        private const val RIGHT_BORDER_POSITION = SCREEN_WIDTH / 2f\n+        private const val LEFT_BORDER_POSITION = -RIGHT_BORDER_POSITION\n+        private const val BOUNCE_TOP_POSITION = TOP_BORDER_POSITION - HEIGHT / 2f\n+        private const val BOUNCE_BOTTOM_POSITION = -BOUNCE_TOP_POSITION\n+        private const val BOUNCE_RIGHT_POSITION = RIGHT_BORDER_POSITION - WIDTH / 2f\n+        private const val BOUNCE_LEFT_POSITION = -BOUNCE_RIGHT_POSITION\n+\n+        private fun getExpectedDirections(quadrant1: IntRange, quadrant2: IntRange, axis: Int):\n+            MutableMap<Float, Float> {\n+            val expectedDirections: MutableMap<Float, Float> = HashMap()\n+            for (direction in -165..180 step 15) {\n+                if (direction in quadrant1.union(quadrant2)) {\n+                    if (direction >= 0) {\n+                        expectedDirections[direction.toFloat()] = (axis - direction).toFloat()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMTM2ODYy", "url": "https://github.com/Catrobat/Catroid/pull/3607#pullrequestreview-412136862", "createdAt": "2020-05-14T19:54:42Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo1NDo0MlrOGVr79g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDo0NzozOFrOGVtnXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5MzE0Mg==", "bodyText": "Please change it to this:\nreturn when {\n    initialDirection !in bounceRange -> initialDirection\n    initialDirection >= 0  -> axis - initialDirection\n    else -> -axis - initialDirection\n}.toFloat()", "url": "https://github.com/Catrobat/Catroid/pull/3607#discussion_r425393142", "createdAt": "2020-05-14T19:54:42Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/IfOnEdgeBounceActionTest.kt", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+\n+@RunWith(Parameterized::class)\n+class IfOnEdgeBounceActionTest(\n+    private val name: String,\n+    private val initialPosX: Float,\n+    private val initialPosY: Float,\n+    private val expectedPosX: Float,\n+    private val expectedPosY: Float,\n+    private val initialDirection: Int,\n+    private val expectedDirection: Float\n+) {\n+\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{0} {5}\")\n+        fun parameters() = (-179..180).flatMap { listOf(\n+            arrayOf(\"TOP_BOUNCE\", 0f, TOP_BORDER_POSITION, 0f, BOUNCE_TOP_POSITION, it,\n+                    getExpectedDirection(it, (-90..89).toSet(), 180)),\n+            arrayOf(\"BOTTOM_BOUNCE\", 0f, BOTTOM_BORDER_POSITION, 0f, BOUNCE_BOTTOM_POSITION, it,\n+                    getExpectedDirection(it, (-179..-91).union(90..180), 180)),\n+            arrayOf(\"LEFT_BOUNCE\", LEFT_BORDER_POSITION, 0f, BOUNCE_LEFT_POSITION, 0f, it,\n+                    getExpectedDirection(it, (-179..-1).toSet(), 0)),\n+            arrayOf(\"RIGHT_BOUNCE\", RIGHT_BORDER_POSITION, 0f, BOUNCE_RIGHT_POSITION, 0f, it,\n+                    getExpectedDirection(it, (0..179).toSet(), 0)),\n+            arrayOf(\"NO_BOUNCE\", 0f, 0f, 0f, 0f, it, it.toFloat())\n+        ) }.plus(listOf(\n+            arrayOf(\"LEFT_TOP_BOUNCE\", LEFT_BORDER_POSITION, TOP_BORDER_POSITION,\n+            BOUNCE_LEFT_POSITION, BOUNCE_TOP_POSITION, -45, 135f),\n+            arrayOf(\"RIGHT_TOP_NO_BOUNCE\", RIGHT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_TOP_POSITION, -135, -135f),\n+            arrayOf(\"RIGHT_TOP_BOUNCE\", RIGHT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_TOP_POSITION, 45, -135f),\n+            arrayOf(\"LEFT_BOTTOM_BOUNCE\", LEFT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_BOTTOM_POSITION, -135, 45f),\n+            arrayOf(\"LEFT_BOTTOM_NO_BOUNCE\", LEFT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_BOTTOM_POSITION, 45, 45f),\n+            arrayOf(\"RIGHT_BOTTOM_NO_BOUNCE\", RIGHT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_BOTTOM_POSITION, -45, -45f),\n+            arrayOf(\"RIGHT_BOTTOM_BOUNCE\", RIGHT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_BOTTOM_POSITION, 135, -45f)\n+        ))\n+\n+        private const val WIDTH = 100f\n+        private const val HEIGHT = 100f\n+        private const val SCREEN_WIDTH = 480\n+        private const val SCREEN_HEIGHT = 800\n+        private const val TOP_BORDER_POSITION = SCREEN_HEIGHT / 2f\n+        private const val BOTTOM_BORDER_POSITION = -TOP_BORDER_POSITION\n+        private const val RIGHT_BORDER_POSITION = SCREEN_WIDTH / 2f\n+        private const val LEFT_BORDER_POSITION = -RIGHT_BORDER_POSITION\n+        private const val BOUNCE_TOP_POSITION = TOP_BORDER_POSITION - HEIGHT / 2f\n+        private const val BOUNCE_BOTTOM_POSITION = -BOUNCE_TOP_POSITION\n+        private const val BOUNCE_RIGHT_POSITION = RIGHT_BORDER_POSITION - WIDTH / 2f\n+        private const val BOUNCE_LEFT_POSITION = -BOUNCE_RIGHT_POSITION\n+\n+        private fun getExpectedDirection(initialDirection: Int, bounceRange: Set<Int>, axis: Int): Float {\n+                return if (initialDirection in bounceRange) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDYxNg==", "bodyText": "For readability reasons please replace it with initialDirection\nfun parameters() = (-179..180).flatMap { initialDirection -> listOf(", "url": "https://github.com/Catrobat/Catroid/pull/3607#discussion_r425404616", "createdAt": "2020-05-14T20:16:41Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/IfOnEdgeBounceActionTest.kt", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+\n+@RunWith(Parameterized::class)\n+class IfOnEdgeBounceActionTest(\n+    private val name: String,\n+    private val initialPosX: Float,\n+    private val initialPosY: Float,\n+    private val expectedPosX: Float,\n+    private val expectedPosY: Float,\n+    private val initialDirection: Int,\n+    private val expectedDirection: Float\n+) {\n+\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{0} {5}\")\n+        fun parameters() = (-179..180).flatMap { listOf(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxMDM5Mw==", "bodyText": "Please move these two sprite.look  lines into the setUp method", "url": "https://github.com/Catrobat/Catroid/pull/3607#discussion_r425410393", "createdAt": "2020-05-14T20:27:39Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/IfOnEdgeBounceActionTest.kt", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+\n+@RunWith(Parameterized::class)\n+class IfOnEdgeBounceActionTest(\n+    private val name: String,\n+    private val initialPosX: Float,\n+    private val initialPosY: Float,\n+    private val expectedPosX: Float,\n+    private val expectedPosY: Float,\n+    private val initialDirection: Int,\n+    private val expectedDirection: Float\n+) {\n+\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{0} {5}\")\n+        fun parameters() = (-179..180).flatMap { listOf(\n+            arrayOf(\"TOP_BOUNCE\", 0f, TOP_BORDER_POSITION, 0f, BOUNCE_TOP_POSITION, it,\n+                    getExpectedDirection(it, (-90..89).toSet(), 180)),\n+            arrayOf(\"BOTTOM_BOUNCE\", 0f, BOTTOM_BORDER_POSITION, 0f, BOUNCE_BOTTOM_POSITION, it,\n+                    getExpectedDirection(it, (-179..-91).union(90..180), 180)),\n+            arrayOf(\"LEFT_BOUNCE\", LEFT_BORDER_POSITION, 0f, BOUNCE_LEFT_POSITION, 0f, it,\n+                    getExpectedDirection(it, (-179..-1).toSet(), 0)),\n+            arrayOf(\"RIGHT_BOUNCE\", RIGHT_BORDER_POSITION, 0f, BOUNCE_RIGHT_POSITION, 0f, it,\n+                    getExpectedDirection(it, (0..179).toSet(), 0)),\n+            arrayOf(\"NO_BOUNCE\", 0f, 0f, 0f, 0f, it, it.toFloat())\n+        ) }.plus(listOf(\n+            arrayOf(\"LEFT_TOP_BOUNCE\", LEFT_BORDER_POSITION, TOP_BORDER_POSITION,\n+            BOUNCE_LEFT_POSITION, BOUNCE_TOP_POSITION, -45, 135f),\n+            arrayOf(\"RIGHT_TOP_NO_BOUNCE\", RIGHT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_TOP_POSITION, -135, -135f),\n+            arrayOf(\"RIGHT_TOP_BOUNCE\", RIGHT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_TOP_POSITION, 45, -135f),\n+            arrayOf(\"LEFT_BOTTOM_BOUNCE\", LEFT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_BOTTOM_POSITION, -135, 45f),\n+            arrayOf(\"LEFT_BOTTOM_NO_BOUNCE\", LEFT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_BOTTOM_POSITION, 45, 45f),\n+            arrayOf(\"RIGHT_BOTTOM_NO_BOUNCE\", RIGHT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_BOTTOM_POSITION, -45, -45f),\n+            arrayOf(\"RIGHT_BOTTOM_BOUNCE\", RIGHT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_BOTTOM_POSITION, 135, -45f)\n+        ))\n+\n+        private const val WIDTH = 100f\n+        private const val HEIGHT = 100f\n+        private const val SCREEN_WIDTH = 480\n+        private const val SCREEN_HEIGHT = 800\n+        private const val TOP_BORDER_POSITION = SCREEN_HEIGHT / 2f\n+        private const val BOTTOM_BORDER_POSITION = -TOP_BORDER_POSITION\n+        private const val RIGHT_BORDER_POSITION = SCREEN_WIDTH / 2f\n+        private const val LEFT_BORDER_POSITION = -RIGHT_BORDER_POSITION\n+        private const val BOUNCE_TOP_POSITION = TOP_BORDER_POSITION - HEIGHT / 2f\n+        private const val BOUNCE_BOTTOM_POSITION = -BOUNCE_TOP_POSITION\n+        private const val BOUNCE_RIGHT_POSITION = RIGHT_BORDER_POSITION - WIDTH / 2f\n+        private const val BOUNCE_LEFT_POSITION = -BOUNCE_RIGHT_POSITION\n+\n+        private fun getExpectedDirection(initialDirection: Int, bounceRange: Set<Int>, axis: Int): Float {\n+                return if (initialDirection in bounceRange) {\n+                    (if (initialDirection >= 0) axis else -axis) - initialDirection\n+                } else {\n+                    initialDirection\n+                }.toFloat()\n+        }\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        sprite = SingleSprite(\"Test\")\n+        sprite.look.width = WIDTH\n+        sprite.look.height = HEIGHT\n+        sprite.look.setPositionInUserInterfaceDimensionUnit(0f, 0f)\n+        project = Project(MockUtil.mockContextForProject(), \"Test\", false)\n+        project.xmlHeader.virtualScreenWidth = SCREEN_WIDTH\n+        project.xmlHeader.virtualScreenHeight = SCREEN_HEIGHT\n+        ProjectManager.getInstance().currentProject = project\n+    }\n+\n+    @Test\n+    fun testBounce() {\n+        sprite.look.setPositionInUserInterfaceDimensionUnit(initialPosX, initialPosY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxMTI1Mg==", "bodyText": "Please use apply.:\nsprite.look.apply {\n            width = WIDTH\n            height = HEIGHT\n            ...\n}", "url": "https://github.com/Catrobat/Catroid/pull/3607#discussion_r425411252", "createdAt": "2020-05-14T20:29:13Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/IfOnEdgeBounceActionTest.kt", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+\n+@RunWith(Parameterized::class)\n+class IfOnEdgeBounceActionTest(\n+    private val name: String,\n+    private val initialPosX: Float,\n+    private val initialPosY: Float,\n+    private val expectedPosX: Float,\n+    private val expectedPosY: Float,\n+    private val initialDirection: Int,\n+    private val expectedDirection: Float\n+) {\n+\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{0} {5}\")\n+        fun parameters() = (-179..180).flatMap { listOf(\n+            arrayOf(\"TOP_BOUNCE\", 0f, TOP_BORDER_POSITION, 0f, BOUNCE_TOP_POSITION, it,\n+                    getExpectedDirection(it, (-90..89).toSet(), 180)),\n+            arrayOf(\"BOTTOM_BOUNCE\", 0f, BOTTOM_BORDER_POSITION, 0f, BOUNCE_BOTTOM_POSITION, it,\n+                    getExpectedDirection(it, (-179..-91).union(90..180), 180)),\n+            arrayOf(\"LEFT_BOUNCE\", LEFT_BORDER_POSITION, 0f, BOUNCE_LEFT_POSITION, 0f, it,\n+                    getExpectedDirection(it, (-179..-1).toSet(), 0)),\n+            arrayOf(\"RIGHT_BOUNCE\", RIGHT_BORDER_POSITION, 0f, BOUNCE_RIGHT_POSITION, 0f, it,\n+                    getExpectedDirection(it, (0..179).toSet(), 0)),\n+            arrayOf(\"NO_BOUNCE\", 0f, 0f, 0f, 0f, it, it.toFloat())\n+        ) }.plus(listOf(\n+            arrayOf(\"LEFT_TOP_BOUNCE\", LEFT_BORDER_POSITION, TOP_BORDER_POSITION,\n+            BOUNCE_LEFT_POSITION, BOUNCE_TOP_POSITION, -45, 135f),\n+            arrayOf(\"RIGHT_TOP_NO_BOUNCE\", RIGHT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_TOP_POSITION, -135, -135f),\n+            arrayOf(\"RIGHT_TOP_BOUNCE\", RIGHT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_TOP_POSITION, 45, -135f),\n+            arrayOf(\"LEFT_BOTTOM_BOUNCE\", LEFT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_BOTTOM_POSITION, -135, 45f),\n+            arrayOf(\"LEFT_BOTTOM_NO_BOUNCE\", LEFT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_BOTTOM_POSITION, 45, 45f),\n+            arrayOf(\"RIGHT_BOTTOM_NO_BOUNCE\", RIGHT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_BOTTOM_POSITION, -45, -45f),\n+            arrayOf(\"RIGHT_BOTTOM_BOUNCE\", RIGHT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_BOTTOM_POSITION, 135, -45f)\n+        ))\n+\n+        private const val WIDTH = 100f\n+        private const val HEIGHT = 100f\n+        private const val SCREEN_WIDTH = 480\n+        private const val SCREEN_HEIGHT = 800\n+        private const val TOP_BORDER_POSITION = SCREEN_HEIGHT / 2f\n+        private const val BOTTOM_BORDER_POSITION = -TOP_BORDER_POSITION\n+        private const val RIGHT_BORDER_POSITION = SCREEN_WIDTH / 2f\n+        private const val LEFT_BORDER_POSITION = -RIGHT_BORDER_POSITION\n+        private const val BOUNCE_TOP_POSITION = TOP_BORDER_POSITION - HEIGHT / 2f\n+        private const val BOUNCE_BOTTOM_POSITION = -BOUNCE_TOP_POSITION\n+        private const val BOUNCE_RIGHT_POSITION = RIGHT_BORDER_POSITION - WIDTH / 2f\n+        private const val BOUNCE_LEFT_POSITION = -BOUNCE_RIGHT_POSITION\n+\n+        private fun getExpectedDirection(initialDirection: Int, bounceRange: Set<Int>, axis: Int): Float {\n+                return if (initialDirection in bounceRange) {\n+                    (if (initialDirection >= 0) axis else -axis) - initialDirection\n+                } else {\n+                    initialDirection\n+                }.toFloat()\n+        }\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        sprite = SingleSprite(\"Test\")\n+        sprite.look.width = WIDTH", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxNjkzMA==", "bodyText": "The project variable could be local.\nBut you can completely avoid it, again with scope functions:\nval context = MockUtil.mockContextForProject()\nProjectManager.getInstance().currentProject = Project(context, \"Test\", false).apply {\n            xmlHeader.virtualScreenWidth = SCREEN_WIDTH\n            xmlHeader.virtualScreenHeight = SCREEN_HEIGHT\n}\n\nOR\nProject(MockUtil.mockContextForProject(), \"Test\", false).apply {\n            xmlHeader.virtualScreenWidth = SCREEN_WIDTH\n            xmlHeader.virtualScreenHeight = SCREEN_HEIGHT\n            ProjectManager.getInstance().currentProject = this\n}", "url": "https://github.com/Catrobat/Catroid/pull/3607#discussion_r425416930", "createdAt": "2020-05-14T20:40:09Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/IfOnEdgeBounceActionTest.kt", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+\n+@RunWith(Parameterized::class)\n+class IfOnEdgeBounceActionTest(\n+    private val name: String,\n+    private val initialPosX: Float,\n+    private val initialPosY: Float,\n+    private val expectedPosX: Float,\n+    private val expectedPosY: Float,\n+    private val initialDirection: Int,\n+    private val expectedDirection: Float\n+) {\n+\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{0} {5}\")\n+        fun parameters() = (-179..180).flatMap { listOf(\n+            arrayOf(\"TOP_BOUNCE\", 0f, TOP_BORDER_POSITION, 0f, BOUNCE_TOP_POSITION, it,\n+                    getExpectedDirection(it, (-90..89).toSet(), 180)),\n+            arrayOf(\"BOTTOM_BOUNCE\", 0f, BOTTOM_BORDER_POSITION, 0f, BOUNCE_BOTTOM_POSITION, it,\n+                    getExpectedDirection(it, (-179..-91).union(90..180), 180)),\n+            arrayOf(\"LEFT_BOUNCE\", LEFT_BORDER_POSITION, 0f, BOUNCE_LEFT_POSITION, 0f, it,\n+                    getExpectedDirection(it, (-179..-1).toSet(), 0)),\n+            arrayOf(\"RIGHT_BOUNCE\", RIGHT_BORDER_POSITION, 0f, BOUNCE_RIGHT_POSITION, 0f, it,\n+                    getExpectedDirection(it, (0..179).toSet(), 0)),\n+            arrayOf(\"NO_BOUNCE\", 0f, 0f, 0f, 0f, it, it.toFloat())\n+        ) }.plus(listOf(\n+            arrayOf(\"LEFT_TOP_BOUNCE\", LEFT_BORDER_POSITION, TOP_BORDER_POSITION,\n+            BOUNCE_LEFT_POSITION, BOUNCE_TOP_POSITION, -45, 135f),\n+            arrayOf(\"RIGHT_TOP_NO_BOUNCE\", RIGHT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_TOP_POSITION, -135, -135f),\n+            arrayOf(\"RIGHT_TOP_BOUNCE\", RIGHT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_TOP_POSITION, 45, -135f),\n+            arrayOf(\"LEFT_BOTTOM_BOUNCE\", LEFT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_BOTTOM_POSITION, -135, 45f),\n+            arrayOf(\"LEFT_BOTTOM_NO_BOUNCE\", LEFT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_BOTTOM_POSITION, 45, 45f),\n+            arrayOf(\"RIGHT_BOTTOM_NO_BOUNCE\", RIGHT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_BOTTOM_POSITION, -45, -45f),\n+            arrayOf(\"RIGHT_BOTTOM_BOUNCE\", RIGHT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_BOTTOM_POSITION, 135, -45f)\n+        ))\n+\n+        private const val WIDTH = 100f\n+        private const val HEIGHT = 100f\n+        private const val SCREEN_WIDTH = 480\n+        private const val SCREEN_HEIGHT = 800\n+        private const val TOP_BORDER_POSITION = SCREEN_HEIGHT / 2f\n+        private const val BOTTOM_BORDER_POSITION = -TOP_BORDER_POSITION\n+        private const val RIGHT_BORDER_POSITION = SCREEN_WIDTH / 2f\n+        private const val LEFT_BORDER_POSITION = -RIGHT_BORDER_POSITION\n+        private const val BOUNCE_TOP_POSITION = TOP_BORDER_POSITION - HEIGHT / 2f\n+        private const val BOUNCE_BOTTOM_POSITION = -BOUNCE_TOP_POSITION\n+        private const val BOUNCE_RIGHT_POSITION = RIGHT_BORDER_POSITION - WIDTH / 2f\n+        private const val BOUNCE_LEFT_POSITION = -BOUNCE_RIGHT_POSITION\n+\n+        private fun getExpectedDirection(initialDirection: Int, bounceRange: Set<Int>, axis: Int): Float {\n+                return if (initialDirection in bounceRange) {\n+                    (if (initialDirection >= 0) axis else -axis) - initialDirection\n+                } else {\n+                    initialDirection\n+                }.toFloat()\n+        }\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        sprite = SingleSprite(\"Test\")\n+        sprite.look.width = WIDTH\n+        sprite.look.height = HEIGHT\n+        sprite.look.setPositionInUserInterfaceDimensionUnit(0f, 0f)\n+        project = Project(MockUtil.mockContextForProject(), \"Test\", false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyMDYzOA==", "bodyText": "But maybe you can find a better way here: https://kotlinlang.org/docs/reference/scope-functions.html", "url": "https://github.com/Catrobat/Catroid/pull/3607#discussion_r425420638", "createdAt": "2020-05-14T20:47:38Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/IfOnEdgeBounceActionTest.kt", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.SingleSprite\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+\n+@RunWith(Parameterized::class)\n+class IfOnEdgeBounceActionTest(\n+    private val name: String,\n+    private val initialPosX: Float,\n+    private val initialPosY: Float,\n+    private val expectedPosX: Float,\n+    private val expectedPosY: Float,\n+    private val initialDirection: Int,\n+    private val expectedDirection: Float\n+) {\n+\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{0} {5}\")\n+        fun parameters() = (-179..180).flatMap { listOf(\n+            arrayOf(\"TOP_BOUNCE\", 0f, TOP_BORDER_POSITION, 0f, BOUNCE_TOP_POSITION, it,\n+                    getExpectedDirection(it, (-90..89).toSet(), 180)),\n+            arrayOf(\"BOTTOM_BOUNCE\", 0f, BOTTOM_BORDER_POSITION, 0f, BOUNCE_BOTTOM_POSITION, it,\n+                    getExpectedDirection(it, (-179..-91).union(90..180), 180)),\n+            arrayOf(\"LEFT_BOUNCE\", LEFT_BORDER_POSITION, 0f, BOUNCE_LEFT_POSITION, 0f, it,\n+                    getExpectedDirection(it, (-179..-1).toSet(), 0)),\n+            arrayOf(\"RIGHT_BOUNCE\", RIGHT_BORDER_POSITION, 0f, BOUNCE_RIGHT_POSITION, 0f, it,\n+                    getExpectedDirection(it, (0..179).toSet(), 0)),\n+            arrayOf(\"NO_BOUNCE\", 0f, 0f, 0f, 0f, it, it.toFloat())\n+        ) }.plus(listOf(\n+            arrayOf(\"LEFT_TOP_BOUNCE\", LEFT_BORDER_POSITION, TOP_BORDER_POSITION,\n+            BOUNCE_LEFT_POSITION, BOUNCE_TOP_POSITION, -45, 135f),\n+            arrayOf(\"RIGHT_TOP_NO_BOUNCE\", RIGHT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_TOP_POSITION, -135, -135f),\n+            arrayOf(\"RIGHT_TOP_BOUNCE\", RIGHT_BORDER_POSITION, TOP_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_TOP_POSITION, 45, -135f),\n+            arrayOf(\"LEFT_BOTTOM_BOUNCE\", LEFT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_BOTTOM_POSITION, -135, 45f),\n+            arrayOf(\"LEFT_BOTTOM_NO_BOUNCE\", LEFT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_LEFT_POSITION, BOUNCE_BOTTOM_POSITION, 45, 45f),\n+            arrayOf(\"RIGHT_BOTTOM_NO_BOUNCE\", RIGHT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_BOTTOM_POSITION, -45, -45f),\n+            arrayOf(\"RIGHT_BOTTOM_BOUNCE\", RIGHT_BORDER_POSITION, BOTTOM_BORDER_POSITION,\n+                    BOUNCE_RIGHT_POSITION, BOUNCE_BOTTOM_POSITION, 135, -45f)\n+        ))\n+\n+        private const val WIDTH = 100f\n+        private const val HEIGHT = 100f\n+        private const val SCREEN_WIDTH = 480\n+        private const val SCREEN_HEIGHT = 800\n+        private const val TOP_BORDER_POSITION = SCREEN_HEIGHT / 2f\n+        private const val BOTTOM_BORDER_POSITION = -TOP_BORDER_POSITION\n+        private const val RIGHT_BORDER_POSITION = SCREEN_WIDTH / 2f\n+        private const val LEFT_BORDER_POSITION = -RIGHT_BORDER_POSITION\n+        private const val BOUNCE_TOP_POSITION = TOP_BORDER_POSITION - HEIGHT / 2f\n+        private const val BOUNCE_BOTTOM_POSITION = -BOUNCE_TOP_POSITION\n+        private const val BOUNCE_RIGHT_POSITION = RIGHT_BORDER_POSITION - WIDTH / 2f\n+        private const val BOUNCE_LEFT_POSITION = -BOUNCE_RIGHT_POSITION\n+\n+        private fun getExpectedDirection(initialDirection: Int, bounceRange: Set<Int>, axis: Int): Float {\n+                return if (initialDirection in bounceRange) {\n+                    (if (initialDirection >= 0) axis else -axis) - initialDirection\n+                } else {\n+                    initialDirection\n+                }.toFloat()\n+        }\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        sprite = SingleSprite(\"Test\")\n+        sprite.look.width = WIDTH\n+        sprite.look.height = HEIGHT\n+        sprite.look.setPositionInUserInterfaceDimensionUnit(0f, 0f)\n+        project = Project(MockUtil.mockContextForProject(), \"Test\", false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxNjkzMA=="}, "originalCommit": null, "originalPosition": 108}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjE4Mjkx", "url": "https://github.com/Catrobat/Catroid/pull/3607#pullrequestreview-412218291", "createdAt": "2020-05-14T22:05:19Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e8ed7e0df153f48a4bc56b32fb8fb9122be9bce", "author": {"user": null}, "url": "https://github.com/Catrobat/Catroid/commit/9e8ed7e0df153f48a4bc56b32fb8fb9122be9bce", "committedDate": "2020-05-15T08:59:59Z", "message": "CATROID-562 REFACTOR IfOnEdgeBounceActionTest to Kotlin\n\nConverted tests to Kotlin, added parameterization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9e8ed7e0df153f48a4bc56b32fb8fb9122be9bce", "author": {"user": null}, "url": "https://github.com/Catrobat/Catroid/commit/9e8ed7e0df153f48a4bc56b32fb8fb9122be9bce", "committedDate": "2020-05-15T08:59:59Z", "message": "CATROID-562 REFACTOR IfOnEdgeBounceActionTest to Kotlin\n\nConverted tests to Kotlin, added parameterization"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1938, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}