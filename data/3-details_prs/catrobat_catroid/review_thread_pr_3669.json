{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NTY4NTI4", "number": 3669, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzowNjo1NlrOESKqbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzowNjo1NlrOESKqbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDg0NTI3OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/bricks/ParameterizedBrick.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzowNjo1NlrOG3NyRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNzo0NzoyM1rOG3OB1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MDcyNA==", "bodyText": "parameterizedData can't hold a null reference, ? isn't needed", "url": "https://github.com/Catrobat/Catroid/pull/3669#discussion_r460550724", "createdAt": "2020-07-26T17:06:56Z", "author": {"login": "maxf24"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/bricks/ParameterizedBrick.kt", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.bricks\n+\n+import android.widget.TextView\n+import com.thoughtworks.xstream.annotations.XStreamOmitField\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.common.ParameterizedData\n+import org.catrobat.catroid.content.ActionFactory\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.content.actions.ScriptSequenceAction\n+import org.catrobat.catroid.content.bricks.Brick.ResourcesSet\n+import org.catrobat.catroid.formulaeditor.UserList\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+\n+class ParameterizedBrick : ListSelectorBrick(), CompositeBrick {\n+    private var loopBricks = mutableListOf<Brick>()\n+    private var endBrick = ParameterizedEndBrick(this)\n+\n+    @Transient\n+    @XStreamOmitField\n+    var parameterizedData: ParameterizedData = ParameterizedData()\n+\n+    override val selectorId: Int\n+        get() = R.id.brick_param_list_of_list_text\n+\n+    override fun hasSecondaryList(): Boolean = false\n+\n+    override fun getNestedBricks(): List<Brick> = loopBricks\n+\n+    override fun getSecondaryNestedBricks(): List<Brick>? = null\n+\n+    fun addBrick(brick: Brick): Boolean = loopBricks.add(brick)\n+\n+    override fun updateSelectorText() {\n+        super.updateSelectorText()\n+        val listSize = userLists.size\n+        val firstLabel = view.findViewById<TextView>(R.id.brick_param_first_label)\n+        firstLabel.text = view.resources.getQuantityString(\n+            R.plurals.brick_parameterized_foreach_plural,\n+            listSize, listSize\n+        )\n+        val secondLabel = view.findViewById<TextView>(R.id.brick_param_second_label)\n+        secondLabel.text = view.resources.getQuantityString(\n+            R.plurals.brick_parameterized_stored_plural,\n+            listSize, listSize\n+        )\n+    }\n+\n+    override fun setCommentedOut(commentedOut: Boolean) {\n+        super.setCommentedOut(commentedOut)\n+        for (brick in loopBricks) {\n+            brick.isCommentedOut = commentedOut\n+        }\n+        endBrick.isCommentedOut = commentedOut\n+    }\n+\n+    @Throws(CloneNotSupportedException::class)\n+    override fun clone(): Brick {\n+        val clone = super.clone() as ParameterizedBrick\n+        clone.endBrick = ParameterizedEndBrick(clone)\n+        clone.loopBricks = mutableListOf()\n+        clone.parameterizedData = ParameterizedData()\n+        for (brick in loopBricks) {\n+            clone.addBrick(brick.clone())\n+        }\n+        return clone\n+    }\n+\n+    override fun consistsOfMultipleParts(): Boolean = true\n+\n+    override fun getAllParts(): List<Brick> {\n+        val bricks = mutableListOf<Brick>()\n+        bricks.add(this)\n+        bricks.add(endBrick)\n+        return bricks\n+    }\n+\n+    override fun addToFlatList(bricks: MutableList<Brick>) {\n+        super.addToFlatList(bricks)\n+        for (brick in loopBricks) {\n+            brick.addToFlatList(bricks)\n+        }\n+        bricks.add(endBrick)\n+    }\n+\n+    override fun setParent(parent: Brick) {\n+        super.setParent(parent)\n+        for (brick in loopBricks) {\n+            brick.parent = this\n+        }\n+        endBrick.parent = this\n+    }\n+\n+    override fun getDragAndDropTargetList(): List<Brick> = loopBricks\n+\n+    override fun removeChild(brick: Brick): Boolean {\n+        if (loopBricks.remove(brick)) {\n+            return true\n+        }\n+\n+        for (childBrick in loopBricks) {\n+            if (childBrick.removeChild(brick)) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    override fun getViewResource(): Int = R.layout.brick_parameterized_input\n+\n+    override fun addActionToSequence(sprite: Sprite, sequence: ScriptSequenceAction) {\n+        val repeatSequence =\n+            ActionFactory.eventSequence(sequence.script) as ScriptSequenceAction\n+        loopBricks.filterNot { brick -> brick.isCommentedOut }.forEach {\n+            it.addActionToSequence(sprite, repeatSequence)\n+        }\n+        endBrick.addActionToSequence(sprite, repeatSequence)\n+        parameterizedData?.reset()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NDIxMw==", "bodyText": "i like the ?. way more than the !!.", "url": "https://github.com/Catrobat/Catroid/pull/3669#discussion_r460554213", "createdAt": "2020-07-26T17:42:18Z", "author": {"login": "Koell"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/bricks/ParameterizedBrick.kt", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.bricks\n+\n+import android.widget.TextView\n+import com.thoughtworks.xstream.annotations.XStreamOmitField\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.common.ParameterizedData\n+import org.catrobat.catroid.content.ActionFactory\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.content.actions.ScriptSequenceAction\n+import org.catrobat.catroid.content.bricks.Brick.ResourcesSet\n+import org.catrobat.catroid.formulaeditor.UserList\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+\n+class ParameterizedBrick : ListSelectorBrick(), CompositeBrick {\n+    private var loopBricks = mutableListOf<Brick>()\n+    private var endBrick = ParameterizedEndBrick(this)\n+\n+    @Transient\n+    @XStreamOmitField\n+    var parameterizedData: ParameterizedData = ParameterizedData()\n+\n+    override val selectorId: Int\n+        get() = R.id.brick_param_list_of_list_text\n+\n+    override fun hasSecondaryList(): Boolean = false\n+\n+    override fun getNestedBricks(): List<Brick> = loopBricks\n+\n+    override fun getSecondaryNestedBricks(): List<Brick>? = null\n+\n+    fun addBrick(brick: Brick): Boolean = loopBricks.add(brick)\n+\n+    override fun updateSelectorText() {\n+        super.updateSelectorText()\n+        val listSize = userLists.size\n+        val firstLabel = view.findViewById<TextView>(R.id.brick_param_first_label)\n+        firstLabel.text = view.resources.getQuantityString(\n+            R.plurals.brick_parameterized_foreach_plural,\n+            listSize, listSize\n+        )\n+        val secondLabel = view.findViewById<TextView>(R.id.brick_param_second_label)\n+        secondLabel.text = view.resources.getQuantityString(\n+            R.plurals.brick_parameterized_stored_plural,\n+            listSize, listSize\n+        )\n+    }\n+\n+    override fun setCommentedOut(commentedOut: Boolean) {\n+        super.setCommentedOut(commentedOut)\n+        for (brick in loopBricks) {\n+            brick.isCommentedOut = commentedOut\n+        }\n+        endBrick.isCommentedOut = commentedOut\n+    }\n+\n+    @Throws(CloneNotSupportedException::class)\n+    override fun clone(): Brick {\n+        val clone = super.clone() as ParameterizedBrick\n+        clone.endBrick = ParameterizedEndBrick(clone)\n+        clone.loopBricks = mutableListOf()\n+        clone.parameterizedData = ParameterizedData()\n+        for (brick in loopBricks) {\n+            clone.addBrick(brick.clone())\n+        }\n+        return clone\n+    }\n+\n+    override fun consistsOfMultipleParts(): Boolean = true\n+\n+    override fun getAllParts(): List<Brick> {\n+        val bricks = mutableListOf<Brick>()\n+        bricks.add(this)\n+        bricks.add(endBrick)\n+        return bricks\n+    }\n+\n+    override fun addToFlatList(bricks: MutableList<Brick>) {\n+        super.addToFlatList(bricks)\n+        for (brick in loopBricks) {\n+            brick.addToFlatList(bricks)\n+        }\n+        bricks.add(endBrick)\n+    }\n+\n+    override fun setParent(parent: Brick) {\n+        super.setParent(parent)\n+        for (brick in loopBricks) {\n+            brick.parent = this\n+        }\n+        endBrick.parent = this\n+    }\n+\n+    override fun getDragAndDropTargetList(): List<Brick> = loopBricks\n+\n+    override fun removeChild(brick: Brick): Boolean {\n+        if (loopBricks.remove(brick)) {\n+            return true\n+        }\n+\n+        for (childBrick in loopBricks) {\n+            if (childBrick.removeChild(brick)) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    override fun getViewResource(): Int = R.layout.brick_parameterized_input\n+\n+    override fun addActionToSequence(sprite: Sprite, sequence: ScriptSequenceAction) {\n+        val repeatSequence =\n+            ActionFactory.eventSequence(sequence.script) as ScriptSequenceAction\n+        loopBricks.filterNot { brick -> brick.isCommentedOut }.forEach {\n+            it.addActionToSequence(sprite, repeatSequence)\n+        }\n+        endBrick.addActionToSequence(sprite, repeatSequence)\n+        parameterizedData?.reset()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MDcyNA=="}, "originalCommit": null, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NDcxMQ==", "bodyText": "I agree, what I meant was that \"parameterizedData\" is initialized as a non-null value so it can never be set to null - therefore this check is not needed. It doesn't really matter, just wanted to mention it.", "url": "https://github.com/Catrobat/Catroid/pull/3669#discussion_r460554711", "createdAt": "2020-07-26T17:47:23Z", "author": {"login": "maxf24"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/bricks/ParameterizedBrick.kt", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.bricks\n+\n+import android.widget.TextView\n+import com.thoughtworks.xstream.annotations.XStreamOmitField\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.common.ParameterizedData\n+import org.catrobat.catroid.content.ActionFactory\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.content.actions.ScriptSequenceAction\n+import org.catrobat.catroid.content.bricks.Brick.ResourcesSet\n+import org.catrobat.catroid.formulaeditor.UserList\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+\n+class ParameterizedBrick : ListSelectorBrick(), CompositeBrick {\n+    private var loopBricks = mutableListOf<Brick>()\n+    private var endBrick = ParameterizedEndBrick(this)\n+\n+    @Transient\n+    @XStreamOmitField\n+    var parameterizedData: ParameterizedData = ParameterizedData()\n+\n+    override val selectorId: Int\n+        get() = R.id.brick_param_list_of_list_text\n+\n+    override fun hasSecondaryList(): Boolean = false\n+\n+    override fun getNestedBricks(): List<Brick> = loopBricks\n+\n+    override fun getSecondaryNestedBricks(): List<Brick>? = null\n+\n+    fun addBrick(brick: Brick): Boolean = loopBricks.add(brick)\n+\n+    override fun updateSelectorText() {\n+        super.updateSelectorText()\n+        val listSize = userLists.size\n+        val firstLabel = view.findViewById<TextView>(R.id.brick_param_first_label)\n+        firstLabel.text = view.resources.getQuantityString(\n+            R.plurals.brick_parameterized_foreach_plural,\n+            listSize, listSize\n+        )\n+        val secondLabel = view.findViewById<TextView>(R.id.brick_param_second_label)\n+        secondLabel.text = view.resources.getQuantityString(\n+            R.plurals.brick_parameterized_stored_plural,\n+            listSize, listSize\n+        )\n+    }\n+\n+    override fun setCommentedOut(commentedOut: Boolean) {\n+        super.setCommentedOut(commentedOut)\n+        for (brick in loopBricks) {\n+            brick.isCommentedOut = commentedOut\n+        }\n+        endBrick.isCommentedOut = commentedOut\n+    }\n+\n+    @Throws(CloneNotSupportedException::class)\n+    override fun clone(): Brick {\n+        val clone = super.clone() as ParameterizedBrick\n+        clone.endBrick = ParameterizedEndBrick(clone)\n+        clone.loopBricks = mutableListOf()\n+        clone.parameterizedData = ParameterizedData()\n+        for (brick in loopBricks) {\n+            clone.addBrick(brick.clone())\n+        }\n+        return clone\n+    }\n+\n+    override fun consistsOfMultipleParts(): Boolean = true\n+\n+    override fun getAllParts(): List<Brick> {\n+        val bricks = mutableListOf<Brick>()\n+        bricks.add(this)\n+        bricks.add(endBrick)\n+        return bricks\n+    }\n+\n+    override fun addToFlatList(bricks: MutableList<Brick>) {\n+        super.addToFlatList(bricks)\n+        for (brick in loopBricks) {\n+            brick.addToFlatList(bricks)\n+        }\n+        bricks.add(endBrick)\n+    }\n+\n+    override fun setParent(parent: Brick) {\n+        super.setParent(parent)\n+        for (brick in loopBricks) {\n+            brick.parent = this\n+        }\n+        endBrick.parent = this\n+    }\n+\n+    override fun getDragAndDropTargetList(): List<Brick> = loopBricks\n+\n+    override fun removeChild(brick: Brick): Boolean {\n+        if (loopBricks.remove(brick)) {\n+            return true\n+        }\n+\n+        for (childBrick in loopBricks) {\n+            if (childBrick.removeChild(brick)) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    override fun getViewResource(): Int = R.layout.brick_parameterized_input\n+\n+    override fun addActionToSequence(sprite: Sprite, sequence: ScriptSequenceAction) {\n+        val repeatSequence =\n+            ActionFactory.eventSequence(sequence.script) as ScriptSequenceAction\n+        loopBricks.filterNot { brick -> brick.isCommentedOut }.forEach {\n+            it.addActionToSequence(sprite, repeatSequence)\n+        }\n+        endBrick.addActionToSequence(sprite, repeatSequence)\n+        parameterizedData?.reset()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MDcyNA=="}, "originalCommit": null, "originalPosition": 140}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3874, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}