{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MjA0NTE3", "number": 3646, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDo1MDozMlrOEJFuTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzozMjowMFrOEaNvIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTY2NDEzOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDo1MDozMlrOGpcfZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDo1MDozMlrOGpcfZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjExMTU5MA==", "bodyText": "val interpretation = repeatCount?.interpretDouble(sprite) ?: 0.0\n?. returns null if repeatCount is null instead of trying to use interpretDouble\n?: return 0.0 if the statement before it is null", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r446111590", "createdAt": "2020-06-26T10:50:32Z", "author": {"login": "Koell"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var repeatCount: Formula? = null\n+    private var sprite: Sprite? = null\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    private var isForeverRepeat = false\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isRepeatActionInitialized) {\n+            isRepeatActionInitialized = true\n+            interpretRepeatCount()\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (repeatCountValue < 0) {\n+            repeatCountValue = 0\n+        }\n+        if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+            return true\n+        }\n+        if (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            if (action != null) {\n+                action.restart()\n+            }\n+        }\n+        return false\n+    }\n+\n+    override fun restart() {\n+        isCurrentLoopInitialized = false\n+        isRepeatActionInitialized = false\n+        executedCount = 0\n+        super.restart()\n+    }\n+\n+    private fun interpretRepeatCount() {\n+        try {\n+            val interpretation =\n+                if (repeatCount == null) java.lang.Double.valueOf(0.0) else repeatCount!!.interpretDouble(\n+                    sprite\n+                )", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTY2NzA1OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDo1MTo0MlrOGpchNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDo1MTo0MlrOGpchNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjExMjA1Mw==", "bodyText": "action?.restart()\nif action is null restart is not invoked", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r446112053", "createdAt": "2020-06-26T10:51:42Z", "author": {"login": "Koell"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var repeatCount: Formula? = null\n+    private var sprite: Sprite? = null\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    private var isForeverRepeat = false\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isRepeatActionInitialized) {\n+            isRepeatActionInitialized = true\n+            interpretRepeatCount()\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (repeatCountValue < 0) {\n+            repeatCountValue = 0\n+        }\n+        if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+            return true\n+        }\n+        if (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            if (action != null) {\n+                action.restart()\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTEyMzc5OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODozNTo1NlrOGpq5Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODozNTo1NlrOGpq5Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NzYyMw==", "bodyText": "Since the setter is public, why not change private var to var? Kotlin will create implicit functions to interact with Java.\nFor other cases, where you only need a public getter, you can also declare it as var and declare the setter as private. See https://kotlinlang.org/docs/reference/properties.html under setterVisibility.", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r446347623", "createdAt": "2020-06-26T18:35:56Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var repeatCount: Formula? = null\n+    private var sprite: Sprite? = null\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    private var isForeverRepeat = false\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isRepeatActionInitialized) {\n+            isRepeatActionInitialized = true\n+            interpretRepeatCount()\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (repeatCountValue < 0) {\n+            repeatCountValue = 0\n+        }\n+        if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+            return true\n+        }\n+        if (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            if (action != null) {\n+                action.restart()\n+            }\n+        }\n+        return false\n+    }\n+\n+    override fun restart() {\n+        isCurrentLoopInitialized = false\n+        isRepeatActionInitialized = false\n+        executedCount = 0\n+        super.restart()\n+    }\n+\n+    private fun interpretRepeatCount() {\n+        try {\n+            val interpretation =\n+                if (repeatCount == null) java.lang.Double.valueOf(0.0) else repeatCount!!.interpretDouble(\n+                    sprite\n+                )\n+            repeatCountValue = interpretation.toInt()\n+        } catch (interpretationException: InterpretationException) {\n+            repeatCountValue = 0\n+            Log.d(\n+                javaClass.simpleName,\n+                \"Formula interpretation for this specific Brick failed.\",\n+                interpretationException\n+            )\n+        }\n+    }\n+\n+    fun setSprite(sprite: Sprite?) {\n+        this.sprite = sprite\n+    }\n+\n+    fun setIsForeverRepeat(isForeverRepeat: Boolean) {\n+        this.isForeverRepeat = isForeverRepeat\n+    }\n+\n+    fun setRepeatCount(repeatCount: Formula?) {\n+        this.repeatCount = repeatCount", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTIwNTc3OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzoyNTowOVrOHDfzvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjoxMToxNFrOHHTbOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyODkyNw==", "bodyText": "please change to  lateinit var sprite: Sprite, sprite is never gonna be null.", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r473428927", "createdAt": "2020-08-19T23:25:09Z", "author": {"login": "ndrnour"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    var sprite: Sprite? = null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyMDM0NA==", "bodyText": "changed this", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r477420344", "createdAt": "2020-08-26T16:11:14Z", "author": {"login": "trummerp"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    var sprite: Sprite? = null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyODkyNw=="}, "originalCommit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTIxMDE4OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzoyNjowOVrOHDf2xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjowMzo0OVrOHPEEqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyOTcwMA==", "bodyText": "please change this to  lateinit var repeatCountFormula: Formula", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r473429700", "createdAt": "2020-08-19T23:26:09Z", "author": {"login": "ndrnour"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    var sprite: Sprite? = null\n+    var isForeverRepeat = false\n+    var repeatCount: Formula? = null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyMjE3Nw==", "bodyText": "I think I need to leave this as it is because of the null testcase", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r477422177", "createdAt": "2020-08-26T16:14:11Z", "author": {"login": "trummerp"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    var sprite: Sprite? = null\n+    var isForeverRepeat = false\n+    var repeatCount: Formula? = null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyOTcwMA=="}, "originalCommit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1NzQxOQ==", "bodyText": "Thats right", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r485557419", "createdAt": "2020-09-09T12:03:49Z", "author": {"login": "Koell"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    var sprite: Sprite? = null\n+    var isForeverRepeat = false\n+    var repeatCount: Formula? = null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyOTcwMA=="}, "originalCommit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTIzNDg5OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzozMjowMFrOHDgHbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTozNDozMFrOHHR3eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzMzk2NA==", "bodyText": "please remove this line repeatCountValue = interpretation.toInt()\nand change the line before to val interpretation = repeatCountFormula.interpretInteger(sprite) no need for ?: 0.0 cause the function goona throw an InterpretationException when it fails..", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r473433964", "createdAt": "2020-08-19T23:32:00Z", "author": {"login": "ndrnour"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    var sprite: Sprite? = null\n+    var isForeverRepeat = false\n+    var repeatCount: Formula? = null\n+\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isRepeatActionInitialized) {\n+            isRepeatActionInitialized = true\n+            interpretRepeatCount()\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (repeatCountValue < 0) {\n+            repeatCountValue = 0\n+        }\n+        if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+            return true\n+        }\n+        if (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            action?.restart()\n+        }\n+        return false\n+    }\n+\n+    override fun restart() {\n+        isCurrentLoopInitialized = false\n+        isRepeatActionInitialized = false\n+        executedCount = 0\n+        super.restart()\n+    }\n+\n+    private fun interpretRepeatCount() {\n+        try {\n+            val interpretation = repeatCount?.interpretDouble(sprite) ?: 0.0\n+            repeatCountValue = interpretation.toInt()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM2ODEyMw==", "bodyText": "repeatCountValue = repeatCount?.interpretInteger(sprite) ?: 0\nwould be an ever shorter reduction, the ?: 0 is necessary to handle Formula == null, and a dangling NPE would not be optimal", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r477368123", "createdAt": "2020-08-26T14:58:17Z", "author": {"login": "Koell"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    var sprite: Sprite? = null\n+    var isForeverRepeat = false\n+    var repeatCount: Formula? = null\n+\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isRepeatActionInitialized) {\n+            isRepeatActionInitialized = true\n+            interpretRepeatCount()\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (repeatCountValue < 0) {\n+            repeatCountValue = 0\n+        }\n+        if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+            return true\n+        }\n+        if (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            action?.restart()\n+        }\n+        return false\n+    }\n+\n+    override fun restart() {\n+        isCurrentLoopInitialized = false\n+        isRepeatActionInitialized = false\n+        executedCount = 0\n+        super.restart()\n+    }\n+\n+    private fun interpretRepeatCount() {\n+        try {\n+            val interpretation = repeatCount?.interpretDouble(sprite) ?: 0.0\n+            repeatCountValue = interpretation.toInt()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzMzk2NA=="}, "originalCommit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NDgwOQ==", "bodyText": "bzw g\u00e4ng das auch als\nrepeatCountValue = try{\nrepeatCount?.interpretInteger(sprite) ?: 0\n}catch (interpretationException: InterpretationException) {\nLog.d(\njavaClass.simpleName,\n\"Formula interpretation for this specific Brick failed.\",\ninterpretationException\n)\n0\n}", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r477394809", "createdAt": "2020-08-26T15:34:30Z", "author": {"login": "Koell"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    var sprite: Sprite? = null\n+    var isForeverRepeat = false\n+    var repeatCount: Formula? = null\n+\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isRepeatActionInitialized) {\n+            isRepeatActionInitialized = true\n+            interpretRepeatCount()\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (repeatCountValue < 0) {\n+            repeatCountValue = 0\n+        }\n+        if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+            return true\n+        }\n+        if (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            action?.restart()\n+        }\n+        return false\n+    }\n+\n+    override fun restart() {\n+        isCurrentLoopInitialized = false\n+        isRepeatActionInitialized = false\n+        executedCount = 0\n+        super.restart()\n+    }\n+\n+    private fun interpretRepeatCount() {\n+        try {\n+            val interpretation = repeatCount?.interpretDouble(sprite) ?: 0.0\n+            repeatCountValue = interpretation.toInt()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzMzk2NA=="}, "originalCommit": {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3865, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}