{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MTc1MjA2", "number": 3635, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjoyOTo0N1rOEGU_DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTozOTowNlrOEH7gYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDcwNzMyOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatUntilAction.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjoyOTo0N1rOGlDdKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo0MToxOVrOGlJCyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwNzExMw==", "bodyText": "For readability, I'd suggest\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        repeatCondition?.interpretDouble(sprite)?.toInt() ?: 0 != 0\n          \n          \n            \n                        (repeatCondition?.interpretDouble(sprite)?.toInt() ?: 0) != 0", "url": "https://github.com/Catrobat/Catroid/pull/3635#discussion_r441507113", "createdAt": "2020-06-17T12:29:47Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatUntilAction.kt", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatUntilAction : RepeatAction() {\n+    var executedCount = 0\n+        private set\n+    var sprite: Sprite? = null\n+    var repeatCondition: Formula? = null\n+    private var isCurrentLoopInitialized = false\n+    private var currentTime = 0f\n+    private val isValidConditionFormula: Boolean\n+        get() {\n+            try {\n+                if (repeatCondition == null) {\n+                    return false\n+                }\n+                repeatCondition?.interpretDouble(sprite)\n+            } catch (interpretationException: InterpretationException) {\n+                Log.d(\n+                    javaClass.simpleName, \"Formula interpretation for this specific Brick failed.\",\n+                    interpretationException\n+                )\n+                return false\n+            }\n+            return true\n+        }\n+\n+    private val isConditionTrue: Boolean\n+        get() = try {\n+            repeatCondition?.interpretDouble(sprite)?.toInt() ?: 0 != 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5ODY2NQ==", "bodyText": "lint doesn't like this :(", "url": "https://github.com/Catrobat/Catroid/pull/3635#discussion_r441598665", "createdAt": "2020-06-17T14:41:19Z", "author": {"login": "Koell"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatUntilAction.kt", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatUntilAction : RepeatAction() {\n+    var executedCount = 0\n+        private set\n+    var sprite: Sprite? = null\n+    var repeatCondition: Formula? = null\n+    private var isCurrentLoopInitialized = false\n+    private var currentTime = 0f\n+    private val isValidConditionFormula: Boolean\n+        get() {\n+            try {\n+                if (repeatCondition == null) {\n+                    return false\n+                }\n+                repeatCondition?.interpretDouble(sprite)\n+            } catch (interpretationException: InterpretationException) {\n+                Log.d(\n+                    javaClass.simpleName, \"Formula interpretation for this specific Brick failed.\",\n+                    interpretationException\n+                )\n+                return false\n+            }\n+            return true\n+        }\n+\n+    private val isConditionTrue: Boolean\n+        get() = try {\n+            repeatCondition?.interpretDouble(sprite)?.toInt() ?: 0 != 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwNzExMw=="}, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDgyNTMxOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatUntilAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowMToxOVrOGlEnXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowMToxOVrOGlEnXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNjEwOQ==", "bodyText": "You could simplify this to\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (repeatCondition == null) {\n          \n          \n            \n                                return false\n          \n          \n            \n                            }\n          \n          \n            \n                            repeatCondition?.interpretDouble(sprite)\n          \n          \n            \n                            repeatCondition?.interpretDouble(sprite) ?: return false", "url": "https://github.com/Catrobat/Catroid/pull/3635#discussion_r441526109", "createdAt": "2020-06-17T13:01:19Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatUntilAction.kt", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatUntilAction : RepeatAction() {\n+    var executedCount = 0\n+        private set\n+    var sprite: Sprite? = null\n+    var repeatCondition: Formula? = null\n+    private var isCurrentLoopInitialized = false\n+    private var currentTime = 0f\n+    private val isValidConditionFormula: Boolean\n+        get() {\n+            try {\n+                if (repeatCondition == null) {\n+                    return false\n+                }\n+                repeatCondition?.interpretDouble(sprite)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDgzMjYwOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatUntilAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowMzowOFrOGlEsAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowMzowOFrOGlEsAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNzI5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (action != null) {\n          \n          \n            \n                            action.restart()\n          \n          \n            \n                        }\n          \n          \n            \n                        action?.restart()", "url": "https://github.com/Catrobat/Catroid/pull/3635#discussion_r441527296", "createdAt": "2020-06-17T13:03:08Z", "author": {"login": "lweitzendorf"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatUntilAction.kt", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatUntilAction : RepeatAction() {\n+    var executedCount = 0\n+        private set\n+    var sprite: Sprite? = null\n+    var repeatCondition: Formula? = null\n+    private var isCurrentLoopInitialized = false\n+    private var currentTime = 0f\n+    private val isValidConditionFormula: Boolean\n+        get() {\n+            try {\n+                if (repeatCondition == null) {\n+                    return false\n+                }\n+                repeatCondition?.interpretDouble(sprite)\n+            } catch (interpretationException: InterpretationException) {\n+                Log.d(\n+                    javaClass.simpleName, \"Formula interpretation for this specific Brick failed.\",\n+                    interpretationException\n+                )\n+                return false\n+            }\n+            return true\n+        }\n+\n+    private val isConditionTrue: Boolean\n+        get() = try {\n+            repeatCondition?.interpretDouble(sprite)?.toInt() ?: 0 != 0\n+        } catch (interpretationException: InterpretationException) {\n+            Log.d(\n+                javaClass.simpleName, \"Formula interpretation for this specific Brick failed.\",\n+                interpretationException\n+            )\n+            true\n+        }\n+\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isValidConditionFormula) {\n+            return true\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            if (isConditionTrue) {\n+                return true\n+            }\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (isConditionTrue) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            if (action != null) {\n+                action.restart()\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzUwNDMyOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatUntilAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTozOTowNlrOGnlP0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTozOTowNlrOGnlP0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE1NzkwNA==", "bodyText": "PLEASE-FIX: refactor the boolean flags to functions, since from line 68 till here, the code implies that the value of isConditionTrue might magically change.  Please, only use get()/set() for small code to verify input etc..\nhttps://kotlinlang.org/docs/reference/properties.html#backing-fields", "url": "https://github.com/Catrobat/Catroid/pull/3635#discussion_r444157904", "createdAt": "2020-06-23T11:39:06Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatUntilAction.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatUntilAction : RepeatAction() {\n+    var executedCount = 0\n+        private set\n+    var sprite: Sprite? = null\n+    var repeatCondition: Formula? = null\n+    private var isCurrentLoopInitialized = false\n+    private var currentTime = 0f\n+    private val isValidConditionFormula: Boolean\n+        get() {\n+            try {\n+                repeatCondition?.interpretDouble(sprite) ?: return false\n+            } catch (interpretationException: InterpretationException) {\n+                Log.d(\n+                    javaClass.simpleName, \"Formula interpretation for this specific Brick failed.\",\n+                    interpretationException\n+                )\n+                return false\n+            }\n+            return true\n+        }\n+\n+    private val isConditionTrue: Boolean\n+        get() = try {\n+            repeatCondition?.interpretDouble(sprite) != 0.0\n+        } catch (interpretationException: InterpretationException) {\n+            Log.d(\n+                javaClass.simpleName, \"Formula interpretation for this specific Brick failed.\",\n+                interpretationException\n+            )\n+            true\n+        }\n+\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isValidConditionFormula) {\n+            return true\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            if (isConditionTrue) {\n+                return true\n+            }\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (isConditionTrue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3851, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}