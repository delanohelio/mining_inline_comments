{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MDgzOTM1", "number": 3866, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMToyNjozM1rOE5-P6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxNzozODoxMVrOFM9CSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjI0MTY5OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMToyNjozM1rOH0wcrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMToyNzoyM1rOH0webg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4MTc3NA==", "bodyText": "please change in line 80&83 the userList!! to userList?\nif you don't check for NPE don't enforce them, with the elvis-operator(?) kotlin ignores the function when it is NULL", "url": "https://github.com/Catrobat/Catroid/pull/3866#discussion_r525081774", "createdAt": "2020-11-17T11:26:33Z", "author": {"login": "Koell"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+import com.opencsv.CSVParserBuilder\n+import com.opencsv.CSVReaderBuilder\n+import com.opencsv.exceptions.CsvException\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserList\n+import java.io.IOException\n+import java.io.StringReader\n+import java.util.regex.Pattern\n+\n+class StoreCSVIntoUserListAction : TemporalAction() {\n+\n+    private var sprite: Sprite? = null\n+\n+    private var formulaColumnToExtract: Formula? = null\n+    private var formulaCSVData: Formula? = null\n+\n+    private var userList: UserList? = null\n+\n+    override fun update(percent: Float) {\n+        userList ?: return\n+\n+        val csvData: String\n+        try {\n+            csvData = formulaCSVData?.interpretString(sprite) ?: \"\"\n+\n+            var columnToExtract: Int\n+            columnToExtract = formulaColumnToExtract?.interpretInteger(sprite) ?: 0\n+\n+            columnToExtract--\n+\n+            var separator = ','\n+            val pattern = Pattern.compile(\"^(?:\\\".*?\\\"|[^,;]*?)([,;])\")\n+            val matcher = pattern.matcher(csvData)\n+            if (matcher.find()) {\n+                separator = matcher.group(1)[0]\n+            }\n+            if (separator != ',' && separator != ';') {\n+                separator = ','\n+            }\n+\n+            userList?.reset()\n+            var resetList = true\n+\n+            val parser = CSVParserBuilder().withSeparator(separator).build()\n+            val reader = CSVReaderBuilder(StringReader(csvData)).withCSVParser(parser)\n+                .build()\n+\n+            val allRows = reader.readAll()\n+            if (allRows.size > 0 && columnToExtract >= 0) {\n+                for (row in allRows) {\n+                    if (row.size <= columnToExtract) {\n+                        userList!!.addListItem(\"\")\n+                    } else {\n+                        resetList = false\n+                        userList!!.addListItem(row[columnToExtract])\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99182623c8f3abbfff51c5f5cab5ace6ccd484a1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4MjIyMg==", "bodyText": "the rest of the conversion was fine", "url": "https://github.com/Catrobat/Catroid/pull/3866#discussion_r525082222", "createdAt": "2020-11-17T11:27:23Z", "author": {"login": "Koell"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+import com.opencsv.CSVParserBuilder\n+import com.opencsv.CSVReaderBuilder\n+import com.opencsv.exceptions.CsvException\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserList\n+import java.io.IOException\n+import java.io.StringReader\n+import java.util.regex.Pattern\n+\n+class StoreCSVIntoUserListAction : TemporalAction() {\n+\n+    private var sprite: Sprite? = null\n+\n+    private var formulaColumnToExtract: Formula? = null\n+    private var formulaCSVData: Formula? = null\n+\n+    private var userList: UserList? = null\n+\n+    override fun update(percent: Float) {\n+        userList ?: return\n+\n+        val csvData: String\n+        try {\n+            csvData = formulaCSVData?.interpretString(sprite) ?: \"\"\n+\n+            var columnToExtract: Int\n+            columnToExtract = formulaColumnToExtract?.interpretInteger(sprite) ?: 0\n+\n+            columnToExtract--\n+\n+            var separator = ','\n+            val pattern = Pattern.compile(\"^(?:\\\".*?\\\"|[^,;]*?)([,;])\")\n+            val matcher = pattern.matcher(csvData)\n+            if (matcher.find()) {\n+                separator = matcher.group(1)[0]\n+            }\n+            if (separator != ',' && separator != ';') {\n+                separator = ','\n+            }\n+\n+            userList?.reset()\n+            var resetList = true\n+\n+            val parser = CSVParserBuilder().withSeparator(separator).build()\n+            val reader = CSVReaderBuilder(StringReader(csvData)).withCSVParser(parser)\n+                .build()\n+\n+            val allRows = reader.readAll()\n+            if (allRows.size > 0 && columnToExtract >= 0) {\n+                for (row in allRows) {\n+                    if (row.size <= columnToExtract) {\n+                        userList!!.addListItem(\"\")\n+                    } else {\n+                        resetList = false\n+                        userList!!.addListItem(row[columnToExtract])\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4MTc3NA=="}, "originalCommit": {"oid": "99182623c8f3abbfff51c5f5cab5ace6ccd484a1"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTIxODk0OnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxNjo0NDo0MVrOIQ5o5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxNjo0NDo0MVrOIQ5o5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU5MjQ4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var columnToExtract = interpretColumnToExtract(formulaColumnToExtract)\n          \n          \n            \n            \n          \n          \n            \n                    columnToExtract--\n          \n          \n            \n                    var columnToExtract = interpretColumnToExtract(formulaColumnToExtract) - 1", "url": "https://github.com/Catrobat/Catroid/pull/3866#discussion_r554592484", "createdAt": "2021-01-10T16:44:41Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2021 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+import com.opencsv.CSVParserBuilder\n+import com.opencsv.CSVReader\n+import com.opencsv.CSVReaderBuilder\n+import com.opencsv.exceptions.CsvException\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserList\n+import java.io.IOException\n+import java.io.StringReader\n+import java.util.regex.Pattern\n+\n+class StoreCSVIntoUserListAction : TemporalAction() {\n+\n+    private var sprite: Sprite? = null\n+\n+    private var formulaColumnToExtract: Formula? = null\n+    private var formulaCSVData: Formula? = null\n+\n+    private var userList: UserList? = null\n+\n+    override fun update(percent: Float) {\n+        userList ?: return\n+\n+        userList?.reset()\n+\n+        val csvData = interpretCSVData(formulaCSVData)\n+\n+        var columnToExtract = interpretColumnToExtract(formulaColumnToExtract)\n+\n+        columnToExtract--", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "580bf208b8dc1e8f6adcdac1a77976b059b0bf44"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTIyNjUwOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxNjo1MjoyNVrOIQ5shA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxNjo1MjoyNVrOIQ5shA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU5MzQxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                fun setUserList(userVariable: UserList) {\n          \n          \n            \n                    userList = userVariable\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                fun setFormulaColumnToExtract(formulaColumnToExtract: Formula) {\n          \n          \n            \n                    this.formulaColumnToExtract = formulaColumnToExtract\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                fun setFormulaCSVData(formulaCSVData: Formula) {\n          \n          \n            \n                    this.formulaCSVData = formulaCSVData\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                fun setSprite(sprite: Sprite) {\n          \n          \n            \n                    this.sprite = sprite\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nMake member-vars public instead, please. (Kotlin generates default getter and setter)", "url": "https://github.com/Catrobat/Catroid/pull/3866#discussion_r554593412", "createdAt": "2021-01-10T16:52:25Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2021 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+import com.opencsv.CSVParserBuilder\n+import com.opencsv.CSVReader\n+import com.opencsv.CSVReaderBuilder\n+import com.opencsv.exceptions.CsvException\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserList\n+import java.io.IOException\n+import java.io.StringReader\n+import java.util.regex.Pattern\n+\n+class StoreCSVIntoUserListAction : TemporalAction() {\n+\n+    private var sprite: Sprite? = null\n+\n+    private var formulaColumnToExtract: Formula? = null\n+    private var formulaCSVData: Formula? = null\n+\n+    private var userList: UserList? = null\n+\n+    override fun update(percent: Float) {\n+        userList ?: return\n+\n+        userList?.reset()\n+\n+        val csvData = interpretCSVData(formulaCSVData)\n+\n+        var columnToExtract = interpretColumnToExtract(formulaColumnToExtract)\n+\n+        columnToExtract--\n+\n+        val separator = extractOrReplaceSeperator(csvData)\n+\n+        val csvParser = CSVParserBuilder().withSeparator(separator).build()\n+        val csvReader = CSVReaderBuilder(StringReader(csvData)).withCSVParser(csvParser)\n+            .build()\n+\n+        val allRows = readCSVIntoList(csvReader)\n+\n+        if (allRows.size > 0 && columnToExtract >= 0) {\n+            insertColumnValuesIntoUserList(allRows, columnToExtract)\n+        }\n+    }\n+\n+    fun interpretCSVData(formulaCSVData: Formula?): String {\n+        return try {\n+            formulaCSVData?.interpretString(sprite) ?: \"\"\n+        } catch (exception: InterpretationException) {\n+            Log.d(javaClass.simpleName, \"Couldn't interpret formula\", exception)\n+            \"\"\n+        }\n+    }\n+\n+    fun interpretColumnToExtract(formulaColumnToExtract: Formula?): Int {\n+        return try {\n+            formulaColumnToExtract?.interpretInteger(sprite) ?: 0\n+        } catch (exception: InterpretationException) {\n+            Log.d(javaClass.simpleName, \"Couldn't interpret formula\", exception)\n+            0\n+        }\n+    }\n+\n+    fun extractOrReplaceSeperator(csvData: String): Char {\n+        var separator = ','\n+        val pattern = Pattern.compile(\"^(?:\\\".*?\\\"|[^,;]*?)([,;])\")\n+        val matcher = pattern.matcher(csvData)\n+        if (matcher.find()) {\n+            separator = matcher.group(1)[0]\n+        }\n+        if (separator != ',' && separator != ';') {\n+            separator = ','\n+        }\n+        return separator\n+    }\n+\n+    fun readCSVIntoList(csvReader: CSVReader): List<Array<String>> {\n+        return try {\n+            csvReader.readAll()\n+        } catch (exception: IOException) {\n+            Log.e(javaClass.simpleName, \"Couldn't read csv data\", exception)\n+            emptyList()\n+        } catch (exception: CsvException) {\n+            Log.e(javaClass.simpleName, \"Couldn't validate csv data\", exception)\n+            emptyList()\n+        }\n+    }\n+\n+    fun insertColumnValuesIntoUserList(allRows: List<Array<String>>, columnToExtract: Int) {\n+        var resetList = true\n+        for (row in allRows) {\n+            if (row.size <= columnToExtract) {\n+                userList?.addListItem(\"\")\n+            } else {\n+                resetList = false\n+                userList?.addListItem(row[columnToExtract])\n+            }\n+        }\n+        if (resetList) {\n+            userList?.reset()\n+        }\n+    }\n+\n+    fun setUserList(userVariable: UserList) {\n+        userList = userVariable\n+    }\n+\n+    fun setFormulaColumnToExtract(formulaColumnToExtract: Formula) {\n+        this.formulaColumnToExtract = formulaColumnToExtract\n+    }\n+\n+    fun setFormulaCSVData(formulaCSVData: Formula) {\n+        this.formulaCSVData = formulaCSVData\n+    }\n+\n+    fun setSprite(sprite: Sprite) {\n+        this.sprite = sprite\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "580bf208b8dc1e8f6adcdac1a77976b059b0bf44"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTIzMjYyOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxNjo1ODowOFrOIQ5vmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxNjo1ODowOFrOIQ5vmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU5NDIwMQ==", "bodyText": "Very good \ud83d\udc4d", "url": "https://github.com/Catrobat/Catroid/pull/3866#discussion_r554594201", "createdAt": "2021-01-10T16:58:08Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2021 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+import com.opencsv.CSVParserBuilder\n+import com.opencsv.CSVReader\n+import com.opencsv.CSVReaderBuilder\n+import com.opencsv.exceptions.CsvException\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserList\n+import java.io.IOException\n+import java.io.StringReader\n+import java.util.regex.Pattern\n+\n+class StoreCSVIntoUserListAction : TemporalAction() {\n+\n+    private var sprite: Sprite? = null\n+\n+    private var formulaColumnToExtract: Formula? = null\n+    private var formulaCSVData: Formula? = null\n+\n+    private var userList: UserList? = null\n+\n+    override fun update(percent: Float) {\n+        userList ?: return\n+\n+        userList?.reset()\n+\n+        val csvData = interpretCSVData(formulaCSVData)\n+\n+        var columnToExtract = interpretColumnToExtract(formulaColumnToExtract)\n+\n+        columnToExtract--\n+\n+        val separator = extractOrReplaceSeperator(csvData)\n+\n+        val csvParser = CSVParserBuilder().withSeparator(separator).build()\n+        val csvReader = CSVReaderBuilder(StringReader(csvData)).withCSVParser(csvParser)\n+            .build()\n+\n+        val allRows = readCSVIntoList(csvReader)\n+\n+        if (allRows.size > 0 && columnToExtract >= 0) {\n+            insertColumnValuesIntoUserList(allRows, columnToExtract)\n+        }\n+    }\n+\n+    fun interpretCSVData(formulaCSVData: Formula?): String {\n+        return try {\n+            formulaCSVData?.interpretString(sprite) ?: \"\"\n+        } catch (exception: InterpretationException) {\n+            Log.d(javaClass.simpleName, \"Couldn't interpret formula\", exception)\n+            \"\"\n+        }\n+    }\n+\n+    fun interpretColumnToExtract(formulaColumnToExtract: Formula?): Int {\n+        return try {\n+            formulaColumnToExtract?.interpretInteger(sprite) ?: 0\n+        } catch (exception: InterpretationException) {\n+            Log.d(javaClass.simpleName, \"Couldn't interpret formula\", exception)\n+            0\n+        }\n+    }\n+\n+    fun extractOrReplaceSeperator(csvData: String): Char {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "580bf208b8dc1e8f6adcdac1a77976b059b0bf44"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTI3MjQyOnYy", "diffSide": "RIGHT", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxNzozODoxMVrOIQ6Dcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxNzozODoxMVrOIQ6Dcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU5OTI4Mg==", "bodyText": "Well done!\nPLEASE EXPLAIN: Does the changed behaviour affect the program? (After any Exception you return a default value and also the UserList reset is missing)\nIf this is not intended, I would suggest returning null and using \"?: return\" in the update method.\nPLEASE ADD (if missing): a test for its original behaviour.", "url": "https://github.com/Catrobat/Catroid/pull/3866#discussion_r554599282", "createdAt": "2021-01-10T17:38:11Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2021 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+import com.opencsv.CSVParserBuilder\n+import com.opencsv.CSVReader\n+import com.opencsv.CSVReaderBuilder\n+import com.opencsv.exceptions.CsvException\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserList\n+import java.io.IOException\n+import java.io.StringReader\n+import java.util.regex.Pattern\n+\n+class StoreCSVIntoUserListAction : TemporalAction() {\n+\n+    private var sprite: Sprite? = null\n+\n+    private var formulaColumnToExtract: Formula? = null\n+    private var formulaCSVData: Formula? = null\n+\n+    private var userList: UserList? = null\n+\n+    override fun update(percent: Float) {\n+        userList ?: return\n+\n+        userList?.reset()\n+\n+        val csvData = interpretCSVData(formulaCSVData)\n+\n+        var columnToExtract = interpretColumnToExtract(formulaColumnToExtract)\n+\n+        columnToExtract--\n+\n+        val separator = extractOrReplaceSeperator(csvData)\n+\n+        val csvParser = CSVParserBuilder().withSeparator(separator).build()\n+        val csvReader = CSVReaderBuilder(StringReader(csvData)).withCSVParser(csvParser)\n+            .build()\n+\n+        val allRows = readCSVIntoList(csvReader)\n+\n+        if (allRows.size > 0 && columnToExtract >= 0) {\n+            insertColumnValuesIntoUserList(allRows, columnToExtract)\n+        }\n+    }\n+\n+    fun interpretCSVData(formulaCSVData: Formula?): String {\n+        return try {\n+            formulaCSVData?.interpretString(sprite) ?: \"\"\n+        } catch (exception: InterpretationException) {\n+            Log.d(javaClass.simpleName, \"Couldn't interpret formula\", exception)\n+            \"\"\n+        }\n+    }\n+\n+    fun interpretColumnToExtract(formulaColumnToExtract: Formula?): Int {\n+        return try {\n+            formulaColumnToExtract?.interpretInteger(sprite) ?: 0\n+        } catch (exception: InterpretationException) {\n+            Log.d(javaClass.simpleName, \"Couldn't interpret formula\", exception)\n+            0\n+        }\n+    }\n+\n+    fun extractOrReplaceSeperator(csvData: String): Char {\n+        var separator = ','\n+        val pattern = Pattern.compile(\"^(?:\\\".*?\\\"|[^,;]*?)([,;])\")\n+        val matcher = pattern.matcher(csvData)\n+        if (matcher.find()) {\n+            separator = matcher.group(1)[0]\n+        }\n+        if (separator != ',' && separator != ';') {\n+            separator = ','\n+        }\n+        return separator\n+    }\n+\n+    fun readCSVIntoList(csvReader: CSVReader): List<Array<String>> {\n+        return try {\n+            csvReader.readAll()\n+        } catch (exception: IOException) {\n+            Log.e(javaClass.simpleName, \"Couldn't read csv data\", exception)\n+            emptyList()\n+        } catch (exception: CsvException) {\n+            Log.e(javaClass.simpleName, \"Couldn't validate csv data\", exception)\n+            emptyList()\n+        }\n+    }\n+\n+    fun insertColumnValuesIntoUserList(allRows: List<Array<String>>, columnToExtract: Int) {\n+        var resetList = true\n+        for (row in allRows) {\n+            if (row.size <= columnToExtract) {\n+                userList?.addListItem(\"\")\n+            } else {\n+                resetList = false\n+                userList?.addListItem(row[columnToExtract])\n+            }\n+        }\n+        if (resetList) {\n+            userList?.reset()\n+        }\n+    }\n+\n+    fun setUserList(userVariable: UserList) {\n+        userList = userVariable\n+    }\n+\n+    fun setFormulaColumnToExtract(formulaColumnToExtract: Formula) {\n+        this.formulaColumnToExtract = formulaColumnToExtract\n+    }\n+\n+    fun setFormulaCSVData(formulaCSVData: Formula) {\n+        this.formulaCSVData = formulaCSVData\n+    }\n+\n+    fun setSprite(sprite: Sprite) {\n+        this.sprite = sprite\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "580bf208b8dc1e8f6adcdac1a77976b059b0bf44"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3685, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}