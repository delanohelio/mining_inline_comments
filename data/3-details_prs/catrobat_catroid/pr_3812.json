{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MzIxNjQ5", "number": 3812, "title": "Catroid 779 JSON Extractor Functionality", "bodyText": "https://jira.catrob.at/browse/CATROID-779\nCATROID-779 - JSON Extractor Functionality\n\nADD Regular expression parser\nADD Test for Regular expression parser\n\nYour checklist for this pull request\nPlease review the contributing guidelines and wiki pages of this repository.\n\n Include the name of the Jira ticket in the PR\u2019s title\n Include a summary of the changes plus the relevant context\n Choose the proper base branch (develop)\n Confirm that the changes follow the project\u2019s coding guidelines\n Verify that the changes generate no compiler or linter warnings\n Perform a self-review of the changes\n Verify to commit no other files than the intentionally changed ones\n Include reasonable and readable tests verifying the added or changed behavior\n Confirm that new and existing unit tests pass locally\n Check that the commits\u2019 message style matches the project\u2019s guideline\n Stick to the project\u2019s gitflow workflow\n Verify that your changes do not have any conflicts with the base branch\n After the PR, verify that all CI checks have passed\n Post a message in the catroid-stage or catroid-ide Slack channel and ask for a code reviewer", "createdAt": "2020-09-18T13:39:08Z", "url": "https://github.com/Catrobat/Catroid/pull/3812", "merged": true, "mergeCommit": {"oid": "f1a0a12fcc0e7df88902528cc97320c502686dae"}, "closed": true, "closedAt": "2020-10-10T16:34:41Z", "author": {"login": "artjom404"}, "timelineItems": {"totalCount": 60, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKEqwcAH2gAyNDg5MzIxNjQ5OjNkMmE2YjUzOWM2N2VjZmIwMGQxYmRkZjM1YWJhY2Q0OWE0Y2NhOWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdRM9QZgH2gAyNDg5MzIxNjQ5OmRjYjI4Zjk2ZGM2M2NmZjFlMzBkNWM1ZjlmNjZiZmUwZWJiN2Q0ZDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3d2a6b539c67ecfb00d1bddf35abacd49a4cca9e", "author": {"user": {"login": "UneclStivun", "name": null}}, "url": "https://github.com/Catrobat/Catroid/commit/3d2a6b539c67ecfb00d1bddf35abacd49a4cca9e", "committedDate": "2020-09-18T12:22:48Z", "message": "CATROID-762 - Regex. Assistant Output\n\n-add Regex creator from given keyword in html text\n-add Unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e473a185a17be96b2dfdc1462c6e12b82ab37137", "author": {"user": {"login": "UneclStivun", "name": null}}, "url": "https://github.com/Catrobat/Catroid/commit/e473a185a17be96b2dfdc1462c6e12b82ab37137", "committedDate": "2020-09-18T12:30:29Z", "message": "CATROID-763 - Result of generated Regex is insert into first parameter\n\n- HtmlExtractorDialogTest: UI Test for inserted text into first parameter\n- HtmlExtractorDialog: String from keyword is insert into first parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c721204f0ba38fbbc5392bad5c51d6de64b9158e", "author": {"user": {"login": "UneclStivun", "name": null}}, "url": "https://github.com/Catrobat/Catroid/commit/c721204f0ba38fbbc5392bad5c51d6de64b9158e", "committedDate": "2020-09-18T12:37:08Z", "message": "Merge branch 'develop' into Catroid-763"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ce1b5d5c423d63b4fb77dc8c29ad68a017d4015", "author": {"user": {"login": "M0d0s", "name": null}}, "url": "https://github.com/Catrobat/Catroid/commit/2ce1b5d5c423d63b4fb77dc8c29ad68a017d4015", "committedDate": "2020-09-18T13:39:43Z", "message": "CATROID-764 - Assistant - Smart assistant button in function list (Id: 1.3.1.1)\n\n-add Unit-Tests\n-add functionality to check if selection is in part of regular expression function\n-add functionality to select correct parameter on assistant button click\n-change behavior of assistant button in function list when to add regular expression"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNDc0MDI5", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-491474029", "createdAt": "2020-09-18T13:39:59Z", "commit": {"oid": "3d798d117c8bd2c7eacfc38e0dbc94d2f8874e37"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMDQxNDc1", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-492041475", "createdAt": "2020-09-19T18:18:49Z", "commit": {"oid": "3d798d117c8bd2c7eacfc38e0dbc94d2f8874e37"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxODoxODo0OVrOHUtjSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxODoxODo0OVrOHUtjSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ3OTg4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\": (?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";\n          \n          \n            \n            \t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*(?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";\n          \n      \n    \n    \n  \n\nSpaces may or may not occur before and after the \":\", see https://www.json.org/json-en.html --- case in point is our default URL for the \"Send web request\" brick which is https://catrob.at/joke which uses no spaces and looks for instance like this:\n{\"id\":378,\"type\":\"programming\",\"setup\":\"What's the best part about TCP jokes?\",\"punchline\":\"I get to keep telling them until you get them.\"}\nor https://geocode.xyz/api that returns json with spaces before the \":\", e.g.,\n{   \"statename\" : {},   \"distance\" : \"0.000\",   \"elevation\" : \"20\", \"state\" : \"UK\",   \"latt\" : \"51.50354\",   \"city\" : \"LONDON\",   \"prov\" : \"UK\",   \"geocode\" : \"LONDON-MCRXA\",   \"geonumber\" : \"3154700960970\", \"country\" : \"United Kingdom\",   \"stnumber\" : \"10\",   \"staddress\" : \"DOWNING STREET\",   \"inlatt\" : \"51.50354\",   \"alt\" : {      \"loc\" : { \"staddress\" : \"DOWNING STREET\",         \"stnumber\" : \"10\", \"postal\" : \"SW1A 2AA\",         \"latt\" : \"51.50354\",         \"city\" : \"LONDON\",         \"prov\" : \"UK\",         \"longt\" : \"-0.12768\", \"class\" : {}      }   },   \"timezone\" : \"Europe/London\", \"region\" : \"Greater London, England\",   \"postal\" : \"SW1A 2AA\",   \"longt\" : \"-0.12768\",   \"remaining_credits\" : {},   \"confidence\" : \"1\", \"inlongt\" : \"-0.12768\",   \"class\" : {},   \"altgeocode\" : \"SYNERGY-MCRXA\"}", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r491479881", "createdAt": "2020-09-19T18:18:49Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\": (?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d798d117c8bd2c7eacfc38e0dbc94d2f8874e37"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c62e866598510adb92d6f80bbc31007d5816f0b3", "author": {"user": {"login": "artjom404", "name": "Artjom Arustamov"}}, "url": "https://github.com/Catrobat/Catroid/commit/c62e866598510adb92d6f80bbc31007d5816f0b3", "committedDate": "2020-09-23T13:21:03Z", "message": "CATROID-754 - JSON extractor dialog\n\n- implements CATROID-753\n- JsonExtractorDialog.java: Creation of new class for JSON extractor\n- strings.xml: Creation of new string for JSON extractor\n- dialog_regex_json_extractor.xml: Creation of new layout for JSON extractor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "551773c624aaa99cfb5ecd2478e70844f839139f", "author": {"user": {"login": "artjom404", "name": "Artjom Arustamov"}}, "url": "https://github.com/Catrobat/Catroid/commit/551773c624aaa99cfb5ecd2478e70844f839139f", "committedDate": "2020-09-23T13:21:03Z", "message": "CATROID-779 - JSON Extractor Functionality\n\n- ADD Regular expression parser\n- ADD Test for Regular expression parser"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d798d117c8bd2c7eacfc38e0dbc94d2f8874e37", "author": {"user": {"login": "artjom404", "name": "Artjom Arustamov"}}, "url": "https://github.com/Catrobat/Catroid/commit/3d798d117c8bd2c7eacfc38e0dbc94d2f8874e37", "committedDate": "2020-09-18T13:31:26Z", "message": "CATROID-779 - JSON Extractor Functionality\n\n- ADD Regular expression parser\n- ADD Test for Regular expression parser"}, "afterCommit": {"oid": "551773c624aaa99cfb5ecd2478e70844f839139f", "author": {"user": {"login": "artjom404", "name": "Artjom Arustamov"}}, "url": "https://github.com/Catrobat/Catroid/commit/551773c624aaa99cfb5ecd2478e70844f839139f", "committedDate": "2020-09-23T13:21:03Z", "message": "CATROID-779 - JSON Extractor Functionality\n\n- ADD Regular expression parser\n- ADD Test for Regular expression parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4777dbc4f3df21077ae89e1d0e3de01360ad3d2", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/c4777dbc4f3df21077ae89e1d0e3de01360ad3d2", "committedDate": "2020-10-09T18:19:46Z", "message": "Optional spaces before and after colon character."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c937bd62da940e8b8bc4d6283659f2aec694f9ca", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/c937bd62da940e8b8bc4d6283659f2aec694f9ca", "committedDate": "2020-10-09T18:33:09Z", "message": "Merge branch 'develop' into CATROID-779"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1OTEzNDg4", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-505913488", "createdAt": "2020-10-09T18:46:57Z", "commit": {"oid": "c937bd62da940e8b8bc4d6283659f2aec694f9ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODo0Njo1N1rOHfVEXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODo0Njo1N1rOHfVEXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxMzA4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t  listOfFeatures.add(new HtmlExtractorDialog(fragmentManager));\n          \n          \n            \n            \t\tlistOfFeatures.add(new HtmlExtractorDialog(fragmentManager));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502613085", "createdAt": "2020-10-09T18:46:57Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/ui/dialogs/regexassistant/RegularExpressionAssistantDialog.java", "diffHunk": "@@ -79,10 +79,8 @@ public void onClick(DialogInterface dialog, int indexInList) {\n \n \tprivate void createListOfFeatures() {\n \t\tlistOfFeatures = new ArrayList<>();\n-\t\tif (BuildConfig.FEATURE_REGULAR_EXPRESSION_ASSISTANT_ENABLED) {\n-\t\t\tlistOfFeatures.add(new HtmlExtractorDialog(fragmentManager));\n-\t\t\tlistOfFeatures.add(new JsonExtractorDialog());\n-\t\t}\n+\t  listOfFeatures.add(new HtmlExtractorDialog(fragmentManager));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c937bd62da940e8b8bc4d6283659f2aec694f9ca"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5c0a8fd199caef64c37d2df2e13555a1f1d2391", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/e5c0a8fd199caef64c37d2df2e13555a1f1d2391", "committedDate": "2020-10-09T18:47:35Z", "message": "Corrected indentation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1OTE2NTAy", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-505916502", "createdAt": "2020-10-09T18:51:52Z", "commit": {"oid": "e5c0a8fd199caef64c37d2df2e13555a1f1d2391"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25563a6cc37f529e6dc77232a952ec02b39591f2", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/25563a6cc37f529e6dc77232a952ec02b39591f2", "committedDate": "2020-10-09T18:57:48Z", "message": "Eliminate regex feature flag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "125e6ed1c96594623f79d8d43ac97ef8f619eada", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/125e6ed1c96594623f79d8d43ac97ef8f619eada", "committedDate": "2020-10-09T19:22:17Z", "message": "Eliminate static analysis warning on CollapsibleIfStatements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/ef80d93ecd224852ae35e018d3419829693f5f75", "committedDate": "2020-10-09T19:51:48Z", "message": "No feature flag for regex anymore."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDQ2MTAy", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506046102", "createdAt": "2020-10-10T00:28:33Z", "commit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDoyODozM1rOHfbqwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDoyODozM1rOHfbqwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTIxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*(?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";\n          \n          \n            \n            \t\treturn \"(?x) # with comments & spaces ignored\\n\"\n          \n          \n            \n            \t\t\t+ \"\\\"\" + keyword + \"\\\" \\\\s* : \\\\s* \\\"? # find keyword\\n\"\n          \n          \n            \n            \t\t\t+ \"( # start capturing, see https://www.json.org/json-en.html :\\n\"\n          \n          \n            \n            \t\t\t+ \"(?<=\\\") (\\\\\\\\\\\"|[^\\\"])* (?=\\\") # text\\n\"\n          \n          \n            \n            \t\t\t+ \"| ((?<!\\\") # other cases:\\n\"\n          \n          \n            \n            \t\t\t+ \"  [+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)? # numbers\\n\"\n          \n          \n            \n            \t\t\t+ \"| ( true | false | null ) # logical values\\n\"\n          \n          \n            \n            \t\t\t+ \"| \\\\{ [^{]* \\\\} # un-nested object\\n\"\n          \n          \n            \n            \t\t\t+ \"| \\\\[ [^\\\\[]* \\\\] # un-nested array\\n\"\n          \n          \n            \n            \t\t\t+ \"(?!\\\") ) # end of other cases\\n\"\n          \n          \n            \n            \t\t\t+ \")\\\"? # end of captured return value\\n\" \n          \n          \n            \n            \t\t\t+ \"(?=\\\\s*[,\\\\]}]) # correct ending of json\";\n          \n      \n    \n    \n  \n\nSimplify start and end, but also allow more of the cases as listed in https://www.json.org/json-en.html\nResults in the following regex expression, if the keyword is for instance keyword:\n(?x) # with comments & spaces ignored\n\"keyword\" \\s* : \\s* \"? # find keyword\n( # start capturing, see https://www.json.org/json-en.html :\n(?<=\") (\\\\\"|[^\"])* (?=\") # text\n| ((?<!\") # other cases:\n  [+-]?(0|[1-9]\\d*)(\\.\\d+)?([eE][+-]?\\d+)? # numbers\n| ( true | false | null ) # logical values\n| \\{ [^{]* \\} # un-nested object\n| \\[ [^\\[]* \\] # un-nested array\n(?!\") ) # end of other cases\n)\"? # end of captured return value\n(?=\\s*[,\\]}]) # correct ending of json", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502721217", "createdAt": "2020-10-10T00:28:33Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*(?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDYwMjA2", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506060206", "createdAt": "2020-10-10T03:06:08Z", "commit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzowNjowOFrOHfcstg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzowNjowOFrOHfcstg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczODEwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"size\\\": 36,\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502738102", "createdAt": "2020-10-10T03:06:08Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDYwMzE1", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506060315", "createdAt": "2020-10-10T03:07:58Z", "commit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzowNzo1OFrOHfctLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzowNzo1OFrOHfctLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczODIyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"36\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"-36.45e-45\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502738223", "createdAt": "2020-10-10T03:07:58Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"36\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDYwNDQ5", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506060449", "createdAt": "2020-10-10T03:10:07Z", "commit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzoxMDowN1rOHfct0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzoxMDowN1rOHfct0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczODM4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n          \n      \n    \n    \n  \n\nThis is the second match, but the first match, 250 higher up, should be the one returned.", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502738387", "createdAt": "2020-10-10T03:10:07Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDYxMzQ2", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506061346", "createdAt": "2020-10-10T03:24:23Z", "commit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzoyNDoyM1rOHfcygw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzoyNDoyM1rOHfcygw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczOTU4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"    }\\n\"\n          \n          \n            \n            \t\t\t+ \"    }\\n\"\n          \n          \n            \n            \t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n          \n          \n            \n            \t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t+ \"            }\\n\"\n          \n          \n            \n            \t\t\t+ \"    }\\n\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502739587", "createdAt": "2020-10-10T03:24:23Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDYxODU3", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506061857", "createdAt": "2020-10-10T03:31:46Z", "commit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzozMTo0NlrOHfc1JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzozMTo0NlrOHfc1JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0MDI2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t}\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \t@Test\n          \n          \n            \n            \tpublic void testParserExpressionLogic() {\n          \n          \n            \n            \t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n          \n          \n            \n            \t\tMatcher matcher = regexPattern.matcher(jsonExample);\n          \n          \n            \n            \t\tmatcher.find();\n          \n          \n            \n            \t\tassertEquals(\"true\", matcher.group(1));\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \t@Test\n          \n          \n            \n            \tpublic void testParserExpressionArray() {\n          \n          \n            \n            \t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n          \n          \n            \n            \t\tMatcher matcher = regexPattern.matcher(jsonExample);\n          \n          \n            \n            \t\tmatcher.find();\n          \n          \n            \n            \t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \t@Test\n          \n          \n            \n            \tpublic void testParserExpressionObject() {\n          \n          \n            \n            \t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n          \n          \n            \n            \t\tMatcher matcher = regexPattern.matcher(jsonExample);\n          \n          \n            \n            \t\tmatcher.find();\n          \n          \n            \n            \t\tassertEquals(\n          \n          \n            \n            \t\t\t\"{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t+ \"            }\", matcher.group(1));\n          \n          \n            \n            \t}", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502740260", "createdAt": "2020-10-10T03:31:46Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"36\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1ae5e2d46ea0b34d75d86315750071045940973", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/e1ae5e2d46ea0b34d75d86315750071045940973", "committedDate": "2020-10-10T03:52:57Z", "message": "More json patterns & tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDY2MjQ5", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506066249", "createdAt": "2020-10-10T04:56:44Z", "commit": {"oid": "e1ae5e2d46ea0b34d75d86315750071045940973"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNDo1Njo0NFrOHfdN2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNDo1Njo0NFrOHfdN2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0NjU4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\"{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t+ \"            }\", matcher.group(1));\n          \n          \n            \n            \t\t\t\t\"{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t\t+ \"            }\", matcher.group(1));\n          \n      \n    \n    \n  \n\nFix static analysis indentation warning.", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502746586", "createdAt": "2020-10-10T04:56:44Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n+\t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\n+\t\t\t\"{ \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1ae5e2d46ea0b34d75d86315750071045940973"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDY5ODU5", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506069859", "createdAt": "2020-10-10T06:01:20Z", "commit": {"oid": "e1ae5e2d46ea0b34d75d86315750071045940973"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjowMToyMFrOHfdhdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjowMToyMFrOHfdhdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MTYwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"(?x) # with comments & spaces ignored\\n\"\n          \n          \n            \n            \t\t\t+ \"\\\"\" + keyword + \"\\\" \\\\s* : \\\\s* \\\"? # find keyword\\n\"\n          \n          \n            \n            \t\t\t+ \"( # start capturing, see https://www.json.org/json-en.html :\\n\"\n          \n          \n            \n            \t\t\t+ \"(?<=\\\") (\\\\\\\\\\\"|[^\\\"])* (?=\\\") # text\\n\"\n          \n          \n            \n            \t\t\t+ \"| ((?<!\\\") # other cases:\\n\"\n          \n          \n            \n            \t\t\t+ \"  [+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)? # numbers\\n\"\n          \n          \n            \n            \t\t\t+ \"| ( true | false | null ) # logical values\\n\"\n          \n          \n            \n            \t\t\t+ \"| \\\\{ [^{]* \\\\} # un-nested object\\n\"\n          \n          \n            \n            \t\t\t+ \"| \\\\[ [^\\\\[]* \\\\] # un-nested array\\n\"\n          \n          \n            \n            \t\t\t+ \"(?!\\\") ) # end of other cases\\n\"\n          \n          \n            \n            \t\t\t+ \")\\\"? # end of captured return value\\n\" \n          \n          \n            \n            \t\t\t+ \"(?=\\\\s*[,\\\\]}]) # correct ending of json\";\n          \n          \n            \n            \t\treturn \"\\\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword\n          \n          \n            \n            \t\t\t\t+ \"\\\"?((?<=\\\")(\\\\\\\\\\\"|[^\\\"])*(?=\\\")\" // string\n          \n          \n            \n            \t\t\t\t+ \"|(?<!\\\")([+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?\" // number\n          \n          \n            \n            \t\t\t\t+ \"|(true|false|null)\" // boolean\n          \n          \n            \n            \t\t\t\t+ \"|\\\\{[^{]*\\\\}\" // un-nested object\n          \n          \n            \n            \t\t\t\t+ \"|\\\\[[^\\\\[]*\\\\])\" // un-nested array\n          \n          \n            \n            \t\t\t\t+ \"(?!\\\"))\\\"?(?=\\\\s*[,\\\\]}])\"; // correct json expression format\n          \n      \n    \n    \n  \n\nMoved comments inside the regex to the code, since otherwise spaces in the keyword would be ignored.", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502751605", "createdAt": "2020-10-10T06:01:20Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"(?x) # with comments & spaces ignored\\n\"\n+\t\t\t+ \"\\\"\" + keyword + \"\\\" \\\\s* : \\\\s* \\\"? # find keyword\\n\"\n+\t\t\t+ \"( # start capturing, see https://www.json.org/json-en.html :\\n\"\n+\t\t\t+ \"(?<=\\\") (\\\\\\\\\\\"|[^\\\"])* (?=\\\") # text\\n\"\n+\t\t\t+ \"| ((?<!\\\") # other cases:\\n\"\n+\t\t\t+ \"  [+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)? # numbers\\n\"\n+\t\t\t+ \"| ( true | false | null ) # logical values\\n\"\n+\t\t\t+ \"| \\\\{ [^{]* \\\\} # un-nested object\\n\"\n+\t\t\t+ \"| \\\\[ [^\\\\[]* \\\\] # un-nested array\\n\"\n+\t\t\t+ \"(?!\\\") ) # end of other cases\\n\"\n+\t\t\t+ \")\\\"? # end of captured return value\\n\" \n+\t\t\t+ \"(?=\\\\s*[,\\\\]}]) # correct ending of json\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1ae5e2d46ea0b34d75d86315750071045940973"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abdd180efa6bf0898870d3fcc8c35d5108874e91", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/abdd180efa6bf0898870d3fcc8c35d5108874e91", "committedDate": "2020-10-10T06:10:11Z", "message": "Fixed regex and indentations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDczMTg5", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506073189", "createdAt": "2020-10-10T06:56:12Z", "commit": {"oid": "abdd180efa6bf0898870d3fcc8c35d5108874e91"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo1NjoxMlrOHfdzMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo1NjoxMlrOHfdzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NjE0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"\\\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword\n          \n          \n            \n            \t\treturn \"\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502756145", "createdAt": "2020-10-10T06:56:12Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"\\\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abdd180efa6bf0898870d3fcc8c35d5108874e91"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71c3978d07bdda037328817f31345ed15e8b56e5", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/71c3978d07bdda037328817f31345ed15e8b56e5", "committedDate": "2020-10-10T06:56:34Z", "message": "Missed \""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDczNDUy", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506073452", "createdAt": "2020-10-10T06:59:58Z", "commit": {"oid": "71c3978d07bdda037328817f31345ed15e8b56e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo1OTo1OFrOHfd0WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo1OTo1OFrOHfd0WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NjQ0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import android.content.Context;\n          \n          \n            \n            \n          \n          \n            \n            public class JsonRegexExtractor {\n          \n          \n            \n            \tprivate Context context;\n          \n          \n            \n            \tpublic JsonRegexExtractor(Context context) {\n          \n          \n            \n            \t\tthis.context = context;\n          \n          \n            \n            \t}\n          \n          \n            \n            public class JsonRegexExtractor {\n          \n      \n    \n    \n  \n\nContext is not used. This is part of the fix to solve the static analysis warning \"Avoid unused private fields such as 'context'.\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502756440", "createdAt": "2020-10-10T06:59:58Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c3978d07bdda037328817f31345ed15e8b56e5"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDc0MDAw", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506074000", "createdAt": "2020-10-10T07:08:43Z", "commit": {"oid": "71c3978d07bdda037328817f31345ed15e8b56e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowODo0M1rOHfd3Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowODo0M1rOHfd3Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NzE4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import android.app.Activity;\n          \n      \n    \n    \n  \n\nActivity is not used. This is part of the fix to solve the static analysis warning \"Avoid unused private fields such as 'context'.\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502757182", "createdAt": "2020-10-10T07:08:43Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c3978d07bdda037328817f31345ed15e8b56e5"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDc0MDQ0", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506074044", "createdAt": "2020-10-10T07:09:22Z", "commit": {"oid": "71c3978d07bdda037328817f31345ed15e8b56e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowOToyMlrOHfd3fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzowOToyMlrOHfd3fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NzI0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tActivity context = new Activity();\n          \n          \n            \n            \t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n          \n          \n            \n            \t\tthis.jsonExtractor = new JsonRegexExtractor();\n          \n      \n    \n    \n  \n\nContext is not used. This is part of the fix to solve the static analysis warning \"Avoid unused private fields such as 'context'.\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502757246", "createdAt": "2020-10-10T07:09:22Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c3978d07bdda037328817f31345ed15e8b56e5"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDc1NjMx", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506075631", "createdAt": "2020-10-10T07:35:31Z", "commit": {"oid": "71c3978d07bdda037328817f31345ed15e8b56e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzozNTozMVrOHfeAQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzozNTozMVrOHfeAQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1OTQ5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\"{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t\t+ \"            }\", matcher.group(1));\n          \n          \n            \n            \t\t\t\t\"\\{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t\t+ \"            \\}\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502759490", "createdAt": "2020-10-10T07:35:31Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n+\t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\n+\t\t\t\t\"{ \\\"number\\\": 0, \\n\"\n+\t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t\t+ \"            }\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c3978d07bdda037328817f31345ed15e8b56e5"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d66a15bd1093286977cdfe33f1f393d9df3f9d9", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/5d66a15bd1093286977cdfe33f1f393d9df3f9d9", "committedDate": "2020-10-10T07:38:28Z", "message": "Apply suggestions from code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDc4MjQz", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506078243", "createdAt": "2020-10-10T08:14:17Z", "commit": {"oid": "5d66a15bd1093286977cdfe33f1f393d9df3f9d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODoxNDoxOFrOHfeNvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODoxNDoxOFrOHfeNvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2Mjk0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n          \n          \n            \n            \t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t+ \"            }\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502762943", "createdAt": "2020-10-10T08:14:18Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n+\t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d66a15bd1093286977cdfe33f1f393d9df3f9d9"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDc4Mzc3", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506078377", "createdAt": "2020-10-10T08:16:49Z", "commit": {"oid": "5d66a15bd1093286977cdfe33f1f393d9df3f9d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODoxNjo1MFrOHfeOlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODoxNjo1MFrOHfeOlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2MzE1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\n          \n          \n            \n            \t\t\t\t\"\\{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t\t+ \"            \\}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals({\"\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502763156", "createdAt": "2020-10-10T08:16:50Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n+\t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\n+\t\t\t\t\"\\{ \\\"number\\\": 0, \\n\"\n+\t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t\t+ \"            \\}\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d66a15bd1093286977cdfe33f1f393d9df3f9d9"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bfcd984946cb4ac986bb975d3e3bcc2ac63c6c9", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/2bfcd984946cb4ac986bb975d3e3bcc2ac63c6c9", "committedDate": "2020-10-10T08:18:17Z", "message": "Apply suggestions from code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDc5NzU4", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506079758", "createdAt": "2020-10-10T08:38:54Z", "commit": {"oid": "2bfcd984946cb4ac986bb975d3e3bcc2ac63c6c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODozODo1NFrOHfeV9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODozODo1NFrOHfeV9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2NTA0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals({\"\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502765046", "createdAt": "2020-10-10T08:38:54Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals({\"\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bfcd984946cb4ac986bb975d3e3bcc2ac63c6c9"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1ad344587cfd009fc7320237112c18315b2929a", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/b1ad344587cfd009fc7320237112c18315b2929a", "committedDate": "2020-10-10T08:39:13Z", "message": "Typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDg1MjU4", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506085258", "createdAt": "2020-10-10T10:04:17Z", "commit": {"oid": "b1ad344587cfd009fc7320237112c18315b2929a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDowNDoxN1rOHfe03w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDowNDoxN1rOHfe03w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3Mjk1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class JsonRegexExtractor {\n          \n          \n            \n            public class JsonRegexExtractor {\n          \n          \n            \n            \n          \n          \n            \n            \tprivate JsonRegexExtractor() {\n          \n          \n            \n            \t\tthrow new IllegalStateException(\"Utility class\");\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\nAccording to https://rules.sonarsource.com/java/tag/design/RSPEC-1118", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502772959", "createdAt": "2020-10-10T10:04:17Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+public class JsonRegexExtractor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ad344587cfd009fc7320237112c18315b2929a"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDg1Mzkz", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506085393", "createdAt": "2020-10-10T10:06:31Z", "commit": {"oid": "b1ad344587cfd009fc7320237112c18315b2929a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDowNjozMVrOHfe1pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDowNjozMVrOHfe1pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3MzE1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void setUp() {\n          \n          \n            \n            \t\tthis.jsonExtractor = new JsonRegexExtractor();\n          \n          \n            \n            \t}\n          \n          \n            \n            \tpublic void setUp() {}", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502773156", "createdAt": "2020-10-10T10:06:31Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ad344587cfd009fc7320237112c18315b2929a"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDg1NjQx", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506085641", "createdAt": "2020-10-10T10:10:34Z", "commit": {"oid": "b1ad344587cfd009fc7320237112c18315b2929a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDoxMDozNFrOHfe2-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDoxMDozNFrOHfe2-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3MzQ5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\\n\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502773497", "createdAt": "2020-10-10T10:10:34Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ad344587cfd009fc7320237112c18315b2929a"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDg1NjY5", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506085669", "createdAt": "2020-10-10T10:11:02Z", "commit": {"oid": "b1ad344587cfd009fc7320237112c18315b2929a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDoxMTowMlrOHfe3HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDoxMTowMlrOHfe3HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3MzUzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502773532", "createdAt": "2020-10-10T10:11:02Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ad344587cfd009fc7320237112c18315b2929a"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6cf8ed304334dfdabf0a8259b96bbd44c69d53f", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/d6cf8ed304334dfdabf0a8259b96bbd44c69d53f", "committedDate": "2020-10-10T10:12:30Z", "message": "Apply suggestions from code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDkwMDQ5", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506090049", "createdAt": "2020-10-10T11:21:06Z", "commit": {"oid": "d6cf8ed304334dfdabf0a8259b96bbd44c69d53f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMToyMTowNlrOHffPnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMToyMTowNlrOHffPnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3OTgwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\\n\"\n          \n          \n            \n            \t\t\t+ \"    }\\n\"\t\t\t\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"else\\\":null\\n\"\n          \n          \n            \n            \t\t\t+ \"    }\\n\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502779804", "createdAt": "2020-10-10T11:21:06Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6cf8ed304334dfdabf0a8259b96bbd44c69d53f"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDkwMDY3", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506090067", "createdAt": "2020-10-10T11:21:30Z", "commit": {"oid": "d6cf8ed304334dfdabf0a8259b96bbd44c69d53f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMToyMTozMFrOHffPtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMToyMTozMFrOHffPtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3OTgzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502779830", "createdAt": "2020-10-10T11:21:30Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6cf8ed304334dfdabf0a8259b96bbd44c69d53f"}, "originalPosition": 116}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1ad000a4bbcb65f6eb9df037cbc2322131d12f0", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/c1ad000a4bbcb65f6eb9df037cbc2322131d12f0", "committedDate": "2020-10-10T11:21:49Z", "message": "Apply suggestions from code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDk5NzA4", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506099708", "createdAt": "2020-10-10T14:03:59Z", "commit": {"oid": "c1ad000a4bbcb65f6eb9df037cbc2322131d12f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDowMzo1OVrOHfgHFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDowMzo1OVrOHfgHFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NDAwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class JsonRegexExtractor {\n          \n          \n            \n            public final class JsonRegexExtractor {", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502794005", "createdAt": "2020-10-10T14:03:59Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+public class JsonRegexExtractor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ad000a4bbcb65f6eb9df037cbc2322131d12f0"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDk5OTAx", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506099901", "createdAt": "2020-10-10T14:06:57Z", "commit": {"oid": "c1ad000a4bbcb65f6eb9df037cbc2322131d12f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDowNjo1OFrOHfgINg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDowNjo1OFrOHfgINg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NDI5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void setUp() {}\n          \n          \n            \n            \tpublic void setUp() {\n          \n          \n            \n            \t}", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502794294", "createdAt": "2020-10-10T14:06:58Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ad000a4bbcb65f6eb9df037cbc2322131d12f0"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTAwMTM1", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506100135", "createdAt": "2020-10-10T14:09:49Z", "commit": {"oid": "c1ad000a4bbcb65f6eb9df037cbc2322131d12f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDowOTo0OVrOHfgJTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDowOTo0OVrOHfgJTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NDU3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", \"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\");\n          \n      \n    \n    \n  \n\nJust to test why??? the two strings are reported as different by junit (it works fine inside the app!)", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502794572", "createdAt": "2020-10-10T14:09:49Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"else\\\":null\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ad000a4bbcb65f6eb9df037cbc2322131d12f0"}, "originalPosition": 117}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/77083ac1609e4dc2b17cb4c2cef12f16348d3a5b", "committedDate": "2020-10-10T14:12:50Z", "message": "Remove static anal warnings, and test junit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTAxNDg3", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506101487", "createdAt": "2020-10-10T14:29:06Z", "commit": {"oid": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDoyOTowN1rOHfgQOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDoyOTowN1rOHfgQOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NjM0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n            \t@Test\n          \n          \n            \n            \tpublic void testParserExpressionStringWithEscapedQuotationMark() {\n          \n          \n            \n            \t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"escaped\"));\n          \n          \n            \n            \t\tMatcher matcher = regexPattern.matcher(jsonExample);\n          \n          \n            \n            \t\tmatcher.find();\n          \n          \n            \n            \t\tassertEquals(\"\\\"hello world\\\"\", matcher.group(1));\n          \n          \n            \n            \t}\n          \n          \n            \n            }", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502796346", "createdAt": "2020-10-10T14:29:07Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"else\\\":null\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", \"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\");\n+\t}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTAxNjg3", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506101687", "createdAt": "2020-10-10T14:31:48Z", "commit": {"oid": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDozMTo0OFrOHfgRdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDozMTo0OFrOHfgRdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NjY2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"else\\\":null\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\"hello world\\\\\"\\\"\\n\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502796660", "createdAt": "2020-10-10T14:31:48Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"else\\\":null\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTAyMTE3", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506102117", "createdAt": "2020-10-10T14:37:53Z", "commit": {"oid": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDozNzo1M1rOHfgTmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDozNzo1M1rOHfgTmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NzIxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t+ \"|\\\\{[^{]*\\\\}\" // un-nested object\n          \n          \n            \n            \t\t\t\t+ \"|\\\\[[^\\\\[]*\\\\])\" // un-nested array\n          \n          \n            \n            \t\t\t\t+ \"|\\\\{[^{]*?\\\\}\" // un-nested object\n          \n          \n            \n            \t\t\t\t+ \"|\\\\[[^\\\\[]*?\\\\])\" // un-nested array", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502797210", "createdAt": "2020-10-10T14:37:53Z", "author": {"login": "wslany"}, "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+public final class JsonRegexExtractor {\n+\n+\tprivate JsonRegexExtractor() {\n+\t\tthrow new IllegalStateException(\"Utility class\");\n+\t}\n+\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword\n+\t\t\t\t+ \"\\\"?((?<=\\\")(\\\\\\\\\\\"|[^\\\"])*(?=\\\")\" // string\n+\t\t\t\t+ \"|(?<!\\\")([+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?\" // number\n+\t\t\t\t+ \"|(true|false|null)\" // boolean\n+\t\t\t\t+ \"|\\\\{[^{]*\\\\}\" // un-nested object\n+\t\t\t\t+ \"|\\\\[[^\\\\[]*\\\\])\" // un-nested array", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTAyMjAz", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506102203", "createdAt": "2020-10-10T14:38:59Z", "commit": {"oid": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDozODo1OVrOHfgUEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNDozODo1OVrOHfgUEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NzMzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", \"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\");\n          \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502797331", "createdAt": "2020-10-10T14:38:59Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"else\\\":null\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", \"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ccd8283c3a22130fd77a24e33f234e12828e953", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/6ccd8283c3a22130fd77a24e33f234e12828e953", "committedDate": "2020-10-10T14:40:36Z", "message": "Added test, and corrected test and regex"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTA2Mzcw", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506106370", "createdAt": "2020-10-10T15:39:12Z", "commit": {"oid": "6ccd8283c3a22130fd77a24e33f234e12828e953"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTozOToxMlrOHfgqFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTozOToxMlrOHfgqFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjk2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\"hello world\\\\\"\\\"\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\\\"hello world\\\\\\\"\\\"\\n\"", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502802965", "createdAt": "2020-10-10T15:39:12Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\"hello world\\\\\"\\\"\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccd8283c3a22130fd77a24e33f234e12828e953"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c09128eac3f625d1d5abaf99ab5433c59bf2b552", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/c09128eac3f625d1d5abaf99ab5433c59bf2b552", "committedDate": "2020-10-10T15:40:11Z", "message": "Quotes must also be escaped..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTA3Njkw", "url": "https://github.com/Catrobat/Catroid/pull/3812#pullrequestreview-506107690", "createdAt": "2020-10-10T15:59:08Z", "commit": {"oid": "c09128eac3f625d1d5abaf99ab5433c59bf2b552"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTo1OTowOFrOHfgxhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNTo1OTowOFrOHfgxhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwNDg2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"\\\"hello world\\\"\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"\\\\\\\"hello world\\\\\\\"\", matcher.group(1));", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502804868", "createdAt": "2020-10-10T15:59:08Z", "author": {"login": "wslany"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\\\"hello world\\\\\\\"\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringWithEscapedQuotationMark() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"escaped\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"\\\"hello world\\\"\", matcher.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09128eac3f625d1d5abaf99ab5433c59bf2b552"}, "originalPosition": 126}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcb28f96dc63cff1e30d5c5f9f66bfe0ebb7d4d8", "author": {"user": {"login": "wslany", "name": "Wolfgang Slany"}}, "url": "https://github.com/Catrobat/Catroid/commit/dcb28f96dc63cff1e30d5c5f9f66bfe0ebb7d4d8", "committedDate": "2020-10-10T15:59:43Z", "message": "Correctly escaped quotation marks in result"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2180, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}