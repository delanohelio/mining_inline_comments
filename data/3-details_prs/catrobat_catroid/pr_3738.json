{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NTU1NTE0", "number": 3738, "title": "CATROID-671 refactor SpeakAction to Kotlin", "bodyText": "SpeakAction is refactored to Kotlin\nTextToSpeech.OnUtteranceCompletedListener is deprecated in Kotlin.\nIt is replaced with UtteranceProgressListener.\nhttps://jira.catrob.at/browse/CATROID-671\nYour checklist for this pull request\nPlease review the contributing guidelines and wiki pages of this repository.\n\n Include the name of the Jira ticket in the PR\u2019s title\n Include a summary of the changes plus the relevant context\n Choose the proper base branch (develop)\n Confirm that the changes follow the project\u2019s coding guidelines\n Verify that the changes generate no compiler or linter warnings\n Perform a self-review of the changes\n Verify to commit no other files than the intentionally changed ones\n Include reasonable and readable tests verifying the added or changed behavior\n Confirm that new and existing unit tests pass locally\n Check that the commits\u2019 message style matches the project\u2019s guideline\n Stick to the project\u2019s gitflow workflow\n Verify that your changes do not have any conflicts with the base branch\n After the PR, verify that all CI checks have passed\n Post a message in the catroid-stage or catroid-ide Slack channel and ask for a code reviewer", "createdAt": "2020-08-10T15:00:05Z", "url": "https://github.com/Catrobat/Catroid/pull/3738", "merged": true, "mergeCommit": {"oid": "9c3c73714194ff4dfc18a221213d9fa31f1655f7"}, "closed": true, "closedAt": "2020-11-24T16:58:43Z", "author": {"login": "hofcle78"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9zYWWgBqjM2NDIyNjgwMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbgyv5gFqTUyODM0ODk0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fa52e574d9d2b1dc287e218b68ddbe08d76894c", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/8fa52e574d9d2b1dc287e218b68ddbe08d76894c", "committedDate": "2020-08-10T14:42:49Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "abfe086b0a21d3d1dc203b1204ae5d41d1e7488f", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/abfe086b0a21d3d1dc203b1204ae5d41d1e7488f", "committedDate": "2020-08-11T09:26:18Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abfe086b0a21d3d1dc203b1204ae5d41d1e7488f", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/abfe086b0a21d3d1dc203b1204ae5d41d1e7488f", "committedDate": "2020-08-11T09:26:18Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "d62d54e355bd389c7bd4145347c920e3b9511d69", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/d62d54e355bd389c7bd4145347c920e3b9511d69", "committedDate": "2020-08-11T18:01:51Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d62d54e355bd389c7bd4145347c920e3b9511d69", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/d62d54e355bd389c7bd4145347c920e3b9511d69", "committedDate": "2020-08-11T18:01:51Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "11c7e48747fa91c76c326d8ff679876d8a04d585", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/11c7e48747fa91c76c326d8ff679876d8a04d585", "committedDate": "2020-08-12T09:13:41Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NzQyODkw", "url": "https://github.com/Catrobat/Catroid/pull/3738#pullrequestreview-466742890", "createdAt": "2020-08-13T13:07:52Z", "commit": {"oid": "11c7e48747fa91c76c326d8ff679876d8a04d585"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11c7e48747fa91c76c326d8ff679876d8a04d585", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/11c7e48747fa91c76c326d8ff679876d8a04d585", "committedDate": "2020-08-12T09:13:41Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "7614f24342549b04e53b8e2a00577f0a94d1d4ed", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/7614f24342549b04e53b8e2a00577f0a94d1d4ed", "committedDate": "2020-08-31T19:57:22Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7614f24342549b04e53b8e2a00577f0a94d1d4ed", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/7614f24342549b04e53b8e2a00577f0a94d1d4ed", "committedDate": "2020-08-31T19:57:22Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "7d557138b415c8625b585a0d30f0b2df98df1cda", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/7d557138b415c8625b585a0d30f0b2df98df1cda", "committedDate": "2020-08-31T21:01:45Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d557138b415c8625b585a0d30f0b2df98df1cda", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/7d557138b415c8625b585a0d30f0b2df98df1cda", "committedDate": "2020-08-31T21:01:45Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "d9efd8674133287ab8f462b1ee6d388fed372b60", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/d9efd8674133287ab8f462b1ee6d388fed372b60", "committedDate": "2020-09-01T14:59:05Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d9efd8674133287ab8f462b1ee6d388fed372b60", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/d9efd8674133287ab8f462b1ee6d388fed372b60", "committedDate": "2020-09-01T14:59:05Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "a83aa609de9ff3d4a7d7d1853bef9b8f45e29670", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/a83aa609de9ff3d4a7d7d1853bef9b8f45e29670", "committedDate": "2020-09-01T20:55:26Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a83aa609de9ff3d4a7d7d1853bef9b8f45e29670", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/a83aa609de9ff3d4a7d7d1853bef9b8f45e29670", "committedDate": "2020-09-01T20:55:26Z", "message": "CATROID-671 refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "3992e83a5fd10c6e715660d3c881d7083fffee33", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/3992e83a5fd10c6e715660d3c881d7083fffee33", "committedDate": "2020-09-02T14:09:01Z", "message": "refactor SpeakAction to Kotlin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2OTk2OTk0", "url": "https://github.com/Catrobat/Catroid/pull/3738#pullrequestreview-496996994", "createdAt": "2020-09-26T10:57:07Z", "commit": {"oid": "3992e83a5fd10c6e715660d3c881d7083fffee33"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxMDo1NzowN1rOHYfkCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxMTowMToyM1rOHYflSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTAwMQ==", "bodyText": "Using an Elvis operator could be useful in this case. if statement above would be obsolete.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return field!!\n          \n          \n            \n                            return field ?: TextToSpeechHolder()", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r495445001", "createdAt": "2020-09-26T10:57:07Z", "author": {"login": "christophsiegl"}, "path": "catroid/src/main/java/org/catrobat/catroid/stage/TextToSpeechHolder.kt", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.content.Intent\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.TextToSpeech.OnInitListener\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import android.view.ContextThemeWrapper\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.bricks.Brick\n+import java.io.File\n+import java.util.HashMap\n+\n+class TextToSpeechHolder private constructor() {\n+\n+    fun initTextToSpeech(stageActivity: StageActivity, stageResourceHolder: StageResourceHolder) {\n+        textToSpeech = TextToSpeech(stageActivity, OnInitListener { status ->\n+                if (status == TextToSpeech.SUCCESS) {\n+                    utteranceProgressListenerContainer = UtteranceProgressListenerContainer()\n+                    textToSpeech?.setOnUtteranceProgressListener(utteranceProgressListenerContainer)\n+                    stageResourceHolder.resourceInitialized()\n+                } else {\n+                    val builder = AlertDialog.Builder(ContextThemeWrapper(stageActivity, R.style.Theme_AppCompat_Dialog))\n+                    builder.setMessage(R.string.prestage_text_to_speech_engine_not_installed)\n+                        .setCancelable(false)\n+                        .setPositiveButton(R.string.yes) { dialog, id ->\n+                            val installIntent = Intent()\n+                            installIntent.action = TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA\n+                            stageActivity.startActivity(installIntent)\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                        .setNegativeButton(R.string.no) { dialog, id ->\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                    val alert = builder.create()\n+                    alert.show()\n+                }\n+            })\n+    }\n+\n+    fun shutDownTextToSpeech() {\n+        if (textToSpeech != null) {\n+            textToSpeech?.stop()\n+            textToSpeech?.shutdown()\n+        }\n+    }\n+\n+    fun textToSpeech(text: String?, speechFile: File, listener: UtteranceProgressListener, speakParameter: HashMap<String?, String?>) {\n+        var text = text\n+        if (text == null) {\n+            text = \"\"\n+        }\n+        if (utteranceProgressListenerContainer!!.addUtteranceProgressListener(speechFile,\n+            listener, speakParameter[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID]!!)) {\n+            val status = textToSpeech?.synthesizeToFile(text, speakParameter, speechFile.absolutePath)\n+            if (status == TextToSpeech.ERROR) {\n+                Log.e(TAG, \"File synthesizing failed\")\n+            }\n+        }\n+    }\n+\n+    fun deleteSpeechFiles() {\n+        val pathToSpeechFiles = File(Constants.TEXT_TO_SPEECH_TMP_PATH)\n+        if (pathToSpeechFiles.isDirectory) {\n+            pathToSpeechFiles.walk().forEach {\n+                it.delete()\n+            }\n+        }\n+    }\n+\n+    companion object {\n+        private val TAG = TextToSpeechHolder::class.java.simpleName\n+        private var textToSpeech: TextToSpeech? = null\n+        private var utteranceProgressListenerContainer: UtteranceProgressListenerContainer? = null\n+        @JvmStatic\n+        var instance: TextToSpeechHolder? = null\n+            get() {\n+                if (field == null) {\n+                    field = TextToSpeechHolder()\n+                }\n+                return field!!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3992e83a5fd10c6e715660d3c881d7083fffee33"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTMyMw==", "bodyText": "Using an Elvis operator would be nice. If statement below would be obsolete", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r495445323", "createdAt": "2020-09-26T11:01:23Z", "author": {"login": "christophsiegl"}, "path": "catroid/src/main/java/org/catrobat/catroid/stage/TextToSpeechHolder.kt", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.content.Intent\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.TextToSpeech.OnInitListener\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import android.view.ContextThemeWrapper\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.bricks.Brick\n+import java.io.File\n+import java.util.HashMap\n+\n+class TextToSpeechHolder private constructor() {\n+\n+    fun initTextToSpeech(stageActivity: StageActivity, stageResourceHolder: StageResourceHolder) {\n+        textToSpeech = TextToSpeech(stageActivity, OnInitListener { status ->\n+                if (status == TextToSpeech.SUCCESS) {\n+                    utteranceProgressListenerContainer = UtteranceProgressListenerContainer()\n+                    textToSpeech?.setOnUtteranceProgressListener(utteranceProgressListenerContainer)\n+                    stageResourceHolder.resourceInitialized()\n+                } else {\n+                    val builder = AlertDialog.Builder(ContextThemeWrapper(stageActivity, R.style.Theme_AppCompat_Dialog))\n+                    builder.setMessage(R.string.prestage_text_to_speech_engine_not_installed)\n+                        .setCancelable(false)\n+                        .setPositiveButton(R.string.yes) { dialog, id ->\n+                            val installIntent = Intent()\n+                            installIntent.action = TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA\n+                            stageActivity.startActivity(installIntent)\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                        .setNegativeButton(R.string.no) { dialog, id ->\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                    val alert = builder.create()\n+                    alert.show()\n+                }\n+            })\n+    }\n+\n+    fun shutDownTextToSpeech() {\n+        if (textToSpeech != null) {\n+            textToSpeech?.stop()\n+            textToSpeech?.shutdown()\n+        }\n+    }\n+\n+    fun textToSpeech(text: String?, speechFile: File, listener: UtteranceProgressListener, speakParameter: HashMap<String?, String?>) {\n+        var text = text", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3992e83a5fd10c6e715660d3c881d7083fffee33"}, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3992e83a5fd10c6e715660d3c881d7083fffee33", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/3992e83a5fd10c6e715660d3c881d7083fffee33", "committedDate": "2020-09-02T14:09:01Z", "message": "refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "531458fededeb6ab82df3fc8569bdf4facc8330a", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/531458fededeb6ab82df3fc8569bdf4facc8330a", "committedDate": "2020-09-29T16:22:23Z", "message": "refactor SpeakAction to Kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "531458fededeb6ab82df3fc8569bdf4facc8330a", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/531458fededeb6ab82df3fc8569bdf4facc8330a", "committedDate": "2020-09-29T16:22:23Z", "message": "refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/f6101415eaf5a71e792becca347ee43ca0e64434", "committedDate": "2020-09-29T19:29:31Z", "message": "refactor SpeakAction to Kotlin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzODE4MTEz", "url": "https://github.com/Catrobat/Catroid/pull/3738#pullrequestreview-503818113", "createdAt": "2020-10-07T12:21:05Z", "commit": {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0ODg4MjQ1", "url": "https://github.com/Catrobat/Catroid/pull/3738#pullrequestreview-504888245", "createdAt": "2020-10-08T15:10:14Z", "commit": {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNToxMDoxNFrOHejY5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTo1MTo0NFrOHelOfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5OTE0MQ==", "bodyText": "Please remove this if.\nHave a look at https://kotlinlang.org/docs/reference/null-safety.html#safe-calls", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501799141", "createdAt": "2020-10-08T15:10:14Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/stage/TextToSpeechHolder.kt", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.content.Intent\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.TextToSpeech.OnInitListener\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import android.view.ContextThemeWrapper\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.bricks.Brick\n+import java.io.File\n+import java.util.HashMap\n+\n+class TextToSpeechHolder private constructor() {\n+\n+    fun initTextToSpeech(stageActivity: StageActivity, stageResourceHolder: StageResourceHolder) {\n+        textToSpeech = TextToSpeech(stageActivity, OnInitListener { status ->\n+                if (status == TextToSpeech.SUCCESS) {\n+                    utteranceProgressListenerContainer = UtteranceProgressListenerContainer()\n+                    textToSpeech?.setOnUtteranceProgressListener(utteranceProgressListenerContainer)\n+                    stageResourceHolder.resourceInitialized()\n+                } else {\n+                    val builder = AlertDialog.Builder(ContextThemeWrapper(stageActivity, R.style.Theme_AppCompat_Dialog))\n+                    builder.setMessage(R.string.prestage_text_to_speech_engine_not_installed)\n+                        .setCancelable(false)\n+                        .setPositiveButton(R.string.yes) { dialog, id ->\n+                            val installIntent = Intent()\n+                            installIntent.action = TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA\n+                            stageActivity.startActivity(installIntent)\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                        .setNegativeButton(R.string.no) { dialog, id ->\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                    val alert = builder.create()\n+                    alert.show()\n+                }\n+            })\n+    }\n+\n+    fun shutDownTextToSpeech() {\n+        if (textToSpeech != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwMTMyNg==", "bodyText": "Never use \"!!\" it's an \"assert not null\". if the value is null => Process crash.\nDo we really want a NPE here?\nHave a look at https://kotlinlang.org/docs/reference/null-safety.html#the--operator", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501801326", "createdAt": "2020-10-08T15:13:16Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/stage/TextToSpeechHolder.kt", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.content.Intent\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.TextToSpeech.OnInitListener\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import android.view.ContextThemeWrapper\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.bricks.Brick\n+import java.io.File\n+import java.util.HashMap\n+\n+class TextToSpeechHolder private constructor() {\n+\n+    fun initTextToSpeech(stageActivity: StageActivity, stageResourceHolder: StageResourceHolder) {\n+        textToSpeech = TextToSpeech(stageActivity, OnInitListener { status ->\n+                if (status == TextToSpeech.SUCCESS) {\n+                    utteranceProgressListenerContainer = UtteranceProgressListenerContainer()\n+                    textToSpeech?.setOnUtteranceProgressListener(utteranceProgressListenerContainer)\n+                    stageResourceHolder.resourceInitialized()\n+                } else {\n+                    val builder = AlertDialog.Builder(ContextThemeWrapper(stageActivity, R.style.Theme_AppCompat_Dialog))\n+                    builder.setMessage(R.string.prestage_text_to_speech_engine_not_installed)\n+                        .setCancelable(false)\n+                        .setPositiveButton(R.string.yes) { dialog, id ->\n+                            val installIntent = Intent()\n+                            installIntent.action = TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA\n+                            stageActivity.startActivity(installIntent)\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                        .setNegativeButton(R.string.no) { dialog, id ->\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                    val alert = builder.create()\n+                    alert.show()\n+                }\n+            })\n+    }\n+\n+    fun shutDownTextToSpeech() {\n+        if (textToSpeech != null) {\n+            textToSpeech?.stop()\n+            textToSpeech?.shutdown()\n+        }\n+    }\n+\n+    fun textToSpeech(text: String?, speechFile: File, listener: UtteranceProgressListener, speakParameter: HashMap<String?, String?>) {\n+        val text = text ?: \"\"\n+        if (utteranceProgressListenerContainer!!.addUtteranceProgressListener(speechFile,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNDYxNg==", "bodyText": "Please use \"val\" instead\nval instance = TextToSpeechHolder()\n(much less code and not a nullable type)", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501804616", "createdAt": "2020-10-08T15:17:50Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/stage/TextToSpeechHolder.kt", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.content.Intent\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.TextToSpeech.OnInitListener\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import android.view.ContextThemeWrapper\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.bricks.Brick\n+import java.io.File\n+import java.util.HashMap\n+\n+class TextToSpeechHolder private constructor() {\n+\n+    fun initTextToSpeech(stageActivity: StageActivity, stageResourceHolder: StageResourceHolder) {\n+        textToSpeech = TextToSpeech(stageActivity, OnInitListener { status ->\n+                if (status == TextToSpeech.SUCCESS) {\n+                    utteranceProgressListenerContainer = UtteranceProgressListenerContainer()\n+                    textToSpeech?.setOnUtteranceProgressListener(utteranceProgressListenerContainer)\n+                    stageResourceHolder.resourceInitialized()\n+                } else {\n+                    val builder = AlertDialog.Builder(ContextThemeWrapper(stageActivity, R.style.Theme_AppCompat_Dialog))\n+                    builder.setMessage(R.string.prestage_text_to_speech_engine_not_installed)\n+                        .setCancelable(false)\n+                        .setPositiveButton(R.string.yes) { dialog, id ->\n+                            val installIntent = Intent()\n+                            installIntent.action = TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA\n+                            stageActivity.startActivity(installIntent)\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                        .setNegativeButton(R.string.no) { dialog, id ->\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                    val alert = builder.create()\n+                    alert.show()\n+                }\n+            })\n+    }\n+\n+    fun shutDownTextToSpeech() {\n+        if (textToSpeech != null) {\n+            textToSpeech?.stop()\n+            textToSpeech?.shutdown()\n+        }\n+    }\n+\n+    fun textToSpeech(text: String?, speechFile: File, listener: UtteranceProgressListener, speakParameter: HashMap<String?, String?>) {\n+        val text = text ?: \"\"\n+        if (utteranceProgressListenerContainer!!.addUtteranceProgressListener(speechFile,\n+            listener, speakParameter[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID]!!)) {\n+            val status = textToSpeech?.synthesizeToFile(text, speakParameter, speechFile.absolutePath)\n+            if (status == TextToSpeech.ERROR) {\n+                Log.e(TAG, \"File synthesizing failed\")\n+            }\n+        }\n+    }\n+\n+    fun deleteSpeechFiles() {\n+        val pathToSpeechFiles = File(Constants.TEXT_TO_SPEECH_TMP_PATH)\n+        if (pathToSpeechFiles.isDirectory) {\n+            pathToSpeechFiles.walk().forEach {\n+                it.delete()\n+            }\n+        }\n+    }\n+\n+    companion object {\n+        private val TAG = TextToSpeechHolder::class.java.simpleName\n+        private var textToSpeech: TextToSpeech? = null\n+        private var utteranceProgressListenerContainer: UtteranceProgressListenerContainer? = null\n+        @JvmStatic\n+        var instance: TextToSpeechHolder? = null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMDYxOA==", "bodyText": "Are these Log methods necessary?", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501810618", "createdAt": "2020-10-08T15:25:41Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/stage/UtteranceProgressListenerContainer.kt", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import java.io.File\n+import java.util.ArrayList\n+import java.util.HashMap\n+\n+class UtteranceProgressListenerContainer : UtteranceProgressListener() {\n+    private val listeners: MutableMap<String, MutableList<UtteranceProgressListener>?> = HashMap()\n+\n+    @Synchronized\n+    fun addUtteranceProgressListener(speechFile: File, utteranceProgressListener: UtteranceProgressListener, utteranceId: String): Boolean {\n+        var utteranceIdListeners = listeners[utteranceId]\n+        return if (utteranceIdListeners == null) {\n+            if (speechFile.exists()) {\n+                utteranceProgressListener.onDone(utteranceId)\n+                false\n+            } else {\n+                utteranceIdListeners = ArrayList()\n+                utteranceIdListeners.add(utteranceProgressListener)\n+                listeners[utteranceId] = utteranceIdListeners\n+                true\n+            }\n+        } else {\n+            utteranceIdListeners.add(utteranceProgressListener)\n+            false\n+        }\n+    }\n+\n+    @Synchronized\n+    override fun onDone(utteranceId: String) {\n+        for (listener in listeners[utteranceId]!!) {\n+            listener.onDone(utteranceId)\n+        }\n+        listeners[utteranceId] = null\n+    }\n+\n+    override fun onStart(utteranceId: String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMTMyNQ==", "bodyText": "This does probably not belong here, does it?", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501811325", "createdAt": "2020-10-08T15:26:39Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/stage/UtteranceProgressListenerContainer.kt", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import java.io.File\n+import java.util.ArrayList\n+import java.util.HashMap\n+\n+class UtteranceProgressListenerContainer : UtteranceProgressListener() {\n+    private val listeners: MutableMap<String, MutableList<UtteranceProgressListener>?> = HashMap()\n+\n+    @Synchronized\n+    fun addUtteranceProgressListener(speechFile: File, utteranceProgressListener: UtteranceProgressListener, utteranceId: String): Boolean {\n+        var utteranceIdListeners = listeners[utteranceId]\n+        return if (utteranceIdListeners == null) {\n+            if (speechFile.exists()) {\n+                utteranceProgressListener.onDone(utteranceId)\n+                false\n+            } else {\n+                utteranceIdListeners = ArrayList()\n+                utteranceIdListeners.add(utteranceProgressListener)\n+                listeners[utteranceId] = utteranceIdListeners\n+                true\n+            }\n+        } else {\n+            utteranceIdListeners.add(utteranceProgressListener)\n+            false\n+        }\n+    }\n+\n+    @Synchronized\n+    override fun onDone(utteranceId: String) {\n+        for (listener in listeners[utteranceId]!!) {\n+            listener.onDone(utteranceId)\n+        }\n+        listeners[utteranceId] = null\n+    }\n+\n+    override fun onStart(utteranceId: String) {\n+        Log.d(javaClass.simpleName, \"onStart()\")\n+    }\n+    override fun onError(utteranceId: String) {\n+        Log.d(javaClass.simpleName, \"onStart()\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMjE1Mg==", "bodyText": "No \"!!\" please.", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501812152", "createdAt": "2020-10-08T15:27:49Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/stage/UtteranceProgressListenerContainer.kt", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import java.io.File\n+import java.util.ArrayList\n+import java.util.HashMap\n+\n+class UtteranceProgressListenerContainer : UtteranceProgressListener() {\n+    private val listeners: MutableMap<String, MutableList<UtteranceProgressListener>?> = HashMap()\n+\n+    @Synchronized\n+    fun addUtteranceProgressListener(speechFile: File, utteranceProgressListener: UtteranceProgressListener, utteranceId: String): Boolean {\n+        var utteranceIdListeners = listeners[utteranceId]\n+        return if (utteranceIdListeners == null) {\n+            if (speechFile.exists()) {\n+                utteranceProgressListener.onDone(utteranceId)\n+                false\n+            } else {\n+                utteranceIdListeners = ArrayList()\n+                utteranceIdListeners.add(utteranceProgressListener)\n+                listeners[utteranceId] = utteranceIdListeners\n+                true\n+            }\n+        } else {\n+            utteranceIdListeners.add(utteranceProgressListener)\n+            false\n+        }\n+    }\n+\n+    @Synchronized\n+    override fun onDone(utteranceId: String) {\n+        for (listener in listeners[utteranceId]!!) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNDY4NA==", "bodyText": "Please use \"?:\" instead.\nhttps://kotlinlang.org/docs/reference/null-safety.html#elvis-operator", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501814684", "createdAt": "2020-10-08T15:31:20Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/SpeakAction.kt", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.content.actions\n+\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.io.SoundManager\n+import org.catrobat.catroid.stage.TextToSpeechHolder\n+import org.catrobat.catroid.utils.Utils\n+\n+import java.io.File\n+import java.util.HashMap\n+\n+class SpeakAction : TemporalAction() {\n+    private var text: Formula? = null\n+    private var interpretedText: Any? = null\n+    private var hashText: String? = null\n+    private var sprite: Sprite? = null\n+    lateinit var speechFile: File\n+        private set\n+    private lateinit var listener: UtteranceProgressListener\n+    private var determineLength = false\n+    var lengthOfText = 0f\n+        private set\n+\n+    override fun begin() {\n+        interpretFormula()\n+        hashText = Utils.md5Checksum(interpretedText.toString())\n+        val fileName = hashText\n+        val pathToSpeechFile = File(Constants.TEXT_TO_SPEECH_TMP_PATH)\n+        pathToSpeechFile.mkdirs()\n+        speechFile = File(pathToSpeechFile, fileName + Constants.DEFAULT_SOUND_EXTENSION)\n+        listener = object : UtteranceProgressListener() {\n+            override fun onDone(utteranceId: String) {\n+                if (determineLength) {\n+                    lengthOfText = SoundManager.getInstance().getDurationOfSoundFile(speechFile.absolutePath)\n+                } else {\n+                    SoundManager.getInstance().playSoundFile(speechFile.absolutePath, sprite)\n+                }\n+            }\n+            override fun onStart(utteranceId: String) {\n+                Log.d(javaClass.simpleName, \"onStart()\")\n+            }\n+            override fun onError(utteranceId: String) {\n+                Log.d(javaClass.simpleName, \"onError()\")\n+            }\n+        }\n+        super.begin()\n+    }\n+\n+    override fun update(delta: Float) {\n+        val speakParameter = HashMap<String?, String?>()\n+        speakParameter[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID] = hashText\n+        TextToSpeechHolder.instance?.textToSpeech(interpretedText.toString(), speechFile, listener, speakParameter)\n+    }\n+\n+    fun setSprite(sprite: Sprite?) {\n+        this.sprite = sprite\n+    }\n+\n+    fun setText(text: Formula?) {\n+        this.text = text\n+    }\n+\n+    fun setDetermineLength(getDurationOfText: Boolean) {\n+        determineLength = getDurationOfText\n+    }\n+\n+    fun interpretFormula() {\n+        interpretedText = try {\n+            if (text == null) \"\" else text?.interpretString(sprite)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNjMxMQ==", "bodyText": "Please refactor this.", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501816311", "createdAt": "2020-10-08T15:33:37Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/SpeakAction.kt", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.content.actions\n+\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.io.SoundManager\n+import org.catrobat.catroid.stage.TextToSpeechHolder\n+import org.catrobat.catroid.utils.Utils\n+\n+import java.io.File\n+import java.util.HashMap\n+\n+class SpeakAction : TemporalAction() {\n+    private var text: Formula? = null\n+    private var interpretedText: Any? = null\n+    private var hashText: String? = null\n+    private var sprite: Sprite? = null\n+    lateinit var speechFile: File\n+        private set\n+    private lateinit var listener: UtteranceProgressListener\n+    private var determineLength = false\n+    var lengthOfText = 0f\n+        private set\n+\n+    override fun begin() {\n+        interpretFormula()\n+        hashText = Utils.md5Checksum(interpretedText.toString())\n+        val fileName = hashText\n+        val pathToSpeechFile = File(Constants.TEXT_TO_SPEECH_TMP_PATH)\n+        pathToSpeechFile.mkdirs()\n+        speechFile = File(pathToSpeechFile, fileName + Constants.DEFAULT_SOUND_EXTENSION)\n+        listener = object : UtteranceProgressListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMDExNg==", "bodyText": "Is this setter really useful?\nPlease make sprite public.\nIn Kotlin Getter and setter are automatically generated.\nhttps://kotlinlang.org/docs/reference/properties.html#properties-and-fields", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501820116", "createdAt": "2020-10-08T15:38:58Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/SpeakAction.kt", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.content.actions\n+\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.io.SoundManager\n+import org.catrobat.catroid.stage.TextToSpeechHolder\n+import org.catrobat.catroid.utils.Utils\n+\n+import java.io.File\n+import java.util.HashMap\n+\n+class SpeakAction : TemporalAction() {\n+    private var text: Formula? = null\n+    private var interpretedText: Any? = null\n+    private var hashText: String? = null\n+    private var sprite: Sprite? = null\n+    lateinit var speechFile: File\n+        private set\n+    private lateinit var listener: UtteranceProgressListener\n+    private var determineLength = false\n+    var lengthOfText = 0f\n+        private set\n+\n+    override fun begin() {\n+        interpretFormula()\n+        hashText = Utils.md5Checksum(interpretedText.toString())\n+        val fileName = hashText\n+        val pathToSpeechFile = File(Constants.TEXT_TO_SPEECH_TMP_PATH)\n+        pathToSpeechFile.mkdirs()\n+        speechFile = File(pathToSpeechFile, fileName + Constants.DEFAULT_SOUND_EXTENSION)\n+        listener = object : UtteranceProgressListener() {\n+            override fun onDone(utteranceId: String) {\n+                if (determineLength) {\n+                    lengthOfText = SoundManager.getInstance().getDurationOfSoundFile(speechFile.absolutePath)\n+                } else {\n+                    SoundManager.getInstance().playSoundFile(speechFile.absolutePath, sprite)\n+                }\n+            }\n+            override fun onStart(utteranceId: String) {\n+                Log.d(javaClass.simpleName, \"onStart()\")\n+            }\n+            override fun onError(utteranceId: String) {\n+                Log.d(javaClass.simpleName, \"onError()\")\n+            }\n+        }\n+        super.begin()\n+    }\n+\n+    override fun update(delta: Float) {\n+        val speakParameter = HashMap<String?, String?>()\n+        speakParameter[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID] = hashText\n+        TextToSpeechHolder.instance?.textToSpeech(interpretedText.toString(), speechFile, listener, speakParameter)\n+    }\n+\n+    fun setSprite(sprite: Sprite?) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyOTI0NQ==", "bodyText": "Since this is a Singelton you can use \"object\" as well.\nhttps://kotlinlang.org/docs/reference/object-declarations.html#object-declarations", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501829245", "createdAt": "2020-10-08T15:51:44Z", "author": {"login": "gPathpp"}, "path": "catroid/src/main/java/org/catrobat/catroid/stage/TextToSpeechHolder.kt", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.content.Intent\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.TextToSpeech.OnInitListener\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import android.view.ContextThemeWrapper\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.bricks.Brick\n+import java.io.File\n+import java.util.HashMap\n+\n+class TextToSpeechHolder private constructor() {\n+\n+    fun initTextToSpeech(stageActivity: StageActivity, stageResourceHolder: StageResourceHolder) {\n+        textToSpeech = TextToSpeech(stageActivity, OnInitListener { status ->\n+                if (status == TextToSpeech.SUCCESS) {\n+                    utteranceProgressListenerContainer = UtteranceProgressListenerContainer()\n+                    textToSpeech?.setOnUtteranceProgressListener(utteranceProgressListenerContainer)\n+                    stageResourceHolder.resourceInitialized()\n+                } else {\n+                    val builder = AlertDialog.Builder(ContextThemeWrapper(stageActivity, R.style.Theme_AppCompat_Dialog))\n+                    builder.setMessage(R.string.prestage_text_to_speech_engine_not_installed)\n+                        .setCancelable(false)\n+                        .setPositiveButton(R.string.yes) { dialog, id ->\n+                            val installIntent = Intent()\n+                            installIntent.action = TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA\n+                            stageActivity.startActivity(installIntent)\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                        .setNegativeButton(R.string.no) { dialog, id ->\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                    val alert = builder.create()\n+                    alert.show()\n+                }\n+            })\n+    }\n+\n+    fun shutDownTextToSpeech() {\n+        if (textToSpeech != null) {\n+            textToSpeech?.stop()\n+            textToSpeech?.shutdown()\n+        }\n+    }\n+\n+    fun textToSpeech(text: String?, speechFile: File, listener: UtteranceProgressListener, speakParameter: HashMap<String?, String?>) {\n+        val text = text ?: \"\"\n+        if (utteranceProgressListenerContainer!!.addUtteranceProgressListener(speechFile,\n+            listener, speakParameter[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID]!!)) {\n+            val status = textToSpeech?.synthesizeToFile(text, speakParameter, speechFile.absolutePath)\n+            if (status == TextToSpeech.ERROR) {\n+                Log.e(TAG, \"File synthesizing failed\")\n+            }\n+        }\n+    }\n+\n+    fun deleteSpeechFiles() {\n+        val pathToSpeechFiles = File(Constants.TEXT_TO_SPEECH_TMP_PATH)\n+        if (pathToSpeechFiles.isDirectory) {\n+            pathToSpeechFiles.walk().forEach {\n+                it.delete()\n+            }\n+        }\n+    }\n+\n+    companion object {\n+        private val TAG = TextToSpeechHolder::class.java.simpleName\n+        private var textToSpeech: TextToSpeech? = null\n+        private var utteranceProgressListenerContainer: UtteranceProgressListenerContainer? = null\n+        @JvmStatic\n+        var instance: TextToSpeechHolder? = null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNDYxNg=="}, "originalCommit": {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434"}, "originalPosition": 97}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/f6101415eaf5a71e792becca347ee43ca0e64434", "committedDate": "2020-09-29T19:29:31Z", "message": "refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "b529d3577485e0f4cf4d67bdf945154957a9f517", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/b529d3577485e0f4cf4d67bdf945154957a9f517", "committedDate": "2020-10-22T10:04:27Z", "message": "refactor SpeakAction to Kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b529d3577485e0f4cf4d67bdf945154957a9f517", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/b529d3577485e0f4cf4d67bdf945154957a9f517", "committedDate": "2020-10-22T10:04:27Z", "message": "refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "83c0de25a8ae8fda9d08c2cafac83bf6f84197e8", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/83c0de25a8ae8fda9d08c2cafac83bf6f84197e8", "committedDate": "2020-10-22T12:55:43Z", "message": "refactor SpeakAction to Kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83c0de25a8ae8fda9d08c2cafac83bf6f84197e8", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/83c0de25a8ae8fda9d08c2cafac83bf6f84197e8", "committedDate": "2020-10-22T12:55:43Z", "message": "refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "b7e9ff1c6aa4de37a90e6dbc9acb35ae94e0c272", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/b7e9ff1c6aa4de37a90e6dbc9acb35ae94e0c272", "committedDate": "2020-10-29T16:13:53Z", "message": "refactor SpeakAction to Kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7e9ff1c6aa4de37a90e6dbc9acb35ae94e0c272", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/b7e9ff1c6aa4de37a90e6dbc9acb35ae94e0c272", "committedDate": "2020-10-29T16:13:53Z", "message": "refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "72db85a1f17253a3f8178fa8cfb7af5fbf50c5b0", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/72db85a1f17253a3f8178fa8cfb7af5fbf50c5b0", "committedDate": "2020-10-29T16:44:57Z", "message": "refactor SpeakAction to Kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72db85a1f17253a3f8178fa8cfb7af5fbf50c5b0", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/72db85a1f17253a3f8178fa8cfb7af5fbf50c5b0", "committedDate": "2020-10-29T16:44:57Z", "message": "refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "88ef50f6916b7e6f82772345f34b52f369e9b302", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/88ef50f6916b7e6f82772345f34b52f369e9b302", "committedDate": "2020-11-10T13:06:44Z", "message": "refactor SpeakAction to Kotlin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94af1fe1f223f53e6e194d6e8c8da2b9169d9a83", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/94af1fe1f223f53e6e194d6e8c8da2b9169d9a83", "committedDate": "2020-11-10T15:24:40Z", "message": "refactor SpeakAction to Kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88ef50f6916b7e6f82772345f34b52f369e9b302", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/88ef50f6916b7e6f82772345f34b52f369e9b302", "committedDate": "2020-11-10T13:06:44Z", "message": "refactor SpeakAction to Kotlin"}, "afterCommit": {"oid": "94af1fe1f223f53e6e194d6e8c8da2b9169d9a83", "author": {"user": {"login": "hofcle78", "name": "Clemens Hofmann"}}, "url": "https://github.com/Catrobat/Catroid/commit/94af1fe1f223f53e6e194d6e8c8da2b9169d9a83", "committedDate": "2020-11-10T15:24:40Z", "message": "refactor SpeakAction to Kotlin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MzQ4OTQz", "url": "https://github.com/Catrobat/Catroid/pull/3738#pullrequestreview-528348943", "createdAt": "2020-11-11T16:45:35Z", "commit": {"oid": "94af1fe1f223f53e6e194d6e8c8da2b9169d9a83"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2224, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}