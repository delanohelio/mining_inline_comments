{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMjI0MDUy", "number": 3896, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMzowMTozM1rOFJhZ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMzo0NjoyM1rOFJh_Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTI4ODAyOnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/RepeatActionTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMzowMTozM1rOIL5Dag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMzowMTozM1rOIL5Dag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0MDAxMA==", "bodyText": "Please use Kotlin functions instead and also don't push debug lines.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (index in 0 until iterations) {\n          \n          \n            \n                        var time = 0.0\n          \n          \n            \n                        println(\"index: $index\")\n          \n          \n            \n                        while (time < delayByContract) {\n          \n          \n            \n                            sprite.look.act(deltaDelayByContract)\n          \n          \n            \n                            time += deltaDelayByContract.toDouble()\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    repeat((iterations * delayByContract / deltaDelayByContract).toInt()){ sprite.look.act(deltaDelayByContract) }", "url": "https://github.com/Catrobat/Catroid/pull/3896#discussion_r549340010", "createdAt": "2020-12-28T13:01:33Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/RepeatActionTest.kt", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.Script\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.content.StartScript\n+import org.catrobat.catroid.content.bricks.ChangeYByNBrick\n+import org.catrobat.catroid.content.bricks.FormulaBrick\n+import org.catrobat.catroid.content.bricks.RepeatBrick\n+import org.catrobat.catroid.content.eventids.EventId\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.Sensors\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+\n+@RunWith(Parameterized::class)\n+class RepeatActionTest(\n+    private var iterations: Int,\n+    private var deltaY: Int,\n+    private var loopCondition: Formula?,\n+    private var beforeLoopBrick: FormulaBrick?,\n+    private var afterLoopBrick: FormulaBrick?,\n+    private var expectedValue: Int\n+) {\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+    private lateinit var script: Script\n+\n+    private val delayByContract = 0.020f\n+    private val deltaDelayByContract = 0.005f\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{index}\")\n+        fun parameters() = listOf(\n+            arrayOf(4, -10, Formula(4), null, ChangeYByNBrick(50), -40),\n+            arrayOf(8, -10, Formula(FormulaElement(FormulaElement.ElementType.SENSOR, Sensors.OBJECT_Y.name, null)),\n+                    ChangeYByNBrick(5), ChangeYByNBrick(50), 5),\n+            arrayOf(4, -1, Formula(-1), null, ChangeYByNBrick(10), 10),\n+            arrayOf(4, -1, Formula(0), null, ChangeYByNBrick(10), 10),\n+            arrayOf(4, -1, Formula(\"3\"), null, ChangeYByNBrick(10), 7),\n+            arrayOf(4, -1, Formula(Double.NaN), null, ChangeYByNBrick(10), 10))\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        sprite = Sprite(\"testSprite\")\n+        script = StartScript()\n+        project = Project(MockUtil.mockContextForProject(), \"testProject\")\n+        ProjectManager.getInstance().currentProject = project\n+    }\n+\n+    @Test\n+    fun testLoopDelay() {\n+        val repeatBrick = RepeatBrick(loopCondition)\n+        repeatBrick.addBrick(ChangeYByNBrick(deltaY))\n+        if (beforeLoopBrick != null) {\n+            script.addBrick(beforeLoopBrick)\n+        }\n+        script.addBrick(repeatBrick)\n+        if (afterLoopBrick != null) {\n+            script.addBrick(afterLoopBrick)\n+        }\n+        sprite.addScript(script)\n+        sprite.initializeEventThreads(EventId.START)\n+        for (index in 0 until iterations) {\n+            var time = 0.0\n+            println(\"index: $index\")\n+            while (time < delayByContract) {\n+                sprite.look.act(deltaDelayByContract)\n+                time += deltaDelayByContract.toDouble()\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf00caa32246112ce66179b4121e442d22c4c8d"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTMxOTA3OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/RepeatActionTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMzoxNjoxOVrOIL5Ubg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMzoxNjoxOVrOIL5Ubg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0NDM2Ng==", "bodyText": "Please remove beforeLoopBrick and afterLoopBrick, those two don't belong here and also falsify this test. Have a look at the original test and the repeat action.", "url": "https://github.com/Catrobat/Catroid/pull/3896#discussion_r549344366", "createdAt": "2020-12-28T13:16:19Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/RepeatActionTest.kt", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.Script\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.content.StartScript\n+import org.catrobat.catroid.content.bricks.ChangeYByNBrick\n+import org.catrobat.catroid.content.bricks.FormulaBrick\n+import org.catrobat.catroid.content.bricks.RepeatBrick\n+import org.catrobat.catroid.content.eventids.EventId\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.Sensors\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+\n+@RunWith(Parameterized::class)\n+class RepeatActionTest(\n+    private var iterations: Int,\n+    private var deltaY: Int,\n+    private var loopCondition: Formula?,\n+    private var beforeLoopBrick: FormulaBrick?,\n+    private var afterLoopBrick: FormulaBrick?,\n+    private var expectedValue: Int\n+) {\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+    private lateinit var script: Script\n+\n+    private val delayByContract = 0.020f\n+    private val deltaDelayByContract = 0.005f\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{index}\")\n+        fun parameters() = listOf(\n+            arrayOf(4, -10, Formula(4), null, ChangeYByNBrick(50), -40),\n+            arrayOf(8, -10, Formula(FormulaElement(FormulaElement.ElementType.SENSOR, Sensors.OBJECT_Y.name, null)),\n+                    ChangeYByNBrick(5), ChangeYByNBrick(50), 5),\n+            arrayOf(4, -1, Formula(-1), null, ChangeYByNBrick(10), 10),\n+            arrayOf(4, -1, Formula(0), null, ChangeYByNBrick(10), 10),\n+            arrayOf(4, -1, Formula(\"3\"), null, ChangeYByNBrick(10), 7),\n+            arrayOf(4, -1, Formula(Double.NaN), null, ChangeYByNBrick(10), 10))\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf00caa32246112ce66179b4121e442d22c4c8d"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTM4Mzk5OnYy", "diffSide": "RIGHT", "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/RepeatActionTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMzo0NjoyM1rOIL54KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMzo0NjoyM1rOIL54KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM1MzUxMw==", "bodyText": "Since there is a vast dependency between this test and ChangeYByNBrick, I suggest using a Brick-Mock/Stub with an Action-Mock instead. Afterward, verify how often this ActionMock was called.\nPlease also similarly refactor the language test (use counts instead of the position).", "url": "https://github.com/Catrobat/Catroid/pull/3896#discussion_r549353513", "createdAt": "2020-12-28T13:46:23Z", "author": {"login": "gPathpp"}, "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/RepeatActionTest.kt", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.Script\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.content.StartScript\n+import org.catrobat.catroid.content.bricks.ChangeYByNBrick\n+import org.catrobat.catroid.content.bricks.FormulaBrick\n+import org.catrobat.catroid.content.bricks.RepeatBrick\n+import org.catrobat.catroid.content.eventids.EventId\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.Sensors\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+\n+@RunWith(Parameterized::class)\n+class RepeatActionTest(\n+    private var iterations: Int,\n+    private var deltaY: Int,\n+    private var loopCondition: Formula?,\n+    private var beforeLoopBrick: FormulaBrick?,\n+    private var afterLoopBrick: FormulaBrick?,\n+    private var expectedValue: Int\n+) {\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+    private lateinit var script: Script\n+\n+    private val delayByContract = 0.020f\n+    private val deltaDelayByContract = 0.005f\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{index}\")\n+        fun parameters() = listOf(\n+            arrayOf(4, -10, Formula(4), null, ChangeYByNBrick(50), -40),\n+            arrayOf(8, -10, Formula(FormulaElement(FormulaElement.ElementType.SENSOR, Sensors.OBJECT_Y.name, null)),\n+                    ChangeYByNBrick(5), ChangeYByNBrick(50), 5),\n+            arrayOf(4, -1, Formula(-1), null, ChangeYByNBrick(10), 10),\n+            arrayOf(4, -1, Formula(0), null, ChangeYByNBrick(10), 10),\n+            arrayOf(4, -1, Formula(\"3\"), null, ChangeYByNBrick(10), 7),\n+            arrayOf(4, -1, Formula(Double.NaN), null, ChangeYByNBrick(10), 10))\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        sprite = Sprite(\"testSprite\")\n+        script = StartScript()\n+        project = Project(MockUtil.mockContextForProject(), \"testProject\")\n+        ProjectManager.getInstance().currentProject = project\n+    }\n+\n+    @Test\n+    fun testLoopDelay() {\n+        val repeatBrick = RepeatBrick(loopCondition)\n+        repeatBrick.addBrick(ChangeYByNBrick(deltaY))\n+        if (beforeLoopBrick != null) {\n+            script.addBrick(beforeLoopBrick)\n+        }\n+        script.addBrick(repeatBrick)\n+        if (afterLoopBrick != null) {\n+            script.addBrick(afterLoopBrick)\n+        }\n+        sprite.addScript(script)\n+        sprite.initializeEventThreads(EventId.START)\n+        for (index in 0 until iterations) {\n+            var time = 0.0\n+            println(\"index: $index\")\n+            while (time < delayByContract) {\n+                sprite.look.act(deltaDelayByContract)\n+                time += deltaDelayByContract.toDouble()\n+            }\n+        }\n+        Assert.assertEquals(expectedValue, sprite.look.yInUserInterfaceDimensionUnit.toInt())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf00caa32246112ce66179b4121e442d22c4c8d"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3719, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}