{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5Mjc1MzQ3", "number": 3923, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMDo1MDozNlrODcWrvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMDo1MDozNlrODcWrvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDU4MzY3OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/table/TableIndexManagerImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMDo1MDozNlrOFkXlJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMDo1MDozNlrOFkXlJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY3OTM5Nw==", "bodyText": "no need for the spy", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3923#discussion_r373679397", "createdAt": "2020-01-31T20:50:36Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/table/TableIndexManagerImplTest.java", "diffHunk": "@@ -1027,6 +1028,38 @@ public void testBuildTableIndexWithLock() throws Exception {\n \t\t\t\tany(Exception.class));\r\n \t}\r\n \t\r\n+\t/**\r\n+\t * An InvalidStatusTokenException should not cause the table's state to be set to failed.  Instead\r\n+\t * the rebuild should be restarted by pushing the message back on the queue.  \r\n+\t * @throws Exception\r\n+\t */\r\n+\t@Test\r\n+\tpublic void testBuildTableIndexWithLockInvalidStatusTokenException() throws Exception {\r\n+\t\twhen(mockManagerSupport.isIndexWorkRequired(tableId)).thenReturn(true);\r\n+\t\tString resetToken = \"resetToken\";\r\n+\t\twhen(mockManagerSupport.startTableProcessing(tableId)).thenReturn(resetToken);\r\n+\t\tString lastEtag = \"etag-1\";\r\n+\t\tList<TableChangeMetaData> list = setupMockChanges();\r\n+\t\tIterator<TableChangeMetaData> iterator = list.iterator();\r\n+\t\tlong targetChangeNumber = 1;\r\n+\t\twhen(mockManagerSupport.getLastTableChangeNumber(tableId)).thenReturn(Optional.of(targetChangeNumber));\r\n+\t\t\r\n+\t\tInvalidStatusTokenException exception = new InvalidStatusTokenException(\"wrong token\");\r\n+\t\tdoThrow(exception).when(mockManagerSupport).attemptToSetTableStatusToAvailable(tableId, resetToken, lastEtag);\r\n+\t\t\r\n+\t\tRecoverableMessageException result = assertThrows(RecoverableMessageException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\tmanagerSpy.buildTableIndexWithLock(mockCallback, tableId, iterator);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a4bde77c0de112e0cb75013dd6bf2ab7fee263"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3107, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}