{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNjc3MTA4", "number": 4233, "title": "Plfm 6508", "bodyText": "", "createdAt": "2020-12-02T01:25:17Z", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233", "merged": true, "mergeCommit": {"oid": "203839c5eb5f6dde1950a79d3e2b7fb91c6cf8e6"}, "closed": true, "closedAt": "2020-12-03T01:35:08Z", "author": {"login": "john-hill"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbUh8XAH2gAyNTMwNjc3MTA4OjQ0NTFhZWQzNzExOTIwNDhiZDVmMjc3ZTcwMGM2NjA2YzdlNDk1MDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiY7qcgFqTU0MzIzMzc1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4451aed371192048bd5f277e700c6606c7e49501", "author": {"user": {"login": "john-hill", "name": "John Hill"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4451aed371192048bd5f277e700c6606c7e49501", "committedDate": "2020-11-11T02:28:22Z", "message": "api object, ddl, and start of dao."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ba3d69bf9c68addf8a4976b2376a97fb9443fed", "author": {"user": {"login": "john-hill", "name": "John Hill"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4ba3d69bf9c68addf8a4976b2376a97fb9443fed", "committedDate": "2020-11-11T02:46:57Z", "message": "missing save"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95c0da72caa91f440f11e0f192fb65e84c5bc2bd", "author": {"user": {"login": "john-hill", "name": "John Hill"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/95c0da72caa91f440f11e0f192fb65e84c5bc2bd", "committedDate": "2020-11-13T03:06:05Z", "message": "started dao and dao test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2a712c42a7e3a28bffe777b5f13329f396222e2", "author": {"user": {"login": "john-hill", "name": "John Hill"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/f2a712c42a7e3a28bffe777b5f13329f396222e2", "committedDate": "2020-12-02T00:19:55Z", "message": "tests for add"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1717c831178ed8c6355ddf080a97907281a757b0", "author": {"user": {"login": "john-hill", "name": "John Hill"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/1717c831178ed8c6355ddf080a97907281a757b0", "committedDate": "2020-12-02T01:23:37Z", "message": "tests for clear and remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377", "author": {"user": {"login": "john-hill", "name": "John Hill"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/0d33c312c095b8f4b610f71c6ddd6a23f8bd1377", "committedDate": "2020-12-02T01:40:45Z", "message": "missing migration registration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMjMzNzU4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#pullrequestreview-543233758", "createdAt": "2020-12-02T21:02:04Z", "commit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "state": "APPROVED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTowMjowNFrOH9uAbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMToyNDozNFrOH91L0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ3ODk1OQ==", "bodyText": "Wrong import", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534478959", "createdAt": "2020-12-02T21:02:04Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/file/download/DBODownloadList.java", "diffHunk": "@@ -10,6 +10,7 @@\n import java.sql.SQLException;\n import java.util.List;\n \n+import org.checkerframework.checker.units.qual.degrees;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ3OTgyNg==", "bodyText": "Maybe we can use V2_ as other tables", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534479826", "createdAt": "2020-12-02T21:03:44Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/resources/schema/DownloadList-2-ddl.sql", "diffHunk": "@@ -0,0 +1,7 @@\n+CREATE TABLE IF NOT EXISTS `DOWNLOAD_LIST_2` (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MTAyMw==", "bodyText": "If we have a special default let us be explicit", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534481023", "createdAt": "2020-12-02T21:05:56Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/resources/schema/DownloadListItem-2-ddl.sql", "diffHunk": "@@ -0,0 +1,9 @@\n+CREATE TABLE IF NOT EXISTS `DOWNLOAD_LIST_ITEM_2` (\n+  `PRINCIPAL_ID` BIGINT NOT NULL,\n+  `ENTITY_ID` BIGINT NOT NULL,\n+  `VERSION_NUMBER` BIGINT NOT NULL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MjU2Mg==", "bodyText": "You might not need a specific index here", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534482562", "createdAt": "2020-12-02T21:08:56Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/resources/schema/DownloadListItem-2-ddl.sql", "diffHunk": "@@ -0,0 +1,9 @@\n+CREATE TABLE IF NOT EXISTS `DOWNLOAD_LIST_ITEM_2` (\n+  `PRINCIPAL_ID` BIGINT NOT NULL,\n+  `ENTITY_ID` BIGINT NOT NULL,\n+  `VERSION_NUMBER` BIGINT NOT NULL,\n+  `ADDED_ON` TIMESTAMP(3) NOT NULL,\n+  PRIMARY KEY (`PRINCIPAL_ID`, `ENTITY_ID`, `VERSION_NUMBER`),\n+  INDEX (`PRINCIPAL_ID`),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MzQ2Mw==", "bodyText": "Don't need the comma", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534483463", "createdAt": "2020-12-02T21:10:32Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/file/download/v2/DBODownloadList.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package org.sagebionetworks.repo.model.dbo.file.download.v2;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_2_ETAG;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_2_PRINCIPAL_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_2_UPDATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.DDL_DOWNLOAD_2_LIST;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_DOWNLOAD_LIST_2;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.sagebionetworks.repo.model.dbo.FieldColumn;\n+import org.sagebionetworks.repo.model.dbo.MigratableDatabaseObject;\n+import org.sagebionetworks.repo.model.dbo.TableMapping;\n+import org.sagebionetworks.repo.model.dbo.migration.BasicMigratableTableTranslation;\n+import org.sagebionetworks.repo.model.dbo.migration.MigratableTableTranslation;\n+import org.sagebionetworks.repo.model.migration.MigrationType;\n+\n+import com.google.common.collect.Lists;\n+\n+public class DBODownloadList implements MigratableDatabaseObject<DBODownloadList, DBODownloadList> {\n+\n+\tprivate Long principalId;\n+\tprivate Timestamp updatedOn;\n+\tprivate String etag;\n+\n+\tprivate static FieldColumn[] FIELDS = new FieldColumn[] {\n+\t\t\tnew FieldColumn(\"principalId\", COL_DOWNLOAD_LIST_2_PRINCIPAL_ID, true).withIsBackupId(true),\n+\t\t\tnew FieldColumn(\"etag\", COL_DOWNLOAD_LIST_2_ETAG).withIsEtag(true),\n+\t\t\tnew FieldColumn(\"updatedOn\", COL_DOWNLOAD_LIST_2_UPDATED_ON), };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4NTEwNA==", "bodyText": "Let us capitalize enums? and maybe we can use the ASC, DESC?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534485104", "createdAt": "2020-12-02T21:13:44Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/download/SortDirection.json", "diffHunk": "@@ -0,0 +1,15 @@\n+{\n+    \"description\": \"Direction of a sort.\",\n+    \"name\": \"SortDirection\",\n+    \"type\": \"string\",\n+    \"enum\": [\n+        {\n+            \"name\": \"ascending\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4NzI5MQ==", "bodyText": "Maybe we should renamed this to avoid confusions, maybe just DownloadItem? Might be very similar to the DowloadListItem above.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534487291", "createdAt": "2020-12-02T21:17:49Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/download/IdAndVersion.json", "diffHunk": "@@ -0,0 +1,13 @@\n+{\n+\t\"description\": \"Identifies a specific version of an entity\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5MjYxNg==", "bodyText": "Maybe we should name this SortField?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534492616", "createdAt": "2020-12-02T21:27:47Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/download/ColumnName.json", "diffHunk": "@@ -0,0 +1,35 @@\n+{\n+    \"description\": \"Enumeration of the columns of a user's download list.\",\n+    \"name\": \"ColumnName\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5MzQ1OA==", "bodyText": "Maybe let us keep consistency in naming? E. g. Below we use fileEntityId", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534493458", "createdAt": "2020-12-02T21:29:20Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/download/ColumnName.json", "diffHunk": "@@ -0,0 +1,35 @@\n+{\n+    \"description\": \"Enumeration of the columns of a user's download list.\",\n+    \"name\": \"ColumnName\",\n+    \"type\": \"string\",\n+    \"enum\": [\n+        {\n+            \"name\": \"fileName\",\n+            \"description\": \"The name of the file entity.\"\n+        },\n+        {\n+            \"name\": \"projectName\",\n+            \"description\": \"The name of the file's project.\"\n+        },\n+        {\n+            \"name\": \"synId\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5NTMyNA==", "bodyText": "Maybe nameFilter?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534495324", "createdAt": "2020-12-02T21:32:50Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/download/DownloadListPageRequest.json", "diffHunk": "@@ -0,0 +1,21 @@\n+{\n+\t\"description\": \"Request to get a single page of files from the user's download list for files that are currently available for download.\",\n+\t\"properties\": {\n+\t\t\"nextPageToken\": {\n+\t\t\t\"description\": \"Forward the resulting nextPageToken from a previous request to get the next page of results\",\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"sortByColumn\": {\n+\t\t\t\"description\": \"Identifies the column to be used to sort the results.\",\n+\t\t\t\"$ref\": \"org.sagebionetworks.repo.model.download.ColumnName\"\n+\t\t},\n+\t\t\"sortByDirection\": {\n+\t\t\t\"description\": \"Identifies the direction of the sort.\",\n+\t\t\t\"$ref\": \"org.sagebionetworks.repo.model.download.SortDirection\"\n+\t\t},\n+\t\t\"nameContains\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5NTYwMw==", "bodyText": "Might be worth supporting multiple sort columns", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534495603", "createdAt": "2020-12-02T21:33:24Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/download/DownloadListPageRequest.json", "diffHunk": "@@ -0,0 +1,21 @@\n+{\n+\t\"description\": \"Request to get a single page of files from the user's download list for files that are currently available for download.\",\n+\t\"properties\": {\n+\t\t\"nextPageToken\": {\n+\t\t\t\"description\": \"Forward the resulting nextPageToken from a previous request to get the next page of results\",\n+\t\t\t\"type\": \"string\"\n+\t\t},\n+\t\t\"sortByColumn\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU5MDE2MQ==", "bodyText": "We could cache the addedOn and use the same for all the items in the batch (e.g. for debugging)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534590161", "createdAt": "2020-12-03T01:08:14Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/file/download/v2/DownloadListDAOImpl.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.sagebionetworks.repo.model.dbo.file.download.v2;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_2_ETAG;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_2_PRINCIPAL_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_2_UPDATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_ITEM_2_ADDED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_ITEM_2_ENTITY_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_ITEM_2_PRINCIPAL_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_ITEM_2_VERION_NUMBER;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_DOWNLOAD_LIST_2;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_DOWNLOAD_LIST_ITEM_2;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+\n+import org.sagebionetworks.repo.model.download.ColumnName;\n+import org.sagebionetworks.repo.model.download.DownloadListItem;\n+import org.sagebionetworks.repo.model.download.IdAndVersion;\n+import org.sagebionetworks.repo.model.download.SortDirection;\n+import org.sagebionetworks.repo.model.jdo.KeyFactory;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.BatchPreparedStatementSetter;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class DownloadListDAOImpl implements DownloadListDAO {\n+\n+\tpublic static final Long NULL_VERSION_NUMBER = -1L;\n+\n+\t@Autowired\n+\tprivate JdbcTemplate jdbcTemplate;\n+\n+\tprivate static final RowMapper<DBODownloadList> LIST_MAPPER = new DBODownloadList().getTableMapping();\n+\tprivate static final RowMapper<DBODownloadListItem> LIST_ITEM_MAPPER = new DBODownloadListItem().getTableMapping();\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic long addBatchOfFilesToDownloadList(Long userId, List<IdAndVersion> batchToAdd) {\n+\t\tValidateArgument.required(userId, \"User Id\");\n+\t\tif (batchToAdd == null || batchToAdd.isEmpty()) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tcreateOrUpdateDownloadList(userId);\n+\t\tIdAndVersion[] batchArray = batchToAdd.toArray(new IdAndVersion[batchToAdd.size()]);\n+\t\tint[] updates = jdbcTemplate.batchUpdate(\n+\t\t\t\t\"INSERT IGNORE INTO \" + TABLE_DOWNLOAD_LIST_ITEM_2 + \" (\" + COL_DOWNLOAD_LIST_ITEM_2_PRINCIPAL_ID + \",\"\n+\t\t\t\t\t\t+ COL_DOWNLOAD_LIST_ITEM_2_ENTITY_ID + \",\" + COL_DOWNLOAD_LIST_ITEM_2_VERION_NUMBER + \",\"\n+\t\t\t\t\t\t+ COL_DOWNLOAD_LIST_ITEM_2_ADDED_ON + \")  VALUES(?,?,?,NOW())\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU5MjMzNw==", "bodyText": "Let add a test for this particular egde case (e.g. valid json array: [null, \"123\"]) and maybe improve the error message.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534592337", "createdAt": "2020-12-03T01:13:55Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/file/download/v2/DownloadListDAOImpl.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.sagebionetworks.repo.model.dbo.file.download.v2;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_2_ETAG;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_2_PRINCIPAL_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_2_UPDATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_ITEM_2_ADDED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_ITEM_2_ENTITY_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_ITEM_2_PRINCIPAL_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_ITEM_2_VERION_NUMBER;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_DOWNLOAD_LIST_2;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_DOWNLOAD_LIST_ITEM_2;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+\n+import org.sagebionetworks.repo.model.download.ColumnName;\n+import org.sagebionetworks.repo.model.download.DownloadListItem;\n+import org.sagebionetworks.repo.model.download.IdAndVersion;\n+import org.sagebionetworks.repo.model.download.SortDirection;\n+import org.sagebionetworks.repo.model.jdo.KeyFactory;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.BatchPreparedStatementSetter;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class DownloadListDAOImpl implements DownloadListDAO {\n+\n+\tpublic static final Long NULL_VERSION_NUMBER = -1L;\n+\n+\t@Autowired\n+\tprivate JdbcTemplate jdbcTemplate;\n+\n+\tprivate static final RowMapper<DBODownloadList> LIST_MAPPER = new DBODownloadList().getTableMapping();\n+\tprivate static final RowMapper<DBODownloadListItem> LIST_ITEM_MAPPER = new DBODownloadListItem().getTableMapping();\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic long addBatchOfFilesToDownloadList(Long userId, List<IdAndVersion> batchToAdd) {\n+\t\tValidateArgument.required(userId, \"User Id\");\n+\t\tif (batchToAdd == null || batchToAdd.isEmpty()) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tcreateOrUpdateDownloadList(userId);\n+\t\tIdAndVersion[] batchArray = batchToAdd.toArray(new IdAndVersion[batchToAdd.size()]);\n+\t\tint[] updates = jdbcTemplate.batchUpdate(\n+\t\t\t\t\"INSERT IGNORE INTO \" + TABLE_DOWNLOAD_LIST_ITEM_2 + \" (\" + COL_DOWNLOAD_LIST_ITEM_2_PRINCIPAL_ID + \",\"\n+\t\t\t\t\t\t+ COL_DOWNLOAD_LIST_ITEM_2_ENTITY_ID + \",\" + COL_DOWNLOAD_LIST_ITEM_2_VERION_NUMBER + \",\"\n+\t\t\t\t\t\t+ COL_DOWNLOAD_LIST_ITEM_2_ADDED_ON + \")  VALUES(?,?,?,NOW())\",\n+\t\t\t\tnew BatchPreparedStatementSetter() {\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void setValues(PreparedStatement ps, int i) throws SQLException {\n+\t\t\t\t\t\tIdAndVersion idAndVersion = batchArray[i];\n+\n+\t\t\t\t\t\tif (idAndVersion == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU5NDYxNg==", "bodyText": "We could check that the current updated on is after the start updatedOn", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534594616", "createdAt": "2020-12-03T01:19:43Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/file/download/v2/DownloadListDaoImplTest.java", "diffHunk": "@@ -0,0 +1,363 @@\n+package org.sagebionetworks.repo.model.dbo.file.download.v2;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.sagebionetworks.repo.model.UserGroup;\n+import org.sagebionetworks.repo.model.UserGroupDAO;\n+import org.sagebionetworks.repo.model.download.IdAndVersion;\n+import org.sagebionetworks.repo.model.jdo.KeyFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import com.google.common.collect.Lists;\n+\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(locations = { \"classpath:jdomodels-test-context.xml\" })\n+public class DownloadListDaoImplTest {\n+\n+\t@Autowired\n+\tprivate UserGroupDAO userGroupDao;\n+\t@Autowired\n+\tprivate DownloadListDAO downloadListDao;\n+\n+\tLong userOneIdLong;\n+\tString userOneId;\n+\n+\tLong userTwoIdLong;\n+\tString userTwoId;\n+\n+\tList<IdAndVersion> idsWithVersions;\n+\tList<IdAndVersion> idsWithoutVersions;\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tdownloadListDao.truncateAllData();\n+\t\tUserGroup ug = new UserGroup();\n+\t\tug.setCreationDate(new Date(System.currentTimeMillis()));\n+\t\tug.setIsIndividual(true);\n+\t\tuserOneIdLong = userGroupDao.create(ug);\n+\t\tuserOneId = \"\" + userOneIdLong;\n+\t\t// second user\n+\t\tug = new UserGroup();\n+\t\tug.setCreationDate(new Date(System.currentTimeMillis()));\n+\t\tug.setIsIndividual(true);\n+\t\tuserTwoIdLong = userGroupDao.create(ug);\n+\t\tuserTwoId = \"\" + userTwoIdLong;\n+\n+\t\tint numberOfIds = 4;\n+\t\tidsWithVersions = new ArrayList<IdAndVersion>(numberOfIds);\n+\t\tidsWithoutVersions = new ArrayList<IdAndVersion>(numberOfIds);\n+\t\tfor (int i = 0; i < numberOfIds; i++) {\n+\n+\t\t\tIdAndVersion idWithVersion = new IdAndVersion();\n+\t\t\tidWithVersion.setEntityId(\"syn\" + i);\n+\t\t\tidWithVersion.setVersionNumber(new Long(i));\n+\t\t\tidsWithVersions.add(idWithVersion);\n+\n+\t\t\tIdAndVersion idWithoutVersion = new IdAndVersion();\n+\t\t\tidWithoutVersion.setEntityId(\"syn\" + (i + numberOfIds + 1));\n+\t\t\tidWithoutVersion.setVersionNumber(null);\n+\t\t\tidsWithoutVersions.add(idWithoutVersion);\n+\t\t}\n+\t}\n+\n+\t@AfterEach\n+\tpublic void after() {\n+\t\tif (userOneId != null) {\n+\t\t\tuserGroupDao.delete(userOneId);\n+\n+\t\t}\n+\t\tif (userTwoId != null) {\n+\t\t\tuserGroupDao.delete(userTwoId);\n+\t\t}\n+\t\tdownloadListDao.truncateAllData();\n+\t}\n+\n+\t@Test\n+\tpublic void testAddBatchOfFilesToDownloadListWithNullUserId() {\n+\t\tList<IdAndVersion> batch = Lists.newArrayList(idsWithVersions.get(0), idsWithoutVersions.get(0));\n+\t\tString message = assertThrows(IllegalArgumentException.class, () -> {\n+\t\t\tLong nullUserId = null;\n+\t\t\t// call under test\n+\t\t\tdownloadListDao.addBatchOfFilesToDownloadList(nullUserId, batch);\n+\t\t}).getMessage();\n+\t\tassertEquals(\"User Id is required.\", message);\n+\t}\n+\n+\t@Test\n+\tpublic void testAddBatchOfFilesToDownloadListWithNullEntityId() {\n+\t\tIdAndVersion id = idsWithVersions.get(0);\n+\t\tid.setEntityId(null);\n+\t\tList<IdAndVersion> batch = Lists.newArrayList(id);\n+\t\tString message = assertThrows(IllegalArgumentException.class, () -> {\n+\t\t\t// call under test\n+\t\t\tdownloadListDao.addBatchOfFilesToDownloadList(userOneIdLong, batch);\n+\t\t}).getMessage();\n+\t\tassertEquals(\"Null entityId at index: 0\", message);\n+\t}\n+\n+\t@Test\n+\tpublic void testAddBatchOfFilesToDownloadListWithNullBatch() {\n+\t\tList<IdAndVersion> batch = null;\n+\t\t// call under test\n+\t\tlong addedCount = downloadListDao.addBatchOfFilesToDownloadList(userOneIdLong, batch);\n+\t\tassertEquals(0, addedCount);\n+\t}\n+\n+\t@Test\n+\tpublic void testAddBatchOfFilesToDownloadListWithEmptyBatch() {\n+\t\tList<IdAndVersion> batch = Collections.emptyList();\n+\t\t// call under test\n+\t\tlong addedCount = downloadListDao.addBatchOfFilesToDownloadList(userOneIdLong, batch);\n+\t\tassertEquals(0, addedCount);\n+\t}\n+\n+\t@Test\n+\tpublic void testAddBatchOfFiles() {\n+\t\tList<IdAndVersion> batch = Lists.newArrayList(idsWithVersions.get(0), idsWithoutVersions.get(0));\n+\t\t// call under test\n+\t\tlong addedCount = downloadListDao.addBatchOfFilesToDownloadList(userOneIdLong, batch);\n+\t\tassertEquals(2, addedCount);\n+\t\tvalidateDBODownloadList(userOneIdLong, downloadListDao.getDBODownloadList(userOneIdLong));\n+\n+\t\tList<DBODownloadListItem> items = downloadListDao.getDBODownloadListItems(userOneIdLong);\n+\t\tcompareIdAndVersionToListItem(userOneIdLong, batch, items);\n+\t}\n+\n+\t@Test\n+\tpublic void testAddBatchOfFilesToDownloadListWithUpdate() throws InterruptedException {\n+\t\tList<IdAndVersion> batch = Lists.newArrayList(idsWithVersions.get(0), idsWithoutVersions.get(0));\n+\t\t// call under test\n+\t\tlong addedCount = downloadListDao.addBatchOfFilesToDownloadList(userOneIdLong, batch);\n+\t\tassertEquals(2, addedCount);\n+\t\tDBODownloadList startingDBOList = downloadListDao.getDBODownloadList(userOneIdLong);\n+\t\tassertNotNull(startingDBOList);\n+\t\tassertEquals(userOneIdLong, startingDBOList.getPrincipalId());\n+\t\tassertNotNull(startingDBOList.getEtag());\n+\t\tassertNotNull(startingDBOList.getUpdatedOn());\n+\t\t// add one item to the batch\n+\t\tbatch.add(idsWithoutVersions.get(1));\n+\t\t// sleep to unsure the updated on changes\n+\t\tThread.sleep(1000);\n+\t\t// call under test\n+\t\taddedCount = downloadListDao.addBatchOfFilesToDownloadList(userOneIdLong, batch);\n+\t\t// only one file should be added since the first two in the batch are already on\n+\t\t// the list.\n+\t\tassertEquals(1, addedCount);\n+\t\tDBODownloadList currentDBOList = downloadListDao.getDBODownloadList(userOneIdLong);\n+\t\tvalidateListChanged(startingDBOList, currentDBOList);\n+\t\tcompareIdAndVersionToListItem(userOneIdLong, batch, downloadListDao.getDBODownloadListItems(userOneIdLong));\n+\t}\n+\n+\t@Test\n+\tpublic void testAddBatchOfFilesToDownloadListWithMultipleUsers() {\n+\t\tList<IdAndVersion> userOneBatch = Lists.newArrayList(idsWithVersions.get(0), idsWithoutVersions.get(0));\n+\t\t// call under test\n+\t\tlong addedCount = downloadListDao.addBatchOfFilesToDownloadList(userOneIdLong, userOneBatch);\n+\t\tassertEquals(userOneBatch.size(), addedCount);\n+\n+\t\tList<IdAndVersion> userTwoBatch = Lists.newArrayList(idsWithVersions.get(0), idsWithoutVersions.get(1));\n+\t\t// call under test\n+\t\taddedCount = downloadListDao.addBatchOfFilesToDownloadList(userTwoIdLong, userTwoBatch);\n+\t\tassertEquals(userOneBatch.size(), addedCount);\n+\n+\t\tcompareIdAndVersionToListItem(userOneIdLong, userOneBatch,\n+\t\t\t\tdownloadListDao.getDBODownloadListItems(userOneIdLong));\n+\t\tvalidateDBODownloadList(userOneIdLong, downloadListDao.getDBODownloadList(userOneIdLong));\n+\t\tcompareIdAndVersionToListItem(userTwoIdLong, userTwoBatch,\n+\t\t\t\tdownloadListDao.getDBODownloadListItems(userTwoIdLong));\n+\t\tvalidateDBODownloadList(userTwoIdLong, downloadListDao.getDBODownloadList(userTwoIdLong));\n+\t}\n+\n+\t@Test\n+\tpublic void testRemoveBatchOfFilesFromDownloadListWithNullUser() {\n+\t\tList<IdAndVersion> batchToRemove = Lists.newArrayList(idsWithVersions.get(1), idsWithoutVersions.get(0));\n+\t\tString message = assertThrows(IllegalArgumentException.class, () -> {\n+\t\t\tLong nullUserId = null;\n+\t\t\t// call under test\n+\t\t\tdownloadListDao.removeBatchOfFilesFromDownloadList(nullUserId, batchToRemove);\n+\t\t}).getMessage();\n+\t\tassertEquals(\"User Id is required.\", message);\n+\t}\n+\n+\t@Test\n+\tpublic void testRemoveBatchOfFilesFromDownloadListWithNullBatch() {\n+\t\tList<IdAndVersion> batchToRemove = null;\n+\t\t// call under test\n+\t\tlong removeCount = downloadListDao.removeBatchOfFilesFromDownloadList(userOneIdLong, batchToRemove);\n+\t\tassertEquals(0L, removeCount);\n+\t}\n+\n+\t@Test\n+\tpublic void testRemoveBatchOfFilesFromDownloadListWithEmptyBatch() {\n+\t\tList<IdAndVersion> batchToRemove = Collections.emptyList();\n+\t\t// call under test\n+\t\tlong removeCount = downloadListDao.removeBatchOfFilesFromDownloadList(userOneIdLong, batchToRemove);\n+\t\tassertEquals(0L, removeCount);\n+\t}\n+\n+\t@Test\n+\tpublic void testRemoveBatchOfFilesToDownloadListWithNullEntityId() {\n+\t\tIdAndVersion id = idsWithVersions.get(0);\n+\t\tid.setEntityId(null);\n+\t\tList<IdAndVersion> batch = Lists.newArrayList(id);\n+\t\tString message = assertThrows(IllegalArgumentException.class, () -> {\n+\t\t\t// call under test\n+\t\t\tdownloadListDao.removeBatchOfFilesFromDownloadList(userOneIdLong, batch);\n+\t\t}).getMessage();\n+\t\tassertEquals(\"Null entityId at index: 0\", message);\n+\t}\n+\n+\t@Test\n+\tpublic void testRemoveBatchOfFilesFromDownloadList() throws InterruptedException {\n+\t\tList<IdAndVersion> startBatch = Lists.newArrayList(idsWithVersions.get(1), idsWithoutVersions.get(1),\n+\t\t\t\tidsWithVersions.get(0), idsWithoutVersions.get(0));\n+\t\tdownloadListDao.addBatchOfFilesToDownloadList(userOneIdLong, startBatch);\n+\t\tDBODownloadList listStart = downloadListDao.getDBODownloadList(userOneIdLong);\n+\t\tvalidateDBODownloadList(userOneIdLong, listStart);\n+\t\tList<IdAndVersion> batchToRemove = Lists.newArrayList(idsWithVersions.get(1), idsWithoutVersions.get(0));\n+\t\t// sleep to unsure the updated on changes\n+\t\tThread.sleep(1000);\n+\t\t// call under test\n+\t\tlong removedCount = downloadListDao.removeBatchOfFilesFromDownloadList(userOneIdLong, batchToRemove);\n+\t\tassertEquals(2L, removedCount);\n+\t\t// the download list etag must be updated\n+\t\tvalidateListChanged(listStart, downloadListDao.getDBODownloadList(userOneIdLong));\n+\n+\t\tList<IdAndVersion> expectedIds = Lists.newArrayList(idsWithVersions.get(0), idsWithoutVersions.get(1));\n+\t\tcompareIdAndVersionToListItem(userOneIdLong, expectedIds,\n+\t\t\t\tdownloadListDao.getDBODownloadListItems(userOneIdLong));\n+\t}\n+\n+\t@Test\n+\tpublic void testRemoveBatchOfFilesToDownloadListWithMultipleUsers() {\n+\t\tList<IdAndVersion> userOneBatch = Lists.newArrayList(idsWithVersions.get(0), idsWithoutVersions.get(0));\n+\t\tlong addedCount = downloadListDao.addBatchOfFilesToDownloadList(userOneIdLong, userOneBatch);\n+\t\tassertEquals(userOneBatch.size(), addedCount);\n+\t\tList<IdAndVersion> userTwoBatch = Lists.newArrayList(idsWithVersions.get(0), idsWithoutVersions.get(1));\n+\t\taddedCount = downloadListDao.addBatchOfFilesToDownloadList(userTwoIdLong, userTwoBatch);\n+\t\tassertEquals(userOneBatch.size(), addedCount);\n+\n+\t\t// remove the common element.\n+\t\tList<IdAndVersion> batchToRemove = Lists.newArrayList(idsWithVersions.get(0));\n+\t\t// call under test\n+\t\tlong removeCount = downloadListDao.removeBatchOfFilesFromDownloadList(userOneIdLong, batchToRemove);\n+\t\tassertEquals(1L, removeCount);\n+\t\tList<IdAndVersion> expectedUserOneList = Lists.newArrayList(idsWithoutVersions.get(0));\n+\t\tcompareIdAndVersionToListItem(userOneIdLong, expectedUserOneList,\n+\t\t\t\tdownloadListDao.getDBODownloadListItems(userOneIdLong));\n+\t\t// the second user's list must be unchanged.\n+\t\tcompareIdAndVersionToListItem(userTwoIdLong, userTwoBatch,\n+\t\t\t\tdownloadListDao.getDBODownloadListItems(userTwoIdLong));\n+\t}\n+\n+\t@Test\n+\tpublic void testClearDownloadList() throws InterruptedException {\n+\t\tList<IdAndVersion> startBatch = Lists.newArrayList(idsWithVersions.get(1), idsWithoutVersions.get(1));\n+\t\tdownloadListDao.addBatchOfFilesToDownloadList(userOneIdLong, startBatch);\n+\t\tDBODownloadList listStart = downloadListDao.getDBODownloadList(userOneIdLong);\n+\t\t// sleep to unsure the updated on changes\n+\t\tThread.sleep(1000);\n+\t\t// call under test\n+\t\tdownloadListDao.clearDownloadList(userOneIdLong);\n+\t\tcompareIdAndVersionToListItem(userOneIdLong, Collections.emptyList(),\n+\t\t\t\tdownloadListDao.getDBODownloadListItems(userOneIdLong));\n+\t\tvalidateListChanged(listStart, downloadListDao.getDBODownloadList(userOneIdLong));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testClearDownloadListWithMultipleUsers() {\n+\t\tList<IdAndVersion> userOneBatch = Lists.newArrayList(idsWithVersions.get(0), idsWithoutVersions.get(0));\n+\t\tdownloadListDao.addBatchOfFilesToDownloadList(userOneIdLong, userOneBatch);\n+\t\tList<IdAndVersion> userTwoBatch = Lists.newArrayList(idsWithVersions.get(0), idsWithoutVersions.get(1));\n+\t\tdownloadListDao.addBatchOfFilesToDownloadList(userTwoIdLong, userTwoBatch);\n+\t\t\n+\t\t// call under test\n+\t\tdownloadListDao.clearDownloadList(userOneIdLong);\n+\t\tcompareIdAndVersionToListItem(userOneIdLong, Collections.emptyList(),\n+\t\t\t\tdownloadListDao.getDBODownloadListItems(userOneIdLong));\n+\t\t// second user should remain unchanged\n+\t\tcompareIdAndVersionToListItem(userTwoIdLong, userTwoBatch,\n+\t\t\t\tdownloadListDao.getDBODownloadListItems(userTwoIdLong));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testClearDownloadListWithNullUserId() {\n+\t\tString message = assertThrows(IllegalArgumentException.class, ()->{\n+\t\t\tLong nullUserId = null;\n+\t\t\t// call under test\n+\t\t\tdownloadListDao.clearDownloadList(nullUserId);\n+\t\t}).getMessage();\n+\t\tassertEquals(\"User Id is required.\", message);\n+\t}\n+\t\n+\n+\t/**\n+\t * Helper to validate a download list.\n+\t * \n+\t * @param principalId\n+\t * @param list\n+\t */\n+\tpublic static void validateDBODownloadList(Long principalId, DBODownloadList list) {\n+\t\tassertNotNull(list);\n+\t\tassertEquals(principalId, list.getPrincipalId());\n+\t\tassertNotNull(list.getEtag());\n+\t\tassertNotNull(list.getUpdatedOn());\n+\t}\n+\n+\t/**\n+\t * Helper to validate that the current download list has a new etag and\n+\t * updatedOn.\n+\t * \n+\t * @param start\n+\t * @param current\n+\t */\n+\tpublic static void validateListChanged(DBODownloadList start, DBODownloadList current) {\n+\t\tassertNotNull(start);\n+\t\tassertNotNull(current);\n+\t\tassertEquals(start.getPrincipalId(), current.getPrincipalId());\n+\t\tassertNotEquals(start.getEtag(), current.getEtag());\n+\t\tassertNotEquals(start.getUpdatedOn(), current.getUpdatedOn());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU5NTg3Ng==", "bodyText": "We can avoid using guava, e.g. Arrays.asList()", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534595876", "createdAt": "2020-12-03T01:22:49Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/file/download/v2/DownloadListDaoImplTest.java", "diffHunk": "@@ -0,0 +1,363 @@\n+package org.sagebionetworks.repo.model.dbo.file.download.v2;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.sagebionetworks.repo.model.UserGroup;\n+import org.sagebionetworks.repo.model.UserGroupDAO;\n+import org.sagebionetworks.repo.model.download.IdAndVersion;\n+import org.sagebionetworks.repo.model.jdo.KeyFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import com.google.common.collect.Lists;\n+\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(locations = { \"classpath:jdomodels-test-context.xml\" })\n+public class DownloadListDaoImplTest {\n+\n+\t@Autowired\n+\tprivate UserGroupDAO userGroupDao;\n+\t@Autowired\n+\tprivate DownloadListDAO downloadListDao;\n+\n+\tLong userOneIdLong;\n+\tString userOneId;\n+\n+\tLong userTwoIdLong;\n+\tString userTwoId;\n+\n+\tList<IdAndVersion> idsWithVersions;\n+\tList<IdAndVersion> idsWithoutVersions;\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tdownloadListDao.truncateAllData();\n+\t\tUserGroup ug = new UserGroup();\n+\t\tug.setCreationDate(new Date(System.currentTimeMillis()));\n+\t\tug.setIsIndividual(true);\n+\t\tuserOneIdLong = userGroupDao.create(ug);\n+\t\tuserOneId = \"\" + userOneIdLong;\n+\t\t// second user\n+\t\tug = new UserGroup();\n+\t\tug.setCreationDate(new Date(System.currentTimeMillis()));\n+\t\tug.setIsIndividual(true);\n+\t\tuserTwoIdLong = userGroupDao.create(ug);\n+\t\tuserTwoId = \"\" + userTwoIdLong;\n+\n+\t\tint numberOfIds = 4;\n+\t\tidsWithVersions = new ArrayList<IdAndVersion>(numberOfIds);\n+\t\tidsWithoutVersions = new ArrayList<IdAndVersion>(numberOfIds);\n+\t\tfor (int i = 0; i < numberOfIds; i++) {\n+\n+\t\t\tIdAndVersion idWithVersion = new IdAndVersion();\n+\t\t\tidWithVersion.setEntityId(\"syn\" + i);\n+\t\t\tidWithVersion.setVersionNumber(new Long(i));\n+\t\t\tidsWithVersions.add(idWithVersion);\n+\n+\t\t\tIdAndVersion idWithoutVersion = new IdAndVersion();\n+\t\t\tidWithoutVersion.setEntityId(\"syn\" + (i + numberOfIds + 1));\n+\t\t\tidWithoutVersion.setVersionNumber(null);\n+\t\t\tidsWithoutVersions.add(idWithoutVersion);\n+\t\t}\n+\t}\n+\n+\t@AfterEach\n+\tpublic void after() {\n+\t\tif (userOneId != null) {\n+\t\t\tuserGroupDao.delete(userOneId);\n+\n+\t\t}\n+\t\tif (userTwoId != null) {\n+\t\t\tuserGroupDao.delete(userTwoId);\n+\t\t}\n+\t\tdownloadListDao.truncateAllData();\n+\t}\n+\n+\t@Test\n+\tpublic void testAddBatchOfFilesToDownloadListWithNullUserId() {\n+\t\tList<IdAndVersion> batch = Lists.newArrayList(idsWithVersions.get(0), idsWithoutVersions.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU5NjU2MA==", "bodyText": "You might want to add an explicit order by to avoid random future test failures", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4233#discussion_r534596560", "createdAt": "2020-12-03T01:24:34Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/file/download/v2/DownloadListDAOImpl.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.sagebionetworks.repo.model.dbo.file.download.v2;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_2_ETAG;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_2_PRINCIPAL_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_2_UPDATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_ITEM_2_ADDED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_ITEM_2_ENTITY_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_ITEM_2_PRINCIPAL_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_DOWNLOAD_LIST_ITEM_2_VERION_NUMBER;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_DOWNLOAD_LIST_2;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_DOWNLOAD_LIST_ITEM_2;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+\n+import org.sagebionetworks.repo.model.download.ColumnName;\n+import org.sagebionetworks.repo.model.download.DownloadListItem;\n+import org.sagebionetworks.repo.model.download.IdAndVersion;\n+import org.sagebionetworks.repo.model.download.SortDirection;\n+import org.sagebionetworks.repo.model.jdo.KeyFactory;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.BatchPreparedStatementSetter;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class DownloadListDAOImpl implements DownloadListDAO {\n+\n+\tpublic static final Long NULL_VERSION_NUMBER = -1L;\n+\n+\t@Autowired\n+\tprivate JdbcTemplate jdbcTemplate;\n+\n+\tprivate static final RowMapper<DBODownloadList> LIST_MAPPER = new DBODownloadList().getTableMapping();\n+\tprivate static final RowMapper<DBODownloadListItem> LIST_ITEM_MAPPER = new DBODownloadListItem().getTableMapping();\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic long addBatchOfFilesToDownloadList(Long userId, List<IdAndVersion> batchToAdd) {\n+\t\tValidateArgument.required(userId, \"User Id\");\n+\t\tif (batchToAdd == null || batchToAdd.isEmpty()) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tcreateOrUpdateDownloadList(userId);\n+\t\tIdAndVersion[] batchArray = batchToAdd.toArray(new IdAndVersion[batchToAdd.size()]);\n+\t\tint[] updates = jdbcTemplate.batchUpdate(\n+\t\t\t\t\"INSERT IGNORE INTO \" + TABLE_DOWNLOAD_LIST_ITEM_2 + \" (\" + COL_DOWNLOAD_LIST_ITEM_2_PRINCIPAL_ID + \",\"\n+\t\t\t\t\t\t+ COL_DOWNLOAD_LIST_ITEM_2_ENTITY_ID + \",\" + COL_DOWNLOAD_LIST_ITEM_2_VERION_NUMBER + \",\"\n+\t\t\t\t\t\t+ COL_DOWNLOAD_LIST_ITEM_2_ADDED_ON + \")  VALUES(?,?,?,NOW())\",\n+\t\t\t\tnew BatchPreparedStatementSetter() {\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void setValues(PreparedStatement ps, int i) throws SQLException {\n+\t\t\t\t\t\tIdAndVersion idAndVersion = batchArray[i];\n+\n+\t\t\t\t\t\tif (idAndVersion == null) {\n+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Null file ID passed at index: \" + i);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (idAndVersion.getEntityId() == null) {\n+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Null entityId at index: \" + i);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tps.setLong(1, userId);\n+\n+\t\t\t\t\t\tps.setLong(2, KeyFactory.stringToKey(idAndVersion.getEntityId()));\n+\t\t\t\t\t\tLong versionNumber = NULL_VERSION_NUMBER;\n+\t\t\t\t\t\tif (idAndVersion.getVersionNumber() != null) {\n+\t\t\t\t\t\t\tversionNumber = idAndVersion.getVersionNumber();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tps.setLong(3, versionNumber);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic int getBatchSize() {\n+\t\t\t\t\t\treturn batchArray.length;\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\treturn IntStream.of(updates).sum();\n+\t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic long removeBatchOfFilesFromDownloadList(Long userId, List<IdAndVersion> batchToRemove) {\n+\t\tValidateArgument.required(userId, \"User Id\");\n+\t\tif (batchToRemove == null || batchToRemove.isEmpty()) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tcreateOrUpdateDownloadList(userId);\n+\t\tIdAndVersion[] batchArray = batchToRemove.toArray(new IdAndVersion[batchToRemove.size()]);\n+\t\tint[] updates = jdbcTemplate.batchUpdate(\"DELETE FROM \" + TABLE_DOWNLOAD_LIST_ITEM_2 + \" WHERE \"\n+\t\t\t\t+ COL_DOWNLOAD_LIST_2_PRINCIPAL_ID + \" = ? AND \" + COL_DOWNLOAD_LIST_ITEM_2_ENTITY_ID\n+\t\t\t\t+ \" = ? AND \" + COL_DOWNLOAD_LIST_ITEM_2_VERION_NUMBER + \" = ?\", new BatchPreparedStatementSetter() {\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void setValues(PreparedStatement ps, int i) throws SQLException {\n+\t\t\t\t\t\tIdAndVersion idAndVersion = batchArray[i];\n+\n+\t\t\t\t\t\tif (idAndVersion == null) {\n+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Null file ID passed at index: \" + i);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (idAndVersion.getEntityId() == null) {\n+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Null entityId at index: \" + i);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tps.setLong(1, userId);\n+\t\t\t\t\t\tps.setLong(2, KeyFactory.stringToKey(idAndVersion.getEntityId()));\n+\t\t\t\t\t\tLong versionNumber = NULL_VERSION_NUMBER;\n+\t\t\t\t\t\tif (idAndVersion.getVersionNumber() != null) {\n+\t\t\t\t\t\t\tversionNumber = idAndVersion.getVersionNumber();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tps.setLong(3, versionNumber);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic int getBatchSize() {\n+\t\t\t\t\t\treturn batchArray.length;\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\treturn IntStream.of(updates).sum();\n+\t}\n+\n+\tprivate void createOrUpdateDownloadList(Long userId) {\n+\t\tValidateArgument.required(userId, \"User Id\");\n+\t\tjdbcTemplate.update(\"INSERT INTO \" + TABLE_DOWNLOAD_LIST_2 + \"(\" + COL_DOWNLOAD_LIST_2_PRINCIPAL_ID + \", \"\n+\t\t\t\t+ COL_DOWNLOAD_LIST_2_UPDATED_ON + \", \" + COL_DOWNLOAD_LIST_2_ETAG\n+\t\t\t\t+ \") VALUES (?, NOW(), UUID()) ON DUPLICATE KEY UPDATE \" + COL_DOWNLOAD_LIST_2_UPDATED_ON + \" = NOW(), \"\n+\t\t\t\t+ COL_DOWNLOAD_LIST_2_ETAG + \" = UUID()\", userId);\n+\t}\n+\n+\t@Override\n+\tpublic void clearDownloadList(Long userId) {\n+\t\tValidateArgument.required(userId, \"User Id\");\n+\t\tcreateOrUpdateDownloadList(userId);\n+\t\tjdbcTemplate.update(\"DELETE FROM \" + TABLE_DOWNLOAD_LIST_ITEM_2 + \" WHERE \"\n+\t\t\t\t+ COL_DOWNLOAD_LIST_ITEM_2_PRINCIPAL_ID + \" = ?\", userId);\n+\t}\n+\n+\t@Override\n+\tpublic List<DownloadListItem> getFilesAvailableToDownloadFromDownloadList(Long userId, ColumnName sortColumn,\n+\t\t\tSortDirection sortDirection, Long limit, Long offset) {\n+\t\t// TODO Auto-generated method stub\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic void truncateAllData() {\n+\t\tjdbcTemplate.update(\n+\t\t\t\t\"DELETE FROM \" + TABLE_DOWNLOAD_LIST_2 + \" WHERE \" + COL_DOWNLOAD_LIST_ITEM_2_PRINCIPAL_ID + \" > -1\");\n+\t}\n+\n+\t@Override\n+\tpublic DBODownloadList getDBODownloadList(Long userId) {\n+\t\tValidateArgument.required(userId, \"User Id\");\n+\t\treturn jdbcTemplate.queryForObject(\n+\t\t\t\t\"SELECT * FROM \" + TABLE_DOWNLOAD_LIST_2 + \" WHERE \" + COL_DOWNLOAD_LIST_2_PRINCIPAL_ID + \" = ?\",\n+\t\t\t\tLIST_MAPPER, userId);\n+\t}\n+\n+\t@Override\n+\tpublic List<DBODownloadListItem> getDBODownloadListItems(Long userId) {\n+\t\tValidateArgument.required(userId, \"User Id\");\n+\t\treturn jdbcTemplate.query(\n+\t\t\t\t\"SELECT * FROM \" + TABLE_DOWNLOAD_LIST_ITEM_2 + \" WHERE \" + COL_DOWNLOAD_LIST_2_PRINCIPAL_ID + \" = ?\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d33c312c095b8f4b610f71c6ddd6a23f8bd1377"}, "originalPosition": 166}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4554, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}