{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NTA1NDU1", "number": 3879, "title": "PLFM-6020 - Create GoogleCloudFileHandles using a file that has already been uploaded to Google Cloud.", "bodyText": "https://sagebionetworks.jira.com/browse/PLFM-6020", "createdAt": "2020-01-01T17:41:10Z", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879", "merged": true, "mergeCommit": {"oid": "e498f6f791d472d2523d328ea3ecdb5a662c9b11"}, "closed": true, "closedAt": "2020-01-06T23:17:52Z", "author": {"login": "nickgros"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb2Iz4ggFqTMzNzQ5ODAxOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb30mQmgFqTMzODk1MzMzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM3NDk4MDE5", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#pullrequestreview-337498019", "createdAt": "2020-01-01T17:42:45Z", "commit": {"oid": "48bb6df3c009197c24b49a5bd766c57ccd0ffda3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMVQxNzo0Mjo0NVrOFZjKtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMVQxNzo0Mjo0NVrOFZjKtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMzNDkwMw==", "bodyText": "Prior to this PR, there was no integration test for creating an S3FileHandle using an existing file in S3", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#discussion_r362334903", "createdAt": "2020-01-01T17:42:45Z", "author": {"login": "nickgros"}, "path": "integration-test/src/test/java/org/sagebionetworks/IT049FileHandleTest.java", "diffHunk": "@@ -558,6 +558,39 @@ public void testMultipartUploadV2Reset() throws FileNotFoundException, SynapseEx\n \t\tassertFalse(startStatus.getUploadId().equals(statusAgain.getUploadId()));\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCreateExternalS3FileHandleFromExistingFile() throws Exception {\r\n+\t\tassertNotNull(imageFile);\r\n+\t\tassertTrue(imageFile.exists());\r\n+\t\tString md5 = MD5ChecksumHelper.getMD5Checksum(imageFile);\r\n+\r\n+\t\t// Upload the owner.txt to S3 so we can create the external storage location\r\n+\t\tString baseKey = \"integration-test/IT049FileHandleTest/testCreateExternalS3FileHandleFromExistingFile/\" + UUID.randomUUID().toString();\r\n+\t\tString key = baseKey + FILE_NAME;\r\n+\t\tuploadOwnerTxtToS3(config.getS3Bucket(), baseKey, synapse.getUserProfile(userToDelete.toString()).getUserName());\r\n+\r\n+\t\t// upload the little image to S3, but not through Synapse\r\n+\t\tsynapseS3Client.putObject(config.getS3Bucket(), key, imageFile);\r\n+\r\n+\t\t// Create the storage location setting\r\n+\t\tExternalS3StorageLocationSetting storageLocationSetting = new ExternalS3StorageLocationSetting();\r\n+\t\tstorageLocationSetting.setBucket(config.getS3Bucket());\r\n+\t\tstorageLocationSetting.setBaseKey(baseKey);\r\n+\t\tstorageLocationSetting.setUploadType(UploadType.S3);\r\n+\t\tstorageLocationSetting = synapse.createStorageLocationSetting(storageLocationSetting);\r\n+\r\n+\t\tS3FileHandle fh = new S3FileHandle();\r\n+\t\tfh.setStorageLocationId(storageLocationSetting.getStorageLocationId());\r\n+\t\tfh.setBucketName(config.getS3Bucket());\r\n+\t\tfh.setKey(key);\r\n+\t\tfh.setContentMd5(md5);\r\n+\r\n+\t\tS3FileHandle result = synapse.createExternalS3FileHandle(fh);\r\n+\t\tassertNotNull(result);\r\n+\t\ttoDelete.add(result);\r\n+\t\tassertNotNull(result.getFileName());\r\n+\t}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bb6df3c009197c24b49a5bd766c57ccd0ffda3"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff095cbf5fa51c8bab17fbe1eeb393cadbd9e8ed", "author": {"user": {"login": "nickgros", "name": "Nick Grosenbacher"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/ff095cbf5fa51c8bab17fbe1eeb393cadbd9e8ed", "committedDate": "2020-01-01T17:47:10Z", "message": "PLFM-6020 manager layer and unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ee068d3ab50e877535cdef4d8d5ab9b374427e4", "author": {"user": {"login": "nickgros", "name": "Nick Grosenbacher"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/2ee068d3ab50e877535cdef4d8d5ab9b374427e4", "committedDate": "2020-01-01T17:47:18Z", "message": "PLFM-6020 service layer, client methods, and integration tests for S3 and GCP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48bb6df3c009197c24b49a5bd766c57ccd0ffda3", "author": {"user": {"login": "nickgros", "name": "Nick Grosenbacher"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/48bb6df3c009197c24b49a5bd766c57ccd0ffda3", "committedDate": "2019-12-31T18:49:33Z", "message": "PLFM-5648 service layer and integration tests for S3 and GCP"}, "afterCommit": {"oid": "2ee068d3ab50e877535cdef4d8d5ab9b374427e4", "author": {"user": {"login": "nickgros", "name": "Nick Grosenbacher"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/2ee068d3ab50e877535cdef4d8d5ab9b374427e4", "committedDate": "2020-01-01T17:47:18Z", "message": "PLFM-6020 service layer, client methods, and integration tests for S3 and GCP"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4Mjc3Nzgw", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#pullrequestreview-338277780", "createdAt": "2020-01-03T21:14:07Z", "commit": {"oid": "2ee068d3ab50e877535cdef4d8d5ab9b374427e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToxNDowN1rOFaJhYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToxNDowN1rOFaJhYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2MzI5OQ==", "bodyText": "The object does not necessarily exist in S3 at the time the client returns from the putObject() call.  See other cases in which putObject() is called to see how we wait for the object to appear before continuing.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#discussion_r362963299", "createdAt": "2020-01-03T21:14:07Z", "author": {"login": "brucehoff"}, "path": "integration-test/src/test/java/org/sagebionetworks/IT049FileHandleTest.java", "diffHunk": "@@ -558,6 +558,39 @@ public void testMultipartUploadV2Reset() throws FileNotFoundException, SynapseEx\n \t\tassertFalse(startStatus.getUploadId().equals(statusAgain.getUploadId()));\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCreateExternalS3FileHandleFromExistingFile() throws Exception {\r\n+\t\tassertNotNull(imageFile);\r\n+\t\tassertTrue(imageFile.exists());\r\n+\t\tString md5 = MD5ChecksumHelper.getMD5Checksum(imageFile);\r\n+\r\n+\t\t// Upload the owner.txt to S3 so we can create the external storage location\r\n+\t\tString baseKey = \"integration-test/IT049FileHandleTest/testCreateExternalS3FileHandleFromExistingFile/\" + UUID.randomUUID().toString();\r\n+\t\tString key = baseKey + FILE_NAME;\r\n+\t\tuploadOwnerTxtToS3(config.getS3Bucket(), baseKey, synapse.getUserProfile(userToDelete.toString()).getUserName());\r\n+\r\n+\t\t// upload the little image to S3, but not through Synapse\r\n+\t\tsynapseS3Client.putObject(config.getS3Bucket(), key, imageFile);\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ee068d3ab50e877535cdef4d8d5ab9b374427e4"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4Mjc4MjQ4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#pullrequestreview-338278248", "createdAt": "2020-01-03T21:15:26Z", "commit": {"oid": "2ee068d3ab50e877535cdef4d8d5ab9b374427e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToxNToyNlrOFaJiqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToxNToyNlrOFaJiqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2MzYyNw==", "bodyText": "add \"// call under test\"", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#discussion_r362963627", "createdAt": "2020-01-03T21:15:26Z", "author": {"login": "brucehoff"}, "path": "integration-test/src/test/java/org/sagebionetworks/IT049FileHandleTest.java", "diffHunk": "@@ -558,6 +558,39 @@ public void testMultipartUploadV2Reset() throws FileNotFoundException, SynapseEx\n \t\tassertFalse(startStatus.getUploadId().equals(statusAgain.getUploadId()));\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCreateExternalS3FileHandleFromExistingFile() throws Exception {\r\n+\t\tassertNotNull(imageFile);\r\n+\t\tassertTrue(imageFile.exists());\r\n+\t\tString md5 = MD5ChecksumHelper.getMD5Checksum(imageFile);\r\n+\r\n+\t\t// Upload the owner.txt to S3 so we can create the external storage location\r\n+\t\tString baseKey = \"integration-test/IT049FileHandleTest/testCreateExternalS3FileHandleFromExistingFile/\" + UUID.randomUUID().toString();\r\n+\t\tString key = baseKey + FILE_NAME;\r\n+\t\tuploadOwnerTxtToS3(config.getS3Bucket(), baseKey, synapse.getUserProfile(userToDelete.toString()).getUserName());\r\n+\r\n+\t\t// upload the little image to S3, but not through Synapse\r\n+\t\tsynapseS3Client.putObject(config.getS3Bucket(), key, imageFile);\r\n+\r\n+\t\t// Create the storage location setting\r\n+\t\tExternalS3StorageLocationSetting storageLocationSetting = new ExternalS3StorageLocationSetting();\r\n+\t\tstorageLocationSetting.setBucket(config.getS3Bucket());\r\n+\t\tstorageLocationSetting.setBaseKey(baseKey);\r\n+\t\tstorageLocationSetting.setUploadType(UploadType.S3);\r\n+\t\tstorageLocationSetting = synapse.createStorageLocationSetting(storageLocationSetting);\r\n+\r\n+\t\tS3FileHandle fh = new S3FileHandle();\r\n+\t\tfh.setStorageLocationId(storageLocationSetting.getStorageLocationId());\r\n+\t\tfh.setBucketName(config.getS3Bucket());\r\n+\t\tfh.setKey(key);\r\n+\t\tfh.setContentMd5(md5);\r\n+\r\n+\t\tS3FileHandle result = synapse.createExternalS3FileHandle(fh);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ee068d3ab50e877535cdef4d8d5ab9b374427e4"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4Mjc5MDEz", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#pullrequestreview-338279013", "createdAt": "2020-01-03T21:17:40Z", "commit": {"oid": "2ee068d3ab50e877535cdef4d8d5ab9b374427e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToxNzo0MFrOFaJlFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToxNzo0MFrOFaJlFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2NDI0Ng==", "bodyText": "wait for object to appear", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#discussion_r362964246", "createdAt": "2020-01-03T21:17:40Z", "author": {"login": "brucehoff"}, "path": "integration-test/src/test/java/org/sagebionetworks/IT049FileHandleTest.java", "diffHunk": "@@ -619,6 +652,42 @@ public void testMultipartUploadV2ToGoogleCloud() throws FileNotFoundException, S\n \t\tassertTrue(IterableUtils.isEmpty(googleCloudStorageClient.getObjects(result.getBucketName(), result.getKey() + \"/\")));\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCreateExternalGoogleCloudFileHandleFromExistingFile() throws Exception {\r\n+\t\t// Only run this test if Google Cloud is enabled.\r\n+\t\tAssume.assumeTrue(config.getGoogleCloudEnabled());\r\n+\r\n+\t\tassertNotNull(imageFile);\r\n+\t\tassertTrue(imageFile.exists());\r\n+\t\tString md5 = MD5ChecksumHelper.getMD5Checksum(imageFile);\r\n+\r\n+\t\t// Upload the owner.txt to Google Cloud so we can create the external storage location\r\n+\t\tString baseKey = \"integration-test/IT049FileHandleTest/testCreateExternalGoogleCloudFileHandleFromExistingFile/\" + UUID.randomUUID().toString();\r\n+\t\tString key = baseKey + FILE_NAME;\r\n+\t\tuploadOwnerTxtToGoogleCloud(googleCloudBucket, baseKey, synapse.getUserProfile(userToDelete.toString()).getUserName());\r\n+\r\n+\t\t// upload the little image to Google Cloud, but not through Synapse\r\n+\t\tgoogleCloudStorageClient.putObject(googleCloudBucket, key, imageFile);\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ee068d3ab50e877535cdef4d8d5ab9b374427e4"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4Mjc5MDY5", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#pullrequestreview-338279069", "createdAt": "2020-01-03T21:17:50Z", "commit": {"oid": "2ee068d3ab50e877535cdef4d8d5ab9b374427e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToxNzo1MFrOFaJlRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToxNzo1MFrOFaJlRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2NDI5Mw==", "bodyText": "method under test", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#discussion_r362964293", "createdAt": "2020-01-03T21:17:50Z", "author": {"login": "brucehoff"}, "path": "integration-test/src/test/java/org/sagebionetworks/IT049FileHandleTest.java", "diffHunk": "@@ -619,6 +652,42 @@ public void testMultipartUploadV2ToGoogleCloud() throws FileNotFoundException, S\n \t\tassertTrue(IterableUtils.isEmpty(googleCloudStorageClient.getObjects(result.getBucketName(), result.getKey() + \"/\")));\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCreateExternalGoogleCloudFileHandleFromExistingFile() throws Exception {\r\n+\t\t// Only run this test if Google Cloud is enabled.\r\n+\t\tAssume.assumeTrue(config.getGoogleCloudEnabled());\r\n+\r\n+\t\tassertNotNull(imageFile);\r\n+\t\tassertTrue(imageFile.exists());\r\n+\t\tString md5 = MD5ChecksumHelper.getMD5Checksum(imageFile);\r\n+\r\n+\t\t// Upload the owner.txt to Google Cloud so we can create the external storage location\r\n+\t\tString baseKey = \"integration-test/IT049FileHandleTest/testCreateExternalGoogleCloudFileHandleFromExistingFile/\" + UUID.randomUUID().toString();\r\n+\t\tString key = baseKey + FILE_NAME;\r\n+\t\tuploadOwnerTxtToGoogleCloud(googleCloudBucket, baseKey, synapse.getUserProfile(userToDelete.toString()).getUserName());\r\n+\r\n+\t\t// upload the little image to Google Cloud, but not through Synapse\r\n+\t\tgoogleCloudStorageClient.putObject(googleCloudBucket, key, imageFile);\r\n+\r\n+\t\t// Create the storage location setting\r\n+\t\tExternalGoogleCloudStorageLocationSetting storageLocationSetting = new ExternalGoogleCloudStorageLocationSetting();\r\n+\t\tstorageLocationSetting.setBucket(googleCloudBucket);\r\n+\t\tstorageLocationSetting.setBaseKey(baseKey);\r\n+\t\tstorageLocationSetting.setUploadType(UploadType.GOOGLECLOUDSTORAGE);\r\n+\t\tstorageLocationSetting = synapse.createStorageLocationSetting(storageLocationSetting);\r\n+\r\n+\t\tGoogleCloudFileHandle fh = new GoogleCloudFileHandle();\r\n+\t\tfh.setStorageLocationId(storageLocationSetting.getStorageLocationId());\r\n+\t\tfh.setBucketName(googleCloudBucket);\r\n+\t\tfh.setKey(key);\r\n+\t\tfh.setContentMd5(md5);\r\n+\r\n+\t\tGoogleCloudFileHandle result = synapse.createExternalGoogleCloudFileHandle(fh);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ee068d3ab50e877535cdef4d8d5ab9b374427e4"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MjgwMzE4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#pullrequestreview-338280318", "createdAt": "2020-01-03T21:21:17Z", "commit": {"oid": "2ee068d3ab50e877535cdef4d8d5ab9b374427e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToyMToxN1rOFaJo4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToyMToxN1rOFaJo4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2NTIxOA==", "bodyText": "either (1) replace 'Exception' with the particular exception type thrown by 'getObject' or (2) ensure that only the getObject() method invocation is within the try/catch block.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#discussion_r362965218", "createdAt": "2020-01-03T21:21:17Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/file/FileHandleManagerImpl.java", "diffHunk": "@@ -1096,6 +1097,63 @@ public S3FileHandle createExternalS3FileHandle(UserInfo userInfo,\n \t\treturn (S3FileHandle) fileHandleDao.createFile(fileHandle);\n \t}\n \n+\t@Override\n+\tpublic GoogleCloudFileHandle createExternalGoogleCloudFileHandle(UserInfo userInfo,\n+\t\t\t\t\t\t\t\t\t\t\t\t   GoogleCloudFileHandle fileHandle) {\n+\t\tValidateArgument.required(userInfo, \"userInfo\");\n+\t\tValidateArgument.required(fileHandle, \"fileHandle\");\n+\t\tValidateArgument.required(fileHandle.getStorageLocationId(), \"FileHandle.storageLocationId\");\n+\t\tValidateArgument.requiredNotEmpty(fileHandle.getBucketName(), \"FileHandle.bucket\");\n+\t\tValidateArgument.requiredNotEmpty(fileHandle.getKey(), \"FileHandle.key\");\n+\t\tValidateArgument.requiredNotEmpty(fileHandle.getContentMd5(),\"FileHandle.contentMd5\");\n+\t\tif (fileHandle.getFileName() == null) {\n+\t\t\tfileHandle.setFileName(NOT_SET);\n+\t\t}\n+\t\tif (fileHandle.getContentType() == null) {\n+\t\t\tfileHandle.setContentType(NOT_SET);\n+\t\t}\n+\n+\t\tif (!MD5ChecksumHelper.isValidMd5Digest(fileHandle.getContentMd5())) {\n+\t\t\tthrow new IllegalArgumentException(\"The content MD5 digest must be a valid hexadecimal string of length 32.\");\n+\t\t}\n+\n+\t\t// Lookup the storage location\n+\t\tStorageLocationSetting sls = storageLocationDAO.get(fileHandle.getStorageLocationId());\n+\t\tExternalGoogleCloudStorageLocationSetting esls = null;\n+\t\tif(!(sls instanceof ExternalGoogleCloudStorageLocationSetting)){\n+\t\t\tthrow new IllegalArgumentException(\"StorageLocationSetting.id=\"+fileHandle.getStorageLocationId()+\" was not of the expected type: \"+ExternalGoogleCloudStorageLocationSetting.class.getName());\n+\t\t}\n+\t\tesls = (ExternalGoogleCloudStorageLocationSetting) sls;\n+\t\tif(!fileHandle.getBucketName().equals(esls.getBucket())){\n+\t\t\tthrow new IllegalArgumentException(\"The bucket for ExternalGoogleCloudStorageLocationSetting.id=\"+fileHandle.getStorageLocationId()+\" does not match the provided bucket: \"+fileHandle.getBucketName());\n+\t\t}\n+\n+\t\t/*\n+\t\t *  The creation of the ExternalGoogleCloudStorageLocationSetting already validates that the user has\n+\t\t *  permission to update the bucket. So the creator of the storage location is\n+\t\t *  the only one that can create an GoogleCloudFileHandle using that storage location Id.\n+\t\t */\n+\t\tif(!esls.getCreatedBy().equals(userInfo.getId())){\n+\t\t\tthrow new UnauthorizedException(\"Only the creator of ExternalGoogleCloudStorageLocationSetting.id=\"+fileHandle.getStorageLocationId()+\" can create an external GoogleCloudFileHandle with storageLocationId = \"+fileHandle.getStorageLocationId());\n+\t\t}\n+\t\ttry {\n+\t\t\tBlob summary = googleCloudStorageClient.getObject(fileHandle.getBucketName(), fileHandle.getKey());\n+\t\t\tif (fileHandle.getContentSize() == null) {\n+\t\t\t\tfileHandle.setContentSize(summary.getSize());\n+\t\t\t}\n+\t\t} catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ee068d3ab50e877535cdef4d8d5ab9b374427e4"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MjgxNjEy", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#pullrequestreview-338281612", "createdAt": "2020-01-03T21:24:56Z", "commit": {"oid": "2ee068d3ab50e877535cdef4d8d5ab9b374427e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToyNDo1NlrOFaJshw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMToyNDo1NlrOFaJshw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2NjE1MQ==", "bodyText": "the constant \"/externalFileHandle/googleCloud\" should be defined in a file (URLHelpers.java??)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#discussion_r362966151", "createdAt": "2020-01-03T21:24:56Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/file/controller/UploadController.java", "diffHunk": "@@ -360,6 +361,35 @@\n \t\t// Pass it along\n \t\treturn fileService.createExternalS3FileHandle(userId, fileHandle);\n \t}\n+\n+\t/**\n+\t * Create an GoogleCloudFileHandle to represent a Google Cloud Blob in a user's Google Cloud bucket.\n+\t * <p>\n+\t * In order to use this method an ExternalGoogleCloudStorageLocationSetting must\n+\t * first be created for the user's bucket. The ID of the resulting\n+\t * ExternalGoogleCloudStorageLocationSetting must be set in the\n+\t * GoogleCloudFileHandle.storageLocationId. Only the user that created to the\n+\t * ExternalGoogleCloudStorageLocationSetting will be allowed to create GoogleCloudFileHandle\n+\t * using that storageLocationId.\n+\t * </p>\n+\t *\n+\t * @param userId\n+\t * @param fileHandle\n+\t *            The GoogleCloudFileHandle to create\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws NotFoundException\n+\t */\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = \"/externalFileHandle/googleCloud\", method = RequestMethod.POST)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ee068d3ab50e877535cdef4d8d5ab9b374427e4"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f8dd68cd43adb60b109ca7f8958521a16ef17e0", "author": {"user": {"login": "nickgros", "name": "Nick Grosenbacher"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4f8dd68cd43adb60b109ca7f8958521a16ef17e0", "committedDate": "2020-01-06T18:40:27Z", "message": "PLFM-6020 Code Review Changes #3879"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fe1472c53cbbe3444dd92261d117465cf91b3ee", "author": {"user": {"login": "nickgros", "name": "Nick Grosenbacher"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4fe1472c53cbbe3444dd92261d117465cf91b3ee", "committedDate": "2020-01-06T19:18:43Z", "message": "Fix compiler error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4OTUzMzMy", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3879#pullrequestreview-338953332", "createdAt": "2020-01-06T23:17:37Z", "commit": {"oid": "4fe1472c53cbbe3444dd92261d117465cf91b3ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4874, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}