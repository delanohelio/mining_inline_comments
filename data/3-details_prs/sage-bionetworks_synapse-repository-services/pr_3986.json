{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NjM2MjY1", "number": 3986, "title": "Plfm 5170", "bodyText": "Looking at AuthenticationFilter, we see 3 ways to authenticate a Synapse request:\n\nusing a session token\nusing a HMAC digital signature\nusing an OAuth access token\nThe filter maintains the historic behavior of converting the first two to an (authenticated) userId.\nAccess tokens are verified.\nFor the first two methods, an \"all access\" access token is added.\n\nTherefore, any controller currently relying on an (authenticated) userId can switch to relying on an access token to get auth info.  Once it switches over, then an oauth client can make authenticated requests to the service using an Oauth access token.\nOur service tier converts (authenticated) userIds to UserInfo objects (user id, groups).  We extend this to include OAuth scope.\nUserManagerImpl converts a userId to a UserInfo object to a UserInfo object with all scopes.\nOpenIDConnectManagerImpl converts an access token to a UserInfo object with just the scopes (and claims) from the token.\nWith this in place, any controller-service-manager stack can begin relying on an oauth authorized request.  In making the switch the service must ensure that scope is checked, otherwise it will treat the request as having 'full scope'.\nWe start by enabling the service to read an entity's metadata (GET /repo/v1/entity/{id}) to be authorized with an access token.\nA number of services are so intertwined that converting one forces the conversion of others.  E.g., entity bundle services call entity services, so converting the latter to an access token leads us to convert the former.\nThis PR converts 33 services across 7 controllers to use an oauth token.\nThe key changes to incorporate authorization logic based on scope are:\nEvaluationPermissionsManagerImpl.java\nOAuthPermissionUtils.java\nAuthorizationManagerImpl.java\nEntityPermissionsManagerImpl.java\nwith some small changes to:\nMessageManagerImpl.java\nDiscussionThreadManagerImpl.java\nThe other modifications are mostly to 'wire up' the access token to the controller, service and manager tiers.", "createdAt": "2020-03-31T22:12:08Z", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986", "merged": true, "mergeCommit": {"oid": "194d6927abb76249a6b36c432c75a0e68a880664"}, "closed": true, "closedAt": "2020-04-02T22:14:26Z", "author": {"login": "brucehoff"}, "timelineItems": {"totalCount": 69, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQoPXBgH2gAyMzk2NjM2MjY1OmNlMDRhYmMwMjIwZTJhMjVhZWIzNGVhZDhkNDkzZjdlNGM1NmVkNTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTxkDJAFqTM4NjczNTg3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ce04abc0220e2a25aeb34ead8d493f7e4c56ed59", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/ce04abc0220e2a25aeb34ead8d493f7e4c56ed59", "committedDate": "2020-03-24T01:01:51Z", "message": "PLFM-5170-IV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b812ed31dfcb3e2707807806676b7b2a7e4f5294", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/b812ed31dfcb3e2707807806676b7b2a7e4f5294", "committedDate": "2020-03-24T14:18:02Z", "message": "PLFM-5170-IV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6a029d96d416caa3fb3aab460e283cec4da6eab", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/e6a029d96d416caa3fb3aab460e283cec4da6eab", "committedDate": "2020-03-24T16:02:20Z", "message": "PLFM-5170-IV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b94155dc5fb59bad9f77dbddd9a3fd45dd2eadf2", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/b94155dc5fb59bad9f77dbddd9a3fd45dd2eadf2", "committedDate": "2020-03-24T16:12:55Z", "message": "PLFM-5170-IV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18675fe1324c4a578b7e8ced63b4fb2943595331", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/18675fe1324c4a578b7e8ced63b4fb2943595331", "committedDate": "2020-03-24T16:57:56Z", "message": "PLFM-5170-IV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00158e79544d9a13a5a0036f1e536143d5c42854", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/00158e79544d9a13a5a0036f1e536143d5c42854", "committedDate": "2020-03-24T16:58:51Z", "message": "PLFM-5170-IV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afd9fb46c24d591272660e23fe75fba6cceec285", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/afd9fb46c24d591272660e23fe75fba6cceec285", "committedDate": "2020-03-24T17:03:01Z", "message": "PLFM-5170-IV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dbd62c5948ae76b65e7eb2cc2e1071260cbd622", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/3dbd62c5948ae76b65e7eb2cc2e1071260cbd622", "committedDate": "2020-03-24T17:05:44Z", "message": "PLFM-5170-IV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "970e6ebed133ce265b82f3e557fdac715e4d22b4", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/970e6ebed133ce265b82f3e557fdac715e4d22b4", "committedDate": "2020-03-24T17:13:11Z", "message": "PLFM-5170-IV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b81d0c7617e87b2001189466c12ed49d2d8640f", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/5b81d0c7617e87b2001189466c12ed49d2d8640f", "committedDate": "2020-03-24T17:22:10Z", "message": "PLFM-5170-IV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c5f2d70a0e9a426edf6656501374aa79366a5c6", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/5c5f2d70a0e9a426edf6656501374aa79366a5c6", "committedDate": "2020-03-24T21:54:06Z", "message": "PLFM-5170-IV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32dc84a5fa739a380681b2819885a405c5498ed0", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/32dc84a5fa739a380681b2819885a405c5498ed0", "committedDate": "2020-03-24T22:52:27Z", "message": "PLFM-5170-IV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4fcf520fa3b3136c8cd44261ed049c8214f65ed", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a4fcf520fa3b3136c8cd44261ed049c8214f65ed", "committedDate": "2020-03-25T17:26:49Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "711b65c85fb66d438880829df0fd8e8a7dc13783", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/711b65c85fb66d438880829df0fd8e8a7dc13783", "committedDate": "2020-03-26T01:49:26Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf97c1515bee1a459f4c4731d9af506dbf61b74f", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/bf97c1515bee1a459f4c4731d9af506dbf61b74f", "committedDate": "2020-03-26T06:12:47Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd19c1a4df02fb3f069eed67bd4506f8b70f48a7", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/dd19c1a4df02fb3f069eed67bd4506f8b70f48a7", "committedDate": "2020-03-26T13:14:24Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "223c14a3000384eeafe1e2eb1a3c402f1b26e3cc", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/223c14a3000384eeafe1e2eb1a3c402f1b26e3cc", "committedDate": "2020-03-26T14:03:03Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1e6fe565b9928c536d4cdfb1c1c6fb06cb257d2", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/e1e6fe565b9928c536d4cdfb1c1c6fb06cb257d2", "committedDate": "2020-03-26T14:28:18Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4740fa381d349d57c69ae2ae816be157c544b552", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4740fa381d349d57c69ae2ae816be157c544b552", "committedDate": "2020-03-26T22:25:36Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc88d6974f16464b333c2eb6d021c81361aee351", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/bc88d6974f16464b333c2eb6d021c81361aee351", "committedDate": "2020-03-26T23:49:07Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70bfa8e97842b3df95509344764c6726cc311d6c", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/70bfa8e97842b3df95509344764c6726cc311d6c", "committedDate": "2020-03-27T01:12:04Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfb60907044c5ffe4667ee3ed47935d53cb996e7", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/cfb60907044c5ffe4667ee3ed47935d53cb996e7", "committedDate": "2020-03-27T17:17:21Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cdca29840c96d9212dff2606f27e5905315d3ef", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/3cdca29840c96d9212dff2606f27e5905315d3ef", "committedDate": "2020-03-27T17:59:51Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28ebf6956b501435ccd89fba5010a01aa00e34d3", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/28ebf6956b501435ccd89fba5010a01aa00e34d3", "committedDate": "2020-03-27T23:22:24Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee6454953904e70b79ac28e799d30e2af8388532", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/ee6454953904e70b79ac28e799d30e2af8388532", "committedDate": "2020-03-28T21:21:50Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aa46634deeff5e1b008fccc17e3cea38595e432", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/3aa46634deeff5e1b008fccc17e3cea38595e432", "committedDate": "2020-03-28T21:59:07Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11772d3fcf8f2a054325c4506d78789fde2e3bc4", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/11772d3fcf8f2a054325c4506d78789fde2e3bc4", "committedDate": "2020-03-30T17:13:08Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0644026d1138489044e0c71be84cd1105b1cac9", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a0644026d1138489044e0c71be84cd1105b1cac9", "committedDate": "2020-03-30T17:16:22Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6750966a7324ab20b9b0f4c6482c3a7587db606", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a6750966a7324ab20b9b0f4c6482c3a7587db606", "committedDate": "2020-03-30T18:06:45Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21c1c7a0fceb19d42641842168ee731c573e8e5c", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/21c1c7a0fceb19d42641842168ee731c573e8e5c", "committedDate": "2020-03-30T20:00:47Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56be43fa80581df6d1078a1681048a7f6a52a9f0", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/56be43fa80581df6d1078a1681048a7f6a52a9f0", "committedDate": "2020-03-31T01:50:38Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e4da42b8524b6a0e5eb2eb78f3029246dbc5466", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4e4da42b8524b6a0e5eb2eb78f3029246dbc5466", "committedDate": "2020-03-31T03:11:31Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc7b253ecd3f3e9aec9d11aa4243684ab23f58f3", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/dc7b253ecd3f3e9aec9d11aa4243684ab23f58f3", "committedDate": "2020-03-31T15:57:18Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de958763991ae8925329f8de4ab22fd5721b02e0", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/de958763991ae8925329f8de4ab22fd5721b02e0", "committedDate": "2020-03-31T20:44:37Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d4891740f22ea34a3dcfb20f1b46b45ff12a4c5", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/3d4891740f22ea34a3dcfb20f1b46b45ff12a4c5", "committedDate": "2020-03-31T21:32:02Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3ff8d215592a936196bb24fadc983b35fd0efc9", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c3ff8d215592a936196bb24fadc983b35fd0efc9", "committedDate": "2020-03-31T23:23:11Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6967ed1707a20ea507d0bb8078b30dea6ea886f", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c6967ed1707a20ea507d0bb8078b30dea6ea886f", "committedDate": "2020-03-31T23:38:55Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "710d791e3d6cb200dbdba59092cb405b7771d729", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/710d791e3d6cb200dbdba59092cb405b7771d729", "committedDate": "2020-04-01T00:12:24Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1e2293dbb2fb0a6c4b534c997ebec2e02fc271f", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c1e2293dbb2fb0a6c4b534c997ebec2e02fc271f", "committedDate": "2020-04-01T00:59:46Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8281989370dd31b4e91fb47e769cc5b2e6ed89c2", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/8281989370dd31b4e91fb47e769cc5b2e6ed89c2", "committedDate": "2020-04-01T01:03:07Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b597a48873d08f7e61e520ce6d68fbb0fd65938", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4b597a48873d08f7e61e520ce6d68fbb0fd65938", "committedDate": "2020-04-01T01:40:33Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c927a46ce65df66ea2582b1398715503d8b68756", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c927a46ce65df66ea2582b1398715503d8b68756", "committedDate": "2020-04-01T03:08:16Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d5e568a38715709d7f809768dfe05e654e2165a", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/2d5e568a38715709d7f809768dfe05e654e2165a", "committedDate": "2020-04-01T03:11:19Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a42cff6bf13d9716d351149206614edac928580", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/5a42cff6bf13d9716d351149206614edac928580", "committedDate": "2020-04-01T03:16:07Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5861bdbf95a8bbfd20757ed21b3d4e5d5ebb802", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a5861bdbf95a8bbfd20757ed21b3d4e5d5ebb802", "committedDate": "2020-04-01T03:45:36Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d998b488837e05759c9ea4a2260f587382049726", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/d998b488837e05759c9ea4a2260f587382049726", "committedDate": "2020-04-01T04:47:34Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81bf248e407137561ae42fd335e031b3dca08152", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/81bf248e407137561ae42fd335e031b3dca08152", "committedDate": "2020-04-01T13:20:46Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce0e63a274eeeb513fbdfcef1a5e2f887f2b7839", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/ce0e63a274eeeb513fbdfcef1a5e2f887f2b7839", "committedDate": "2020-04-01T13:23:03Z", "message": "Merge branch 'develop' of https://github.com/Sage-Bionetworks/Synapse-Repository-Services into PLFM-5170-IV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "476bc3d454cae4fb7e7254b60d5c166f921b1d08", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/476bc3d454cae4fb7e7254b60d5c166f921b1d08", "committedDate": "2020-04-01T15:49:32Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c7d096694548ba95cebe3d20f03d3c2687934c81", "committedDate": "2020-04-01T15:56:00Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTE0Mjg4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-385914288", "createdAt": "2020-04-01T20:12:09Z", "commit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoxMjowOVrOF_Q2kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoxMjowOVrOF_Q2kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4MDcyMQ==", "bodyText": "Add an additional test that verifies that all the current ACCESS_TYPE enumeration values are covered so that if in the future someone adds a new ACCESS_TYPE value the test would fail and inform the developer to map it to a scope.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401880721", "createdAt": "2020-04-01T20:12:09Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/manager/util/OAuthPermissionUtilsTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.sagebionetworks.manager.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+class OAuthPermissionUtilsTest {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTE2MTk3", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-385916197", "createdAt": "2020-04-01T20:15:05Z", "commit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoxNTowNlrOF_Q8xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoxNTowNlrOF_Q8xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4MjMxMA==", "bodyText": "add a null check on scopes", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401882310", "createdAt": "2020-04-01T20:15:06Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/manager/util/OAuthPermissionUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.sagebionetworks.manager.util;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.auth.AuthorizationStatus;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+\n+public class OAuthPermissionUtils {\n+\tprivate static final Map<ACCESS_TYPE,OAuthScope> ACCESS_TYPE_TO_SCOPE;\n+\t\n+\tstatic {\n+\t\tACCESS_TYPE_TO_SCOPE = new HashMap<ACCESS_TYPE,OAuthScope>();\n+\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.READ, \t\t\t\t\t\tOAuthScope.view);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.READ_PRIVATE_SUBMISSION, \tOAuthScope.view);\n+\t\t\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.CREATE, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.CHANGE_PERMISSIONS, \t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.UPDATE, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.UPLOAD, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.DELETE, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.SUBMIT, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.UPDATE_SUBMISSION, \t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.DELETE_SUBMISSION, \t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.TEAM_MEMBERSHIP_UPDATE, \tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.SEND_MESSAGE, \t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.CHANGE_SETTINGS, \t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.MODERATE, \t\t\t\t\tOAuthScope.modify);\n+\t\t\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.DOWNLOAD, \t\t\t\t\tOAuthScope.download);\n+\t}\n+\t\n+\tpublic static boolean scopeAllowsAccess(Collection<OAuthScope> scopes, ACCESS_TYPE accessType) {\n+\t\tOAuthScope scope = ACCESS_TYPE_TO_SCOPE.get(accessType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTE5NjQ4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-385919648", "createdAt": "2020-04-01T20:20:19Z", "commit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyMDoyMFrOF_RIAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyMDoyMFrOF_RIAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4NTE4Nw==", "bodyText": "Should be accessTypeCheck", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401885187", "createdAt": "2020-04-01T20:20:20Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/EntityPermissionsManagerImpl.java", "diffHunk": "@@ -440,6 +443,10 @@ private AuthorizationStatus canDownload(UserInfo userInfo, String entityId, Stri\n \t\t\taccessTypeCheck = READ;\n \t\t}\n \t\t\n+\t\tif (!OAuthPermissionUtils.scopeAllowsAccess(userInfo.getScopes(), accessTypeCheck)) {\n+\t\t\treturn OAuthPermissionUtils.accessDenied(ACCESS_TYPE.DOWNLOAD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTIyNzI2", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-385922726", "createdAt": "2020-04-01T20:24:56Z", "commit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyNDo1NlrOF_RR7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyNDo1NlrOF_RR7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4NzcyNQ==", "bodyText": "Add ACCESS_TYPE as a parameter that indicates the purpose for accessing the file handle so that the scope can be mapped against that", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401887725", "createdAt": "2020-04-01T20:24:56Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/AuthorizationManagerImpl.java", "diffHunk": "@@ -280,8 +286,12 @@ public boolean isUserCreatorOrAdmin(UserInfo userInfo, String creator) {\n \r\n \t@Override\r\n \tpublic AuthorizationStatus canAccessRawFileHandleByCreator(UserInfo userInfo, String fileHandleId, String creator) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTMwNzM3", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-385930737", "createdAt": "2020-04-01T20:37:33Z", "commit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDozNzozNFrOF_Rrdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDozNzozNFrOF_Rrdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5NDI2Mg==", "bodyText": "Might be confusing wording referring to scopes", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401894262", "createdAt": "2020-04-01T20:37:34Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/EntityPermissionsManagerImplUnitTest.java", "diffHunk": "@@ -872,18 +914,42 @@ public void testHasDownloadAccessWihoutOpenDataAsAnonymous() {\n \t\twhen(mockNodeDao.getBenefactor(nodeId)).thenReturn(benefactorId);\n \t\twhen(mockObjectTypeManager.getObjectsDataType(nodeId, ObjectType.ENTITY)).thenReturn(dataType);\n \n-\t\twhen(mockAclDAO.canAccess(userInfo.getGroups(), benefactorId, ObjectType.ENTITY, ACCESS_TYPE.DOWNLOAD)).thenReturn(false);\n-\t\t\n \t\t// Call under test\n \t\tAuthorizationStatus status = entityPermissionsManager.hasAccess(nodeId, ACCESS_TYPE.DOWNLOAD, userInfo);\n \t\t\n \t\tassertFalse(status.isAuthorized());\n-\t\tassertEquals(\"You lack DOWNLOAD access to the requested entity.\", status.getMessage());\n+\t\tassertEquals(\"Your authorization scope(s) do not allow DOWNLOAD access.\", status.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 273}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTM1MzM0", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-385935334", "createdAt": "2020-04-01T20:44:32Z", "commit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo0NDozMlrOF_R57A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo0NDozMlrOF_R57A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5Nzk2NA==", "bodyText": "Copy/Paste error :) Might need code for the case with no view scope for the user.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401897964", "createdAt": "2020-04-01T20:44:32Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/AuthorizationManagerImplUnitTest.java", "diffHunk": "@@ -291,6 +298,24 @@ public void testCanAccessActivityPaginationSmallResultSet() throws Exception {\n \t\tassertFalse(canAccess);\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCanAccessActivityMissingRequired() throws Exception {\t\t \r\n+\t\tActivity act = new Activity();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTQyMDQw", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-385942040", "createdAt": "2020-04-01T20:55:19Z", "commit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1NToxOVrOF_SPrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1NToxOVrOF_SPrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwMzUzMg==", "bodyText": "We don't need that, we can just use the @InjectMocks annotations", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401903532", "createdAt": "2020-04-01T20:55:19Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/discussion/DiscussionThreadManagerImplTest.java", "diffHunk": "@@ -105,7 +108,7 @@\n \tprivate List<DiscussionThreadEntityReference> entityRefs = new ArrayList<DiscussionThreadEntityReference>();\n \tprivate List<DiscussionThreadEntityReference> titleEntityRefs = new ArrayList<DiscussionThreadEntityReference>();\n \n-\t@Before\n+\t@BeforeEach\n \tpublic void before() {\n \t\tMockitoAnnotations.initMocks(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94", "author": {"user": {"login": "brucehoff", "name": "Bruce Hoff"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/5ae8d6ee9e590eb98f90345382d063ec4392ac94", "committedDate": "2020-04-02T13:22:27Z", "message": "PLFM-5170"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjgxNTg4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-386681588", "createdAt": "2020-04-02T18:18:00Z", "commit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODoxODowMFrOF_3xpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODoxODowMFrOF_3xpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxODQzNg==", "bodyText": "We can consider using a HandlerMethodArgumentResolver (https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/method/support/HandlerMethodArgumentResolver.html) so that we can inject and resolve a parameter by its type in the case when we have a parsed token or alternatively a UserInfo object. Also see https://www.petrikainulainen.net/programming/spring-framework/spring-from-the-trenches-creating-a-custom-handlermethodargumentresolver.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402518436", "createdAt": "2020-04-02T18:18:00Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EntityController.java", "diffHunk": "@@ -266,13 +266,15 @@\n \t */\n \t@ResponseStatus(HttpStatus.CREATED)\n \t@RequestMapping(value = { UrlHelpers.ENTITY }, method = RequestMethod.POST)\n-\tpublic @ResponseBody Entity createEntity(@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\tpublic @ResponseBody Entity createEntity(\n+\t\t\t@RequestHeader(value = AuthorizationConstants.SYNAPSE_AUTHORIZATION_HEADER_NAME, required=true) String authorizationHeader,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjkzNjUz", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-386693653", "createdAt": "2020-04-02T18:34:44Z", "commit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODozNDo0NFrOF_4YJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODozNDo0NFrOF_4YJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyODI5Mw==", "bodyText": "It's not really anonymous user as the the accessToken created above we use use a specific user", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402528293", "createdAt": "2020-04-02T18:34:44Z", "author": {"login": "marcomarasca"}, "path": "integration-test/src/test/java/org/sagebionetworks/ITAccessTokenTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.sagebionetworks;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Collections;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.client.SynapseAdminClient;\n+import org.sagebionetworks.client.SynapseAdminClientImpl;\n+import org.sagebionetworks.client.SynapseClient;\n+import org.sagebionetworks.client.SynapseClientImpl;\n+import org.sagebionetworks.client.exceptions.SynapseException;\n+import org.sagebionetworks.client.exceptions.SynapseForbiddenException;\n+import org.sagebionetworks.repo.model.Project;\n+import org.sagebionetworks.repo.model.oauth.OAuthAuthorizationResponse;\n+import org.sagebionetworks.repo.model.oauth.OAuthClient;\n+import org.sagebionetworks.repo.model.oauth.OAuthGrantType;\n+import org.sagebionetworks.repo.model.oauth.OAuthResponseType;\n+import org.sagebionetworks.repo.model.oauth.OIDCAuthorizationRequest;\n+import org.sagebionetworks.repo.model.oauth.OIDCTokenResponse;\n+\n+/*\n+ * This is a simple test to make sure that the OAuth access token authorization is connected properly.\n+ */\n+public class ITAccessTokenTest {\n+\n+\tprivate static SynapseAdminClient adminSynapse;\n+\tprivate static SynapseClient synapseOne;\n+\tprivate static SynapseClient synapseAnonymous;\n+\tprivate static Long user1ToDelete;\n+\tprivate static Long user2ToDelete;\n+\n+\tprivate OAuthClient client;\n+\tprivate String secret;\n+\n+\tprivate Project project;\n+\n+\t@BeforeAll\n+\tpublic static void beforeClass() throws Exception {\n+\t\t// Create 2 users\n+\t\tadminSynapse = new SynapseAdminClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(adminSynapse);\n+\t\tadminSynapse.setUsername(StackConfigurationSingleton.singleton().getMigrationAdminUsername());\n+\t\tadminSynapse.setApiKey(StackConfigurationSingleton.singleton().getMigrationAdminAPIKey());\n+\t\tadminSynapse.clearAllLocks();\n+\t\tsynapseOne = new SynapseClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(synapseOne);\n+\t\tuser1ToDelete = SynapseClientHelper.createUser(adminSynapse, synapseOne);\n+\n+\t\tsynapseAnonymous = new SynapseClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(synapseAnonymous);\n+\t}\n+\n+\t@AfterAll\n+\tpublic static void afterClass() throws Exception {\n+\t\ttry {\n+\t\t\tif (user1ToDelete!=null) adminSynapse.deleteUser(user1ToDelete);\n+\t\t} catch (SynapseException e) { }\n+\t\ttry {\n+\t\t\tif (user2ToDelete!=null) adminSynapse.deleteUser(user2ToDelete);\n+\t\t} catch (SynapseException e) { }\n+\t}\n+\n+\t@BeforeEach\n+\tpublic void before() throws Exception {\n+\t\t// create the OAuth client\n+\t\tclient = new OAuthClient();\n+\t\tclient.setClient_name(UUID.randomUUID().toString());\n+\t\tclient.setRedirect_uris(Collections.singletonList(\"https://foo.bar.com\"));\n+\t\tclient = synapseOne.createOAuthClient(client);\n+\t\t// Sets the verified status of the client (only admins and ACT can do this)\n+\t\tclient = adminSynapse.updateOAuthClientVerifiedStatus(client.getClient_id(), client.getEtag(), true);\n+\t\tsecret = synapseOne.createOAuthClientSecret(client.getClient_id()).getClient_secret();\n+\t}\n+\n+\t@AfterEach\n+\tpublic void after() throws Exception {\n+\t\ttry {\n+\t\t\tif (project!=null) adminSynapse.deleteEntity(project);\n+\t\t} catch (SynapseException e) { }\n+\t\ttry {\n+\t\t\tif (client!=null) {\n+\t\t\t\tsynapseOne.deleteOAuthClient(client.getClient_id());\n+\t\t\t}\n+\t\t} catch (SynapseException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\n+\tprivate String getAccessToken(String scopes) throws Exception {\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(client.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(client.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\t\tauthorizationRequest.setScope(scopes);\n+\t\tauthorizationRequest.setClaims(\"{\\\"id_token\\\":{},\\\"userinfo\\\":{}}\");\n+\t\tString nonce = UUID.randomUUID().toString();\n+\t\tauthorizationRequest.setNonce(nonce);\t\t\n+\t\tOAuthAuthorizationResponse oauthAuthorizationResponse = synapseOne.authorizeClient(authorizationRequest);\n+\n+\t\t// Note, we use Basic auth to authorize the client when asking for an access token\n+\t\tOIDCTokenResponse tokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret);\n+\t\t\ttokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.authorization_code, \n+\t\t\t\t\toauthAuthorizationResponse.getAccess_code(), client.getRedirect_uris().get(0), null, null, null);\n+\t\t\treturn tokenResponse.getAccess_token();\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testAccessToken() throws Exception {\n+\t\tString accessToken = getAccessToken(\"openid modify view download\");\n+\n+\t\ttry {\n+\t\t\t// We use the bearer token to authorize the client \n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(accessToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2Njk0NzA0", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-386694704", "createdAt": "2020-04-02T18:36:16Z", "commit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODozNjoxNlrOF_4bXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODozNjoxNlrOF_4bXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyOTExNw==", "bodyText": "Maybe we can add a true negative test where we try to do something that we are not supposed to be able do to yet with an access token (e.g. Create an evaluation queue).", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402529117", "createdAt": "2020-04-02T18:36:16Z", "author": {"login": "marcomarasca"}, "path": "integration-test/src/test/java/org/sagebionetworks/ITAccessTokenTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.sagebionetworks;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Collections;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.client.SynapseAdminClient;\n+import org.sagebionetworks.client.SynapseAdminClientImpl;\n+import org.sagebionetworks.client.SynapseClient;\n+import org.sagebionetworks.client.SynapseClientImpl;\n+import org.sagebionetworks.client.exceptions.SynapseException;\n+import org.sagebionetworks.client.exceptions.SynapseForbiddenException;\n+import org.sagebionetworks.repo.model.Project;\n+import org.sagebionetworks.repo.model.oauth.OAuthAuthorizationResponse;\n+import org.sagebionetworks.repo.model.oauth.OAuthClient;\n+import org.sagebionetworks.repo.model.oauth.OAuthGrantType;\n+import org.sagebionetworks.repo.model.oauth.OAuthResponseType;\n+import org.sagebionetworks.repo.model.oauth.OIDCAuthorizationRequest;\n+import org.sagebionetworks.repo.model.oauth.OIDCTokenResponse;\n+\n+/*\n+ * This is a simple test to make sure that the OAuth access token authorization is connected properly.\n+ */\n+public class ITAccessTokenTest {\n+\n+\tprivate static SynapseAdminClient adminSynapse;\n+\tprivate static SynapseClient synapseOne;\n+\tprivate static SynapseClient synapseAnonymous;\n+\tprivate static Long user1ToDelete;\n+\tprivate static Long user2ToDelete;\n+\n+\tprivate OAuthClient client;\n+\tprivate String secret;\n+\n+\tprivate Project project;\n+\n+\t@BeforeAll\n+\tpublic static void beforeClass() throws Exception {\n+\t\t// Create 2 users\n+\t\tadminSynapse = new SynapseAdminClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(adminSynapse);\n+\t\tadminSynapse.setUsername(StackConfigurationSingleton.singleton().getMigrationAdminUsername());\n+\t\tadminSynapse.setApiKey(StackConfigurationSingleton.singleton().getMigrationAdminAPIKey());\n+\t\tadminSynapse.clearAllLocks();\n+\t\tsynapseOne = new SynapseClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(synapseOne);\n+\t\tuser1ToDelete = SynapseClientHelper.createUser(adminSynapse, synapseOne);\n+\n+\t\tsynapseAnonymous = new SynapseClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(synapseAnonymous);\n+\t}\n+\n+\t@AfterAll\n+\tpublic static void afterClass() throws Exception {\n+\t\ttry {\n+\t\t\tif (user1ToDelete!=null) adminSynapse.deleteUser(user1ToDelete);\n+\t\t} catch (SynapseException e) { }\n+\t\ttry {\n+\t\t\tif (user2ToDelete!=null) adminSynapse.deleteUser(user2ToDelete);\n+\t\t} catch (SynapseException e) { }\n+\t}\n+\n+\t@BeforeEach\n+\tpublic void before() throws Exception {\n+\t\t// create the OAuth client\n+\t\tclient = new OAuthClient();\n+\t\tclient.setClient_name(UUID.randomUUID().toString());\n+\t\tclient.setRedirect_uris(Collections.singletonList(\"https://foo.bar.com\"));\n+\t\tclient = synapseOne.createOAuthClient(client);\n+\t\t// Sets the verified status of the client (only admins and ACT can do this)\n+\t\tclient = adminSynapse.updateOAuthClientVerifiedStatus(client.getClient_id(), client.getEtag(), true);\n+\t\tsecret = synapseOne.createOAuthClientSecret(client.getClient_id()).getClient_secret();\n+\t}\n+\n+\t@AfterEach\n+\tpublic void after() throws Exception {\n+\t\ttry {\n+\t\t\tif (project!=null) adminSynapse.deleteEntity(project);\n+\t\t} catch (SynapseException e) { }\n+\t\ttry {\n+\t\t\tif (client!=null) {\n+\t\t\t\tsynapseOne.deleteOAuthClient(client.getClient_id());\n+\t\t\t}\n+\t\t} catch (SynapseException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\n+\tprivate String getAccessToken(String scopes) throws Exception {\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(client.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(client.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\t\tauthorizationRequest.setScope(scopes);\n+\t\tauthorizationRequest.setClaims(\"{\\\"id_token\\\":{},\\\"userinfo\\\":{}}\");\n+\t\tString nonce = UUID.randomUUID().toString();\n+\t\tauthorizationRequest.setNonce(nonce);\t\t\n+\t\tOAuthAuthorizationResponse oauthAuthorizationResponse = synapseOne.authorizeClient(authorizationRequest);\n+\n+\t\t// Note, we use Basic auth to authorize the client when asking for an access token\n+\t\tOIDCTokenResponse tokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret);\n+\t\t\ttokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.authorization_code, \n+\t\t\t\t\toauthAuthorizationResponse.getAccess_code(), client.getRedirect_uris().get(0), null, null, null);\n+\t\t\treturn tokenResponse.getAccess_token();\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testAccessToken() throws Exception {\n+\t\tString accessToken = getAccessToken(\"openid modify view download\");\n+\n+\t\ttry {\n+\t\t\t// We use the bearer token to authorize the client \n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(accessToken);\n+\t\t\tproject = new Project();\n+\t\t\tproject.setName(\"access token test\");\n+\t\t\tproject = synapseAnonymous.createEntity(project);\n+\t\t\tassertNotNull(project.getId());\n+\t\t\tproject = synapseAnonymous.getEntity(project.getId(), Project.class);\n+\t\t\t\n+\t\t\t// But if we don't have 'view' scope we can't get the entity\n+\t\t\tString accessToken2 = getAccessToken(\"openid modify download\");\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(accessToken2);\n+\t\t\tAssertions.assertThrows(SynapseForbiddenException.class, () -> {\n+\t\t\t\tproject = synapseAnonymous.getEntity(project.getId(), Project.class);\t\t\t\t\n+\t\t\t});\n+\t\t\t\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2Njk4OTI2", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-386698926", "createdAt": "2020-04-02T18:42:05Z", "commit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo0MjowNVrOF_4ogA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo0MjowNVrOF_4ogA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzMjQ4MA==", "bodyText": "See AbstractAutowiredControllerJunit5TestBase", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402532480", "createdAt": "2020-04-02T18:42:05Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/controller/AbstractAutowiredControllerTestBaseForJupiter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.sagebionetworks.repo.web.controller;\r\n+\r\n+import org.junit.jupiter.api.AfterEach;\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.extension.ExtendWith;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.context.ApplicationContext;\r\n+import org.springframework.context.ApplicationContextAware;\r\n+import org.springframework.mock.web.MockServletConfig;\r\n+import org.springframework.test.context.ContextConfiguration;\r\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\r\n+import org.springframework.web.context.WebApplicationContext;\r\n+import org.springframework.web.context.support.StaticWebApplicationContext;\r\n+import org.springframework.web.servlet.DispatcherServlet;\r\n+\r\n+/**\r\n+ * Base class for autowired controller tests\r\n+ * \r\n+ */\r\n+@ExtendWith(SpringExtension.class)\r\n+@ContextConfiguration(locations = { \"classpath:test-context.xml\" })\r\n+public abstract class AbstractAutowiredControllerTestBaseForJupiter implements ApplicationContextAware {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzA0NTYw", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-386704560", "createdAt": "2020-04-02T18:50:08Z", "commit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1MDowOFrOF_46sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1MDowOFrOF_46sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzNzEzNw==", "bodyText": "Put this into the validateCLientVerificationStatus", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402537137", "createdAt": "2020-04-02T18:50:08Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "diffHunk": "@@ -375,7 +373,9 @@ public UserAuthorization getUserAuthorization(String oauthToken) {\n \t\t\tthrow new IllegalArgumentException(\"Missing 'audience' value in the OAuth Access Token.\");\n \t\t}\n \n-\t\tvalidateClientVerificationStatus(oauthClientId);\n+\t\tif (!oauthClientId.equals(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzA3Mzg0", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-386707384", "createdAt": "2020-04-02T18:53:42Z", "commit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1Mzo0MlrOF_5Dbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1Mzo0MlrOF_5Dbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzOTM3NA==", "bodyText": "Double check that the constant is a string", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402539374", "createdAt": "2020-04-02T18:53:42Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "diffHunk": "@@ -384,18 +384,26 @@ public UserAuthorization getUserAuthorization(String oauthToken) {\n \n \t\t// userId is used to retrieve the user info\n \t\tString userId = getUserIdFromPPID(ppid, oauthClientId);\n-\n-\t\tUserAuthorization result = new UserAuthorization();\n-\t\tUserInfo userInfo = userManager.getUserInfo(Long.parseLong(userId));\n+\t\t// If the user belongs to the admin group they are an admin\n+\t\tSet<Long> groups = userManager.getUserGroups(Long.parseLong(userId));\n+\t\t\n+\t\t// Check to see if the user is an Admin\n+\t\tboolean isAdmin = groups.contains(AuthorizationConstants.BOOTSTRAP_PRINCIPAL.ADMINISTRATORS_GROUP.getPrincipalId());\n+\t\t// we don't let clients besides Synapse itself have admin access\n+\t\tboolean adminAccessAllowed = oauthClientId.equals(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzA4MDE2", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-386708016", "createdAt": "2020-04-02T18:54:40Z", "commit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1NDo0MVrOF_5FsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1NDo0MVrOF_5FsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzOTk1Mg==", "bodyText": "This should be full scope as the ACL will take care of access restrictions", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402539952", "createdAt": "2020-04-02T18:54:41Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImpl.java", "diffHunk": "@@ -150,7 +150,7 @@ public String createAnonymousAccessToken() {\n \t\tString subject = AuthorizationConstants.BOOTSTRAP_PRINCIPAL.ANONYMOUS_USER.getPrincipalId().toString(); // we don't encrypt the subject\n \t\tString oauthClientId = \"\"+AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID;\n \t\tString tokenId = UUID.randomUUID().toString();\n-\t\tList<OAuthScope> noScopes = Collections.EMPTY_LIST;\n+\t\tList<OAuthScope> noScopes = Collections.singletonList(OAuthScope.view);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzEzMTUy", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-386713152", "createdAt": "2020-04-02T19:01:38Z", "commit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOTowMTozOVrOF_5Vxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOTowMTozOVrOF_5Vxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU0NDA3MQ==", "bodyText": "maybe rename to just userGroups since this is really not admin groups", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402544071", "createdAt": "2020-04-02T19:01:39Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImplUnitTest.java", "diffHunk": "@@ -899,29 +900,115 @@ public void testGetUserAuthorization() {\n \t\tString token = \"access token\";\n \t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n \t\tClaims claims = Jwts.claims();\n-\t\tList<OAuthScope> scopes = Collections.singletonList(OAuthScope.openid);\n+\t\tList<OAuthScope> scopes = Arrays.asList(OAuthScope.values());\n \t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n \t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n \t\twhen(mockJWT.getBody()).thenReturn(claims);\n \t\tclaims.setAudience(OAUTH_CLIENT_ID);\n \t\twhen(mockOauthClientDao.getSectorIdentifierSecretForClient(OAUTH_CLIENT_ID)).thenReturn(clientSpecificEncodingSecret);\n \t\twhen(mockOauthClientDao.isOauthClientVerified(OAUTH_CLIENT_ID)).thenReturn(true);\n \t\t\n-\t\tString ppid = openIDConnectManagerImpl.ppid(USER_ID, OAUTH_CLIENT_ID);\n+\t\tString ppid = EncryptionUtils.encrypt(USER_ID, clientSpecificEncodingSecret);\n \t\tclaims.setSubject(ppid);\n \t\t\n-\t\tUserInfo userInfo = new UserInfo(false, USER_ID_LONG);\n-\t\twhen(mockUserManager.getUserInfo(USER_ID_LONG)).thenReturn(userInfo);\n+\t\tSet<Long> adminUsersGroups = ImmutableSet.of(USER_ID_LONG, \n+\t\t\t\tAuthorizationConstants.BOOTSTRAP_PRINCIPAL.ADMINISTRATORS_GROUP.getPrincipalId());\n+\t\twhen(mockUserManager.getUserGroups(USER_ID_LONG)).thenReturn(adminUsersGroups);\n \t\t\n \t\t// method under test\n-\t\tUserAuthorization actual = openIDConnectManagerImpl.getUserAuthorization(token);\n+\t\tUserInfo actual = openIDConnectManagerImpl.getUserAuthorization(token);\n \t\t\n \t\tverify(mockJWT).getBody();\n-\t\tverify(mockUserManager).getUserInfo(USER_ID_LONG);\n+\t\tverify(mockUserManager).getUserGroups(USER_ID_LONG);\n+\t\tverify(mockOauthClientDao).getSectorIdentifierSecretForClient(OAUTH_CLIENT_ID);\n \t\t\n+\t\tassertFalse(actual.isAdmin()); // it's false 'cause the oauth client is not Synapse\n+\t\tassertEquals(USER_ID_LONG, actual.getId());\n \t\tassertEquals(oidcClaims, actual.getOidcClaims());\n \t\tassertEquals(scopes, actual.getScopes());\n-\t\tassertEquals(userInfo, actual.getUserInfo());\n+\t\tassertEquals(adminUsersGroups, actual.getGroups());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetUserAuthorizationSynapseOAuthClient() {\n+\t\tString token = \"access token\";\n+\t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n+\t\tClaims claims = Jwts.claims();\n+\t\tList<OAuthScope> scopes = Collections.singletonList(OAuthScope.openid);\n+\t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n+\t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n+\t\twhen(mockJWT.getBody()).thenReturn(claims);\n+\t\tclaims.setAudience(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\t\t\n+\t\tclaims.setSubject(USER_ID);\t\n+\t\twhen(mockUserManager.getUserGroups(USER_ID_LONG)).thenReturn(userInfo.getGroups());\n+\t\t\n+\t\t// method under test\n+\t\topenIDConnectManagerImpl.getUserAuthorization(token);\n+\t\t\n+\t\tverify(mockOauthClientDao, never()).getSectorIdentifierSecretForClient(OAUTH_CLIENT_ID);\n+\t\tverify(mockOauthClientDao, never()).isOauthClientVerified(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetAdminUserAuthorizationSynapseOAuthClient() {\n+\t\tString token = \"access token\";\n+\t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n+\t\tClaims claims = Jwts.claims();\n+\t\tList<OAuthScope> scopes = Arrays.asList(OAuthScope.values());\n+\t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n+\t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n+\t\twhen(mockJWT.getBody()).thenReturn(claims);\n+\t\tclaims.setAudience(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\t\t\n+\t\tclaims.setSubject(USER_ID);\t\n+\t\tSet<Long> adminUsersGroups = ImmutableSet.of(USER_ID_LONG, \n+\t\t\t\tAuthorizationConstants.BOOTSTRAP_PRINCIPAL.ADMINISTRATORS_GROUP.getPrincipalId());\n+\t\twhen(mockUserManager.getUserGroups(USER_ID_LONG)).thenReturn(adminUsersGroups);\n+\t\t\n+\t\t// method under test\n+\t\tUserInfo actual = openIDConnectManagerImpl.getUserAuthorization(token);\n+\t\t\n+\t\tassertTrue(actual.isAdmin());\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testGetAdminUserAuthorizationSynapseOAuthClientNotFullScope() {\n+\t\tString token = \"access token\";\n+\t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n+\t\tClaims claims = Jwts.claims();\n+\t\tList<OAuthScope> scopes = ImmutableList.of(OAuthScope.openid, OAuthScope.view);\n+\t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n+\t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n+\t\twhen(mockJWT.getBody()).thenReturn(claims);\n+\t\tclaims.setAudience(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\t\t\n+\t\tclaims.setSubject(USER_ID);\t\n+\t\tSet<Long> adminUsersGroups = ImmutableSet.of(USER_ID_LONG, \n+\t\t\t\tAuthorizationConstants.BOOTSTRAP_PRINCIPAL.ADMINISTRATORS_GROUP.getPrincipalId());\n+\t\twhen(mockUserManager.getUserGroups(USER_ID_LONG)).thenReturn(adminUsersGroups);\n+\t\t\n+\t\t// method under test\n+\t\tUserInfo actual = openIDConnectManagerImpl.getUserAuthorization(token);\n+\t\t\n+\t\tassertFalse(actual.isAdmin());\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testGetAdminUserAuthorizationSynapseOAuthClientNotAdminGroup() {\n+\t\tString token = \"access token\";\n+\t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n+\t\tClaims claims = Jwts.claims();\n+\t\tList<OAuthScope> scopes = Arrays.asList(OAuthScope.values());\n+\t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n+\t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n+\t\twhen(mockJWT.getBody()).thenReturn(claims);\n+\t\tclaims.setAudience(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\t\t\n+\t\tclaims.setSubject(USER_ID);\t\n+\t\tSet<Long> adminUsersGroups = ImmutableSet.of(USER_ID_LONG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 173}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzIyNTcz", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-386722573", "createdAt": "2020-04-02T19:15:08Z", "commit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToxNTowOFrOF_50Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToxNTowOFrOF_50Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MTg3MQ==", "bodyText": "Use the existing base class for Junit5", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402551871", "createdAt": "2020-04-02T19:15:08Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/StackStatusInterceptorTest.java", "diffHunk": "@@ -17,38 +19,43 @@\n import org.sagebionetworks.repo.model.status.StackStatus;\r\n import org.sagebionetworks.repo.model.status.StatusEnum;\r\n import org.sagebionetworks.repo.model.versionInfo.SynapseVersionInfo;\r\n-import org.sagebionetworks.repo.web.controller.AbstractAutowiredControllerTestBase;\r\n+import org.sagebionetworks.repo.web.controller.AbstractAutowiredControllerTestBaseForJupiter;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n \r\n /**\r\n  * Test that the intercepter is working as expected.\r\n  * @author John\r\n  *\r\n  */\r\n-public class StackStatusInterceptorTest extends AbstractAutowiredControllerTestBase {\r\n+public class StackStatusInterceptorTest extends AbstractAutowiredControllerTestBaseForJupiter {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzMwNjI1", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-386730625", "createdAt": "2020-04-02T19:27:11Z", "commit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyNzoxMlrOF_6Obw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyNzoxMlrOF_6Obw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1ODU3NQ==", "bodyText": "We can use @InjectMocks and get rid of the ReflectionTestUtils.setField", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402558575", "createdAt": "2020-04-02T19:27:12Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/filter/throttle/RequestThrottleFilterTest.java", "diffHunk": "@@ -59,13 +64,17 @@ public void setUp() throws Exception{\n \t\tmockRequest.setRemoteAddr(ipAddress);\r\n \t\tmockRequest.setRequestURI(path);\r\n \t\tmockRequest.setCookies(new Cookie(SESSION_ID_COOKIE_NAME, sessionId));\r\n+\t\tmockRequest.addHeader(AuthorizationConstants.SYNAPSE_AUTHORIZATION_HEADER_NAME, \"Bearer \"+ACCESS_TOKEN);\r\n \r\n \t\tReflectionTestUtils.setField(filter, \"consumer\", mockConsumer);\r\n+\t\tReflectionTestUtils.setField(filter, \"oidcManager\", mockOidcManager);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzM1ODcx", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#pullrequestreview-386735871", "createdAt": "2020-04-02T19:35:22Z", "commit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4841, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}