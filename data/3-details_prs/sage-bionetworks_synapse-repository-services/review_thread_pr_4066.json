{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MjI2MzI2", "number": 4066, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMToxMDo1M1rOEBj81w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMToxMDo1M1rOEBj81w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDczMDQ3OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/evaluation/manager/EvaluationPermissionsManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMToxMDo1M1rOGde5SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMToxMDo1M1rOGde5SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2ODA3Mg==", "bodyText": "need a better name.  maybe getAccessibleIds()", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4066#discussion_r433568072", "createdAt": "2020-06-02T01:10:53Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/evaluation/manager/EvaluationPermissionsManagerImpl.java", "diffHunk": "@@ -144,24 +147,61 @@ public AccessControlList getAcl(UserInfo userInfo, String evalId)\n \t@Override\n \tpublic AuthorizationStatus hasAccess(UserInfo userInfo, String evalId, ACCESS_TYPE accessType)\n \t\t\tthrows NotFoundException, DatastoreException {\n-\t\tif (userInfo == null) {\n-\t\t\tthrow new IllegalArgumentException(\"User info cannot be null.\");\n-\t\t}\n \t\tif (evalId == null || evalId.isEmpty()) {\n \t\t\tthrow new IllegalArgumentException(\"Evaluation ID cannot be null or empty.\");\n \t\t}\n+\n+\t\treturn hasAccess(userInfo, accessType).orElseGet(() -> {\n+\t\t\tif (!aclDAO.canAccess(userInfo.getGroups(), evalId, ObjectType.EVALUATION, accessType)) {\n+\t\t\t\treturn AuthorizationStatus.accessDenied(\"User lacks \"+accessType+\" access to Evaluation \"+evalId);\n+\t\t\t}\n+\t\t\t\n+\t\t\treturn AuthorizationStatus.authorized();\n+\t\t});\n+\t}\n+\t\n+\t@Override\n+\tpublic AuthorizationStatus hasAccess(UserInfo userInfo, ACCESS_TYPE accessType, List<String> evaluationIds)\n+\t\t\tthrows NotFoundException, DatastoreException {\n+\t\tif (evaluationIds == null || evaluationIds.isEmpty()) {\n+\t\t\tthrow new IllegalArgumentException(\"The set of evaluation ids cannot be null or empty.\");\n+\t\t}\n+\t\t\n+\t\tSet<Long> benefactorIds = evaluationIds.stream()\n+\t\t\t\t.map((id) -> KeyFactory.stringToKey(id))\n+\t\t\t\t.collect(Collectors.toSet());\n+\t\t\n+\t\treturn hasAccess(userInfo, accessType).orElseGet(() -> {\n+\t\t\tSet<Long> accessibleSet = aclDAO.getAccessibleBenefactors(userInfo.getGroups(), benefactorIds, ObjectType.EVALUATION, accessType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "240f8c3a5c5b119f9ae1b5d40baea73a38dc0bad"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3059, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}