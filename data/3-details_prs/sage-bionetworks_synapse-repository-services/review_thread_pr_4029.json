{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExOTUyMTU0", "number": 4029, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOToxNjo1M1rOD4dYdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOToyMDo1MFrOD4dcMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTI4MjQ1OnYy", "diffSide": "RIGHT", "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOToxNjo1M1rOGPTHHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOToxNjo1M1rOGPTHHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5NDk0Mg==", "bodyText": "You might want to check that there are no DB interactions instead and wrap it into the assertDoesNotThrow to give it context", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4029#discussion_r418694942", "createdAt": "2020-05-01T19:16:53Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplUnitTest.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.sagebionetworks.table.cluster;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Sets;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.sagebionetworks.repo.model.ObjectType;\n+import org.sagebionetworks.repo.model.table.ColumnModel;\n+import org.sagebionetworks.repo.model.table.ColumnType;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n+import org.springframework.jdbc.datasource.DataSourceTransactionManager;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class TableIndexDAOImplUnitTest {\n+\t@Mock\n+\tprivate DataSourceTransactionManager mockTransactionManager;\n+\t@Mock\n+\tprivate TransactionTemplate mockWriteTransactionTemplate;\n+\t@Mock\n+\tprivate TransactionTemplate mockReadTransactionTemplate;\n+\t@Mock\n+\tprivate JdbcTemplate mockTemplate;\n+\t@Mock\n+\tprivate NamedParameterJdbcTemplate mockNamedTemplate;\n+\n+\t@Spy\n+\t@InjectMocks\n+\tTableIndexDAOImpl spyDao;\n+\n+\n+\n+\t@Test\n+\tpublic void testValidateMaxListLengthInAnnotationReplication_noListColumns(){\n+\n+\t\tColumnModel bar = new ColumnModel();\n+\t\tbar.setId(\"1234\");\n+\t\tbar.setName(\"bar\");\n+\t\tbar.setColumnType(ColumnType.INTEGER);\n+\n+\t\tList<ColumnModel> currentSchema = Arrays.asList(bar);\n+\n+\n+\t\tObjectType objectType = ObjectType.FILE;\n+\t\tlong viewId = 123L;\n+\t\tlong viewTypeMask = 1L;\n+\t\tSet<Long> allContainersInScope = Sets.newHashSet(111L,222L);\n+\t\tSet<Long> objectIdFilter = null;\n+\n+\t\t// method under test\n+\t\tspyDao.validateMaxListLengthInAnnotationReplication(objectType,viewId,viewTypeMask,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c787570508b453e72e0204282d75ccc245e9b1d"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTI4NDQzOnYy", "diffSide": "RIGHT", "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOToxNzo0N1rOGPTIeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOToxNzo0N1rOGPTIeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5NTI5MA==", "bodyText": "This kind of methods might go into the new unit test class", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4029#discussion_r418695290", "createdAt": "2020-05-01T19:17:47Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java", "diffHunk": "@@ -1417,7 +1417,7 @@ public void testGetMaxListSizeForAnnotations_nullScope() throws ParseException {\n \t\tSet<String> annotationNames = Sets.newHashSet(\"foo\", \"bar\");\r\n \r\n \t\tString errorMessage = assertThrows(IllegalArgumentException.class, () ->\r\n-\t\t\t\ttableIndexDAO.getMaxListSizeForAnnotations(objectType, tableId.getId(),\r\n+\t\t\t\t((TableIndexDAOImpl) tableIndexDAO).getMaxListSizeForAnnotations(objectType, tableId.getId(),\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c787570508b453e72e0204282d75ccc245e9b1d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTI5MjAyOnYy", "diffSide": "RIGHT", "path": "services/workers/src/test/java/org/sagebionetworks/table/worker/TableViewIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOToyMDo1MFrOGPTNTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxOToyMDo1MFrOGPTNTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5NjUyNA==", "bodyText": "Can you double check if we truncate the number of values at the end of the message? The error message might become extremely long, maybe we can remove the list of values in the error message (e.g. we might just need the total count)?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4029#discussion_r418696524", "createdAt": "2020-05-01T19:20:50Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/test/java/org/sagebionetworks/table/worker/TableViewIntegrationTest.java", "diffHunk": "@@ -1575,6 +1574,45 @@ public void testEntityView_multipleValueColumnRoundTrip_changeMaxListLength() th\n \t\t).getMessage();\r\n \t\tassertEquals(\"maximumListLength for ColumnModel \\\"stringList\\\" must be at least: 3\", error);\r\n \t}\r\n+\r\n+\r\n+\t@Test\r\n+\tpublic void testEntityView_multipleValueColumnRoundTrip_updateRowGreaterThanMaxListLength() throws Exception {\r\n+\t\tdefaultColumnIds.add(stringListColumn.getId());\r\n+\t\tcreateFileView();\r\n+\r\n+\t\tassertTrue(fileCount >= 2, \"setup() needs to create at least 2 entities for this test to work\");\r\n+\r\n+\t\tLong fileId = KeyFactory.stringToKey(fileIds.get(0));\r\n+\r\n+\t\t//set annotations for 2 files\r\n+\t\tAnnotations fileAnnotation1 = entityManager.getAnnotations(adminUserInfo, fileIds.get(0));\r\n+\t\tAnnotationsV2TestUtils.putAnnotations(fileAnnotation1, stringListColumn.getName(), Arrays.asList(\"val1\", \"val2\", \"val3\"), AnnotationsValueType.STRING);\r\n+\t\tentityManager.updateAnnotations(adminUserInfo, fileIds.get(0), fileAnnotation1);\r\n+\r\n+\t\tAnnotations fileAnnotation2 = entityManager.getAnnotations(adminUserInfo, fileIds.get(1));\r\n+\t\tAnnotationsV2TestUtils.putAnnotations(fileAnnotation2, stringListColumn.getName(), Arrays.asList(\"val2\", \"val3\"), AnnotationsValueType.STRING);\r\n+\t\tentityManager.updateAnnotations(adminUserInfo, fileIds.get(1), fileAnnotation2);\r\n+\r\n+\r\n+\t\twaitForEntityReplication(fileViewId, fileIds.get(0));\r\n+\r\n+\r\n+\t\tQueryResultBundle result = waitForConsistentQuery(adminUserInfo, \"select \" + stringListColumn.getName() + \" from \" + fileViewId, fileCount);\r\n+\t\tassertEquals(fileCount, result.getQueryCount());\r\n+\r\n+\t\t//update annotations via row changes to exceed maximumListLength\r\n+\t\tRowSet rowset = result.getQueryResult().getQueryResults();\r\n+\t\trowset.getRows().get(0).setValues(Collections.singletonList(\"[\\\"val1\\\",\\\"val2\\\",\\\"val3\\\",\\\"val4\\\"]\"));\r\n+\r\n+\t\t// wait for the change to complete\r\n+//\t\tstartAndWaitForJob(adminUserInfo, transaction, TableUpdateTransactionResponse.class);\r\n+\r\n+\t\tString error = assertThrows(AsynchJobFailedException.class, () ->\r\n+\t\t\t\tupdateView(rowset,fileViewId)\r\n+\t\t).getMessage();\r\n+\t\tassertEquals(\"Value at [0,16] was not a valid STRING_LIST. Exceeds the maximum number of list elements defined in the ColumnModel (3): \\\"[\\\"val1\\\",\\\"val2\\\",\\\"val3\\\",\\\"val4\\\"]\\\"\", error);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c787570508b453e72e0204282d75ccc245e9b1d"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3015, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}