{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMTY1NDg5", "number": 3994, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTowMjo0MVrODwnXxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjowMToxMFrODwn8DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzAzMzAyOnYy", "diffSide": "RIGHT", "path": "lib/lib-schema-id/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTowMjo0MVrOGDuGtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTowMjo0MVrOGDuGtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1NDI5NQ==", "bodyText": "You could potentially exclude some paths in the coverage, e.g. stuff autogenerated that does not need to be tested by us (See the root pom.xml to see how to exclude)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406554295", "createdAt": "2020-04-10T01:02:41Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-schema-id/pom.xml", "diffHunk": "@@ -0,0 +1,95 @@\n+<?xml version=\"1.0\"?>\n+<project\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+\txmlns=\"http://maven.apache.org/POM/4.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.sagebionetworks</groupId>\n+\t\t<artifactId>lib</artifactId>\n+\t\t<version>develop-SNAPSHOT</version>\n+\t</parent>\n+\t<artifactId>lib-schema-id</artifactId>\n+\t<name>lib-schema-id</name>\n+\t<url>http://maven.apache.org</url>\n+\t<properties>\n+\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+\t\t<jacoco.branch.minumum>0.50</jacoco.branch.minumum>\n+\t\t<jacoco.line.minumum>0.50</jacoco.line.minumum>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA1MjE0OnYy", "diffSide": "RIGHT", "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToxNDo0M1rOGDuRHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToxNDo0M1rOGDuRHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1Njk1Nw==", "bodyText": "This should probably throw", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406556957", "createdAt": "2020-04-10T01:14:43Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA1OTQ2OnYy", "diffSide": "RIGHT", "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToxOTowOVrOGDuVNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyMDo1MlrOGDuWvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1ODAwNA==", "bodyText": "Add case aaa123", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406558004", "createdAt": "2020-04-10T01:19:09Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");\n+\t\t// while this will parse everything after the zero is lost, so it would fail in a larger context\n+\t\tVersionCore core = parser.versionCore();\n+\t\t// confirm the 2 is lost\n+\t\tassertEquals(\"1.5.0\", core.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumeric() throws ParseException {\n+\t\ttestAlphanumericIdentifier(\"-\");\n+\t\ttestAlphanumericIdentifier(\"a\");\n+\t\ttestAlphanumericIdentifier(\"a1123\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1ODM5OQ==", "bodyText": "Also single 0 is allowed", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406558399", "createdAt": "2020-04-10T01:20:52Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");\n+\t\t// while this will parse everything after the zero is lost, so it would fail in a larger context\n+\t\tVersionCore core = parser.versionCore();\n+\t\t// confirm the 2 is lost\n+\t\tassertEquals(\"1.5.0\", core.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumeric() throws ParseException {\n+\t\ttestAlphanumericIdentifier(\"-\");\n+\t\ttestAlphanumericIdentifier(\"a\");\n+\t\ttestAlphanumericIdentifier(\"a1123\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1ODAwNA=="}, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA3NDM3OnYy", "diffSide": "RIGHT", "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyNzo1OFrOGDudag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyNzo1OFrOGDudag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MDEwNg==", "bodyText": "missing core+build only", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406560106", "createdAt": "2020-04-10T01:27:58Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");\n+\t\t// while this will parse everything after the zero is lost, so it would fail in a larger context\n+\t\tVersionCore core = parser.versionCore();\n+\t\t// confirm the 2 is lost\n+\t\tassertEquals(\"1.5.0\", core.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumeric() throws ParseException {\n+\t\ttestAlphanumericIdentifier(\"-\");\n+\t\ttestAlphanumericIdentifier(\"a\");\n+\t\ttestAlphanumericIdentifier(\"a1123\");\n+\t\ttestAlphanumericIdentifier(\"abcdefghijklmnopqurstuvwxyz\");\n+\t\ttestAlphanumericIdentifier(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n+\t\ttestAlphanumericIdentifier(\"z1-z2\");\n+\t}\n+\t\n+\tpublic void testAlphanumericIdentifier(String toTest) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(toTest);\n+\t\tAlphanumericIdentifier alphanumeric = parser.alphanumericIdentifier();\n+\t\tassertEquals(toTest, alphanumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithNumber() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"9abc\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0123\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifier() throws ParseException {\n+\t\ttestPrereleaseIdentifier(\"123\");\n+\t\ttestPrereleaseIdentifier(\"-abc\");\n+\t}\n+\t\n+\tpublic void testPrereleaseIdentifier(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\tassertEquals(prereleaseIdentifier.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifierStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"045\");\n+\t\t// while this does not fail it does not parse anything after the zero\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\t// digits after the zero are lost\n+\t\tassertEquals(\"0\", prereleaseIdentifier.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrerelease() throws ParseException {\n+\t\ttestPrerelease(\"alpha\");\n+\t\ttestPrerelease(\"alpha.1\");\n+\t\ttestPrerelease(\"0.3.7\");\n+\t\ttestPrerelease(\"x.7.z.92\");\n+\t}\n+\t\n+\tpublic void testPrerelease(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrerelease prerelease = parser.prerelease();\n+\t\tassertEquals(prerelease.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testBuild() throws ParseException {\n+\t\ttestBuild(\"001\");\n+\t\ttestBuild(\"20130313144700\");\n+\t\ttestBuild(\"exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testBuild(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tBuild build = parser.build();\n+\t\tassertEquals(build.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSemanticVersion() throws ParseException {\n+\t\ttestSemanticVersion(\"0.0.0\");\n+\t\ttestSemanticVersion(\"1.23.456\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92+exp.sha.5114f85\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA3NjY3OnYy", "diffSide": "RIGHT", "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyOToyNlrOGDuevg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyOToyNlrOGDuevg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MDQ0Ng==", "bodyText": "Add test for dotSeparatedAlphanumeritc that starts with a dot (and fails)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406560446", "createdAt": "2020-04-10T01:29:26Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");\n+\t\t// while this will parse everything after the zero is lost, so it would fail in a larger context\n+\t\tVersionCore core = parser.versionCore();\n+\t\t// confirm the 2 is lost\n+\t\tassertEquals(\"1.5.0\", core.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumeric() throws ParseException {\n+\t\ttestAlphanumericIdentifier(\"-\");\n+\t\ttestAlphanumericIdentifier(\"a\");\n+\t\ttestAlphanumericIdentifier(\"a1123\");\n+\t\ttestAlphanumericIdentifier(\"abcdefghijklmnopqurstuvwxyz\");\n+\t\ttestAlphanumericIdentifier(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n+\t\ttestAlphanumericIdentifier(\"z1-z2\");\n+\t}\n+\t\n+\tpublic void testAlphanumericIdentifier(String toTest) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(toTest);\n+\t\tAlphanumericIdentifier alphanumeric = parser.alphanumericIdentifier();\n+\t\tassertEquals(toTest, alphanumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithNumber() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"9abc\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0123\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifier() throws ParseException {\n+\t\ttestPrereleaseIdentifier(\"123\");\n+\t\ttestPrereleaseIdentifier(\"-abc\");\n+\t}\n+\t\n+\tpublic void testPrereleaseIdentifier(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\tassertEquals(prereleaseIdentifier.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifierStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"045\");\n+\t\t// while this does not fail it does not parse anything after the zero\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\t// digits after the zero are lost\n+\t\tassertEquals(\"0\", prereleaseIdentifier.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrerelease() throws ParseException {\n+\t\ttestPrerelease(\"alpha\");\n+\t\ttestPrerelease(\"alpha.1\");\n+\t\ttestPrerelease(\"0.3.7\");\n+\t\ttestPrerelease(\"x.7.z.92\");\n+\t}\n+\t\n+\tpublic void testPrerelease(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrerelease prerelease = parser.prerelease();\n+\t\tassertEquals(prerelease.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testBuild() throws ParseException {\n+\t\ttestBuild(\"001\");\n+\t\ttestBuild(\"20130313144700\");\n+\t\ttestBuild(\"exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testBuild(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tBuild build = parser.build();\n+\t\tassertEquals(build.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSemanticVersion() throws ParseException {\n+\t\ttestSemanticVersion(\"0.0.0\");\n+\t\ttestSemanticVersion(\"1.23.456\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92+exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testSemanticVersion(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tSemanticVersion semanticVersion = parser.semanticVersion();\n+\t\tassertEquals(input, semanticVersion.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumeric() throws ParseException {\n+\t\ttestDotSeparatedAlphanumeric(\"abc\");\n+\t\ttestDotSeparatedAlphanumeric(\"abc.xyz\");\n+\t\ttestDotSeparatedAlphanumeric(\"a1.b-3.c4123\");\n+\t}\n+\t\n+\tpublic void testDotSeparatedAlphanumeric(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tDotSeparatedAlphaNumeric dotSeparatedAlphaNumeric = parser.dotSeparatedAlphaNumeric();\n+\t\tassertEquals(input, dotSeparatedAlphaNumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithNumber() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"1abc\");\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithZero() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"0\");\n+\t\t});\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA3OTE1OnYy", "diffSide": "RIGHT", "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMToyOFrOGDugQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMToyOFrOGDugQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MDgzMg==", "bodyText": "Add tests for failing cases", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406560832", "createdAt": "2020-04-10T01:31:28Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");\n+\t\t// while this will parse everything after the zero is lost, so it would fail in a larger context\n+\t\tVersionCore core = parser.versionCore();\n+\t\t// confirm the 2 is lost\n+\t\tassertEquals(\"1.5.0\", core.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumeric() throws ParseException {\n+\t\ttestAlphanumericIdentifier(\"-\");\n+\t\ttestAlphanumericIdentifier(\"a\");\n+\t\ttestAlphanumericIdentifier(\"a1123\");\n+\t\ttestAlphanumericIdentifier(\"abcdefghijklmnopqurstuvwxyz\");\n+\t\ttestAlphanumericIdentifier(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n+\t\ttestAlphanumericIdentifier(\"z1-z2\");\n+\t}\n+\t\n+\tpublic void testAlphanumericIdentifier(String toTest) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(toTest);\n+\t\tAlphanumericIdentifier alphanumeric = parser.alphanumericIdentifier();\n+\t\tassertEquals(toTest, alphanumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithNumber() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"9abc\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0123\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifier() throws ParseException {\n+\t\ttestPrereleaseIdentifier(\"123\");\n+\t\ttestPrereleaseIdentifier(\"-abc\");\n+\t}\n+\t\n+\tpublic void testPrereleaseIdentifier(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\tassertEquals(prereleaseIdentifier.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifierStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"045\");\n+\t\t// while this does not fail it does not parse anything after the zero\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\t// digits after the zero are lost\n+\t\tassertEquals(\"0\", prereleaseIdentifier.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrerelease() throws ParseException {\n+\t\ttestPrerelease(\"alpha\");\n+\t\ttestPrerelease(\"alpha.1\");\n+\t\ttestPrerelease(\"0.3.7\");\n+\t\ttestPrerelease(\"x.7.z.92\");\n+\t}\n+\t\n+\tpublic void testPrerelease(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrerelease prerelease = parser.prerelease();\n+\t\tassertEquals(prerelease.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testBuild() throws ParseException {\n+\t\ttestBuild(\"001\");\n+\t\ttestBuild(\"20130313144700\");\n+\t\ttestBuild(\"exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testBuild(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tBuild build = parser.build();\n+\t\tassertEquals(build.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSemanticVersion() throws ParseException {\n+\t\ttestSemanticVersion(\"0.0.0\");\n+\t\ttestSemanticVersion(\"1.23.456\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92+exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testSemanticVersion(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tSemanticVersion semanticVersion = parser.semanticVersion();\n+\t\tassertEquals(input, semanticVersion.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumeric() throws ParseException {\n+\t\ttestDotSeparatedAlphanumeric(\"abc\");\n+\t\ttestDotSeparatedAlphanumeric(\"abc.xyz\");\n+\t\ttestDotSeparatedAlphanumeric(\"a1.b-3.c4123\");\n+\t}\n+\t\n+\tpublic void testDotSeparatedAlphanumeric(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tDotSeparatedAlphaNumeric dotSeparatedAlphaNumeric = parser.dotSeparatedAlphaNumeric();\n+\t\tassertEquals(input, dotSeparatedAlphaNumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithNumber() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"1abc\");\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithZero() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"0\");\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testOrganziationName() throws ParseException {\n+\t\ttestOrganizationName(\"foo\");\n+\t\ttestOrganizationName(\"foo.bar.a1\");\n+\t}\n+\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA3OTg5OnYy", "diffSide": "RIGHT", "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMjowNVrOGDugtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMjowNVrOGDugtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MDk0OA==", "bodyText": "Add additional tests (failing/more coverage)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406560948", "createdAt": "2020-04-10T01:32:05Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");\n+\t\t// while this will parse everything after the zero is lost, so it would fail in a larger context\n+\t\tVersionCore core = parser.versionCore();\n+\t\t// confirm the 2 is lost\n+\t\tassertEquals(\"1.5.0\", core.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumeric() throws ParseException {\n+\t\ttestAlphanumericIdentifier(\"-\");\n+\t\ttestAlphanumericIdentifier(\"a\");\n+\t\ttestAlphanumericIdentifier(\"a1123\");\n+\t\ttestAlphanumericIdentifier(\"abcdefghijklmnopqurstuvwxyz\");\n+\t\ttestAlphanumericIdentifier(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n+\t\ttestAlphanumericIdentifier(\"z1-z2\");\n+\t}\n+\t\n+\tpublic void testAlphanumericIdentifier(String toTest) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(toTest);\n+\t\tAlphanumericIdentifier alphanumeric = parser.alphanumericIdentifier();\n+\t\tassertEquals(toTest, alphanumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithNumber() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"9abc\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0123\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifier() throws ParseException {\n+\t\ttestPrereleaseIdentifier(\"123\");\n+\t\ttestPrereleaseIdentifier(\"-abc\");\n+\t}\n+\t\n+\tpublic void testPrereleaseIdentifier(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\tassertEquals(prereleaseIdentifier.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifierStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"045\");\n+\t\t// while this does not fail it does not parse anything after the zero\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\t// digits after the zero are lost\n+\t\tassertEquals(\"0\", prereleaseIdentifier.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrerelease() throws ParseException {\n+\t\ttestPrerelease(\"alpha\");\n+\t\ttestPrerelease(\"alpha.1\");\n+\t\ttestPrerelease(\"0.3.7\");\n+\t\ttestPrerelease(\"x.7.z.92\");\n+\t}\n+\t\n+\tpublic void testPrerelease(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrerelease prerelease = parser.prerelease();\n+\t\tassertEquals(prerelease.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testBuild() throws ParseException {\n+\t\ttestBuild(\"001\");\n+\t\ttestBuild(\"20130313144700\");\n+\t\ttestBuild(\"exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testBuild(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tBuild build = parser.build();\n+\t\tassertEquals(build.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSemanticVersion() throws ParseException {\n+\t\ttestSemanticVersion(\"0.0.0\");\n+\t\ttestSemanticVersion(\"1.23.456\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92+exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testSemanticVersion(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tSemanticVersion semanticVersion = parser.semanticVersion();\n+\t\tassertEquals(input, semanticVersion.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumeric() throws ParseException {\n+\t\ttestDotSeparatedAlphanumeric(\"abc\");\n+\t\ttestDotSeparatedAlphanumeric(\"abc.xyz\");\n+\t\ttestDotSeparatedAlphanumeric(\"a1.b-3.c4123\");\n+\t}\n+\t\n+\tpublic void testDotSeparatedAlphanumeric(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tDotSeparatedAlphaNumeric dotSeparatedAlphaNumeric = parser.dotSeparatedAlphaNumeric();\n+\t\tassertEquals(input, dotSeparatedAlphaNumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithNumber() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"1abc\");\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithZero() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"0\");\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testOrganziationName() throws ParseException {\n+\t\ttestOrganizationName(\"foo\");\n+\t\ttestOrganizationName(\"foo.bar.a1\");\n+\t}\n+\t\n+\tpublic void testOrganizationName(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tOrganizationName organizationName = parser.organizationName();\n+\t\tassertEquals(input, organizationName.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSchemaName() throws ParseException {\n+\t\ttestSchemaName(\"SomeClass\");\n+\t\ttestSchemaName(\"repo.model.SomeClass\");\n+\t}\n+\t\n+\tpublic void testSchemaName(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tSchemaName schemaName = parser.schemaName();\n+\t\tassertEquals(input, schemaName.toString());\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA4Mjg1OnYy", "diffSide": "RIGHT", "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMzo1NVrOGDuiTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMzo1NVrOGDuiTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MTM1OQ==", "bodyText": "Add (failing) test for \"org.myorg/path.SomeClass/1.2.03", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406561359", "createdAt": "2020-04-10T01:33:55Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-schema-id/src/test/java/org/sagebionetworks/schema/SchemaIdParserTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.sagebionetworks.schema;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;\n+import org.sagebionetworks.schema.id.OrganizationName;\n+import org.sagebionetworks.schema.id.SchemaId;\n+import org.sagebionetworks.schema.id.SchemaName;\n+import org.sagebionetworks.schema.parser.ParseException;\n+import org.sagebionetworks.schema.parser.SchemaIdParser;\n+import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Build;\n+import org.sagebionetworks.schema.semantic.version.NumericIdentifier;\n+import org.sagebionetworks.schema.semantic.version.Prerelease;\n+import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+import org.sagebionetworks.schema.semantic.version.VersionCore;\n+\n+public class SchemaIdParserTest {\n+\t\n+\n+\t@Test\n+\tpublic void testNumericIdentifier() throws ParseException {\n+\t\t// test all numbers from 0 to 100\n+\t\tfor(long i = 0; i<100; i++) {\n+\t\t\tnumericTest(i, Long.toString(i));\n+\t\t}\n+\t}\n+\t\n+\tvoid numericTest(Long expected, String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tNumericIdentifier numericId = parser.numericIdentifier();\n+\t\tassertEquals(new NumericIdentifier(expected), numericId);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCore() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.0.2\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(1L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(2L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreAllZeros() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0.0.0\");\n+\t\tVersionCore core = parser.versionCore();\n+\t\tassertNotNull(core);\n+\t\tassertEquals(0L, core.getMajor().getValue());\n+\t\tassertEquals(0L, core.getMinor().getValue());\n+\t\tassertEquals(0L, core.getPatch().getValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMajorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"01.0.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCoreMinorLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.05.2\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.versionCore();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testVersionCorePatchLeadingZeror() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"1.5.02\");\n+\t\t// while this will parse everything after the zero is lost, so it would fail in a larger context\n+\t\tVersionCore core = parser.versionCore();\n+\t\t// confirm the 2 is lost\n+\t\tassertEquals(\"1.5.0\", core.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumeric() throws ParseException {\n+\t\ttestAlphanumericIdentifier(\"-\");\n+\t\ttestAlphanumericIdentifier(\"a\");\n+\t\ttestAlphanumericIdentifier(\"a1123\");\n+\t\ttestAlphanumericIdentifier(\"abcdefghijklmnopqurstuvwxyz\");\n+\t\ttestAlphanumericIdentifier(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n+\t\ttestAlphanumericIdentifier(\"z1-z2\");\n+\t}\n+\t\n+\tpublic void testAlphanumericIdentifier(String toTest) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(toTest);\n+\t\tAlphanumericIdentifier alphanumeric = parser.alphanumericIdentifier();\n+\t\tassertEquals(toTest, alphanumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithNumber() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"9abc\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testAlphaNumericStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"0123\");\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\tparser.alphanumericIdentifier();\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifier() throws ParseException {\n+\t\ttestPrereleaseIdentifier(\"123\");\n+\t\ttestPrereleaseIdentifier(\"-abc\");\n+\t}\n+\t\n+\tpublic void testPrereleaseIdentifier(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\tassertEquals(prereleaseIdentifier.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrereleaseIdentifierStartWithZero() throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(\"045\");\n+\t\t// while this does not fail it does not parse anything after the zero\n+\t\tPrereleaseIdentifier prereleaseIdentifier = parser.prereleaseIdentifier();\n+\t\t// digits after the zero are lost\n+\t\tassertEquals(\"0\", prereleaseIdentifier.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testPrerelease() throws ParseException {\n+\t\ttestPrerelease(\"alpha\");\n+\t\ttestPrerelease(\"alpha.1\");\n+\t\ttestPrerelease(\"0.3.7\");\n+\t\ttestPrerelease(\"x.7.z.92\");\n+\t}\n+\t\n+\tpublic void testPrerelease(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tPrerelease prerelease = parser.prerelease();\n+\t\tassertEquals(prerelease.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testBuild() throws ParseException {\n+\t\ttestBuild(\"001\");\n+\t\ttestBuild(\"20130313144700\");\n+\t\ttestBuild(\"exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testBuild(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tBuild build = parser.build();\n+\t\tassertEquals(build.toString(), input);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSemanticVersion() throws ParseException {\n+\t\ttestSemanticVersion(\"0.0.0\");\n+\t\ttestSemanticVersion(\"1.23.456\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92\");\n+\t\ttestSemanticVersion(\"1.23.456-x.7.z.92+exp.sha.5114f85\");\n+\t}\n+\t\n+\tpublic void testSemanticVersion(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tSemanticVersion semanticVersion = parser.semanticVersion();\n+\t\tassertEquals(input, semanticVersion.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumeric() throws ParseException {\n+\t\ttestDotSeparatedAlphanumeric(\"abc\");\n+\t\ttestDotSeparatedAlphanumeric(\"abc.xyz\");\n+\t\ttestDotSeparatedAlphanumeric(\"a1.b-3.c4123\");\n+\t}\n+\t\n+\tpublic void testDotSeparatedAlphanumeric(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tDotSeparatedAlphaNumeric dotSeparatedAlphaNumeric = parser.dotSeparatedAlphaNumeric();\n+\t\tassertEquals(input, dotSeparatedAlphaNumeric.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithNumber() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"1abc\");\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testDotSeparatedAlphanumericStartsWithZero() {\n+\t\tassertThrows(ParseException.class, ()->{\n+\t\t\ttestDotSeparatedAlphanumeric(\"0\");\n+\t\t});\n+\t}\n+\t\n+\t@Test\n+\tpublic void testOrganziationName() throws ParseException {\n+\t\ttestOrganizationName(\"foo\");\n+\t\ttestOrganizationName(\"foo.bar.a1\");\n+\t}\n+\t\n+\tpublic void testOrganizationName(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tOrganizationName organizationName = parser.organizationName();\n+\t\tassertEquals(input, organizationName.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSchemaName() throws ParseException {\n+\t\ttestSchemaName(\"SomeClass\");\n+\t\ttestSchemaName(\"repo.model.SomeClass\");\n+\t}\n+\t\n+\tpublic void testSchemaName(String input) throws ParseException {\n+\t\tSchemaIdParser parser = new SchemaIdParser(input);\n+\t\tSchemaName schemaName = parser.schemaName();\n+\t\tassertEquals(input, schemaName.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSchemaIdNoVersion() throws ParseException {\n+\t\tSchemaId id = testSchemaId(\"org.myorg/path.SomeClass\");\n+\t\tassertNotNull(id);\n+\t\tassertNotNull(id.getOrganizationName());\n+\t\tassertEquals(\"org.myorg\",id.getOrganizationName().toString());\n+\t\tassertNotNull(id.getSchemaName());\n+\t\tassertEquals(\"path.SomeClass\", id.getSchemaName().toString());\n+\t\tassertNull(id.getSemanticVersion());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSchemaIdWithVersion() throws ParseException {\n+\t\tSchemaId id = testSchemaId(\"org.myorg/path.SomeClass/1.2.3-alpha+1234f\");\n+\t\tassertNotNull(id);\n+\t\tassertNotNull(id.getOrganizationName());\n+\t\tassertEquals(\"org.myorg\",id.getOrganizationName().toString());\n+\t\tassertNotNull(id.getSchemaName());\n+\t\tassertEquals(\"path.SomeClass\", id.getSchemaName().toString());\n+\t\tassertNotNull(id.getSemanticVersion());\n+\t\tassertEquals(\"1.2.3-alpha+1234f\", id.getSemanticVersion().toString());\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA5OTI5OnYy", "diffSide": "RIGHT", "path": "lib/lib-schema-id/src/main/java/org/sagebionetworks/schema/id/OrganizationName.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTo0NDo0OVrOGDurgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToxNTo0N1rOGExx5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MzcxNQ==", "bodyText": "Should extend DotSeparatedAlphaNumeric", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406563715", "createdAt": "2020-04-10T01:44:49Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-schema-id/src/main/java/org/sagebionetworks/schema/id/OrganizationName.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.sagebionetworks.schema.id;\n+\n+import org.sagebionetworks.schema.element.SimpleBranch;\n+\n+public class OrganizationName extends SimpleBranch {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2MzA3OA==", "bodyText": "I tried to do this but it is not compatible with how the parser works.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r407663078", "createdAt": "2020-04-13T19:15:47Z", "author": {"login": "john-hill"}, "path": "lib/lib-schema-id/src/main/java/org/sagebionetworks/schema/id/OrganizationName.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.sagebionetworks.schema.id;\n+\n+import org.sagebionetworks.schema.element.SimpleBranch;\n+\n+public class OrganizationName extends SimpleBranch {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MzcxNQ=="}, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzEwMTA4OnYy", "diffSide": "RIGHT", "path": "lib/lib-schema-id/src/main/java/org/sagebionetworks/schema/id/SchemaId.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTo0NTo0NlrOGDusbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTo0NTo0NlrOGDusbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2Mzk1MQ==", "bodyText": "/ can be constant", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406563951", "createdAt": "2020-04-10T01:45:46Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-schema-id/src/main/java/org/sagebionetworks/schema/id/SchemaId.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.sagebionetworks.schema.id;\n+\n+import java.util.Objects;\n+\n+import org.sagebionetworks.schema.element.Element;\n+import org.sagebionetworks.schema.semantic.version.SemanticVersion;\n+\n+public final class SchemaId extends Element {\n+\n+\tprivate final OrganizationName organizationName;\n+\tprivate final SchemaName schemaName;\n+\tprivate final SemanticVersion semanticVersion;\n+\n+\tpublic SchemaId(OrganizationName organizationName, SchemaName schemaName, SemanticVersion semanticVersion) {\n+\t\tsuper();\n+\t\tif (organizationName == null) {\n+\t\t\tthrow new IllegalArgumentException(\"OrganizationName cannot be null\");\n+\n+\t\t}\n+\t\tif (schemaName == null) {\n+\t\t\tthrow new IllegalArgumentException(\"SchemaName cannot be null\");\n+\t\t}\n+\t\tthis.organizationName = organizationName;\n+\t\tthis.schemaName = schemaName;\n+\t\tthis.semanticVersion = semanticVersion;\n+\t}\n+\n+\t\n+\t/**\n+\t * @return the organizationName\n+\t */\n+\tpublic OrganizationName getOrganizationName() {\n+\t\treturn organizationName;\n+\t}\n+\n+\n+\t/**\n+\t * @return the schemaName\n+\t */\n+\tpublic SchemaName getSchemaName() {\n+\t\treturn schemaName;\n+\t}\n+\n+\n+\t/**\n+\t * @return the semanticVersion\n+\t */\n+\tpublic SemanticVersion getSemanticVersion() {\n+\t\treturn semanticVersion;\n+\t}\n+\n+\n+\t@Override\n+\tpublic void toString(StringBuilder builder) {\n+\t\torganizationName.toString(builder);\n+\t\tbuilder.append(\"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzEwMjE3OnYy", "diffSide": "RIGHT", "path": "lib/lib-schema-id/src/main/java/org/sagebionetworks/schema/id/SchemaName.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTo0NjozN1rOGDutHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToxNzoxOFrOGEx0-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NDEyNw==", "bodyText": "Should extends DotSeparatedAlphaNumeric", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406564127", "createdAt": "2020-04-10T01:46:37Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-schema-id/src/main/java/org/sagebionetworks/schema/id/SchemaName.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.sagebionetworks.schema.id;\n+\n+import org.sagebionetworks.schema.element.SimpleBranch;\n+\n+public class SchemaName extends SimpleBranch {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2Mzg2Nw==", "bodyText": "Same issue with OorganizaionName", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r407663867", "createdAt": "2020-04-13T19:17:18Z", "author": {"login": "john-hill"}, "path": "lib/lib-schema-id/src/main/java/org/sagebionetworks/schema/id/SchemaName.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.sagebionetworks.schema.id;\n+\n+import org.sagebionetworks.schema.element.SimpleBranch;\n+\n+public class SchemaName extends SimpleBranch {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NDEyNw=="}, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzEyNDM4OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjowMDowNFrOGDu5lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToyNToxM1rOGEyF4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NzMxOA==", "bodyText": "We can update?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406567318", "createdAt": "2020-04-10T02:00:04Z", "author": {"login": "marcomarasca"}, "path": "pom.xml", "diffHunk": "@@ -920,6 +926,16 @@\n \t\t\t\t\t<artifactId>schema-to-pojo-maven-plugin</artifactId>\n \t\t\t\t\t<version>${schema-to-pojo.version}</version>\n \t\t\t\t</plugin>\n+\t\t\t\t<plugin>\n+\t\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n+\t\t\t\t\t<artifactId>javacc-maven-plugin</artifactId>\n+\t\t\t\t\t<version>2.6</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2ODE5NQ==", "bodyText": "This is the latest version of the maven-plugin, even though there are newer versions of javacc.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r407668195", "createdAt": "2020-04-13T19:25:13Z", "author": {"login": "john-hill"}, "path": "pom.xml", "diffHunk": "@@ -920,6 +926,16 @@\n \t\t\t\t\t<artifactId>schema-to-pojo-maven-plugin</artifactId>\n \t\t\t\t\t<version>${schema-to-pojo.version}</version>\n \t\t\t\t</plugin>\n+\t\t\t\t<plugin>\n+\t\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n+\t\t\t\t\t<artifactId>javacc-maven-plugin</artifactId>\n+\t\t\t\t\t<version>2.6</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NzMxOA=="}, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzEyNTg5OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjowMToxMFrOGDu6iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOToxOToxOVrOGEx5Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NzU2Mw==", "bodyText": "Can you add the same to the schema to pojo? :P", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r406567563", "createdAt": "2020-04-10T02:01:10Z", "author": {"login": "marcomarasca"}, "path": "pom.xml", "diffHunk": "@@ -920,6 +926,16 @@\n \t\t\t\t\t<artifactId>schema-to-pojo-maven-plugin</artifactId>\n \t\t\t\t\t<version>${schema-to-pojo.version}</version>\n \t\t\t\t</plugin>\n+\t\t\t\t<plugin>\n+\t\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n+\t\t\t\t\t<artifactId>javacc-maven-plugin</artifactId>\n+\t\t\t\t\t<version>2.6</version>\n+\t\t\t\t</plugin>\n+\t\t\t\t<plugin>\n+\t\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n+\t\t\t\t\t<artifactId>build-helper-maven-plugin</artifactId>\n+\t\t\t\t\t<version>1.8</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2NDk3NA==", "bodyText": "It has already been added to schema-to-pojo-integration-tests pom.xml.  Have you run the build from the command line to generate the classes?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3994#discussion_r407664974", "createdAt": "2020-04-13T19:19:19Z", "author": {"login": "john-hill"}, "path": "pom.xml", "diffHunk": "@@ -920,6 +926,16 @@\n \t\t\t\t\t<artifactId>schema-to-pojo-maven-plugin</artifactId>\n \t\t\t\t\t<version>${schema-to-pojo.version}</version>\n \t\t\t\t</plugin>\n+\t\t\t\t<plugin>\n+\t\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n+\t\t\t\t\t<artifactId>javacc-maven-plugin</artifactId>\n+\t\t\t\t\t<version>2.6</version>\n+\t\t\t\t</plugin>\n+\t\t\t\t<plugin>\n+\t\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n+\t\t\t\t\t<artifactId>build-helper-maven-plugin</artifactId>\n+\t\t\t\t\t<version>1.8</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NzU2Mw=="}, "originalCommit": {"oid": "51b847b44f8925f9483e0f9a415834c60bfaa8d6"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3164, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}