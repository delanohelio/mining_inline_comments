{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MTU2ODc5", "number": 4062, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzo1Mzo1MVrOEAtohA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDoyMToxMFrOEAt60A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTgzMTA4OnYy", "diffSide": "RIGHT", "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/table/ViewScope.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzo1Mzo1MVrOGcKgcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzo1Mzo1MVrOGcKgcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4NTQ1Ng==", "bodyText": "new ViewEntityType (too many unused options in EntityType)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4062#discussion_r432185456", "createdAt": "2020-05-28T23:53:51Z", "author": {"login": "john-hill"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/table/ViewScope.json", "diffHunk": "@@ -7,15 +7,15 @@\n \t],\r\n \t\"properties\": {\r\n \t\t\"scope\": {\r\n-\t\t\t\"description\": \"List of parent IDs that define a view scope.\",\r\n+\t\t\t\"description\": \"List of parent IDs that define a view scope. For an entityview the ids should point to entities, for a submissionview the ids should point to evaluation ids\",\r\n \t\t\t\"type\": \"array\",\r\n \t\t\t\"items\": {\r\n \t\t\t\t\"type\": \"string\"\r\n \t\t\t}\r\n \t\t},\r\n-\t\t\"objectType\": {\r\n-\t\t\t\"description\": \"The type of the objects in the rows of a view (E.g. ENTITY for entity views)\",\r\n-\t\t\t\"$ref\": \"org.sagebionetworks.repo.model.table.ViewObjectType\"\r\n+\t\t\"viewEntityType\": {\r\n+\t\t\t\"description\": \"The entity type of the view, if not supplied defaults to entityview. Supported values are entityview and submissionview\",\r\n+\t\t\t\"$ref\": \"org.sagebionetworks.repo.model.EntityType\"\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a109151970ea19dbe5370342c7b87da8343813d9"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTg3NzkyOnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/service/metadata/SubmissionViewMetadataProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDoyMToxMFrOGcK9Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDoyMToxMFrOGcK9Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5Mjg0Mg==", "bodyText": "is there a way to pass the scope and get back the sub-set the user has the  passed permission.  That would be a single call instead of n calls.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4062#discussion_r432192842", "createdAt": "2020-05-29T00:21:10Z", "author": {"login": "john-hill"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/service/metadata/SubmissionViewMetadataProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.sagebionetworks.repo.web.service.metadata;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.sagebionetworks.evaluation.manager.EvaluationPermissionsManager;\r\n+import org.sagebionetworks.repo.manager.table.TableViewManager;\r\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\r\n+import org.sagebionetworks.repo.model.DatastoreException;\r\n+import org.sagebionetworks.repo.model.EntityType;\r\n+import org.sagebionetworks.repo.model.InvalidModelException;\r\n+import org.sagebionetworks.repo.model.UnauthorizedException;\r\n+import org.sagebionetworks.repo.model.UserInfo;\r\n+import org.sagebionetworks.repo.model.table.SubmissionView;\r\n+import org.sagebionetworks.repo.model.table.ViewScope;\r\n+import org.sagebionetworks.repo.web.NotFoundException;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+@Service(\"submissionViewMetadataProvider\")\r\n+public class SubmissionViewMetadataProvider extends ViewMetadataProvider<SubmissionView> implements EntityValidator<SubmissionView> {\r\n+\t\r\n+\t@Autowired\r\n+\tprivate EvaluationPermissionsManager evaluationPermissionManager;\r\n+\t\r\n+\t@Autowired\r\n+\tpublic SubmissionViewMetadataProvider(TableViewManager viewManager, EvaluationPermissionsManager evaluationPermissionManager) {\r\n+\t\tsuper(viewManager);\r\n+\t\tthis.evaluationPermissionManager = evaluationPermissionManager;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic ViewScope createViewScope(UserInfo userInfo, SubmissionView view) {\r\n+\t\tViewScope scope = new ViewScope();\r\n+\t\t\r\n+\t\tscope.setViewEntityType(EntityType.submissionview);\r\n+\t\tscope.setScope(view.getScopeIds());\r\n+\t\tscope.setViewTypeMask(0L);\r\n+\t\t\r\n+\t\treturn scope;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void validateEntity(SubmissionView view, EntityEvent event)\r\n+\t\t\tthrows InvalidModelException, NotFoundException, DatastoreException, UnauthorizedException {\r\n+\t\tvalidateScopeAccess(event.getUserInfo(), view.getScopeIds());\t\t\r\n+\t}\r\n+\t\r\n+\tprivate void validateScopeAccess(UserInfo userInfo, List<String> scope) {\r\n+\t\tif (scope == null || scope.isEmpty()) {\r\n+\t\t\treturn;\r\n+\t\t}\r\n+\t\tscope.forEach((evaluationId) -> {\r\n+\t\t\tevaluationPermissionManager.hasAccess(userInfo, evaluationId, ACCESS_TYPE.READ_PRIVATE_SUBMISSION);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a109151970ea19dbe5370342c7b87da8343813d9"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3056, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}