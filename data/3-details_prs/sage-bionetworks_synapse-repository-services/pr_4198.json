{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MTcxNjgy", "number": 4198, "title": "Plfm 5960", "bodyText": "", "createdAt": "2020-09-16T18:30:55Z", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4198", "merged": true, "mergeCommit": {"oid": "731a907d160125d8dea96229807aa07766ae217b"}, "closed": true, "closedAt": "2020-09-17T22:42:59Z", "author": {"login": "nlgilber"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJRus4gH2gAyNDg4MTcxNjgyOmQ5ZmY4OTQ4MTIzYjIwOWM1N2JkZjFiMDkyNDBhNGQ4NzQzMmE1NTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJ47vAgFqTQ5MTAzNTkwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d9ff8948123b209c57bdf1b09240a4d87432a551", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/d9ff8948123b209c57bdf1b09240a4d87432a551", "committedDate": "2020-09-16T01:01:57Z", "message": " added test, added ORDER BY"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "880e7f3ce593e9b8181492d670a52989187e3cc9", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/880e7f3ce593e9b8181492d670a52989187e3cc9", "committedDate": "2020-09-16T17:46:54Z", "message": " order by most recent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b318707dcef42294bb9250558b3bd7bd772a61b", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/0b318707dcef42294bb9250558b3bd7bd772a61b", "committedDate": "2020-09-16T18:01:04Z", "message": " minor description change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79bfb87b7be654d668c18aba74c16244dab50db8", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/79bfb87b7be654d668c18aba74c16244dab50db8", "committedDate": "2020-09-16T18:29:46Z", "message": "Merge branch 'develop' of github.com:/Sage-Bionetworks/Synapse-Repository-Services into PLFM-5960"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de8cadacbaf2c9fef235480f175c3c0805c4b952", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/de8cadacbaf2c9fef235480f175c3c0805c4b952", "committedDate": "2020-09-16T20:11:24Z", "message": " file view information"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3534e5fbc18de59ec056e49ee375571f2fd445a0", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/3534e5fbc18de59ec056e49ee375571f2fd445a0", "committedDate": "2020-09-16T20:20:31Z", "message": " file view info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df659ca5d5eaa451be389da19c1a5bec39a03bfd", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/df659ca5d5eaa451be389da19c1a5bec39a03bfd", "committedDate": "2020-09-16T20:28:38Z", "message": " fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc914cd085ece396d19756c8f6b3ddf0553a6e02", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/cc914cd085ece396d19756c8f6b3ddf0553a6e02", "committedDate": "2020-09-16T20:36:11Z", "message": " fixed test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDczMTIw", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4198#pullrequestreview-490073120", "createdAt": "2020-09-16T22:56:15Z", "commit": {"oid": "cc914cd085ece396d19756c8f6b3ddf0553a6e02"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjo1NjoxNVrOHTG6YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzowNjo1N1rOHTHHeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5ODI0MA==", "bodyText": "This order by will effectively switch (or at least different) the order compared to the current implementation (which we can say it's undefined, but most likely ordered by the node id). An order by should still be specified when applying a limit, but to keep it \"backward compatible\" I'd probably order by the N.ID.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4198#discussion_r489798240", "createdAt": "2020-09-16T22:56:15Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/NodeDAOImpl.java", "diffHunk": "@@ -353,17 +395,16 @@\n \t\t\t+ \" DESC LIMIT :\"+LIMIT_PARAM_NAME+\" OFFSET :\"+OFFSET_PARAM_NAME;\n \n \t/**\n-\t * The max number of entity versions a MD5 string can map to. This puts a check\n-\t * to potential DDOS attacks via MD5. We retrieve at most MD5_LIMIT + 1 rows.\n-\t * If the number of rows retrieved is > MD5_LIMIT, an exception is thrown.\n+\t * A sql query returning results for entity headers with a specific MD5 value\n \t */\n \tprivate static final int NODE_VERSION_LIMIT_BY_FILE_MD5 = 200;\n \tprivate static final String SELECT_NODE_VERSION_BY_FILE_MD5 =\n \t\t\tENTITY_HEADER_SELECT\n-\t\t\t+ \" FROM \" + TABLE_REVISION + \" R, \" + TABLE_FILES + \" F, \"+TABLE_NODE+\" N\"\n-\t\t\t+ \" WHERE R.\"+COL_REVISION_OWNER_NODE+\" = N.\"+COL_NODE_ID+\" AND  R.\" + COL_REVISION_FILE_HANDLE_ID + \" = F.\" + COL_FILES_ID\n+\t\t\t+ \" FROM \" + TABLE_REVISION + \" R, \" + TABLE_FILES + \" F, \" + TABLE_NODE + \" N\"\n+\t\t\t+ \" WHERE R.\" + COL_REVISION_OWNER_NODE + \" = N.\"+COL_NODE_ID+\" AND  R.\" + COL_REVISION_FILE_HANDLE_ID + \" = F.\" + COL_FILES_ID\n \t\t\t+ \" AND F.\" + COL_FILES_CONTENT_MD5 + \" = :\" + COL_FILES_CONTENT_MD5\n-\t\t\t+ \" LIMIT \" + (NODE_VERSION_LIMIT_BY_FILE_MD5 + 1);\n+\t\t\t+ \" ORDER BY N.\" + COL_NODE_CREATED_ON + \" DESC\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc914cd085ece396d19756c8f6b3ddf0553a6e02"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5OTIxMA==", "bodyText": "We can simply say that it returns at most 200 entities matching the given md5 for which the user has read access.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4198#discussion_r489799210", "createdAt": "2020-09-16T22:59:28Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EntityController.java", "diffHunk": "@@ -1424,7 +1423,13 @@ public void filePreviewRedirectURLForVersion(\n \n \t/**\n \t * Gets all FileEntities whose file's MD5 is the same as the specified MD5\n-\t * string.\n+\t * string. NOTE: This will return a subset of at most 200 entity headers that is the\n+\t * intersection of the set of the most recently created entity headers with the specified MD5 string and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc914cd085ece396d19756c8f6b3ddf0553a6e02"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5OTU2NA==", "bodyText": "Not necessarily for a project only, I would just mention that for more flexibility a file view that includes the MD5 can be used.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4198#discussion_r489799564", "createdAt": "2020-09-16T23:00:27Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EntityController.java", "diffHunk": "@@ -1424,7 +1423,13 @@ public void filePreviewRedirectURLForVersion(\n \n \t/**\n \t * Gets all FileEntities whose file's MD5 is the same as the specified MD5\n-\t * string.\n+\t * string. NOTE: This will return a subset of at most 200 entity headers that is the\n+\t * intersection of the set of the most recently created entity headers with the specified MD5 string and\n+\t * the set of entities which the user has access to. To look at MD5 values of entities\n+\t * in a specific project, create a file view.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc914cd085ece396d19756c8f6b3ddf0553a6e02"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwMDMxNw==", "bodyText": "We can rename this to testGetEntityHeaderByMd5WithNoMatch", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4198#discussion_r489800317", "createdAt": "2020-09-16T23:02:51Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/NodeDAOImplTest.java", "diffHunk": "@@ -2339,80 +2340,35 @@ public void testCreateTableNode() throws DatastoreException, InvalidModelExcepti\n \t\tassertEquals(expected, n1.getColumnModelIds());\r\n \t}\r\n \r\n+\t/**\r\n+\t * PLFM-5960\r\n+\t * @throws Exception\r\n+\t */\r\n \t@Test\r\n \tpublic void testGetEntityHeaderByMd5() throws Exception {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc914cd085ece396d19756c8f6b3ddf0553a6e02"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwMDQ1MA==", "bodyText": "Let us separate this into its own test, e.g. testGetEntityHeaderByMd5WithOver200Macthing", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4198#discussion_r489800450", "createdAt": "2020-09-16T23:03:16Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/NodeDAOImplTest.java", "diffHunk": "@@ -2339,80 +2340,35 @@ public void testCreateTableNode() throws DatastoreException, InvalidModelExcepti\n \t\tassertEquals(expected, n1.getColumnModelIds());\r\n \t}\r\n \r\n+\t/**\r\n+\t * PLFM-5960\r\n+\t * @throws Exception\r\n+\t */\r\n \t@Test\r\n \tpublic void testGetEntityHeaderByMd5() throws Exception {\r\n \r\n \t\t// Nothing yet\r\n-\t\tList<EntityHeader> results = nodeDao.getEntityHeaderByMd5(\"md5\");\r\n+\t\tList<EntityHeader> results = nodeDao.getEntityHeaderByMd5(fileHandle3.getContentMd5());\r\n \t\tassertNotNull(results);\r\n \t\tassertEquals(0, results.size());\r\n \r\n-\t\t// Add a node with a file handle\r\n-\t\tNode node1 = NodeTestUtils.createNew(\"testGetEntityHeaderByMd5 node 1\", creatorUserGroupId);\r\n-\t\tnode1.setFileHandleId(fileHandle.getId());\r\n-\t\tfinal String node1Label1 = \"1\";\r\n-\t\tnode1.setVersionLabel(node1Label1);\r\n-\t\tfinal String id1 = nodeDao.createNew(node1);\r\n-\t\tnode1 = nodeDao.getNode(id1);\r\n-\t\tassertNotNull(id1);\r\n-\t\ttoDelete.add(id1);\r\n-\t\tnode1.setId(id1);\r\n-\r\n-\t\tresults = nodeDao.getEntityHeaderByMd5(fileHandle.getContentMd5());\r\n-\t\tassertNotNull(results);\r\n-\t\tassertEquals(1, results.size());\r\n-\t\tassertEquals(id1, results.get(0).getId());\r\n-\t\tassertNotNull(results.get(0).getBenefactorId());\r\n-\t\tassertEquals(Long.valueOf(1L), results.get(0).getVersionNumber());\r\n-\t\tassertEquals(node1Label1, results.get(0).getVersionLabel());\r\n-\t\tassertEquals(node1.getCreatedByPrincipalId().toString(), results.get(0).getCreatedBy());\r\n-\t\tassertEquals(node1.getCreatedOn(), results.get(0).getCreatedOn());\r\n-\t\tassertEquals(node1.getModifiedByPrincipalId().toString(), results.get(0).getModifiedBy());\r\n-\t\tassertEquals(node1.getModifiedOn(), results.get(0).getModifiedOn());\r\n-\r\n-\t\t// Create a new version of the node of the same file\r\n-\t\tfinal String node1Label2 = \"Node 1 version label 2\";\r\n-\t\tnode1.setVersionLabel(node1Label2);\r\n-\t\tnodeDao.createNewVersion(node1);\r\n-\r\n-\t\tresults = nodeDao.getEntityHeaderByMd5(fileHandle.getContentMd5());\r\n-\t\tassertNotNull(results);\r\n-\t\tassertEquals(2, results.size());\r\n-\t\tassertEquals(id1, results.get(0).getId());\r\n-\t\tassertEquals(id1, results.get(1).getId());\r\n-\t\tassertFalse(results.get(0).getVersionNumber().equals(results.get(1).getVersionNumber()));\r\n-\r\n-\t\t// Add a new node with no file handle\r\n-\t\tNode node2 = NodeTestUtils.createNew(\"testGetEntityHeaderByMd5 node 2\", creatorUserGroupId);\r\n-\t\tfinal String node2Label1 = \"Node 2 version label 1\";\r\n-\t\tnode1.setVersionLabel(node2Label1);\r\n-\t\tfinal String id2 = nodeDao.createNew(node2);\r\n-\t\tassertNotNull(id2);\r\n-\t\ttoDelete.add(id2);\r\n-\t\tnode2.setId(id2);\r\n+\t\tfor(int i = 0; i < 202; i++) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc914cd085ece396d19756c8f6b3ddf0553a6e02"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwMTI0OA==", "bodyText": "This is not needed.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4198#discussion_r489801248", "createdAt": "2020-09-16T23:05:50Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/NodeDAOImplTest.java", "diffHunk": "@@ -2339,80 +2340,35 @@ public void testCreateTableNode() throws DatastoreException, InvalidModelExcepti\n \t\tassertEquals(expected, n1.getColumnModelIds());\r\n \t}\r\n \r\n+\t/**\r\n+\t * PLFM-5960\r\n+\t * @throws Exception\r\n+\t */\r\n \t@Test\r\n \tpublic void testGetEntityHeaderByMd5() throws Exception {\r\n \r\n \t\t// Nothing yet\r\n-\t\tList<EntityHeader> results = nodeDao.getEntityHeaderByMd5(\"md5\");\r\n+\t\tList<EntityHeader> results = nodeDao.getEntityHeaderByMd5(fileHandle3.getContentMd5());\r\n \t\tassertNotNull(results);\r\n \t\tassertEquals(0, results.size());\r\n \r\n-\t\t// Add a node with a file handle\r\n-\t\tNode node1 = NodeTestUtils.createNew(\"testGetEntityHeaderByMd5 node 1\", creatorUserGroupId);\r\n-\t\tnode1.setFileHandleId(fileHandle.getId());\r\n-\t\tfinal String node1Label1 = \"1\";\r\n-\t\tnode1.setVersionLabel(node1Label1);\r\n-\t\tfinal String id1 = nodeDao.createNew(node1);\r\n-\t\tnode1 = nodeDao.getNode(id1);\r\n-\t\tassertNotNull(id1);\r\n-\t\ttoDelete.add(id1);\r\n-\t\tnode1.setId(id1);\r\n-\r\n-\t\tresults = nodeDao.getEntityHeaderByMd5(fileHandle.getContentMd5());\r\n-\t\tassertNotNull(results);\r\n-\t\tassertEquals(1, results.size());\r\n-\t\tassertEquals(id1, results.get(0).getId());\r\n-\t\tassertNotNull(results.get(0).getBenefactorId());\r\n-\t\tassertEquals(Long.valueOf(1L), results.get(0).getVersionNumber());\r\n-\t\tassertEquals(node1Label1, results.get(0).getVersionLabel());\r\n-\t\tassertEquals(node1.getCreatedByPrincipalId().toString(), results.get(0).getCreatedBy());\r\n-\t\tassertEquals(node1.getCreatedOn(), results.get(0).getCreatedOn());\r\n-\t\tassertEquals(node1.getModifiedByPrincipalId().toString(), results.get(0).getModifiedBy());\r\n-\t\tassertEquals(node1.getModifiedOn(), results.get(0).getModifiedOn());\r\n-\r\n-\t\t// Create a new version of the node of the same file\r\n-\t\tfinal String node1Label2 = \"Node 1 version label 2\";\r\n-\t\tnode1.setVersionLabel(node1Label2);\r\n-\t\tnodeDao.createNewVersion(node1);\r\n-\r\n-\t\tresults = nodeDao.getEntityHeaderByMd5(fileHandle.getContentMd5());\r\n-\t\tassertNotNull(results);\r\n-\t\tassertEquals(2, results.size());\r\n-\t\tassertEquals(id1, results.get(0).getId());\r\n-\t\tassertEquals(id1, results.get(1).getId());\r\n-\t\tassertFalse(results.get(0).getVersionNumber().equals(results.get(1).getVersionNumber()));\r\n-\r\n-\t\t// Add a new node with no file handle\r\n-\t\tNode node2 = NodeTestUtils.createNew(\"testGetEntityHeaderByMd5 node 2\", creatorUserGroupId);\r\n-\t\tfinal String node2Label1 = \"Node 2 version label 1\";\r\n-\t\tnode1.setVersionLabel(node2Label1);\r\n-\t\tfinal String id2 = nodeDao.createNew(node2);\r\n-\t\tassertNotNull(id2);\r\n-\t\ttoDelete.add(id2);\r\n-\t\tnode2.setId(id2);\r\n+\t\tfor(int i = 0; i < 202; i++) {\r\n+\t\t\t// Add a node with a file handle\r\n+\t\t\tNode curr = NodeTestUtils.createNew(\"testGetEntityHeaderByMd5 node \" + i, creatorUserGroupId);\r\n+\t\t\tcurr.setFileHandleId(fileHandle3.getId());\r\n+\t\t\tfinal String nodeLabel = \"\" + i;\r\n+\t\t\tcurr.setVersionLabel(nodeLabel);\r\n+\t\t\tfinal String id = nodeDao.createNew(curr);\r\n+\t\t\tcurr = nodeDao.getNode(id);\r\n+\t\t\tassertNotNull(id);\r\n+\t\t\ttoDelete.add(id);\r\n+\t\t\tcurr.setId(id);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc914cd085ece396d19756c8f6b3ddf0553a6e02"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwMTM3MQ==", "bodyText": "This is not used.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4198#discussion_r489801371", "createdAt": "2020-09-16T23:06:14Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/NodeDAOImplTest.java", "diffHunk": "@@ -2339,80 +2340,35 @@ public void testCreateTableNode() throws DatastoreException, InvalidModelExcepti\n \t\tassertEquals(expected, n1.getColumnModelIds());\r\n \t}\r\n \r\n+\t/**\r\n+\t * PLFM-5960\r\n+\t * @throws Exception\r\n+\t */\r\n \t@Test\r\n \tpublic void testGetEntityHeaderByMd5() throws Exception {\r\n \r\n \t\t// Nothing yet\r\n-\t\tList<EntityHeader> results = nodeDao.getEntityHeaderByMd5(\"md5\");\r\n+\t\tList<EntityHeader> results = nodeDao.getEntityHeaderByMd5(fileHandle3.getContentMd5());\r\n \t\tassertNotNull(results);\r\n \t\tassertEquals(0, results.size());\r\n \r\n-\t\t// Add a node with a file handle\r\n-\t\tNode node1 = NodeTestUtils.createNew(\"testGetEntityHeaderByMd5 node 1\", creatorUserGroupId);\r\n-\t\tnode1.setFileHandleId(fileHandle.getId());\r\n-\t\tfinal String node1Label1 = \"1\";\r\n-\t\tnode1.setVersionLabel(node1Label1);\r\n-\t\tfinal String id1 = nodeDao.createNew(node1);\r\n-\t\tnode1 = nodeDao.getNode(id1);\r\n-\t\tassertNotNull(id1);\r\n-\t\ttoDelete.add(id1);\r\n-\t\tnode1.setId(id1);\r\n-\r\n-\t\tresults = nodeDao.getEntityHeaderByMd5(fileHandle.getContentMd5());\r\n-\t\tassertNotNull(results);\r\n-\t\tassertEquals(1, results.size());\r\n-\t\tassertEquals(id1, results.get(0).getId());\r\n-\t\tassertNotNull(results.get(0).getBenefactorId());\r\n-\t\tassertEquals(Long.valueOf(1L), results.get(0).getVersionNumber());\r\n-\t\tassertEquals(node1Label1, results.get(0).getVersionLabel());\r\n-\t\tassertEquals(node1.getCreatedByPrincipalId().toString(), results.get(0).getCreatedBy());\r\n-\t\tassertEquals(node1.getCreatedOn(), results.get(0).getCreatedOn());\r\n-\t\tassertEquals(node1.getModifiedByPrincipalId().toString(), results.get(0).getModifiedBy());\r\n-\t\tassertEquals(node1.getModifiedOn(), results.get(0).getModifiedOn());\r\n-\r\n-\t\t// Create a new version of the node of the same file\r\n-\t\tfinal String node1Label2 = \"Node 1 version label 2\";\r\n-\t\tnode1.setVersionLabel(node1Label2);\r\n-\t\tnodeDao.createNewVersion(node1);\r\n-\r\n-\t\tresults = nodeDao.getEntityHeaderByMd5(fileHandle.getContentMd5());\r\n-\t\tassertNotNull(results);\r\n-\t\tassertEquals(2, results.size());\r\n-\t\tassertEquals(id1, results.get(0).getId());\r\n-\t\tassertEquals(id1, results.get(1).getId());\r\n-\t\tassertFalse(results.get(0).getVersionNumber().equals(results.get(1).getVersionNumber()));\r\n-\r\n-\t\t// Add a new node with no file handle\r\n-\t\tNode node2 = NodeTestUtils.createNew(\"testGetEntityHeaderByMd5 node 2\", creatorUserGroupId);\r\n-\t\tfinal String node2Label1 = \"Node 2 version label 1\";\r\n-\t\tnode1.setVersionLabel(node2Label1);\r\n-\t\tfinal String id2 = nodeDao.createNew(node2);\r\n-\t\tassertNotNull(id2);\r\n-\t\ttoDelete.add(id2);\r\n-\t\tnode2.setId(id2);\r\n+\t\tfor(int i = 0; i < 202; i++) {\r\n+\t\t\t// Add a node with a file handle\r\n+\t\t\tNode curr = NodeTestUtils.createNew(\"testGetEntityHeaderByMd5 node \" + i, creatorUserGroupId);\r\n+\t\t\tcurr.setFileHandleId(fileHandle3.getId());\r\n+\t\t\tfinal String nodeLabel = \"\" + i;\r\n+\t\t\tcurr.setVersionLabel(nodeLabel);\r\n+\t\t\tfinal String id = nodeDao.createNew(curr);\r\n+\t\t\tcurr = nodeDao.getNode(id);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc914cd085ece396d19756c8f6b3ddf0553a6e02"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwMTQ3Nw==", "bodyText": "Please add // Call under test", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4198#discussion_r489801477", "createdAt": "2020-09-16T23:06:35Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/NodeDAOImplTest.java", "diffHunk": "@@ -2339,80 +2340,35 @@ public void testCreateTableNode() throws DatastoreException, InvalidModelExcepti\n \t\tassertEquals(expected, n1.getColumnModelIds());\r\n \t}\r\n \r\n+\t/**\r\n+\t * PLFM-5960\r\n+\t * @throws Exception\r\n+\t */\r\n \t@Test\r\n \tpublic void testGetEntityHeaderByMd5() throws Exception {\r\n \r\n \t\t// Nothing yet\r\n-\t\tList<EntityHeader> results = nodeDao.getEntityHeaderByMd5(\"md5\");\r\n+\t\tList<EntityHeader> results = nodeDao.getEntityHeaderByMd5(fileHandle3.getContentMd5());\r\n \t\tassertNotNull(results);\r\n \t\tassertEquals(0, results.size());\r\n \r\n-\t\t// Add a node with a file handle\r\n-\t\tNode node1 = NodeTestUtils.createNew(\"testGetEntityHeaderByMd5 node 1\", creatorUserGroupId);\r\n-\t\tnode1.setFileHandleId(fileHandle.getId());\r\n-\t\tfinal String node1Label1 = \"1\";\r\n-\t\tnode1.setVersionLabel(node1Label1);\r\n-\t\tfinal String id1 = nodeDao.createNew(node1);\r\n-\t\tnode1 = nodeDao.getNode(id1);\r\n-\t\tassertNotNull(id1);\r\n-\t\ttoDelete.add(id1);\r\n-\t\tnode1.setId(id1);\r\n-\r\n-\t\tresults = nodeDao.getEntityHeaderByMd5(fileHandle.getContentMd5());\r\n-\t\tassertNotNull(results);\r\n-\t\tassertEquals(1, results.size());\r\n-\t\tassertEquals(id1, results.get(0).getId());\r\n-\t\tassertNotNull(results.get(0).getBenefactorId());\r\n-\t\tassertEquals(Long.valueOf(1L), results.get(0).getVersionNumber());\r\n-\t\tassertEquals(node1Label1, results.get(0).getVersionLabel());\r\n-\t\tassertEquals(node1.getCreatedByPrincipalId().toString(), results.get(0).getCreatedBy());\r\n-\t\tassertEquals(node1.getCreatedOn(), results.get(0).getCreatedOn());\r\n-\t\tassertEquals(node1.getModifiedByPrincipalId().toString(), results.get(0).getModifiedBy());\r\n-\t\tassertEquals(node1.getModifiedOn(), results.get(0).getModifiedOn());\r\n-\r\n-\t\t// Create a new version of the node of the same file\r\n-\t\tfinal String node1Label2 = \"Node 1 version label 2\";\r\n-\t\tnode1.setVersionLabel(node1Label2);\r\n-\t\tnodeDao.createNewVersion(node1);\r\n-\r\n-\t\tresults = nodeDao.getEntityHeaderByMd5(fileHandle.getContentMd5());\r\n-\t\tassertNotNull(results);\r\n-\t\tassertEquals(2, results.size());\r\n-\t\tassertEquals(id1, results.get(0).getId());\r\n-\t\tassertEquals(id1, results.get(1).getId());\r\n-\t\tassertFalse(results.get(0).getVersionNumber().equals(results.get(1).getVersionNumber()));\r\n-\r\n-\t\t// Add a new node with no file handle\r\n-\t\tNode node2 = NodeTestUtils.createNew(\"testGetEntityHeaderByMd5 node 2\", creatorUserGroupId);\r\n-\t\tfinal String node2Label1 = \"Node 2 version label 1\";\r\n-\t\tnode1.setVersionLabel(node2Label1);\r\n-\t\tfinal String id2 = nodeDao.createNew(node2);\r\n-\t\tassertNotNull(id2);\r\n-\t\ttoDelete.add(id2);\r\n-\t\tnode2.setId(id2);\r\n+\t\tfor(int i = 0; i < 202; i++) {\r\n+\t\t\t// Add a node with a file handle\r\n+\t\t\tNode curr = NodeTestUtils.createNew(\"testGetEntityHeaderByMd5 node \" + i, creatorUserGroupId);\r\n+\t\t\tcurr.setFileHandleId(fileHandle3.getId());\r\n+\t\t\tfinal String nodeLabel = \"\" + i;\r\n+\t\t\tcurr.setVersionLabel(nodeLabel);\r\n+\t\t\tfinal String id = nodeDao.createNew(curr);\r\n+\t\t\tcurr = nodeDao.getNode(id);\r\n+\t\t\tassertNotNull(id);\r\n+\t\t\ttoDelete.add(id);\r\n+\t\t\tcurr.setId(id);\r\n+\t\t}\r\n \r\n-\t\tresults = nodeDao.getEntityHeaderByMd5(fileHandle.getContentMd5());\r\n+\t\tresults = nodeDao.getEntityHeaderByMd5(fileHandle3.getContentMd5());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc914cd085ece396d19756c8f6b3ddf0553a6e02"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwMTU5Mg==", "bodyText": "We can reuse the constant", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4198#discussion_r489801592", "createdAt": "2020-09-16T23:06:57Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/NodeDAOImplTest.java", "diffHunk": "@@ -2339,80 +2340,35 @@ public void testCreateTableNode() throws DatastoreException, InvalidModelExcepti\n \t\tassertEquals(expected, n1.getColumnModelIds());\r\n \t}\r\n \r\n+\t/**\r\n+\t * PLFM-5960\r\n+\t * @throws Exception\r\n+\t */\r\n \t@Test\r\n \tpublic void testGetEntityHeaderByMd5() throws Exception {\r\n \r\n \t\t// Nothing yet\r\n-\t\tList<EntityHeader> results = nodeDao.getEntityHeaderByMd5(\"md5\");\r\n+\t\tList<EntityHeader> results = nodeDao.getEntityHeaderByMd5(fileHandle3.getContentMd5());\r\n \t\tassertNotNull(results);\r\n \t\tassertEquals(0, results.size());\r\n \r\n-\t\t// Add a node with a file handle\r\n-\t\tNode node1 = NodeTestUtils.createNew(\"testGetEntityHeaderByMd5 node 1\", creatorUserGroupId);\r\n-\t\tnode1.setFileHandleId(fileHandle.getId());\r\n-\t\tfinal String node1Label1 = \"1\";\r\n-\t\tnode1.setVersionLabel(node1Label1);\r\n-\t\tfinal String id1 = nodeDao.createNew(node1);\r\n-\t\tnode1 = nodeDao.getNode(id1);\r\n-\t\tassertNotNull(id1);\r\n-\t\ttoDelete.add(id1);\r\n-\t\tnode1.setId(id1);\r\n-\r\n-\t\tresults = nodeDao.getEntityHeaderByMd5(fileHandle.getContentMd5());\r\n-\t\tassertNotNull(results);\r\n-\t\tassertEquals(1, results.size());\r\n-\t\tassertEquals(id1, results.get(0).getId());\r\n-\t\tassertNotNull(results.get(0).getBenefactorId());\r\n-\t\tassertEquals(Long.valueOf(1L), results.get(0).getVersionNumber());\r\n-\t\tassertEquals(node1Label1, results.get(0).getVersionLabel());\r\n-\t\tassertEquals(node1.getCreatedByPrincipalId().toString(), results.get(0).getCreatedBy());\r\n-\t\tassertEquals(node1.getCreatedOn(), results.get(0).getCreatedOn());\r\n-\t\tassertEquals(node1.getModifiedByPrincipalId().toString(), results.get(0).getModifiedBy());\r\n-\t\tassertEquals(node1.getModifiedOn(), results.get(0).getModifiedOn());\r\n-\r\n-\t\t// Create a new version of the node of the same file\r\n-\t\tfinal String node1Label2 = \"Node 1 version label 2\";\r\n-\t\tnode1.setVersionLabel(node1Label2);\r\n-\t\tnodeDao.createNewVersion(node1);\r\n-\r\n-\t\tresults = nodeDao.getEntityHeaderByMd5(fileHandle.getContentMd5());\r\n-\t\tassertNotNull(results);\r\n-\t\tassertEquals(2, results.size());\r\n-\t\tassertEquals(id1, results.get(0).getId());\r\n-\t\tassertEquals(id1, results.get(1).getId());\r\n-\t\tassertFalse(results.get(0).getVersionNumber().equals(results.get(1).getVersionNumber()));\r\n-\r\n-\t\t// Add a new node with no file handle\r\n-\t\tNode node2 = NodeTestUtils.createNew(\"testGetEntityHeaderByMd5 node 2\", creatorUserGroupId);\r\n-\t\tfinal String node2Label1 = \"Node 2 version label 1\";\r\n-\t\tnode1.setVersionLabel(node2Label1);\r\n-\t\tfinal String id2 = nodeDao.createNew(node2);\r\n-\t\tassertNotNull(id2);\r\n-\t\ttoDelete.add(id2);\r\n-\t\tnode2.setId(id2);\r\n+\t\tfor(int i = 0; i < 202; i++) {\r\n+\t\t\t// Add a node with a file handle\r\n+\t\t\tNode curr = NodeTestUtils.createNew(\"testGetEntityHeaderByMd5 node \" + i, creatorUserGroupId);\r\n+\t\t\tcurr.setFileHandleId(fileHandle3.getId());\r\n+\t\t\tfinal String nodeLabel = \"\" + i;\r\n+\t\t\tcurr.setVersionLabel(nodeLabel);\r\n+\t\t\tfinal String id = nodeDao.createNew(curr);\r\n+\t\t\tcurr = nodeDao.getNode(id);\r\n+\t\t\tassertNotNull(id);\r\n+\t\t\ttoDelete.add(id);\r\n+\t\t\tcurr.setId(id);\r\n+\t\t}\r\n \r\n-\t\tresults = nodeDao.getEntityHeaderByMd5(fileHandle.getContentMd5());\r\n+\t\tresults = nodeDao.getEntityHeaderByMd5(fileHandle3.getContentMd5());\r\n \t\tassertNotNull(results);\r\n-\t\tassertEquals(2, results.size());\r\n-\t\tassertEquals(id1, results.get(0).getId());\r\n-\t\tassertEquals(id1, results.get(1).getId());\r\n+\t\tassertEquals(200, results.size());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc914cd085ece396d19756c8f6b3ddf0553a6e02"}, "originalPosition": 179}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "327581777b4509e7f3950f945e389fe5ee6c49ec", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/327581777b4509e7f3950f945e389fe5ee6c49ec", "committedDate": "2020-09-17T20:47:09Z", "message": " refactored tests, change description, ORDER BY node id"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDM1OTA0", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4198#pullrequestreview-491035904", "createdAt": "2020-09-17T22:38:05Z", "commit": {"oid": "327581777b4509e7f3950f945e389fe5ee6c49ec"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjozODowNVrOHT33pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjozODowNVrOHT33pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYwMDM1Ng==", "bodyText": "You might want to add some documentation", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4198#discussion_r490600356", "createdAt": "2020-09-17T22:38:05Z", "author": {"login": "marcomarasca"}, "path": "lib/models/src/main/java/org/sagebionetworks/repo/model/NodeDAO.java", "diffHunk": "@@ -31,7 +31,8 @@\n \t * the value to pass into the node to remove the generatedBy link between node and activity\r\n \t * \r\n \t */\r\n-\tpublic static String DELETE_ACTIVITY_VALUE = \"-1\";\r\n+\tString DELETE_ACTIVITY_VALUE = \"-1\";\r\n+\tint NODE_VERSION_LIMIT_BY_FILE_MD5 = 200;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327581777b4509e7f3950f945e389fe5ee6c49ec"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4657, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}