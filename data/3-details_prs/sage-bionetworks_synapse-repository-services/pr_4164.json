{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NzI0NTU4", "number": 4164, "title": "Plfm 6311 Added Current_User() function", "bodyText": "", "createdAt": "2020-08-18T20:23:09Z", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164", "merged": true, "mergeCommit": {"oid": "3702072c21f5eff60b94bf0c99b703267e719228"}, "closed": true, "closedAt": "2020-08-27T22:33:28Z", "author": {"login": "nlgilber"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdALjHmgH2gAyNDY5NzI0NTU4OmRkYzViNmZhMjdlZmIzYjdlM2Q0OTZmYWI2NzBlMDdmN2NiMjVkYWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDINqHAFqTQ3NzEyODg0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ddc5b6fa27efb3b7e3d496fab670e07f7cb25dae", "author": {"user": null}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/ddc5b6fa27efb3b7e3d496fab670e07f7cb25dae", "committedDate": "2020-08-18T18:44:33Z", "message": "working CurrentUserId implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8b43bad781cad9a98d45dd04fbfddaca26b3b5d", "author": {"user": null}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c8b43bad781cad9a98d45dd04fbfddaca26b3b5d", "committedDate": "2020-08-18T19:17:18Z", "message": "Merge branch 'develop' into PLFM-6311"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8a6a59a449b8beec15fa7757c6f1db85a4e00d2", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/f8a6a59a449b8beec15fa7757c6f1db85a4e00d2", "committedDate": "2020-08-18T19:46:47Z", "message": "Remove debug messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/22e5dbef5721b4f70db326d41aa377f838a6fbd5", "committedDate": "2020-08-18T20:18:23Z", "message": "fix compilation error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODUwNzU1", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#pullrequestreview-469850755", "createdAt": "2020-08-18T21:41:34Z", "commit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTo0MTozNFrOHCnsWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjozMjozM1rOHCo80A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwOTUzMQ==", "bodyText": "This is a duplicate of the token below, can be removed", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472509531", "createdAt": "2020-08-18T21:41:34Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-query/src/main/resources/table-query-parser.jj", "diffHunk": "@@ -234,14 +234,28 @@ TOKEN [IGNORE_CASE]: {\n   >\r\n }\r\n \r\n+/* Synapse functions\r\n+TOKEN [IGNORE_CASE]: {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMDE5Nw==", "bodyText": "Might want to comment with \"Synapse functions\" so that it can be a place in the future to group all tokens identifying synapse specific functions", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472510197", "createdAt": "2020-08-18T21:43:11Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-query/src/main/resources/table-query-parser.jj", "diffHunk": "@@ -234,14 +234,28 @@ TOKEN [IGNORE_CASE]: {\n   >\r\n }\r\n \r\n+/* Synapse functions\r\n+TOKEN [IGNORE_CASE]: {\r\n+  < synapse_function_name:\r\n+   \"CURRENT_USER\"\r\n+  >\r\n+} */\r\n+\r\n+/* User Function */\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMDUyOQ==", "bodyText": "You might want keep the same pattern as others, when you have a single value for this alias and keep it on a single line:\n< current_user_function: \"CURRENT_USER\" >", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472510529", "createdAt": "2020-08-18T21:43:56Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-query/src/main/resources/table-query-parser.jj", "diffHunk": "@@ -234,14 +234,28 @@ TOKEN [IGNORE_CASE]: {\n   >\r\n }\r\n \r\n+/* Synapse functions\r\n+TOKEN [IGNORE_CASE]: {\r\n+  < synapse_function_name:\r\n+   \"CURRENT_USER\"\r\n+  >\r\n+} */\r\n+\r\n+/* User Function */\r\n+TOKEN [IGNORE_CASE]: {\r\n+  < current_user_function:\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMTI3NA==", "bodyText": "You probably don't need the currentUserFunctionName as we already know at this stage that this is the current user function, but you might need an identifier in the code for the type of synapse function. E.g. you could have a SynapseFunctionName enumeration insted.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472511274", "createdAt": "2020-08-18T21:45:29Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-query/src/main/resources/table-query-parser.jj", "diffHunk": "@@ -1000,10 +1014,32 @@ NumericPrimary numericPrimary():\n NumericValueFunction numericValueFunction():\r\n {\r\n \tMySqlFunction mysqlFunction = null;\r\n+\tCurrentUserFunction currentUserFunction = null;\r\n }\r\n {\r\n \tmysqlFunction = mysqlFunction() { return new NumericValueFunction(mysqlFunction); }\r\n+\t| currentUserFunction = currentUserFunction() {return new NumericValueFunction(currentUserFunction); }\r\n+}\r\n+\r\n+CurrentUserFunction currentUserFunction():\r\n+{\r\n+\tCurrentUserFunction currentUserFunction = null;\r\n+\tCurrentUserFunctionName currentUserFunctionName = null;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxNzQ3MQ==", "bodyText": "Might want to rename to SynapseFunctionName", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472517471", "createdAt": "2020-08-18T21:59:48Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-query/src/main/java/org/sagebionetworks/table/query/model/CurrentUserFunctionName.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.sagebionetworks.table.query.model;\n+\n+public enum CurrentUserFunctionName {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxNzcwOQ==", "bodyText": "Is not a date-time", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472517709", "createdAt": "2020-08-18T22:00:15Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-query/src/main/java/org/sagebionetworks/table/query/model/CurrentUserFunctionName.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.sagebionetworks.table.query.model;\n+\n+public enum CurrentUserFunctionName {\n+    // date-time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxODAyMw==", "bodyText": "Might be LONG?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472518023", "createdAt": "2020-08-18T22:01:02Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-query/src/main/java/org/sagebionetworks/table/query/model/CurrentUserFunctionName.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.sagebionetworks.table.query.model;\n+\n+public enum CurrentUserFunctionName {\n+    // date-time\n+    CURRENT_USER(FunctionReturnType.STRING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxODgzNg==", "bodyText": "This can be hard-coded to CURRENT_USER(), unless you need it somewhere else. Might it be that this is a HasFunctionReturnType? (e.g. like the MySqlFunction). How is the return type used? Is it used if the function is in the select clause? E.g. \"select current_user() from ...\" would need some sort of way to identify the type returned by the select.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472518836", "createdAt": "2020-08-18T22:02:58Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-query/src/main/java/org/sagebionetworks/table/query/model/CurrentUserFunction.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.sagebionetworks.table.query.model;\n+\n+import java.util.List;\n+\n+public class CurrentUserFunction extends SQLElement{\n+\n+    CurrentUserFunctionName currentUserFunctionName;\n+\n+    public CurrentUserFunction(CurrentUserFunctionName currentUserFunctionName){\n+        this.currentUserFunctionName = currentUserFunctionName;\n+    }\n+\n+    @Override\n+    public void toSql(StringBuilder builder, ToSqlParameters parameters) {\n+        builder.append(currentUserFunctionName.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMTE5Mw==", "bodyText": "You might not want to make this parameter optional, and always include the id of the user in the constructor of the SqlQueryBuilder.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472521193", "createdAt": "2020-08-18T22:08:55Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/TableQueryManagerImpl.java", "diffHunk": "@@ -169,7 +169,8 @@ SqlQuery queryPreflight(UserInfo user, Query query, Long maxBytesPerPage)\n \t\treturn new SqlQueryBuilder(model).tableSchema(columnModels).overrideOffset(query.getOffset())\r\n \t\t\t\t.overrideLimit(query.getLimit()).maxBytesPerPage(maxBytesPerPage)\r\n \t\t\t\t.includeEntityEtag(query.getIncludeEntityEtag()).selectedFacets(query.getSelectedFacets())\r\n-\t\t\t\t.sortList(query.getSort()).additionalFilters(query.getAdditionalFilters()).tableType(tableType).build();\r\n+\t\t\t\t.sortList(query.getSort()).additionalFilters(query.getAdditionalFilters()).tableType(tableType)\r\n+\t\t\t\t.userId(user.getId()).build();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMjczOA==", "bodyText": "This substitution should go in the SqlTranslatorUtils.translateModel method and should not use the replace from the string but rather the utilities in the Model to build the value of the function.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472522738", "createdAt": "2020-08-18T22:12:49Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/SqlQuery.java", "diffHunk": "@@ -210,8 +215,12 @@\n \t\t}else{\r\n \t\t\tthis.includesRowIdAndVersion = false;\r\n \t\t}\r\n+\r\n \t\tSQLTranslatorUtils.translateModel(transformedModel, parameters, columnTranslationReferenceLookup);\r\n \t\tthis.outputSQL = transformedModel.toSql();\r\n+\t\tif(outputSQL.contains(\"CURRENT_USER()\")){  // Non-SQL function\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyNzcyMw==", "bodyText": "Unused, can be removed", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472527723", "createdAt": "2020-08-18T22:25:53Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/SQLTranslatorUtils.java", "diffHunk": "@@ -81,6 +80,7 @@\n \r\n \tprivate static final String COLON = \":\";\r\n \tpublic static final String BIND_PREFIX = \"b\";\r\n+\tprivate static Long userId;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyOTIxNA==", "bodyText": "-> CurrentUserFunctionTest", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472529214", "createdAt": "2020-08-18T22:29:59Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-query/src/test/java/org/sagebionetworks/table/query/CurrentUserTest.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.sagebionetworks.table.query;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.table.query.model.CurrentUserFunction;\n+\n+\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\n+public class CurrentUserTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUzMDEyOA==", "bodyText": "Debug messages can be removed", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472530128", "createdAt": "2020-08-18T22:32:33Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/test/java/org/sagebionetworks/table/worker/TableWorkerIntegrationTest.java", "diffHunk": "@@ -2386,6 +2386,44 @@ public void testNotHasQuery() throws Exception{\n \t\t});\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCurrentUserQuery() throws Exception{\r\n+\t\t// setup an EntityId column.\r\n+\t\tColumnModel userIDColumn = new ColumnModel();\r\n+\t\tuserIDColumn.setColumnType(ColumnType.USERID);\r\n+\t\tuserIDColumn.setName(\"userIDcolumn\");\r\n+\t\tuserIDColumn = columnManager.createColumnModel(adminUserInfo, userIDColumn);\r\n+\t\tschema = Lists.newArrayList(userIDColumn);\r\n+\t\t// build a table with this column.\r\n+\t\tcreateTableWithSchema();\r\n+\t\tTableStatus status = waitForTableProcessing(tableId);\r\n+\t\tif(status.getErrorDetails() != null){\r\n+\t\t\tSystem.out.println(status.getErrorDetails());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5OTE4MzY3", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#pullrequestreview-469918367", "createdAt": "2020-08-19T00:35:49Z", "commit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMDozNTo0OVrOHCrRKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMDo1ODo1N1rOHCrpqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2ODEwNg==", "bodyText": "You can add an end to end test in the IT100TableControllerTest.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472568106", "createdAt": "2020-08-19T00:35:49Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/test/java/org/sagebionetworks/table/worker/TableWorkerIntegrationTest.java", "diffHunk": "@@ -2386,6 +2386,44 @@ public void testNotHasQuery() throws Exception{\n \t\t});\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCurrentUserQuery() throws Exception{\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2OTA4NA==", "bodyText": "Most likely, since this can be used in the select you will have to implement the HasFunctionReturnType interface.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472569084", "createdAt": "2020-08-19T00:39:27Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-query/src/main/java/org/sagebionetworks/table/query/model/CurrentUserFunction.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.sagebionetworks.table.query.model;\n+\n+import java.util.List;\n+\n+public class CurrentUserFunction extends SQLElement{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3NDM3Nw==", "bodyText": "You might want to add the documentation in the table examples, see SQLSpecification2.csv in lib-javadoc", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r472574377", "createdAt": "2020-08-19T00:58:57Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-query/src/main/resources/table-query-parser.jj", "diffHunk": "@@ -234,14 +234,28 @@ TOKEN [IGNORE_CASE]: {\n   >\r\n }\r\n \r\n+/* Synapse functions\r\n+TOKEN [IGNORE_CASE]: {\r\n+  < synapse_function_name:\r\n+   \"CURRENT_USER\"\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e5dbef5721b4f70db326d41aa377f838a6fbd5"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a170621e67926c87437c1bd59b2ea22b75dcf302", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a170621e67926c87437c1bd59b2ea22b75dcf302", "committedDate": "2020-08-21T23:39:30Z", "message": "Add parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb39fb77bb818297580619ef80ef7eb1a5c299f5", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/eb39fb77bb818297580619ef80ef7eb1a5c299f5", "committedDate": "2020-08-21T23:42:44Z", "message": "Merge branch 'develop' into PLFM-6311"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54280e54e8a1ff4be66c8704f44f3865a1eff89a", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/54280e54e8a1ff4be66c8704f44f3865a1eff89a", "committedDate": "2020-08-24T20:40:03Z", "message": "UserFunction implement HasReturnType, now can be identified in SELECT clause"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8a7bcd461dd94a526aa451117aed1c40b181ad0", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/d8a7bcd461dd94a526aa451117aed1c40b181ad0", "committedDate": "2020-08-25T17:49:08Z", "message": "Added E2E test for UserFunction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dadad91ae4105a09fdee9587784f7d68fdd7c598", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/dadad91ae4105a09fdee9587784f7d68fdd7c598", "committedDate": "2020-08-25T17:56:49Z", "message": "Took away optional constructor for userId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a728ed83c9b98f90ed56f914277f603e951ef35", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/1a728ed83c9b98f90ed56f914277f603e951ef35", "committedDate": "2020-08-25T19:24:14Z", "message": "Added SQLTranslatorUtilsTest for UserFunction, removed debug messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb139d99b0cccc46b72868db06689bebcd43055c", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/cb139d99b0cccc46b72868db06689bebcd43055c", "committedDate": "2020-08-25T19:46:32Z", "message": "Spaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94a914487111844f7194e00d1f14a0c60d8837ff", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/94a914487111844f7194e00d1f14a0c60d8837ff", "committedDate": "2020-08-25T19:58:32Z", "message": "comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a2247b525a54e884b19415b96b9e4bd6d6ac59f7", "committedDate": "2020-08-25T21:51:09Z", "message": "Merge branch 'develop' into PLFM-6311"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0OTQ0NTQw", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#pullrequestreview-474944540", "createdAt": "2020-08-25T22:02:52Z", "commit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "state": "APPROVED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjowMjo1MlrOHGsaCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjo1MTowMFrOHGulkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4MTA2NQ==", "bodyText": "you might want to add an assertEquals(1, queryResults.getRows().size()) to check the number of rows and additionally you could check also the number of values: assertEquals(1, queryResults.getRows().get(0).getValues().size()) assuming that your query is something on the lines of \"select userId from...\"", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476781065", "createdAt": "2020-08-25T22:02:52Z", "author": {"login": "marcomarasca"}, "path": "integration-test/src/test/java/org/sagebionetworks/IT100TableControllerTest.java", "diffHunk": "@@ -305,6 +305,35 @@ public void testCreateTableEntity() throws Exception {\n \t\t\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCurrentUserFunction() throws Exception{\r\n+\t\t// Create a few columns to add to a table entity\r\n+\t\tColumnModel one = new ColumnModel();\r\n+\t\tone.setName(\"userId\");\r\n+\t\tone.setColumnType(ColumnType.DOUBLE);\r\n+\t\tone = synapse.createColumnModel(one);\r\n+\r\n+\t\tTableEntity table = createTable(Lists.newArrayList(one.getId()));\r\n+\r\n+\t\tList<ColumnModel> columns = synapse.getColumnModelsForTableEntity(table.getId());\r\n+\r\n+\t\t// Append some rows\r\n+\t\tRowSet set = new RowSet();\r\n+\t\tList<Row> rows = Lists.newArrayList(TableModelTestUtils.createRow(null, null, userId.toString()),\r\n+\t\t\t\tTableModelTestUtils.createRow(null, null, \"2\"),\r\n+\t\t\t\tTableModelTestUtils.createRow(null, null, \"3\"),\r\n+\t\t\t\tTableModelTestUtils.createRow(null, null, \"4\"));\r\n+\t\tset.setRows(rows);\r\n+\t\tset.setHeaders(TableModelUtils.getSelectColumns(columns));\r\n+\t\tset.setTableId(table.getId());\r\n+\t\tsynapse.appendRowsToTable(set, MAX_APPEND_TIMEOUT, table.getId());\r\n+\r\n+\t\tassertCountResults(\"select * from \" + table.getId() + \" where userId = CURRENT_USER()\", table.getId(), 1L);\r\n+\t\tassertQueryResults(\"select * from \" + table.getId() + \" where userId = CURRENT_USER()\", null, null, table.getId(), (queryResults) -> {\r\n+\t\t\tassertEquals(userId.toString(), queryResults.getRows().get(0).getValues().get(0));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4Mjk0NQ==", "bodyText": "Probably better to add at the end a category that is more generic (e.g. Other Synapse Functions)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476782945", "createdAt": "2020-08-25T22:05:16Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-javadoc/src/main/resources/SQLSpecification2.csv", "diffHunk": "@@ -15,6 +15,7 @@ Aggregation Functions,Returns the sample standard deviation of expr (the square\n Aggregation Functions,\"Returns the population standard variance of expr. It considers rows as the whole population, not as a sample, so it has the number of rows as the denominator. You can also use VARIANCE(), which is equivalent.\",select VAR_POP(expr) from syn123\r\n Aggregation Functions,\"Returns the sample variance of expr. That is, the denominator is the number of rows minus one. \",select VAR_POP(expr) from syn123\r\n Aggregation Functions,\"For each group of the column 'foo', concatenate the distinct values from column 'bar' order by 'bar' descending with a separator character of '#'.  The distinct keyword is optional.  The 'order by' clause is optional.  The separator is optional, with a default separator of ','.\",\"select foo, group_concat(distinct bar order by bar desc separator '#') from syn123 group by foo\"\r\n+User Function,\"Returns the Synapse userId of the current user.\",\"select * from syn123 where userId = CURRENT_USER()\"\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4ODA5Ng==", "bodyText": "You could extract this into its own method, for example replaceSynapseFunctions", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476788096", "createdAt": "2020-08-25T22:11:53Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/SQLTranslatorUtils.java", "diffHunk": "@@ -301,7 +304,15 @@ public static Row readRow(ResultSet rs, boolean includesRowIdAndVersion, boolean\n \t */\r\n \tpublic static void translateModel(QuerySpecification transformedModel,\r\n \t\t\tMap<String, Object> parameters,\r\n-\t\t  ColumnTranslationReferenceLookup columnTranslationReferenceLookup) {\r\n+\t\t  ColumnTranslationReferenceLookup columnTranslationReferenceLookup, Long userId) {\r\n+\r\n+\t\t// Insert userId if needed\r\n+\t\tIterable<NumericValueFunction> hasUser = transformedModel.createIterable(NumericValueFunction.class);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4ODkwMQ==", "bodyText": "Please add a comment that the chain of UnsignedLiteral(unisgnedNumericLiteral... etc is needed for the binding of variables.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476788901", "createdAt": "2020-08-25T22:12:57Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/SQLTranslatorUtils.java", "diffHunk": "@@ -301,7 +304,15 @@ public static Row readRow(ResultSet rs, boolean includesRowIdAndVersion, boolean\n \t */\r\n \tpublic static void translateModel(QuerySpecification transformedModel,\r\n \t\t\tMap<String, Object> parameters,\r\n-\t\t  ColumnTranslationReferenceLookup columnTranslationReferenceLookup) {\r\n+\t\t  ColumnTranslationReferenceLookup columnTranslationReferenceLookup, Long userId) {\r\n+\r\n+\t\t// Insert userId if needed\r\n+\t\tIterable<NumericValueFunction> hasUser = transformedModel.createIterable(NumericValueFunction.class);\r\n+\t\tfor(NumericValueFunction pred: hasUser){\r\n+\t\t\tif(pred.getChild() instanceof CurrentUserFunction){\r\n+\t\t\t\tpred.replaceChildren(new UnsignedLiteral(new UnsignedNumericLiteral(new ExactNumericLiteral(userId))));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc5Mjk2OQ==", "bodyText": "You can directly compare the two maps in the assertEquals without having to compare the entryset", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476792969", "createdAt": "2020-08-25T22:18:26Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/SQLQueryTest.java", "diffHunk": "@@ -799,13 +802,45 @@ public void testSelectViewWithEtagAggregate() throws ParseException{\n \t@Test\r\n \tpublic void testAliasGroupByOrderBy() throws ParseException {\r\n \t\tsql = \"select \\\"foo\\\" as \\\"f\\\", sum(inttype) as \\\"i` sum\\\" from syn123 group by \\\"f\\\" order by \\\"i` sum\\\" DESC\";\r\n-\t\tSqlQuery query = new SqlQueryBuilder(sql)\r\n+\t\tSqlQuery query = new SqlQueryBuilder(sql, userId)\r\n \t\t.tableSchema(tableSchema)\r\n \t\t.tableType(EntityType.table)\r\n \t\t.build();\r\n \t\tassertEquals(\"SELECT _C111_ AS `f`, SUM(_C888_) AS `i`` sum` FROM T123 GROUP BY `f` ORDER BY `i`` sum` DESC\", query.getOutputSQL());\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCurrentUserFunctionInWhereClause() throws ParseException {\r\n+\t\tsql = \"select COUNT(*) from syn123 where inttype = CURRENT_USER()\";\r\n+\t\tMap<String, Object> expectedParameters = Collections.singletonMap(\"b0\", userId);\r\n+\t\tSqlQuery query = new SqlQueryBuilder(sql, userId)\r\n+\t\t\t\t.tableSchema(tableSchema)\r\n+\t\t\t\t.tableType(EntityType.table)\r\n+\t\t\t\t.build();\r\n+\t\tassertEquals(\"SELECT COUNT(*) FROM T123 WHERE _C888_ = :b0\", query.getOutputSQL());\r\n+\t\tassertEquals(expectedParameters.entrySet(), query.getParameters().entrySet());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 728}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc5OTQ5NQ==", "bodyText": "You might want to add a test for the getSelectColumns with the currentUser call to check the function return type.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476799495", "createdAt": "2020-08-25T22:27:15Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/SQLQueryTest.java", "diffHunk": "@@ -799,13 +802,45 @@ public void testSelectViewWithEtagAggregate() throws ParseException{\n \t@Test\r\n \tpublic void testAliasGroupByOrderBy() throws ParseException {\r\n \t\tsql = \"select \\\"foo\\\" as \\\"f\\\", sum(inttype) as \\\"i` sum\\\" from syn123 group by \\\"f\\\" order by \\\"i` sum\\\" DESC\";\r\n-\t\tSqlQuery query = new SqlQueryBuilder(sql)\r\n+\t\tSqlQuery query = new SqlQueryBuilder(sql, userId)\r\n \t\t.tableSchema(tableSchema)\r\n \t\t.tableType(EntityType.table)\r\n \t\t.build();\r\n \t\tassertEquals(\"SELECT _C111_ AS `f`, SUM(_C888_) AS `i`` sum` FROM T123 GROUP BY `f` ORDER BY `i`` sum` DESC\", query.getOutputSQL());\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCurrentUserFunctionInWhereClause() throws ParseException {\r\n+\t\tsql = \"select COUNT(*) from syn123 where inttype = CURRENT_USER()\";\r\n+\t\tMap<String, Object> expectedParameters = Collections.singletonMap(\"b0\", userId);\r\n+\t\tSqlQuery query = new SqlQueryBuilder(sql, userId)\r\n+\t\t\t\t.tableSchema(tableSchema)\r\n+\t\t\t\t.tableType(EntityType.table)\r\n+\t\t\t\t.build();\r\n+\t\tassertEquals(\"SELECT COUNT(*) FROM T123 WHERE _C888_ = :b0\", query.getOutputSQL());\r\n+\t\tassertEquals(expectedParameters.entrySet(), query.getParameters().entrySet());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCurrentUserFunctionInAggClause() throws ParseException {\r\n+\t\tsql = \"select COUNT(CURRENT_USER()) from syn123\";\r\n+\t\tSqlQuery query = new SqlQueryBuilder(sql, userId)\r\n+\t\t\t\t.tableSchema(tableSchema)\r\n+\t\t\t\t.tableType(EntityType.table)\r\n+\t\t\t\t.build();\r\n+\t\tassertEquals(\"SELECT COUNT(1) FROM T123\", query.getOutputSQL());\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testCurrentUserFunctionInSelectClause() throws ParseException {\r\n+\t\tsql = \"select CURRENT_USER() from syn123\";\r\n+\t\tSqlQuery query = new SqlQueryBuilder(sql, userId)\r\n+\t\t\t\t.tableSchema(tableSchema)\r\n+\t\t\t\t.tableType(EntityType.table)\r\n+\t\t\t\t.build();\r\n+\t\tassertEquals(\"SELECT 1, ROW_ID, ROW_VERSION FROM T123\", query.getOutputSQL());\r\n+\t}\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 750}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgwMjYxMA==", "bodyText": "This seems to be unused", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476802610", "createdAt": "2020-08-25T22:31:17Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/SQLTranslatorUtilsTest.java", "diffHunk": "@@ -1763,6 +1763,19 @@ public void testTranslateModel_UnnestArrayColumn() throws ParseException{\n \t\tassertEquals(\"qwerty\", parameters.get(\"b1\"));\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testTranslateModel_CurrentUserFunction() throws ParseException{\r\n+\t\tcolumnFoo.setColumnType(ColumnType.DOUBLE);//not a list type\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 417}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgwNjIyNw==", "bodyText": "this can be private", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476806227", "createdAt": "2020-08-25T22:36:12Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-query/src/main/java/org/sagebionetworks/table/query/model/CurrentUserFunction.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.sagebionetworks.table.query.model;\n+\n+import java.util.List;\n+\n+/**\n+ *\n+ * CurrentUserFunction ::= {@link SynapseFunctionName} left_paren right_paren\n+ *\n+ */\n+public class CurrentUserFunction extends SQLElement implements HasFunctionReturnType{\n+\n+    SynapseFunctionName synapseFunctionName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgwODY1OA==", "bodyText": "You might want to actually use a USER_ID type, we could add it to this FunctionReturnType enum", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476808658", "createdAt": "2020-08-25T22:39:36Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-query/src/main/java/org/sagebionetworks/table/query/model/SynapseFunctionName.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.sagebionetworks.table.query.model;\n+\n+/**\n+ * Supported Synapse Functions\n+ */\n+public enum SynapseFunctionName {\n+    // User Id\n+    CURRENT_USER(FunctionReturnType.LONG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgwOTI2Mg==", "bodyText": "missing a space after the :", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476809262", "createdAt": "2020-08-25T22:40:27Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-query/src/main/resources/table-query-parser.jj", "diffHunk": "@@ -234,14 +234,20 @@ TOKEN [IGNORE_CASE]: {\n   >\r\n }\r\n \r\n+\r\n+/* Synapse Functions */\r\n+TOKEN [IGNORE_CASE]: {\r\n+  < current_user_function:\"CURRENT_USER\" >\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxMTMyMg==", "bodyText": "You might want to add a getter for the user id", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476811322", "createdAt": "2020-08-25T22:43:18Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/SqlQuery.java", "diffHunk": "@@ -136,7 +138,8 @@\n \t\tthis.selectedFacets = selectedFacets;\r\n \t\tthis.overrideLimit = overrideLimit;\r\n \t\tthis.overrideOffset = overrideOffset;\r\n-\t\t\r\n+\t\tthis.userId = userId;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxMTcyNw==", "bodyText": "I think you can use the new SqlQuery userId variable (you can add a getter to the SqlQuery class) without having to pass it down the chain", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476811727", "createdAt": "2020-08-25T22:43:52Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/FacetModel.java", "diffHunk": "@@ -39,7 +39,7 @@\n \t * @param sqlQuery the sqlQuery on which to base the generated facet queries.\n \t * @param returnFacets whether facet information will be returned back to the user\n \t */\n-\tpublic FacetModel(List<FacetColumnRequest> selectedFacets, SqlQuery sqlQuery, boolean returnFacets) {\n+\tpublic FacetModel(List<FacetColumnRequest> selectedFacets, SqlQuery sqlQuery, boolean returnFacets, Long userId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxMjg4NA==", "bodyText": "You can use the originalQuery.getUserId() (once you add the getter), definetly not 1L :)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476812884", "createdAt": "2020-08-25T22:45:30Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/FacetTransformerRange.java", "diffHunk": "@@ -74,7 +74,7 @@ private SqlQuery generateFacetSqlQuery(SqlQuery originalQuery) {\n \t\tSqlElementUntils.appendCombinedWhereClauseToStringBuilder(builder, facetSearchConditionString, tableExpressionFromModel.getWhereClause());\r\n \t\t\r\n \t\ttry {\r\n-\t\t\treturn new SqlQueryBuilder(builder.toString(), originalQuery.getTableSchema()).build();\r\n+\t\t\treturn new SqlQueryBuilder(builder.toString(), originalQuery.getTableSchema(), 1L).build();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxMzcwMA==", "bodyText": "We can use the originalQuery.getUserId() (Once you add the getter)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476813700", "createdAt": "2020-08-25T22:46:36Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/FacetTransformerValueCounts.java", "diffHunk": "@@ -34,15 +34,18 @@\n \t\n \tprivate SqlQuery generatedFacetSqlQuery;\n \tprivate Set<String> selectedValues;\n+\tprivate Long userId;\n \t\n-\tpublic FacetTransformerValueCounts(String columnName, boolean columnTypeIsList, List<FacetRequestColumnModel> facets, SqlQuery originalQuery, Set<String> selectedValues){\n+\tpublic FacetTransformerValueCounts(String columnName, boolean columnTypeIsList, List<FacetRequestColumnModel> facets,\n+\t\t\t\t\t\t\t\t\t   SqlQuery originalQuery, Set<String> selectedValues, Long userId){\n \t\tValidateArgument.required(columnName, \"columnName\");\n \t\tValidateArgument.required(facets, \"facets\");\n \t\tValidateArgument.required(originalQuery, \"originalQuery\");\n \t\tthis.columnName = columnName;\n \t\tthis.facets = facets;\n \t\tthis.selectedValues = selectedValues;\n \t\tthis.generatedFacetSqlQuery = generateFacetSqlQuery(originalQuery, columnTypeIsList);\n+\t\tthis.userId = userId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxMzk0Mg==", "bodyText": "you can pass the originalQuery.getUserId().", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476813942", "createdAt": "2020-08-25T22:46:57Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/FacetTransformerValueCounts.java", "diffHunk": "@@ -83,7 +86,7 @@ private SqlQuery generateFacetSqlQuery(SqlQuery originalQuery, boolean columnTyp\n \t\tbuilder.append(pagination.toSql());\n \t\t\n \t\ttry {\n-\t\t\treturn new SqlQueryBuilder(builder.toString(), originalQuery.getTableSchema()).build();\n+\t\t\treturn new SqlQueryBuilder(builder.toString(), originalQuery.getTableSchema(), userId).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxNTIyMQ==", "bodyText": "This wont' be needed after the FacetModel is modified to user the user in the original query", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476815221", "createdAt": "2020-08-25T22:48:54Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/TableQueryManagerImpl.java", "diffHunk": "@@ -202,7 +202,7 @@ QueryResultBundle queryAsStream(final ProgressCallback progressCallback, final U\n \t\t\t\t\tfinal TableStatus status = validateTableIsAvailable(query.getTableId());\r\n \t\t\t\t\t// run the query\r\n \t\t\t\t\tQueryResultBundle bundle = queryAsStreamAfterAuthorization(progressCallback, query,\r\n-\t\t\t\t\t\t\trowHandler, options);\r\n+\t\t\t\t\t\t\trowHandler, options, user.getId());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxNTg5Mg==", "bodyText": "This wont' be needed as we can use the original query user id", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476815892", "createdAt": "2020-08-25T22:49:45Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/table/FacetModelTest.java", "diffHunk": "@@ -92,19 +92,21 @@ public void setUp() throws Exception {\n \t\tvaluesRequest = new FacetColumnValuesRequest();\n \t\tvaluesRequest.setColumnName(facetColumnName2);\n \t\tvaluesRequest.setFacetValues(Sets.newHashSet(selectedValue));\n-\t\t\n-\t\tsimpleQuery = new SqlQueryBuilder(\"select * from \" + tableId, facetSchema).build();\n+\n+\t\tuserId = 1L;\n+\n+\t\tsimpleQuery = new SqlQueryBuilder(\"select * from \" + tableId, facetSchema, userId).build();\n \t\tselectedFacets = Lists.newArrayList((FacetColumnRequest)rangeRequest, (FacetColumnRequest)valuesRequest);\n-\t\t\n+\n \t\tquery = new SqlQueryBuilder(\"select * from \" + tableId + \" where asdf <> ayy and asdf < 'taco bell'\",\n-\t\t\t\tfacetSchema).build();\n+\t\t\t\tfacetSchema, userId).build();\n \t}\n \t/////////////////////\n \t// Constructor tests\n \t/////////////////////\n \t@Test\n \tpublic void testConstructor(){\n-\t\tfacetModel = new FacetModel(selectedFacets, query, true);\t\t\n+\t\tfacetModel = new FacetModel(selectedFacets, query, true, userId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxNjc4Nw==", "bodyText": "See comments above :)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r476816787", "createdAt": "2020-08-25T22:51:00Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/table/FacetTransformerValueCountsTest.java", "diffHunk": "@@ -92,7 +93,7 @@ public void before() throws ParseException{\n \t\n \t@Test\n \tpublic void testConstructor() {\n-\t\tFacetTransformerValueCounts facetTransformer = new FacetTransformerValueCounts(stringModel.getName(), false, facets, originalQuery, selectedValuesSet);\n+\t\tFacetTransformerValueCounts facetTransformer = new FacetTransformerValueCounts(stringModel.getName(), false, facets, originalQuery, selectedValuesSet, userId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2247b525a54e884b19415b96b9e4bd6d6ac59f7"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a609196ee9ec5404332549070ce7e325adf0d70", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/6a609196ee9ec5404332549070ce7e325adf0d70", "committedDate": "2020-08-26T20:28:54Z", "message": "Pull request changes, refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70ba71b3000ec96107653ac9735344acbd6a9969", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/70ba71b3000ec96107653ac9735344acbd6a9969", "committedDate": "2020-08-26T21:24:52Z", "message": "add test for user function return type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49956ea2c3d4040458024e2bd523c29c39f0277e", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/49956ea2c3d4040458024e2bd523c29c39f0277e", "committedDate": "2020-08-26T22:42:18Z", "message": " added comment to translateSynapseFunctions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MDM0NzU2", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#pullrequestreview-476034756", "createdAt": "2020-08-26T23:01:05Z", "commit": {"oid": "49956ea2c3d4040458024e2bd523c29c39f0277e"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzowMTowNVrOHHhGdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzoxNzozN1rOHHiC2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY0NDQwNA==", "bodyText": "Might want to add another query that uses the function in the select clause.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r477644404", "createdAt": "2020-08-26T23:01:05Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/test/java/org/sagebionetworks/table/worker/TableWorkerIntegrationTest.java", "diffHunk": "@@ -2386,6 +2384,36 @@ public void testNotHasQuery() throws Exception{\n \t\t});\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCurrentUserQuery() throws Exception{\r\n+\t\t// setup an EntityId column.\r\n+\t\tColumnModel userIDColumn = new ColumnModel();\r\n+\t\tuserIDColumn.setColumnType(ColumnType.USERID);\r\n+\t\tuserIDColumn.setName(\"userIDcolumn\");\r\n+\t\tuserIDColumn = columnManager.createColumnModel(adminUserInfo, userIDColumn);\r\n+\t\tschema = Lists.newArrayList(userIDColumn);\r\n+\t\t// build a table with this column.\r\n+\t\tcreateTableWithSchema();\r\n+\t\tTableStatus status = waitForTableProcessing(tableId);\r\n+\t\tassertTrue(TableState.AVAILABLE.equals(status.getState()));\r\n+\r\n+\t\tRowSet rowSet = new RowSet();\r\n+\t\trowSet.setRows(Lists.newArrayList(\r\n+\t\t\t\tTableModelTestUtils.createRow(null, null, adminUserInfo.getId().toString()),\r\n+\t\t\t\tTableModelTestUtils.createRow(null, null, \"2\"),\r\n+\t\t\t\tTableModelTestUtils.createRow(null, null, \"3\")));\r\n+\t\trowSet.setHeaders(TableModelUtils.getSelectColumns(schema));\r\n+\t\trowSet.setTableId(tableId);\r\n+\t\treferenceSet = appendRows(adminUserInfo, tableId,\r\n+\t\t\t\trowSet, mockProgressCallback);\r\n+\r\n+\t\t//query the column and check if the results match the userId\r\n+\t\twaitForConsistentQuery(adminUserInfo, \"select * from \" + tableId + \" where userIDcolumn = CURRENT_USER()\", null, null, (queryResult) -> {\r\n+\t\t\tassertEquals(1, queryResult.getQueryResults().getRows().size());\r\n+\t\t\tassertEquals(Arrays.asList(adminUserInfo.getId().toString()), queryResult.getQueryResults().getRows().get(0).getValues());\r\n+\t\t});\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49956ea2c3d4040458024e2bd523c29c39f0277e"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY0NTEzMA==", "bodyText": "Add assert on the number of values, and to make it consistent add the userId as the select clause", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r477645130", "createdAt": "2020-08-26T23:02:05Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/test/java/org/sagebionetworks/table/worker/TableWorkerIntegrationTest.java", "diffHunk": "@@ -2386,6 +2384,36 @@ public void testNotHasQuery() throws Exception{\n \t\t});\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCurrentUserQuery() throws Exception{\r\n+\t\t// setup an EntityId column.\r\n+\t\tColumnModel userIDColumn = new ColumnModel();\r\n+\t\tuserIDColumn.setColumnType(ColumnType.USERID);\r\n+\t\tuserIDColumn.setName(\"userIDcolumn\");\r\n+\t\tuserIDColumn = columnManager.createColumnModel(adminUserInfo, userIDColumn);\r\n+\t\tschema = Lists.newArrayList(userIDColumn);\r\n+\t\t// build a table with this column.\r\n+\t\tcreateTableWithSchema();\r\n+\t\tTableStatus status = waitForTableProcessing(tableId);\r\n+\t\tassertTrue(TableState.AVAILABLE.equals(status.getState()));\r\n+\r\n+\t\tRowSet rowSet = new RowSet();\r\n+\t\trowSet.setRows(Lists.newArrayList(\r\n+\t\t\t\tTableModelTestUtils.createRow(null, null, adminUserInfo.getId().toString()),\r\n+\t\t\t\tTableModelTestUtils.createRow(null, null, \"2\"),\r\n+\t\t\t\tTableModelTestUtils.createRow(null, null, \"3\")));\r\n+\t\trowSet.setHeaders(TableModelUtils.getSelectColumns(schema));\r\n+\t\trowSet.setTableId(tableId);\r\n+\t\treferenceSet = appendRows(adminUserInfo, tableId,\r\n+\t\t\t\trowSet, mockProgressCallback);\r\n+\r\n+\t\t//query the column and check if the results match the userId\r\n+\t\twaitForConsistentQuery(adminUserInfo, \"select * from \" + tableId + \" where userIDcolumn = CURRENT_USER()\", null, null, (queryResult) -> {\r\n+\t\t\tassertEquals(1, queryResult.getQueryResults().getRows().size());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49956ea2c3d4040458024e2bd523c29c39f0277e"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY0NjIyOQ==", "bodyText": "You can add a note that the CURRENT_USER() can be used in the select clause as well and the return column type is USERID", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r477646229", "createdAt": "2020-08-26T23:03:38Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-javadoc/src/main/resources/SQLSpecification2.csv", "diffHunk": "@@ -65,3 +65,4 @@ Reserved Columns,\"In this example we are listing all rows that have a current ve\n Operations on LIST columns,\"To filter on a list column. Use the HAS() clause, which holds a comma separated list of values. The values in the comma separated list are in a OR relationship meaning that a row matches if it contains any of the values.\",\"select * from syn123 where fooList has ('either this value', 'or this value')\"\r\n Operations on LIST columns,To filter for lists that contain must contain multiple values you will need chain together multiple HAS() clauses with ANDs. Order DOES NOT matter,select * from syn123 where fooList has ('first required value') and fooList has ('second required value') and fooList has ('third required value')\r\n Operations on LIST columns,\"To operate on individual values stored inside a LIST column, use the UNNEST() function. NOTE: This will duplicate rows for all other columns.\",\"select unnest(fooList), count(*) from syn123 group by unnest(fooList)\"\r\n+Other Synapse Functions, \"Returns the Synapse userId of the current user.\",\"select * from syn123 where userId = CURRENT_USER()\"\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49956ea2c3d4040458024e2bd523c29c39f0277e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY0ODk0MQ==", "bodyText": "Always pair a public/protected method with relevant tests", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r477648941", "createdAt": "2020-08-26T23:07:27Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/SQLTranslatorUtils.java", "diffHunk": "@@ -550,9 +555,24 @@ public static void translate(HasPredicate predicate,\n \t\t\t\t});\r\n \t\t}\r\n \t}\r\n-\t\r\n-\t\r\n-\t\r\n+\r\n+\t/**\r\n+\t * Translate instances of Synapse functions not supported by SQL\r\n+\t *\r\n+\t * @param transformedModel\r\n+\t * @param userId\r\n+\t */\r\n+\tpublic static void translateSynapseFunctions(QuerySpecification transformedModel, Long userId){\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49956ea2c3d4040458024e2bd523c29c39f0277e"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY1OTg2NQ==", "bodyText": "It's probably better to reuse the UserInfo user variable setup in the before.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#discussion_r477659865", "createdAt": "2020-08-26T23:17:37Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/table/TableQueryManagerImplTest.java", "diffHunk": "@@ -141,6 +141,7 @@\n \tprivate QueryOptions queryOptions;\r\n \t\r\n \tprivate Long sumFilesizes;\r\n+\tprivate Long userId;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49956ea2c3d4040458024e2bd523c29c39f0277e"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84ec075dc20a3b2a9a88ea96b4b203060860b42e", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/84ec075dc20a3b2a9a88ea96b4b203060860b42e", "committedDate": "2020-08-27T18:14:10Z", "message": "add translateSynapseFunctions test, refactor userid, usernote to rest docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4048f1ebbb393c9d1541570774d5cad698a652e3", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4048f1ebbb393c9d1541570774d5cad698a652e3", "committedDate": "2020-08-27T20:42:10Z", "message": "add userId check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTI4ODQy", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4164#pullrequestreview-477128842", "createdAt": "2020-08-27T22:33:11Z", "commit": {"oid": "4048f1ebbb393c9d1541570774d5cad698a652e3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4627, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}