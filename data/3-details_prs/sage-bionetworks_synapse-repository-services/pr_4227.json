{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MjEyNzI0", "number": 4227, "title": "PLFM-6485: Remove MD5 checksum list from pre-signed URL API", "bodyText": "", "createdAt": "2020-10-23T20:55:41Z", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4227", "merged": true, "mergeCommit": {"oid": "0bc10daa6e07bfb6577a97710a6ae680003fc134"}, "closed": true, "closedAt": "2020-10-24T00:55:05Z", "author": {"login": "marcomarasca"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVMgzSAH2gAyNTA5MjEyNzI0OjBkM2JmNTIyZWJiNDAyYThmOWJjYzdhMTMzMjIzOGNhMDE0ZWJiMGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVgZ7wAFqTUxNjE0NDEzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0d3bf522ebb402a8f9bcc7a1332238ca014ebb0e", "author": {"user": {"login": "marcomarasca", "name": "Marco Marasca"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/0d3bf522ebb402a8f9bcc7a1332238ca014ebb0e", "committedDate": "2020-10-23T01:44:20Z", "message": "PLFM-6485: Remove the list of part MD5 checksums from multipart API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c7674fff9d84e603a021979801d2009e8740c63", "author": {"user": {"login": "marcomarasca", "name": "Marco Marasca"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/9c7674fff9d84e603a021979801d2009e8740c63", "committedDate": "2020-10-23T03:15:33Z", "message": "PLFM-6485: Added source file Etag check during copy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "218bbafead87e00f17112d5f3f8bae1ad0e34b12", "author": {"user": {"login": "marcomarasca", "name": "Marco Marasca"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/218bbafead87e00f17112d5f3f8bae1ad0e34b12", "committedDate": "2020-10-23T03:21:34Z", "message": "PLFM-6485: Additional input validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f9834e09b40c9b920542c19b0aad65098792c65", "author": {"user": {"login": "marcomarasca", "name": "Marco Marasca"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/8f9834e09b40c9b920542c19b0aad65098792c65", "committedDate": "2020-10-23T03:33:43Z", "message": "PLFM-6485: Add upload exception to migration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb6a8bf0d49ab4f730ccaba927ce65ce958436b8", "author": {"user": {"login": "marcomarasca", "name": "Marco Marasca"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/bb6a8bf0d49ab4f730ccaba927ce65ce958436b8", "committedDate": "2020-10-23T18:50:29Z", "message": "PLFM-6485: Sync the service documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e52ba215d5b5fa2f263a983a6e1eb9635ccff00e", "author": {"user": {"login": "marcomarasca", "name": "Marco Marasca"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/e52ba215d5b5fa2f263a983a6e1eb9635ccff00e", "committedDate": "2020-10-23T20:51:29Z", "message": "PLFM-6485: Rework integration test to support multiple parts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b859126bc1e0044896432e5169a812b4de75b27c", "author": {"user": {"login": "marcomarasca", "name": "Marco Marasca"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/b859126bc1e0044896432e5169a812b4de75b27c", "committedDate": "2020-10-23T20:54:02Z", "message": "PLFM-6485: Disable tests that upload large files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MTQyMjA4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4227#pullrequestreview-516142208", "createdAt": "2020-10-24T00:32:57Z", "commit": {"oid": "b859126bc1e0044896432e5169a812b4de75b27c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDozMjo1N1rOHnh8xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDozMjo1N1rOHnh8xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIxMjc0MA==", "bodyText": "local vars with names for the vars", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4227#discussion_r511212740", "createdAt": "2020-10-24T00:32:57Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/file/MultipartManagerV2ImplAutowireTest.java", "diffHunk": "@@ -178,197 +160,244 @@ public void before() throws Exception {\n \t\t\tgoogleCloudStorageLocationSetting.setBaseKey(baseKey);\r\n \t\t\tgoogleCloudStorageLocationSetting.setUploadType(UploadType.GOOGLECLOUDSTORAGE);\r\n \t\t\tgoogleCloudStorageLocationSetting = projectSettingsManager.createStorageLocationSetting(adminUserInfo, googleCloudStorageLocationSetting);\r\n+\t\t\r\n+\t\t\tstorageLocationsToDelete.add(googleCloudStorageLocationSetting.getStorageLocationId());\r\n \t\t}\r\n \t}\r\n \r\n \t@AfterEach\r\n \tpublic void after() {\r\n-\t\t\r\n-\t\tentityManager.deleteEntity(adminUserInfo, sourceEntity.getId());\r\n-\t\t\r\n-\t\t// delete the file from S3.\r\n-\t\tif (sourceFileHandle != null) {\r\n-\t\t\ts3Client.deleteObject(sourceFileHandle.getBucketName(), sourceFileHandle.getKey());\r\n+\r\n+\t\tfor (String entityId : entitiesToDelete) {\r\n+\t\t\tentityManager.deleteEntity(adminUserInfo, entityId);\r\n \t\t}\r\n \t\t\r\n-\t\tif (copyFileHandle != null) {\r\n-\t\t\ts3Client.deleteObject(copyFileHandle.getBucketName(), copyFileHandle.getKey());\r\n+\t\tfor (CloudProviderFileHandleInterface fileHandle : fileHandlesToDelete) {\r\n+\t\t\tif (fileHandle instanceof S3FileHandle) {\r\n+\t\t\t\ts3Client.deleteObject(fileHandle.getBucketName(), fileHandle.getKey());\r\n+\t\t\t} else if (fileHandle instanceof GoogleCloudFileHandle) {\r\n+\t\t\t\tgcClient.deleteObject(fileHandle.getBucketName(), fileHandle.getKey());\r\n+\t\t\t}\t\r\n \t\t}\r\n \t\t\r\n \t\tmultipartManagerV2.truncateAll();\r\n \t\tfileHandleDao.truncateTable();\r\n \t\t\r\n-\t\tif (stackConfiguration.getGoogleCloudEnabled()) {\r\n-\t\t\ttry {\r\n-\t\t\t\tprojectSettingsManager.deleteProjectSetting(adminUserInfo, googleCloudStorageLocationSetting.getStorageLocationId().toString());\r\n-\t\t\t} catch (Exception e) {\r\n-\t\t\t}\r\n+\t\tfor (Long storageLocationId :  storageLocationsToDelete) {\r\n+\t\t\tstorageLocationDao.delete(storageLocationId);\r\n \t\t}\r\n \t}\r\n \r\n \t@Test\r\n \tpublic void testMultipartUpload() throws Exception {\r\n-\t\t// step one start the upload.\r\n-\t\tMultipartUploadStatus status = startUpload();\r\n-\t\tString contentType = null;\r\n-\t\t// step two get pre-signed URLs for the parts\r\n-\t\tPartPresignedUrl preSignedUrl = getPresignedURLForPart(status.getUploadId(), contentType);\r\n-\t\t// step three put the part to the URL\r\n-\t\tputStringToURL(preSignedUrl.getUploadPresignedUrl(), fileDataString, preSignedUrl.getSignedHeaders());\r\n-\t\t// step four add the part to the upload\r\n-\t\taddPart(status.getUploadId(), fileMD5Hex);\r\n-\t\t// Step five complete the upload\r\n-\t\tMultipartUploadStatus finalStatus = completeUpload(status.getUploadId());\r\n-\t\t// validate the results\r\n-\t\tassertNotNull(finalStatus);\r\n-\t\tassertEquals(\"1\", finalStatus.getPartsState());\r\n-\t\tassertEquals(MultipartUploadState.COMPLETED, finalStatus.getState());\r\n-\t\tassertNotNull(finalStatus.getResultFileHandleId());\r\n-\t\tfileHandlesToDelete.add(finalStatus.getResultFileHandleId());\r\n+\t\tdoMultipartUpload(\"foo.txt\", \"plain/text\", \"This is the content of the file\", null, false);\r\n \t}\r\n-\t\r\n+\r\n \t@Test\r\n-\tpublic void testMultipartUploadWithPartMD5() throws Exception {\r\n-\t\t// step one start the upload.\r\n-\t\tMultipartUploadStatus status = startUpload();\r\n-\t\tString contentType = null;\r\n-\t\t// step two get pre-signed URLs for the parts\r\n-\t\tPartPresignedUrl preSignedUrl = getPresignedURLForPart(status.getUploadId(), contentType, fileMD5Hex);\r\n-\t\t// step three put the part to the URL\r\n-\t\tputStringToURL(preSignedUrl.getUploadPresignedUrl(), fileDataString, preSignedUrl.getSignedHeaders());\r\n-\t\t// step four add the part to the upload\r\n-\t\taddPart(status.getUploadId(), fileMD5Hex);\r\n-\t\t// Step five complete the upload\r\n-\t\tMultipartUploadStatus finalStatus = completeUpload(status.getUploadId());\r\n-\t\t// validate the results\r\n-\t\tassertNotNull(finalStatus);\r\n-\t\tassertEquals(\"1\", finalStatus.getPartsState());\r\n-\t\tassertEquals(MultipartUploadState.COMPLETED, finalStatus.getState());\r\n-\t\tassertNotNull(finalStatus.getResultFileHandleId());\r\n-\t\tfileHandlesToDelete.add(finalStatus.getResultFileHandleId());\r\n+\tpublic void testMultipartUploadWithContentType() throws Exception {\r\n+\t\tdoMultipartUpload(\"foo.txt\", \"plain/text\", \"This is the content of the file\", null, true);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b859126bc1e0044896432e5169a812b4de75b27c"}, "originalPosition": 227}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MTQ0MTM4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4227#pullrequestreview-516144138", "createdAt": "2020-10-24T00:50:08Z", "commit": {"oid": "b859126bc1e0044896432e5169a812b4de75b27c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDo1MDowOFrOHniPqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDo1MDowOFrOHniPqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIxNzU3Nw==", "bodyText": "let the exception go to the base handler.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4227#discussion_r511217577", "createdAt": "2020-10-24T00:50:08Z", "author": {"login": "john-hill"}, "path": "lib/lib-upload/src/main/java/org/sagebionetworks/upload/multipart/S3MultipartUploadDAOImpl.java", "diffHunk": "@@ -281,4 +274,14 @@ public long completeMultipartUpload(CompleteMultipartRequest request) {\n \t\treturn resultFileMetadata.getContentLength();\r\n \t}\r\n \r\n+\t@Override\r\n+\tpublic String getObjectEtag(String bucket, String key) {\r\n+\t\ttry {\r\n+\t\t\tObjectMetadata metaData = s3Client.getObjectMetadata(bucket, key);\r\n+\t\t\treturn metaData.getETag();\r\n+\t\t} catch (AmazonS3Exception e) {\r\n+\t\t\tthrow new IllegalArgumentException(e.getMessage(), e);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b859126bc1e0044896432e5169a812b4de75b27c"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4546, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}