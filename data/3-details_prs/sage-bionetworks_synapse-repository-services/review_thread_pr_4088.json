{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNTQ4MzI3", "number": 4088, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxMzozN1rOEGCHfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDo0MTo0N1rOEGgp9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzYxNTk5OnYy", "diffSide": "RIGHT", "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/oauth/OIDCAuthorizationRequest.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxMzozN1rOGklROA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxMzozN1rOGklROA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMjUzNg==", "bodyText": "To protect against breaking a client write a test that passes a serialized object to the POJO parser for OIDCClaimsRequest.  If you pass the same serialized object(s) used in ITOIDCTest (name?) then you have maintained the protection already in the code base.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441012536", "createdAt": "2020-06-16T17:13:37Z", "author": {"login": "brucehoff"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/oauth/OIDCAuthorizationRequest.json", "diffHunk": "@@ -10,7 +10,7 @@\n \t\t\t\"description\": \"space-separated list of scopes\"\n \t\t},\n \t\t\"claims\":{\n-\t\t\t\"type\":\"string\",\n+\t\t\t\"$ref\":\"org.sagebionetworks.repo.model.oauth.OIDCClaimsRequest\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203cecc68e8a9b39e4daa4e4c67fec54c54e33b5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzYxOTY5OnYy", "diffSide": "RIGHT", "path": "integration-test/src/test/java/org/sagebionetworks/ITOpenIDConnectTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxNDo0MVrOGklTmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo1MDo1OFrOGlJf8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMzE0NQ==", "bodyText": "pass the deleted strings to the POJO parser to make sure it still works.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441013145", "createdAt": "2020-06-16T17:14:41Z", "author": {"login": "brucehoff"}, "path": "integration-test/src/test/java/org/sagebionetworks/ITOpenIDConnectTest.java", "diffHunk": "@@ -110,10 +124,18 @@ public void testClientNotVerified() throws Exception {\n \t\tauthorizationRequest.setRedirectUri(client.getRedirect_uris().get(0));\n \t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n \t\tauthorizationRequest.setScope(\"openid\");\n-\t\tauthorizationRequest.setClaims(\n-\t\t\t\t\"{\\\"id_token\\\":{\\\"userid\\\":\\\"null\\\",\\\"email\\\":null,\\\"is_certified\\\":null,\\\"team\\\":{\\\"values\\\":[\\\"2\\\"]}},\"+\n-\t\t\t\t \"\\\"userinfo\\\":{\\\"userid\\\":\\\"null\\\",\\\"email\\\":null,\\\"is_certified\\\":null,\\\"team\\\":{\\\"values\\\":[\\\"2\\\"]}}}\"\n-\t\t);\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsToRequest = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203cecc68e8a9b39e4daa4e4c67fec54c54e33b5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwNjEyOQ==", "bodyText": "This string in particular causes an issue. The value for the field \"userId\" is (string) \"null\" and not null. The JSON parser can't convert \"null\" to the OIDCClaimsRequestDetails object.\nThis means using the object in this PR instead of using the custom parser causes a breaking API change, (though the impact of the change may be small).", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441606129", "createdAt": "2020-06-17T14:50:58Z", "author": {"login": "nickgros"}, "path": "integration-test/src/test/java/org/sagebionetworks/ITOpenIDConnectTest.java", "diffHunk": "@@ -110,10 +124,18 @@ public void testClientNotVerified() throws Exception {\n \t\tauthorizationRequest.setRedirectUri(client.getRedirect_uris().get(0));\n \t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n \t\tauthorizationRequest.setScope(\"openid\");\n-\t\tauthorizationRequest.setClaims(\n-\t\t\t\t\"{\\\"id_token\\\":{\\\"userid\\\":\\\"null\\\",\\\"email\\\":null,\\\"is_certified\\\":null,\\\"team\\\":{\\\"values\\\":[\\\"2\\\"]}},\"+\n-\t\t\t\t \"\\\"userinfo\\\":{\\\"userid\\\":\\\"null\\\",\\\"email\\\":null,\\\"is_certified\\\":null,\\\"team\\\":{\\\"values\\\":[\\\"2\\\"]}}}\"\n-\t\t);\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsToRequest = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMzE0NQ=="}, "originalCommit": {"oid": "203cecc68e8a9b39e4daa4e4c67fec54c54e33b5"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzYzNTAxOnYy", "diffSide": "RIGHT", "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/oauth/OIDCClaimsRequest.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxODo1OVrOGkldwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxODo1OVrOGkldwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNTc0Ng==", "bodyText": "cool, could you back fill the other references to the OIDC spec in the oauth/ folder to be hyperlinks?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441015746", "createdAt": "2020-06-16T17:18:59Z", "author": {"login": "brucehoff"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/oauth/OIDCClaimsRequest.json", "diffHunk": "@@ -1,5 +1,6 @@\n {\n-    \"description\": \"Stores OIDC claims and details in accordance with OIDC Core 1.0 Claims Request: https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter\",\n+    \"description\": \"Stores OIDC claims and details in accordance with <a href=\\\"https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter\\\">OIDC Core 1.0 Claims Request</a>. The keys used in these maps are <a href=\\\"${org.sagebionetworks.repo.model.oauth.OIDCClaimName}\\\">OIDCClaimName</a>s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203cecc68e8a9b39e4daa4e4c67fec54c54e33b5"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzY1MjY4OnYy", "diffSide": "RIGHT", "path": "lib/lib-utils/src/test/java/org/sagebionetworks/util/EnumKeyedJsonMapUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoyMzo1NlrOGklpTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoyMzo1NlrOGklpTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxODcwMQ==", "bodyText": "redundant", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441018701", "createdAt": "2020-06-16T17:23:56Z", "author": {"login": "brucehoff"}, "path": "lib/lib-utils/src/test/java/org/sagebionetworks/util/EnumKeyedJsonMapUtilTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.sagebionetworks.util;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class EnumKeyedJsonMapUtilTest {\n+\n+\tprivate enum TestEnum {\n+\t\tALPHA,\n+\t\tBETA,\n+\t\tGAMMA\n+\t}\n+\n+\t@Test\n+\tpublic void testConvertToEnum() {\n+\t\tMap<String, String> stringMap = new HashMap<>();\n+\t\tstringMap.put(\"ALPHA\", \"alphaVal\");\n+\t\tstringMap.put(\"BETA\", \"betaVal\");\n+\t\tstringMap.put(\"GAMMA\", \"gammaVal\");\n+\n+\t\t// Call under test\n+\t\tMap<TestEnum, String> enumMap = EnumKeyedJsonMapUtil.convertToEnum(stringMap, TestEnum.class);\n+\n+\t\tassertEquals(3, enumMap.size());\n+\t\tassertEquals(stringMap.get(\"ALPHA\"), enumMap.get(TestEnum.ALPHA));\n+\t\tassertEquals(stringMap.get(\"BETA\"), enumMap.get(TestEnum.BETA));\n+\t\tassertEquals(stringMap.get(\"GAMMA\"), enumMap.get(TestEnum.GAMMA));\n+\t}\n+\n+\t@Test\n+\tpublic void testConvertToEnum_IllegalArgExc() {\n+\t\tMap<String, String> stringMap = new HashMap<>();\n+\t\tstringMap.put(\"ALPHA\", \"alphaVal\");\n+\t\tstringMap.put(\"BETA\", \"betaVal\");\n+\t\tstringMap.put(\"EPSILON\", \"epsilonVal\"); // not in the enum!\n+\n+\t\t// Call under test\n+\t\tMap<TestEnum, String> enumMap = EnumKeyedJsonMapUtil.convertToEnum(stringMap, TestEnum.class);\n+\n+\t\tassertEquals(2, enumMap.size());\n+\t\tassertEquals(stringMap.get(\"ALPHA\"), enumMap.get(TestEnum.ALPHA));\n+\t\tassertEquals(stringMap.get(\"BETA\"), enumMap.get(TestEnum.BETA));\n+\t\tassertNull(enumMap.get(TestEnum.GAMMA));\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testConvertToString() {\n+\t\tMap<TestEnum, String> enumMap = new HashMap<>();\n+\t\tenumMap.put(TestEnum.ALPHA, \"alphaVal\");\n+\t\tenumMap.put(TestEnum.BETA, \"betaVal\");\n+\t\tenumMap.put(TestEnum.GAMMA, \"gammaVal\");\n+\n+\t\t// Call under test\n+\t\tMap<String, String> stringMap = EnumKeyedJsonMapUtil.convertToString(enumMap);\n+\n+\t\tassertEquals(3, stringMap.size());\n+\t\tassertEquals(enumMap.get(TestEnum.ALPHA), stringMap.get(\"ALPHA\"));\n+\t\tassertEquals(enumMap.get(TestEnum.BETA), stringMap.get(\"BETA\"));\n+\t\tassertEquals(enumMap.get(TestEnum.GAMMA), stringMap.get(\"GAMMA\"));\n+\t}\n+\n+\n+\t@Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203cecc68e8a9b39e4daa4e4c67fec54c54e33b5"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzY5NTU0OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzozNTo1NVrOGkmFDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzozNTo1NVrOGkmFDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyNTgwNw==", "bodyText": "I don't think this null check is necessary.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441025807", "createdAt": "2020-06-16T17:35:55Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "diffHunk": "@@ -346,16 +357,131 @@ public OIDCTokenResponse getAccessToken(String code, String verifiedClientId, St\n \t\tif (scopes.contains(OAuthScope.openid)) {\n \t\t\tString idTokenId = UUID.randomUUID().toString();\n \t\t\tMap<OIDCClaimName,Object> userInfo = getUserInfo(authorizationRequest.getUserId(), \n-\t\t\t\t\tscopes, ClaimsJsonUtil.getClaimsMapFromClaimsRequestParam(authorizationRequest.getClaims(), ID_TOKEN_CLAIMS_KEY));\n+\t\t\t\t\tscopes, EnumKeyedJsonMapUtil.convertToEnum(normalizedClaims.getId_token(), OIDCClaimName.class));\n \t\t\tString idToken = oidcTokenHelper.createOIDCIdToken(oauthEndpoint, ppid, oauthClientId, now, \n \t\t\t\t\tauthorizationRequest.getNonce(), authTime, idTokenId, userInfo);\n \t\t\tresult.setId_token(idToken);\n \t\t}\n \n+\t\t// A refresh token should only be issued when `offline_access` is requested.\n+\t\tboolean issueRefreshToken = scopes.contains(OAuthScope.offline_access);\n+\t\tString refreshTokenId = null;\n+\t\tif (issueRefreshToken) {\n+\n+\t\t\tOAuthRefreshTokenAndMetadata refreshToken = oauthRefreshTokenManager\n+\t\t\t\t\t.createRefreshToken(authorizationRequest.getUserId(),\n+\t\t\t\t\t\t\toauthClientId,\n+\t\t\t\t\t\t\tscopes,\n+\t\t\t\t\t\t\tnormalizedClaims\n+\t\t\t\t\t);\n+\t\t\trefreshTokenId = refreshToken.getMetadata().getTokenId();\n+\t\t\tresult.setRefresh_token(refreshToken.getRefreshToken());\n+\t\t}\n+\n \t\tString accessTokenId = UUID.randomUUID().toString();\n \t\tString accessToken = oidcTokenHelper.createOIDCaccessToken(oauthEndpoint, ppid, \n-\t\t\t\toauthClientId, now, authTime, null, accessTokenId, scopes,\n-\t\t\t\tClaimsJsonUtil.getClaimsMapFromClaimsRequestParam(authorizationRequest.getClaims(), USER_INFO_CLAIMS_KEY));\n+\t\t\t\toauthClientId, now, authTime, refreshTokenId, accessTokenId, scopes,\n+\t\t\t\tEnumKeyedJsonMapUtil.convertToEnum(normalizedClaims.getUserinfo(), OIDCClaimName.class));\n+\t\tresult.setAccess_token(accessToken);\n+\t\treturn result;\n+\t}\n+\n+\t/**\n+\t * Removes null fields and unrecognized claims from the OIDCClaimsRequest. Also replaces\n+\t * null objects with empty ones (a requirement for the {@link OAuthRefreshTokenManager}, if the\n+\t * claims are saved)\n+\t *\n+\t * Protected access for testing\n+\t * @param claims\n+\t * @return\n+\t */\n+\tprotected static OIDCClaimsRequest normalizeClaims(OIDCClaimsRequest claims) {\n+\t\tif (claims == null) {\n+\t\t\tclaims = new OIDCClaimsRequest();\n+\t\t}\n+\t\tif (claims.getId_token() == null) {\n+\t\t\tclaims.setId_token(Collections.emptyMap());\n+\t\t} else {\n+\t\t\t// Converting the key to enum and back to string will drop unrecognized claims\n+\t\t\tclaims.setId_token(\n+\t\t\t\t\tEnumKeyedJsonMapUtil.convertToString(\n+\t\t\t\t\t\t\tEnumKeyedJsonMapUtil.convertToEnum(claims.getId_token(), OIDCClaimName.class)\n+\t\t\t\t\t)\n+\t\t\t);\n+\t\t}\n+\t\tif (claims.getUserinfo() == null) {\n+\t\t\tclaims.setUserinfo(Collections.emptyMap());\n+\t\t} else {\n+\t\t\tclaims.setUserinfo(\n+\t\t\t\t\tEnumKeyedJsonMapUtil.convertToString(\n+\t\t\t\t\t\t\tEnumKeyedJsonMapUtil.convertToEnum(claims.getUserinfo(), OIDCClaimName.class)\n+\t\t\t\t\t)\n+\t\t\t);\n+\t\t}\n+\t\treturn claims;\n+\t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic OIDCTokenResponse getTokenResponseWithRefreshToken(String refreshToken, String verifiedClientId, String scope, String oauthEndpoint) {\n+\t\tValidateArgument.required(refreshToken, \"Refresh Token\");\n+\t\tValidateArgument.required(verifiedClientId, \"OAuth Client ID\");\n+\t\tValidateArgument.required(oauthEndpoint, \"Authorization Endpoint\");\n+\t\t// scopes is not required\n+\n+\t\tvalidateClientVerificationStatus(verifiedClientId);\n+\t\tList<OAuthScope> scopes = parseScopeString(scope);\n+\n+\t\t// Retrieve the refresh token and rotate it.\n+\t\tOAuthRefreshTokenAndMetadata rotatedRefreshToken = oauthRefreshTokenManager.rotateRefreshToken(refreshToken);\n+\t\tOAuthRefreshTokenInformation refreshTokenMetadata = rotatedRefreshToken.getMetadata();\n+\n+\t\t// Ensure the client is permitted to use this refresh token\n+\t\tif (!refreshTokenMetadata.getClientId().equals(verifiedClientId)) {\n+\t\t\t// Defined by https://tools.ietf.org/html/rfc6749#section-5.2\n+\t\t\tthrow new IllegalArgumentException(\"invalid_grant\");\n+\t\t}\n+\n+\t\tif (scopes.isEmpty()) {\n+\t\t\t// Per RFC-6479 Section 6, if [the requested scope is] omitted[, it] is treated as equal to the scope originally granted by the resource owner. https://tools.ietf.org/html/rfc6749#section-6\n+\t\t\tscopes = refreshTokenMetadata.getScopes();\n+\t\t} else if (!refreshTokenMetadata.getScopes().containsAll(scopes)) { // Ensure the requested scopes are a subset of previously authorized scopes and claims\n+\t\t\t// Defined by https://tools.ietf.org/html/rfc6749#section-5.2\n+\t\t\tthrow new IllegalArgumentException(\"invalid_scope\");\n+\t\t}\n+\n+\t\t// In the JWT, we will need to supply both the current time and the date/time of the initial authorization\n+\t\tlong now = clock.currentTimeMillis();\n+\t\tDate authTime = null;\n+\t\tif (refreshTokenMetadata.getAuthorizedOn() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203cecc68e8a9b39e4daa4e4c67fec54c54e33b5"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzcyMjE0OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzo0Mzo0NVrOGkmWdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzo0Mzo0NVrOGkmWdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzMDI2MA==", "bodyText": "please make sure there is a test of the case in which a non-JWT is passes as an access token", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441030260", "createdAt": "2020-06-16T17:43:45Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "diffHunk": "@@ -422,4 +548,41 @@ protected void validateClientVerificationStatus(String clientId) throws NotFound\n \t\t\tthrow new OAuthClientNotVerifiedException(\"The OAuth client (\" + clientId + \") is not verified.\");\n \t\t}\n \t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic void revokeToken(OAuthTokenRevocationRequest revocationRequest) {\n+\t\tswitch (revocationRequest.getToken_type_hint()) {\n+\t\t\tcase access_token: // retrieve the refresh token ID from the JWT\n+\t\t\t\tString refreshTokenId = this.getRefreshTokenId(revocationRequest.getToken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203cecc68e8a9b39e4daa4e4c67fec54c54e33b5"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzcyNjgwOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzo0NTowNlrOGkmZgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzo0NTowNlrOGkmZgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzMTA0Mw==", "bodyText": "\"This access token has no associated refresh token so it cannot be revoked.\"", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441031043", "createdAt": "2020-06-16T17:45:06Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "diffHunk": "@@ -422,4 +548,41 @@ protected void validateClientVerificationStatus(String clientId) throws NotFound\n \t\t\tthrow new OAuthClientNotVerifiedException(\"The OAuth client (\" + clientId + \") is not verified.\");\n \t\t}\n \t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic void revokeToken(OAuthTokenRevocationRequest revocationRequest) {\n+\t\tswitch (revocationRequest.getToken_type_hint()) {\n+\t\t\tcase access_token: // retrieve the refresh token ID from the JWT\n+\t\t\t\tString refreshTokenId = this.getRefreshTokenId(revocationRequest.getToken());\n+\t\t\t\tif (refreshTokenId == null) {\n+\t\t\t\t\t// Access tokens that were not issued alongside refresh tokens cannot be revoked.\n+\t\t\t\t\tthrow new IllegalArgumentException(\"The access token was not issued via a refresh token. It cannot be revoked.\");\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203cecc68e8a9b39e4daa4e4c67fec54c54e33b5"}, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzczOTcwOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzo0ODoyOFrOGkmhjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzo0ODoyOFrOGkmhjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzMzEwMQ==", "bodyText": "please add a method to OauthRefreshTokenManager:  revokeRefreshToken(String verifiedClientId, String refreshTokenId).", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441033101", "createdAt": "2020-06-16T17:48:28Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "diffHunk": "@@ -422,4 +548,41 @@ protected void validateClientVerificationStatus(String clientId) throws NotFound\n \t\t\tthrow new OAuthClientNotVerifiedException(\"The OAuth client (\" + clientId + \") is not verified.\");\n \t\t}\n \t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic void revokeToken(OAuthTokenRevocationRequest revocationRequest) {\n+\t\tswitch (revocationRequest.getToken_type_hint()) {\n+\t\t\tcase access_token: // retrieve the refresh token ID from the JWT\n+\t\t\t\tString refreshTokenId = this.getRefreshTokenId(revocationRequest.getToken());\n+\t\t\t\tif (refreshTokenId == null) {\n+\t\t\t\t\t// Access tokens that were not issued alongside refresh tokens cannot be revoked.\n+\t\t\t\t\tthrow new IllegalArgumentException(\"The access token was not issued via a refresh token. It cannot be revoked.\");\n+\t\t\t\t}\n+\t\t\t\t// Revoke via token doesn't require authorization, so we use the admin user\n+\t\t\t\tUserInfo adminUserInfo = userManager.getUserInfo(AuthorizationConstants.BOOTSTRAP_PRINCIPAL.THE_ADMIN_USER.getPrincipalId());\n+\t\t\t\toauthRefreshTokenManager.revokeRefreshToken(adminUserInfo, refreshTokenId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203cecc68e8a9b39e4daa4e4c67fec54c54e33b5"}, "originalPosition": 280}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzc4NTczOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODowMTowMVrOGkm-6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODowMTowMVrOGkm-6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0MDYxOQ==", "bodyText": "add verifiedClientId", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441040619", "createdAt": "2020-06-16T18:01:01Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "diffHunk": "@@ -422,4 +548,41 @@ protected void validateClientVerificationStatus(String clientId) throws NotFound\n \t\t\tthrow new OAuthClientNotVerifiedException(\"The OAuth client (\" + clientId + \") is not verified.\");\n \t\t}\n \t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic void revokeToken(OAuthTokenRevocationRequest revocationRequest) {\n+\t\tswitch (revocationRequest.getToken_type_hint()) {\n+\t\t\tcase access_token: // retrieve the refresh token ID from the JWT\n+\t\t\t\tString refreshTokenId = this.getRefreshTokenId(revocationRequest.getToken());\n+\t\t\t\tif (refreshTokenId == null) {\n+\t\t\t\t\t// Access tokens that were not issued alongside refresh tokens cannot be revoked.\n+\t\t\t\t\tthrow new IllegalArgumentException(\"The access token was not issued via a refresh token. It cannot be revoked.\");\n+\t\t\t\t}\n+\t\t\t\t// Revoke via token doesn't require authorization, so we use the admin user\n+\t\t\t\tUserInfo adminUserInfo = userManager.getUserInfo(AuthorizationConstants.BOOTSTRAP_PRINCIPAL.THE_ADMIN_USER.getPrincipalId());\n+\t\t\t\toauthRefreshTokenManager.revokeRefreshToken(adminUserInfo, refreshTokenId);\n+\t\t\t\treturn;\n+\t\t\tcase refresh_token: // retrieve the token ID from the DAO using the token hash\n+\t\t\t\toauthRefreshTokenManager.revokeRefreshToken(revocationRequest.getToken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203cecc68e8a9b39e4daa4e4c67fec54c54e33b5"}, "originalPosition": 283}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzc5NjY3OnYy", "diffSide": "RIGHT", "path": "lib/lib-auto-generated/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODowNDoxNFrOGknF3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODowNDoxNFrOGknF3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0MjM5Ng==", "bodyText": "remove", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441042396", "createdAt": "2020-06-16T18:04:14Z", "author": {"login": "brucehoff"}, "path": "lib/lib-auto-generated/pom.xml", "diffHunk": "@@ -48,6 +48,24 @@\n \t\t\t\t\t</execution>\n \t\t\t\t</executions>\n \t\t\t</plugin>\n+\t\t\t<plugin>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203cecc68e8a9b39e4daa4e4c67fec54c54e33b5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzgyMDExOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/auth/OAuthRefreshTokenDaoAutowiredTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoxMDo1MVrOGknU5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoxMDo1MVrOGknU5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NjI0Nw==", "bodyText": "remove this line", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441046247", "createdAt": "2020-06-16T18:10:51Z", "author": {"login": "brucehoff"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/auth/OAuthRefreshTokenDaoAutowiredTest.java", "diffHunk": "@@ -433,4 +433,28 @@ void deleteLeastRecentlyUsedActiveTokens() {\n \t\tassertTrue(oauthRefreshTokenDao.getRefreshTokenMetadata(newToken1.getTokenId()).isPresent());\n \t\tassertTrue(oauthRefreshTokenDao.getRefreshTokenMetadata(newToken2.getTokenId()).isPresent());\n \t}\n+\n+\t@Test\n+\tpublic void testIsTokenActive() {\n+\t\tOAuthRefreshTokenInformation token = createRefreshToken(new Date(System.currentTimeMillis()));\n+\t\t// Call under test\n+\t\tassertTrue(oauthRefreshTokenDao.isTokenActive(token.getTokenId(), HALF_YEAR_DAYS));\n+\t}\n+\n+\t@Test\n+\tpublic void testIsTokenActive_deleted() {\n+\t\tOAuthRefreshTokenInformation token = createRefreshToken(new Date(System.currentTimeMillis()));\n+\t\toauthRefreshTokenDao.deleteToken(token.getTokenId());\n+\t\t// Call under test\n+\t\tassertFalse(oauthRefreshTokenDao.isTokenActive(token.getTokenId(), HALF_YEAR_DAYS));\n+\t}\n+\n+\t@Test\n+\tpublic void testIsTokenActive_expired() {\n+\t\t// Create token last used one year ago\n+\t\tOAuthRefreshTokenInformation token = createRefreshToken(new Date(System.currentTimeMillis() - ONE_YEAR_MILLIS));\n+\t\toauthRefreshTokenDao.deleteToken(token.getTokenId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203cecc68e8a9b39e4daa4e4c67fec54c54e33b5"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzg2OTYxOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImplAutowiredTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyMTo1MVrOGkn0HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyMTo1MVrOGkn0HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NDIzNw==", "bodyText": "it looks like some of the same set up is used >=4 times.  Please factor out the repeated code.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441054237", "createdAt": "2020-06-16T18:21:51Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImplAutowiredTest.java", "diffHunk": "@@ -106,54 +118,238 @@ public void tearDown() throws Exception {\n \n \t// the business logic is tested in detail in the unit tests.  This just does a basic authorization round-trip.\n \t@Test\n-\tpublic void testAuthorizationRoundTrip() throws Exception {\t\t\n+\tpublic void testAuthorizationCodeRoundTrip() throws Exception {\n \n \t\t// Verify the client\n \t\toauthClient = oauthClientManager.updateOpenIDConnectClientVerifiedStatus(adminUserInfo, oauthClient.getClient_id(), oauthClient.getEtag(), true);\n-\t\t\n+\n \t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n \t\tauthorizationRequest.setClientId(oauthClient.getClient_id());\n \t\tauthorizationRequest.setRedirectUri(oauthClient.getRedirect_uris().get(0));\n-\t\tauthorizationRequest.setScope(OAuthScope.openid.name());\n+\t\tauthorizationRequest.setScope(OAuthScope.openid.name() + \" \" + OAuthScope.offline_access.name());\n \t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n-\t\tauthorizationRequest.setClaims(\"{\\\"id_token\\\":{\\\"team\\\":{\\\"values\\\":[\\\"2\\\"]}},\\\"userinfo\\\":{\\\"team\\\":{\\\"values\\\":[\\\"2\\\"]}}}\");\n-\t\t\t\t\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsToRequest = new HashMap<>();\n+\t\tOIDCClaimsRequestDetails teamClaimRequestDetails = new OIDCClaimsRequestDetails();\n+\t\tteamClaimRequestDetails.setValues(Collections.singletonList(\"2\"));\n+\t\tclaimsToRequest.put(OIDCClaimName.team.name(), teamClaimRequestDetails);\n+\t\tOIDCClaimsRequest claimsRequest = new OIDCClaimsRequest();\n+\t\tclaimsRequest.setId_token(claimsToRequest);\n+\t\tclaimsRequest.setUserinfo(claimsToRequest);\n+\t\tauthorizationRequest.setClaims(claimsRequest);\n+\n \t\t// method under test\n-\t\tOIDCAuthorizationRequestDescription description = \n+\t\tOIDCAuthorizationRequestDescription description =\n \t\t\t\topenIDConnectManager.getAuthenticationRequestDescription(authorizationRequest);\n-\t\t\n+\n \t\tassertNotNull(description);\n-\t\t\n+\n \t\t// method under test\n \t\tOAuthAuthorizationResponse authResponse = openIDConnectManager.\n \t\t\t\tauthorizeClient(userInfo, authorizationRequest);\n-\t\t\n+\n \t\tassertNotNull(authResponse.getAccess_code());\n-\t\t\n+\n \t\t// method under test\n-\t\tOIDCTokenResponse tokenResponse = \n-\t\t\t\topenIDConnectManager.getAccessToken(authResponse.getAccess_code(), \n+\t\tOIDCTokenResponse tokenResponse =\n+\t\t\t\topenIDConnectManager.getTokenResponseWithAuthorizationCode(authResponse.getAccess_code(),\n \t\t\t\t\t\toauthClient.getClient_id(), oauthClient.getRedirect_uris().get(0), OAUTH_ENDPOINT);\n-\t\t\n-\t\t\n+\n+\n \t\tassertNotNull(tokenResponse.getAccess_token());\n \t\tassertNotNull(tokenResponse.getId_token());\n-\t\t\n+\t\tassertNotNull(tokenResponse.getRefresh_token());\n+\n \t\toidcTokenHelper.validateJWT(tokenResponse.getId_token());\n-\t\t\n+\n+\t\t// method under test\n+\t\tJWTWrapper oidcUserInfo = (JWTWrapper) openIDConnectManager.getUserInfo(tokenResponse.getAccess_token(), OAUTH_ENDPOINT);\n+\n+\t\toidcTokenHelper.validateJWT(oidcUserInfo.getJwt());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testRefreshTokenRoundTrip() throws Exception {\n+\t\t// Verify the client\n+\t\toauthClient = oauthClientManager.updateOpenIDConnectClientVerifiedStatus(adminUserInfo, oauthClient.getClient_id(), oauthClient.getEtag(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203cecc68e8a9b39e4daa4e4c67fec54c54e33b5"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzg4MzQwOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImplAutowiredTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyNTowNFrOGkn8_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyNTowNFrOGkn8_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NjUxMA==", "bodyText": "I would just this one check in an earlier roundtrip test and delete this test", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441056510", "createdAt": "2020-06-16T18:25:04Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImplAutowiredTest.java", "diffHunk": "@@ -106,54 +118,238 @@ public void tearDown() throws Exception {\n \n \t// the business logic is tested in detail in the unit tests.  This just does a basic authorization round-trip.\n \t@Test\n-\tpublic void testAuthorizationRoundTrip() throws Exception {\t\t\n+\tpublic void testAuthorizationCodeRoundTrip() throws Exception {\n \n \t\t// Verify the client\n \t\toauthClient = oauthClientManager.updateOpenIDConnectClientVerifiedStatus(adminUserInfo, oauthClient.getClient_id(), oauthClient.getEtag(), true);\n-\t\t\n+\n \t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n \t\tauthorizationRequest.setClientId(oauthClient.getClient_id());\n \t\tauthorizationRequest.setRedirectUri(oauthClient.getRedirect_uris().get(0));\n-\t\tauthorizationRequest.setScope(OAuthScope.openid.name());\n+\t\tauthorizationRequest.setScope(OAuthScope.openid.name() + \" \" + OAuthScope.offline_access.name());\n \t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n-\t\tauthorizationRequest.setClaims(\"{\\\"id_token\\\":{\\\"team\\\":{\\\"values\\\":[\\\"2\\\"]}},\\\"userinfo\\\":{\\\"team\\\":{\\\"values\\\":[\\\"2\\\"]}}}\");\n-\t\t\t\t\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsToRequest = new HashMap<>();\n+\t\tOIDCClaimsRequestDetails teamClaimRequestDetails = new OIDCClaimsRequestDetails();\n+\t\tteamClaimRequestDetails.setValues(Collections.singletonList(\"2\"));\n+\t\tclaimsToRequest.put(OIDCClaimName.team.name(), teamClaimRequestDetails);\n+\t\tOIDCClaimsRequest claimsRequest = new OIDCClaimsRequest();\n+\t\tclaimsRequest.setId_token(claimsToRequest);\n+\t\tclaimsRequest.setUserinfo(claimsToRequest);\n+\t\tauthorizationRequest.setClaims(claimsRequest);\n+\n \t\t// method under test\n-\t\tOIDCAuthorizationRequestDescription description = \n+\t\tOIDCAuthorizationRequestDescription description =\n \t\t\t\topenIDConnectManager.getAuthenticationRequestDescription(authorizationRequest);\n-\t\t\n+\n \t\tassertNotNull(description);\n-\t\t\n+\n \t\t// method under test\n \t\tOAuthAuthorizationResponse authResponse = openIDConnectManager.\n \t\t\t\tauthorizeClient(userInfo, authorizationRequest);\n-\t\t\n+\n \t\tassertNotNull(authResponse.getAccess_code());\n-\t\t\n+\n \t\t// method under test\n-\t\tOIDCTokenResponse tokenResponse = \n-\t\t\t\topenIDConnectManager.getAccessToken(authResponse.getAccess_code(), \n+\t\tOIDCTokenResponse tokenResponse =\n+\t\t\t\topenIDConnectManager.getTokenResponseWithAuthorizationCode(authResponse.getAccess_code(),\n \t\t\t\t\t\toauthClient.getClient_id(), oauthClient.getRedirect_uris().get(0), OAUTH_ENDPOINT);\n-\t\t\n-\t\t\n+\n+\n \t\tassertNotNull(tokenResponse.getAccess_token());\n \t\tassertNotNull(tokenResponse.getId_token());\n-\t\t\n+\t\tassertNotNull(tokenResponse.getRefresh_token());\n+\n \t\toidcTokenHelper.validateJWT(tokenResponse.getId_token());\n-\t\t\n+\n+\t\t// method under test\n+\t\tJWTWrapper oidcUserInfo = (JWTWrapper) openIDConnectManager.getUserInfo(tokenResponse.getAccess_token(), OAUTH_ENDPOINT);\n+\n+\t\toidcTokenHelper.validateJWT(oidcUserInfo.getJwt());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testRefreshTokenRoundTrip() throws Exception {\n+\t\t// Verify the client\n+\t\toauthClient = oauthClientManager.updateOpenIDConnectClientVerifiedStatus(adminUserInfo, oauthClient.getClient_id(), oauthClient.getEtag(), true);\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(oauthClient.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(oauthClient.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setScope(OAuthScope.openid.name() + \" \" + OAuthScope.offline_access.name());\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsToRequest = new HashMap<>();\n+\t\tOIDCClaimsRequestDetails teamClaimRequestDetails = new OIDCClaimsRequestDetails();\n+\t\tteamClaimRequestDetails.setValues(Collections.singletonList(\"2\"));\n+\t\tclaimsToRequest.put(OIDCClaimName.team.name(), teamClaimRequestDetails);\n+\t\tOIDCClaimsRequest claimsRequest = new OIDCClaimsRequest();\n+\t\tclaimsRequest.setId_token(claimsToRequest);\n+\t\tclaimsRequest.setUserinfo(claimsToRequest);\n+\t\tauthorizationRequest.setClaims(claimsRequest);\n+\n+\t\t// tested in testAuthorizationCodeRoundTrip\n+\t\tOAuthAuthorizationResponse authResponse = openIDConnectManager.\n+\t\t\t\tauthorizeClient(userInfo, authorizationRequest);\n+\n+\t\t// tested in testAuthorizationCodeRoundTrip\n+\t\tOIDCTokenResponse tokenResponse =\n+\t\t\t\topenIDConnectManager.getTokenResponseWithAuthorizationCode(authResponse.getAccess_code(),\n+\t\t\t\t\t\toauthClient.getClient_id(), oauthClient.getRedirect_uris().get(0), OAUTH_ENDPOINT);\n+\n+\t\t// Use the refresh token to get a new access token\n \t\t// method under test\n-\t\tJWTWrapper oidcUserInfo = (JWTWrapper)openIDConnectManager.getUserInfo(tokenResponse.getAccess_token(), OAUTH_ENDPOINT);\n-\t\t\n+\t\tOIDCTokenResponse newTokenResponse =\n+\t\t\t\topenIDConnectManager.getTokenResponseWithRefreshToken(tokenResponse.getRefresh_token(), oauthClient.getClient_id(), null, OAUTH_ENDPOINT);\n+\n+\t\tassertNotNull(newTokenResponse.getAccess_token());\n+\t\tassertNotEquals(tokenResponse.getAccess_token(), newTokenResponse.getAccess_token());\n+\t\tassertNotNull(newTokenResponse.getId_token());\n+\t\tassertNotEquals(tokenResponse.getId_token(), newTokenResponse.getId_token());\n+\t\tassertNotNull(newTokenResponse.getRefresh_token());\n+\t\tassertNotEquals(tokenResponse.getRefresh_token(), newTokenResponse.getRefresh_token());\n+\n+\t\toidcTokenHelper.validateJWT(newTokenResponse.getId_token());\n+\n+\t\t// method under test\n+\t\tJWTWrapper oidcUserInfo = (JWTWrapper) openIDConnectManager.getUserInfo(newTokenResponse.getAccess_token(), OAUTH_ENDPOINT);\n+\n \t\toidcTokenHelper.validateJWT(oidcUserInfo.getJwt());\n-\t\t\n \t}\n-\t\n+\n+\t@Test\n+\tpublic void testRevokedRefreshToken() throws Exception {\n+\t\t// Verify the client\n+\t\toauthClient = oauthClientManager.updateOpenIDConnectClientVerifiedStatus(adminUserInfo, oauthClient.getClient_id(), oauthClient.getEtag(), true);\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(oauthClient.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(oauthClient.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setScope(OAuthScope.openid.name() + \" \" + OAuthScope.offline_access.name());\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsToRequest = new HashMap<>();\n+\t\tOIDCClaimsRequestDetails teamClaimRequestDetails = new OIDCClaimsRequestDetails();\n+\t\tteamClaimRequestDetails.setValues(Collections.singletonList(\"2\"));\n+\t\tclaimsToRequest.put(OIDCClaimName.team.name(), teamClaimRequestDetails);\n+\t\tOIDCClaimsRequest claimsRequest = new OIDCClaimsRequest();\n+\t\tclaimsRequest.setId_token(claimsToRequest);\n+\t\tclaimsRequest.setUserinfo(claimsToRequest);\n+\t\tauthorizationRequest.setClaims(claimsRequest);\n+\n+\t\t// tested in testAuthorizationCodeRoundTrip\n+\t\tOAuthAuthorizationResponse authResponse = openIDConnectManager.\n+\t\t\t\tauthorizeClient(userInfo, authorizationRequest);\n+\n+\t\t// tested in testAuthorizationCodeRoundTrip\n+\t\tOIDCTokenResponse tokenResponse =\n+\t\t\t\topenIDConnectManager.getTokenResponseWithAuthorizationCode(authResponse.getAccess_code(),\n+\t\t\t\t\t\toauthClient.getClient_id(), oauthClient.getRedirect_uris().get(0), OAUTH_ENDPOINT);\n+\n+\t\tOAuthTokenRevocationRequest revocationRequest = new OAuthTokenRevocationRequest();\n+\t\trevocationRequest.setToken(tokenResponse.getRefresh_token());\n+\t\trevocationRequest.setToken_type_hint(TokenTypeHint.refresh_token);\n+\n+\t\t// method under test\n+\t\topenIDConnectManager.revokeToken(revocationRequest);\n+\n+\t\t// Use the refresh token to get a new access token\n+\t\t// tested in testRefreshTokenRoundTrip\n+\t\tassertThrows(IllegalArgumentException.class, () ->\n+\t\t\t\topenIDConnectManager.getTokenResponseWithRefreshToken(tokenResponse.getRefresh_token(), oauthClient.getClient_id(), null, OAUTH_ENDPOINT));\n+\n+\t}\n+\n \t@Test\n \tpublic void testAuthorizationRequestWithReservedClientID() {\n \t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n \t\tauthorizationRequest.setClientId(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\n \n-\t\tassertThrows(IllegalArgumentException.class, ()->openIDConnectManager.authorizeClient(userInfo, authorizationRequest));\n+\t\tassertThrows(IllegalArgumentException.class, () -> openIDConnectManager.authorizeClient(userInfo, authorizationRequest));\n+\t}\n+\n+\t@Test\n+\tpublic void testRefreshTokenIdClaimInIdToken() {\n+\t\t/*\n+\t\t The refresh_token_id claim is used to add a refresh token ID to the access token.\n+\t\t The client can request this claim for the ID token, but nothing should happen.\n+\t\t */\n+\n+\t\t// Verify the client\n+\t\toauthClient = oauthClientManager.updateOpenIDConnectClientVerifiedStatus(adminUserInfo, oauthClient.getClient_id(), oauthClient.getEtag(), true);\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(oauthClient.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(oauthClient.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setScope(OAuthScope.openid.name() + \" \" + OAuthScope.offline_access.name());\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsToRequest = new HashMap<>();\n+\t\tclaimsToRequest.put(OIDCClaimName.email.name(), null);\n+\t\tclaimsToRequest.put(OIDCClaimName.refresh_token_id.name(), null); // !!\n+\t\tOIDCClaimsRequest claimsRequest = new OIDCClaimsRequest();\n+\t\tclaimsRequest.setId_token(claimsToRequest);\n+\t\tclaimsRequest.setUserinfo(claimsToRequest);\n+\t\tauthorizationRequest.setClaims(claimsRequest);\n+\n+\t\t// tested in testAuthorizationCodeRoundTrip\n+\t\tOAuthAuthorizationResponse authResponse = openIDConnectManager.\n+\t\t\t\tauthorizeClient(userInfo, authorizationRequest);\n+\n+\t\t// method under test\n+\t\tOIDCTokenResponse tokenResponse =\n+\t\t\t\topenIDConnectManager.getTokenResponseWithAuthorizationCode(authResponse.getAccess_code(),\n+\t\t\t\t\t\toauthClient.getClient_id(), oauthClient.getRedirect_uris().get(0), OAUTH_ENDPOINT);\n+\n+\t\t// Check the ID token\n+\t\toidcTokenHelper.validateJWT(tokenResponse.getId_token());\n+\t\tClaims idTokenClaims = oidcTokenHelper.parseJWT(tokenResponse.getId_token()).getBody();\n+\t\tassertTrue(idTokenClaims.containsKey(OIDCClaimName.email.name()));\n+\t\tassertFalse(idTokenClaims.containsKey(OIDCClaimName.refresh_token_id.name()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203cecc68e8a9b39e4daa4e4c67fec54c54e33b5"}, "originalPosition": 312}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTk4MjAzOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImplAutowiredTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzozOTowM1rOGlQN1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzozOTowM1rOGlQN1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNjE4MA==", "bodyText": "let's keep the test!", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441716180", "createdAt": "2020-06-17T17:39:03Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImplAutowiredTest.java", "diffHunk": "@@ -104,56 +118,245 @@ public void tearDown() throws Exception {\n \t\t}\n \t}\n \n+\tprivate static OIDCAuthorizationRequest createAuthorizationRequest(OAuthClient client) {\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(client.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(client.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setScope(OAuthScope.openid.name() + \" \" + OAuthScope.offline_access.name());\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsToRequest = new HashMap<>();\n+\t\tOIDCClaimsRequestDetails teamClaimRequestDetails = new OIDCClaimsRequestDetails();\n+\t\tteamClaimRequestDetails.setValues(Collections.singletonList(\"2\"));\n+\t\tclaimsToRequest.put(OIDCClaimName.team.name(), teamClaimRequestDetails);\n+\t\tclaimsToRequest.put(OIDCClaimName.refresh_token_id.name(), null);\n+\t\tOIDCClaimsRequest claimsRequest = new OIDCClaimsRequest();\n+\t\tclaimsRequest.setId_token(claimsToRequest);\n+\t\tclaimsRequest.setUserinfo(claimsToRequest);\n+\t\tauthorizationRequest.setClaims(claimsRequest);\n+\t\treturn authorizationRequest;\n+\t}\n+\n \t// the business logic is tested in detail in the unit tests.  This just does a basic authorization round-trip.\n \t@Test\n-\tpublic void testAuthorizationRoundTrip() throws Exception {\t\t\n+\tpublic void testAuthorizationCodeRoundTrip() throws Exception {\n \n \t\t// Verify the client\n \t\toauthClient = oauthClientManager.updateOpenIDConnectClientVerifiedStatus(adminUserInfo, oauthClient.getClient_id(), oauthClient.getEtag(), true);\n-\t\t\n-\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n-\t\tauthorizationRequest.setClientId(oauthClient.getClient_id());\n-\t\tauthorizationRequest.setRedirectUri(oauthClient.getRedirect_uris().get(0));\n-\t\tauthorizationRequest.setScope(OAuthScope.openid.name());\n-\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n-\t\tauthorizationRequest.setClaims(\"{\\\"id_token\\\":{\\\"team\\\":{\\\"values\\\":[\\\"2\\\"]}},\\\"userinfo\\\":{\\\"team\\\":{\\\"values\\\":[\\\"2\\\"]}}}\");\n-\t\t\t\t\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = createAuthorizationRequest(oauthClient);\n+\n \t\t// method under test\n-\t\tOIDCAuthorizationRequestDescription description = \n+\t\tOIDCAuthorizationRequestDescription description =\n \t\t\t\topenIDConnectManager.getAuthenticationRequestDescription(authorizationRequest);\n-\t\t\n+\n \t\tassertNotNull(description);\n-\t\t\n+\n \t\t// method under test\n \t\tOAuthAuthorizationResponse authResponse = openIDConnectManager.\n \t\t\t\tauthorizeClient(userInfo, authorizationRequest);\n-\t\t\n+\n \t\tassertNotNull(authResponse.getAccess_code());\n-\t\t\n+\n \t\t// method under test\n-\t\tOIDCTokenResponse tokenResponse = \n-\t\t\t\topenIDConnectManager.getAccessToken(authResponse.getAccess_code(), \n+\t\tOIDCTokenResponse tokenResponse =\n+\t\t\t\topenIDConnectManager.generateTokenResponseWithAuthorizationCode(authResponse.getAccess_code(),\n \t\t\t\t\t\toauthClient.getClient_id(), oauthClient.getRedirect_uris().get(0), OAUTH_ENDPOINT);\n-\t\t\n-\t\t\n+\n+\n \t\tassertNotNull(tokenResponse.getAccess_token());\n \t\tassertNotNull(tokenResponse.getId_token());\n-\t\t\n+\t\tassertNotNull(tokenResponse.getRefresh_token());\n+\n \t\toidcTokenHelper.validateJWT(tokenResponse.getId_token());\n-\t\t\n+\n \t\t// method under test\n-\t\tJWTWrapper oidcUserInfo = (JWTWrapper)openIDConnectManager.getUserInfo(tokenResponse.getAccess_token(), OAUTH_ENDPOINT);\n-\t\t\n+\t\tJWTWrapper oidcUserInfo = (JWTWrapper) openIDConnectManager.getUserInfo(tokenResponse.getAccess_token(), OAUTH_ENDPOINT);\n+\n \t\toidcTokenHelper.validateJWT(oidcUserInfo.getJwt());\n-\t\t\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testRefreshTokenRoundTrip() throws Exception {\n+\t\t// Verify the client\n+\t\toauthClient = oauthClientManager.updateOpenIDConnectClientVerifiedStatus(adminUserInfo, oauthClient.getClient_id(), oauthClient.getEtag(), true);\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = createAuthorizationRequest(oauthClient);\n+\n+\t\t// tested in testAuthorizationCodeRoundTrip\n+\t\tOAuthAuthorizationResponse authResponse = openIDConnectManager.\n+\t\t\t\tauthorizeClient(userInfo, authorizationRequest);\n+\n+\t\t// tested in testAuthorizationCodeRoundTrip\n+\t\tOIDCTokenResponse tokenResponse =\n+\t\t\t\topenIDConnectManager.generateTokenResponseWithAuthorizationCode(authResponse.getAccess_code(),\n+\t\t\t\t\t\toauthClient.getClient_id(), oauthClient.getRedirect_uris().get(0), OAUTH_ENDPOINT);\n+\n+\t\t// Use the refresh token to get a new access token\n+\t\t// method under test\n+\t\tOIDCTokenResponse newTokenResponse =\n+\t\t\t\topenIDConnectManager.generateTokenResponseWithRefreshToken(tokenResponse.getRefresh_token(), oauthClient.getClient_id(), null, OAUTH_ENDPOINT);\n+\n+\t\tassertNotNull(newTokenResponse.getAccess_token());\n+\t\tassertNotEquals(tokenResponse.getAccess_token(), newTokenResponse.getAccess_token());\n+\t\tassertNotNull(newTokenResponse.getId_token());\n+\t\tassertNotEquals(tokenResponse.getId_token(), newTokenResponse.getId_token());\n+\t\tassertNotNull(newTokenResponse.getRefresh_token());\n+\t\tassertNotEquals(tokenResponse.getRefresh_token(), newTokenResponse.getRefresh_token());\n+\n+\t\toidcTokenHelper.validateJWT(newTokenResponse.getId_token());\n+\n+\t\t// method under test\n+\t\tJWTWrapper oidcUserInfo = (JWTWrapper) openIDConnectManager.getUserInfo(newTokenResponse.getAccess_token(), OAUTH_ENDPOINT);\n+\n+\t\toidcTokenHelper.validateJWT(oidcUserInfo.getJwt());\n+\n+\t\t// Lastly, we requested the refresh_token_id claim, but we test that this claim doesn't not appear in the ID token or userinfo (because it doesn't make sense)\n+\t\tClaims idTokenClaims = oidcTokenHelper.parseJWT(tokenResponse.getId_token()).getBody();\n+\t\tassertFalse(idTokenClaims.containsKey(OIDCClaimName.refresh_token_id.name()));\n+\n+\n+\t\tClaims userInfoClaims = oidcTokenHelper.parseJWT(oidcUserInfo.getJwt()).getBody();\n+\t\tassertFalse(userInfoClaims.containsKey(OIDCClaimName.refresh_token_id.name()));\n+\n \t}\n-\t\n+\n+\t@Test\n+\tpublic void testRevokedRefreshToken() throws Exception {\n+\t\t// Verify the client\n+\t\toauthClient = oauthClientManager.updateOpenIDConnectClientVerifiedStatus(adminUserInfo, oauthClient.getClient_id(), oauthClient.getEtag(), true);\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = createAuthorizationRequest(oauthClient);\n+\n+\t\t// tested in testAuthorizationCodeRoundTrip\n+\t\tOAuthAuthorizationResponse authResponse = openIDConnectManager.\n+\t\t\t\tauthorizeClient(userInfo, authorizationRequest);\n+\n+\t\t// tested in testAuthorizationCodeRoundTrip\n+\t\tOIDCTokenResponse tokenResponse =\n+\t\t\t\topenIDConnectManager.generateTokenResponseWithAuthorizationCode(authResponse.getAccess_code(),\n+\t\t\t\t\t\toauthClient.getClient_id(), oauthClient.getRedirect_uris().get(0), OAUTH_ENDPOINT);\n+\n+\t\tOAuthTokenRevocationRequest revocationRequest = new OAuthTokenRevocationRequest();\n+\t\trevocationRequest.setToken(tokenResponse.getRefresh_token());\n+\t\trevocationRequest.setToken_type_hint(TokenTypeHint.refresh_token);\n+\n+\t\t// method under test\n+\t\topenIDConnectManager.revokeToken(oauthClient.getClient_id(), revocationRequest);\n+\n+\t\t// Use the refresh token to get a new access token\n+\t\t// tested in testRefreshTokenRoundTrip\n+\t\tassertThrows(IllegalArgumentException.class, () ->\n+\t\t\t\topenIDConnectManager.generateTokenResponseWithRefreshToken(tokenResponse.getRefresh_token(), oauthClient.getClient_id(), null, OAUTH_ENDPOINT));\n+\n+\t}\n+\n \t@Test\n \tpublic void testAuthorizationRequestWithReservedClientID() {\n \t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n \t\tauthorizationRequest.setClientId(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\n \n-\t\tassertThrows(IllegalArgumentException.class, ()->openIDConnectManager.authorizeClient(userInfo, authorizationRequest));\n+\t\tassertThrows(IllegalArgumentException.class, () -> openIDConnectManager.authorizeClient(userInfo, authorizationRequest));\n+\t}\n+\n+\t@Test\n+\tpublic void testRevokeAccessToken_invalidJwt() {\n+\t\tOAuthTokenRevocationRequest revocationRequest = new OAuthTokenRevocationRequest();\n+\t\trevocationRequest.setToken(\"not a JWT\");\n+\t\trevocationRequest.setToken_type_hint(TokenTypeHint.access_token);\n+\n+\t\tassertThrows(IllegalArgumentException.class, () -> openIDConnectManager.revokeToken(oauthClient.getClient_id(), revocationRequest));\n+\t}\n+\n+\t@Test\n+\tpublic void testGetTokenResponseWithRefreshTokenRollBackOnInvalidScopeRequest() {\n+\t\t/*\n+\t\t Using a refresh token should force the refresh token to rotate, so the old token no longer works.\n+\t\t One exception to this rule is if the client makes an invalid scope request, the refresh token rotation\n+\t\t should be rolled back.\n+\t\t */\n+\n+\t\t//  Verify the client\n+\t\toauthClient = oauthClientManager.updateOpenIDConnectClientVerifiedStatus(adminUserInfo, oauthClient.getClient_id(), oauthClient.getEtag(), true);\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(oauthClient.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(oauthClient.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setScope(OAuthScope.view.name() + \" \" + OAuthScope.offline_access.name());\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\n+\t\t// tested in testAuthorizationCodeRoundTrip\n+\t\tOAuthAuthorizationResponse authResponse = openIDConnectManager.\n+\t\t\t\tauthorizeClient(userInfo, authorizationRequest);\n+\n+\t\t// tested in testAuthorizationCodeRoundTrip\n+\t\tOIDCTokenResponse tokenResponse =\n+\t\t\t\topenIDConnectManager.generateTokenResponseWithAuthorizationCode(authResponse.getAccess_code(),\n+\t\t\t\t\t\toauthClient.getClient_id(), oauthClient.getRedirect_uris().get(0), OAUTH_ENDPOINT);\n+\n+\t\t// Try to use the refresh token to get a new access token, asking for a different scope than was originally granted\n+\t\t// method under test\n+\t\tassertThrows(IllegalArgumentException.class, () ->\n+\t\t\t\topenIDConnectManager.generateTokenResponseWithRefreshToken(tokenResponse.getRefresh_token(), oauthClient.getClient_id(), OAuthScope.download.name(), OAUTH_ENDPOINT)\n+\t\t);\n+\n+\t\t// Calling again with valid scope will only work if the refresh token was not rotated\n+\t\tOIDCTokenResponse newTokenResponse =\n+\t\t\t\topenIDConnectManager.generateTokenResponseWithRefreshToken(tokenResponse.getRefresh_token(), oauthClient.getClient_id(), \"\", OAUTH_ENDPOINT);\n+\n+\t\tassertNotNull(newTokenResponse);\n \t}\n \n+\n+\t@TemporaryCode(author = \"nickgrosenbacher\", comment = \"Ensures schema-to-pojo can parse strings that map to OIDCClaimsRequest\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07c8ea4fccb7981d55e2307d9bff23565fb1c8d8"}, "originalPosition": 324}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA1NTY5OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImplUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1OToxNVrOGlQ9WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1OToxNVrOGlQ9WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyODM0NQ==", "bodyText": "please remove claims as a request parameter to OpenIDController.getTokenResponse after double checking that the spec' does not require it.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441728345", "createdAt": "2020-06-17T17:59:15Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImplUnitTest.java", "diffHunk": "@@ -808,18 +898,217 @@ public void testGetAccessToken_noOpenIdScope() {\n \t}\n \t\n \t@Test\n-\tpublic void testGetAccessToken_clientUnverified() {\n+\tpublic void testGetTokenResponseWithAuthorizationCode_clientUnverified() {\n \t\tString code = \"Some code\";\n \t\t\n \t\twhen(mockOauthClientDao.isOauthClientVerified(OAUTH_CLIENT_ID)).thenReturn(false);\n \t\t\n \t\tassertThrows(OAuthClientNotVerifiedException.class, () -> {\n \t\t\t// method under test\n-\t\t\topenIDConnectManagerImpl.getAccessToken(code, OAUTH_CLIENT_ID, REDIRCT_URIS.get(0), OAUTH_ENDPOINT);\n+\t\t\topenIDConnectManagerImpl.generateTokenResponseWithAuthorizationCode(code, OAUTH_CLIENT_ID, REDIRCT_URIS.get(0), OAUTH_ENDPOINT);\n \t\t});\n \t\t\n \t\tverify(mockOauthClientDao).isOauthClientVerified(OAUTH_CLIENT_ID);\n-\t\t\n+\t}\n+\n+\tprivate OAuthRefreshTokenAndMetadata createRotatedToken() {\n+\t\tOAuthRefreshTokenAndMetadata refreshToken = new OAuthRefreshTokenAndMetadata();\n+\t\trefreshToken.setRefreshToken(\"new refresh token\");\n+\t\trefreshToken.setMetadata(new OAuthRefreshTokenInformation());\n+\t\trefreshToken.getMetadata().setTokenId(\"1234567\");\n+\t\trefreshToken.getMetadata().setClientId(OAUTH_CLIENT_ID);\n+\t\trefreshToken.getMetadata().setPrincipalId(USER_ID);\n+\t\trefreshToken.getMetadata().setScopes(Arrays.asList(OAuthScope.openid, OAuthScope.offline_access));\n+\t\tOIDCClaimsRequest grantedClaims = new OIDCClaimsRequest();\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsMap = new HashMap<>();\n+\t\tfor (OIDCClaimName claim : mockClaimProviders.keySet()) {\n+\t\t\tclaimsMap.put(claim.name(), null);\n+\t\t}\n+\t\tgrantedClaims.setUserinfo(claimsMap);\n+\t\tgrantedClaims.setId_token(claimsMap);\n+\t\trefreshToken.getMetadata().setClaims(grantedClaims);\n+\t\treturn refreshToken;\n+\t}\n+\n+\t@Test\n+\tpublic void testGetTokenResponseWithRefreshToken_clientUnverified() {\n+\t\tString refreshToken = \"some-refresh-token\";\n+\n+\t\twhen(mockOauthClientDao.isOauthClientVerified(OAUTH_CLIENT_ID)).thenReturn(false);\n+\n+\t\tassertThrows(OAuthClientNotVerifiedException.class, () -> {\n+\t\t\t// method under test\n+\t\t\topenIDConnectManagerImpl.generateTokenResponseWithRefreshToken(refreshToken, OAUTH_CLIENT_ID, null, OAUTH_ENDPOINT);\n+\t\t});\n+\n+\t\tverify(mockOauthClientDao).isOauthClientVerified(OAUTH_CLIENT_ID);\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testGetTokenResponseWithRefreshToken() {\n+\t\twhen(mockOauthClientDao.isOauthClientVerified(OAUTH_CLIENT_ID)).thenReturn(true);\n+\t\twhen(mockOauthClientDao.getSectorIdentifierSecretForClient(OAUTH_CLIENT_ID)).thenReturn(clientSpecificEncodingSecret);\n+\t\twhen(mockClock.currentTimeMillis()).thenReturn(System.currentTimeMillis());\n+\t\twhen(mockNotificationEmailDao.getNotificationEmailForPrincipal(USER_ID_LONG)).thenReturn(EMAIL);\n+\t\twhen(mockUserProfileManager.getCurrentVerificationSubmission(USER_ID_LONG)).thenReturn(verificationSubmission);\n+\n+\t\t// This will be the new token and metadata\n+\t\tOAuthRefreshTokenAndMetadata expectedRefreshTokenAndId = createRotatedToken();\n+\t\tDate initalAuthzOn = new Date(System.currentTimeMillis() - 1000 * 60 * 60 * 24);\n+\t\texpectedRefreshTokenAndId.getMetadata().setAuthorizedOn(initalAuthzOn);\n+\n+\t\tString refreshToken = \"pre-generated refresh token\";\n+\t\twhen(oauthRefreshTokenManager.rotateRefreshToken(refreshToken)).thenReturn(expectedRefreshTokenAndId);\n+\n+\n+\t\tString expectedIdToken = \"ID-TOKEN\";\n+\t\twhen(oidcTokenHelper.createOIDCIdToken(eq(OAUTH_ENDPOINT), eq(ppid), eq(OAUTH_CLIENT_ID), anyLong(),\n+\t\t\t\tisNull(), eq(initalAuthzOn), anyString(), userInfoCaptor.capture())).thenReturn(expectedIdToken);\n+\n+\t\tString expectedAccessToken = \"ACCESS-TOKEN\";\n+\t\twhen(oidcTokenHelper.createOIDCaccessToken(eq(OAUTH_ENDPOINT), eq(ppid), eq(OAUTH_CLIENT_ID), anyLong(),\n+\t\t\t\teq(initalAuthzOn), eq(expectedRefreshTokenAndId.getMetadata().getTokenId()), anyString(), scopesCaptor.capture(), claimsCaptor.capture())).thenReturn(expectedAccessToken);\n+\n+\t\tString scope = \"openid offline_access\";\n+\t\t// elsewhere we test that we correctly build up the requested user-info\n+\t\t// here we just spot check a few fields to make sure everything's wired up\n+\n+\t\t// method under test\n+\t\tOIDCTokenResponse tokenResponse = openIDConnectManagerImpl.generateTokenResponseWithRefreshToken(refreshToken, OAUTH_CLIENT_ID, scope, OAUTH_ENDPOINT);\n+\n+\t\t// verifying the mock token indirectly verifies all param's were correctly passed to oidcTokenHelper.createOIDCIdToken()\n+\t\tassertEquals(expectedIdToken, tokenResponse.getId_token());\n+\n+\t\t// just spot check a few fields to make sure everything's wired up\n+\t\tMap<OIDCClaimName, Object> userInfo = userInfoCaptor.getValue();\n+\t\tassertEquals(EMAIL, userInfo.get(OIDCClaimName.email));\n+\t\tassertTrue((Boolean)userInfo.get(OIDCClaimName.email_verified));\n+\t\tassertEquals(USER_ID, userInfo.get(OIDCClaimName.userid));\n+\n+\t\tassertEquals(expectedAccessToken, tokenResponse.getAccess_token());\n+\t\tassertEquals(Arrays.asList(OAuthScope.openid, OAuthScope.offline_access), scopesCaptor.getValue());\n+\t\tfor (OIDCClaimName claimName : mockClaimProviders.keySet()) {\n+\t\t\tassertTrue(claimsCaptor.getValue().containsKey(claimName));\n+\t\t\tassertNull(claimsCaptor.getValue().get(claimName));\n+\t\t}\n+\n+\t\tassertEquals(expectedRefreshTokenAndId.getRefreshToken(), tokenResponse.getRefresh_token());\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testGetTokenResponseWithRefreshToken_invalidOrExpiredRefreshToken() {\n+\t\twhen(mockOauthClientDao.isOauthClientVerified(OAUTH_CLIENT_ID)).thenReturn(true);\n+\n+\t\t// Just check that the IllegalArgumentException passes through\n+\t\tString refreshToken = \"some-refresh-token\";\n+\t\twhen(oauthRefreshTokenManager.rotateRefreshToken(refreshToken)).thenThrow(new IllegalArgumentException());\n+\t\t// Call under test\n+\t\tassertThrows(IllegalArgumentException.class, () ->\n+\t\t\t\topenIDConnectManagerImpl.generateTokenResponseWithRefreshToken(refreshToken, OAUTH_CLIENT_ID, \"offline_access\", OAUTH_ENDPOINT));\n+\t}\n+\n+\t@Test\n+\tpublic void testGetTokenResponseWithRefreshToken_exceedingScope() {\n+\t\twhen(mockOauthClientDao.isOauthClientVerified(OAUTH_CLIENT_ID)).thenReturn(true);\n+\n+\t\t// This will be the new token and metadata\n+\t\tOAuthRefreshTokenAndMetadata expectedRefreshTokenAndId = createRotatedToken();\n+\n+\t\tString refreshToken = \"pre-generated refresh token\";\n+\t\twhen(oauthRefreshTokenManager.rotateRefreshToken(refreshToken)).thenReturn(expectedRefreshTokenAndId);\n+\n+\t\tString scope = \"openid offline_access authorize\"; // Authorize was not previously granted\n+\n+\t\t// method under test\n+\t\tassertThrows(IllegalArgumentException.class, () -> openIDConnectManagerImpl.generateTokenResponseWithRefreshToken(refreshToken, OAUTH_CLIENT_ID, scope, OAUTH_ENDPOINT));\n+\t}\n+\n+\t@Test\n+\tpublic void testGetTokenResponseWithRefreshToken_noOpenIdScope() {\n+\t\twhen(mockOauthClientDao.isOauthClientVerified(OAUTH_CLIENT_ID)).thenReturn(true);\n+\t\twhen(mockOauthClientDao.getSectorIdentifierSecretForClient(OAUTH_CLIENT_ID)).thenReturn(clientSpecificEncodingSecret);\n+\t\twhen(mockClock.currentTimeMillis()).thenReturn(System.currentTimeMillis());\n+\n+\t\t// This will be the new token and metadata\n+\t\tOAuthRefreshTokenAndMetadata expectedRefreshTokenAndId = createRotatedToken();\n+\t\tDate initalAuthzOn = new Date(System.currentTimeMillis() - 1000 * 60 * 60 * 24);\n+\t\texpectedRefreshTokenAndId.getMetadata().setAuthorizedOn(initalAuthzOn);\n+\n+\n+\t\tString refreshToken = \"pre-generated refresh token\";\n+\t\twhen(oauthRefreshTokenManager.rotateRefreshToken(refreshToken)).thenReturn(expectedRefreshTokenAndId);\n+\n+\t\tString expectedAccessToken = \"ACCESS-TOKEN\";\n+\t\twhen(oidcTokenHelper.createOIDCaccessToken(eq(OAUTH_ENDPOINT), eq(ppid), eq(OAUTH_CLIENT_ID), anyLong(),\n+\t\t\t\teq(initalAuthzOn), eq(expectedRefreshTokenAndId.getMetadata().getTokenId()), anyString(), scopesCaptor.capture(), claimsCaptor.capture())).thenReturn(expectedAccessToken);\n+\n+\t\tString scope = \"offline_access\"; // Do not request openid!\n+\t\t// elsewhere we test that we correctly build up the requested user-info\n+\t\t// here we just spot check a few fields to make sure everything's wired up\n+\n+\t\t// method under test\n+\t\tOIDCTokenResponse tokenResponse = openIDConnectManagerImpl.generateTokenResponseWithRefreshToken(refreshToken, OAUTH_CLIENT_ID, scope, OAUTH_ENDPOINT);\n+\n+\t\t// verifying the mock token indirectly verifies all param's were correctly passed to oidcTokenHelper.createOIDCIdToken()\n+\t\tassertNull(tokenResponse.getId_token());\n+\n+\t\tassertEquals(expectedAccessToken, tokenResponse.getAccess_token());\n+\t\tassertEquals(Collections.singletonList(OAuthScope.offline_access), scopesCaptor.getValue());\n+\t\tassertEquals(expectedRefreshTokenAndId.getRefreshToken(), tokenResponse.getRefresh_token());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetTokenResponseWithRefreshToken_nullOrEmptyScope() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07c8ea4fccb7981d55e2307d9bff23565fb1c8d8"}, "originalPosition": 520}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjQ3Nzk1OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTo1ODowMVrOGlVPmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTo1ODowMVrOGlVPmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5ODU1NA==", "bodyText": "clients->client", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441798554", "createdAt": "2020-06-17T19:58:01Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "diffHunk": "@@ -356,4 +364,146 @@ Object getUserInfoPOST(\n \t\treturn serviceProvider.getOpenIDConnectService().getUserInfo(accessToken, getEndpoint(uriComponentsBuilder));\n \t}\n \n+\t/**\n+\t * Get a paginated list of the OAuth 2 clients that currently have active refresh tokens that grant access to the user's\n+\t * Synapse identity and/or resources. OAuth 2.0 clients that have no active refresh tokens will not appear in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t * @throws OAuthClientNotVerifiedException if the client is not verified\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENTS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthClientAuthorizationHistoryList getGrantedClientsForUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getClientAuthorizationHistory(userId, nextPageToken);\n+\t}\n+\n+\t/**\n+\t * Get a paginated list of metadata about refresh tokens granted to a particular OAuth 2 clients on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29a5d52978a53027b8426a4134519cbfd47bf36"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjQ4NDY4OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowMDoyMVrOGlVT7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowMDoyMVrOGlVT7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5OTY2MQ==", "bodyText": "Users->Clients", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441799661", "createdAt": "2020-06-17T20:00:21Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "diffHunk": "@@ -356,4 +364,146 @@ Object getUserInfoPOST(\n \t\treturn serviceProvider.getOpenIDConnectService().getUserInfo(accessToken, getEndpoint(uriComponentsBuilder));\n \t}\n \n+\t/**\n+\t * Get a paginated list of the OAuth 2 clients that currently have active refresh tokens that grant access to the user's\n+\t * Synapse identity and/or resources. OAuth 2.0 clients that have no active refresh tokens will not appear in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t * @throws OAuthClientNotVerifiedException if the client is not verified\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENTS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthClientAuthorizationHistoryList getGrantedClientsForUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getClientAuthorizationHistory(userId, nextPageToken);\n+\t}\n+\n+\t/**\n+\t * Get a paginated list of metadata about refresh tokens granted to a particular OAuth 2 clients on\n+\t * behalf of the requesting user. The token itself may not be retrieved.\n+\t * Refresh tokens that have been revoked will not be included in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENT_TOKENS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformationList getGrantedTokenMetadataForUserClientPair(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String clientId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getTokenMetadataForGrantedClient(userId, clientId, nextPageToken);\n+\t}\n+\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token as an authenticated Synapse user.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29a5d52978a53027b8426a4134519cbfd47bf36"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjQ4NzcwOnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowMToxNlrOGlVV4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowMToxNlrOGlVV4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwMDE2Mg==", "bodyText": "@RequiredScope({})", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441800162", "createdAt": "2020-06-17T20:01:16Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "diffHunk": "@@ -356,4 +364,146 @@ Object getUserInfoPOST(\n \t\treturn serviceProvider.getOpenIDConnectService().getUserInfo(accessToken, getEndpoint(uriComponentsBuilder));\n \t}\n \n+\t/**\n+\t * Get a paginated list of the OAuth 2 clients that currently have active refresh tokens that grant access to the user's\n+\t * Synapse identity and/or resources. OAuth 2.0 clients that have no active refresh tokens will not appear in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t * @throws OAuthClientNotVerifiedException if the client is not verified\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENTS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthClientAuthorizationHistoryList getGrantedClientsForUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getClientAuthorizationHistory(userId, nextPageToken);\n+\t}\n+\n+\t/**\n+\t * Get a paginated list of metadata about refresh tokens granted to a particular OAuth 2 clients on\n+\t * behalf of the requesting user. The token itself may not be retrieved.\n+\t * Refresh tokens that have been revoked will not be included in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENT_TOKENS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformationList getGrantedTokenMetadataForUserClientPair(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String clientId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getTokenMetadataForGrantedClient(userId, clientId, nextPageToken);\n+\t}\n+\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token as an authenticated Synapse user.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use\n+\t * <a href=\"${GET.oauth2.token.tokenId.metadata}\">GET /oauth2/token/{tokenId}/metadata</a>\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_METADATA, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation getRefreshTokenMetadataAsUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getRefreshTokenMetadataAsUser(userId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token. The request should be made as an OAuth 2.0 client using\n+\t * basic authentication.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use\n+\t * <a href=\"${GET.oauth2.audit.tokens.tokenId.metadata}\">GET /oauth2/audit/tokens/{tokenId}/metadata</a>\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29a5d52978a53027b8426a4134519cbfd47bf36"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjQ5NjM0OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowNDoxNVrOGlVbqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowNDoxNVrOGlVbqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwMTY0MA==", "bodyText": "@RequiredScope({authorize})", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441801640", "createdAt": "2020-06-17T20:04:15Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "diffHunk": "@@ -356,4 +364,146 @@ Object getUserInfoPOST(\n \t\treturn serviceProvider.getOpenIDConnectService().getUserInfo(accessToken, getEndpoint(uriComponentsBuilder));\n \t}\n \n+\t/**\n+\t * Get a paginated list of the OAuth 2 clients that currently have active refresh tokens that grant access to the user's\n+\t * Synapse identity and/or resources. OAuth 2.0 clients that have no active refresh tokens will not appear in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t * @throws OAuthClientNotVerifiedException if the client is not verified\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENTS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthClientAuthorizationHistoryList getGrantedClientsForUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getClientAuthorizationHistory(userId, nextPageToken);\n+\t}\n+\n+\t/**\n+\t * Get a paginated list of metadata about refresh tokens granted to a particular OAuth 2 clients on\n+\t * behalf of the requesting user. The token itself may not be retrieved.\n+\t * Refresh tokens that have been revoked will not be included in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENT_TOKENS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformationList getGrantedTokenMetadataForUserClientPair(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String clientId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getTokenMetadataForGrantedClient(userId, clientId, nextPageToken);\n+\t}\n+\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token as an authenticated Synapse user.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use\n+\t * <a href=\"${GET.oauth2.token.tokenId.metadata}\">GET /oauth2/token/{tokenId}/metadata</a>\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_METADATA, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation getRefreshTokenMetadataAsUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getRefreshTokenMetadataAsUser(userId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token. The request should be made as an OAuth 2.0 client using\n+\t * basic authentication.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use\n+\t * <a href=\"${GET.oauth2.audit.tokens.tokenId.metadata}\">GET /oauth2/audit/tokens/{tokenId}/metadata</a>\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_TOKEN_ID_METADATA, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation getRefreshTokenMetadataAsClient(\n+\t\t\t@RequestHeader(value = AuthorizationConstants.OAUTH_VERIFIED_CLIENT_ID_HEADER) String verifiedClientId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getRefreshTokenMetadataAsClient(verifiedClientId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Update the metadata for a refresh token. At this time, the only field that a user may set is the 'name' field.\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view, modify})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_METADATA, method = RequestMethod.PUT)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation updateRefreshTokenMetadata(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId,\n+\t\t\t@RequestBody OAuthRefreshTokenInformation metadata) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().updateRefreshTokenMetadata(userId, tokenId, metadata);\n+\t}\n+\n+\t/**\n+\t * Revoke all refresh token and their related access tokens associated with a particular client and the requesting user.\n+\t * Note that access tokens that are not associated with refresh tokens cannot be revoked.\n+\t * Users that want to revoke one refresh token should use <a href=\"${POST.oauth2.audit.tokens.tokenId.revoke}\">POST /oauth2/audit/tokens/{tokenId}/revoke</a>.\n+\t *\n+\t * Additionally, Access tokens that are not associated with a refresh token cannot be revoked.\n+\t *\n+\t * OAuth 2.0 clients wishing to revoke a refresh token should use <a href=\"${POST.oauth2.revoke}\">POST /oauth2/revoke</a>\n+\t */\n+\t@RequiredScope({view, modify, authorize})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29a5d52978a53027b8426a4134519cbfd47bf36"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjUwMDQ5OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowNTozNlrOGlVeLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowNTozNlrOGlVeLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwMjI4NQ==", "bodyText": "HttpStatus.NO_CONTENT", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441802285", "createdAt": "2020-06-17T20:05:36Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "diffHunk": "@@ -356,4 +364,146 @@ Object getUserInfoPOST(\n \t\treturn serviceProvider.getOpenIDConnectService().getUserInfo(accessToken, getEndpoint(uriComponentsBuilder));\n \t}\n \n+\t/**\n+\t * Get a paginated list of the OAuth 2 clients that currently have active refresh tokens that grant access to the user's\n+\t * Synapse identity and/or resources. OAuth 2.0 clients that have no active refresh tokens will not appear in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t * @throws OAuthClientNotVerifiedException if the client is not verified\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENTS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthClientAuthorizationHistoryList getGrantedClientsForUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getClientAuthorizationHistory(userId, nextPageToken);\n+\t}\n+\n+\t/**\n+\t * Get a paginated list of metadata about refresh tokens granted to a particular OAuth 2 clients on\n+\t * behalf of the requesting user. The token itself may not be retrieved.\n+\t * Refresh tokens that have been revoked will not be included in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENT_TOKENS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformationList getGrantedTokenMetadataForUserClientPair(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String clientId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getTokenMetadataForGrantedClient(userId, clientId, nextPageToken);\n+\t}\n+\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token as an authenticated Synapse user.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use\n+\t * <a href=\"${GET.oauth2.token.tokenId.metadata}\">GET /oauth2/token/{tokenId}/metadata</a>\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_METADATA, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation getRefreshTokenMetadataAsUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getRefreshTokenMetadataAsUser(userId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token. The request should be made as an OAuth 2.0 client using\n+\t * basic authentication.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use\n+\t * <a href=\"${GET.oauth2.audit.tokens.tokenId.metadata}\">GET /oauth2/audit/tokens/{tokenId}/metadata</a>\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_TOKEN_ID_METADATA, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation getRefreshTokenMetadataAsClient(\n+\t\t\t@RequestHeader(value = AuthorizationConstants.OAUTH_VERIFIED_CLIENT_ID_HEADER) String verifiedClientId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getRefreshTokenMetadataAsClient(verifiedClientId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Update the metadata for a refresh token. At this time, the only field that a user may set is the 'name' field.\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view, modify})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_METADATA, method = RequestMethod.PUT)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation updateRefreshTokenMetadata(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId,\n+\t\t\t@RequestBody OAuthRefreshTokenInformation metadata) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().updateRefreshTokenMetadata(userId, tokenId, metadata);\n+\t}\n+\n+\t/**\n+\t * Revoke all refresh token and their related access tokens associated with a particular client and the requesting user.\n+\t * Note that access tokens that are not associated with refresh tokens cannot be revoked.\n+\t * Users that want to revoke one refresh token should use <a href=\"${POST.oauth2.audit.tokens.tokenId.revoke}\">POST /oauth2/audit/tokens/{tokenId}/revoke</a>.\n+\t *\n+\t * Additionally, Access tokens that are not associated with a refresh token cannot be revoked.\n+\t *\n+\t * OAuth 2.0 clients wishing to revoke a refresh token should use <a href=\"${POST.oauth2.revoke}\">POST /oauth2/revoke</a>\n+\t */\n+\t@RequiredScope({view, modify, authorize})\n+\t@ResponseStatus(HttpStatus.OK)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29a5d52978a53027b8426a4134519cbfd47bf36"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjUxMDEyOnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowODo1MVrOGlVkVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowODo1MVrOGlVkVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwMzg2Mw==", "bodyText": "@RequiredScope({authorize})\nHttpStatus.NO_CONTENT", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441803863", "createdAt": "2020-06-17T20:08:51Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "diffHunk": "@@ -356,4 +364,146 @@ Object getUserInfoPOST(\n \t\treturn serviceProvider.getOpenIDConnectService().getUserInfo(accessToken, getEndpoint(uriComponentsBuilder));\n \t}\n \n+\t/**\n+\t * Get a paginated list of the OAuth 2 clients that currently have active refresh tokens that grant access to the user's\n+\t * Synapse identity and/or resources. OAuth 2.0 clients that have no active refresh tokens will not appear in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t * @throws OAuthClientNotVerifiedException if the client is not verified\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENTS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthClientAuthorizationHistoryList getGrantedClientsForUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getClientAuthorizationHistory(userId, nextPageToken);\n+\t}\n+\n+\t/**\n+\t * Get a paginated list of metadata about refresh tokens granted to a particular OAuth 2 clients on\n+\t * behalf of the requesting user. The token itself may not be retrieved.\n+\t * Refresh tokens that have been revoked will not be included in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENT_TOKENS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformationList getGrantedTokenMetadataForUserClientPair(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String clientId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getTokenMetadataForGrantedClient(userId, clientId, nextPageToken);\n+\t}\n+\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token as an authenticated Synapse user.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use\n+\t * <a href=\"${GET.oauth2.token.tokenId.metadata}\">GET /oauth2/token/{tokenId}/metadata</a>\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_METADATA, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation getRefreshTokenMetadataAsUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getRefreshTokenMetadataAsUser(userId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token. The request should be made as an OAuth 2.0 client using\n+\t * basic authentication.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use\n+\t * <a href=\"${GET.oauth2.audit.tokens.tokenId.metadata}\">GET /oauth2/audit/tokens/{tokenId}/metadata</a>\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_TOKEN_ID_METADATA, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation getRefreshTokenMetadataAsClient(\n+\t\t\t@RequestHeader(value = AuthorizationConstants.OAUTH_VERIFIED_CLIENT_ID_HEADER) String verifiedClientId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getRefreshTokenMetadataAsClient(verifiedClientId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Update the metadata for a refresh token. At this time, the only field that a user may set is the 'name' field.\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view, modify})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_METADATA, method = RequestMethod.PUT)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation updateRefreshTokenMetadata(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId,\n+\t\t\t@RequestBody OAuthRefreshTokenInformation metadata) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().updateRefreshTokenMetadata(userId, tokenId, metadata);\n+\t}\n+\n+\t/**\n+\t * Revoke all refresh token and their related access tokens associated with a particular client and the requesting user.\n+\t * Note that access tokens that are not associated with refresh tokens cannot be revoked.\n+\t * Users that want to revoke one refresh token should use <a href=\"${POST.oauth2.audit.tokens.tokenId.revoke}\">POST /oauth2/audit/tokens/{tokenId}/revoke</a>.\n+\t *\n+\t * Additionally, Access tokens that are not associated with a refresh token cannot be revoked.\n+\t *\n+\t * OAuth 2.0 clients wishing to revoke a refresh token should use <a href=\"${POST.oauth2.revoke}\">POST /oauth2/revoke</a>\n+\t */\n+\t@RequiredScope({view, modify, authorize})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENT_REVOKE, method = RequestMethod.POST)\n+\tpublic void revokeRefreshTokensForUserClientPair(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String clientId) throws NotFoundException {\n+\t\tserviceProvider.getOpenIDConnectService().revokeTokensForUserClientPair(userId, clientId);\n+\t}\n+\n+\t/**\n+\t * Revoke a particular refresh token and all of its related access tokens using its unique ID. The caller must be the the user/resource owner associated with the refresh token.\n+\t * Note that a client may be in possession of more than one refresh token, so users wishing to revoke all access should use\n+\t * <a href=\"${POST.oauth2.audit.grantedClients.clientId.revoke}\">POST /oauth2/audit/grantedClients/{clientId}/revoke</a>.\n+\t *\n+\t * Additionally, Access tokens that are not associated with a refresh token cannot be revoked.\n+\t *\n+\t * OAuth 2.0 clients wishing to revoke a refresh token should use <a href=\"${POST.oauth2.revoke}\">POST /oauth2/revoke</a>\n+\t */\n+\t@RequiredScope({view, modify, authorize})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29a5d52978a53027b8426a4134519cbfd47bf36"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjUxMjgwOnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowOTo0NlrOGlVmBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDowOTo0NlrOGlVmBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNDI5NA==", "bodyText": "The caller must be the client for which the token was generated.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441804294", "createdAt": "2020-06-17T20:09:46Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "diffHunk": "@@ -356,4 +364,146 @@ Object getUserInfoPOST(\n \t\treturn serviceProvider.getOpenIDConnectService().getUserInfo(accessToken, getEndpoint(uriComponentsBuilder));\n \t}\n \n+\t/**\n+\t * Get a paginated list of the OAuth 2 clients that currently have active refresh tokens that grant access to the user's\n+\t * Synapse identity and/or resources. OAuth 2.0 clients that have no active refresh tokens will not appear in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t * @throws OAuthClientNotVerifiedException if the client is not verified\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENTS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthClientAuthorizationHistoryList getGrantedClientsForUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getClientAuthorizationHistory(userId, nextPageToken);\n+\t}\n+\n+\t/**\n+\t * Get a paginated list of metadata about refresh tokens granted to a particular OAuth 2 clients on\n+\t * behalf of the requesting user. The token itself may not be retrieved.\n+\t * Refresh tokens that have been revoked will not be included in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENT_TOKENS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformationList getGrantedTokenMetadataForUserClientPair(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String clientId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getTokenMetadataForGrantedClient(userId, clientId, nextPageToken);\n+\t}\n+\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token as an authenticated Synapse user.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use\n+\t * <a href=\"${GET.oauth2.token.tokenId.metadata}\">GET /oauth2/token/{tokenId}/metadata</a>\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_METADATA, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation getRefreshTokenMetadataAsUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getRefreshTokenMetadataAsUser(userId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token. The request should be made as an OAuth 2.0 client using\n+\t * basic authentication.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use\n+\t * <a href=\"${GET.oauth2.audit.tokens.tokenId.metadata}\">GET /oauth2/audit/tokens/{tokenId}/metadata</a>\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_TOKEN_ID_METADATA, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation getRefreshTokenMetadataAsClient(\n+\t\t\t@RequestHeader(value = AuthorizationConstants.OAUTH_VERIFIED_CLIENT_ID_HEADER) String verifiedClientId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getRefreshTokenMetadataAsClient(verifiedClientId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Update the metadata for a refresh token. At this time, the only field that a user may set is the 'name' field.\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view, modify})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_METADATA, method = RequestMethod.PUT)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation updateRefreshTokenMetadata(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId,\n+\t\t\t@RequestBody OAuthRefreshTokenInformation metadata) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().updateRefreshTokenMetadata(userId, tokenId, metadata);\n+\t}\n+\n+\t/**\n+\t * Revoke all refresh token and their related access tokens associated with a particular client and the requesting user.\n+\t * Note that access tokens that are not associated with refresh tokens cannot be revoked.\n+\t * Users that want to revoke one refresh token should use <a href=\"${POST.oauth2.audit.tokens.tokenId.revoke}\">POST /oauth2/audit/tokens/{tokenId}/revoke</a>.\n+\t *\n+\t * Additionally, Access tokens that are not associated with a refresh token cannot be revoked.\n+\t *\n+\t * OAuth 2.0 clients wishing to revoke a refresh token should use <a href=\"${POST.oauth2.revoke}\">POST /oauth2/revoke</a>\n+\t */\n+\t@RequiredScope({view, modify, authorize})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENT_REVOKE, method = RequestMethod.POST)\n+\tpublic void revokeRefreshTokensForUserClientPair(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String clientId) throws NotFoundException {\n+\t\tserviceProvider.getOpenIDConnectService().revokeTokensForUserClientPair(userId, clientId);\n+\t}\n+\n+\t/**\n+\t * Revoke a particular refresh token and all of its related access tokens using its unique ID. The caller must be the the user/resource owner associated with the refresh token.\n+\t * Note that a client may be in possession of more than one refresh token, so users wishing to revoke all access should use\n+\t * <a href=\"${POST.oauth2.audit.grantedClients.clientId.revoke}\">POST /oauth2/audit/grantedClients/{clientId}/revoke</a>.\n+\t *\n+\t * Additionally, Access tokens that are not associated with a refresh token cannot be revoked.\n+\t *\n+\t * OAuth 2.0 clients wishing to revoke a refresh token should use <a href=\"${POST.oauth2.revoke}\">POST /oauth2/revoke</a>\n+\t */\n+\t@RequiredScope({view, modify, authorize})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_REVOKE, method = RequestMethod.POST)\n+\tpublic void revokeRefreshToken(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\tserviceProvider.getOpenIDConnectService().revokeRefreshTokenAsUser(userId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Revoke a particular refresh token using the token itself, or an associated access token. The caller must be the the user/resource owner associated with the refresh token.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29a5d52978a53027b8426a4134519cbfd47bf36"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjUxNTE4OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxMDozMFrOGlVnfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxMDozMFrOGlVnfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNDY3MQ==", "bodyText": "remove ll 497-8\nreturn NO_CONTENT", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441804671", "createdAt": "2020-06-17T20:10:30Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "diffHunk": "@@ -356,4 +364,146 @@ Object getUserInfoPOST(\n \t\treturn serviceProvider.getOpenIDConnectService().getUserInfo(accessToken, getEndpoint(uriComponentsBuilder));\n \t}\n \n+\t/**\n+\t * Get a paginated list of the OAuth 2 clients that currently have active refresh tokens that grant access to the user's\n+\t * Synapse identity and/or resources. OAuth 2.0 clients that have no active refresh tokens will not appear in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t * @throws OAuthClientNotVerifiedException if the client is not verified\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENTS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthClientAuthorizationHistoryList getGrantedClientsForUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getClientAuthorizationHistory(userId, nextPageToken);\n+\t}\n+\n+\t/**\n+\t * Get a paginated list of metadata about refresh tokens granted to a particular OAuth 2 clients on\n+\t * behalf of the requesting user. The token itself may not be retrieved.\n+\t * Refresh tokens that have been revoked will not be included in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENT_TOKENS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformationList getGrantedTokenMetadataForUserClientPair(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String clientId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getTokenMetadataForGrantedClient(userId, clientId, nextPageToken);\n+\t}\n+\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token as an authenticated Synapse user.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use\n+\t * <a href=\"${GET.oauth2.token.tokenId.metadata}\">GET /oauth2/token/{tokenId}/metadata</a>\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_METADATA, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation getRefreshTokenMetadataAsUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getRefreshTokenMetadataAsUser(userId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token. The request should be made as an OAuth 2.0 client using\n+\t * basic authentication.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use\n+\t * <a href=\"${GET.oauth2.audit.tokens.tokenId.metadata}\">GET /oauth2/audit/tokens/{tokenId}/metadata</a>\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_TOKEN_ID_METADATA, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation getRefreshTokenMetadataAsClient(\n+\t\t\t@RequestHeader(value = AuthorizationConstants.OAUTH_VERIFIED_CLIENT_ID_HEADER) String verifiedClientId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getRefreshTokenMetadataAsClient(verifiedClientId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Update the metadata for a refresh token. At this time, the only field that a user may set is the 'name' field.\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view, modify})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_METADATA, method = RequestMethod.PUT)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation updateRefreshTokenMetadata(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId,\n+\t\t\t@RequestBody OAuthRefreshTokenInformation metadata) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().updateRefreshTokenMetadata(userId, tokenId, metadata);\n+\t}\n+\n+\t/**\n+\t * Revoke all refresh token and their related access tokens associated with a particular client and the requesting user.\n+\t * Note that access tokens that are not associated with refresh tokens cannot be revoked.\n+\t * Users that want to revoke one refresh token should use <a href=\"${POST.oauth2.audit.tokens.tokenId.revoke}\">POST /oauth2/audit/tokens/{tokenId}/revoke</a>.\n+\t *\n+\t * Additionally, Access tokens that are not associated with a refresh token cannot be revoked.\n+\t *\n+\t * OAuth 2.0 clients wishing to revoke a refresh token should use <a href=\"${POST.oauth2.revoke}\">POST /oauth2/revoke</a>\n+\t */\n+\t@RequiredScope({view, modify, authorize})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENT_REVOKE, method = RequestMethod.POST)\n+\tpublic void revokeRefreshTokensForUserClientPair(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String clientId) throws NotFoundException {\n+\t\tserviceProvider.getOpenIDConnectService().revokeTokensForUserClientPair(userId, clientId);\n+\t}\n+\n+\t/**\n+\t * Revoke a particular refresh token and all of its related access tokens using its unique ID. The caller must be the the user/resource owner associated with the refresh token.\n+\t * Note that a client may be in possession of more than one refresh token, so users wishing to revoke all access should use\n+\t * <a href=\"${POST.oauth2.audit.grantedClients.clientId.revoke}\">POST /oauth2/audit/grantedClients/{clientId}/revoke</a>.\n+\t *\n+\t * Additionally, Access tokens that are not associated with a refresh token cannot be revoked.\n+\t *\n+\t * OAuth 2.0 clients wishing to revoke a refresh token should use <a href=\"${POST.oauth2.revoke}\">POST /oauth2/revoke</a>\n+\t */\n+\t@RequiredScope({view, modify, authorize})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_REVOKE, method = RequestMethod.POST)\n+\tpublic void revokeRefreshToken(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\tserviceProvider.getOpenIDConnectService().revokeRefreshTokenAsUser(userId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Revoke a particular refresh token using the token itself, or an associated access token. The caller must be the the user/resource owner associated with the refresh token.\n+\t *\n+\t * OAuth 2.0 clients wishing to revoke a refresh token should use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29a5d52978a53027b8426a4134519cbfd47bf36"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjUyODY0OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/UrlHelpers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxNDoyNVrOGlVvuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxNDoyNVrOGlVvuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNjc3Ng==", "bodyText": "do other oauth providers publish their revocation endpoint in their discovery document and, if so, should we do it too?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441806776", "createdAt": "2020-06-17T20:14:25Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/UrlHelpers.java", "diffHunk": "@@ -1127,7 +1127,19 @@\n \tpublic static final String OAUTH_2_USER_INFO = AUTH_OAUTH_2+\"/userinfo\";\n \tpublic static final String OAUTH_2_JWKS = AUTH_OAUTH_2+\"/jwks\";\n \tpublic static final String OAUTH_2_AUTH_REQUEST_DESCRIPTION = AUTH_OAUTH_2+\"/description\";\n-\t\n+\tpublic static final String OAUTH_2_REVOKE = AUTH_OAUTH_2+\"/revoke\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29a5d52978a53027b8426a4134519cbfd47bf36"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjU2ODk3OnYy", "diffSide": "RIGHT", "path": "integration-test/src/test/java/org/sagebionetworks/ITOpenIDConnectTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyODowNFrOGlWKFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyODowNFrOGlWKFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMzUyNw==", "bodyText": "make this an instance variable (clientToDelete?)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441813527", "createdAt": "2020-06-17T20:28:04Z", "author": {"login": "brucehoff"}, "path": "integration-test/src/test/java/org/sagebionetworks/ITOpenIDConnectTest.java", "diffHunk": "@@ -334,4 +365,264 @@ public void testRoundTrip() throws Exception {\n \t\tclientToDelete=null;\n \t}\n \n+\tprivate OAuthClient setUpVerifiedOAuthClient() throws SynapseException {\n+\t\tOAuthClient client = new OAuthClient();\n+\t\tclient.setClient_name(\"some client\");\n+\t\tclient.setRedirect_uris(Collections.singletonList(\"https://foo.bar.com\"));\n+\t\tclient = synapseOne.createOAuthClient(client);\n+\t\tclientToDelete = client.getClient_id();\n+\t\treturn adminSynapse.updateOAuthClientVerifiedStatus(client.getClient_id(), client.getEtag(), true);\n+\t}\n+\n+\tprivate static OIDCAuthorizationRequest setUpAuthorizationRequest(OAuthClient client) throws Exception {\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(client.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(client.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\t\tauthorizationRequest.setScope(\"openid offline_access\"); // offline_access is needed for a refresh token\n+\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsToRequest = new HashMap<>();\n+\t\tclaimsToRequest.put(OIDCClaimName.userid.name(), null);\n+\t\tclaimsToRequest.put(OIDCClaimName.email.name(), null);\n+\t\tclaimsToRequest.put(OIDCClaimName.is_certified.name(), null);\n+\t\tOIDCClaimsRequestDetails teamClaimRequestDetails = new OIDCClaimsRequestDetails();\n+\t\tteamClaimRequestDetails.setValues(Collections.singletonList(\"2\"));\n+\t\tclaimsToRequest.put(OIDCClaimName.team.name(), teamClaimRequestDetails);\n+\t\tOIDCClaimsRequest claimsRequest = new OIDCClaimsRequest();\n+\t\tclaimsRequest.setId_token(claimsToRequest);\n+\t\tclaimsRequest.setUserinfo(claimsToRequest);\n+\t\tauthorizationRequest.setClaims(claimsRequest);\n+\n+\t\tString nonce = UUID.randomUUID().toString();\n+\t\tauthorizationRequest.setNonce(nonce);\n+\t\treturn  authorizationRequest;\n+\t}\n+\n+\t@Test\n+\tpublic void testRefreshTokenGrantTypeRoundTrip() throws Exception {\n+\t\tOAuthClient client = setUpVerifiedOAuthClient();\n+\t\tOAuthClientIdAndSecret secret = synapseOne.createOAuthClientSecret(client.getClient_id());\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = setUpAuthorizationRequest(client);\n+\n+\t\tOAuthAuthorizationResponse oauthAuthorizationResponse = synapseOne.authorizeClient(authorizationRequest);\n+\n+\t\t// Note, we use Basic auth to authorize the client when asking for an access token\n+\t\tOIDCTokenResponse tokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\ttokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.authorization_code,\n+\t\t\t\t\toauthAuthorizationResponse.getAccess_code(), client.getRedirect_uris().get(0), null, null, null);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// get another access token using our refresh token\n+\t\tOIDCTokenResponse newTokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tnewTokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\tclient.getRedirect_uris().get(0), tokenResponse.getRefresh_token(), null, null);\n+\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\t\t// The refresh token should be rotated\n+\t\tassertFalse(StringUtils.isBlank(newTokenResponse.getRefresh_token()));\n+\t\tassertNotEquals(tokenResponse.getRefresh_token(), newTokenResponse.getRefresh_token());\n+\n+\t\t// New ID and access tokens should be retrieved\n+\t\tassertFalse(StringUtils.isBlank(newTokenResponse.getId_token()));\n+\t\tassertNotEquals(tokenResponse.getId_token(), newTokenResponse.getId_token());\n+\t\tassertFalse(StringUtils.isBlank(newTokenResponse.getAccess_token()));\n+\t\tassertNotEquals(tokenResponse.getAccess_token(), newTokenResponse.getAccess_token());\n+\n+\t\t// The old refresh token shouldn't work anymore.\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tString clientUri = client.getRedirect_uris().get(0);\n+\t\t\tString oldRefreshToken = tokenResponse.getRefresh_token();\n+\t\t\tassertThrows(SynapseBadRequestException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\tclientUri, oldRefreshToken, null, null));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Both the old and the new access tokens should work\n+\t\ttry { // Get userInfo using old access token\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(tokenResponse.getAccess_token());\n+\t\t\tJSONObject userInfo = synapseAnonymous.getUserInfoAsJSON();\n+\t\t\tassertTrue((Boolean)userInfo.get(\"is_certified\"));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// The old refresh token should not work\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tString clientUri = client.getRedirect_uris().get(0);\n+\t\t\tString refreshToken = tokenResponse.getRefresh_token();\n+\t\t\tassertThrows(SynapseBadRequestException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\t\t\tclientUri, refreshToken, null, null)\n+\t\t\t);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\n+\t\ttry { // Get userInfo using new access token\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(newTokenResponse.getAccess_token());\n+\t\t\tJSONObject userInfo = synapseAnonymous.getUserInfoAsJSON();\n+\t\t\tassertTrue((Boolean)userInfo.get(\"is_certified\"));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Audit clients -- there should only be one active client\n+\t\t// Call under test\n+\t\tOAuthClientAuthorizationHistoryList authzHistory = synapseOne.getClientAuthorizationHistory(null);\n+\t\tassertEquals(1, authzHistory.getResults().size());\n+\t\tassertNull(authzHistory.getNextPageToken());\n+\t\tassertEquals(client.getClient_id(), authzHistory.getResults().get(0).getClient().getClient_id());\n+\n+\t\t// Audit tokens -- there should only be one token for the sole active client\n+\t\t// Call under test\n+\t\tOAuthRefreshTokenInformationList tokenList = synapseOne.getRefreshTokenMetadataForAuthorizedClient(client.getClient_id(), null);\n+\t\tassertEquals(1, tokenList.getResults().size());\n+\t\tassertNull(tokenList.getNextPageToken());\n+\t\tassertEquals(synapseOne.getMyProfile().getOwnerId(), tokenList.getResults().get(0).getPrincipalId());\n+\t\tassertEquals(client.getClient_id(), tokenList.getResults().get(0).getClientId());\n+\t\tassertEquals(authorizationRequest.getClaims(), tokenList.getResults().get(0).getClaims());\n+\n+\t\t// Retrieving the refresh token metadata should yield the same result\n+\t\tOAuthRefreshTokenInformation metadata = synapseOne.getRefreshTokenMetadata(tokenList.getResults().get(0).getTokenId());\n+\t\tassertEquals(tokenList.getResults().get(0), metadata);\n+\n+\t\t// Rename the refresh token\n+\t\tmetadata.setName(\"a new refresh token name\");\n+\t\t// Call under test\n+\t\tsynapseOne.updateRefreshTokenMetadata(metadata);\n+\t\tOAuthRefreshTokenInformation newMetadata = synapseOne.getRefreshTokenMetadata(tokenList.getResults().get(0).getTokenId());\n+\n+\t\tassertEquals(metadata.getName(), newMetadata.getName());\n+\n+\t\t// The OAuth client should be able to get the refresh token metadata as well\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tassertEquals(newMetadata, synapseAnonymous.getRefreshTokenMetadataAsOAuthClient(metadata.getTokenId()));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Revoke the refresh token\n+\t\tsynapseOne.revokeRefreshToken(metadata.getTokenId());\n+\n+\t\t// Client should be unable to use access token\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(tokenResponse.getAccess_token());\n+\t\t\tassertThrows(SynapseUnauthorizedException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getUserInfoAsJSONWebToken()\n+\t\t\t);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Client should be unable to use refresh token\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tString clientUri = client.getRedirect_uris().get(0);\n+\t\t\tString refreshToken = newTokenResponse.getRefresh_token();\n+\t\t\tassertThrows(SynapseBadRequestException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\t\t\tclientUri, refreshToken, null, null)\n+\t\t\t);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\n+\t\tsynapseOne.deleteOAuthClient(client.getClient_id());\n+\t\tclientToDelete=null;\n+\t}\n+\n+\t@Test\n+\tpublic void testRevokeAllTokensFromClient() throws Exception {\n+\t\t// START Set up, use authorization code\n+\t\tOAuthClient client = setUpVerifiedOAuthClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29a5d52978a53027b8426a4134519cbfd47bf36"}, "originalPosition": 300}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjU2OTk4OnYy", "diffSide": "RIGHT", "path": "integration-test/src/test/java/org/sagebionetworks/ITOpenIDConnectTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyODoyNFrOGlWKvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyODoyNFrOGlWKvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMzY5Mw==", "bodyText": "put this in AfterEach and check if client!=null before executing", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441813693", "createdAt": "2020-06-17T20:28:24Z", "author": {"login": "brucehoff"}, "path": "integration-test/src/test/java/org/sagebionetworks/ITOpenIDConnectTest.java", "diffHunk": "@@ -334,4 +365,264 @@ public void testRoundTrip() throws Exception {\n \t\tclientToDelete=null;\n \t}\n \n+\tprivate OAuthClient setUpVerifiedOAuthClient() throws SynapseException {\n+\t\tOAuthClient client = new OAuthClient();\n+\t\tclient.setClient_name(\"some client\");\n+\t\tclient.setRedirect_uris(Collections.singletonList(\"https://foo.bar.com\"));\n+\t\tclient = synapseOne.createOAuthClient(client);\n+\t\tclientToDelete = client.getClient_id();\n+\t\treturn adminSynapse.updateOAuthClientVerifiedStatus(client.getClient_id(), client.getEtag(), true);\n+\t}\n+\n+\tprivate static OIDCAuthorizationRequest setUpAuthorizationRequest(OAuthClient client) throws Exception {\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(client.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(client.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\t\tauthorizationRequest.setScope(\"openid offline_access\"); // offline_access is needed for a refresh token\n+\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsToRequest = new HashMap<>();\n+\t\tclaimsToRequest.put(OIDCClaimName.userid.name(), null);\n+\t\tclaimsToRequest.put(OIDCClaimName.email.name(), null);\n+\t\tclaimsToRequest.put(OIDCClaimName.is_certified.name(), null);\n+\t\tOIDCClaimsRequestDetails teamClaimRequestDetails = new OIDCClaimsRequestDetails();\n+\t\tteamClaimRequestDetails.setValues(Collections.singletonList(\"2\"));\n+\t\tclaimsToRequest.put(OIDCClaimName.team.name(), teamClaimRequestDetails);\n+\t\tOIDCClaimsRequest claimsRequest = new OIDCClaimsRequest();\n+\t\tclaimsRequest.setId_token(claimsToRequest);\n+\t\tclaimsRequest.setUserinfo(claimsToRequest);\n+\t\tauthorizationRequest.setClaims(claimsRequest);\n+\n+\t\tString nonce = UUID.randomUUID().toString();\n+\t\tauthorizationRequest.setNonce(nonce);\n+\t\treturn  authorizationRequest;\n+\t}\n+\n+\t@Test\n+\tpublic void testRefreshTokenGrantTypeRoundTrip() throws Exception {\n+\t\tOAuthClient client = setUpVerifiedOAuthClient();\n+\t\tOAuthClientIdAndSecret secret = synapseOne.createOAuthClientSecret(client.getClient_id());\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = setUpAuthorizationRequest(client);\n+\n+\t\tOAuthAuthorizationResponse oauthAuthorizationResponse = synapseOne.authorizeClient(authorizationRequest);\n+\n+\t\t// Note, we use Basic auth to authorize the client when asking for an access token\n+\t\tOIDCTokenResponse tokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\ttokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.authorization_code,\n+\t\t\t\t\toauthAuthorizationResponse.getAccess_code(), client.getRedirect_uris().get(0), null, null, null);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// get another access token using our refresh token\n+\t\tOIDCTokenResponse newTokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tnewTokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\tclient.getRedirect_uris().get(0), tokenResponse.getRefresh_token(), null, null);\n+\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\t\t// The refresh token should be rotated\n+\t\tassertFalse(StringUtils.isBlank(newTokenResponse.getRefresh_token()));\n+\t\tassertNotEquals(tokenResponse.getRefresh_token(), newTokenResponse.getRefresh_token());\n+\n+\t\t// New ID and access tokens should be retrieved\n+\t\tassertFalse(StringUtils.isBlank(newTokenResponse.getId_token()));\n+\t\tassertNotEquals(tokenResponse.getId_token(), newTokenResponse.getId_token());\n+\t\tassertFalse(StringUtils.isBlank(newTokenResponse.getAccess_token()));\n+\t\tassertNotEquals(tokenResponse.getAccess_token(), newTokenResponse.getAccess_token());\n+\n+\t\t// The old refresh token shouldn't work anymore.\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tString clientUri = client.getRedirect_uris().get(0);\n+\t\t\tString oldRefreshToken = tokenResponse.getRefresh_token();\n+\t\t\tassertThrows(SynapseBadRequestException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\tclientUri, oldRefreshToken, null, null));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Both the old and the new access tokens should work\n+\t\ttry { // Get userInfo using old access token\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(tokenResponse.getAccess_token());\n+\t\t\tJSONObject userInfo = synapseAnonymous.getUserInfoAsJSON();\n+\t\t\tassertTrue((Boolean)userInfo.get(\"is_certified\"));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// The old refresh token should not work\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tString clientUri = client.getRedirect_uris().get(0);\n+\t\t\tString refreshToken = tokenResponse.getRefresh_token();\n+\t\t\tassertThrows(SynapseBadRequestException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\t\t\tclientUri, refreshToken, null, null)\n+\t\t\t);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\n+\t\ttry { // Get userInfo using new access token\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(newTokenResponse.getAccess_token());\n+\t\t\tJSONObject userInfo = synapseAnonymous.getUserInfoAsJSON();\n+\t\t\tassertTrue((Boolean)userInfo.get(\"is_certified\"));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Audit clients -- there should only be one active client\n+\t\t// Call under test\n+\t\tOAuthClientAuthorizationHistoryList authzHistory = synapseOne.getClientAuthorizationHistory(null);\n+\t\tassertEquals(1, authzHistory.getResults().size());\n+\t\tassertNull(authzHistory.getNextPageToken());\n+\t\tassertEquals(client.getClient_id(), authzHistory.getResults().get(0).getClient().getClient_id());\n+\n+\t\t// Audit tokens -- there should only be one token for the sole active client\n+\t\t// Call under test\n+\t\tOAuthRefreshTokenInformationList tokenList = synapseOne.getRefreshTokenMetadataForAuthorizedClient(client.getClient_id(), null);\n+\t\tassertEquals(1, tokenList.getResults().size());\n+\t\tassertNull(tokenList.getNextPageToken());\n+\t\tassertEquals(synapseOne.getMyProfile().getOwnerId(), tokenList.getResults().get(0).getPrincipalId());\n+\t\tassertEquals(client.getClient_id(), tokenList.getResults().get(0).getClientId());\n+\t\tassertEquals(authorizationRequest.getClaims(), tokenList.getResults().get(0).getClaims());\n+\n+\t\t// Retrieving the refresh token metadata should yield the same result\n+\t\tOAuthRefreshTokenInformation metadata = synapseOne.getRefreshTokenMetadata(tokenList.getResults().get(0).getTokenId());\n+\t\tassertEquals(tokenList.getResults().get(0), metadata);\n+\n+\t\t// Rename the refresh token\n+\t\tmetadata.setName(\"a new refresh token name\");\n+\t\t// Call under test\n+\t\tsynapseOne.updateRefreshTokenMetadata(metadata);\n+\t\tOAuthRefreshTokenInformation newMetadata = synapseOne.getRefreshTokenMetadata(tokenList.getResults().get(0).getTokenId());\n+\n+\t\tassertEquals(metadata.getName(), newMetadata.getName());\n+\n+\t\t// The OAuth client should be able to get the refresh token metadata as well\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tassertEquals(newMetadata, synapseAnonymous.getRefreshTokenMetadataAsOAuthClient(metadata.getTokenId()));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Revoke the refresh token\n+\t\tsynapseOne.revokeRefreshToken(metadata.getTokenId());\n+\n+\t\t// Client should be unable to use access token\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(tokenResponse.getAccess_token());\n+\t\t\tassertThrows(SynapseUnauthorizedException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getUserInfoAsJSONWebToken()\n+\t\t\t);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Client should be unable to use refresh token\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tString clientUri = client.getRedirect_uris().get(0);\n+\t\t\tString refreshToken = newTokenResponse.getRefresh_token();\n+\t\t\tassertThrows(SynapseBadRequestException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\t\t\tclientUri, refreshToken, null, null)\n+\t\t\t);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\n+\t\tsynapseOne.deleteOAuthClient(client.getClient_id());\n+\t\tclientToDelete=null;\n+\t}\n+\n+\t@Test\n+\tpublic void testRevokeAllTokensFromClient() throws Exception {\n+\t\t// START Set up, use authorization code\n+\t\tOAuthClient client = setUpVerifiedOAuthClient();\n+\t\tOAuthClientIdAndSecret secret = synapseOne.createOAuthClientSecret(client.getClient_id());\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = setUpAuthorizationRequest(client);\n+\n+\t\tOAuthAuthorizationResponse oauthAuthorizationResponse = synapseOne.authorizeClient(authorizationRequest);\n+\n+\t\t// Note, we use Basic auth to authorize the client when asking for an access token\n+\t\tOIDCTokenResponse tokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\ttokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.authorization_code,\n+\t\t\t\t\toauthAuthorizationResponse.getAccess_code(), client.getRedirect_uris().get(0), null, null, null);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\t\t// END Set up. We now have a refresh token\n+\n+\t\tOAuthRefreshTokenInformationList tokens = synapseOne.getRefreshTokenMetadataForAuthorizedClient(client.getClient_id(), null);\n+\t\tString tokenId = tokens.getResults().get(0).getTokenId();\n+\n+\t\t// Test revoking all refresh tokens from a client\n+\n+\t\t// Call under test\n+\t\tsynapseOne.revokeMyRefreshTokensFromClient(client.getClient_id());\n+\n+\t\tassertThrows(SynapseNotFoundException.class, () ->\n+\t\t\t\tsynapseOne.getRefreshTokenMetadata(tokenId));\n+\n+\t\tsynapseOne.deleteOAuthClient(client.getClient_id());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29a5d52978a53027b8426a4134519cbfd47bf36"}, "originalPosition": 329}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjU3MzE4OnYy", "diffSide": "RIGHT", "path": "integration-test/src/test/java/org/sagebionetworks/ITOpenIDConnectTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyOTozM1rOGlWNAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyOTozM1rOGlWNAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNDI3NA==", "bodyText": "this.clientToDelete = setUp...", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441814274", "createdAt": "2020-06-17T20:29:33Z", "author": {"login": "brucehoff"}, "path": "integration-test/src/test/java/org/sagebionetworks/ITOpenIDConnectTest.java", "diffHunk": "@@ -334,4 +365,264 @@ public void testRoundTrip() throws Exception {\n \t\tclientToDelete=null;\n \t}\n \n+\tprivate OAuthClient setUpVerifiedOAuthClient() throws SynapseException {\n+\t\tOAuthClient client = new OAuthClient();\n+\t\tclient.setClient_name(\"some client\");\n+\t\tclient.setRedirect_uris(Collections.singletonList(\"https://foo.bar.com\"));\n+\t\tclient = synapseOne.createOAuthClient(client);\n+\t\tclientToDelete = client.getClient_id();\n+\t\treturn adminSynapse.updateOAuthClientVerifiedStatus(client.getClient_id(), client.getEtag(), true);\n+\t}\n+\n+\tprivate static OIDCAuthorizationRequest setUpAuthorizationRequest(OAuthClient client) throws Exception {\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(client.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(client.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\t\tauthorizationRequest.setScope(\"openid offline_access\"); // offline_access is needed for a refresh token\n+\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsToRequest = new HashMap<>();\n+\t\tclaimsToRequest.put(OIDCClaimName.userid.name(), null);\n+\t\tclaimsToRequest.put(OIDCClaimName.email.name(), null);\n+\t\tclaimsToRequest.put(OIDCClaimName.is_certified.name(), null);\n+\t\tOIDCClaimsRequestDetails teamClaimRequestDetails = new OIDCClaimsRequestDetails();\n+\t\tteamClaimRequestDetails.setValues(Collections.singletonList(\"2\"));\n+\t\tclaimsToRequest.put(OIDCClaimName.team.name(), teamClaimRequestDetails);\n+\t\tOIDCClaimsRequest claimsRequest = new OIDCClaimsRequest();\n+\t\tclaimsRequest.setId_token(claimsToRequest);\n+\t\tclaimsRequest.setUserinfo(claimsToRequest);\n+\t\tauthorizationRequest.setClaims(claimsRequest);\n+\n+\t\tString nonce = UUID.randomUUID().toString();\n+\t\tauthorizationRequest.setNonce(nonce);\n+\t\treturn  authorizationRequest;\n+\t}\n+\n+\t@Test\n+\tpublic void testRefreshTokenGrantTypeRoundTrip() throws Exception {\n+\t\tOAuthClient client = setUpVerifiedOAuthClient();\n+\t\tOAuthClientIdAndSecret secret = synapseOne.createOAuthClientSecret(client.getClient_id());\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = setUpAuthorizationRequest(client);\n+\n+\t\tOAuthAuthorizationResponse oauthAuthorizationResponse = synapseOne.authorizeClient(authorizationRequest);\n+\n+\t\t// Note, we use Basic auth to authorize the client when asking for an access token\n+\t\tOIDCTokenResponse tokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\ttokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.authorization_code,\n+\t\t\t\t\toauthAuthorizationResponse.getAccess_code(), client.getRedirect_uris().get(0), null, null, null);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// get another access token using our refresh token\n+\t\tOIDCTokenResponse newTokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tnewTokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\tclient.getRedirect_uris().get(0), tokenResponse.getRefresh_token(), null, null);\n+\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\t\t// The refresh token should be rotated\n+\t\tassertFalse(StringUtils.isBlank(newTokenResponse.getRefresh_token()));\n+\t\tassertNotEquals(tokenResponse.getRefresh_token(), newTokenResponse.getRefresh_token());\n+\n+\t\t// New ID and access tokens should be retrieved\n+\t\tassertFalse(StringUtils.isBlank(newTokenResponse.getId_token()));\n+\t\tassertNotEquals(tokenResponse.getId_token(), newTokenResponse.getId_token());\n+\t\tassertFalse(StringUtils.isBlank(newTokenResponse.getAccess_token()));\n+\t\tassertNotEquals(tokenResponse.getAccess_token(), newTokenResponse.getAccess_token());\n+\n+\t\t// The old refresh token shouldn't work anymore.\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tString clientUri = client.getRedirect_uris().get(0);\n+\t\t\tString oldRefreshToken = tokenResponse.getRefresh_token();\n+\t\t\tassertThrows(SynapseBadRequestException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\tclientUri, oldRefreshToken, null, null));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Both the old and the new access tokens should work\n+\t\ttry { // Get userInfo using old access token\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(tokenResponse.getAccess_token());\n+\t\t\tJSONObject userInfo = synapseAnonymous.getUserInfoAsJSON();\n+\t\t\tassertTrue((Boolean)userInfo.get(\"is_certified\"));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// The old refresh token should not work\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tString clientUri = client.getRedirect_uris().get(0);\n+\t\t\tString refreshToken = tokenResponse.getRefresh_token();\n+\t\t\tassertThrows(SynapseBadRequestException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\t\t\tclientUri, refreshToken, null, null)\n+\t\t\t);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\n+\t\ttry { // Get userInfo using new access token\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(newTokenResponse.getAccess_token());\n+\t\t\tJSONObject userInfo = synapseAnonymous.getUserInfoAsJSON();\n+\t\t\tassertTrue((Boolean)userInfo.get(\"is_certified\"));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Audit clients -- there should only be one active client\n+\t\t// Call under test\n+\t\tOAuthClientAuthorizationHistoryList authzHistory = synapseOne.getClientAuthorizationHistory(null);\n+\t\tassertEquals(1, authzHistory.getResults().size());\n+\t\tassertNull(authzHistory.getNextPageToken());\n+\t\tassertEquals(client.getClient_id(), authzHistory.getResults().get(0).getClient().getClient_id());\n+\n+\t\t// Audit tokens -- there should only be one token for the sole active client\n+\t\t// Call under test\n+\t\tOAuthRefreshTokenInformationList tokenList = synapseOne.getRefreshTokenMetadataForAuthorizedClient(client.getClient_id(), null);\n+\t\tassertEquals(1, tokenList.getResults().size());\n+\t\tassertNull(tokenList.getNextPageToken());\n+\t\tassertEquals(synapseOne.getMyProfile().getOwnerId(), tokenList.getResults().get(0).getPrincipalId());\n+\t\tassertEquals(client.getClient_id(), tokenList.getResults().get(0).getClientId());\n+\t\tassertEquals(authorizationRequest.getClaims(), tokenList.getResults().get(0).getClaims());\n+\n+\t\t// Retrieving the refresh token metadata should yield the same result\n+\t\tOAuthRefreshTokenInformation metadata = synapseOne.getRefreshTokenMetadata(tokenList.getResults().get(0).getTokenId());\n+\t\tassertEquals(tokenList.getResults().get(0), metadata);\n+\n+\t\t// Rename the refresh token\n+\t\tmetadata.setName(\"a new refresh token name\");\n+\t\t// Call under test\n+\t\tsynapseOne.updateRefreshTokenMetadata(metadata);\n+\t\tOAuthRefreshTokenInformation newMetadata = synapseOne.getRefreshTokenMetadata(tokenList.getResults().get(0).getTokenId());\n+\n+\t\tassertEquals(metadata.getName(), newMetadata.getName());\n+\n+\t\t// The OAuth client should be able to get the refresh token metadata as well\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tassertEquals(newMetadata, synapseAnonymous.getRefreshTokenMetadataAsOAuthClient(metadata.getTokenId()));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Revoke the refresh token\n+\t\tsynapseOne.revokeRefreshToken(metadata.getTokenId());\n+\n+\t\t// Client should be unable to use access token\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(tokenResponse.getAccess_token());\n+\t\t\tassertThrows(SynapseUnauthorizedException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getUserInfoAsJSONWebToken()\n+\t\t\t);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Client should be unable to use refresh token\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tString clientUri = client.getRedirect_uris().get(0);\n+\t\t\tString refreshToken = newTokenResponse.getRefresh_token();\n+\t\t\tassertThrows(SynapseBadRequestException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\t\t\tclientUri, refreshToken, null, null)\n+\t\t\t);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\n+\t\tsynapseOne.deleteOAuthClient(client.getClient_id());\n+\t\tclientToDelete=null;\n+\t}\n+\n+\t@Test\n+\tpublic void testRevokeAllTokensFromClient() throws Exception {\n+\t\t// START Set up, use authorization code\n+\t\tOAuthClient client = setUpVerifiedOAuthClient();\n+\t\tOAuthClientIdAndSecret secret = synapseOne.createOAuthClientSecret(client.getClient_id());\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = setUpAuthorizationRequest(client);\n+\n+\t\tOAuthAuthorizationResponse oauthAuthorizationResponse = synapseOne.authorizeClient(authorizationRequest);\n+\n+\t\t// Note, we use Basic auth to authorize the client when asking for an access token\n+\t\tOIDCTokenResponse tokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\ttokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.authorization_code,\n+\t\t\t\t\toauthAuthorizationResponse.getAccess_code(), client.getRedirect_uris().get(0), null, null, null);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\t\t// END Set up. We now have a refresh token\n+\n+\t\tOAuthRefreshTokenInformationList tokens = synapseOne.getRefreshTokenMetadataForAuthorizedClient(client.getClient_id(), null);\n+\t\tString tokenId = tokens.getResults().get(0).getTokenId();\n+\n+\t\t// Test revoking all refresh tokens from a client\n+\n+\t\t// Call under test\n+\t\tsynapseOne.revokeMyRefreshTokensFromClient(client.getClient_id());\n+\n+\t\tassertThrows(SynapseNotFoundException.class, () ->\n+\t\t\t\tsynapseOne.getRefreshTokenMetadata(tokenId));\n+\n+\t\tsynapseOne.deleteOAuthClient(client.getClient_id());\n+\t\tclientToDelete=null;\n+\t}\n+\n+\t@Test\n+\tpublic void testRevokeTokensViaClient() throws Exception {\n+\t\t// START Set up, use authorization code\n+\t\tOAuthClient client = setUpVerifiedOAuthClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29a5d52978a53027b8426a4134519cbfd47bf36"}, "originalPosition": 336}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjU3NTY1OnYy", "diffSide": "RIGHT", "path": "integration-test/src/test/java/org/sagebionetworks/ITOpenIDConnectTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDozMDoxNVrOGlWOgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDozMDoxNVrOGlWOgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNDY1OQ==", "bodyText": "synapseOne.deleteOAuthClient(clientToDelete.getClient_id());", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441814659", "createdAt": "2020-06-17T20:30:15Z", "author": {"login": "brucehoff"}, "path": "integration-test/src/test/java/org/sagebionetworks/ITOpenIDConnectTest.java", "diffHunk": "@@ -334,4 +365,264 @@ public void testRoundTrip() throws Exception {\n \t\tclientToDelete=null;\n \t}\n \n+\tprivate OAuthClient setUpVerifiedOAuthClient() throws SynapseException {\n+\t\tOAuthClient client = new OAuthClient();\n+\t\tclient.setClient_name(\"some client\");\n+\t\tclient.setRedirect_uris(Collections.singletonList(\"https://foo.bar.com\"));\n+\t\tclient = synapseOne.createOAuthClient(client);\n+\t\tclientToDelete = client.getClient_id();\n+\t\treturn adminSynapse.updateOAuthClientVerifiedStatus(client.getClient_id(), client.getEtag(), true);\n+\t}\n+\n+\tprivate static OIDCAuthorizationRequest setUpAuthorizationRequest(OAuthClient client) throws Exception {\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(client.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(client.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\t\tauthorizationRequest.setScope(\"openid offline_access\"); // offline_access is needed for a refresh token\n+\n+\t\tMap<String, OIDCClaimsRequestDetails> claimsToRequest = new HashMap<>();\n+\t\tclaimsToRequest.put(OIDCClaimName.userid.name(), null);\n+\t\tclaimsToRequest.put(OIDCClaimName.email.name(), null);\n+\t\tclaimsToRequest.put(OIDCClaimName.is_certified.name(), null);\n+\t\tOIDCClaimsRequestDetails teamClaimRequestDetails = new OIDCClaimsRequestDetails();\n+\t\tteamClaimRequestDetails.setValues(Collections.singletonList(\"2\"));\n+\t\tclaimsToRequest.put(OIDCClaimName.team.name(), teamClaimRequestDetails);\n+\t\tOIDCClaimsRequest claimsRequest = new OIDCClaimsRequest();\n+\t\tclaimsRequest.setId_token(claimsToRequest);\n+\t\tclaimsRequest.setUserinfo(claimsToRequest);\n+\t\tauthorizationRequest.setClaims(claimsRequest);\n+\n+\t\tString nonce = UUID.randomUUID().toString();\n+\t\tauthorizationRequest.setNonce(nonce);\n+\t\treturn  authorizationRequest;\n+\t}\n+\n+\t@Test\n+\tpublic void testRefreshTokenGrantTypeRoundTrip() throws Exception {\n+\t\tOAuthClient client = setUpVerifiedOAuthClient();\n+\t\tOAuthClientIdAndSecret secret = synapseOne.createOAuthClientSecret(client.getClient_id());\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = setUpAuthorizationRequest(client);\n+\n+\t\tOAuthAuthorizationResponse oauthAuthorizationResponse = synapseOne.authorizeClient(authorizationRequest);\n+\n+\t\t// Note, we use Basic auth to authorize the client when asking for an access token\n+\t\tOIDCTokenResponse tokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\ttokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.authorization_code,\n+\t\t\t\t\toauthAuthorizationResponse.getAccess_code(), client.getRedirect_uris().get(0), null, null, null);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// get another access token using our refresh token\n+\t\tOIDCTokenResponse newTokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tnewTokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\tclient.getRedirect_uris().get(0), tokenResponse.getRefresh_token(), null, null);\n+\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\t\t// The refresh token should be rotated\n+\t\tassertFalse(StringUtils.isBlank(newTokenResponse.getRefresh_token()));\n+\t\tassertNotEquals(tokenResponse.getRefresh_token(), newTokenResponse.getRefresh_token());\n+\n+\t\t// New ID and access tokens should be retrieved\n+\t\tassertFalse(StringUtils.isBlank(newTokenResponse.getId_token()));\n+\t\tassertNotEquals(tokenResponse.getId_token(), newTokenResponse.getId_token());\n+\t\tassertFalse(StringUtils.isBlank(newTokenResponse.getAccess_token()));\n+\t\tassertNotEquals(tokenResponse.getAccess_token(), newTokenResponse.getAccess_token());\n+\n+\t\t// The old refresh token shouldn't work anymore.\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tString clientUri = client.getRedirect_uris().get(0);\n+\t\t\tString oldRefreshToken = tokenResponse.getRefresh_token();\n+\t\t\tassertThrows(SynapseBadRequestException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\tclientUri, oldRefreshToken, null, null));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Both the old and the new access tokens should work\n+\t\ttry { // Get userInfo using old access token\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(tokenResponse.getAccess_token());\n+\t\t\tJSONObject userInfo = synapseAnonymous.getUserInfoAsJSON();\n+\t\t\tassertTrue((Boolean)userInfo.get(\"is_certified\"));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// The old refresh token should not work\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tString clientUri = client.getRedirect_uris().get(0);\n+\t\t\tString refreshToken = tokenResponse.getRefresh_token();\n+\t\t\tassertThrows(SynapseBadRequestException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\t\t\tclientUri, refreshToken, null, null)\n+\t\t\t);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\n+\t\ttry { // Get userInfo using new access token\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(newTokenResponse.getAccess_token());\n+\t\t\tJSONObject userInfo = synapseAnonymous.getUserInfoAsJSON();\n+\t\t\tassertTrue((Boolean)userInfo.get(\"is_certified\"));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Audit clients -- there should only be one active client\n+\t\t// Call under test\n+\t\tOAuthClientAuthorizationHistoryList authzHistory = synapseOne.getClientAuthorizationHistory(null);\n+\t\tassertEquals(1, authzHistory.getResults().size());\n+\t\tassertNull(authzHistory.getNextPageToken());\n+\t\tassertEquals(client.getClient_id(), authzHistory.getResults().get(0).getClient().getClient_id());\n+\n+\t\t// Audit tokens -- there should only be one token for the sole active client\n+\t\t// Call under test\n+\t\tOAuthRefreshTokenInformationList tokenList = synapseOne.getRefreshTokenMetadataForAuthorizedClient(client.getClient_id(), null);\n+\t\tassertEquals(1, tokenList.getResults().size());\n+\t\tassertNull(tokenList.getNextPageToken());\n+\t\tassertEquals(synapseOne.getMyProfile().getOwnerId(), tokenList.getResults().get(0).getPrincipalId());\n+\t\tassertEquals(client.getClient_id(), tokenList.getResults().get(0).getClientId());\n+\t\tassertEquals(authorizationRequest.getClaims(), tokenList.getResults().get(0).getClaims());\n+\n+\t\t// Retrieving the refresh token metadata should yield the same result\n+\t\tOAuthRefreshTokenInformation metadata = synapseOne.getRefreshTokenMetadata(tokenList.getResults().get(0).getTokenId());\n+\t\tassertEquals(tokenList.getResults().get(0), metadata);\n+\n+\t\t// Rename the refresh token\n+\t\tmetadata.setName(\"a new refresh token name\");\n+\t\t// Call under test\n+\t\tsynapseOne.updateRefreshTokenMetadata(metadata);\n+\t\tOAuthRefreshTokenInformation newMetadata = synapseOne.getRefreshTokenMetadata(tokenList.getResults().get(0).getTokenId());\n+\n+\t\tassertEquals(metadata.getName(), newMetadata.getName());\n+\n+\t\t// The OAuth client should be able to get the refresh token metadata as well\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tassertEquals(newMetadata, synapseAnonymous.getRefreshTokenMetadataAsOAuthClient(metadata.getTokenId()));\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Revoke the refresh token\n+\t\tsynapseOne.revokeRefreshToken(metadata.getTokenId());\n+\n+\t\t// Client should be unable to use access token\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(tokenResponse.getAccess_token());\n+\t\t\tassertThrows(SynapseUnauthorizedException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getUserInfoAsJSONWebToken()\n+\t\t\t);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\t// Client should be unable to use refresh token\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\tString clientUri = client.getRedirect_uris().get(0);\n+\t\t\tString refreshToken = newTokenResponse.getRefresh_token();\n+\t\t\tassertThrows(SynapseBadRequestException.class, () ->\n+\t\t\t\t\tsynapseAnonymous.getTokenResponse(OAuthGrantType.refresh_token, null,\n+\t\t\t\t\t\t\tclientUri, refreshToken, null, null)\n+\t\t\t);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\n+\t\tsynapseOne.deleteOAuthClient(client.getClient_id());\n+\t\tclientToDelete=null;\n+\t}\n+\n+\t@Test\n+\tpublic void testRevokeAllTokensFromClient() throws Exception {\n+\t\t// START Set up, use authorization code\n+\t\tOAuthClient client = setUpVerifiedOAuthClient();\n+\t\tOAuthClientIdAndSecret secret = synapseOne.createOAuthClientSecret(client.getClient_id());\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = setUpAuthorizationRequest(client);\n+\n+\t\tOAuthAuthorizationResponse oauthAuthorizationResponse = synapseOne.authorizeClient(authorizationRequest);\n+\n+\t\t// Note, we use Basic auth to authorize the client when asking for an access token\n+\t\tOIDCTokenResponse tokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\ttokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.authorization_code,\n+\t\t\t\t\toauthAuthorizationResponse.getAccess_code(), client.getRedirect_uris().get(0), null, null, null);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\t\t// END Set up. We now have a refresh token\n+\n+\t\tOAuthRefreshTokenInformationList tokens = synapseOne.getRefreshTokenMetadataForAuthorizedClient(client.getClient_id(), null);\n+\t\tString tokenId = tokens.getResults().get(0).getTokenId();\n+\n+\t\t// Test revoking all refresh tokens from a client\n+\n+\t\t// Call under test\n+\t\tsynapseOne.revokeMyRefreshTokensFromClient(client.getClient_id());\n+\n+\t\tassertThrows(SynapseNotFoundException.class, () ->\n+\t\t\t\tsynapseOne.getRefreshTokenMetadata(tokenId));\n+\n+\t\tsynapseOne.deleteOAuthClient(client.getClient_id());\n+\t\tclientToDelete=null;\n+\t}\n+\n+\t@Test\n+\tpublic void testRevokeTokensViaClient() throws Exception {\n+\t\t// START Set up, use authorization code\n+\t\tOAuthClient client = setUpVerifiedOAuthClient();\n+\t\tOAuthClientIdAndSecret secret = synapseOne.createOAuthClientSecret(client.getClient_id());\n+\n+\t\tOIDCAuthorizationRequest authorizationRequest = setUpAuthorizationRequest(client);\n+\n+\t\tOAuthAuthorizationResponse oauthAuthorizationResponse = synapseOne.authorizeClient(authorizationRequest);\n+\n+\t\t// Note, we use Basic auth to authorize the client when asking for an access token\n+\t\tOIDCTokenResponse tokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\ttokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.authorization_code,\n+\t\t\t\t\toauthAuthorizationResponse.getAccess_code(), client.getRedirect_uris().get(0), null, null, null);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\t\t// END Set up. We now have a refresh token\n+\n+\t\tOAuthRefreshTokenInformationList tokens = synapseOne.getRefreshTokenMetadataForAuthorizedClient(client.getClient_id(), null);\n+\t\tString tokenId = tokens.getResults().get(0).getTokenId();\n+\n+\t\t// Test revoking a token as a client\n+\t\tOAuthTokenRevocationRequest revocationRequest = new OAuthTokenRevocationRequest();\n+\t\trevocationRequest.setToken(tokenResponse.getRefresh_token());\n+\t\trevocationRequest.setToken_type_hint(TokenTypeHint.refresh_token);\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret.getClient_secret());\n+\t\t\t// Call under test\n+\t\t\tsynapseAnonymous.revokeToken(revocationRequest);\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t\tassertThrows(SynapseNotFoundException.class, () ->\n+\t\t\t\tsynapseOne.getRefreshTokenMetadata(tokenId));\n+\n+\t\tsynapseOne.deleteOAuthClient(client.getClient_id());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29a5d52978a53027b8426a4134519cbfd47bf36"}, "originalPosition": 372}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjYxOTQxOnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDo0MTo0N1rOGlWqxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDo0MTo0N1rOGlWqxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyMTg5NQ==", "bodyText": "token->tokens", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4088#discussion_r441821895", "createdAt": "2020-06-17T20:41:47Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/OpenIDConnectController.java", "diffHunk": "@@ -356,4 +364,146 @@ Object getUserInfoPOST(\n \t\treturn serviceProvider.getOpenIDConnectService().getUserInfo(accessToken, getEndpoint(uriComponentsBuilder));\n \t}\n \n+\t/**\n+\t * Get a paginated list of the OAuth 2 clients that currently have active refresh tokens that grant access to the user's\n+\t * Synapse identity and/or resources. OAuth 2.0 clients that have no active refresh tokens will not appear in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t * @throws OAuthClientNotVerifiedException if the client is not verified\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENTS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthClientAuthorizationHistoryList getGrantedClientsForUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getClientAuthorizationHistory(userId, nextPageToken);\n+\t}\n+\n+\t/**\n+\t * Get a paginated list of metadata about refresh tokens granted to a particular OAuth 2 clients on\n+\t * behalf of the requesting user. The token itself may not be retrieved.\n+\t * Refresh tokens that have been revoked will not be included in this list.\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_CLIENT_TOKENS, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformationList getGrantedTokenMetadataForUserClientPair(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String clientId,\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\n+\t) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getTokenMetadataForGrantedClient(userId, clientId, nextPageToken);\n+\t}\n+\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token as an authenticated Synapse user.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use\n+\t * <a href=\"${GET.oauth2.token.tokenId.metadata}\">GET /oauth2/token/{tokenId}/metadata</a>\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_METADATA, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation getRefreshTokenMetadataAsUser(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getRefreshTokenMetadataAsUser(userId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Retrieve the metadata for an OAuth 2.0 refresh token. The request should be made as an OAuth 2.0 client using\n+\t * basic authentication.\n+\t *\n+\t * Users that wish to retrieve OAuth 2.0 refresh token metadata should use\n+\t * <a href=\"${GET.oauth2.audit.tokens.tokenId.metadata}\">GET /oauth2/audit/tokens/{tokenId}/metadata</a>\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_TOKEN_ID_METADATA, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation getRefreshTokenMetadataAsClient(\n+\t\t\t@RequestHeader(value = AuthorizationConstants.OAUTH_VERIFIED_CLIENT_ID_HEADER) String verifiedClientId,\n+\t\t\t@PathVariable String tokenId) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().getRefreshTokenMetadataAsClient(verifiedClientId, tokenId);\n+\t}\n+\n+\t/**\n+\t * Update the metadata for a refresh token. At this time, the only field that a user may set is the 'name' field.\n+\t *\n+\t * @throws NotFoundException\n+\t */\n+\t@RequiredScope({view, modify})\n+\t@ResponseStatus(HttpStatus.OK)\n+\t@RequestMapping(value = UrlHelpers.OAUTH_2_AUDIT_TOKENS_ID_METADATA, method = RequestMethod.PUT)\n+\tpublic @ResponseBody\n+\tOAuthRefreshTokenInformation updateRefreshTokenMetadata(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String tokenId,\n+\t\t\t@RequestBody OAuthRefreshTokenInformation metadata) throws NotFoundException {\n+\t\treturn serviceProvider.getOpenIDConnectService().updateRefreshTokenMetadata(userId, tokenId, metadata);\n+\t}\n+\n+\t/**\n+\t * Revoke all refresh token and their related access tokens associated with a particular client and the requesting user.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29a5d52978a53027b8426a4134519cbfd47bf36"}, "originalPosition": 144}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3080, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}