{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NjExODM2", "number": 4108, "title": "detect when the table index is invalid and rebulid", "bodyText": "", "createdAt": "2020-06-25T02:10:11Z", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4108", "merged": true, "mergeCommit": {"oid": "283276e3632f09fe59adcf922b1bf4b76ec1da82"}, "closed": true, "closedAt": "2020-06-25T19:38:01Z", "author": {"login": "john-hill"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuk7QJAH2gAyNDM5NjExODM2OmI5NDhiMmY0ZjczNDYxYjM2ZTQ4NmY1YWU2NWRmYmU3MWRjN2I2ZTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuz8Z0AFqTQzNzc5Mjk2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b948b2f4f73461b36e486f5ae65dfbe71dc7b6e4", "author": {"user": {"login": "john-hill", "name": "John Hill"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/b948b2f4f73461b36e486f5ae65dfbe71dc7b6e4", "committedDate": "2020-06-25T02:07:54Z", "message": "detect when the table index is invalid and rebulid"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NzkyOTY5", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4108#pullrequestreview-437792969", "createdAt": "2020-06-25T19:24:56Z", "commit": {"oid": "b948b2f4f73461b36e486f5ae65dfbe71dc7b6e4"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOToyNDo1NlrOGpIuVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTozNDozN1rOGpJAag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4NzczMw==", "bodyText": "Might want to use: return Optional.ofNullable(etag)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4108#discussion_r445787733", "createdAt": "2020-06-25T19:24:56Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/table/TableStatusDAOImpl.java", "diffHunk": "@@ -260,8 +267,24 @@ public boolean updateChangedOnIfAvailable(IdAndVersion tableId) {\n \t\tlong now = System.currentTimeMillis();\n \t\tint count = jdbcTemplate.update(\"UPDATE \" + TABLE_STATUS + \" SET \" + COL_TABLE_STATUS_CHANGE_ON + \" = ? WHERE \"\n \t\t\t\t+ COL_TABLE_STATUS_ID + \" = ?\" + \" AND \" + COL_TABLE_STATUS_VERSION + \" = ? AND \"\n-\t\t\t\t+ COL_TABLE_STATUS_STATE + \" = '\" + TableState.AVAILABLE.name()+\"'\", now, tableId.getId(), version);\n+\t\t\t\t+ COL_TABLE_STATUS_STATE + \" = '\" + TableState.AVAILABLE.name() + \"'\", now, tableId.getId(), version);\n \t\treturn count > 0;\n \t}\n \n+\t@Override\n+\tpublic Optional<String> getLastChangeEtag(IdAndVersion tableId) {\n+\t\tlong version = validateAndGetVersion(tableId);\n+\t\ttry {\n+\t\t\tString sql = String.format(SELECT_STATUS_TEMPLATE, COL_TABLE_LAST_TABLE_CHANGE_ETAG);\n+\t\t\tString etag = jdbcTemplate.queryForObject(sql, String.class, tableId.getId(), version);\n+\t\t\tif (etag != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b948b2f4f73461b36e486f5ae65dfbe71dc7b6e4"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MDQyMQ==", "bodyText": "Might just want to use a COUNT() without the try/catch", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4108#discussion_r445790421", "createdAt": "2020-06-25T19:30:29Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/table/TableRowTruthDAOImpl.java", "diffHunk": "@@ -518,7 +495,32 @@ public boolean hasAtLeastOneChangeOfType(String tableIdString, TableChangeType t\n \t\t\treturn Optional.of(transactionId);\n \t\t} catch (EmptyResultDataAccessException e) {\n \t\t\treturn Optional.empty();\n-\t\t} \n+\t\t}\n \t}\n-\t\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic void deleteChangeNumber(String tableIdString, long changeNumber) {\n+\t\tValidateArgument.required(tableIdString, \"tableId\");\n+\t\tlong tableId = KeyFactory.stringToKey(tableIdString);\n+\t\tjdbcTemplate.update(\"DELETE FROM \" + TABLE_ROW_CHANGE + \" WHERE \" + COL_TABLE_ROW_TABLE_ID + \" = ? AND \"\n+\t\t\t\t+ COL_TABLE_ROW_VERSION + \" = ?\", tableId, changeNumber);\n+\t}\n+\n+\t@Override\n+\tpublic boolean isEtagInTablesChangeHistory(String tableIdString, String etag) {\n+\t\tValidateArgument.required(tableIdString, \"tableId\");\n+\t\tValidateArgument.required(etag, \"etag\");\n+\t\tlong tableId = KeyFactory.stringToKey(tableIdString);\n+\t\ttry {\n+\t\t\tjdbcTemplate.queryForObject(\n+\t\t\t\t\t\"SELECT \" + COL_TABLE_ROW_TABLE_ETAG + \" FROM \" + TABLE_ROW_CHANGE + \" WHERE \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b948b2f4f73461b36e486f5ae65dfbe71dc7b6e4"}, "originalPosition": 405}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MjM2Mg==", "bodyText": "Consider adding a test where the matching etag is not the latest", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4108#discussion_r445792362", "createdAt": "2020-06-25T19:34:37Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/table/TableRowTruthDAOImplTest.java", "diffHunk": "@@ -508,4 +509,68 @@ public void testgetLastTransactionIdTable() throws IOException {\n \t\tassertTrue(secondTransaction.isPresent());\r\n \t\tassertTrue(secondTransaction.get() > firstTransaction.get());\r\n \t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testIsEtagInTablesChangeHistoryWithNoTable() {\r\n+\t\tString etag = \"does not exist\";\r\n+\t\t// call under test\r\n+\t\tassertFalse(tableRowTruthDao.isEtagInTablesChangeHistory(tableId, etag));\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testIsEtagInTablesChangeHistoryWithTableWithMatch() throws IOException {\r\n+\t\t// Create some test column models\r\n+\t\tList<ColumnModel> columns = TableModelTestUtils.createOneOfEachType();\r\n+\t\t// create some test rows.\r\n+\t\tList<Row> rows = TableModelTestUtils.createRows(columns, 5);\r\n+\t\tRawRowSet set = new RawRowSet(TableModelUtils.getIds(columns), null, tableId, rows);\r\n+\t\t// Append this change set\r\n+\t\tappendRowSetToTable(creatorUserGroupId, tableId, columns, set);\r\n+\t\r\n+\t\tTableChangeType changeType = TableChangeType.ROW;\r\n+\t\tTableRowChange change = tableRowTruthDao.getLastTableRowChange(tableId, changeType);\r\n+\t\tassertNotNull(change);\r\n+\t\tassertEquals(changeType, change.getChangeType());\r\n+\t\t\r\n+\t\t// call under test\r\n+\t\tassertTrue(tableRowTruthDao.isEtagInTablesChangeHistory(tableId, change.getEtag()));\r\n+\t}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b948b2f4f73461b36e486f5ae65dfbe71dc7b6e4"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4774, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}