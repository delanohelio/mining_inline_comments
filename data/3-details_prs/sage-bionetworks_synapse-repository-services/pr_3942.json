{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NjUyNTY4", "number": 3942, "title": "STS Move Restrictions", "bodyText": "https://sagebionetworks.jira.com/browse/PLFM-6007\nIncludes changes related to the trash can and moving folders.\n\nCreate a new StsManager for STS restrictions (and future manager for STS calls).\nAdded folder move restrictions.\nAdd STS checks when restoring files and folders from trash can.\nCheck trash can when checking for empty folders when turning on or off STS.", "createdAt": "2020-02-13T03:38:20Z", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942", "merged": true, "mergeCommit": {"oid": "b781895c04fd250a6ff035ac00fcee1826e2da5e"}, "closed": true, "closedAt": "2020-02-15T01:24:20Z", "author": {"login": "DwayneJengSage"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDxj5qgH2gAyMzc0NjUyNTY4Ojk4ZjliZTRkZjYwZTc3MzkyY2JiNDVlMTQxYjRlMjY4NzkyNWYyMGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEZx3EAFqTM1OTI5MzE2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "98f9be4df60e77392cbb45e141b4e2687925f20f", "author": {"user": {"login": "DwayneJengSage", "name": "Dwayne Jeng"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/98f9be4df60e77392cbb45e141b4e2687925f20f", "committedDate": "2020-02-13T02:32:25Z", "message": "STS Move Restrictions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8", "author": {"user": {"login": "DwayneJengSage", "name": "Dwayne Jeng"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/27b76c2c62d542a34d5496356aa4836f31b164b8", "committedDate": "2020-02-13T02:35:42Z", "message": "Merge branch 'develop' into plfm-6007\n\nConflicts:\n\tservices/repository/src/main/java/org/sagebionetworks/repo/web/service/metadata/FileEntityMetadataProvider.java\n\tservices/repository/src/test/java/org/sagebionetworks/repo/web/service/metadata/FileEntityMetadataProviderTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjM2NDQw", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#pullrequestreview-359236440", "createdAt": "2020-02-14T21:42:49Z", "commit": {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo0Mjo0OVrOFqEgXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo0Mjo0OVrOFqEgXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1ODMzMw==", "bodyText": "separate the trash from this call", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#discussion_r379658333", "createdAt": "2020-02-14T21:42:49Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/NodeManagerImpl.java", "diffHunk": "@@ -713,8 +714,17 @@ public ChildStatsResponse getChildrenStats(ChildStatsRequest request) {\n \t}\n \n \t@Override\n-\tpublic boolean isEntityEmpty(String entityId) {\n-\t\treturn !nodeDao.doesNodeHaveChildren(entityId);\n+\tpublic boolean isEntityEmpty(String entityId, boolean checkTrash) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjQxODY4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#pullrequestreview-359241868", "createdAt": "2020-02-14T21:55:05Z", "commit": {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo1NTowNlrOFqExTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo1NTowNlrOFqExTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MjY3MA==", "bodyText": "this can be removed if can only restore to original location", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#discussion_r379662670", "createdAt": "2020-02-14T21:55:06Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/ProjectSettingsManager.java", "diffHunk": "@@ -21,6 +21,13 @@\n \tOptional<ProjectSetting> getProjectSettingByProjectAndType(UserInfo userInfo, String projectId, ProjectSettingsType type)\n \t\t\tthrows DatastoreException, NotFoundException;\n \n+\t/**\n+\t * This gets the project setting (storage location setting) for the given entity without checking authorization.\n+\t * This method is mainly called by validation logic which may try to get project settings for entities inside the\n+\t * trash can. This should only be used by methods which have already checked authorization.\n+\t */\n+\tOptional<ProjectSetting> getProjectSettingByEntityUnchecked(String entityId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjQyNzY3", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#pullrequestreview-359242767", "createdAt": "2020-02-14T21:57:10Z", "commit": {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo1NzoxMFrOFqE0Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo1NzoxMFrOFqE0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MzQxNA==", "bodyText": "rename to doesEntityHaveTrashedChildren", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#discussion_r379663414", "createdAt": "2020-02-14T21:57:10Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/trash/TrashManagerImpl.java", "diffHunk": "@@ -50,12 +51,21 @@\n \t@Autowired\n \tprivate AccessControlListDAO aclDAO;\n \n+\t@Autowired\n+\tprivate StsManager stsManager;\n+\n \t@Autowired\n \tprivate TrashCanDao trashCanDao;\n \t\n \t@Autowired\n \tprivate TransactionalMessenger transactionalMessenger;\n \n+\t@Override\n+\tpublic boolean doesParentHaveTrashedEntities(String parentId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5Mjg4MDI2", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#pullrequestreview-359288026", "createdAt": "2020-02-15T00:43:31Z", "commit": {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDo0MzozMVrOFqHLHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDo0MzozMVrOFqHLHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwMjA0Nw==", "bodyText": "folderId->moveCanidateId", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#discussion_r379702047", "createdAt": "2020-02-15T00:43:31Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/sts/StsManagerImpl.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.sagebionetworks.repo.manager.sts;\n+\n+import org.sagebionetworks.repo.manager.ProjectSettingsManager;\n+import org.sagebionetworks.repo.manager.file.FileHandleManager;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.file.FileHandle;\n+import org.sagebionetworks.repo.model.project.ProjectSetting;\n+import org.sagebionetworks.repo.model.project.ProjectSettingsType;\n+import org.sagebionetworks.repo.model.project.StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.UploadDestinationListSetting;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+@Component\n+public class StsManagerImpl implements StsManager {\n+\t@Autowired\n+\tprivate FileHandleManager fileHandleManager;\n+\n+\t@Autowired\n+\tprivate ProjectSettingsManager projectSettingsManager;\n+\n+\t@Override\n+\tpublic void validateCanAddFile(UserInfo userInfo, String fileHandleId, String parentId) {\n+\t\t// Is the file STS-enabled?\n+\t\t// Note that getRawFileHandle throws if the file handle exists, but the storage location ID might be null.\n+\t\tFileHandle fileHandle = fileHandleManager.getRawFileHandleUnchecked(fileHandleId);\n+\t\tLong fileStorageLocationId = fileHandle.getStorageLocationId();\n+\t\tStorageLocationSetting fileStorageLocationSetting = projectSettingsManager.getStorageLocationSetting(\n+\t\t\t\tfileStorageLocationId);\n+\t\tboolean fileStsEnabled = projectSettingsManager.isStsStorageLocationSetting(fileStorageLocationSetting);\n+\n+\t\t// Is the parent STS-enabled?\n+\t\tLong parentStorageLocationId = null;\n+\t\tboolean parentStsEnabled = false;\n+\t\tOptional<UploadDestinationListSetting> projectSetting = projectSettingsManager.getProjectSettingForNode(\n+\t\t\t\tuserInfo, parentId, ProjectSettingsType.upload, UploadDestinationListSetting.class);\n+\t\tif (projectSetting.isPresent()) {\n+\t\t\t// Short-cut: Just grab the first storage location ID. We only compare storage location IDs if STS is\n+\t\t\t// enabled, and folders with STS enabled can't have multiple storage locations.\n+\t\t\tparentStsEnabled = projectSettingsManager.isStsStorageLocationSetting(projectSetting.get());\n+\t\t\tparentStorageLocationId = projectSetting.get().getLocations().get(0);\n+\t\t}\n+\n+\t\t// If either the file's storage location or the parent's storage location has STS enabled, then the storage\n+\t\t// locations must be the same. ie, Files in STS-enabled Storage Locations must be placed in a folder with the\n+\t\t// same storage location, and folders with STS-enabled Storage Locations can only contain files from that\n+\t\t// storage location.\n+\t\tif ((fileStsEnabled || parentStsEnabled) && !Objects.equals(fileStorageLocationId, parentStorageLocationId)) {\n+\t\t\t// Determine which error message to throw depending on whether the file is STS-enabled or the parent.\n+\t\t\tif (fileStsEnabled) {\n+\t\t\t\tthrow new IllegalArgumentException(\"Files in STS-enabled storage locations can only be placed in \" +\n+\t\t\t\t\t\t\"folders with the same storage location\");\n+\t\t\t}\n+\t\t\t//noinspection ConstantConditions\n+\t\t\tif (parentStsEnabled) {\n+\t\t\t\tthrow new IllegalArgumentException(\"Folders with STS-enabled storage locations can only accept \" +\n+\t\t\t\t\t\t\"files with the same storage location\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void validateCanMoveFolder(UserInfo userInfo, String folderId, String oldParentId, String newParentId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5Mjg4MDky", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#pullrequestreview-359288092", "createdAt": "2020-02-15T00:43:59Z", "commit": {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDo0Mzo1OVrOFqHLWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDo0Mzo1OVrOFqHLWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwMjEwNQ==", "bodyText": "isCanidateSTSRoot", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#discussion_r379702105", "createdAt": "2020-02-15T00:43:59Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/sts/StsManagerImpl.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.sagebionetworks.repo.manager.sts;\n+\n+import org.sagebionetworks.repo.manager.ProjectSettingsManager;\n+import org.sagebionetworks.repo.manager.file.FileHandleManager;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.file.FileHandle;\n+import org.sagebionetworks.repo.model.project.ProjectSetting;\n+import org.sagebionetworks.repo.model.project.ProjectSettingsType;\n+import org.sagebionetworks.repo.model.project.StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.UploadDestinationListSetting;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+@Component\n+public class StsManagerImpl implements StsManager {\n+\t@Autowired\n+\tprivate FileHandleManager fileHandleManager;\n+\n+\t@Autowired\n+\tprivate ProjectSettingsManager projectSettingsManager;\n+\n+\t@Override\n+\tpublic void validateCanAddFile(UserInfo userInfo, String fileHandleId, String parentId) {\n+\t\t// Is the file STS-enabled?\n+\t\t// Note that getRawFileHandle throws if the file handle exists, but the storage location ID might be null.\n+\t\tFileHandle fileHandle = fileHandleManager.getRawFileHandleUnchecked(fileHandleId);\n+\t\tLong fileStorageLocationId = fileHandle.getStorageLocationId();\n+\t\tStorageLocationSetting fileStorageLocationSetting = projectSettingsManager.getStorageLocationSetting(\n+\t\t\t\tfileStorageLocationId);\n+\t\tboolean fileStsEnabled = projectSettingsManager.isStsStorageLocationSetting(fileStorageLocationSetting);\n+\n+\t\t// Is the parent STS-enabled?\n+\t\tLong parentStorageLocationId = null;\n+\t\tboolean parentStsEnabled = false;\n+\t\tOptional<UploadDestinationListSetting> projectSetting = projectSettingsManager.getProjectSettingForNode(\n+\t\t\t\tuserInfo, parentId, ProjectSettingsType.upload, UploadDestinationListSetting.class);\n+\t\tif (projectSetting.isPresent()) {\n+\t\t\t// Short-cut: Just grab the first storage location ID. We only compare storage location IDs if STS is\n+\t\t\t// enabled, and folders with STS enabled can't have multiple storage locations.\n+\t\t\tparentStsEnabled = projectSettingsManager.isStsStorageLocationSetting(projectSetting.get());\n+\t\t\tparentStorageLocationId = projectSetting.get().getLocations().get(0);\n+\t\t}\n+\n+\t\t// If either the file's storage location or the parent's storage location has STS enabled, then the storage\n+\t\t// locations must be the same. ie, Files in STS-enabled Storage Locations must be placed in a folder with the\n+\t\t// same storage location, and folders with STS-enabled Storage Locations can only contain files from that\n+\t\t// storage location.\n+\t\tif ((fileStsEnabled || parentStsEnabled) && !Objects.equals(fileStorageLocationId, parentStorageLocationId)) {\n+\t\t\t// Determine which error message to throw depending on whether the file is STS-enabled or the parent.\n+\t\t\tif (fileStsEnabled) {\n+\t\t\t\tthrow new IllegalArgumentException(\"Files in STS-enabled storage locations can only be placed in \" +\n+\t\t\t\t\t\t\"folders with the same storage location\");\n+\t\t\t}\n+\t\t\t//noinspection ConstantConditions\n+\t\t\tif (parentStsEnabled) {\n+\t\t\t\tthrow new IllegalArgumentException(\"Folders with STS-enabled storage locations can only accept \" +\n+\t\t\t\t\t\t\"files with the same storage location\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void validateCanMoveFolder(UserInfo userInfo, String folderId, String oldParentId, String newParentId) {\n+\t\tif (oldParentId.equals(newParentId)) {\n+\t\t\t// Folder is not being moved. Trivial.\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// Folder is being moved. STS restrictions may apply.\n+\t\tboolean isRootFolder = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjkwNjA0", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#pullrequestreview-359290604", "createdAt": "2020-02-15T01:02:02Z", "commit": {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMTowMjowMlrOFqHUPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMTowMjowMlrOFqHUPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNDM4MA==", "bodyText": "local param with a name can help readers", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#discussion_r379704380", "createdAt": "2020-02-15T01:02:02Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/sts/StsManagerImplTest.java", "diffHunk": "@@ -0,0 +1,371 @@\n+package org.sagebionetworks.repo.manager.sts;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.sagebionetworks.repo.manager.ProjectSettingsManager;\n+import org.sagebionetworks.repo.manager.file.FileHandleManager;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.file.S3FileHandle;\n+import org.sagebionetworks.repo.model.project.ProjectSettingsType;\n+import org.sagebionetworks.repo.model.project.S3StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.UploadDestinationListSetting;\n+\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class StsManagerImplTest {\n+\tprivate static final String FILE_HANDLE_ID = \"file-handle-id\";\n+\tprivate static final String FOLDER_ID = \"syn1111\";\n+\tprivate static final String PARENT_ENTITY_ID = \"syn2222\";\n+\tprivate static final String NEW_PARENT_ID = \"syn3333\";\n+\tprivate static final String OLD_PARENT_ID = \"syn4444\";\n+\tprivate static final UserInfo USER_INFO = new UserInfo(false);\n+\n+\tprivate static final long STS_STORAGE_LOCATION_ID = 123;\n+\tprivate static final long NON_STS_STORAGE_LOCATION_ID = 456;\n+\tprivate static final long DIFFERENT_STS_STORAGE_LOCATION_ID = 789;\n+\n+\t@Mock\n+\tprivate FileHandleManager mockFileHandleManager;\n+\n+\t@Mock\n+\tprivate ProjectSettingsManager mockProjectSettingsManager;\n+\n+\t@InjectMocks\n+\tprivate StsManagerImpl stsManager;\n+\n+\t@Test\n+\tpublic void validateCanAddFile_StsFileInSameStsParent() {\n+\t\tsetupFile(true);\n+\t\tsetupFolderWithProjectSetting(true, STS_STORAGE_LOCATION_ID);\n+\t\t// Method under test - Does not throw.\n+\t\tstsManager.validateCanAddFile(USER_INFO, FILE_HANDLE_ID, PARENT_ENTITY_ID);\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanAddFile_StsFileInDifferentStsParent() {\n+\t\tsetupFile(true);\n+\t\tsetupFolderWithProjectSetting(true, DIFFERENT_STS_STORAGE_LOCATION_ID);\n+\t\t// Method under test - Throws.\n+\t\tException ex = assertThrows(IllegalArgumentException.class, () -> stsManager.validateCanAddFile(USER_INFO,\n+\t\t\t\tFILE_HANDLE_ID, PARENT_ENTITY_ID));\n+\t\tassertEquals(\"Files in STS-enabled storage locations can only be placed in folders with the same storage location\",\n+\t\t\t\tex.getMessage());\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanAddFile_StsFileInNonStsParent() {\n+\t\tsetupFile(true);\n+\t\tsetupFolderWithProjectSetting(false, NON_STS_STORAGE_LOCATION_ID);\n+\t\t// Method under test - Throws.\n+\t\tException ex = assertThrows(IllegalArgumentException.class, () -> stsManager.validateCanAddFile(USER_INFO,\n+\t\t\t\tFILE_HANDLE_ID, PARENT_ENTITY_ID));\n+\t\tassertEquals(\"Files in STS-enabled storage locations can only be placed in folders with the same storage location\",\n+\t\t\t\tex.getMessage());\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanAddFile_StsFileInParentWithoutProjectSettings() {\n+\t\tsetupFile(true);\n+\t\tsetupFolderWithoutProjectSetting();\n+\t\t// Method under test - Throws.\n+\t\tException ex = assertThrows(IllegalArgumentException.class, () -> stsManager.validateCanAddFile(USER_INFO,\n+\t\t\t\tFILE_HANDLE_ID, PARENT_ENTITY_ID));\n+\t\tassertEquals(\"Files in STS-enabled storage locations can only be placed in folders with the same storage location\",\n+\t\t\t\tex.getMessage());\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanAddFile_NonStsFileInStsParent() {\n+\t\tsetupFile(false);\n+\t\tsetupFolderWithProjectSetting(true, STS_STORAGE_LOCATION_ID);\n+\t\t// Method under test - Throws.\n+\t\tException ex = assertThrows(IllegalArgumentException.class, () -> stsManager.validateCanAddFile(USER_INFO,\n+\t\t\t\tFILE_HANDLE_ID, PARENT_ENTITY_ID));\n+\t\tassertEquals(\"Folders with STS-enabled storage locations can only accept files with the same storage location\",\n+\t\t\t\tex.getMessage());\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanAddFile_NonStsFileInNonStsParent() {\n+\t\tsetupFile(false);\n+\t\tsetupFolderWithProjectSetting(false, NON_STS_STORAGE_LOCATION_ID);\n+\t\t// Method under test - Does not throw.\n+\t\tstsManager.validateCanAddFile(USER_INFO, FILE_HANDLE_ID, PARENT_ENTITY_ID);\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanAddFile_NonStsFileInParentWithoutProjectSettings() {\n+\t\tsetupFile(false);\n+\t\tsetupFolderWithoutProjectSetting();\n+\t\t// Method under test - Does not throw.\n+\t\tstsManager.validateCanAddFile(USER_INFO, FILE_HANDLE_ID, PARENT_ENTITY_ID);\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanAddFile_FileWithoutStorageLocationInStsParent() {\n+\t\t// Edge-case: Files can be created without a storage location. These go to Synapse default storage (which has\n+\t\t// no STS).\n+\t\tS3FileHandle fileHandle = new S3FileHandle();\n+\t\tfileHandle.setId(FILE_HANDLE_ID);\n+\t\tfileHandle.setStorageLocationId(null);\n+\n+\t\twhen(mockFileHandleManager.getRawFileHandleUnchecked(FILE_HANDLE_ID)).thenReturn(fileHandle);\n+\t\twhen(mockProjectSettingsManager.getStorageLocationSetting(null)).thenReturn(null);\n+\t\twhen(mockProjectSettingsManager.isStsStorageLocationSetting((StorageLocationSetting) null)).thenReturn(false);\n+\n+\t\tsetupFolderWithProjectSetting(true, STS_STORAGE_LOCATION_ID);\n+\n+\t\t// Method under test - Throws.\n+\t\tException ex = assertThrows(IllegalArgumentException.class, () -> stsManager.validateCanAddFile(USER_INFO,\n+\t\t\t\tFILE_HANDLE_ID, PARENT_ENTITY_ID));\n+\t\tassertEquals(\"Folders with STS-enabled storage locations can only accept files with the same storage location\",\n+\t\t\t\tex.getMessage());\n+\t}\n+\n+\tprivate void setupFile(boolean isSts) {\n+\t\tlong storageLocationId = isSts ? STS_STORAGE_LOCATION_ID : NON_STS_STORAGE_LOCATION_ID;\n+\n+\t\t// Mock file handle manager.\n+\t\tS3FileHandle fileHandle = new S3FileHandle();\n+\t\tfileHandle.setId(FILE_HANDLE_ID);\n+\t\tfileHandle.setStorageLocationId(storageLocationId);\n+\t\twhen(mockFileHandleManager.getRawFileHandleUnchecked(FILE_HANDLE_ID)).thenReturn(fileHandle);\n+\n+\t\t// Mock project settings manager.\n+\t\tS3StorageLocationSetting fileStorageLocationSetting = new S3StorageLocationSetting();\n+\t\tfileStorageLocationSetting.setStorageLocationId(storageLocationId);\n+\t\twhen(mockProjectSettingsManager.getStorageLocationSetting(storageLocationId)).thenReturn(\n+\t\t\t\tfileStorageLocationSetting);\n+\t\twhen(mockProjectSettingsManager.isStsStorageLocationSetting(fileStorageLocationSetting)).thenReturn(isSts);\n+\t}\n+\n+\tprivate void setupFolderWithoutProjectSetting() {\n+\t\twhen(mockProjectSettingsManager.getProjectSettingForNode(USER_INFO, PARENT_ENTITY_ID,\n+\t\t\t\tProjectSettingsType.upload, UploadDestinationListSetting.class)).thenReturn(Optional.empty());\n+\t}\n+\n+\tprivate void setupFolderWithProjectSetting(boolean isSts, long folderStorageLocationId) {\n+\t\tUploadDestinationListSetting folderProjectSetting = new UploadDestinationListSetting();\n+\t\tfolderProjectSetting.setLocations(ImmutableList.of(folderStorageLocationId));\n+\t\twhen(mockProjectSettingsManager.getProjectSettingForNode(USER_INFO, PARENT_ENTITY_ID,\n+\t\t\t\tProjectSettingsType.upload, UploadDestinationListSetting.class))\n+\t\t\t\t.thenReturn(Optional.of(folderProjectSetting));\n+\t\twhen(mockProjectSettingsManager.isStsStorageLocationSetting(folderProjectSetting)).thenReturn(isSts);\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanMoveFolder_NotMoved() {\n+\t\tstsManager.validateCanMoveFolder(USER_INFO, FOLDER_ID, OLD_PARENT_ID, OLD_PARENT_ID);\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanMoveFolder_moveRootStsFolderToParentWithoutProjectSettings() {\n+\t\tsetupOldFolderWithProjectSetting(true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8"}, "originalPosition": 173}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjkzMTY0", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#pullrequestreview-359293164", "createdAt": "2020-02-15T01:23:52Z", "commit": {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4799, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}