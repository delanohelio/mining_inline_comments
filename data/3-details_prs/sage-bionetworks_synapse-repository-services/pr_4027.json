{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMDk1MDI1", "number": 4027, "title": "enforce maximumListLength on entity views (PLFM-6168)", "bodyText": "", "createdAt": "2020-04-30T03:04:09Z", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4027", "merged": true, "mergeCommit": {"oid": "e0021caec5cbd2b2e0acee04d7a518cd2106637c"}, "closed": true, "closedAt": "2020-04-30T23:34:25Z", "author": {"login": "zimingd"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcckJ6JAH2gAyNDExMDk1MDI1OjcwNmI5OWMyMDZmYzJiMWU4MmM5YzYzYTZhMGYxZDE4ODE4OTQwOTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcc1w1MAFqTQwMzkyMzc5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "706b99c206fc2b1e82c9c63a6a0f1d1881894094", "author": {"user": {"login": "zimingd", "name": "Ziming Dong"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/706b99c206fc2b1e82c9c63a6a0f1d1881894094", "committedDate": "2020-04-30T03:03:22Z", "message": "enforce maximumListLength on entity views"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "711f65c90be2ca85287330e1d94569795c24e347", "author": {"user": {"login": "zimingd", "name": "Ziming Dong"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/711f65c90be2ca85287330e1d94569795c24e347", "committedDate": "2020-04-30T03:10:30Z", "message": "Merge branch 'develop' of github.com:Sage-Bionetworks/Synapse-Repository-Services into PLFM-6168"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "553ba56baf1d9aba5c11687245b03097957250c2", "author": {"user": {"login": "zimingd", "name": "Ziming Dong"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/553ba56baf1d9aba5c11687245b03097957250c2", "committedDate": "2020-04-30T03:31:15Z", "message": "fix compile error after merging develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66e8689e8147dd558bf5c178047795db7c6d855a", "author": {"user": {"login": "zimingd", "name": "Ziming Dong"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/66e8689e8147dd558bf5c178047795db7c6d855a", "committedDate": "2020-04-30T03:46:03Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fc18bd149099ec7cb61ac171560ecf2a18afd85", "author": {"user": {"login": "zimingd", "name": "Ziming Dong"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/9fc18bd149099ec7cb61ac171560ecf2a18afd85", "committedDate": "2020-04-30T03:50:48Z", "message": "fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTIzNzkx", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4027#pullrequestreview-403923791", "createdAt": "2020-04-30T22:35:20Z", "commit": {"oid": "9fc18bd149099ec7cb61ac171560ecf2a18afd85"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjozNToyMVrOGO8rYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzoyNTo0OFrOGO9srw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNzM5NQ==", "bodyText": "The comment should be below", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4027#discussion_r418327395", "createdAt": "2020-04-30T22:35:21Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/test/java/org/sagebionetworks/table/worker/TableViewIntegrationTest.java", "diffHunk": "@@ -1482,6 +1484,97 @@ public void testEntityView_multipleValueColumnRoundTrip() throws Exception {\n \t\tassertEquals(Arrays.asList(\"newVal1\", \"newVal2\"), entityManager.getAnnotations(adminUserInfo, firstChangeId).getAnnotations().get(stringListColumn.getName()).getValue());\r\n \t\tassertEquals(Arrays.asList(\"newVal4\", \"newVal5\", \"newVal6\"), entityManager.getAnnotations(adminUserInfo, secondChangeId).getAnnotations().get(stringListColumn.getName()).getValue());\r\n \t}\r\n+\r\n+\r\n+\t@Test\r\n+\tpublic void testEntityView_multipleValueColumn_UpdatedAnnotationExceedListMaxSize() throws Exception {\r\n+\t\tdefaultColumnIds.add(stringListColumn.getId());\r\n+\t\tcreateFileView();\r\n+\r\n+\t\tassertTrue(fileCount >= 2, \"setup() needs to create at least 2 entities for this test to work\");\r\n+\r\n+\t\tLong fileId = KeyFactory.stringToKey(fileIds.get(0));\r\n+\r\n+\t\t//set annotations for 2 files\r\n+\t\tAnnotations fileAnnotation1 = entityManager.getAnnotations(adminUserInfo, fileIds.get(0));\r\n+\t\t//this annotation will exceed the limit\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc18bd149099ec7cb61ac171560ecf2a18afd85"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzMDUyMw==", "bodyText": "Add a test that verifies that if we try to push an update with an string list that exceeds the column model maximumListLength it fails.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4027#discussion_r418330523", "createdAt": "2020-04-30T22:44:18Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/test/java/org/sagebionetworks/table/worker/TableViewIntegrationTest.java", "diffHunk": "@@ -1482,6 +1484,97 @@ public void testEntityView_multipleValueColumnRoundTrip() throws Exception {\n \t\tassertEquals(Arrays.asList(\"newVal1\", \"newVal2\"), entityManager.getAnnotations(adminUserInfo, firstChangeId).getAnnotations().get(stringListColumn.getName()).getValue());\r\n \t\tassertEquals(Arrays.asList(\"newVal4\", \"newVal5\", \"newVal6\"), entityManager.getAnnotations(adminUserInfo, secondChangeId).getAnnotations().get(stringListColumn.getName()).getValue());\r\n \t}\r\n+\r\n+\r\n+\t@Test\r\n+\tpublic void testEntityView_multipleValueColumn_UpdatedAnnotationExceedListMaxSize() throws Exception {\r\n+\t\tdefaultColumnIds.add(stringListColumn.getId());\r\n+\t\tcreateFileView();\r\n+\r\n+\t\tassertTrue(fileCount >= 2, \"setup() needs to create at least 2 entities for this test to work\");\r\n+\r\n+\t\tLong fileId = KeyFactory.stringToKey(fileIds.get(0));\r\n+\r\n+\t\t//set annotations for 2 files\r\n+\t\tAnnotations fileAnnotation1 = entityManager.getAnnotations(adminUserInfo, fileIds.get(0));\r\n+\t\t//this annotation will exceed the limit\r\n+\t\tAnnotationsV2TestUtils.putAnnotations(fileAnnotation1, stringListColumn.getName(), Arrays.asList(\"val1\", \"val2\"), AnnotationsValueType.STRING);\r\n+\t\tentityManager.updateAnnotations(adminUserInfo, fileIds.get(0), fileAnnotation1);\r\n+\t\twaitForEntityReplication(fileViewId, fileIds.get(0));\r\n+\r\n+\r\n+\t\tassertEquals(fileCount, waitForConsistentQuery(adminUserInfo, \"select id, etag, \"+ stringListColumn.getName() +\" from \" + fileViewId, fileCount).getQueryCount());\r\n+\r\n+\t\tAnnotations fileAnnotation2 = entityManager.getAnnotations(adminUserInfo, fileIds.get(1));\r\n+\t\tAnnotationsV2TestUtils.putAnnotations(fileAnnotation2, stringListColumn.getName(), Arrays.asList(\"val2\", \"val3\", \"val1\", \"val4\"), AnnotationsValueType.STRING);\r\n+\t\tentityManager.updateAnnotations(adminUserInfo, fileIds.get(1), fileAnnotation2);\r\n+\r\n+\r\n+\t\twaitForEntityReplication(fileViewId, fileIds.get(1));\r\n+\r\n+\r\n+\t\tString error = assertThrows(AsynchJobFailedException.class, () ->\r\n+\t\t\t\twaitForConsistentQuery(adminUserInfo, \"select id, etag, \"+ stringListColumn.getName() +\" from \" + fileViewId, fileCount)\r\n+\t\t).getMessage();\r\n+\t\tassertEquals(\"maximumListLength for ColumnModel \\\"stringList\\\" must be at least: 4\", error);\r\n+\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testEntityView_multipleValueColumnRoundTrip_changeMaxListLength() throws Exception {\r\n+\t\tdefaultColumnIds.add(stringListColumn.getId());\r\n+\t\tcreateFileView();\r\n+\r\n+\t\tassertTrue(fileCount >= 2, \"setup() needs to create at least 2 entities for this test to work\");\r\n+\r\n+\t\tLong fileId = KeyFactory.stringToKey(fileIds.get(0));\r\n+\r\n+\t\t//set annotations for 2 files\r\n+\t\tAnnotations fileAnnotation1 = entityManager.getAnnotations(adminUserInfo, fileIds.get(0));\r\n+\t\tAnnotationsV2TestUtils.putAnnotations(fileAnnotation1, stringListColumn.getName(), Arrays.asList(\"val1\", \"val2\", \"val3\"), AnnotationsValueType.STRING);\r\n+\t\tentityManager.updateAnnotations(adminUserInfo, fileIds.get(0), fileAnnotation1);\r\n+\r\n+\t\tAnnotations fileAnnotation2 = entityManager.getAnnotations(adminUserInfo, fileIds.get(1));\r\n+\t\tAnnotationsV2TestUtils.putAnnotations(fileAnnotation2, stringListColumn.getName(), Arrays.asList(\"val2\", \"val3\"), AnnotationsValueType.STRING);\r\n+\t\tentityManager.updateAnnotations(adminUserInfo, fileIds.get(1), fileAnnotation2);\r\n+\r\n+\r\n+\t\twaitForEntityReplication(fileViewId, fileIds.get(0));\r\n+\r\n+\r\n+\t\tassertEquals(fileCount, waitForConsistentQuery(adminUserInfo, \"select id, etag, \"+ stringListColumn.getName() +\" from \" + fileViewId, fileCount).getQueryCount());\r\n+\r\n+\t\t//now reduce the maxListSize\r\n+\r\n+\t\tColumnModel smallerStringListColumn = new ColumnModel();\r\n+\t\tsmallerStringListColumn.setName(\"stringList\");\r\n+\t\tsmallerStringListColumn.setColumnType(ColumnType.STRING_LIST);\r\n+\t\tsmallerStringListColumn.setMaximumListLength(2L);\r\n+\t\tsmallerStringListColumn = columnModelManager.createColumnModel(adminUserInfo, smallerStringListColumn);\r\n+\r\n+\t\t// change the schema as a transaction\r\n+\t\tColumnChange remove = new ColumnChange();\r\n+\t\tremove.setOldColumnId(stringListColumn.getId());\r\n+\t\tremove.setNewColumnId(smallerStringListColumn.getId());\r\n+\t\tList<ColumnChange> changes = Lists.newArrayList(remove);\r\n+\t\tTableSchemaChangeRequest request = new TableSchemaChangeRequest();\r\n+\t\trequest.setEntityId(fileViewId);\r\n+\t\trequest.setChanges(changes);\r\n+\r\n+\t\tList<TableUpdateRequest> updates = new LinkedList<TableUpdateRequest>();\r\n+\t\tupdates.add(request);\r\n+\t\tTableUpdateTransactionRequest transaction = new TableUpdateTransactionRequest();\r\n+\t\ttransaction.setEntityId(fileViewId);\r\n+\t\ttransaction.setChanges(updates);\r\n+\r\n+\t\t// wait for the change to complete\r\n+\t\tstartAndWaitForJob(adminUserInfo, transaction, TableUpdateTransactionResponse.class);\r\n+\r\n+\t\tString error = assertThrows(AsynchJobFailedException.class, () ->\r\n+\t\t\t\twaitForConsistentQuery(adminUserInfo, \"select id, etag, \"+ stringListColumn.getName() +\" from \" + fileViewId, fileCount)\r\n+\t\t).getMessage();\r\n+\t\tassertEquals(\"maximumListLength for ColumnModel \\\"stringList\\\" must be at least: 3\", error);\r\n+\t}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc18bd149099ec7cb61ac171560ecf2a18afd85"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzMTIwNQ==", "bodyText": "you might want to use the ENTITY, or the already defined objectType", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4027#discussion_r418331205", "createdAt": "2020-04-30T22:46:27Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/table/TableIndexManagerImplTest.java", "diffHunk": "@@ -1787,6 +1794,170 @@ public void applyListColumnIndexTableChanges_multipleChanges(){\n \t\tverify(mockIndexDao).deleteMultivalueColumnIndexTable(tableId, columnIdToRemove, alterTemp);\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testValidateMaxListLengthInAnnotationReplication_noListColumns(){\r\n+\r\n+\t\tColumnModel bar = new ColumnModel();\r\n+\t\tbar.setId(\"1234\");\r\n+\t\tbar.setName(\"bar\");\r\n+\t\tbar.setColumnType(ColumnType.INTEGER);\r\n+\r\n+\t\tList<ColumnModel> currentSchema = Arrays.asList(bar);\r\n+\r\n+\r\n+\t\tObjectType objectType = ObjectType.FILE;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc18bd149099ec7cb61ac171560ecf2a18afd85"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzNzYxMQ==", "bodyText": "We could move this at the dao since it's part of the validation logic of the copyEntityReplicationToView method (and should always apply for that method).", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4027#discussion_r418337611", "createdAt": "2020-04-30T23:05:19Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/TableIndexManagerImpl.java", "diffHunk": "@@ -408,6 +413,34 @@ public long populateViewFromEntityReplication(final Long viewId, final ViewScope\n \t\t// calculate the new CRC32;\r\n \t\treturn tableIndexDao.calculateCRC32ofTableView(viewId);\r\n \t}\r\n+\r\n+\tvoid validateMaxListLengthInAnnotationReplication(ObjectType objectType, long viewId, long viewTypeMask,\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc18bd149099ec7cb61ac171560ecf2a18afd85"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MzYxMw==", "bodyText": "We might want to actually do a group by A.ANNO_KEY with the count, so that we can simplify the select statement.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4027#discussion_r418343613", "createdAt": "2020-04-30T23:24:20Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/SQLUtils.java", "diffHunk": "@@ -1434,9 +1442,24 @@ public static String createSelectInsertFromObjectReplication(Long viewId, List<C\n \t\t\tbuilder.append(\" AND \").append(OBJECT_REPLICATION_ALIAS).append(\".\").append(OBJECT_REPLICATION_COL_OBJECT_ID)\r\n \t\t\t\t\t.append(\" IN (:\").append(ID_PARAM_NAME).append(\")\");\r\n \t\t}\r\n-\t\tbuilder.append(\" GROUP BY \").append(OBJECT_REPLICATION_ALIAS).append(\".\").append(OBJECT_REPLICATION_COL_OBJECT_ID);\r\n-\t\tbuilder.append(\" ORDER BY \").append(OBJECT_REPLICATION_ALIAS).append(\".\").append(OBJECT_REPLICATION_COL_OBJECT_ID);\r\n-\t\treturn headers;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Generate the SQL to validate that all of the list columns for a view table from the object replication tables.\r\n+\t * @param viewId\r\n+\t * @param viewTypeMask\r\n+\t * @param annotationNames\r\n+\t * @return\r\n+\t */\r\n+\tpublic static String createAnnotationMaxListLengthSQL(Long viewId, Long viewTypeMask,\r\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Set<String> annotationNames, boolean filterByRows) {\r\n+\t\tValidateArgument.requiredNotEmpty(annotationNames,\"annotationNames\");\r\n+\r\n+\t\tStringBuilder builder = new StringBuilder();\r\n+\t\tbuilder.append(\"SELECT \");\r\n+\t\tbuildSelectListLength(builder, annotationNames);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc18bd149099ec7cb61ac171560ecf2a18afd85"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NDExMQ==", "bodyText": "You might want to make sure to check the message", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4027#discussion_r418344111", "createdAt": "2020-04-30T23:25:48Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/SQLUtilsTest.java", "diffHunk": "@@ -1930,6 +1933,75 @@ public void testCreateSelectFromObjectReplication(){\n \t\t\t\t+ \" GROUP BY R.OBJECT_ID ORDER BY R.OBJECT_ID\", sql);\r\n \t\tassertEquals(Lists.newArrayList(\"ROW_ID\", \"ROW_VERSION\",\"ROW_ETAG\",\"ROW_BENEFACTOR\",\"_C1_\",\"_C2_\"), headers);\r\n \t}\r\n+\r\n+\t@Test\r\n+\tpublic void createMaxListLengthValidationSQL_singleAnnotation(){\r\n+\t\tSet<String> annotationNames = Sets.newHashSet(\"foo\");\r\n+\t\tLong viewTypeMask = ViewTypeMask.File.getMask();\r\n+\t\tStringBuilder builder = new StringBuilder();\r\n+\t\tboolean filterByRows = false;\r\n+\t\tString sql = SQLUtils.createAnnotationMaxListLengthSQL(viewId, viewTypeMask, annotationNames, filterByRows);\r\n+\r\n+\t\tassertEquals(\"SELECT\"\r\n+\t\t\t\t+ \" MAX(IF(A.ANNO_KEY ='foo', A.LIST_LENGTH, 0)) AS foo\"\r\n+\t\t\t\t+ \" FROM\"\r\n+\t\t\t\t+ \" OBJECT_REPLICATION R\"\r\n+\t\t\t\t+ \" LEFT JOIN ANNOTATION_REPLICATION A\"\r\n+\t\t\t\t+ \" ON(R.OBJECT_TYPE = A.OBJECT_TYPE AND R.OBJECT_ID = A.OBJECT_ID)\"\r\n+\t\t\t\t+ \" WHERE\"\r\n+\t\t\t\t+ \" R.OBJECT_TYPE = :objectType\"\r\n+\t\t\t\t+ \" AND R.PARENT_ID IN (:parentIds)\"\r\n+\t\t\t\t+ \" AND R.SUBTYPE IN ('file')\", sql);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void createMaxListLengthValidationSQL_multipleAnnotations(){\r\n+\t\tSet<String> annotationNames = Sets.newLinkedHashSet(Arrays.asList(\"foo\", \"bar\",\"baz\"));\r\n+\t\tLong viewTypeMask = ViewTypeMask.File.getMask();\r\n+\t\tStringBuilder builder = new StringBuilder();\r\n+\t\tboolean filterByRows = false;\r\n+\t\tString sql = SQLUtils.createAnnotationMaxListLengthSQL(viewId, viewTypeMask, annotationNames, filterByRows);\r\n+\r\n+\t\tassertEquals(\"SELECT\"\r\n+\t\t\t\t+ \" MAX(IF(A.ANNO_KEY ='foo', A.LIST_LENGTH, 0)) AS foo\"\r\n+\t\t\t\t+ \", MAX(IF(A.ANNO_KEY ='bar', A.LIST_LENGTH, 0)) AS bar\"\r\n+\t\t\t\t+ \", MAX(IF(A.ANNO_KEY ='baz', A.LIST_LENGTH, 0)) AS baz\"\r\n+\t\t\t\t+ \" FROM\"\r\n+\t\t\t\t+ \" OBJECT_REPLICATION R\"\r\n+\t\t\t\t+ \" LEFT JOIN ANNOTATION_REPLICATION A\"\r\n+\t\t\t\t+ \" ON(R.OBJECT_TYPE = A.OBJECT_TYPE AND R.OBJECT_ID = A.OBJECT_ID)\"\r\n+\t\t\t\t+ \" WHERE\"\r\n+\t\t\t\t+ \" R.OBJECT_TYPE = :objectType\"\r\n+\t\t\t\t+ \" AND R.PARENT_ID IN (:parentIds)\"\r\n+\t\t\t\t+ \" AND R.SUBTYPE IN ('file')\", sql);\r\n+\t}\r\n+\r\n+\r\n+\t@Test\r\n+\tpublic void createMaxListLengthValidationSQL_nullAnnotationNames(){\r\n+\t\tSet<String> annotationNames = null;\r\n+\t\tLong viewTypeMask = ViewTypeMask.File.getMask();\r\n+\t\tStringBuilder builder = new StringBuilder();\r\n+\t\tboolean filterByRows = false;\r\n+\r\n+\t\tassertThrows(IllegalArgumentException.class, () ->\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc18bd149099ec7cb61ac171560ecf2a18afd85"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4684, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}