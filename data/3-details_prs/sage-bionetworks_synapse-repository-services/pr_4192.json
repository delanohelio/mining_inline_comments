{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5MzQ5Njc5", "number": 4192, "title": "Plfm 6392", "bodyText": "", "createdAt": "2020-09-04T06:41:44Z", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192", "merged": true, "mergeCommit": {"oid": "d4be624360bc1c35c21f386ac5066caa29607262"}, "closed": true, "closedAt": "2020-09-04T23:44:15Z", "author": {"login": "nlgilber"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdE3bZRAH2gAyNDc5MzQ5Njc5OmI0NDBjN2M2ODllN2U0YTUwNDczMDJiNDc0YTFkM2YzNWVhZjcyZDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFuBeXAFqTQ4MzAwOTY5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b440c7c689e7e4a5047302b474a1d3f35eaf72d7", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/b440c7c689e7e4a5047302b474a1d3f35eaf72d7", "committedDate": "2020-09-02T08:07:38Z", "message": " added message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87d8221921843e9c55aad0c30fc0bf143d3c7dd1", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/87d8221921843e9c55aad0c30fc0bf143d3c7dd1", "committedDate": "2020-09-02T16:59:28Z", "message": " added test in TableExceptionTranslatorTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30ec0e200eaa36ab532d5896626c51a7cf27a5fa", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/30ec0e200eaa36ab532d5896626c51a7cf27a5fa", "committedDate": "2020-09-02T17:00:19Z", "message": " removed test, was redundant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a16dc6d8ca815395319f15ed6e6152c7059c22f6", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a16dc6d8ca815395319f15ed6e6152c7059c22f6", "committedDate": "2020-09-02T17:13:03Z", "message": " refactor impl in translateException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f31be5022ab6762b63bc9c0cff2632d5b1d2d6aa", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/f31be5022ab6762b63bc9c0cff2632d5b1d2d6aa", "committedDate": "2020-09-02T17:14:06Z", "message": "added translateException method to TableQueryNextPageWorker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a615bfe3a03a951ecf34c4b1826ae542ca3c7dac", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a615bfe3a03a951ecf34c4b1826ae542ca3c7dac", "committedDate": "2020-09-02T18:22:06Z", "message": "removed E2E test -- not necessary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6303e152102fa37e26dc0ac23e61ee2d75762e9", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a6303e152102fa37e26dc0ac23e61ee2d75762e9", "committedDate": "2020-09-02T23:10:12Z", "message": "added Note to parse Exception in TableQueryUtils, added more integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff60832f4a5b2912a906d20273072069c0fde662", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/ff60832f4a5b2912a906d20273072069c0fde662", "committedDate": "2020-09-03T17:03:53Z", "message": " added test in TableQueryUtilsTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/fd81489e24316c298bede15d54a75c2c0e91ea65", "committedDate": "2020-09-03T17:55:56Z", "message": "minor changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODIwMTM4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#pullrequestreview-482820138", "createdAt": "2020-09-04T17:04:02Z", "commit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzowNDowMlrOHNVwFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxODoxNTo0OVrOHNXoFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc0OTkwOA==", "bodyText": "Please use the static modifier", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483749908", "createdAt": "2020-09-04T17:04:02Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/table/TableExceptionTranslatorImpl.java", "diffHunk": "@@ -1,22 +1,26 @@\n package org.sagebionetworks.repo.model.dbo.dao.table;\r\n \r\n+import org.sagebionetworks.repo.model.dao.table.ColumnNameProvider;\r\n+import org.sagebionetworks.repo.model.jdo.KeyFactory;\r\n+import org.sagebionetworks.table.cluster.SQLUtils;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+\r\n import java.sql.SQLException;\r\n import java.util.HashSet;\r\n import java.util.Map;\r\n import java.util.Set;\r\n import java.util.regex.Matcher;\r\n import java.util.regex.Pattern;\r\n \r\n-import org.sagebionetworks.repo.model.dao.table.ColumnNameProvider;\r\n-import org.sagebionetworks.repo.model.jdo.KeyFactory;\r\n-import org.sagebionetworks.table.cluster.SQLUtils;\r\n-import org.springframework.beans.factory.annotation.Autowired;\r\n-\r\n public class TableExceptionTranslatorImpl implements TableExceptionTranslator {\r\n \r\n \tprivate static Pattern PATTERN_TABLE_NAME = Pattern.compile(SQLUtils.TABLE_PREFIX + \"[0-9]+\");\r\n \tprivate static Pattern PATTERN_COLUMM_ID = Pattern\r\n \t\t\t.compile(SQLUtils.COLUMN_PREFIX + \"[0-9]+\" + SQLUtils.COLUMN_POSTFIX);\r\n+\tprivate String UNKNOWN_COLUMN_MESSAGE = \"Unknown column\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1MDQzNQ==", "bodyText": "We can use a \". \" in place of the \\n", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483750435", "createdAt": "2020-09-04T17:05:14Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/table/TableExceptionTranslatorImpl.java", "diffHunk": "@@ -1,22 +1,26 @@\n package org.sagebionetworks.repo.model.dbo.dao.table;\r\n \r\n+import org.sagebionetworks.repo.model.dao.table.ColumnNameProvider;\r\n+import org.sagebionetworks.repo.model.jdo.KeyFactory;\r\n+import org.sagebionetworks.table.cluster.SQLUtils;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+\r\n import java.sql.SQLException;\r\n import java.util.HashSet;\r\n import java.util.Map;\r\n import java.util.Set;\r\n import java.util.regex.Matcher;\r\n import java.util.regex.Pattern;\r\n \r\n-import org.sagebionetworks.repo.model.dao.table.ColumnNameProvider;\r\n-import org.sagebionetworks.repo.model.jdo.KeyFactory;\r\n-import org.sagebionetworks.table.cluster.SQLUtils;\r\n-import org.springframework.beans.factory.annotation.Autowired;\r\n-\r\n public class TableExceptionTranslatorImpl implements TableExceptionTranslator {\r\n \r\n \tprivate static Pattern PATTERN_TABLE_NAME = Pattern.compile(SQLUtils.TABLE_PREFIX + \"[0-9]+\");\r\n \tprivate static Pattern PATTERN_COLUMM_ID = Pattern\r\n \t\t\t.compile(SQLUtils.COLUMN_PREFIX + \"[0-9]+\" + SQLUtils.COLUMN_POSTFIX);\r\n+\tprivate String UNKNOWN_COLUMN_MESSAGE = \"Unknown column\";\r\n+\tprivate String UNQUOTED_KEYWORDS_ERROR_MESSAGE = \"\\nNote: If a column name contains spaces, punctuation,\" +\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1MTQ3Ng==", "bodyText": "Consider using \"See https:...\"", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483751476", "createdAt": "2020-09-04T17:07:39Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/table/TableExceptionTranslatorImpl.java", "diffHunk": "@@ -1,22 +1,26 @@\n package org.sagebionetworks.repo.model.dbo.dao.table;\r\n \r\n+import org.sagebionetworks.repo.model.dao.table.ColumnNameProvider;\r\n+import org.sagebionetworks.repo.model.jdo.KeyFactory;\r\n+import org.sagebionetworks.table.cluster.SQLUtils;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+\r\n import java.sql.SQLException;\r\n import java.util.HashSet;\r\n import java.util.Map;\r\n import java.util.Set;\r\n import java.util.regex.Matcher;\r\n import java.util.regex.Pattern;\r\n \r\n-import org.sagebionetworks.repo.model.dao.table.ColumnNameProvider;\r\n-import org.sagebionetworks.repo.model.jdo.KeyFactory;\r\n-import org.sagebionetworks.table.cluster.SQLUtils;\r\n-import org.springframework.beans.factory.annotation.Autowired;\r\n-\r\n public class TableExceptionTranslatorImpl implements TableExceptionTranslator {\r\n \r\n \tprivate static Pattern PATTERN_TABLE_NAME = Pattern.compile(SQLUtils.TABLE_PREFIX + \"[0-9]+\");\r\n \tprivate static Pattern PATTERN_COLUMM_ID = Pattern\r\n \t\t\t.compile(SQLUtils.COLUMN_PREFIX + \"[0-9]+\" + SQLUtils.COLUMN_POSTFIX);\r\n+\tprivate String UNKNOWN_COLUMN_MESSAGE = \"Unknown column\";\r\n+\tprivate String UNQUOTED_KEYWORDS_ERROR_MESSAGE = \"\\nNote: If a column name contains spaces, punctuation,\" +\r\n+\t\t\t\" or SQL key words, then the name must be enclosed in double quotes. \" +\r\n+\t\t\t\"https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/web/controller/TableExamples.html\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1MjY5NA==", "bodyText": "Might want to use \"append\" rather than \"add\"", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483752694", "createdAt": "2020-09-04T17:10:33Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/table/TableExceptionTranslatorImpl.java", "diffHunk": "@@ -37,6 +41,7 @@ public RuntimeException translateException(Throwable exception) {\n \t\t\t// found a SQLException so we can translate it.\r\n \t\t\tString originalMessage = sqlException.getMessage();\r\n \t\t\tString newMessage = replaceColumnIdsAndTableNames(originalMessage);\r\n+\t\t\tnewMessage = addUnquotedKeyWordMessage(newMessage);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1MzMyMw==", "bodyText": "This can be static, also check formatting", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483753323", "createdAt": "2020-09-04T17:12:00Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/table/TableExceptionTranslatorImpl.java", "diffHunk": "@@ -154,4 +159,13 @@ public String replaceColumnIdsAndTableNames(String input) {\n \t\treturn replaceAllColumnReferences(input, coumnIdToNameMap);\r\n \t}\r\n \r\n+\t/*\r\n+\t * PLFM-6392 Add more informative error message for key words that must be quoted\r\n+\t */\r\n+\tprivate String addUnquotedKeyWordMessage(String input){\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1Mzg5Ng==", "bodyText": "This message can be accessed statically from the class.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483753896", "createdAt": "2020-09-04T17:13:19Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/table/TableExceptionTranslatorTest.java", "diffHunk": "@@ -21,11 +11,24 @@\n import org.springframework.jdbc.UncategorizedSQLException;\r\n import org.springframework.test.util.ReflectionTestUtils;\r\n \r\n-import com.google.common.collect.Sets;\r\n+import java.sql.SQLException;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertNotNull;\r\n+import static org.junit.Assert.assertTrue;\r\n+import static org.mockito.ArgumentMatchers.anySetOf;\r\n+import static org.mockito.Mockito.when;\r\n \r\n @RunWith(MockitoJUnitRunner.class)\r\n public class TableExceptionTranslatorTest {\r\n-\t\r\n+\r\n+\tprivate String UNQUOTED_KEYWORDS_ERROR_MESSAGE = \"\\nNote: If a column name contains spaces, punctuation, \" +\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NjQyNg==", "bodyText": "This can be reverted, no change", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483756426", "createdAt": "2020-09-04T17:19:17Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java", "diffHunk": "@@ -109,8 +48,66 @@\n import org.springframework.transaction.support.TransactionCallback;\r\n import org.springframework.transaction.support.TransactionTemplate;\r\n \r\n-import com.google.common.collect.Maps;\r\n-import com.google.common.collect.Sets;\r\n+import javax.sql.DataSource;\r\n+import java.sql.Connection;\r\n+import java.sql.PreparedStatement;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Iterator;\r\n+import java.util.LinkedHashSet;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Optional;\r\n+import java.util.Set;\r\n+import java.util.function.Function;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.ANNOTATION_KEYS_PARAM_NAME;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.ANNOTATION_REPLICATION_COL_KEY;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.ANNOTATION_REPLICATION_COL_OBJECT_ID;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.ANNOTATION_REPLICATION_COL_STRING_LIST_VALUE;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.ANNOTATION_REPLICATION_COL_TYPE;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.BATCH_INSERT_REPLICATION_SYNC_EXP;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.CRC_ALIAS;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.EXCLUSION_LIST_PARAM_NAME;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.EXPIRES_PARAM_NAME;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.ID_PARAM_NAME;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBEJCT_REPLICATION_COL_ETAG;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_BENEFACTOR_ID;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_CREATED_BY;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_CREATED_ON;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_FILE_ID;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_FILE_MD5;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_FILE_SIZE_BYTES;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_IN_SYNAPSE_STORAGE;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_MODIFIED_BY;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_MODIFIED_ON;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_NAME;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_OBJECT_ID;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_OBJECT_TYPE;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_PARENT_ID;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_PROJECT_ID;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_SUBTYPE;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_COL_VERSION;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_REPLICATION_TABLE;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.OBJECT_TYPE_PARAM_NAME;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.PARENT_ID_PARAM_NAME;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.P_LIMIT;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.P_OFFSET;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.SELECT_NON_EXPIRED_IDS;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.SELECT_OBJECT_CHILD_CRC;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.SELECT_OBJECT_CHILD_ID_ETAG;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.SUBTYPE_PARAM_NAME;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.TRUNCATE_ANNOTATION_REPLICATION_TABLE;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.TRUNCATE_OBJECT_REPLICATION_TABLE;\r\n+import static org.sagebionetworks.repo.model.table.TableConstants.TRUNCATE_REPLICATION_SYNC_EXPIRATION_TABLE;\r\n \r\n public class TableIndexDAOImpl implements TableIndexDAO {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NjU0MQ==", "bodyText": "This can be reverted, no change", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483756541", "createdAt": "2020-09-04T17:19:34Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/file/download/BulkDownloadManagerImpl.java", "diffHunk": "@@ -46,7 +41,11 @@\n import org.sagebionetworks.workers.util.semaphore.LockUnavilableException;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-import com.google.common.collect.Lists;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n \n public class BulkDownloadManagerImpl implements BulkDownloadManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc2NTMwOA==", "bodyText": "We should add the original ParseException as the cause of the wrapper exception, rather than creating a new instance:\nthrow new IllegalArgumentException(e.getMessage() + UNQUOTED_KEYWORDS_ERROR_MESSAGE, e);", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483765308", "createdAt": "2020-09-04T17:39:39Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/TableQueryUtils.java", "diffHunk": "@@ -130,7 +133,7 @@ public static String extractTableIdFromSql(String sql){\n \t\t} catch (TokenMgrError e) {\r\n \t\t\tthrow new IllegalArgumentException(\"The provided SQL query could not be parsed.\",e);\r\n \t\t}catch (ParseException e) {\r\n-\t\t\tthrow new IllegalArgumentException(e);\r\n+\t\t\tthrow new IllegalArgumentException(new ParseException(e.getMessage() + UNQUOTED_KEYWORDS_ERROR_MESSAGE));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc2NTg1Mg==", "bodyText": "This constant should not be duplicated between this class and the TableExceptionTranslatorImpl, you might want to consider moving the \"enriching method\" (e.g. appendUnqueoted...) to a common location (For example TableConstants or TableExceptionTranslator interface itself).", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483765852", "createdAt": "2020-09-04T17:40:54Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/TableQueryUtils.java", "diffHunk": "@@ -17,8 +14,14 @@\n import org.sagebionetworks.table.query.TokenMgrError;\r\n import org.sagebionetworks.util.ValidateArgument;\r\n \r\n+import java.io.StringWriter;\r\n+import java.util.List;\r\n+\r\n public class TableQueryUtils {\r\n \r\n+\tprivate static final String UNQUOTED_KEYWORDS_ERROR_MESSAGE = \"\\nNote: If a column name contains spaces, punctuation, \" +\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc3MzY0Mg==", "bodyText": "You can access the constant.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483773642", "createdAt": "2020-09-04T17:59:14Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/table/TableQueryUtilsTest.java", "diffHunk": "@@ -19,10 +15,19 @@\n import org.sagebionetworks.repo.model.table.SortDirection;\r\n import org.sagebionetworks.repo.model.table.SortItem;\r\n \r\n-import com.google.common.collect.Lists;\r\n+import java.util.List;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.assertEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\r\n+import static org.junit.jupiter.api.Assertions.assertThrows;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n \r\n public class TableQueryUtilsTest {\r\n-\t\r\n+\r\n+\tprivate String UNQUOTED_KEYWORDS_ERROR_MESSAGE = \"\\nNote: If a column name contains spaces, punctuation,\" +\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc3NDIzOA==", "bodyText": "Better naming might be: testExtractTableIdFromSqlWithParserException", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483774238", "createdAt": "2020-09-04T18:00:42Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/table/TableQueryUtilsTest.java", "diffHunk": "@@ -164,4 +169,19 @@ public void testPLFM_6027() {\n \t\tString result = TableQueryUtils.extractTableIdFromSql(sql);\r\n \t\tassertEquals(\"syn123\", result);\r\n \t}\r\n+\r\n+\t@Test\r\n+\t/**\r\n+\t * PLFM-6392 Add a more informative message to the user for cases where keywords\r\n+\t * must be escaped.\r\n+\t */\r\n+\tpublic void testUnquotedKeywordsErrorMessage() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc3NDc2MA==", "bodyText": "You can simply use assertEquals(\"Expected error message\", exception.getMessage())", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483774760", "createdAt": "2020-09-04T18:02:07Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/table/TableQueryUtilsTest.java", "diffHunk": "@@ -164,4 +169,19 @@ public void testPLFM_6027() {\n \t\tString result = TableQueryUtils.extractTableIdFromSql(sql);\r\n \t\tassertEquals(\"syn123\", result);\r\n \t}\r\n+\r\n+\t@Test\r\n+\t/**\r\n+\t * PLFM-6392 Add a more informative message to the user for cases where keywords\r\n+\t * must be escaped.\r\n+\t */\r\n+\tpublic void testUnquotedKeywordsErrorMessage() {\r\n+\t\tString sql = \"select year from syn123 where year = 1\";\r\n+\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\tTableQueryUtils.extractTableIdFromSql(sql);\r\n+\t\t});\r\n+\t\tassertNotNull(exception);\r\n+\t\tassertNotNull(exception.getMessage());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc3NTAzOA==", "bodyText": "This check is not necessary since the assertThrows always returns the exception (otherwise it would fail the test)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483775038", "createdAt": "2020-09-04T18:02:47Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/table/TableQueryUtilsTest.java", "diffHunk": "@@ -164,4 +169,19 @@ public void testPLFM_6027() {\n \t\tString result = TableQueryUtils.extractTableIdFromSql(sql);\r\n \t\tassertEquals(\"syn123\", result);\r\n \t}\r\n+\r\n+\t@Test\r\n+\t/**\r\n+\t * PLFM-6392 Add a more informative message to the user for cases where keywords\r\n+\t * must be escaped.\r\n+\t */\r\n+\tpublic void testUnquotedKeywordsErrorMessage() {\r\n+\t\tString sql = \"select year from syn123 where year = 1\";\r\n+\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\tTableQueryUtils.extractTableIdFromSql(sql);\r\n+\t\t});\r\n+\t\tassertNotNull(exception);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc3NjAwNw==", "bodyText": "This translatedException is not used, you might need to set this in the job status: asynchJobStatusManager.setJobFailed(status.getJobId(), translatedException);", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483776007", "createdAt": "2020-09-04T18:05:09Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/main/java/org/sagebionetworks/table/worker/TableQueryNextPageWorker.java", "diffHunk": "@@ -53,6 +56,8 @@ public void run(ProgressCallback progressCallback, Message message)\n \t\t\t// This means we cannot use this table\n \t\t\tasynchJobStatusManager.setJobFailed(status.getJobId(), e);\n \t\t}catch(Throwable e){\n+\t\t\t// Attempt to translate the exception into a 'user-friendly' message.\n+\t\t\tRuntimeException translatedException = tableExceptionTranslator.translateException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc3Njg1MQ==", "bodyText": "This can be reverted as there is no change.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483776851", "createdAt": "2020-09-04T18:07:09Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/test/java/org/sagebionetworks/table/worker/TableQueryWorkerTest.java", "diffHunk": "@@ -32,7 +25,13 @@\n import org.sagebionetworks.workers.util.semaphore.LockUnavilableException;\r\n import org.springframework.test.util.ReflectionTestUtils;\r\n \r\n-import com.amazonaws.services.sqs.model.Message;\r\n+import static org.junit.Assert.fail;\r\n+import static org.mockito.ArgumentMatchers.any;\r\n+import static org.mockito.ArgumentMatchers.anyString;\r\n+import static org.mockito.ArgumentMatchers.eq;\r\n+import static org.mockito.Mockito.doAnswer;\r\n+import static org.mockito.Mockito.verify;\r\n+import static org.mockito.Mockito.when;\r\n \r\n @RunWith(MockitoJUnitRunner.class)\r\n public class TableQueryWorkerTest {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc3ODA3OQ==", "bodyText": "This block of code from 2081 to 2827 is unused in the test.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483778079", "createdAt": "2020-09-04T18:10:00Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/test/java/org/sagebionetworks/table/worker/TableWorkerIntegrationTest.java", "diffHunk": "@@ -2798,6 +2801,57 @@ public void testPLFM_5240Open() throws Exception {\n \t\t});\r\n \t}\r\n \r\n+\t/**\r\n+\t * PLFM-6392\r\n+\t * @throws Exception\r\n+\t */\r\n+\t@Test\r\n+\tpublic void testQueryWithUnquotedKeyword() throws Exception{\r\n+\t\tColumnModel year = new ColumnModel();\r\n+\t\tyear.setColumnType(ColumnType.STRING);\r\n+\t\tyear.setMaximumSize(50L);\r\n+\t\tyear.setName(\"year\");\r\n+\t\tyear = columnManager.createColumnModel(adminUserInfo, year);\r\n+\t\tschema = Lists.newArrayList(year);\r\n+\t\t// build a table with this column.\r\n+\t\tcreateTableWithSchema();\r\n+\t\tTableStatus status = waitForTableProcessing(tableId);\r\n+\t\tassertTrue(TableState.AVAILABLE.equals(status.getState()));\r\n+\r\n+\t\tRowSet rowSet = new RowSet();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc3OTg3Mw==", "bodyText": "The error message might be something like: \"This should have failed with an IllegalArgumentException\"", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483779873", "createdAt": "2020-09-04T18:14:08Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/test/java/org/sagebionetworks/table/worker/TableWorkerIntegrationTest.java", "diffHunk": "@@ -2798,6 +2801,57 @@ public void testPLFM_5240Open() throws Exception {\n \t\t});\r\n \t}\r\n \r\n+\t/**\r\n+\t * PLFM-6392\r\n+\t * @throws Exception\r\n+\t */\r\n+\t@Test\r\n+\tpublic void testQueryWithUnquotedKeyword() throws Exception{\r\n+\t\tColumnModel year = new ColumnModel();\r\n+\t\tyear.setColumnType(ColumnType.STRING);\r\n+\t\tyear.setMaximumSize(50L);\r\n+\t\tyear.setName(\"year\");\r\n+\t\tyear = columnManager.createColumnModel(adminUserInfo, year);\r\n+\t\tschema = Lists.newArrayList(year);\r\n+\t\t// build a table with this column.\r\n+\t\tcreateTableWithSchema();\r\n+\t\tTableStatus status = waitForTableProcessing(tableId);\r\n+\t\tassertTrue(TableState.AVAILABLE.equals(status.getState()));\r\n+\r\n+\t\tRowSet rowSet = new RowSet();\r\n+\t\trowSet.setRows(Lists.newArrayList(\r\n+\t\t\t\tTableModelTestUtils.createRow(null, null, \"2020\")));\r\n+\t\trowSet.setHeaders(TableModelUtils.getSelectColumns(schema));\r\n+\t\trowSet.setTableId(tableId);\r\n+\t\treferenceSet = appendRows(adminUserInfo, tableId,\r\n+\t\t\t\trowSet, mockProgressCallback);\r\n+\r\n+\t\tThrowable selectClauseException = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\twaitForConsistentQuery(adminUserInfo, \"select year from \" + tableId, null, null, (queryResult) -> {\r\n+\t\t\t\tfail(\"Throw IllegalArgumentException\");\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc4MDQwNw==", "bodyText": "The null check is not needed as the assertThrows always returns the exception or fail", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483780407", "createdAt": "2020-09-04T18:15:16Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/test/java/org/sagebionetworks/table/worker/TableWorkerIntegrationTest.java", "diffHunk": "@@ -2798,6 +2801,57 @@ public void testPLFM_5240Open() throws Exception {\n \t\t});\r\n \t}\r\n \r\n+\t/**\r\n+\t * PLFM-6392\r\n+\t * @throws Exception\r\n+\t */\r\n+\t@Test\r\n+\tpublic void testQueryWithUnquotedKeyword() throws Exception{\r\n+\t\tColumnModel year = new ColumnModel();\r\n+\t\tyear.setColumnType(ColumnType.STRING);\r\n+\t\tyear.setMaximumSize(50L);\r\n+\t\tyear.setName(\"year\");\r\n+\t\tyear = columnManager.createColumnModel(adminUserInfo, year);\r\n+\t\tschema = Lists.newArrayList(year);\r\n+\t\t// build a table with this column.\r\n+\t\tcreateTableWithSchema();\r\n+\t\tTableStatus status = waitForTableProcessing(tableId);\r\n+\t\tassertTrue(TableState.AVAILABLE.equals(status.getState()));\r\n+\r\n+\t\tRowSet rowSet = new RowSet();\r\n+\t\trowSet.setRows(Lists.newArrayList(\r\n+\t\t\t\tTableModelTestUtils.createRow(null, null, \"2020\")));\r\n+\t\trowSet.setHeaders(TableModelUtils.getSelectColumns(schema));\r\n+\t\trowSet.setTableId(tableId);\r\n+\t\treferenceSet = appendRows(adminUserInfo, tableId,\r\n+\t\t\t\trowSet, mockProgressCallback);\r\n+\r\n+\t\tThrowable selectClauseException = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\twaitForConsistentQuery(adminUserInfo, \"select year from \" + tableId, null, null, (queryResult) -> {\r\n+\t\t\t\tfail(\"Throw IllegalArgumentException\");\r\n+\t\t\t});\r\n+\t\t});\r\n+\t\tassertNotNull(selectClauseException);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc4MDYyOQ==", "bodyText": "Try to use an assertEquals rather than contains.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#discussion_r483780629", "createdAt": "2020-09-04T18:15:49Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/test/java/org/sagebionetworks/table/worker/TableWorkerIntegrationTest.java", "diffHunk": "@@ -2798,6 +2801,57 @@ public void testPLFM_5240Open() throws Exception {\n \t\t});\r\n \t}\r\n \r\n+\t/**\r\n+\t * PLFM-6392\r\n+\t * @throws Exception\r\n+\t */\r\n+\t@Test\r\n+\tpublic void testQueryWithUnquotedKeyword() throws Exception{\r\n+\t\tColumnModel year = new ColumnModel();\r\n+\t\tyear.setColumnType(ColumnType.STRING);\r\n+\t\tyear.setMaximumSize(50L);\r\n+\t\tyear.setName(\"year\");\r\n+\t\tyear = columnManager.createColumnModel(adminUserInfo, year);\r\n+\t\tschema = Lists.newArrayList(year);\r\n+\t\t// build a table with this column.\r\n+\t\tcreateTableWithSchema();\r\n+\t\tTableStatus status = waitForTableProcessing(tableId);\r\n+\t\tassertTrue(TableState.AVAILABLE.equals(status.getState()));\r\n+\r\n+\t\tRowSet rowSet = new RowSet();\r\n+\t\trowSet.setRows(Lists.newArrayList(\r\n+\t\t\t\tTableModelTestUtils.createRow(null, null, \"2020\")));\r\n+\t\trowSet.setHeaders(TableModelUtils.getSelectColumns(schema));\r\n+\t\trowSet.setTableId(tableId);\r\n+\t\treferenceSet = appendRows(adminUserInfo, tableId,\r\n+\t\t\t\trowSet, mockProgressCallback);\r\n+\r\n+\t\tThrowable selectClauseException = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\twaitForConsistentQuery(adminUserInfo, \"select year from \" + tableId, null, null, (queryResult) -> {\r\n+\t\t\t\tfail(\"Throw IllegalArgumentException\");\r\n+\t\t\t});\r\n+\t\t});\r\n+\t\tassertNotNull(selectClauseException);\r\n+\t\tassertNotNull(selectClauseException.getMessage());\r\n+\t\tassertTrue(selectClauseException.getMessage().contains(UNQUOTED_KEYWORDS_ERROR_MESSAGE));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd81489e24316c298bede15d54a75c2c0e91ea65"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d809c7e308b210839b9259beb1dd2e481edbc37", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/7d809c7e308b210839b9259beb1dd2e481edbc37", "committedDate": "2020-09-04T20:46:39Z", "message": "pull request changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4afa558c8f6372e21d2f39d8dd62148bfb2e3e2", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a4afa558c8f6372e21d2f39d8dd62148bfb2e3e2", "committedDate": "2020-09-04T21:14:01Z", "message": " revert TableIndexDaoImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f4c4f4b86e4127d500ba6766391c38537caad46", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/0f4c4f4b86e4127d500ba6766391c38537caad46", "committedDate": "2020-09-04T21:24:26Z", "message": "more specific test name , used assertEquals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39844f08a7546d75f3c817fb2b7ac82ffd21a32f", "author": {"user": {"login": "nlgilber", "name": "Nicoletta"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/39844f08a7546d75f3c817fb2b7ac82ffd21a32f", "committedDate": "2020-09-04T21:35:24Z", "message": " switched expected/actual assertions to correct places"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTY0ODc4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#pullrequestreview-482964878", "createdAt": "2020-09-04T21:38:53Z", "commit": {"oid": "39844f08a7546d75f3c817fb2b7ac82ffd21a32f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDA5Njk0", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4192#pullrequestreview-483009694", "createdAt": "2020-09-04T23:44:06Z", "commit": {"oid": "39844f08a7546d75f3c817fb2b7ac82ffd21a32f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4644, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}