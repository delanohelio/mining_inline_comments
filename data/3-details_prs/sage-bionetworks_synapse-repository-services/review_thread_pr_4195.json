{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNjM4Nzcx", "number": 4195, "reviewThreads": {"totalCount": 65, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo0NjowNVrOEh4lbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjoyNjo0NFrOEjV88w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTY1NTUwOnYy", "diffSide": "RIGHT", "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/evaluation/model/Evaluation.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo0NjowNVrOHPczmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo0NjowNVrOHPczmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2MjY0OA==", "bodyText": "You could add a link to the new round API", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485962648", "createdAt": "2020-09-09T22:46:05Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/evaluation/model/Evaluation.json", "diffHunk": "@@ -50,7 +50,7 @@\n \t\t},\n \t\t\"quota\": {\n \t\t\t\"type\":\"object\",\n-\t\t\t\"description\":\"Maximum submissions per team/participant per submission round\",\n+\t\t\t\"description\":\"DEPRECATED. Maximum submissions per team/participant per submission round\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTY2MjMyOnYy", "diffSide": "RIGHT", "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/evaluation/model/EvaluationRoundLimit.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo0OTowOFrOHPc3yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo0OTowOFrOHPc3yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2MzcyMA==", "bodyText": "Might want to document which kind of limits can go together, if there are limitations on mix and matching.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485963720", "createdAt": "2020-09-09T22:49:08Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/evaluation/model/EvaluationRoundLimit.json", "diffHunk": "@@ -0,0 +1,34 @@\n+{\n+\t\"description\": \"Sets limits for maximum submissions in a SubmissionRound.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTY3MjA4OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/resources/private/dbo-beans.spb.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo1Mzo0NVrOHPc9sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo1Mzo0NVrOHPc9sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2NTIzMg==", "bodyText": "You might want to consider to make it a primary table (it has its own etag)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485965232", "createdAt": "2020-09-09T22:53:45Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/resources/private/dbo-beans.spb.xml", "diffHunk": "@@ -65,6 +65,7 @@\n \t\t\t\t<bean class=\"org.sagebionetworks.repo.model.dbo.persistence.DBOMembershipRequest\" />\r\n \t\t\t\t<!-- Evaluation beans -->\r\n \t\t\t\t<bean class=\"org.sagebionetworks.evaluation.dbo.EvaluationDBO\" />\r\n+\t\t\t\t<bean class=\"org.sagebionetworks.evaluation.dbo.EvaluationRoundDBO\" />\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTY3MzU4OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/query/SQLConstants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo1NDozMFrOHPc-pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo1NDozMFrOHPc-pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2NTQ3OQ==", "bodyText": "We might want to drop the JDO", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485965479", "createdAt": "2020-09-09T22:54:30Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/query/SQLConstants.java", "diffHunk": "@@ -34,6 +34,16 @@\n \tpublic static final String COL_EVALUATION_QUOTA\t\t\t\t= \"QUOTA\";\n \tpublic static final String COL_EVALUATION_START_TIMESTAMP\t\t= \"START_TIMESTAMP\";\n \tpublic static final String COL_EVALUATION_END_TIMESTAMP\t\t= \"END_TIMESTAMP\";\n+\n+\t// Evaluation Round table constants\n+\tpublic static final String DDL_FILE_EVALUATION_ROUND\t\t\t= \"schema/evaluation/EvaluationRound-ddl.sql\";\n+\tpublic static final String TABLE_EVALUATION_ROUND\t\t\t\t= \"JDOEVALUATIONROUNDS\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTY4MTcwOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/resources/schema/evaluation/EvaluationRound-ddl.sql", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo1ODoyMFrOHPdDlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo1ODoyMFrOHPdDlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2Njc0MA==", "bodyText": "We might want to consider using a timestamp", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485966740", "createdAt": "2020-09-09T22:58:20Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/resources/schema/evaluation/EvaluationRound-ddl.sql", "diffHunk": "@@ -0,0 +1,13 @@\n+CREATE TABLE IF NOT EXISTS JDOEVALUATIONROUNDS (\n+    ID BIGINT NOT NULL,\n+    ETAG char(36) NOT NULL,\n+    EVALUATION_ID BIGINT NOT NULL,\n+    ROUND_START BIGINT NOT NULL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTY4NjY1OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/resources/schema/evaluation/EvaluationRound-ddl.sql", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowMDoxOVrOHPdGgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowMDoxOVrOHPdGgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2NzQ5MQ==", "bodyText": "Might want to be explicit about the index for the FK (Mysql creates an index automagically), also name the FK", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485967491", "createdAt": "2020-09-09T23:00:19Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/resources/schema/evaluation/EvaluationRound-ddl.sql", "diffHunk": "@@ -0,0 +1,13 @@\n+CREATE TABLE IF NOT EXISTS JDOEVALUATIONROUNDS (\n+    ID BIGINT NOT NULL,\n+    ETAG char(36) NOT NULL,\n+    EVALUATION_ID BIGINT NOT NULL,\n+    ROUND_START BIGINT NOT NULL,\n+    ROUND_END BIGINT NOT NULL,\n+    LIMITS JSON,\n+\n+    PRIMARY KEY (ID),\n+    INDEX (ROUND_START),\n+    INDEX (ROUND_END),\n+    FOREIGN KEY (EVALUATION_ID) REFERENCES JDOEVALUATION (ID) ON DELETE CASCADE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTY4NjkxOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/resources/schema/evaluation/EvaluationRound-ddl.sql", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowMDoyN1rOHPdGrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowMDoyN1rOHPdGrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2NzUzMw==", "bodyText": "Give a name to this indexes", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485967533", "createdAt": "2020-09-09T23:00:27Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/resources/schema/evaluation/EvaluationRound-ddl.sql", "diffHunk": "@@ -0,0 +1,13 @@\n+CREATE TABLE IF NOT EXISTS JDOEVALUATIONROUNDS (\n+    ID BIGINT NOT NULL,\n+    ETAG char(36) NOT NULL,\n+    EVALUATION_ID BIGINT NOT NULL,\n+    ROUND_START BIGINT NOT NULL,\n+    ROUND_END BIGINT NOT NULL,\n+    LIMITS JSON,\n+\n+    PRIMARY KEY (ID),\n+    INDEX (ROUND_START),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTY5MjMzOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/resources/schema/evaluation/Submission-ddl.sql", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowMzowM1rOHPdKAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowMzowM1rOHPdKAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2ODM4Nw==", "bodyText": "We might need to add the FK with an ON DELETE RESTRICT", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485968387", "createdAt": "2020-09-09T23:03:03Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/resources/schema/evaluation/Submission-ddl.sql", "diffHunk": "@@ -2,6 +2,7 @@ CREATE TABLE IF NOT EXISTS JDOSUBMISSION (\n     ID BIGINT NOT NULL,\n     NAME varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci,\n     EVALUATION_ID BIGINT NOT NULL,\n+    EVALUATION_ROUND_ID BIGINT DEFAULT NULL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTY5NDk3OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/SubmissionDBO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowNDoyNlrOHPdLow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowNDoyNlrOHPdLow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2ODgwMw==", "bodyText": "You might want to update the hashcode and equals as well (Shouldn't the tests fail?)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485968803", "createdAt": "2020-09-09T23:04:26Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/SubmissionDBO.java", "diffHunk": "@@ -145,7 +155,15 @@ public Long getEvalId() {\n \tpublic void setEvalId(Long evalId) {\n \t\tthis.evalId = evalId;\n \t}\n-\t\n+\n+\tpublic Long getEvalRoundId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTY5NzQ1OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowNToyN1rOHPdNEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowNToyN1rOHPdNEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2OTE2OA==", "bodyText": "Do you need the ObservableEntity interface?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485969168", "createdAt": "2020-09-09T23:05:27Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBO.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.sagebionetworks.evaluation.dbo;\n+\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ETAG;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_EVALUATION_ID;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ID;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_LIMITS_JSON;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ROUND_END;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ROUND_START;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ETAG;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_EVALUATION_ID;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ID;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_LIMITS;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ROUND_END;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ROUND_START;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.DDL_FILE_EVALUATION_ROUND;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.TABLE_EVALUATION_ROUND;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.sagebionetworks.repo.model.ObjectType;\n+import org.sagebionetworks.repo.model.ObservableEntity;\n+import org.sagebionetworks.repo.model.dbo.FieldColumn;\n+import org.sagebionetworks.repo.model.dbo.MigratableDatabaseObject;\n+import org.sagebionetworks.repo.model.dbo.TableMapping;\n+import org.sagebionetworks.repo.model.dbo.migration.BasicMigratableTableTranslation;\n+import org.sagebionetworks.repo.model.dbo.migration.MigratableTableTranslation;\n+import org.sagebionetworks.repo.model.migration.MigrationType;\n+\n+public class EvaluationRoundDBO implements MigratableDatabaseObject<EvaluationRoundDBO, EvaluationRoundDBO>, ObservableEntity {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTcwMDIyOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationDBO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowNjo0M1rOHPdOtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowNjo0M1rOHPdOtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2OTU5MA==", "bodyText": "You might want remove this (Now the round is referenced by both the submission and the evaluation)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485969590", "createdAt": "2020-09-09T23:06:43Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationDBO.java", "diffHunk": "@@ -263,7 +263,7 @@ public MigrationType getMigratableTableType() {\n \t}\n \t@Override\n \tpublic List<MigratableDatabaseObject<?,?>> getSecondaryTypes() {\n-\t\treturn null;\n+\t\treturn Arrays.asList(new EvaluationRoundDBO());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTcwMjgxOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowNzo1NFrOHPdQKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowNzo1NFrOHPdQKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2OTk2MQ==", "bodyText": "Long vs long", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485969961", "createdAt": "2020-09-09T23:07:54Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBO.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.sagebionetworks.evaluation.dbo;\n+\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ETAG;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_EVALUATION_ID;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ID;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_LIMITS_JSON;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ROUND_END;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ROUND_START;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ETAG;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_EVALUATION_ID;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ID;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_LIMITS;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ROUND_END;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ROUND_START;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.DDL_FILE_EVALUATION_ROUND;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.TABLE_EVALUATION_ROUND;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.sagebionetworks.repo.model.ObjectType;\n+import org.sagebionetworks.repo.model.ObservableEntity;\n+import org.sagebionetworks.repo.model.dbo.FieldColumn;\n+import org.sagebionetworks.repo.model.dbo.MigratableDatabaseObject;\n+import org.sagebionetworks.repo.model.dbo.TableMapping;\n+import org.sagebionetworks.repo.model.dbo.migration.BasicMigratableTableTranslation;\n+import org.sagebionetworks.repo.model.dbo.migration.MigratableTableTranslation;\n+import org.sagebionetworks.repo.model.migration.MigrationType;\n+\n+public class EvaluationRoundDBO implements MigratableDatabaseObject<EvaluationRoundDBO, EvaluationRoundDBO>, ObservableEntity {\n+\n+\tprivate static final FieldColumn[] FIELDS = new FieldColumn[] {\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ID, COL_EVALUATION_ROUND_ID, true).withIsBackupId(true),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ETAG, COL_EVALUATION_ROUND_ETAG).withIsEtag(true),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_EVALUATION_ID, COL_EVALUATION_ROUND_EVALUATION_ID),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ROUND_START, COL_EVALUATION_ROUND_ROUND_START),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ROUND_END, COL_EVALUATION_ROUND_ROUND_END),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_LIMITS_JSON, COL_EVALUATION_ROUND_LIMITS)\n+\t};\n+\n+\tprivate Long id;\n+\tprivate String etag;\n+\tprivate Long evaluationId;\n+\tprivate long roundStart;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTcwMzgyOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowODoyN1rOHPdQvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowODoyN1rOHPdQvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MDExMQ==", "bodyText": "Can be extracted to a constant", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485970111", "createdAt": "2020-09-09T23:08:27Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBO.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.sagebionetworks.evaluation.dbo;\n+\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ETAG;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_EVALUATION_ID;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ID;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_LIMITS_JSON;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ROUND_END;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ROUND_START;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ETAG;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_EVALUATION_ID;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ID;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_LIMITS;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ROUND_END;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ROUND_START;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.DDL_FILE_EVALUATION_ROUND;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.TABLE_EVALUATION_ROUND;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.sagebionetworks.repo.model.ObjectType;\n+import org.sagebionetworks.repo.model.ObservableEntity;\n+import org.sagebionetworks.repo.model.dbo.FieldColumn;\n+import org.sagebionetworks.repo.model.dbo.MigratableDatabaseObject;\n+import org.sagebionetworks.repo.model.dbo.TableMapping;\n+import org.sagebionetworks.repo.model.dbo.migration.BasicMigratableTableTranslation;\n+import org.sagebionetworks.repo.model.dbo.migration.MigratableTableTranslation;\n+import org.sagebionetworks.repo.model.migration.MigrationType;\n+\n+public class EvaluationRoundDBO implements MigratableDatabaseObject<EvaluationRoundDBO, EvaluationRoundDBO>, ObservableEntity {\n+\n+\tprivate static final FieldColumn[] FIELDS = new FieldColumn[] {\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ID, COL_EVALUATION_ROUND_ID, true).withIsBackupId(true),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ETAG, COL_EVALUATION_ROUND_ETAG).withIsEtag(true),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_EVALUATION_ID, COL_EVALUATION_ROUND_EVALUATION_ID),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ROUND_START, COL_EVALUATION_ROUND_ROUND_START),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ROUND_END, COL_EVALUATION_ROUND_ROUND_END),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_LIMITS_JSON, COL_EVALUATION_ROUND_LIMITS)\n+\t};\n+\n+\tprivate Long id;\n+\tprivate String etag;\n+\tprivate Long evaluationId;\n+\tprivate long roundStart;\n+\tprivate long roundEnd;\n+\tprivate String limitsJson;\n+\n+\t@Override\n+\tpublic String getIdString() {\n+\t\treturn id.toString();\n+\t}\n+\n+\t@Override\n+\tpublic ObjectType getObjectType() {\n+\t\treturn ObjectType.EVALUATION_ROUND;\n+\t}\n+\n+\t@Override\n+\tpublic MigrationType getMigratableTableType() {\n+\t\treturn MigrationType.EVALUATION_ROUND;\n+\t}\n+\n+\t@Override\n+\tpublic MigratableTableTranslation<EvaluationRoundDBO, EvaluationRoundDBO> getTranslator() {\n+\t\treturn new BasicMigratableTableTranslation<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTcwNDM0OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowODo0NlrOHPdREQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowODo0NlrOHPdREQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MDE5Mw==", "bodyText": "Remove comment", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485970193", "createdAt": "2020-09-09T23:08:46Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBO.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.sagebionetworks.evaluation.dbo;\n+\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ETAG;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_EVALUATION_ID;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ID;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_LIMITS_JSON;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ROUND_END;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ROUND_START;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ETAG;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_EVALUATION_ID;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ID;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_LIMITS;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ROUND_END;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ROUND_START;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.DDL_FILE_EVALUATION_ROUND;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.TABLE_EVALUATION_ROUND;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.sagebionetworks.repo.model.ObjectType;\n+import org.sagebionetworks.repo.model.ObservableEntity;\n+import org.sagebionetworks.repo.model.dbo.FieldColumn;\n+import org.sagebionetworks.repo.model.dbo.MigratableDatabaseObject;\n+import org.sagebionetworks.repo.model.dbo.TableMapping;\n+import org.sagebionetworks.repo.model.dbo.migration.BasicMigratableTableTranslation;\n+import org.sagebionetworks.repo.model.dbo.migration.MigratableTableTranslation;\n+import org.sagebionetworks.repo.model.migration.MigrationType;\n+\n+public class EvaluationRoundDBO implements MigratableDatabaseObject<EvaluationRoundDBO, EvaluationRoundDBO>, ObservableEntity {\n+\n+\tprivate static final FieldColumn[] FIELDS = new FieldColumn[] {\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ID, COL_EVALUATION_ROUND_ID, true).withIsBackupId(true),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ETAG, COL_EVALUATION_ROUND_ETAG).withIsEtag(true),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_EVALUATION_ID, COL_EVALUATION_ROUND_EVALUATION_ID),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ROUND_START, COL_EVALUATION_ROUND_ROUND_START),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ROUND_END, COL_EVALUATION_ROUND_ROUND_END),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_LIMITS_JSON, COL_EVALUATION_ROUND_LIMITS)\n+\t};\n+\n+\tprivate Long id;\n+\tprivate String etag;\n+\tprivate Long evaluationId;\n+\tprivate long roundStart;\n+\tprivate long roundEnd;\n+\tprivate String limitsJson;\n+\n+\t@Override\n+\tpublic String getIdString() {\n+\t\treturn id.toString();\n+\t}\n+\n+\t@Override\n+\tpublic ObjectType getObjectType() {\n+\t\treturn ObjectType.EVALUATION_ROUND;\n+\t}\n+\n+\t@Override\n+\tpublic MigrationType getMigratableTableType() {\n+\t\treturn MigrationType.EVALUATION_ROUND;\n+\t}\n+\n+\t@Override\n+\tpublic MigratableTableTranslation<EvaluationRoundDBO, EvaluationRoundDBO> getTranslator() {\n+\t\treturn new BasicMigratableTableTranslation<>();\n+\t}\n+\n+\t@Override\n+\tpublic Class<? extends EvaluationRoundDBO> getBackupClass() {\n+\t\treturn EvaluationRoundDBO.class;\n+\t}\n+\n+\t@Override\n+\tpublic Class<? extends EvaluationRoundDBO> getDatabaseObjectClass() {\n+\t\treturn EvaluationRoundDBO.class;\n+\t}\n+\n+\t@Override\n+\tpublic List<MigratableDatabaseObject<?, ?>> getSecondaryTypes() {\n+//\t\treturn Arrays.asList(new SubmissionDBO());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTcwNDUzOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowODo1NFrOHPdRMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowODo1NFrOHPdRMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MDIyNg==", "bodyText": "Can be extracted to a constant", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485970226", "createdAt": "2020-09-09T23:08:54Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBO.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.sagebionetworks.evaluation.dbo;\n+\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ETAG;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_EVALUATION_ID;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ID;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_LIMITS_JSON;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ROUND_END;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ROUND_START;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ETAG;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_EVALUATION_ID;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ID;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_LIMITS;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ROUND_END;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ROUND_START;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.DDL_FILE_EVALUATION_ROUND;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.TABLE_EVALUATION_ROUND;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.sagebionetworks.repo.model.ObjectType;\n+import org.sagebionetworks.repo.model.ObservableEntity;\n+import org.sagebionetworks.repo.model.dbo.FieldColumn;\n+import org.sagebionetworks.repo.model.dbo.MigratableDatabaseObject;\n+import org.sagebionetworks.repo.model.dbo.TableMapping;\n+import org.sagebionetworks.repo.model.dbo.migration.BasicMigratableTableTranslation;\n+import org.sagebionetworks.repo.model.dbo.migration.MigratableTableTranslation;\n+import org.sagebionetworks.repo.model.migration.MigrationType;\n+\n+public class EvaluationRoundDBO implements MigratableDatabaseObject<EvaluationRoundDBO, EvaluationRoundDBO>, ObservableEntity {\n+\n+\tprivate static final FieldColumn[] FIELDS = new FieldColumn[] {\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ID, COL_EVALUATION_ROUND_ID, true).withIsBackupId(true),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ETAG, COL_EVALUATION_ROUND_ETAG).withIsEtag(true),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_EVALUATION_ID, COL_EVALUATION_ROUND_EVALUATION_ID),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ROUND_START, COL_EVALUATION_ROUND_ROUND_START),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ROUND_END, COL_EVALUATION_ROUND_ROUND_END),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_LIMITS_JSON, COL_EVALUATION_ROUND_LIMITS)\n+\t};\n+\n+\tprivate Long id;\n+\tprivate String etag;\n+\tprivate Long evaluationId;\n+\tprivate long roundStart;\n+\tprivate long roundEnd;\n+\tprivate String limitsJson;\n+\n+\t@Override\n+\tpublic String getIdString() {\n+\t\treturn id.toString();\n+\t}\n+\n+\t@Override\n+\tpublic ObjectType getObjectType() {\n+\t\treturn ObjectType.EVALUATION_ROUND;\n+\t}\n+\n+\t@Override\n+\tpublic MigrationType getMigratableTableType() {\n+\t\treturn MigrationType.EVALUATION_ROUND;\n+\t}\n+\n+\t@Override\n+\tpublic MigratableTableTranslation<EvaluationRoundDBO, EvaluationRoundDBO> getTranslator() {\n+\t\treturn new BasicMigratableTableTranslation<>();\n+\t}\n+\n+\t@Override\n+\tpublic Class<? extends EvaluationRoundDBO> getBackupClass() {\n+\t\treturn EvaluationRoundDBO.class;\n+\t}\n+\n+\t@Override\n+\tpublic Class<? extends EvaluationRoundDBO> getDatabaseObjectClass() {\n+\t\treturn EvaluationRoundDBO.class;\n+\t}\n+\n+\t@Override\n+\tpublic List<MigratableDatabaseObject<?, ?>> getSecondaryTypes() {\n+//\t\treturn Arrays.asList(new SubmissionDBO());\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic TableMapping<EvaluationRoundDBO> getTableMapping() {\n+\t\treturn new TableMapping<EvaluationRoundDBO>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTcwNjI4OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowOTo0MFrOHPdSNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzowOTo0MFrOHPdSNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MDQ4Ng==", "bodyText": "You probably don't need this validation at this point", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485970486", "createdAt": "2020-09-09T23:09:40Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBO.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.sagebionetworks.evaluation.dbo;\n+\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ETAG;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_EVALUATION_ID;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ID;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_LIMITS_JSON;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ROUND_END;\n+import static org.sagebionetworks.evaluation.dbo.DBOConstants.PARAM_EVALUATION_ROUND_ROUND_START;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ETAG;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_EVALUATION_ID;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ID;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_LIMITS;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ROUND_END;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.COL_EVALUATION_ROUND_ROUND_START;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.DDL_FILE_EVALUATION_ROUND;\n+import static org.sagebionetworks.repo.model.query.SQLConstants.TABLE_EVALUATION_ROUND;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.sagebionetworks.repo.model.ObjectType;\n+import org.sagebionetworks.repo.model.ObservableEntity;\n+import org.sagebionetworks.repo.model.dbo.FieldColumn;\n+import org.sagebionetworks.repo.model.dbo.MigratableDatabaseObject;\n+import org.sagebionetworks.repo.model.dbo.TableMapping;\n+import org.sagebionetworks.repo.model.dbo.migration.BasicMigratableTableTranslation;\n+import org.sagebionetworks.repo.model.dbo.migration.MigratableTableTranslation;\n+import org.sagebionetworks.repo.model.migration.MigrationType;\n+\n+public class EvaluationRoundDBO implements MigratableDatabaseObject<EvaluationRoundDBO, EvaluationRoundDBO>, ObservableEntity {\n+\n+\tprivate static final FieldColumn[] FIELDS = new FieldColumn[] {\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ID, COL_EVALUATION_ROUND_ID, true).withIsBackupId(true),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ETAG, COL_EVALUATION_ROUND_ETAG).withIsEtag(true),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_EVALUATION_ID, COL_EVALUATION_ROUND_EVALUATION_ID),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ROUND_START, COL_EVALUATION_ROUND_ROUND_START),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_ROUND_END, COL_EVALUATION_ROUND_ROUND_END),\n+\t\t\tnew FieldColumn(PARAM_EVALUATION_ROUND_LIMITS_JSON, COL_EVALUATION_ROUND_LIMITS)\n+\t};\n+\n+\tprivate Long id;\n+\tprivate String etag;\n+\tprivate Long evaluationId;\n+\tprivate long roundStart;\n+\tprivate long roundEnd;\n+\tprivate String limitsJson;\n+\n+\t@Override\n+\tpublic String getIdString() {\n+\t\treturn id.toString();\n+\t}\n+\n+\t@Override\n+\tpublic ObjectType getObjectType() {\n+\t\treturn ObjectType.EVALUATION_ROUND;\n+\t}\n+\n+\t@Override\n+\tpublic MigrationType getMigratableTableType() {\n+\t\treturn MigrationType.EVALUATION_ROUND;\n+\t}\n+\n+\t@Override\n+\tpublic MigratableTableTranslation<EvaluationRoundDBO, EvaluationRoundDBO> getTranslator() {\n+\t\treturn new BasicMigratableTableTranslation<>();\n+\t}\n+\n+\t@Override\n+\tpublic Class<? extends EvaluationRoundDBO> getBackupClass() {\n+\t\treturn EvaluationRoundDBO.class;\n+\t}\n+\n+\t@Override\n+\tpublic Class<? extends EvaluationRoundDBO> getDatabaseObjectClass() {\n+\t\treturn EvaluationRoundDBO.class;\n+\t}\n+\n+\t@Override\n+\tpublic List<MigratableDatabaseObject<?, ?>> getSecondaryTypes() {\n+//\t\treturn Arrays.asList(new SubmissionDBO());\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic TableMapping<EvaluationRoundDBO> getTableMapping() {\n+\t\treturn new TableMapping<EvaluationRoundDBO>() {\n+\t\t\t@Override\n+\t\t\tpublic String getTableName() {\n+\t\t\t\treturn TABLE_EVALUATION_ROUND;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getDDLFileName() {\n+\t\t\t\treturn DDL_FILE_EVALUATION_ROUND;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic FieldColumn[] getFieldColumns() {\n+\t\t\t\treturn FIELDS;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Class<? extends EvaluationRoundDBO> getDBOClass() {\n+\t\t\t\treturn EvaluationRoundDBO.class;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic EvaluationRoundDBO mapRow(ResultSet resultSet, int rowNum) throws SQLException {\n+\t\t\t\tEvaluationRoundDBO evaluationRoundDBO = new EvaluationRoundDBO();\n+\t\t\t\tevaluationRoundDBO.setId(resultSet.getLong(COL_EVALUATION_ROUND_ID));\n+\t\t\t\tevaluationRoundDBO.setEtag(resultSet.getString(COL_EVALUATION_ROUND_ETAG));\n+\t\t\t\tevaluationRoundDBO.setEvaluationId(resultSet.getLong(COL_EVALUATION_ROUND_EVALUATION_ID));\n+\t\t\t\tevaluationRoundDBO.setRoundStart(resultSet.getLong(COL_EVALUATION_ROUND_ROUND_START));\n+\t\t\t\tif (resultSet.wasNull()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTcyMjUzOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBOUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoxODowNFrOHPdbwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoxODowNFrOHPdbwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MjkyOQ==", "bodyText": "You might want to initialize this to the size of the jsonArray.length()", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485972929", "createdAt": "2020-09-09T23:18:04Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBOUtil.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.sagebionetworks.evaluation.dbo;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sagebionetworks.evaluation.model.EvaluationRound;\n+import org.sagebionetworks.evaluation.model.EvaluationRoundLimit;\n+import org.sagebionetworks.repo.model.jdo.JDOSecondaryPropertyUtils;\n+import org.sagebionetworks.schema.adapter.JSONArrayAdapter;\n+import org.sagebionetworks.schema.adapter.JSONObjectAdapterException;\n+import org.sagebionetworks.schema.adapter.org.json.EntityFactory;\n+import org.sagebionetworks.schema.adapter.org.json.JSONArrayAdapterImpl;\n+import org.sagebionetworks.schema.adapter.org.json.JSONObjectAdapterImpl;\n+import org.sagebionetworks.util.ValidateArgument;\n+\n+public class EvaluationRoundDBOUtil {\n+\tpublic static EvaluationRoundDBO toDBO(EvaluationRound dto){\n+\t\tValidateArgument.requiredNotBlank(dto.getId(), \"id\");\n+\t\tValidateArgument.requiredNotBlank(dto.getEtag(), \"etag\");\n+\t\tValidateArgument.requiredNotBlank(dto.getEvaluationId(), \"evaluationId\");\n+\n+\t\tEvaluationRoundDBO dbo = new EvaluationRoundDBO();\n+\n+\t\tdbo.setId(Long.parseLong(dto.getId()));\n+\t\tdbo.setEtag(dto.getEtag());\n+\t\tdbo.setEvaluationId(Long.parseLong(dto.getEvaluationId()));\n+\n+\t\tdbo.setRoundStart(dto.getRoundStart().getTime());\n+\t\tdbo.setRoundEnd(dto.getRoundEnd().getTime());\n+\n+\t\tList<EvaluationRoundLimit> limit = dto.getLimits();\n+\t\tif(CollectionUtils.isNotEmpty(limit)) {\n+\t\t\ttry {\n+\t\t\t\tJSONArrayAdapter jsonArray = new JSONArrayAdapterImpl();\n+\t\t\t\tfor (int i = 0; i < limit.size(); i++) {\n+\t\t\t\t\tEvaluationRoundLimit val = limit.get(i);\n+\t\t\t\t\tif(val != null) {\n+\t\t\t\t\t\tjsonArray.put(i, val.writeToJSONObject(new JSONObjectAdapterImpl()));\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tdbo.setLimitsJson(jsonArray.toJSONString());\n+\t\t\t} catch (JSONObjectAdapterException e) {\n+\t\t\t\tthrow new IllegalStateException(\"Could not serialize EvaluationRoundLimit\", e);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn dbo;\n+\t}\n+\n+\tpublic static EvaluationRound toDTO(EvaluationRoundDBO dbo){\n+\t\tEvaluationRound dto = new EvaluationRound();\n+\n+\t\tdto.setId(dbo.getId().toString());\n+\t\tdto.setEtag(dbo.getEtag());\n+\t\tdto.setEvaluationId(dbo.getEvaluationId().toString());\n+\n+\t\tdto.setRoundStart(new Date(dbo.getRoundStart()));\n+\t\tdto.setRoundEnd(new Date(dbo.getRoundEnd()));\n+\n+\t\tString limitsJson = dbo.getLimitsJson();\n+\t\tif(StringUtils.isNotEmpty(limitsJson)) {\n+\t\t\ttry {\n+\t\t\t\tList<EvaluationRoundLimit> limits = new ArrayList<EvaluationRoundLimit>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTcyNDE0OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBOUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoxODozMFrOHPdciQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoxODozMFrOHPdciQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MzEyOQ==", "bodyText": "if null probably throw illegalState", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485973129", "createdAt": "2020-09-09T23:18:30Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dbo/EvaluationRoundDBOUtil.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.sagebionetworks.evaluation.dbo;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sagebionetworks.evaluation.model.EvaluationRound;\n+import org.sagebionetworks.evaluation.model.EvaluationRoundLimit;\n+import org.sagebionetworks.repo.model.jdo.JDOSecondaryPropertyUtils;\n+import org.sagebionetworks.schema.adapter.JSONArrayAdapter;\n+import org.sagebionetworks.schema.adapter.JSONObjectAdapterException;\n+import org.sagebionetworks.schema.adapter.org.json.EntityFactory;\n+import org.sagebionetworks.schema.adapter.org.json.JSONArrayAdapterImpl;\n+import org.sagebionetworks.schema.adapter.org.json.JSONObjectAdapterImpl;\n+import org.sagebionetworks.util.ValidateArgument;\n+\n+public class EvaluationRoundDBOUtil {\n+\tpublic static EvaluationRoundDBO toDBO(EvaluationRound dto){\n+\t\tValidateArgument.requiredNotBlank(dto.getId(), \"id\");\n+\t\tValidateArgument.requiredNotBlank(dto.getEtag(), \"etag\");\n+\t\tValidateArgument.requiredNotBlank(dto.getEvaluationId(), \"evaluationId\");\n+\n+\t\tEvaluationRoundDBO dbo = new EvaluationRoundDBO();\n+\n+\t\tdbo.setId(Long.parseLong(dto.getId()));\n+\t\tdbo.setEtag(dto.getEtag());\n+\t\tdbo.setEvaluationId(Long.parseLong(dto.getEvaluationId()));\n+\n+\t\tdbo.setRoundStart(dto.getRoundStart().getTime());\n+\t\tdbo.setRoundEnd(dto.getRoundEnd().getTime());\n+\n+\t\tList<EvaluationRoundLimit> limit = dto.getLimits();\n+\t\tif(CollectionUtils.isNotEmpty(limit)) {\n+\t\t\ttry {\n+\t\t\t\tJSONArrayAdapter jsonArray = new JSONArrayAdapterImpl();\n+\t\t\t\tfor (int i = 0; i < limit.size(); i++) {\n+\t\t\t\t\tEvaluationRoundLimit val = limit.get(i);\n+\t\t\t\t\tif(val != null) {\n+\t\t\t\t\t\tjsonArray.put(i, val.writeToJSONObject(new JSONObjectAdapterImpl()));\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tdbo.setLimitsJson(jsonArray.toJSONString());\n+\t\t\t} catch (JSONObjectAdapterException e) {\n+\t\t\t\tthrow new IllegalStateException(\"Could not serialize EvaluationRoundLimit\", e);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn dbo;\n+\t}\n+\n+\tpublic static EvaluationRound toDTO(EvaluationRoundDBO dbo){\n+\t\tEvaluationRound dto = new EvaluationRound();\n+\n+\t\tdto.setId(dbo.getId().toString());\n+\t\tdto.setEtag(dbo.getEtag());\n+\t\tdto.setEvaluationId(dbo.getEvaluationId().toString());\n+\n+\t\tdto.setRoundStart(new Date(dbo.getRoundStart()));\n+\t\tdto.setRoundEnd(new Date(dbo.getRoundEnd()));\n+\n+\t\tString limitsJson = dbo.getLimitsJson();\n+\t\tif(StringUtils.isNotEmpty(limitsJson)) {\n+\t\t\ttry {\n+\t\t\t\tList<EvaluationRoundLimit> limits = new ArrayList<EvaluationRoundLimit>();\n+\t\t\t\tJSONArrayAdapter jsonArray = new JSONArrayAdapterImpl(limitsJson);\n+\t\t\t\tfor (int i = 0; i<jsonArray.length(); i ++) {\n+\t\t\t\t\tif(!jsonArray.isNull(i)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTczMjA4OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/SubmissionUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoyMjoxN1rOHPdhGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoyMjoxN1rOHPdhGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NDI5Ng==", "bodyText": "Pass the original exception in the cause", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485974296", "createdAt": "2020-09-09T23:22:17Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/SubmissionUtils.java", "diffHunk": "@@ -43,6 +43,11 @@ public static void copyDtoToDbo(Submission dto, SubmissionDBO dbo) {\n \t\t} catch (NumberFormatException e) {\n \t\t\tthrow new NumberFormatException(\"Invalid Evaluation ID: \" + dto.getEvaluationId());\n \t\t}\n+\t\ttry {\n+\t\t\tdbo.setEvalRoundId(dto.getEvaluationRoundId() == null ? null : Long.parseLong(dto.getEvaluationRoundId()));\n+\t\t} catch (NumberFormatException e) {\n+\t\t\tthrow new NumberFormatException(\"Invalid Round Evaluation ID: \" + dto.getEvaluationId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTczOTQ3OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/SubmissionDAOImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoyNTo1M1rOHPdlgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoyNTo1M1rOHPdlgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NTQyNg==", "bodyText": "Consider removing the evaluation id parameter (the round id is globally unique)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485975426", "createdAt": "2020-09-09T23:25:53Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/SubmissionDAOImpl.java", "diffHunk": "@@ -868,6 +870,19 @@ public void truncateAll() {\n \t\tjdbcTemplate.update(\"DELETE FROM \" + TABLE_SUBMISSION);\n \t\tjdbcTemplate.update(\"DELETE FROM \" + TABLE_EVALUATION);\n \t}\n+\n+\t@Override\n+\tpublic boolean hasSubmissionForEvaluationRound(String evalId, String evalRoundId){\n+\t\tMapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+\t\tparameterSource.addValue(DBOConstants.PARAM_SUBMISSION_EVAL_ID, evalId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTc0MjcxOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoyNzoxM1rOHPdnQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoyNzoxM1rOHPdnQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NTg3Mg==", "bodyText": "public modifier not needed", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485975872", "createdAt": "2020-09-09T23:27:13Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAO.java", "diffHunk": "@@ -57,4 +60,79 @@ public void update(Evaluation dto) throws DatastoreException, InvalidModelExcept\n \t */\n \tSet<Long> getAvailableEvaluations(List<Long> ids);\n \n+\t/**\n+\t * Creates a new evaluation round\n+\t * @param evaluationRound\n+\t * @return the stored evaluation round\n+\t */\n+\tpublic EvaluationRound createEvaluationRound(EvaluationRound evaluationRound);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTc1MzU2OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzozMjo1NlrOHPdtnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzozMjo1NlrOHPdtnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NzUwMA==", "bodyText": "Provide docs for the currentRoundId", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485977500", "createdAt": "2020-09-09T23:32:56Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAO.java", "diffHunk": "@@ -57,4 +60,79 @@ public void update(Evaluation dto) throws DatastoreException, InvalidModelExcept\n \t */\n \tSet<Long> getAvailableEvaluations(List<Long> ids);\n \n+\t/**\n+\t * Creates a new evaluation round\n+\t * @param evaluationRound\n+\t * @return the stored evaluation round\n+\t */\n+\tpublic EvaluationRound createEvaluationRound(EvaluationRound evaluationRound);\n+\n+\t/**\n+\t * Update an existing evaluation round\n+\t * @param evaluationRound\n+\t */\n+\tpublic void updateEvaluationRound(EvaluationRound evaluationRound);\n+\n+\t/**\n+\t * Deletes the evaluation round identified by the provided ID\n+\t * @param evaluationId\n+\t * @param evaluationRoundId\n+\t */\n+\tpublic void deleteEvaluationRound(String evaluationId, String evaluationRoundId);\n+\n+\t/**\n+\t * Get the evaluation round identified by the provided ID\n+\t * @param evaluationId\n+\t * @param evaluationRoundId\n+\t * @return EvaluationRound for the current Id.\n+\t */\n+\tpublic EvaluationRound getEvaluationRound(String evaluationId, String evaluationRoundId);\n+\n+\t/**\n+\t * Get evaluation rounds associated with the evaluationId.\n+\t * Results will be ordered by Round's start date\n+\t * @param evaluationId id of the Evaluation\n+\t * @param limit maximum number of results to return\n+\t * @param offset starting offset for results\n+\t * @return EvaluationRounds associated with the evaluationId, ordered by roundStart dates in the EvaluationRound\n+\t * Empty list if no results.\n+\t */\n+\tpublic List<EvaluationRound> getAssociatedEvaluationRounds(String evaluationId, long limit, long offset);\n+\n+\t/**\n+\t * Get the EvaluationRound for a specified Evaluation ID such that the specified timestamp\n+\t * resides between the EvaluationRound's start and end timestamps.\n+\t *\n+\t * The start timestamp is inclusive\n+\t * The end timestamp is exclusive\n+\t *\n+\t * For example:\n+\t * EvaluationRound A : start=5 , end=35\n+\t * EvaluationRound B : start=40, end=55\n+\t *\n+\t * Any of {timestamp=25, timestamp=5} would return A\n+\t * {timestamp=45, timestamp=40} return B,\n+\t * {timestamp=35, timestamp=37, timestamp=4, timestamp=55, timestamp=56} return Optional.empty()\n+\t * @param evaluationId id of the Evaluation to search\n+\t * @param timestamp the timestamp for which a matching EvaluationRound's round start and round end timestamp must encapsulate\n+\t * @return\n+\t */\n+\tpublic Optional<EvaluationRound> getEvaluationRoundForTimestamp(String evaluationId, Instant timestamp);\n+\n+\t/**\n+\t *\n+\t * @param evaluationId id of the Evaluation\n+\t * @return true if the Evaluation has any EvaluationRounds associated with it. Otherwise, false.\n+\t */\n+\tboolean hasEvaluationRounds(String evaluationId);\n+\n+\t/**\n+\t * Lists existing EvaluationRounds for which provided start-end timestamp range overlap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTc2MzI1OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzozNzozNVrOHPdzAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzozNzozNVrOHPdzAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3ODg4Mg==", "bodyText": "Maybe just catch the needed exception", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485978882", "createdAt": "2020-09-09T23:37:35Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImpl.java", "diffHunk": "@@ -273,35 +296,135 @@ public String lookupByName(String name) throws DatastoreException {\n \t}\n \n \n-\tprivate String lockAndGenerateEtag(String id, String eTag, ChangeType changeType)\n+\tprivate String lockAndGenerateEtag(String id, String eTag, String tableName, String etagColName, Class<?> clazz)\n \t\t\tthrows NotFoundException, ConflictingUpdateException, DatastoreException {\n-\t\tString currentTag = lockForUpdate(id);\n+\t\t// Create a Select for update query\n+\t\tString sql = String.format(SQL_ETAG_FOR_UPDATE_FORMAT, etagColName, tableName);\n+\t\tString currentTag = jdbcTemplate.queryForObject(sql, String.class, id);\n \t\t// Check the eTags\n \t\tif(!currentTag.equals(eTag)){\n-\t\t\tthrow new ConflictingUpdateException(\"Evaluation: \" + id + \" has been updated since \" +\n+\t\t\tthrow new ConflictingUpdateException(clazz.getSimpleName() + \": \" + id + \" has been updated since \" +\n \t\t\t\t\t\"you last fetched it; please retrieve it again and re-apply the update\");\n \t\t}\n-\t\t// Get a new e-tag\n-\t\tEvaluationDBO dbo = getDBO(id);\n-\t\tdbo.seteTag(UUID.randomUUID().toString());\n-\t\treturn dbo.getEtag();\n+\t\t// Generate a new e-tag\n+\t\treturn UUID.randomUUID().toString();\n \t}\n-\t\n-\tprivate EvaluationDBO getDBO(String id) throws NotFoundException {\n-\t\tEvaluationUtils.ensureNotNull(id, \"Evaluation id\");\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic EvaluationRound createEvaluationRound(EvaluationRound evaluationRound){\n+\t\t//generate initial etag\n+\t\tevaluationRound.setEtag(UUID.randomUUID().toString());\n+\t\tEvaluationRoundDBO dbo = EvaluationRoundDBOUtil.toDBO(evaluationRound);\n+\n+\t\t// create DBO\n+\t\ttry {\n+\t\t\tdbo = basicDao.createNew(dbo);\n+\t\t\treturn EvaluationRoundDBOUtil.toDTO(dbo);\n+\t\t} catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTc2NDc4OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzozODoyN1rOHPdz9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzozODoyN1rOHPdz9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3OTEyNQ==", "bodyText": "pull the exception in the cause", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485979125", "createdAt": "2020-09-09T23:38:27Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImpl.java", "diffHunk": "@@ -273,35 +296,135 @@ public String lookupByName(String name) throws DatastoreException {\n \t}\n \n \n-\tprivate String lockAndGenerateEtag(String id, String eTag, ChangeType changeType)\n+\tprivate String lockAndGenerateEtag(String id, String eTag, String tableName, String etagColName, Class<?> clazz)\n \t\t\tthrows NotFoundException, ConflictingUpdateException, DatastoreException {\n-\t\tString currentTag = lockForUpdate(id);\n+\t\t// Create a Select for update query\n+\t\tString sql = String.format(SQL_ETAG_FOR_UPDATE_FORMAT, etagColName, tableName);\n+\t\tString currentTag = jdbcTemplate.queryForObject(sql, String.class, id);\n \t\t// Check the eTags\n \t\tif(!currentTag.equals(eTag)){\n-\t\t\tthrow new ConflictingUpdateException(\"Evaluation: \" + id + \" has been updated since \" +\n+\t\t\tthrow new ConflictingUpdateException(clazz.getSimpleName() + \": \" + id + \" has been updated since \" +\n \t\t\t\t\t\"you last fetched it; please retrieve it again and re-apply the update\");\n \t\t}\n-\t\t// Get a new e-tag\n-\t\tEvaluationDBO dbo = getDBO(id);\n-\t\tdbo.seteTag(UUID.randomUUID().toString());\n-\t\treturn dbo.getEtag();\n+\t\t// Generate a new e-tag\n+\t\treturn UUID.randomUUID().toString();\n \t}\n-\t\n-\tprivate EvaluationDBO getDBO(String id) throws NotFoundException {\n-\t\tEvaluationUtils.ensureNotNull(id, \"Evaluation id\");\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic EvaluationRound createEvaluationRound(EvaluationRound evaluationRound){\n+\t\t//generate initial etag\n+\t\tevaluationRound.setEtag(UUID.randomUUID().toString());\n+\t\tEvaluationRoundDBO dbo = EvaluationRoundDBOUtil.toDBO(evaluationRound);\n+\n+\t\t// create DBO\n+\t\ttry {\n+\t\t\tdbo = basicDao.createNew(dbo);\n+\t\t\treturn EvaluationRoundDBOUtil.toDTO(dbo);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new DatastoreException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic void updateEvaluationRound(EvaluationRound evaluationRound) {\n+\t\tEvaluationRoundDBO dbo = EvaluationRoundDBOUtil.toDBO(evaluationRound);\n+\n+\t\ttry{\n+\t\t\t//update etag\n+\t\t\tString newEtag = lockAndGenerateEtag(dbo.getId().toString(), dbo.getEtag(),\n+\t\t\t\t\tTABLE_EVALUATION_ROUND, COL_EVALUATION_ROUND_ETAG, EvaluationRound.class);\n+\t\t\tdbo.setEtag(newEtag);\n+\t\t} catch (EmptyResultDataAccessException e){\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRound.getId(), evaluationRound.getEvaluationId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTc3MDc5OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo0MToyNlrOHPd3Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo0MToyNlrOHPd3Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3OTk4Nw==", "bodyText": "You can use the special single SinglePrimaryKeySqlParameterSource", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485979987", "createdAt": "2020-09-09T23:41:26Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImpl.java", "diffHunk": "@@ -273,35 +296,135 @@ public String lookupByName(String name) throws DatastoreException {\n \t}\n \n \n-\tprivate String lockAndGenerateEtag(String id, String eTag, ChangeType changeType)\n+\tprivate String lockAndGenerateEtag(String id, String eTag, String tableName, String etagColName, Class<?> clazz)\n \t\t\tthrows NotFoundException, ConflictingUpdateException, DatastoreException {\n-\t\tString currentTag = lockForUpdate(id);\n+\t\t// Create a Select for update query\n+\t\tString sql = String.format(SQL_ETAG_FOR_UPDATE_FORMAT, etagColName, tableName);\n+\t\tString currentTag = jdbcTemplate.queryForObject(sql, String.class, id);\n \t\t// Check the eTags\n \t\tif(!currentTag.equals(eTag)){\n-\t\t\tthrow new ConflictingUpdateException(\"Evaluation: \" + id + \" has been updated since \" +\n+\t\t\tthrow new ConflictingUpdateException(clazz.getSimpleName() + \": \" + id + \" has been updated since \" +\n \t\t\t\t\t\"you last fetched it; please retrieve it again and re-apply the update\");\n \t\t}\n-\t\t// Get a new e-tag\n-\t\tEvaluationDBO dbo = getDBO(id);\n-\t\tdbo.seteTag(UUID.randomUUID().toString());\n-\t\treturn dbo.getEtag();\n+\t\t// Generate a new e-tag\n+\t\treturn UUID.randomUUID().toString();\n \t}\n-\t\n-\tprivate EvaluationDBO getDBO(String id) throws NotFoundException {\n-\t\tEvaluationUtils.ensureNotNull(id, \"Evaluation id\");\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic EvaluationRound createEvaluationRound(EvaluationRound evaluationRound){\n+\t\t//generate initial etag\n+\t\tevaluationRound.setEtag(UUID.randomUUID().toString());\n+\t\tEvaluationRoundDBO dbo = EvaluationRoundDBOUtil.toDBO(evaluationRound);\n+\n+\t\t// create DBO\n+\t\ttry {\n+\t\t\tdbo = basicDao.createNew(dbo);\n+\t\t\treturn EvaluationRoundDBOUtil.toDTO(dbo);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new DatastoreException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic void updateEvaluationRound(EvaluationRound evaluationRound) {\n+\t\tEvaluationRoundDBO dbo = EvaluationRoundDBOUtil.toDBO(evaluationRound);\n+\n+\t\ttry{\n+\t\t\t//update etag\n+\t\t\tString newEtag = lockAndGenerateEtag(dbo.getId().toString(), dbo.getEtag(),\n+\t\t\t\t\tTABLE_EVALUATION_ROUND, COL_EVALUATION_ROUND_ETAG, EvaluationRound.class);\n+\t\t\tdbo.setEtag(newEtag);\n+\t\t} catch (EmptyResultDataAccessException e){\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRound.getId(), evaluationRound.getEvaluationId()));\n+\t\t}\n+\n+\n+\t\t// create DBO\n+\t\tif( ! basicDao.update(dbo) ){\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRound.getId(), evaluationRound.getEvaluationId()));\n+\t\t}\n+\n+\t}\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic void deleteEvaluationRound(String evaluationId, String evaluationRoundId) {\n+\t\tMapSqlParameterSource param = new MapSqlParameterSource();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTc3NTE3OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo0MzozNVrOHPd52Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo0MzozNVrOHPd52Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4MDYzMw==", "bodyText": "YOu can either use the optional variant or pass the exception as cause", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485980633", "createdAt": "2020-09-09T23:43:35Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImpl.java", "diffHunk": "@@ -273,35 +296,135 @@ public String lookupByName(String name) throws DatastoreException {\n \t}\n \n \n-\tprivate String lockAndGenerateEtag(String id, String eTag, ChangeType changeType)\n+\tprivate String lockAndGenerateEtag(String id, String eTag, String tableName, String etagColName, Class<?> clazz)\n \t\t\tthrows NotFoundException, ConflictingUpdateException, DatastoreException {\n-\t\tString currentTag = lockForUpdate(id);\n+\t\t// Create a Select for update query\n+\t\tString sql = String.format(SQL_ETAG_FOR_UPDATE_FORMAT, etagColName, tableName);\n+\t\tString currentTag = jdbcTemplate.queryForObject(sql, String.class, id);\n \t\t// Check the eTags\n \t\tif(!currentTag.equals(eTag)){\n-\t\t\tthrow new ConflictingUpdateException(\"Evaluation: \" + id + \" has been updated since \" +\n+\t\t\tthrow new ConflictingUpdateException(clazz.getSimpleName() + \": \" + id + \" has been updated since \" +\n \t\t\t\t\t\"you last fetched it; please retrieve it again and re-apply the update\");\n \t\t}\n-\t\t// Get a new e-tag\n-\t\tEvaluationDBO dbo = getDBO(id);\n-\t\tdbo.seteTag(UUID.randomUUID().toString());\n-\t\treturn dbo.getEtag();\n+\t\t// Generate a new e-tag\n+\t\treturn UUID.randomUUID().toString();\n \t}\n-\t\n-\tprivate EvaluationDBO getDBO(String id) throws NotFoundException {\n-\t\tEvaluationUtils.ensureNotNull(id, \"Evaluation id\");\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic EvaluationRound createEvaluationRound(EvaluationRound evaluationRound){\n+\t\t//generate initial etag\n+\t\tevaluationRound.setEtag(UUID.randomUUID().toString());\n+\t\tEvaluationRoundDBO dbo = EvaluationRoundDBOUtil.toDBO(evaluationRound);\n+\n+\t\t// create DBO\n+\t\ttry {\n+\t\t\tdbo = basicDao.createNew(dbo);\n+\t\t\treturn EvaluationRoundDBOUtil.toDTO(dbo);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new DatastoreException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic void updateEvaluationRound(EvaluationRound evaluationRound) {\n+\t\tEvaluationRoundDBO dbo = EvaluationRoundDBOUtil.toDBO(evaluationRound);\n+\n+\t\ttry{\n+\t\t\t//update etag\n+\t\t\tString newEtag = lockAndGenerateEtag(dbo.getId().toString(), dbo.getEtag(),\n+\t\t\t\t\tTABLE_EVALUATION_ROUND, COL_EVALUATION_ROUND_ETAG, EvaluationRound.class);\n+\t\t\tdbo.setEtag(newEtag);\n+\t\t} catch (EmptyResultDataAccessException e){\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRound.getId(), evaluationRound.getEvaluationId()));\n+\t\t}\n+\n+\n+\t\t// create DBO\n+\t\tif( ! basicDao.update(dbo) ){\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRound.getId(), evaluationRound.getEvaluationId()));\n+\t\t}\n+\n+\t}\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic void deleteEvaluationRound(String evaluationId, String evaluationRoundId) {\n+\t\tMapSqlParameterSource param = new MapSqlParameterSource();\n+\t\tparam.addValue(ID, evaluationRoundId);\n+\t\tif( ! basicDao.deleteObjectByPrimaryKey(EvaluationRoundDBO.class, param) ){\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRoundId, evaluationId));\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic EvaluationRound getEvaluationRound(String evaluationId, String evaluationRoundId) {\n \t\tMapSqlParameterSource param = new MapSqlParameterSource();\n-\t\tparam.addValue(DBOConstants.PARAM_EVALUATION_ID, id);\n+\t\tparam.addValue(ID, evaluationRoundId);\n \t\ttry {\n-\t\t\tEvaluationDBO dbo = basicDao.getObjectByPrimaryKey(EvaluationDBO.class, param);\n-\t\t\treturn dbo;\n+\t\t\tEvaluationRoundDBO dbo = basicDao.getObjectByPrimaryKey(EvaluationRoundDBO.class, param);\n+\t\t\tEvaluationRound dto = EvaluationRoundDBOUtil.toDTO(dbo);\n+\t\t\treturn dto;\n \t\t} catch (NotFoundException e) {\n-\t\t\tthrow new NotFoundException(EVALUATION_NOT_FOUND + id);\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRoundId, evaluationId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTc4NjE3OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo0OTowOVrOHPeAKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo0OTowOVrOHPeAKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4MjI1MA==", "bodyText": "You can move the evaluationId as the last param", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485982250", "createdAt": "2020-09-09T23:49:09Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImpl.java", "diffHunk": "@@ -273,35 +296,135 @@ public String lookupByName(String name) throws DatastoreException {\n \t}\n \n \n-\tprivate String lockAndGenerateEtag(String id, String eTag, ChangeType changeType)\n+\tprivate String lockAndGenerateEtag(String id, String eTag, String tableName, String etagColName, Class<?> clazz)\n \t\t\tthrows NotFoundException, ConflictingUpdateException, DatastoreException {\n-\t\tString currentTag = lockForUpdate(id);\n+\t\t// Create a Select for update query\n+\t\tString sql = String.format(SQL_ETAG_FOR_UPDATE_FORMAT, etagColName, tableName);\n+\t\tString currentTag = jdbcTemplate.queryForObject(sql, String.class, id);\n \t\t// Check the eTags\n \t\tif(!currentTag.equals(eTag)){\n-\t\t\tthrow new ConflictingUpdateException(\"Evaluation: \" + id + \" has been updated since \" +\n+\t\t\tthrow new ConflictingUpdateException(clazz.getSimpleName() + \": \" + id + \" has been updated since \" +\n \t\t\t\t\t\"you last fetched it; please retrieve it again and re-apply the update\");\n \t\t}\n-\t\t// Get a new e-tag\n-\t\tEvaluationDBO dbo = getDBO(id);\n-\t\tdbo.seteTag(UUID.randomUUID().toString());\n-\t\treturn dbo.getEtag();\n+\t\t// Generate a new e-tag\n+\t\treturn UUID.randomUUID().toString();\n \t}\n-\t\n-\tprivate EvaluationDBO getDBO(String id) throws NotFoundException {\n-\t\tEvaluationUtils.ensureNotNull(id, \"Evaluation id\");\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic EvaluationRound createEvaluationRound(EvaluationRound evaluationRound){\n+\t\t//generate initial etag\n+\t\tevaluationRound.setEtag(UUID.randomUUID().toString());\n+\t\tEvaluationRoundDBO dbo = EvaluationRoundDBOUtil.toDBO(evaluationRound);\n+\n+\t\t// create DBO\n+\t\ttry {\n+\t\t\tdbo = basicDao.createNew(dbo);\n+\t\t\treturn EvaluationRoundDBOUtil.toDTO(dbo);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new DatastoreException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic void updateEvaluationRound(EvaluationRound evaluationRound) {\n+\t\tEvaluationRoundDBO dbo = EvaluationRoundDBOUtil.toDBO(evaluationRound);\n+\n+\t\ttry{\n+\t\t\t//update etag\n+\t\t\tString newEtag = lockAndGenerateEtag(dbo.getId().toString(), dbo.getEtag(),\n+\t\t\t\t\tTABLE_EVALUATION_ROUND, COL_EVALUATION_ROUND_ETAG, EvaluationRound.class);\n+\t\t\tdbo.setEtag(newEtag);\n+\t\t} catch (EmptyResultDataAccessException e){\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRound.getId(), evaluationRound.getEvaluationId()));\n+\t\t}\n+\n+\n+\t\t// create DBO\n+\t\tif( ! basicDao.update(dbo) ){\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRound.getId(), evaluationRound.getEvaluationId()));\n+\t\t}\n+\n+\t}\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic void deleteEvaluationRound(String evaluationId, String evaluationRoundId) {\n+\t\tMapSqlParameterSource param = new MapSqlParameterSource();\n+\t\tparam.addValue(ID, evaluationRoundId);\n+\t\tif( ! basicDao.deleteObjectByPrimaryKey(EvaluationRoundDBO.class, param) ){\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRoundId, evaluationId));\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic EvaluationRound getEvaluationRound(String evaluationId, String evaluationRoundId) {\n \t\tMapSqlParameterSource param = new MapSqlParameterSource();\n-\t\tparam.addValue(DBOConstants.PARAM_EVALUATION_ID, id);\n+\t\tparam.addValue(ID, evaluationRoundId);\n \t\ttry {\n-\t\t\tEvaluationDBO dbo = basicDao.getObjectByPrimaryKey(EvaluationDBO.class, param);\n-\t\t\treturn dbo;\n+\t\t\tEvaluationRoundDBO dbo = basicDao.getObjectByPrimaryKey(EvaluationRoundDBO.class, param);\n+\t\t\tEvaluationRound dto = EvaluationRoundDBOUtil.toDTO(dbo);\n+\t\t\treturn dto;\n \t\t} catch (NotFoundException e) {\n-\t\t\tthrow new NotFoundException(EVALUATION_NOT_FOUND + id);\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRoundId, evaluationId));\n \t\t}\n \t}\n-\t\n-\tprivate String lockForUpdate(String id) {\n-\t\t// Create a Select for update query\n-\t\treturn jdbcTemplate.queryForObject(SQL_ETAG_FOR_UPDATE, String.class, id);\n+\n+\t@Override\n+\tpublic List<EvaluationRound> getAssociatedEvaluationRounds(String evaluationId, long limit, long offset) {\n+\t\tMapSqlParameterSource sqlParameterSource = new MapSqlParameterSource();\n+\t\tsqlParameterSource.addValue(DBOConstants.PARAM_EVALUATION_ROUND_EVALUATION_ID, evaluationId);\n+\t\tsqlParameterSource.addValue(DBOConstants.PARAM_LIMIT, limit);\n+\t\tsqlParameterSource.addValue(DBOConstants.PARAM_OFFSET, offset);\n+\n+\n+\t\treturn namedJdbcTemplate.query(SELECT_ALL_ROUNDS_FOR_EVALUATION, sqlParameterSource, (ResultSet resultSet, int rowNumber) ->{\n+\t\t\treturn EvaluationRoundDBOUtil.toDTO(EVALUATION_ROUND_ROW_MAPPER.mapRow(resultSet, rowNumber));\n+\t\t});\n \t}\n \n+\t@Override\n+\tpublic Optional<EvaluationRound> getEvaluationRoundForTimestamp(String evaluationId, Instant timestamp) {\n+\t\tMapSqlParameterSource sqlParameterSource = new MapSqlParameterSource();\n+\t\tsqlParameterSource.addValue(DBOConstants.PARAM_EVALUATION_ROUND_EVALUATION_ID, evaluationId);\n+\t\tsqlParameterSource.addValue(PARAM_BETWEEN_DATE, timestamp.toEpochMilli());\n+\n+\t\ttry {\n+\t\t\treturn namedJdbcTemplate.queryForObject(SELECT_ROUND_BETWEEN_RANGE, sqlParameterSource,\n+\t\t\t\t\t(ResultSet resultSet, int rowNumber) -> {\n+\t\t\t\t\t\treturn Optional.of(EvaluationRoundDBOUtil.toDTO(EVALUATION_ROUND_ROW_MAPPER.mapRow(resultSet, rowNumber)));\n+\t\t\t\t\t}\n+\t\t\t);\n+\t\t} catch (EmptyResultDataAccessException e){\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasEvaluationRounds(String evaluationId){\n+\t\treturn jdbcTemplate.queryForObject(\"SELECT COUNT(*) > 0 FROM \" + TABLE_EVALUATION_ROUND +\n+\t\t\t\t\t\t\" WHERE \" + COL_EVALUATION_ROUND_EVALUATION_ID +\" = ? \",\n+\t\t\t\tnew Object[]{evaluationId} ,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTc5MDA2OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo1MDo1OVrOHPeCSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo1MDo1OVrOHPeCSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4Mjc5NA==", "bodyText": "<> rather than !=??", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485982794", "createdAt": "2020-09-09T23:50:59Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImpl.java", "diffHunk": "@@ -273,35 +296,135 @@ public String lookupByName(String name) throws DatastoreException {\n \t}\n \n \n-\tprivate String lockAndGenerateEtag(String id, String eTag, ChangeType changeType)\n+\tprivate String lockAndGenerateEtag(String id, String eTag, String tableName, String etagColName, Class<?> clazz)\n \t\t\tthrows NotFoundException, ConflictingUpdateException, DatastoreException {\n-\t\tString currentTag = lockForUpdate(id);\n+\t\t// Create a Select for update query\n+\t\tString sql = String.format(SQL_ETAG_FOR_UPDATE_FORMAT, etagColName, tableName);\n+\t\tString currentTag = jdbcTemplate.queryForObject(sql, String.class, id);\n \t\t// Check the eTags\n \t\tif(!currentTag.equals(eTag)){\n-\t\t\tthrow new ConflictingUpdateException(\"Evaluation: \" + id + \" has been updated since \" +\n+\t\t\tthrow new ConflictingUpdateException(clazz.getSimpleName() + \": \" + id + \" has been updated since \" +\n \t\t\t\t\t\"you last fetched it; please retrieve it again and re-apply the update\");\n \t\t}\n-\t\t// Get a new e-tag\n-\t\tEvaluationDBO dbo = getDBO(id);\n-\t\tdbo.seteTag(UUID.randomUUID().toString());\n-\t\treturn dbo.getEtag();\n+\t\t// Generate a new e-tag\n+\t\treturn UUID.randomUUID().toString();\n \t}\n-\t\n-\tprivate EvaluationDBO getDBO(String id) throws NotFoundException {\n-\t\tEvaluationUtils.ensureNotNull(id, \"Evaluation id\");\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic EvaluationRound createEvaluationRound(EvaluationRound evaluationRound){\n+\t\t//generate initial etag\n+\t\tevaluationRound.setEtag(UUID.randomUUID().toString());\n+\t\tEvaluationRoundDBO dbo = EvaluationRoundDBOUtil.toDBO(evaluationRound);\n+\n+\t\t// create DBO\n+\t\ttry {\n+\t\t\tdbo = basicDao.createNew(dbo);\n+\t\t\treturn EvaluationRoundDBOUtil.toDTO(dbo);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new DatastoreException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic void updateEvaluationRound(EvaluationRound evaluationRound) {\n+\t\tEvaluationRoundDBO dbo = EvaluationRoundDBOUtil.toDBO(evaluationRound);\n+\n+\t\ttry{\n+\t\t\t//update etag\n+\t\t\tString newEtag = lockAndGenerateEtag(dbo.getId().toString(), dbo.getEtag(),\n+\t\t\t\t\tTABLE_EVALUATION_ROUND, COL_EVALUATION_ROUND_ETAG, EvaluationRound.class);\n+\t\t\tdbo.setEtag(newEtag);\n+\t\t} catch (EmptyResultDataAccessException e){\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRound.getId(), evaluationRound.getEvaluationId()));\n+\t\t}\n+\n+\n+\t\t// create DBO\n+\t\tif( ! basicDao.update(dbo) ){\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRound.getId(), evaluationRound.getEvaluationId()));\n+\t\t}\n+\n+\t}\n+\n+\t@Override\n+\t@WriteTransaction\n+\tpublic void deleteEvaluationRound(String evaluationId, String evaluationRoundId) {\n+\t\tMapSqlParameterSource param = new MapSqlParameterSource();\n+\t\tparam.addValue(ID, evaluationRoundId);\n+\t\tif( ! basicDao.deleteObjectByPrimaryKey(EvaluationRoundDBO.class, param) ){\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRoundId, evaluationId));\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic EvaluationRound getEvaluationRound(String evaluationId, String evaluationRoundId) {\n \t\tMapSqlParameterSource param = new MapSqlParameterSource();\n-\t\tparam.addValue(DBOConstants.PARAM_EVALUATION_ID, id);\n+\t\tparam.addValue(ID, evaluationRoundId);\n \t\ttry {\n-\t\t\tEvaluationDBO dbo = basicDao.getObjectByPrimaryKey(EvaluationDBO.class, param);\n-\t\t\treturn dbo;\n+\t\t\tEvaluationRoundDBO dbo = basicDao.getObjectByPrimaryKey(EvaluationRoundDBO.class, param);\n+\t\t\tEvaluationRound dto = EvaluationRoundDBOUtil.toDTO(dbo);\n+\t\t\treturn dto;\n \t\t} catch (NotFoundException e) {\n-\t\t\tthrow new NotFoundException(EVALUATION_NOT_FOUND + id);\n+\t\t\tthrow new NotFoundException(String.format(EVALUATION_ROUND_NOT_FOUND_FORMAT, evaluationRoundId, evaluationId));\n \t\t}\n \t}\n-\t\n-\tprivate String lockForUpdate(String id) {\n-\t\t// Create a Select for update query\n-\t\treturn jdbcTemplate.queryForObject(SQL_ETAG_FOR_UPDATE, String.class, id);\n+\n+\t@Override\n+\tpublic List<EvaluationRound> getAssociatedEvaluationRounds(String evaluationId, long limit, long offset) {\n+\t\tMapSqlParameterSource sqlParameterSource = new MapSqlParameterSource();\n+\t\tsqlParameterSource.addValue(DBOConstants.PARAM_EVALUATION_ROUND_EVALUATION_ID, evaluationId);\n+\t\tsqlParameterSource.addValue(DBOConstants.PARAM_LIMIT, limit);\n+\t\tsqlParameterSource.addValue(DBOConstants.PARAM_OFFSET, offset);\n+\n+\n+\t\treturn namedJdbcTemplate.query(SELECT_ALL_ROUNDS_FOR_EVALUATION, sqlParameterSource, (ResultSet resultSet, int rowNumber) ->{\n+\t\t\treturn EvaluationRoundDBOUtil.toDTO(EVALUATION_ROUND_ROW_MAPPER.mapRow(resultSet, rowNumber));\n+\t\t});\n \t}\n \n+\t@Override\n+\tpublic Optional<EvaluationRound> getEvaluationRoundForTimestamp(String evaluationId, Instant timestamp) {\n+\t\tMapSqlParameterSource sqlParameterSource = new MapSqlParameterSource();\n+\t\tsqlParameterSource.addValue(DBOConstants.PARAM_EVALUATION_ROUND_EVALUATION_ID, evaluationId);\n+\t\tsqlParameterSource.addValue(PARAM_BETWEEN_DATE, timestamp.toEpochMilli());\n+\n+\t\ttry {\n+\t\t\treturn namedJdbcTemplate.queryForObject(SELECT_ROUND_BETWEEN_RANGE, sqlParameterSource,\n+\t\t\t\t\t(ResultSet resultSet, int rowNumber) -> {\n+\t\t\t\t\t\treturn Optional.of(EvaluationRoundDBOUtil.toDTO(EVALUATION_ROUND_ROW_MAPPER.mapRow(resultSet, rowNumber)));\n+\t\t\t\t\t}\n+\t\t\t);\n+\t\t} catch (EmptyResultDataAccessException e){\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasEvaluationRounds(String evaluationId){\n+\t\treturn jdbcTemplate.queryForObject(\"SELECT COUNT(*) > 0 FROM \" + TABLE_EVALUATION_ROUND +\n+\t\t\t\t\t\t\" WHERE \" + COL_EVALUATION_ROUND_EVALUATION_ID +\" = ? \",\n+\t\t\t\tnew Object[]{evaluationId} ,\n+\t\t\t\tBoolean.class);\n+\t}\n+\n+\t@Override\n+\tpublic List<EvaluationRound> overlappingEvaluationRounds(String evaluationId, String currentRoundId, Instant startTimestamp, Instant endTimestamp) {\n+\t\tMapSqlParameterSource sqlParameterSource = new MapSqlParameterSource();\n+\t\tsqlParameterSource.addValue(DBOConstants.PARAM_EVALUATION_ROUND_EVALUATION_ID, evaluationId);\n+\t\tsqlParameterSource.addValue(DBOConstants.PARAM_EVALUATION_ROUND_ID, currentRoundId);\n+\t\tsqlParameterSource.addValue(DBOConstants.PARAM_EVALUATION_ROUND_ROUND_START, startTimestamp.toEpochMilli());\n+\t\tsqlParameterSource.addValue(DBOConstants.PARAM_EVALUATION_ROUND_ROUND_END, endTimestamp.toEpochMilli());\n+\n+\t\treturn namedJdbcTemplate.query(\"SELECT * FROM \" + TABLE_EVALUATION_ROUND +\n+\t\t\t\t\" WHERE \" + COL_EVALUATION_ROUND_EVALUATION_ID + \"= :\" + DBOConstants.PARAM_EVALUATION_ROUND_EVALUATION_ID +\n+\t\t\t\t\" AND \"+ COL_EVALUATION_ROUND_ROUND_END + \" > :\" + DBOConstants.PARAM_EVALUATION_ROUND_ROUND_START +\n+\t\t\t\t\" AND \" + COL_EVALUATION_ROUND_ROUND_START + \" < :\" + DBOConstants.PARAM_EVALUATION_ROUND_ROUND_END +\n+\t\t\t\t\" AND \" + COL_EVALUATION_ROUND_ID + \"!= :\" + DBOConstants.PARAM_EVALUATION_ROUND_ID, sqlParameterSource,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTc5Mjc0OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/test/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo1MjoyOFrOHPeD6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo1MjoyOFrOHPeD6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4MzIwOA==", "bodyText": "You might want to use a fixed time", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485983208", "createdAt": "2020-09-09T23:52:28Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImplTest.java", "diffHunk": "@@ -83,10 +95,28 @@ private static Evaluation newEvaluation(String id, String name, String contentSo\n \tpublic void setUp() throws Exception {\n \t\ttoDelete = new ArrayList<String>();\n \t\t// Initialize Evaluation\n-\t\teval = newEvaluation(\"123\", EVALUATION_NAME, EVALUATION_CONTENT_SOURCE, EvaluationStatus.PLANNED);\n+\t\tevaluationId = \"123\";\n+\t\teval = newEvaluation(evaluationId, EVALUATION_NAME, EVALUATION_CONTENT_SOURCE, EvaluationStatus.PLANNED);\n \t\taclToDelete = null;\n \t\tfutureTime = System.currentTimeMillis()+60000L*1000L; // 1000 minutes in the future\n-\t}\n+\n+\t\tevaluationRound = new EvaluationRound();\n+\t\tevaluationRoundId = \"123455\";\n+\t\tevaluationRound.setId(evaluationRoundId);\n+\t\tevalRoundStart = Instant.now();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTgwMDkyOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/test/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo1Njo1MFrOHPeIqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo1Njo1MFrOHPeIqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NDQyNQ==", "bodyText": "You can assertEquals on the list of Arrays.asList(createdRound, createdRound2)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485984425", "createdAt": "2020-09-09T23:56:50Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImplTest.java", "diffHunk": "@@ -301,112 +331,306 @@ public void testGetAvailable() throws DatastoreException, NotFoundException {\n \t\tString aclId = aclDAO.create(acl, ObjectType.EVALUATION);\n \t\tacl.setId(aclId);\n \t\taclToDelete = acl;\n-\t\t\n+\n \t\t// As a participant, I can find:\n \t\tfilter = new EvaluationFilter(pids, ACCESS_TYPE.SUBMIT);\n-\t\t\n+\n \t\tevalList = evaluationDAO.getAccessibleEvaluations(filter, 10, 0);\n \t\tassertEquals(1, evalList.size());\n \t\tassertEquals(eval, evalList.get(0));\n-\t\t\n+\n \t\t// make sure time filter works\n \t\tfilter = new EvaluationFilter(pids, ACCESS_TYPE.SUBMIT)\n \t\t\t\t.withTimeFilter(System.currentTimeMillis());\n-\t\t\n+\n \t\tevalList = evaluationDAO.getAccessibleEvaluations(filter, 10, 0);\n \t\tassertEquals(1, evalList.size());\n \t\tassertEquals(eval, evalList.get(0));\n-\t\t\n+\n \t\t// the evaluation is omitted if the challenge is over:\n \t\tfilter = new EvaluationFilter(pids, ACCESS_TYPE.SUBMIT)\n \t\t\t\t.withTimeFilter(futureTime);\n-\t\t\n+\n \t\tevalList = evaluationDAO.getAccessibleEvaluations(filter, 10, 0);\n-\t\tassertTrue(evalList.isEmpty());\t\t\n-\t\t\n+\t\tassertTrue(evalList.isEmpty());\n+\n \t\t// make sure filter works\n \t\tfilter = new EvaluationFilter(pids, ACCESS_TYPE.SUBMIT)\n \t\t\t\t.withIdsFilter(Arrays.asList(Long.parseLong(evalId)));\n-\t\t\n+\n \t\tevalList = evaluationDAO.getAccessibleEvaluations(filter, 10, 0);\n \t\tassertEquals(1, evalList.size());\n \t\tassertEquals(eval, evalList.get(0));\n-\t\t\n+\n \t\t// filtering with 'eval 2' causes no results to come back\n \t\tfilter = new EvaluationFilter(pids, ACCESS_TYPE.SUBMIT)\n \t\t\t\t.withIdsFilter(Arrays.asList(Long.parseLong(evalId2)));\n-\t\t\n+\n \t\tevalList = evaluationDAO.getAccessibleEvaluations(filter, 10, 0);\n \t\tassertEquals(0, evalList.size());\n-\t\t\n+\n \t\t// non-participants  cannot find\n \t\tfilter = new EvaluationFilter(ImmutableSet.of(110L, 111L), ACCESS_TYPE.SUBMIT)\n \t\t\t\t.withIdsFilter(Arrays.asList(Long.parseLong(evalId)));\n-\t\t\n+\n \t\tevalList = evaluationDAO.getAccessibleEvaluations(filter, 10, 0);\n \t\tassertTrue(evalList.isEmpty());\n-\t\t\n+\n \t\t// PLFM-2312 problem with repeated entries\n \t\tResourceAccess ra = new ResourceAccess();\n \t\tra.setPrincipalId(BOOTSTRAP_PRINCIPAL.AUTHENTICATED_USERS_GROUP.getPrincipalId());\n \t\tra.setAccessType(new HashSet<ACCESS_TYPE>(Arrays.asList(new ACCESS_TYPE[]{ACCESS_TYPE.SUBMIT})));\n \t\tSet<ResourceAccess> ras = acl.getResourceAccess();\n \t\tras.add(ra);\n \t\taclDAO.update(acl, ObjectType.EVALUATION);\n-\t\t\n+\n \t\t// should still find just one result, even though I'm in the ACL twice\n \t\tpids = ImmutableSet.of(participantId, BOOTSTRAP_PRINCIPAL.AUTHENTICATED_USERS_GROUP.getPrincipalId());\n-\t\t\n+\n \t\tfilter = new EvaluationFilter(pids, ACCESS_TYPE.SUBMIT);\n-\t\t\n+\n \t\tevalList = evaluationDAO.getAccessibleEvaluations(filter, 10, 0);\n \t\tassertEquals(1, evalList.size());\n-\t\tassertEquals(eval, evalList.get(0));\t\t\n-\t\t\n+\t\tassertEquals(eval, evalList.get(0));\n+\n \t\t// Note:  The evaluation isn't returned for the wrong access type\n \t\tfilter = new EvaluationFilter(pids, ACCESS_TYPE.READ);\n-\t\t\n+\n \t\tassertTrue(evaluationDAO.getAccessibleEvaluations(filter, 10, 0).isEmpty());\n    }\n-    \n+\n     @Test\n     public void testGetAvailableEvaluations() {\n-    \t\n+\n     \tString evalId = evaluationDAO.create(eval, EVALUATION_OWNER_ID);\n \n \t\ttoDelete.add(evalId);\n-    \t\n+\n \t\tLong evaluationId = Long.valueOf(evalId);\n     \tList<Long> ids = ImmutableList.of(evaluationId, 100L, 200L, 300L);\n-    \t\n+\n     \tSet<Long> result = evaluationDAO.getAvailableEvaluations(ids);\n-   \n+\n     \tassertEquals(ImmutableSet.of(evaluationId), result);\n     }\n-    \n+\n     @Test\n     public void testGetAvailableEvaluationsWithEmptyInput() {\n-    \t\n+\n     \tList<Long> ids = Collections.emptyList();\n-    \t\n+\n     \tSet<Long> result = evaluationDAO.getAvailableEvaluations(ids);\n-    \t   \n+\n     \tassertEquals(Collections.emptySet(), result);\n-   \n+\n     }\n-    \n+\n     @Test\n     public void testGetAvailableEvaluationsWithNullInput() {\n-    \t\n+\n     \tList<Long> ids = null;\n-    \t\n+\n     \tString errorMessage = assertThrows(IllegalArgumentException.class, () -> {\n     \t\t// Call under test\n     \t\tevaluationDAO.getAvailableEvaluations(ids);\n     \t}).getMessage();\n-    \t\n+\n     \tassertEquals(\"ids is required.\", errorMessage);\n-   \n+\n+    }\n+\n+    @Test\n+\tpublic void testUpdatEvaluationRound_notFound(){\n+    \tevaluationRound.setEtag(\"asdfasdfasdf\");\n+    \t//attempt update w/out creating\n+\t\tString errorMessage = assertThrows(NotFoundException.class, () -> {\n+\t\t\tevaluationDAO.updateEvaluationRound(evaluationRound);\n+\t\t}).getMessage();\n+\n+\t\tassertEquals(\"Evaluation Round with id=123455, belonging to Evaluation id=123, could not be found.\", errorMessage);\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteEvaluationRound_notFound(){\n+\t\t//attempt delete w/out creating\n+\t\tString errorMessage = assertThrows(NotFoundException.class, ()-> {\n+\t\t\tevaluationDAO.deleteEvaluationRound(evaluationId, evaluationRoundId);\n+\t\t}).getMessage();\n+\n+\t\tassertEquals(\"Evaluation Round with id=123455, belonging to Evaluation id=123, could not be found.\", errorMessage);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEvaluationRound_notFound(){\n+\t\t//attempt update w/out creating\n+\t\tString errorMessage = assertThrows(NotFoundException.class, ()-> {\n+\t\t\tevaluationDAO.getEvaluationRound(evaluationId, evaluationRoundId);\n+\t\t}).getMessage();\n+\n+\t\tassertEquals(\"Evaluation Round with id=123455, belonging to Evaluation id=123, could not be found.\", errorMessage);\n+\t}\n+\n+\t@Test\n+\tpublic void testEvaluationRound_CRUD(){\n+\t\tassertNull(evaluationRound.getEtag());\n+\t\tString evalId = evaluationDAO.create(eval, EVALUATION_OWNER_ID);\n+\t\ttoDelete.add(evalId);\n+\n+\t\t//Test CREATE\n+\t\tEvaluationRound createdEvaluationRound = evaluationDAO.createEvaluationRound(evaluationRound);\n+\n+\t\t//verify that an etag was assigned\n+\t\tassertNotNull(evaluationRound.getEtag());\n+\n+\t\t//if we copy over the etag, everything else should be equivalent\n+\t\tevaluationRound.setEtag(createdEvaluationRound.getEtag());\n+\t\tassertEquals(evaluationRound, createdEvaluationRound);\n+\n+\t\t//Test UPDATE and GET\n+\t\t// Change the end date\n+\t\tcreatedEvaluationRound.setRoundEnd(Date.from(evalRoundEnd.plus(42, ChronoUnit.DAYS)));\n+\t\tevaluationDAO.updateEvaluationRound(createdEvaluationRound);\n+\t\tEvaluationRound updated = evaluationDAO.getEvaluationRound(evaluationId, evaluationRoundId);\n+\n+\t\t//if we copy over the etag, everything else should be equivalent\n+\t\tcreatedEvaluationRound.setEtag(updated.getEtag());\n+\t\tassertEquals(createdEvaluationRound, updated);\n+\n+\t\t//Test DELETE and GET\n+\t\tevaluationDAO.deleteEvaluationRound(evaluationId, evaluationRoundId);\n+\t\tString errorMessage = assertThrows(NotFoundException.class, () -> {\n+\t\t\tevaluationDAO.getEvaluationRound(evaluationId, evaluationRoundId);\n+\t\t}).getMessage();\n+\n+\t\tassertEquals(\"Evaluation Round with id=123455, belonging to Evaluation id=123, could not be found.\", errorMessage);\n+\t}\n+\n+\n+\t@Test\n+\tpublic void getAssociatedEvaluationRounds(){\n+\t\tString evalId = evaluationDAO.create(eval, EVALUATION_OWNER_ID);\n+\t\ttoDelete.add(evalId);\n+\n+    \tlong evaluationRound2Id = 1122334455L;\n+\t\tEvaluationRound evaluationRound2 = new EvaluationRound();\n+\t\tevaluationRound2.setId(Long.toString(evaluationRound2Id));\n+\t\tevaluationRound2.setEvaluationId(evaluationId);\n+\t\tInstant evaluationRound2Start = Instant.now().plus(4, ChronoUnit.DAYS);\n+\t\tInstant evaluationRound2End = evaluationRound2Start.plus(42, ChronoUnit.DAYS);\n+\t\tevaluationRound2.setRoundStart(Date.from(evaluationRound2Start));\n+\t\tevaluationRound2.setRoundEnd(Date.from(evaluationRound2End));\n+\n+\t\tEvaluationRound createdRound = evaluationDAO.createEvaluationRound(evaluationRound);\n+\t\tEvaluationRound createdRound2 = evaluationDAO.createEvaluationRound(evaluationRound2);\n+\n+\t\tlong limit = 5;\n+\t\tlong offset = 0;\n+\t\t//method under test\n+\t\tList<EvaluationRound> rounds = evaluationDAO.getAssociatedEvaluationRounds(evaluationId, limit, offset);\n+\t\tassertEquals(2, rounds.size());\n+\t\tassertEquals(createdRound, rounds.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 559}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTgwNzI5OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/test/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo1OTo0NlrOHPeMQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo1OTo0NlrOHPeMQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NTM0Ng==", "bodyText": "-> nonExistentEvaluationId", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485985346", "createdAt": "2020-09-09T23:59:46Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/evaluation/dao/EvaluationDAOImplTest.java", "diffHunk": "@@ -301,112 +331,306 @@ public void testGetAvailable() throws DatastoreException, NotFoundException {\n \t\tString aclId = aclDAO.create(acl, ObjectType.EVALUATION);\n \t\tacl.setId(aclId);\n \t\taclToDelete = acl;\n-\t\t\n+\n \t\t// As a participant, I can find:\n \t\tfilter = new EvaluationFilter(pids, ACCESS_TYPE.SUBMIT);\n-\t\t\n+\n \t\tevalList = evaluationDAO.getAccessibleEvaluations(filter, 10, 0);\n \t\tassertEquals(1, evalList.size());\n \t\tassertEquals(eval, evalList.get(0));\n-\t\t\n+\n \t\t// make sure time filter works\n \t\tfilter = new EvaluationFilter(pids, ACCESS_TYPE.SUBMIT)\n \t\t\t\t.withTimeFilter(System.currentTimeMillis());\n-\t\t\n+\n \t\tevalList = evaluationDAO.getAccessibleEvaluations(filter, 10, 0);\n \t\tassertEquals(1, evalList.size());\n \t\tassertEquals(eval, evalList.get(0));\n-\t\t\n+\n \t\t// the evaluation is omitted if the challenge is over:\n \t\tfilter = new EvaluationFilter(pids, ACCESS_TYPE.SUBMIT)\n \t\t\t\t.withTimeFilter(futureTime);\n-\t\t\n+\n \t\tevalList = evaluationDAO.getAccessibleEvaluations(filter, 10, 0);\n-\t\tassertTrue(evalList.isEmpty());\t\t\n-\t\t\n+\t\tassertTrue(evalList.isEmpty());\n+\n \t\t// make sure filter works\n \t\tfilter = new EvaluationFilter(pids, ACCESS_TYPE.SUBMIT)\n \t\t\t\t.withIdsFilter(Arrays.asList(Long.parseLong(evalId)));\n-\t\t\n+\n \t\tevalList = evaluationDAO.getAccessibleEvaluations(filter, 10, 0);\n \t\tassertEquals(1, evalList.size());\n \t\tassertEquals(eval, evalList.get(0));\n-\t\t\n+\n \t\t// filtering with 'eval 2' causes no results to come back\n \t\tfilter = new EvaluationFilter(pids, ACCESS_TYPE.SUBMIT)\n \t\t\t\t.withIdsFilter(Arrays.asList(Long.parseLong(evalId2)));\n-\t\t\n+\n \t\tevalList = evaluationDAO.getAccessibleEvaluations(filter, 10, 0);\n \t\tassertEquals(0, evalList.size());\n-\t\t\n+\n \t\t// non-participants  cannot find\n \t\tfilter = new EvaluationFilter(ImmutableSet.of(110L, 111L), ACCESS_TYPE.SUBMIT)\n \t\t\t\t.withIdsFilter(Arrays.asList(Long.parseLong(evalId)));\n-\t\t\n+\n \t\tevalList = evaluationDAO.getAccessibleEvaluations(filter, 10, 0);\n \t\tassertTrue(evalList.isEmpty());\n-\t\t\n+\n \t\t// PLFM-2312 problem with repeated entries\n \t\tResourceAccess ra = new ResourceAccess();\n \t\tra.setPrincipalId(BOOTSTRAP_PRINCIPAL.AUTHENTICATED_USERS_GROUP.getPrincipalId());\n \t\tra.setAccessType(new HashSet<ACCESS_TYPE>(Arrays.asList(new ACCESS_TYPE[]{ACCESS_TYPE.SUBMIT})));\n \t\tSet<ResourceAccess> ras = acl.getResourceAccess();\n \t\tras.add(ra);\n \t\taclDAO.update(acl, ObjectType.EVALUATION);\n-\t\t\n+\n \t\t// should still find just one result, even though I'm in the ACL twice\n \t\tpids = ImmutableSet.of(participantId, BOOTSTRAP_PRINCIPAL.AUTHENTICATED_USERS_GROUP.getPrincipalId());\n-\t\t\n+\n \t\tfilter = new EvaluationFilter(pids, ACCESS_TYPE.SUBMIT);\n-\t\t\n+\n \t\tevalList = evaluationDAO.getAccessibleEvaluations(filter, 10, 0);\n \t\tassertEquals(1, evalList.size());\n-\t\tassertEquals(eval, evalList.get(0));\t\t\n-\t\t\n+\t\tassertEquals(eval, evalList.get(0));\n+\n \t\t// Note:  The evaluation isn't returned for the wrong access type\n \t\tfilter = new EvaluationFilter(pids, ACCESS_TYPE.READ);\n-\t\t\n+\n \t\tassertTrue(evaluationDAO.getAccessibleEvaluations(filter, 10, 0).isEmpty());\n    }\n-    \n+\n     @Test\n     public void testGetAvailableEvaluations() {\n-    \t\n+\n     \tString evalId = evaluationDAO.create(eval, EVALUATION_OWNER_ID);\n \n \t\ttoDelete.add(evalId);\n-    \t\n+\n \t\tLong evaluationId = Long.valueOf(evalId);\n     \tList<Long> ids = ImmutableList.of(evaluationId, 100L, 200L, 300L);\n-    \t\n+\n     \tSet<Long> result = evaluationDAO.getAvailableEvaluations(ids);\n-   \n+\n     \tassertEquals(ImmutableSet.of(evaluationId), result);\n     }\n-    \n+\n     @Test\n     public void testGetAvailableEvaluationsWithEmptyInput() {\n-    \t\n+\n     \tList<Long> ids = Collections.emptyList();\n-    \t\n+\n     \tSet<Long> result = evaluationDAO.getAvailableEvaluations(ids);\n-    \t   \n+\n     \tassertEquals(Collections.emptySet(), result);\n-   \n+\n     }\n-    \n+\n     @Test\n     public void testGetAvailableEvaluationsWithNullInput() {\n-    \t\n+\n     \tList<Long> ids = null;\n-    \t\n+\n     \tString errorMessage = assertThrows(IllegalArgumentException.class, () -> {\n     \t\t// Call under test\n     \t\tevaluationDAO.getAvailableEvaluations(ids);\n     \t}).getMessage();\n-    \t\n+\n     \tassertEquals(\"ids is required.\", errorMessage);\n-   \n+\n+    }\n+\n+    @Test\n+\tpublic void testUpdatEvaluationRound_notFound(){\n+    \tevaluationRound.setEtag(\"asdfasdfasdf\");\n+    \t//attempt update w/out creating\n+\t\tString errorMessage = assertThrows(NotFoundException.class, () -> {\n+\t\t\tevaluationDAO.updateEvaluationRound(evaluationRound);\n+\t\t}).getMessage();\n+\n+\t\tassertEquals(\"Evaluation Round with id=123455, belonging to Evaluation id=123, could not be found.\", errorMessage);\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteEvaluationRound_notFound(){\n+\t\t//attempt delete w/out creating\n+\t\tString errorMessage = assertThrows(NotFoundException.class, ()-> {\n+\t\t\tevaluationDAO.deleteEvaluationRound(evaluationId, evaluationRoundId);\n+\t\t}).getMessage();\n+\n+\t\tassertEquals(\"Evaluation Round with id=123455, belonging to Evaluation id=123, could not be found.\", errorMessage);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEvaluationRound_notFound(){\n+\t\t//attempt update w/out creating\n+\t\tString errorMessage = assertThrows(NotFoundException.class, ()-> {\n+\t\t\tevaluationDAO.getEvaluationRound(evaluationId, evaluationRoundId);\n+\t\t}).getMessage();\n+\n+\t\tassertEquals(\"Evaluation Round with id=123455, belonging to Evaluation id=123, could not be found.\", errorMessage);\n+\t}\n+\n+\t@Test\n+\tpublic void testEvaluationRound_CRUD(){\n+\t\tassertNull(evaluationRound.getEtag());\n+\t\tString evalId = evaluationDAO.create(eval, EVALUATION_OWNER_ID);\n+\t\ttoDelete.add(evalId);\n+\n+\t\t//Test CREATE\n+\t\tEvaluationRound createdEvaluationRound = evaluationDAO.createEvaluationRound(evaluationRound);\n+\n+\t\t//verify that an etag was assigned\n+\t\tassertNotNull(evaluationRound.getEtag());\n+\n+\t\t//if we copy over the etag, everything else should be equivalent\n+\t\tevaluationRound.setEtag(createdEvaluationRound.getEtag());\n+\t\tassertEquals(evaluationRound, createdEvaluationRound);\n+\n+\t\t//Test UPDATE and GET\n+\t\t// Change the end date\n+\t\tcreatedEvaluationRound.setRoundEnd(Date.from(evalRoundEnd.plus(42, ChronoUnit.DAYS)));\n+\t\tevaluationDAO.updateEvaluationRound(createdEvaluationRound);\n+\t\tEvaluationRound updated = evaluationDAO.getEvaluationRound(evaluationId, evaluationRoundId);\n+\n+\t\t//if we copy over the etag, everything else should be equivalent\n+\t\tcreatedEvaluationRound.setEtag(updated.getEtag());\n+\t\tassertEquals(createdEvaluationRound, updated);\n+\n+\t\t//Test DELETE and GET\n+\t\tevaluationDAO.deleteEvaluationRound(evaluationId, evaluationRoundId);\n+\t\tString errorMessage = assertThrows(NotFoundException.class, () -> {\n+\t\t\tevaluationDAO.getEvaluationRound(evaluationId, evaluationRoundId);\n+\t\t}).getMessage();\n+\n+\t\tassertEquals(\"Evaluation Round with id=123455, belonging to Evaluation id=123, could not be found.\", errorMessage);\n+\t}\n+\n+\n+\t@Test\n+\tpublic void getAssociatedEvaluationRounds(){\n+\t\tString evalId = evaluationDAO.create(eval, EVALUATION_OWNER_ID);\n+\t\ttoDelete.add(evalId);\n+\n+    \tlong evaluationRound2Id = 1122334455L;\n+\t\tEvaluationRound evaluationRound2 = new EvaluationRound();\n+\t\tevaluationRound2.setId(Long.toString(evaluationRound2Id));\n+\t\tevaluationRound2.setEvaluationId(evaluationId);\n+\t\tInstant evaluationRound2Start = Instant.now().plus(4, ChronoUnit.DAYS);\n+\t\tInstant evaluationRound2End = evaluationRound2Start.plus(42, ChronoUnit.DAYS);\n+\t\tevaluationRound2.setRoundStart(Date.from(evaluationRound2Start));\n+\t\tevaluationRound2.setRoundEnd(Date.from(evaluationRound2End));\n+\n+\t\tEvaluationRound createdRound = evaluationDAO.createEvaluationRound(evaluationRound);\n+\t\tEvaluationRound createdRound2 = evaluationDAO.createEvaluationRound(evaluationRound2);\n+\n+\t\tlong limit = 5;\n+\t\tlong offset = 0;\n+\t\t//method under test\n+\t\tList<EvaluationRound> rounds = evaluationDAO.getAssociatedEvaluationRounds(evaluationId, limit, offset);\n+\t\tassertEquals(2, rounds.size());\n+\t\tassertEquals(createdRound, rounds.get(0));\n+\t\tassertEquals(createdRound2, rounds.get(1));\n+\n+\t\tlimit = 5;\n+\t\toffset = 1;\n+\t\t//method under test\n+\t\trounds = evaluationDAO.getAssociatedEvaluationRounds(evaluationId, limit, offset);\n+\t\tassertEquals(1, rounds.size());\n+\t\tassertEquals(createdRound2, rounds.get(0));\n+\n+\t\tlimit = 1;\n+\t\toffset = 0;\n+\t\t//method under test\n+\t\trounds = evaluationDAO.getAssociatedEvaluationRounds(evaluationId, limit, offset);\n+\t\tassertEquals(1, rounds.size());\n+\t\tassertEquals(createdRound, rounds.get(0));\n+\n+\t\t//for a evaluation id that does not exist\n+\t\t//method under test\n+\t\tString nonExistentRoundId = \"9999999999\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 578}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTgzNTE0OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/evaluation/manager/EvaluationManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoxNToxMVrOHPecZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoxNToxMVrOHPecZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4OTQ3Nw==", "bodyText": "Let us remove this as it seems to introduce complexity for a problem that can be solved client side.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485989477", "createdAt": "2020-09-10T00:15:11Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/evaluation/manager/EvaluationManagerImpl.java", "diffHunk": "@@ -49,9 +60,16 @@\n \t@Autowired\n \tprivate EvaluationSubmissionsDAO evaluationSubmissionsDAO;\n \n+\t@Autowired\n+\tprivate SubmissionDAO submissionDAO;\n+\n \t@Autowired\n \tprivate SubmissionEligibilityManager submissionEligibilityManager;\n \n+\tstatic final String NON_EXISTENT_ROUND_ID = \"-1\";\n+\t//used to provide some leeway in allowed time window for updating/deleting a EvaluationRound\n+\tstatic final Duration ONE_SECOND = Duration.ofSeconds(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTg1Mjk3OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/EvaluationManagerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoyNDo0NFrOHPemxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoyNDo0NFrOHPemxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MjEzNA==", "bodyText": "Try to maintain the same conventions", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485992134", "createdAt": "2020-09-10T00:24:44Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/EvaluationManagerTest.java", "diffHunk": "@@ -285,20 +311,88 @@ public void testUpdateEvaluationAsOwner() throws DatastoreException, InvalidMode\n \n \t\tevaluationManager.updateEvaluation(ownerInfo, evalWithId);\n \t\tverify(mockEvaluationDAO).update(eq(evalWithId));\n+\t\t//no 'quota' field, so we skip this check\n+\t\tverify(mockEvaluationDAO, never()).hasEvaluationRounds(evalWithId.getId());\n+\t}\n+\n+\t@Test\n+\tpublic void updateEvaluationAsOwner__QuotaDefined_hasEvaluationRounds() throws DatastoreException, InvalidModelException, ConflictingUpdateException, NotFoundException, UnauthorizedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTg1NjI1OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/EvaluationManagerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoyNjozOFrOHPeorw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoyNjozOFrOHPeorw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MjYyMw==", "bodyText": "Might want to add a check on the error message", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485992623", "createdAt": "2020-09-10T00:26:38Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/EvaluationManagerTest.java", "diffHunk": "@@ -285,20 +311,88 @@ public void testUpdateEvaluationAsOwner() throws DatastoreException, InvalidMode\n \n \t\tevaluationManager.updateEvaluation(ownerInfo, evalWithId);\n \t\tverify(mockEvaluationDAO).update(eq(evalWithId));\n+\t\t//no 'quota' field, so we skip this check\n+\t\tverify(mockEvaluationDAO, never()).hasEvaluationRounds(evalWithId.getId());\n+\t}\n+\n+\t@Test\n+\tpublic void updateEvaluationAsOwner__QuotaDefined_hasEvaluationRounds() throws DatastoreException, InvalidModelException, ConflictingUpdateException, NotFoundException, UnauthorizedException {\n+\t\twhen(mockEvaluationDAO.get(eq(EVALUATION_ID))).thenReturn(evalWithId);\n+\n+\t\tevaluations= Collections.singletonList(evalWithId);\n+\t\twhen(mockPermissionsManager.hasAccess(eq(ownerInfo), any(), eq(ACCESS_TYPE.UPDATE))).thenReturn(AuthorizationStatus.authorized());\n+\n+\t\tassertNotNull(evalWithId.getCreatedOn());\n+\n+\t\t//an evaluation round was defined\n+\t\twhen(mockEvaluationDAO.hasEvaluationRounds(EVALUATION_ID)).thenReturn(true);\n+\t\t//quota set\n+\t\tevalWithId.setQuota(new SubmissionQuota());\n+\n+\t\tassertThrows(IllegalArgumentException.class, () ->{\n+\t\t\tevaluationManager.updateEvaluation(ownerInfo, evalWithId);\n+\t\t});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTg3OTU0OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/evaluation/manager/SubmissionEligibilityManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDozOToxMlrOHPe2bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDozOToxMlrOHPe2bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NjE0MA==", "bodyText": "You should probably extract this in its own method and test in isolation", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r485996140", "createdAt": "2020-09-10T00:39:12Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/evaluation/manager/SubmissionEligibilityManagerImpl.java", "diffHunk": "@@ -114,17 +123,33 @@ public TeamSubmissionEligibility getTeamSubmissionEligibility(Evaluation evaluat\n \t\t\tchallenge=null;\n \t\t\tteamEligibility.setIsRegistered(null);\n \t\t}\n-\t\tisTeamEligible &= (teamEligibility.getIsRegistered()==null || teamEligibility.getIsRegistered());\n+\t\tboolean isTeamEligible = (teamEligibility.getIsRegistered()==null || teamEligibility.getIsRegistered());\n \t\t\n \t\t// now check whether the Team's quota is filled\n-\t\tDate now = new Date();\n-\t\tPair<Date,Date> roundInterval = SubmissionQuotaUtil.getRoundInterval(evaluation, now);\n-\t\tint submissionCount = (int)submissionDAO.countSubmissionsByTeam(Long.parseLong(evaluation.getId()), \n-\t\t\t\tLong.parseLong(teamId), roundInterval.getFirst(), \n-\t\t\t\troundInterval.getSecond(), STATUSES_COUNTED_TOWARD_QUOTA);\n-\t\tInteger submissionLimit = SubmissionQuotaUtil.getSubmissionQuota(evaluation);\n-\t\tteamEligibility.setIsQuotaFilled(submissionLimit!=null && submissionCount>=submissionLimit);\n-\t\tisTeamEligible &= !teamEligibility.getIsQuotaFilled();\n+\t\t//convert SubmissionQuota into EvaluationRound or lazily retrieve a defined EvaluationRound\n+\t\tEvaluationRound currentRound = (evaluationDAO.hasEvaluationRounds(evaluation.getId()) ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTkwODI4OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/evaluation/manager/SubmissionEligibilityManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo1NDo0N1rOHPfGqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo1NDo0N1rOHPfGqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDI5OQ==", "bodyText": "See above, extract the logic to its own method", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486000299", "createdAt": "2020-09-10T00:54:47Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/evaluation/manager/SubmissionEligibilityManagerImpl.java", "diffHunk": "@@ -200,7 +230,12 @@ public TeamSubmissionEligibility getTeamSubmissionEligibility(Evaluation evaluat\n \tpublic AuthorizationStatus isTeamEligible(String evalId, String teamId, \n \t\t\tList<String> contributors, String submissionEligibilityHashString, Date now) throws DatastoreException, NotFoundException {\n \t\tEvaluation evaluation = evaluationDAO.get(evalId);\n-\t\tif (!SubmissionQuotaUtil.isSubmissionAllowed(evaluation, now)) {\n+\t\t//convert SubmissionQuota into EvaluationRound or lazily retrieve a defined EvaluationRound\n+\n+\t\tOptional<EvaluationRound> currentRound = evaluationDAO.hasEvaluationRounds(evalId) ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTk0NDU0OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionEligibilityManagerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToxNDo1NFrOHPfbWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToxNDo1NFrOHPfbWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwNTU5Mg==", "bodyText": "andHASEvaluationRound", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486005592", "createdAt": "2020-09-10T01:14:54Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionEligibilityManagerTest.java", "diffHunk": "@@ -255,25 +410,40 @@ public void testGetTeamSubmissionEligibilityNoQuota() throws Exception {\n \t\tassertFalse(mse.getHasConflictingSubmission());\n \t\tassertTrue(mse.getIsEligible());\n \t}\n-\t\n+\n+\t@Test\n+\tpublic void testGetTeamSubmissionEligibilityNoQuotaNoEvaluationRound() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 462}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTk0OTk1OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionEligibilityManagerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToxODowMFrOHPfegQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToxODowMFrOHPfegQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwNjQwMQ==", "bodyText": "weekly limit", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486006401", "createdAt": "2020-09-10T01:18:00Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionEligibilityManagerTest.java", "diffHunk": "@@ -355,23 +525,151 @@ public void testGetTeamSubmissionEligibilityQuotaFilled() throws Exception {\n \t\tassertFalse(mse.getHasConflictingSubmission());\n \t\tassertFalse(mse.getIsEligible());\n \t}\n-\t\n+\n+\t@Test\n+\tpublic void testGetTeamSubmissionEligibility_MultipleSubmissionLimits_exceededOneLimit() throws Exception {\n+\t\t// team is registered\n+\t\twhen(mockChallengeTeamDAO.isTeamRegistered(\n+\t\t\t\tLong.parseLong(CHALLENGE_ID),\n+\t\t\t\tLong.parseLong(SUBMITTING_TEAM_ID))).\n+\t\t\t\tthenReturn(true);\n+\t\t// add a user to submitting team\n+\t\tsubmittingTeamMembers.add(createUserGroup(SUBMITTER_PRINCIPAL_ID));\n+\t\t// user is registered for challenge\n+\t\tchallengeParticipants.add(createUserGroup(SUBMITTER_PRINCIPAL_ID));\n+\n+\t\tevaluation.setQuota(null);\n+\t\tevaluationRound.setLimits(Arrays.asList(dailyLimit, weeklyLimit, monthlyLimit));\n+\t\twhen(mockEvaluationDAO.hasEvaluationRounds(EVAL_ID)).thenReturn(true);\n+\t\twhen(mockEvaluationDAO.getEvaluationRoundForTimestamp(eq(EVAL_ID), any(Instant.class))).thenReturn(Optional.of(evaluationRound));\n+\n+\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeam(eq(Long.parseLong(EVAL_ID)),eq(Long.parseLong(SUBMITTING_TEAM_ID)),\n+\t\t\t\teq(dailyStart), eq(roundEnd),\n+\t\t\t\teq(STATUSES_COUNTED_TOWARD_QUOTA))).thenReturn(dailyLimitCount);\n+\t\t//exceeds the monthly limit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 615}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTk1MTExOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionEligibilityManagerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToxODo1MVrOHPffRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToxODo1MVrOHPffRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwNjU5OA==", "bodyText": "Call under test", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486006598", "createdAt": "2020-09-10T01:18:51Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionEligibilityManagerTest.java", "diffHunk": "@@ -355,23 +525,151 @@ public void testGetTeamSubmissionEligibilityQuotaFilled() throws Exception {\n \t\tassertFalse(mse.getHasConflictingSubmission());\n \t\tassertFalse(mse.getIsEligible());\n \t}\n-\t\n+\n+\t@Test\n+\tpublic void testGetTeamSubmissionEligibility_MultipleSubmissionLimits_exceededOneLimit() throws Exception {\n+\t\t// team is registered\n+\t\twhen(mockChallengeTeamDAO.isTeamRegistered(\n+\t\t\t\tLong.parseLong(CHALLENGE_ID),\n+\t\t\t\tLong.parseLong(SUBMITTING_TEAM_ID))).\n+\t\t\t\tthenReturn(true);\n+\t\t// add a user to submitting team\n+\t\tsubmittingTeamMembers.add(createUserGroup(SUBMITTER_PRINCIPAL_ID));\n+\t\t// user is registered for challenge\n+\t\tchallengeParticipants.add(createUserGroup(SUBMITTER_PRINCIPAL_ID));\n+\n+\t\tevaluation.setQuota(null);\n+\t\tevaluationRound.setLimits(Arrays.asList(dailyLimit, weeklyLimit, monthlyLimit));\n+\t\twhen(mockEvaluationDAO.hasEvaluationRounds(EVAL_ID)).thenReturn(true);\n+\t\twhen(mockEvaluationDAO.getEvaluationRoundForTimestamp(eq(EVAL_ID), any(Instant.class))).thenReturn(Optional.of(evaluationRound));\n+\n+\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeam(eq(Long.parseLong(EVAL_ID)),eq(Long.parseLong(SUBMITTING_TEAM_ID)),\n+\t\t\t\teq(dailyStart), eq(roundEnd),\n+\t\t\t\teq(STATUSES_COUNTED_TOWARD_QUOTA))).thenReturn(dailyLimitCount);\n+\t\t//exceeds the monthly limit\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeam(eq(Long.parseLong(EVAL_ID)),eq(Long.parseLong(SUBMITTING_TEAM_ID)),\n+\t\t\t\teq(weeklyStart), eq(roundEnd),\n+\t\t\t\teq(STATUSES_COUNTED_TOWARD_QUOTA))).thenReturn(weeklyLimitCount + 1);\n+\n+\t\tMap<Long,Long> dailyMemberSubmissionCounts = Collections.singletonMap(new Long(SUBMITTER_PRINCIPAL_ID), dailyLimitCount);\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeamMembers(Long.parseLong(EVAL_ID),Long.parseLong(SUBMITTING_TEAM_ID),\n+\t\t\t\tdailyStart, roundEnd,\n+\t\t\t\tSTATUSES_COUNTED_TOWARD_QUOTA)).thenReturn(dailyMemberSubmissionCounts);\n+\n+\t\tMap<Long,Long> weeklyMemberSubmissionCounts = Collections.singletonMap(new Long(SUBMITTER_PRINCIPAL_ID), weeklyLimitCount + 1);\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeamMembers(Long.parseLong(EVAL_ID),Long.parseLong(SUBMITTING_TEAM_ID),\n+\t\t\t\tweeklyStart, roundEnd,\n+\t\t\t\tSTATUSES_COUNTED_TOWARD_QUOTA)).thenReturn(weeklyMemberSubmissionCounts);\n+\n+\t\tMap<Long,Long> monthlyMemberSubmissionCounts = Collections.singletonMap(new Long(SUBMITTER_PRINCIPAL_ID), monthlyLimitCount);\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeamMembers(Long.parseLong(EVAL_ID),Long.parseLong(SUBMITTING_TEAM_ID),\n+\t\t\t\tmonthlyStart, roundEnd,\n+\t\t\t\tSTATUSES_COUNTED_TOWARD_QUOTA)).thenReturn(monthlyMemberSubmissionCounts);\n+\n+\t\tTeamSubmissionEligibility tse = submissionEligibilityManager.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 635}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTk1ODc4OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/SubmissionDAOImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToyMzowM1rOHPfjrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToyMzowM1rOHPfjrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwNzcyNQ==", "bodyText": "We need to add the submission round to the data stored in the submission view.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486007725", "createdAt": "2020-09-10T01:23:03Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/evaluation/dao/SubmissionDAOImpl.java", "diffHunk": "@@ -868,6 +870,19 @@ public void truncateAll() {\n \t\tjdbcTemplate.update(\"DELETE FROM \" + TABLE_SUBMISSION);\n \t\tjdbcTemplate.update(\"DELETE FROM \" + TABLE_EVALUATION);\n \t}\n+\n+\t@Override\n+\tpublic boolean hasSubmissionForEvaluationRound(String evalId, String evalRoundId){\n+\t\tMapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+\t\tparameterSource.addValue(DBOConstants.PARAM_SUBMISSION_EVAL_ID, evalId);\n+\t\tparameterSource.addValue(DBOConstants.PARAM_SUBMISSION_EVAL_ROUND_ID, evalRoundId);\n+\n+\t\tString sql = \"SELECT COUNT(*) > 0 FROM \" + TABLE_SUBMISSION +\n+\t\t\t\t\" WHERE \" + COL_SUBMISSION_EVAL_ROUND_ID + \" = :\" + DBOConstants.PARAM_SUBMISSION_EVAL_ROUND_ID +\n+\t\t\t\t\" AND \" + COL_SUBMISSION_EVAL_ID + \" = :\" + DBOConstants.PARAM_SUBMISSION_EVAL_ID;\n+\n+\t\treturn namedJdbcTemplate.queryForObject(sql, parameterSource, Boolean.class);\n+\t}\n \t\n \tprivate static ObjectDataDTO mapSubmissionDataRow(ResultSet rs, int index, int maxAnnotationChars) throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzIwNTQ2OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionEligibilityManagerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzozNjozOVrOHP-tEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzozNjozOVrOHP-tEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxODAzNA==", "bodyText": "Call under test", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486518034", "createdAt": "2020-09-10T17:36:39Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionEligibilityManagerTest.java", "diffHunk": "@@ -355,23 +525,151 @@ public void testGetTeamSubmissionEligibilityQuotaFilled() throws Exception {\n \t\tassertFalse(mse.getHasConflictingSubmission());\n \t\tassertFalse(mse.getIsEligible());\n \t}\n-\t\n+\n+\t@Test\n+\tpublic void testGetTeamSubmissionEligibility_MultipleSubmissionLimits_exceededOneLimit() throws Exception {\n+\t\t// team is registered\n+\t\twhen(mockChallengeTeamDAO.isTeamRegistered(\n+\t\t\t\tLong.parseLong(CHALLENGE_ID),\n+\t\t\t\tLong.parseLong(SUBMITTING_TEAM_ID))).\n+\t\t\t\tthenReturn(true);\n+\t\t// add a user to submitting team\n+\t\tsubmittingTeamMembers.add(createUserGroup(SUBMITTER_PRINCIPAL_ID));\n+\t\t// user is registered for challenge\n+\t\tchallengeParticipants.add(createUserGroup(SUBMITTER_PRINCIPAL_ID));\n+\n+\t\tevaluation.setQuota(null);\n+\t\tevaluationRound.setLimits(Arrays.asList(dailyLimit, weeklyLimit, monthlyLimit));\n+\t\twhen(mockEvaluationDAO.hasEvaluationRounds(EVAL_ID)).thenReturn(true);\n+\t\twhen(mockEvaluationDAO.getEvaluationRoundForTimestamp(eq(EVAL_ID), any(Instant.class))).thenReturn(Optional.of(evaluationRound));\n+\n+\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeam(eq(Long.parseLong(EVAL_ID)),eq(Long.parseLong(SUBMITTING_TEAM_ID)),\n+\t\t\t\teq(dailyStart), eq(roundEnd),\n+\t\t\t\teq(STATUSES_COUNTED_TOWARD_QUOTA))).thenReturn(dailyLimitCount);\n+\t\t//exceeds the monthly limit\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeam(eq(Long.parseLong(EVAL_ID)),eq(Long.parseLong(SUBMITTING_TEAM_ID)),\n+\t\t\t\teq(weeklyStart), eq(roundEnd),\n+\t\t\t\teq(STATUSES_COUNTED_TOWARD_QUOTA))).thenReturn(weeklyLimitCount + 1);\n+\n+\t\tMap<Long,Long> dailyMemberSubmissionCounts = Collections.singletonMap(new Long(SUBMITTER_PRINCIPAL_ID), dailyLimitCount);\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeamMembers(Long.parseLong(EVAL_ID),Long.parseLong(SUBMITTING_TEAM_ID),\n+\t\t\t\tdailyStart, roundEnd,\n+\t\t\t\tSTATUSES_COUNTED_TOWARD_QUOTA)).thenReturn(dailyMemberSubmissionCounts);\n+\n+\t\tMap<Long,Long> weeklyMemberSubmissionCounts = Collections.singletonMap(new Long(SUBMITTER_PRINCIPAL_ID), weeklyLimitCount + 1);\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeamMembers(Long.parseLong(EVAL_ID),Long.parseLong(SUBMITTING_TEAM_ID),\n+\t\t\t\tweeklyStart, roundEnd,\n+\t\t\t\tSTATUSES_COUNTED_TOWARD_QUOTA)).thenReturn(weeklyMemberSubmissionCounts);\n+\n+\t\tMap<Long,Long> monthlyMemberSubmissionCounts = Collections.singletonMap(new Long(SUBMITTER_PRINCIPAL_ID), monthlyLimitCount);\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeamMembers(Long.parseLong(EVAL_ID),Long.parseLong(SUBMITTING_TEAM_ID),\n+\t\t\t\tmonthlyStart, roundEnd,\n+\t\t\t\tSTATUSES_COUNTED_TOWARD_QUOTA)).thenReturn(monthlyMemberSubmissionCounts);\n+\n+\t\tTeamSubmissionEligibility tse = submissionEligibilityManager.\n+\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID, now);\n+\n+\t\tassertEquals(EVAL_ID, tse.getEvaluationId());\n+\t\tassertEquals(SUBMITTING_TEAM_ID, tse.getTeamId());\n+\t\tassertNotNull(tse.getEligibilityStateHash());\n+\n+\t\tSubmissionEligibility teamEligibility = tse.getTeamEligibility();\n+\t\tassertTrue(teamEligibility.getIsRegistered());\n+\t\tassertFalse(teamEligibility.getIsEligible());\n+\t\tassertTrue(teamEligibility.getIsQuotaFilled());\n+\n+\t\tList<MemberSubmissionEligibility> membersEligibility = tse.getMembersEligibility();\n+\t\tassertEquals(1, membersEligibility.size());\n+\t\tMemberSubmissionEligibility mse = membersEligibility.get(0);\n+\t\tassertEquals(new Long(SUBMITTER_PRINCIPAL_ID), mse.getPrincipalId());\n+\t\tassertTrue(mse.getIsRegistered());\n+\t\tassertTrue(mse.getIsQuotaFilled());\n+\t\tassertFalse(mse.getHasConflictingSubmission());\n+\t\tassertFalse(mse.getIsEligible());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetTeamSubmissionEligibility_MultipleSubmissionLimits_noneExceeded() throws Exception {\n+\t\t// team is registered\n+\t\twhen(mockChallengeTeamDAO.isTeamRegistered(\n+\t\t\t\tLong.parseLong(CHALLENGE_ID),\n+\t\t\t\tLong.parseLong(SUBMITTING_TEAM_ID))).\n+\t\t\t\tthenReturn(true);\n+\t\t// add a user to submitting team\n+\t\tsubmittingTeamMembers.add(createUserGroup(SUBMITTER_PRINCIPAL_ID));\n+\t\t// user is registered for challenge\n+\t\tchallengeParticipants.add(createUserGroup(SUBMITTER_PRINCIPAL_ID));\n+\n+\t\tevaluation.setQuota(null);\n+\t\tevaluationRound.setLimits(Arrays.asList(dailyLimit, weeklyLimit, monthlyLimit));\n+\t\twhen(mockEvaluationDAO.hasEvaluationRounds(EVAL_ID)).thenReturn(true);\n+\t\twhen(mockEvaluationDAO.getEvaluationRoundForTimestamp(eq(EVAL_ID), any(Instant.class))).thenReturn(Optional.of(evaluationRound));\n+\n+\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeam(eq(Long.parseLong(EVAL_ID)),eq(Long.parseLong(SUBMITTING_TEAM_ID)),\n+\t\t\t\teq(dailyStart), eq(roundEnd),\n+\t\t\t\teq(STATUSES_COUNTED_TOWARD_QUOTA))).thenReturn(dailyLimitCount);\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeam(eq(Long.parseLong(EVAL_ID)),eq(Long.parseLong(SUBMITTING_TEAM_ID)),\n+\t\t\t\teq(weeklyStart), eq(roundEnd),\n+\t\t\t\teq(STATUSES_COUNTED_TOWARD_QUOTA))).thenReturn(weeklyLimitCount);\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeam(eq(Long.parseLong(EVAL_ID)),eq(Long.parseLong(SUBMITTING_TEAM_ID)),\n+\t\t\t\teq(monthlyStart), eq(roundEnd),\n+\t\t\t\teq(STATUSES_COUNTED_TOWARD_QUOTA))).thenReturn(monthlyLimitCount);\n+\n+\t\tMap<Long,Long> dailyMemberSubmissionCounts = Collections.singletonMap(new Long(SUBMITTER_PRINCIPAL_ID), dailyLimitCount);\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeamMembers(Long.parseLong(EVAL_ID),Long.parseLong(SUBMITTING_TEAM_ID),\n+\t\t\t\tdailyStart, roundEnd,\n+\t\t\t\tSTATUSES_COUNTED_TOWARD_QUOTA)).thenReturn(dailyMemberSubmissionCounts);\n+\n+\t\tMap<Long,Long> weeklyMemberSubmissionCounts = Collections.singletonMap(new Long(SUBMITTER_PRINCIPAL_ID), weeklyLimitCount);\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeamMembers(Long.parseLong(EVAL_ID),Long.parseLong(SUBMITTING_TEAM_ID),\n+\t\t\t\tweeklyStart, roundEnd,\n+\t\t\t\tSTATUSES_COUNTED_TOWARD_QUOTA)).thenReturn(weeklyMemberSubmissionCounts);\n+\n+\t\tMap<Long,Long> monthlyMemberSubmissionCounts = Collections.singletonMap(new Long(SUBMITTER_PRINCIPAL_ID), monthlyLimitCount);\n+\t\twhen(mockSubmissionDAO.countSubmissionsByTeamMembers(Long.parseLong(EVAL_ID),Long.parseLong(SUBMITTING_TEAM_ID),\n+\t\t\t\tmonthlyStart, roundEnd,\n+\t\t\t\tSTATUSES_COUNTED_TOWARD_QUOTA)).thenReturn(monthlyMemberSubmissionCounts);\n+\n+\t\tTeamSubmissionEligibility tse = submissionEligibilityManager.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 700}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzIxNjk4OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionEligibilityManagerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzozOTozMVrOHP-0Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzozOTozMVrOHP-0Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxOTgxOQ==", "bodyText": "You could loop through each month", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486519819", "createdAt": "2020-09-10T17:39:31Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionEligibilityManagerTest.java", "diffHunk": "@@ -381,136 +679,192 @@ public void testGetTeamSubmissionEligibilityConflictingSubmission() throws Excep\n \t\tassertTrue(mse.getHasConflictingSubmission());\n \t\tassertFalse(mse.getIsEligible());\n \t}\n-\t\n-\t\n+\n+\n \t@Test\n \tpublic void testIsTeamEligibleHappyCase() throws Exception {\n \t\tcreateValidTeamSubmissionState();\n \t\tTeamSubmissionEligibility tse = submissionEligibilityManager.\n-\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID);\n+\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID, now);\n \t\tint tseHash = SubmissionEligibilityManagerImpl.computeTeamSubmissionEligibilityHash(tse);\n-\t\t\n+\n \t\tassertTrue(submissionEligibilityManager.\n-\t\t\t\tisTeamEligible(EVAL_ID, \n-\t\t\t\t\t\tSUBMITTING_TEAM_ID, \n-\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID), \n-\t\t\t\t\t\t\"\"+tseHash, \n-\t\t\t\t\t\tnew Date()).isAuthorized());\n+\t\t\t\tisTeamEligible(EVAL_ID,\n+\t\t\t\t\t\tSUBMITTING_TEAM_ID,\n+\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID),\n+\t\t\t\t\t\t\"\"+tseHash,\n+\t\t\t\t\t\tnow).isAuthorized());\n \t}\n \n \t@Test\n \tpublic void testIsTeamEligibleOutsideSubmissionRange() throws Exception {\n \t\tcreateValidTeamSubmissionState();\n \t\tTeamSubmissionEligibility tse = submissionEligibilityManager.\n-\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID);\n+\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID, now);\n \t\tint tseHash = SubmissionEligibilityManagerImpl.computeTeamSubmissionEligibilityHash(tse);\n \t\t// start with happy case\n \t\tassertTrue(submissionEligibilityManager.\n-\t\t\t\tisTeamEligible(EVAL_ID, \n-\t\t\t\t\t\tSUBMITTING_TEAM_ID, \n-\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID), \n-\t\t\t\t\t\t\"\"+tseHash, \n-\t\t\t\t\t\tnew Date()).isAuthorized());\n+\t\t\t\tisTeamEligible(EVAL_ID,\n+\t\t\t\t\t\tSUBMITTING_TEAM_ID,\n+\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID),\n+\t\t\t\t\t\t\"\"+tseHash,\n+\t\t\t\t\t\tnow).isAuthorized());\n \t\t// ... but if we're outside the allowed submission interval then submission isn't allowed\n \t\tlong longTimeAgo = System.currentTimeMillis()-1000000L;\n \t\tassertFalse(submissionEligibilityManager.\n-\t\t\t\t\t\tisTeamEligible(EVAL_ID, \n-\t\t\t\t\t\t\t\tSUBMITTING_TEAM_ID, \n-\t\t\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID), \n-\t\t\t\t\t\t\t\t\"\"+tseHash, \n+\t\t\t\t\t\tisTeamEligible(EVAL_ID,\n+\t\t\t\t\t\t\t\tSUBMITTING_TEAM_ID,\n+\t\t\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID),\n+\t\t\t\t\t\t\t\t\"\"+tseHash,\n \t\t\t\t\t\t\t\tnew Date(longTimeAgo)).isAuthorized());\n \t}\n \n-\t\n+\n \t@Test\n \tpublic void testIsTeamEligibleIncorrectHash() throws Exception {\n \t\tcreateValidTeamSubmissionState();\n \t\tTeamSubmissionEligibility tse = submissionEligibilityManager.\n-\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID);\n+\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID, now);\n \t\tint tseHash = SubmissionEligibilityManagerImpl.computeTeamSubmissionEligibilityHash(tse);\n \t\t// start with happy case\n \t\tassertTrue(submissionEligibilityManager.\n-\t\t\t\tisTeamEligible(EVAL_ID, \n-\t\t\t\t\t\tSUBMITTING_TEAM_ID, \n-\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID), \n-\t\t\t\t\t\t\"\"+tseHash, \n-\t\t\t\t\t\tnew Date()).isAuthorized());\n+\t\t\t\tisTeamEligible(EVAL_ID,\n+\t\t\t\t\t\tSUBMITTING_TEAM_ID,\n+\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID),\n+\t\t\t\t\t\t\"\"+tseHash,\n+\t\t\t\t\t\tnow).isAuthorized());\n \t\t// but if the hash is missing then submission isn't allowed\n \t\tassertFalse(submissionEligibilityManager.\n-\t\t\t\tisTeamEligible(EVAL_ID, \n-\t\t\t\t\t\tSUBMITTING_TEAM_ID, \n-\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID), \n-\t\t\t\t\t\tnull, \n-\t\t\t\t\t\tnew Date()).isAuthorized());\n+\t\t\t\tisTeamEligible(EVAL_ID,\n+\t\t\t\t\t\tSUBMITTING_TEAM_ID,\n+\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID),\n+\t\t\t\t\t\tnull,\n+\t\t\t\t\t\tnow).isAuthorized());\n \t\t// ditto for an incorrect hash\n \t\tassertFalse(submissionEligibilityManager.\n-\t\t\t\tisTeamEligible(EVAL_ID, \n-\t\t\t\t\t\tSUBMITTING_TEAM_ID, \n-\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID), \n-\t\t\t\t\t\t\"gobbldygook\", \n-\t\t\t\t\t\tnew Date()).isAuthorized());\n-\t\t\n+\t\t\t\tisTeamEligible(EVAL_ID,\n+\t\t\t\t\t\tSUBMITTING_TEAM_ID,\n+\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID),\n+\t\t\t\t\t\t\"gobbldygook\",\n+\t\t\t\t\t\tnow).isAuthorized());\n+\n \t\tassertFalse(submissionEligibilityManager.\n-\t\t\t\tisTeamEligible(EVAL_ID, \n-\t\t\t\t\t\tSUBMITTING_TEAM_ID, \n-\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID), \n-\t\t\t\t\t\t\"\"+(tseHash+1), \n-\t\t\t\t\t\tnew Date()).isAuthorized());\n+\t\t\t\tisTeamEligible(EVAL_ID,\n+\t\t\t\t\t\tSUBMITTING_TEAM_ID,\n+\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID),\n+\t\t\t\t\t\t\"\"+(tseHash+1),\n+\t\t\t\t\t\tnow).isAuthorized());\n \t}\n \n \t@Test\n \tpublic void testIsTeamEligibleTeamIsIneligible() throws Exception {\n \t\tcreateValidTeamSubmissionState();\n \t\tTeamSubmissionEligibility tse = submissionEligibilityManager.\n-\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID);\n+\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID, now);\n \t\tint tseHash = SubmissionEligibilityManagerImpl.computeTeamSubmissionEligibilityHash(tse);\n \t\t// start with happy case\n \t\tassertTrue(submissionEligibilityManager.\n-\t\t\t\tisTeamEligible(EVAL_ID, \n-\t\t\t\t\t\tSUBMITTING_TEAM_ID, \n-\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID), \n-\t\t\t\t\t\t\"\"+tseHash, \n-\t\t\t\t\t\tnew Date()).isAuthorized());\n+\t\t\t\tisTeamEligible(EVAL_ID,\n+\t\t\t\t\t\tSUBMITTING_TEAM_ID,\n+\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID),\n+\t\t\t\t\t\t\"\"+tseHash,\n+\t\t\t\t\t\tnow).isAuthorized());\n \t\t// ... but if the team is unregistered it is no longer eligible\n \t\twhen(mockChallengeTeamDAO.isTeamRegistered(\n-\t\t\t\tLong.parseLong(CHALLENGE_ID), \n+\t\t\t\tLong.parseLong(CHALLENGE_ID),\n \t\t\t\tLong.parseLong(SUBMITTING_TEAM_ID))).\n \t\t\tthenReturn(false);\n \t\ttse = submissionEligibilityManager.\n-\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID);\n+\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID, now);\n \t\ttseHash = SubmissionEligibilityManagerImpl.computeTeamSubmissionEligibilityHash(tse);\n \t\tassertFalse(submissionEligibilityManager.\n-\t\t\t\tisTeamEligible(EVAL_ID, \n-\t\t\t\t\t\tSUBMITTING_TEAM_ID, \n-\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID), \n-\t\t\t\t\t\t\"\"+tseHash, \n-\t\t\t\t\t\tnew Date()).isAuthorized());\n+\t\t\t\tisTeamEligible(EVAL_ID,\n+\t\t\t\t\t\tSUBMITTING_TEAM_ID,\n+\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID),\n+\t\t\t\t\t\t\"\"+tseHash,\n+\t\t\t\t\t\tnow).isAuthorized());\n \t}\n \n \t@Test\n \tpublic void testIsTeamEligibleMemberIsIneligible() throws Exception {\n \t\tcreateValidTeamSubmissionState();\n \t\tTeamSubmissionEligibility tse = submissionEligibilityManager.\n-\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID);\n+\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID, now);\n \t\tint tseHash = SubmissionEligibilityManagerImpl.computeTeamSubmissionEligibilityHash(tse);\n \t\t// start with happy case\n \t\tassertTrue(submissionEligibilityManager.\n-\t\t\t\tisTeamEligible(EVAL_ID, \n-\t\t\t\t\t\tSUBMITTING_TEAM_ID, \n-\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID), \n-\t\t\t\t\t\t\"\"+tseHash, \n-\t\t\t\t\t\tnew Date()).isAuthorized());\n+\t\t\t\tisTeamEligible(EVAL_ID,\n+\t\t\t\t\t\tSUBMITTING_TEAM_ID,\n+\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID),\n+\t\t\t\t\t\t\"\"+tseHash,\n+\t\t\t\t\t\tnow).isAuthorized());\n \t\t// ... but if the contributor is unregistered she is no longer eligible\n \t\tchallengeParticipants.clear();\n \t\ttse = submissionEligibilityManager.\n-\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID);\n+\t\t\t\tgetTeamSubmissionEligibility(evaluation, SUBMITTING_TEAM_ID, now);\n \t\ttseHash = SubmissionEligibilityManagerImpl.computeTeamSubmissionEligibilityHash(tse);\n \t\tassertFalse(submissionEligibilityManager.\n-\t\t\t\tisTeamEligible(EVAL_ID, \n-\t\t\t\t\t\tSUBMITTING_TEAM_ID, \n-\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID), \n-\t\t\t\t\t\t\"\"+tseHash, \n-\t\t\t\t\t\tnew Date()).isAuthorized());\n+\t\t\t\tisTeamEligible(EVAL_ID,\n+\t\t\t\t\t\tSUBMITTING_TEAM_ID,\n+\t\t\t\t\t\tCollections.singletonList(SUBMITTER_PRINCIPAL_ID),\n+\t\t\t\t\t\t\"\"+tseHash,\n+\t\t\t\t\t\tnow).isAuthorized());\n+\t}\n+\n+\t@Test\n+\tpublic void submissionCountStartDate_TOTAL(){\n+\t\tDate start = submissionEligibilityManager.submissionCountStartDate(EvaluationRoundLimitType.TOTAL, roundStart, now);\n+\t\tassertEquals(roundStart, start);\n+\t}\n+\n+\t@Test\n+\tpublic void submissionCountStartDate_DAILY(){\n+\t\tDate now = Date.from(LocalDateTime.parse(\"2019-09-20T23:59:59\").toInstant(ZoneOffset.UTC));\n+\n+\t\tDate start = submissionEligibilityManager.submissionCountStartDate(EvaluationRoundLimitType.DAILY, roundStart, now);\n+\n+\t\tDate expected = Date.from(LocalDateTime.parse(\"2019-09-20T00:00:00\").toInstant(ZoneOffset.UTC));\n+\t\tassertEquals(expected, start);\n+\t}\n+\n+\t@Test\n+\tpublic void submissionCountStartDate_WEEKLY_CurrentTimeOnMonday(){\n+\t\t//this test ensures the previous week's monday is not returned if we are already on a monday\n+\t\tDate now = Date.from(LocalDateTime.parse(\"2019-09-16T00:00:00\").toInstant(ZoneOffset.UTC));\n+\n+\t\tDate start = submissionEligibilityManager.submissionCountStartDate(EvaluationRoundLimitType.WEEKLY, roundStart, now);\n+\n+\t\tDate expected = Date.from(LocalDateTime.parse(\"2019-09-16T00:00:00\").toInstant(ZoneOffset.UTC));\n+\t\tassertEquals(expected, start);\n+\t}\n+\n+\t@Test\n+\tpublic void submissionCountStartDate_WEEKLY_CurrentTimeNotOnMonday(){\n+\t\tDate now = Date.from(LocalDateTime.parse(\"2019-09-20T23:59:59\").toInstant(ZoneOffset.UTC));\n+\n+\t\tDate start = submissionEligibilityManager.submissionCountStartDate(EvaluationRoundLimitType.WEEKLY, roundStart, now);\n+\n+\t\tDate expected = Date.from(LocalDateTime.parse(\"2019-09-16T00:00:00\").toInstant(ZoneOffset.UTC));\n+\t\tassertEquals(expected, start);\n \t}\n \n+\t@Test\n+\tpublic void submissionCountStartDate_MONTHLY(){\n+\t\tDate now = Date.from(LocalDateTime.parse(\"2019-09-20T23:59:59\").toInstant(ZoneOffset.UTC));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 989}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzIyODE5OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/evaluation/manager/SubmissionManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo0Mjo0M1rOHP-7CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo0Mjo0M1rOHP-7CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyMTYwOA==", "bodyText": "Before doing this we need to make sure that the client does not override the round id itself (Might want to throw if the evaluationRoundId is supplied, informing the user that it is computed by the server)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486521608", "createdAt": "2020-09-10T17:42:43Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/evaluation/manager/SubmissionManagerImpl.java", "diffHunk": "@@ -183,10 +185,17 @@ public Submission createSubmission(UserInfo userInfo, Submission submission, Str\n \t\tString principalId = userInfo.getId().toString();\n \t\t\n \t\tsubmission.setUserId(principalId);\n-\t\t\n+\n+\t\t// tag the submission with the current submission round if it is present\n+\t\t// if it doesn't exist it could possibly be because the user does not exist yet\n+\t\tevaluationDAO.getEvaluationRoundForTimestamp(evalId, Instant.now())\n+\t\t\t.ifPresent((EvaluationRound round) -> {\n+\t\t\t\tsubmission.setEvaluationRoundId(round.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzIzNTc1OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/evaluation/manager/SubmissionQuotaUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo0NDo0NVrOHP-_wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo0NDo0NVrOHP-_wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyMjgxNw==", "bodyText": "Remove or resolve TODO?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486522817", "createdAt": "2020-09-10T17:44:45Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/evaluation/manager/SubmissionQuotaUtil.java", "diffHunk": "@@ -61,20 +65,46 @@ public static boolean isSubmissionAllowed(Evaluation evaluation, Date now) {\n \t * interest is within the time range allowed for submissions.\n \t * \n \t */\n-\tpublic static Pair<Date, Date> getRoundInterval(Evaluation evaluation, Date now) {\n-\t\tif (evaluation==null) throw new IllegalArgumentException(\"evaluation is required.\");\n+\tpublic static Pair<Date, Date> getRoundInterval(SubmissionQuota submissionQuota, Date now) {\n \t\tif (now==null) throw new IllegalArgumentException(\"current date is required.\");\n-\t\tSubmissionQuota submissionQuota = evaluation.getQuota();\n-\t\tif (submissionQuota==null || \n+\t\tif (submissionQuota==null ||\n \t\t\t\t(submissionQuota.getFirstRoundStart()==null || \n \t\t\t\tsubmissionQuota.getRoundDurationMillis()==null))\n \t\t\treturn  new Pair<Date,Date>(null,null); // there is no start or end\n-\t\tif (!isSubmissionAllowed(evaluation, now)) \n+\t\tif (!isSubmissionAllowed(submissionQuota, now))\n \t\t\tthrow new IllegalArgumentException(\"The given date is outside the time range allowed for submissions.\");\n \t\tlong frs = submissionQuota.getFirstRoundStart().getTime();\n \t\tlong roundLen = submissionQuota.getRoundDurationMillis();\n \t\tlong start=frs+((now.getTime()-frs)/roundLen)*roundLen;\n \t\tlong end=start+roundLen;\n \t\treturn new Pair<Date,Date>(new Date(start),new Date(end));\n \t}\n+\n+\n+\tpublic static Optional<EvaluationRound> convertToCurrentEvaluationRound(SubmissionQuota quota, Date now){\n+\t\t//TODO: modify behavior to create a EvaluationRound for null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI2NTYxOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionManagerAutowiredTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1MjozN1rOHP_SCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1MjozN1rOHP_SCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyNzQ5OA==", "bodyText": "Make sure that when you change the createSubmission with the validation on the round id a dedicated test is added", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486527498", "createdAt": "2020-09-10T17:52:37Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionManagerAutowiredTest.java", "diffHunk": "@@ -189,6 +192,27 @@ public void testDockerRepoSubmissionCreateAndRead() throws Exception {\n \t\tassertEquals(DOCKER_REPOSITORY_NAME, retrieved.getDockerRepositoryName());\n \t\tassertEquals(DOCKER_DIGEST, retrieved.getDockerDigest());\n \t}\n+\n+\t@Test\n+\tpublic void testCreateSubmission_taggedWithCurrentEvaluationRound() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI2NzY4OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionManagerAutowiredTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1MzoxMlrOHP_TcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1MzoxMlrOHP_TcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyNzg1Ng==", "bodyText": "This check should also be verified after line 207", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486527856", "createdAt": "2020-09-10T17:53:12Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionManagerAutowiredTest.java", "diffHunk": "@@ -189,6 +192,27 @@ public void testDockerRepoSubmissionCreateAndRead() throws Exception {\n \t\tassertEquals(DOCKER_REPOSITORY_NAME, retrieved.getDockerRepositoryName());\n \t\tassertEquals(DOCKER_DIGEST, retrieved.getDockerDigest());\n \t}\n+\n+\t@Test\n+\tpublic void testCreateSubmission_taggedWithCurrentEvaluationRound() throws Exception {\n+\t\tInstant now = Instant.now();\n+\t\tEvaluationRound evaluationRound = new EvaluationRound();\n+\t\tevaluationRound.setEvaluationId(evalId);\n+\t\tevaluationRound.setRoundStart(Date.from(now));\n+\t\tevaluationRound.setRoundEnd(Date.from(now.plus(42, ChronoUnit.HOURS)));\n+\t\tevaluationRound = evaluationManager.createEvaluationRound(adminUserInfo, evaluationRound);\n+\n+\t\t// create a docker repository\n+\t\tsubmission = submissionManager.createSubmission(adminUserInfo, submission,\n+\t\t\t\tretrievedNode.getETag(), null, bundle);\n+\n+\t\tassertNotNull(submission.getId());\n+\n+\t\t// retrieve the submission\n+\t\tSubmission retrieved = submissionManager.getSubmission(adminUserInfo, submission.getId());\n+\t\tassertEquals(evaluationRound.getId(), retrieved.getEvaluationRoundId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI3MDY3OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionQuotaUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1Mzo1OVrOHP_VNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1Mzo1OVrOHP_VNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyODMxMA==", "bodyText": "Should we check also the other properties?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486528310", "createdAt": "2020-09-10T17:53:59Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionQuotaUtilTest.java", "diffHunk": "@@ -105,9 +112,82 @@ public void testWithoutRounds() {\n \t\teval.setQuota(quota);\n \t\tquota.setSubmissionLimit(10L);\n \n-\t\tassertTrue(SubmissionQuotaUtil.isSubmissionAllowed(eval, new Date()));\n+\t\tassertTrue(SubmissionQuotaUtil.isSubmissionAllowed(eval.getQuota(), new Date()));\n \t\tcheckPairEquals(new Pair<Date,Date>(null, null), \n-\t\t\t\tSubmissionQuotaUtil.getRoundInterval(eval, new Date()));\n+\t\t\t\tSubmissionQuotaUtil.getRoundInterval(eval.getQuota(), new Date()));\n \t}\n \n+\t@Test\n+\tpublic void testConvertToCurrentEvaluationRound_null(){\n+\t\tSubmissionQuota nullQuota = null;\n+\t\tOptional<EvaluationRound> optionalEvaluationRound = SubmissionQuotaUtil.convertToCurrentEvaluationRound(nullQuota, new Date());\n+\t\tassertTrue(optionalEvaluationRound.isPresent());\n+\t\toptionalEvaluationRound.ifPresent((round) ->{\n+\t\t\tassertNull(round.getRoundStart());\n+\t\t\tassertNull(round.getRoundEnd());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI3NDUxOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionQuotaUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1NTowNlrOHP_XpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1NTowNlrOHP_XpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyODkzMw==", "bodyText": "Call under test", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486528933", "createdAt": "2020-09-10T17:55:06Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/evaluation/manager/SubmissionQuotaUtilTest.java", "diffHunk": "@@ -105,9 +112,82 @@ public void testWithoutRounds() {\n \t\teval.setQuota(quota);\n \t\tquota.setSubmissionLimit(10L);\n \n-\t\tassertTrue(SubmissionQuotaUtil.isSubmissionAllowed(eval, new Date()));\n+\t\tassertTrue(SubmissionQuotaUtil.isSubmissionAllowed(eval.getQuota(), new Date()));\n \t\tcheckPairEquals(new Pair<Date,Date>(null, null), \n-\t\t\t\tSubmissionQuotaUtil.getRoundInterval(eval, new Date()));\n+\t\t\t\tSubmissionQuotaUtil.getRoundInterval(eval.getQuota(), new Date()));\n \t}\n \n+\t@Test\n+\tpublic void testConvertToCurrentEvaluationRound_null(){\n+\t\tSubmissionQuota nullQuota = null;\n+\t\tOptional<EvaluationRound> optionalEvaluationRound = SubmissionQuotaUtil.convertToCurrentEvaluationRound(nullQuota, new Date());\n+\t\tassertTrue(optionalEvaluationRound.isPresent());\n+\t\toptionalEvaluationRound.ifPresent((round) ->{\n+\t\t\tassertNull(round.getRoundStart());\n+\t\t\tassertNull(round.getRoundEnd());\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testConvertToCurrentEvaluationRound_SubmissionNotAllowed(){\n+\t\tSubmissionQuota quota = new SubmissionQuota();\n+\t\tInstant now = Instant.now();\n+\t\tquota.setFirstRoundStart(Date.from(now));\n+\t\tlong numRounds = 5;\n+\t\tlong roundDuration = 40L;\n+\t\tquota.setNumberOfRounds(numRounds);\n+\t\tquota.setRoundDurationMillis(roundDuration);\n+\n+\t\tDate roundAlreadyEnded = Date.from(now.plus(numRounds * roundDuration + 1, ChronoUnit.MILLIS));\n+\n+\t\tOptional<EvaluationRound> optionalEvaluationRound = SubmissionQuotaUtil.convertToCurrentEvaluationRound(quota, roundAlreadyEnded);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI5MDU0OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1OToxNFrOHP_hSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1OToxNFrOHP_hSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMTQwMA==", "bodyText": "We might want to add the information about ACL (e.g. update on the evaluation is needed)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486531400", "createdAt": "2020-09-10T17:59:14Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "diffHunk": "@@ -1190,7 +1193,160 @@ QueryTableResults query(\n \t\t\t@PathVariable String subId) {\n \t\tserviceProvider.getEvaluationService().processCancelSubmissionRequest(userId, subId);\n \t}\n-\t\n+\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Creates a new EvaluationRound to associate with a Evaluation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI5MTIwOnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1OToyNlrOHP_hsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1OToyNlrOHP_hsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMTUwNg==", "bodyText": "See comment about, add the info about ACL", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486531506", "createdAt": "2020-09-10T17:59:26Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "diffHunk": "@@ -1190,7 +1193,160 @@ QueryTableResults query(\n \t\t\t@PathVariable String subId) {\n \t\tserviceProvider.getEvaluationService().processCancelSubmissionRequest(userId, subId);\n \t}\n-\t\n+\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Creates a new EvaluationRound to associate with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view,modify})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND, method = RequestMethod.POST)\n+\tpublic @ResponseBody\n+\tEvaluationRound createEvaluationRound(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@RequestBody EvaluationRound evaluationRound)\n+\t{\n+\t\tif(evaluationRound.getEvaluationId() == null){\n+\t\t\tevaluationRound.setEvaluationId(evalId);\n+\t\t}\n+\t\tif(!evalId.equals(evaluationRound.getEvaluationId())){\n+\t\t\tthrow new IllegalArgumentException(\"EvaluationId in URL path:\"+ evalId +\" does not match evaluationId in request body:\"+ evaluationRound.getEvaluationId());\n+\t\t}\n+\t\treturn serviceProvider.getEvaluationService().createEvaluationRound(userId, evaluationRound);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Retrieve an existing EvaluationRound associated with a Evaluation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI5MzY1OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowMDoxMFrOHP_jPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowMDoxMFrOHP_jPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMTkwMw==", "bodyText": "See comment above, let us add the ACL info", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486531903", "createdAt": "2020-09-10T18:00:10Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "diffHunk": "@@ -1190,7 +1193,160 @@ QueryTableResults query(\n \t\t\t@PathVariable String subId) {\n \t\tserviceProvider.getEvaluationService().processCancelSubmissionRequest(userId, subId);\n \t}\n-\t\n+\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Creates a new EvaluationRound to associate with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view,modify})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND, method = RequestMethod.POST)\n+\tpublic @ResponseBody\n+\tEvaluationRound createEvaluationRound(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@RequestBody EvaluationRound evaluationRound)\n+\t{\n+\t\tif(evaluationRound.getEvaluationId() == null){\n+\t\t\tevaluationRound.setEvaluationId(evalId);\n+\t\t}\n+\t\tif(!evalId.equals(evaluationRound.getEvaluationId())){\n+\t\t\tthrow new IllegalArgumentException(\"EvaluationId in URL path:\"+ evalId +\" does not match evaluationId in request body:\"+ evaluationRound.getEvaluationId());\n+\t\t}\n+\t\treturn serviceProvider.getEvaluationService().createEvaluationRound(userId, evaluationRound);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Retrieve an existing EvaluationRound associated with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND_WITH_ROUND_ID, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tEvaluationRound getEvaluationRound(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@PathVariable String roundId)\n+\t{\n+\t\treturn serviceProvider.getEvaluationService().getEvaluationRound(userId, evalId, roundId);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Retrieve all EvaluationRounds associated with a Evaluation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI5NDg3OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowMDozMVrOHP_kEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowMDozMVrOHP_kEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMjExNQ==", "bodyText": "I think this should be a 200 instead.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486532115", "createdAt": "2020-09-10T18:00:31Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "diffHunk": "@@ -1190,7 +1193,160 @@ QueryTableResults query(\n \t\t\t@PathVariable String subId) {\n \t\tserviceProvider.getEvaluationService().processCancelSubmissionRequest(userId, subId);\n \t}\n-\t\n+\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Creates a new EvaluationRound to associate with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view,modify})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND, method = RequestMethod.POST)\n+\tpublic @ResponseBody\n+\tEvaluationRound createEvaluationRound(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@RequestBody EvaluationRound evaluationRound)\n+\t{\n+\t\tif(evaluationRound.getEvaluationId() == null){\n+\t\t\tevaluationRound.setEvaluationId(evalId);\n+\t\t}\n+\t\tif(!evalId.equals(evaluationRound.getEvaluationId())){\n+\t\t\tthrow new IllegalArgumentException(\"EvaluationId in URL path:\"+ evalId +\" does not match evaluationId in request body:\"+ evaluationRound.getEvaluationId());\n+\t\t}\n+\t\treturn serviceProvider.getEvaluationService().createEvaluationRound(userId, evaluationRound);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Retrieve an existing EvaluationRound associated with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.CREATED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI5NTU1OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowMDo0MlrOHP_kfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowMDo0MlrOHP_kfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMjIyMQ==", "bodyText": "201 -> 200", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486532221", "createdAt": "2020-09-10T18:00:42Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "diffHunk": "@@ -1190,7 +1193,160 @@ QueryTableResults query(\n \t\t\t@PathVariable String subId) {\n \t\tserviceProvider.getEvaluationService().processCancelSubmissionRequest(userId, subId);\n \t}\n-\t\n+\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Creates a new EvaluationRound to associate with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view,modify})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND, method = RequestMethod.POST)\n+\tpublic @ResponseBody\n+\tEvaluationRound createEvaluationRound(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@RequestBody EvaluationRound evaluationRound)\n+\t{\n+\t\tif(evaluationRound.getEvaluationId() == null){\n+\t\t\tevaluationRound.setEvaluationId(evalId);\n+\t\t}\n+\t\tif(!evalId.equals(evaluationRound.getEvaluationId())){\n+\t\t\tthrow new IllegalArgumentException(\"EvaluationId in URL path:\"+ evalId +\" does not match evaluationId in request body:\"+ evaluationRound.getEvaluationId());\n+\t\t}\n+\t\treturn serviceProvider.getEvaluationService().createEvaluationRound(userId, evaluationRound);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Retrieve an existing EvaluationRound associated with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND_WITH_ROUND_ID, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tEvaluationRound getEvaluationRound(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@PathVariable String roundId)\n+\t{\n+\t\treturn serviceProvider.getEvaluationService().getEvaluationRound(userId, evalId, roundId);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Retrieve all EvaluationRounds associated with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.CREATED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI5ODQ5OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowMToyN1rOHP_mTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowMToyN1rOHP_mTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMjY4NQ==", "bodyText": "Info about ACL", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486532685", "createdAt": "2020-09-10T18:01:27Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "diffHunk": "@@ -1190,7 +1193,160 @@ QueryTableResults query(\n \t\t\t@PathVariable String subId) {\n \t\tserviceProvider.getEvaluationService().processCancelSubmissionRequest(userId, subId);\n \t}\n-\t\n+\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Creates a new EvaluationRound to associate with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view,modify})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND, method = RequestMethod.POST)\n+\tpublic @ResponseBody\n+\tEvaluationRound createEvaluationRound(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@RequestBody EvaluationRound evaluationRound)\n+\t{\n+\t\tif(evaluationRound.getEvaluationId() == null){\n+\t\t\tevaluationRound.setEvaluationId(evalId);\n+\t\t}\n+\t\tif(!evalId.equals(evaluationRound.getEvaluationId())){\n+\t\t\tthrow new IllegalArgumentException(\"EvaluationId in URL path:\"+ evalId +\" does not match evaluationId in request body:\"+ evaluationRound.getEvaluationId());\n+\t\t}\n+\t\treturn serviceProvider.getEvaluationService().createEvaluationRound(userId, evaluationRound);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Retrieve an existing EvaluationRound associated with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND_WITH_ROUND_ID, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tEvaluationRound getEvaluationRound(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@PathVariable String roundId)\n+\t{\n+\t\treturn serviceProvider.getEvaluationService().getEvaluationRound(userId, evalId, roundId);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Retrieve all EvaluationRounds associated with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND + UrlHelpers.LIST, method = RequestMethod.POST)\n+\tpublic @ResponseBody\n+\tEvaluationRoundListResponse getAllEvaluationRounds(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@RequestBody EvaluationRoundListRequest request)\n+\t{\n+\t\treturn serviceProvider.getEvaluationService().getAllEvaluationRounds(userId, evalId, request);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Update an existing EvaluationRound to associate with a Evaluation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI5OTY5OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowMTo0OFrOHP_nEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowMTo0OFrOHP_nEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMjg4MQ==", "bodyText": "Double check the http code", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486532881", "createdAt": "2020-09-10T18:01:48Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "diffHunk": "@@ -1190,7 +1193,160 @@ QueryTableResults query(\n \t\t\t@PathVariable String subId) {\n \t\tserviceProvider.getEvaluationService().processCancelSubmissionRequest(userId, subId);\n \t}\n-\t\n+\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Creates a new EvaluationRound to associate with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view,modify})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND, method = RequestMethod.POST)\n+\tpublic @ResponseBody\n+\tEvaluationRound createEvaluationRound(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@RequestBody EvaluationRound evaluationRound)\n+\t{\n+\t\tif(evaluationRound.getEvaluationId() == null){\n+\t\t\tevaluationRound.setEvaluationId(evalId);\n+\t\t}\n+\t\tif(!evalId.equals(evaluationRound.getEvaluationId())){\n+\t\t\tthrow new IllegalArgumentException(\"EvaluationId in URL path:\"+ evalId +\" does not match evaluationId in request body:\"+ evaluationRound.getEvaluationId());\n+\t\t}\n+\t\treturn serviceProvider.getEvaluationService().createEvaluationRound(userId, evaluationRound);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Retrieve an existing EvaluationRound associated with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND_WITH_ROUND_ID, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tEvaluationRound getEvaluationRound(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@PathVariable String roundId)\n+\t{\n+\t\treturn serviceProvider.getEvaluationService().getEvaluationRound(userId, evalId, roundId);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Retrieve all EvaluationRounds associated with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND + UrlHelpers.LIST, method = RequestMethod.POST)\n+\tpublic @ResponseBody\n+\tEvaluationRoundListResponse getAllEvaluationRounds(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@RequestBody EvaluationRoundListRequest request)\n+\t{\n+\t\treturn serviceProvider.getEvaluationService().getAllEvaluationRounds(userId, evalId, request);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Update an existing EvaluationRound to associate with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view,modify})\n+\t@ResponseStatus(HttpStatus.CREATED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzMwNjgxOnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowNDowMVrOHP_rmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowNDowMVrOHP_rmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzNDA0Mg==", "bodyText": "Delete. add ACL info", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486534042", "createdAt": "2020-09-10T18:04:01Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EvaluationController.java", "diffHunk": "@@ -1190,7 +1193,160 @@ QueryTableResults query(\n \t\t\t@PathVariable String subId) {\n \t\tserviceProvider.getEvaluationService().processCancelSubmissionRequest(userId, subId);\n \t}\n-\t\n+\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Creates a new EvaluationRound to associate with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view,modify})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND, method = RequestMethod.POST)\n+\tpublic @ResponseBody\n+\tEvaluationRound createEvaluationRound(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@RequestBody EvaluationRound evaluationRound)\n+\t{\n+\t\tif(evaluationRound.getEvaluationId() == null){\n+\t\t\tevaluationRound.setEvaluationId(evalId);\n+\t\t}\n+\t\tif(!evalId.equals(evaluationRound.getEvaluationId())){\n+\t\t\tthrow new IllegalArgumentException(\"EvaluationId in URL path:\"+ evalId +\" does not match evaluationId in request body:\"+ evaluationRound.getEvaluationId());\n+\t\t}\n+\t\treturn serviceProvider.getEvaluationService().createEvaluationRound(userId, evaluationRound);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Retrieve an existing EvaluationRound associated with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND_WITH_ROUND_ID, method = RequestMethod.GET)\n+\tpublic @ResponseBody\n+\tEvaluationRound getEvaluationRound(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@PathVariable String roundId)\n+\t{\n+\t\treturn serviceProvider.getEvaluationService().getEvaluationRound(userId, evalId, roundId);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Retrieve all EvaluationRounds associated with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND + UrlHelpers.LIST, method = RequestMethod.POST)\n+\tpublic @ResponseBody\n+\tEvaluationRoundListResponse getAllEvaluationRounds(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@RequestBody EvaluationRoundListRequest request)\n+\t{\n+\t\treturn serviceProvider.getEvaluationService().getAllEvaluationRounds(userId, evalId, request);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Update an existing EvaluationRound to associate with a Evaluation.\n+\t * This is a replacement for the deprecated <a href=\"${org.sagebionetworks.evaluation.model.SubmissionQuota}\">SubmissionQuota</a>\n+\t * which is a property inside of <a href=\"${org.sagebionetworks.evaluation.model.Evaluation}\">Evaluation</a>.\n+\t *\n+\t * EvaluationRounds define a fixed time period during which submissions to an Evaluation queue are accepted.\n+\t * Limits to the number of allowed submissions may be defined inside a EvaluationRound.\n+\t *\n+\t * @param userId\n+\t * @return\n+\t * @throws DatastoreException\n+\t * @throws InvalidModelException\n+\t * @throws NotFoundException\n+\t * @throws JSONObjectAdapterException\n+\t */\n+\t@RequiredScope({view,modify})\n+\t@ResponseStatus(HttpStatus.CREATED)\n+\t@RequestMapping(value = UrlHelpers.EVALUATION_ROUND_WITH_ROUND_ID, method = RequestMethod.PUT)\n+\tpublic @ResponseBody\n+\tEvaluationRound updateEvaluationRound(\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\t\t\t@PathVariable String evalId,\n+\t\t\t@PathVariable String roundId,\n+\t\t\t@RequestBody EvaluationRound evaluationRound)\n+\t{\n+\t\tif(!evalId.equals(evaluationRound.getEvaluationId())){\n+\t\t\tthrow new IllegalArgumentException(\"evalId in URL path:\"+ evalId +\" does not match evaluationId in request body:\"+ evaluationRound.getEvaluationId());\n+\t\t}\n+\t\tif(!roundId.equals(evaluationRound.getId())){\n+\t\t\tthrow new IllegalArgumentException(\"roundId in URL path:\"+ roundId +\" does not match id in request body:\"+ evaluationRound.getId());\n+\t\t}\n+\t\treturn serviceProvider.getEvaluationService().updateEvaluationRound(userId, evaluationRound);\n+\t}\n+\t//TODO:Not deprecated, using flag to hide from documentation until ready\n+\t@Deprecated\n+\t/**\n+\t * Update an existing EvaluationRound to associate with a Evaluation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzMxNjMyOnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/service/EvaluationServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowNjozN1rOHP_xhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowNjozN1rOHP_xhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzNTU1Ng==", "bodyText": "Validate the argument (trequest should not be null)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486535556", "createdAt": "2020-09-10T18:06:37Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/service/EvaluationServiceImpl.java", "diffHunk": "@@ -339,4 +343,45 @@ public void processCancelSubmissionRequest(Long userId, String subId) {\n \t\tsubmissionManager.processUserCancelRequest(userInfo, subId);\n \t}\n \n+\t@Override\n+\tpublic EvaluationRound createEvaluationRound(Long userId, EvaluationRound evaluationRound){\n+\t\tUserInfo userInfo = userManager.getUserInfo(userId);\n+\t\treturn evaluationManager.createEvaluationRound(userInfo, evaluationRound);\n+\t}\n+\n+\t@Override\n+\tpublic EvaluationRound updateEvaluationRound(Long userId, EvaluationRound evaluationRound){\n+\t\tUserInfo userInfo = userManager.getUserInfo(userId);\n+\t\treturn evaluationManager.updateEvaluationRound(userInfo, evaluationRound);\n+\t}\n+\n+\t@Override\n+\tpublic EvaluationRound getEvaluationRound(Long userId, String evaluationId, String evaluationRoundId){\n+\t\tUserInfo userInfo = userManager.getUserInfo(userId);\n+\t\treturn evaluationManager.getEvaluationRound(userInfo, evaluationId, evaluationRoundId);\n+\t}\n+\n+\t@Override\n+\tpublic EvaluationRoundListResponse getAllEvaluationRounds(Long userId, String evaluationId, EvaluationRoundListRequest request){\n+\t\tUserInfo userInfo = userManager.getUserInfo(userId);\n+\t\tString nextPageTokenStr = request == null ? null : request.getNextPageToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzMxOTQ4OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/service/EvaluationServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowNzozNFrOHP_zlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowNzozNFrOHP_zlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzNjA4NQ==", "bodyText": "Consider moving the logic at the \"manager\" level", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486536085", "createdAt": "2020-09-10T18:07:34Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/service/EvaluationServiceImpl.java", "diffHunk": "@@ -339,4 +343,45 @@ public void processCancelSubmissionRequest(Long userId, String subId) {\n \t\tsubmissionManager.processUserCancelRequest(userInfo, subId);\n \t}\n \n+\t@Override\n+\tpublic EvaluationRound createEvaluationRound(Long userId, EvaluationRound evaluationRound){\n+\t\tUserInfo userInfo = userManager.getUserInfo(userId);\n+\t\treturn evaluationManager.createEvaluationRound(userInfo, evaluationRound);\n+\t}\n+\n+\t@Override\n+\tpublic EvaluationRound updateEvaluationRound(Long userId, EvaluationRound evaluationRound){\n+\t\tUserInfo userInfo = userManager.getUserInfo(userId);\n+\t\treturn evaluationManager.updateEvaluationRound(userInfo, evaluationRound);\n+\t}\n+\n+\t@Override\n+\tpublic EvaluationRound getEvaluationRound(Long userId, String evaluationId, String evaluationRoundId){\n+\t\tUserInfo userInfo = userManager.getUserInfo(userId);\n+\t\treturn evaluationManager.getEvaluationRound(userInfo, evaluationId, evaluationRoundId);\n+\t}\n+\n+\t@Override\n+\tpublic EvaluationRoundListResponse getAllEvaluationRounds(Long userId, String evaluationId, EvaluationRoundListRequest request){\n+\t\tUserInfo userInfo = userManager.getUserInfo(userId);\n+\t\tString nextPageTokenStr = request == null ? null : request.getNextPageToken();\n+\t\tNextPageToken nextPageToken = new NextPageToken(nextPageTokenStr);\n+\n+\t\tList<EvaluationRound> rounds = evaluationManager.getAllEvaluationRounds(userInfo, evaluationId, nextPageToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzMzMTkyOnYy", "diffSide": "RIGHT", "path": "client/synapseJavaClient/src/main/java/org/sagebionetworks/client/SynapseClientImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxMTowNFrOHP_7Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxMTowNFrOHP_7Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzODAxNQ==", "bodyText": "We might get a null pointer if we don't validate the round", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486538015", "createdAt": "2020-09-10T18:11:04Z", "author": {"login": "marcomarasca"}, "path": "client/synapseJavaClient/src/main/java/org/sagebionetworks/client/SynapseClientImpl.java", "diffHunk": "@@ -2993,6 +2997,52 @@ public void deleteEvaluation(String evalId) throws SynapseException {\n \t\tdeleteUri(getRepoEndpoint(), uri);\n \t}\n \n+\t@Override\n+\tpublic EvaluationRound createEvaluationRound(EvaluationRound round) throws SynapseException {\n+\t\tValidateArgument.required(round.getEvaluationId(), \"round.evaluationId\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzMzMjc0OnYy", "diffSide": "RIGHT", "path": "client/synapseJavaClient/src/main/java/org/sagebionetworks/client/SynapseClientImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxMToxOVrOHP_7mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxMToxOVrOHP_7mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzODEzNw==", "bodyText": "request required", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486538137", "createdAt": "2020-09-10T18:11:19Z", "author": {"login": "marcomarasca"}, "path": "client/synapseJavaClient/src/main/java/org/sagebionetworks/client/SynapseClientImpl.java", "diffHunk": "@@ -2993,6 +2997,52 @@ public void deleteEvaluation(String evalId) throws SynapseException {\n \t\tdeleteUri(getRepoEndpoint(), uri);\n \t}\n \n+\t@Override\n+\tpublic EvaluationRound createEvaluationRound(EvaluationRound round) throws SynapseException {\n+\t\tValidateArgument.required(round.getEvaluationId(), \"round.evaluationId\");\n+\t\tString uri = EVALUATION_URI_PATH + \"/\" + round.getEvaluationId() + EVALUATION_ROUND;\n+\t\treturn postJSONEntity(getRepoEndpoint(), uri, round, EvaluationRound.class);\n+\t}\n+\n+\t@Override\n+\tpublic EvaluationRound getEvaluationRound(String evalId, String roundId) throws SynapseException {\n+\t\tValidateArgument.required(evalId, \"Evaluation ID\");\n+\t\tValidateArgument.required(roundId, \"EvaluationRound ID\");\n+\n+\t\tString uri = EVALUATION_URI_PATH + \"/\" + evalId + EVALUATION_ROUND + \"/\" + roundId;\n+\n+\t\treturn getJSONEntity(getRepoEndpoint(), uri, EvaluationRound.class);\n+\t}\n+\n+\t@Override\n+\tpublic EvaluationRoundListResponse getAllEvaluationRounds(String evalId, EvaluationRoundListRequest request) throws SynapseException {\n+\t\tValidateArgument.required(evalId, \"Evaluation ID\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzMzMzYwOnYy", "diffSide": "RIGHT", "path": "client/synapseJavaClient/src/main/java/org/sagebionetworks/client/SynapseClientImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxMTozOVrOHP_8OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxMTozOVrOHP_8OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzODI5Ng==", "bodyText": "We might get a null pointer if round is null", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486538296", "createdAt": "2020-09-10T18:11:39Z", "author": {"login": "marcomarasca"}, "path": "client/synapseJavaClient/src/main/java/org/sagebionetworks/client/SynapseClientImpl.java", "diffHunk": "@@ -2993,6 +2997,52 @@ public void deleteEvaluation(String evalId) throws SynapseException {\n \t\tdeleteUri(getRepoEndpoint(), uri);\n \t}\n \n+\t@Override\n+\tpublic EvaluationRound createEvaluationRound(EvaluationRound round) throws SynapseException {\n+\t\tValidateArgument.required(round.getEvaluationId(), \"round.evaluationId\");\n+\t\tString uri = EVALUATION_URI_PATH + \"/\" + round.getEvaluationId() + EVALUATION_ROUND;\n+\t\treturn postJSONEntity(getRepoEndpoint(), uri, round, EvaluationRound.class);\n+\t}\n+\n+\t@Override\n+\tpublic EvaluationRound getEvaluationRound(String evalId, String roundId) throws SynapseException {\n+\t\tValidateArgument.required(evalId, \"Evaluation ID\");\n+\t\tValidateArgument.required(roundId, \"EvaluationRound ID\");\n+\n+\t\tString uri = EVALUATION_URI_PATH + \"/\" + evalId + EVALUATION_ROUND + \"/\" + roundId;\n+\n+\t\treturn getJSONEntity(getRepoEndpoint(), uri, EvaluationRound.class);\n+\t}\n+\n+\t@Override\n+\tpublic EvaluationRoundListResponse getAllEvaluationRounds(String evalId, EvaluationRoundListRequest request) throws SynapseException {\n+\t\tValidateArgument.required(evalId, \"Evaluation ID\");\n+\n+\t\tString uri = EVALUATION_URI_PATH + \"/\" + evalId + EVALUATION_ROUND + LIST;\n+\n+\t\treturn postJSONEntity(getRepoEndpoint(), uri, request, EvaluationRoundListResponse.class);\n+\t}\n+\n+\t@Override\n+\tpublic EvaluationRound updateEvaluationRound(EvaluationRound round) throws SynapseException {\n+\t\tValidateArgument.required(round.getEvaluationId(), \"round.evaluationId\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzM0MDkzOnYy", "diffSide": "RIGHT", "path": "integration-test/src/test/java/org/sagebionetworks/IT520SynapseJavaClientEvaluationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxMzo0MVrOHQABMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxMzo0MVrOHQABMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzOTU2OQ==", "bodyText": "Make sure to set this right if you remove the \"one second\" check", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486539569", "createdAt": "2020-09-10T18:13:41Z", "author": {"login": "marcomarasca"}, "path": "integration-test/src/test/java/org/sagebionetworks/IT520SynapseJavaClientEvaluationTest.java", "diffHunk": "@@ -312,7 +319,53 @@ public void testEvaluationRoundTrip() throws SynapseException, UnsupportedEncodi\n \t\t\n \t\tassertEquals(initialCount, synapseOne.getAvailableEvaluationsPaginated(100, 0).getResults().size());\n \t}\n-\t\n+\n+\t@Test\n+\tpublic void testEvaluationRound_RoundTrip() throws SynapseException {\n+\t\teval1 = synapseOne.createEvaluation(eval1);\n+\t\tevaluationsToDelete.add(eval1.getId());\n+\n+\t\tInstant now = Instant.now();\n+\t\tEvaluationRound round = new EvaluationRound();\n+\t\tround.setEvaluationId(eval1.getId());\n+\t\tround.setRoundStart(Date.from(now));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzM0Nzg1OnYy", "diffSide": "RIGHT", "path": "integration-test/src/test/java/org/sagebionetworks/IT520SynapseJavaClientEvaluationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxNTowMFrOHQAFkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxNTowMFrOHQAFkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0MDY5MA==", "bodyText": "Add a second round", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486540690", "createdAt": "2020-09-10T18:15:00Z", "author": {"login": "marcomarasca"}, "path": "integration-test/src/test/java/org/sagebionetworks/IT520SynapseJavaClientEvaluationTest.java", "diffHunk": "@@ -312,7 +319,53 @@ public void testEvaluationRoundTrip() throws SynapseException, UnsupportedEncodi\n \t\t\n \t\tassertEquals(initialCount, synapseOne.getAvailableEvaluationsPaginated(100, 0).getResults().size());\n \t}\n-\t\n+\n+\t@Test\n+\tpublic void testEvaluationRound_RoundTrip() throws SynapseException {\n+\t\teval1 = synapseOne.createEvaluation(eval1);\n+\t\tevaluationsToDelete.add(eval1.getId());\n+\n+\t\tInstant now = Instant.now();\n+\t\tEvaluationRound round = new EvaluationRound();\n+\t\tround.setEvaluationId(eval1.getId());\n+\t\tround.setRoundStart(Date.from(now));\n+\t\tround.setRoundEnd(Date.from(now.plus(1, ChronoUnit.DAYS)));\n+\n+\t\t//create\n+\t\tEvaluationRound created = synapseOne.createEvaluationRound(round);\n+\n+\t\t//read\n+\t\tEvaluationRound retrieved = synapseOne.getEvaluationRound(created.getEvaluationId(), created.getId());\n+\t\tassertEquals(created, retrieved);\n+\n+\t\t//read all", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzM1ODg4OnYy", "diffSide": "RIGHT", "path": "integration-test/src/test/java/org/sagebionetworks/IT520SynapseJavaClientEvaluationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxNzoyOVrOHQAMcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoxNzoyOVrOHQAMcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0MjQ0OQ==", "bodyText": "I would probably add also a simple test with a submission, checking that the correct round was set. I would update the limit and make sure that you cannot submit anymore.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r486542449", "createdAt": "2020-09-10T18:17:29Z", "author": {"login": "marcomarasca"}, "path": "integration-test/src/test/java/org/sagebionetworks/IT520SynapseJavaClientEvaluationTest.java", "diffHunk": "@@ -312,7 +319,53 @@ public void testEvaluationRoundTrip() throws SynapseException, UnsupportedEncodi\n \t\t\n \t\tassertEquals(initialCount, synapseOne.getAvailableEvaluationsPaginated(100, 0).getResults().size());\n \t}\n-\t\n+\n+\t@Test\n+\tpublic void testEvaluationRound_RoundTrip() throws SynapseException {\n+\t\teval1 = synapseOne.createEvaluation(eval1);\n+\t\tevaluationsToDelete.add(eval1.getId());\n+\n+\t\tInstant now = Instant.now();\n+\t\tEvaluationRound round = new EvaluationRound();\n+\t\tround.setEvaluationId(eval1.getId());\n+\t\tround.setRoundStart(Date.from(now));\n+\t\tround.setRoundEnd(Date.from(now.plus(1, ChronoUnit.DAYS)));\n+\n+\t\t//create\n+\t\tEvaluationRound created = synapseOne.createEvaluationRound(round);\n+\n+\t\t//read\n+\t\tEvaluationRound retrieved = synapseOne.getEvaluationRound(created.getEvaluationId(), created.getId());\n+\t\tassertEquals(created, retrieved);\n+\n+\t\t//read all\n+\t\tEvaluationRound round2 = new EvaluationRound();\n+\t\tround2.setEvaluationId(eval1.getId());\n+\t\tround2.setRoundStart(Date.from(now.plus(1, ChronoUnit.DAYS)));\n+\t\tround2.setRoundEnd(Date.from(now.plus(2, ChronoUnit.DAYS)));\n+\t\tEvaluationRound created2 = synapseOne.createEvaluationRound(round2);\n+\n+\t\tEvaluationRoundListResponse listResponse = synapseOne.getAllEvaluationRounds(created.getEvaluationId(), new EvaluationRoundListRequest());\n+\t\tassertEquals(Arrays.asList(created, created2), listResponse.getPage());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e68dcd409d83664ad9d1f4f01c517a8756effbc"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDk1MjgzOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/metadata/providers/SubmissionMetadataIndexProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjoyNjo0NFrOHRpWrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMjoyNjo0NFrOHRpWrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI2NTM4OQ==", "bodyText": "?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4195#discussion_r488265389", "createdAt": "2020-09-14T22:26:44Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/metadata/providers/SubmissionMetadataIndexProvider.java", "diffHunk": "@@ -32,7 +32,7 @@\n @Service\r\n public class SubmissionMetadataIndexProvider implements MetadataIndexProvider {\r\n \r\n-\tprivate static final ViewObjectType OBJECT_TYPE = ViewObjectType.SUBMISSION;\r\n+\tprivate static final ViewObjectType OBJECT_TYPE = ViewObjectType.\tSUBMISSION;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79ff43fddf217d065e6329c5838e90eb5b2a8c72"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2983, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}