{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyODczODcy", "number": 4117, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDoyMzo1MVrOEKpk3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyMTozMlrOEMlZrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjAyMzk3OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/AccessInterceptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDoyMzo1MVrOGr0L_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzo1MToxNFrOGsN0nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5Njk4OA==", "bodyText": "A small warning about this approach: this might not be enough since we use basic authentication in other filters that are not related to oauth and the \"username\" extracted might not actually be an OAuth client id (e.g. might be the user for docker registry or cloud mail in, a service call etc.). You might want to check for the special OAUTH_VERIFIED_CLIENT_ID_HEADER injected in the request instead (see the implementation of OAuthClientAuthFilter)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4117#discussion_r448596988", "createdAt": "2020-07-01T20:23:51Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/AccessInterceptor.java", "diffHunk": "@@ -51,9 +51,19 @@\n \tprivate OIDCTokenHelper oidcTokenHelper;\r\n \t\r\n \tString getOAuthClientId(HttpServletRequest request) {\r\n+\t\t/*\r\n+\t\t * There are two different places the client ID might be:\r\n+\t\t *  - in the access token, if the OAuth client is acting on behalf of a user\r\n+\t\t *  - in the basic auth credentials, if using an auth code/refresh token\r\n+\t\t */\r\n \t\tString accessToken = HttpAuthUtil.getBearerTokenFromStandardAuthorizationHeader(request);\r\n-\t\tif (accessToken==null) return null;\r\n-\t\treturn oidcTokenHelper.parseJWT(accessToken).getBody().getAudience();\r\n+\t\tif (accessToken != null) {\r\n+\t\t\treturn oidcTokenHelper.parseJWT(accessToken).getBody().getAudience();\r\n+\t\t} else if (HttpAuthUtil.usesBasicAuthentication(request)) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6612f5ae35f579e1f845d504ac22a91094deae9a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY2NTQ0Ng==", "bodyText": "\"+1\".\nThe two choices I see for changing this are (1) make sure it's the oauth client credentials rather than some other client credentials or (2) add a separate field, BASIC_AUTH_USER_NAME, which can be an oauth client or a non-oauth client.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4117#discussion_r448665446", "createdAt": "2020-07-01T23:23:27Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/AccessInterceptor.java", "diffHunk": "@@ -51,9 +51,19 @@\n \tprivate OIDCTokenHelper oidcTokenHelper;\r\n \t\r\n \tString getOAuthClientId(HttpServletRequest request) {\r\n+\t\t/*\r\n+\t\t * There are two different places the client ID might be:\r\n+\t\t *  - in the access token, if the OAuth client is acting on behalf of a user\r\n+\t\t *  - in the basic auth credentials, if using an auth code/refresh token\r\n+\t\t */\r\n \t\tString accessToken = HttpAuthUtil.getBearerTokenFromStandardAuthorizationHeader(request);\r\n-\t\tif (accessToken==null) return null;\r\n-\t\treturn oidcTokenHelper.parseJWT(accessToken).getBody().getAudience();\r\n+\t\tif (accessToken != null) {\r\n+\t\t\treturn oidcTokenHelper.parseJWT(accessToken).getBody().getAudience();\r\n+\t\t} else if (HttpAuthUtil.usesBasicAuthentication(request)) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5Njk4OA=="}, "originalCommit": {"oid": "6612f5ae35f579e1f845d504ac22a91094deae9a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxNjk4OQ==", "bodyText": "Thanks for the heads up, @marcomarasca ! It sounds like the right approach would be to use the injected header to conditionally insert the username into the OAuthClientId value, and as @brucehoff said, to log the basic auth username for all requests that include it.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4117#discussion_r449016989", "createdAt": "2020-07-02T13:51:14Z", "author": {"login": "nickgros"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/AccessInterceptor.java", "diffHunk": "@@ -51,9 +51,19 @@\n \tprivate OIDCTokenHelper oidcTokenHelper;\r\n \t\r\n \tString getOAuthClientId(HttpServletRequest request) {\r\n+\t\t/*\r\n+\t\t * There are two different places the client ID might be:\r\n+\t\t *  - in the access token, if the OAuth client is acting on behalf of a user\r\n+\t\t *  - in the basic auth credentials, if using an auth code/refresh token\r\n+\t\t */\r\n \t\tString accessToken = HttpAuthUtil.getBearerTokenFromStandardAuthorizationHeader(request);\r\n-\t\tif (accessToken==null) return null;\r\n-\t\treturn oidcTokenHelper.parseJWT(accessToken).getBody().getAudience();\r\n+\t\tif (accessToken != null) {\r\n+\t\t\treturn oidcTokenHelper.parseJWT(accessToken).getBody().getAudience();\r\n+\t\t} else if (HttpAuthUtil.usesBasicAuthentication(request)) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5Njk4OA=="}, "originalCommit": {"oid": "6612f5ae35f579e1f845d504ac22a91094deae9a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjMwMjQyOnYy", "diffSide": "RIGHT", "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/AccessInterceptorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoxOTowN1rOGux3pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoxOTowN1rOGux3pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwNDc0Mw==", "bodyText": "why do we sleep?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4117#discussion_r451704743", "createdAt": "2020-07-08T17:19:07Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/AccessInterceptorTest.java", "diffHunk": "@@ -196,7 +199,54 @@ public void testStatusCode400() throws Exception{\n \t\tassertNotNull(result);\r\n \t\tassertTrue(result.getTimestamp() >= start);\r\n \t\tassertEquals(234L, result.getElapseMS().longValue());\r\n-\t\tassertFalse(\"400 is not a success\",result.getSuccess());\r\n+\t\tassertFalse(result.getSuccess(), \"400 is not a success\");\r\n \t\tassertEquals(new Long(400), result.getResponseStatus());\r\n \t}\r\n+\r\n+\t@Test\r\n+\tpublic void testGetOAuthClientIdFromBearerJwt() throws Exception {\r\n+\t\t// Put the client ID in the JWT access token\r\n+\t\twhen(mockRequest.getHeader(\"Authorization\")).thenReturn(BEARER_TOKEN_HEADER);\r\n+\t\tClaims claims = new DefaultClaims();\r\n+\t\tclaims.setAudience(OAUTH_CLIENT_ID);\r\n+\t\tJwt<JwsHeader,Claims> jwt = new DefaultJwt(null, claims);\r\n+\t\twhen(oidcTokenHelper.parseJWT(any())).thenReturn(jwt);\r\n+\r\n+\t\t// Start\r\n+\t\tinterceptor.preHandle(mockRequest, mockResponse, mockHandler);\r\n+\t\tinterceptor.setReturnObjectId(\"returnId\");\r\n+\t\t// Wait to add some elapse time\r\n+\t\ttestClock.sleep(234);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc5ffbd58e999fb5d7549112a26556fd0405e217"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjMxMTUwOnYy", "diffSide": "RIGHT", "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/AccessInterceptorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyMTozMlrOGux9Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzoyMTozMlrOGux9Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcwNjE4Mg==", "bodyText": "// method under test", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4117#discussion_r451706182", "createdAt": "2020-07-08T17:21:32Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/AccessInterceptorTest.java", "diffHunk": "@@ -196,7 +199,54 @@ public void testStatusCode400() throws Exception{\n \t\tassertNotNull(result);\r\n \t\tassertTrue(result.getTimestamp() >= start);\r\n \t\tassertEquals(234L, result.getElapseMS().longValue());\r\n-\t\tassertFalse(\"400 is not a success\",result.getSuccess());\r\n+\t\tassertFalse(result.getSuccess(), \"400 is not a success\");\r\n \t\tassertEquals(new Long(400), result.getResponseStatus());\r\n \t}\r\n+\r\n+\t@Test\r\n+\tpublic void testGetOAuthClientIdFromBearerJwt() throws Exception {\r\n+\t\t// Put the client ID in the JWT access token\r\n+\t\twhen(mockRequest.getHeader(\"Authorization\")).thenReturn(BEARER_TOKEN_HEADER);\r\n+\t\tClaims claims = new DefaultClaims();\r\n+\t\tclaims.setAudience(OAUTH_CLIENT_ID);\r\n+\t\tJwt<JwsHeader,Claims> jwt = new DefaultJwt(null, claims);\r\n+\t\twhen(oidcTokenHelper.parseJWT(any())).thenReturn(jwt);\r\n+\r\n+\t\t// Start\r\n+\t\tinterceptor.preHandle(mockRequest, mockResponse, mockHandler);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc5ffbd58e999fb5d7549112a26556fd0405e217"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2899, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}