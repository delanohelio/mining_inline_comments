{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2OTc3NDUw", "number": 4197, "title": "added support for 'required' with test", "bodyText": "", "createdAt": "2020-09-15T01:40:18Z", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4197", "merged": true, "mergeCommit": {"oid": "ae46bc5e180319883ebb3b14dde215f15bfb03d2"}, "closed": true, "closedAt": "2020-09-15T19:05:07Z", "author": {"login": "john-hill"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI9nqxAH2gAyNDg2OTc3NDUwOmNiODVhMGMzNmYzZjc4MmVmMDE1YjY4ZTZhN2FjZDJlNTI5NDYzMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJMn43gFqTQ4ODk4MTk1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cb85a0c36f3f782ef015b68e6a7acd2e52946310", "author": {"user": {"login": "john-hill", "name": "John Hill"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/cb85a0c36f3f782ef015b68e6a7acd2e52946310", "committedDate": "2020-09-15T01:36:10Z", "message": "added support for 'required' with test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTgxOTUy", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4197#pullrequestreview-488981952", "createdAt": "2020-09-15T19:03:11Z", "commit": {"oid": "cb85a0c36f3f782ef015b68e6a7acd2e52946310"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTowMzoxMVrOHSQG-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTowMzoxMVrOHSQG-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMDM0NQ==", "bodyText": "We might want to add a test where a hierarchy of schemas is setup and the required property overrides the parent?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4197#discussion_r488900345", "createdAt": "2020-09-15T19:03:11Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/schema/JsonSchemaValidationManagerImplTest.java", "diffHunk": "@@ -141,6 +141,93 @@ public void testValidationWithSourced() throws Exception {\n \t\tassertNull(result.getValidationException());\n \t}\n \t\n+\t/**\n+\t * Test for PLFM-6316 to add the 'required' key word.\n+\t */\n+\t@Test\n+\tpublic void testValidationWithRequiredWithRequired() throws Exception {\n+\t\tJsonSchema schema = loadSchemaFromClasspath(\"schemas/HasRequired.json\");\n+\t\tassertNotNull(schema.getProperties());\n+\t\tassertEquals(3, schema.getProperties().size());\n+\t\tList<String> requiredValues = schema.getRequired();\n+\t\tassertNotNull(requiredValues);\n+\t\tassertEquals(Lists.newArrayList(\"requireMe\",\"requireMeToo\"), schema.getRequired());\n+\t\t\n+\t\t// include all three values for this test\n+\t\tJsonSubject subject = setupSubject();\n+\t\tsubject.toJson().put(\"requireMe\", \"one\");\n+\t\tsubject.toJson().put(\"requireMeToo\", \"two\");\n+\t\tsubject.toJson().put(\"notRequired\", \"two\");\n+\n+\t\t// call under test\n+\t\tValidationResults result = manager.validate(schema, subject);\n+\n+\t\tassertNotNull(result);\n+\t\tassertEquals(objectId, result.getObjectId());\n+\t\tassertEquals(objectType, result.getObjectType());\n+\t\tassertEquals(objectEtag, result.getObjectEtag());\n+\t\tassertTrue(result.getIsValid());\n+\t\tassertNotNull(result.getValidatedOn());\n+\t\tassertNull(result.getValidationErrorMessage());\n+\t\tassertNull(result.getAllValidationMessages());\n+\t\tassertNull(result.getValidationException());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidationWithRequiredWithOutRequired() throws Exception {\n+\t\tJsonSchema schema = loadSchemaFromClasspath(\"schemas/HasRequired.json\");\n+\t\tassertNotNull(schema.getProperties());\n+\t\tassertEquals(3, schema.getProperties().size());\n+\t\tList<String> requiredValues = schema.getRequired();\n+\t\tassertNotNull(requiredValues);\n+\t\tassertEquals(Lists.newArrayList(\"requireMe\",\"requireMeToo\"), schema.getRequired());\n+\t\t\n+\t\t// exclude the optional value\n+\t\tJsonSubject subject = setupSubject();\n+\t\tsubject.toJson().put(\"requireMe\", \"one\");\n+\t\tsubject.toJson().put(\"requireMeToo\", \"two\");\n+\n+\t\t// call under test\n+\t\tValidationResults result = manager.validate(schema, subject);\n+\n+\t\tassertNotNull(result);\n+\t\tassertEquals(objectId, result.getObjectId());\n+\t\tassertEquals(objectType, result.getObjectType());\n+\t\tassertEquals(objectEtag, result.getObjectEtag());\n+\t\tassertTrue(result.getIsValid());\n+\t\tassertNotNull(result.getValidatedOn());\n+\t\tassertNull(result.getValidationErrorMessage());\n+\t\tassertNull(result.getAllValidationMessages());\n+\t\tassertNull(result.getValidationException());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidationWithRequiredWithMissingRequired() throws Exception {\n+\t\tJsonSchema schema = loadSchemaFromClasspath(\"schemas/HasRequired.json\");\n+\t\tassertNotNull(schema.getProperties());\n+\t\tassertEquals(3, schema.getProperties().size());\n+\t\tList<String> requiredValues = schema.getRequired();\n+\t\tassertNotNull(requiredValues);\n+\t\tassertEquals(Lists.newArrayList(\"requireMe\",\"requireMeToo\"), schema.getRequired());\n+\t\t\n+\t\t// include the optional but exclude one of the required\n+\t\tJsonSubject subject = setupSubject();\n+\t\tsubject.toJson().put(\"requireMe\", \"one\");\n+\t\tsubject.toJson().put(\"notRequired\", \"two\");\n+\n+\t\t// call under test\n+\t\tValidationResults result = manager.validate(schema, subject);\n+\n+\t\tassertNotNull(result);\n+\t\tassertEquals(objectId, result.getObjectId());\n+\t\tassertEquals(objectType, result.getObjectType());\n+\t\tassertEquals(objectEtag, result.getObjectEtag());\n+\t\tassertFalse(result.getIsValid());\n+\t\tassertNotNull(result.getValidatedOn());\n+\t\tassertEquals(\"required key [requireMeToo] not found\", result.getValidationErrorMessage());\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb85a0c36f3f782ef015b68e6a7acd2e52946310"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4654, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}