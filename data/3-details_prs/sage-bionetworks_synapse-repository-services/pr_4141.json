{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMjUxMDYy", "number": 4141, "title": "PLFM 6363.1 - Personal Access Tokens", "bodyText": "", "createdAt": "2020-07-17T16:30:56Z", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141", "merged": true, "mergeCommit": {"oid": "253ef23dc7b15f2bba705d075988fb369a1e2f2d"}, "closed": true, "closedAt": "2020-07-22T15:22:56Z", "author": {"login": "nickgros"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc12apjgH2gAyNDUxMjUxMDYyOmVhNzVhZTk4MDM2NzRiYzJmMTI0MzUwNzFiN2JiODc4YjJmMzYzY2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3ceobgFqTQ1MzQyNjg0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ea75ae9803674bc2f12435071b7bb878b2f363cb", "author": {"user": {"login": "nickgros", "name": "Nick Grosenbacher"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/ea75ae9803674bc2f12435071b7bb878b2f363cb", "committedDate": "2020-07-17T16:28:03Z", "message": "Update comment to reference JIRA"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2f143de1522807dd9e02f24a59593aee187032c", "author": {"user": {"login": "nickgros", "name": "Nick Grosenbacher"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a2f143de1522807dd9e02f24a59593aee187032c", "committedDate": "2020-07-17T16:30:15Z", "message": "Personal access tokens services + manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449", "author": {"user": {"login": "nickgros", "name": "Nick Grosenbacher"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/9edaae2ac11dbc660aef6ad27e41e7be903c2449", "committedDate": "2020-07-17T17:00:45Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODI2NjIw", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450826620", "createdAt": "2020-07-17T17:14:52Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoxNDo1MlrOGza17Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoxNDo1MlrOGza17Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3MDM0OQ==", "bodyText": "document the order in which the tokens are returned", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456570349", "createdAt": "2020-07-17T17:14:52Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -335,4 +341,75 @@ public void unbindExternalAliasFromAccount(\n \t\tauthenticationService.unbindExternalID(userId, providerEnum, alias);\r\n \t}\r\n \r\n+\r\n+\t/**\r\n+\t * Issues a personal access token to authorize scoped access to Synapse resources. To use the token, use the HTTP\r\n+\t * header `Authorization: Bearer \\<token\\>`. The token will expire if unused for 180 days.\r\n+\t * The token cannot be re-retrieved after the initial creation.\r\n+\t * @param userId\r\n+\t * @param request\r\n+\t * @param uriComponentsBuilder\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({authorize})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN, method = RequestMethod.POST)\r\n+\tpublic @ResponseBody AccessTokenGenerationResponse createPersonalAccessToken(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@RequestBody(required=true) AccessTokenGenerationRequest request,\r\n+\t\t\tUriComponentsBuilder uriComponentsBuilder\r\n+\t) {\r\n+\t\treturn authenticationService.createPersonalAccessToken(userId, request, OpenIDConnectController.getEndpoint(uriComponentsBuilder));\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Retrieve metadata for all personal access tokens issued for the requesting user. Excludes revoked tokens.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODI3ODMw", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450827830", "createdAt": "2020-07-17T17:16:45Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoxNjo0NVrOGza53A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoxNjo0NVrOGza53A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3MTM1Ng==", "bodyText": "document where to find the tokenId in the token, i.e., it's the JWT ID.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456571356", "createdAt": "2020-07-17T17:16:45Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -335,4 +341,75 @@ public void unbindExternalAliasFromAccount(\n \t\tauthenticationService.unbindExternalID(userId, providerEnum, alias);\r\n \t}\r\n \r\n+\r\n+\t/**\r\n+\t * Issues a personal access token to authorize scoped access to Synapse resources. To use the token, use the HTTP\r\n+\t * header `Authorization: Bearer \\<token\\>`. The token will expire if unused for 180 days.\r\n+\t * The token cannot be re-retrieved after the initial creation.\r\n+\t * @param userId\r\n+\t * @param request\r\n+\t * @param uriComponentsBuilder\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({authorize})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN, method = RequestMethod.POST)\r\n+\tpublic @ResponseBody AccessTokenGenerationResponse createPersonalAccessToken(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@RequestBody(required=true) AccessTokenGenerationRequest request,\r\n+\t\t\tUriComponentsBuilder uriComponentsBuilder\r\n+\t) {\r\n+\t\treturn authenticationService.createPersonalAccessToken(userId, request, OpenIDConnectController.getEndpoint(uriComponentsBuilder));\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Retrieve metadata for all personal access tokens issued for the requesting user. Excludes revoked tokens.\r\n+\t * @param userId\r\n+\t * @param nextPageToken\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({view})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN, method = RequestMethod.GET)\r\n+\tpublic @ResponseBody\r\n+\tAccessTokenRecordList getPersonalAccessTokens(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\r\n+\t) {\r\n+\t\treturn authenticationService.getPersonalAccessTokenRecords(userId, nextPageToken);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Retrieve metadata for a particular personal access token. Metadata for revoked tokens cannot be retrieved.\r\n+\t * @param userId\r\n+\t * @param tokenId\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({view})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN_ID, method = RequestMethod.GET)\r\n+\tpublic @ResponseBody\r\n+\tAccessTokenRecord getPersonalAccessToken(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@PathVariable(value = UrlHelpers.ID_PATH_VARIABLE) Long tokenId\r\n+\t) {\r\n+\t\treturn authenticationService.getPersonalAccessTokenRecord(userId, tokenId);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Revoke a personal access token. The token cannot be re-enabled after being revoked.\r\n+\t * @param userId\r\n+\t * @param tokenId\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODI3OTk3", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450827997", "createdAt": "2020-07-17T17:17:01Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoxNzowMlrOGza6UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoxNzowMlrOGza6UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3MTQ3Mw==", "bodyText": "document where to find the tokenId", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456571473", "createdAt": "2020-07-17T17:17:02Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -335,4 +341,75 @@ public void unbindExternalAliasFromAccount(\n \t\tauthenticationService.unbindExternalID(userId, providerEnum, alias);\r\n \t}\r\n \r\n+\r\n+\t/**\r\n+\t * Issues a personal access token to authorize scoped access to Synapse resources. To use the token, use the HTTP\r\n+\t * header `Authorization: Bearer \\<token\\>`. The token will expire if unused for 180 days.\r\n+\t * The token cannot be re-retrieved after the initial creation.\r\n+\t * @param userId\r\n+\t * @param request\r\n+\t * @param uriComponentsBuilder\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({authorize})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN, method = RequestMethod.POST)\r\n+\tpublic @ResponseBody AccessTokenGenerationResponse createPersonalAccessToken(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@RequestBody(required=true) AccessTokenGenerationRequest request,\r\n+\t\t\tUriComponentsBuilder uriComponentsBuilder\r\n+\t) {\r\n+\t\treturn authenticationService.createPersonalAccessToken(userId, request, OpenIDConnectController.getEndpoint(uriComponentsBuilder));\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Retrieve metadata for all personal access tokens issued for the requesting user. Excludes revoked tokens.\r\n+\t * @param userId\r\n+\t * @param nextPageToken\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({view})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN, method = RequestMethod.GET)\r\n+\tpublic @ResponseBody\r\n+\tAccessTokenRecordList getPersonalAccessTokens(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\r\n+\t) {\r\n+\t\treturn authenticationService.getPersonalAccessTokenRecords(userId, nextPageToken);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Retrieve metadata for a particular personal access token. Metadata for revoked tokens cannot be retrieved.\r\n+\t * @param userId\r\n+\t * @param tokenId\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODI5NTAx", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450829501", "createdAt": "2020-07-17T17:19:19Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoxOToxOVrOGza-zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoxOToxOVrOGza-zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3MjYyMQ==", "bodyText": "restore line 95\n/auth/v1/personalAccessToken/ is unnecessary", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456572621", "createdAt": "2020-07-17T17:19:19Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/webapp/WEB-INF/web.xml", "diffHunk": "@@ -92,7 +92,9 @@\n \n \t<filter-mapping>\n \t\t<filter-name>authFilter</filter-name>\n-\t\t<url-pattern>/auth/v1/secretKey</url-pattern>\n+\t\t<url-pattern>/auth/v1/personalAccessToken</url-pattern>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODMwOTMx", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450830931", "createdAt": "2020-07-17T17:21:42Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoyMTo0MlrOGzbDiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoyMTo0MlrOGzbDiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3MzgzMg==", "bodyText": "missing optional next page token", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456573832", "createdAt": "2020-07-17T17:21:42Z", "author": {"login": "brucehoff"}, "path": "client/synapseJavaClient/src/main/java/org/sagebionetworks/client/SynapseClientImpl.java", "diffHunk": "@@ -3613,6 +3618,29 @@ public String retrieveApiKey() throws SynapseException {\n \t\treturn getJSONEntity(getAuthEndpoint(),\"/secretKey\", SecretKey.class).getSecretKey();\n \t}\n \n+\t@Override\n+\tpublic String createPersonalAccessToken(AccessTokenGenerationRequest request) throws SynapseException {\n+\t\tValidateArgument.required(request, \"request\");\n+\t\treturn postJSONEntity(getAuthEndpoint(), AUTH_PERSONAL_ACCESS_TOKEN, request, AccessTokenGenerationResponse.class).getToken();\n+\t}\n+\n+\t@Override\n+\tpublic AccessTokenRecord retrievePersonalAccessTokenRecord(String tokenId) throws SynapseException {\n+\t\tValidateArgument.required(tokenId, \"tokenId\");\n+\t\treturn getJSONEntity(getAuthEndpoint(), AUTH_PERSONAL_ACCESS_TOKEN + \"/\" + tokenId, AccessTokenRecord.class);\n+\t}\n+\n+\t@Override\n+\tpublic AccessTokenRecordList retrievePersonalAccessTokenRecords() throws SynapseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODMxNzQ2", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450831746", "createdAt": "2020-07-17T17:23:01Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoyMzowMVrOGzbGBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoyMzowMVrOGzbGBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3NDQ3MA==", "bodyText": "@RequiredScope({modify, authorize})", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456574470", "createdAt": "2020-07-17T17:23:01Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -335,4 +341,75 @@ public void unbindExternalAliasFromAccount(\n \t\tauthenticationService.unbindExternalID(userId, providerEnum, alias);\r\n \t}\r\n \r\n+\r\n+\t/**\r\n+\t * Issues a personal access token to authorize scoped access to Synapse resources. To use the token, use the HTTP\r\n+\t * header `Authorization: Bearer \\<token\\>`. The token will expire if unused for 180 days.\r\n+\t * The token cannot be re-retrieved after the initial creation.\r\n+\t * @param userId\r\n+\t * @param request\r\n+\t * @param uriComponentsBuilder\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({authorize})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN, method = RequestMethod.POST)\r\n+\tpublic @ResponseBody AccessTokenGenerationResponse createPersonalAccessToken(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@RequestBody(required=true) AccessTokenGenerationRequest request,\r\n+\t\t\tUriComponentsBuilder uriComponentsBuilder\r\n+\t) {\r\n+\t\treturn authenticationService.createPersonalAccessToken(userId, request, OpenIDConnectController.getEndpoint(uriComponentsBuilder));\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Retrieve metadata for all personal access tokens issued for the requesting user. Excludes revoked tokens.\r\n+\t * @param userId\r\n+\t * @param nextPageToken\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({view})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN, method = RequestMethod.GET)\r\n+\tpublic @ResponseBody\r\n+\tAccessTokenRecordList getPersonalAccessTokens(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\r\n+\t) {\r\n+\t\treturn authenticationService.getPersonalAccessTokenRecords(userId, nextPageToken);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Retrieve metadata for a particular personal access token. Metadata for revoked tokens cannot be retrieved.\r\n+\t * @param userId\r\n+\t * @param tokenId\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({view})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN_ID, method = RequestMethod.GET)\r\n+\tpublic @ResponseBody\r\n+\tAccessTokenRecord getPersonalAccessToken(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@PathVariable(value = UrlHelpers.ID_PATH_VARIABLE) Long tokenId\r\n+\t) {\r\n+\t\treturn authenticationService.getPersonalAccessTokenRecord(userId, tokenId);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Revoke a personal access token. The token cannot be re-enabled after being revoked.\r\n+\t * @param userId\r\n+\t * @param tokenId\r\n+\t */\r\n+\t@RequiredScope({view, authorize})\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODMzOTAy", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450833902", "createdAt": "2020-07-17T17:26:29Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoyNjoyOVrOGzbMgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoyNjoyOVrOGzbMgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3NjEzMQ==", "bodyText": "OIDC_ACCESS_TOKEN", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456576131", "createdAt": "2020-07-17T17:26:29Z", "author": {"login": "brucehoff"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/auth/TokenType.json", "diffHunk": "@@ -0,0 +1,17 @@\n+{\n+  \"type\": \"string\",\n+  \"enum\": [\n+    {\n+      \"name\": \"OIDC_ACCESS\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODMzOTkz", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450833993", "createdAt": "2020-07-17T17:26:38Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoyNjozOFrOGzbMzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoyNjozOFrOGzbMzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3NjIwNQ==", "bodyText": "OIDC_ID_TOKEN", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456576205", "createdAt": "2020-07-17T17:26:38Z", "author": {"login": "brucehoff"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/auth/TokenType.json", "diffHunk": "@@ -0,0 +1,17 @@\n+{\n+  \"type\": \"string\",\n+  \"enum\": [\n+    {\n+      \"name\": \"OIDC_ACCESS\",\n+      \"description\": \"Refers to an OIDC/OAuth 2 access token\"\n+    },\n+    {\n+      \"name\": \"OIDC_ID\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODM0MDk1", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450834095", "createdAt": "2020-07-17T17:26:48Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoyNjo0OFrOGzbNCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoyNjo0OFrOGzbNCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3NjI2Nw==", "bodyText": "PERSONAL_ACCESS_TOKEN", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456576267", "createdAt": "2020-07-17T17:26:48Z", "author": {"login": "brucehoff"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/auth/TokenType.json", "diffHunk": "@@ -0,0 +1,17 @@\n+{\n+  \"type\": \"string\",\n+  \"enum\": [\n+    {\n+      \"name\": \"OIDC_ACCESS\",\n+      \"description\": \"Refers to an OIDC/OAuth 2 access token\"\n+    },\n+    {\n+      \"name\": \"OIDC_ID\",\n+      \"description\": \"Refers to an OIDC/OAuth 2 ID token\"\n+    },\n+    {\n+      \"name\": \"PERSONAL_ACCESS\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODM3Mjcy", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450837272", "createdAt": "2020-07-17T17:31:58Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzozMTo1OFrOGzbWmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzozMTo1OFrOGzbWmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3ODcxNA==", "bodyText": "In the documentation of the authentication controller differentiate between access tokens and personal access tokens, including the facts that (1) PATs are not linked to any third party OAuth client and (2) while ATs have a strict 24 hour lifetime, PATs are long lived.  As such it's critical to treat PATs as sensitive credentials, like passwords.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456578714", "createdAt": "2020-07-17T17:31:58Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -335,4 +341,75 @@ public void unbindExternalAliasFromAccount(\n \t\tauthenticationService.unbindExternalID(userId, providerEnum, alias);\r\n \t}\r\n \r\n+\r\n+\t/**\r\n+\t * Issues a personal access token to authorize scoped access to Synapse resources. To use the token, use the HTTP\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODQzOTA1", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450843905", "createdAt": "2020-07-17T17:42:33Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo0MjozM1rOGzbrAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo0MjozM1rOGzbrAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4MzkzNg==", "bodyText": "add a comment that this checks the OIDC spec when isPersonalAccessToken==false.  When ==true, the checks are similar but not identical.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456583936", "createdAt": "2020-07-17T17:42:33Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImplTest.java", "diffHunk": "@@ -148,14 +150,15 @@ public void testGenerateOIDCIdentityToken() throws Exception {\n \t\tassertTrue(claims.get(OIDCClaimName.email_verified.name(), Boolean.class));\n \t\tassertEquals(\"University of Example\", claims.get(OIDCClaimName.company.name(), String.class));\n \t\tassertEquals(TOKEN_ID, claims.getId());\n+\t\tassertEquals(TokenType.OIDC_ID.name(), claims.get(OIDCClaimName.token_type.name(), String.class));\n \t\t\n \t\t// This checks the other fields set in the method under test\n-\t\tclientValidation(oidcToken, NONCE);\n+\t\tjwtValidation(oidcToken, false, NONCE);\n \t}\n \n     // let's check that our JWTs fulfill the OIDC spec by checking that they meet the requirements for client validation:\t\n \t// https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\n-\tprivate void clientValidation(String jwtString, String nonce) throws ParseException {\n+\tprivate void jwtValidation(String jwtString, boolean isPersonalAccessToken, String nonce) throws ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODQ0NjA3", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450844607", "createdAt": "2020-07-17T17:43:39Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo0MzozOVrOGzbtIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo0MzozOVrOGzbtIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NDQ4Mw==", "bodyText": "// method under test", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456584483", "createdAt": "2020-07-17T17:43:39Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImplTest.java", "diffHunk": "@@ -280,4 +298,37 @@ public void testParseExpiredJWTException() {\n \t\t\t\toidcTokenHelper.parseJWT(expiredAccessToken));\n \t}\n \n+\t@Test\n+\tpublic void testCreatePersonalAccessToken() throws Exception {\n+\t\tList<OAuthScope> grantedScopes = Collections.singletonList(OAuthScope.openid);\n+\t\tMap<String,OIDCClaimsRequestDetails> expectedClaims = new HashMap<>();\n+\t\texpectedClaims.put(OIDCClaimName.email.name(), ESSENTIAL);\n+\t\texpectedClaims.put(OIDCClaimName.given_name.name(), NON_ESSENTIAL);\n+\t\texpectedClaims.put(OIDCClaimName.family_name.name(), null);\n+\t\tOIDCClaimsRequestDetails details = new OIDCClaimsRequestDetails();\n+\t\tdetails.setValues(Collections.singletonList(\"101\"));\n+\t\texpectedClaims.put(OIDCClaimName.team.name(), details);\n+\n+\t\tAccessTokenRecord personalAccessTokenRecord = new AccessTokenRecord();\n+\t\tpersonalAccessTokenRecord.setId(\"1234\");\n+\t\tpersonalAccessTokenRecord.setCreatedOn(new Date());\n+\t\tpersonalAccessTokenRecord.setScopes(grantedScopes);\n+\t\tpersonalAccessTokenRecord.setUserInfoClaims(expectedClaims);\n+\n+\t\tString accessToken = oidcTokenHelper.createPersonalAccessToken(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODUxODE0", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450851814", "createdAt": "2020-07-17T17:54:57Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo1NDo1N1rOGzcEMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo1NDo1N1rOGzcEMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDM4Ng==", "bodyText": "enforce token limit", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456590386", "createdAt": "2020-07-17T17:54:57Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.sagebionetworks.repo.manager.authentication;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.sagebionetworks.repo.manager.oauth.OIDCTokenHelper;\n+import org.sagebionetworks.repo.model.AuthorizationUtils;\n+import org.sagebionetworks.repo.model.UnauthenticatedException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.auth.AccessTokenGenerationRequest;\n+import org.sagebionetworks.repo.model.auth.AccessTokenGenerationResponse;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecord;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecordList;\n+import org.sagebionetworks.repo.model.auth.AccessTokenState;\n+import org.sagebionetworks.repo.model.auth.PersonalAccessTokenDao;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+import org.sagebionetworks.repo.model.oauth.OIDCClaimName;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.util.Clock;\n+import org.sagebionetworks.util.EnumKeyedJsonMapUtil;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class PersonalAccessTokenManagerImpl implements PersonalAccessTokenManager {\n+\n+\t// The maximum time, in days, that a token remains active if unused.\n+\tprivate static final long MAX_TOKEN_LEASE_LENGTH_DAYS = 180L;\n+\tprivate static final long MAX_TOKEN_LEASE_LENGTH_MILLIS = MAX_TOKEN_LEASE_LENGTH_DAYS * 24 * 60 * 60 * 1000;\n+\n+\t@Autowired\n+\tprivate PersonalAccessTokenDao personalAccessTokenDao;\n+\n+\t@Autowired\n+\tprivate OIDCTokenHelper oidcTokenHelper;\n+\n+\t@Autowired\n+\tprivate Clock clock;\n+\n+\t/**\n+\t * Determine the state of the access token record using the last used or created on fields.\n+\t * Method exposed for testing.\n+\t * @param record\n+\t * @return the state of the token\n+\t */\n+\tAccessTokenState determineActiveState(AccessTokenRecord record) {\n+\t\tDate lastUsedDate;\n+\t\tif (record.getLastUsed() != null) {\n+\t\t\tlastUsedDate = record.getLastUsed();\n+\t\t} else {\n+\t\t\tlastUsedDate = record.getCreatedOn();\n+\t\t}\n+\t\tDate lastUsedExpirationDate = new Date(clock.currentTimeMillis() - MAX_TOKEN_LEASE_LENGTH_MILLIS);\n+\t\tboolean active = lastUsedDate.after(lastUsedExpirationDate);\n+\t\treturn active ? AccessTokenState.ACTIVE : AccessTokenState.EXPIRED;\n+\t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic AccessTokenGenerationResponse issueToken(UserInfo userInfo, AccessTokenGenerationRequest request, String oauthEndpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODUzNDA4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450853408", "createdAt": "2020-07-17T17:57:11Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo1NzoxMVrOGzcJZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo1NzoxMVrOGzcJZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MTcxNg==", "bodyText": "change \"convertToString\" to \"convertMapKeysToStrings\" (or something).  Ditto for \"convertToEnum\"", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456591716", "createdAt": "2020-07-17T17:57:11Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.sagebionetworks.repo.manager.authentication;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.sagebionetworks.repo.manager.oauth.OIDCTokenHelper;\n+import org.sagebionetworks.repo.model.AuthorizationUtils;\n+import org.sagebionetworks.repo.model.UnauthenticatedException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.auth.AccessTokenGenerationRequest;\n+import org.sagebionetworks.repo.model.auth.AccessTokenGenerationResponse;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecord;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecordList;\n+import org.sagebionetworks.repo.model.auth.AccessTokenState;\n+import org.sagebionetworks.repo.model.auth.PersonalAccessTokenDao;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+import org.sagebionetworks.repo.model.oauth.OIDCClaimName;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.util.Clock;\n+import org.sagebionetworks.util.EnumKeyedJsonMapUtil;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class PersonalAccessTokenManagerImpl implements PersonalAccessTokenManager {\n+\n+\t// The maximum time, in days, that a token remains active if unused.\n+\tprivate static final long MAX_TOKEN_LEASE_LENGTH_DAYS = 180L;\n+\tprivate static final long MAX_TOKEN_LEASE_LENGTH_MILLIS = MAX_TOKEN_LEASE_LENGTH_DAYS * 24 * 60 * 60 * 1000;\n+\n+\t@Autowired\n+\tprivate PersonalAccessTokenDao personalAccessTokenDao;\n+\n+\t@Autowired\n+\tprivate OIDCTokenHelper oidcTokenHelper;\n+\n+\t@Autowired\n+\tprivate Clock clock;\n+\n+\t/**\n+\t * Determine the state of the access token record using the last used or created on fields.\n+\t * Method exposed for testing.\n+\t * @param record\n+\t * @return the state of the token\n+\t */\n+\tAccessTokenState determineActiveState(AccessTokenRecord record) {\n+\t\tDate lastUsedDate;\n+\t\tif (record.getLastUsed() != null) {\n+\t\t\tlastUsedDate = record.getLastUsed();\n+\t\t} else {\n+\t\t\tlastUsedDate = record.getCreatedOn();\n+\t\t}\n+\t\tDate lastUsedExpirationDate = new Date(clock.currentTimeMillis() - MAX_TOKEN_LEASE_LENGTH_MILLIS);\n+\t\tboolean active = lastUsedDate.after(lastUsedExpirationDate);\n+\t\treturn active ? AccessTokenState.ACTIVE : AccessTokenState.EXPIRED;\n+\t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic AccessTokenGenerationResponse issueToken(UserInfo userInfo, AccessTokenGenerationRequest request, String oauthEndpoint) {\n+\t\tValidateArgument.required(request, \"AccessTokenGenerationRequest\");\n+\t\tif (AuthorizationUtils.isUserAnonymous(userInfo)) {\n+\t\t\tthrow new UnauthenticatedException(\"Anonymous users may not issue personal access tokens.\");\n+\t\t}\n+\n+\t\t// Replace an empty name with a UUID\n+\t\tif (StringUtils.isBlank(request.getName())) {\n+\t\t\trequest.setName(UUID.randomUUID().toString());\n+\t\t}\n+\n+\t\t// Replace null/empty scope with all scopes\n+\t\tif (request.getScope() == null || request.getScope().isEmpty()) {\n+\t\t\trequest.setScope(new ArrayList<>());\n+\t\t\tfor (OAuthScope scope : OAuthScope.values()) {\n+\t\t\t\trequest.getScope().add(scope);\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (request.getUserInfoClaims() == null) {\n+\t\t\trequest.setUserInfoClaims(new HashMap<>());\n+\t\t}\n+\n+\t\t// Convert claims to enum and back to remove invalid claims -- see PLFM-6254\n+\t\trequest.setUserInfoClaims(\n+\t\t\t\tEnumKeyedJsonMapUtil.convertToString(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODU1NTY4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450855568", "createdAt": "2020-07-17T18:00:11Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODowMDoxMVrOGzcQHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODowMDoxMVrOGzcQHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MzQzOQ==", "bodyText": "personalAccessTokenDao.getLastUsedDate() -> Date", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456593439", "createdAt": "2020-07-17T18:00:11Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.sagebionetworks.repo.manager.authentication;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.sagebionetworks.repo.manager.oauth.OIDCTokenHelper;\n+import org.sagebionetworks.repo.model.AuthorizationUtils;\n+import org.sagebionetworks.repo.model.UnauthenticatedException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.auth.AccessTokenGenerationRequest;\n+import org.sagebionetworks.repo.model.auth.AccessTokenGenerationResponse;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecord;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecordList;\n+import org.sagebionetworks.repo.model.auth.AccessTokenState;\n+import org.sagebionetworks.repo.model.auth.PersonalAccessTokenDao;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+import org.sagebionetworks.repo.model.oauth.OIDCClaimName;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.util.Clock;\n+import org.sagebionetworks.util.EnumKeyedJsonMapUtil;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class PersonalAccessTokenManagerImpl implements PersonalAccessTokenManager {\n+\n+\t// The maximum time, in days, that a token remains active if unused.\n+\tprivate static final long MAX_TOKEN_LEASE_LENGTH_DAYS = 180L;\n+\tprivate static final long MAX_TOKEN_LEASE_LENGTH_MILLIS = MAX_TOKEN_LEASE_LENGTH_DAYS * 24 * 60 * 60 * 1000;\n+\n+\t@Autowired\n+\tprivate PersonalAccessTokenDao personalAccessTokenDao;\n+\n+\t@Autowired\n+\tprivate OIDCTokenHelper oidcTokenHelper;\n+\n+\t@Autowired\n+\tprivate Clock clock;\n+\n+\t/**\n+\t * Determine the state of the access token record using the last used or created on fields.\n+\t * Method exposed for testing.\n+\t * @param record\n+\t * @return the state of the token\n+\t */\n+\tAccessTokenState determineActiveState(AccessTokenRecord record) {\n+\t\tDate lastUsedDate;\n+\t\tif (record.getLastUsed() != null) {\n+\t\t\tlastUsedDate = record.getLastUsed();\n+\t\t} else {\n+\t\t\tlastUsedDate = record.getCreatedOn();\n+\t\t}\n+\t\tDate lastUsedExpirationDate = new Date(clock.currentTimeMillis() - MAX_TOKEN_LEASE_LENGTH_MILLIS);\n+\t\tboolean active = lastUsedDate.after(lastUsedExpirationDate);\n+\t\treturn active ? AccessTokenState.ACTIVE : AccessTokenState.EXPIRED;\n+\t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic AccessTokenGenerationResponse issueToken(UserInfo userInfo, AccessTokenGenerationRequest request, String oauthEndpoint) {\n+\t\tValidateArgument.required(request, \"AccessTokenGenerationRequest\");\n+\t\tif (AuthorizationUtils.isUserAnonymous(userInfo)) {\n+\t\t\tthrow new UnauthenticatedException(\"Anonymous users may not issue personal access tokens.\");\n+\t\t}\n+\n+\t\t// Replace an empty name with a UUID\n+\t\tif (StringUtils.isBlank(request.getName())) {\n+\t\t\trequest.setName(UUID.randomUUID().toString());\n+\t\t}\n+\n+\t\t// Replace null/empty scope with all scopes\n+\t\tif (request.getScope() == null || request.getScope().isEmpty()) {\n+\t\t\trequest.setScope(new ArrayList<>());\n+\t\t\tfor (OAuthScope scope : OAuthScope.values()) {\n+\t\t\t\trequest.getScope().add(scope);\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (request.getUserInfoClaims() == null) {\n+\t\t\trequest.setUserInfoClaims(new HashMap<>());\n+\t\t}\n+\n+\t\t// Convert claims to enum and back to remove invalid claims -- see PLFM-6254\n+\t\trequest.setUserInfoClaims(\n+\t\t\t\tEnumKeyedJsonMapUtil.convertToString(\n+\t\t\t\t\t\tEnumKeyedJsonMapUtil.convertToEnum(request.getUserInfoClaims(), OIDCClaimName.class)\n+\t\t\t\t)\n+\t\t);\n+\n+\t\tAccessTokenRecord record = new AccessTokenRecord();\n+\t\trecord.setUserId(userInfo.getId().toString());\n+\t\trecord.setName(request.getName());\n+\t\trecord.setScopes(request.getScope());\n+\t\trecord.setUserInfoClaims(request.getUserInfoClaims());\n+\t\tDate now = clock.now();\n+\t\trecord.setCreatedOn(now);\n+\t\trecord.setLastUsed(now);\n+\n+\t\trecord = personalAccessTokenDao.createTokenRecord(record);\n+\t\tAccessTokenGenerationResponse response = new AccessTokenGenerationResponse();\n+\t\tresponse.setToken(oidcTokenHelper.createPersonalAccessToken(oauthEndpoint, record));\n+\t\treturn response;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isTokenActive(String tokenId) {\n+\t\tAccessTokenRecord record;\n+\t\ttry {\n+\t\t\trecord = personalAccessTokenDao.getTokenRecord(tokenId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODY4NzYw", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-450868760", "createdAt": "2020-07-17T18:22:43Z", "commit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoyMjo0M1rOGzc5Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoyMjo0M1rOGzc5Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMzkxMA==", "bodyText": "delete the created user", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456603910", "createdAt": "2020-07-17T18:22:43Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerAutowiredTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.sagebionetworks.repo.manager.authentication;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.platform.commons.util.StringUtils;\n+import org.sagebionetworks.repo.manager.UserManager;\n+import org.sagebionetworks.repo.manager.oauth.OIDCTokenHelper;\n+import org.sagebionetworks.repo.model.AuthorizationConstants;\n+import org.sagebionetworks.repo.model.NextPageToken;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.auth.AccessTokenGenerationRequest;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecord;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecordList;\n+import org.sagebionetworks.repo.model.auth.NewUser;\n+import org.sagebionetworks.repo.model.dbo.persistence.DBOCredential;\n+import org.sagebionetworks.repo.model.dbo.persistence.DBOTermsOfUseAgreement;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.JwsHeader;\n+import io.jsonwebtoken.Jwt;\n+\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(locations = { \"classpath:test-context.xml\" })\n+public class PersonalAccessTokenManagerAutowiredTest {\n+\n+\t@Autowired\n+\tprivate PersonalAccessTokenManager personalAccessTokenManager;\n+\n+\t@Autowired\n+\tprivate UserManager userManager;\n+\n+\t@Autowired\n+\tprivate OIDCTokenHelper oidcTokenHelper;\n+\n+\tprivate UserInfo adminUserInfo;\n+\tprivate UserInfo userInfo;\n+\n+\tprivate static final String OAUTH_ENDPOINT = \"http://synapse.org/\";\n+\n+\tList<String> tokenIdsToDelete;\n+\n+\t@BeforeEach\n+\tvoid beforeEach() {\n+\t\t// Create an admin user and a regular user\n+\t\tadminUserInfo = userManager.getUserInfo(AuthorizationConstants.BOOTSTRAP_PRINCIPAL.THE_ADMIN_USER.getPrincipalId());\n+\t\tDBOCredential cred = new DBOCredential();\n+\t\tcred.setSecretKey(\"\");\n+\t\tNewUser newUser = new NewUser();\n+\t\tnewUser.setEmail(UUID.randomUUID().toString() + \"@test.com\");\n+\t\tnewUser.setUserName(UUID.randomUUID().toString());\n+\t\tDBOTermsOfUseAgreement tou = new DBOTermsOfUseAgreement();\n+\t\ttou.setAgreesToTermsOfUse(Boolean.TRUE);\n+\t\tuserInfo = userManager.createOrGetTestUser(adminUserInfo, newUser, cred, tou);\n+\n+\t\ttokenIdsToDelete = new ArrayList<>();\n+\t}\n+\n+\t@AfterEach\n+\tvoid afterEach() {\n+\t\tfor (String t : tokenIdsToDelete) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "author": {"user": {"login": "nickgros", "name": "Nick Grosenbacher"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "committedDate": "2020-07-20T15:17:04Z", "message": "Code review changes #4141"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzk4Njk3", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-452798697", "createdAt": "2020-07-21T20:20:09Z", "commit": {"oid": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyMDowOVrOG1IS5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyMDowOVrOG1IS5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MzYyMg==", "bodyText": "alone", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r458363622", "createdAt": "2020-07-21T20:20:09Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -75,6 +76,18 @@\n  * to use that service.\r\n  * </p>\r\n  * <p>\r\n+ * Personal access tokens (PATs) are the preferred replacement for API keys, and can a user may freely generate up to 100\r\n+ * tokens with scoped access using <a href=\"${POST.personalAccessToken}>POST /personalAccessToken</a>. Like OAuth access tokens,\r\n+ * personal access tokens are used by including one as a Bearer token in the Authorization header of all authorized requests.\r\n+ * Unlike OAuth access tokens,\r\n+ * <ul>\r\n+ *     <li>PATs can be freely generated by a user along and are not linked to any third party OAuth client and</li>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzk5MTkw", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-452799190", "createdAt": "2020-07-21T20:20:56Z", "commit": {"oid": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyMDo1NlrOG1IUfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyMDo1NlrOG1IUfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NDAzMA==", "bodyText": "Like OAuth access tokens  (ATs)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r458364030", "createdAt": "2020-07-21T20:20:56Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -75,6 +76,18 @@\n  * to use that service.\r\n  * </p>\r\n  * <p>\r\n+ * Personal access tokens (PATs) are the preferred replacement for API keys, and can a user may freely generate up to 100\r\n+ * tokens with scoped access using <a href=\"${POST.personalAccessToken}>POST /personalAccessToken</a>. Like OAuth access tokens,\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyODA0NTk2", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-452804596", "createdAt": "2020-07-21T20:29:00Z", "commit": {"oid": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyOTowMFrOG1IlnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyOTowMFrOG1IlnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2ODQxMg==", "bodyText": "(\"jti\" claim)", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r458368412", "createdAt": "2020-07-21T20:29:00Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -399,9 +413,9 @@ AccessTokenRecord getPersonalAccessToken(\n \t/**\r\n \t * Revoke a personal access token. The token cannot be re-enabled after being revoked.\r\n \t * @param userId\r\n-\t * @param tokenId\r\n+\t * @param tokenId The unique ID of the token, which is the unique ID (\"jti\") contained in the JWT\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d2a3284fa1a5e4053d3dd5c1f357e6a4205ec1e", "author": {"user": {"login": "nickgros", "name": "Nick Grosenbacher"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4d2a3284fa1a5e4053d3dd5c1f357e6a4205ec1e", "committedDate": "2020-07-21T21:21:59Z", "message": "Docs fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNDI2ODQy", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#pullrequestreview-453426842", "createdAt": "2020-07-22T15:22:43Z", "commit": {"oid": "4d2a3284fa1a5e4053d3dd5c1f357e6a4205ec1e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4604, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}