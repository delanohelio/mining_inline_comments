{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMjU5OTY5", "number": 3954, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjowMzo1NFrODjQlrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjowMzo1NFrODjQlrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjk4NTQxOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/claimprovider/UserNameClaimProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjowMzo1NFrOFu-BvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjowMzo1NFrOFu-BvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NTA2OQ==", "bodyText": "missing user name", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3954#discussion_r384795069", "createdAt": "2020-02-26T22:03:54Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/claimprovider/UserNameClaimProviderTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.sagebionetworks.repo.manager.oauth.claimprovider;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.sagebionetworks.repo.model.dao.NotificationEmailDAO;\n+import org.sagebionetworks.repo.model.oauth.OIDCClaimName;\n+import org.sagebionetworks.repo.model.principal.PrincipalAliasDAO;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UserNameClaimProviderTest {\n+\t\n+\t@Mock\n+\tprivate PrincipalAliasDAO mockPrincipalAliasDao;\n+\t\n+\t@InjectMocks\n+\tprivate UserNameClaimProvider claimProvider;\n+\t\n+\tprivate static final String USER_ID = \"101\";\n+\tprivate static final long USER_ID_LONG = Long.parseLong(USER_ID);\n+\t\n+\tprivate static final String USER_NAME = \"myUserName\";\n+\t\n+\t@Test\n+\tpublic void testEmailClaim() {\n+\t\twhen(mockPrincipalAliasDao.getUserName(USER_ID_LONG)).thenReturn(USER_NAME);\n+\t\t\t\t\n+\t\t// method under test\n+\t\tassertEquals(OIDCClaimName.user_name, claimProvider.getName());\n+\t\t// method under test\n+\t\tassertNotNull(claimProvider.getDescription());\n+\t\t// method under test\n+\t\tassertEquals(USER_NAME, claimProvider.getClaim(USER_ID, null));\n+\t}\n+\n+\t@Test\n+\tpublic void testEmailClaimMissingEmail() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03437eb06108236e6ca34f61f96ce3897c854080"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3134, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}