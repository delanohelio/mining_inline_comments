{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NjM2MjY1", "number": 3986, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoxMjowOVrODtsE-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyNzoxMlrODuGQLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjM0NjgwOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/manager/util/OAuthPermissionUtilsTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoxMjowOVrOF_Q2kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDoxMzoyNVrOGAyJEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4MDcyMQ==", "bodyText": "Add an additional test that verifies that all the current ACCESS_TYPE enumeration values are covered so that if in the future someone adds a new ACCESS_TYPE value the test would fail and inform the developer to map it to a scope.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401880721", "createdAt": "2020-04-01T20:12:09Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/manager/util/OAuthPermissionUtilsTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.sagebionetworks.manager.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+class OAuthPermissionUtilsTest {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4MDg0Mg==", "bodyText": "We can put some exceptions if they are not used.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401880842", "createdAt": "2020-04-01T20:12:23Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/manager/util/OAuthPermissionUtilsTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.sagebionetworks.manager.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+class OAuthPermissionUtilsTest {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4MDcyMQ=="}, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3NDcwNw==", "bodyText": "Done.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403474707", "createdAt": "2020-04-04T14:13:25Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/manager/util/OAuthPermissionUtilsTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.sagebionetworks.manager.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+class OAuthPermissionUtilsTest {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4MDcyMQ=="}, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjM1Njg2OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/manager/util/OAuthPermissionUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoxNTowNlrOF_Q8xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDoxMzozNFrOGAyJLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4MjMxMA==", "bodyText": "add a null check on scopes", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401882310", "createdAt": "2020-04-01T20:15:06Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/manager/util/OAuthPermissionUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.sagebionetworks.manager.util;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.auth.AuthorizationStatus;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+\n+public class OAuthPermissionUtils {\n+\tprivate static final Map<ACCESS_TYPE,OAuthScope> ACCESS_TYPE_TO_SCOPE;\n+\t\n+\tstatic {\n+\t\tACCESS_TYPE_TO_SCOPE = new HashMap<ACCESS_TYPE,OAuthScope>();\n+\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.READ, \t\t\t\t\t\tOAuthScope.view);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.READ_PRIVATE_SUBMISSION, \tOAuthScope.view);\n+\t\t\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.CREATE, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.CHANGE_PERMISSIONS, \t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.UPDATE, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.UPLOAD, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.DELETE, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.SUBMIT, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.UPDATE_SUBMISSION, \t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.DELETE_SUBMISSION, \t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.TEAM_MEMBERSHIP_UPDATE, \tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.SEND_MESSAGE, \t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.CHANGE_SETTINGS, \t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.MODERATE, \t\t\t\t\tOAuthScope.modify);\n+\t\t\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.DOWNLOAD, \t\t\t\t\tOAuthScope.download);\n+\t}\n+\t\n+\tpublic static boolean scopeAllowsAccess(Collection<OAuthScope> scopes, ACCESS_TYPE accessType) {\n+\t\tOAuthScope scope = ACCESS_TYPE_TO_SCOPE.get(accessType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3NDczNA==", "bodyText": "Done.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403474734", "createdAt": "2020-04-04T14:13:34Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/manager/util/OAuthPermissionUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.sagebionetworks.manager.util;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.auth.AuthorizationStatus;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+\n+public class OAuthPermissionUtils {\n+\tprivate static final Map<ACCESS_TYPE,OAuthScope> ACCESS_TYPE_TO_SCOPE;\n+\t\n+\tstatic {\n+\t\tACCESS_TYPE_TO_SCOPE = new HashMap<ACCESS_TYPE,OAuthScope>();\n+\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.READ, \t\t\t\t\t\tOAuthScope.view);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.READ_PRIVATE_SUBMISSION, \tOAuthScope.view);\n+\t\t\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.CREATE, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.CHANGE_PERMISSIONS, \t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.UPDATE, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.UPLOAD, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.DELETE, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.SUBMIT, \t\t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.UPDATE_SUBMISSION, \t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.DELETE_SUBMISSION, \t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.TEAM_MEMBERSHIP_UPDATE, \tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.SEND_MESSAGE, \t\t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.CHANGE_SETTINGS, \t\t\tOAuthScope.modify);\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.MODERATE, \t\t\t\t\tOAuthScope.modify);\n+\t\t\n+\t\tACCESS_TYPE_TO_SCOPE.put(ACCESS_TYPE.DOWNLOAD, \t\t\t\t\tOAuthScope.download);\n+\t}\n+\t\n+\tpublic static boolean scopeAllowsAccess(Collection<OAuthScope> scopes, ACCESS_TYPE accessType) {\n+\t\tOAuthScope scope = ACCESS_TYPE_TO_SCOPE.get(accessType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4MjMxMA=="}, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjM3NTE0OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/EntityPermissionsManagerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyMDoyMFrOF_RIAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDoxMzo0MFrOGAyJRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4NTE4Nw==", "bodyText": "Should be accessTypeCheck", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401885187", "createdAt": "2020-04-01T20:20:20Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/EntityPermissionsManagerImpl.java", "diffHunk": "@@ -440,6 +443,10 @@ private AuthorizationStatus canDownload(UserInfo userInfo, String entityId, Stri\n \t\t\taccessTypeCheck = READ;\n \t\t}\n \t\t\n+\t\tif (!OAuthPermissionUtils.scopeAllowsAccess(userInfo.getScopes(), accessTypeCheck)) {\n+\t\t\treturn OAuthPermissionUtils.accessDenied(ACCESS_TYPE.DOWNLOAD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3NDc1Nw==", "bodyText": "Done.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403474757", "createdAt": "2020-04-04T14:13:40Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/EntityPermissionsManagerImpl.java", "diffHunk": "@@ -440,6 +443,10 @@ private AuthorizationStatus canDownload(UserInfo userInfo, String entityId, Stri\n \t\t\taccessTypeCheck = READ;\n \t\t}\n \t\t\n+\t\tif (!OAuthPermissionUtils.scopeAllowsAccess(userInfo.getScopes(), accessTypeCheck)) {\n+\t\t\treturn OAuthPermissionUtils.accessDenied(ACCESS_TYPE.DOWNLOAD);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4NTE4Nw=="}, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjM5MTIyOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/AuthorizationManagerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyNDo1NlrOF_RR7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDoxMzo0OVrOGAyJWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4NzcyNQ==", "bodyText": "Add ACCESS_TYPE as a parameter that indicates the purpose for accessing the file handle so that the scope can be mapped against that", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401887725", "createdAt": "2020-04-01T20:24:56Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/AuthorizationManagerImpl.java", "diffHunk": "@@ -280,8 +286,12 @@ public boolean isUserCreatorOrAdmin(UserInfo userInfo, String creator) {\n \r\n \t@Override\r\n \tpublic AuthorizationStatus canAccessRawFileHandleByCreator(UserInfo userInfo, String fileHandleId, String creator) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3NDc3OQ==", "bodyText": "Done.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403474779", "createdAt": "2020-04-04T14:13:49Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/AuthorizationManagerImpl.java", "diffHunk": "@@ -280,8 +286,12 @@ public boolean isUserCreatorOrAdmin(UserInfo userInfo, String creator) {\n \r\n \t@Override\r\n \tpublic AuthorizationStatus canAccessRawFileHandleByCreator(UserInfo userInfo, String fileHandleId, String creator) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4NzcyNQ=="}, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjQzMjQ5OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/EntityPermissionsManagerImplUnitTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDozNzozNFrOF_Rrdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDoxMzoxNlrOGAyI_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5NDI2Mg==", "bodyText": "Might be confusing wording referring to scopes", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401894262", "createdAt": "2020-04-01T20:37:34Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/EntityPermissionsManagerImplUnitTest.java", "diffHunk": "@@ -872,18 +914,42 @@ public void testHasDownloadAccessWihoutOpenDataAsAnonymous() {\n \t\twhen(mockNodeDao.getBenefactor(nodeId)).thenReturn(benefactorId);\n \t\twhen(mockObjectTypeManager.getObjectsDataType(nodeId, ObjectType.ENTITY)).thenReturn(dataType);\n \n-\t\twhen(mockAclDAO.canAccess(userInfo.getGroups(), benefactorId, ObjectType.ENTITY, ACCESS_TYPE.DOWNLOAD)).thenReturn(false);\n-\t\t\n \t\t// Call under test\n \t\tAuthorizationStatus status = entityPermissionsManager.hasAccess(nodeId, ACCESS_TYPE.DOWNLOAD, userInfo);\n \t\t\n \t\tassertFalse(status.isAuthorized());\n-\t\tassertEquals(\"You lack DOWNLOAD access to the requested entity.\", status.getMessage());\n+\t\tassertEquals(\"Your authorization scope(s) do not allow DOWNLOAD access.\", status.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5NTE5MA==", "bodyText": "Note: this is an issue only for the anonymous user", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401895190", "createdAt": "2020-04-01T20:39:14Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/EntityPermissionsManagerImplUnitTest.java", "diffHunk": "@@ -872,18 +914,42 @@ public void testHasDownloadAccessWihoutOpenDataAsAnonymous() {\n \t\twhen(mockNodeDao.getBenefactor(nodeId)).thenReturn(benefactorId);\n \t\twhen(mockObjectTypeManager.getObjectsDataType(nodeId, ObjectType.ENTITY)).thenReturn(dataType);\n \n-\t\twhen(mockAclDAO.canAccess(userInfo.getGroups(), benefactorId, ObjectType.ENTITY, ACCESS_TYPE.DOWNLOAD)).thenReturn(false);\n-\t\t\n \t\t// Call under test\n \t\tAuthorizationStatus status = entityPermissionsManager.hasAccess(nodeId, ACCESS_TYPE.DOWNLOAD, userInfo);\n \t\t\n \t\tassertFalse(status.isAuthorized());\n-\t\tassertEquals(\"You lack DOWNLOAD access to the requested entity.\", status.getMessage());\n+\t\tassertEquals(\"Your authorization scope(s) do not allow DOWNLOAD access.\", status.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5NDI2Mg=="}, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5NTkxMQ==", "bodyText": "Probably also in this case the anonymous user can have the full scope.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401895911", "createdAt": "2020-04-01T20:40:44Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/EntityPermissionsManagerImplUnitTest.java", "diffHunk": "@@ -872,18 +914,42 @@ public void testHasDownloadAccessWihoutOpenDataAsAnonymous() {\n \t\twhen(mockNodeDao.getBenefactor(nodeId)).thenReturn(benefactorId);\n \t\twhen(mockObjectTypeManager.getObjectsDataType(nodeId, ObjectType.ENTITY)).thenReturn(dataType);\n \n-\t\twhen(mockAclDAO.canAccess(userInfo.getGroups(), benefactorId, ObjectType.ENTITY, ACCESS_TYPE.DOWNLOAD)).thenReturn(false);\n-\t\t\n \t\t// Call under test\n \t\tAuthorizationStatus status = entityPermissionsManager.hasAccess(nodeId, ACCESS_TYPE.DOWNLOAD, userInfo);\n \t\t\n \t\tassertFalse(status.isAuthorized());\n-\t\tassertEquals(\"You lack DOWNLOAD access to the requested entity.\", status.getMessage());\n+\t\tassertEquals(\"Your authorization scope(s) do not allow DOWNLOAD access.\", status.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5NDI2Mg=="}, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3NDY4NQ==", "bodyText": "Giving full scope to the anonymous user fixed this.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403474685", "createdAt": "2020-04-04T14:13:16Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/EntityPermissionsManagerImplUnitTest.java", "diffHunk": "@@ -872,18 +914,42 @@ public void testHasDownloadAccessWihoutOpenDataAsAnonymous() {\n \t\twhen(mockNodeDao.getBenefactor(nodeId)).thenReturn(benefactorId);\n \t\twhen(mockObjectTypeManager.getObjectsDataType(nodeId, ObjectType.ENTITY)).thenReturn(dataType);\n \n-\t\twhen(mockAclDAO.canAccess(userInfo.getGroups(), benefactorId, ObjectType.ENTITY, ACCESS_TYPE.DOWNLOAD)).thenReturn(false);\n-\t\t\n \t\t// Call under test\n \t\tAuthorizationStatus status = entityPermissionsManager.hasAccess(nodeId, ACCESS_TYPE.DOWNLOAD, userInfo);\n \t\t\n \t\tassertFalse(status.isAuthorized());\n-\t\tassertEquals(\"You lack DOWNLOAD access to the requested entity.\", status.getMessage());\n+\t\tassertEquals(\"Your authorization scope(s) do not allow DOWNLOAD access.\", status.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5NDI2Mg=="}, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjQ1NjA3OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/AuthorizationManagerImplUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo0NDozMlrOF_R57A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDoyOTozNFrOGAyP3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5Nzk2NA==", "bodyText": "Copy/Paste error :) Might need code for the case with no view scope for the user.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401897964", "createdAt": "2020-04-01T20:44:32Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/AuthorizationManagerImplUnitTest.java", "diffHunk": "@@ -291,6 +298,24 @@ public void testCanAccessActivityPaginationSmallResultSet() throws Exception {\n \t\tassertFalse(canAccess);\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCanAccessActivityMissingRequired() throws Exception {\t\t \r\n+\t\tActivity act = new Activity();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3NjQ0Ng==", "bodyText": "Done.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403476446", "createdAt": "2020-04-04T14:29:34Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/AuthorizationManagerImplUnitTest.java", "diffHunk": "@@ -291,6 +298,24 @@ public void testCanAccessActivityPaginationSmallResultSet() throws Exception {\n \t\tassertFalse(canAccess);\r\n \t}\r\n \r\n+\t@Test\r\n+\tpublic void testCanAccessActivityMissingRequired() throws Exception {\t\t \r\n+\t\tActivity act = new Activity();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5Nzk2NA=="}, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjQ5MDcxOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/discussion/DiscussionThreadManagerImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1NToxOVrOF_SPrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDozMTowOVrOGAyQTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwMzUzMg==", "bodyText": "We don't need that, we can just use the @InjectMocks annotations", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r401903532", "createdAt": "2020-04-01T20:55:19Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/discussion/DiscussionThreadManagerImplTest.java", "diffHunk": "@@ -105,7 +108,7 @@\n \tprivate List<DiscussionThreadEntityReference> entityRefs = new ArrayList<DiscussionThreadEntityReference>();\n \tprivate List<DiscussionThreadEntityReference> titleEntityRefs = new ArrayList<DiscussionThreadEntityReference>();\n \n-\t@Before\n+\t@BeforeEach\n \tpublic void before() {\n \t\tMockitoAnnotations.initMocks(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3NjU1OQ==", "bodyText": "Done.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403476559", "createdAt": "2020-04-04T14:31:09Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/discussion/DiscussionThreadManagerImplTest.java", "diffHunk": "@@ -105,7 +108,7 @@\n \tprivate List<DiscussionThreadEntityReference> entityRefs = new ArrayList<DiscussionThreadEntityReference>();\n \tprivate List<DiscussionThreadEntityReference> titleEntityRefs = new ArrayList<DiscussionThreadEntityReference>();\n \n-\t@Before\n+\t@BeforeEach\n \tpublic void before() {\n \t\tMockitoAnnotations.initMocks(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwMzUzMg=="}, "originalCommit": {"oid": "c7d096694548ba95cebe3d20f03d3c2687934c81"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjM4OTg5OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EntityController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODoxODowMFrOF_3xpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNzo1Mjo1MlrOGAzg9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxODQzNg==", "bodyText": "We can consider using a HandlerMethodArgumentResolver (https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/method/support/HandlerMethodArgumentResolver.html) so that we can inject and resolve a parameter by its type in the case when we have a parsed token or alternatively a UserInfo object. Also see https://www.petrikainulainen.net/programming/spring-framework/spring-from-the-trenches-creating-a-custom-handlermethodargumentresolver.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402518436", "createdAt": "2020-04-02T18:18:00Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EntityController.java", "diffHunk": "@@ -266,13 +266,15 @@\n \t */\n \t@ResponseStatus(HttpStatus.CREATED)\n \t@RequestMapping(value = { UrlHelpers.ENTITY }, method = RequestMethod.POST)\n-\tpublic @ResponseBody Entity createEntity(@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\tpublic @ResponseBody Entity createEntity(\n+\t\t\t@RequestHeader(value = AuthorizationConstants.SYNAPSE_AUTHORIZATION_HEADER_NAME, required=true) String authorizationHeader,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5NzIwNQ==", "bodyText": "Done.  See the newly added file: services/repository/src/main/java/org/sagebionetworks/repo/web/UserInfoMethodArgumentResolver.java", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403497205", "createdAt": "2020-04-04T17:52:52Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/controller/EntityController.java", "diffHunk": "@@ -266,13 +266,15 @@\n \t */\n \t@ResponseStatus(HttpStatus.CREATED)\n \t@RequestMapping(value = { UrlHelpers.ENTITY }, method = RequestMethod.POST)\n-\tpublic @ResponseBody Entity createEntity(@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\n+\tpublic @ResponseBody Entity createEntity(\n+\t\t\t@RequestHeader(value = AuthorizationConstants.SYNAPSE_AUTHORIZATION_HEADER_NAME, required=true) String authorizationHeader,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxODQzNg=="}, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjQ1MTc4OnYy", "diffSide": "RIGHT", "path": "integration-test/src/test/java/org/sagebionetworks/ITAccessTokenTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODozNDo0NFrOF_4YJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDozOToyNVrOGAyTtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyODI5Mw==", "bodyText": "It's not really anonymous user as the the accessToken created above we use use a specific user", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402528293", "createdAt": "2020-04-02T18:34:44Z", "author": {"login": "marcomarasca"}, "path": "integration-test/src/test/java/org/sagebionetworks/ITAccessTokenTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.sagebionetworks;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Collections;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.client.SynapseAdminClient;\n+import org.sagebionetworks.client.SynapseAdminClientImpl;\n+import org.sagebionetworks.client.SynapseClient;\n+import org.sagebionetworks.client.SynapseClientImpl;\n+import org.sagebionetworks.client.exceptions.SynapseException;\n+import org.sagebionetworks.client.exceptions.SynapseForbiddenException;\n+import org.sagebionetworks.repo.model.Project;\n+import org.sagebionetworks.repo.model.oauth.OAuthAuthorizationResponse;\n+import org.sagebionetworks.repo.model.oauth.OAuthClient;\n+import org.sagebionetworks.repo.model.oauth.OAuthGrantType;\n+import org.sagebionetworks.repo.model.oauth.OAuthResponseType;\n+import org.sagebionetworks.repo.model.oauth.OIDCAuthorizationRequest;\n+import org.sagebionetworks.repo.model.oauth.OIDCTokenResponse;\n+\n+/*\n+ * This is a simple test to make sure that the OAuth access token authorization is connected properly.\n+ */\n+public class ITAccessTokenTest {\n+\n+\tprivate static SynapseAdminClient adminSynapse;\n+\tprivate static SynapseClient synapseOne;\n+\tprivate static SynapseClient synapseAnonymous;\n+\tprivate static Long user1ToDelete;\n+\tprivate static Long user2ToDelete;\n+\n+\tprivate OAuthClient client;\n+\tprivate String secret;\n+\n+\tprivate Project project;\n+\n+\t@BeforeAll\n+\tpublic static void beforeClass() throws Exception {\n+\t\t// Create 2 users\n+\t\tadminSynapse = new SynapseAdminClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(adminSynapse);\n+\t\tadminSynapse.setUsername(StackConfigurationSingleton.singleton().getMigrationAdminUsername());\n+\t\tadminSynapse.setApiKey(StackConfigurationSingleton.singleton().getMigrationAdminAPIKey());\n+\t\tadminSynapse.clearAllLocks();\n+\t\tsynapseOne = new SynapseClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(synapseOne);\n+\t\tuser1ToDelete = SynapseClientHelper.createUser(adminSynapse, synapseOne);\n+\n+\t\tsynapseAnonymous = new SynapseClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(synapseAnonymous);\n+\t}\n+\n+\t@AfterAll\n+\tpublic static void afterClass() throws Exception {\n+\t\ttry {\n+\t\t\tif (user1ToDelete!=null) adminSynapse.deleteUser(user1ToDelete);\n+\t\t} catch (SynapseException e) { }\n+\t\ttry {\n+\t\t\tif (user2ToDelete!=null) adminSynapse.deleteUser(user2ToDelete);\n+\t\t} catch (SynapseException e) { }\n+\t}\n+\n+\t@BeforeEach\n+\tpublic void before() throws Exception {\n+\t\t// create the OAuth client\n+\t\tclient = new OAuthClient();\n+\t\tclient.setClient_name(UUID.randomUUID().toString());\n+\t\tclient.setRedirect_uris(Collections.singletonList(\"https://foo.bar.com\"));\n+\t\tclient = synapseOne.createOAuthClient(client);\n+\t\t// Sets the verified status of the client (only admins and ACT can do this)\n+\t\tclient = adminSynapse.updateOAuthClientVerifiedStatus(client.getClient_id(), client.getEtag(), true);\n+\t\tsecret = synapseOne.createOAuthClientSecret(client.getClient_id()).getClient_secret();\n+\t}\n+\n+\t@AfterEach\n+\tpublic void after() throws Exception {\n+\t\ttry {\n+\t\t\tif (project!=null) adminSynapse.deleteEntity(project);\n+\t\t} catch (SynapseException e) { }\n+\t\ttry {\n+\t\t\tif (client!=null) {\n+\t\t\t\tsynapseOne.deleteOAuthClient(client.getClient_id());\n+\t\t\t}\n+\t\t} catch (SynapseException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\n+\tprivate String getAccessToken(String scopes) throws Exception {\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(client.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(client.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\t\tauthorizationRequest.setScope(scopes);\n+\t\tauthorizationRequest.setClaims(\"{\\\"id_token\\\":{},\\\"userinfo\\\":{}}\");\n+\t\tString nonce = UUID.randomUUID().toString();\n+\t\tauthorizationRequest.setNonce(nonce);\t\t\n+\t\tOAuthAuthorizationResponse oauthAuthorizationResponse = synapseOne.authorizeClient(authorizationRequest);\n+\n+\t\t// Note, we use Basic auth to authorize the client when asking for an access token\n+\t\tOIDCTokenResponse tokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret);\n+\t\t\ttokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.authorization_code, \n+\t\t\t\t\toauthAuthorizationResponse.getAccess_code(), client.getRedirect_uris().get(0), null, null, null);\n+\t\t\treturn tokenResponse.getAccess_token();\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testAccessToken() throws Exception {\n+\t\tString accessToken = getAccessToken(\"openid modify view download\");\n+\n+\t\ttry {\n+\t\t\t// We use the bearer token to authorize the client \n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(accessToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3NzQyOQ==", "bodyText": "Done.  I renamed multiple variables to clarify how we are using access tokens with the Synapse Java client.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403477429", "createdAt": "2020-04-04T14:39:25Z", "author": {"login": "brucehoff"}, "path": "integration-test/src/test/java/org/sagebionetworks/ITAccessTokenTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.sagebionetworks;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Collections;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.client.SynapseAdminClient;\n+import org.sagebionetworks.client.SynapseAdminClientImpl;\n+import org.sagebionetworks.client.SynapseClient;\n+import org.sagebionetworks.client.SynapseClientImpl;\n+import org.sagebionetworks.client.exceptions.SynapseException;\n+import org.sagebionetworks.client.exceptions.SynapseForbiddenException;\n+import org.sagebionetworks.repo.model.Project;\n+import org.sagebionetworks.repo.model.oauth.OAuthAuthorizationResponse;\n+import org.sagebionetworks.repo.model.oauth.OAuthClient;\n+import org.sagebionetworks.repo.model.oauth.OAuthGrantType;\n+import org.sagebionetworks.repo.model.oauth.OAuthResponseType;\n+import org.sagebionetworks.repo.model.oauth.OIDCAuthorizationRequest;\n+import org.sagebionetworks.repo.model.oauth.OIDCTokenResponse;\n+\n+/*\n+ * This is a simple test to make sure that the OAuth access token authorization is connected properly.\n+ */\n+public class ITAccessTokenTest {\n+\n+\tprivate static SynapseAdminClient adminSynapse;\n+\tprivate static SynapseClient synapseOne;\n+\tprivate static SynapseClient synapseAnonymous;\n+\tprivate static Long user1ToDelete;\n+\tprivate static Long user2ToDelete;\n+\n+\tprivate OAuthClient client;\n+\tprivate String secret;\n+\n+\tprivate Project project;\n+\n+\t@BeforeAll\n+\tpublic static void beforeClass() throws Exception {\n+\t\t// Create 2 users\n+\t\tadminSynapse = new SynapseAdminClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(adminSynapse);\n+\t\tadminSynapse.setUsername(StackConfigurationSingleton.singleton().getMigrationAdminUsername());\n+\t\tadminSynapse.setApiKey(StackConfigurationSingleton.singleton().getMigrationAdminAPIKey());\n+\t\tadminSynapse.clearAllLocks();\n+\t\tsynapseOne = new SynapseClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(synapseOne);\n+\t\tuser1ToDelete = SynapseClientHelper.createUser(adminSynapse, synapseOne);\n+\n+\t\tsynapseAnonymous = new SynapseClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(synapseAnonymous);\n+\t}\n+\n+\t@AfterAll\n+\tpublic static void afterClass() throws Exception {\n+\t\ttry {\n+\t\t\tif (user1ToDelete!=null) adminSynapse.deleteUser(user1ToDelete);\n+\t\t} catch (SynapseException e) { }\n+\t\ttry {\n+\t\t\tif (user2ToDelete!=null) adminSynapse.deleteUser(user2ToDelete);\n+\t\t} catch (SynapseException e) { }\n+\t}\n+\n+\t@BeforeEach\n+\tpublic void before() throws Exception {\n+\t\t// create the OAuth client\n+\t\tclient = new OAuthClient();\n+\t\tclient.setClient_name(UUID.randomUUID().toString());\n+\t\tclient.setRedirect_uris(Collections.singletonList(\"https://foo.bar.com\"));\n+\t\tclient = synapseOne.createOAuthClient(client);\n+\t\t// Sets the verified status of the client (only admins and ACT can do this)\n+\t\tclient = adminSynapse.updateOAuthClientVerifiedStatus(client.getClient_id(), client.getEtag(), true);\n+\t\tsecret = synapseOne.createOAuthClientSecret(client.getClient_id()).getClient_secret();\n+\t}\n+\n+\t@AfterEach\n+\tpublic void after() throws Exception {\n+\t\ttry {\n+\t\t\tif (project!=null) adminSynapse.deleteEntity(project);\n+\t\t} catch (SynapseException e) { }\n+\t\ttry {\n+\t\t\tif (client!=null) {\n+\t\t\t\tsynapseOne.deleteOAuthClient(client.getClient_id());\n+\t\t\t}\n+\t\t} catch (SynapseException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\n+\tprivate String getAccessToken(String scopes) throws Exception {\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(client.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(client.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\t\tauthorizationRequest.setScope(scopes);\n+\t\tauthorizationRequest.setClaims(\"{\\\"id_token\\\":{},\\\"userinfo\\\":{}}\");\n+\t\tString nonce = UUID.randomUUID().toString();\n+\t\tauthorizationRequest.setNonce(nonce);\t\t\n+\t\tOAuthAuthorizationResponse oauthAuthorizationResponse = synapseOne.authorizeClient(authorizationRequest);\n+\n+\t\t// Note, we use Basic auth to authorize the client when asking for an access token\n+\t\tOIDCTokenResponse tokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret);\n+\t\t\ttokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.authorization_code, \n+\t\t\t\t\toauthAuthorizationResponse.getAccess_code(), client.getRedirect_uris().get(0), null, null, null);\n+\t\t\treturn tokenResponse.getAccess_token();\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testAccessToken() throws Exception {\n+\t\tString accessToken = getAccessToken(\"openid modify view download\");\n+\n+\t\ttry {\n+\t\t\t// We use the bearer token to authorize the client \n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(accessToken);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyODI5Mw=="}, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjQ1Njc1OnYy", "diffSide": "RIGHT", "path": "integration-test/src/test/java/org/sagebionetworks/ITAccessTokenTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODozNjoxNlrOF_4bXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo0NDoyNVrOGAyVvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyOTExNw==", "bodyText": "Maybe we can add a true negative test where we try to do something that we are not supposed to be able do to yet with an access token (e.g. Create an evaluation queue).", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402529117", "createdAt": "2020-04-02T18:36:16Z", "author": {"login": "marcomarasca"}, "path": "integration-test/src/test/java/org/sagebionetworks/ITAccessTokenTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.sagebionetworks;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Collections;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.client.SynapseAdminClient;\n+import org.sagebionetworks.client.SynapseAdminClientImpl;\n+import org.sagebionetworks.client.SynapseClient;\n+import org.sagebionetworks.client.SynapseClientImpl;\n+import org.sagebionetworks.client.exceptions.SynapseException;\n+import org.sagebionetworks.client.exceptions.SynapseForbiddenException;\n+import org.sagebionetworks.repo.model.Project;\n+import org.sagebionetworks.repo.model.oauth.OAuthAuthorizationResponse;\n+import org.sagebionetworks.repo.model.oauth.OAuthClient;\n+import org.sagebionetworks.repo.model.oauth.OAuthGrantType;\n+import org.sagebionetworks.repo.model.oauth.OAuthResponseType;\n+import org.sagebionetworks.repo.model.oauth.OIDCAuthorizationRequest;\n+import org.sagebionetworks.repo.model.oauth.OIDCTokenResponse;\n+\n+/*\n+ * This is a simple test to make sure that the OAuth access token authorization is connected properly.\n+ */\n+public class ITAccessTokenTest {\n+\n+\tprivate static SynapseAdminClient adminSynapse;\n+\tprivate static SynapseClient synapseOne;\n+\tprivate static SynapseClient synapseAnonymous;\n+\tprivate static Long user1ToDelete;\n+\tprivate static Long user2ToDelete;\n+\n+\tprivate OAuthClient client;\n+\tprivate String secret;\n+\n+\tprivate Project project;\n+\n+\t@BeforeAll\n+\tpublic static void beforeClass() throws Exception {\n+\t\t// Create 2 users\n+\t\tadminSynapse = new SynapseAdminClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(adminSynapse);\n+\t\tadminSynapse.setUsername(StackConfigurationSingleton.singleton().getMigrationAdminUsername());\n+\t\tadminSynapse.setApiKey(StackConfigurationSingleton.singleton().getMigrationAdminAPIKey());\n+\t\tadminSynapse.clearAllLocks();\n+\t\tsynapseOne = new SynapseClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(synapseOne);\n+\t\tuser1ToDelete = SynapseClientHelper.createUser(adminSynapse, synapseOne);\n+\n+\t\tsynapseAnonymous = new SynapseClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(synapseAnonymous);\n+\t}\n+\n+\t@AfterAll\n+\tpublic static void afterClass() throws Exception {\n+\t\ttry {\n+\t\t\tif (user1ToDelete!=null) adminSynapse.deleteUser(user1ToDelete);\n+\t\t} catch (SynapseException e) { }\n+\t\ttry {\n+\t\t\tif (user2ToDelete!=null) adminSynapse.deleteUser(user2ToDelete);\n+\t\t} catch (SynapseException e) { }\n+\t}\n+\n+\t@BeforeEach\n+\tpublic void before() throws Exception {\n+\t\t// create the OAuth client\n+\t\tclient = new OAuthClient();\n+\t\tclient.setClient_name(UUID.randomUUID().toString());\n+\t\tclient.setRedirect_uris(Collections.singletonList(\"https://foo.bar.com\"));\n+\t\tclient = synapseOne.createOAuthClient(client);\n+\t\t// Sets the verified status of the client (only admins and ACT can do this)\n+\t\tclient = adminSynapse.updateOAuthClientVerifiedStatus(client.getClient_id(), client.getEtag(), true);\n+\t\tsecret = synapseOne.createOAuthClientSecret(client.getClient_id()).getClient_secret();\n+\t}\n+\n+\t@AfterEach\n+\tpublic void after() throws Exception {\n+\t\ttry {\n+\t\t\tif (project!=null) adminSynapse.deleteEntity(project);\n+\t\t} catch (SynapseException e) { }\n+\t\ttry {\n+\t\t\tif (client!=null) {\n+\t\t\t\tsynapseOne.deleteOAuthClient(client.getClient_id());\n+\t\t\t}\n+\t\t} catch (SynapseException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\n+\tprivate String getAccessToken(String scopes) throws Exception {\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(client.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(client.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\t\tauthorizationRequest.setScope(scopes);\n+\t\tauthorizationRequest.setClaims(\"{\\\"id_token\\\":{},\\\"userinfo\\\":{}}\");\n+\t\tString nonce = UUID.randomUUID().toString();\n+\t\tauthorizationRequest.setNonce(nonce);\t\t\n+\t\tOAuthAuthorizationResponse oauthAuthorizationResponse = synapseOne.authorizeClient(authorizationRequest);\n+\n+\t\t// Note, we use Basic auth to authorize the client when asking for an access token\n+\t\tOIDCTokenResponse tokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret);\n+\t\t\ttokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.authorization_code, \n+\t\t\t\t\toauthAuthorizationResponse.getAccess_code(), client.getRedirect_uris().get(0), null, null, null);\n+\t\t\treturn tokenResponse.getAccess_token();\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testAccessToken() throws Exception {\n+\t\tString accessToken = getAccessToken(\"openid modify view download\");\n+\n+\t\ttry {\n+\t\t\t// We use the bearer token to authorize the client \n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(accessToken);\n+\t\t\tproject = new Project();\n+\t\t\tproject.setName(\"access token test\");\n+\t\t\tproject = synapseAnonymous.createEntity(project);\n+\t\t\tassertNotNull(project.getId());\n+\t\t\tproject = synapseAnonymous.getEntity(project.getId(), Project.class);\n+\t\t\t\n+\t\t\t// But if we don't have 'view' scope we can't get the entity\n+\t\t\tString accessToken2 = getAccessToken(\"openid modify download\");\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(accessToken2);\n+\t\t\tAssertions.assertThrows(SynapseForbiddenException.class, () -> {\n+\t\t\t\tproject = synapseAnonymous.getEntity(project.getId(), Project.class);\t\t\t\t\n+\t\t\t});\n+\t\t\t\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3Nzk1MQ==", "bodyText": "Done.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403477951", "createdAt": "2020-04-04T14:44:25Z", "author": {"login": "brucehoff"}, "path": "integration-test/src/test/java/org/sagebionetworks/ITAccessTokenTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.sagebionetworks;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Collections;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.client.SynapseAdminClient;\n+import org.sagebionetworks.client.SynapseAdminClientImpl;\n+import org.sagebionetworks.client.SynapseClient;\n+import org.sagebionetworks.client.SynapseClientImpl;\n+import org.sagebionetworks.client.exceptions.SynapseException;\n+import org.sagebionetworks.client.exceptions.SynapseForbiddenException;\n+import org.sagebionetworks.repo.model.Project;\n+import org.sagebionetworks.repo.model.oauth.OAuthAuthorizationResponse;\n+import org.sagebionetworks.repo.model.oauth.OAuthClient;\n+import org.sagebionetworks.repo.model.oauth.OAuthGrantType;\n+import org.sagebionetworks.repo.model.oauth.OAuthResponseType;\n+import org.sagebionetworks.repo.model.oauth.OIDCAuthorizationRequest;\n+import org.sagebionetworks.repo.model.oauth.OIDCTokenResponse;\n+\n+/*\n+ * This is a simple test to make sure that the OAuth access token authorization is connected properly.\n+ */\n+public class ITAccessTokenTest {\n+\n+\tprivate static SynapseAdminClient adminSynapse;\n+\tprivate static SynapseClient synapseOne;\n+\tprivate static SynapseClient synapseAnonymous;\n+\tprivate static Long user1ToDelete;\n+\tprivate static Long user2ToDelete;\n+\n+\tprivate OAuthClient client;\n+\tprivate String secret;\n+\n+\tprivate Project project;\n+\n+\t@BeforeAll\n+\tpublic static void beforeClass() throws Exception {\n+\t\t// Create 2 users\n+\t\tadminSynapse = new SynapseAdminClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(adminSynapse);\n+\t\tadminSynapse.setUsername(StackConfigurationSingleton.singleton().getMigrationAdminUsername());\n+\t\tadminSynapse.setApiKey(StackConfigurationSingleton.singleton().getMigrationAdminAPIKey());\n+\t\tadminSynapse.clearAllLocks();\n+\t\tsynapseOne = new SynapseClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(synapseOne);\n+\t\tuser1ToDelete = SynapseClientHelper.createUser(adminSynapse, synapseOne);\n+\n+\t\tsynapseAnonymous = new SynapseClientImpl();\n+\t\tSynapseClientHelper.setEndpoints(synapseAnonymous);\n+\t}\n+\n+\t@AfterAll\n+\tpublic static void afterClass() throws Exception {\n+\t\ttry {\n+\t\t\tif (user1ToDelete!=null) adminSynapse.deleteUser(user1ToDelete);\n+\t\t} catch (SynapseException e) { }\n+\t\ttry {\n+\t\t\tif (user2ToDelete!=null) adminSynapse.deleteUser(user2ToDelete);\n+\t\t} catch (SynapseException e) { }\n+\t}\n+\n+\t@BeforeEach\n+\tpublic void before() throws Exception {\n+\t\t// create the OAuth client\n+\t\tclient = new OAuthClient();\n+\t\tclient.setClient_name(UUID.randomUUID().toString());\n+\t\tclient.setRedirect_uris(Collections.singletonList(\"https://foo.bar.com\"));\n+\t\tclient = synapseOne.createOAuthClient(client);\n+\t\t// Sets the verified status of the client (only admins and ACT can do this)\n+\t\tclient = adminSynapse.updateOAuthClientVerifiedStatus(client.getClient_id(), client.getEtag(), true);\n+\t\tsecret = synapseOne.createOAuthClientSecret(client.getClient_id()).getClient_secret();\n+\t}\n+\n+\t@AfterEach\n+\tpublic void after() throws Exception {\n+\t\ttry {\n+\t\t\tif (project!=null) adminSynapse.deleteEntity(project);\n+\t\t} catch (SynapseException e) { }\n+\t\ttry {\n+\t\t\tif (client!=null) {\n+\t\t\t\tsynapseOne.deleteOAuthClient(client.getClient_id());\n+\t\t\t}\n+\t\t} catch (SynapseException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\n+\tprivate String getAccessToken(String scopes) throws Exception {\n+\t\tOIDCAuthorizationRequest authorizationRequest = new OIDCAuthorizationRequest();\n+\t\tauthorizationRequest.setClientId(client.getClient_id());\n+\t\tauthorizationRequest.setRedirectUri(client.getRedirect_uris().get(0));\n+\t\tauthorizationRequest.setResponseType(OAuthResponseType.code);\n+\t\tauthorizationRequest.setScope(scopes);\n+\t\tauthorizationRequest.setClaims(\"{\\\"id_token\\\":{},\\\"userinfo\\\":{}}\");\n+\t\tString nonce = UUID.randomUUID().toString();\n+\t\tauthorizationRequest.setNonce(nonce);\t\t\n+\t\tOAuthAuthorizationResponse oauthAuthorizationResponse = synapseOne.authorizeClient(authorizationRequest);\n+\n+\t\t// Note, we use Basic auth to authorize the client when asking for an access token\n+\t\tOIDCTokenResponse tokenResponse = null;\n+\t\ttry {\n+\t\t\tsynapseAnonymous.setBasicAuthorizationCredentials(client.getClient_id(), secret);\n+\t\t\ttokenResponse = synapseAnonymous.getTokenResponse(OAuthGrantType.authorization_code, \n+\t\t\t\t\toauthAuthorizationResponse.getAccess_code(), client.getRedirect_uris().get(0), null, null, null);\n+\t\t\treturn tokenResponse.getAccess_token();\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testAccessToken() throws Exception {\n+\t\tString accessToken = getAccessToken(\"openid modify view download\");\n+\n+\t\ttry {\n+\t\t\t// We use the bearer token to authorize the client \n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(accessToken);\n+\t\t\tproject = new Project();\n+\t\t\tproject.setName(\"access token test\");\n+\t\t\tproject = synapseAnonymous.createEntity(project);\n+\t\t\tassertNotNull(project.getId());\n+\t\t\tproject = synapseAnonymous.getEntity(project.getId(), Project.class);\n+\t\t\t\n+\t\t\t// But if we don't have 'view' scope we can't get the entity\n+\t\t\tString accessToken2 = getAccessToken(\"openid modify download\");\n+\t\t\tsynapseAnonymous.setBearerAuthorizationToken(accessToken2);\n+\t\t\tAssertions.assertThrows(SynapseForbiddenException.class, () -> {\n+\t\t\t\tproject = synapseAnonymous.getEntity(project.getId(), Project.class);\t\t\t\t\n+\t\t\t});\n+\t\t\t\n+\t\t} finally {\n+\t\t\tsynapseAnonymous.removeAuthorizationHeader();\n+\t\t}\n+\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyOTExNw=="}, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjQ3NzM2OnYy", "diffSide": "RIGHT", "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/controller/AbstractAutowiredControllerTestBaseForJupiter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo0MjowNVrOF_4ogA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo0NDozN1rOGAyV0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzMjQ4MA==", "bodyText": "See AbstractAutowiredControllerJunit5TestBase", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402532480", "createdAt": "2020-04-02T18:42:05Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/controller/AbstractAutowiredControllerTestBaseForJupiter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.sagebionetworks.repo.web.controller;\r\n+\r\n+import org.junit.jupiter.api.AfterEach;\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.extension.ExtendWith;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.context.ApplicationContext;\r\n+import org.springframework.context.ApplicationContextAware;\r\n+import org.springframework.mock.web.MockServletConfig;\r\n+import org.springframework.test.context.ContextConfiguration;\r\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\r\n+import org.springframework.web.context.WebApplicationContext;\r\n+import org.springframework.web.context.support.StaticWebApplicationContext;\r\n+import org.springframework.web.servlet.DispatcherServlet;\r\n+\r\n+/**\r\n+ * Base class for autowired controller tests\r\n+ * \r\n+ */\r\n+@ExtendWith(SpringExtension.class)\r\n+@ContextConfiguration(locations = { \"classpath:test-context.xml\" })\r\n+public abstract class AbstractAutowiredControllerTestBaseForJupiter implements ApplicationContextAware {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3Nzk3MQ==", "bodyText": "Done.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403477971", "createdAt": "2020-04-04T14:44:37Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/controller/AbstractAutowiredControllerTestBaseForJupiter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.sagebionetworks.repo.web.controller;\r\n+\r\n+import org.junit.jupiter.api.AfterEach;\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.extension.ExtendWith;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.context.ApplicationContext;\r\n+import org.springframework.context.ApplicationContextAware;\r\n+import org.springframework.mock.web.MockServletConfig;\r\n+import org.springframework.test.context.ContextConfiguration;\r\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\r\n+import org.springframework.web.context.WebApplicationContext;\r\n+import org.springframework.web.context.support.StaticWebApplicationContext;\r\n+import org.springframework.web.servlet.DispatcherServlet;\r\n+\r\n+/**\r\n+ * Base class for autowired controller tests\r\n+ * \r\n+ */\r\n+@ExtendWith(SpringExtension.class)\r\n+@ContextConfiguration(locations = { \"classpath:test-context.xml\" })\r\n+public abstract class AbstractAutowiredControllerTestBaseForJupiter implements ApplicationContextAware {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzMjQ4MA=="}, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjUwNjE3OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1MDowOFrOF_46sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo0NzoyMlrOGAyW4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzNzEzNw==", "bodyText": "Put this into the validateCLientVerificationStatus", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402537137", "createdAt": "2020-04-02T18:50:08Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "diffHunk": "@@ -375,7 +373,9 @@ public UserAuthorization getUserAuthorization(String oauthToken) {\n \t\t\tthrow new IllegalArgumentException(\"Missing 'audience' value in the OAuth Access Token.\");\n \t\t}\n \n-\t\tvalidateClientVerificationStatus(oauthClientId);\n+\t\tif (!oauthClientId.equals(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODI0MQ==", "bodyText": "Done.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403478241", "createdAt": "2020-04-04T14:47:22Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "diffHunk": "@@ -375,7 +373,9 @@ public UserAuthorization getUserAuthorization(String oauthToken) {\n \t\t\tthrow new IllegalArgumentException(\"Missing 'audience' value in the OAuth Access Token.\");\n \t\t}\n \n-\t\tvalidateClientVerificationStatus(oauthClientId);\n+\t\tif (!oauthClientId.equals(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzNzEzNw=="}, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjUxOTg2OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1Mzo0MlrOF_5Dbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo0NzoyOVrOGAyW6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzOTM3NA==", "bodyText": "Double check that the constant is a string", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402539374", "createdAt": "2020-04-02T18:53:42Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "diffHunk": "@@ -384,18 +384,26 @@ public UserAuthorization getUserAuthorization(String oauthToken) {\n \n \t\t// userId is used to retrieve the user info\n \t\tString userId = getUserIdFromPPID(ppid, oauthClientId);\n-\n-\t\tUserAuthorization result = new UserAuthorization();\n-\t\tUserInfo userInfo = userManager.getUserInfo(Long.parseLong(userId));\n+\t\t// If the user belongs to the admin group they are an admin\n+\t\tSet<Long> groups = userManager.getUserGroups(Long.parseLong(userId));\n+\t\t\n+\t\t// Check to see if the user is an Admin\n+\t\tboolean isAdmin = groups.contains(AuthorizationConstants.BOOTSTRAP_PRINCIPAL.ADMINISTRATORS_GROUP.getPrincipalId());\n+\t\t// we don't let clients besides Synapse itself have admin access\n+\t\tboolean adminAccessAllowed = oauthClientId.equals(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODI1MQ==", "bodyText": "Done.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403478251", "createdAt": "2020-04-04T14:47:29Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "diffHunk": "@@ -384,18 +384,26 @@ public UserAuthorization getUserAuthorization(String oauthToken) {\n \n \t\t// userId is used to retrieve the user info\n \t\tString userId = getUserIdFromPPID(ppid, oauthClientId);\n-\n-\t\tUserAuthorization result = new UserAuthorization();\n-\t\tUserInfo userInfo = userManager.getUserInfo(Long.parseLong(userId));\n+\t\t// If the user belongs to the admin group they are an admin\n+\t\tSet<Long> groups = userManager.getUserGroups(Long.parseLong(userId));\n+\t\t\n+\t\t// Check to see if the user is an Admin\n+\t\tboolean isAdmin = groups.contains(AuthorizationConstants.BOOTSTRAP_PRINCIPAL.ADMINISTRATORS_GROUP.getPrincipalId());\n+\t\t// we don't let clients besides Synapse itself have admin access\n+\t\tboolean adminAccessAllowed = oauthClientId.equals(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzOTM3NA=="}, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjUyMzMyOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1NDo0MVrOF_5FsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo0ODowM1rOGAyXMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzOTk1Mg==", "bodyText": "This should be full scope as the ACL will take care of access restrictions", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402539952", "createdAt": "2020-04-02T18:54:41Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImpl.java", "diffHunk": "@@ -150,7 +150,7 @@ public String createAnonymousAccessToken() {\n \t\tString subject = AuthorizationConstants.BOOTSTRAP_PRINCIPAL.ANONYMOUS_USER.getPrincipalId().toString(); // we don't encrypt the subject\n \t\tString oauthClientId = \"\"+AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID;\n \t\tString tokenId = UUID.randomUUID().toString();\n-\t\tList<OAuthScope> noScopes = Collections.EMPTY_LIST;\n+\t\tList<OAuthScope> noScopes = Collections.singletonList(OAuthScope.view);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODMyMQ==", "bodyText": "Done.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403478321", "createdAt": "2020-04-04T14:48:03Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImpl.java", "diffHunk": "@@ -150,7 +150,7 @@ public String createAnonymousAccessToken() {\n \t\tString subject = AuthorizationConstants.BOOTSTRAP_PRINCIPAL.ANONYMOUS_USER.getPrincipalId().toString(); // we don't encrypt the subject\n \t\tString oauthClientId = \"\"+AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID;\n \t\tString tokenId = UUID.randomUUID().toString();\n-\t\tList<OAuthScope> noScopes = Collections.EMPTY_LIST;\n+\t\tList<OAuthScope> noScopes = Collections.singletonList(OAuthScope.view);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzOTk1Mg=="}, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjU0Nzk0OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImplUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOTowMTozOVrOF_5Vxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo0OToxMlrOGAyXxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU0NDA3MQ==", "bodyText": "maybe rename to just userGroups since this is really not admin groups", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402544071", "createdAt": "2020-04-02T19:01:39Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImplUnitTest.java", "diffHunk": "@@ -899,29 +900,115 @@ public void testGetUserAuthorization() {\n \t\tString token = \"access token\";\n \t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n \t\tClaims claims = Jwts.claims();\n-\t\tList<OAuthScope> scopes = Collections.singletonList(OAuthScope.openid);\n+\t\tList<OAuthScope> scopes = Arrays.asList(OAuthScope.values());\n \t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n \t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n \t\twhen(mockJWT.getBody()).thenReturn(claims);\n \t\tclaims.setAudience(OAUTH_CLIENT_ID);\n \t\twhen(mockOauthClientDao.getSectorIdentifierSecretForClient(OAUTH_CLIENT_ID)).thenReturn(clientSpecificEncodingSecret);\n \t\twhen(mockOauthClientDao.isOauthClientVerified(OAUTH_CLIENT_ID)).thenReturn(true);\n \t\t\n-\t\tString ppid = openIDConnectManagerImpl.ppid(USER_ID, OAUTH_CLIENT_ID);\n+\t\tString ppid = EncryptionUtils.encrypt(USER_ID, clientSpecificEncodingSecret);\n \t\tclaims.setSubject(ppid);\n \t\t\n-\t\tUserInfo userInfo = new UserInfo(false, USER_ID_LONG);\n-\t\twhen(mockUserManager.getUserInfo(USER_ID_LONG)).thenReturn(userInfo);\n+\t\tSet<Long> adminUsersGroups = ImmutableSet.of(USER_ID_LONG, \n+\t\t\t\tAuthorizationConstants.BOOTSTRAP_PRINCIPAL.ADMINISTRATORS_GROUP.getPrincipalId());\n+\t\twhen(mockUserManager.getUserGroups(USER_ID_LONG)).thenReturn(adminUsersGroups);\n \t\t\n \t\t// method under test\n-\t\tUserAuthorization actual = openIDConnectManagerImpl.getUserAuthorization(token);\n+\t\tUserInfo actual = openIDConnectManagerImpl.getUserAuthorization(token);\n \t\t\n \t\tverify(mockJWT).getBody();\n-\t\tverify(mockUserManager).getUserInfo(USER_ID_LONG);\n+\t\tverify(mockUserManager).getUserGroups(USER_ID_LONG);\n+\t\tverify(mockOauthClientDao).getSectorIdentifierSecretForClient(OAUTH_CLIENT_ID);\n \t\t\n+\t\tassertFalse(actual.isAdmin()); // it's false 'cause the oauth client is not Synapse\n+\t\tassertEquals(USER_ID_LONG, actual.getId());\n \t\tassertEquals(oidcClaims, actual.getOidcClaims());\n \t\tassertEquals(scopes, actual.getScopes());\n-\t\tassertEquals(userInfo, actual.getUserInfo());\n+\t\tassertEquals(adminUsersGroups, actual.getGroups());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetUserAuthorizationSynapseOAuthClient() {\n+\t\tString token = \"access token\";\n+\t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n+\t\tClaims claims = Jwts.claims();\n+\t\tList<OAuthScope> scopes = Collections.singletonList(OAuthScope.openid);\n+\t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n+\t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n+\t\twhen(mockJWT.getBody()).thenReturn(claims);\n+\t\tclaims.setAudience(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\t\t\n+\t\tclaims.setSubject(USER_ID);\t\n+\t\twhen(mockUserManager.getUserGroups(USER_ID_LONG)).thenReturn(userInfo.getGroups());\n+\t\t\n+\t\t// method under test\n+\t\topenIDConnectManagerImpl.getUserAuthorization(token);\n+\t\t\n+\t\tverify(mockOauthClientDao, never()).getSectorIdentifierSecretForClient(OAUTH_CLIENT_ID);\n+\t\tverify(mockOauthClientDao, never()).isOauthClientVerified(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetAdminUserAuthorizationSynapseOAuthClient() {\n+\t\tString token = \"access token\";\n+\t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n+\t\tClaims claims = Jwts.claims();\n+\t\tList<OAuthScope> scopes = Arrays.asList(OAuthScope.values());\n+\t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n+\t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n+\t\twhen(mockJWT.getBody()).thenReturn(claims);\n+\t\tclaims.setAudience(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\t\t\n+\t\tclaims.setSubject(USER_ID);\t\n+\t\tSet<Long> adminUsersGroups = ImmutableSet.of(USER_ID_LONG, \n+\t\t\t\tAuthorizationConstants.BOOTSTRAP_PRINCIPAL.ADMINISTRATORS_GROUP.getPrincipalId());\n+\t\twhen(mockUserManager.getUserGroups(USER_ID_LONG)).thenReturn(adminUsersGroups);\n+\t\t\n+\t\t// method under test\n+\t\tUserInfo actual = openIDConnectManagerImpl.getUserAuthorization(token);\n+\t\t\n+\t\tassertTrue(actual.isAdmin());\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testGetAdminUserAuthorizationSynapseOAuthClientNotFullScope() {\n+\t\tString token = \"access token\";\n+\t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n+\t\tClaims claims = Jwts.claims();\n+\t\tList<OAuthScope> scopes = ImmutableList.of(OAuthScope.openid, OAuthScope.view);\n+\t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n+\t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n+\t\twhen(mockJWT.getBody()).thenReturn(claims);\n+\t\tclaims.setAudience(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\t\t\n+\t\tclaims.setSubject(USER_ID);\t\n+\t\tSet<Long> adminUsersGroups = ImmutableSet.of(USER_ID_LONG, \n+\t\t\t\tAuthorizationConstants.BOOTSTRAP_PRINCIPAL.ADMINISTRATORS_GROUP.getPrincipalId());\n+\t\twhen(mockUserManager.getUserGroups(USER_ID_LONG)).thenReturn(adminUsersGroups);\n+\t\t\n+\t\t// method under test\n+\t\tUserInfo actual = openIDConnectManagerImpl.getUserAuthorization(token);\n+\t\t\n+\t\tassertFalse(actual.isAdmin());\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testGetAdminUserAuthorizationSynapseOAuthClientNotAdminGroup() {\n+\t\tString token = \"access token\";\n+\t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n+\t\tClaims claims = Jwts.claims();\n+\t\tList<OAuthScope> scopes = Arrays.asList(OAuthScope.values());\n+\t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n+\t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n+\t\twhen(mockJWT.getBody()).thenReturn(claims);\n+\t\tclaims.setAudience(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\t\t\n+\t\tclaims.setSubject(USER_ID);\t\n+\t\tSet<Long> adminUsersGroups = ImmutableSet.of(USER_ID_LONG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODQ2OA==", "bodyText": "Done.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403478468", "createdAt": "2020-04-04T14:49:12Z", "author": {"login": "brucehoff"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImplUnitTest.java", "diffHunk": "@@ -899,29 +900,115 @@ public void testGetUserAuthorization() {\n \t\tString token = \"access token\";\n \t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n \t\tClaims claims = Jwts.claims();\n-\t\tList<OAuthScope> scopes = Collections.singletonList(OAuthScope.openid);\n+\t\tList<OAuthScope> scopes = Arrays.asList(OAuthScope.values());\n \t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n \t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n \t\twhen(mockJWT.getBody()).thenReturn(claims);\n \t\tclaims.setAudience(OAUTH_CLIENT_ID);\n \t\twhen(mockOauthClientDao.getSectorIdentifierSecretForClient(OAUTH_CLIENT_ID)).thenReturn(clientSpecificEncodingSecret);\n \t\twhen(mockOauthClientDao.isOauthClientVerified(OAUTH_CLIENT_ID)).thenReturn(true);\n \t\t\n-\t\tString ppid = openIDConnectManagerImpl.ppid(USER_ID, OAUTH_CLIENT_ID);\n+\t\tString ppid = EncryptionUtils.encrypt(USER_ID, clientSpecificEncodingSecret);\n \t\tclaims.setSubject(ppid);\n \t\t\n-\t\tUserInfo userInfo = new UserInfo(false, USER_ID_LONG);\n-\t\twhen(mockUserManager.getUserInfo(USER_ID_LONG)).thenReturn(userInfo);\n+\t\tSet<Long> adminUsersGroups = ImmutableSet.of(USER_ID_LONG, \n+\t\t\t\tAuthorizationConstants.BOOTSTRAP_PRINCIPAL.ADMINISTRATORS_GROUP.getPrincipalId());\n+\t\twhen(mockUserManager.getUserGroups(USER_ID_LONG)).thenReturn(adminUsersGroups);\n \t\t\n \t\t// method under test\n-\t\tUserAuthorization actual = openIDConnectManagerImpl.getUserAuthorization(token);\n+\t\tUserInfo actual = openIDConnectManagerImpl.getUserAuthorization(token);\n \t\t\n \t\tverify(mockJWT).getBody();\n-\t\tverify(mockUserManager).getUserInfo(USER_ID_LONG);\n+\t\tverify(mockUserManager).getUserGroups(USER_ID_LONG);\n+\t\tverify(mockOauthClientDao).getSectorIdentifierSecretForClient(OAUTH_CLIENT_ID);\n \t\t\n+\t\tassertFalse(actual.isAdmin()); // it's false 'cause the oauth client is not Synapse\n+\t\tassertEquals(USER_ID_LONG, actual.getId());\n \t\tassertEquals(oidcClaims, actual.getOidcClaims());\n \t\tassertEquals(scopes, actual.getScopes());\n-\t\tassertEquals(userInfo, actual.getUserInfo());\n+\t\tassertEquals(adminUsersGroups, actual.getGroups());\n+\t}\n+\n+\t@Test\n+\tpublic void testGetUserAuthorizationSynapseOAuthClient() {\n+\t\tString token = \"access token\";\n+\t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n+\t\tClaims claims = Jwts.claims();\n+\t\tList<OAuthScope> scopes = Collections.singletonList(OAuthScope.openid);\n+\t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n+\t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n+\t\twhen(mockJWT.getBody()).thenReturn(claims);\n+\t\tclaims.setAudience(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\t\t\n+\t\tclaims.setSubject(USER_ID);\t\n+\t\twhen(mockUserManager.getUserGroups(USER_ID_LONG)).thenReturn(userInfo.getGroups());\n+\t\t\n+\t\t// method under test\n+\t\topenIDConnectManagerImpl.getUserAuthorization(token);\n+\t\t\n+\t\tverify(mockOauthClientDao, never()).getSectorIdentifierSecretForClient(OAUTH_CLIENT_ID);\n+\t\tverify(mockOauthClientDao, never()).isOauthClientVerified(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetAdminUserAuthorizationSynapseOAuthClient() {\n+\t\tString token = \"access token\";\n+\t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n+\t\tClaims claims = Jwts.claims();\n+\t\tList<OAuthScope> scopes = Arrays.asList(OAuthScope.values());\n+\t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n+\t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n+\t\twhen(mockJWT.getBody()).thenReturn(claims);\n+\t\tclaims.setAudience(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\t\t\n+\t\tclaims.setSubject(USER_ID);\t\n+\t\tSet<Long> adminUsersGroups = ImmutableSet.of(USER_ID_LONG, \n+\t\t\t\tAuthorizationConstants.BOOTSTRAP_PRINCIPAL.ADMINISTRATORS_GROUP.getPrincipalId());\n+\t\twhen(mockUserManager.getUserGroups(USER_ID_LONG)).thenReturn(adminUsersGroups);\n+\t\t\n+\t\t// method under test\n+\t\tUserInfo actual = openIDConnectManagerImpl.getUserAuthorization(token);\n+\t\t\n+\t\tassertTrue(actual.isAdmin());\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testGetAdminUserAuthorizationSynapseOAuthClientNotFullScope() {\n+\t\tString token = \"access token\";\n+\t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n+\t\tClaims claims = Jwts.claims();\n+\t\tList<OAuthScope> scopes = ImmutableList.of(OAuthScope.openid, OAuthScope.view);\n+\t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n+\t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n+\t\twhen(mockJWT.getBody()).thenReturn(claims);\n+\t\tclaims.setAudience(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\t\t\n+\t\tclaims.setSubject(USER_ID);\t\n+\t\tSet<Long> adminUsersGroups = ImmutableSet.of(USER_ID_LONG, \n+\t\t\t\tAuthorizationConstants.BOOTSTRAP_PRINCIPAL.ADMINISTRATORS_GROUP.getPrincipalId());\n+\t\twhen(mockUserManager.getUserGroups(USER_ID_LONG)).thenReturn(adminUsersGroups);\n+\t\t\n+\t\t// method under test\n+\t\tUserInfo actual = openIDConnectManagerImpl.getUserAuthorization(token);\n+\t\t\n+\t\tassertFalse(actual.isAdmin());\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testGetAdminUserAuthorizationSynapseOAuthClientNotAdminGroup() {\n+\t\tString token = \"access token\";\n+\t\twhen(oidcTokenHelper.parseJWT(token)).thenReturn(mockJWT);\n+\t\tClaims claims = Jwts.claims();\n+\t\tList<OAuthScope> scopes = Arrays.asList(OAuthScope.values());\n+\t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = Collections.singletonMap(OIDCClaimName.email, null);\n+\t\tClaimsJsonUtil.addAccessClaims(scopes, oidcClaims, claims);\n+\t\twhen(mockJWT.getBody()).thenReturn(claims);\n+\t\tclaims.setAudience(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\t\t\n+\t\tclaims.setSubject(USER_ID);\t\n+\t\tSet<Long> adminUsersGroups = ImmutableSet.of(USER_ID_LONG);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU0NDA3MQ=="}, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjU5NDQ5OnYy", "diffSide": "RIGHT", "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/StackStatusInterceptorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToxNTowOFrOF_50Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo0OToyNlrOGAyX1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MTg3MQ==", "bodyText": "Use the existing base class for Junit5", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402551871", "createdAt": "2020-04-02T19:15:08Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/StackStatusInterceptorTest.java", "diffHunk": "@@ -17,38 +19,43 @@\n import org.sagebionetworks.repo.model.status.StackStatus;\r\n import org.sagebionetworks.repo.model.status.StatusEnum;\r\n import org.sagebionetworks.repo.model.versionInfo.SynapseVersionInfo;\r\n-import org.sagebionetworks.repo.web.controller.AbstractAutowiredControllerTestBase;\r\n+import org.sagebionetworks.repo.web.controller.AbstractAutowiredControllerTestBaseForJupiter;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n \r\n /**\r\n  * Test that the intercepter is working as expected.\r\n  * @author John\r\n  *\r\n  */\r\n-public class StackStatusInterceptorTest extends AbstractAutowiredControllerTestBase {\r\n+public class StackStatusInterceptorTest extends AbstractAutowiredControllerTestBaseForJupiter {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODQ4NQ==", "bodyText": "Done.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403478485", "createdAt": "2020-04-04T14:49:26Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/StackStatusInterceptorTest.java", "diffHunk": "@@ -17,38 +19,43 @@\n import org.sagebionetworks.repo.model.status.StackStatus;\r\n import org.sagebionetworks.repo.model.status.StatusEnum;\r\n import org.sagebionetworks.repo.model.versionInfo.SynapseVersionInfo;\r\n-import org.sagebionetworks.repo.web.controller.AbstractAutowiredControllerTestBase;\r\n+import org.sagebionetworks.repo.web.controller.AbstractAutowiredControllerTestBaseForJupiter;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n \r\n /**\r\n  * Test that the intercepter is working as expected.\r\n  * @author John\r\n  *\r\n  */\r\n-public class StackStatusInterceptorTest extends AbstractAutowiredControllerTestBase {\r\n+public class StackStatusInterceptorTest extends AbstractAutowiredControllerTestBaseForJupiter {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MTg3MQ=="}, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjYzNTMzOnYy", "diffSide": "RIGHT", "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/filter/throttle/RequestThrottleFilterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyNzoxMlrOF_6Obw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo1MDoyMFrOGAyYLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1ODU3NQ==", "bodyText": "We can use @InjectMocks and get rid of the ReflectionTestUtils.setField", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r402558575", "createdAt": "2020-04-02T19:27:12Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/filter/throttle/RequestThrottleFilterTest.java", "diffHunk": "@@ -59,13 +64,17 @@ public void setUp() throws Exception{\n \t\tmockRequest.setRemoteAddr(ipAddress);\r\n \t\tmockRequest.setRequestURI(path);\r\n \t\tmockRequest.setCookies(new Cookie(SESSION_ID_COOKIE_NAME, sessionId));\r\n+\t\tmockRequest.addHeader(AuthorizationConstants.SYNAPSE_AUTHORIZATION_HEADER_NAME, \"Bearer \"+ACCESS_TOKEN);\r\n \r\n \t\tReflectionTestUtils.setField(filter, \"consumer\", mockConsumer);\r\n+\t\tReflectionTestUtils.setField(filter, \"oidcManager\", mockOidcManager);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3ODU3NQ==", "bodyText": "Done.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3986#discussion_r403478575", "createdAt": "2020-04-04T14:50:20Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/test/java/org/sagebionetworks/repo/web/filter/throttle/RequestThrottleFilterTest.java", "diffHunk": "@@ -59,13 +64,17 @@ public void setUp() throws Exception{\n \t\tmockRequest.setRemoteAddr(ipAddress);\r\n \t\tmockRequest.setRequestURI(path);\r\n \t\tmockRequest.setCookies(new Cookie(SESSION_ID_COOKIE_NAME, sessionId));\r\n+\t\tmockRequest.addHeader(AuthorizationConstants.SYNAPSE_AUTHORIZATION_HEADER_NAME, \"Bearer \"+ACCESS_TOKEN);\r\n \r\n \t\tReflectionTestUtils.setField(filter, \"consumer\", mockConsumer);\r\n+\t\tReflectionTestUtils.setField(filter, \"oidcManager\", mockOidcManager);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1ODU3NQ=="}, "originalCommit": {"oid": "5ae8d6ee9e590eb98f90345382d063ec4392ac94"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3157, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}