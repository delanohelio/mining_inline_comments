{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MDMyNzk5", "number": 4046, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjo0NDozMlrOD9CMXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMDo1OToxOFrOD-BeFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzI1NjYyOnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/auth/filter/DockerClientAuthFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjo0NDozMlrOGWVszg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjo0NDozMlrOGWVszg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3NzM5MA==", "bodyText": "We might want to modify the abstract method to return some sort of object that could be used as a signal in the subsequent step that there is a different type of \"credentials\".", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4046#discussion_r426077390", "createdAt": "2020-05-15T22:44:32Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/filter/DockerClientAuthFilter.java", "diffHunk": "@@ -56,43 +62,58 @@ protected boolean reportBadCredentialsMetric() {\n \n \t@Override\n \tprotected boolean validCredentials(UserNameAndPassword credentials) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4e4aa18b976f206a5cd467d530e2d3c6da7406e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzI2MzM2OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/auth/filter/DockerClientAuthFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjo0ODoyN1rOGWVwyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjo0ODoyN1rOGWVwyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3ODQxMA==", "bodyText": "Consider introducing a dedicated filter for the term of use check that comes after all the authentication filters and could be applied to any endpoint regardless.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4046#discussion_r426078410", "createdAt": "2020-05-15T22:48:27Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/filter/DockerClientAuthFilter.java", "diffHunk": "@@ -56,43 +62,58 @@ protected boolean reportBadCredentialsMetric() {\n \n \t@Override\n \tprotected boolean validCredentials(UserNameAndPassword credentials) {\n-\t\tLoginRequest credential = new LoginRequest();\n-\t\t\n-\t\tcredential.setUsername(credentials.getUserName());\n-\t\tcredential.setPassword(credentials.getPassword());\n-\t\t\n \t\ttry {\n-\t\t\tauthenticationService.login(credential);\n-\t\t} catch (UnauthenticatedException e) {\n-\t\t\treturn false;\n+\t\t\t// is the password actually an access token?\n+\t\t\toidcManager.getUserId(credentials.getPassword());\n+\t\t\treturn true;\n+\t\t} catch (IllegalArgumentException iae) {\n+\t\t\t// the password is NOT a (valid) access token,\n+\t\t\t// but maybe it's a password\n+\t\t\tLoginRequest credential = new LoginRequest();\n+\t\t\t\n+\t\t\tcredential.setUsername(credentials.getUserName());\n+\t\t\tcredential.setPassword(credentials.getPassword());\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\tauthenticationService.login(credential);\n+\t\t\t\treturn true;\n+\t\t\t} catch (UnauthenticatedException e) {\n+\t\t\t\treturn false;\n+\t\t\t}\n \t\t}\n-\t\t\n-\t\treturn true;\n-\n \t}\n \t\n \t@Override\n \tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain, UserNameAndPassword credentials) throws ServletException, IOException {\n \t\t\n \t\tLong userId = BOOTSTRAP_PRINCIPAL.ANONYMOUS_USER.getPrincipalId();\n \t\t\n+\t\tMap<String, String[]> modHeaders = HttpAuthUtil.filterAuthorizationHeaders(request);\n+\t\t\n \t\tif (credentials != null) {\n+\t\t\tString accessToken = null;\n \t\t\ttry {\n-\t\t\t\tString username = credentials.getUserName();\n-\t\t\t\tPrincipalAlias alias = authenticationService.lookupUserForAuthentication(username);\n-\t\t\t\tuserId = alias.getPrincipalId();\n-\t\t\t} catch (NotFoundException e) {\n-\t\t\t\trejectRequest(response, getInvalidCredentialsMessage());\n+\t\t\t\t// is the password actually an access token?\n+\t\t\t\taccessToken = credentials.getPassword();\n+\t\t\t\tuserId = Long.parseLong(oidcManager.getUserId(accessToken));\n+\t\t\t} catch (IllegalArgumentException iae) {\n+\t\t\t\ttry {\n+\t\t\t\t\tString username = credentials.getUserName();\n+\t\t\t\t\tPrincipalAlias alias = authenticationService.lookupUserForAuthentication(username);\n+\t\t\t\t\tuserId = alias.getPrincipalId();\n+\t\t\t\t\taccessToken = oidcTokenHelper.createTotalAccessToken(userId);\n+\t\t\t\t} catch (NotFoundException e) {\n+\t\t\t\t\trejectRequest(response, getInvalidCredentialsMessage());\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tHttpAuthUtil.setBearerTokenHeader(modHeaders, accessToken);\n+\t\t\tif (!authenticationService.hasUserAcceptedTermsOfUse(userId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4e4aa18b976f206a5cd467d530e2d3c6da7406e"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzYyMzg5OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/auth/filter/AcceptTermsOfUseFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMDo1OToxOFrOGX3twQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMDo1OToxOFrOGX3twQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4MzI2NQ==", "bodyText": "A little trickery in the (CGLIB) proxies that we use for the spring beans, I'm afraid that the method cannot be final", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4046#discussion_r427683265", "createdAt": "2020-05-20T00:59:18Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/filter/AcceptTermsOfUseFilter.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.sagebionetworks.auth.filter;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import javax.servlet.Filter;\r\n+import javax.servlet.FilterChain;\r\n+import javax.servlet.FilterConfig;\r\n+import javax.servlet.ServletException;\r\n+import javax.servlet.ServletRequest;\r\n+import javax.servlet.ServletResponse;\r\n+import javax.servlet.http.HttpServletRequest;\r\n+import javax.servlet.http.HttpServletResponse;\r\n+\r\n+import org.sagebionetworks.auth.HttpAuthUtil;\r\n+import org.sagebionetworks.auth.services.AuthenticationService;\r\n+import org.sagebionetworks.repo.model.AuthorizationConstants;\r\n+import org.sagebionetworks.repo.model.AuthorizationConstants.BOOTSTRAP_PRINCIPAL;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.http.HttpStatus;\r\n+import org.springframework.stereotype.Component;\r\n+\r\n+/**\r\n+\r\n+ * This filter checks that the authenticated Syanpse user has agreed to the Synapse Terms Of Use.\r\n+ * Anonymous users are simply let through.\r\n+ */\r\n+@Component(\"acceptTermsOfUseFilter\")\r\n+public class AcceptTermsOfUseFilter implements Filter {\r\n+\tprivate static final String TOU_UNSIGNED_REASON = \"Terms of use have not been signed.\";\r\n+\t\r\n+\tprivate AuthenticationService authenticationService;\r\n+\r\n+\t@Autowired\r\n+\tpublic AcceptTermsOfUseFilter(AuthenticationService authenticationService) {\r\n+\t\tthis.authenticationService = authenticationService;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic final void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09326973ef08cfbb11208b31dfb20187e27b735f"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3041, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}