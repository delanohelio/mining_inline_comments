{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMjk3NjI1", "number": 4115, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoxNDo0MFrOEKUZ8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo1NzowMFrOEKpHxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjU1NTM5OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/auth/filter/StackConfigKeyAndSecretProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoxNDo0MFrOGrSpIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoxNDo0MFrOGrSpIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0NzM5Mg==", "bodyText": "Is there a way we can avoid keeping this in memory?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4115#discussion_r448047392", "createdAt": "2020-07-01T00:14:40Z", "author": {"login": "john-hill"}, "path": "services/repository/src/main/java/org/sagebionetworks/auth/filter/StackConfigKeyAndSecretProvider.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.sagebionetworks.auth.filter;\r\n+\r\n+import org.sagebionetworks.StackConfiguration;\r\n+\r\n+/**\r\n+ * Default implementation for a {@link ServiceKeyAndSecretProvider} that grabs\r\n+ * the key/secret pair from the stack configuration\r\n+ * \r\n+ * @author Marco Marasca\r\n+ *\r\n+ */\r\n+public class StackConfigKeyAndSecretProvider implements ServiceKeyAndSecretProvider {\r\n+\r\n+\tprivate String serviceName;\r\n+\tprivate String serviceKey;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3d8aba230f5e63b96a90202a9c2421e236ee65"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjU5MTM0OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/OAuthScopeInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDozNTozMlrOGrS-QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDozNTozMlrOGrS-QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MjgwMA==", "bodyText": "check with @brucehoff on this one.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4115#discussion_r448052800", "createdAt": "2020-07-01T00:35:32Z", "author": {"login": "john-hill"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/OAuthScopeInterceptor.java", "diffHunk": "@@ -61,10 +61,20 @@ public static boolean isAnonymous(HttpServletRequest request) {\n \t\t\t\tAuthorizationConstants.BOOTSTRAP_PRINCIPAL.ANONYMOUS_USER.getPrincipalId()\n \t\t\t\t\t.equals(Long.parseLong(userIdRequestParameter));\n \t}\n+\t\n+\tpublic static boolean isServiceCall(HttpServletRequest request) {\n+\t\tString serviceName = request.getHeader(AuthorizationConstants.SYNAPSE_HEADER_SERVICE_NAME);\n+\t\treturn serviceName != null;\n+\t}\n \n \t@Override\n \tpublic boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n \t\t\tthrows Exception {\n+\n+\t\t// Service calls do not need to have the scope checked since they are authenticated by the filter itself\n+\t\tif (isServiceCall(request)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3d8aba230f5e63b96a90202a9c2421e236ee65"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjYwMjMyOnYy", "diffSide": "RIGHT", "path": "integration-test/src/test/java/org/sagebionetworks/ITMigrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDo0MTo1MFrOGrTEow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDo0MTo1MFrOGrTEow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1NDQzNQ==", "bodyText": "add a test that adds the \"magic\" and ensure it does not work.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4115#discussion_r448054435", "createdAt": "2020-07-01T00:41:50Z", "author": {"login": "john-hill"}, "path": "integration-test/src/test/java/org/sagebionetworks/ITMigrationTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.sagebionetworks;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\r\n+import static org.junit.jupiter.api.Assertions.assertThrows;\r\n+\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.sagebionetworks.client.SynapseAdminClient;\r\n+import org.sagebionetworks.client.SynapseAdminClientImpl;\r\n+import org.sagebionetworks.client.exceptions.SynapseException;\r\n+import org.sagebionetworks.client.exceptions.SynapseForbiddenException;\r\n+\r\n+public class ITMigrationTest {\r\n+\t\r\n+\tprivate static StackConfiguration stackConfig = StackConfigurationSingleton.singleton();\r\n+\tprivate static SynapseAdminClient adminSynapse;\r\n+\t\r\n+\t@BeforeEach\r\n+\tpublic void before() {\r\n+\t\tadminSynapse = new SynapseAdminClientImpl();\r\n+\t\tSynapseClientHelper.setEndpoints(adminSynapse);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testMigrationWithServiceAuth() throws SynapseException {\r\n+\r\n+\t\tassertThrows(SynapseForbiddenException.class, () -> {\r\n+\t\t\t// No authentication\r\n+\t\t\tadminSynapse.getMigrationTypes();\r\n+\t\t});\r\n+\t\t\r\n+\t\t// Set service basic auth\r\n+\t\tString key = stackConfig.getServiceAuthKey(StackConfiguration.SERVICE_MIGRATION);\r\n+\t\tString secret = stackConfig.getServiceAuthSecret(StackConfiguration.SERVICE_MIGRATION);\r\n+\t\t\r\n+\t\tadminSynapse.setBasicAuthorizationCredentials(key, secret);\r\n+\t\t\r\n+\t\t// This should now work\r\n+\t\tassertNotNull(adminSynapse.getMigrationTypes());\r\n+\t\t\r\n+\t\t// Clear basic auth\r\n+\t\tadminSynapse.removeAuthorizationHeader();\r\n+\t\r\n+\t\t// Should still work with user/api key auth\r\n+\t\t\r\n+\t\tString migrationUser = stackConfig.getMigrationAdminUsername();\r\n+\t\tString migrationKey = stackConfig.getMigrationAdminAPIKey();\r\n+\t\t\r\n+\t\tadminSynapse.setUsername(migrationUser);\r\n+\t\tadminSynapse.setApiKey(migrationKey);\r\n+\t\t\r\n+\t\t// This should still work\r\n+\t\tassertNotNull(adminSynapse.getMigrationTypes());\r\n+\t}\r\n+\t\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3d8aba230f5e63b96a90202a9c2421e236ee65"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTk0OTQ4OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/OAuthScopeInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo1NzowMFrOGrzdRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo1NzowMFrOGrzdRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4NTAyOA==", "bodyText": "need to make sure that a client cannot add this header to bypass the scope check", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4115#discussion_r448585028", "createdAt": "2020-07-01T19:57:00Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/OAuthScopeInterceptor.java", "diffHunk": "@@ -61,10 +61,20 @@ public static boolean isAnonymous(HttpServletRequest request) {\n \t\t\t\tAuthorizationConstants.BOOTSTRAP_PRINCIPAL.ANONYMOUS_USER.getPrincipalId()\n \t\t\t\t\t.equals(Long.parseLong(userIdRequestParameter));\n \t}\n+\t\n+\tpublic static boolean isServiceCall(HttpServletRequest request) {\n+\t\tString serviceName = request.getHeader(AuthorizationConstants.SYNAPSE_HEADER_SERVICE_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3d8aba230f5e63b96a90202a9c2421e236ee65"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2897, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}