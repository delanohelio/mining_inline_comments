{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4OTgzODc5", "number": 4020, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzoxOTo0N1rOD3uaeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzo0MzowMVrOD3u8jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzU4NzEzOnYy", "diffSide": "RIGHT", "path": "services/authutil/src/main/java/org/sagebionetworks/authutil/SimpleCORSFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzoxOTo0N1rOGOJE_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMToyNjowMVrOGORnkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4MTk4MQ==", "bodyText": "Double check that if the Auth header is considered a \"custom\" header?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4020#discussion_r417481981", "createdAt": "2020-04-29T17:19:47Z", "author": {"login": "marcomarasca"}, "path": "services/authutil/src/main/java/org/sagebionetworks/authutil/SimpleCORSFilter.java", "diffHunk": "@@ -31,7 +30,9 @@\n \tpublic static final String ACCESS_CONTROL_REQUEST_METHOD = \"Access-Control-Request-Method\";\r\n \tpublic static final String ALL_ORIGINS = \"*\";\r\n \tpublic static final String METHODS = \"POST, GET, PUT, DELETE\";\r\n-\tpublic static final String HEADERS = \"Origin, X-Requested-With, Content-Type, Accept, \" + AuthorizationConstants.SESSION_TOKEN_PARAM;\r\n+\tpublic static final String HEADERS = \"Origin, X-Requested-With, Content-Type, Accept, \" + \r\n+\t\t\tAuthorizationConstants.SESSION_TOKEN_PARAM +\r\n+\t\t\", \"+AuthorizationConstants.AUTHORIZATION_HEADER_NAME;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18cd7767405fbbd5a9be1d5bced71eab7055f988"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyMTkwNA==", "bodyText": "Per Jay, this is correct.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4020#discussion_r417621904", "createdAt": "2020-04-29T21:26:01Z", "author": {"login": "brucehoff"}, "path": "services/authutil/src/main/java/org/sagebionetworks/authutil/SimpleCORSFilter.java", "diffHunk": "@@ -31,7 +30,9 @@\n \tpublic static final String ACCESS_CONTROL_REQUEST_METHOD = \"Access-Control-Request-Method\";\r\n \tpublic static final String ALL_ORIGINS = \"*\";\r\n \tpublic static final String METHODS = \"POST, GET, PUT, DELETE\";\r\n-\tpublic static final String HEADERS = \"Origin, X-Requested-With, Content-Type, Accept, \" + AuthorizationConstants.SESSION_TOKEN_PARAM;\r\n+\tpublic static final String HEADERS = \"Origin, X-Requested-With, Content-Type, Accept, \" + \r\n+\t\t\tAuthorizationConstants.SESSION_TOKEN_PARAM +\r\n+\t\t\", \"+AuthorizationConstants.AUTHORIZATION_HEADER_NAME;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4MTk4MQ=="}, "originalCommit": {"oid": "18cd7767405fbbd5a9be1d5bced71eab7055f988"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzYxOTU4OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzoyODoyMlrOGOJZjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzoyODoyMlrOGOJZjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4NzI0Ng==", "bodyText": "userId.toString() not needed as it's already a String", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4020#discussion_r417487246", "createdAt": "2020-04-29T17:28:22Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "diffHunk": "@@ -360,52 +361,20 @@ public OIDCTokenResponse getAccessToken(String code, String verifiedClientId, St\n \t}\n \t\n \t@Override\n-\tpublic UserInfo getUserAuthorization(String oauthToken) {\n-\t\tJwt<JwsHeader,Claims> accessToken = null;\n-\t\ttry {\n-\t\t\taccessToken = oidcTokenHelper.parseJWT(oauthToken);\n-\t\t} catch (IllegalArgumentException e) {\n-\t\t\tthrow new UnauthenticatedException(\"Could not interpret access token.\", e);\n-\t\t}\n+\tpublic Object getUserInfo(String accessTokenParam, String oauthEndpoint) {\n+\t\tJwt<JwsHeader,Claims> accessToken = oidcTokenHelper.parseJWT(accessTokenParam);\n \t\tClaims accessTokenClaims = accessToken.getBody();\n \t\tString oauthClientId = accessTokenClaims.getAudience();\n-\t\t\n-\t\tif (oauthClientId == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Missing 'audience' value in the OAuth Access Token.\");\n-\t\t}\n \n-\t\tvalidateClientVerificationStatus(oauthClientId);\n-\t\t\n \t\tList<OAuthScope> scopes = ClaimsJsonUtil.getScopeFromClaims(accessTokenClaims);\n \t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = ClaimsJsonUtil.getOIDCClaimsFromClaimSet(accessTokenClaims);\n \n \t\tString ppid = accessTokenClaims.getSubject();\n \n \t\t// userId is used to retrieve the user info\n \t\tString userId = getUserIdFromPPID(ppid, oauthClientId);\n-\t\t// If the user belongs to the admin group they are an admin\n-\t\tSet<Long> groups = userManager.getUserGroups(Long.parseLong(userId));\n-\t\t\n-\t\t// Check to see if the user is an Admin\n-\t\tboolean isAdmin = groups.contains(AuthorizationConstants.BOOTSTRAP_PRINCIPAL.ADMINISTRATORS_GROUP.getPrincipalId());\n-\t\t// we don't let clients besides Synapse itself have admin access\n-\t\tboolean adminAccessAllowed = oauthClientId.equals(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\n-\t\tboolean hasAllScopes = scopes.containsAll(Arrays.asList(OAuthScope.values()));\n-\n-\t\tUserInfo result = new UserInfo(isAdmin && hasAllScopes && adminAccessAllowed);\n-\t\tresult.setId(Long.parseLong(userId));\n-\t\tresult.setGroups(groups);\n-\t\tresult.setOidcClaims(oidcClaims);\n-\t\tresult.setScopes(scopes);\n-\t\treturn result;\n-\t}\t\n-\t\n-\t@Override\n-\tpublic Object getUserInfo(UserInfo userAuthorization, String oauthClientId, String oauthEndpoint) {\n-\t\tLong userId = userAuthorization.getId();\n-\t\tDate authTime = authDao.getSessionValidatedOn(userId);\n \n-\t\tMap<OIDCClaimName,Object> userInfo = getUserInfo(userId.toString(), userAuthorization.getScopes(), userAuthorization.getOidcClaims());\n+\t\tMap<OIDCClaimName,Object> userInfo = getUserInfo(userId.toString(), scopes, oidcClaims);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18cd7767405fbbd5a9be1d5bced71eab7055f988"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzY3NDM5OnYy", "diffSide": "RIGHT", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/filter/JsonpCallbackFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzo0MzowMVrOGOJ8Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTo0MTo0OFrOGOSF4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NjE1MA==", "bodyText": "Double check with Jay that this does not break the web client", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4020#discussion_r417496150", "createdAt": "2020-04-29T17:43:01Z", "author": {"login": "marcomarasca"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/filter/JsonpCallbackFilter.java", "diffHunk": "@@ -47,6 +47,10 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n \t\t\tif(sessionToken != null){\r\n \t\t\t\tthrow new ServletException(\"JSONP callbacks are only allowed on public methods with no 'sessionToken'\");\r\n \t\t\t}\r\n+\t\t\tString accessToken = httpRequest.getHeader(AuthorizationConstants.AUTHORIZATION_HEADER_NAME);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18cd7767405fbbd5a9be1d5bced71eab7055f988"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyOTY2Ng==", "bodyText": "Per Jay, this feature is most likely no longer used and therefore the change is irrelevant.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4020#discussion_r417629666", "createdAt": "2020-04-29T21:41:48Z", "author": {"login": "brucehoff"}, "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/filter/JsonpCallbackFilter.java", "diffHunk": "@@ -47,6 +47,10 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n \t\t\tif(sessionToken != null){\r\n \t\t\t\tthrow new ServletException(\"JSONP callbacks are only allowed on public methods with no 'sessionToken'\");\r\n \t\t\t}\r\n+\t\t\tString accessToken = httpRequest.getHeader(AuthorizationConstants.AUTHORIZATION_HEADER_NAME);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NjE1MA=="}, "originalCommit": {"oid": "18cd7767405fbbd5a9be1d5bced71eab7055f988"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3006, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}