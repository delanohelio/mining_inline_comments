{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDI2MjAw", "number": 3929, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyNTo1MVrODdIicA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDozNDoxMlrODdeRkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODc1MTg0OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/StorageLocationUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyNTo1MVrOFlkArw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyNTo1MVrOFlkArw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMTYzMQ==", "bodyText": "add a direct test for this", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3929#discussion_r374931631", "createdAt": "2020-02-04T21:25:51Z", "author": {"login": "john-hill"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/StorageLocationUtils.java", "diffHunk": "@@ -47,6 +48,30 @@ public static String computeHash(final StorageLocationSetting setting) {\n \t\t} \n \t}\n \t\n+\tpublic static String sanitizeBaseKey(final String baseKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ae382a37d30f62c11d81ad4e91b28b7219e060"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODgyNjAzOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/ProjectSettingsManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo1MTo0OVrOFlku4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo1MTo0OVrOFlku4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MzQ1OQ==", "bodyText": "make all processors and use the order annotation to control dependencies.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3929#discussion_r374943459", "createdAt": "2020-02-04T21:51:49Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/ProjectSettingsManagerImpl.java", "diffHunk": "@@ -206,89 +181,38 @@ public void deleteProjectSetting(UserInfo userInfo, String id) throws DatastoreE\n \t}\n \n \t@Override\n-\tpublic <T extends StorageLocationSetting> T createStorageLocationSetting(UserInfo userInfo,\n-\t\t\tT storageLocationSetting) throws DatastoreException, NotFoundException, IOException {\n-\t\tif (storageLocationSetting instanceof ExternalS3StorageLocationSetting) {\n-\t\t\tExternalS3StorageLocationSetting externalS3StorageLocationSetting = (ExternalS3StorageLocationSetting) storageLocationSetting;\n-\t\t\t// A valid bucket name must also be a valid domain name\n-\t\t\tValidateArgument.requirement(InternetDomainName.isValid(externalS3StorageLocationSetting.getBucket()),\n-\t\t\t\t\t\"Invalid Bucket Name\");\n-\n-\t\t\texternalS3StorageLocationSetting.setUploadType(UploadType.S3);\n-\t\t\tvalidateS3BucketAccess(externalS3StorageLocationSetting);\n-\t\t\tvalidateS3BucketOwnership(externalS3StorageLocationSetting, getBucketOwnerAliases(userInfo.getId()));\n-\t\t} else if (storageLocationSetting instanceof ExternalGoogleCloudStorageLocationSetting) {\n-\t\t\tExternalGoogleCloudStorageLocationSetting externalGoogleCloudStorageLocationSetting = (ExternalGoogleCloudStorageLocationSetting) storageLocationSetting;\n-\t\t\t// A valid bucket name must also be a valid domain name\n-\t\t\tValidateArgument.requirement(\n-\t\t\t\t\tInternetDomainName.isValid(externalGoogleCloudStorageLocationSetting.getBucket()),\n-\t\t\t\t\t\"Invalid Bucket Name\");\n-\n-\t\t\texternalGoogleCloudStorageLocationSetting.setUploadType(UploadType.GOOGLECLOUDSTORAGE);\n-\t\t\tvalidateGoogleCloudBucketOwnership(externalGoogleCloudStorageLocationSetting, getBucketOwnerAliases(userInfo.getId()));\n-\t\t} else if (storageLocationSetting instanceof ExternalStorageLocationSetting) {\n-\t\t\tExternalStorageLocationSetting externalStorageLocationSetting = (ExternalStorageLocationSetting) storageLocationSetting;\n-\t\t\tValidateArgument.required(externalStorageLocationSetting.getUrl(), \"url\");\n-\t\t\tValidateArgument.validExternalUrl(externalStorageLocationSetting.getUrl());\n-\t\t} else if (storageLocationSetting instanceof ExternalObjectStorageLocationSetting) {\n-\t\t\tExternalObjectStorageLocationSetting externalObjectStorageLocationSetting = (ExternalObjectStorageLocationSetting) storageLocationSetting;\n-\n-\t\t\t// strip leading and trailing slashes and whitespace from the endpointUrl and bucket\n-\t\t\tString strippedEndpoint = StringUtils.strip(externalObjectStorageLocationSetting.getEndpointUrl(), \"/ \\t\");\n-\n-\t\t\t// validate url\n-\t\t\tValidateArgument.validExternalUrl(strippedEndpoint);\n-\t\t\t// A valid bucket name must also be a valid domain name\n-\t\t\tValidateArgument.requirement(InternetDomainName.isValid(externalObjectStorageLocationSetting.getBucket()),\n-\t\t\t\t\t\"Invalid Bucket Name\");\n-\n-\t\t\t// passed validation, set endpoint as the stripped version\n-\t\t\texternalObjectStorageLocationSetting.setEndpointUrl(strippedEndpoint);\n-\t\t} else if (storageLocationSetting instanceof ProxyStorageLocationSettings) {\n-\t\t\tProxyStorageLocationSettings proxySettings = (ProxyStorageLocationSettings) storageLocationSetting;\n-\t\t\tValidateArgument.required(proxySettings.getProxyUrl(), \"proxyUrl\");\n-\t\t\tValidateArgument.required(proxySettings.getSecretKey(), \"secretKey\");\n-\t\t\tif (proxySettings.getSecretKey().length() < MIN_SECRET_KEY_CHARS) {\n-\t\t\t\tthrow new IllegalArgumentException(\"SecretKey must be at least: \" + MIN_SECRET_KEY_CHARS\n-\t\t\t\t\t\t+ \" characters but was: \" + proxySettings.getSecretKey().length());\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\tURL proxyUrl = new URL(proxySettings.getProxyUrl());\n-\t\t\t\tif (!\"https\".equals(proxyUrl.getProtocol())) {\n-\t\t\t\t\tthrow new IllegalArgumentException(\"proxyUrl protocol must be be HTTPS\");\n-\t\t\t\t}\n-\t\t\t} catch (MalformedURLException e) {\n-\t\t\t\tthrow new IllegalArgumentException(\"proxyUrl is malformed: \" + e.getMessage());\n-\t\t\t}\n-\t\t} else if (storageLocationSetting instanceof S3StorageLocationSetting) {\n-\t\t\tS3StorageLocationSetting synapseS3StorageLocationSetting = (S3StorageLocationSetting) storageLocationSetting;\n-\t\t\tif (synapseS3StorageLocationSetting.getBaseKey() != null) {\n-\t\t\t\tthrow new IllegalArgumentException(\"Cannot specify baseKey when creating an S3StorageLocationSetting\");\n-\t\t\t}\n-\n-\t\t\tif (Boolean.TRUE.equals(synapseS3StorageLocationSetting.getStsEnabled())) {\n-\t\t\t\t// This is the S3 bucket we own, so we need to auto-generate the base key.\n-\t\t\t\tString baseKey = userInfo.getId() + \"/\" + UUID.randomUUID();\n-\t\t\t\tsynapseS3StorageLocationSetting.setBaseKey(baseKey);\n-\t\t\t}\n-\n-\t\t\tstorageLocationSetting.setUploadType(UploadType.S3);\n+\tpublic <T extends StorageLocationSetting> T createStorageLocationSetting(UserInfo userInfo, T storageLocationSetting)\n+\t\t\tthrows DatastoreException, NotFoundException {\n+\t\tValidateArgument.required(userInfo, \"The user\");\n+\t\tValidateArgument.required(storageLocationSetting, \"The storage location\");\n+\t\t\n+\t\tif (storageLocationSetting instanceof BaseKeyStorageLocationSetting) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ae382a37d30f62c11d81ad4e91b28b7219e060"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODgyNzM4OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/ProjectSettingsManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo1MjoxNlrOFlkvpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo1MjoxNlrOFlkvpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MzY1Mw==", "bodyText": "will become a processor.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3929#discussion_r374943653", "createdAt": "2020-02-04T21:52:16Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/ProjectSettingsManagerImpl.java", "diffHunk": "@@ -322,11 +245,25 @@ void validateProjectSetting(ProjectSetting setting, UserInfo currentUser) {\n \t\t\tValidateArgument.failRequirement(\"Cannot handle project setting of type \" + setting.getClass().getName());\n \t\t}\n \t}\n+\t\n+\tvoid sanitizeBaseKey(BaseKeyStorageLocationSetting storageLocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ae382a37d30f62c11d81ad4e91b28b7219e060"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODg3MzUyOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/storagelocation/BucketOwnerVerifierImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjowNzo0OVrOFllLWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjowNzo0OVrOFllLWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1MDc0Ng==", "bodyText": "duplicate", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3929#discussion_r374950746", "createdAt": "2020-02-04T22:07:49Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/storagelocation/BucketOwnerVerifierImpl.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.sagebionetworks.repo.manager.storagelocation;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.commons.lang3.StringUtils;\r\n+import org.sagebionetworks.repo.model.UserInfo;\r\n+import org.sagebionetworks.repo.model.principal.AliasType;\r\n+import org.sagebionetworks.repo.model.principal.PrincipalAlias;\r\n+import org.sagebionetworks.repo.model.principal.PrincipalAliasDAO;\r\n+import org.sagebionetworks.repo.model.project.BucketOwnerStorageLocationSetting;\r\n+import org.sagebionetworks.util.ValidateArgument;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+@Service\r\n+public class BucketOwnerVerifierImpl implements BucketOwnerVerifier {\r\n+\r\n+\tpublic static final String OWNER_MARKER = \"owner.txt\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ae382a37d30f62c11d81ad4e91b28b7219e060"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI0NzcxOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/storagelocation/BucketOwnerVerifierImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMTowMjowNlrOFlovhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMTowMjowNlrOFlovhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwOTE1OQ==", "bodyText": "stream must be closed with resource at the time it is created.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3929#discussion_r375009159", "createdAt": "2020-02-05T01:02:06Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/storagelocation/BucketOwnerVerifierImpl.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.sagebionetworks.repo.manager.storagelocation;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.commons.lang3.StringUtils;\r\n+import org.sagebionetworks.repo.model.UserInfo;\r\n+import org.sagebionetworks.repo.model.principal.AliasType;\r\n+import org.sagebionetworks.repo.model.principal.PrincipalAlias;\r\n+import org.sagebionetworks.repo.model.principal.PrincipalAliasDAO;\r\n+import org.sagebionetworks.repo.model.project.BucketOwnerStorageLocationSetting;\r\n+import org.sagebionetworks.util.ValidateArgument;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+@Service\r\n+public class BucketOwnerVerifierImpl implements BucketOwnerVerifier {\r\n+\r\n+\tpublic static final String OWNER_MARKER = \"owner.txt\";\r\n+\r\n+\tpublic static final String EXTERNAL_STORAGE_HELP = \"http://docs.synapse.org/articles/custom_storage_location.html for more information on how to create a new external upload destination.\";\r\n+\r\n+\tprivate static final String SECURITY_EXPLANATION = \"For security purposes, Synapse needs to establish that %s has permission to write to the bucket. Please create an object in bucket '%s' with key '%s' that contains the text '%s'. Also see \"\r\n+\t\t\t+ EXTERNAL_STORAGE_HELP;\r\n+\r\n+\t@Autowired\r\n+\tprivate PrincipalAliasDAO principalAliasDAO;\r\n+\r\n+\tprivate Map<Class<? extends BucketOwnerStorageLocationSetting>, BucketObjectReader> bucketObjectReaderMap;\r\n+\r\n+\t@Autowired\r\n+\tpublic void setBucketObjectReader(List<BucketObjectReader> readers) {\r\n+\t\tbucketObjectReaderMap = new HashMap<>(readers.size());\r\n+\t\treaders.forEach(reader -> {\r\n+\t\t\tbucketObjectReaderMap.put(reader.getSupportedStorageLocationType(), reader);\r\n+\t\t});\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void verifyBucketOwnership(UserInfo userInfo, BucketOwnerStorageLocationSetting storageLocation) {\r\n+\t\tValidateArgument.required(userInfo, \"The user\");\r\n+\t\tValidateArgument.required(storageLocation, \"The storage location\");\r\n+\t\tValidateArgument.required(storageLocation.getBucket(), \"The bucket\");\r\n+\r\n+\t\tBucketObjectReader reader = getObjectReader(storageLocation);\r\n+\r\n+\t\tString bucketName = storageLocation.getBucket();\r\n+\t\tString baseKey = storageLocation.getBaseKey();\r\n+\t\tString ownerKey = baseKey == null ? OWNER_MARKER : baseKey + \"/\" + OWNER_MARKER;\r\n+\r\n+\t\tList<PrincipalAlias> ownerAliases = getBucketOwnerAliases(userInfo.getId());\r\n+\r\n+\t\tInputStream stream;\r\n+\r\n+\t\ttry {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ae382a37d30f62c11d81ad4e91b28b7219e060"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI4MTQ0OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/storagelocation/objectreaders/GCBucketObjectReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyMjowNlrOFlpELQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyMjowNlrOFlpELQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDQ0NQ==", "bodyText": "return a stream or close on any type of failure.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3929#discussion_r375014445", "createdAt": "2020-02-05T01:22:06Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/storagelocation/objectreaders/GCBucketObjectReader.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.sagebionetworks.repo.manager.storagelocation.objectreaders;\r\n+\r\n+import java.io.InputStream;\r\n+import java.nio.channels.Channels;\r\n+\r\n+import org.sagebionetworks.googlecloud.SynapseGoogleCloudStorageClient;\r\n+import org.sagebionetworks.repo.manager.storagelocation.BucketObjectReader;\r\n+import org.sagebionetworks.repo.model.project.BucketOwnerStorageLocationSetting;\r\n+import org.sagebionetworks.repo.model.project.ExternalGoogleCloudStorageLocationSetting;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+import com.google.cloud.ReadChannel;\r\n+import com.google.cloud.storage.Blob;\r\n+import com.google.cloud.storage.StorageException;\r\n+\r\n+@Service\r\n+public class GCBucketObjectReader implements BucketObjectReader {\r\n+\r\n+\t@Autowired\r\n+\tprivate SynapseGoogleCloudStorageClient googleCloudStorageClient;\r\n+\r\n+\t@Override\r\n+\tpublic Class<? extends BucketOwnerStorageLocationSetting> getSupportedStorageLocationType() {\r\n+\t\treturn ExternalGoogleCloudStorageLocationSetting.class;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void verifyBucketAccess(String bucketName) {\r\n+\t\ttry {\r\n+\t\t\tif (!googleCloudStorageClient.bucketExists(bucketName)) {\r\n+\t\t\t\tthrow new IllegalArgumentException(\"Did not find Google Cloud bucket \" + bucketName);\r\n+\t\t\t}\r\n+\t\t} catch (StorageException e) {\r\n+\t\t\tthrow new IllegalArgumentException(\"Synapse does not have access to the Google Cloud bucket \" + bucketName, e);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic InputStream openStream(String bucketName, String key) {\r\n+\t\tReadChannel readChannel;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ae382a37d30f62c11d81ad4e91b28b7219e060"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI4MjAyOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/storagelocation/objectreaders/S3BucketObjectReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyMjozMlrOFlpEiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyMjozMlrOFlpEiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDUzOQ==", "bodyText": "same as google", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3929#discussion_r375014539", "createdAt": "2020-02-05T01:22:32Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/storagelocation/objectreaders/S3BucketObjectReader.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.sagebionetworks.repo.manager.storagelocation.objectreaders;\r\n+\r\n+import java.io.InputStream;\r\n+\r\n+import org.sagebionetworks.aws.SynapseS3Client;\r\n+import org.sagebionetworks.repo.manager.storagelocation.BucketObjectReader;\r\n+import org.sagebionetworks.repo.model.project.BucketOwnerStorageLocationSetting;\r\n+import org.sagebionetworks.repo.model.project.ExternalS3StorageLocationSetting;\r\n+import org.sagebionetworks.util.AmazonErrorCodes;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+import com.amazonaws.AmazonServiceException;\r\n+import com.amazonaws.services.s3.model.S3Object;\r\n+\r\n+@Service\r\n+public class S3BucketObjectReader implements BucketObjectReader {\r\n+\r\n+\t@Autowired\r\n+\tprivate SynapseS3Client s3client;\r\n+\r\n+\t@Override\r\n+\tpublic Class<? extends BucketOwnerStorageLocationSetting> getSupportedStorageLocationType() {\r\n+\t\treturn ExternalS3StorageLocationSetting.class;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void verifyBucketAccess(String bucketName) {\r\n+\t\ts3client.getRegionForBucket(bucketName);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic InputStream openStream(String bucketName, String key) {\r\n+\t\tS3Object s3object;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ae382a37d30f62c11d81ad4e91b28b7219e060"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTM0NjUzOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/storagelocation/processors/ExternalGCStorageLocationProcessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjowMzoyMlrOFlpsAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjowMzoyMlrOFlpsAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNDY0MQ==", "bodyText": "test for negative", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3929#discussion_r375024641", "createdAt": "2020-02-05T02:03:22Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/storagelocation/processors/ExternalGCStorageLocationProcessorTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.sagebionetworks.repo.manager.storagelocation.processors;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n+import static org.mockito.Mockito.verify;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.jupiter.api.extension.ExtendWith;\r\n+import org.mockito.InjectMocks;\r\n+import org.mockito.Mock;\r\n+import org.mockito.junit.jupiter.MockitoExtension;\r\n+import org.sagebionetworks.repo.model.UserInfo;\r\n+import org.sagebionetworks.repo.model.file.UploadType;\r\n+import org.sagebionetworks.repo.model.project.ExternalGoogleCloudStorageLocationSetting;\r\n+\r\n+@ExtendWith(MockitoExtension.class)\r\n+public class ExternalGCStorageLocationProcessorTest {\r\n+\r\n+\t@InjectMocks\r\n+\tprivate ExternalGoogleCloudStorageLocationProcessor processor;\r\n+\r\n+\t@Mock\r\n+\tprivate ExternalGoogleCloudStorageLocationSetting mockStorageLocation;\r\n+\r\n+\t@Mock\r\n+\tprivate UserInfo mockUserInfo;\r\n+\r\n+\t@Test\r\n+\tpublic void testSupports() {\r\n+\t\tassertTrue(processor.supports(mockStorageLocation.getClass()));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ae382a37d30f62c11d81ad4e91b28b7219e060"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjMxMzEyOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/storagelocation/objectreaders/GCBucketObjectReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDozNDoxMlrOFmGRnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDozNDoxMlrOFmGRnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5MzAyMQ==", "bodyText": "Synapse could not access bucket append google message", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3929#discussion_r375493021", "createdAt": "2020-02-05T20:34:12Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/storagelocation/objectreaders/GCBucketObjectReader.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.sagebionetworks.repo.manager.storagelocation.objectreaders;\r\n+\r\n+import java.io.InputStream;\r\n+import java.nio.channels.Channels;\r\n+\r\n+import org.sagebionetworks.googlecloud.SynapseGoogleCloudStorageClient;\r\n+import org.sagebionetworks.repo.manager.storagelocation.BucketObjectReader;\r\n+import org.sagebionetworks.repo.model.project.BucketOwnerStorageLocationSetting;\r\n+import org.sagebionetworks.repo.model.project.ExternalGoogleCloudStorageLocationSetting;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+import com.google.cloud.ReadChannel;\r\n+import com.google.cloud.storage.Blob;\r\n+import com.google.cloud.storage.StorageException;\r\n+\r\n+@Service\r\n+public class GCBucketObjectReader implements BucketObjectReader {\r\n+\r\n+\t@Autowired\r\n+\tprivate SynapseGoogleCloudStorageClient googleCloudStorageClient;\r\n+\r\n+\t@Override\r\n+\tpublic Class<? extends BucketOwnerStorageLocationSetting> getSupportedStorageLocationType() {\r\n+\t\treturn ExternalGoogleCloudStorageLocationSetting.class;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void verifyBucketAccess(String bucketName) {\r\n+\t\ttry {\r\n+\t\t\tif (!googleCloudStorageClient.bucketExists(bucketName)) {\r\n+\t\t\t\tthrow new IllegalArgumentException(\"Did not find Google Cloud bucket \" + bucketName);\r\n+\t\t\t}\r\n+\t\t} catch (StorageException e) {\r\n+\t\t\tthrow new IllegalArgumentException(\"Synapse does not have access to the Google Cloud bucket \" + bucketName, e);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06b3b8229918f884fe014820cb3a071f663da387"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3109, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}