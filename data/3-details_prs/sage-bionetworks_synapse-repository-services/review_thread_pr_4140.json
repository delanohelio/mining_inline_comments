{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5Nzg3NDQ3", "number": 4140, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDo1NDoxMVrOEO7Bgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo0ODowM1rOEPWwUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDgyNTYyOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOAccessApprovalDAOImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDo1NDoxMVrOGyWSyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDo1NDoxMVrOGyWSyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ0NzI0MA==", "bodyText": "@transaction", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4140#discussion_r455447240", "createdAt": "2020-07-16T00:54:11Z", "author": {"login": "john-hill"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOAccessApprovalDAOImpl.java", "diffHunk": "@@ -387,11 +406,62 @@ public static String buildAccessorGroupQuery(String accessRequirementId, String\n \t@Override\n \tpublic Set<String> getRequirementsUserHasApprovals(String userId, List<String> accessRequirementIds) {\n \t\tif (accessRequirementIds.isEmpty()) {\n-\t\t\treturn new HashSet<String>();\n+\t\t\treturn Collections.emptySet();\n \t\t}\n \t\tMapSqlParameterSource params = new MapSqlParameterSource();\n \t\tparams.addValue(COL_ACCESS_APPROVAL_REQUIREMENT_ID, accessRequirementIds);\n \t\tparams.addValue(COL_ACCESS_APPROVAL_ACCESSOR_ID, userId);\n \t\treturn Sets.newHashSet(namedJdbcTemplate.queryForList(SELECT_REQUIREMENTS_WITH_APPROVAL, params, String.class));\n \t}\n+\t\n+\t@Override\n+\tpublic List<Long> listExpiredApprovals(Instant expiredAfter, int limit) {\n+\t\tValidateArgument.required(expiredAfter, \"expiredAfter\");\n+\t\tValidateArgument.requirement(limit > 0, \"The limit must be greater than 0.\");\n+\t\t\n+\t\treturn jdbcTemplate.queryForList(SELECT_EXPIRED_APPROVALS, Long.class,\n+\t\t\t\texpiredAfter.toEpochMilli(), \n+\t\t\t\tInstant.now().toEpochMilli(),\n+\t\t\t\tlimit);\n+\t}\n+\t\n+\t@Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5747435a433b53a6b0179bd9d4551f19abd19ed"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTMxNzA1OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/DBOAccessApprovalDAOImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDoyMDozOFrOGzBI4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDoyMDozOFrOGzBI4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE0OTIxOQ==", "bodyText": "check etag changed.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4140#discussion_r456149219", "createdAt": "2020-07-17T00:20:38Z", "author": {"login": "john-hill"}, "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/DBOAccessApprovalDAOImplTest.java", "diffHunk": "@@ -408,4 +380,458 @@ public void testBuildQuery() {\n \t\t\t\t+ \" OFFSET :OFFSET\",\n \t\t\t\tDBOAccessApprovalDAOImpl.buildAccessorGroupQuery(null, null, new Date()));\n \t}\n+\t\n+\t@Test\n+\tpublic void testListExpiredApprovalsWithNoExpiredAfter() {\n+\t\t\n+\t\tInstant expiredAfter = null;\n+\t\tint limit = 10;\n+\t\t\n+\t\tString message = assertThrows(IllegalArgumentException.class, () -> {\t\t\t\n+\t\t\t// Call under test\n+\t\t\taccessApprovalDAO.listExpiredApprovals(expiredAfter, limit);\n+\t\t}).getMessage();\n+\t\t\n+\t\tassertEquals(\"expiredAfter is required.\", message);\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testListExpiredApprovalsWithWrongLimit() {\n+\t\t\n+\t\tInstant expiredAfter = Instant.now();\n+\t\t\n+\t\tString message = assertThrows(IllegalArgumentException.class, () -> {\t\t\t\n+\t\t\t// Call under test\n+\t\t\taccessApprovalDAO.listExpiredApprovals(expiredAfter, 0);\n+\t\t}).getMessage();\n+\t\t\n+\t\tassertEquals(\"The limit must be greater than 0.\", message);\n+\t\t\n+\t\tmessage = assertThrows(IllegalArgumentException.class, () -> {\t\t\t\n+\t\t\t// Call under test\n+\t\t\taccessApprovalDAO.listExpiredApprovals(expiredAfter, -1);\n+\t\t}).getMessage();\n+\t\t\n+\t\tassertEquals(\"The limit must be greater than 0.\", message);\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testListExpiredApprovals() {\n+\t\t\n+\t\taccessApproval = newAccessApproval(individualGroup, accessRequirement);\n+\t\taccessApproval2 = newAccessApproval(individualGroup2, accessRequirement);\n+\t\t\n+\t\t// Expire one approval\n+\t\tInstant yesterday = Instant.now().minus(1, ChronoUnit.DAYS);\n+\t\t\n+\t\taccessApproval.setExpiredOn(Date.from(yesterday));\n+\t\t\n+\t\taccessApproval = accessApprovalDAO.create(accessApproval);\n+\t\taccessApproval2 = accessApprovalDAO.create(accessApproval2);\n+\t\t\n+\t\tList<Long> expected = Arrays.asList(accessApproval.getId());\n+\t\t\n+\t\tint limit = 10;\n+\t\t\n+\t\t// Call under test\n+\t\tList<Long> result = accessApprovalDAO.listExpiredApprovals(yesterday, limit);\n+\t\t\n+\t\tassertEquals(expected, result);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testListExpiredApprovalsWithLimit() {\n+\t\t\n+\t\taccessApproval = newAccessApproval(individualGroup, accessRequirement);\n+\t\taccessApproval2 = newAccessApproval(individualGroup2, accessRequirement);\n+\t\t\n+\t\t// Expire one approval\n+\t\tInstant yesterday = Instant.now().minus(1, ChronoUnit.DAYS);\n+\t\t\n+\t\taccessApproval.setExpiredOn(Date.from(yesterday));\n+\t\taccessApproval2.setExpiredOn(Date.from(yesterday));\n+\t\t\n+\t\taccessApproval = accessApprovalDAO.create(accessApproval);\n+\t\taccessApproval2 = accessApprovalDAO.create(accessApproval2);\n+\t\t\n+\t\tList<Long> expected = Arrays.asList(accessApproval.getId());\n+\t\t\n+\t\tint limit = 1;\n+\t\t\n+\t\t// Call under test\n+\t\tList<Long> result = accessApprovalDAO.listExpiredApprovals(yesterday, limit);\n+\t\t\n+\t\tassertEquals(expected, result);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testListExpiredApprovalsWithNoExpiration() {\n+\t\t\n+\t\taccessApproval = newAccessApproval(individualGroup, accessRequirement);\n+\t\taccessApproval2 = newAccessApproval(individualGroup2, accessRequirement);\n+\t\t\n+\t\taccessApproval = accessApprovalDAO.create(accessApproval);\n+\t\taccessApproval2 = accessApprovalDAO.create(accessApproval2);\n+\t\t\t\t\n+\t\tList<Long> expected = Collections.emptyList();\n+\t\t\n+\t\tInstant yesterday = Instant.now().minus(1, ChronoUnit.DAYS);\n+\n+\t\tint limit = 10;\n+\t\t\n+\t\t// Call under test\n+\t\tList<Long> result = accessApprovalDAO.listExpiredApprovals(yesterday, limit);\n+\t\t\n+\t\tassertEquals(expected, result);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testListExpiredApprovalsWithPastExpiration() {\n+\t\t\n+\t\taccessApproval = newAccessApproval(individualGroup, accessRequirement);\n+\t\taccessApproval2 = newAccessApproval(individualGroup2, accessRequirement);\n+\t\t\n+\t\tInstant dayBeforeYesterday = Instant.now().minus(2, ChronoUnit.DAYS);\n+\t\t\n+\t\taccessApproval.setExpiredOn(Date.from(dayBeforeYesterday));\n+\t\t\n+\t\taccessApproval = accessApprovalDAO.create(accessApproval);\n+\t\taccessApproval2 = accessApprovalDAO.create(accessApproval2);\n+\t\t\t\t\n+\t\tList<Long> expected = Collections.emptyList();\n+\t\t\n+\t\tint limit = 10;\n+\t\t\n+\t\tInstant yesterday = Instant.now().minus(1, ChronoUnit.DAYS);\n+\t\t\n+\t\t// Call under test\n+\t\tList<Long> result = accessApprovalDAO.listExpiredApprovals(yesterday, limit);\n+\t\t\n+\t\tassertEquals(expected, result);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testListExpiredApprovalsWithAlreadyRevoked() {\n+\t\t\n+\t\taccessApproval = newAccessApproval(individualGroup, accessRequirement);\n+\t\taccessApproval2 = newAccessApproval(individualGroup2, accessRequirement);\n+\t\t\n+\t\tInstant yesterday = Instant.now().minus(1, ChronoUnit.DAYS);\n+\t\t\n+\t\taccessApproval.setExpiredOn(Date.from(yesterday));\n+\t\t\n+\t\taccessApproval2.setExpiredOn(Date.from(yesterday));\n+\t\taccessApproval2.setState(ApprovalState.REVOKED);\n+\t\t\n+\t\taccessApproval = accessApprovalDAO.create(accessApproval);\n+\t\taccessApproval2 = accessApprovalDAO.create(accessApproval2);\n+\t\t\t\t\n+\t\tList<Long> expected = Arrays.asList(accessApproval.getId());\n+\t\t\n+\t\tint limit = 10;\n+\t\t\n+\t\t// Call under test\n+\t\tList<Long> result = accessApprovalDAO.listExpiredApprovals(yesterday, limit);\n+\t\t\n+\t\tassertEquals(expected, result);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testRevokeBatch() {\n+\t\t\n+\t\taccessApproval = newAccessApproval(individualGroup, accessRequirement);\n+\t\taccessApproval2 = newAccessApproval(individualGroup2, accessRequirement);\n+\t\t\n+\t\taccessApproval = accessApprovalDAO.create(accessApproval);\n+\t\taccessApproval2 = accessApprovalDAO.create(accessApproval2);\n+\t\t\n+\t\tLong userId = Long.valueOf(individualGroup.getId());\n+\t\tList<Long> ids = Arrays.asList(accessApproval.getId(), accessApproval2.getId());\n+\t\t\n+\t\tList<Long> expected = ids;\n+\t\t\n+\t\t// Call under test\n+\t\tList<Long> result = accessApprovalDAO.revokeBatch(userId, ids);\n+\t\t\n+\t\tassertEquals(expected, result);\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95629a003b6ea7d4f6dec7ad584596359aeee7"}, "originalPosition": 357}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTMyOTI5OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/dataaccess/AccessApprovalManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDoyNzoyMFrOGzBQHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDoyNzoyMFrOGzBQHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1MTA3MA==", "bodyText": "check for admin", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4140#discussion_r456151070", "createdAt": "2020-07-17T00:27:20Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/dataaccess/AccessApprovalManagerImpl.java", "diffHunk": "@@ -172,4 +212,63 @@ public BatchAccessApprovalInfoResponse getAccessApprovalInfo(UserInfo userInfo,\n \t\t}\n \t\treturn response;\n \t}\n+\t\n+\t@Override\n+\t@WriteTransaction\n+\tpublic void revokeGroup(UserInfo userInfo, String accessRequirementId, String submitterId, List<String> accessorIds) {\n+\t\tValidateArgument.required(userInfo, \"The user\");\n+\t\tValidateArgument.required(accessRequirementId, \"The access requirement id\");\n+\t\tValidateArgument.required(submitterId, \"The submitter id\");\n+\t\tValidateArgument.required(accessorIds, \"The list of accessor ids\");\n+\t\t\n+\t\tif (!authorizationManager.isACTTeamMemberOrAdmin(userInfo)) {\n+\t\t\tthrow new UnauthorizedException(\"Only ACT member can perform this action.\");\n+\t\t}\n+\t\t\n+\t\tif (accessorIds.isEmpty()) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tfinal List<Long> approvals = accessApprovalDAO.listApprovalsBySubmitter(accessRequirementId, submitterId, accessorIds);\n+\t\tfinal List<Long> revokedApprovals = accessApprovalDAO.revokeBatch(userInfo.getId(), approvals);\n+\t\t\n+\t\tsendUpdateChange(userInfo, revokedApprovals);\n+\t};\n+\t\n+\t@Override\n+\t@WriteTransaction\n+\tpublic int revokeExpiredApprovals(UserInfo userInfo, Instant expiredAfter, int maxBatchSize) {\n+\t\tValidateArgument.required(userInfo, \"The user\");\n+\t\tValidateArgument.required(expiredAfter, \"The expiredAfter\");\n+\t\tValidateArgument.requirement(maxBatchSize > 0, \"The maxBatchSize must be greater than 0.\");\n+\t\tValidateArgument.requirement(expiredAfter.isBefore(Instant.now()), \"The expiredAfter must be a value in the past.\");\n+\t\n+\t\t// Fetch the list of expired approval", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95629a003b6ea7d4f6dec7ad584596359aeee7"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTMzMTIyOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/dataaccess/AccessApprovalManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDoyODoxMFrOGzBRJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDoyODoxMFrOGzBRJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1MTMzNA==", "bodyText": "empty check on approvals", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4140#discussion_r456151334", "createdAt": "2020-07-17T00:28:10Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/dataaccess/AccessApprovalManagerImpl.java", "diffHunk": "@@ -172,4 +212,63 @@ public BatchAccessApprovalInfoResponse getAccessApprovalInfo(UserInfo userInfo,\n \t\t}\n \t\treturn response;\n \t}\n+\t\n+\t@Override\n+\t@WriteTransaction\n+\tpublic void revokeGroup(UserInfo userInfo, String accessRequirementId, String submitterId, List<String> accessorIds) {\n+\t\tValidateArgument.required(userInfo, \"The user\");\n+\t\tValidateArgument.required(accessRequirementId, \"The access requirement id\");\n+\t\tValidateArgument.required(submitterId, \"The submitter id\");\n+\t\tValidateArgument.required(accessorIds, \"The list of accessor ids\");\n+\t\t\n+\t\tif (!authorizationManager.isACTTeamMemberOrAdmin(userInfo)) {\n+\t\t\tthrow new UnauthorizedException(\"Only ACT member can perform this action.\");\n+\t\t}\n+\t\t\n+\t\tif (accessorIds.isEmpty()) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tfinal List<Long> approvals = accessApprovalDAO.listApprovalsBySubmitter(accessRequirementId, submitterId, accessorIds);\n+\t\tfinal List<Long> revokedApprovals = accessApprovalDAO.revokeBatch(userInfo.getId(), approvals);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95629a003b6ea7d4f6dec7ad584596359aeee7"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTMzODE0OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/dataaccess/AccessApprovalManagerImplUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDozMTo0NFrOGzBVGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDozMTo0NFrOGzBVGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1MjM0NQ==", "bodyText": "verify isACT", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4140#discussion_r456152345", "createdAt": "2020-07-17T00:31:44Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/dataaccess/AccessApprovalManagerImplUnitTest.java", "diffHunk": "@@ -352,4 +457,268 @@ public void testGetAccessApprovalInfo() {\n \t\tassertTrue(response.getResults().contains(info1));\n \t\tassertTrue(response.getResults().contains(info2));\n \t}\n+\t\n+\t@Test\n+\tpublic void testRevokeExpiredApprovalsWithNoUser() {\n+\t\tUserInfo user = null;\n+\t\tInstant expiredAfter = Instant.now().minus(1, ChronoUnit.DAYS);\n+\t\tint maxBatchSize = 10;\n+\t\t\n+\t\tString message = assertThrows(IllegalArgumentException.class, () -> {\n+\t\t\t// Call under test\n+\t\t\tmanager.revokeExpiredApprovals(user, expiredAfter, maxBatchSize);\n+\t\t}).getMessage();\n+\t\t\n+\t\tassertEquals(\"The user is required.\", message);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testRevokeExpiredApprovalsWithNoExpireAfter() {\n+\t\tUserInfo user = userInfo;\n+\t\tInstant expiredAfter = null;\n+\t\tint maxBatchSize = 10;\n+\t\t\n+\t\tString message = assertThrows(IllegalArgumentException.class, () -> {\n+\t\t\t// Call under test\n+\t\t\tmanager.revokeExpiredApprovals(user, expiredAfter, maxBatchSize);\n+\t\t}).getMessage();\n+\t\n+\t\tassertEquals(\"The expiredAfter is required.\", message);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testRevokeExpiredApprovalsWithFutureExpireAfter() {\n+\t\tUserInfo user = userInfo;\n+\t\tInstant expiredAfter = Instant.now().plus(1, ChronoUnit.DAYS);\n+\t\tint maxBatchSize = 10;\n+\t\t\n+\t\tString message = assertThrows(IllegalArgumentException.class, () -> {\n+\t\t\t// Call under test\n+\t\t\tmanager.revokeExpiredApprovals(user, expiredAfter, maxBatchSize);\n+\t\t}).getMessage();\n+\t\t\n+\t\tassertEquals(\"The expiredAfter must be a value in the past.\", message);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testRevokeExpiredApprovalsWithZeroBatchSize() {\n+\t\tUserInfo user = userInfo;\n+\t\tInstant expiredAfter = Instant.now().minus(1, ChronoUnit.DAYS);\n+\t\tint maxBatchSize = 0;\n+\t\t\n+\t\tString message = assertThrows(IllegalArgumentException.class, () -> {\n+\t\t\t// Call under test\n+\t\t\tmanager.revokeExpiredApprovals(user, expiredAfter, maxBatchSize);\n+\t\t}).getMessage();\n+\t\t\n+\t\tassertEquals(\"The maxBatchSize must be greater than 0.\", message);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testRevokeExpiredApprovalsWithNegativeBatchSize() {\n+\t\tUserInfo user = userInfo;\n+\t\tInstant expiredAfter = Instant.now().minus(1, ChronoUnit.DAYS);\n+\t\tint maxBatchSize = -1;\n+\t\t\n+\t\tString message = assertThrows(IllegalArgumentException.class, () -> {\n+\t\t\t// Call under test\n+\t\t\tmanager.revokeExpiredApprovals(user, expiredAfter, maxBatchSize);\n+\t\t}).getMessage();\n+\t\t\n+\t\tassertEquals(\"The maxBatchSize must be greater than 0.\", message);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testRevokeExpiredApprovals() {\n+\n+\t\tList<Long> expiredApprovals = Arrays.asList(1L, 2L);\n+\t\tList<Long> revokedApprovals = Arrays.asList(2L);\n+\n+\t\twhen(mockAccessApprovalDAO.listExpiredApprovals(any(), anyInt())).thenReturn(expiredApprovals);\n+\t\twhen(mockAccessApprovalDAO.revokeBatch(any(), any())).thenReturn(revokedApprovals);\n+\t\t\n+\t\tUserInfo user = userInfo;\n+\t\tInstant expiredAfter = Instant.now().minus(1, ChronoUnit.DAYS);\n+\t\tint maxBatchSize = 10;\n+\t\t\n+\t\t// Call under test\n+\t\tint result = manager.revokeExpiredApprovals(user, expiredAfter, maxBatchSize);\n+\t\t\n+\t\tassertEquals(1, result);\n+\t\tverify(mockAccessApprovalDAO).listExpiredApprovals(expiredAfter, maxBatchSize);\n+\t\tverify(mockAccessApprovalDAO).revokeBatch(user.getId(), expiredApprovals);\n+\t\t\n+\t\tArgumentCaptor<MessageToSend> messageCaptor = ArgumentCaptor.forClass(MessageToSend.class);\n+\t\t\n+\t\tverify(mockTransactionMessenger).sendMessageAfterCommit(messageCaptor.capture());\n+\t\t\n+\t\tList<MessageToSend> sentMessages = messageCaptor.getAllValues();\n+\t\t\n+\t\t// Despite 2 initial expired approvals, only one message was sent as only one was revoked\n+\t\tassertEquals(1, sentMessages.size());\n+\t\t\n+\t\tMessageToSend message = sentMessages.get(0);\n+\t\t\n+\t\tassertEquals(user.getId(), message.getUserId());\n+\t\tassertEquals(ObjectType.ACCESS_APPROVAL, message.getObjectType());\n+\t\tassertEquals(revokedApprovals.get(0).toString(), message.getObjectId());\n+\t\tassertEquals(ChangeType.UPDATE, message.getChangeType());\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testRevokeExpiredApprovalsWithNoExpiredApprovals() {\n+\n+\t\tList<Long> expiredApprovals = Collections.emptyList();\n+\n+\t\twhen(mockAccessApprovalDAO.listExpiredApprovals(any(), anyInt())).thenReturn(expiredApprovals);\n+\t\t\n+\t\tUserInfo user = userInfo;\n+\t\tInstant expiredAfter = Instant.now().minus(1, ChronoUnit.DAYS);\n+\t\tint maxBatchSize = 10;\n+\t\t\n+\t\t// Call under test\n+\t\tint result = manager.revokeExpiredApprovals(user, expiredAfter, maxBatchSize);\n+\t\t\n+\t\tassertEquals(0, result);\n+\t\tverify(mockAccessApprovalDAO).listExpiredApprovals(expiredAfter, maxBatchSize);\n+\t\tverifyNoMoreInteractions(mockAccessApprovalDAO);\n+\t\tverifyZeroInteractions(mockTransactionMessenger);\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testRevokeExpiredApprovalsWithNoRevokedApprovals() {\n+\n+\t\tList<Long> expiredApprovals = Arrays.asList(1L, 2L);\n+\t\tList<Long> revokedApprovals = Collections.emptyList();\n+\n+\t\twhen(mockAccessApprovalDAO.listExpiredApprovals(any(), anyInt())).thenReturn(expiredApprovals);\n+\t\twhen(mockAccessApprovalDAO.revokeBatch(any(), any())).thenReturn(revokedApprovals);\n+\t\t\n+\t\tUserInfo user = userInfo;\n+\t\tInstant expiredAfter = Instant.now().minus(1, ChronoUnit.DAYS);\n+\t\tint maxBatchSize = 10;\n+\t\t\n+\t\t// Call under test\n+\t\tint result = manager.revokeExpiredApprovals(user, expiredAfter, maxBatchSize);\n+\t\t\n+\t\tassertEquals(0, result);\n+\t\tverify(mockAccessApprovalDAO).listExpiredApprovals(expiredAfter, maxBatchSize);\n+\t\tverify(mockAccessApprovalDAO).revokeBatch(user.getId(), expiredApprovals);\n+\t\tverifyNoMoreInteractions(mockAccessApprovalDAO);\n+\t\tverifyZeroInteractions(mockTransactionMessenger);\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testRevokeGroupAccessorsAuthorized() {\n+\t\tList<Long> approvals = Arrays.asList(1L, 2L);\n+\t\t\n+\t\twhen(mockAuthorizationManager.isACTTeamMemberOrAdmin(userInfo)).thenReturn(true);\n+\t\twhen(mockAccessApprovalDAO.listApprovalsBySubmitter(any(), any(), any())).thenReturn(approvals);\n+\t\twhen(mockAccessApprovalDAO.revokeBatch(any(), any())).thenReturn(approvals);\n+\t\t\n+\t\tString accessRequirementId = \"2\";\n+\t\tString submitterId = \"1\";\n+\t\tList<String> accessorIds = Arrays.asList(\"1\", \"2\");\n+\t\t\n+\t\t// Call under test\n+\t\tmanager.revokeGroup(userInfo, accessRequirementId, submitterId, accessorIds);\n+\t\t\n+\t\tverify(mockAccessApprovalDAO).listApprovalsBySubmitter(accessRequirementId, submitterId, accessorIds);\n+\t\tverify(mockAccessApprovalDAO).revokeBatch(userInfo.getId(), approvals);\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95629a003b6ea7d4f6dec7ad584596359aeee7"}, "originalPosition": 650}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTM1OTEwOnYy", "diffSide": "RIGHT", "path": "services/workers/src/test/java/org/sagebionetworks/dataaccess/workers/AccessApprovalExpirationWorkerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo0Mjo1MlrOGzBg2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo0Mjo1MlrOGzBg2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1NTM1Mg==", "bodyText": "will move to manager integration test, and for the worker just a simple did something get revoked.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4140#discussion_r456155352", "createdAt": "2020-07-17T00:42:52Z", "author": {"login": "john-hill"}, "path": "services/workers/src/test/java/org/sagebionetworks/dataaccess/workers/AccessApprovalExpirationWorkerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.sagebionetworks.dataaccess.workers;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.assertEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\r\n+\r\n+import java.time.Instant;\r\n+import java.time.temporal.ChronoUnit;\r\n+import java.util.ArrayList;\r\n+import java.util.Date;\r\n+import java.util.List;\r\n+\r\n+import org.junit.jupiter.api.AfterEach;\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.jupiter.api.extension.ExtendWith;\r\n+import org.sagebionetworks.repo.manager.UserManager;\r\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\r\n+import org.sagebionetworks.repo.model.AccessApproval;\r\n+import org.sagebionetworks.repo.model.AccessApprovalDAO;\r\n+import org.sagebionetworks.repo.model.AccessRequirement;\r\n+import org.sagebionetworks.repo.model.AccessRequirementDAO;\r\n+import org.sagebionetworks.repo.model.ApprovalState;\r\n+import org.sagebionetworks.repo.model.AuthorizationConstants.BOOTSTRAP_PRINCIPAL;\r\n+import org.sagebionetworks.repo.model.ManagedACTAccessRequirement;\r\n+import org.sagebionetworks.repo.model.UserInfo;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.test.context.ActiveProfiles;\r\n+import org.springframework.test.context.ContextConfiguration;\r\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\r\n+\r\n+@ExtendWith(SpringExtension.class)\r\n+@ContextConfiguration(locations = {\"classpath:test-context.xml\"})\r\n+@ActiveProfiles(\"test-dataaccess-worker\")\r\n+public class AccessApprovalExpirationWorkerIntegrationTest {\r\n+\t\r\n+\t@Autowired\r\n+\tprivate UserManager userManager;\r\n+\t\r\n+\t@Autowired\r\n+\tprivate AccessRequirementDAO accessRequirementDao;\r\n+\t\r\n+\t@Autowired\r\n+\tprivate AccessApprovalDAO accessApprovalDao;\r\n+\t\r\n+\t@Autowired\r\n+\tprivate AccessApprovalExpirationWorker worker;\r\n+\t\r\n+\tprivate UserInfo user;\r\n+\tprivate List<Long> accessRequirements;\r\n+\tprivate List<Long> accessApprovals;\r\n+\t\r\n+\t@BeforeEach\r\n+\tpublic void before() {\r\n+\t\tuser = userManager.getUserInfo(BOOTSTRAP_PRINCIPAL.THE_ADMIN_USER.getPrincipalId());\r\n+\t\taccessRequirements = new ArrayList<>();\r\n+\t\taccessApprovals = new ArrayList<>();\r\n+\t}\r\n+\t\r\n+\t@AfterEach\r\n+\tpublic void after() {\r\n+\t\tfor (Long id : accessRequirements) {\r\n+\t\t\taccessRequirementDao.delete(id.toString());\r\n+\t\t}\r\n+\t\tfor (Long id : accessApprovals) {\r\n+\t\t\taccessApprovalDao.delete(id.toString());\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testRun() throws Exception {\r\n+\t\t// Approved and not expiring\r\n+\t\tAccessApproval ap1 = newApproval(newAccessRequirement(), ApprovalState.APPROVED, null);\r\n+\t\t// Already revoked and expired\r\n+\t\tAccessApproval ap2 = newApproval(newAccessRequirement(), ApprovalState.REVOKED, Instant.now().minus(1, ChronoUnit.DAYS));\r\n+\t\t// APPROVED by expired\r\n+\t\tAccessApproval ap3 = newApproval(newAccessRequirement(), ApprovalState.APPROVED, Instant.now().minus(1, ChronoUnit.DAYS));\r\n+\t\t// Already revoked and not expiring\r\n+\t\tAccessApproval ap4 = newApproval(newAccessRequirement(), ApprovalState.REVOKED, null);\r\n+\t\t// Approved and expiring in the future\r\n+\t\tAccessApproval ap5 = newApproval(newAccessRequirement(), ApprovalState.APPROVED, Instant.now().plus(1, ChronoUnit.DAYS));\r\n+\t\t\r\n+\t\t// Simulates the run\r\n+\t\tworker.run(null);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95629a003b6ea7d4f6dec7ad584596359aeee7"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTM2OTEzOnYy", "diffSide": "RIGHT", "path": "services/workers/src/main/resources/dataaccess-worker-spb.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo0ODowM1rOGzBmhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDo0ODowM1rOGzBmhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1NjgwNQ==", "bodyText": "can be 30 secs without loop", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4140#discussion_r456156805", "createdAt": "2020-07-17T00:48:03Z", "author": {"login": "john-hill"}, "path": "services/workers/src/main/resources/dataaccess-worker-spb.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\r\n+\txmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:util=\"http://www.springframework.org/schema/util\"\r\n+\txsi:schemaLocation=\"\r\n+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\r\n+       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd\r\n+       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\r\n+       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd\">\r\n+\r\n+\t<!-- Turn on Spring's autoproxy using AspectJ's @Aspect annotations. -->\r\n+\t<aop:aspectj-autoproxy proxy-target-class=\"true\"/>\r\n+\r\n+\t<!-- This worker checks for expired approvals and change their status -->\r\n+\t<bean id=\"accessApprovalExpirationWorker\" class=\"org.sagebionetworks.dataaccess.workers.AccessApprovalExpirationWorker\" scope=\"singleton\" />\r\n+\r\n+\t<!-- Trigger for the access approval expiration worker -->\r\n+\t<bean id=\"accessApprovalExpirationTrigger\" class=\"org.springframework.scheduling.quartz.SimpleTriggerFactoryBean\" scope=\"singleton\">\r\n+\t\t<property name=\"jobDetail\">\r\n+\t\t\t<bean class=\"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean\">\r\n+\t\t\t\t<property name=\"targetObject\">\r\n+\t\t\t\t\t<bean class=\"org.sagebionetworks.workers.util.semaphore.SemaphoreGatedWorkerStack\">\r\n+\t\t\t\t\t\t<constructor-arg index=\"0\" ref=\"countingSemaphore\" />\r\n+\t\t\t\t\t\t<constructor-arg index=\"1\">\r\n+\t\t\t\t\t\t\t<bean class=\"org.sagebionetworks.workers.util.semaphore.SemaphoreGatedWorkerStackConfiguration\">\r\n+\t\t\t\t\t\t\t\t<property name=\"progressingRunner\" ref=\"accessApprovalExpirationWorker\"/>\r\n+\t\t\t\t\t\t\t\t<property name=\"semaphoreLockKey\" value=\"accessApprovalExpirationWorker\" />\r\n+\t\t\t\t\t\t\t\t<property name=\"semaphoreMaxLockCount\" value=\"1\" />\r\n+\t\t\t\t\t\t\t\t<property name=\"semaphoreLockTimeoutSec\" value=\"60\" />\r\n+\t\t\t\t\t\t\t\t<property name=\"gate\">\r\n+\t\t\t\t\t\t\t\t\t<bean class=\"org.sagebionetworks.worker.utils.StackStatusGate\" />\r\n+\t\t\t\t\t\t\t\t</property>\r\n+\r\n+\t\t\t\t\t\t\t</bean>\r\n+\t\t\t\t\t\t</constructor-arg>\r\n+\t\t\t\t\t</bean>\r\n+\t\t\t\t</property>\r\n+\t\t\t\t<property name=\"targetMethod\" value=\"run\" />\r\n+\t\t\t\t<property name=\"concurrent\" value=\"false\" />\r\n+\t\t\t</bean>\r\n+\t\t</property>\r\n+\t\t<property name=\"startDelay\" value=\"1012\" />\r\n+\t\t<!-- Once every 10 minutes -->\r\n+\t\t<property name=\"repeatInterval\" value=\"600000\" />\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95629a003b6ea7d4f6dec7ad584596359aeee7"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2931, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}