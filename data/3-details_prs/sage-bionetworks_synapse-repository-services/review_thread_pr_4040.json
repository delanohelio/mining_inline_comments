{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTAyNzEz", "number": 4040, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1NzowMFrOD72mkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0NDo0MFrOD73M_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDg3MTg1OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/JsonSchemaDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1NzowMFrOGUbzOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1NzowMFrOGUbzOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4MDE4Ng==", "bodyText": "If you want to enforce the random access constant guarantee consider using an array, or alternatively check the instanceOf RandomAccess marker interface.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4040#discussion_r424080186", "createdAt": "2020-05-12T22:57:00Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/JsonSchemaDaoImpl.java", "diffHunk": "@@ -395,4 +415,30 @@ public JsonSchemaVersionInfo getVersionLatestInfo(String organizationName, Strin\n \t\t\t\t\t\t+ COL_JSON_SCHEMA_NAME + \" = ? ORDER BY V.\" + COL_JSON_SCHEMA_VER_ID + \" LIMIT ? OFFSET ?\",\n \t\t\t\tSCHEMA_VERSION_INFO_MAPPER, organizationName, schemaName, limit, offset);\n \t}\n+\n+\t@WriteTransaction\n+\tvoid bindDependencies(String versionId, ArrayList<SchemaDependency> dependencies) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "524f4cd89cb0b77eca32a6645768a561cc819bd6"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDkwNTQxOnYy", "diffSide": "RIGHT", "path": "lib/models/src/main/java/org/sagebionetworks/repo/model/schema/SubSchemaIterable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoxMTo0N1rOGUcHbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoxMTo0N1rOGUcHbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NTM1OA==", "bodyText": "You can probably remove the return", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4040#discussion_r424085358", "createdAt": "2020-05-12T23:11:47Z", "author": {"login": "marcomarasca"}, "path": "lib/models/src/main/java/org/sagebionetworks/repo/model/schema/SubSchemaIterable.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package org.sagebionetworks.repo.model.schema;\n+\n+import java.lang.reflect.Field;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.sagebionetworks.util.ValidateArgument;\n+\n+/**\n+ * Provides iterators over the sub-schema of JsonSchemas.\n+ *\n+ */\n+public class SubSchemaIterable {\n+\n+\t/**\n+\t * Create a depth first iterator for the given schema.\n+\t * \n+\t * @param root\n+\t * @return\n+\t */\n+\tpublic static Iterable<JsonSchema> depthFirstIterable(JsonSchema root) {\n+\t\tValidateArgument.required(root, \"JsonSchema\");\n+\t\treturn () -> {\n+\t\t\treturn createDepthFirstList(root).iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "524f4cd89cb0b77eca32a6645768a561cc819bd6"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDkxMzQzOnYy", "diffSide": "RIGHT", "path": "lib/models/src/main/java/org/sagebionetworks/repo/model/schema/SubSchemaIterable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoxNTo1NlrOGUcMXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoxNTo1NlrOGUcMXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NjYyMA==", "bodyText": "This might throw if the list of not of JsonSchema.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4040#discussion_r424086620", "createdAt": "2020-05-12T23:15:56Z", "author": {"login": "marcomarasca"}, "path": "lib/models/src/main/java/org/sagebionetworks/repo/model/schema/SubSchemaIterable.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package org.sagebionetworks.repo.model.schema;\n+\n+import java.lang.reflect.Field;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.sagebionetworks.util.ValidateArgument;\n+\n+/**\n+ * Provides iterators over the sub-schema of JsonSchemas.\n+ *\n+ */\n+public class SubSchemaIterable {\n+\n+\t/**\n+\t * Create a depth first iterator for the given schema.\n+\t * \n+\t * @param root\n+\t * @return\n+\t */\n+\tpublic static Iterable<JsonSchema> depthFirstIterable(JsonSchema root) {\n+\t\tValidateArgument.required(root, \"JsonSchema\");\n+\t\treturn () -> {\n+\t\t\treturn createDepthFirstList(root).iterator();\n+\t\t};\n+\t}\n+\n+\t/**\n+\t * Create a flat list including only the direct children of the given schema.\n+\t * This method is not recursive.\n+\t * \n+\t * @param root\n+\t * @return\n+\t */\n+\tstatic List<JsonSchema> createListOfChildren(JsonSchema root) {\n+\t\tList<JsonSchema> list = new LinkedList<JsonSchema>();\n+\t\ttry {\n+\t\t\tField[] fields = JsonSchema.class.getDeclaredFields();\n+\t\t\tfor (Field field : fields) {\n+\t\t\t\tif (!field.isAccessible()) {\n+\t\t\t\t\tfield.setAccessible(true);\n+\t\t\t\t}\n+\t\t\t\t// is it a schema\n+\t\t\t\tif (JsonSchema.class == field.getType()) {\n+\t\t\t\t\tJsonSchema schema = (JsonSchema) field.get(root);\n+\t\t\t\t\tif (schema != null) {\n+\t\t\t\t\t\tlist.add(schema);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// is it a list of schemas?\n+\t\t\t\tif (List.class == field.getType()) {\n+\t\t\t\t\tList<JsonSchema> schemaList = (List<JsonSchema>) field.get(root);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "524f4cd89cb0b77eca32a6645768a561cc819bd6"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDk0Mjg4OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/schema/JsonSchemaManagerImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozMDo0M1rOGUcejA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozMDo0M1rOGUcejA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MTI3Ng==", "bodyText": "You can probably remove this import", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4040#discussion_r424091276", "createdAt": "2020-05-12T23:30:43Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/schema/JsonSchemaManagerImplTest.java", "diffHunk": "@@ -38,18 +41,30 @@\n import org.sagebionetworks.repo.model.dbo.schema.JsonSchemaDao;\n import org.sagebionetworks.repo.model.dbo.schema.NewSchemaVersionRequest;\n import org.sagebionetworks.repo.model.dbo.schema.OrganizationDao;\n+import org.sagebionetworks.repo.model.dbo.schema.SchemaDependency;\n import org.sagebionetworks.repo.model.schema.CreateOrganizationRequest;\n import org.sagebionetworks.repo.model.schema.CreateSchemaRequest;\n import org.sagebionetworks.repo.model.schema.CreateSchemaResponse;\n import org.sagebionetworks.repo.model.schema.JsonSchema;\n+import org.sagebionetworks.repo.model.schema.JsonSchemaInfo;\n import org.sagebionetworks.repo.model.schema.JsonSchemaVersionInfo;\n+import org.sagebionetworks.repo.model.schema.ListJsonSchemaInfoRequest;\n+import org.sagebionetworks.repo.model.schema.ListJsonSchemaInfoResponse;\n+import org.sagebionetworks.repo.model.schema.ListJsonSchemaVersionInfoRequest;\n+import org.sagebionetworks.repo.model.schema.ListJsonSchemaVersionInfoResponse;\n+import org.sagebionetworks.repo.model.schema.ListOrganizationsRequest;\n+import org.sagebionetworks.repo.model.schema.ListOrganizationsResponse;\n import org.sagebionetworks.repo.model.schema.Organization;\n import org.sagebionetworks.repo.model.util.AccessControlListUtil;\n+import org.sagebionetworks.repo.web.NotFoundException;\n import org.sagebionetworks.schema.adapter.JSONObjectAdapterException;\n import org.sagebionetworks.schema.adapter.org.json.EntityFactory;\n import org.sagebionetworks.schema.id.SchemaId;\n import org.sagebionetworks.schema.parser.SchemaIdParser;\n \n+import com.google.common.collect.Lists;\n+import com.mchange.v2.cfg.MConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "524f4cd89cb0b77eca32a6645768a561cc819bd6"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDk1OTIxOnYy", "diffSide": "RIGHT", "path": "services/workers/src/main/resources/schema-synapse-bootstrap-spb.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozOTowNlrOGUcofQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozOTowNlrOGUcofQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MzgyMQ==", "bodyText": "We can leave this at the original 1 hour interval and update the test-context.xml to override this property", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4040#discussion_r424093821", "createdAt": "2020-05-12T23:39:06Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/main/resources/schema-synapse-bootstrap-spb.xml", "diffHunk": "@@ -56,8 +53,8 @@\n \t\t</property>\n \t\t<property name=\"startDelay\" value=\"137\" />\n \t\t<!-- This delay determines the maximum amount of time before Synapse object \n-\t\t\tschema changes will appear on a new production stack.  Currently set to one hour. -->\n-\t\t<property name=\"repeatInterval\" value=\"3600000\" />\n+\t\t\tschema changes will appear on a new production stack.  Currently set to two minutes. -->\n+\t\t<property name=\"repeatInterval\" value=\"120000\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "524f4cd89cb0b77eca32a6645768a561cc819bd6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDk3MDIxOnYy", "diffSide": "RIGHT", "path": "services/workers/src/test/java/org/sagebionetworks/schema/worker/SynpaseSchemaBootstrapWorkerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0NDo0MFrOGUcvMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0NDo0MFrOGUcvMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NTUzNw==", "bodyText": "We might want to truncate the data in a before to increase the change that it the worker to put it there?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4040#discussion_r424095537", "createdAt": "2020-05-12T23:44:40Z", "author": {"login": "marcomarasca"}, "path": "services/workers/src/test/java/org/sagebionetworks/schema/worker/SynpaseSchemaBootstrapWorkerTest.java", "diffHunk": "@@ -1,21 +1,48 @@\n package org.sagebionetworks.schema.worker;\n \n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.sagebionetworks.repo.manager.schema.JsonSchemaManager;\n+import org.sagebionetworks.repo.model.schema.JsonSchemaInfo;\n+import org.sagebionetworks.repo.model.schema.ListJsonSchemaInfoRequest;\n+import org.sagebionetworks.repo.model.schema.ListJsonSchemaInfoResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n \n @ExtendWith(SpringExtension.class)\n @ContextConfiguration(locations = { \"classpath:test-context.xml\" })\n public class SynpaseSchemaBootstrapWorkerTest {\n+\t\n+\tpublic static final long MAX_WAIT_MS = 60*1000*2;\n \n \t@Autowired\n \tprivate JsonSchemaManager jsonSchemaManager;\n \t\n \t@Test\n-\tpublic void testRun() {\n-\t\t\n+\tpublic void testRun() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "524f4cd89cb0b77eca32a6645768a561cc819bd6"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3032, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}