{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4ODM0NzA0", "number": 3920, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxODoyMVrODbxb3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo1NDozN1rODcXj1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDQ4MDkzOnYy", "diffSide": "RIGHT", "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/SQLUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxODoyMVrOFjc2nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxODoyMVrOFjc2nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNzIxMg==", "bodyText": "will delete then add instead.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920#discussion_r372717212", "createdAt": "2020-01-30T01:18:21Z", "author": {"login": "john-hill"}, "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/SQLUtils.java", "diffHunk": "@@ -1965,7 +1965,8 @@ public static String insertIntoListColumnIndexTable(IdAndVersion tableIdAndVersi\n \t\t\t\t\" ORDINAL FOR ORDINALITY, \" +\r\n \t\t\t\t\" COLUMN_EXPAND \" + columnExpandTypeSQl + \" PATH '$'\" +\r\n \t\t\t\t\" )\" +\r\n-\t\t\t\t\") TEMP_JSON_TABLE\"+rowFilter;\r\n+\t\t\t\t\") TEMP_JSON_TABLE\"+rowFilter+\r\n+\t\t\t\t\" ON DUPLICATE KEY UPDATE \" + unnestedColumnName + \"=\" + \"TEMP_JSON_TABLE.COLUMN_EXPAND\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a382fd138e11d2f4212c28b1b16ba0e50702332d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDQ5ODc1OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/TableIndexManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToyOTo0MlrOFjdBXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToyOTo0MlrOFjdBXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxOTk2NQ==", "bodyText": "can add a new type of grouping to SparseChangeSet, then iterate over new grouping and both delete then add for each group of rows for each list column.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920#discussion_r372719965", "createdAt": "2020-01-30T01:29:42Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/TableIndexManagerImpl.java", "diffHunk": "@@ -109,9 +116,37 @@ public Void doInTransaction(TransactionStatus status) {\n \t\t\t\t\t\t\t// set the new max version for the index\r\n \t\t\t\t\t\t\ttableIndexDao.setMaxCurrentCompleteVersionForTable(\r\n \t\t\t\t\t\t\t\t\ttableId, changeSetVersionNumber);\r\n+\r\n+\t\t\t\t\t\t\t//once all changes to main table are applied, populate the list-type columns with the changes.\r\n+\t\t\t\t\t\t\tfor(Map.Entry<ColumnModel, Set<Long>> entry : listColumnsToRowIdMap.entrySet()){\r\n+\t\t\t\t\t\t\t\ttableIndexDao.populateListColumnIndexTable(tableId, entry.getKey(), entry.getValue());\r\n+\t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t\treturn null;\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t});\r\n+\r\n+\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic static void recordListColumnChanges(Map<ColumnModel, Set<Long>> listColumnsToRowIdMap, Grouping grouping){\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a382fd138e11d2f4212c28b1b16ba0e50702332d"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDcxMTE0OnYy", "diffSide": "RIGHT", "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0Njo1OVrOFkY19A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0Njo1OVrOFkY19A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwMDA4NA==", "bodyText": "only one null?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920#discussion_r373700084", "createdAt": "2020-01-31T21:46:59Z", "author": {"login": "john-hill"}, "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java", "diffHunk": "@@ -2597,6 +2598,117 @@ public void testCreateAndPopulateListColumnIndexTables__StringListDataTooLarge()\n \t\tassertEquals(\"The size of the column 'myList' is too small.\" +\r\n \t\t\t\t\" Unable to automatically determine the necessary size to fit all values in a STRING_LIST column\", message);\r\n \t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NullTableId() {\r\n+\t\ttableId = null;\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING_LIST);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tSet<Long> rowIdFilter = null;\r\n+\t\tassertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t});\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NullColumn() {\r\n+\t\tColumnModel multiValue = null;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339b7f8c7bc43c344134ccf1efea14036dfbdc7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDcxMjY4OnYy", "diffSide": "RIGHT", "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0Nzo0NlrOFkY3BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0Nzo0NlrOFkY3BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwMDM1Nw==", "bodyText": "member for the null helps reader see what is null", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920#discussion_r373700357", "createdAt": "2020-01-31T21:47:46Z", "author": {"login": "john-hill"}, "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java", "diffHunk": "@@ -2597,6 +2598,117 @@ public void testCreateAndPopulateListColumnIndexTables__StringListDataTooLarge()\n \t\tassertEquals(\"The size of the column 'myList' is too small.\" +\r\n \t\t\t\t\" Unable to automatically determine the necessary size to fit all values in a STRING_LIST column\", message);\r\n \t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NullTableId() {\r\n+\t\ttableId = null;\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING_LIST);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tSet<Long> rowIdFilter = null;\r\n+\t\tassertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t});\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NullColumn() {\r\n+\t\tColumnModel multiValue = null;\r\n+\t\tSet<Long> rowIdFilter = null;\r\n+\t\tassertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.populateListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t});\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NotListType() {\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tSet<Long> rowIdFilter = Sets.newHashSet(1L);\r\n+\t\tString message = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t}).getMessage();\r\n+\t\tassertEquals(\"Only valid for List type columns\", message);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_nullRowFilter() {\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING_LIST);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tString message = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, null);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339b7f8c7bc43c344134ccf1efea14036dfbdc7"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDcxNjU0OnYy", "diffSide": "RIGHT", "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0OTozMVrOFkY5bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0OTozMVrOFkY5bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwMDk3NA==", "bodyText": "can use the helper for the counts", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920#discussion_r373700974", "createdAt": "2020-01-31T21:49:31Z", "author": {"login": "john-hill"}, "path": "lib/lib-table-cluster/src/test/java/org/sagebionetworks/table/cluster/TableIndexDAOImplTest.java", "diffHunk": "@@ -2597,6 +2598,117 @@ public void testCreateAndPopulateListColumnIndexTables__StringListDataTooLarge()\n \t\tassertEquals(\"The size of the column 'myList' is too small.\" +\r\n \t\t\t\t\" Unable to automatically determine the necessary size to fit all values in a STRING_LIST column\", message);\r\n \t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NullTableId() {\r\n+\t\ttableId = null;\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING_LIST);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tSet<Long> rowIdFilter = null;\r\n+\t\tassertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t});\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NullColumn() {\r\n+\t\tColumnModel multiValue = null;\r\n+\t\tSet<Long> rowIdFilter = null;\r\n+\t\tassertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.populateListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t});\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_NotListType() {\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tSet<Long> rowIdFilter = Sets.newHashSet(1L);\r\n+\t\tString message = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t}).getMessage();\r\n+\t\tassertEquals(\"Only valid for List type columns\", message);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_nullRowFilter() {\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING_LIST);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tString message = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, null);\r\n+\t\t}).getMessage();\r\n+\t\tassertEquals(\"rowIds is required and must not be empty.\", message);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable_EmptyRowFilter() {\r\n+\t\tColumnModel multiValue = new ColumnModel();\r\n+\t\tmultiValue.setId(\"886\");\r\n+\t\tmultiValue.setColumnType(ColumnType.STRING_LIST);\r\n+\t\tmultiValue.setName(\"multiValue\");\r\n+\t\tmultiValue.setMaximumSize(100L);\r\n+\t\tSet<Long> rowIdFilter = Collections.emptySet();\r\n+\t\tString message = assertThrows(IllegalArgumentException.class, ()->{\r\n+\t\t\t// call under test\r\n+\t\t\ttableIndexDAO.deleteFromListColumnIndexTable(tableId, multiValue, rowIdFilter);\r\n+\t\t}).getMessage();\r\n+\t\tassertEquals(\"rowIds is required and must not be empty.\", message);\r\n+\t}\r\n+\r\n+\r\n+\t@Test\r\n+\tpublic void testDeleteFromListColumnIndexTable() {\r\n+\t\t// create a table with a long column.\r\n+\t\tColumnModel intColumn = new ColumnModel();\r\n+\t\tintColumn.setId(\"12\");\r\n+\t\tintColumn.setName(\"foo\");\r\n+\t\tintColumn.setColumnType(ColumnType.INTEGER);\r\n+\r\n+\t\tColumnModel stringListColumn = new ColumnModel();\r\n+\t\tstringListColumn.setId(\"15\");\r\n+\t\tstringListColumn.setName(\"myList\");\r\n+\t\tstringListColumn.setMaximumSize(54L);\r\n+\t\tstringListColumn.setColumnType(ColumnType.STRING_LIST);\r\n+\r\n+\r\n+\t\tColumnModel booleanColumn = new ColumnModel();\r\n+\t\tbooleanColumn.setId(\"13\");\r\n+\t\tbooleanColumn.setName(\"bar\");\r\n+\t\tbooleanColumn.setColumnType(ColumnType.BOOLEAN);\r\n+\r\n+\t\tList<ColumnModel> schema = Lists.newArrayList(intColumn, stringListColumn ,booleanColumn);\r\n+\r\n+\t\tcreateOrUpdateTable(schema, tableId, isView);\r\n+\r\n+\t\tint numRows = 5;\r\n+\t\tList<Row> rows = TableModelTestUtils.createRows(schema, numRows);\r\n+\t\tcreateOrUpdateOrDeleteRows(tableId, rows, schema);\r\n+\r\n+\t\ttableIndexDAO.populateListColumnIndexTable(tableId, stringListColumn, null);\r\n+\r\n+\t\tString listColumnindexTableName = SQLUtils.getTableNameForMultiValueColumnIndex(tableId, stringListColumn.getId());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339b7f8c7bc43c344134ccf1efea14036dfbdc7"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDcyNDYyOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/TableIndexManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo1MzoyOVrOFkY-pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo1MzoyOVrOFkY-pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwMjMxMA==", "bodyText": "move up", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920#discussion_r373702310", "createdAt": "2020-01-31T21:53:29Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/table/TableIndexManagerImpl.java", "diffHunk": "@@ -109,9 +109,17 @@ public Void doInTransaction(TransactionStatus status) {\n \t\t\t\t\t\t\t// set the new max version for the index\r\n \t\t\t\t\t\t\ttableIndexDao.setMaxCurrentCompleteVersionForTable(\r\n \t\t\t\t\t\t\t\t\ttableId, changeSetVersionNumber);\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339b7f8c7bc43c344134ccf1efea14036dfbdc7"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDcyNzI2OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/table/TableIndexManagerImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo1NDozN1rOFkZAUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo1NDozN1rOFkZAUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwMjczOA==", "bodyText": "remove", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3920#discussion_r373702738", "createdAt": "2020-01-31T21:54:37Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/table/TableIndexManagerImplTest.java", "diffHunk": "@@ -1298,5 +1340,65 @@ public TableChangeMetaData setupMockColumnChange(long changeNumber) throws NotFo\n \t\t}\r\n \t\treturn schema;\r\n \t}\r\n-\t\r\n+\r\n+\tprivate class SparseRowTestImpl implements SparseRow{\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339b7f8c7bc43c344134ccf1efea14036dfbdc7"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3105, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}