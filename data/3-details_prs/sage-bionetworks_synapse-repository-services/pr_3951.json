{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDE1MDkx", "number": 3951, "title": "PLFM-6008 STS APIs", "bodyText": "https://sagebionetworks.jira.com/browse/PLFM-6008\nAlso manually tested with my own S3 bucket with no base key.'\nUpdate: I also manually tested this with a bucket owned by Bridge (ie, the Synapse Dev account can get temporary credentials for a bucket owned by another account, assuming the steps in https://docs.synapse.org/articles/custom_storage_location.html are followed).", "createdAt": "2020-02-19T21:51:28Z", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3951", "merged": true, "mergeCommit": {"oid": "b0fd532061470760a7fda6bf8473bbe3904dad91"}, "closed": true, "closedAt": "2020-02-27T19:39:59Z", "author": {"login": "DwayneJengSage"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF9VLtgH2gAyMzc3NDE1MDkxOjEzM2IxOThkZGMzNWVkMzgwZWYwMTYxNThkZjkzOGZiMmM0ZGU0MzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIgpnxAFqTM2NTk0NDcwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "133b198ddc35ed380ef016158df938fb2c4de430", "author": {"user": {"login": "DwayneJengSage", "name": "Dwayne Jeng"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/133b198ddc35ed380ef016158df938fb2c4de430", "committedDate": "2020-02-19T21:23:03Z", "message": "PLFM-6008 STS APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2532bbb255ef96b6e7c5122b5a32da69bb755429", "author": {"user": {"login": "DwayneJengSage", "name": "Dwayne Jeng"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/2532bbb255ef96b6e7c5122b5a32da69bb755429", "committedDate": "2020-02-19T21:23:48Z", "message": "Merge branch 'develop' of https://github.com/Sage-Bionetworks/Synapse-Repository-Services into develop"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTgzNDYz", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3951#pullrequestreview-362983463", "createdAt": "2020-02-22T00:01:14Z", "commit": {"oid": "2532bbb255ef96b6e7c5122b5a32da69bb755429"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDowMToxNFrOFtH5vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDowMToxNFrOFtH5vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1OTcwOQ==", "bodyText": "move to a classpath resource.\nMaybe use velocity (not sure if that overkill) https://velocity.apache.org/engine/2.0/user-guide.html\nand we will review an example of a policy with IT.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3951#discussion_r382859709", "createdAt": "2020-02-22T00:01:14Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/sts/StsManagerImpl.java", "diffHunk": "@@ -1,27 +1,160 @@\n package org.sagebionetworks.repo.manager.sts;\n \n+import com.amazonaws.services.securitytoken.AWSSecurityTokenService;\n+import com.amazonaws.services.securitytoken.model.Credentials;\n+import com.amazonaws.services.securitytoken.model.GetFederationTokenRequest;\n+import com.amazonaws.services.securitytoken.model.GetFederationTokenResult;\n+import com.google.common.collect.ImmutableMap;\n+import org.sagebionetworks.repo.manager.AuthorizationManager;\n import org.sagebionetworks.repo.manager.ProjectSettingsManager;\n import org.sagebionetworks.repo.manager.file.FileHandleManager;\n+import org.sagebionetworks.repo.manager.file.MultipartUtils;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.ObjectType;\n import org.sagebionetworks.repo.model.UserInfo;\n import org.sagebionetworks.repo.model.file.FileHandle;\n import org.sagebionetworks.repo.model.project.ProjectSetting;\n import org.sagebionetworks.repo.model.project.ProjectSettingsType;\n import org.sagebionetworks.repo.model.project.StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.StsStorageLocationSetting;\n import org.sagebionetworks.repo.model.project.UploadDestinationListSetting;\n+import org.sagebionetworks.repo.model.sts.StsCredentials;\n+import org.sagebionetworks.repo.model.sts.StsPermission;\n+import org.sagebionetworks.util.ValidateArgument;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n+import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n \n @Component\n public class StsManagerImpl implements StsManager {\n+\tstatic final int DURATION_SECONDS = 12 * 60 * 60; // 12 hours\n+\n+\t// The Synapse ACCESS_TYPE for the given STS Permission. Used to determine if a user has the proper ACLs.\n+\tprivate static final Map<StsPermission, ACCESS_TYPE> PERMISSION_TO_ACCESS_TYPE =\n+\t\t\tImmutableMap.<StsPermission, ACCESS_TYPE>builder()\n+\t\t\t\t\t.put(StsPermission.read_only, ACCESS_TYPE.DOWNLOAD)\n+\t\t\t\t\t.put(StsPermission.read_write, ACCESS_TYPE.UPLOAD)\n+\t\t\t\t\t.build();\n+\n+\t// The AWS IAM policy string for the actions the user is allowed to do.\n+\tprivate static final Map<StsPermission, String> PERMISSION_TO_POLICY_ACTIONS =\n+\t\t\tImmutableMap.<StsPermission, String>builder()\n+\t\t\t\t\t.put(StsPermission.read_only, \"\\\"s3:Get*\\\",\\\"s3:List*\\\"\")\n+\t\t\t\t\t.put(StsPermission.read_write, \"\\\"s3:*\\\"\")\n+\t\t\t\t\t.build();\n+\n+\tprivate static final String SESSION_POLICY_TEMPLATE = \"{\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2532bbb255ef96b6e7c5122b5a32da69bb755429"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTg2NzQy", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3951#pullrequestreview-362986742", "createdAt": "2020-02-22T00:17:09Z", "commit": {"oid": "2532bbb255ef96b6e7c5122b5a32da69bb755429"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoxNzowOVrOFtIFIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoxNzowOVrOFtIFIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MjYyNg==", "bodyText": "upload and download", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3951#discussion_r382862626", "createdAt": "2020-02-22T00:17:09Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/sts/StsManagerImpl.java", "diffHunk": "@@ -1,27 +1,160 @@\n package org.sagebionetworks.repo.manager.sts;\n \n+import com.amazonaws.services.securitytoken.AWSSecurityTokenService;\n+import com.amazonaws.services.securitytoken.model.Credentials;\n+import com.amazonaws.services.securitytoken.model.GetFederationTokenRequest;\n+import com.amazonaws.services.securitytoken.model.GetFederationTokenResult;\n+import com.google.common.collect.ImmutableMap;\n+import org.sagebionetworks.repo.manager.AuthorizationManager;\n import org.sagebionetworks.repo.manager.ProjectSettingsManager;\n import org.sagebionetworks.repo.manager.file.FileHandleManager;\n+import org.sagebionetworks.repo.manager.file.MultipartUtils;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.ObjectType;\n import org.sagebionetworks.repo.model.UserInfo;\n import org.sagebionetworks.repo.model.file.FileHandle;\n import org.sagebionetworks.repo.model.project.ProjectSetting;\n import org.sagebionetworks.repo.model.project.ProjectSettingsType;\n import org.sagebionetworks.repo.model.project.StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.StsStorageLocationSetting;\n import org.sagebionetworks.repo.model.project.UploadDestinationListSetting;\n+import org.sagebionetworks.repo.model.sts.StsCredentials;\n+import org.sagebionetworks.repo.model.sts.StsPermission;\n+import org.sagebionetworks.util.ValidateArgument;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n+import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n \n @Component\n public class StsManagerImpl implements StsManager {\n+\tstatic final int DURATION_SECONDS = 12 * 60 * 60; // 12 hours\n+\n+\t// The Synapse ACCESS_TYPE for the given STS Permission. Used to determine if a user has the proper ACLs.\n+\tprivate static final Map<StsPermission, ACCESS_TYPE> PERMISSION_TO_ACCESS_TYPE =\n+\t\t\tImmutableMap.<StsPermission, ACCESS_TYPE>builder()\n+\t\t\t\t\t.put(StsPermission.read_only, ACCESS_TYPE.DOWNLOAD)\n+\t\t\t\t\t.put(StsPermission.read_write, ACCESS_TYPE.UPLOAD)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2532bbb255ef96b6e7c5122b5a32da69bb755429"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTg4MTI2", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3951#pullrequestreview-362988126", "createdAt": "2020-02-22T00:23:52Z", "commit": {"oid": "2532bbb255ef96b6e7c5122b5a32da69bb755429"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoyMzo1MlrOFtIJuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoyMzo1MlrOFtIJuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MzgwMQ==", "bodyText": "consider velocity to solve this problem.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3951#discussion_r382863801", "createdAt": "2020-02-22T00:23:52Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/sts/StsManagerImpl.java", "diffHunk": "@@ -1,27 +1,160 @@\n package org.sagebionetworks.repo.manager.sts;\n \n+import com.amazonaws.services.securitytoken.AWSSecurityTokenService;\n+import com.amazonaws.services.securitytoken.model.Credentials;\n+import com.amazonaws.services.securitytoken.model.GetFederationTokenRequest;\n+import com.amazonaws.services.securitytoken.model.GetFederationTokenResult;\n+import com.google.common.collect.ImmutableMap;\n+import org.sagebionetworks.repo.manager.AuthorizationManager;\n import org.sagebionetworks.repo.manager.ProjectSettingsManager;\n import org.sagebionetworks.repo.manager.file.FileHandleManager;\n+import org.sagebionetworks.repo.manager.file.MultipartUtils;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.ObjectType;\n import org.sagebionetworks.repo.model.UserInfo;\n import org.sagebionetworks.repo.model.file.FileHandle;\n import org.sagebionetworks.repo.model.project.ProjectSetting;\n import org.sagebionetworks.repo.model.project.ProjectSettingsType;\n import org.sagebionetworks.repo.model.project.StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.StsStorageLocationSetting;\n import org.sagebionetworks.repo.model.project.UploadDestinationListSetting;\n+import org.sagebionetworks.repo.model.sts.StsCredentials;\n+import org.sagebionetworks.repo.model.sts.StsPermission;\n+import org.sagebionetworks.util.ValidateArgument;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n+import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n \n @Component\n public class StsManagerImpl implements StsManager {\n+\tstatic final int DURATION_SECONDS = 12 * 60 * 60; // 12 hours\n+\n+\t// The Synapse ACCESS_TYPE for the given STS Permission. Used to determine if a user has the proper ACLs.\n+\tprivate static final Map<StsPermission, ACCESS_TYPE> PERMISSION_TO_ACCESS_TYPE =\n+\t\t\tImmutableMap.<StsPermission, ACCESS_TYPE>builder()\n+\t\t\t\t\t.put(StsPermission.read_only, ACCESS_TYPE.DOWNLOAD)\n+\t\t\t\t\t.put(StsPermission.read_write, ACCESS_TYPE.UPLOAD)\n+\t\t\t\t\t.build();\n+\n+\t// The AWS IAM policy string for the actions the user is allowed to do.\n+\tprivate static final Map<StsPermission, String> PERMISSION_TO_POLICY_ACTIONS =\n+\t\t\tImmutableMap.<StsPermission, String>builder()\n+\t\t\t\t\t.put(StsPermission.read_only, \"\\\"s3:Get*\\\",\\\"s3:List*\\\"\")\n+\t\t\t\t\t.put(StsPermission.read_write, \"\\\"s3:*\\\"\")\n+\t\t\t\t\t.build();\n+\n+\tprivate static final String SESSION_POLICY_TEMPLATE = \"{\\n\" +\n+\t\t\t\"\t\\\"Version\\\": \\\"2012-10-17\\\",\\n\" +\n+\t\t\t\"\t\\\"Statement\\\": [\\n\" +\n+\t\t\t\"\t\t{\\n\" +\n+\t\t\t\"\t\t\t\\\"Sid\\\": \\\"ListParentBuckets\\\",\\n\" +\n+\t\t\t\"\t\t\t\\\"Action\\\": [\\\"s3:ListBucket*\\\"],\\n\" +\n+\t\t\t\"\t\t\t\\\"Effect\\\": \\\"Allow\\\",\\n\" +\n+\t\t\t\"\t\t\t\\\"Resource\\\": [\\\"arn:aws:s3:::$bucket\\\"],\\n\" +\n+\t\t\t\"\t\t\t\\\"Condition\\\":{\\\"StringEquals\\\":{\\\"s3:prefix\\\":[\\\"$folder\\\"]}}\\n\" +\n+\t\t\t\"\t\t},\\n\" +\n+\t\t\t\"\t\t{\\n\" +\n+\t\t\t\"\t\t\t\\\"Sid\\\": \\\"ListBucketAccess\\\",\\n\" +\n+\t\t\t\"\t\t\t\\\"Action\\\": [\\\"s3:ListBucket*\\\"],\\n\" +\n+\t\t\t\"\t\t\t\\\"Effect\\\": \\\"Allow\\\",\\n\" +\n+\t\t\t\"\t\t\t\\\"Resource\\\": [\\\"arn:aws:s3:::$bucket\\\"],\\n\" +\n+\t\t\t\"\t\t\t\\\"Condition\\\":{\\\"StringLike\\\":{\\\"s3:prefix\\\":[\\\"$folderWithTrailingSlash*\\\"]}}\\n\" +\n+\t\t\t\"\t\t},\\n\" +\n+\t\t\t\"\t\t{\\n\" +\n+\t\t\t\"\t\t\t\\\"Sid\\\": \\\"FolderAccess\\\",\\n\" +\n+\t\t\t\"\t\t\t\\\"Effect\\\": \\\"Allow\\\",\\n\" +\n+\t\t\t\"\t\t\t\\\"Action\\\": [\\n\" +\n+\t\t\t\"\t\t\t\t$actions\\n\" +\n+\t\t\t\"\t\t\t],\\n\" +\n+\t\t\t\"\t\t\t\\\"Resource\\\": [\\n\" +\n+\t\t\t\"\t\t\t\t\\\"arn:aws:s3:::$bucketWithFolder\\\",\\n\" +\n+\t\t\t\"\t\t\t\t\\\"arn:aws:s3:::$bucketWithFolder/*\\\"\\n\" +\n+\t\t\t\"\t\t\t]\\n\" +\n+\t\t\t\"\t\t}\\n\" +\n+\t\t\t\"\t]\\n\" +\n+\t\t\t\"}\";\n+\n+\t@Autowired\n+\tprivate AuthorizationManager authManager;\n+\n \t@Autowired\n \tprivate FileHandleManager fileHandleManager;\n \n \t@Autowired\n \tprivate ProjectSettingsManager projectSettingsManager;\n \n+\t@Autowired\n+\tprivate AWSSecurityTokenService stsClient;\n+\n+\t@Override\n+\tpublic StsCredentials getTemporaryCredentials(UserInfo userInfo, String entityId, StsPermission permission) {\n+\t\t// Validate args.\n+\t\tValidateArgument.required(userInfo, \"userInfo\");\n+\t\tValidateArgument.required(entityId, \"entityId\");\n+\t\tValidateArgument.required(permission, \"permission\");\n+\n+\t\t// Entity must have an STS-enabled storage location.\n+\t\tOptional<UploadDestinationListSetting> projectSetting = projectSettingsManager.getProjectSettingForNode(\n+\t\t\t\tuserInfo, entityId, ProjectSettingsType.upload, UploadDestinationListSetting.class);\n+\t\tif (!projectSetting.isPresent()) {\n+\t\t\tthrow new IllegalArgumentException(\"Entity must have a project setting\");\n+\t\t}\n+\t\tif (!projectSettingsManager.isStsStorageLocationSetting(projectSetting.get())) {\n+\t\t\tthrow new IllegalArgumentException(\"Entity must have an STS-enabled storage location\");\n+\t\t}\n+\t\t// Shortcut: STS-enabled project settings can only have 1 storage location.\n+\t\tlong storageLocationId = projectSetting.get().getLocations().get(0);\n+\t\tStsStorageLocationSetting storageLocationSetting = (StsStorageLocationSetting) projectSettingsManager\n+\t\t\t\t.getStorageLocationSetting(storageLocationId);\n+\n+\t\t// Check auth.\n+\t\tACCESS_TYPE accessType = PERMISSION_TO_ACCESS_TYPE.get(permission);\n+\t\tauthManager.canAccess(userInfo, entityId, ObjectType.ENTITY, accessType).checkAuthorizationOrElseThrow();\n+\n+\t\tString bucket = MultipartUtils.getBucket(storageLocationSetting);\n+\n+\t\t// Optional base key. Convert null to blank so we can do string substitution correctly.\n+\t\tString baseKey = storageLocationSetting.getBaseKey();\n+\t\tString bucketWithFolder;\n+\t\tString folderWithTrailingSlash;\n+\t\tif (baseKey == null) {\n+\t\t\tbaseKey = \"\";\n+\t\t\tbucketWithFolder = bucket;\n+\t\t\tfolderWithTrailingSlash = \"\";\n+\t\t} else {\n+\t\t\tbucketWithFolder = bucket + \"/\" + baseKey;\n+\t\t\tfolderWithTrailingSlash = baseKey + \"/\";\n+\t\t}\n+\n+\t\t// Call STS.\n+\t\tString actions = PERMISSION_TO_POLICY_ACTIONS.get(permission);\n+\t\tString policy = SESSION_POLICY_TEMPLATE.replace(\"$bucketWithFolder\", bucketWithFolder)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2532bbb255ef96b6e7c5122b5a32da69bb755429"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTkwNzcz", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3951#pullrequestreview-362990773", "createdAt": "2020-02-22T00:38:13Z", "commit": {"oid": "2532bbb255ef96b6e7c5122b5a32da69bb755429"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDozODoxM1rOFtIS7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDozODoxM1rOFtIS7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjE1OA==", "bodyText": "can download too", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3951#discussion_r382866158", "createdAt": "2020-02-22T00:38:13Z", "author": {"login": "john-hill"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/sts/StsManagerImplTest.java", "diffHunk": "@@ -1,48 +1,287 @@\n package org.sagebionetworks.repo.manager.sts;\n \n+import com.amazonaws.services.securitytoken.AWSSecurityTokenService;\n+import com.amazonaws.services.securitytoken.model.Credentials;\n+import com.amazonaws.services.securitytoken.model.GetFederationTokenRequest;\n+import com.amazonaws.services.securitytoken.model.GetFederationTokenResult;\n import com.google.common.collect.ImmutableList;\n+import org.joda.time.DateTime;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n+import org.sagebionetworks.StackConfigurationSingleton;\n+import org.sagebionetworks.repo.manager.AuthorizationManager;\n import org.sagebionetworks.repo.manager.ProjectSettingsManager;\n import org.sagebionetworks.repo.manager.file.FileHandleManager;\n+import org.sagebionetworks.repo.model.ACCESS_TYPE;\n+import org.sagebionetworks.repo.model.ObjectType;\n import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.auth.AuthorizationStatus;\n import org.sagebionetworks.repo.model.file.S3FileHandle;\n+import org.sagebionetworks.repo.model.project.ExternalS3StorageLocationSetting;\n import org.sagebionetworks.repo.model.project.ProjectSettingsType;\n import org.sagebionetworks.repo.model.project.S3StorageLocationSetting;\n import org.sagebionetworks.repo.model.project.StorageLocationSetting;\n import org.sagebionetworks.repo.model.project.UploadDestinationListSetting;\n+import org.sagebionetworks.repo.model.sts.StsCredentials;\n+import org.sagebionetworks.repo.model.sts.StsPermission;\n \n+import java.util.Date;\n import java.util.Optional;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n @ExtendWith(MockitoExtension.class)\n public class StsManagerImplTest {\n+\tprivate static final String AWS_ACCESS_KEY = \"dummy-access-key\";\n+\tprivate static final String AWS_SECRET_KEY = \"dummy-secret-key\";\n+\tprivate static final String AWS_SESSION_TOKEN = \"dummy-session-token\";\n+\tprivate static final Date AWS_EXPIRATION_DATE = DateTime.parse(\"2020-02-17T17:26:17.379-0800\").toDate();\n+\tprivate static final String BASE_KEY = \"my-base-key\";\n+\tprivate static final String BUCKET = \"my-bucket\";\n+\tprivate static final String EXPECTED_BUCKET_WITH_BASE_KEY = \"my-bucket/my-base-key\";\n \tprivate static final String FILE_HANDLE_ID = \"file-handle-id\";\n \tprivate static final String FOLDER_ID = \"syn1111\";\n \tprivate static final String PARENT_ENTITY_ID = \"syn2222\";\n \tprivate static final String NEW_PARENT_ID = \"syn3333\";\n \tprivate static final String OLD_PARENT_ID = \"syn4444\";\n-\tprivate static final UserInfo USER_INFO = new UserInfo(false);\n+\tprivate static final long USER_ID = 1234;\n+\n+\tprivate static final UserInfo USER_INFO = new UserInfo(false, USER_ID);\n+\tprivate static final String EXPECTED_STS_SESSION_NAME = \"sts-\" + USER_ID + \"-\" + PARENT_ENTITY_ID;\n \n \tprivate static final long STS_STORAGE_LOCATION_ID = 123;\n \tprivate static final long NON_STS_STORAGE_LOCATION_ID = 456;\n \tprivate static final long DIFFERENT_STS_STORAGE_LOCATION_ID = 789;\n \n+\t@Mock\n+\tprivate AuthorizationManager mockAuthManager;\n+\n+\t@Mock\n+\tprivate AuthorizationStatus mockAuthStatus;\n+\n \t@Mock\n \tprivate FileHandleManager mockFileHandleManager;\n \n \t@Mock\n \tprivate ProjectSettingsManager mockProjectSettingsManager;\n \n+\t@Mock\n+\tprivate AWSSecurityTokenService mockStsClient;\n+\n \t@InjectMocks\n \tprivate StsManagerImpl stsManager;\n \n+\t@Test\n+\tpublic void getTemporaryCredentials_noProjectSetting() {\n+\t\tsetupFolderWithoutProjectSetting();\n+\n+\t\t// Method under test - Throws.\n+\t\tException ex = assertThrows(IllegalArgumentException.class, () -> stsManager.getTemporaryCredentials(USER_INFO,\n+\t\t\t\tPARENT_ENTITY_ID, StsPermission.read_only));\n+\t\tassertEquals(\"Entity must have a project setting\", ex.getMessage());\n+\t}\n+\n+\t@Test\n+\tpublic void getTemporaryCredentials_notSts() {\n+\t\tsetupFolderWithProjectSetting(/*isSts*/ false, NON_STS_STORAGE_LOCATION_ID);\n+\n+\t\t// Method under test - Throws.\n+\t\tException ex = assertThrows(IllegalArgumentException.class, () -> stsManager.getTemporaryCredentials(USER_INFO,\n+\t\t\t\tPARENT_ENTITY_ID, StsPermission.read_only));\n+\t\tassertEquals(\"Entity must have an STS-enabled storage location\", ex.getMessage());\n+\t}\n+\n+\t@Test\n+\tpublic void getTemporaryCredentials_readOnly() {\n+\t\t// Mock dependencies.\n+\t\tsetupFolderWithProjectSetting(/*isSts*/ true, STS_STORAGE_LOCATION_ID);\n+\n+\t\tExternalS3StorageLocationSetting storageLocationSetting = new ExternalS3StorageLocationSetting();\n+\t\tstorageLocationSetting.setBucket(BUCKET);\n+\t\tstorageLocationSetting.setStsEnabled(true);\n+\t\twhen(mockProjectSettingsManager.getStorageLocationSetting(STS_STORAGE_LOCATION_ID)).thenReturn(\n+\t\t\t\tstorageLocationSetting);\n+\n+\t\twhen(mockAuthManager.canAccess(USER_INFO, PARENT_ENTITY_ID, ObjectType.ENTITY, ACCESS_TYPE.DOWNLOAD))\n+\t\t\t\t.thenReturn(mockAuthStatus);\n+\n+\t\tmockSts();\n+\n+\t\t// Method under test - Does not throw.\n+\t\tStsCredentials result = stsManager.getTemporaryCredentials(USER_INFO, PARENT_ENTITY_ID,\n+\t\t\t\tStsPermission.read_only);\n+\t\tassertStsCredentials(result);\n+\n+\t\t// Verify policy document.\n+\t\tArgumentCaptor<GetFederationTokenRequest> requestCaptor = ArgumentCaptor.forClass(\n+\t\t\t\tGetFederationTokenRequest.class);\n+\t\tverify(mockStsClient).getFederationToken(requestCaptor.capture());\n+\t\tGetFederationTokenRequest request = requestCaptor.getValue();\n+\t\tassertEquals(EXPECTED_STS_SESSION_NAME, request.getName());\n+\t\tassertEquals(StsManagerImpl.DURATION_SECONDS, request.getDurationSeconds());\n+\n+\t\tString policy = request.getPolicy();\n+\t\tassertTrue(policy.contains(\"\\\"arn:aws:s3:::\" + BUCKET + \"\\\"\"));\n+\t\tassertTrue(policy.contains(\"{\\\"s3:prefix\\\":[\\\"\\\"]}\"));\n+\t\tassertTrue(policy.contains(\"{\\\"s3:prefix\\\":[\\\"*\\\"]}\"));\n+\t\tassertTrue(policy.contains(\"\\\"s3:Get*\\\",\\\"s3:List*\\\"\"));\n+\t\tassertTrue(policy.contains(\"\\\"arn:aws:s3:::\" + BUCKET + \"\\\"\"));\n+\t\tassertTrue(policy.contains(\"\\\"arn:aws:s3:::\" + BUCKET + \"/*\\\"\"));\n+\n+\t\t// Verify auth.\n+\t\tverify(mockAuthStatus).checkAuthorizationOrElseThrow();\n+\t}\n+\n+\t@Test\n+\tpublic void getTemporaryCredentials_readWrite() {\n+\t\t// Mock dependencies.\n+\t\tsetupFolderWithProjectSetting(/*isSts*/ true, STS_STORAGE_LOCATION_ID);\n+\n+\t\tExternalS3StorageLocationSetting storageLocationSetting = new ExternalS3StorageLocationSetting();\n+\t\tstorageLocationSetting.setBucket(BUCKET);\n+\t\tstorageLocationSetting.setStsEnabled(true);\n+\t\twhen(mockProjectSettingsManager.getStorageLocationSetting(STS_STORAGE_LOCATION_ID)).thenReturn(\n+\t\t\t\tstorageLocationSetting);\n+\n+\t\twhen(mockAuthManager.canAccess(USER_INFO, PARENT_ENTITY_ID, ObjectType.ENTITY, ACCESS_TYPE.UPLOAD))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2532bbb255ef96b6e7c5122b5a32da69bb755429"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDAxMDk1", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3951#pullrequestreview-363001095", "createdAt": "2020-02-22T01:58:18Z", "commit": {"oid": "2532bbb255ef96b6e7c5122b5a32da69bb755429"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMTo1ODoxOFrOFtI4zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMTo1OTo1MVrOFtI5Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3NTg1NA==", "bodyText": "From code review discussion, we wanted to make sure we included the following test cases:\n\ninaccessible.txt at the root of the S3 bucket\nbaseKey/owner.txt\nbaseKey/subfolder/file.txt\n\nShould test both listing the folder and getting the file.\nAlso, we don't need a second level of folders for the baseKey.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3951#discussion_r382875854", "createdAt": "2020-02-22T01:58:18Z", "author": {"login": "DwayneJengSage"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/sts/StsManagerImplAutowiredTest.java", "diffHunk": "@@ -0,0 +1,298 @@\n+package org.sagebionetworks.repo.manager.sts;\n+\n+import com.amazonaws.AmazonServiceException;\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicSessionCredentials;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.ListObjectsRequest;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Files;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.sagebionetworks.StackConfiguration;\n+import org.sagebionetworks.StackConfigurationSingleton;\n+import org.sagebionetworks.aws.SynapseS3Client;\n+import org.sagebionetworks.repo.manager.AuthenticationManager;\n+import org.sagebionetworks.repo.manager.EntityManager;\n+import org.sagebionetworks.repo.manager.ProjectSettingsManager;\n+import org.sagebionetworks.repo.manager.UserManager;\n+import org.sagebionetworks.repo.manager.file.FileHandleManager;\n+import org.sagebionetworks.repo.manager.file.LocalFileUploadRequest;\n+import org.sagebionetworks.repo.manager.file.MultipartManager;\n+import org.sagebionetworks.repo.model.AuthorizationConstants;\n+import org.sagebionetworks.repo.model.FileEntity;\n+import org.sagebionetworks.repo.model.Folder;\n+import org.sagebionetworks.repo.model.Project;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.auth.NewUser;\n+import org.sagebionetworks.repo.model.file.FileHandle;\n+import org.sagebionetworks.repo.model.file.S3FileHandle;\n+import org.sagebionetworks.repo.model.file.UploadType;\n+import org.sagebionetworks.repo.model.project.ExternalS3StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.ProjectSettingsType;\n+import org.sagebionetworks.repo.model.project.S3StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.UploadDestinationListSetting;\n+import org.sagebionetworks.repo.model.sts.StsCredentials;\n+import org.sagebionetworks.repo.model.sts.StsPermission;\n+import org.sagebionetworks.util.ContentDispositionUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(locations = { \"classpath:test-context.xml\" })\n+public class StsManagerImplAutowiredTest {\n+\tprivate static final StackConfiguration CONFIG = StackConfigurationSingleton.singleton();\n+\tprivate static final String EXTERNAL_S3_BUCKET = CONFIG.getExternalS3TestBucketName();\n+\tprivate static final String SYNAPSE_BUCKET = CONFIG.getS3Bucket();\n+\n+\t@Autowired\n+\tprivate AuthenticationManager authManager;\n+\n+\t@Autowired\n+\tprivate EntityManager entityManager;\n+\n+\t@Autowired\n+\tprivate FileHandleManager fileHandleManager;\n+\n+\t@Autowired\n+\tprivate MultipartManager multipartManager;\n+\n+\t@Autowired\n+\tprivate ProjectSettingsManager projectSettingsManager;\n+\n+\t@Autowired\n+\tprivate SynapseS3Client s3Client;\n+\n+\t@Autowired\n+\tprivate StsManager stsManager;\n+\n+\t@Autowired\n+\tpublic UserManager userManager;\n+\n+\tprivate List<FileHandle> fileHandlesToDelete;\n+\tprivate List<File> filesToDelete;\n+\tprivate String folderId;\n+\tprivate String projectId;\n+\tprivate UserInfo userInfo;\n+\tprivate String username;\n+\n+\t@BeforeEach\n+\tpublic void beforeEach() {\n+\t\t// Create test user.\n+\t\tNewUser user = new NewUser();\n+\t\tusername = UUID.randomUUID().toString();\n+\t\tuser.setEmail(username + \"@test.com\");\n+\t\tuser.setUserName(username);\n+\t\tuserInfo = userManager.getUserInfo(userManager.createUser(user));\n+\t\tuserInfo.getGroups().add(AuthorizationConstants.BOOTSTRAP_PRINCIPAL.CERTIFIED_USERS.getPrincipalId());\n+\n+\t\t// User must agree to terms of use to get download privileges (and hence access the STS API).\n+\t\tauthManager.setTermsOfUseAcceptance(userInfo.getId(), true);\n+\n+\t\t// Create a test project which we will need.\n+\t\tProject project = new Project();\n+\t\tprojectId = entityManager.createEntity(userInfo, project, null);\n+\n+\t\t// Create folder, which is required for STS.\n+\t\tFolder folder = new Folder();\n+\t\tfolder.setParentId(projectId);\n+\t\tfolderId = entityManager.createEntity(userInfo, folder, null);\n+\n+\t\t// Initialize lists of things to delete.\n+\t\tfileHandlesToDelete = new ArrayList<>();\n+\t\tfilesToDelete = new ArrayList<>();\n+\t}\n+\n+\t@AfterEach\n+\tpublic void afterEach() {\n+\t\t// Delete project.\n+\t\t//noinspection deprecation\n+\t\tentityManager.deleteEntity(userInfo, projectId);\n+\n+\t\t// Delete file handles.\n+\t\tfor (FileHandle fileHandle : fileHandlesToDelete) {\n+\t\t\tfileHandleManager.deleteFileHandle(userInfo, fileHandle.getId());\n+\t\t}\n+\n+\t\t// Delete local files.\n+\t\tfor (File file : filesToDelete) {\n+\t\t\tfile.delete();\n+\t\t}\n+\n+\t\t// Delete test user.\n+\t\tUserInfo adminUserInfo = userManager.getUserInfo(AuthorizationConstants.BOOTSTRAP_PRINCIPAL.THE_ADMIN_USER\n+\t\t\t\t.getPrincipalId());\n+\t\tuserManager.deletePrincipal(adminUserInfo, Long.parseLong(userInfo.getId().toString()));\n+\t}\n+\n+\t@Test\n+\tpublic void externalS3() throws Exception {\n+\t\t// Setup - In our test folder, create an inner folder. STS will be configured on the inner folder. STS\n+\t\t// credentials will be able to access files in the inner folder, but not the outer folder.\n+\t\tString outerFolderPath = \"integration-test/\" + \"StsManagerImplAutowiredTest-\" + UUID.randomUUID().toString();\n+\t\tString innerFolderPath = outerFolderPath + \"/storage-location-root\";\n+\t\tuploadFileToS3(outerFolderPath, \"inaccessible.txt\", \"Dummy file content\");\n+\t\tuploadFileToS3(innerFolderPath, \"owner.txt\", username);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2532bbb255ef96b6e7c5122b5a32da69bb755429"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3NTk5OA==", "bodyText": "For Synapse storage, we wanted to test both a FileHandle in our storage location (accessible) and a FileHandle in a different storage location (inaccessible).", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3951#discussion_r382875998", "createdAt": "2020-02-22T01:59:51Z", "author": {"login": "DwayneJengSage"}, "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/sts/StsManagerImplAutowiredTest.java", "diffHunk": "@@ -0,0 +1,298 @@\n+package org.sagebionetworks.repo.manager.sts;\n+\n+import com.amazonaws.AmazonServiceException;\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicSessionCredentials;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.ListObjectsRequest;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Files;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.sagebionetworks.StackConfiguration;\n+import org.sagebionetworks.StackConfigurationSingleton;\n+import org.sagebionetworks.aws.SynapseS3Client;\n+import org.sagebionetworks.repo.manager.AuthenticationManager;\n+import org.sagebionetworks.repo.manager.EntityManager;\n+import org.sagebionetworks.repo.manager.ProjectSettingsManager;\n+import org.sagebionetworks.repo.manager.UserManager;\n+import org.sagebionetworks.repo.manager.file.FileHandleManager;\n+import org.sagebionetworks.repo.manager.file.LocalFileUploadRequest;\n+import org.sagebionetworks.repo.manager.file.MultipartManager;\n+import org.sagebionetworks.repo.model.AuthorizationConstants;\n+import org.sagebionetworks.repo.model.FileEntity;\n+import org.sagebionetworks.repo.model.Folder;\n+import org.sagebionetworks.repo.model.Project;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.auth.NewUser;\n+import org.sagebionetworks.repo.model.file.FileHandle;\n+import org.sagebionetworks.repo.model.file.S3FileHandle;\n+import org.sagebionetworks.repo.model.file.UploadType;\n+import org.sagebionetworks.repo.model.project.ExternalS3StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.ProjectSettingsType;\n+import org.sagebionetworks.repo.model.project.S3StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.UploadDestinationListSetting;\n+import org.sagebionetworks.repo.model.sts.StsCredentials;\n+import org.sagebionetworks.repo.model.sts.StsPermission;\n+import org.sagebionetworks.util.ContentDispositionUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(locations = { \"classpath:test-context.xml\" })\n+public class StsManagerImplAutowiredTest {\n+\tprivate static final StackConfiguration CONFIG = StackConfigurationSingleton.singleton();\n+\tprivate static final String EXTERNAL_S3_BUCKET = CONFIG.getExternalS3TestBucketName();\n+\tprivate static final String SYNAPSE_BUCKET = CONFIG.getS3Bucket();\n+\n+\t@Autowired\n+\tprivate AuthenticationManager authManager;\n+\n+\t@Autowired\n+\tprivate EntityManager entityManager;\n+\n+\t@Autowired\n+\tprivate FileHandleManager fileHandleManager;\n+\n+\t@Autowired\n+\tprivate MultipartManager multipartManager;\n+\n+\t@Autowired\n+\tprivate ProjectSettingsManager projectSettingsManager;\n+\n+\t@Autowired\n+\tprivate SynapseS3Client s3Client;\n+\n+\t@Autowired\n+\tprivate StsManager stsManager;\n+\n+\t@Autowired\n+\tpublic UserManager userManager;\n+\n+\tprivate List<FileHandle> fileHandlesToDelete;\n+\tprivate List<File> filesToDelete;\n+\tprivate String folderId;\n+\tprivate String projectId;\n+\tprivate UserInfo userInfo;\n+\tprivate String username;\n+\n+\t@BeforeEach\n+\tpublic void beforeEach() {\n+\t\t// Create test user.\n+\t\tNewUser user = new NewUser();\n+\t\tusername = UUID.randomUUID().toString();\n+\t\tuser.setEmail(username + \"@test.com\");\n+\t\tuser.setUserName(username);\n+\t\tuserInfo = userManager.getUserInfo(userManager.createUser(user));\n+\t\tuserInfo.getGroups().add(AuthorizationConstants.BOOTSTRAP_PRINCIPAL.CERTIFIED_USERS.getPrincipalId());\n+\n+\t\t// User must agree to terms of use to get download privileges (and hence access the STS API).\n+\t\tauthManager.setTermsOfUseAcceptance(userInfo.getId(), true);\n+\n+\t\t// Create a test project which we will need.\n+\t\tProject project = new Project();\n+\t\tprojectId = entityManager.createEntity(userInfo, project, null);\n+\n+\t\t// Create folder, which is required for STS.\n+\t\tFolder folder = new Folder();\n+\t\tfolder.setParentId(projectId);\n+\t\tfolderId = entityManager.createEntity(userInfo, folder, null);\n+\n+\t\t// Initialize lists of things to delete.\n+\t\tfileHandlesToDelete = new ArrayList<>();\n+\t\tfilesToDelete = new ArrayList<>();\n+\t}\n+\n+\t@AfterEach\n+\tpublic void afterEach() {\n+\t\t// Delete project.\n+\t\t//noinspection deprecation\n+\t\tentityManager.deleteEntity(userInfo, projectId);\n+\n+\t\t// Delete file handles.\n+\t\tfor (FileHandle fileHandle : fileHandlesToDelete) {\n+\t\t\tfileHandleManager.deleteFileHandle(userInfo, fileHandle.getId());\n+\t\t}\n+\n+\t\t// Delete local files.\n+\t\tfor (File file : filesToDelete) {\n+\t\t\tfile.delete();\n+\t\t}\n+\n+\t\t// Delete test user.\n+\t\tUserInfo adminUserInfo = userManager.getUserInfo(AuthorizationConstants.BOOTSTRAP_PRINCIPAL.THE_ADMIN_USER\n+\t\t\t\t.getPrincipalId());\n+\t\tuserManager.deletePrincipal(adminUserInfo, Long.parseLong(userInfo.getId().toString()));\n+\t}\n+\n+\t@Test\n+\tpublic void externalS3() throws Exception {\n+\t\t// Setup - In our test folder, create an inner folder. STS will be configured on the inner folder. STS\n+\t\t// credentials will be able to access files in the inner folder, but not the outer folder.\n+\t\tString outerFolderPath = \"integration-test/\" + \"StsManagerImplAutowiredTest-\" + UUID.randomUUID().toString();\n+\t\tString innerFolderPath = outerFolderPath + \"/storage-location-root\";\n+\t\tuploadFileToS3(outerFolderPath, \"inaccessible.txt\", \"Dummy file content\");\n+\t\tuploadFileToS3(innerFolderPath, \"owner.txt\", username);\n+\n+\t\t// Create StsStorageLocation.\n+\t\tExternalS3StorageLocationSetting storageLocationSetting = new ExternalS3StorageLocationSetting();\n+\t\tstorageLocationSetting.setBaseKey(innerFolderPath);\n+\t\tstorageLocationSetting.setBucket(EXTERNAL_S3_BUCKET);\n+\t\tstorageLocationSetting.setStsEnabled(true);\n+\t\tstorageLocationSetting.setUploadType(UploadType.S3);\n+\t\tstorageLocationSetting = projectSettingsManager.createStorageLocationSetting(userInfo, storageLocationSetting);\n+\n+\t\tapplyStorageLocationToFolder(storageLocationSetting.getStorageLocationId());\n+\n+\t\t// Get read-only credentials.\n+\t\tAmazonS3 readOnlyTempClient = createS3ClientFromTempStsCredentials(StsPermission.read_only);\n+\n+\t\t// Validate we can list the bucket from the base key. This call does not throw.\n+\t\tListObjectsRequest listObjectsRequest = new ListObjectsRequest().withBucketName(EXTERNAL_S3_BUCKET)\n+\t\t\t\t.withDelimiter(\"/\").withPrefix(innerFolderPath);\n+\t\treadOnlyTempClient.listObjects(listObjectsRequest);\n+\n+\t\t// Validate can read the owner.txt. The get call will not throw.\n+\t\treadOnlyTempClient.getObject(EXTERNAL_S3_BUCKET, innerFolderPath + \"/owner.txt\");\n+\n+\t\t// Validate cannot get the inaccessible.txt in the outer folder. This call will throw.\n+\t\tAmazonServiceException ex = assertThrows(AmazonServiceException.class, () -> readOnlyTempClient.getObject(\n+\t\t\t\tEXTERNAL_S3_BUCKET, outerFolderPath + \"/inaccessible.txt\"));\n+\t\tassertEquals(403, ex.getStatusCode());\n+\n+\t\t// Validate cannot write to S3. This call will throw.\n+\t\tString filenameToWrite = RandomStringUtils.randomAlphabetic(4) + \".txt\";\n+\t\tex = assertThrows(AmazonServiceException.class, () -> readOnlyTempClient.putObject(\n+\t\t\t\tEXTERNAL_S3_BUCKET, innerFolderPath + \"/\" + filenameToWrite, \"lorem ipsum\"));\n+\t\tassertEquals(403, ex.getStatusCode());\n+\n+\t\t// Get read-write credentials.\n+\t\tAmazonS3 readWriteTempClient = createS3ClientFromTempStsCredentials(StsPermission.read_write);\n+\n+\t\t// Validate we can list the bucket from the base key. This call does not throw.\n+\t\tlistObjectsRequest = new ListObjectsRequest().withBucketName(EXTERNAL_S3_BUCKET)\n+\t\t\t\t.withDelimiter(\"/\").withPrefix(innerFolderPath);\n+\t\treadWriteTempClient.listObjects(listObjectsRequest);\n+\n+\t\t// Validate can read the owner.txt. The get call will not throw.\n+\t\treadWriteTempClient.getObject(EXTERNAL_S3_BUCKET, innerFolderPath + \"/owner.txt\");\n+\n+\t\t// Validate cannot get the inaccessible.txt in the outer folder. This call will throw.\n+\t\tex = assertThrows(AmazonServiceException.class, () -> readWriteTempClient.getObject(\n+\t\t\t\tEXTERNAL_S3_BUCKET, outerFolderPath + \"/inaccessible.txt\"));\n+\t\tassertEquals(403, ex.getStatusCode());\n+\n+\t\t// Validate can write to S3. This call will not throw.\n+\t\treadWriteTempClient.putObject(EXTERNAL_S3_BUCKET, innerFolderPath + \"/\" + filenameToWrite,\n+\t\t\t\t\"lorem ipsum\");\n+\t}\n+\n+\t@Test\n+\tpublic void synapseStorage() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2532bbb255ef96b6e7c5122b5a32da69bb755429"}, "originalPosition": 209}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67ad830d54233162a9b17c9b26e2380dd62b1daa", "author": {"user": {"login": "DwayneJengSage", "name": "Dwayne Jeng"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/67ad830d54233162a9b17c9b26e2380dd62b1daa", "committedDate": "2020-02-26T21:20:38Z", "message": "code review responses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1abd070dca25a910e8b7a8e63a2f27415c3e45ad", "author": {"user": {"login": "DwayneJengSage", "name": "Dwayne Jeng"}}, "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/1abd070dca25a910e8b7a8e63a2f27415c3e45ad", "committedDate": "2020-02-26T21:22:26Z", "message": "delete test that shouldn't have been comitted"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1OTQ0NzA0", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3951#pullrequestreview-365944704", "createdAt": "2020-02-27T19:39:54Z", "commit": {"oid": "1abd070dca25a910e8b7a8e63a2f27415c3e45ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4811, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}