{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NzkzMzUw", "number": 4021, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMDo0NjowM1rOD29n8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMTowMToxMVrOD292HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTU5MzQ3OnYy", "diffSide": "RIGHT", "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMDo0NjowM1rOGM9saA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMDo0NjowM1rOGM9saA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI0Njg4OA==", "bodyText": "Convert EntityField to be more generic -> ObjectField, and use it statically in many places, but not all.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4021#discussion_r416246888", "createdAt": "2020-04-28T00:46:03Z", "author": {"login": "john-hill"}, "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java", "diffHunk": "@@ -934,6 +938,37 @@ public void createViewSnapshotFromEntityReplication(ObjectType objectType, Long\n \t\t\toutputStream.writeNext(row);\r\n \t\t});\r\n \t}\r\n+\t\r\n+\t// Translates the Column Model schema into a column metadata schema, that maps to the object/annotation replication index\r\n+\tList<ColumnMetadata> translateSchema(ObjectType objectType, List<ColumnModel> schema) {\r\n+\t\treturn schema.stream()\r\n+\t\t\t.map((ColumnModel columnModel) -> translateColumnModel(objectType, columnModel))\r\n+\t\t\t.collect(Collectors.toList());\r\n+\t}\r\n+\t\r\n+\tColumnMetadata translateColumnModel(ObjectType objectType, ColumnModel model) {\r\n+\t\t// First determine if this an object column or an annotation\r\n+\t\tOptional<EntityField> entityField = findObjectField(objectType, model);\r\n+\t\t\r\n+\t\tString selectColumnForId = SQLUtils.getColumnNameForId(model.getId());\r\n+\t\tboolean isObjectReplicationField;\r\n+\t\tString selectColumnName;\r\n+\t\t\r\n+\t\tif (entityField.isPresent()) {\r\n+\t\t\tisObjectReplicationField = true;\r\n+\t\t\tselectColumnName = entityField.get().getDatabaseColumnName();\r\n+\t\t} else {\r\n+\t\t\tisObjectReplicationField = false;\r\n+\t\t\tselectColumnName = SQLUtils.translateColumnTypeToAnnotationValueName(model.getColumnType());\r\n+\t\t}\r\n+\t\t\r\n+\t\treturn new ColumnMetadata(model, selectColumnName, selectColumnForId, isObjectReplicationField);\r\n+\t}\r\n+\t\r\n+\tOptional<EntityField> findObjectField(ObjectType objectType, ColumnModel model) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58f16819ace774610aa83eb54a7440df50279a5"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTYyOTcyOnYy", "diffSide": "RIGHT", "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMTowMToxMVrOGM-AOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMTowMToxMVrOGM-AOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1MTk2MA==", "bodyText": "needs a test or revert to the tested code.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4021#discussion_r416251960", "createdAt": "2020-04-28T01:01:11Z", "author": {"login": "john-hill"}, "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java", "diffHunk": "@@ -934,6 +938,37 @@ public void createViewSnapshotFromEntityReplication(ObjectType objectType, Long\n \t\t\toutputStream.writeNext(row);\r\n \t\t});\r\n \t}\r\n+\t\r\n+\t// Translates the Column Model schema into a column metadata schema, that maps to the object/annotation replication index\r\n+\tList<ColumnMetadata> translateSchema(ObjectType objectType, List<ColumnModel> schema) {\r\n+\t\treturn schema.stream()\r\n+\t\t\t.map((ColumnModel columnModel) -> translateColumnModel(objectType, columnModel))\r\n+\t\t\t.collect(Collectors.toList());\r\n+\t}\r\n+\t\r\n+\tColumnMetadata translateColumnModel(ObjectType objectType, ColumnModel model) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58f16819ace774610aa83eb54a7440df50279a5"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3008, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}