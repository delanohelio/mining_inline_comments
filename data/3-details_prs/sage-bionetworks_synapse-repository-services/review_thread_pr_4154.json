{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0ODA2MDg3", "number": 4154, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTowNDo1MFrOEW9p_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo0NDo1OFrOEXAFaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTE0MzAxOnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/EntityManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTowNDo1MFrOG-fwQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTowNDo1MFrOG-fwQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4NTE1NA==", "bodyText": "We should consider sending out a similar notification when the schema itself is updated after figuring out the entities that are touched by the change.", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468185154", "createdAt": "2020-08-10T21:04:50Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/EntityManagerImpl.java", "diffHunk": "@@ -560,25 +570,45 @@ public JsonSchemaObjectBinding bindSchemaToEntity(UserInfo userInfo, BindSchemaT\n \t\tValidateArgument.required(request.getSchema$id(), \"request.schema$id\");\n \t\tentityPermissionsManager.hasAccess(request.getEntityId(), ACCESS_TYPE.UPDATE, userInfo)\n \t\t\t\t.checkAuthorizationOrElseThrow();\n-\t\treturn jsonSchemaManager.bindSchemaToObject(userInfo.getId(), request.getSchema$id(),\n+\t\tJsonSchemaObjectBinding binding = jsonSchemaManager.bindSchemaToObject(userInfo.getId(), request.getSchema$id(),\n \t\t\t\tKeyFactory.stringToKey(request.getEntityId()), BoundObjectType.entity);\n+\t\tsendEntityUpdateNotifications(request.getEntityId());\n+\t\treturn binding;\n \t}\n \n \t@Override\n \tpublic JsonSchemaObjectBinding getBoundSchema(UserInfo userInfo, String id) {\n \t\tValidateArgument.required(userInfo, \"userInfo\");\n \t\tValidateArgument.required(id, \"id\");\n \t\tentityPermissionsManager.hasAccess(id, ACCESS_TYPE.READ, userInfo).checkAuthorizationOrElseThrow();\n-\t\tLong boundEntityId = nodeManager.findFirstBoundJsonSchema(KeyFactory.stringToKey(id));\n+\t\treturn getBoundSchema(id);\n+\t}\n+\t\n+\t@Override\n+\tpublic JsonSchemaObjectBinding getBoundSchema(String entityId) {\n+\t\tLong boundEntityId = nodeManager.findFirstBoundJsonSchema(KeyFactory.stringToKey(entityId));\n \t\treturn jsonSchemaManager.getJsonSchemaObjectBinding(boundEntityId, BoundObjectType.entity);\n \t}\n+\t\n \n+\t@WriteTransaction\n \t@Override\n \tpublic void clearBoundSchema(UserInfo userInfo, String id) {\n \t\tValidateArgument.required(userInfo, \"userInfo\");\n \t\tValidateArgument.required(id, \"id\");\n \t\tentityPermissionsManager.hasAccess(id, ACCESS_TYPE.DELETE, userInfo).checkAuthorizationOrElseThrow();\n \t\tjsonSchemaManager.clearBoundSchema(KeyFactory.stringToKey(id), BoundObjectType.entity);\n+\t\tsendEntityUpdateNotifications(id);\n+\t}\n+\t\n+\tvoid sendEntityUpdateNotifications(String entityId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe779e7cb812854a47b70f3921dbeeb1f31767e"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTE0OTg0OnYy", "diffSide": "RIGHT", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/schema/EntitySchemaValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTowNzowMVrOG-f0aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTowNzowMVrOG-f0aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4NjIxOQ==", "bodyText": "You might not need to marker interface if you do not have additional functionality, we can simply implement the ObjectSchemaValidator", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468186219", "createdAt": "2020-08-10T21:07:01Z", "author": {"login": "marcomarasca"}, "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/schema/EntitySchemaValidator.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.sagebionetworks.repo.manager.schema;\n+\n+public interface EntitySchemaValidator extends ObjectSchemaValidator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe779e7cb812854a47b70f3921dbeeb1f31767e"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTE3MzU5OnYy", "diffSide": "RIGHT", "path": "lib/models/src/main/java/org/sagebionetworks/repo/model/message/TransactionalMessenger.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToxNTowMlrOG-gC7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToxNTowMlrOG-gC7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4OTkzMg==", "bodyText": "We might want to deal with all this deprecation/new methods in this class", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468189932", "createdAt": "2020-08-10T21:15:02Z", "author": {"login": "marcomarasca"}, "path": "lib/models/src/main/java/org/sagebionetworks/repo/model/message/TransactionalMessenger.java", "diffHunk": "@@ -33,6 +33,8 @@\n \t@Deprecated\n \tpublic void sendMessageAfterCommit(String objectId, ObjectType objectType, String etag, ChangeType changeType);\n \t\n+\tvoid sendMessageAfterCommit(String objectId, ObjectType objectType, ChangeType changeType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe779e7cb812854a47b70f3921dbeeb1f31767e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTIxNTM2OnYy", "diffSide": "RIGHT", "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/schema/ValidationResults.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyODoyNVrOG-gbaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyODoyNVrOG-gbaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NjIwMA==", "bodyText": "We might want to consider having a status that indicates that the validation is UNKNOWN or READY and throw a not found when a validation is not even possible (e.g. the schema is not bound).", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468196200", "createdAt": "2020-08-10T21:28:25Z", "author": {"login": "marcomarasca"}, "path": "lib/lib-auto-generated/src/main/resources/schema/org/sagebionetworks/repo/model/schema/ValidationResults.json", "diffHunk": "@@ -13,6 +13,10 @@\n \t\t\t\"type\": \"string\",\n \t\t\t\"description\": \"The etag of the object at the time of validation.  Note: If this etag does not match the current etag of the object then these validation results should be considered out of date.\"\n \t\t},\n+\t\t\"schema$id\": {\n+\t\t\t\"type\": \"string\",\n+\t\t\t\"description\": \"The $id of the schema that the object was validated against.\"\n+\t\t},\n \t\t\"isValid\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe779e7cb812854a47b70f3921dbeeb1f31767e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTUxNjEwOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/SchemaValidationResultDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzozMzoxMlrOG-jNsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzozMzoxMlrOG-jNsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0MTg0MQ==", "bodyText": "Could use a lambda", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468241841", "createdAt": "2020-08-10T23:33:12Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/SchemaValidationResultDaoImpl.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.sagebionetworks.repo.model.dbo.schema;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_ALL_ERRORS;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_ERROR_MESSAGE;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_EXCEPTION;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_IS_VALID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_ETAG;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_TYPE;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_SCHEMA_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_VALIDATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_SCHEMA_VALIDATION_RESULTS;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.sagebionetworks.repo.model.DatastoreException;\n+import org.sagebionetworks.repo.model.dbo.DBOBasicDao;\n+import org.sagebionetworks.repo.model.jdo.KeyFactory;\n+import org.sagebionetworks.repo.model.schema.ObjectType;\n+import org.sagebionetworks.repo.model.schema.ValidationResults;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.schema.adapter.JSONObjectAdapter;\n+import org.sagebionetworks.schema.adapter.JSONObjectAdapterException;\n+import org.sagebionetworks.schema.adapter.org.json.JSONObjectAdapterImpl;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class SchemaValidationResultDaoImpl implements SchemaValidationResultDao {\n+\n+\tprivate JdbcTemplate jdbcTemplate;\n+\tprivate DBOBasicDao basicDao;\n+\n+\t@Autowired\n+\tpublic SchemaValidationResultDaoImpl(JdbcTemplate jdbcTemplate, DBOBasicDao basicDao) {\n+\t\tsuper();\n+\t\tthis.jdbcTemplate = jdbcTemplate;\n+\t\tthis.basicDao = basicDao;\n+\t}\n+\n+\tstatic RowMapper<ValidationResults> MAPPER = new RowMapper<ValidationResults>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe779e7cb812854a47b70f3921dbeeb1f31767e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTUxOTMzOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/resources/schema/JsonSchemaValidationResults-ddl.sql", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzozNDo0NVrOG-jPng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzozNDo0NVrOG-jPng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0MjMzNA==", "bodyText": "NOT NULL", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468242334", "createdAt": "2020-08-10T23:34:45Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/resources/schema/JsonSchemaValidationResults-ddl.sql", "diffHunk": "@@ -0,0 +1,12 @@\n+CREATE TABLE IF NOT EXISTS `JSON_SCHEMA_VALIDATION_RESULTS` (\n+  `OBJECT_ID` BIGINT NOT NULL,\n+  `OBJECT_TYPE` ENUM ('entity'),\n+  `OBJECT_ETAG` char(36) NOT NULL,\n+  `SCHEMA_ID` VARCHAR(753) CHARACTER SET ascii COLLATE ascii_general_ci DEFAULT NULL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe779e7cb812854a47b70f3921dbeeb1f31767e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTUxOTYwOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/resources/schema/JsonSchemaValidationResults-ddl.sql", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzozNDo1M1rOG-jPww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzozNDo1M1rOG-jPww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0MjM3MQ==", "bodyText": "NOT NULL", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468242371", "createdAt": "2020-08-10T23:34:53Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/resources/schema/JsonSchemaValidationResults-ddl.sql", "diffHunk": "@@ -0,0 +1,12 @@\n+CREATE TABLE IF NOT EXISTS `JSON_SCHEMA_VALIDATION_RESULTS` (\n+  `OBJECT_ID` BIGINT NOT NULL,\n+  `OBJECT_TYPE` ENUM ('entity'),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe779e7cb812854a47b70f3921dbeeb1f31767e"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTUyMDI4OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/resources/schema/JsonSchemaValidationResults-ddl.sql", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzozNTowNlrOG-jQGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzozNTowNlrOG-jQGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0MjQ1Ng==", "bodyText": "BOOLEAN?", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468242456", "createdAt": "2020-08-10T23:35:06Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/resources/schema/JsonSchemaValidationResults-ddl.sql", "diffHunk": "@@ -0,0 +1,12 @@\n+CREATE TABLE IF NOT EXISTS `JSON_SCHEMA_VALIDATION_RESULTS` (\n+  `OBJECT_ID` BIGINT NOT NULL,\n+  `OBJECT_TYPE` ENUM ('entity'),\n+  `OBJECT_ETAG` char(36) NOT NULL,\n+  `SCHEMA_ID` VARCHAR(753) CHARACTER SET ascii COLLATE ascii_general_ci DEFAULT NULL,\n+  `IS_VALID` TINYINT NOT NULL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe779e7cb812854a47b70f3921dbeeb1f31767e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTUzNTY5OnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/SchemaValidationResultDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo0MTo1N1rOG-jYyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo0MTo1N1rOG-jYyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NDY4MA==", "bodyText": "IllegalStateException might be more appropriate", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468244680", "createdAt": "2020-08-10T23:41:57Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/SchemaValidationResultDaoImpl.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.sagebionetworks.repo.model.dbo.schema;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_ALL_ERRORS;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_ERROR_MESSAGE;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_EXCEPTION;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_IS_VALID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_ETAG;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_TYPE;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_SCHEMA_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_VALIDATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_SCHEMA_VALIDATION_RESULTS;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.sagebionetworks.repo.model.DatastoreException;\n+import org.sagebionetworks.repo.model.dbo.DBOBasicDao;\n+import org.sagebionetworks.repo.model.jdo.KeyFactory;\n+import org.sagebionetworks.repo.model.schema.ObjectType;\n+import org.sagebionetworks.repo.model.schema.ValidationResults;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.schema.adapter.JSONObjectAdapter;\n+import org.sagebionetworks.schema.adapter.JSONObjectAdapterException;\n+import org.sagebionetworks.schema.adapter.org.json.JSONObjectAdapterImpl;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class SchemaValidationResultDaoImpl implements SchemaValidationResultDao {\n+\n+\tprivate JdbcTemplate jdbcTemplate;\n+\tprivate DBOBasicDao basicDao;\n+\n+\t@Autowired\n+\tpublic SchemaValidationResultDaoImpl(JdbcTemplate jdbcTemplate, DBOBasicDao basicDao) {\n+\t\tsuper();\n+\t\tthis.jdbcTemplate = jdbcTemplate;\n+\t\tthis.basicDao = basicDao;\n+\t}\n+\n+\tstatic RowMapper<ValidationResults> MAPPER = new RowMapper<ValidationResults>() {\n+\n+\t\t@Override\n+\t\tpublic ValidationResults mapRow(ResultSet rs, int rowNum) throws SQLException {\n+\t\t\tValidationResults dto = new ValidationResults();\n+\t\t\tString allErrorsJson = rs.getString(COL_JSON_SCHEMA_VALIDATION_ALL_ERRORS);\n+\t\t\tString validationExceptionJson = rs.getString(COL_JSON_SCHEMA_VALIDATION_EXCEPTION);\n+\t\t\tJSONObject json = new JSONObject();\n+\t\t\tif (allErrorsJson != null) {\n+\t\t\t\tjson.put(\"allValidationMessages\", new JSONArray(allErrorsJson));\n+\t\t\t}\n+\t\t\tif (validationExceptionJson != null) {\n+\t\t\t\tjson.put(\"validationException\", new JSONObject(validationExceptionJson));\n+\t\t\t}\n+\t\t\ttry {\n+\t\t\t\tdto.initializeFromJSONObject(new JSONObjectAdapterImpl(json));\n+\t\t\t} catch (JSONObjectAdapterException e) {\n+\t\t\t\tthrow new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe779e7cb812854a47b70f3921dbeeb1f31767e"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTU0MDkxOnYy", "diffSide": "RIGHT", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/SchemaValidationResultDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo0NDo1OFrOG-jb5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo0NDo1OFrOG-jb5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NTQ3OQ==", "bodyText": "You might want to extract the fields as constants", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4154#discussion_r468245479", "createdAt": "2020-08-10T23:44:58Z", "author": {"login": "marcomarasca"}, "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/SchemaValidationResultDaoImpl.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.sagebionetworks.repo.model.dbo.schema;\n+\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_ALL_ERRORS;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_ERROR_MESSAGE;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_EXCEPTION;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_IS_VALID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_ETAG;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_OBJECT_TYPE;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_SCHEMA_ID;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.COL_JSON_SCHEMA_VALIDATION_VALIDATED_ON;\n+import static org.sagebionetworks.repo.model.query.jdo.SqlConstants.TABLE_SCHEMA_VALIDATION_RESULTS;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.sagebionetworks.repo.model.DatastoreException;\n+import org.sagebionetworks.repo.model.dbo.DBOBasicDao;\n+import org.sagebionetworks.repo.model.jdo.KeyFactory;\n+import org.sagebionetworks.repo.model.schema.ObjectType;\n+import org.sagebionetworks.repo.model.schema.ValidationResults;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.schema.adapter.JSONObjectAdapter;\n+import org.sagebionetworks.schema.adapter.JSONObjectAdapterException;\n+import org.sagebionetworks.schema.adapter.org.json.JSONObjectAdapterImpl;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class SchemaValidationResultDaoImpl implements SchemaValidationResultDao {\n+\n+\tprivate JdbcTemplate jdbcTemplate;\n+\tprivate DBOBasicDao basicDao;\n+\n+\t@Autowired\n+\tpublic SchemaValidationResultDaoImpl(JdbcTemplate jdbcTemplate, DBOBasicDao basicDao) {\n+\t\tsuper();\n+\t\tthis.jdbcTemplate = jdbcTemplate;\n+\t\tthis.basicDao = basicDao;\n+\t}\n+\n+\tstatic RowMapper<ValidationResults> MAPPER = new RowMapper<ValidationResults>() {\n+\n+\t\t@Override\n+\t\tpublic ValidationResults mapRow(ResultSet rs, int rowNum) throws SQLException {\n+\t\t\tValidationResults dto = new ValidationResults();\n+\t\t\tString allErrorsJson = rs.getString(COL_JSON_SCHEMA_VALIDATION_ALL_ERRORS);\n+\t\t\tString validationExceptionJson = rs.getString(COL_JSON_SCHEMA_VALIDATION_EXCEPTION);\n+\t\t\tJSONObject json = new JSONObject();\n+\t\t\tif (allErrorsJson != null) {\n+\t\t\t\tjson.put(\"allValidationMessages\", new JSONArray(allErrorsJson));\n+\t\t\t}\n+\t\t\tif (validationExceptionJson != null) {\n+\t\t\t\tjson.put(\"validationException\", new JSONObject(validationExceptionJson));\n+\t\t\t}\n+\t\t\ttry {\n+\t\t\t\tdto.initializeFromJSONObject(new JSONObjectAdapterImpl(json));\n+\t\t\t} catch (JSONObjectAdapterException e) {\n+\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t}\n+\t\t\tdto.setObjectType(ObjectType.valueOf(rs.getString(COL_JSON_SCHEMA_VALIDATION_OBJECT_TYPE)));\n+\t\t\tLong objectIdLong = rs.getLong(COL_JSON_SCHEMA_VALIDATION_OBJECT_ID);\n+\t\t\tif (ObjectType.entity.equals(dto.getObjectType())) {\n+\t\t\t\tdto.setObjectId(KeyFactory.keyToString(objectIdLong));\n+\t\t\t} else {\n+\t\t\t\tdto.setObjectId(objectIdLong.toString());\n+\t\t\t}\n+\t\t\tdto.setObjectEtag(rs.getString(COL_JSON_SCHEMA_VALIDATION_OBJECT_ETAG));\n+\t\t\tdto.setSchema$id(rs.getString(COL_JSON_SCHEMA_VALIDATION_SCHEMA_ID));\n+\t\t\tdto.setIsValid(rs.getBoolean(COL_JSON_SCHEMA_VALIDATION_IS_VALID));\n+\t\t\tdto.setValidatedOn(rs.getTimestamp(COL_JSON_SCHEMA_VALIDATION_VALIDATED_ON));\n+\t\t\tdto.setValidationErrorMessage(rs.getString(COL_JSON_SCHEMA_VALIDATION_ERROR_MESSAGE));\n+\t\t\treturn dto;\n+\t\t}\n+\t};\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic void clearResults(String objectid, ObjectType objectType) {\n+\t\tValidateArgument.required(objectid, \"objectId\");\n+\t\tValidateArgument.required(objectType, \"objectType\");\n+\t\tjdbcTemplate.update(\n+\t\t\t\t\"DELETE FROM \" + TABLE_SCHEMA_VALIDATION_RESULTS + \" WHERE \" + COL_JSON_SCHEMA_VALIDATION_OBJECT_ID\n+\t\t\t\t\t\t+ \" = ? AND \" + COL_JSON_SCHEMA_VALIDATION_OBJECT_TYPE + \" = ?\",\n+\t\t\t\tKeyFactory.stringToKey(objectid), objectType.name());\n+\t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic void createOrUpdateResults(ValidationResults results) {\n+\t\tDBOSchemaValidationResults dbo = translateDTOtoDBO(results);\n+\t\tbasicDao.createOrUpdate(dbo);\n+\t}\n+\n+\t/**\n+\t * Translate from the given DTO to a DBO.\n+\t * \n+\t * @param results\n+\t * @return\n+\t */\n+\tstatic DBOSchemaValidationResults translateDTOtoDBO(ValidationResults results) {\n+\t\tValidateArgument.required(results, \"results\");\n+\t\tValidateArgument.required(results.getObjectId(), \"results.objectId\");\n+\t\tValidateArgument.required(results.getObjectType(), \"results.objectType\");\n+\t\tValidateArgument.required(results.getObjectEtag(), \"results.objectEtag\");\n+\t\tValidateArgument.required(results.getSchema$id(), \"results.schema$id\");\n+\t\tValidateArgument.required(results.getIsValid(), \"results.isValid\");\n+\t\tValidateArgument.required(results.getValidatedOn(), \"results.validateOn\");\n+\n+\t\tJSONObject json = new JSONObject();\n+\t\tJSONObjectAdapter adapter = new JSONObjectAdapterImpl(json);\n+\t\ttry {\n+\t\t\tresults.writeToJSONObject(adapter);\n+\t\t} catch (JSONObjectAdapterException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t\tDBOSchemaValidationResults dbo = new DBOSchemaValidationResults();\n+\t\tdbo.setObjectId(KeyFactory.stringToKey(results.getObjectId()));\n+\t\tdbo.setObjectType(results.getObjectType().toString());\n+\t\tdbo.setObjectEtag(results.getObjectEtag());\n+\t\tdbo.setSchema$id(results.getSchema$id());\n+\t\tdbo.setIsValid(results.getIsValid());\n+\t\tdbo.setValidatedOn(new Timestamp(results.getValidatedOn().getTime()));\n+\t\tdbo.setErrorMessage(results.getValidationErrorMessage());\n+\t\tif (json.has(\"allValidationMessages\")) {\n+\t\t\tJSONArray allMessages = json.getJSONArray(\"allValidationMessages\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe779e7cb812854a47b70f3921dbeeb1f31767e"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2951, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}