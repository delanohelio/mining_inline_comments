{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNTk4NzQ0", "number": 1005, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODo0OTo1NVrOD-Hq5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODo0OTo1NVrOD-Hq5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDYzOTc1OnYy", "diffSide": "RIGHT", "path": "tag-expressions/java/src/main/java/io/cucumber/tagexpressions/TagExpressionParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODo0OTo1NVrOGYBnGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODo1NToxMVrOGYB09Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg0NTQwMg==", "bodyText": "I'd love to be rid of this bit of mutable state.\nPerhaps we can do this:\nExpression exp = TagExpressionParser.parse(\"@food\");\n\nAnd then internally\npublic static Expression parse(String infix){\n  return new TagExpressionParser(infix).parse();\n}", "url": "https://github.com/cucumber/common/pull/1005#discussion_r427845402", "createdAt": "2020-05-20T08:49:55Z", "author": {"login": "mpkorstanje"}, "path": "tag-expressions/java/src/main/java/io/cucumber/tagexpressions/TagExpressionParser.java", "diffHunk": "@@ -21,15 +21,19 @@\n         put(\"not\", 2);\n     }};\n     private static final char ESCAPING_CHAR = '\\\\';\n+    private String infix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eefdeaba6b5bfaf09f36c63978c636c8c901d6e4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg0ODI3MQ==", "bodyText": "That would be nice but I needed the mutable state because the infix is needed in more than one function and I did not initially want to pass that around to multiple functions when something simple would work.  I could pass the infix string around but that seems not good as well.", "url": "https://github.com/cucumber/common/pull/1005#discussion_r427848271", "createdAt": "2020-05-20T08:54:10Z", "author": {"login": "cyocum"}, "path": "tag-expressions/java/src/main/java/io/cucumber/tagexpressions/TagExpressionParser.java", "diffHunk": "@@ -21,15 +21,19 @@\n         put(\"not\", 2);\n     }};\n     private static final char ESCAPING_CHAR = '\\\\';\n+    private String infix;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg0NTQwMg=="}, "originalCommit": {"oid": "eefdeaba6b5bfaf09f36c63978c636c8c901d6e4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg0ODk0OQ==", "bodyText": "That's why I'm suggesting to create a tag parser object per infix that is parsed.", "url": "https://github.com/cucumber/common/pull/1005#discussion_r427848949", "createdAt": "2020-05-20T08:55:11Z", "author": {"login": "mpkorstanje"}, "path": "tag-expressions/java/src/main/java/io/cucumber/tagexpressions/TagExpressionParser.java", "diffHunk": "@@ -21,15 +21,19 @@\n         put(\"not\", 2);\n     }};\n     private static final char ESCAPING_CHAR = '\\\\';\n+    private String infix;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg0NTQwMg=="}, "originalCommit": {"oid": "eefdeaba6b5bfaf09f36c63978c636c8c901d6e4"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 750, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}