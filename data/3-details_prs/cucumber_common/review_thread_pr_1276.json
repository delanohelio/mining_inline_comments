{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NjY0MTk5", "number": 1276, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoxNDowN1rOFFHtYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowNTozMlrOFFrEIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTEzNTA0OnYy", "diffSide": "RIGHT", "path": "react/javascript/test/HighlightTest.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoxNDowN1rOIFds_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoxODowMVrOIFd3Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMDQ0Nw==", "bodyText": "Assume you didn't mean to leave this console call in?", "url": "https://github.com/cucumber/common/pull/1276#discussion_r542600447", "createdAt": "2020-12-14T18:14:07Z", "author": {"login": "davidjgoss"}, "path": "react/javascript/test/HighlightTest.tsx", "diffHunk": "@@ -74,74 +77,18 @@ describe('HighLight', () => {\n     ])\n   })\n \n-  context('when htmlContent is not set', () => {\n-    it('escapes HTML characters', () => {\n-      const document = renderHighlight(\n-        '<span>Given</span> a passed step',\n-        'step'\n-      )\n-      const highlighted = Array.from(\n-        document.querySelectorAll('#content .highlight')\n-      )\n-        .map((span) => span.innerHTML)\n-        .join('')\n-\n-      assert.equal(\n-        highlighted,\n-        '<span>&lt;span&gt;Given&lt;/span&gt; a passed </span><mark>step</mark>'\n-      )\n-    })\n-\n-    it('also highlight the tags', () => {\n-      const document = renderHighlight(\n-        '<strong>Given</strong> a strong step',\n-        'strong'\n-      )\n-      const highlighted = Array.from(\n-        document.querySelectorAll('#content .highlight')\n-      )\n-        .map((span) => span.innerHTML)\n-        .join('')\n-\n-      assert.equal(\n-        highlighted,\n-        '<span>&lt;</span><mark>strong</mark><span>&gt;Given&lt;/</span><mark>strong</mark><span>&gt; a </span><mark>strong</mark><span> step</span>'\n-      )\n-    })\n-  })\n-\n-  context('when htmlContent is set to true', () => {\n-    it('keeps the HTML content', () => {\n-      const document = renderHighlight(\n-        '<em>Given</em> a passed step',\n-        'step',\n-        true\n-      )\n-      const highlighted = Array.from(\n-        document.querySelectorAll('#content .highlight')\n-      )\n-        .map((span) => span.innerHTML)\n-        .join('')\n-\n-      assert.equal(highlighted, '<em>Given</em> a passed <mark>step</mark>')\n-    })\n+  it('puts <mark> around matches in markdown', () => {\n+    const document = renderHighlight(\n+      '* This is\\n* a bullet list',\n+      'bullet',\n+      true\n+    )\n+    const highlighted = Array.from(\n+      document.querySelectorAll('#content mark')\n+    ).map((span) => span.textContent)\n \n-    it('does not highlight the tags', () => {\n-      const document = renderHighlight(\n-        '<strong>Given</strong> a strong step',\n-        'strong',\n-        true\n-      )\n-      const highlighted = Array.from(\n-        document.querySelectorAll('#content .highlight')\n-      )\n-        .map((span) => span.innerHTML)\n-        .join('')\n+    console.log(document.body.innerHTML)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de0a5cd419bab2aa4e5e9e7931d86476b98b620"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMzA4Mg==", "bodyText": "Thanks, gone now.", "url": "https://github.com/cucumber/common/pull/1276#discussion_r542603082", "createdAt": "2020-12-14T18:18:01Z", "author": {"login": "aslakhellesoy"}, "path": "react/javascript/test/HighlightTest.tsx", "diffHunk": "@@ -74,74 +77,18 @@ describe('HighLight', () => {\n     ])\n   })\n \n-  context('when htmlContent is not set', () => {\n-    it('escapes HTML characters', () => {\n-      const document = renderHighlight(\n-        '<span>Given</span> a passed step',\n-        'step'\n-      )\n-      const highlighted = Array.from(\n-        document.querySelectorAll('#content .highlight')\n-      )\n-        .map((span) => span.innerHTML)\n-        .join('')\n-\n-      assert.equal(\n-        highlighted,\n-        '<span>&lt;span&gt;Given&lt;/span&gt; a passed </span><mark>step</mark>'\n-      )\n-    })\n-\n-    it('also highlight the tags', () => {\n-      const document = renderHighlight(\n-        '<strong>Given</strong> a strong step',\n-        'strong'\n-      )\n-      const highlighted = Array.from(\n-        document.querySelectorAll('#content .highlight')\n-      )\n-        .map((span) => span.innerHTML)\n-        .join('')\n-\n-      assert.equal(\n-        highlighted,\n-        '<span>&lt;</span><mark>strong</mark><span>&gt;Given&lt;/</span><mark>strong</mark><span>&gt; a </span><mark>strong</mark><span> step</span>'\n-      )\n-    })\n-  })\n-\n-  context('when htmlContent is set to true', () => {\n-    it('keeps the HTML content', () => {\n-      const document = renderHighlight(\n-        '<em>Given</em> a passed step',\n-        'step',\n-        true\n-      )\n-      const highlighted = Array.from(\n-        document.querySelectorAll('#content .highlight')\n-      )\n-        .map((span) => span.innerHTML)\n-        .join('')\n-\n-      assert.equal(highlighted, '<em>Given</em> a passed <mark>step</mark>')\n-    })\n+  it('puts <mark> around matches in markdown', () => {\n+    const document = renderHighlight(\n+      '* This is\\n* a bullet list',\n+      'bullet',\n+      true\n+    )\n+    const highlighted = Array.from(\n+      document.querySelectorAll('#content mark')\n+    ).map((span) => span.textContent)\n \n-    it('does not highlight the tags', () => {\n-      const document = renderHighlight(\n-        '<strong>Given</strong> a strong step',\n-        'strong',\n-        true\n-      )\n-      const highlighted = Array.from(\n-        document.querySelectorAll('#content .highlight')\n-      )\n-        .map((span) => span.innerHTML)\n-        .join('')\n+    console.log(document.body.innerHTML)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMDQ0Nw=="}, "originalCommit": {"oid": "7de0a5cd419bab2aa4e5e9e7931d86476b98b620"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTE0MDIwOnYy", "diffSide": "LEFT", "path": "react/javascript/test/HighlightTest.tsx", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoxNToxN1rOIFdv9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1NjozM1rOIGJixw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMTIwNQ==", "bodyText": "We now won't have a test that proves the XSS protection, is that okay?", "url": "https://github.com/cucumber/common/pull/1276#discussion_r542601205", "createdAt": "2020-12-14T18:15:17Z", "author": {"login": "davidjgoss"}, "path": "react/javascript/test/HighlightTest.tsx", "diffHunk": "@@ -74,74 +77,18 @@ describe('HighLight', () => {\n     ])\n   })\n \n-  context('when htmlContent is not set', () => {\n-    it('escapes HTML characters', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de0a5cd419bab2aa4e5e9e7931d86476b98b620"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMzI2MQ==", "bodyText": "Good call - I'll add one", "url": "https://github.com/cucumber/common/pull/1276#discussion_r542603261", "createdAt": "2020-12-14T18:18:18Z", "author": {"login": "aslakhellesoy"}, "path": "react/javascript/test/HighlightTest.tsx", "diffHunk": "@@ -74,74 +77,18 @@ describe('HighLight', () => {\n     ])\n   })\n \n-  context('when htmlContent is not set', () => {\n-    it('escapes HTML characters', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMTIwNQ=="}, "originalCommit": {"oid": "7de0a5cd419bab2aa4e5e9e7931d86476b98b620"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzOTQxNw==", "bodyText": "I've added a couple more tests for XSS. It strips away <script> tags and allows all other HTML tags.\nI'm not entirely sure if we should be that permissive though - it sort of defeats the purpose of Markdown to allow any HTML. Should we be more restrictive?", "url": "https://github.com/cucumber/common/pull/1276#discussion_r543139417", "createdAt": "2020-12-15T08:25:59Z", "author": {"login": "aslakhellesoy"}, "path": "react/javascript/test/HighlightTest.tsx", "diffHunk": "@@ -74,74 +77,18 @@ describe('HighLight', () => {\n     ])\n   })\n \n-  context('when htmlContent is not set', () => {\n-    it('escapes HTML characters', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMTIwNQ=="}, "originalCommit": {"oid": "7de0a5cd419bab2aa4e5e9e7931d86476b98b620"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxMzA2Nw==", "bodyText": "Good question. Most markdown implementations seem to allow HTML by default, but in context of a Gherkin document I can't see a use case for doing that. I would say start out restrictive and if there's demand for broad HTML support we can look at why.\n(I write a lot of Markdown, the only HTML tag I can recall writing recently is <small>, other than that I think the syntax is more than rich enough.)", "url": "https://github.com/cucumber/common/pull/1276#discussion_r543213067", "createdAt": "2020-12-15T10:11:31Z", "author": {"login": "davidjgoss"}, "path": "react/javascript/test/HighlightTest.tsx", "diffHunk": "@@ -74,74 +77,18 @@ describe('HighLight', () => {\n     ])\n   })\n \n-  context('when htmlContent is not set', () => {\n-    it('escapes HTML characters', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMTIwNQ=="}, "originalCommit": {"oid": "7de0a5cd419bab2aa4e5e9e7931d86476b98b620"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2MzkxMA==", "bodyText": "The standalone HTML report has a search function which will highlight hits with <mark>, so we could allow <small> and <mark> for now.\nBut that seems a bit arbitrary. Are there any downsides to allowing anything but <script>?", "url": "https://github.com/cucumber/common/pull/1276#discussion_r543263910", "createdAt": "2020-12-15T11:27:48Z", "author": {"login": "aslakhellesoy"}, "path": "react/javascript/test/HighlightTest.tsx", "diffHunk": "@@ -74,74 +77,18 @@ describe('HighLight', () => {\n     ])\n   })\n \n-  context('when htmlContent is not set', () => {\n-    it('escapes HTML characters', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMTIwNQ=="}, "originalCommit": {"oid": "7de0a5cd419bab2aa4e5e9e7931d86476b98b620"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxODA1Nw==", "bodyText": "In my opinion, the main issue is not the HTML tags themselves but the possibility to have Javascript executed with onclick events etc.\nIs there a way with react-markdown to ensure there's no Javascript added via HTML tag attributes ? If so, we could allow any HTML tag* without having to question too much the safety :)\n\nwell, any tag except <script> :D", "url": "https://github.com/cucumber/common/pull/1276#discussion_r543318057", "createdAt": "2020-12-15T12:55:32Z", "author": {"login": "vincent-psarga"}, "path": "react/javascript/test/HighlightTest.tsx", "diffHunk": "@@ -74,74 +77,18 @@ describe('HighLight', () => {\n     ])\n   })\n \n-  context('when htmlContent is not set', () => {\n-    it('escapes HTML characters', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMTIwNQ=="}, "originalCommit": {"oid": "7de0a5cd419bab2aa4e5e9e7931d86476b98b620"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxODcyNw==", "bodyText": "Good point @vincent-psarga! More tests to add then....", "url": "https://github.com/cucumber/common/pull/1276#discussion_r543318727", "createdAt": "2020-12-15T12:56:33Z", "author": {"login": "aslakhellesoy"}, "path": "react/javascript/test/HighlightTest.tsx", "diffHunk": "@@ -74,74 +77,18 @@ describe('HighLight', () => {\n     ])\n   })\n \n-  context('when htmlContent is not set', () => {\n-    it('escapes HTML characters', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwMTIwNQ=="}, "originalCommit": {"oid": "7de0a5cd419bab2aa4e5e9e7931d86476b98b620"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDkyNzY4OnYy", "diffSide": "RIGHT", "path": "react/javascript/test/HighlightTest.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowNTozMlrOIGTH4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowNTozMlrOIGTH4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3NTY4MQ==", "bodyText": "@vincent-psarga does this address your concern about javascript injection in element event handlers?\nI assume it's more thoroughly tested in react-markdown...", "url": "https://github.com/cucumber/common/pull/1276#discussion_r543475681", "createdAt": "2020-12-15T16:05:32Z", "author": {"login": "aslakhellesoy"}, "path": "react/javascript/test/HighlightTest.tsx", "diffHunk": "@@ -74,74 +77,47 @@ describe('HighLight', () => {\n     ])\n   })\n \n-  context('when htmlContent is not set', () => {\n-    it('escapes HTML characters', () => {\n-      const document = renderHighlight(\n-        '<span>Given</span> a passed step',\n-        'step'\n-      )\n-      const highlighted = Array.from(\n-        document.querySelectorAll('#content .highlight')\n-      )\n-        .map((span) => span.innerHTML)\n-        .join('')\n-\n-      assert.equal(\n-        highlighted,\n-        '<span>&lt;span&gt;Given&lt;/span&gt; a passed </span><mark>step</mark>'\n-      )\n-    })\n-\n-    it('also highlight the tags', () => {\n-      const document = renderHighlight(\n-        '<strong>Given</strong> a strong step',\n-        'strong'\n-      )\n-      const highlighted = Array.from(\n-        document.querySelectorAll('#content .highlight')\n-      )\n-        .map((span) => span.innerHTML)\n-        .join('')\n+  it('puts <mark> around matches in markdown', () => {\n+    const document = renderHighlight(\n+      '* This is\\n* a bullet list',\n+      'bullet',\n+      true\n+    )\n+    const highlighted = Array.from(\n+      document.querySelectorAll('#content mark')\n+    ).map((span) => span.textContent)\n \n-      assert.equal(\n-        highlighted,\n-        '<span>&lt;</span><mark>strong</mark><span>&gt;Given&lt;/</span><mark>strong</mark><span>&gt; a </span><mark>strong</mark><span> step</span>'\n-      )\n-    })\n+    assert.deepStrictEqual(highlighted, ['bullet'])\n   })\n \n-  context('when htmlContent is set to true', () => {\n-    it('keeps the HTML content', () => {\n-      const document = renderHighlight(\n-        '<em>Given</em> a passed step',\n-        'step',\n-        true\n-      )\n-      const highlighted = Array.from(\n-        document.querySelectorAll('#content .highlight')\n-      )\n-        .map((span) => span.innerHTML)\n-        .join('')\n-\n-      assert.equal(highlighted, '<em>Given</em> a passed <mark>step</mark>')\n-    })\n+  it('does not render <script> tags in markdown', () => {\n+    const document = renderHighlight(\n+      'Failed XSS: <script>alert(\"hello\")</script>',\n+      'alert hello',\n+      true\n+    )\n+    const html = document.querySelector('#content').innerHTML\n+    // Script tags will be removed (rather than escaped). Ideally we'd *escape* them to &lt;script&gt;.\n+    assert.deepStrictEqual(html, '<div class=\"highlight\"><p>Failed XSS: <mark>alert</mark>(\"<mark>hello</mark>\")</p></div>')\n+  })\n \n-    it('does not highlight the tags', () => {\n-      const document = renderHighlight(\n-        '<strong>Given</strong> a strong step',\n-        'strong',\n-        true\n-      )\n-      const highlighted = Array.from(\n-        document.querySelectorAll('#content .highlight')\n-      )\n-        .map((span) => span.innerHTML)\n-        .join('')\n+  it('renders <section> tags in markdown', () => {\n+    const document = renderHighlight(\n+      'We *like* other HTML tags:\\n\\n<section>hello</section>',\n+      null,\n+      true\n+    )\n+    const html = document.querySelector('#content').innerHTML\n+    assert.deepStrictEqual(html, '<div class=\"highlight\"><p>We <em>like</em> other HTML tags:</p><section>hello</section></div>')\n+  })\n \n-      assert.equal(\n-        highlighted,\n-        '<strong>Given</strong> a <mark>strong</mark> step'\n-      )\n-    })\n+  it('does not render JavaScript event handlers on tags in markdown', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7252133756800e2b93fc0885254346b39edb9ab"}, "originalPosition": 167}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 717, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}