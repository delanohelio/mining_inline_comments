{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzOTMwNDM4", "number": 1252, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzozMzowM1rOE7Dc1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzo1NjozN1rOE7EM_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzU3OTczOnYy", "diffSide": "RIGHT", "path": "messages/javascript/src/NdjsonToMessageStream.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzozMzowM1rOH2eiXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDowMDo0MVrOH2f8ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg4NTQ2OQ==", "bodyText": "Perhaps also include the original error and stack trace? That way we know what the parser was complaining about.", "url": "https://github.com/cucumber/common/pull/1252#discussion_r526885469", "createdAt": "2020-11-19T13:33:03Z", "author": {"login": "mpkorstanje"}, "path": "messages/javascript/src/NdjsonToMessageStream.ts", "diffHunk": "@@ -43,7 +43,7 @@ export default class NdjsonToMessageStream<T> extends Transform {\n         const object = JSON.parse(this.buffer)\n         this.push(this.fromObject(object))\n       } catch (err) {\n-        return callback(err)\n+        return callback(new Error(`Not JSONs: ${this.buffer}`))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c65c0880a0758562e16e252137f36fd2735edc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkwODUyMg==", "bodyText": "That's not easily done in JavaScript - exceptions can't have references to other exceptsions like in Java. I don't think it's needed either.", "url": "https://github.com/cucumber/common/pull/1252#discussion_r526908522", "createdAt": "2020-11-19T14:00:41Z", "author": {"login": "aslakhellesoy"}, "path": "messages/javascript/src/NdjsonToMessageStream.ts", "diffHunk": "@@ -43,7 +43,7 @@ export default class NdjsonToMessageStream<T> extends Transform {\n         const object = JSON.parse(this.buffer)\n         this.push(this.fromObject(object))\n       } catch (err) {\n-        return callback(err)\n+        return callback(new Error(`Not JSONs: ${this.buffer}`))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg4NTQ2OQ=="}, "originalCommit": {"oid": "47c65c0880a0758562e16e252137f36fd2735edc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzcwMzAwOnYy", "diffSide": "RIGHT", "path": "messages/java/src/main/java/io/cucumber/messages/NdjsonToMessageIterable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzo1NjozN1rOH2fxTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzo1NjozN1rOH2fxTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkwNTY3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    throw new RuntimeException(String.format(\"Not JSON: %s\", line));\n          \n          \n            \n                                    throw new RuntimeException(String.format(\"Not JSON: %s\", line), e);", "url": "https://github.com/cucumber/common/pull/1252#discussion_r526905676", "createdAt": "2020-11-19T13:56:37Z", "author": {"login": "mpkorstanje"}, "path": "messages/java/src/main/java/io/cucumber/messages/NdjsonToMessageIterable.java", "diffHunk": "@@ -37,7 +38,11 @@ public boolean hasNext() {\n                         return hasNext();\n                     }\n                     Messages.Envelope.Builder builder = Messages.Envelope.newBuilder();\n-                    JSON_PARSER.merge(line, builder);\n+                    try {\n+                        JSON_PARSER.merge(line, builder);\n+                    } catch(InvalidProtocolBufferException e) {\n+                        throw new RuntimeException(String.format(\"Not JSON: %s\", line));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef84fd895f200e5bedd5a1ae4d150b97eaa86326"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 714, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}