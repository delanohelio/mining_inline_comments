{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MTg4MTMx", "number": 1182, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOTowMDozMVrOEi5rCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOToyNTo0NlrOElc10w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMxOTQ3OnYy", "diffSide": "RIGHT", "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOTowMDozMVrOHQ-ljQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOTowMDozMVrOHQ-ljQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NDY4NQ==", "bodyText": "The pattern s == null || s.isEmpty() ? Optional.empty() : Optional.of(do-something-transformer-specific) is very repetitive. Have a look at the way applyIfPresent is used to see if you can remove this repetition.", "url": "https://github.com/cucumber/common/pull/1182#discussion_r487564685", "createdAt": "2020-09-13T19:00:31Z", "author": {"login": "mpkorstanje"}, "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "diffHunk": "@@ -57,6 +58,44 @@ public DataTableTypeRegistry(Locale locale) {\n         TableCellTransformer<Double> doubleTableCellTransformer = applyIfPresent(numberParser::parseDouble);\n         defineDataTableType(new DataTableType(Double.class, doubleTableCellTransformer));\n         defineDataTableType(new DataTableType(double.class, doubleTableCellTransformer));\n+\n+        TableCellTransformer<Optional<Object>> optionalTableCellTransformer =\n+                (String s) -> s == null || s.isEmpty() ? Optional.empty() : Optional.of(s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0798f348c245398df086f0c11526c059fd4924f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMyMjczOnYy", "diffSide": "RIGHT", "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOTowMzoyN1rOHQ-nAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOTowMzoyN1rOHQ-nAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NTA1OQ==", "bodyText": "The transformer specific function (e.g. numberParser.parseFloat) for both the optional and non-optional transformer should be the same. However it is very hard to verify that this is the case. By moving the definition of the optional and non-optional transformer closer together you can resolve this.\nAdditionally, in combination with my previous comment you can possibly also make it easier to verify that the transformer specific part is indeed the same.", "url": "https://github.com/cucumber/common/pull/1182#discussion_r487565059", "createdAt": "2020-09-13T19:03:27Z", "author": {"login": "mpkorstanje"}, "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "diffHunk": "@@ -57,6 +58,44 @@ public DataTableTypeRegistry(Locale locale) {\n         TableCellTransformer<Double> doubleTableCellTransformer = applyIfPresent(numberParser::parseDouble);\n         defineDataTableType(new DataTableType(Double.class, doubleTableCellTransformer));\n         defineDataTableType(new DataTableType(double.class, doubleTableCellTransformer));\n+\n+        TableCellTransformer<Optional<Object>> optionalTableCellTransformer =\n+                (String s) -> s == null || s.isEmpty() ? Optional.empty() : Optional.of(s);\n+        defineDataTableType(new DataTableType(Optional.class, optionalTableCellTransformer));\n+\n+        Type optionalString = new TypeReference<Optional<String>>() { }.getType();\n+        defineDataTableType(new DataTableType(optionalString, optionalTableCellTransformer));\n+\n+        Type optionalDouble = new TypeReference<Optional<Double>>() { }.getType();\n+        TableCellTransformer<Optional<Double>> optionalDoubleTableCellTransformer =\n+                (String s) -> s == null || s.isEmpty() ? Optional.empty() : Optional.of(numberParser.parseDouble(s));\n+        defineDataTableType(new DataTableType(optionalDouble, optionalDoubleTableCellTransformer));\n+\n+        Type optionalFloat = new TypeReference<Optional<Float>>() { }.getType();\n+        TableCellTransformer<Optional<Float>> optionalFloatTableCellTransformer =\n+                (String s) -> s == null || s.isEmpty() ? Optional.empty() : Optional.of(numberParser.parseFloat(s));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0798f348c245398df086f0c11526c059fd4924f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMyMzQ0OnYy", "diffSide": "RIGHT", "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOTowNDoyNFrOHQ-nXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOTowNDoyNFrOHQ-nXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NTE1MA==", "bodyText": "optionalBigInt -> optionalBigInteger. It's  okay to spell things out.", "url": "https://github.com/cucumber/common/pull/1182#discussion_r487565150", "createdAt": "2020-09-13T19:04:24Z", "author": {"login": "mpkorstanje"}, "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "diffHunk": "@@ -57,6 +58,44 @@ public DataTableTypeRegistry(Locale locale) {\n         TableCellTransformer<Double> doubleTableCellTransformer = applyIfPresent(numberParser::parseDouble);\n         defineDataTableType(new DataTableType(Double.class, doubleTableCellTransformer));\n         defineDataTableType(new DataTableType(double.class, doubleTableCellTransformer));\n+\n+        TableCellTransformer<Optional<Object>> optionalTableCellTransformer =\n+                (String s) -> s == null || s.isEmpty() ? Optional.empty() : Optional.of(s);\n+        defineDataTableType(new DataTableType(Optional.class, optionalTableCellTransformer));\n+\n+        Type optionalString = new TypeReference<Optional<String>>() { }.getType();\n+        defineDataTableType(new DataTableType(optionalString, optionalTableCellTransformer));\n+\n+        Type optionalDouble = new TypeReference<Optional<Double>>() { }.getType();\n+        TableCellTransformer<Optional<Double>> optionalDoubleTableCellTransformer =\n+                (String s) -> s == null || s.isEmpty() ? Optional.empty() : Optional.of(numberParser.parseDouble(s));\n+        defineDataTableType(new DataTableType(optionalDouble, optionalDoubleTableCellTransformer));\n+\n+        Type optionalFloat = new TypeReference<Optional<Float>>() { }.getType();\n+        TableCellTransformer<Optional<Float>> optionalFloatTableCellTransformer =\n+                (String s) -> s == null || s.isEmpty() ? Optional.empty() : Optional.of(numberParser.parseFloat(s));\n+        defineDataTableType(new DataTableType(optionalFloat, optionalFloatTableCellTransformer));\n+\n+        Type optionalLong = new TypeReference<Optional<Long>>() { }.getType();\n+        TableCellTransformer<Optional<Long>> optionalLongTableCellTransformer =\n+                (String s) -> s == null || s.isEmpty() ? Optional.empty() : Optional.of(Long.decode(s));\n+        defineDataTableType(new DataTableType(optionalLong, optionalLongTableCellTransformer));\n+\n+        Type optionalByte = new TypeReference<Optional<Byte>>() { }.getType();\n+        TableCellTransformer<Optional<Byte>> optionalByteTableCellTransformer =\n+                (String s) -> s == null || s.isEmpty() ? Optional.empty() : Optional.of(Byte.decode(s));\n+        defineDataTableType(new DataTableType(optionalByte, optionalByteTableCellTransformer));\n+\n+        Type optionalBigDecimal = new TypeReference<Optional<BigDecimal>>() { }.getType();\n+        TableCellTransformer<Optional<BigDecimal>> optionalBigDecimalTableCellTransformer =\n+                (String s) -> s == null || s.isEmpty() ? Optional.empty() : Optional.of(numberParser.parseBigDecimal(s));\n+        defineDataTableType(new DataTableType(optionalBigDecimal, optionalBigDecimalTableCellTransformer));\n+\n+\n+        Type optionalBigInt = new TypeReference<Optional<BigInteger>>() { }.getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0798f348c245398df086f0c11526c059fd4924f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzA0NTkwOnYy", "diffSide": "RIGHT", "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOToxNjo1MlrOHU8dZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOToxNjo1MlrOHU8dZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyNDEzMg==", "bodyText": "While it would be unexpected the function returned by applyIfPresent will return null when f.appy returns null. So ofNullable should be used here.", "url": "https://github.com/cucumber/common/pull/1182#discussion_r491724132", "createdAt": "2020-09-20T19:16:52Z", "author": {"login": "mpkorstanje"}, "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "diffHunk": "@@ -26,69 +26,79 @@\n     public DataTableTypeRegistry(Locale locale) {\n         final NumberParser numberParser = new NumberParser(locale);\n \n-        TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n-        defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n-        defineDataTableType(new DataTableType(String.class, objectTableCellTransformer, true));\n-\n-        TableCellTransformer<BigInteger> bigIntegerTableCellTransformer = applyIfPresent(BigInteger::new);\n-        defineDataTableType(new DataTableType(BigInteger.class, bigIntegerTableCellTransformer));\n-\n-        TableCellTransformer<BigDecimal> bigDecimalTableCellTransformer = applyIfPresent(numberParser::parseBigDecimal);\n-        defineDataTableType(new DataTableType(BigDecimal.class, bigDecimalTableCellTransformer));\n-        TableCellTransformer<Byte> byteTableCellTransformer = applyIfPresent(Byte::decode);\n-        defineDataTableType(new DataTableType(Byte.class, byteTableCellTransformer));\n-        defineDataTableType(new DataTableType(byte.class, byteTableCellTransformer));\n-\n-        TableCellTransformer<Short> shortTableCellTransformer = applyIfPresent(Short::decode);\n-        defineDataTableType(new DataTableType(Short.class, shortTableCellTransformer));\n-        defineDataTableType(new DataTableType(short.class, shortTableCellTransformer));\n-\n-        TableCellTransformer<Integer> integerTableCellTransformer = applyIfPresent(Integer::decode);\n-        defineDataTableType(new DataTableType(Integer.class, integerTableCellTransformer));\n-        defineDataTableType(new DataTableType(int.class, integerTableCellTransformer));\n-\n-        TableCellTransformer<Long> longTableCellTransformer = applyIfPresent(Long::decode);\n-        defineDataTableType(new DataTableType(Long.class, longTableCellTransformer));\n-        defineDataTableType(new DataTableType(long.class, longTableCellTransformer));\n-\n-        TableCellTransformer<Float> floatTableCellTransformer = applyIfPresent(numberParser::parseFloat);\n-        defineDataTableType(new DataTableType(Float.class, floatTableCellTransformer));\n-        defineDataTableType(new DataTableType(float.class, floatTableCellTransformer));\n-\n-        TableCellTransformer<Double> doubleTableCellTransformer = applyIfPresent(numberParser::parseDouble);\n-        defineDataTableType(new DataTableType(Double.class, doubleTableCellTransformer));\n-        defineDataTableType(new DataTableType(double.class, doubleTableCellTransformer));\n-\n-        defineDataTableType(new DataTableType(Optional.class, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalString = new TypeReference<Optional<String>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalString, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalDouble = new TypeReference<Optional<Double>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalDouble, transformAsOptional(doubleTableCellTransformer)));\n-\n-        Type optionalFloat = new TypeReference<Optional<Float>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalFloat, transformAsOptional(floatTableCellTransformer)));\n-\n-        Type optionalLong = new TypeReference<Optional<Long>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalLong, transformAsOptional(longTableCellTransformer)));\n-\n-        Type optionalByte = new TypeReference<Optional<Byte>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalByte, transformAsOptional(byteTableCellTransformer)));\n-\n-        Type optionalBigDecimal = new TypeReference<Optional<BigDecimal>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigDecimal, transformAsOptional(bigDecimalTableCellTransformer)));\n-\n-        Type optionalBigInteger = new TypeReference<Optional<BigInteger>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigInteger, transformAsOptional(bigIntegerTableCellTransformer)));\n+        {\n+            TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n+            defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n+            defineDataTableType(new DataTableType(Optional.class, optionalIfAbsent(objectTableCellTransformer), true));\n+        }\n+        {\n+            TableCellTransformer<Object> stringTableCellTransformer = applyIfPresent(s -> s);\n+            defineDataTableType(new DataTableType(String.class, stringTableCellTransformer, true));\n+            Type optionalString = new TypeReference<Optional<String>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalString, optionalIfAbsent(stringTableCellTransformer), true));\n+        }\n+        {\n+            TableCellTransformer<BigInteger> bigIntegerTableCellTransformer = applyIfPresent(BigInteger::new);\n+            defineDataTableType(new DataTableType(BigInteger.class, bigIntegerTableCellTransformer));\n+            Type optionalBigInteger = new TypeReference<Optional<BigInteger>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalBigInteger, optionalIfAbsent(bigIntegerTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<BigDecimal> bigDecimalTableCellTransformer = applyIfPresent(numberParser::parseBigDecimal);\n+            defineDataTableType(new DataTableType(BigDecimal.class, bigDecimalTableCellTransformer));\n+            Type optionalBigDecimal = new TypeReference<Optional<BigDecimal>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalBigDecimal, optionalIfAbsent(bigDecimalTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Byte> byteTableCellTransformer = applyIfPresent(Byte::decode);\n+            defineDataTableType(new DataTableType(Byte.class, byteTableCellTransformer));\n+            defineDataTableType(new DataTableType(byte.class, byteTableCellTransformer));\n+            Type optionalByte = new TypeReference<Optional<Byte>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalByte, optionalIfAbsent(byteTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Short> shortTableCellTransformer = applyIfPresent(Short::decode);\n+            defineDataTableType(new DataTableType(Short.class, shortTableCellTransformer));\n+            defineDataTableType(new DataTableType(short.class, shortTableCellTransformer));\n+            Type optionalShort = new TypeReference<Optional<Short>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalShort, optionalIfAbsent(shortTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Integer> integerTableCellTransformer = applyIfPresent(Integer::decode);\n+            defineDataTableType(new DataTableType(Integer.class, integerTableCellTransformer));\n+            defineDataTableType(new DataTableType(int.class, integerTableCellTransformer));\n+            Type optionalInteger = new TypeReference<Optional<Integer>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalInteger, optionalIfAbsent(integerTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Long> longTableCellTransformer = applyIfPresent(Long::decode);\n+            defineDataTableType(new DataTableType(Long.class, longTableCellTransformer));\n+            defineDataTableType(new DataTableType(long.class, longTableCellTransformer));\n+            Type optionalLong = new TypeReference<Optional<Long>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalLong, optionalIfAbsent(longTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Float> floatTableCellTransformer = applyIfPresent(numberParser::parseFloat);\n+            defineDataTableType(new DataTableType(Float.class, floatTableCellTransformer));\n+            defineDataTableType(new DataTableType(float.class, floatTableCellTransformer));\n+            Type optionalFloat = new TypeReference<Optional<Float>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalFloat, optionalIfAbsent(floatTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Double> doubleTableCellTransformer = applyIfPresent(numberParser::parseDouble);\n+            defineDataTableType(new DataTableType(Double.class, doubleTableCellTransformer));\n+            defineDataTableType(new DataTableType(double.class, doubleTableCellTransformer));\n+            Type optionalDouble = new TypeReference<Optional<Double>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalDouble, optionalIfAbsent(doubleTableCellTransformer)));\n+        }\n     }\n \n     private static <R> TableCellTransformer<R> applyIfPresent(Function<String, R> f) {\n         return s -> s == null ? null : f.apply(s);\n     }\n \n-    private static <T> TableCellTransformer<Optional<T>> transformAsOptional(TableCellTransformer<T> tableCellTransformer) {\n-        return s -> s == null || s.isEmpty() ? Optional.empty() : Optional.of(tableCellTransformer.transform(s));\n+    private static <R> TableCellTransformer<Optional<R>> optionalIfAbsent(TableCellTransformer<R> t) {\n+        return s -> s == null || s.isEmpty() ? Optional.empty() : Optional.ofNullable(t.transform(s));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55bcd793d074fd7559a9df4a1b079fa3c6c13a8c"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzA0NjI5OnYy", "diffSide": "RIGHT", "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOToxNzozMlrOHU8dkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOToxNzozMlrOHU8dkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyNDE3OA==", "bodyText": "I've moved the optional transformers next to their non-optional counter parts. This allowed me to see that the transformer for integer was missing.", "url": "https://github.com/cucumber/common/pull/1182#discussion_r491724178", "createdAt": "2020-09-20T19:17:32Z", "author": {"login": "mpkorstanje"}, "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "diffHunk": "@@ -26,69 +26,79 @@\n     public DataTableTypeRegistry(Locale locale) {\n         final NumberParser numberParser = new NumberParser(locale);\n \n-        TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n-        defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n-        defineDataTableType(new DataTableType(String.class, objectTableCellTransformer, true));\n-\n-        TableCellTransformer<BigInteger> bigIntegerTableCellTransformer = applyIfPresent(BigInteger::new);\n-        defineDataTableType(new DataTableType(BigInteger.class, bigIntegerTableCellTransformer));\n-\n-        TableCellTransformer<BigDecimal> bigDecimalTableCellTransformer = applyIfPresent(numberParser::parseBigDecimal);\n-        defineDataTableType(new DataTableType(BigDecimal.class, bigDecimalTableCellTransformer));\n-        TableCellTransformer<Byte> byteTableCellTransformer = applyIfPresent(Byte::decode);\n-        defineDataTableType(new DataTableType(Byte.class, byteTableCellTransformer));\n-        defineDataTableType(new DataTableType(byte.class, byteTableCellTransformer));\n-\n-        TableCellTransformer<Short> shortTableCellTransformer = applyIfPresent(Short::decode);\n-        defineDataTableType(new DataTableType(Short.class, shortTableCellTransformer));\n-        defineDataTableType(new DataTableType(short.class, shortTableCellTransformer));\n-\n-        TableCellTransformer<Integer> integerTableCellTransformer = applyIfPresent(Integer::decode);\n-        defineDataTableType(new DataTableType(Integer.class, integerTableCellTransformer));\n-        defineDataTableType(new DataTableType(int.class, integerTableCellTransformer));\n-\n-        TableCellTransformer<Long> longTableCellTransformer = applyIfPresent(Long::decode);\n-        defineDataTableType(new DataTableType(Long.class, longTableCellTransformer));\n-        defineDataTableType(new DataTableType(long.class, longTableCellTransformer));\n-\n-        TableCellTransformer<Float> floatTableCellTransformer = applyIfPresent(numberParser::parseFloat);\n-        defineDataTableType(new DataTableType(Float.class, floatTableCellTransformer));\n-        defineDataTableType(new DataTableType(float.class, floatTableCellTransformer));\n-\n-        TableCellTransformer<Double> doubleTableCellTransformer = applyIfPresent(numberParser::parseDouble);\n-        defineDataTableType(new DataTableType(Double.class, doubleTableCellTransformer));\n-        defineDataTableType(new DataTableType(double.class, doubleTableCellTransformer));\n-\n-        defineDataTableType(new DataTableType(Optional.class, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalString = new TypeReference<Optional<String>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalString, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalDouble = new TypeReference<Optional<Double>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalDouble, transformAsOptional(doubleTableCellTransformer)));\n-\n-        Type optionalFloat = new TypeReference<Optional<Float>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalFloat, transformAsOptional(floatTableCellTransformer)));\n-\n-        Type optionalLong = new TypeReference<Optional<Long>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalLong, transformAsOptional(longTableCellTransformer)));\n-\n-        Type optionalByte = new TypeReference<Optional<Byte>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalByte, transformAsOptional(byteTableCellTransformer)));\n-\n-        Type optionalBigDecimal = new TypeReference<Optional<BigDecimal>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigDecimal, transformAsOptional(bigDecimalTableCellTransformer)));\n-\n-        Type optionalBigInteger = new TypeReference<Optional<BigInteger>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigInteger, transformAsOptional(bigIntegerTableCellTransformer)));\n+        {\n+            TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n+            defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n+            defineDataTableType(new DataTableType(Optional.class, optionalIfAbsent(objectTableCellTransformer), true));\n+        }\n+        {\n+            TableCellTransformer<Object> stringTableCellTransformer = applyIfPresent(s -> s);\n+            defineDataTableType(new DataTableType(String.class, stringTableCellTransformer, true));\n+            Type optionalString = new TypeReference<Optional<String>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalString, optionalIfAbsent(stringTableCellTransformer), true));\n+        }\n+        {\n+            TableCellTransformer<BigInteger> bigIntegerTableCellTransformer = applyIfPresent(BigInteger::new);\n+            defineDataTableType(new DataTableType(BigInteger.class, bigIntegerTableCellTransformer));\n+            Type optionalBigInteger = new TypeReference<Optional<BigInteger>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalBigInteger, optionalIfAbsent(bigIntegerTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<BigDecimal> bigDecimalTableCellTransformer = applyIfPresent(numberParser::parseBigDecimal);\n+            defineDataTableType(new DataTableType(BigDecimal.class, bigDecimalTableCellTransformer));\n+            Type optionalBigDecimal = new TypeReference<Optional<BigDecimal>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalBigDecimal, optionalIfAbsent(bigDecimalTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Byte> byteTableCellTransformer = applyIfPresent(Byte::decode);\n+            defineDataTableType(new DataTableType(Byte.class, byteTableCellTransformer));\n+            defineDataTableType(new DataTableType(byte.class, byteTableCellTransformer));\n+            Type optionalByte = new TypeReference<Optional<Byte>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalByte, optionalIfAbsent(byteTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Short> shortTableCellTransformer = applyIfPresent(Short::decode);\n+            defineDataTableType(new DataTableType(Short.class, shortTableCellTransformer));\n+            defineDataTableType(new DataTableType(short.class, shortTableCellTransformer));\n+            Type optionalShort = new TypeReference<Optional<Short>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalShort, optionalIfAbsent(shortTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Integer> integerTableCellTransformer = applyIfPresent(Integer::decode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55bcd793d074fd7559a9df4a1b079fa3c6c13a8c"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzA0Njc1OnYy", "diffSide": "RIGHT", "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOToxODoxMVrOHU8dxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOToxODoxMVrOHU8dxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyNDIyOQ==", "bodyText": "For consistency I've split Object and String.", "url": "https://github.com/cucumber/common/pull/1182#discussion_r491724229", "createdAt": "2020-09-20T19:18:11Z", "author": {"login": "mpkorstanje"}, "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "diffHunk": "@@ -26,69 +26,79 @@\n     public DataTableTypeRegistry(Locale locale) {\n         final NumberParser numberParser = new NumberParser(locale);\n \n-        TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n-        defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n-        defineDataTableType(new DataTableType(String.class, objectTableCellTransformer, true));\n-\n-        TableCellTransformer<BigInteger> bigIntegerTableCellTransformer = applyIfPresent(BigInteger::new);\n-        defineDataTableType(new DataTableType(BigInteger.class, bigIntegerTableCellTransformer));\n-\n-        TableCellTransformer<BigDecimal> bigDecimalTableCellTransformer = applyIfPresent(numberParser::parseBigDecimal);\n-        defineDataTableType(new DataTableType(BigDecimal.class, bigDecimalTableCellTransformer));\n-        TableCellTransformer<Byte> byteTableCellTransformer = applyIfPresent(Byte::decode);\n-        defineDataTableType(new DataTableType(Byte.class, byteTableCellTransformer));\n-        defineDataTableType(new DataTableType(byte.class, byteTableCellTransformer));\n-\n-        TableCellTransformer<Short> shortTableCellTransformer = applyIfPresent(Short::decode);\n-        defineDataTableType(new DataTableType(Short.class, shortTableCellTransformer));\n-        defineDataTableType(new DataTableType(short.class, shortTableCellTransformer));\n-\n-        TableCellTransformer<Integer> integerTableCellTransformer = applyIfPresent(Integer::decode);\n-        defineDataTableType(new DataTableType(Integer.class, integerTableCellTransformer));\n-        defineDataTableType(new DataTableType(int.class, integerTableCellTransformer));\n-\n-        TableCellTransformer<Long> longTableCellTransformer = applyIfPresent(Long::decode);\n-        defineDataTableType(new DataTableType(Long.class, longTableCellTransformer));\n-        defineDataTableType(new DataTableType(long.class, longTableCellTransformer));\n-\n-        TableCellTransformer<Float> floatTableCellTransformer = applyIfPresent(numberParser::parseFloat);\n-        defineDataTableType(new DataTableType(Float.class, floatTableCellTransformer));\n-        defineDataTableType(new DataTableType(float.class, floatTableCellTransformer));\n-\n-        TableCellTransformer<Double> doubleTableCellTransformer = applyIfPresent(numberParser::parseDouble);\n-        defineDataTableType(new DataTableType(Double.class, doubleTableCellTransformer));\n-        defineDataTableType(new DataTableType(double.class, doubleTableCellTransformer));\n-\n-        defineDataTableType(new DataTableType(Optional.class, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalString = new TypeReference<Optional<String>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalString, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalDouble = new TypeReference<Optional<Double>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalDouble, transformAsOptional(doubleTableCellTransformer)));\n-\n-        Type optionalFloat = new TypeReference<Optional<Float>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalFloat, transformAsOptional(floatTableCellTransformer)));\n-\n-        Type optionalLong = new TypeReference<Optional<Long>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalLong, transformAsOptional(longTableCellTransformer)));\n-\n-        Type optionalByte = new TypeReference<Optional<Byte>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalByte, transformAsOptional(byteTableCellTransformer)));\n-\n-        Type optionalBigDecimal = new TypeReference<Optional<BigDecimal>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigDecimal, transformAsOptional(bigDecimalTableCellTransformer)));\n-\n-        Type optionalBigInteger = new TypeReference<Optional<BigInteger>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigInteger, transformAsOptional(bigIntegerTableCellTransformer)));\n+        {\n+            TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n+            defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n+            defineDataTableType(new DataTableType(Optional.class, optionalIfAbsent(objectTableCellTransformer), true));\n+        }\n+        {\n+            TableCellTransformer<Object> stringTableCellTransformer = applyIfPresent(s -> s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55bcd793d074fd7559a9df4a1b079fa3c6c13a8c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzA0NzAwOnYy", "diffSide": "RIGHT", "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOToxODozNlrOHU8d5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMDozMjoyN1rOHU85GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyNDI2MA==", "bodyText": "I'm wondering why we're not checking for the empty string here.", "url": "https://github.com/cucumber/common/pull/1182#discussion_r491724260", "createdAt": "2020-09-20T19:18:36Z", "author": {"login": "mpkorstanje"}, "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "diffHunk": "@@ -26,69 +26,79 @@\n     public DataTableTypeRegistry(Locale locale) {\n         final NumberParser numberParser = new NumberParser(locale);\n \n-        TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n-        defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n-        defineDataTableType(new DataTableType(String.class, objectTableCellTransformer, true));\n-\n-        TableCellTransformer<BigInteger> bigIntegerTableCellTransformer = applyIfPresent(BigInteger::new);\n-        defineDataTableType(new DataTableType(BigInteger.class, bigIntegerTableCellTransformer));\n-\n-        TableCellTransformer<BigDecimal> bigDecimalTableCellTransformer = applyIfPresent(numberParser::parseBigDecimal);\n-        defineDataTableType(new DataTableType(BigDecimal.class, bigDecimalTableCellTransformer));\n-        TableCellTransformer<Byte> byteTableCellTransformer = applyIfPresent(Byte::decode);\n-        defineDataTableType(new DataTableType(Byte.class, byteTableCellTransformer));\n-        defineDataTableType(new DataTableType(byte.class, byteTableCellTransformer));\n-\n-        TableCellTransformer<Short> shortTableCellTransformer = applyIfPresent(Short::decode);\n-        defineDataTableType(new DataTableType(Short.class, shortTableCellTransformer));\n-        defineDataTableType(new DataTableType(short.class, shortTableCellTransformer));\n-\n-        TableCellTransformer<Integer> integerTableCellTransformer = applyIfPresent(Integer::decode);\n-        defineDataTableType(new DataTableType(Integer.class, integerTableCellTransformer));\n-        defineDataTableType(new DataTableType(int.class, integerTableCellTransformer));\n-\n-        TableCellTransformer<Long> longTableCellTransformer = applyIfPresent(Long::decode);\n-        defineDataTableType(new DataTableType(Long.class, longTableCellTransformer));\n-        defineDataTableType(new DataTableType(long.class, longTableCellTransformer));\n-\n-        TableCellTransformer<Float> floatTableCellTransformer = applyIfPresent(numberParser::parseFloat);\n-        defineDataTableType(new DataTableType(Float.class, floatTableCellTransformer));\n-        defineDataTableType(new DataTableType(float.class, floatTableCellTransformer));\n-\n-        TableCellTransformer<Double> doubleTableCellTransformer = applyIfPresent(numberParser::parseDouble);\n-        defineDataTableType(new DataTableType(Double.class, doubleTableCellTransformer));\n-        defineDataTableType(new DataTableType(double.class, doubleTableCellTransformer));\n-\n-        defineDataTableType(new DataTableType(Optional.class, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalString = new TypeReference<Optional<String>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalString, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalDouble = new TypeReference<Optional<Double>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalDouble, transformAsOptional(doubleTableCellTransformer)));\n-\n-        Type optionalFloat = new TypeReference<Optional<Float>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalFloat, transformAsOptional(floatTableCellTransformer)));\n-\n-        Type optionalLong = new TypeReference<Optional<Long>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalLong, transformAsOptional(longTableCellTransformer)));\n-\n-        Type optionalByte = new TypeReference<Optional<Byte>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalByte, transformAsOptional(byteTableCellTransformer)));\n-\n-        Type optionalBigDecimal = new TypeReference<Optional<BigDecimal>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigDecimal, transformAsOptional(bigDecimalTableCellTransformer)));\n-\n-        Type optionalBigInteger = new TypeReference<Optional<BigInteger>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigInteger, transformAsOptional(bigIntegerTableCellTransformer)));\n+        {\n+            TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n+            defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n+            defineDataTableType(new DataTableType(Optional.class, optionalIfAbsent(objectTableCellTransformer), true));\n+        }\n+        {\n+            TableCellTransformer<Object> stringTableCellTransformer = applyIfPresent(s -> s);\n+            defineDataTableType(new DataTableType(String.class, stringTableCellTransformer, true));\n+            Type optionalString = new TypeReference<Optional<String>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalString, optionalIfAbsent(stringTableCellTransformer), true));\n+        }\n+        {\n+            TableCellTransformer<BigInteger> bigIntegerTableCellTransformer = applyIfPresent(BigInteger::new);\n+            defineDataTableType(new DataTableType(BigInteger.class, bigIntegerTableCellTransformer));\n+            Type optionalBigInteger = new TypeReference<Optional<BigInteger>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalBigInteger, optionalIfAbsent(bigIntegerTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<BigDecimal> bigDecimalTableCellTransformer = applyIfPresent(numberParser::parseBigDecimal);\n+            defineDataTableType(new DataTableType(BigDecimal.class, bigDecimalTableCellTransformer));\n+            Type optionalBigDecimal = new TypeReference<Optional<BigDecimal>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalBigDecimal, optionalIfAbsent(bigDecimalTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Byte> byteTableCellTransformer = applyIfPresent(Byte::decode);\n+            defineDataTableType(new DataTableType(Byte.class, byteTableCellTransformer));\n+            defineDataTableType(new DataTableType(byte.class, byteTableCellTransformer));\n+            Type optionalByte = new TypeReference<Optional<Byte>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalByte, optionalIfAbsent(byteTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Short> shortTableCellTransformer = applyIfPresent(Short::decode);\n+            defineDataTableType(new DataTableType(Short.class, shortTableCellTransformer));\n+            defineDataTableType(new DataTableType(short.class, shortTableCellTransformer));\n+            Type optionalShort = new TypeReference<Optional<Short>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalShort, optionalIfAbsent(shortTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Integer> integerTableCellTransformer = applyIfPresent(Integer::decode);\n+            defineDataTableType(new DataTableType(Integer.class, integerTableCellTransformer));\n+            defineDataTableType(new DataTableType(int.class, integerTableCellTransformer));\n+            Type optionalInteger = new TypeReference<Optional<Integer>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalInteger, optionalIfAbsent(integerTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Long> longTableCellTransformer = applyIfPresent(Long::decode);\n+            defineDataTableType(new DataTableType(Long.class, longTableCellTransformer));\n+            defineDataTableType(new DataTableType(long.class, longTableCellTransformer));\n+            Type optionalLong = new TypeReference<Optional<Long>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalLong, optionalIfAbsent(longTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Float> floatTableCellTransformer = applyIfPresent(numberParser::parseFloat);\n+            defineDataTableType(new DataTableType(Float.class, floatTableCellTransformer));\n+            defineDataTableType(new DataTableType(float.class, floatTableCellTransformer));\n+            Type optionalFloat = new TypeReference<Optional<Float>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalFloat, optionalIfAbsent(floatTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Double> doubleTableCellTransformer = applyIfPresent(numberParser::parseDouble);\n+            defineDataTableType(new DataTableType(Double.class, doubleTableCellTransformer));\n+            defineDataTableType(new DataTableType(double.class, doubleTableCellTransformer));\n+            Type optionalDouble = new TypeReference<Optional<Double>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalDouble, optionalIfAbsent(doubleTableCellTransformer)));\n+        }\n     }\n \n     private static <R> TableCellTransformer<R> applyIfPresent(Function<String, R> f) {\n         return s -> s == null ? null : f.apply(s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55bcd793d074fd7559a9df4a1b079fa3c6c13a8c"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczMTIyNA==", "bodyText": "I think empty string is completely fine for stringTableCellTransformer, but it is not fine for others.\nNow we throw exception for this case:\nDataTable table = parse(\"\",\n                \"| header1   | header2   |\",\n                \"| 1              |                 |\"\n        );\nconverter.toMaps(table, String.class, byte.class);\n\n>> io.cucumber.datatable.CucumberDataTableException: 'java.util.List<java.util.List<byte>>' could not transform\n      | 1 | [empty] |\n\nI think we can safely change this to null if the string is empty.", "url": "https://github.com/cucumber/common/pull/1182#discussion_r491731224", "createdAt": "2020-09-20T20:32:27Z", "author": {"login": "rasklaad"}, "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "diffHunk": "@@ -26,69 +26,79 @@\n     public DataTableTypeRegistry(Locale locale) {\n         final NumberParser numberParser = new NumberParser(locale);\n \n-        TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n-        defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n-        defineDataTableType(new DataTableType(String.class, objectTableCellTransformer, true));\n-\n-        TableCellTransformer<BigInteger> bigIntegerTableCellTransformer = applyIfPresent(BigInteger::new);\n-        defineDataTableType(new DataTableType(BigInteger.class, bigIntegerTableCellTransformer));\n-\n-        TableCellTransformer<BigDecimal> bigDecimalTableCellTransformer = applyIfPresent(numberParser::parseBigDecimal);\n-        defineDataTableType(new DataTableType(BigDecimal.class, bigDecimalTableCellTransformer));\n-        TableCellTransformer<Byte> byteTableCellTransformer = applyIfPresent(Byte::decode);\n-        defineDataTableType(new DataTableType(Byte.class, byteTableCellTransformer));\n-        defineDataTableType(new DataTableType(byte.class, byteTableCellTransformer));\n-\n-        TableCellTransformer<Short> shortTableCellTransformer = applyIfPresent(Short::decode);\n-        defineDataTableType(new DataTableType(Short.class, shortTableCellTransformer));\n-        defineDataTableType(new DataTableType(short.class, shortTableCellTransformer));\n-\n-        TableCellTransformer<Integer> integerTableCellTransformer = applyIfPresent(Integer::decode);\n-        defineDataTableType(new DataTableType(Integer.class, integerTableCellTransformer));\n-        defineDataTableType(new DataTableType(int.class, integerTableCellTransformer));\n-\n-        TableCellTransformer<Long> longTableCellTransformer = applyIfPresent(Long::decode);\n-        defineDataTableType(new DataTableType(Long.class, longTableCellTransformer));\n-        defineDataTableType(new DataTableType(long.class, longTableCellTransformer));\n-\n-        TableCellTransformer<Float> floatTableCellTransformer = applyIfPresent(numberParser::parseFloat);\n-        defineDataTableType(new DataTableType(Float.class, floatTableCellTransformer));\n-        defineDataTableType(new DataTableType(float.class, floatTableCellTransformer));\n-\n-        TableCellTransformer<Double> doubleTableCellTransformer = applyIfPresent(numberParser::parseDouble);\n-        defineDataTableType(new DataTableType(Double.class, doubleTableCellTransformer));\n-        defineDataTableType(new DataTableType(double.class, doubleTableCellTransformer));\n-\n-        defineDataTableType(new DataTableType(Optional.class, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalString = new TypeReference<Optional<String>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalString, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalDouble = new TypeReference<Optional<Double>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalDouble, transformAsOptional(doubleTableCellTransformer)));\n-\n-        Type optionalFloat = new TypeReference<Optional<Float>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalFloat, transformAsOptional(floatTableCellTransformer)));\n-\n-        Type optionalLong = new TypeReference<Optional<Long>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalLong, transformAsOptional(longTableCellTransformer)));\n-\n-        Type optionalByte = new TypeReference<Optional<Byte>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalByte, transformAsOptional(byteTableCellTransformer)));\n-\n-        Type optionalBigDecimal = new TypeReference<Optional<BigDecimal>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigDecimal, transformAsOptional(bigDecimalTableCellTransformer)));\n-\n-        Type optionalBigInteger = new TypeReference<Optional<BigInteger>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigInteger, transformAsOptional(bigIntegerTableCellTransformer)));\n+        {\n+            TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n+            defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n+            defineDataTableType(new DataTableType(Optional.class, optionalIfAbsent(objectTableCellTransformer), true));\n+        }\n+        {\n+            TableCellTransformer<Object> stringTableCellTransformer = applyIfPresent(s -> s);\n+            defineDataTableType(new DataTableType(String.class, stringTableCellTransformer, true));\n+            Type optionalString = new TypeReference<Optional<String>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalString, optionalIfAbsent(stringTableCellTransformer), true));\n+        }\n+        {\n+            TableCellTransformer<BigInteger> bigIntegerTableCellTransformer = applyIfPresent(BigInteger::new);\n+            defineDataTableType(new DataTableType(BigInteger.class, bigIntegerTableCellTransformer));\n+            Type optionalBigInteger = new TypeReference<Optional<BigInteger>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalBigInteger, optionalIfAbsent(bigIntegerTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<BigDecimal> bigDecimalTableCellTransformer = applyIfPresent(numberParser::parseBigDecimal);\n+            defineDataTableType(new DataTableType(BigDecimal.class, bigDecimalTableCellTransformer));\n+            Type optionalBigDecimal = new TypeReference<Optional<BigDecimal>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalBigDecimal, optionalIfAbsent(bigDecimalTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Byte> byteTableCellTransformer = applyIfPresent(Byte::decode);\n+            defineDataTableType(new DataTableType(Byte.class, byteTableCellTransformer));\n+            defineDataTableType(new DataTableType(byte.class, byteTableCellTransformer));\n+            Type optionalByte = new TypeReference<Optional<Byte>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalByte, optionalIfAbsent(byteTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Short> shortTableCellTransformer = applyIfPresent(Short::decode);\n+            defineDataTableType(new DataTableType(Short.class, shortTableCellTransformer));\n+            defineDataTableType(new DataTableType(short.class, shortTableCellTransformer));\n+            Type optionalShort = new TypeReference<Optional<Short>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalShort, optionalIfAbsent(shortTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Integer> integerTableCellTransformer = applyIfPresent(Integer::decode);\n+            defineDataTableType(new DataTableType(Integer.class, integerTableCellTransformer));\n+            defineDataTableType(new DataTableType(int.class, integerTableCellTransformer));\n+            Type optionalInteger = new TypeReference<Optional<Integer>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalInteger, optionalIfAbsent(integerTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Long> longTableCellTransformer = applyIfPresent(Long::decode);\n+            defineDataTableType(new DataTableType(Long.class, longTableCellTransformer));\n+            defineDataTableType(new DataTableType(long.class, longTableCellTransformer));\n+            Type optionalLong = new TypeReference<Optional<Long>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalLong, optionalIfAbsent(longTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Float> floatTableCellTransformer = applyIfPresent(numberParser::parseFloat);\n+            defineDataTableType(new DataTableType(Float.class, floatTableCellTransformer));\n+            defineDataTableType(new DataTableType(float.class, floatTableCellTransformer));\n+            Type optionalFloat = new TypeReference<Optional<Float>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalFloat, optionalIfAbsent(floatTableCellTransformer)));\n+        }\n+        {\n+            TableCellTransformer<Double> doubleTableCellTransformer = applyIfPresent(numberParser::parseDouble);\n+            defineDataTableType(new DataTableType(Double.class, doubleTableCellTransformer));\n+            defineDataTableType(new DataTableType(double.class, doubleTableCellTransformer));\n+            Type optionalDouble = new TypeReference<Optional<Double>>() {}.getType();\n+            defineDataTableType(new DataTableType(optionalDouble, optionalIfAbsent(doubleTableCellTransformer)));\n+        }\n     }\n \n     private static <R> TableCellTransformer<R> applyIfPresent(Function<String, R> f) {\n         return s -> s == null ? null : f.apply(s);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyNDI2MA=="}, "originalCommit": {"oid": "55bcd793d074fd7559a9df4a1b079fa3c6c13a8c"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzA1Mjk5OnYy", "diffSide": "RIGHT", "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOToyNTo0NlrOHU8grQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzo1NDowNVrOHX48TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyNDk3Mw==", "bodyText": "true here marks the DataTableType as replaceable. This means that it's possible to register a new transformer that replaces this one. However this means that the optional transformer is not replaced. This seems somewhat inconsistent.\nI would expect that when I replace the objectTableCellTransformer for Object, the Optional<Objec> transformer is used.  And with that in mind would also expect that by registering a transformer for X I would have also registered one for Optional<X>.", "url": "https://github.com/cucumber/common/pull/1182#discussion_r491724973", "createdAt": "2020-09-20T19:25:46Z", "author": {"login": "mpkorstanje"}, "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "diffHunk": "@@ -26,69 +26,79 @@\n     public DataTableTypeRegistry(Locale locale) {\n         final NumberParser numberParser = new NumberParser(locale);\n \n-        TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n-        defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n-        defineDataTableType(new DataTableType(String.class, objectTableCellTransformer, true));\n-\n-        TableCellTransformer<BigInteger> bigIntegerTableCellTransformer = applyIfPresent(BigInteger::new);\n-        defineDataTableType(new DataTableType(BigInteger.class, bigIntegerTableCellTransformer));\n-\n-        TableCellTransformer<BigDecimal> bigDecimalTableCellTransformer = applyIfPresent(numberParser::parseBigDecimal);\n-        defineDataTableType(new DataTableType(BigDecimal.class, bigDecimalTableCellTransformer));\n-        TableCellTransformer<Byte> byteTableCellTransformer = applyIfPresent(Byte::decode);\n-        defineDataTableType(new DataTableType(Byte.class, byteTableCellTransformer));\n-        defineDataTableType(new DataTableType(byte.class, byteTableCellTransformer));\n-\n-        TableCellTransformer<Short> shortTableCellTransformer = applyIfPresent(Short::decode);\n-        defineDataTableType(new DataTableType(Short.class, shortTableCellTransformer));\n-        defineDataTableType(new DataTableType(short.class, shortTableCellTransformer));\n-\n-        TableCellTransformer<Integer> integerTableCellTransformer = applyIfPresent(Integer::decode);\n-        defineDataTableType(new DataTableType(Integer.class, integerTableCellTransformer));\n-        defineDataTableType(new DataTableType(int.class, integerTableCellTransformer));\n-\n-        TableCellTransformer<Long> longTableCellTransformer = applyIfPresent(Long::decode);\n-        defineDataTableType(new DataTableType(Long.class, longTableCellTransformer));\n-        defineDataTableType(new DataTableType(long.class, longTableCellTransformer));\n-\n-        TableCellTransformer<Float> floatTableCellTransformer = applyIfPresent(numberParser::parseFloat);\n-        defineDataTableType(new DataTableType(Float.class, floatTableCellTransformer));\n-        defineDataTableType(new DataTableType(float.class, floatTableCellTransformer));\n-\n-        TableCellTransformer<Double> doubleTableCellTransformer = applyIfPresent(numberParser::parseDouble);\n-        defineDataTableType(new DataTableType(Double.class, doubleTableCellTransformer));\n-        defineDataTableType(new DataTableType(double.class, doubleTableCellTransformer));\n-\n-        defineDataTableType(new DataTableType(Optional.class, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalString = new TypeReference<Optional<String>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalString, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalDouble = new TypeReference<Optional<Double>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalDouble, transformAsOptional(doubleTableCellTransformer)));\n-\n-        Type optionalFloat = new TypeReference<Optional<Float>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalFloat, transformAsOptional(floatTableCellTransformer)));\n-\n-        Type optionalLong = new TypeReference<Optional<Long>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalLong, transformAsOptional(longTableCellTransformer)));\n-\n-        Type optionalByte = new TypeReference<Optional<Byte>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalByte, transformAsOptional(byteTableCellTransformer)));\n-\n-        Type optionalBigDecimal = new TypeReference<Optional<BigDecimal>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigDecimal, transformAsOptional(bigDecimalTableCellTransformer)));\n-\n-        Type optionalBigInteger = new TypeReference<Optional<BigInteger>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigInteger, transformAsOptional(bigIntegerTableCellTransformer)));\n+        {\n+            TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n+            defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n+            defineDataTableType(new DataTableType(Optional.class, optionalIfAbsent(objectTableCellTransformer), true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55bcd793d074fd7559a9df4a1b079fa3c6c13a8c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczMTc3Mg==", "bodyText": "So looks like we have to remove Optional transformers from constructor, and just define Optional for any type in io.cucumber.datatable.DataTableTypeRegistry#defineDataTableType\nWill that work?", "url": "https://github.com/cucumber/common/pull/1182#discussion_r491731772", "createdAt": "2020-09-20T20:37:52Z", "author": {"login": "rasklaad"}, "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "diffHunk": "@@ -26,69 +26,79 @@\n     public DataTableTypeRegistry(Locale locale) {\n         final NumberParser numberParser = new NumberParser(locale);\n \n-        TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n-        defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n-        defineDataTableType(new DataTableType(String.class, objectTableCellTransformer, true));\n-\n-        TableCellTransformer<BigInteger> bigIntegerTableCellTransformer = applyIfPresent(BigInteger::new);\n-        defineDataTableType(new DataTableType(BigInteger.class, bigIntegerTableCellTransformer));\n-\n-        TableCellTransformer<BigDecimal> bigDecimalTableCellTransformer = applyIfPresent(numberParser::parseBigDecimal);\n-        defineDataTableType(new DataTableType(BigDecimal.class, bigDecimalTableCellTransformer));\n-        TableCellTransformer<Byte> byteTableCellTransformer = applyIfPresent(Byte::decode);\n-        defineDataTableType(new DataTableType(Byte.class, byteTableCellTransformer));\n-        defineDataTableType(new DataTableType(byte.class, byteTableCellTransformer));\n-\n-        TableCellTransformer<Short> shortTableCellTransformer = applyIfPresent(Short::decode);\n-        defineDataTableType(new DataTableType(Short.class, shortTableCellTransformer));\n-        defineDataTableType(new DataTableType(short.class, shortTableCellTransformer));\n-\n-        TableCellTransformer<Integer> integerTableCellTransformer = applyIfPresent(Integer::decode);\n-        defineDataTableType(new DataTableType(Integer.class, integerTableCellTransformer));\n-        defineDataTableType(new DataTableType(int.class, integerTableCellTransformer));\n-\n-        TableCellTransformer<Long> longTableCellTransformer = applyIfPresent(Long::decode);\n-        defineDataTableType(new DataTableType(Long.class, longTableCellTransformer));\n-        defineDataTableType(new DataTableType(long.class, longTableCellTransformer));\n-\n-        TableCellTransformer<Float> floatTableCellTransformer = applyIfPresent(numberParser::parseFloat);\n-        defineDataTableType(new DataTableType(Float.class, floatTableCellTransformer));\n-        defineDataTableType(new DataTableType(float.class, floatTableCellTransformer));\n-\n-        TableCellTransformer<Double> doubleTableCellTransformer = applyIfPresent(numberParser::parseDouble);\n-        defineDataTableType(new DataTableType(Double.class, doubleTableCellTransformer));\n-        defineDataTableType(new DataTableType(double.class, doubleTableCellTransformer));\n-\n-        defineDataTableType(new DataTableType(Optional.class, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalString = new TypeReference<Optional<String>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalString, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalDouble = new TypeReference<Optional<Double>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalDouble, transformAsOptional(doubleTableCellTransformer)));\n-\n-        Type optionalFloat = new TypeReference<Optional<Float>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalFloat, transformAsOptional(floatTableCellTransformer)));\n-\n-        Type optionalLong = new TypeReference<Optional<Long>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalLong, transformAsOptional(longTableCellTransformer)));\n-\n-        Type optionalByte = new TypeReference<Optional<Byte>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalByte, transformAsOptional(byteTableCellTransformer)));\n-\n-        Type optionalBigDecimal = new TypeReference<Optional<BigDecimal>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigDecimal, transformAsOptional(bigDecimalTableCellTransformer)));\n-\n-        Type optionalBigInteger = new TypeReference<Optional<BigInteger>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigInteger, transformAsOptional(bigIntegerTableCellTransformer)));\n+        {\n+            TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n+            defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n+            defineDataTableType(new DataTableType(Optional.class, optionalIfAbsent(objectTableCellTransformer), true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyNDk3Mw=="}, "originalCommit": {"oid": "55bcd793d074fd7559a9df4a1b079fa3c6c13a8c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgxMjIzNw==", "bodyText": "I don't know yet. This solution has the advantage of being conceptually consistent.\nMy suggestion isn't.", "url": "https://github.com/cucumber/common/pull/1182#discussion_r494812237", "createdAt": "2020-09-25T07:54:05Z", "author": {"login": "mpkorstanje"}, "path": "datatable/java/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistry.java", "diffHunk": "@@ -26,69 +26,79 @@\n     public DataTableTypeRegistry(Locale locale) {\n         final NumberParser numberParser = new NumberParser(locale);\n \n-        TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n-        defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n-        defineDataTableType(new DataTableType(String.class, objectTableCellTransformer, true));\n-\n-        TableCellTransformer<BigInteger> bigIntegerTableCellTransformer = applyIfPresent(BigInteger::new);\n-        defineDataTableType(new DataTableType(BigInteger.class, bigIntegerTableCellTransformer));\n-\n-        TableCellTransformer<BigDecimal> bigDecimalTableCellTransformer = applyIfPresent(numberParser::parseBigDecimal);\n-        defineDataTableType(new DataTableType(BigDecimal.class, bigDecimalTableCellTransformer));\n-        TableCellTransformer<Byte> byteTableCellTransformer = applyIfPresent(Byte::decode);\n-        defineDataTableType(new DataTableType(Byte.class, byteTableCellTransformer));\n-        defineDataTableType(new DataTableType(byte.class, byteTableCellTransformer));\n-\n-        TableCellTransformer<Short> shortTableCellTransformer = applyIfPresent(Short::decode);\n-        defineDataTableType(new DataTableType(Short.class, shortTableCellTransformer));\n-        defineDataTableType(new DataTableType(short.class, shortTableCellTransformer));\n-\n-        TableCellTransformer<Integer> integerTableCellTransformer = applyIfPresent(Integer::decode);\n-        defineDataTableType(new DataTableType(Integer.class, integerTableCellTransformer));\n-        defineDataTableType(new DataTableType(int.class, integerTableCellTransformer));\n-\n-        TableCellTransformer<Long> longTableCellTransformer = applyIfPresent(Long::decode);\n-        defineDataTableType(new DataTableType(Long.class, longTableCellTransformer));\n-        defineDataTableType(new DataTableType(long.class, longTableCellTransformer));\n-\n-        TableCellTransformer<Float> floatTableCellTransformer = applyIfPresent(numberParser::parseFloat);\n-        defineDataTableType(new DataTableType(Float.class, floatTableCellTransformer));\n-        defineDataTableType(new DataTableType(float.class, floatTableCellTransformer));\n-\n-        TableCellTransformer<Double> doubleTableCellTransformer = applyIfPresent(numberParser::parseDouble);\n-        defineDataTableType(new DataTableType(Double.class, doubleTableCellTransformer));\n-        defineDataTableType(new DataTableType(double.class, doubleTableCellTransformer));\n-\n-        defineDataTableType(new DataTableType(Optional.class, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalString = new TypeReference<Optional<String>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalString, transformAsOptional(objectTableCellTransformer)));\n-\n-        Type optionalDouble = new TypeReference<Optional<Double>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalDouble, transformAsOptional(doubleTableCellTransformer)));\n-\n-        Type optionalFloat = new TypeReference<Optional<Float>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalFloat, transformAsOptional(floatTableCellTransformer)));\n-\n-        Type optionalLong = new TypeReference<Optional<Long>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalLong, transformAsOptional(longTableCellTransformer)));\n-\n-        Type optionalByte = new TypeReference<Optional<Byte>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalByte, transformAsOptional(byteTableCellTransformer)));\n-\n-        Type optionalBigDecimal = new TypeReference<Optional<BigDecimal>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigDecimal, transformAsOptional(bigDecimalTableCellTransformer)));\n-\n-        Type optionalBigInteger = new TypeReference<Optional<BigInteger>>() { }.getType();\n-        defineDataTableType(new DataTableType(optionalBigInteger, transformAsOptional(bigIntegerTableCellTransformer)));\n+        {\n+            TableCellTransformer<Object> objectTableCellTransformer = applyIfPresent(s -> s);\n+            defineDataTableType(new DataTableType(Object.class, objectTableCellTransformer, true));\n+            defineDataTableType(new DataTableType(Optional.class, optionalIfAbsent(objectTableCellTransformer), true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyNDk3Mw=="}, "originalCommit": {"oid": "55bcd793d074fd7559a9df4a1b079fa3c6c13a8c"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 733, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}