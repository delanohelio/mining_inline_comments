{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMTY2NjU5", "number": 341, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDozMDoyNFrODl7uKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDo0MDo0N1rODl74lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTAyMzc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDozMDoyNFrOFzGiMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDozMDoyNFrOFzGiMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyODc1Mg==", "bodyText": "I'm pretty sure we can use a Duration here, and have a duration parser", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389128752", "createdAt": "2020-03-06T20:30:24Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -187,48 +215,46 @@ public void kick(\n \n   @Command(\n       aliases = {\"ban\", \"permban\", \"pb\"},\n-      usage = \"<player> <reason> -s (silent)\",\n-      desc = \"Ban a player from the server forever\",\n+      usage = \"<player> <reason> -s (silent) -t (time)\",\n+      desc = \"Ban an online player from the server\",\n+      flags = \"s\",\n       perms = Permissions.BAN)\n   public void ban(\n       CommandSender sender,\n       Player target,\n       Match match,\n       @Text String reason,\n-      @Switch('s') boolean silent) {\n-    MatchPlayer targetMatchPlayer = match.getPlayer(target);\n-    Component senderName = formatPunisherName(sender, match);\n-    if (punish(PunishmentType.BAN, targetMatchPlayer, sender, reason, silent)) {\n-      banPlayer(target, reason, senderName, null);\n-      target.kickPlayer(formatPunishmentScreen(PunishmentType.BAN, senderName, reason, null));\n-    }\n-  }\n+      @Switch('s') boolean silent,\n+      @Switch('t') String length)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTAyNjkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDozMTo0MVrOFzGkIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDozMTo0MVrOFzGkIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyOTI0OA==", "bodyText": "same here", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389129248", "createdAt": "2020-03-06T20:31:41Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTAyODQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDozMjoyOFrOFzGlKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDozMjoyOFrOFzGlKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyOTUxNQ==", "bodyText": "Personally i'd rename target to targetPl, and keep this as target", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389129515", "createdAt": "2020-03-06T20:32:28Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)\n+      throws CommandException {\n+    Duration duration = parseBanLength(length);\n+    boolean tempBan = !duration.isZero();\n+\n+    banPlayer(\n+        target,\n+        reason,\n+        formatPunisherName(sender, manager.getMatch(sender)),\n+        tempBan ? Instant.now().plus(duration) : null);\n+    broadcastPunishment(\n+        tempBan ? PunishmentType.TEMP_BAN : PunishmentType.BAN,\n+        manager.getMatch(sender),\n+        sender,\n+        new PersonalizedText(target).color(ChatColor.DARK_AQUA),\n+        reason,\n+        true,\n+        duration);\n+  }\n+\n+  @Command(\n+      aliases = {\"alts\", \"listalts\"},\n+      usage = \"[target] (page)\",\n+      desc = \"List online players on the same IP\",\n+      perms = Permissions.STAFF)\n+  public void alts(\n+      Audience audience,\n+      CommandSender sender,\n+      MatchManager manager,\n+      @Fallback(Type.NULL) Player target,\n+      @Default(\"1\") int page)\n+      throws CommandException {\n+    if (target != null) {\n+      MatchPlayer targetMP = manager.getPlayer(target);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTAzMjU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDozNDowMlrOFzGnxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDozNDowMlrOFzGnxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEzMDE4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  usage = \"[target] (page)\",\n          \n          \n            \n                  usage = \"[target] [page]\",", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389130182", "createdAt": "2020-03-06T20:34:02Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)\n+      throws CommandException {\n+    Duration duration = parseBanLength(length);\n+    boolean tempBan = !duration.isZero();\n+\n+    banPlayer(\n+        target,\n+        reason,\n+        formatPunisherName(sender, manager.getMatch(sender)),\n+        tempBan ? Instant.now().plus(duration) : null);\n+    broadcastPunishment(\n+        tempBan ? PunishmentType.TEMP_BAN : PunishmentType.BAN,\n+        manager.getMatch(sender),\n+        sender,\n+        new PersonalizedText(target).color(ChatColor.DARK_AQUA),\n+        reason,\n+        true,\n+        duration);\n+  }\n+\n+  @Command(\n+      aliases = {\"alts\", \"listalts\"},\n+      usage = \"[target] (page)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTAzNTYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDozNToyN1rOFzGpxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMToyMDo1NVrOFzLpVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEzMDY5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  usage = \"[player] -u (if input is UUID)\",\n          \n          \n            \n                  usage = \"[player]\",", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389130694", "createdAt": "2020-03-06T20:35:27Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)\n+      throws CommandException {\n+    Duration duration = parseBanLength(length);\n+    boolean tempBan = !duration.isZero();\n+\n+    banPlayer(\n+        target,\n+        reason,\n+        formatPunisherName(sender, manager.getMatch(sender)),\n+        tempBan ? Instant.now().plus(duration) : null);\n+    broadcastPunishment(\n+        tempBan ? PunishmentType.TEMP_BAN : PunishmentType.BAN,\n+        manager.getMatch(sender),\n+        sender,\n+        new PersonalizedText(target).color(ChatColor.DARK_AQUA),\n+        reason,\n+        true,\n+        duration);\n+  }\n+\n+  @Command(\n+      aliases = {\"alts\", \"listalts\"},\n+      usage = \"[target] (page)\",\n+      desc = \"List online players on the same IP\",\n+      perms = Permissions.STAFF)\n+  public void alts(\n+      Audience audience,\n+      CommandSender sender,\n+      MatchManager manager,\n+      @Fallback(Type.NULL) Player target,\n+      @Default(\"1\") int page)\n+      throws CommandException {\n+    if (target != null) {\n+      MatchPlayer targetMP = manager.getPlayer(target);\n+      List<MatchPlayer> alts = getAltAccounts(target, manager);\n+      if (alts.isEmpty()) {\n+        sender.sendMessage(\n+            new PersonalizedTranslatable(\n+                    \"moderation.commands.noAlts\", targetMP.getStyledName(NameStyle.FANCY))\n+                .getPersonalizedText()\n+                .color(ChatColor.RED));\n+      } else {\n+        sender.sendMessage(formatAltAccountList(targetMP, alts));\n+      }\n+    } else {\n+      List<Component> altAccounts = Lists.newArrayList();\n+      List<MatchPlayer> accountedFor = Lists.newArrayList();\n+\n+      for (Player player : Bukkit.getOnlinePlayers()) {\n+        MatchPlayer targetMP = manager.getPlayer(player);\n+        List<MatchPlayer> alts = getAltAccounts(player, manager);\n+\n+        if (alts.isEmpty() || accountedFor.contains(targetMP)) {\n+          continue;\n+        } else {\n+          altAccounts.add(formatAltAccountList(targetMP, alts));\n+          accountedFor.add(targetMP);\n+          accountedFor.addAll(alts);\n+        }\n+      }\n+\n+      int perPage = 8;\n+      int pages = (altAccounts.size() + perPage - 1) / perPage;\n+\n+      Component pageNum =\n+          new PersonalizedTranslatable(\n+                  \"command.paginatedResult.page\",\n+                  new PersonalizedText(Integer.toString(page)).color(ChatColor.DARK_AQUA),\n+                  new PersonalizedText(Integer.toString(pages)).color(ChatColor.DARK_AQUA))\n+              .getPersonalizedText()\n+              .color(ChatColor.GRAY);\n+\n+      Component headerText =\n+          new PersonalizedTranslatable(\"moderation.alts.header\")\n+              .getPersonalizedText()\n+              .color(ChatColor.DARK_AQUA);\n+\n+      Component header =\n+          new PersonalizedText(\n+              headerText,\n+              new PersonalizedText(\" (\").color(ChatColor.GRAY),\n+              new PersonalizedText(Integer.toString(altAccounts.size())).color(ChatColor.DARK_AQUA),\n+              new PersonalizedText(\") \u00bb Page \").color(ChatColor.GRAY),\n+              pageNum);\n+\n+      Component formattedHeader =\n+          new PersonalizedText(\n+              ComponentUtils.horizontalLineHeading(\n+                  ComponentRenderers.toLegacyText(header, sender), ChatColor.BLUE));\n+\n+      new PrettyPaginatedComponentResults<Component>(formattedHeader, perPage) {\n+        @Override\n+        public Component format(Component data, int index) {\n+          return data;\n+        }\n+\n+        @Override\n+        public Component formatEmpty() throws CommandException {\n+          throw new CommandException(\"No alternate accounts found!\");\n+        }\n+      }.display(audience, altAccounts, page);\n+    }\n+  }\n+\n+  @Command(\n+      aliases = {\"baninfo\", \"lookup\", \"l\"},\n+      usage = \"[player] -u (if input is UUID)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0"}, "originalPosition": 345}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjUwMg==", "bodyText": "The command should automatically detect if the input is a player name or UUID", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389212502", "createdAt": "2020-03-07T01:20:55Z", "author": {"login": "TheMolkaPL"}, "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)\n+      throws CommandException {\n+    Duration duration = parseBanLength(length);\n+    boolean tempBan = !duration.isZero();\n+\n+    banPlayer(\n+        target,\n+        reason,\n+        formatPunisherName(sender, manager.getMatch(sender)),\n+        tempBan ? Instant.now().plus(duration) : null);\n+    broadcastPunishment(\n+        tempBan ? PunishmentType.TEMP_BAN : PunishmentType.BAN,\n+        manager.getMatch(sender),\n+        sender,\n+        new PersonalizedText(target).color(ChatColor.DARK_AQUA),\n+        reason,\n+        true,\n+        duration);\n+  }\n+\n+  @Command(\n+      aliases = {\"alts\", \"listalts\"},\n+      usage = \"[target] (page)\",\n+      desc = \"List online players on the same IP\",\n+      perms = Permissions.STAFF)\n+  public void alts(\n+      Audience audience,\n+      CommandSender sender,\n+      MatchManager manager,\n+      @Fallback(Type.NULL) Player target,\n+      @Default(\"1\") int page)\n+      throws CommandException {\n+    if (target != null) {\n+      MatchPlayer targetMP = manager.getPlayer(target);\n+      List<MatchPlayer> alts = getAltAccounts(target, manager);\n+      if (alts.isEmpty()) {\n+        sender.sendMessage(\n+            new PersonalizedTranslatable(\n+                    \"moderation.commands.noAlts\", targetMP.getStyledName(NameStyle.FANCY))\n+                .getPersonalizedText()\n+                .color(ChatColor.RED));\n+      } else {\n+        sender.sendMessage(formatAltAccountList(targetMP, alts));\n+      }\n+    } else {\n+      List<Component> altAccounts = Lists.newArrayList();\n+      List<MatchPlayer> accountedFor = Lists.newArrayList();\n+\n+      for (Player player : Bukkit.getOnlinePlayers()) {\n+        MatchPlayer targetMP = manager.getPlayer(player);\n+        List<MatchPlayer> alts = getAltAccounts(player, manager);\n+\n+        if (alts.isEmpty() || accountedFor.contains(targetMP)) {\n+          continue;\n+        } else {\n+          altAccounts.add(formatAltAccountList(targetMP, alts));\n+          accountedFor.add(targetMP);\n+          accountedFor.addAll(alts);\n+        }\n+      }\n+\n+      int perPage = 8;\n+      int pages = (altAccounts.size() + perPage - 1) / perPage;\n+\n+      Component pageNum =\n+          new PersonalizedTranslatable(\n+                  \"command.paginatedResult.page\",\n+                  new PersonalizedText(Integer.toString(page)).color(ChatColor.DARK_AQUA),\n+                  new PersonalizedText(Integer.toString(pages)).color(ChatColor.DARK_AQUA))\n+              .getPersonalizedText()\n+              .color(ChatColor.GRAY);\n+\n+      Component headerText =\n+          new PersonalizedTranslatable(\"moderation.alts.header\")\n+              .getPersonalizedText()\n+              .color(ChatColor.DARK_AQUA);\n+\n+      Component header =\n+          new PersonalizedText(\n+              headerText,\n+              new PersonalizedText(\" (\").color(ChatColor.GRAY),\n+              new PersonalizedText(Integer.toString(altAccounts.size())).color(ChatColor.DARK_AQUA),\n+              new PersonalizedText(\") \u00bb Page \").color(ChatColor.GRAY),\n+              pageNum);\n+\n+      Component formattedHeader =\n+          new PersonalizedText(\n+              ComponentUtils.horizontalLineHeading(\n+                  ComponentRenderers.toLegacyText(header, sender), ChatColor.BLUE));\n+\n+      new PrettyPaginatedComponentResults<Component>(formattedHeader, perPage) {\n+        @Override\n+        public Component format(Component data, int index) {\n+          return data;\n+        }\n+\n+        @Override\n+        public Component formatEmpty() throws CommandException {\n+          throw new CommandException(\"No alternate accounts found!\");\n+        }\n+      }.display(audience, altAccounts, page);\n+    }\n+  }\n+\n+  @Command(\n+      aliases = {\"baninfo\", \"lookup\", \"l\"},\n+      usage = \"[player] -u (if input is UUID)\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEzMDY5NA=="}, "originalCommit": {"oid": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0"}, "originalPosition": 345}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTAzOTE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDozNjozOVrOFzGr6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDozNjozOVrOFzGr6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEzMTI0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void banInfo(CommandSender sender, String target, @Switch('u') boolean uuid)\n          \n          \n            \n              public void banInfo(CommandSender sender, String target)", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389131241", "createdAt": "2020-03-06T20:36:39Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)\n+      throws CommandException {\n+    Duration duration = parseBanLength(length);\n+    boolean tempBan = !duration.isZero();\n+\n+    banPlayer(\n+        target,\n+        reason,\n+        formatPunisherName(sender, manager.getMatch(sender)),\n+        tempBan ? Instant.now().plus(duration) : null);\n+    broadcastPunishment(\n+        tempBan ? PunishmentType.TEMP_BAN : PunishmentType.BAN,\n+        manager.getMatch(sender),\n+        sender,\n+        new PersonalizedText(target).color(ChatColor.DARK_AQUA),\n+        reason,\n+        true,\n+        duration);\n+  }\n+\n+  @Command(\n+      aliases = {\"alts\", \"listalts\"},\n+      usage = \"[target] (page)\",\n+      desc = \"List online players on the same IP\",\n+      perms = Permissions.STAFF)\n+  public void alts(\n+      Audience audience,\n+      CommandSender sender,\n+      MatchManager manager,\n+      @Fallback(Type.NULL) Player target,\n+      @Default(\"1\") int page)\n+      throws CommandException {\n+    if (target != null) {\n+      MatchPlayer targetMP = manager.getPlayer(target);\n+      List<MatchPlayer> alts = getAltAccounts(target, manager);\n+      if (alts.isEmpty()) {\n+        sender.sendMessage(\n+            new PersonalizedTranslatable(\n+                    \"moderation.commands.noAlts\", targetMP.getStyledName(NameStyle.FANCY))\n+                .getPersonalizedText()\n+                .color(ChatColor.RED));\n+      } else {\n+        sender.sendMessage(formatAltAccountList(targetMP, alts));\n+      }\n+    } else {\n+      List<Component> altAccounts = Lists.newArrayList();\n+      List<MatchPlayer> accountedFor = Lists.newArrayList();\n+\n+      for (Player player : Bukkit.getOnlinePlayers()) {\n+        MatchPlayer targetMP = manager.getPlayer(player);\n+        List<MatchPlayer> alts = getAltAccounts(player, manager);\n+\n+        if (alts.isEmpty() || accountedFor.contains(targetMP)) {\n+          continue;\n+        } else {\n+          altAccounts.add(formatAltAccountList(targetMP, alts));\n+          accountedFor.add(targetMP);\n+          accountedFor.addAll(alts);\n+        }\n+      }\n+\n+      int perPage = 8;\n+      int pages = (altAccounts.size() + perPage - 1) / perPage;\n+\n+      Component pageNum =\n+          new PersonalizedTranslatable(\n+                  \"command.paginatedResult.page\",\n+                  new PersonalizedText(Integer.toString(page)).color(ChatColor.DARK_AQUA),\n+                  new PersonalizedText(Integer.toString(pages)).color(ChatColor.DARK_AQUA))\n+              .getPersonalizedText()\n+              .color(ChatColor.GRAY);\n+\n+      Component headerText =\n+          new PersonalizedTranslatable(\"moderation.alts.header\")\n+              .getPersonalizedText()\n+              .color(ChatColor.DARK_AQUA);\n+\n+      Component header =\n+          new PersonalizedText(\n+              headerText,\n+              new PersonalizedText(\" (\").color(ChatColor.GRAY),\n+              new PersonalizedText(Integer.toString(altAccounts.size())).color(ChatColor.DARK_AQUA),\n+              new PersonalizedText(\") \u00bb Page \").color(ChatColor.GRAY),\n+              pageNum);\n+\n+      Component formattedHeader =\n+          new PersonalizedText(\n+              ComponentUtils.horizontalLineHeading(\n+                  ComponentRenderers.toLegacyText(header, sender), ChatColor.BLUE));\n+\n+      new PrettyPaginatedComponentResults<Component>(formattedHeader, perPage) {\n+        @Override\n+        public Component format(Component data, int index) {\n+          return data;\n+        }\n+\n+        @Override\n+        public Component formatEmpty() throws CommandException {\n+          throw new CommandException(\"No alternate accounts found!\");\n+        }\n+      }.display(audience, altAccounts, page);\n+    }\n+  }\n+\n+  @Command(\n+      aliases = {\"baninfo\", \"lookup\", \"l\"},\n+      usage = \"[player] -u (if input is UUID)\",\n+      desc = \"Lookup baninfo about a player\",\n+      perms = Permissions.STAFF)\n+  public void banInfo(CommandSender sender, String target, @Switch('u') boolean uuid)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0"}, "originalPosition": 348}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTA0NDEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDozODoyNFrOFzGvCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDozODoyNFrOFzGvCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEzMjA0MQ==", "bodyText": "Make name or UUID toggle based on the format, not based on a flag.\nMinecraft usernames must be between 3 and 16 characters, if it's over 16, it's guaranteed to be a UUID (possibly with, possibly without dashes)", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389132041", "createdAt": "2020-03-06T20:38:24Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)\n+      throws CommandException {\n+    Duration duration = parseBanLength(length);\n+    boolean tempBan = !duration.isZero();\n+\n+    banPlayer(\n+        target,\n+        reason,\n+        formatPunisherName(sender, manager.getMatch(sender)),\n+        tempBan ? Instant.now().plus(duration) : null);\n+    broadcastPunishment(\n+        tempBan ? PunishmentType.TEMP_BAN : PunishmentType.BAN,\n+        manager.getMatch(sender),\n+        sender,\n+        new PersonalizedText(target).color(ChatColor.DARK_AQUA),\n+        reason,\n+        true,\n+        duration);\n+  }\n+\n+  @Command(\n+      aliases = {\"alts\", \"listalts\"},\n+      usage = \"[target] (page)\",\n+      desc = \"List online players on the same IP\",\n+      perms = Permissions.STAFF)\n+  public void alts(\n+      Audience audience,\n+      CommandSender sender,\n+      MatchManager manager,\n+      @Fallback(Type.NULL) Player target,\n+      @Default(\"1\") int page)\n+      throws CommandException {\n+    if (target != null) {\n+      MatchPlayer targetMP = manager.getPlayer(target);\n+      List<MatchPlayer> alts = getAltAccounts(target, manager);\n+      if (alts.isEmpty()) {\n+        sender.sendMessage(\n+            new PersonalizedTranslatable(\n+                    \"moderation.commands.noAlts\", targetMP.getStyledName(NameStyle.FANCY))\n+                .getPersonalizedText()\n+                .color(ChatColor.RED));\n+      } else {\n+        sender.sendMessage(formatAltAccountList(targetMP, alts));\n+      }\n+    } else {\n+      List<Component> altAccounts = Lists.newArrayList();\n+      List<MatchPlayer> accountedFor = Lists.newArrayList();\n+\n+      for (Player player : Bukkit.getOnlinePlayers()) {\n+        MatchPlayer targetMP = manager.getPlayer(player);\n+        List<MatchPlayer> alts = getAltAccounts(player, manager);\n+\n+        if (alts.isEmpty() || accountedFor.contains(targetMP)) {\n+          continue;\n+        } else {\n+          altAccounts.add(formatAltAccountList(targetMP, alts));\n+          accountedFor.add(targetMP);\n+          accountedFor.addAll(alts);\n+        }\n+      }\n+\n+      int perPage = 8;\n+      int pages = (altAccounts.size() + perPage - 1) / perPage;\n+\n+      Component pageNum =\n+          new PersonalizedTranslatable(\n+                  \"command.paginatedResult.page\",\n+                  new PersonalizedText(Integer.toString(page)).color(ChatColor.DARK_AQUA),\n+                  new PersonalizedText(Integer.toString(pages)).color(ChatColor.DARK_AQUA))\n+              .getPersonalizedText()\n+              .color(ChatColor.GRAY);\n+\n+      Component headerText =\n+          new PersonalizedTranslatable(\"moderation.alts.header\")\n+              .getPersonalizedText()\n+              .color(ChatColor.DARK_AQUA);\n+\n+      Component header =\n+          new PersonalizedText(\n+              headerText,\n+              new PersonalizedText(\" (\").color(ChatColor.GRAY),\n+              new PersonalizedText(Integer.toString(altAccounts.size())).color(ChatColor.DARK_AQUA),\n+              new PersonalizedText(\") \u00bb Page \").color(ChatColor.GRAY),\n+              pageNum);\n+\n+      Component formattedHeader =\n+          new PersonalizedText(\n+              ComponentUtils.horizontalLineHeading(\n+                  ComponentRenderers.toLegacyText(header, sender), ChatColor.BLUE));\n+\n+      new PrettyPaginatedComponentResults<Component>(formattedHeader, perPage) {\n+        @Override\n+        public Component format(Component data, int index) {\n+          return data;\n+        }\n+\n+        @Override\n+        public Component formatEmpty() throws CommandException {\n+          throw new CommandException(\"No alternate accounts found!\");\n+        }\n+      }.display(audience, altAccounts, page);\n+    }\n+  }\n+\n+  @Command(\n+      aliases = {\"baninfo\", \"lookup\", \"l\"},\n+      usage = \"[player] -u (if input is UUID)\",\n+      desc = \"Lookup baninfo about a player\",\n+      perms = Permissions.STAFF)\n+  public void banInfo(CommandSender sender, String target, @Switch('u') boolean uuid)\n+      throws CommandException {\n+    BanEntry ban = Bukkit.getBanList(BanList.Type.NAME).getBanEntry(target);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0"}, "originalPosition": 350}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTA1MDQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDo0MDo0N1rOFzGy8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDo0MDo0N1rOFzGy8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEzMzA0Mg==", "bodyText": "Switch this one arround to:\nif (ban == null ||\n    (ban.getExpiration() != null && ban.getExpiration.toInstant().isBefore(Instant.now())) { \n   throw CommandEx...;\n}\n\nIt will make the rest of the command not be indented by one and probably easier to read", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389133042", "createdAt": "2020-03-06T20:40:47Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)\n+      throws CommandException {\n+    Duration duration = parseBanLength(length);\n+    boolean tempBan = !duration.isZero();\n+\n+    banPlayer(\n+        target,\n+        reason,\n+        formatPunisherName(sender, manager.getMatch(sender)),\n+        tempBan ? Instant.now().plus(duration) : null);\n+    broadcastPunishment(\n+        tempBan ? PunishmentType.TEMP_BAN : PunishmentType.BAN,\n+        manager.getMatch(sender),\n+        sender,\n+        new PersonalizedText(target).color(ChatColor.DARK_AQUA),\n+        reason,\n+        true,\n+        duration);\n+  }\n+\n+  @Command(\n+      aliases = {\"alts\", \"listalts\"},\n+      usage = \"[target] (page)\",\n+      desc = \"List online players on the same IP\",\n+      perms = Permissions.STAFF)\n+  public void alts(\n+      Audience audience,\n+      CommandSender sender,\n+      MatchManager manager,\n+      @Fallback(Type.NULL) Player target,\n+      @Default(\"1\") int page)\n+      throws CommandException {\n+    if (target != null) {\n+      MatchPlayer targetMP = manager.getPlayer(target);\n+      List<MatchPlayer> alts = getAltAccounts(target, manager);\n+      if (alts.isEmpty()) {\n+        sender.sendMessage(\n+            new PersonalizedTranslatable(\n+                    \"moderation.commands.noAlts\", targetMP.getStyledName(NameStyle.FANCY))\n+                .getPersonalizedText()\n+                .color(ChatColor.RED));\n+      } else {\n+        sender.sendMessage(formatAltAccountList(targetMP, alts));\n+      }\n+    } else {\n+      List<Component> altAccounts = Lists.newArrayList();\n+      List<MatchPlayer> accountedFor = Lists.newArrayList();\n+\n+      for (Player player : Bukkit.getOnlinePlayers()) {\n+        MatchPlayer targetMP = manager.getPlayer(player);\n+        List<MatchPlayer> alts = getAltAccounts(player, manager);\n+\n+        if (alts.isEmpty() || accountedFor.contains(targetMP)) {\n+          continue;\n+        } else {\n+          altAccounts.add(formatAltAccountList(targetMP, alts));\n+          accountedFor.add(targetMP);\n+          accountedFor.addAll(alts);\n+        }\n+      }\n+\n+      int perPage = 8;\n+      int pages = (altAccounts.size() + perPage - 1) / perPage;\n+\n+      Component pageNum =\n+          new PersonalizedTranslatable(\n+                  \"command.paginatedResult.page\",\n+                  new PersonalizedText(Integer.toString(page)).color(ChatColor.DARK_AQUA),\n+                  new PersonalizedText(Integer.toString(pages)).color(ChatColor.DARK_AQUA))\n+              .getPersonalizedText()\n+              .color(ChatColor.GRAY);\n+\n+      Component headerText =\n+          new PersonalizedTranslatable(\"moderation.alts.header\")\n+              .getPersonalizedText()\n+              .color(ChatColor.DARK_AQUA);\n+\n+      Component header =\n+          new PersonalizedText(\n+              headerText,\n+              new PersonalizedText(\" (\").color(ChatColor.GRAY),\n+              new PersonalizedText(Integer.toString(altAccounts.size())).color(ChatColor.DARK_AQUA),\n+              new PersonalizedText(\") \u00bb Page \").color(ChatColor.GRAY),\n+              pageNum);\n+\n+      Component formattedHeader =\n+          new PersonalizedText(\n+              ComponentUtils.horizontalLineHeading(\n+                  ComponentRenderers.toLegacyText(header, sender), ChatColor.BLUE));\n+\n+      new PrettyPaginatedComponentResults<Component>(formattedHeader, perPage) {\n+        @Override\n+        public Component format(Component data, int index) {\n+          return data;\n+        }\n+\n+        @Override\n+        public Component formatEmpty() throws CommandException {\n+          throw new CommandException(\"No alternate accounts found!\");\n+        }\n+      }.display(audience, altAccounts, page);\n+    }\n+  }\n+\n+  @Command(\n+      aliases = {\"baninfo\", \"lookup\", \"l\"},\n+      usage = \"[player] -u (if input is UUID)\",\n+      desc = \"Lookup baninfo about a player\",\n+      perms = Permissions.STAFF)\n+  public void banInfo(CommandSender sender, String target, @Switch('u') boolean uuid)\n+      throws CommandException {\n+    BanEntry ban = Bukkit.getBanList(BanList.Type.NAME).getBanEntry(target);\n+\n+    if (ban != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0"}, "originalPosition": 352}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1140, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}