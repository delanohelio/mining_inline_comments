{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MTE4MzQ5", "number": 390, "title": "Aggrandize Moderation - (Freeze command & other improvements)", "bodyText": "Aggrandize Moderation\n(or simply more improvements to moderation commands)\nI'm back once again with several great changes to the moderation feature set. Most notably re-implementing the /freeeze command! Also added are a few important improvements to bans to make the feature set even better.\nResolves #135\nFreeze \u2744\ufe0f\nWith this reintroduced feature, moderators will now have the ability to freeze via command or observer tool. Also added is a command to view a list of frozen players.\nCommand: /freeze [target] - Freezes a player in place\nCommand: /unfreeze [target] - Unfreezes a player\nCommand: /freezelist - Displays a list of frozen players\nNote: At the moment the Freeze tool does not contain any configuration values. I felt that since all of the moderation commands at this time are enabled by default, there would be no reason to make this addition any different.\nA few additional details regarding this feature, I've added it so when a player logs off after being frozen, logging back on they will be re-frozen by the console. Also frozen players will be unable to perform commands while frozen except for /msg and /r. Though at this time I chose not to block frozen players from speaking in chat completely. However I would like some feedback on whether this is something that should be changed.\nModeration Improvements\nI've included a brief overview of the more noteworthy changes to moderation features:\n\nUsing /ipban [username] of a player who was recently banned, will ban their IP as we cache recently banned players.\nFixed unbanned players triggering similar IP account alert.\nWill alert sender when an IP ban is successful (includes # of online alts banned).\nNow banned/temp-banned players will see a fully formatted kick screen when attempting to rejoin.\n\nMisc Changes.\n\nClean up admin chat broadcasts with new static method.\nReformat TNT defuser display name to match other tools.\n\nScreenshots:\n\nExample of using freeze tool and alert it broadcasts in the admin chat.\n\nWhat the title looks like that is displayed to frozen players.\n\nIf a frozen player re-logs, they will be frozen by the console until the match cycles or unfrozen by a staff member.\n\nThe more consistent display name for TNT Defuser along with new Freeze tool.\n\nExample of what is shown to staff using the /freezelist command.\nFinal thoughts\nThat should be everything that was changed in this PR. I did perform extensive testing and everything should be ready to go. Let me know if there are any suggestions/changes that need to be done and I\u2019ll take care of it as soon as I can.\nSigned-off-by: applenick applenick@users.noreply.github.com", "createdAt": "2020-03-31T07:00:11Z", "url": "https://github.com/PGMDev/PGM/pull/390", "merged": true, "mergeCommit": {"oid": "5ef241ad7ff8b190098308b0817f411e020d1942"}, "closed": true, "closedAt": "2020-04-10T14:30:08Z", "author": {"login": "applenick"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcS9JNLgH2gAyMzk2MTE4MzQ5OjYxOGM0Yzg3NjI1MTY3M2ZlNjM3MDU4NTRlODJkYzViZTFjMzM3Mzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWR8MagH2gAyMzk2MTE4MzQ5OjgzYjgzZTA4YTJkYWZkZDU4MjRiNjU3MTdjMDk4NDFkMWQ0MzcxNTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "618c4c876251673fe63705854e82dc5be1c33738", "author": {"user": {"login": "applenick", "name": "applenick"}}, "url": "https://github.com/PGMDev/PGM/commit/618c4c876251673fe63705854e82dc5be1c33738", "committedDate": "2020-03-31T06:30:59Z", "message": "Reintroduce freeze command\n* Along with several other moderation improvements\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTIwMDU2", "url": "https://github.com/PGMDev/PGM/pull/390#pullrequestreview-384520056", "createdAt": "2020-03-31T08:42:08Z", "commit": {"oid": "618c4c876251673fe63705854e82dc5be1c33738"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo0MjowOFrOF-LRVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo0MjowOFrOF-LRVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0MDY5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ChatColor.DARK_AQUA\n          \n          \n            \n                    ChatColor.AQUA", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r400740695", "createdAt": "2020-03-31T08:42:08Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/community/modules/FreezeMatchModule.java", "diffHunk": "@@ -0,0 +1,349 @@\n+package tc.oc.pgm.community.modules;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.command.CommandSender;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Player;\n+import org.bukkit.entity.TNTPrimed;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.event.block.BlockPlaceEvent;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.player.PlayerBucketEmptyEvent;\n+import org.bukkit.event.player.PlayerBucketFillEvent;\n+import org.bukkit.event.player.PlayerCommandPreprocessEvent;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerMoveEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.event.vehicle.VehicleDamageEvent;\n+import org.bukkit.event.vehicle.VehicleEnterEvent;\n+import org.bukkit.event.vehicle.VehicleExitEvent;\n+import org.bukkit.event.vehicle.VehicleMoveEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.Permissions;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.event.ObserverInteractEvent;\n+import tc.oc.pgm.community.commands.ModerationCommands;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.listeners.ChatDispatcher;\n+import tc.oc.pgm.spawns.events.ObserverKitApplyEvent;\n+import tc.oc.util.bukkit.OnlinePlayerMapAdapter;\n+import tc.oc.util.bukkit.chat.Sound;\n+import tc.oc.util.bukkit.component.Component;\n+import tc.oc.util.bukkit.component.Components;\n+import tc.oc.util.bukkit.component.types.PersonalizedTranslatable;\n+import tc.oc.util.bukkit.named.NameStyle;\n+import tc.oc.util.bukkit.translations.AllTranslations;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FreezeMatchModule implements MatchModule, Listener {\n+\n+  private static final Material TOOL_MATERIAL = Material.ICE;\n+  private static final int TOOL_SLOT_NUM = 6;\n+\n+  private final Match match;\n+  private final Freeze freeze;\n+\n+  public FreezeMatchModule(Match match) {\n+    this.match = match;\n+    this.freeze = new Freeze();\n+  }\n+\n+  public Freeze getFreeze() {\n+    return freeze;\n+  }\n+\n+  public List<MatchPlayer> getFrozenPlayers() {\n+    return freeze.frozenPlayers.values().stream().collect(Collectors.toList());\n+  }\n+\n+  private ItemStack getFreezeTool(CommandSender viewer) {\n+    ItemStack stack = new ItemStack(TOOL_MATERIAL);\n+    ItemMeta meta = stack.getItemMeta();\n+    meta.setDisplayName(\n+        ChatColor.DARK_AQUA", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618c4c876251673fe63705854e82dc5be1c33738"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjU3MTU1", "url": "https://github.com/PGMDev/PGM/pull/390#pullrequestreview-384657155", "createdAt": "2020-03-31T11:54:09Z", "commit": {"oid": "618c4c876251673fe63705854e82dc5be1c33738"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTo1NDowOVrOF-SENw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjoxMzozN1rOF-SvSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1MjAyMw==", "bodyText": "This should probably be in ObserverToolFactory / Observing", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r400852023", "createdAt": "2020-03-31T11:54:09Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/community/modules/FreezeMatchModule.java", "diffHunk": "@@ -0,0 +1,349 @@\n+package tc.oc.pgm.community.modules;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.command.CommandSender;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Player;\n+import org.bukkit.entity.TNTPrimed;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.event.block.BlockPlaceEvent;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.player.PlayerBucketEmptyEvent;\n+import org.bukkit.event.player.PlayerBucketFillEvent;\n+import org.bukkit.event.player.PlayerCommandPreprocessEvent;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerMoveEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.event.vehicle.VehicleDamageEvent;\n+import org.bukkit.event.vehicle.VehicleEnterEvent;\n+import org.bukkit.event.vehicle.VehicleExitEvent;\n+import org.bukkit.event.vehicle.VehicleMoveEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.Permissions;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.event.ObserverInteractEvent;\n+import tc.oc.pgm.community.commands.ModerationCommands;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.listeners.ChatDispatcher;\n+import tc.oc.pgm.spawns.events.ObserverKitApplyEvent;\n+import tc.oc.util.bukkit.OnlinePlayerMapAdapter;\n+import tc.oc.util.bukkit.chat.Sound;\n+import tc.oc.util.bukkit.component.Component;\n+import tc.oc.util.bukkit.component.Components;\n+import tc.oc.util.bukkit.component.types.PersonalizedTranslatable;\n+import tc.oc.util.bukkit.named.NameStyle;\n+import tc.oc.util.bukkit.translations.AllTranslations;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FreezeMatchModule implements MatchModule, Listener {\n+\n+  private static final Material TOOL_MATERIAL = Material.ICE;\n+  private static final int TOOL_SLOT_NUM = 6;\n+\n+  private final Match match;\n+  private final Freeze freeze;\n+\n+  public FreezeMatchModule(Match match) {\n+    this.match = match;\n+    this.freeze = new Freeze();\n+  }\n+\n+  public Freeze getFreeze() {\n+    return freeze;\n+  }\n+\n+  public List<MatchPlayer> getFrozenPlayers() {\n+    return freeze.frozenPlayers.values().stream().collect(Collectors.toList());\n+  }\n+\n+  private ItemStack getFreezeTool(CommandSender viewer) {\n+    ItemStack stack = new ItemStack(TOOL_MATERIAL);\n+    ItemMeta meta = stack.getItemMeta();\n+    meta.setDisplayName(\n+        ChatColor.DARK_AQUA\n+            + ChatColor.BOLD.toString()\n+            + AllTranslations.get().translate(\"freeze.itemName\", viewer));\n+    meta.addItemFlags(ItemFlag.values());\n+    meta.setLore(\n+        Collections.singletonList(\n+            ChatColor.GRAY + AllTranslations.get().translate(\"freeze.itemDescription\", viewer)));\n+    stack.setItemMeta(meta);\n+    return stack;\n+  }\n+\n+  @EventHandler\n+  public void giveKit(final ObserverKitApplyEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618c4c876251673fe63705854e82dc5be1c33738"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NDk2Ng==", "bodyText": "You should also add /tell and /reply", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r400854966", "createdAt": "2020-03-31T11:59:17Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/community/modules/FreezeMatchModule.java", "diffHunk": "@@ -0,0 +1,349 @@\n+package tc.oc.pgm.community.modules;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.command.CommandSender;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Player;\n+import org.bukkit.entity.TNTPrimed;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.event.block.BlockPlaceEvent;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.player.PlayerBucketEmptyEvent;\n+import org.bukkit.event.player.PlayerBucketFillEvent;\n+import org.bukkit.event.player.PlayerCommandPreprocessEvent;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerMoveEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.event.vehicle.VehicleDamageEvent;\n+import org.bukkit.event.vehicle.VehicleEnterEvent;\n+import org.bukkit.event.vehicle.VehicleExitEvent;\n+import org.bukkit.event.vehicle.VehicleMoveEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.Permissions;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.event.ObserverInteractEvent;\n+import tc.oc.pgm.community.commands.ModerationCommands;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.listeners.ChatDispatcher;\n+import tc.oc.pgm.spawns.events.ObserverKitApplyEvent;\n+import tc.oc.util.bukkit.OnlinePlayerMapAdapter;\n+import tc.oc.util.bukkit.chat.Sound;\n+import tc.oc.util.bukkit.component.Component;\n+import tc.oc.util.bukkit.component.Components;\n+import tc.oc.util.bukkit.component.types.PersonalizedTranslatable;\n+import tc.oc.util.bukkit.named.NameStyle;\n+import tc.oc.util.bukkit.translations.AllTranslations;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FreezeMatchModule implements MatchModule, Listener {\n+\n+  private static final Material TOOL_MATERIAL = Material.ICE;\n+  private static final int TOOL_SLOT_NUM = 6;\n+\n+  private final Match match;\n+  private final Freeze freeze;\n+\n+  public FreezeMatchModule(Match match) {\n+    this.match = match;\n+    this.freeze = new Freeze();\n+  }\n+\n+  public Freeze getFreeze() {\n+    return freeze;\n+  }\n+\n+  public List<MatchPlayer> getFrozenPlayers() {\n+    return freeze.frozenPlayers.values().stream().collect(Collectors.toList());\n+  }\n+\n+  private ItemStack getFreezeTool(CommandSender viewer) {\n+    ItemStack stack = new ItemStack(TOOL_MATERIAL);\n+    ItemMeta meta = stack.getItemMeta();\n+    meta.setDisplayName(\n+        ChatColor.DARK_AQUA\n+            + ChatColor.BOLD.toString()\n+            + AllTranslations.get().translate(\"freeze.itemName\", viewer));\n+    meta.addItemFlags(ItemFlag.values());\n+    meta.setLore(\n+        Collections.singletonList(\n+            ChatColor.GRAY + AllTranslations.get().translate(\"freeze.itemDescription\", viewer)));\n+    stack.setItemMeta(meta);\n+    return stack;\n+  }\n+\n+  @EventHandler\n+  public void giveKit(final ObserverKitApplyEvent event) {\n+    Player player = event.getPlayer().getBukkit();\n+    if (player.hasPermission(Permissions.STAFF)) {\n+      player.getInventory().setItem(TOOL_SLOT_NUM, getFreezeTool(player));\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerInteractEntity(final ObserverInteractEvent event) {\n+    if (event.getPlayer().isDead()) return;\n+\n+    if (freeze.isFrozen(event.getPlayer().getBukkit())) {\n+      event.setCancelled(true);\n+    } else {\n+      if (event.getClickedItem() != null\n+          && event.getClickedItem().getType() == TOOL_MATERIAL\n+          && event.getPlayer().getBukkit().hasPermission(Permissions.STAFF)\n+          && event.getClickedPlayer() != null) {\n+\n+        event.setCancelled(true);\n+\n+        freeze.setFrozen(\n+            event.getPlayer().getBukkit(),\n+            event.getClickedPlayer(),\n+            !freeze.isFrozen(event.getClickedEntity()));\n+      }\n+    }\n+  }\n+\n+  private static final List<String> ALLOWED_CMDS = Lists.newArrayList(\"/msg\", \"/r\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618c4c876251673fe63705854e82dc5be1c33738"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MDkxMg==", "bodyText": "I believe you can just cancel PlayerBucketEvent instead of both fill and empty?", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r400860912", "createdAt": "2020-03-31T12:09:55Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/community/modules/FreezeMatchModule.java", "diffHunk": "@@ -0,0 +1,349 @@\n+package tc.oc.pgm.community.modules;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.command.CommandSender;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Player;\n+import org.bukkit.entity.TNTPrimed;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.event.block.BlockPlaceEvent;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.player.PlayerBucketEmptyEvent;\n+import org.bukkit.event.player.PlayerBucketFillEvent;\n+import org.bukkit.event.player.PlayerCommandPreprocessEvent;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerMoveEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.event.vehicle.VehicleDamageEvent;\n+import org.bukkit.event.vehicle.VehicleEnterEvent;\n+import org.bukkit.event.vehicle.VehicleExitEvent;\n+import org.bukkit.event.vehicle.VehicleMoveEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.Permissions;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.event.ObserverInteractEvent;\n+import tc.oc.pgm.community.commands.ModerationCommands;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.listeners.ChatDispatcher;\n+import tc.oc.pgm.spawns.events.ObserverKitApplyEvent;\n+import tc.oc.util.bukkit.OnlinePlayerMapAdapter;\n+import tc.oc.util.bukkit.chat.Sound;\n+import tc.oc.util.bukkit.component.Component;\n+import tc.oc.util.bukkit.component.Components;\n+import tc.oc.util.bukkit.component.types.PersonalizedTranslatable;\n+import tc.oc.util.bukkit.named.NameStyle;\n+import tc.oc.util.bukkit.translations.AllTranslations;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FreezeMatchModule implements MatchModule, Listener {\n+\n+  private static final Material TOOL_MATERIAL = Material.ICE;\n+  private static final int TOOL_SLOT_NUM = 6;\n+\n+  private final Match match;\n+  private final Freeze freeze;\n+\n+  public FreezeMatchModule(Match match) {\n+    this.match = match;\n+    this.freeze = new Freeze();\n+  }\n+\n+  public Freeze getFreeze() {\n+    return freeze;\n+  }\n+\n+  public List<MatchPlayer> getFrozenPlayers() {\n+    return freeze.frozenPlayers.values().stream().collect(Collectors.toList());\n+  }\n+\n+  private ItemStack getFreezeTool(CommandSender viewer) {\n+    ItemStack stack = new ItemStack(TOOL_MATERIAL);\n+    ItemMeta meta = stack.getItemMeta();\n+    meta.setDisplayName(\n+        ChatColor.DARK_AQUA\n+            + ChatColor.BOLD.toString()\n+            + AllTranslations.get().translate(\"freeze.itemName\", viewer));\n+    meta.addItemFlags(ItemFlag.values());\n+    meta.setLore(\n+        Collections.singletonList(\n+            ChatColor.GRAY + AllTranslations.get().translate(\"freeze.itemDescription\", viewer)));\n+    stack.setItemMeta(meta);\n+    return stack;\n+  }\n+\n+  @EventHandler\n+  public void giveKit(final ObserverKitApplyEvent event) {\n+    Player player = event.getPlayer().getBukkit();\n+    if (player.hasPermission(Permissions.STAFF)) {\n+      player.getInventory().setItem(TOOL_SLOT_NUM, getFreezeTool(player));\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerInteractEntity(final ObserverInteractEvent event) {\n+    if (event.getPlayer().isDead()) return;\n+\n+    if (freeze.isFrozen(event.getPlayer().getBukkit())) {\n+      event.setCancelled(true);\n+    } else {\n+      if (event.getClickedItem() != null\n+          && event.getClickedItem().getType() == TOOL_MATERIAL\n+          && event.getPlayer().getBukkit().hasPermission(Permissions.STAFF)\n+          && event.getClickedPlayer() != null) {\n+\n+        event.setCancelled(true);\n+\n+        freeze.setFrozen(\n+            event.getPlayer().getBukkit(),\n+            event.getClickedPlayer(),\n+            !freeze.isFrozen(event.getClickedEntity()));\n+      }\n+    }\n+  }\n+\n+  private static final List<String> ALLOWED_CMDS = Lists.newArrayList(\"/msg\", \"/r\");\n+\n+  @EventHandler(priority = EventPriority.HIGH)\n+  public void onPlayerCommand(final PlayerCommandPreprocessEvent event) {\n+    if (freeze.isFrozen(event.getPlayer()) && !event.getPlayer().hasPermission(Permissions.STAFF)) {\n+      boolean allow =\n+          ALLOWED_CMDS.stream()\n+              .filter(cmd -> event.getMessage().startsWith(cmd))\n+              .findAny()\n+              .isPresent();\n+\n+      if (!allow) {\n+        // Don't allow commands except for those related to chat.\n+        event.setCancelled(true);\n+      }\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerMove(final PlayerMoveEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      Location old = event.getFrom();\n+      old.setPitch(event.getTo().getPitch());\n+      old.setYaw(event.getTo().getYaw());\n+      event.setTo(old);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)\n+  public void onVehicleMove(final VehicleMoveEvent event) {\n+    if (!event.getVehicle().isEmpty() && freeze.isFrozen(event.getVehicle().getPassenger())) {\n+      event.getVehicle().setVelocity(new Vector(0, 0, 0));\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onVehicleEnter(final VehicleEnterEvent event) {\n+    if (freeze.isFrozen(event.getEntered())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onVehicleExit(final VehicleExitEvent event) {\n+    if (freeze.isFrozen(event.getExited())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBlockBreak(final BlockBreakEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBlockPlace(final BlockPlaceEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBucketFill(final PlayerBucketFillEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBucketEmpty(final PlayerBucketEmptyEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618c4c876251673fe63705854e82dc5be1c33738"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjI0Mg==", "bodyText": "Same for this, why not just cancel all InventoryEvents, that way to can also cancel events like InventoryOpenEvent and opening other interfaces like Anvils, Crafting tables..\nEDIT: My bad, InventoryEvents dont directly relate to a player it seems. But you can maybe stop InventoryOpenEvent at least?", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r400862242", "createdAt": "2020-03-31T12:12:13Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/community/modules/FreezeMatchModule.java", "diffHunk": "@@ -0,0 +1,349 @@\n+package tc.oc.pgm.community.modules;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.command.CommandSender;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Player;\n+import org.bukkit.entity.TNTPrimed;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.event.block.BlockPlaceEvent;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.player.PlayerBucketEmptyEvent;\n+import org.bukkit.event.player.PlayerBucketFillEvent;\n+import org.bukkit.event.player.PlayerCommandPreprocessEvent;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerMoveEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.event.vehicle.VehicleDamageEvent;\n+import org.bukkit.event.vehicle.VehicleEnterEvent;\n+import org.bukkit.event.vehicle.VehicleExitEvent;\n+import org.bukkit.event.vehicle.VehicleMoveEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.Permissions;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.event.ObserverInteractEvent;\n+import tc.oc.pgm.community.commands.ModerationCommands;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.listeners.ChatDispatcher;\n+import tc.oc.pgm.spawns.events.ObserverKitApplyEvent;\n+import tc.oc.util.bukkit.OnlinePlayerMapAdapter;\n+import tc.oc.util.bukkit.chat.Sound;\n+import tc.oc.util.bukkit.component.Component;\n+import tc.oc.util.bukkit.component.Components;\n+import tc.oc.util.bukkit.component.types.PersonalizedTranslatable;\n+import tc.oc.util.bukkit.named.NameStyle;\n+import tc.oc.util.bukkit.translations.AllTranslations;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FreezeMatchModule implements MatchModule, Listener {\n+\n+  private static final Material TOOL_MATERIAL = Material.ICE;\n+  private static final int TOOL_SLOT_NUM = 6;\n+\n+  private final Match match;\n+  private final Freeze freeze;\n+\n+  public FreezeMatchModule(Match match) {\n+    this.match = match;\n+    this.freeze = new Freeze();\n+  }\n+\n+  public Freeze getFreeze() {\n+    return freeze;\n+  }\n+\n+  public List<MatchPlayer> getFrozenPlayers() {\n+    return freeze.frozenPlayers.values().stream().collect(Collectors.toList());\n+  }\n+\n+  private ItemStack getFreezeTool(CommandSender viewer) {\n+    ItemStack stack = new ItemStack(TOOL_MATERIAL);\n+    ItemMeta meta = stack.getItemMeta();\n+    meta.setDisplayName(\n+        ChatColor.DARK_AQUA\n+            + ChatColor.BOLD.toString()\n+            + AllTranslations.get().translate(\"freeze.itemName\", viewer));\n+    meta.addItemFlags(ItemFlag.values());\n+    meta.setLore(\n+        Collections.singletonList(\n+            ChatColor.GRAY + AllTranslations.get().translate(\"freeze.itemDescription\", viewer)));\n+    stack.setItemMeta(meta);\n+    return stack;\n+  }\n+\n+  @EventHandler\n+  public void giveKit(final ObserverKitApplyEvent event) {\n+    Player player = event.getPlayer().getBukkit();\n+    if (player.hasPermission(Permissions.STAFF)) {\n+      player.getInventory().setItem(TOOL_SLOT_NUM, getFreezeTool(player));\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerInteractEntity(final ObserverInteractEvent event) {\n+    if (event.getPlayer().isDead()) return;\n+\n+    if (freeze.isFrozen(event.getPlayer().getBukkit())) {\n+      event.setCancelled(true);\n+    } else {\n+      if (event.getClickedItem() != null\n+          && event.getClickedItem().getType() == TOOL_MATERIAL\n+          && event.getPlayer().getBukkit().hasPermission(Permissions.STAFF)\n+          && event.getClickedPlayer() != null) {\n+\n+        event.setCancelled(true);\n+\n+        freeze.setFrozen(\n+            event.getPlayer().getBukkit(),\n+            event.getClickedPlayer(),\n+            !freeze.isFrozen(event.getClickedEntity()));\n+      }\n+    }\n+  }\n+\n+  private static final List<String> ALLOWED_CMDS = Lists.newArrayList(\"/msg\", \"/r\");\n+\n+  @EventHandler(priority = EventPriority.HIGH)\n+  public void onPlayerCommand(final PlayerCommandPreprocessEvent event) {\n+    if (freeze.isFrozen(event.getPlayer()) && !event.getPlayer().hasPermission(Permissions.STAFF)) {\n+      boolean allow =\n+          ALLOWED_CMDS.stream()\n+              .filter(cmd -> event.getMessage().startsWith(cmd))\n+              .findAny()\n+              .isPresent();\n+\n+      if (!allow) {\n+        // Don't allow commands except for those related to chat.\n+        event.setCancelled(true);\n+      }\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerMove(final PlayerMoveEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      Location old = event.getFrom();\n+      old.setPitch(event.getTo().getPitch());\n+      old.setYaw(event.getTo().getYaw());\n+      event.setTo(old);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)\n+  public void onVehicleMove(final VehicleMoveEvent event) {\n+    if (!event.getVehicle().isEmpty() && freeze.isFrozen(event.getVehicle().getPassenger())) {\n+      event.getVehicle().setVelocity(new Vector(0, 0, 0));\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onVehicleEnter(final VehicleEnterEvent event) {\n+    if (freeze.isFrozen(event.getEntered())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onVehicleExit(final VehicleExitEvent event) {\n+    if (freeze.isFrozen(event.getExited())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBlockBreak(final BlockBreakEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBlockPlace(final BlockPlaceEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBucketFill(final PlayerBucketFillEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBucketEmpty(final PlayerBucketEmptyEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW) // ignoreCancelled doesn't seem to work well here\n+  public void onPlayerInteract(final PlayerInteractEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onInventoryClick(final InventoryClickEvent event) {\n+    if (event.getWhoClicked() instanceof Player) {\n+      if (freeze.isFrozen(event.getWhoClicked())) {\n+        event.setCancelled(true);\n+      }\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618c4c876251673fe63705854e82dc5be1c33738"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MzA1MQ==", "bodyText": "This should maybe be placed together with the other VeichleEvents? And why not just cancel all VehicleEvents? :p", "url": "https://github.com/PGMDev/PGM/pull/390#discussion_r400863051", "createdAt": "2020-03-31T12:13:37Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/community/modules/FreezeMatchModule.java", "diffHunk": "@@ -0,0 +1,349 @@\n+package tc.oc.pgm.community.modules;\n+\n+import com.google.common.collect.Lists;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.command.CommandSender;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Player;\n+import org.bukkit.entity.TNTPrimed;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.event.block.BlockPlaceEvent;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.player.PlayerBucketEmptyEvent;\n+import org.bukkit.event.player.PlayerBucketFillEvent;\n+import org.bukkit.event.player.PlayerCommandPreprocessEvent;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerMoveEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.event.vehicle.VehicleDamageEvent;\n+import org.bukkit.event.vehicle.VehicleEnterEvent;\n+import org.bukkit.event.vehicle.VehicleExitEvent;\n+import org.bukkit.event.vehicle.VehicleMoveEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.Permissions;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.event.ObserverInteractEvent;\n+import tc.oc.pgm.community.commands.ModerationCommands;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.listeners.ChatDispatcher;\n+import tc.oc.pgm.spawns.events.ObserverKitApplyEvent;\n+import tc.oc.util.bukkit.OnlinePlayerMapAdapter;\n+import tc.oc.util.bukkit.chat.Sound;\n+import tc.oc.util.bukkit.component.Component;\n+import tc.oc.util.bukkit.component.Components;\n+import tc.oc.util.bukkit.component.types.PersonalizedTranslatable;\n+import tc.oc.util.bukkit.named.NameStyle;\n+import tc.oc.util.bukkit.translations.AllTranslations;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FreezeMatchModule implements MatchModule, Listener {\n+\n+  private static final Material TOOL_MATERIAL = Material.ICE;\n+  private static final int TOOL_SLOT_NUM = 6;\n+\n+  private final Match match;\n+  private final Freeze freeze;\n+\n+  public FreezeMatchModule(Match match) {\n+    this.match = match;\n+    this.freeze = new Freeze();\n+  }\n+\n+  public Freeze getFreeze() {\n+    return freeze;\n+  }\n+\n+  public List<MatchPlayer> getFrozenPlayers() {\n+    return freeze.frozenPlayers.values().stream().collect(Collectors.toList());\n+  }\n+\n+  private ItemStack getFreezeTool(CommandSender viewer) {\n+    ItemStack stack = new ItemStack(TOOL_MATERIAL);\n+    ItemMeta meta = stack.getItemMeta();\n+    meta.setDisplayName(\n+        ChatColor.DARK_AQUA\n+            + ChatColor.BOLD.toString()\n+            + AllTranslations.get().translate(\"freeze.itemName\", viewer));\n+    meta.addItemFlags(ItemFlag.values());\n+    meta.setLore(\n+        Collections.singletonList(\n+            ChatColor.GRAY + AllTranslations.get().translate(\"freeze.itemDescription\", viewer)));\n+    stack.setItemMeta(meta);\n+    return stack;\n+  }\n+\n+  @EventHandler\n+  public void giveKit(final ObserverKitApplyEvent event) {\n+    Player player = event.getPlayer().getBukkit();\n+    if (player.hasPermission(Permissions.STAFF)) {\n+      player.getInventory().setItem(TOOL_SLOT_NUM, getFreezeTool(player));\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerInteractEntity(final ObserverInteractEvent event) {\n+    if (event.getPlayer().isDead()) return;\n+\n+    if (freeze.isFrozen(event.getPlayer().getBukkit())) {\n+      event.setCancelled(true);\n+    } else {\n+      if (event.getClickedItem() != null\n+          && event.getClickedItem().getType() == TOOL_MATERIAL\n+          && event.getPlayer().getBukkit().hasPermission(Permissions.STAFF)\n+          && event.getClickedPlayer() != null) {\n+\n+        event.setCancelled(true);\n+\n+        freeze.setFrozen(\n+            event.getPlayer().getBukkit(),\n+            event.getClickedPlayer(),\n+            !freeze.isFrozen(event.getClickedEntity()));\n+      }\n+    }\n+  }\n+\n+  private static final List<String> ALLOWED_CMDS = Lists.newArrayList(\"/msg\", \"/r\");\n+\n+  @EventHandler(priority = EventPriority.HIGH)\n+  public void onPlayerCommand(final PlayerCommandPreprocessEvent event) {\n+    if (freeze.isFrozen(event.getPlayer()) && !event.getPlayer().hasPermission(Permissions.STAFF)) {\n+      boolean allow =\n+          ALLOWED_CMDS.stream()\n+              .filter(cmd -> event.getMessage().startsWith(cmd))\n+              .findAny()\n+              .isPresent();\n+\n+      if (!allow) {\n+        // Don't allow commands except for those related to chat.\n+        event.setCancelled(true);\n+      }\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerMove(final PlayerMoveEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      Location old = event.getFrom();\n+      old.setPitch(event.getTo().getPitch());\n+      old.setYaw(event.getTo().getYaw());\n+      event.setTo(old);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)\n+  public void onVehicleMove(final VehicleMoveEvent event) {\n+    if (!event.getVehicle().isEmpty() && freeze.isFrozen(event.getVehicle().getPassenger())) {\n+      event.getVehicle().setVelocity(new Vector(0, 0, 0));\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onVehicleEnter(final VehicleEnterEvent event) {\n+    if (freeze.isFrozen(event.getEntered())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onVehicleExit(final VehicleExitEvent event) {\n+    if (freeze.isFrozen(event.getExited())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBlockBreak(final BlockBreakEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBlockPlace(final BlockPlaceEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBucketFill(final PlayerBucketFillEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onBucketEmpty(final PlayerBucketEmptyEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW) // ignoreCancelled doesn't seem to work well here\n+  public void onPlayerInteract(final PlayerInteractEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onInventoryClick(final InventoryClickEvent event) {\n+    if (event.getWhoClicked() instanceof Player) {\n+      if (freeze.isFrozen(event.getWhoClicked())) {\n+        event.setCancelled(true);\n+      }\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onPlayerDropItem(final PlayerDropItemEvent event) {\n+    if (freeze.isFrozen(event.getPlayer())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onEntityDamge(final EntityDamageByEntityEvent event) {\n+    if (freeze.isFrozen(event.getDamager())) {\n+      event.setCancelled(true);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)\n+  public void onVehicleDamage(final VehicleDamageEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618c4c876251673fe63705854e82dc5be1c33738"}, "originalPosition": 234}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ca7474ec7fc5110108e7600e92f6c6a9ae771a7", "author": {"user": {"login": "applenick", "name": "applenick"}}, "url": "https://github.com/PGMDev/PGM/commit/3ca7474ec7fc5110108e7600e92f6c6a9ae771a7", "committedDate": "2020-04-01T01:02:48Z", "message": "Adjust offline freeze cache\n* Update player freezer color to white\n* Add list of offline names to /freezelist\n* Add /tell to list for allowed commands\n* Feedback when performing freeze commands on already frozen/thawed players\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNDcwNDg4", "url": "https://github.com/PGMDev/PGM/pull/390#pullrequestreview-391470488", "createdAt": "2020-04-10T14:26:26Z", "commit": {"oid": "3ca7474ec7fc5110108e7600e92f6c6a9ae771a7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83b83e08a2dafdd5824b65717c09841d1d437155", "author": {"user": {"login": "Electroid", "name": "Ashcon Partovi"}}, "url": "https://github.com/PGMDev/PGM/commit/83b83e08a2dafdd5824b65717c09841d1d437155", "committedDate": "2020-04-10T14:26:33Z", "message": "Merge branch 'master' into its-about-to-get-cold"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 474, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}