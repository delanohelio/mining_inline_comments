{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzODMxNDY0", "number": 376, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo1NTo1MlrODsGdrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo1NTo1MlrODsGdrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTY5ODM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/modules/StatsMatchModule.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo1NTo1MlrOF8016A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwOTozMzo0NlrOF9IMPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNDY0OA==", "bodyText": "Do you have these two methods mixed up? You're adding to cached on leave and removing on join?", "url": "https://github.com/PGMDev/PGM/pull/376#discussion_r399324648", "createdAt": "2020-03-27T14:55:52Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/modules/StatsMatchModule.java", "diffHunk": "@@ -167,6 +173,19 @@ public void onMatchEnd(MatchFinishEvent event) {\n     }\n   }\n \n+  @EventHandler\n+  public void onPlayerLeave(PlayerQuitEvent event) {\n+    Player player = event.getPlayer();\n+    if (allPlayerStats.containsKey(player.getUniqueId()))\n+      cachedPlayers.put(player.getUniqueId(), player);\n+  }\n+\n+  @EventHandler\n+  public void onPlayerJoin(PlayerJoinEvent event) {\n+    UUID playerUUID = event.getPlayer().getUniqueId();\n+    cachedPlayers.remove(playerUUID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0085cfea6a7c48f3fac4b88e9d3a5b55a6e9b8e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NDM4Mg==", "bodyText": "I may have used \"cahce\" wrong. I need to store every player that has stats for each match that logs off in case they get a top stat, because Bukkit might lose track of them if too many new players join.\nIf they log back on i dont need to store them anymore.\nDo you have any suggestions for something else i could call this?", "url": "https://github.com/PGMDev/PGM/pull/376#discussion_r399454382", "createdAt": "2020-03-27T18:14:19Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/modules/StatsMatchModule.java", "diffHunk": "@@ -167,6 +173,19 @@ public void onMatchEnd(MatchFinishEvent event) {\n     }\n   }\n \n+  @EventHandler\n+  public void onPlayerLeave(PlayerQuitEvent event) {\n+    Player player = event.getPlayer();\n+    if (allPlayerStats.containsKey(player.getUniqueId()))\n+      cachedPlayers.put(player.getUniqueId(), player);\n+  }\n+\n+  @EventHandler\n+  public void onPlayerJoin(PlayerJoinEvent event) {\n+    UUID playerUUID = event.getPlayer().getUniqueId();\n+    cachedPlayers.remove(playerUUID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNDY0OA=="}, "originalCommit": {"oid": "f0085cfea6a7c48f3fac4b88e9d3a5b55a6e9b8e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2MTc1Nw==", "bodyText": "We can't keep Player objects in-memory after someone leaves, this will cause memory leaks. Instead, you would need to store their username, as a string.", "url": "https://github.com/PGMDev/PGM/pull/376#discussion_r399561757", "createdAt": "2020-03-27T22:12:54Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/modules/StatsMatchModule.java", "diffHunk": "@@ -167,6 +173,19 @@ public void onMatchEnd(MatchFinishEvent event) {\n     }\n   }\n \n+  @EventHandler\n+  public void onPlayerLeave(PlayerQuitEvent event) {\n+    Player player = event.getPlayer();\n+    if (allPlayerStats.containsKey(player.getUniqueId()))\n+      cachedPlayers.put(player.getUniqueId(), player);\n+  }\n+\n+  @EventHandler\n+  public void onPlayerJoin(PlayerJoinEvent event) {\n+    UUID playerUUID = event.getPlayer().getUniqueId();\n+    cachedPlayers.remove(playerUUID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNDY0OA=="}, "originalCommit": {"oid": "f0085cfea6a7c48f3fac4b88e9d3a5b55a6e9b8e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4ODc3OQ==", "bodyText": "Ok!", "url": "https://github.com/PGMDev/PGM/pull/376#discussion_r399588779", "createdAt": "2020-03-28T00:02:56Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/modules/StatsMatchModule.java", "diffHunk": "@@ -167,6 +173,19 @@ public void onMatchEnd(MatchFinishEvent event) {\n     }\n   }\n \n+  @EventHandler\n+  public void onPlayerLeave(PlayerQuitEvent event) {\n+    Player player = event.getPlayer();\n+    if (allPlayerStats.containsKey(player.getUniqueId()))\n+      cachedPlayers.put(player.getUniqueId(), player);\n+  }\n+\n+  @EventHandler\n+  public void onPlayerJoin(PlayerJoinEvent event) {\n+    UUID playerUUID = event.getPlayer().getUniqueId();\n+    cachedPlayers.remove(playerUUID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNDY0OA=="}, "originalCommit": {"oid": "f0085cfea6a7c48f3fac4b88e9d3a5b55a6e9b8e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4OTA4MA==", "bodyText": "But is there another more suitable name for the storage?", "url": "https://github.com/PGMDev/PGM/pull/376#discussion_r399589080", "createdAt": "2020-03-28T00:04:28Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/modules/StatsMatchModule.java", "diffHunk": "@@ -167,6 +173,19 @@ public void onMatchEnd(MatchFinishEvent event) {\n     }\n   }\n \n+  @EventHandler\n+  public void onPlayerLeave(PlayerQuitEvent event) {\n+    Player player = event.getPlayer();\n+    if (allPlayerStats.containsKey(player.getUniqueId()))\n+      cachedPlayers.put(player.getUniqueId(), player);\n+  }\n+\n+  @EventHandler\n+  public void onPlayerJoin(PlayerJoinEvent event) {\n+    UUID playerUUID = event.getPlayer().getUniqueId();\n+    cachedPlayers.remove(playerUUID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNDY0OA=="}, "originalCommit": {"oid": "f0085cfea6a7c48f3fac4b88e9d3a5b55a6e9b8e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5NTUzMA==", "bodyText": "@KingOfSquares could do\nprivate final Map<UUID, String> cachedUsernames = new HashMap<>();", "url": "https://github.com/PGMDev/PGM/pull/376#discussion_r399595530", "createdAt": "2020-03-28T00:41:50Z", "author": {"login": "applenick"}, "path": "core/src/main/java/tc/oc/pgm/modules/StatsMatchModule.java", "diffHunk": "@@ -167,6 +173,19 @@ public void onMatchEnd(MatchFinishEvent event) {\n     }\n   }\n \n+  @EventHandler\n+  public void onPlayerLeave(PlayerQuitEvent event) {\n+    Player player = event.getPlayer();\n+    if (allPlayerStats.containsKey(player.getUniqueId()))\n+      cachedPlayers.put(player.getUniqueId(), player);\n+  }\n+\n+  @EventHandler\n+  public void onPlayerJoin(PlayerJoinEvent event) {\n+    UUID playerUUID = event.getPlayer().getUniqueId();\n+    cachedPlayers.remove(playerUUID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNDY0OA=="}, "originalCommit": {"oid": "f0085cfea6a7c48f3fac4b88e9d3a5b55a6e9b8e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0MTY2MQ==", "bodyText": "Ok! I was just wondering if not to use \"cache\", thanks :)", "url": "https://github.com/PGMDev/PGM/pull/376#discussion_r399641661", "createdAt": "2020-03-28T09:33:46Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/modules/StatsMatchModule.java", "diffHunk": "@@ -167,6 +173,19 @@ public void onMatchEnd(MatchFinishEvent event) {\n     }\n   }\n \n+  @EventHandler\n+  public void onPlayerLeave(PlayerQuitEvent event) {\n+    Player player = event.getPlayer();\n+    if (allPlayerStats.containsKey(player.getUniqueId()))\n+      cachedPlayers.put(player.getUniqueId(), player);\n+  }\n+\n+  @EventHandler\n+  public void onPlayerJoin(PlayerJoinEvent event) {\n+    UUID playerUUID = event.getPlayer().getUniqueId();\n+    cachedPlayers.remove(playerUUID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNDY0OA=="}, "originalCommit": {"oid": "f0085cfea6a7c48f3fac4b88e9d3a5b55a6e9b8e"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1058, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}