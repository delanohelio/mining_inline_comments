{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNTQ4Mzcz", "number": 503, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyMDowN1rOD_SQjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODoxNTo0NlrOD_TSmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njg2MDMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/PGMPlugin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyMDowN1rOGZ3G_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODowMDowOVrOGaHPcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MDQ5NA==", "bodyText": "Why did you change Listener to  Object if you only accept Listeners anyways?", "url": "https://github.com/PGMDev/PGM/pull/503#discussion_r429770494", "createdAt": "2020-05-25T07:20:07Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/PGMPlugin.java", "diffHunk": "@@ -351,133 +312,29 @@ public VanishManager getVanishManager() {\n     return vanishManager;\n   }\n \n-  private class CommandRegistrar extends BukkitIntake {\n-\n-    public CommandRegistrar(CommandGraph commandGraph) {\n-      super(PGMPlugin.this, commandGraph);\n-    }\n-\n-    @Override\n-    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n-      final Audience audience = Audience.get(sender);\n-\n-      try {\n-        return this.getCommandGraph()\n-            .getRootDispatcherNode()\n-            .getDispatcher()\n-            .call(this.getCommand(command, args), this.getNamespace(sender));\n-      } catch (AuthorizationException e) {\n-        audience.sendWarning(TranslatableComponent.of(\"misc.noPermission\"));\n-      } catch (InvocationCommandException e) {\n-        if (e.getCause() instanceof TextException) {\n-          audience.sendWarning(((TextException) e.getCause()).getText());\n-        } else {\n-          audience.sendWarning(TextException.unknown(e).getText());\n-          e.printStackTrace();\n-        }\n-      } catch (InvalidUsageException e) {\n-        if (e.getMessage() != null) {\n-          audience.sendWarning(TextComponent.of(e.getMessage()));\n-        }\n-\n-        if (e.isFullHelpSuggested()) {\n-          audience.sendMessage(\n-              TextComponent.of(\n-                  \"/\"\n-                      + Joiner.on(' ').join(e.getAliasStack())\n-                      + \" \"\n-                      + e.getCommand().getDescription().getUsage()));\n-        }\n-      } catch (CommandException e) {\n-        audience.sendMessage(TextComponent.of(e.getMessage()));\n-      }\n-\n-      return false;\n-    }\n-  }\n-\n-  private class CommandModule extends AbstractModule {\n-    @Override\n-    protected void configure() {\n-      configureInstances();\n-      configureProviders();\n-    }\n+  private void registerCommands() {\n+    final CommandGraph graph =\n+        config.isCommunityMode() ? new CommunityCommandGraph() : new CommandGraph();\n \n-    private void configureInstances() {\n-      bind(PGM.class).toInstance(PGMPlugin.this);\n-      bind(MatchManager.class).toInstance(getMatchManager());\n-      bind(MapLibrary.class).toInstance(getMapLibrary());\n-      bind(MapOrder.class).toInstance(getMapOrder());\n-    }\n+    graph.register(vanishManager);\n+    graph.register(ChatDispatcher.get());\n \n-    private void configureProviders() {\n-      final MatchPlayerProvider playerProvider = new MatchPlayerProvider(getMatchManager());\n-      bind(MatchPlayer.class).toProvider(playerProvider);\n-      bind(Audience.class).toProvider(new AudienceProvider(playerProvider));\n-      bind(Match.class).toProvider(new MatchProvider(getMatchManager()));\n-      bind(MapInfo.class)\n-          .toProvider(new MapInfoProvider(getMatchManager(), getMapLibrary(), getMapOrder()));\n-      bind(Duration.class).toProvider(new DurationProvider());\n-      bind(TeamMatchModule.class).toProvider(new TeamMatchModuleProvider(getMatchManager()));\n-      bind(Vector.class).toProvider(new VectorProvider());\n-      bind(SettingKey.class).toProvider(new SettingKeyProvider());\n-      bind(SettingValue.class).toProvider(new EnumProvider<>(SettingValue.class));\n-    }\n+    new CommandExecutor(this, graph).register();\n   }\n \n-  private void registerCommands() {\n-    BasicBukkitCommandGraph graph = new BasicBukkitCommandGraph(new CommandModule());\n-    DispatcherNode node = graph.getRootDispatcherNode();\n-\n-    final ChatDispatcher chat = new ChatDispatcher(getMatchManager(), getVanishManager());\n-    node.registerCommands(chat);\n-    registerEvents(chat);\n-\n-    node.registerCommands(new MapCommands());\n-    node.registerCommands(new CycleCommands());\n-    node.registerCommands(new InventoryCommands());\n-    node.registerCommands(new GoalCommands());\n-    node.registerCommands(new JoinCommands());\n-    node.registerCommands(new StartCommands());\n-    node.registerCommands(new DestroyableCommands());\n-    node.registerNode(\"team\").registerCommands(new TeamCommands());\n-    node.registerCommands(new AdminCommands());\n-    node.registerCommands(new ClassCommands());\n-    node.registerNode(\"players\", \"ffa\").registerCommands(new FreeForAllCommands());\n-    node.registerCommands(new MatchCommands());\n-    node.registerNode(\"mode\", \"modes\").registerCommands(new ModeCommands());\n-    node.registerCommands(new TimeLimitCommands());\n-    node.registerCommands(new SettingCommands());\n-    node.registerCommands(new ObserverCommands());\n-    node.registerCommands(new MapPoolCommands());\n-    node.registerCommands(new StatsCommands());\n-\n-    if (config.isCommunityMode()) {\n-      final ModerationCommands modCommands =\n-          new ModerationCommands(chat, matchManager, vanishManager);\n-      node.registerCommands(modCommands);\n-      registerEvents(modCommands);\n-\n-      node.registerCommands(vanishManager);\n-      registerEvents((Listener) vanishManager);\n-\n-      node.registerCommands(new ReportCommands());\n-      node.registerCommands(new ListCommands(vanishManager));\n+  private void registerEvents(Object listener) {\n+    if (listener instanceof Listener) {\n+      getServer().getPluginManager().registerEvents((Listener) listener, this);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ada203edf70dafb65a62a0a204369ee946a97a"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2ODYxMQ==", "bodyText": "MatchManager does not implement Listener, but MatchManagerImpl does. It's also a clever trick around not registering nulls (MatchTabManager` can be null, if the tablist is disabled)", "url": "https://github.com/PGMDev/PGM/pull/503#discussion_r429968611", "createdAt": "2020-05-25T14:38:07Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/PGMPlugin.java", "diffHunk": "@@ -351,133 +312,29 @@ public VanishManager getVanishManager() {\n     return vanishManager;\n   }\n \n-  private class CommandRegistrar extends BukkitIntake {\n-\n-    public CommandRegistrar(CommandGraph commandGraph) {\n-      super(PGMPlugin.this, commandGraph);\n-    }\n-\n-    @Override\n-    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n-      final Audience audience = Audience.get(sender);\n-\n-      try {\n-        return this.getCommandGraph()\n-            .getRootDispatcherNode()\n-            .getDispatcher()\n-            .call(this.getCommand(command, args), this.getNamespace(sender));\n-      } catch (AuthorizationException e) {\n-        audience.sendWarning(TranslatableComponent.of(\"misc.noPermission\"));\n-      } catch (InvocationCommandException e) {\n-        if (e.getCause() instanceof TextException) {\n-          audience.sendWarning(((TextException) e.getCause()).getText());\n-        } else {\n-          audience.sendWarning(TextException.unknown(e).getText());\n-          e.printStackTrace();\n-        }\n-      } catch (InvalidUsageException e) {\n-        if (e.getMessage() != null) {\n-          audience.sendWarning(TextComponent.of(e.getMessage()));\n-        }\n-\n-        if (e.isFullHelpSuggested()) {\n-          audience.sendMessage(\n-              TextComponent.of(\n-                  \"/\"\n-                      + Joiner.on(' ').join(e.getAliasStack())\n-                      + \" \"\n-                      + e.getCommand().getDescription().getUsage()));\n-        }\n-      } catch (CommandException e) {\n-        audience.sendMessage(TextComponent.of(e.getMessage()));\n-      }\n-\n-      return false;\n-    }\n-  }\n-\n-  private class CommandModule extends AbstractModule {\n-    @Override\n-    protected void configure() {\n-      configureInstances();\n-      configureProviders();\n-    }\n+  private void registerCommands() {\n+    final CommandGraph graph =\n+        config.isCommunityMode() ? new CommunityCommandGraph() : new CommandGraph();\n \n-    private void configureInstances() {\n-      bind(PGM.class).toInstance(PGMPlugin.this);\n-      bind(MatchManager.class).toInstance(getMatchManager());\n-      bind(MapLibrary.class).toInstance(getMapLibrary());\n-      bind(MapOrder.class).toInstance(getMapOrder());\n-    }\n+    graph.register(vanishManager);\n+    graph.register(ChatDispatcher.get());\n \n-    private void configureProviders() {\n-      final MatchPlayerProvider playerProvider = new MatchPlayerProvider(getMatchManager());\n-      bind(MatchPlayer.class).toProvider(playerProvider);\n-      bind(Audience.class).toProvider(new AudienceProvider(playerProvider));\n-      bind(Match.class).toProvider(new MatchProvider(getMatchManager()));\n-      bind(MapInfo.class)\n-          .toProvider(new MapInfoProvider(getMatchManager(), getMapLibrary(), getMapOrder()));\n-      bind(Duration.class).toProvider(new DurationProvider());\n-      bind(TeamMatchModule.class).toProvider(new TeamMatchModuleProvider(getMatchManager()));\n-      bind(Vector.class).toProvider(new VectorProvider());\n-      bind(SettingKey.class).toProvider(new SettingKeyProvider());\n-      bind(SettingValue.class).toProvider(new EnumProvider<>(SettingValue.class));\n-    }\n+    new CommandExecutor(this, graph).register();\n   }\n \n-  private void registerCommands() {\n-    BasicBukkitCommandGraph graph = new BasicBukkitCommandGraph(new CommandModule());\n-    DispatcherNode node = graph.getRootDispatcherNode();\n-\n-    final ChatDispatcher chat = new ChatDispatcher(getMatchManager(), getVanishManager());\n-    node.registerCommands(chat);\n-    registerEvents(chat);\n-\n-    node.registerCommands(new MapCommands());\n-    node.registerCommands(new CycleCommands());\n-    node.registerCommands(new InventoryCommands());\n-    node.registerCommands(new GoalCommands());\n-    node.registerCommands(new JoinCommands());\n-    node.registerCommands(new StartCommands());\n-    node.registerCommands(new DestroyableCommands());\n-    node.registerNode(\"team\").registerCommands(new TeamCommands());\n-    node.registerCommands(new AdminCommands());\n-    node.registerCommands(new ClassCommands());\n-    node.registerNode(\"players\", \"ffa\").registerCommands(new FreeForAllCommands());\n-    node.registerCommands(new MatchCommands());\n-    node.registerNode(\"mode\", \"modes\").registerCommands(new ModeCommands());\n-    node.registerCommands(new TimeLimitCommands());\n-    node.registerCommands(new SettingCommands());\n-    node.registerCommands(new ObserverCommands());\n-    node.registerCommands(new MapPoolCommands());\n-    node.registerCommands(new StatsCommands());\n-\n-    if (config.isCommunityMode()) {\n-      final ModerationCommands modCommands =\n-          new ModerationCommands(chat, matchManager, vanishManager);\n-      node.registerCommands(modCommands);\n-      registerEvents(modCommands);\n-\n-      node.registerCommands(vanishManager);\n-      registerEvents((Listener) vanishManager);\n-\n-      node.registerCommands(new ReportCommands());\n-      node.registerCommands(new ListCommands(vanishManager));\n+  private void registerEvents(Object listener) {\n+    if (listener instanceof Listener) {\n+      getServer().getPluginManager().registerEvents((Listener) listener, this);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MDQ5NA=="}, "originalCommit": {"oid": "37ada203edf70dafb65a62a0a204369ee946a97a"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNDgwMw==", "bodyText": "Oh yeah! That is smart \ud83d\ude04!", "url": "https://github.com/PGMDev/PGM/pull/503#discussion_r430034803", "createdAt": "2020-05-25T18:00:09Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/PGMPlugin.java", "diffHunk": "@@ -351,133 +312,29 @@ public VanishManager getVanishManager() {\n     return vanishManager;\n   }\n \n-  private class CommandRegistrar extends BukkitIntake {\n-\n-    public CommandRegistrar(CommandGraph commandGraph) {\n-      super(PGMPlugin.this, commandGraph);\n-    }\n-\n-    @Override\n-    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n-      final Audience audience = Audience.get(sender);\n-\n-      try {\n-        return this.getCommandGraph()\n-            .getRootDispatcherNode()\n-            .getDispatcher()\n-            .call(this.getCommand(command, args), this.getNamespace(sender));\n-      } catch (AuthorizationException e) {\n-        audience.sendWarning(TranslatableComponent.of(\"misc.noPermission\"));\n-      } catch (InvocationCommandException e) {\n-        if (e.getCause() instanceof TextException) {\n-          audience.sendWarning(((TextException) e.getCause()).getText());\n-        } else {\n-          audience.sendWarning(TextException.unknown(e).getText());\n-          e.printStackTrace();\n-        }\n-      } catch (InvalidUsageException e) {\n-        if (e.getMessage() != null) {\n-          audience.sendWarning(TextComponent.of(e.getMessage()));\n-        }\n-\n-        if (e.isFullHelpSuggested()) {\n-          audience.sendMessage(\n-              TextComponent.of(\n-                  \"/\"\n-                      + Joiner.on(' ').join(e.getAliasStack())\n-                      + \" \"\n-                      + e.getCommand().getDescription().getUsage()));\n-        }\n-      } catch (CommandException e) {\n-        audience.sendMessage(TextComponent.of(e.getMessage()));\n-      }\n-\n-      return false;\n-    }\n-  }\n-\n-  private class CommandModule extends AbstractModule {\n-    @Override\n-    protected void configure() {\n-      configureInstances();\n-      configureProviders();\n-    }\n+  private void registerCommands() {\n+    final CommandGraph graph =\n+        config.isCommunityMode() ? new CommunityCommandGraph() : new CommandGraph();\n \n-    private void configureInstances() {\n-      bind(PGM.class).toInstance(PGMPlugin.this);\n-      bind(MatchManager.class).toInstance(getMatchManager());\n-      bind(MapLibrary.class).toInstance(getMapLibrary());\n-      bind(MapOrder.class).toInstance(getMapOrder());\n-    }\n+    graph.register(vanishManager);\n+    graph.register(ChatDispatcher.get());\n \n-    private void configureProviders() {\n-      final MatchPlayerProvider playerProvider = new MatchPlayerProvider(getMatchManager());\n-      bind(MatchPlayer.class).toProvider(playerProvider);\n-      bind(Audience.class).toProvider(new AudienceProvider(playerProvider));\n-      bind(Match.class).toProvider(new MatchProvider(getMatchManager()));\n-      bind(MapInfo.class)\n-          .toProvider(new MapInfoProvider(getMatchManager(), getMapLibrary(), getMapOrder()));\n-      bind(Duration.class).toProvider(new DurationProvider());\n-      bind(TeamMatchModule.class).toProvider(new TeamMatchModuleProvider(getMatchManager()));\n-      bind(Vector.class).toProvider(new VectorProvider());\n-      bind(SettingKey.class).toProvider(new SettingKeyProvider());\n-      bind(SettingValue.class).toProvider(new EnumProvider<>(SettingValue.class));\n-    }\n+    new CommandExecutor(this, graph).register();\n   }\n \n-  private void registerCommands() {\n-    BasicBukkitCommandGraph graph = new BasicBukkitCommandGraph(new CommandModule());\n-    DispatcherNode node = graph.getRootDispatcherNode();\n-\n-    final ChatDispatcher chat = new ChatDispatcher(getMatchManager(), getVanishManager());\n-    node.registerCommands(chat);\n-    registerEvents(chat);\n-\n-    node.registerCommands(new MapCommands());\n-    node.registerCommands(new CycleCommands());\n-    node.registerCommands(new InventoryCommands());\n-    node.registerCommands(new GoalCommands());\n-    node.registerCommands(new JoinCommands());\n-    node.registerCommands(new StartCommands());\n-    node.registerCommands(new DestroyableCommands());\n-    node.registerNode(\"team\").registerCommands(new TeamCommands());\n-    node.registerCommands(new AdminCommands());\n-    node.registerCommands(new ClassCommands());\n-    node.registerNode(\"players\", \"ffa\").registerCommands(new FreeForAllCommands());\n-    node.registerCommands(new MatchCommands());\n-    node.registerNode(\"mode\", \"modes\").registerCommands(new ModeCommands());\n-    node.registerCommands(new TimeLimitCommands());\n-    node.registerCommands(new SettingCommands());\n-    node.registerCommands(new ObserverCommands());\n-    node.registerCommands(new MapPoolCommands());\n-    node.registerCommands(new StatsCommands());\n-\n-    if (config.isCommunityMode()) {\n-      final ModerationCommands modCommands =\n-          new ModerationCommands(chat, matchManager, vanishManager);\n-      node.registerCommands(modCommands);\n-      registerEvents(modCommands);\n-\n-      node.registerCommands(vanishManager);\n-      registerEvents((Listener) vanishManager);\n-\n-      node.registerCommands(new ReportCommands());\n-      node.registerCommands(new ListCommands(vanishManager));\n+  private void registerEvents(Object listener) {\n+    if (listener instanceof Listener) {\n+      getServer().getPluginManager().registerEvents((Listener) listener, this);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MDQ5NA=="}, "originalCommit": {"oid": "37ada203edf70dafb65a62a0a204369ee946a97a"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzAyOTM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/listeners/ChatDispatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODoxNTo0NlrOGZ4u4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODoxNTo0NlrOGZ4u4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NzA5MA==", "bodyText": "private static final?", "url": "https://github.com/PGMDev/PGM/pull/503#discussion_r429797090", "createdAt": "2020-05-25T08:15:46Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/listeners/ChatDispatcher.java", "diffHunk": "@@ -48,6 +46,13 @@\n \n public class ChatDispatcher implements Listener {\n \n+  private static ChatDispatcher INSTANCE = new ChatDispatcher();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ada203edf70dafb65a62a0a204369ee946a97a"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1089, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}