{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNTQ4Mzcz", "number": 503, "title": "Clean up commands", "bodyText": "Also fixes a bug where team sizes were not enforced before the match starts (oops!)", "createdAt": "2020-05-25T05:13:18Z", "url": "https://github.com/PGMDev/PGM/pull/503", "merged": true, "mergeCommit": {"oid": "b6e52c27dcc2b375df79b9ffb88ad7b5eb203794"}, "closed": true, "closedAt": "2020-05-26T03:06:59Z", "author": {"login": "Electroid"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckruytgFqTQxNzUwNTMwOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABck7tYBgBqjMzNzE3MDcyODM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTA1MzA4", "url": "https://github.com/PGMDev/PGM/pull/503#pullrequestreview-417505308", "createdAt": "2020-05-25T07:20:07Z", "commit": {"oid": "37ada203edf70dafb65a62a0a204369ee946a97a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyMDowN1rOGZ3G_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODoxNTo0NlrOGZ4u4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MDQ5NA==", "bodyText": "Why did you change Listener to  Object if you only accept Listeners anyways?", "url": "https://github.com/PGMDev/PGM/pull/503#discussion_r429770494", "createdAt": "2020-05-25T07:20:07Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/PGMPlugin.java", "diffHunk": "@@ -351,133 +312,29 @@ public VanishManager getVanishManager() {\n     return vanishManager;\n   }\n \n-  private class CommandRegistrar extends BukkitIntake {\n-\n-    public CommandRegistrar(CommandGraph commandGraph) {\n-      super(PGMPlugin.this, commandGraph);\n-    }\n-\n-    @Override\n-    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n-      final Audience audience = Audience.get(sender);\n-\n-      try {\n-        return this.getCommandGraph()\n-            .getRootDispatcherNode()\n-            .getDispatcher()\n-            .call(this.getCommand(command, args), this.getNamespace(sender));\n-      } catch (AuthorizationException e) {\n-        audience.sendWarning(TranslatableComponent.of(\"misc.noPermission\"));\n-      } catch (InvocationCommandException e) {\n-        if (e.getCause() instanceof TextException) {\n-          audience.sendWarning(((TextException) e.getCause()).getText());\n-        } else {\n-          audience.sendWarning(TextException.unknown(e).getText());\n-          e.printStackTrace();\n-        }\n-      } catch (InvalidUsageException e) {\n-        if (e.getMessage() != null) {\n-          audience.sendWarning(TextComponent.of(e.getMessage()));\n-        }\n-\n-        if (e.isFullHelpSuggested()) {\n-          audience.sendMessage(\n-              TextComponent.of(\n-                  \"/\"\n-                      + Joiner.on(' ').join(e.getAliasStack())\n-                      + \" \"\n-                      + e.getCommand().getDescription().getUsage()));\n-        }\n-      } catch (CommandException e) {\n-        audience.sendMessage(TextComponent.of(e.getMessage()));\n-      }\n-\n-      return false;\n-    }\n-  }\n-\n-  private class CommandModule extends AbstractModule {\n-    @Override\n-    protected void configure() {\n-      configureInstances();\n-      configureProviders();\n-    }\n+  private void registerCommands() {\n+    final CommandGraph graph =\n+        config.isCommunityMode() ? new CommunityCommandGraph() : new CommandGraph();\n \n-    private void configureInstances() {\n-      bind(PGM.class).toInstance(PGMPlugin.this);\n-      bind(MatchManager.class).toInstance(getMatchManager());\n-      bind(MapLibrary.class).toInstance(getMapLibrary());\n-      bind(MapOrder.class).toInstance(getMapOrder());\n-    }\n+    graph.register(vanishManager);\n+    graph.register(ChatDispatcher.get());\n \n-    private void configureProviders() {\n-      final MatchPlayerProvider playerProvider = new MatchPlayerProvider(getMatchManager());\n-      bind(MatchPlayer.class).toProvider(playerProvider);\n-      bind(Audience.class).toProvider(new AudienceProvider(playerProvider));\n-      bind(Match.class).toProvider(new MatchProvider(getMatchManager()));\n-      bind(MapInfo.class)\n-          .toProvider(new MapInfoProvider(getMatchManager(), getMapLibrary(), getMapOrder()));\n-      bind(Duration.class).toProvider(new DurationProvider());\n-      bind(TeamMatchModule.class).toProvider(new TeamMatchModuleProvider(getMatchManager()));\n-      bind(Vector.class).toProvider(new VectorProvider());\n-      bind(SettingKey.class).toProvider(new SettingKeyProvider());\n-      bind(SettingValue.class).toProvider(new EnumProvider<>(SettingValue.class));\n-    }\n+    new CommandExecutor(this, graph).register();\n   }\n \n-  private void registerCommands() {\n-    BasicBukkitCommandGraph graph = new BasicBukkitCommandGraph(new CommandModule());\n-    DispatcherNode node = graph.getRootDispatcherNode();\n-\n-    final ChatDispatcher chat = new ChatDispatcher(getMatchManager(), getVanishManager());\n-    node.registerCommands(chat);\n-    registerEvents(chat);\n-\n-    node.registerCommands(new MapCommands());\n-    node.registerCommands(new CycleCommands());\n-    node.registerCommands(new InventoryCommands());\n-    node.registerCommands(new GoalCommands());\n-    node.registerCommands(new JoinCommands());\n-    node.registerCommands(new StartCommands());\n-    node.registerCommands(new DestroyableCommands());\n-    node.registerNode(\"team\").registerCommands(new TeamCommands());\n-    node.registerCommands(new AdminCommands());\n-    node.registerCommands(new ClassCommands());\n-    node.registerNode(\"players\", \"ffa\").registerCommands(new FreeForAllCommands());\n-    node.registerCommands(new MatchCommands());\n-    node.registerNode(\"mode\", \"modes\").registerCommands(new ModeCommands());\n-    node.registerCommands(new TimeLimitCommands());\n-    node.registerCommands(new SettingCommands());\n-    node.registerCommands(new ObserverCommands());\n-    node.registerCommands(new MapPoolCommands());\n-    node.registerCommands(new StatsCommands());\n-\n-    if (config.isCommunityMode()) {\n-      final ModerationCommands modCommands =\n-          new ModerationCommands(chat, matchManager, vanishManager);\n-      node.registerCommands(modCommands);\n-      registerEvents(modCommands);\n-\n-      node.registerCommands(vanishManager);\n-      registerEvents((Listener) vanishManager);\n-\n-      node.registerCommands(new ReportCommands());\n-      node.registerCommands(new ListCommands(vanishManager));\n+  private void registerEvents(Object listener) {\n+    if (listener instanceof Listener) {\n+      getServer().getPluginManager().registerEvents((Listener) listener, this);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ada203edf70dafb65a62a0a204369ee946a97a"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NzA5MA==", "bodyText": "private static final?", "url": "https://github.com/PGMDev/PGM/pull/503#discussion_r429797090", "createdAt": "2020-05-25T08:15:46Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/listeners/ChatDispatcher.java", "diffHunk": "@@ -48,6 +46,13 @@\n \n public class ChatDispatcher implements Listener {\n \n+  private static ChatDispatcher INSTANCE = new ChatDispatcher();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ada203edf70dafb65a62a0a204369ee946a97a"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6715b99181540e9eeaa6218058f833f9263eaf88", "author": {"user": {"login": "Electroid", "name": "Ashcon Partovi"}}, "url": "https://github.com/PGMDev/PGM/commit/6715b99181540e9eeaa6218058f833f9263eaf88", "committedDate": "2020-05-26T01:50:26Z", "message": "Allow maps to be loaded from a git repository\n\nCo-authored-by: SimonIMac <simonmorland@gmail.com>\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>"}, "afterCommit": {"oid": "d1848a8d1d708958a67ef310a8ef19faf85b2770", "author": {"user": {"login": "Electroid", "name": "Ashcon Partovi"}}, "url": "https://github.com/PGMDev/PGM/commit/d1848a8d1d708958a67ef310a8ef19faf85b2770", "committedDate": "2020-05-26T01:57:43Z", "message": "Allow maps to be loaded from a git repository\n\nCo-authored-by: SimonIMac <simonmorland@gmail.com>\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8cfbb8ec423f22adca5114d1733527ecfbf0ec4", "author": {"user": {"login": "Electroid", "name": "Ashcon Partovi"}}, "url": "https://github.com/PGMDev/PGM/commit/e8cfbb8ec423f22adca5114d1733527ecfbf0ec4", "committedDate": "2020-05-26T02:08:17Z", "message": "Move Electroid/PGM to PGMDev/PGM\n\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca9c6f89b8e30c7aed7f55d67fc4d37c485a1f67", "author": {"user": {"login": "Electroid", "name": "Ashcon Partovi"}}, "url": "https://github.com/PGMDev/PGM/commit/ca9c6f89b8e30c7aed7f55d67fc4d37c485a1f67", "committedDate": "2020-05-26T02:08:17Z", "message": "Fix team sizes not being enforced before the match starts\n\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07f1e55e753e052c779aa437719dc0f16ede483e", "author": {"user": {"login": "Electroid", "name": "Ashcon Partovi"}}, "url": "https://github.com/PGMDev/PGM/commit/07f1e55e753e052c779aa437719dc0f16ede483e", "committedDate": "2020-05-26T02:08:17Z", "message": "Restructure and clean up commands\n\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1848a8d1d708958a67ef310a8ef19faf85b2770", "author": {"user": {"login": "Electroid", "name": "Ashcon Partovi"}}, "url": "https://github.com/PGMDev/PGM/commit/d1848a8d1d708958a67ef310a8ef19faf85b2770", "committedDate": "2020-05-26T01:57:43Z", "message": "Allow maps to be loaded from a git repository\n\nCo-authored-by: SimonIMac <simonmorland@gmail.com>\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>"}, "afterCommit": {"oid": "1087ff36b2b9d2d5ce4b25ff6e464c03336c1f1b", "author": {"user": {"login": "Electroid", "name": "Ashcon Partovi"}}, "url": "https://github.com/PGMDev/PGM/commit/1087ff36b2b9d2d5ce4b25ff6e464c03336c1f1b", "committedDate": "2020-05-26T02:12:34Z", "message": "Allow maps to be loaded from a git repository\n\nCo-authored-by: SimonIMac <simonmorland@gmail.com>\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1087ff36b2b9d2d5ce4b25ff6e464c03336c1f1b", "author": {"user": {"login": "Electroid", "name": "Ashcon Partovi"}}, "url": "https://github.com/PGMDev/PGM/commit/1087ff36b2b9d2d5ce4b25ff6e464c03336c1f1b", "committedDate": "2020-05-26T02:12:34Z", "message": "Allow maps to be loaded from a git repository\n\nCo-authored-by: SimonIMac <simonmorland@gmail.com>\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>"}, "afterCommit": {"oid": "4fa9829c9badae7b6f1b40d0eadeeb28cca60a31", "author": {"user": {"login": "Electroid", "name": "Ashcon Partovi"}}, "url": "https://github.com/PGMDev/PGM/commit/4fa9829c9badae7b6f1b40d0eadeeb28cca60a31", "committedDate": "2020-05-26T02:57:52Z", "message": "Allow maps to be loaded from a git repository\n\nCo-authored-by: SimonIMac <simonmorland@gmail.com>\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e5f1fe87cf0f8132a56d346fae52012121213f1", "author": {"user": {"login": "Electroid", "name": "Ashcon Partovi"}}, "url": "https://github.com/PGMDev/PGM/commit/3e5f1fe87cf0f8132a56d346fae52012121213f1", "committedDate": "2020-05-26T03:01:11Z", "message": "Allow maps to be loaded from a git repository\n\nCo-authored-by: SimonIMac <simonmorland@gmail.com>\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4fa9829c9badae7b6f1b40d0eadeeb28cca60a31", "author": {"user": {"login": "Electroid", "name": "Ashcon Partovi"}}, "url": "https://github.com/PGMDev/PGM/commit/4fa9829c9badae7b6f1b40d0eadeeb28cca60a31", "committedDate": "2020-05-26T02:57:52Z", "message": "Allow maps to be loaded from a git repository\n\nCo-authored-by: SimonIMac <simonmorland@gmail.com>\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>"}, "afterCommit": {"oid": "3e5f1fe87cf0f8132a56d346fae52012121213f1", "author": {"user": {"login": "Electroid", "name": "Ashcon Partovi"}}, "url": "https://github.com/PGMDev/PGM/commit/3e5f1fe87cf0f8132a56d346fae52012121213f1", "committedDate": "2020-05-26T03:01:11Z", "message": "Allow maps to be loaded from a git repository\n\nCo-authored-by: SimonIMac <simonmorland@gmail.com>\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 513, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}