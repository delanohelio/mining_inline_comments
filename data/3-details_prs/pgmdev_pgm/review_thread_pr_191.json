{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MjQxMjAz", "number": 191, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQyMToyNjoxMFrODV0OLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxMjoxMDoyMFrODV1xCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjAyMjg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/api/setting/SettingValue.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQyMToyNjoxMFrOFaPLiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQyMTo1ODo0MlrOFaPQug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NjAwOA==", "bodyText": "Why not just on/off? I think it's better to be somewhat consistent with other settings if players want to be able to find/explore them easily.", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363056008", "createdAt": "2020-01-04T21:26:10Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/api/setting/SettingValue.java", "diffHunk": "@@ -21,7 +21,9 @@\n   DEATH_ALL(\"death\", \"all\"), // Send all death messages, highlight your own\n   PICKER_AUTO(\"picker\", \"auto\"), // Display after cycle, or with permissions.\n   PICKER_ON(\"picker\", \"on\"), // Display the picker GUI always\n-  PICKER_OFF(\"picker\", \"off\"); // Never display the picker GUI\n+  PICKER_OFF(\"picker\", \"off\"), // Never display the picker GUI\n+  OBSERVERS_SHOWN(\"observers\", \"shown\"), // Show observers\n+  OBSERVERS_HIDDEN(\"observers\", \"hidden\"); // Hide observers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c7982c8132038e8a826a6e6db7b60400d9dab4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NzI0Ng==", "bodyText": "It's currently more understandable what it means.", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363057246", "createdAt": "2020-01-04T21:55:52Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/api/setting/SettingValue.java", "diffHunk": "@@ -21,7 +21,9 @@\n   DEATH_ALL(\"death\", \"all\"), // Send all death messages, highlight your own\n   PICKER_AUTO(\"picker\", \"auto\"), // Display after cycle, or with permissions.\n   PICKER_ON(\"picker\", \"on\"), // Display the picker GUI always\n-  PICKER_OFF(\"picker\", \"off\"); // Never display the picker GUI\n+  PICKER_OFF(\"picker\", \"off\"), // Never display the picker GUI\n+  OBSERVERS_SHOWN(\"observers\", \"shown\"), // Show observers\n+  OBSERVERS_HIDDEN(\"observers\", \"hidden\"); // Hide observers", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NjAwOA=="}, "originalCommit": {"oid": "a2c7982c8132038e8a826a6e6db7b60400d9dab4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NzMwNw==", "bodyText": "Are you sure? I think obs on or obs off is just as easy to understeand as obs shown and obs hidden. It's just a matter of consistency with other settings tho, i am not too concerned about that as long as it's easy to tab-complete tho", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363057307", "createdAt": "2020-01-04T21:57:48Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/api/setting/SettingValue.java", "diffHunk": "@@ -21,7 +21,9 @@\n   DEATH_ALL(\"death\", \"all\"), // Send all death messages, highlight your own\n   PICKER_AUTO(\"picker\", \"auto\"), // Display after cycle, or with permissions.\n   PICKER_ON(\"picker\", \"on\"), // Display the picker GUI always\n-  PICKER_OFF(\"picker\", \"off\"); // Never display the picker GUI\n+  PICKER_OFF(\"picker\", \"off\"), // Never display the picker GUI\n+  OBSERVERS_SHOWN(\"observers\", \"shown\"), // Show observers\n+  OBSERVERS_HIDDEN(\"observers\", \"hidden\"); // Hide observers", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NjAwOA=="}, "originalCommit": {"oid": "a2c7982c8132038e8a826a6e6db7b60400d9dab4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NzMzOA==", "bodyText": "Let's stick to on/off. Eventually we'll have a Gui with an explanation of what the setting does", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363057338", "createdAt": "2020-01-04T21:58:42Z", "author": {"login": "Electroid"}, "path": "src/main/java/tc/oc/pgm/api/setting/SettingValue.java", "diffHunk": "@@ -21,7 +21,9 @@\n   DEATH_ALL(\"death\", \"all\"), // Send all death messages, highlight your own\n   PICKER_AUTO(\"picker\", \"auto\"), // Display after cycle, or with permissions.\n   PICKER_ON(\"picker\", \"on\"), // Display the picker GUI always\n-  PICKER_OFF(\"picker\", \"off\"); // Never display the picker GUI\n+  PICKER_OFF(\"picker\", \"off\"), // Never display the picker GUI\n+  OBSERVERS_SHOWN(\"observers\", \"shown\"), // Show observers\n+  OBSERVERS_HIDDEN(\"observers\", \"hidden\"); // Hide observers", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NjAwOA=="}, "originalCommit": {"oid": "a2c7982c8132038e8a826a6e6db7b60400d9dab4"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjAyNDE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/match/MatchPlayerImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQyMTozMDoxMVrOFaPMOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQyMjowMDo1NVrOFaPQ-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NjE4NA==", "bodyText": "This 4th branch should never occur, or am i missing something? If that's the case, maybe leave a comment saying that shouldn't happen.", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363056184", "createdAt": "2020-01-04T21:30:11Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/match/MatchPlayerImpl.java", "diffHunk": "@@ -172,7 +174,13 @@ public boolean canInteract() {\n \n   @Override\n   public boolean canSee(MatchPlayer other) {\n-    return (isObserving() || other.isParticipating()) && other.isVisible();\n+    if (!other.isVisible()) return false;\n+    if (other.isParticipating()) return true;\n+    if (isObserving()) {\n+      SettingValue observers = getSettings().getValue(SettingKey.OBSERVERS);\n+      return observers.equals(SettingValue.OBSERVERS_SHOWN);\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c7982c8132038e8a826a6e6db7b60400d9dab4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NzI2NA==", "bodyText": "Maybe throw IllegalStateException?", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363057264", "createdAt": "2020-01-04T21:56:19Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/match/MatchPlayerImpl.java", "diffHunk": "@@ -172,7 +174,13 @@ public boolean canInteract() {\n \n   @Override\n   public boolean canSee(MatchPlayer other) {\n-    return (isObserving() || other.isParticipating()) && other.isVisible();\n+    if (!other.isVisible()) return false;\n+    if (other.isParticipating()) return true;\n+    if (isObserving()) {\n+      SettingValue observers = getSettings().getValue(SettingKey.OBSERVERS);\n+      return observers.equals(SettingValue.OBSERVERS_SHOWN);\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NjE4NA=="}, "originalCommit": {"oid": "a2c7982c8132038e8a826a6e6db7b60400d9dab4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NzM0Ng==", "bodyText": "Maybe add a logger, but don't throw an exception, it's better not to crash PGM because of something that can easily be recoverable by just returning an arbitrary false", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363057346", "createdAt": "2020-01-04T21:58:46Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/match/MatchPlayerImpl.java", "diffHunk": "@@ -172,7 +174,13 @@ public boolean canInteract() {\n \n   @Override\n   public boolean canSee(MatchPlayer other) {\n-    return (isObserving() || other.isParticipating()) && other.isVisible();\n+    if (!other.isVisible()) return false;\n+    if (other.isParticipating()) return true;\n+    if (isObserving()) {\n+      SettingValue observers = getSettings().getValue(SettingKey.OBSERVERS);\n+      return observers.equals(SettingValue.OBSERVERS_SHOWN);\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NjE4NA=="}, "originalCommit": {"oid": "a2c7982c8132038e8a826a6e6db7b60400d9dab4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NzQwMg==", "bodyText": "canX methods should never return an illegal state, see my comment below.", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363057402", "createdAt": "2020-01-04T22:00:55Z", "author": {"login": "Electroid"}, "path": "src/main/java/tc/oc/pgm/match/MatchPlayerImpl.java", "diffHunk": "@@ -172,7 +174,13 @@ public boolean canInteract() {\n \n   @Override\n   public boolean canSee(MatchPlayer other) {\n-    return (isObserving() || other.isParticipating()) && other.isVisible();\n+    if (!other.isVisible()) return false;\n+    if (other.isParticipating()) return true;\n+    if (isObserving()) {\n+      SettingValue observers = getSettings().getValue(SettingKey.OBSERVERS);\n+      return observers.equals(SettingValue.OBSERVERS_SHOWN);\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NjE4NA=="}, "originalCommit": {"oid": "a2c7982c8132038e8a826a6e6db7b60400d9dab4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjAzMzQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/match/MatchPlayerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQyMjowMDoxMFrOFaPQ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQyMjowOTo0NVrOFaPSWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NzM4MA==", "bodyText": "Change to:\nreturn getSettings().getValue(SettingKey.OBSERVERS) == SettingValue.OBSERVERS_SHOWN;", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363057380", "createdAt": "2020-01-04T22:00:10Z", "author": {"login": "Electroid"}, "path": "src/main/java/tc/oc/pgm/match/MatchPlayerImpl.java", "diffHunk": "@@ -172,7 +174,13 @@ public boolean canInteract() {\n \n   @Override\n   public boolean canSee(MatchPlayer other) {\n-    return (isObserving() || other.isParticipating()) && other.isVisible();\n+    if (!other.isVisible()) return false;\n+    if (other.isParticipating()) return true;\n+    if (isObserving()) {\n+      SettingValue observers = getSettings().getValue(SettingKey.OBSERVERS);\n+      return observers.equals(SettingValue.OBSERVERS_SHOWN);\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c7982c8132038e8a826a6e6db7b60400d9dab4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1Nzc1NA==", "bodyText": "Actually, if you make it that, players inside the match will be able to see obs.", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363057754", "createdAt": "2020-01-04T22:09:45Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/match/MatchPlayerImpl.java", "diffHunk": "@@ -172,7 +174,13 @@ public boolean canInteract() {\n \n   @Override\n   public boolean canSee(MatchPlayer other) {\n-    return (isObserving() || other.isParticipating()) && other.isVisible();\n+    if (!other.isVisible()) return false;\n+    if (other.isParticipating()) return true;\n+    if (isObserving()) {\n+      SettingValue observers = getSettings().getValue(SettingKey.OBSERVERS);\n+      return observers.equals(SettingValue.OBSERVERS_SHOWN);\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NzM4MA=="}, "originalCommit": {"oid": "a2c7982c8132038e8a826a6e6db7b60400d9dab4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjAzNzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/match/MatchPlayerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQyMjoxNToxNVrOFaPTHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQyMjoxNToxNVrOFaPTHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1Nzk0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return getSettings().getValue(SettingKey.OBSERVERS) == SettingValue.OBSERVERS_ON;\n          \n          \n            \n                return isObserving() && getSettings().getValue(SettingKey.OBSERVERS) == SettingValue.OBSERVERS_ON;", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363057949", "createdAt": "2020-01-04T22:15:15Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/match/MatchPlayerImpl.java", "diffHunk": "@@ -172,7 +174,9 @@ public boolean canInteract() {\n \n   @Override\n   public boolean canSee(MatchPlayer other) {\n-    return (isObserving() || other.isParticipating()) && other.isVisible();\n+    if (!other.isVisible()) return false;\n+    if (other.isParticipating()) return true;\n+    return getSettings().getValue(SettingKey.OBSERVERS) == SettingValue.OBSERVERS_ON;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc83dc5c1ab35c1773d7286f9c2d7086e8166e89"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjEyNzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/api/setting/SettingValue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNDo0MzoyNVrOFaP_Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNDo0MzoyNVrOFaP_Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2OTI0Mw==", "bodyText": "make the string constants on/off?", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363069243", "createdAt": "2020-01-05T04:43:25Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/api/setting/SettingValue.java", "diffHunk": "@@ -21,7 +21,9 @@\n   DEATH_ALL(\"death\", \"all\"), // Send all death messages, highlight your own\n   PICKER_AUTO(\"picker\", \"auto\"), // Display after cycle, or with permissions.\n   PICKER_ON(\"picker\", \"on\"), // Display the picker GUI always\n-  PICKER_OFF(\"picker\", \"off\"); // Never display the picker GUI\n+  PICKER_OFF(\"picker\", \"off\"), // Never display the picker GUI\n+  OBSERVERS_ON(\"observers\", \"shown\"), // Show observers\n+  OBSERVERS_OFF(\"observers\", \"hidden\"); // Hide observers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93716c6093b41e12d99f5f19b1e5b5bdaa3742bb"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjE5ODgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/api/setting/SettingKey.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwODo0NzoyOFrOFaQiIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwOToxMzozMFrOFaQnXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3ODE3OA==", "bodyText": "A way to heavily simplify this, is to have a constructor overload:\nSettingKey(List<String> aliases, Consumer<MatchPlayer> update, SettingValue... values)\nThen this just becomes:\nOBSERVERS(Arrays.asList(\"observers\", \"obs\"), MatchPlayer::resetVisibility, OBSERVERS_ON, OBSERVERS_OFF)\nAs obvious, you'll need to keep the consumer on a variable, and on the update method call it if it's not null", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363078178", "createdAt": "2020-01-05T08:47:28Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/api/setting/SettingKey.java", "diffHunk": "@@ -18,10 +19,12 @@\n   DEATH(\n       Arrays.asList(\"death\", \"dms\"), DEATH_ALL, DEATH_OWN), // Changes which death messages are seen\n   PICKER(\"picker\", PICKER_AUTO, PICKER_ON, PICKER_OFF), // Changes when the picker is displayed\n-  OBSERVERS(\n-      Arrays.asList(\"observers\", \"obs\"),\n-      OBSERVERS_ON,\n-      OBSERVERS_OFF); // Changes if observers are visible\n+  OBSERVERS(Arrays.asList(\"observers\", \"obs\"), OBSERVERS_ON, OBSERVERS_OFF) {\n+    @Override\n+    public void update(MatchPlayer player) {\n+      player.resetVisibility();\n+    }\n+  }; // Changes if observers are visible", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f76076fd0fd3a591511c328936637cd2169fa800"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3OTQwNw==", "bodyText": "The current version is imo simpler, and I don't think there are going to be many settings with custom update logic.", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363079407", "createdAt": "2020-01-05T09:11:33Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/api/setting/SettingKey.java", "diffHunk": "@@ -18,10 +19,12 @@\n   DEATH(\n       Arrays.asList(\"death\", \"dms\"), DEATH_ALL, DEATH_OWN), // Changes which death messages are seen\n   PICKER(\"picker\", PICKER_AUTO, PICKER_ON, PICKER_OFF), // Changes when the picker is displayed\n-  OBSERVERS(\n-      Arrays.asList(\"observers\", \"obs\"),\n-      OBSERVERS_ON,\n-      OBSERVERS_OFF); // Changes if observers are visible\n+  OBSERVERS(Arrays.asList(\"observers\", \"obs\"), OBSERVERS_ON, OBSERVERS_OFF) {\n+    @Override\n+    public void update(MatchPlayer player) {\n+      player.resetVisibility();\n+    }\n+  }; // Changes if observers are visible", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3ODE3OA=="}, "originalCommit": {"oid": "f76076fd0fd3a591511c328936637cd2169fa800"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3OTUxNg==", "bodyText": "For now, either way works", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363079516", "createdAt": "2020-01-05T09:13:30Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/api/setting/SettingKey.java", "diffHunk": "@@ -18,10 +19,12 @@\n   DEATH(\n       Arrays.asList(\"death\", \"dms\"), DEATH_ALL, DEATH_OWN), // Changes which death messages are seen\n   PICKER(\"picker\", PICKER_AUTO, PICKER_ON, PICKER_OFF), // Changes when the picker is displayed\n-  OBSERVERS(\n-      Arrays.asList(\"observers\", \"obs\"),\n-      OBSERVERS_ON,\n-      OBSERVERS_OFF); // Changes if observers are visible\n+  OBSERVERS(Arrays.asList(\"observers\", \"obs\"), OBSERVERS_ON, OBSERVERS_OFF) {\n+    @Override\n+    public void update(MatchPlayer player) {\n+      player.resetVisibility();\n+    }\n+  }; // Changes if observers are visible", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3ODE3OA=="}, "originalCommit": {"oid": "f76076fd0fd3a591511c328936637cd2169fa800"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjI3NTk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/api/setting/SettingKey.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxMjoxMDoyMVrOFaRLUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxMjoxMDoyMVrOFaRLUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA4ODcyMg==", "bodyText": "For future reference, I think this will be a stop gap solution. In making Datastore async, I think I'll add support for a Listener to be registered.", "url": "https://github.com/PGMDev/PGM/pull/191#discussion_r363088722", "createdAt": "2020-01-05T12:10:21Z", "author": {"login": "Electroid"}, "path": "src/main/java/tc/oc/pgm/api/setting/SettingKey.java", "diffHunk": "@@ -78,4 +85,11 @@ public SettingValue getDefaultValue() {\n   public String toString() {\n     return getName();\n   }\n+\n+  /**\n+   * Called whether setting has changed and is ready to be updated internally.\n+   *\n+   * @param player owner of the setting\n+   */\n+  public void update(MatchPlayer player) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a86c0e89d984e72fb874eda51fde423b027a1ca1"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1099, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}