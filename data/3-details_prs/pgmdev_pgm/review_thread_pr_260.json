{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MTQ3MDQ0", "number": 260, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxOTo0NToxMVrODarxzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNzowNDoxOFrODa9BOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzA2ODMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxOTo0NToxMlrOFhxHgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxOTo1MTo1MFrOFhxI3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MjA2Ng==", "bodyText": "Keep it private or protected, please.", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370952066", "createdAt": "2020-01-25T19:45:12Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package tc.oc.pgm.gui;\n+\n+import com.google.common.collect.Sets;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.bukkit.Bukkit;\n+import org.bukkit.inventory.Inventory;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.util.StringUtils;\n+\n+public abstract class InventoryGUI {\n+\n+  /*\n+   * Code extracted from PickerMatchModule to allow for reuse\n+   */\n+\n+  public Set<MatchPlayer> viewing = Sets.newHashSet();\n+\n+  public String title; // Title of the inventory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f690a7af8898b2a1c4a9191cd82a0ba56694c04c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MjQxMw==", "bodyText": "Thanks for the suggestions @TheMolkaPL !", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370952413", "createdAt": "2020-01-25T19:51:50Z", "author": {"login": "applenick"}, "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package tc.oc.pgm.gui;\n+\n+import com.google.common.collect.Sets;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.bukkit.Bukkit;\n+import org.bukkit.inventory.Inventory;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.util.StringUtils;\n+\n+public abstract class InventoryGUI {\n+\n+  /*\n+   * Code extracted from PickerMatchModule to allow for reuse\n+   */\n+\n+  public Set<MatchPlayer> viewing = Sets.newHashSet();\n+\n+  public String title; // Title of the inventory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MjA2Ng=="}, "originalCommit": {"oid": "f690a7af8898b2a1c4a9191cd82a0ba56694c04c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzA2ODQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxOTo0NToyMlrOFhxHkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxOTo0NToyMlrOFhxHkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MjA4Mg==", "bodyText": "checkNotNull please", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370952082", "createdAt": "2020-01-25T19:45:22Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package tc.oc.pgm.gui;\n+\n+import com.google.common.collect.Sets;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.bukkit.Bukkit;\n+import org.bukkit.inventory.Inventory;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.util.StringUtils;\n+\n+public abstract class InventoryGUI {\n+\n+  /*\n+   * Code extracted from PickerMatchModule to allow for reuse\n+   */\n+\n+  public Set<MatchPlayer> viewing = Sets.newHashSet();\n+\n+  public String title; // Title of the inventory\n+  private int size; // Size of inventory\n+\n+  public InventoryGUI(String title, int size) {\n+    this.title = title;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f690a7af8898b2a1c4a9191cd82a0ba56694c04c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzA2ODc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxOTo0NTo1MVrOFhxHvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxOTo0NTo1MVrOFhxHvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MjEyNA==", "bodyText": "Check if the size is positive and can be divided by 9.", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370952124", "createdAt": "2020-01-25T19:45:51Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package tc.oc.pgm.gui;\n+\n+import com.google.common.collect.Sets;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.bukkit.Bukkit;\n+import org.bukkit.inventory.Inventory;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.util.StringUtils;\n+\n+public abstract class InventoryGUI {\n+\n+  /*\n+   * Code extracted from PickerMatchModule to allow for reuse\n+   */\n+\n+  public Set<MatchPlayer> viewing = Sets.newHashSet();\n+\n+  public String title; // Title of the inventory\n+  private int size; // Size of inventory\n+\n+  public InventoryGUI(String title, int size) {\n+    this.title = title;\n+    this.size = size;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f690a7af8898b2a1c4a9191cd82a0ba56694c04c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzA3MDExOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxOTo0OTozMVrOFhxIZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxOTo0OTozMVrOFhxIZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MjI5Mg==", "bodyText": "This should be translatable.", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370952292", "createdAt": "2020-01-25T19:49:31Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import org.apache.commons.lang.WordUtils;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class FlySpeedTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.flyspeed\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_RED;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component flySpeed = FlySpeed.of(player.getBukkit().getFlySpeed()).getName();\n+    Component lore =\n+        new PersonalizedTranslatable(\"observer.tools.flyspeed.lore\", flySpeed)\n+            .getPersonalizedText()\n+            .color(ChatColor.GRAY);\n+    return Lists.newArrayList(ComponentRenderers.toLegacyText(lore, player.getBukkit()));\n+  }\n+\n+  @Override\n+  public Material getMaterial(MatchPlayer player) {\n+    return Material.FEATHER;\n+  }\n+\n+  @Override\n+  public void onInventoryClick(InventoryGUI menu, MatchPlayer player) {\n+    incrementSpeed(player);\n+    menu.refreshWindow(player);\n+  }\n+\n+  private void incrementSpeed(MatchPlayer player) {\n+    FlySpeed speed = FlySpeed.of(player.getBukkit().getFlySpeed());\n+    player.getBukkit().setFlySpeed(speed.getNext().getValue());\n+  }\n+\n+  public static enum FlySpeed {\n+    NORMAL(ChatColor.YELLOW, 0.1f),\n+    FAST(ChatColor.GOLD, 0.25f),\n+    FASTER(ChatColor.RED, 0.5f),\n+    HYPERSPEED(ChatColor.LIGHT_PURPLE, 0.9f);\n+\n+    private ChatColor color;\n+    private float value;\n+\n+    FlySpeed(ChatColor color, float value) {\n+      this.color = color;\n+      this.value = value;\n+    }\n+\n+    public float getValue() {\n+      return value;\n+    }\n+\n+    public Component getName() {\n+      return new PersonalizedText(WordUtils.capitalize(this.name().toLowerCase())).color(color);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f690a7af8898b2a1c4a9191cd82a0ba56694c04c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzE0MDY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/commands/ObserverCommands.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMzowMTozOFrOFhxreA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMTo0MTowNFrOFh2z4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MTI3Mg==", "bodyText": "I don't think this command is really needed since the item on the inventory exists.\nIf the concern is not being able to open the menu if you throw out the diamond, make it so any diamond right-clicking works.", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370961272", "createdAt": "2020-01-25T23:01:38Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/commands/ObserverCommands.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package tc.oc.pgm.commands;\n+\n+import app.ashcon.intake.Command;\n+import app.ashcon.intake.CommandException;\n+import java.util.Optional;\n+import org.bukkit.command.CommandSender;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.observers.ObserverToolsMatchModule;\n+\n+public class ObserverCommands {\n+\n+  @Command(\n+      aliases = {\"tools\", \"observertools\", \"ot\"},\n+      desc = \"Open the observer tool menu\")\n+  public static void openObserverToolMenu(CommandSender sender, MatchPlayer player)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2dd6927210d3e2bfbccb3b098c77c5e85bc0b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3NTkzOQ==", "bodyText": "Hey @Pablete1234,\nSo what I encountered during testing was the lack of the ability to use any item while a player is in the spectator gamemode. Unless there is some odd method to access items as a spectator which I\u2019m unaware of, I\u2019m unsure how exactly one can return to the menu without using the command.\nHere\u2019s a look at what I mean:", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370975939", "createdAt": "2020-01-26T06:06:29Z", "author": {"login": "applenick"}, "path": "src/main/java/tc/oc/pgm/commands/ObserverCommands.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package tc.oc.pgm.commands;\n+\n+import app.ashcon.intake.Command;\n+import app.ashcon.intake.CommandException;\n+import java.util.Optional;\n+import org.bukkit.command.CommandSender;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.observers.ObserverToolsMatchModule;\n+\n+public class ObserverCommands {\n+\n+  @Command(\n+      aliases = {\"tools\", \"observertools\", \"ot\"},\n+      desc = \"Open the observer tool menu\")\n+  public static void openObserverToolMenu(CommandSender sender, MatchPlayer player)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MTI3Mg=="}, "originalCommit": {"oid": "bdf2dd6927210d3e2bfbccb3b098c77c5e85bc0b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0MzQ3NA==", "bodyText": "@applenick the item you have selected is still the diamond, right-ckicking brings uo the menu again. IIRC, you must click againt block while in gm3 or there's no event", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r371043474", "createdAt": "2020-01-27T01:20:25Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/commands/ObserverCommands.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package tc.oc.pgm.commands;\n+\n+import app.ashcon.intake.Command;\n+import app.ashcon.intake.CommandException;\n+import java.util.Optional;\n+import org.bukkit.command.CommandSender;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.observers.ObserverToolsMatchModule;\n+\n+public class ObserverCommands {\n+\n+  @Command(\n+      aliases = {\"tools\", \"observertools\", \"ot\"},\n+      desc = \"Open the observer tool menu\")\n+  public static void openObserverToolMenu(CommandSender sender, MatchPlayer player)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MTI3Mg=="}, "originalCommit": {"oid": "bdf2dd6927210d3e2bfbccb3b098c77c5e85bc0b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NTM0NQ==", "bodyText": "@Pablete1234 So I just did some more testing and I see what I missed the first time. You are correct right-clicking blocks are the only way to fire the event as a spectator. Unfortunately I was only right-clicking the air so \ud83e\udd37\u200d\u2642. However I fear that if we rely solely on just the right-clicking of blocks we may run into players who are unfamiliar as I was.\nFor now I believe it\u2019s important to offer the command, the same way there is a command to join the match although we have the picker.\nAlso in regards to your original comment, clicking any diamond does open the menu.", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r371045345", "createdAt": "2020-01-27T01:41:04Z", "author": {"login": "applenick"}, "path": "src/main/java/tc/oc/pgm/commands/ObserverCommands.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package tc.oc.pgm.commands;\n+\n+import app.ashcon.intake.Command;\n+import app.ashcon.intake.CommandException;\n+import java.util.Optional;\n+import org.bukkit.command.CommandSender;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.observers.ObserverToolsMatchModule;\n+\n+public class ObserverCommands {\n+\n+  @Command(\n+      aliases = {\"tools\", \"observertools\", \"ot\"},\n+      desc = \"Open the observer tool menu\")\n+  public static void openObserverToolMenu(CommandSender sender, MatchPlayer player)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MTI3Mg=="}, "originalCommit": {"oid": "bdf2dd6927210d3e2bfbccb3b098c77c5e85bc0b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzE5ODQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMjowNDoxMlrOFhyHmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMjoxMjoxOFrOFhyIwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2ODQ3NQ==", "bodyText": "You forgot final :p", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370968475", "createdAt": "2020-01-26T02:04:12Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "diffHunk": "@@ -13,18 +16,27 @@\n \n public abstract class InventoryGUI {\n \n-  /*\n-   * Code extracted from PickerMatchModule to allow for reuse\n-   */\n-\n-  public Set<MatchPlayer> viewing = Sets.newHashSet();\n+  protected static int ROW_WIDTH = 9; // Number of columns per row\n+  protected static int MAX_ROWS = 6; // Max allowed row size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d0164aab30e777da6b560ec1388a0db861fd16"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2ODc3MA==", "bodyText": "\ud83e\udd26\u200d\u2642 Haha, whoops.", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370968770", "createdAt": "2020-01-26T02:12:18Z", "author": {"login": "applenick"}, "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "diffHunk": "@@ -13,18 +16,27 @@\n \n public abstract class InventoryGUI {\n \n-  /*\n-   * Code extracted from PickerMatchModule to allow for reuse\n-   */\n-\n-  public Set<MatchPlayer> viewing = Sets.newHashSet();\n+  protected static int ROW_WIDTH = 9; // Number of columns per row\n+  protected static int MAX_ROWS = 6; // Max allowed row size", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2ODQ3NQ=="}, "originalCommit": {"oid": "49d0164aab30e777da6b560ec1388a0db861fd16"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzE5OTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMjowNjozNVrOFhyH_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMjowNjozNVrOFhyH_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2ODU3NA==", "bodyText": "I think all of these can be final?", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370968574", "createdAt": "2020-01-26T02:06:35Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/gui/InventoryGUI.java", "diffHunk": "@@ -13,18 +16,27 @@\n \n public abstract class InventoryGUI {\n \n-  /*\n-   * Code extracted from PickerMatchModule to allow for reuse\n-   */\n-\n-  public Set<MatchPlayer> viewing = Sets.newHashSet();\n+  protected static int ROW_WIDTH = 9; // Number of columns per row\n+  protected static int MAX_ROWS = 6; // Max allowed row size\n \n-  public String title; // Title of the inventory\n-  private int size; // Size of inventory\n+  private Set<MatchPlayer> viewing = Sets.newHashSet(); // Set of players who are viewing the gui\n+  private String title; // Title of the inventory\n+  private int rows; // The # of rows in the inventory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d0164aab30e777da6b560ec1388a0db861fd16"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzIwMjcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMjoyMTowNlrOFhyJwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMjoyMTowNlrOFhyJwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTAyNg==", "bodyText": "We should keep a comment here saying that this command is from WorldEdit and it unstucks the player. Also having worldedit: there would be cool.", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370969026", "createdAt": "2020-01-26T02:21:06Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import net.md_5.bungee.api.chat.ClickEvent;\n+import net.md_5.bungee.api.chat.HoverEvent;\n+import org.apache.commons.lang.WordUtils;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class GamemodeTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.gamemode\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_AQUA;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component gamemode =\n+        new PersonalizedText(WordUtils.capitalizeFully(player.getGameMode().name().toLowerCase()))\n+            .color(ChatColor.AQUA);\n+    Component lore =\n+        new PersonalizedTranslatable(\"observer.tools.gamemode.lore\", gamemode)\n+            .getPersonalizedText()\n+            .color(ChatColor.GRAY);\n+    return Lists.newArrayList(ComponentRenderers.toLegacyText(lore, player.getBukkit()));\n+  }\n+\n+  @Override\n+  public Material getMaterial(MatchPlayer player) {\n+    return isCreative(player) ? Material.SEA_LANTERN : Material.PRISMARINE;\n+  }\n+\n+  @Override\n+  public void onInventoryClick(InventoryGUI menu, MatchPlayer player) {\n+    toggleObserverGameMode(player);\n+    menu.refreshWindow(player);\n+  }\n+\n+  public void toggleObserverGameMode(MatchPlayer player) {\n+    player.setGameMode(getOppositeMode(player.getGameMode()));\n+    if (player.getGameMode() == GameMode.SPECTATOR) {\n+      player.sendWarning(getToggleMessage(), true);\n+    } else if (isCreative(player)) {\n+      player.getBukkit().performCommand(\"!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5969f31828c357d291d4a88f91956b4c4a4af708"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzIwMzAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMjoyMjozMlrOFhyJ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMzoyMDo1NVrOFhyQlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTA2Ng==", "bodyText": "I'm sure there is a translation for this in the client for th\u00ecs. Can we use it?", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370969066", "createdAt": "2020-01-26T02:22:32Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import net.md_5.bungee.api.chat.ClickEvent;\n+import net.md_5.bungee.api.chat.HoverEvent;\n+import org.apache.commons.lang.WordUtils;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class GamemodeTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.gamemode\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_AQUA;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component gamemode =\n+        new PersonalizedText(WordUtils.capitalizeFully(player.getGameMode().name().toLowerCase()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5969f31828c357d291d4a88f91956b4c4a4af708"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTg1NQ==", "bodyText": "Curious. I\u2019m not familiar with the client translations, could you explain?", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370969855", "createdAt": "2020-01-26T02:49:23Z", "author": {"login": "applenick"}, "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import net.md_5.bungee.api.chat.ClickEvent;\n+import net.md_5.bungee.api.chat.HoverEvent;\n+import org.apache.commons.lang.WordUtils;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class GamemodeTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.gamemode\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_AQUA;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component gamemode =\n+        new PersonalizedText(WordUtils.capitalizeFully(player.getGameMode().name().toLowerCase()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTA2Ng=="}, "originalCommit": {"oid": "5969f31828c357d291d4a88f91956b4c4a4af708"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTk4NA==", "bodyText": "These are the values in the 1.8.9 en_US.lang file:\ngameMode.survival=Survival Mode\ngameMode.creative=Creative Mode\ngameMode.adventure=Adventure Mode\ngameMode.spectator=Spectator Mode\n\nAlternatively:\nselectWorld.gameMode.survival=Survival\nselectWorld.gameMode.creative=Creative\nselectWorld.gameMode.adventure=Adventure\nselectWorld.gameMode.spectator=Spectator", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370969984", "createdAt": "2020-01-26T02:54:02Z", "author": {"login": "Meeples10"}, "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import net.md_5.bungee.api.chat.ClickEvent;\n+import net.md_5.bungee.api.chat.HoverEvent;\n+import org.apache.commons.lang.WordUtils;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class GamemodeTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.gamemode\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_AQUA;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component gamemode =\n+        new PersonalizedText(WordUtils.capitalizeFully(player.getGameMode().name().toLowerCase()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTA2Ng=="}, "originalCommit": {"oid": "5969f31828c357d291d4a88f91956b4c4a4af708"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3MDE0Mg==", "bodyText": "Thanks @Meeples10!\nAh I understand now, that\u2019s very useful \ud83d\udc4d", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370970142", "createdAt": "2020-01-26T02:59:24Z", "author": {"login": "applenick"}, "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import net.md_5.bungee.api.chat.ClickEvent;\n+import net.md_5.bungee.api.chat.HoverEvent;\n+import org.apache.commons.lang.WordUtils;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class GamemodeTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.gamemode\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_AQUA;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component gamemode =\n+        new PersonalizedText(WordUtils.capitalizeFully(player.getGameMode().name().toLowerCase()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTA2Ng=="}, "originalCommit": {"oid": "5969f31828c357d291d4a88f91956b4c4a4af708"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3MDc3NQ==", "bodyText": "Have you confirmed that this actually works? I'm not sure if PGM translates vanilla messages.", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370970775", "createdAt": "2020-01-26T03:20:55Z", "author": {"login": "Meeples10"}, "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import net.md_5.bungee.api.chat.ClickEvent;\n+import net.md_5.bungee.api.chat.HoverEvent;\n+import org.apache.commons.lang.WordUtils;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class GamemodeTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.gamemode\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_AQUA;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component gamemode =\n+        new PersonalizedText(WordUtils.capitalizeFully(player.getGameMode().name().toLowerCase()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTA2Ng=="}, "originalCommit": {"oid": "5969f31828c357d291d4a88f91956b4c4a4af708"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzIwMzQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMjoyMzozOVrOFhyKGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMjoyMzozOVrOFhyKGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTExMg==", "bodyText": "Should be translatable.", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370969112", "createdAt": "2020-01-26T02:23:39Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import net.md_5.bungee.api.chat.ClickEvent;\n+import net.md_5.bungee.api.chat.HoverEvent;\n+import org.apache.commons.lang.WordUtils;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class GamemodeTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.gamemode\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_AQUA;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component gamemode =\n+        new PersonalizedText(WordUtils.capitalizeFully(player.getGameMode().name().toLowerCase()))\n+            .color(ChatColor.AQUA);\n+    Component lore =\n+        new PersonalizedTranslatable(\"observer.tools.gamemode.lore\", gamemode)\n+            .getPersonalizedText()\n+            .color(ChatColor.GRAY);\n+    return Lists.newArrayList(ComponentRenderers.toLegacyText(lore, player.getBukkit()));\n+  }\n+\n+  @Override\n+  public Material getMaterial(MatchPlayer player) {\n+    return isCreative(player) ? Material.SEA_LANTERN : Material.PRISMARINE;\n+  }\n+\n+  @Override\n+  public void onInventoryClick(InventoryGUI menu, MatchPlayer player) {\n+    toggleObserverGameMode(player);\n+    menu.refreshWindow(player);\n+  }\n+\n+  public void toggleObserverGameMode(MatchPlayer player) {\n+    player.setGameMode(getOppositeMode(player.getGameMode()));\n+    if (player.getGameMode() == GameMode.SPECTATOR) {\n+      player.sendWarning(getToggleMessage(), true);\n+    } else if (isCreative(player)) {\n+      player.getBukkit().performCommand(\"!\");\n+    }\n+  }\n+\n+  private boolean isCreative(MatchPlayer player) {\n+    return player.getGameMode().equals(GameMode.CREATIVE);\n+  }\n+\n+  private Component getToggleMessage() {\n+    Component command =\n+        new PersonalizedText(\"/tools\")\n+            .color(ChatColor.AQUA)\n+            .hoverEvent(\n+                HoverEvent.Action.SHOW_TEXT,\n+                new PersonalizedText(\"Click to open tool menu\").color(ChatColor.GRAY).render())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5969f31828c357d291d4a88f91956b4c4a4af708"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzIwMzUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/observers/tools/NightVisionTool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMjoyNDowOFrOFhyKKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMjoyNDowOFrOFhyKKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTEyOA==", "bodyText": "Should be translatable.", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370969128", "createdAt": "2020-01-26T02:24:08Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/observers/tools/NightVisionTool.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Material;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class NightVisionTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.nightvision\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_PURPLE;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component status =\n+        new PersonalizedText(hasNightVision(player) ? \"On\" : \"Off\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5969f31828c357d291d4a88f91956b4c4a4af708"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzIwMzYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/observers/tools/VisibilityTool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMjoyNDo0N1rOFhyKMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMjoyNDo0N1rOFhyKMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTEzNg==", "bodyText": "Should be translatable.", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370969136", "createdAt": "2020-01-26T02:24:47Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/observers/tools/VisibilityTool.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.setting.SettingKey;\n+import tc.oc.pgm.api.setting.SettingValue;\n+import tc.oc.pgm.api.setting.Settings;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class VisibilityTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.visibility\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.YELLOW;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component status =\n+        new PersonalizedText(isVisible(player) ? \"Shown\" : \"Hidden\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5969f31828c357d291d4a88f91956b4c4a4af708"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzIxOTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/observers/ObserverToolsMatchModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMzozMjowMFrOFhyR8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMzozMjowMFrOFhyR8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3MTEyMQ==", "bodyText": "maybe rename to canUse instead ?", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370971121", "createdAt": "2020-01-26T03:32:00Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/observers/ObserverToolsMatchModule.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package tc.oc.pgm.observers;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.Action;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.inventory.InventoryCloseEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.match.MatchModule;\n+import tc.oc.pgm.match.MatchModuleFactory;\n+import tc.oc.pgm.module.ModuleLoadException;\n+import tc.oc.pgm.observers.tools.FlySpeedTool;\n+import tc.oc.pgm.observers.tools.GamemodeTool;\n+import tc.oc.pgm.observers.tools.NightVisionTool;\n+import tc.oc.pgm.observers.tools.VisibilityTool;\n+import tc.oc.pgm.spawns.events.ObserverKitApplyEvent;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class ObserverToolsMatchModule extends MatchModule implements Listener {\n+\n+  public static class Factory implements MatchModuleFactory<ObserverToolsMatchModule> {\n+    @Override\n+    public ObserverToolsMatchModule createMatchModule(Match match) throws ModuleLoadException {\n+      return new ObserverToolsMatchModule(match);\n+    }\n+  }\n+\n+  // Slot where tool item is placed\n+  public static final int TOOL_BUTTON_SLOT = 8;\n+\n+  // Material of tool item item\n+  public static final Material TOOL_MATERIAL = Material.DIAMOND;\n+\n+  private ObserverToolMenu menu;\n+\n+  public ObserverToolsMatchModule(Match match) {\n+    super(match);\n+    this.menu = new ObserverToolMenu();\n+  }\n+\n+  @EventHandler\n+  public void onObserverKitApply(ObserverKitApplyEvent event) {\n+    refreshKit(event.getPlayer());\n+  }\n+\n+  @EventHandler\n+  public void onToolClick(PlayerInteractEvent event) {\n+    if (isRightClick(event.getAction())) {\n+      ItemStack item = event.getPlayer().getItemInHand();\n+\n+      if (item.getType().equals(TOOL_MATERIAL)) {\n+        MatchPlayer player = getMatch().getPlayer(event.getPlayer());\n+        openMenu(player);\n+      }\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.LOWEST)\n+  public void onInventoryClick(final InventoryClickEvent event) {\n+    if (event.getCurrentItem() == null\n+        || event.getCurrentItem().getItemMeta() == null\n+        || event.getCurrentItem().getItemMeta().getDisplayName() == null) return;\n+\n+    if (event.getWhoClicked() instanceof Player) {\n+      MatchPlayer player = match.getPlayer(event.getWhoClicked());\n+      if (menu.isViewing(player)) {\n+        ItemStack clicked = event.getCurrentItem();\n+        menu.getTools()\n+            .forEach(\n+                tool -> {\n+                  if (clicked.getType().equals(tool.getMaterial(player))) {\n+                    tool.onInventoryClick(menu, player);\n+                  }\n+                });\n+      }\n+    }\n+  }\n+\n+  @EventHandler\n+  public void onInventoryClose(final InventoryCloseEvent event) {\n+    // Remove viewing of menu upon inventory close\n+    menu.remove(getMatch().getPlayer((Player) event.getPlayer()));\n+  }\n+\n+  public void openMenu(MatchPlayer player) {\n+    if (hasUse(player)) {\n+      menu.display(player);\n+    }\n+  }\n+\n+  private boolean hasUse(MatchPlayer player) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2dd6927210d3e2bfbccb3b098c77c5e85bc0b"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzIyMTQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMzozODoyOFrOFhySzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMzozODoyOFrOFhySzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3MTM0MA==", "bodyText": "have a:\nprivate static FlySpeed[] speeds = values();\nand have this method be:\nreturn speeds[(ordinal() + 1) % speeds.length]", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370971340", "createdAt": "2020-01-26T03:38:28Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import org.apache.commons.lang.WordUtils;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+import tc.oc.pgm.observers.ObserverTool;\n+\n+public class FlySpeedTool implements ObserverTool {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.flyspeed\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_RED;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component flySpeed = FlySpeed.of(player.getBukkit().getFlySpeed()).getName();\n+    Component lore =\n+        new PersonalizedTranslatable(\"observer.tools.flyspeed.lore\", flySpeed)\n+            .getPersonalizedText()\n+            .color(ChatColor.GRAY);\n+    return Lists.newArrayList(ComponentRenderers.toLegacyText(lore, player.getBukkit()));\n+  }\n+\n+  @Override\n+  public Material getMaterial(MatchPlayer player) {\n+    return Material.FEATHER;\n+  }\n+\n+  @Override\n+  public void onInventoryClick(InventoryGUI menu, MatchPlayer player) {\n+    incrementSpeed(player);\n+    menu.refreshWindow(player);\n+  }\n+\n+  private void incrementSpeed(MatchPlayer player) {\n+    FlySpeed speed = FlySpeed.of(player.getBukkit().getFlySpeed());\n+    player.getBukkit().setFlySpeed(speed.getNext().getValue());\n+  }\n+\n+  public static enum FlySpeed {\n+    NORMAL(ChatColor.YELLOW, 0.1f),\n+    FAST(ChatColor.GOLD, 0.25f),\n+    FASTER(ChatColor.RED, 0.5f),\n+    HYPERSPEED(ChatColor.LIGHT_PURPLE, 0.9f);\n+\n+    private ChatColor color;\n+    private float value;\n+\n+    FlySpeed(ChatColor color, float value) {\n+      this.color = color;\n+      this.value = value;\n+    }\n+\n+    public float getValue() {\n+      return value;\n+    }\n+\n+    public Component getName() {\n+      return new PersonalizedText(WordUtils.capitalize(this.name().toLowerCase())).color(color);\n+    }\n+\n+    public FlySpeed getNext() {\n+      return ordinal() < (values().length - 1) ? values()[ordinal() + 1] : NORMAL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2dd6927210d3e2bfbccb3b098c77c5e85bc0b"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzIyMjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/observers/ObserverTool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMzo0MjoyN1rOFhyTMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMzo0MjoyN1rOFhyTMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3MTQ0Mg==", "bodyText": "maybe have this be a generic gui item thing?", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r370971442", "createdAt": "2020-01-26T03:42:27Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/observers/ObserverTool.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package tc.oc.pgm.observers;\n+\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Material;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.gui.InventoryGUI;\n+\n+public interface ObserverTool {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2dd6927210d3e2bfbccb3b098c77c5e85bc0b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mzk2ODI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNTo1MTo1OVrOFh4aJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjo1MDo0NFrOFh5Fxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3MTUyNg==", "bodyText": "What happens if WorldEdit is not loaded? Will it show a command not found error?", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r371071526", "createdAt": "2020-01-27T05:51:59Z", "author": {"login": "Electroid"}, "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import net.md_5.bungee.api.chat.ClickEvent;\n+import net.md_5.bungee.api.chat.HoverEvent;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.menu.InventoryMenu;\n+import tc.oc.pgm.menu.InventoryMenuItem;\n+\n+public class GamemodeTool implements InventoryMenuItem {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.gamemode\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_AQUA;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component gamemode =\n+        new PersonalizedTranslatable(\"gameMode.\" + player.getGameMode().name().toLowerCase())\n+            .color(ChatColor.AQUA);\n+    Component lore =\n+        new PersonalizedTranslatable(\"observer.tools.gamemode.lore\", gamemode)\n+            .getPersonalizedText()\n+            .color(ChatColor.GRAY);\n+    return Lists.newArrayList(ComponentRenderers.toLegacyText(lore, player.getBukkit()));\n+  }\n+\n+  @Override\n+  public Material getMaterial(MatchPlayer player) {\n+    return isCreative(player) ? Material.SEA_LANTERN : Material.PRISMARINE;\n+  }\n+\n+  @Override\n+  public void onInventoryClick(InventoryMenu menu, MatchPlayer player) {\n+    toggleObserverGameMode(player);\n+    menu.refreshWindow(player);\n+  }\n+\n+  public void toggleObserverGameMode(MatchPlayer player) {\n+    player.setGameMode(getOppositeMode(player.getGameMode()));\n+    if (player.getGameMode() == GameMode.SPECTATOR) {\n+      player.sendWarning(getToggleMessage(), true);\n+    } else if (isCreative(player)) {\n+      // Note: This performs the WorldEdit command to ensure the player is not stuck\n+      player.getBukkit().performCommand(\"worldedit:!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0111450600cd5721dc18c5e625df504ff87910a4"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA4MjY5NA==", "bodyText": "Good catch. I\u2019ll add a check to see if WorldEdit is enabled or not.\nThanks @Electroid!", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r371082694", "createdAt": "2020-01-27T06:50:44Z", "author": {"login": "applenick"}, "path": "src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package tc.oc.pgm.observers.tools;\n+\n+import com.google.common.collect.Lists;\n+import java.util.List;\n+import net.md_5.bungee.api.ChatColor;\n+import net.md_5.bungee.api.chat.ClickEvent;\n+import net.md_5.bungee.api.chat.HoverEvent;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import tc.oc.component.Component;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedText;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.menu.InventoryMenu;\n+import tc.oc.pgm.menu.InventoryMenuItem;\n+\n+public class GamemodeTool implements InventoryMenuItem {\n+\n+  @Override\n+  public Component getName() {\n+    return new PersonalizedTranslatable(\"observer.tools.gamemode\");\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.DARK_AQUA;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    Component gamemode =\n+        new PersonalizedTranslatable(\"gameMode.\" + player.getGameMode().name().toLowerCase())\n+            .color(ChatColor.AQUA);\n+    Component lore =\n+        new PersonalizedTranslatable(\"observer.tools.gamemode.lore\", gamemode)\n+            .getPersonalizedText()\n+            .color(ChatColor.GRAY);\n+    return Lists.newArrayList(ComponentRenderers.toLegacyText(lore, player.getBukkit()));\n+  }\n+\n+  @Override\n+  public Material getMaterial(MatchPlayer player) {\n+    return isCreative(player) ? Material.SEA_LANTERN : Material.PRISMARINE;\n+  }\n+\n+  @Override\n+  public void onInventoryClick(InventoryMenu menu, MatchPlayer player) {\n+    toggleObserverGameMode(player);\n+    menu.refreshWindow(player);\n+  }\n+\n+  public void toggleObserverGameMode(MatchPlayer player) {\n+    player.setGameMode(getOppositeMode(player.getGameMode()));\n+    if (player.getGameMode() == GameMode.SPECTATOR) {\n+      player.sendWarning(getToggleMessage(), true);\n+    } else if (isCreative(player)) {\n+      // Note: This performs the WorldEdit command to ensure the player is not stuck\n+      player.getBukkit().performCommand(\"worldedit:!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3MTUyNg=="}, "originalCommit": {"oid": "0111450600cd5721dc18c5e625df504ff87910a4"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTg5MzA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/menu/InventoryMenu.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNzowNDoxOFrOFiKWjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMToxNzoyMFrOFiWxWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM2NTUxOQ==", "bodyText": "This doesn't seem to get cleaned up anywhere? How about using WeakHashMap ?", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r371365519", "createdAt": "2020-01-27T17:04:18Z", "author": {"login": "Electroid"}, "path": "src/main/java/tc/oc/pgm/menu/InventoryMenu.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package tc.oc.pgm.menu;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.collect.Sets;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.bukkit.Bukkit;\n+import org.bukkit.inventory.Inventory;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.util.StringUtils;\n+\n+public abstract class InventoryMenu {\n+\n+  protected static final int ROW_WIDTH = 9; // Number of columns per row\n+  protected static final int MAX_ROWS = 6; // Max allowed row size\n+\n+  private final Set<MatchPlayer> viewing =\n+      Sets.newHashSet(); // Set of players who are viewing the gui", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df09e973d74aef22b5eeb2c24db8f9058b8cac26"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2ODk4Ng==", "bodyText": "Hey @Electroid,\nThe viewing map does get cleaned up via the ObserverToolsMatchModule manually. I switched it over to a WeakHashMap as suggested, to accommodate for when future implementations are added, just so cleanup occurs in case not manually done.\nThanks!", "url": "https://github.com/PGMDev/PGM/pull/260#discussion_r371568986", "createdAt": "2020-01-28T01:17:20Z", "author": {"login": "applenick"}, "path": "src/main/java/tc/oc/pgm/menu/InventoryMenu.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package tc.oc.pgm.menu;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.collect.Sets;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+import org.bukkit.Bukkit;\n+import org.bukkit.inventory.Inventory;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.component.render.ComponentRenderers;\n+import tc.oc.component.types.PersonalizedTranslatable;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.util.StringUtils;\n+\n+public abstract class InventoryMenu {\n+\n+  protected static final int ROW_WIDTH = 9; // Number of columns per row\n+  protected static final int MAX_ROWS = 6; // Max allowed row size\n+\n+  private final Set<MatchPlayer> viewing =\n+      Sets.newHashSet(); // Set of players who are viewing the gui", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM2NTUxOQ=="}, "originalCommit": {"oid": "df09e973d74aef22b5eeb2c24db8f9058b8cac26"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1117, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}