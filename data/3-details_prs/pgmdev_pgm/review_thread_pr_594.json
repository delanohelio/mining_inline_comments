{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMTAwNjk1", "number": 594, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoxODoxMVrOEVO4ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzowNTowNFrOEWYpug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjk5Mzg3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoxODoxMVrOG73vjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjozMzo1NFrOG73_Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMjQ2Mg==", "bodyText": "Is this unused? did you mean to call this from trackFlag?", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465432462", "createdAt": "2020-08-05T02:18:11Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -50,6 +53,13 @@ public LegacyFlagBeamMatchModule(Match match) {\n     this.beams = new HashMap<>();\n   }\n \n+  private boolean shouldShowBeams(Flag flag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzNjQyOA==", "bodyText": "Ah this is my bad, forgot to remove this and didn't end up using it.", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465436428", "createdAt": "2020-08-05T02:33:40Z", "author": {"login": "jasoryeh"}, "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -50,6 +53,13 @@ public LegacyFlagBeamMatchModule(Match match) {\n     this.beams = new HashMap<>();\n   }\n \n+  private boolean shouldShowBeams(Flag flag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMjQ2Mg=="}, "originalCommit": {"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzNjQ5MQ==", "bodyText": "Resolved in new commit.", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465436491", "createdAt": "2020-08-05T02:33:54Z", "author": {"login": "jasoryeh"}, "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -50,6 +53,13 @@ public LegacyFlagBeamMatchModule(Match match) {\n     this.beams = new HashMap<>();\n   }\n \n+  private boolean shouldShowBeams(Flag flag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMjQ2Mg=="}, "originalCommit": {"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjk5NzQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoyMDoxNlrOG73xuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzozMjo0N1rOG9rZOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzAxOQ==", "bodyText": "Having 100 zombie entities may be a bit too much on the client, and i doubt in any reasonable scenario this will actually be a factor that limits/helps one player or another, maybe 64 because 32 does look a bit on the lower side?", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465433019", "createdAt": "2020-08-05T02:20:16Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -188,7 +204,8 @@ public void run() {\n       this.flag = flag;\n       this.bukkit = bukkit;\n       this.segments =\n-          range(0, 32)\n+          range(0, 100) // ~100 blocks is the height which the particles appear to be reasonably", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzODIyOA==", "bodyText": "I get what you mean, however at times a beam of 32 zombies can sometimes be a bit too short for maps which have underground play areas, and these beams at times stuck out not as high as the particle beams.", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465438228", "createdAt": "2020-08-05T02:40:33Z", "author": {"login": "jasoryeh"}, "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -188,7 +204,8 @@ public void run() {\n       this.flag = flag;\n       this.bukkit = bukkit;\n       this.segments =\n-          range(0, 32)\n+          range(0, 100) // ~100 blocks is the height which the particles appear to be reasonably", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzAxOQ=="}, "originalCommit": {"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzOTUzMg==", "bodyText": "Yeah, that's why i suggested maybe make it 64, i'm hoping that should be more than enough, 32 can be short at times", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465439532", "createdAt": "2020-08-05T02:45:13Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -188,7 +204,8 @@ public void run() {\n       this.flag = flag;\n       this.bukkit = bukkit;\n       this.segments =\n-          range(0, 32)\n+          range(0, 100) // ~100 blocks is the height which the particles appear to be reasonably", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzAxOQ=="}, "originalCommit": {"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0Mjk3NQ==", "bodyText": "64 is okay, but I believe the official flag beams(particle beams( are supposed to run 48 blocks tall if I'm reading \n  \n    \n      PGM/core/src/main/java/tc/oc/pgm/flag/state/Spawned.java\n    \n    \n        Lines 62 to 72\n      in\n      7bd6dd2\n    \n    \n    \n    \n\n        \n          \n           .playEffect( \n        \n\n        \n          \n               this.getLocation().clone().add(0, 56, 0), \n        \n\n        \n          \n               Effect.TILE_DUST, \n        \n\n        \n          \n               Material.WOOL.getId(), \n        \n\n        \n          \n               flag.getDyeColor().getWoolData(), \n        \n\n        \n          \n               0.15f, // radius on each axis of the particle ball \n        \n\n        \n          \n               24f, \n        \n\n        \n          \n               0.15f, \n        \n\n        \n          \n               0f, // initial horizontal velocity \n        \n\n        \n          \n               40, // number of particles \n        \n\n        \n          \n               200); // radius in blocks to show particles \n        \n    \n  \n\n correctly, but in-game these particles exist no matter how high you go, they just decrease in amount the higher you go.", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465442975", "createdAt": "2020-08-05T02:59:00Z", "author": {"login": "jasoryeh"}, "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -188,7 +204,8 @@ public void run() {\n       this.flag = flag;\n       this.bukkit = bukkit;\n       this.segments =\n-          range(0, 32)\n+          range(0, 100) // ~100 blocks is the height which the particles appear to be reasonably", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzAxOQ=="}, "originalCommit": {"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4MzMwNw==", "bodyText": "Some particles aren't an exact science, this ones spawn 56 blocks above the flag, and go \"roughly\" 24 blocks up/down, this all has randomness to it and the particles themselves will spawn randomly and fall too.\nTechnically speaking, particles should spawn from 32 blocks above the flag to 80 blocks above the flag, but they fall and cover a larger area", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465483307", "createdAt": "2020-08-05T05:34:30Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -188,7 +204,8 @@ public void run() {\n       this.flag = flag;\n       this.bukkit = bukkit;\n       this.segments =\n-          range(0, 32)\n+          range(0, 100) // ~100 blocks is the height which the particles appear to be reasonably", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzAxOQ=="}, "originalCommit": {"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMTE5MA==", "bodyText": "Yea, the particles are weird since they spawn and fall like that. Even though they are supposed to spawn anywhere from 32 to 80 blocks above, theres a weird thing where a few particles still spawn about 130 blocks above the flag (in my testing flag spawns at y=20, particles appear to stop completely above y=150)", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465811190", "createdAt": "2020-08-05T15:27:01Z", "author": {"login": "jasoryeh"}, "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -188,7 +204,8 @@ public void run() {\n       this.flag = flag;\n       this.bukkit = bukkit;\n       this.segments =\n-          range(0, 32)\n+          range(0, 100) // ~100 blocks is the height which the particles appear to be reasonably", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzAxOQ=="}, "originalCommit": {"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNzI4OA==", "bodyText": "Changed to 64.", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467327288", "createdAt": "2020-08-07T23:32:47Z", "author": {"login": "jasoryeh"}, "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -188,7 +204,8 @@ public void run() {\n       this.flag = flag;\n       this.bukkit = bukkit;\n       this.segments =\n-          range(0, 32)\n+          range(0, 100) // ~100 blocks is the height which the particles appear to be reasonably", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzAxOQ=="}, "originalCommit": {"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzAwMzkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/config.yml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoyNDowMlrOG731bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToyODoyNFrOG8O6lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzk2Nw==", "bodyText": "Looks a bit on the long side, maybe just flag-beams?\nShould probably move to the ui section instead of gameplay ?\nI think false as a default makes more sense, as this is supposed to be for legacy (1.7) clients\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              global-legacy-flag-beams: true # Should everyone see legacy flag beams?\n          \n          \n            \n              flag-beams: false # Should everyone see floating wool flag beams?", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465433967", "createdAt": "2020-08-05T02:24:02Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/resources/config.yml", "diffHunk": "@@ -63,7 +63,8 @@ join:\n \n # Changes various gameplay mechanics.\n gameplay:\n-  refill-wool: true # Should wool in wool rooms be automatically refilled?\n+  refill-wool: true              # Should wool in wool rooms be automatically refilled?\n+  global-legacy-flag-beams: true # Should everyone see legacy flag beams?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzNzE2Ng==", "bodyText": "I think flag-beams gives off more of a should I have any flag beams at all, thought I agree it is kind of long, but just flag-beams is not descriptive enough in my opinion.\nThe ui section seems reasonable.\nI'm open to changes if anyone has a shorter key.", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465437166", "createdAt": "2020-08-05T02:36:27Z", "author": {"login": "jasoryeh"}, "path": "core/src/main/resources/config.yml", "diffHunk": "@@ -63,7 +63,8 @@ join:\n \n # Changes various gameplay mechanics.\n gameplay:\n-  refill-wool: true # Should wool in wool rooms be automatically refilled?\n+  refill-wool: true              # Should wool in wool rooms be automatically refilled?\n+  global-legacy-flag-beams: true # Should everyone see legacy flag beams?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzk2Nw=="}, "originalCommit": {"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2MzY2Ng==", "bodyText": "ui.flag-beams is reasonable", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465763666", "createdAt": "2020-08-05T14:21:52Z", "author": {"login": "Electroid"}, "path": "core/src/main/resources/config.yml", "diffHunk": "@@ -63,7 +63,8 @@ join:\n \n # Changes various gameplay mechanics.\n gameplay:\n-  refill-wool: true # Should wool in wool rooms be automatically refilled?\n+  refill-wool: true              # Should wool in wool rooms be automatically refilled?\n+  global-legacy-flag-beams: true # Should everyone see legacy flag beams?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzk2Nw=="}, "originalCommit": {"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMjExOQ==", "bodyText": "Decided to just go to ui.flag-beams", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465812119", "createdAt": "2020-08-05T15:28:24Z", "author": {"login": "jasoryeh"}, "path": "core/src/main/resources/config.yml", "diffHunk": "@@ -63,7 +63,8 @@ join:\n \n # Changes various gameplay mechanics.\n gameplay:\n-  refill-wool: true # Should wool in wool rooms be automatically refilled?\n+  refill-wool: true              # Should wool in wool rooms be automatically refilled?\n+  global-legacy-flag-beams: true # Should everyone see legacy flag beams?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzk2Nw=="}, "originalCommit": {"oid": "d43a97782ebf10168b3f11b4a15bee6f87769dbd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTEyMDQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/api/Config.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoyMToyN1rOG8L8Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoyMToyN1rOG8L8Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2MzM0Ng==", "bodyText": "useLegacyFlagBeams", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r465763346", "createdAt": "2020-08-05T14:21:27Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/api/Config.java", "diffHunk": "@@ -202,6 +202,14 @@\n    */\n   boolean shouldRefillWool();\n \n+  /**\n+   * Whether the wool flag beams created for older versions (pre-1.8) should be shown to all\n+   * players.\n+   *\n+   * @return If the wool flag beams should be shown to players >=1.8\n+   */\n+  boolean shouldShowLegacyFlagBeamsGlobally();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba973be8034f7828f5672007990ede248c1cb46"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzY5OTQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/flag/Flag.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNToxMjoyM1rOG83_wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzozMjozMFrOG9rY7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4NTE4NQ==", "bodyText": "Can we not juse *?", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r466485185", "createdAt": "2020-08-06T15:12:23Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/flag/Flag.java", "diffHunk": "@@ -40,11 +41,7 @@\n import tc.oc.pgm.api.region.Region;\n import tc.oc.pgm.flag.event.FlagCaptureEvent;\n import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n-import tc.oc.pgm.flag.state.BaseState;\n-import tc.oc.pgm.flag.state.Captured;\n-import tc.oc.pgm.flag.state.Completed;\n-import tc.oc.pgm.flag.state.Returned;\n-import tc.oc.pgm.flag.state.State;\n+import tc.oc.pgm.flag.state.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d906f1586ba0bab42a06158ce456245f65f4fc0"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNzIxNA==", "bodyText": "As you wish.", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467327214", "createdAt": "2020-08-07T23:32:30Z", "author": {"login": "jasoryeh"}, "path": "core/src/main/java/tc/oc/pgm/flag/Flag.java", "diffHunk": "@@ -40,11 +41,7 @@\n import tc.oc.pgm.api.region.Region;\n import tc.oc.pgm.flag.event.FlagCaptureEvent;\n import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n-import tc.oc.pgm.flag.state.BaseState;\n-import tc.oc.pgm.flag.state.Captured;\n-import tc.oc.pgm.flag.state.Completed;\n-import tc.oc.pgm.flag.state.Returned;\n-import tc.oc.pgm.flag.state.State;\n+import tc.oc.pgm.flag.state.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4NTE4NQ=="}, "originalCommit": {"oid": "9d906f1586ba0bab42a06158ce456245f65f4fc0"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzcwMjI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/PGMConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNToxMzowNlrOG84Bew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNToxMzowNlrOG84Bew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4NTYyNw==", "bodyText": "flagBeams", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r466485627", "createdAt": "2020-08-06T15:13:06Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/PGMConfig.java", "diffHunk": "@@ -67,6 +67,7 @@\n \n   // gameplay.*\n   private final boolean woolRefill;\n+  private final boolean globalLegacyFlagBeams;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d906f1586ba0bab42a06158ce456245f65f4fc0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTA2MTg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjo1MzozMVrOG9q3qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzoxMTowNlrOG9rHXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxODY5OQ==", "bodyText": "can both be final right?", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467318699", "createdAt": "2020-08-07T22:53:31Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -0,0 +1,263 @@\n+package tc.oc.pgm.flag;\n+\n+import static java.util.stream.IntStream.range;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.player.PlayerChangedWorldEvent;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchStartEvent;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.events.PlayerJoinMatchEvent;\n+import tc.oc.pgm.events.PlayerJoinPartyEvent;\n+import tc.oc.pgm.events.PlayerLeaveMatchEvent;\n+import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n+import tc.oc.pgm.flag.state.Carried;\n+import tc.oc.pgm.flag.state.Spawned;\n+import tc.oc.pgm.util.bukkit.ViaUtils;\n+import tc.oc.pgm.util.inventory.ItemBuilder;\n+import tc.oc.pgm.util.nms.NMSHacks;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class LegacyFlagBeamMatchModule implements MatchModule, Listener {\n+\n+  private static int UPDATE_DELAY = 0;\n+  private static int UPDATE_FREQUENCY = 50;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d906f1586ba0bab42a06158ce456245f65f4fc0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMjcxOA==", "bodyText": "Was going to play around with this a bit before, but I guess it can be.", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467322718", "createdAt": "2020-08-07T23:11:06Z", "author": {"login": "jasoryeh"}, "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -0,0 +1,263 @@\n+package tc.oc.pgm.flag;\n+\n+import static java.util.stream.IntStream.range;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.player.PlayerChangedWorldEvent;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchStartEvent;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.events.PlayerJoinMatchEvent;\n+import tc.oc.pgm.events.PlayerJoinPartyEvent;\n+import tc.oc.pgm.events.PlayerLeaveMatchEvent;\n+import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n+import tc.oc.pgm.flag.state.Carried;\n+import tc.oc.pgm.flag.state.Spawned;\n+import tc.oc.pgm.util.bukkit.ViaUtils;\n+import tc.oc.pgm.util.inventory.ItemBuilder;\n+import tc.oc.pgm.util.nms.NMSHacks;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class LegacyFlagBeamMatchModule implements MatchModule, Listener {\n+\n+  private static int UPDATE_DELAY = 0;\n+  private static int UPDATE_FREQUENCY = 50;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxODY5OQ=="}, "originalCommit": {"oid": "9d906f1586ba0bab42a06158ce456245f65f4fc0"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTA2MTk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/api/Modules.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjo1MzozNVrOG9q3uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzoxMzozOVrOG9rJbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxODcxMw==", "bodyText": "I think there is some typo here? \ud83e\udd14", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467318713", "createdAt": "2020-08-07T22:53:35Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/api/Modules.java", "diffHunk": "@@ -159,6 +160,9 @@ static void registerAll() {\n     register(StatsMatchModule.class, StatsMatchModule::new);\n     register(MapmakerMatchModule.class, MapmakerMatchModule::new);\n \n+    // Modules that depend help older player versions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d906f1586ba0bab42a06158ce456245f65f4fc0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMzI0Ng==", "bodyText": "\ud83e\udd14", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467323246", "createdAt": "2020-08-07T23:13:39Z", "author": {"login": "jasoryeh"}, "path": "core/src/main/java/tc/oc/pgm/api/Modules.java", "diffHunk": "@@ -159,6 +160,9 @@ static void registerAll() {\n     register(StatsMatchModule.class, StatsMatchModule::new);\n     register(MapmakerMatchModule.class, MapmakerMatchModule::new);\n \n+    // Modules that depend help older player versions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxODcxMw=="}, "originalCommit": {"oid": "9d906f1586ba0bab42a06158ce456245f65f4fc0"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTA3OTI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzowNDozOVrOG9rBhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzoxODo0MlrOG9rNsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMTIyMw==", "bodyText": "If I am understanding this correctly the carrying player can not see their own beam?", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467321223", "createdAt": "2020-08-07T23:04:39Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -0,0 +1,263 @@\n+package tc.oc.pgm.flag;\n+\n+import static java.util.stream.IntStream.range;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.player.PlayerChangedWorldEvent;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchStartEvent;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.events.PlayerJoinMatchEvent;\n+import tc.oc.pgm.events.PlayerJoinPartyEvent;\n+import tc.oc.pgm.events.PlayerLeaveMatchEvent;\n+import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n+import tc.oc.pgm.flag.state.Carried;\n+import tc.oc.pgm.flag.state.Spawned;\n+import tc.oc.pgm.util.bukkit.ViaUtils;\n+import tc.oc.pgm.util.inventory.ItemBuilder;\n+import tc.oc.pgm.util.nms.NMSHacks;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class LegacyFlagBeamMatchModule implements MatchModule, Listener {\n+\n+  private static int UPDATE_DELAY = 0;\n+  private static int UPDATE_FREQUENCY = 50;\n+\n+  private UpdateTask task;\n+  private final Match match;\n+  private final Map<MatchPlayer, Map<Flag, Beam>> beams;\n+\n+  public LegacyFlagBeamMatchModule(Match match) {\n+    this.match = match;\n+    this.beams = new HashMap<>();\n+  }\n+\n+  protected Stream<Flag> flags() {\n+    FlagMatchModule module = match.getModule(FlagMatchModule.class);\n+    return module == null ? Stream.empty() : module.getFlags().stream();\n+  }\n+\n+  protected void retrackFlag(Flag flag) {\n+    match.getParticipants().forEach(p -> retrackFlag(flag, p));\n+  }\n+\n+  protected void retrackFlag(Flag flag, MatchPlayer player) {\n+    untrackFlag(flag, player);\n+    trackFlag(flag, player);\n+  }\n+\n+  protected void trackFlag(Flag flag) {\n+    match.getParticipants().forEach(p -> trackFlag(flag, p));\n+  }\n+\n+  protected void trackFlag(Flag flag, MatchPlayer player) {\n+    Map<Flag, Beam> flags = beams.containsKey(player) ? beams.get(player) : new HashMap<>();\n+    if (flags.containsKey(flag) // beam duplication check\n+        || !flag.getDefinition().showBeam() // considers the flag definition's flag beam setting.\n+        || (ViaUtils.getProtocolVersion(player.getBukkit())\n+                > ViaUtils.VERSION_1_7 // version greater than 1.7 &\n+            && !PGM.get()\n+                .getConfiguration()\n+                .useLegacyFlagBeams())) { // we shouldn't show to >1.7 players\n+      return;\n+    }\n+\n+    flags.put(flag, new Beam(flag, player.getBukkit()));\n+\n+    beams.put(player, flags);\n+  }\n+\n+  protected void untrackFlag(Flag flag) {\n+    match.getParticipants().forEach(p -> untrackFlag(flag, p));\n+  }\n+\n+  protected void untrackFlag(Flag flag, MatchPlayer player) {\n+    if (beams.containsKey(player)) {\n+      Beam beam = beams.get(player).get(flag);\n+      if (beam != null) {\n+        beams.get(player).remove(flag).hide();\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void enable() {\n+    flags().filter(flag -> flag.getState() instanceof Spawned).forEach(this::trackFlag);\n+    this.task = new UpdateTask();\n+  }\n+\n+  @Override\n+  public void disable() {\n+    flags().forEach(this::untrackFlag);\n+    beams.clear();\n+    this.task.stop();\n+  }\n+\n+  // retrackFlags when players join a party so players are able to see the wool beams\n+  // player join match event doesn't work at times.\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onPlayerJoinParty(PlayerJoinPartyEvent event) {\n+    flags()\n+        .filter(flag -> flag.getState() instanceof Spawned)\n+        .forEach(flag -> retrackFlag(flag, event.getPlayer()));\n+  }\n+\n+  // retrackFlags when players switch worlds\n+  // player join match event doesn't work at times.\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onPlayerChangedWorld(PlayerChangedWorldEvent event) {\n+    try {\n+      flags()\n+          .filter(flag -> flag.getState() instanceof Spawned)\n+          .forEach(flag -> retrackFlag(flag, match.getParticipant(event.getPlayer())));\n+    } catch (NullPointerException e) {\n+      /* ignore */\n+    }\n+  }\n+\n+  // retrackFlags when match starts to ensure all players can see flag beams\n+  // player join match event doesn't work at times.\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onMatchStart(MatchStartEvent event) {\n+    flags().filter(flag -> flag.getState() instanceof Spawned).forEach(flag -> retrackFlag(flag));\n+  }\n+\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onPlayerJoinMatch(PlayerJoinMatchEvent event) {\n+    flags()\n+        .filter(flag -> flag.getState() instanceof Spawned)\n+        .forEach(flag -> trackFlag(flag, event.getPlayer()));\n+  }\n+\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onPlayerLeaveMatch(PlayerLeaveMatchEvent event) {\n+    flags()\n+        .filter(flag -> flag.getState() instanceof Spawned)\n+        .forEach(flag -> untrackFlag(flag, event.getPlayer()));\n+  }\n+\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onFlagStateChange(FlagStateChangeEvent event) {\n+    Flag flag = event.getFlag();\n+    untrackFlag(flag);\n+    if (event.getNewState() instanceof Spawned) {\n+      trackFlag(flag);\n+    }\n+  }\n+\n+  private class UpdateTask implements Runnable {\n+\n+    private final Future<?> task;\n+\n+    private UpdateTask() {\n+      this.task =\n+          match\n+              .getExecutor(MatchScope.RUNNING)\n+              .scheduleAtFixedRate(this, UPDATE_DELAY, UPDATE_FREQUENCY, TimeUnit.MILLISECONDS);\n+    }\n+\n+    public void stop() {\n+      this.task.cancel(true);\n+    }\n+\n+    @Override\n+    public void run() {\n+      ImmutableList.copyOf(beams.values()).forEach(flags -> flags.forEach((f, b) -> b.update()));\n+    }\n+  }\n+\n+  class Beam {\n+\n+    final Flag flag;\n+    final Player bukkit;\n+    final List<NMSHacks.FakeZombie> segments;\n+\n+    Beam(Flag flag, Player bukkit) {\n+      this.flag = flag;\n+      this.bukkit = bukkit;\n+      this.segments =\n+          range(0, 100) // ~100 blocks is the height which the particles appear to be reasonably\n+              // visible (similar amount to amount closest to the flag)\n+              .mapToObj(i -> new NMSHacks.FakeZombie(match.getWorld(), true, false))\n+              .collect(Collectors.toList());\n+      show();\n+    }\n+\n+    Optional<Player> carrier() {\n+      return Optional.ofNullable(\n+          flag.getState() instanceof Carried\n+              ? ((Carried) flag.getState()).getCarrier().getBukkit()\n+              : null);\n+    }\n+\n+    Optional<Location> location() {\n+      if (!flag.getLocation().isPresent()) {\n+        return Optional.empty();\n+      }\n+\n+      Location location = flag.getLocation().get().clone();\n+      location.setPitch(0);\n+      return Optional.of(location);\n+    }\n+\n+    ItemStack wool() {\n+      return new ItemBuilder()\n+          .material(Material.WOOL)\n+          .enchant(Enchantment.DURABILITY, 1)\n+          .color(flag.getDyeColor())\n+          .build();\n+    }\n+\n+    void show() {\n+      if (carrier().map(carrier -> carrier.equals(bukkit)).orElse(false)) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d906f1586ba0bab42a06158ce456245f65f4fc0"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNDMzOQ==", "bodyText": "I believe if the flag can be seen by the carrier then there might be a zombie in them which can block the vision.", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467324339", "createdAt": "2020-08-07T23:18:42Z", "author": {"login": "jasoryeh"}, "path": "core/src/main/java/tc/oc/pgm/flag/LegacyFlagBeamMatchModule.java", "diffHunk": "@@ -0,0 +1,263 @@\n+package tc.oc.pgm.flag;\n+\n+import static java.util.stream.IntStream.range;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.player.PlayerChangedWorldEvent;\n+import org.bukkit.inventory.ItemStack;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchStartEvent;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.events.PlayerJoinMatchEvent;\n+import tc.oc.pgm.events.PlayerJoinPartyEvent;\n+import tc.oc.pgm.events.PlayerLeaveMatchEvent;\n+import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n+import tc.oc.pgm.flag.state.Carried;\n+import tc.oc.pgm.flag.state.Spawned;\n+import tc.oc.pgm.util.bukkit.ViaUtils;\n+import tc.oc.pgm.util.inventory.ItemBuilder;\n+import tc.oc.pgm.util.nms.NMSHacks;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class LegacyFlagBeamMatchModule implements MatchModule, Listener {\n+\n+  private static int UPDATE_DELAY = 0;\n+  private static int UPDATE_FREQUENCY = 50;\n+\n+  private UpdateTask task;\n+  private final Match match;\n+  private final Map<MatchPlayer, Map<Flag, Beam>> beams;\n+\n+  public LegacyFlagBeamMatchModule(Match match) {\n+    this.match = match;\n+    this.beams = new HashMap<>();\n+  }\n+\n+  protected Stream<Flag> flags() {\n+    FlagMatchModule module = match.getModule(FlagMatchModule.class);\n+    return module == null ? Stream.empty() : module.getFlags().stream();\n+  }\n+\n+  protected void retrackFlag(Flag flag) {\n+    match.getParticipants().forEach(p -> retrackFlag(flag, p));\n+  }\n+\n+  protected void retrackFlag(Flag flag, MatchPlayer player) {\n+    untrackFlag(flag, player);\n+    trackFlag(flag, player);\n+  }\n+\n+  protected void trackFlag(Flag flag) {\n+    match.getParticipants().forEach(p -> trackFlag(flag, p));\n+  }\n+\n+  protected void trackFlag(Flag flag, MatchPlayer player) {\n+    Map<Flag, Beam> flags = beams.containsKey(player) ? beams.get(player) : new HashMap<>();\n+    if (flags.containsKey(flag) // beam duplication check\n+        || !flag.getDefinition().showBeam() // considers the flag definition's flag beam setting.\n+        || (ViaUtils.getProtocolVersion(player.getBukkit())\n+                > ViaUtils.VERSION_1_7 // version greater than 1.7 &\n+            && !PGM.get()\n+                .getConfiguration()\n+                .useLegacyFlagBeams())) { // we shouldn't show to >1.7 players\n+      return;\n+    }\n+\n+    flags.put(flag, new Beam(flag, player.getBukkit()));\n+\n+    beams.put(player, flags);\n+  }\n+\n+  protected void untrackFlag(Flag flag) {\n+    match.getParticipants().forEach(p -> untrackFlag(flag, p));\n+  }\n+\n+  protected void untrackFlag(Flag flag, MatchPlayer player) {\n+    if (beams.containsKey(player)) {\n+      Beam beam = beams.get(player).get(flag);\n+      if (beam != null) {\n+        beams.get(player).remove(flag).hide();\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void enable() {\n+    flags().filter(flag -> flag.getState() instanceof Spawned).forEach(this::trackFlag);\n+    this.task = new UpdateTask();\n+  }\n+\n+  @Override\n+  public void disable() {\n+    flags().forEach(this::untrackFlag);\n+    beams.clear();\n+    this.task.stop();\n+  }\n+\n+  // retrackFlags when players join a party so players are able to see the wool beams\n+  // player join match event doesn't work at times.\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onPlayerJoinParty(PlayerJoinPartyEvent event) {\n+    flags()\n+        .filter(flag -> flag.getState() instanceof Spawned)\n+        .forEach(flag -> retrackFlag(flag, event.getPlayer()));\n+  }\n+\n+  // retrackFlags when players switch worlds\n+  // player join match event doesn't work at times.\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onPlayerChangedWorld(PlayerChangedWorldEvent event) {\n+    try {\n+      flags()\n+          .filter(flag -> flag.getState() instanceof Spawned)\n+          .forEach(flag -> retrackFlag(flag, match.getParticipant(event.getPlayer())));\n+    } catch (NullPointerException e) {\n+      /* ignore */\n+    }\n+  }\n+\n+  // retrackFlags when match starts to ensure all players can see flag beams\n+  // player join match event doesn't work at times.\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onMatchStart(MatchStartEvent event) {\n+    flags().filter(flag -> flag.getState() instanceof Spawned).forEach(flag -> retrackFlag(flag));\n+  }\n+\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onPlayerJoinMatch(PlayerJoinMatchEvent event) {\n+    flags()\n+        .filter(flag -> flag.getState() instanceof Spawned)\n+        .forEach(flag -> trackFlag(flag, event.getPlayer()));\n+  }\n+\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onPlayerLeaveMatch(PlayerLeaveMatchEvent event) {\n+    flags()\n+        .filter(flag -> flag.getState() instanceof Spawned)\n+        .forEach(flag -> untrackFlag(flag, event.getPlayer()));\n+  }\n+\n+  @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)\n+  public void onFlagStateChange(FlagStateChangeEvent event) {\n+    Flag flag = event.getFlag();\n+    untrackFlag(flag);\n+    if (event.getNewState() instanceof Spawned) {\n+      trackFlag(flag);\n+    }\n+  }\n+\n+  private class UpdateTask implements Runnable {\n+\n+    private final Future<?> task;\n+\n+    private UpdateTask() {\n+      this.task =\n+          match\n+              .getExecutor(MatchScope.RUNNING)\n+              .scheduleAtFixedRate(this, UPDATE_DELAY, UPDATE_FREQUENCY, TimeUnit.MILLISECONDS);\n+    }\n+\n+    public void stop() {\n+      this.task.cancel(true);\n+    }\n+\n+    @Override\n+    public void run() {\n+      ImmutableList.copyOf(beams.values()).forEach(flags -> flags.forEach((f, b) -> b.update()));\n+    }\n+  }\n+\n+  class Beam {\n+\n+    final Flag flag;\n+    final Player bukkit;\n+    final List<NMSHacks.FakeZombie> segments;\n+\n+    Beam(Flag flag, Player bukkit) {\n+      this.flag = flag;\n+      this.bukkit = bukkit;\n+      this.segments =\n+          range(0, 100) // ~100 blocks is the height which the particles appear to be reasonably\n+              // visible (similar amount to amount closest to the flag)\n+              .mapToObj(i -> new NMSHacks.FakeZombie(match.getWorld(), true, false))\n+              .collect(Collectors.toList());\n+      show();\n+    }\n+\n+    Optional<Player> carrier() {\n+      return Optional.ofNullable(\n+          flag.getState() instanceof Carried\n+              ? ((Carried) flag.getState()).getCarrier().getBukkit()\n+              : null);\n+    }\n+\n+    Optional<Location> location() {\n+      if (!flag.getLocation().isPresent()) {\n+        return Optional.empty();\n+      }\n+\n+      Location location = flag.getLocation().get().clone();\n+      location.setPitch(0);\n+      return Optional.of(location);\n+    }\n+\n+    ItemStack wool() {\n+      return new ItemBuilder()\n+          .material(Material.WOOL)\n+          .enchant(Enchantment.DURABILITY, 1)\n+          .color(flag.getDyeColor())\n+          .build();\n+    }\n+\n+    void show() {\n+      if (carrier().map(carrier -> carrier.equals(bukkit)).orElse(false)) return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMTIyMw=="}, "originalCommit": {"oid": "9d906f1586ba0bab42a06158ce456245f65f4fc0"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTA4MDI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/config.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzowNTowNFrOG9rCCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzoxOToyMlrOG9rOLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMTM1Mg==", "bodyText": "Very spacious", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467321352", "createdAt": "2020-08-07T23:05:04Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/resources/config.yml", "diffHunk": "@@ -63,7 +63,7 @@ join:\n \n # Changes various gameplay mechanics.\n gameplay:\n-  refill-wool: true # Should wool in wool rooms be automatically refilled?\n+  refill-wool: true              # Should wool in wool rooms be automatically refilled?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d906f1586ba0bab42a06158ce456245f65f4fc0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNDQ2MQ==", "bodyText": "Don't remember doing that but oops", "url": "https://github.com/PGMDev/PGM/pull/594#discussion_r467324461", "createdAt": "2020-08-07T23:19:22Z", "author": {"login": "jasoryeh"}, "path": "core/src/main/resources/config.yml", "diffHunk": "@@ -63,7 +63,7 @@ join:\n \n # Changes various gameplay mechanics.\n gameplay:\n-  refill-wool: true # Should wool in wool rooms be automatically refilled?\n+  refill-wool: true              # Should wool in wool rooms be automatically refilled?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMTM1Mg=="}, "originalCommit": {"oid": "9d906f1586ba0bab42a06158ce456245f65f4fc0"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1025, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}