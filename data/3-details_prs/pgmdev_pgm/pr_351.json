{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMjE5Nzc4", "number": 351, "title": "Reintroduce fireworks ", "bodyText": "Reintroduce Fireworks \ud83c\udf86\nI noticed recently when testing that the iconic post match fireworks were not apart of this version of PGM. So after taking a look through the ProjectAres repo, I discovered that we\u2019re missing all of the firework features. Personally I really enjoy fireworks being launched at the end of a match or when an objective is completed. So this PR uses a slightly modified version of the code found here to reintroduce those features back.\nChanges:\n\nAdds post-match victory fireworks\n\n(Fireworks shoot off from location of winning team at the match end)\n\n\nAdds objective fireworks\n\n(Fireworks shoot off for various objectives, such as placing a wool or capturing a control point)\n\n\n\nI found it difficult to get a screenshot of these changes in action. If someone really wants to see it I\u2019ll see what I can do.\nIf anyone has suggestions on additional places where fireworks would be useful let me know.\nSigned-off-by: applenick applenick@users.noreply.github.com", "createdAt": "2020-03-02T07:31:41Z", "url": "https://github.com/PGMDev/PGM/pull/351", "merged": true, "mergeCommit": {"oid": "020e5125e781e71295a1ed1010cd6173f17d5aa3"}, "closed": true, "closedAt": "2020-03-14T18:42:29Z", "author": {"login": "applenick"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJxACBgFqTM2NzM3MjQ1MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNpaVPAFqTM3NDc0NTc4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzcyNDUw", "url": "https://github.com/PGMDev/PGM/pull/351#pullrequestreview-367372450", "createdAt": "2020-03-02T17:09:31Z", "commit": {"oid": "8fe6feab617a46d75195e3bf2e3a99f46071d6a2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzowOTozMlrOFwnw4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzoxNTo0NVrOFwn9uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNzQ1Nw==", "bodyText": "It never made any sense to make these configurable, just make these static variables.", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r386527457", "createdAt": "2020-03-02T17:09:32Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/Config.java", "diffHunk": "@@ -478,4 +478,39 @@ public static boolean isAppealVisible() {\n       return getAppealMessage().length() > 0;\n     }\n   }\n+\n+  public static class Fireworks {\n+\n+    public static class Postmatch {\n+      public static boolean enabled() {\n+        return getConfiguration().getBoolean(\"fireworks.post-match.enabled\", false);\n+      }\n+\n+      public static int number() {\n+        return Math.max(1, getConfiguration().getInt(\"fireworks.post-match.number\", 5));\n+      }\n+\n+      public static int delay() {\n+        return Math.max(0, getConfiguration().getInt(\"fireworks.post-match.delay\", 40));\n+      }\n+\n+      public static int frequency() {\n+        return Math.max(1, getConfiguration().getInt(\"fireworks.post-match.frequency\", 40));\n+      }\n+\n+      public static int iterations() {\n+        return Math.max(1, getConfiguration().getInt(\"fireworks.post-match.iterations\", 15));\n+      }\n+\n+      public static int power() {\n+        return Math.max(0, getConfiguration().getInt(\"fireworks.post-match.power\", 2));\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe6feab617a46d75195e3bf2e3a99f46071d6a2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNzk5OA==", "bodyText": "Simple: fireworks.enabled", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r386527998", "createdAt": "2020-03-02T17:10:32Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/Config.java", "diffHunk": "@@ -478,4 +478,39 @@ public static boolean isAppealVisible() {\n       return getAppealMessage().length() > 0;\n     }\n   }\n+\n+  public static class Fireworks {\n+\n+    public static class Postmatch {\n+      public static boolean enabled() {\n+        return getConfiguration().getBoolean(\"fireworks.post-match.enabled\", false);\n+      }\n+\n+      public static int number() {\n+        return Math.max(1, getConfiguration().getInt(\"fireworks.post-match.number\", 5));\n+      }\n+\n+      public static int delay() {\n+        return Math.max(0, getConfiguration().getInt(\"fireworks.post-match.delay\", 40));\n+      }\n+\n+      public static int frequency() {\n+        return Math.max(1, getConfiguration().getInt(\"fireworks.post-match.frequency\", 40));\n+      }\n+\n+      public static int iterations() {\n+        return Math.max(1, getConfiguration().getInt(\"fireworks.post-match.iterations\", 15));\n+      }\n+\n+      public static int power() {\n+        return Math.max(0, getConfiguration().getInt(\"fireworks.post-match.power\", 2));\n+      }\n+    }\n+\n+    public static class Goals {\n+      public static boolean enabled() {\n+        return getConfiguration().getBoolean(\"fireworks.goals.enabled\", false);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe6feab617a46d75195e3bf2e3a99f46071d6a2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyODE5Ng==", "bodyText": "Can be moved to the MatchModule", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r386528196", "createdAt": "2020-03-02T17:10:57Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/FireworkUtil.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.base.Preconditions;\n+import javax.annotation.Nonnull;\n+import org.bukkit.Bukkit;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Firework;\n+import org.bukkit.inventory.meta.FireworkMeta;\n+\n+public class FireworkUtil {\n+\n+  public static @Nonnull Firework spawnFirework(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe6feab617a46d75195e3bf2e3a99f46071d6a2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyODUxNA==", "bodyText": "Don't we have some Locations or LocationUtil class?", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r386528514", "createdAt": "2020-03-02T17:11:31Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/FireworkUtil.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.base.Preconditions;\n+import javax.annotation.Nonnull;\n+import org.bukkit.Bukkit;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Firework;\n+import org.bukkit.inventory.meta.FireworkMeta;\n+\n+public class FireworkUtil {\n+\n+  public static @Nonnull Firework spawnFirework(\n+      @Nonnull Location location, @Nonnull FireworkEffect effect, int power) {\n+    Preconditions.checkNotNull(location, \"location\");\n+    Preconditions.checkNotNull(effect, \"firework effect\");\n+    Preconditions.checkArgument(power >= 0, \"power must be positive\");\n+\n+    FireworkMeta meta = (FireworkMeta) Bukkit.getItemFactory().getItemMeta(Material.FIREWORK);\n+    meta.setPower(power);\n+    meta.addEffect(effect);\n+\n+    Firework firework = (Firework) location.getWorld().spawnEntity(location, EntityType.FIREWORK);\n+    firework.setFireworkMeta(meta);\n+\n+    return firework;\n+  }\n+\n+  public static @Nonnull Location getOpenSpaceAbove(@Nonnull Location location) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe6feab617a46d75195e3bf2e3a99f46071d6a2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyOTY0Nw==", "bodyText": "Integrate this into a FireworksMatchModule implements MatchModule, Listener", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r386529647", "createdAt": "2020-03-02T17:13:33Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/ObjectivesFireworkListener.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package tc.oc.pgm.fireworks;\n+\n+import org.bukkit.Color;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.FireworkEffect.Type;\n+import org.bukkit.Location;\n+import org.bukkit.World;\n+import org.bukkit.block.Block;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import tc.oc.pgm.Config;\n+import tc.oc.pgm.controlpoint.events.ControllerChangeEvent;\n+import tc.oc.pgm.core.CoreLeakEvent;\n+import tc.oc.pgm.destroyable.DestroyableDestroyedEvent;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.regions.Bounds;\n+import tc.oc.pgm.regions.Region;\n+import tc.oc.pgm.wool.PlayerWoolPlaceEvent;\n+import tc.oc.util.bukkit.BukkitUtils;\n+import tc.oc.util.bukkit.block.BlockVectors;\n+\n+public class ObjectivesFireworkListener implements Listener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe6feab617a46d75195e3bf2e3a99f46071d6a2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyOTgzMA==", "bodyText": "There can just be 1 fireworks MatchModule, handle both event and post-match", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r386529830", "createdAt": "2020-03-02T17:13:56Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/PostMatchFireworkMatchModule.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.bukkit.Color;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.FireworkEffect.Type;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.scheduler.BukkitTask;\n+import tc.oc.pgm.Config;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.util.bukkit.BukkitUtils;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class PostMatchFireworkMatchModule implements MatchModule, Listener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe6feab617a46d75195e3bf2e3a99f46071d6a2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzMDI0Nw==", "bodyText": "fireworks:\n     enabled: true", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r386530247", "createdAt": "2020-03-02T17:14:48Z", "author": {"login": "Electroid"}, "path": "core/src/main/resources/config.yml", "diffHunk": "@@ -120,3 +120,16 @@ moderation:\n     \n   # Last message line shown on ban/temp-ban kick screen\n   appeal-msg: ''\n+  \n+fireworks:\n+  # Post-match fireworks fire above the winners of the current match\n+  post-match:\n+    enabled: true\n+    number: 5\n+    delay: 40 # ticks\n+    frequency: 40 # ticks\n+    iterations: 15\n+    power: 2\n+  # Goals spawn fireworks when objectives are completed\n+  goals:\n+    enabled: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe6feab617a46d75195e3bf2e3a99f46071d6a2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzMDQ3OA==", "bodyText": "Don't use BukkitTask, instead Match#getScheduler(MatchScope.LOADED)", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r386530478", "createdAt": "2020-03-02T17:15:15Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/PostMatchFireworkMatchModule.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.bukkit.Color;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.FireworkEffect.Type;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.scheduler.BukkitTask;\n+import tc.oc.pgm.Config;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.util.bukkit.BukkitUtils;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class PostMatchFireworkMatchModule implements MatchModule, Listener {\n+\n+  private BukkitTask task;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe6feab617a46d75195e3bf2e3a99f46071d6a2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzMDc0Nw==", "bodyText": "Seems like you do already, so no need to store the BukkitTask, it will get canceled automatically.", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r386530747", "createdAt": "2020-03-02T17:15:45Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/PostMatchFireworkMatchModule.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.bukkit.Color;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.FireworkEffect.Type;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.scheduler.BukkitTask;\n+import tc.oc.pgm.Config;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.util.bukkit.BukkitUtils;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class PostMatchFireworkMatchModule implements MatchModule, Listener {\n+\n+  private BukkitTask task;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzMDQ3OA=="}, "originalCommit": {"oid": "8fe6feab617a46d75195e3bf2e3a99f46071d6a2"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMzU3NDEy", "url": "https://github.com/PGMDev/PGM/pull/351#pullrequestreview-370357412", "createdAt": "2020-03-06T14:24:30Z", "commit": {"oid": "0cb4c0a44e1f847fd59b6e24a27288dbd8fe0030"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoyNDozMFrOFy6b_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoyODowMlrOFy6kAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMDU1OA==", "bodyText": "Should be static, and follow the static variable naming rules: ITERATION_COUNT", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r388930558", "createdAt": "2020-03-06T14:24:30Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/FireworkMatchModule.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nonnull;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Color;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.FireworkEffect.Type;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.World;\n+import org.bukkit.block.Block;\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Firework;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.inventory.meta.FireworkMeta;\n+import tc.oc.pgm.Config;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.controlpoint.events.ControllerChangeEvent;\n+import tc.oc.pgm.core.CoreLeakEvent;\n+import tc.oc.pgm.destroyable.DestroyableDestroyedEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.regions.Bounds;\n+import tc.oc.pgm.regions.Region;\n+import tc.oc.pgm.wool.PlayerWoolPlaceEvent;\n+import tc.oc.util.bukkit.BukkitUtils;\n+import tc.oc.util.bukkit.block.BlockVectors;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FireworkMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+\n+  private final boolean postEnabled = Config.Fireworks.postMatchEnabled();\n+  private final boolean goalsEnabled = Config.Fireworks.goalsEnabled();\n+  private final int number = 5;\n+  private final int delay = 40;\n+  private final int frequency = 40;\n+  private final int iterationCount = 15;\n+  private final int power = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb4c0a44e1f847fd59b6e24a27288dbd8fe0030"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMTEzOQ==", "bodyText": "What are these magic numbers? They should probably be static variables too.", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r388931139", "createdAt": "2020-03-06T14:25:33Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/FireworkMatchModule.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nonnull;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Color;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.FireworkEffect.Type;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.World;\n+import org.bukkit.block.Block;\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Firework;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.inventory.meta.FireworkMeta;\n+import tc.oc.pgm.Config;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.controlpoint.events.ControllerChangeEvent;\n+import tc.oc.pgm.core.CoreLeakEvent;\n+import tc.oc.pgm.destroyable.DestroyableDestroyedEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.regions.Bounds;\n+import tc.oc.pgm.regions.Region;\n+import tc.oc.pgm.wool.PlayerWoolPlaceEvent;\n+import tc.oc.util.bukkit.BukkitUtils;\n+import tc.oc.util.bukkit.block.BlockVectors;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FireworkMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+\n+  private final boolean postEnabled = Config.Fireworks.postMatchEnabled();\n+  private final boolean goalsEnabled = Config.Fireworks.goalsEnabled();\n+  private final int number = 5;\n+  private final int delay = 40;\n+  private final int frequency = 40;\n+  private final int iterationCount = 15;\n+  private final int power = 2;\n+\n+  public FireworkMatchModule(Match match) {\n+    this.match = match;\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onMatchEnd(final MatchFinishEvent event) {\n+    if (!postEnabled) return;\n+    match\n+        .getScheduler(MatchScope.LOADED)\n+        .runTaskTimer(delay, frequency, new FireworkRunner(event.getWinners()));\n+  }\n+\n+  public static List<FireworkEffect.Type> AVAILABLE_TYPES =\n+      ImmutableList.<FireworkEffect.Type>builder()\n+          .add(Type.BALL)\n+          .add(Type.BALL_LARGE)\n+          .add(Type.BURST)\n+          .add(Type.STAR)\n+          .build();\n+\n+  public class FireworkRunner implements Runnable {\n+    private final Set<Color> colors;\n+    private final Collection<Competitor> winners;\n+    private int iterations = 0;\n+\n+    public FireworkRunner(Collection<Competitor> winners) {\n+      this.winners = winners;\n+      this.colors =\n+          winners.stream()\n+              .map(winner -> BukkitUtils.colorOf(winner.getColor()))\n+              .collect(Collectors.toSet());\n+    }\n+\n+    @Override\n+    public void run() {\n+      if (this.iterations < iterationCount) {\n+        // Build this list fresh every time, because MatchPlayers can unload, but Competitors can't.\n+        final List<MatchPlayer> players =\n+            winners.stream().flatMap(c -> c.getPlayers().stream()).collect(Collectors.toList());\n+        Collections.shuffle(players);\n+\n+        for (int i = 0; i < players.size() && i < number; i++) {\n+          MatchPlayer player = players.get(i);\n+\n+          Type type = AVAILABLE_TYPES.get(match.getRandom().nextInt(AVAILABLE_TYPES.size()));\n+\n+          FireworkEffect effect =\n+              FireworkEffect.builder()\n+                  .with(type)\n+                  .withFlicker()\n+                  .withColor(this.colors)\n+                  .withFade(Color.BLACK)\n+                  .build();\n+\n+          spawnFirework(player.getBukkit().getLocation(), effect, power);\n+        }\n+      }\n+      this.iterations++;\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onWoolPlace(final PlayerWoolPlaceEvent event) {\n+    if (goalsEnabled && event.getWool().isVisible()) {\n+      this.spawnFireworkDisplay(\n+          BlockVectors.center(event.getBlock()), event.getWool().getDyeColor().getColor(), 6, 2, 2);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onCoreLeak(final CoreLeakEvent event) {\n+    if (goalsEnabled && event.getCore().isVisible()) {\n+      this.spawnFireworkDisplay(\n+          event.getMatch().getWorld(),\n+          event.getCore().getCasingRegion(),\n+          event.getCore().getColor(),\n+          8,\n+          1.5,\n+          2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb4c0a44e1f847fd59b6e24a27288dbd8fe0030"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMTI0OA==", "bodyText": "Magic numbers.", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r388931248", "createdAt": "2020-03-06T14:25:43Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/FireworkMatchModule.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nonnull;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Color;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.FireworkEffect.Type;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.World;\n+import org.bukkit.block.Block;\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Firework;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.inventory.meta.FireworkMeta;\n+import tc.oc.pgm.Config;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.controlpoint.events.ControllerChangeEvent;\n+import tc.oc.pgm.core.CoreLeakEvent;\n+import tc.oc.pgm.destroyable.DestroyableDestroyedEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.regions.Bounds;\n+import tc.oc.pgm.regions.Region;\n+import tc.oc.pgm.wool.PlayerWoolPlaceEvent;\n+import tc.oc.util.bukkit.BukkitUtils;\n+import tc.oc.util.bukkit.block.BlockVectors;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FireworkMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+\n+  private final boolean postEnabled = Config.Fireworks.postMatchEnabled();\n+  private final boolean goalsEnabled = Config.Fireworks.goalsEnabled();\n+  private final int number = 5;\n+  private final int delay = 40;\n+  private final int frequency = 40;\n+  private final int iterationCount = 15;\n+  private final int power = 2;\n+\n+  public FireworkMatchModule(Match match) {\n+    this.match = match;\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onMatchEnd(final MatchFinishEvent event) {\n+    if (!postEnabled) return;\n+    match\n+        .getScheduler(MatchScope.LOADED)\n+        .runTaskTimer(delay, frequency, new FireworkRunner(event.getWinners()));\n+  }\n+\n+  public static List<FireworkEffect.Type> AVAILABLE_TYPES =\n+      ImmutableList.<FireworkEffect.Type>builder()\n+          .add(Type.BALL)\n+          .add(Type.BALL_LARGE)\n+          .add(Type.BURST)\n+          .add(Type.STAR)\n+          .build();\n+\n+  public class FireworkRunner implements Runnable {\n+    private final Set<Color> colors;\n+    private final Collection<Competitor> winners;\n+    private int iterations = 0;\n+\n+    public FireworkRunner(Collection<Competitor> winners) {\n+      this.winners = winners;\n+      this.colors =\n+          winners.stream()\n+              .map(winner -> BukkitUtils.colorOf(winner.getColor()))\n+              .collect(Collectors.toSet());\n+    }\n+\n+    @Override\n+    public void run() {\n+      if (this.iterations < iterationCount) {\n+        // Build this list fresh every time, because MatchPlayers can unload, but Competitors can't.\n+        final List<MatchPlayer> players =\n+            winners.stream().flatMap(c -> c.getPlayers().stream()).collect(Collectors.toList());\n+        Collections.shuffle(players);\n+\n+        for (int i = 0; i < players.size() && i < number; i++) {\n+          MatchPlayer player = players.get(i);\n+\n+          Type type = AVAILABLE_TYPES.get(match.getRandom().nextInt(AVAILABLE_TYPES.size()));\n+\n+          FireworkEffect effect =\n+              FireworkEffect.builder()\n+                  .with(type)\n+                  .withFlicker()\n+                  .withColor(this.colors)\n+                  .withFade(Color.BLACK)\n+                  .build();\n+\n+          spawnFirework(player.getBukkit().getLocation(), effect, power);\n+        }\n+      }\n+      this.iterations++;\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onWoolPlace(final PlayerWoolPlaceEvent event) {\n+    if (goalsEnabled && event.getWool().isVisible()) {\n+      this.spawnFireworkDisplay(\n+          BlockVectors.center(event.getBlock()), event.getWool().getDyeColor().getColor(), 6, 2, 2);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onCoreLeak(final CoreLeakEvent event) {\n+    if (goalsEnabled && event.getCore().isVisible()) {\n+      this.spawnFireworkDisplay(\n+          event.getMatch().getWorld(),\n+          event.getCore().getCasingRegion(),\n+          event.getCore().getColor(),\n+          8,\n+          1.5,\n+          2);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onDestroyableBreak(final DestroyableDestroyedEvent event) {\n+    if (goalsEnabled && event.getDestroyable().isVisible()) {\n+      this.spawnFireworkDisplay(\n+          event.getMatch().getWorld(),\n+          event.getDestroyable().getBlockRegion(),\n+          event.getDestroyable().getColor(),\n+          4,\n+          3,\n+          2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb4c0a44e1f847fd59b6e24a27288dbd8fe0030"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMTY1Ng==", "bodyText": "We don't use @Nonnull, only @Nullable, so they can be removed here.", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r388931656", "createdAt": "2020-03-06T14:26:22Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/FireworkMatchModule.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nonnull;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Color;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.FireworkEffect.Type;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.World;\n+import org.bukkit.block.Block;\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Firework;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.inventory.meta.FireworkMeta;\n+import tc.oc.pgm.Config;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.controlpoint.events.ControllerChangeEvent;\n+import tc.oc.pgm.core.CoreLeakEvent;\n+import tc.oc.pgm.destroyable.DestroyableDestroyedEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.regions.Bounds;\n+import tc.oc.pgm.regions.Region;\n+import tc.oc.pgm.wool.PlayerWoolPlaceEvent;\n+import tc.oc.util.bukkit.BukkitUtils;\n+import tc.oc.util.bukkit.block.BlockVectors;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FireworkMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+\n+  private final boolean postEnabled = Config.Fireworks.postMatchEnabled();\n+  private final boolean goalsEnabled = Config.Fireworks.goalsEnabled();\n+  private final int number = 5;\n+  private final int delay = 40;\n+  private final int frequency = 40;\n+  private final int iterationCount = 15;\n+  private final int power = 2;\n+\n+  public FireworkMatchModule(Match match) {\n+    this.match = match;\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onMatchEnd(final MatchFinishEvent event) {\n+    if (!postEnabled) return;\n+    match\n+        .getScheduler(MatchScope.LOADED)\n+        .runTaskTimer(delay, frequency, new FireworkRunner(event.getWinners()));\n+  }\n+\n+  public static List<FireworkEffect.Type> AVAILABLE_TYPES =\n+      ImmutableList.<FireworkEffect.Type>builder()\n+          .add(Type.BALL)\n+          .add(Type.BALL_LARGE)\n+          .add(Type.BURST)\n+          .add(Type.STAR)\n+          .build();\n+\n+  public class FireworkRunner implements Runnable {\n+    private final Set<Color> colors;\n+    private final Collection<Competitor> winners;\n+    private int iterations = 0;\n+\n+    public FireworkRunner(Collection<Competitor> winners) {\n+      this.winners = winners;\n+      this.colors =\n+          winners.stream()\n+              .map(winner -> BukkitUtils.colorOf(winner.getColor()))\n+              .collect(Collectors.toSet());\n+    }\n+\n+    @Override\n+    public void run() {\n+      if (this.iterations < iterationCount) {\n+        // Build this list fresh every time, because MatchPlayers can unload, but Competitors can't.\n+        final List<MatchPlayer> players =\n+            winners.stream().flatMap(c -> c.getPlayers().stream()).collect(Collectors.toList());\n+        Collections.shuffle(players);\n+\n+        for (int i = 0; i < players.size() && i < number; i++) {\n+          MatchPlayer player = players.get(i);\n+\n+          Type type = AVAILABLE_TYPES.get(match.getRandom().nextInt(AVAILABLE_TYPES.size()));\n+\n+          FireworkEffect effect =\n+              FireworkEffect.builder()\n+                  .with(type)\n+                  .withFlicker()\n+                  .withColor(this.colors)\n+                  .withFade(Color.BLACK)\n+                  .build();\n+\n+          spawnFirework(player.getBukkit().getLocation(), effect, power);\n+        }\n+      }\n+      this.iterations++;\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onWoolPlace(final PlayerWoolPlaceEvent event) {\n+    if (goalsEnabled && event.getWool().isVisible()) {\n+      this.spawnFireworkDisplay(\n+          BlockVectors.center(event.getBlock()), event.getWool().getDyeColor().getColor(), 6, 2, 2);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onCoreLeak(final CoreLeakEvent event) {\n+    if (goalsEnabled && event.getCore().isVisible()) {\n+      this.spawnFireworkDisplay(\n+          event.getMatch().getWorld(),\n+          event.getCore().getCasingRegion(),\n+          event.getCore().getColor(),\n+          8,\n+          1.5,\n+          2);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onDestroyableBreak(final DestroyableDestroyedEvent event) {\n+    if (goalsEnabled && event.getDestroyable().isVisible()) {\n+      this.spawnFireworkDisplay(\n+          event.getMatch().getWorld(),\n+          event.getDestroyable().getBlockRegion(),\n+          event.getDestroyable().getColor(),\n+          4,\n+          3,\n+          2);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onHillCapture(final ControllerChangeEvent event) {\n+    if (goalsEnabled && event.getControlPoint().isVisible() && event.getNewController() != null) {\n+      this.spawnFireworkDisplay(\n+          event.getMatch().getWorld(),\n+          event.getControlPoint().getCaptureRegion(),\n+          BukkitUtils.colorOf(event.getNewController().getColor()),\n+          8,\n+          1,\n+          2);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onFlagCapture(final FlagCaptureEvent event) {\n+    if (goalsEnabled && event.getGoal().isVisible()) {\n+      this.spawnFireworkDisplay(\n+          event.getMatch().getWorld(),\n+          event.getNet().getRegion(),\n+          event.getGoal().getDyeColor().getColor(),\n+          6,\n+          1,\n+          2);\n+    }\n+  }\n+\n+  public void spawnFireworkDisplay(\n+      Location center, Color color, int count, double radius, int power) {\n+    FireworkEffect effect =\n+        FireworkEffect.builder()\n+            .with(Type.BURST)\n+            .withFlicker()\n+            .withColor(color)\n+            .withFade(Color.BLACK)\n+            .build();\n+\n+    for (int i = 0; i < count; i++) {\n+      double angle = 2 * Math.PI / count * i;\n+      double dx = radius * Math.cos(angle);\n+      double dz = radius * Math.sin(angle);\n+      Location baseLocation = center.clone().add(dx, 0, dz);\n+\n+      Block block = baseLocation.getBlock();\n+      if (block == null || !block.getType().isOccluding()) {\n+        spawnFirework(getOpenSpaceAbove(baseLocation), effect, power);\n+      }\n+    }\n+  }\n+\n+  public void spawnFireworkDisplay(\n+      World world, Region region, Color color, int count, double radiusMultiplier, int power) {\n+    final Bounds bound = region.getBounds();\n+    final double radius = bound.getMax().subtract(bound.getMin()).multiply(0.5).length();\n+    final Location center = bound.getMin().getMidpoint(bound.getMax()).toLocation(world);\n+    this.spawnFireworkDisplay(center, color, count, radiusMultiplier * radius, power);\n+  }\n+\n+  public static @Nonnull Firework spawnFirework(\n+      @Nonnull Location location, @Nonnull FireworkEffect effect, int power) {\n+    Preconditions.checkNotNull(location, \"location\");\n+    Preconditions.checkNotNull(effect, \"firework effect\");\n+    Preconditions.checkArgument(power >= 0, \"power must be positive\");\n+\n+    FireworkMeta meta = (FireworkMeta) Bukkit.getItemFactory().getItemMeta(Material.FIREWORK);\n+    meta.setPower(power);\n+    meta.addEffect(effect);\n+\n+    Firework firework = (Firework) location.getWorld().spawnEntity(location, EntityType.FIREWORK);\n+    firework.setFireworkMeta(meta);\n+\n+    return firework;\n+  }\n+\n+  public static @Nonnull Location getOpenSpaceAbove(@Nonnull Location location) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb4c0a44e1f847fd59b6e24a27288dbd8fe0030"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjIyNQ==", "bodyText": "Also, why do we need static numbers? Can these variables not be derived by the size, location, etc.. of the objective?", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r388932225", "createdAt": "2020-03-06T14:27:20Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/FireworkMatchModule.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nonnull;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Color;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.FireworkEffect.Type;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.World;\n+import org.bukkit.block.Block;\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Firework;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.inventory.meta.FireworkMeta;\n+import tc.oc.pgm.Config;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.controlpoint.events.ControllerChangeEvent;\n+import tc.oc.pgm.core.CoreLeakEvent;\n+import tc.oc.pgm.destroyable.DestroyableDestroyedEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.regions.Bounds;\n+import tc.oc.pgm.regions.Region;\n+import tc.oc.pgm.wool.PlayerWoolPlaceEvent;\n+import tc.oc.util.bukkit.BukkitUtils;\n+import tc.oc.util.bukkit.block.BlockVectors;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FireworkMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+\n+  private final boolean postEnabled = Config.Fireworks.postMatchEnabled();\n+  private final boolean goalsEnabled = Config.Fireworks.goalsEnabled();\n+  private final int number = 5;\n+  private final int delay = 40;\n+  private final int frequency = 40;\n+  private final int iterationCount = 15;\n+  private final int power = 2;\n+\n+  public FireworkMatchModule(Match match) {\n+    this.match = match;\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onMatchEnd(final MatchFinishEvent event) {\n+    if (!postEnabled) return;\n+    match\n+        .getScheduler(MatchScope.LOADED)\n+        .runTaskTimer(delay, frequency, new FireworkRunner(event.getWinners()));\n+  }\n+\n+  public static List<FireworkEffect.Type> AVAILABLE_TYPES =\n+      ImmutableList.<FireworkEffect.Type>builder()\n+          .add(Type.BALL)\n+          .add(Type.BALL_LARGE)\n+          .add(Type.BURST)\n+          .add(Type.STAR)\n+          .build();\n+\n+  public class FireworkRunner implements Runnable {\n+    private final Set<Color> colors;\n+    private final Collection<Competitor> winners;\n+    private int iterations = 0;\n+\n+    public FireworkRunner(Collection<Competitor> winners) {\n+      this.winners = winners;\n+      this.colors =\n+          winners.stream()\n+              .map(winner -> BukkitUtils.colorOf(winner.getColor()))\n+              .collect(Collectors.toSet());\n+    }\n+\n+    @Override\n+    public void run() {\n+      if (this.iterations < iterationCount) {\n+        // Build this list fresh every time, because MatchPlayers can unload, but Competitors can't.\n+        final List<MatchPlayer> players =\n+            winners.stream().flatMap(c -> c.getPlayers().stream()).collect(Collectors.toList());\n+        Collections.shuffle(players);\n+\n+        for (int i = 0; i < players.size() && i < number; i++) {\n+          MatchPlayer player = players.get(i);\n+\n+          Type type = AVAILABLE_TYPES.get(match.getRandom().nextInt(AVAILABLE_TYPES.size()));\n+\n+          FireworkEffect effect =\n+              FireworkEffect.builder()\n+                  .with(type)\n+                  .withFlicker()\n+                  .withColor(this.colors)\n+                  .withFade(Color.BLACK)\n+                  .build();\n+\n+          spawnFirework(player.getBukkit().getLocation(), effect, power);\n+        }\n+      }\n+      this.iterations++;\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onWoolPlace(final PlayerWoolPlaceEvent event) {\n+    if (goalsEnabled && event.getWool().isVisible()) {\n+      this.spawnFireworkDisplay(\n+          BlockVectors.center(event.getBlock()), event.getWool().getDyeColor().getColor(), 6, 2, 2);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onCoreLeak(final CoreLeakEvent event) {\n+    if (goalsEnabled && event.getCore().isVisible()) {\n+      this.spawnFireworkDisplay(\n+          event.getMatch().getWorld(),\n+          event.getCore().getCasingRegion(),\n+          event.getCore().getColor(),\n+          8,\n+          1.5,\n+          2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMTEzOQ=="}, "originalCommit": {"oid": "0cb4c0a44e1f847fd59b6e24a27288dbd8fe0030"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjQyNw==", "bodyText": "private static class", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r388932427", "createdAt": "2020-03-06T14:27:42Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/FireworkMatchModule.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nonnull;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Color;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.FireworkEffect.Type;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.World;\n+import org.bukkit.block.Block;\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Firework;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.inventory.meta.FireworkMeta;\n+import tc.oc.pgm.Config;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.controlpoint.events.ControllerChangeEvent;\n+import tc.oc.pgm.core.CoreLeakEvent;\n+import tc.oc.pgm.destroyable.DestroyableDestroyedEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.regions.Bounds;\n+import tc.oc.pgm.regions.Region;\n+import tc.oc.pgm.wool.PlayerWoolPlaceEvent;\n+import tc.oc.util.bukkit.BukkitUtils;\n+import tc.oc.util.bukkit.block.BlockVectors;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FireworkMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+\n+  private final boolean postEnabled = Config.Fireworks.postMatchEnabled();\n+  private final boolean goalsEnabled = Config.Fireworks.goalsEnabled();\n+  private final int number = 5;\n+  private final int delay = 40;\n+  private final int frequency = 40;\n+  private final int iterationCount = 15;\n+  private final int power = 2;\n+\n+  public FireworkMatchModule(Match match) {\n+    this.match = match;\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onMatchEnd(final MatchFinishEvent event) {\n+    if (!postEnabled) return;\n+    match\n+        .getScheduler(MatchScope.LOADED)\n+        .runTaskTimer(delay, frequency, new FireworkRunner(event.getWinners()));\n+  }\n+\n+  public static List<FireworkEffect.Type> AVAILABLE_TYPES =\n+      ImmutableList.<FireworkEffect.Type>builder()\n+          .add(Type.BALL)\n+          .add(Type.BALL_LARGE)\n+          .add(Type.BURST)\n+          .add(Type.STAR)\n+          .build();\n+\n+  public class FireworkRunner implements Runnable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb4c0a44e1f847fd59b6e24a27288dbd8fe0030"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjYwOA==", "bodyText": "FIREWORK_TYPES", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r388932608", "createdAt": "2020-03-06T14:28:02Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/FireworkMatchModule.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nonnull;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Color;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.FireworkEffect.Type;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.World;\n+import org.bukkit.block.Block;\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Firework;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.inventory.meta.FireworkMeta;\n+import tc.oc.pgm.Config;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.controlpoint.events.ControllerChangeEvent;\n+import tc.oc.pgm.core.CoreLeakEvent;\n+import tc.oc.pgm.destroyable.DestroyableDestroyedEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.regions.Bounds;\n+import tc.oc.pgm.regions.Region;\n+import tc.oc.pgm.wool.PlayerWoolPlaceEvent;\n+import tc.oc.util.bukkit.BukkitUtils;\n+import tc.oc.util.bukkit.block.BlockVectors;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FireworkMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+\n+  private final boolean postEnabled = Config.Fireworks.postMatchEnabled();\n+  private final boolean goalsEnabled = Config.Fireworks.goalsEnabled();\n+  private final int number = 5;\n+  private final int delay = 40;\n+  private final int frequency = 40;\n+  private final int iterationCount = 15;\n+  private final int power = 2;\n+\n+  public FireworkMatchModule(Match match) {\n+    this.match = match;\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onMatchEnd(final MatchFinishEvent event) {\n+    if (!postEnabled) return;\n+    match\n+        .getScheduler(MatchScope.LOADED)\n+        .runTaskTimer(delay, frequency, new FireworkRunner(event.getWinners()));\n+  }\n+\n+  public static List<FireworkEffect.Type> AVAILABLE_TYPES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb4c0a44e1f847fd59b6e24a27288dbd8fe0030"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzgxMzc5", "url": "https://github.com/PGMDev/PGM/pull/351#pullrequestreview-370781379", "createdAt": "2020-03-07T18:27:49Z", "commit": {"oid": "0cb4c0a44e1f847fd59b6e24a27288dbd8fe0030"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyNzo0OVrOFzRHaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyNzo0OVrOFzRHaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMjEyMA==", "bodyText": "This doesn't seem like it belongs in this commit, should make another one to change this factory for the method reference to the constructor", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r389302120", "createdAt": "2020-03-07T18:27:49Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/observers/ObserverToolsMatchModule.java", "diffHunk": "@@ -36,13 +34,6 @@\n @ListenerScope(MatchScope.LOADED)\n public class ObserverToolsMatchModule implements MatchModule, Listener {\n \n-  public static class Factory implements MatchModuleFactory<ObserverToolsMatchModule> {\n-    @Override\n-    public ObserverToolsMatchModule createMatchModule(Match match) throws ModuleLoadException {\n-      return new ObserverToolsMatchModule(match);\n-    }\n-  }\n-\n   // Slot where tool item is placed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb4c0a44e1f847fd59b6e24a27288dbd8fe0030"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODc2NTc0", "url": "https://github.com/PGMDev/PGM/pull/351#pullrequestreview-370876574", "createdAt": "2020-03-09T01:11:59Z", "commit": {"oid": "a71f52f974eaaeac9e0a03a131532916b0cb6a3e"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMToxMTo1OVrOFzYxoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMToxMTo1OVrOFzYxoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNzYxNw==", "bodyText": "Could use some better naming or descriptions (i'm not 100% sure if i got them all right or i mixed any of them up):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final int NUMBER = 5;\n          \n          \n            \n              private static final int DELAY = 40;\n          \n          \n            \n              private static final int FREQUENCY = 40;\n          \n          \n            \n              private static final int ITERATION_COUNT = 15;\n          \n          \n            \n              private static final int POWER = 2;\n          \n          \n            \n              private static final int MAX_ROCKET_COUNT = 5; // Maximum rockets to throw at once, one per player\n          \n          \n            \n              private static final int INITIAL_DELAY = 40; // Ticks before starting to throw rockets\n          \n          \n            \n              private static final int FREQUENCY = 40; // Ticks between rocket throws\n          \n          \n            \n              private static final int ITERATION_COUNT = 15; // Amount of times rockets are thrown\n          \n          \n            \n              private static final int ROCKET_POWER = 2; // Power of the rockets, 1 = low, 2 = medium, 3 = high", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r389427617", "createdAt": "2020-03-09T01:11:59Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/FireworkMatchModule.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nonnull;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Color;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.FireworkEffect.Type;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.World;\n+import org.bukkit.block.Block;\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Firework;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.inventory.meta.FireworkMeta;\n+import tc.oc.pgm.Config;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.controlpoint.events.ControllerChangeEvent;\n+import tc.oc.pgm.core.CoreLeakEvent;\n+import tc.oc.pgm.destroyable.DestroyableDestroyedEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.regions.Bounds;\n+import tc.oc.pgm.regions.Region;\n+import tc.oc.pgm.wool.PlayerWoolPlaceEvent;\n+import tc.oc.util.bukkit.BukkitUtils;\n+import tc.oc.util.bukkit.block.BlockVectors;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FireworkMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+\n+  private static final boolean POST_ENABLED = Config.Fireworks.postMatchEnabled();\n+  private static final boolean GOALS_ENABLED = Config.Fireworks.goalsEnabled();\n+\n+  private static final int NUMBER = 5;\n+  private static final int DELAY = 40;\n+  private static final int FREQUENCY = 40;\n+  private static final int ITERATION_COUNT = 15;\n+  private static final int POWER = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71f52f974eaaeac9e0a03a131532916b0cb6a3e"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "927f12f85831cfc8659029da7566a8f1eebfd86e", "author": {"user": {"login": "applenick", "name": "applenick"}}, "url": "https://github.com/PGMDev/PGM/commit/927f12f85831cfc8659029da7566a8f1eebfd86e", "committedDate": "2020-03-11T23:57:44Z", "message": "Reintroduce fireworks\n* Add FireworkMatchModule - allows for objective fireworks and post-match victory fireworks\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a71f52f974eaaeac9e0a03a131532916b0cb6a3e", "author": {"user": {"login": "applenick", "name": "applenick"}}, "url": "https://github.com/PGMDev/PGM/commit/a71f52f974eaaeac9e0a03a131532916b0cb6a3e", "committedDate": "2020-03-07T18:43:38Z", "message": "Clean up firework values\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>"}, "afterCommit": {"oid": "927f12f85831cfc8659029da7566a8f1eebfd86e", "author": {"user": {"login": "applenick", "name": "applenick"}}, "url": "https://github.com/PGMDev/PGM/commit/927f12f85831cfc8659029da7566a8f1eebfd86e", "committedDate": "2020-03-11T23:57:44Z", "message": "Reintroduce fireworks\n* Add FireworkMatchModule - allows for objective fireworks and post-match victory fireworks\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNjcxNTAz", "url": "https://github.com/PGMDev/PGM/pull/351#pullrequestreview-373671503", "createdAt": "2020-03-12T15:41:35Z", "commit": {"oid": "927f12f85831cfc8659029da7566a8f1eebfd86e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0MTozNVrOF1kE_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0MTozNVrOF1kE_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwOTk1MQ==", "bodyText": "TBH, if there are all just \"magic\" numbers, then let's skip the static variables.\nNice in theory, but there's way too many vars here.", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r391709951", "createdAt": "2020-03-12T15:41:35Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/FireworkMatchModule.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Color;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.FireworkEffect.Type;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.World;\n+import org.bukkit.block.Block;\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Firework;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.inventory.meta.FireworkMeta;\n+import tc.oc.pgm.Config;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.controlpoint.events.ControllerChangeEvent;\n+import tc.oc.pgm.core.CoreLeakEvent;\n+import tc.oc.pgm.destroyable.DestroyableDestroyedEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.regions.Bounds;\n+import tc.oc.pgm.regions.Region;\n+import tc.oc.pgm.wool.PlayerWoolPlaceEvent;\n+import tc.oc.util.bukkit.BukkitUtils;\n+import tc.oc.util.bukkit.block.BlockVectors;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FireworkMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+\n+  private static final boolean POST_ENABLED = Config.Fireworks.postMatchEnabled();\n+  private static final boolean GOALS_ENABLED = Config.Fireworks.goalsEnabled();\n+\n+  private static final int ROCKET_COUNT = 5; // Maximum rockets to launch at once, one per player\n+  private static final int INITIAL_DELAY = 40; // Ticks before starting to launch rockets\n+  private static final int FREQUENCY = 40; // Ticks between rocket launches\n+  private static final int ITERATION_COUNT = 15; // Amount of times rockets are launched\n+  private static final int ROCKET_POWER =\n+      2; // Power applied to rockets (how high they go), 1 = low, 2 = medium, 3 = high\n+\n+  private static final int WOOL_PLACE_COUNT = 6;\n+  private static final double WOOL_PLACE_RADIUS = 2;\n+\n+  private static final int CORE_LEAK_COUNT = 8;\n+  private static final double CORE_LEAK_RADIUS = 1.5;\n+\n+  private static final int DESTROYABLE_BREAK_COUNT = 4;\n+  private static final double DESTROYABLE_BREAK_RADIUS = 3;\n+\n+  private static final int CONTROL_POINT_COUNT = 8;\n+  private static final double CONTROL_POINT_RADIUS = 1;\n+\n+  private static final int FLAG_CAPTURE_COUNT = 6;\n+  private static final double FLAG_CAPTURE_RADIUS = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "927f12f85831cfc8659029da7566a8f1eebfd86e"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NTU5MDM0", "url": "https://github.com/PGMDev/PGM/pull/351#pullrequestreview-374559034", "createdAt": "2020-03-13T19:29:40Z", "commit": {"oid": "927f12f85831cfc8659029da7566a8f1eebfd86e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzM2NTQ3", "url": "https://github.com/PGMDev/PGM/pull/351#pullrequestreview-374736547", "createdAt": "2020-03-14T16:08:10Z", "commit": {"oid": "927f12f85831cfc8659029da7566a8f1eebfd86e"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNjowODoxMFrOF2aWxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNjowODoxMFrOF2aWxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5OTIzNw==", "bodyText": "@applenick Go ahead and make that change, then ready to go", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r392599237", "createdAt": "2020-03-14T16:08:10Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/fireworks/FireworkMatchModule.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package tc.oc.pgm.fireworks;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Color;\n+import org.bukkit.FireworkEffect;\n+import org.bukkit.FireworkEffect.Type;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.World;\n+import org.bukkit.block.Block;\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Firework;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import org.bukkit.inventory.meta.FireworkMeta;\n+import tc.oc.pgm.Config;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.controlpoint.events.ControllerChangeEvent;\n+import tc.oc.pgm.core.CoreLeakEvent;\n+import tc.oc.pgm.destroyable.DestroyableDestroyedEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.regions.Bounds;\n+import tc.oc.pgm.regions.Region;\n+import tc.oc.pgm.wool.PlayerWoolPlaceEvent;\n+import tc.oc.util.bukkit.BukkitUtils;\n+import tc.oc.util.bukkit.block.BlockVectors;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class FireworkMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+\n+  private static final boolean POST_ENABLED = Config.Fireworks.postMatchEnabled();\n+  private static final boolean GOALS_ENABLED = Config.Fireworks.goalsEnabled();\n+\n+  private static final int ROCKET_COUNT = 5; // Maximum rockets to launch at once, one per player\n+  private static final int INITIAL_DELAY = 40; // Ticks before starting to launch rockets\n+  private static final int FREQUENCY = 40; // Ticks between rocket launches\n+  private static final int ITERATION_COUNT = 15; // Amount of times rockets are launched\n+  private static final int ROCKET_POWER =\n+      2; // Power applied to rockets (how high they go), 1 = low, 2 = medium, 3 = high\n+\n+  private static final int WOOL_PLACE_COUNT = 6;\n+  private static final double WOOL_PLACE_RADIUS = 2;\n+\n+  private static final int CORE_LEAK_COUNT = 8;\n+  private static final double CORE_LEAK_RADIUS = 1.5;\n+\n+  private static final int DESTROYABLE_BREAK_COUNT = 4;\n+  private static final double DESTROYABLE_BREAK_RADIUS = 3;\n+\n+  private static final int CONTROL_POINT_COUNT = 8;\n+  private static final double CONTROL_POINT_RADIUS = 1;\n+\n+  private static final int FLAG_CAPTURE_COUNT = 6;\n+  private static final double FLAG_CAPTURE_RADIUS = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwOTk1MQ=="}, "originalCommit": {"oid": "927f12f85831cfc8659029da7566a8f1eebfd86e"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be6a541069fe2adf68664e56ddd114965425d2d8", "author": {"user": {"login": "applenick", "name": "applenick"}}, "url": "https://github.com/PGMDev/PGM/commit/be6a541069fe2adf68664e56ddd114965425d2d8", "committedDate": "2020-03-14T17:12:47Z", "message": "Organize objective variables\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "159c314647394f156bf3cbf417ab3205f1eedd11", "author": {"user": {"login": "applenick", "name": "applenick"}}, "url": "https://github.com/PGMDev/PGM/commit/159c314647394f156bf3cbf417ab3205f1eedd11", "committedDate": "2020-03-14T17:15:26Z", "message": "Merge branch 'master' into fireworks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzQyNTEy", "url": "https://github.com/PGMDev/PGM/pull/351#pullrequestreview-374742512", "createdAt": "2020-03-14T17:46:47Z", "commit": {"oid": "159c314647394f156bf3cbf417ab3205f1eedd11"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzo0Njo0N1rOF2axVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNzo0Njo0N1rOF2axVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjAzOA==", "bodyText": "Post match default is false? Why not true?", "url": "https://github.com/PGMDev/PGM/pull/351#discussion_r392606038", "createdAt": "2020-03-14T17:46:47Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/Config.java", "diffHunk": "@@ -477,4 +477,15 @@ public static boolean isAppealVisible() {\n       return getAppealMessage().length() > 0;\n     }\n   }\n+\n+  public static class Fireworks {\n+\n+    public static boolean postMatchEnabled() {\n+      return getConfiguration().getBoolean(\"fireworks.post-match\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "159c314647394f156bf3cbf417ab3205f1eedd11"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ba6361b9839cb30180b4d3bc7c74179e84f018e", "author": {"user": {"login": "applenick", "name": "applenick"}}, "url": "https://github.com/PGMDev/PGM/commit/6ba6361b9839cb30180b4d3bc7c74179e84f018e", "committedDate": "2020-03-14T18:03:20Z", "message": "Adjust post-match config default\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzQ1Nzgz", "url": "https://github.com/PGMDev/PGM/pull/351#pullrequestreview-374745783", "createdAt": "2020-03-14T18:41:58Z", "commit": {"oid": "6ba6361b9839cb30180b4d3bc7c74179e84f018e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 462, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}