{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NDQ1NTkx", "number": 172, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMVQwNToxMDo1OFrODVVNww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNzo0NzowN1rODVtscg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzNjk0Mjc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/maptag/MapTag.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMVQwNToxMDo1OFrOFZhPDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMVQwNToxMDo1OFrOFZhPDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzI0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                this.name = checkNotNull(name).toLowerCase(Locale.US);\n          \n          \n            \n                this.name = checkNotNull(name).toLowerCase(Locale.ROOT);", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362303245", "createdAt": "2020-01-01T05:10:58Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/maptag/MapTag.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class MapTag implements Comparable<MapTag> {\n+  public static final char SYMBOL = '#';\n+\n+  private final String name;\n+\n+  protected MapTag(String name) {\n+    this.name = checkNotNull(name).toLowerCase(Locale.US);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4a32834b3cda8af94c2becc3e993064b6518959"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzNjk0MzQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMVQwNToxMzo1MFrOFZhPXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMVQxNzo1ODoyN1rOFZjNFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzMyNg==", "bodyText": "Maybe call this #worldgen ?", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362303326", "createdAt": "2020-01-01T05:13:50Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);\n+  StandardMapTag CRAFTING =\n+      create(\"crafting\", CraftingModule.class, crafting -> !crafting.getCustomRecipes().isEmpty());\n+  StandardMapTag DESTROYABLE = create(\"destroyable\", DestroyableModule.class);\n+  StandardMapTag EVENTEAMS =\n+      create(\"eventeams\", TeamModule.class, team -> team.shouldRequireEven().orElse(false));\n+  StandardMapTag FFA = create(\"ffa\", FreeForAllModule.class);\n+  StandardMapTag FLAG = create(\"flag\", FlagModule.class);\n+  StandardMapTag FRIENDLYFIRE =\n+      create(\"friendlyfire\", InfoModule.class, info -> info.getMapInfo().friendlyFire);\n+  StandardMapTag INTERNAL = create(\"internal\", InternalModule.class);\n+  StandardMapTag INSTANTTNT =\n+      create(\"instanttnt\", TNTModule.class, tnt -> tnt.getProperties().instantIgnite);\n+  StandardMapTag NO_HUNGER = create(\"nohunger\", HungerModule.class);\n+  StandardMapTag RAGE = create(\"rage\", RageModule.class);\n+  StandardMapTag RFW = create(\"rfw\", LaneModule.class);\n+  StandardMapTag SCOREBOX =\n+      create(\"scorebox\", ScoreModule.class, score -> !score.getScoreBoxFactories().isEmpty());\n+  StandardMapTag TEAMS = create(\"teams\", TeamModule.class);\n+  StandardMapTag TDM =\n+      create(\n+          \"tdm\",\n+          ScoreModule.class,\n+          score -> score.getConfig().deathScore != 0 || score.getConfig().killScore != 0);\n+  StandardMapTag TIMELIMIT =\n+      create(\"timelimit\", TimeLimitModule.class, timeLimit -> timeLimit.getTimeLimit().isPresent());\n+  StandardMapTag VANILLAWORLD =\n+      create(\"vanillaworld\", TerrainModule.class, terrain -> terrain.getOptions().vanilla);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4a32834b3cda8af94c2becc3e993064b6518959"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMyODU1Mg==", "bodyText": "Isn't vanillaworld more user friendly?", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362328552", "createdAt": "2020-01-01T15:16:40Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);\n+  StandardMapTag CRAFTING =\n+      create(\"crafting\", CraftingModule.class, crafting -> !crafting.getCustomRecipes().isEmpty());\n+  StandardMapTag DESTROYABLE = create(\"destroyable\", DestroyableModule.class);\n+  StandardMapTag EVENTEAMS =\n+      create(\"eventeams\", TeamModule.class, team -> team.shouldRequireEven().orElse(false));\n+  StandardMapTag FFA = create(\"ffa\", FreeForAllModule.class);\n+  StandardMapTag FLAG = create(\"flag\", FlagModule.class);\n+  StandardMapTag FRIENDLYFIRE =\n+      create(\"friendlyfire\", InfoModule.class, info -> info.getMapInfo().friendlyFire);\n+  StandardMapTag INTERNAL = create(\"internal\", InternalModule.class);\n+  StandardMapTag INSTANTTNT =\n+      create(\"instanttnt\", TNTModule.class, tnt -> tnt.getProperties().instantIgnite);\n+  StandardMapTag NO_HUNGER = create(\"nohunger\", HungerModule.class);\n+  StandardMapTag RAGE = create(\"rage\", RageModule.class);\n+  StandardMapTag RFW = create(\"rfw\", LaneModule.class);\n+  StandardMapTag SCOREBOX =\n+      create(\"scorebox\", ScoreModule.class, score -> !score.getScoreBoxFactories().isEmpty());\n+  StandardMapTag TEAMS = create(\"teams\", TeamModule.class);\n+  StandardMapTag TDM =\n+      create(\n+          \"tdm\",\n+          ScoreModule.class,\n+          score -> score.getConfig().deathScore != 0 || score.getConfig().killScore != 0);\n+  StandardMapTag TIMELIMIT =\n+      create(\"timelimit\", TimeLimitModule.class, timeLimit -> timeLimit.getTimeLimit().isPresent());\n+  StandardMapTag VANILLAWORLD =\n+      create(\"vanillaworld\", TerrainModule.class, terrain -> terrain.getOptions().vanilla);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzMyNg=="}, "originalCommit": {"oid": "c4a32834b3cda8af94c2becc3e993064b6518959"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMzNDY0Ng==", "bodyText": "i'm not sure, if i didn't know all the tags and i had to guess, i don't think i would've ever guessed vanillaworld to find a map that had vanilla world generation", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362334646", "createdAt": "2020-01-01T17:36:20Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);\n+  StandardMapTag CRAFTING =\n+      create(\"crafting\", CraftingModule.class, crafting -> !crafting.getCustomRecipes().isEmpty());\n+  StandardMapTag DESTROYABLE = create(\"destroyable\", DestroyableModule.class);\n+  StandardMapTag EVENTEAMS =\n+      create(\"eventeams\", TeamModule.class, team -> team.shouldRequireEven().orElse(false));\n+  StandardMapTag FFA = create(\"ffa\", FreeForAllModule.class);\n+  StandardMapTag FLAG = create(\"flag\", FlagModule.class);\n+  StandardMapTag FRIENDLYFIRE =\n+      create(\"friendlyfire\", InfoModule.class, info -> info.getMapInfo().friendlyFire);\n+  StandardMapTag INTERNAL = create(\"internal\", InternalModule.class);\n+  StandardMapTag INSTANTTNT =\n+      create(\"instanttnt\", TNTModule.class, tnt -> tnt.getProperties().instantIgnite);\n+  StandardMapTag NO_HUNGER = create(\"nohunger\", HungerModule.class);\n+  StandardMapTag RAGE = create(\"rage\", RageModule.class);\n+  StandardMapTag RFW = create(\"rfw\", LaneModule.class);\n+  StandardMapTag SCOREBOX =\n+      create(\"scorebox\", ScoreModule.class, score -> !score.getScoreBoxFactories().isEmpty());\n+  StandardMapTag TEAMS = create(\"teams\", TeamModule.class);\n+  StandardMapTag TDM =\n+      create(\n+          \"tdm\",\n+          ScoreModule.class,\n+          score -> score.getConfig().deathScore != 0 || score.getConfig().killScore != 0);\n+  StandardMapTag TIMELIMIT =\n+      create(\"timelimit\", TimeLimitModule.class, timeLimit -> timeLimit.getTimeLimit().isPresent());\n+  StandardMapTag VANILLAWORLD =\n+      create(\"vanillaworld\", TerrainModule.class, terrain -> terrain.getOptions().vanilla);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzMyNg=="}, "originalCommit": {"oid": "c4a32834b3cda8af94c2becc3e993064b6518959"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMzNTUxMA==", "bodyText": "Actually none of maps in maps.oc.tc repo uses this feature. I'll make it longer and call it #vanillaworldgen.", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362335510", "createdAt": "2020-01-01T17:58:27Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);\n+  StandardMapTag CRAFTING =\n+      create(\"crafting\", CraftingModule.class, crafting -> !crafting.getCustomRecipes().isEmpty());\n+  StandardMapTag DESTROYABLE = create(\"destroyable\", DestroyableModule.class);\n+  StandardMapTag EVENTEAMS =\n+      create(\"eventeams\", TeamModule.class, team -> team.shouldRequireEven().orElse(false));\n+  StandardMapTag FFA = create(\"ffa\", FreeForAllModule.class);\n+  StandardMapTag FLAG = create(\"flag\", FlagModule.class);\n+  StandardMapTag FRIENDLYFIRE =\n+      create(\"friendlyfire\", InfoModule.class, info -> info.getMapInfo().friendlyFire);\n+  StandardMapTag INTERNAL = create(\"internal\", InternalModule.class);\n+  StandardMapTag INSTANTTNT =\n+      create(\"instanttnt\", TNTModule.class, tnt -> tnt.getProperties().instantIgnite);\n+  StandardMapTag NO_HUNGER = create(\"nohunger\", HungerModule.class);\n+  StandardMapTag RAGE = create(\"rage\", RageModule.class);\n+  StandardMapTag RFW = create(\"rfw\", LaneModule.class);\n+  StandardMapTag SCOREBOX =\n+      create(\"scorebox\", ScoreModule.class, score -> !score.getScoreBoxFactories().isEmpty());\n+  StandardMapTag TEAMS = create(\"teams\", TeamModule.class);\n+  StandardMapTag TDM =\n+      create(\n+          \"tdm\",\n+          ScoreModule.class,\n+          score -> score.getConfig().deathScore != 0 || score.getConfig().killScore != 0);\n+  StandardMapTag TIMELIMIT =\n+      create(\"timelimit\", TimeLimitModule.class, timeLimit -> timeLimit.getTimeLimit().isPresent());\n+  StandardMapTag VANILLAWORLD =\n+      create(\"vanillaworld\", TerrainModule.class, terrain -> terrain.getOptions().vanilla);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzMyNg=="}, "originalCommit": {"oid": "c4a32834b3cda8af94c2becc3e993064b6518959"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzNjk0MzUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMVQwNToxNDozN1rOFZhPZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMVQxNzozNDozMFrOFZjJbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzMzNA==", "bodyText": "no one calls them destroyables, #monument ?", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362303334", "createdAt": "2020-01-01T05:14:37Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);\n+  StandardMapTag CRAFTING =\n+      create(\"crafting\", CraftingModule.class, crafting -> !crafting.getCustomRecipes().isEmpty());\n+  StandardMapTag DESTROYABLE = create(\"destroyable\", DestroyableModule.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4a32834b3cda8af94c2becc3e993064b6518959"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMyODYxMA==", "bodyText": "DTE (Destroy The Enemy) uses destroyables to define islands. If we aren't calling them #destroyable I would go for #dtm instead.", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362328610", "createdAt": "2020-01-01T15:18:00Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);\n+  StandardMapTag CRAFTING =\n+      create(\"crafting\", CraftingModule.class, crafting -> !crafting.getCustomRecipes().isEmpty());\n+  StandardMapTag DESTROYABLE = create(\"destroyable\", DestroyableModule.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzMzNA=="}, "originalCommit": {"oid": "c4a32834b3cda8af94c2becc3e993064b6518959"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMzNDU3Mw==", "bodyText": "You have #core and #wool, basically missing #monument, otherwise, rename them all to #dtc, #ctw, #dtm, but those names may be a more cryptic for users.\nDestroy the enemy is just a type of map that uses a big monument, but it's still a monument. Code-wise they're called destroyables, but they're only called that to the user when it's destroy the enemy, and never on any other monument map (eg: warlock, snowy wars).", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362334573", "createdAt": "2020-01-01T17:34:30Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);\n+  StandardMapTag CRAFTING =\n+      create(\"crafting\", CraftingModule.class, crafting -> !crafting.getCustomRecipes().isEmpty());\n+  StandardMapTag DESTROYABLE = create(\"destroyable\", DestroyableModule.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzMzNA=="}, "originalCommit": {"oid": "c4a32834b3cda8af94c2becc3e993064b6518959"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzNjk0NDA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMVQwNToxNjowNlrOFZhPng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMVQwNToxNjowNlrOFZhPng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzM5MA==", "bodyText": "Sounds misleading, maybe #autotnt or #autoignote ?", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362303390", "createdAt": "2020-01-01T05:16:06Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);\n+  StandardMapTag CRAFTING =\n+      create(\"crafting\", CraftingModule.class, crafting -> !crafting.getCustomRecipes().isEmpty());\n+  StandardMapTag DESTROYABLE = create(\"destroyable\", DestroyableModule.class);\n+  StandardMapTag EVENTEAMS =\n+      create(\"eventeams\", TeamModule.class, team -> team.shouldRequireEven().orElse(false));\n+  StandardMapTag FFA = create(\"ffa\", FreeForAllModule.class);\n+  StandardMapTag FLAG = create(\"flag\", FlagModule.class);\n+  StandardMapTag FRIENDLYFIRE =\n+      create(\"friendlyfire\", InfoModule.class, info -> info.getMapInfo().friendlyFire);\n+  StandardMapTag INTERNAL = create(\"internal\", InternalModule.class);\n+  StandardMapTag INSTANTTNT =\n+      create(\"instanttnt\", TNTModule.class, tnt -> tnt.getProperties().instantIgnite);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4a32834b3cda8af94c2becc3e993064b6518959"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzNjk0NDg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMVQwNToxOTozMFrOFZhP-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMVQxNzozMDo0NVrOFZjI1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzQ4Mg==", "bodyText": "Even tho there's an xml difference between control points and hills, i think #hill may  be more user-friendly?", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362303482", "createdAt": "2020-01-01T05:19:30Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4a32834b3cda8af94c2becc3e993064b6518959"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMyODY4Ng==", "bodyText": "How about #ctp instead?", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362328686", "createdAt": "2020-01-01T15:19:10Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzQ4Mg=="}, "originalCommit": {"oid": "c4a32834b3cda8af94c2becc3e993064b6518959"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMzNDQyMg==", "bodyText": "Yeah i think #ctp would be nice", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362334422", "createdAt": "2020-01-01T17:30:45Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzQ4Mg=="}, "originalCommit": {"oid": "c4a32834b3cda8af94c2becc3e993064b6518959"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzNzM4ODc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/PGMImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQwMjo1MDo0NlrOFZkwsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQwMjo1MDo0NlrOFZkwsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM2MTAxMA==", "bodyText": "I'm not sure if this should be called directly from onEnable(). Static initializers in interfaces aren't possible.\nRelated: https://github.com/TheMolkaPL/PGM-1/blob/a2cecd355b3894b8d4e22f712716f503d197b428/src/main/java/tc/oc/pgm/maptag/StandardMapTags.java#L41", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362361010", "createdAt": "2020-01-02T02:50:46Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/PGMImpl.java", "diffHunk": "@@ -265,6 +268,8 @@ public void onEnable() {\n     MapLoader mapLoader = new MapLoader(this, logger, registry);\n     mapLibrary = new MapLibrary(logger);\n \n+    StandardMapTags.registerDefaults(logger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2cecd355b3894b8d4e22f712716f503d197b428"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzNzM5MzY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/commands/provider/MapTagsConditionProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQwMjo1ODowOFrOFZkzPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQyMzo1NTo0NlrOFZ3yug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM2MTY2Mw==", "bodyText": "This method isn't called after I put a space in the parameters. The expected behavior is that this should suggest maptags in each parameter. /maps #tdm #<-- it's not suggesting here\n@Electroid Any ideas how I can fix this?", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362361663", "createdAt": "2020-01-02T02:58:08Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/commands/provider/MapTagsConditionProvider.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package tc.oc.pgm.commands.provider;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import app.ashcon.intake.argument.ArgumentException;\n+import app.ashcon.intake.argument.CommandArgs;\n+import app.ashcon.intake.argument.Namespace;\n+import app.ashcon.intake.parametric.Provider;\n+import app.ashcon.intake.parametric.ProvisionException;\n+import java.lang.annotation.Annotation;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import tc.oc.pgm.map.MapLibrary;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.maptag.MapTag;\n+import tc.oc.pgm.maptag.MapTagSet;\n+import tc.oc.pgm.maptag.MapTagsCondition;\n+\n+public class MapTagsConditionProvider implements Provider<MapTagsCondition> {\n+\n+  private static final String PREFIX = Character.toString(MapTag.SYMBOL);\n+  private static final String NEGATION = \"!\";\n+\n+  private final MapLibrary mapLibrary;\n+\n+  public MapTagsConditionProvider(MapLibrary mapLibrary) {\n+    this.mapLibrary = checkNotNull(mapLibrary);\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return \"maptags\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public MapTagsCondition get(CommandArgs args, List<? extends Annotation> list)\n+      throws ArgumentException, ProvisionException {\n+    Map<MapTag, Boolean> mapTags = new HashMap<>();\n+    while (args.hasNext()) {\n+      String query = args.next().toLowerCase(Locale.ROOT);\n+      boolean allow = true;\n+\n+      if (query.startsWith(NEGATION)) {\n+        query = query.substring(NEGATION.length());\n+        allow = false;\n+      }\n+\n+      if (!query.startsWith(PREFIX)) {\n+        continue;\n+      }\n+      query = query.substring(PREFIX.length());\n+\n+      if (!query.isEmpty()) {\n+        mapTags.put(MapTag.forName(query), allow);\n+      }\n+    }\n+\n+    return new MapTagsCondition(mapTags);\n+  }\n+\n+  @Override\n+  public List<String> getSuggestions(\n+      String prefix, Namespace namespace, List<? extends Annotation> modifiers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2cecd355b3894b8d4e22f712716f503d197b428"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3MjgyNg==", "bodyText": "This issue seems to be deeper. I'll leave it as it is for now.", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362672826", "createdAt": "2020-01-02T23:55:46Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/commands/provider/MapTagsConditionProvider.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package tc.oc.pgm.commands.provider;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import app.ashcon.intake.argument.ArgumentException;\n+import app.ashcon.intake.argument.CommandArgs;\n+import app.ashcon.intake.argument.Namespace;\n+import app.ashcon.intake.parametric.Provider;\n+import app.ashcon.intake.parametric.ProvisionException;\n+import java.lang.annotation.Annotation;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import tc.oc.pgm.map.MapLibrary;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.maptag.MapTag;\n+import tc.oc.pgm.maptag.MapTagSet;\n+import tc.oc.pgm.maptag.MapTagsCondition;\n+\n+public class MapTagsConditionProvider implements Provider<MapTagsCondition> {\n+\n+  private static final String PREFIX = Character.toString(MapTag.SYMBOL);\n+  private static final String NEGATION = \"!\";\n+\n+  private final MapLibrary mapLibrary;\n+\n+  public MapTagsConditionProvider(MapLibrary mapLibrary) {\n+    this.mapLibrary = checkNotNull(mapLibrary);\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return \"maptags\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public MapTagsCondition get(CommandArgs args, List<? extends Annotation> list)\n+      throws ArgumentException, ProvisionException {\n+    Map<MapTag, Boolean> mapTags = new HashMap<>();\n+    while (args.hasNext()) {\n+      String query = args.next().toLowerCase(Locale.ROOT);\n+      boolean allow = true;\n+\n+      if (query.startsWith(NEGATION)) {\n+        query = query.substring(NEGATION.length());\n+        allow = false;\n+      }\n+\n+      if (!query.startsWith(PREFIX)) {\n+        continue;\n+      }\n+      query = query.substring(PREFIX.length());\n+\n+      if (!query.isEmpty()) {\n+        mapTags.put(MapTag.forName(query), allow);\n+      }\n+    }\n+\n+    return new MapTagsCondition(mapTags);\n+  }\n+\n+  @Override\n+  public List<String> getSuggestions(\n+      String prefix, Namespace namespace, List<? extends Annotation> modifiers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM2MTY2Mw=="}, "originalCommit": {"oid": "a2cecd355b3894b8d4e22f712716f503d197b428"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDkyODQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/commands/MapCommands.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNzozNjoxOVrOFaFXiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxODoyNzoxMVrOFaGX7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg5NTI0MA==", "bodyText": "Should probs just put it on the tag component in case it wants to be later reused, instead of making a \"decorator-like\" method", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362895240", "createdAt": "2020-01-03T17:36:19Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/commands/MapCommands.java", "diffHunk": "@@ -81,12 +72,26 @@ public void map(Audience audience, CommandSender sender, @Text PGMMap map) {\n     MapInfo mapInfo = map.getInfo();\n     audience.sendMessage(mapInfo.getFormattedMapTitle());\n \n-    Component edition =\n-        new PersonalizedText(\n-            mapInfoLabel(\"command.map.mapInfo.edition\"),\n-            new PersonalizedText(mapInfo.getLocalizedEdition(), ChatColor.GOLD));\n-\n-    audience.sendMessage(edition);\n+    audience.sendMessage(\n+        map.getPersistentContext()\n+            .getMapTags()\n+            .createComponent(\n+                (mapTag, component) -> {\n+                  component.clickEvent(\n+                      ClickEvent.Action.RUN_COMMAND, \"/maplist \" + mapTag.toString());\n+                  component.hoverEvent(\n+                      HoverEvent.Action.SHOW_TEXT,\n+                      new PersonalizedTranslatable(\n+                              \"command.map.mapInfo.mapTag.hover\", mapTag.toString())\n+                          .render());\n+                })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9eb19bda0b52cd25822d4144a2930ea120d3e22"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxMTcyNA==", "bodyText": "How should I call the translation key then?", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362911724", "createdAt": "2020-01-03T18:27:11Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/commands/MapCommands.java", "diffHunk": "@@ -81,12 +72,26 @@ public void map(Audience audience, CommandSender sender, @Text PGMMap map) {\n     MapInfo mapInfo = map.getInfo();\n     audience.sendMessage(mapInfo.getFormattedMapTitle());\n \n-    Component edition =\n-        new PersonalizedText(\n-            mapInfoLabel(\"command.map.mapInfo.edition\"),\n-            new PersonalizedText(mapInfo.getLocalizedEdition(), ChatColor.GOLD));\n-\n-    audience.sendMessage(edition);\n+    audience.sendMessage(\n+        map.getPersistentContext()\n+            .getMapTags()\n+            .createComponent(\n+                (mapTag, component) -> {\n+                  component.clickEvent(\n+                      ClickEvent.Action.RUN_COMMAND, \"/maplist \" + mapTag.toString());\n+                  component.hoverEvent(\n+                      HoverEvent.Action.SHOW_TEXT,\n+                      new PersonalizedTranslatable(\n+                              \"command.map.mapInfo.mapTag.hover\", mapTag.toString())\n+                          .render());\n+                })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg5NTI0MA=="}, "originalCommit": {"oid": "d9eb19bda0b52cd25822d4144a2930ea120d3e22"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDk1MzQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNzo0NzowN1rOFaFmSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxODo0ODoyNlrOFaGzAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg5OTAxNg==", "bodyText": "Why is this no longer an interface? would save line space with the public static final default", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362899016", "createdAt": "2020-01-03T17:47:07Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import com.google.common.collect.ImmutableSet;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Comparator;\n+import java.util.LinkedHashMap;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.function.Predicate;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import tc.oc.pgm.api.registry.IRegistry;\n+import tc.oc.pgm.api.registry.Registry;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.MapModuleContext;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+import tc.oc.util.logging.ClassLogger;\n+\n+public final class StandardMapTags {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9eb19bda0b52cd25822d4144a2930ea120d3e22"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxMDA5MQ==", "bodyText": "It allows to make private static methods and load the registry in static initalizer block.", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362910091", "createdAt": "2020-01-03T18:21:33Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import com.google.common.collect.ImmutableSet;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Comparator;\n+import java.util.LinkedHashMap;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.function.Predicate;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import tc.oc.pgm.api.registry.IRegistry;\n+import tc.oc.pgm.api.registry.Registry;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.MapModuleContext;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+import tc.oc.util.logging.ClassLogger;\n+\n+public final class StandardMapTags {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg5OTAxNg=="}, "originalCommit": {"oid": "d9eb19bda0b52cd25822d4144a2930ea120d3e22"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxMTg4OQ==", "bodyText": "Couldn't you just add a boolean LOADED = someLoadingLogicMethod();, wich will basically be your static \"initializer block\" ? (the method always returns true)", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362911889", "createdAt": "2020-01-03T18:27:48Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import com.google.common.collect.ImmutableSet;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Comparator;\n+import java.util.LinkedHashMap;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.function.Predicate;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import tc.oc.pgm.api.registry.IRegistry;\n+import tc.oc.pgm.api.registry.Registry;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.MapModuleContext;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+import tc.oc.util.logging.ClassLogger;\n+\n+public final class StandardMapTags {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg5OTAxNg=="}, "originalCommit": {"oid": "d9eb19bda0b52cd25822d4144a2930ea120d3e22"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxNDkwMg==", "bodyText": "Yes, but it exposes those static methods which should be kept private.", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362914902", "createdAt": "2020-01-03T18:36:52Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import com.google.common.collect.ImmutableSet;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Comparator;\n+import java.util.LinkedHashMap;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.function.Predicate;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import tc.oc.pgm.api.registry.IRegistry;\n+import tc.oc.pgm.api.registry.Registry;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.MapModuleContext;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+import tc.oc.util.logging.ClassLogger;\n+\n+public final class StandardMapTags {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg5OTAxNg=="}, "originalCommit": {"oid": "d9eb19bda0b52cd25822d4144a2930ea120d3e22"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxODY1OA==", "bodyText": "You can prevent the method from running by checking for LOADED's value on the initializer method, but yeah, it starts to be a bit of a hack", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362918658", "createdAt": "2020-01-03T18:48:26Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import com.google.common.collect.ImmutableSet;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Comparator;\n+import java.util.LinkedHashMap;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.function.Predicate;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import tc.oc.pgm.api.registry.IRegistry;\n+import tc.oc.pgm.api.registry.Registry;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.MapModuleContext;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+import tc.oc.util.logging.ClassLogger;\n+\n+public final class StandardMapTags {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg5OTAxNg=="}, "originalCommit": {"oid": "d9eb19bda0b52cd25822d4144a2930ea120d3e22"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1142, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}