{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0ODUwNDU5", "number": 598, "title": "Add an option for verbose stats at the end of the match", "bodyText": "This ended up being bigger then I initially thought..\ni refactored how the InventoryMenu works a little in this as well.\nI'm not completely done with testing(there is a bug with stacking listeners on pagination if I remember correctly) but I thought of putting this up to get some roasts on my code.\nEdit: this seems to have been fixed\nI will add pictures before this weekend has finished\nAn example: https://streamable.com/310629", "createdAt": "2020-08-07T22:01:13Z", "url": "https://github.com/PGMDev/PGM/pull/598", "merged": true, "mergeCommit": {"oid": "0c9a5b672e02c2fb45dfbf4c391d550690f59681"}, "closed": true, "closedAt": "2020-11-18T03:43:39Z", "author": {"login": "KingOfSquares"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8sAGMAFqTQ2MzY2NDA3OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABddjJ41gH2gAyNDY0ODUwNDU5OmM4ZDIyMzc5ODJjMTRmOTRiOTUzYTE3NGM5YzlmZDNhYzE2N2IzZDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjY0MDc5", "url": "https://github.com/PGMDev/PGM/pull/598#pullrequestreview-463664079", "createdAt": "2020-08-07T22:06:57Z", "commit": {"oid": "bd3eff27c3a31a4136d97a72ebfd046fca815b19"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjowNjo1N1rOG9qJUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjoxNTozMFrOG9qSQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNjgzMw==", "bodyText": "Maybe instead of prettyMenu1 2 3 etc, you could make it more informative. For example\n1-> prettyMenu()\n2-> smallMenu()\n3 -> normalMenu()\nFeel free to use other names, but just so you get the general idea \ud83d\ude04", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r467306833", "createdAt": "2020-08-07T22:06:57Z", "author": {"login": "applenick"}, "path": "core/src/main/java/tc/oc/pgm/menu/InventoryMenuUtils.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package tc.oc.pgm.menu;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import net.kyori.text.TranslatableComponent;\n+import tc.oc.pgm.api.match.Match;\n+\n+/** A collection of some static methods for working with building {@link InventoryMenu}s */\n+// TODO: Abstract out adding a row for pagination?\n+public class InventoryMenuUtils {\n+\n+  /**\n+   * A {@link InventoryMenu} that fits any amount of {@link InventoryMenuItem}s\n+   *\n+   * @param match the match the inventory will exist in\n+   * @param title the title of the inventory\n+   * @param itemsWithoutSpaces a list of all {@link InventoryMenuItem}s that should be displayed on\n+   *     this menu\n+   * @return a pretty menu that fits any amount of {@link InventoryMenuItem}s\n+   */\n+  public static InventoryMenu prettyMenu1(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3eff27c3a31a4136d97a72ebfd046fca815b19"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzQzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              InventoryMenu in;\n          \n          \n            \n            \n          \n          \n            \n              public FlySpeedTool(InventoryMenu in) {\n          \n          \n            \n                this.in = in;\n          \n          \n            \n              InventoryMenu menu;\n          \n          \n            \n            \n          \n          \n            \n              public FlySpeedTool(InventoryMenu menu) {\n          \n          \n            \n                this.menu = menu;", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r467307431", "createdAt": "2020-08-07T22:09:22Z", "author": {"login": "applenick"}, "path": "core/src/main/java/tc/oc/pgm/observers/tools/FlySpeedTool.java", "diffHunk": "@@ -17,6 +17,12 @@\n \n   private static String TRANSLATION_KEY = \"setting.flyspeed.\";\n \n+  InventoryMenu in;\n+\n+  public FlySpeedTool(InventoryMenu in) {\n+    this.in = in;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3eff27c3a31a4136d97a72ebfd046fca815b19"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzU2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              final InventoryMenu in;\n          \n          \n            \n            \n          \n          \n            \n              public GamemodeTool(InventoryMenu in) {\n          \n          \n            \n                this.in = in;\n          \n          \n            \n              final InventoryMenu menu;\n          \n          \n            \n            \n          \n          \n            \n              public GamemodeTool(InventoryMenu menu) {\n          \n          \n            \n                this.menu = menu;", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r467307561", "createdAt": "2020-08-07T22:09:52Z", "author": {"login": "applenick"}, "path": "core/src/main/java/tc/oc/pgm/observers/tools/GamemodeTool.java", "diffHunk": "@@ -20,6 +20,12 @@\n \n public class GamemodeTool implements InventoryMenuItem {\n \n+  final InventoryMenu in;\n+\n+  public GamemodeTool(InventoryMenu in) {\n+    this.in = in;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3eff27c3a31a4136d97a72ebfd046fca815b19"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzY4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              final InventoryMenu in;\n          \n          \n            \n            \n          \n          \n            \n              public NightVisionTool(InventoryMenu in) {\n          \n          \n            \n                this.in = in;\n          \n          \n            \n              final InventoryMenu menu;\n          \n          \n            \n            \n          \n          \n            \n              public NightVisionTool(InventoryMenu menu) {\n          \n          \n            \n                this.menu = menu;", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r467307687", "createdAt": "2020-08-07T22:10:14Z", "author": {"login": "applenick"}, "path": "core/src/main/java/tc/oc/pgm/observers/tools/NightVisionTool.java", "diffHunk": "@@ -17,6 +17,12 @@\n \n public class NightVisionTool implements InventoryMenuItem {\n \n+  final InventoryMenu in;\n+\n+  public NightVisionTool(InventoryMenu in) {\n+    this.in = in;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3eff27c3a31a4136d97a72ebfd046fca815b19"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzgyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              final InventoryMenu in;\n          \n          \n            \n            \n          \n          \n            \n              public VisibilityTool(InventoryMenu in) {\n          \n          \n            \n                this.in = in;\n          \n          \n            \n              final InventoryMenu menu;\n          \n          \n            \n            \n          \n          \n            \n              public VisibilityTool(InventoryMenu menu) {\n          \n          \n            \n                this.menu = menu;", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r467307826", "createdAt": "2020-08-07T22:10:39Z", "author": {"login": "applenick"}, "path": "core/src/main/java/tc/oc/pgm/observers/tools/VisibilityTool.java", "diffHunk": "@@ -18,6 +18,12 @@\n \n public class VisibilityTool implements InventoryMenuItem {\n \n+  final InventoryMenu in;\n+\n+  public VisibilityTool(InventoryMenu in) {\n+    this.in = in;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3eff27c3a31a4136d97a72ebfd046fca815b19"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwODkzNg==", "bodyText": "Make RESET", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r467308936", "createdAt": "2020-08-07T22:14:52Z", "author": {"login": "applenick"}, "path": "core/src/main/java/tc/oc/pgm/stats/PlayerStatsInventoryMenuItem.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package tc.oc.pgm.stats;\n+\n+import static tc.oc.pgm.stats.StatsMatchModule.numberComponent;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import net.kyori.text.Component;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.inventory.ClickType;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.SkullMeta;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.menu.InventoryMenu;\n+import tc.oc.pgm.menu.InventoryMenuItem;\n+import tc.oc.pgm.util.text.TextTranslations;\n+\n+public class PlayerStatsInventoryMenuItem implements InventoryMenuItem {\n+\n+  private final MatchPlayer player;\n+  private final TextColor reset = TextColor.WHITE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3eff27c3a31a4136d97a72ebfd046fca815b19"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwOTEyMg==", "bodyText": "Make RESET", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r467309122", "createdAt": "2020-08-07T22:15:30Z", "author": {"login": "applenick"}, "path": "core/src/main/java/tc/oc/pgm/stats/TeamInventoryMenuItem.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package tc.oc.pgm.stats;\n+\n+import static tc.oc.pgm.stats.StatsMatchModule.PlayerStats.statFormat;\n+import static tc.oc.pgm.stats.StatsMatchModule.numberComponent;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import net.kyori.text.Component;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.inventory.ClickType;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.menu.InventoryMenu;\n+import tc.oc.pgm.menu.InventoryMenuItem;\n+import tc.oc.pgm.menu.InventoryMenuUtils;\n+import tc.oc.pgm.util.bukkit.BukkitUtils;\n+import tc.oc.pgm.util.text.TextTranslations;\n+\n+public class TeamInventoryMenuItem implements InventoryMenuItem {\n+\n+  private final Competitor team;\n+  private final InventoryMenu teamSubGUI;\n+\n+  private final TextColor reset = TextColor.WHITE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3eff27c3a31a4136d97a72ebfd046fca815b19"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd3eff27c3a31a4136d97a72ebfd046fca815b19", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/bd3eff27c3a31a4136d97a72ebfd046fca815b19", "committedDate": "2020-08-07T21:51:14Z", "message": "Ready for release\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}, "afterCommit": {"oid": "34cc1a75fe71a8db1a36e1683551ae7eaf8f0b3b", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/34cc1a75fe71a8db1a36e1683551ae7eaf8f0b3b", "committedDate": "2020-08-07T22:31:57Z", "message": "Ready for release\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "293bc56a2f278e3b219e515a4fe4dc3ca30ccad9", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/293bc56a2f278e3b219e515a4fe4dc3ca30ccad9", "committedDate": "2020-08-07T22:44:09Z", "message": "Remove old code\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}, "afterCommit": {"oid": "0cc5628ac4e72f0ff17b9cf8214bdcc6ef708f5c", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/0cc5628ac4e72f0ff17b9cf8214bdcc6ef708f5c", "committedDate": "2020-08-07T22:46:03Z", "message": "Remove old code\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0cc5628ac4e72f0ff17b9cf8214bdcc6ef708f5c", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/0cc5628ac4e72f0ff17b9cf8214bdcc6ef708f5c", "committedDate": "2020-08-07T22:46:03Z", "message": "Remove old code\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}, "afterCommit": {"oid": "eab9eb1c9f1846f5de6ca07e67c4695647a8dc03", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/eab9eb1c9f1846f5de6ca07e67c4695647a8dc03", "committedDate": "2020-08-07T22:47:21Z", "message": "Remove old code\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczODgyMTU2", "url": "https://github.com/PGMDev/PGM/pull/598#pullrequestreview-473882156", "createdAt": "2020-08-24T21:51:29Z", "commit": {"oid": "273e9a801e88e1ba2a74872a03179561d5e31dbd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTo1MToyOVrOHF3isw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTo1NDoxOFrOHF3nQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkxNDkzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final TranslatableComponent title; // Title of the inventory\n          \n          \n            \n              private final Component title; // Title of the inventory\n          \n      \n    \n    \n  \n\nProbably best to make this a Component, a menu title in the future may not come from a translation. Such as if the menu name was that of a username.", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r475914931", "createdAt": "2020-08-24T21:51:29Z", "author": {"login": "applenick"}, "path": "core/src/main/java/tc/oc/pgm/menu/InventoryMenu.java", "diffHunk": "@@ -1,50 +1,75 @@\n package tc.oc.pgm.menu;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n+import com.google.common.collect.Lists;\n+import java.util.List;\n import java.util.WeakHashMap;\n import javax.annotation.Nullable;\n import net.kyori.text.TranslatableComponent;\n import org.bukkit.Bukkit;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.HandlerList;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.inventory.InventoryCloseEvent;\n import org.bukkit.inventory.Inventory;\n import org.bukkit.inventory.ItemStack;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchUnloadEvent;\n import tc.oc.pgm.api.player.MatchPlayer;\n import tc.oc.pgm.observers.ObserverToolsMatchModule;\n import tc.oc.pgm.util.StringUtils;\n import tc.oc.pgm.util.text.TextTranslations;\n \n-public abstract class InventoryMenu {\n+public class InventoryMenu implements Listener {\n \n   protected static final int ROW_WIDTH = 9; // Number of columns per row\n   protected static final int MAX_ROWS = 6; // Max allowed row size\n \n+  private final List<InventoryMenuItem> inventoryMenuItems;\n+\n   private final WeakHashMap<MatchPlayer, InventoryMenu> viewing =\n       new WeakHashMap<>(); // Map of players who are viewing the gui, along with the menu\n-  private final String title; // Title of the inventory\n+  private final TranslatableComponent title; // Title of the inventory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273e9a801e88e1ba2a74872a03179561d5e31dbd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkxNjA5Nw==", "bodyText": "See other comment", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r475916097", "createdAt": "2020-08-24T21:54:18Z", "author": {"login": "applenick"}, "path": "core/src/main/java/tc/oc/pgm/menu/InventoryMenu.java", "diffHunk": "@@ -1,50 +1,75 @@\n package tc.oc.pgm.menu;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n+import com.google.common.collect.Lists;\n+import java.util.List;\n import java.util.WeakHashMap;\n import javax.annotation.Nullable;\n import net.kyori.text.TranslatableComponent;\n import org.bukkit.Bukkit;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.HandlerList;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.inventory.InventoryClickEvent;\n+import org.bukkit.event.inventory.InventoryCloseEvent;\n import org.bukkit.inventory.Inventory;\n import org.bukkit.inventory.ItemStack;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchUnloadEvent;\n import tc.oc.pgm.api.player.MatchPlayer;\n import tc.oc.pgm.observers.ObserverToolsMatchModule;\n import tc.oc.pgm.util.StringUtils;\n import tc.oc.pgm.util.text.TextTranslations;\n \n-public abstract class InventoryMenu {\n+public class InventoryMenu implements Listener {\n \n   protected static final int ROW_WIDTH = 9; // Number of columns per row\n   protected static final int MAX_ROWS = 6; // Max allowed row size\n \n+  private final List<InventoryMenuItem> inventoryMenuItems;\n+\n   private final WeakHashMap<MatchPlayer, InventoryMenu> viewing =\n       new WeakHashMap<>(); // Map of players who are viewing the gui, along with the menu\n-  private final String title; // Title of the inventory\n+  private final TranslatableComponent title; // Title of the inventory\n   private final int rows; // The # of rows in the inventory\n \n   /**\n    * InventoryMenu: An easy way to make an GUI menu that users can interact with.\n    *\n    * <p>See {@link ObserverToolsMatchModule} for an example on implementation\n    *\n-   * <p>Note: Code here was extracted from PickerMatchModule to allow for reuse\n+   * <p>Note: Code here was initially extracted from PickerMatchModule to allow for reuse\n    *\n+   * @param match - The match this inventory should exist it\n    * @param title - A string that will be translated and made the inventory title\n    * @param rows - The amount of rows the inventory will be created with\n+   * @param items - The items this inventory will contain\n    */\n-  public InventoryMenu(String title, int rows) {\n+  public InventoryMenu(\n+      Match match, TranslatableComponent title, int rows, List<InventoryMenuItem> items) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273e9a801e88e1ba2a74872a03179561d5e31dbd"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1ODQ3MTQ4", "url": "https://github.com/PGMDev/PGM/pull/598#pullrequestreview-475847148", "createdAt": "2020-08-26T20:47:40Z", "commit": {"oid": "69b34653be0d20fed8143f45e1783abc184230bd"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69b34653be0d20fed8143f45e1783abc184230bd", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/69b34653be0d20fed8143f45e1783abc184230bd", "committedDate": "2020-08-25T11:37:46Z", "message": "Make inventory title a Component\n instead of TranslatableComponent\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}, "afterCommit": {"oid": "c195a566c33602389368ffbc282ac35815a64fb7", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/c195a566c33602389368ffbc282ac35815a64fb7", "committedDate": "2020-08-28T08:33:18Z", "message": "Make inventory title a Component\n instead of TranslatableComponent\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NjU3NzU2", "url": "https://github.com/PGMDev/PGM/pull/598#pullrequestreview-486657756", "createdAt": "2020-09-11T09:38:19Z", "commit": {"oid": "721bcd1e28d769fe3235825b5ea4d61d55aee72f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTozODoxOVrOHQXDbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjowOToxOVrOHQcPAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkxNjk3NQ==", "bodyText": "Unlikely, it would be easier to just deny via permissions them being used than to disable them/remove from menu", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r486916975", "createdAt": "2020-09-11T09:38:19Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/observers/ObserverToolsMatchModule.java", "diffHunk": "@@ -52,11 +44,20 @@ public ObserverToolsMatchModule createMatchModule(Match match) throws ModuleLoad\n   public static final Material TOOL_MATERIAL = Material.DIAMOND;\n \n   private final Match match;\n-  private ObserverToolMenu menu;\n+  private final InventoryMenu menu;\n+  private final InventoryMenuItem toolItem = new ObserverToolsInventoryMenuItem();\n \n   public ObserverToolsMatchModule(Match match) {\n     this.match = match;\n-    this.menu = new ObserverToolMenu();\n+\n+    // TODO?: Add config options to enable/disable each tool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "721bcd1e28d769fe3235825b5ea4d61d55aee72f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkyMTY2MA==", "bodyText": "Consider a method that takes Number stat as parameter, so both ints and doubles can be passed. Strings make no sense since it will literally throw an exception if you try a non-number string, so it makes no sense.\nIt would also eliminate the need for 2 \"numberComponent\" methods", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r486921660", "createdAt": "2020-09-11T09:43:08Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/stats/PlayerStatsInventoryMenuItem.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package tc.oc.pgm.stats;\n+\n+import static tc.oc.pgm.stats.StatsMatchModule.numberComponent;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import net.kyori.text.Component;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.inventory.ClickType;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.SkullMeta;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.menu.InventoryMenu;\n+import tc.oc.pgm.menu.InventoryMenuItem;\n+import tc.oc.pgm.util.text.TextTranslations;\n+\n+public class PlayerStatsInventoryMenuItem implements InventoryMenuItem {\n+\n+  private final MatchPlayer player;\n+  private final TextColor RESET = TextColor.WHITE;\n+\n+  PlayerStatsInventoryMenuItem(MatchPlayer player) {\n+    this.player = player;\n+  }\n+\n+  @Override\n+  public Component getName() {\n+    return player.getName();\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.GOLD;\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+    List<String> lore = new ArrayList<>();\n+    StatsMatchModule smm = player.getMatch().needModule(StatsMatchModule.class);\n+    StatsMatchModule.PlayerStats stats = smm.getPlayerStat(player.getId());\n+\n+    Component killLore =\n+        TranslatableComponent.of(\n+            \"match.stats.kills.concise\", RESET, numberComponent(stats.kills, TextColor.GREEN));\n+    Component deathLore =\n+        TranslatableComponent.of(\n+            \"match.stats.deaths.concise\", RESET, numberComponent(stats.deaths, TextColor.RED));\n+    Component kdLore =\n+        TranslatableComponent.of(\n+            \"match.stats.kd.concise\", RESET, numberComponent(stats.getKD(), TextColor.GREEN));\n+    Component killstreakLore =\n+        TranslatableComponent.of(\n+            \"match.stats.killstreak.concise\",\n+            RESET,\n+            numberComponent(stats.killstreakMax, TextColor.GREEN));\n+    Component damageLore =\n+        TranslatableComponent.of(\n+            \"match.stats.damage.concise\",\n+            RESET,\n+            numberComponent(stats.getDamageDone(), TextColor.GREEN),\n+            numberComponent(stats.getBowDamage(), TextColor.YELLOW),\n+            numberComponent(stats.getDamageTaken(), TextColor.RED));\n+    Component bowLore =\n+        TranslatableComponent.of(\n+            \"match.stats.bow.concise\",\n+            RESET,\n+            numberComponent(stats.shotsTaken, TextColor.YELLOW),\n+            numberComponent(stats.getArrowAccuracy(), TextColor.YELLOW));\n+\n+    Player bukkit = player.getBukkit();\n+\n+    lore.add(TextTranslations.translateLegacy(killLore, bukkit));\n+    lore.add(TextTranslations.translateLegacy(deathLore, bukkit));\n+    lore.add(TextTranslations.translateLegacy(kdLore, bukkit));\n+    lore.add(TextTranslations.translateLegacy(killstreakLore, bukkit));\n+    lore.add(TextTranslations.translateLegacy(damageLore, bukkit));\n+    lore.add(TextTranslations.translateLegacy(bowLore, bukkit));\n+\n+    optionalStat(lore, stats.flagsCaptured, \"match.stats.flagsCaptured.concise\", bukkit);\n+    optionalStat(lore, stats.destroyablePiecesBroken, \"match.stats.broken.concise\", bukkit);\n+    optionalStat(lore, stats.getLongestFlagHold(), \"match.stats.flaghold.concise\", bukkit);\n+\n+    return lore;\n+  }\n+\n+  private void optionalStat(List<String> lore, int stat, String key, Player bukkit) {\n+    if (stat > 0) {\n+      lore.add(null);\n+      Component loreComponent =\n+          TranslatableComponent.of(key, RESET, numberComponent(stat, TextColor.AQUA));\n+      lore.add(TextTranslations.translateLegacy(loreComponent, bukkit));\n+    }\n+  }\n+\n+  private void optionalStat(List<String> lore, String stat, String key, Player bukkit) {\n+    if (Double.parseDouble(stat) > 0) {\n+      lore.add(null);\n+      Component loreComponent =\n+          TranslatableComponent.of(key, RESET, numberComponent(stat, TextColor.AQUA));\n+      lore.add(TextTranslations.translateLegacy(loreComponent, bukkit));\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "721bcd1e28d769fe3235825b5ea4d61d55aee72f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkzNjQ3NQ==", "bodyText": "Give this a better name, what is the task for?", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r486936475", "createdAt": "2020-09-11T09:57:56Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/stats/StatsMatchModule.java", "diffHunk": "@@ -0,0 +1,492 @@\n+package tc.oc.pgm.stats;\n+\n+import com.google.common.collect.Lists;\n+import java.text.DecimalFormat;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import net.kyori.text.Component;\n+import net.kyori.text.TextComponent;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n+import net.kyori.text.format.TextDecoration;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.Action;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityShootBowEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.ParticipantState;\n+import tc.oc.pgm.api.player.PlayerRelation;\n+import tc.oc.pgm.api.player.event.MatchPlayerDeathEvent;\n+import tc.oc.pgm.api.setting.SettingKey;\n+import tc.oc.pgm.api.setting.SettingValue;\n+import tc.oc.pgm.destroyable.DestroyableHealthChange;\n+import tc.oc.pgm.destroyable.DestroyableHealthChangeEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.ffa.Tribute;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.flag.event.FlagPickupEvent;\n+import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n+import tc.oc.pgm.flag.state.Dropped;\n+import tc.oc.pgm.menu.InventoryMenu;\n+import tc.oc.pgm.menu.InventoryMenuItem;\n+import tc.oc.pgm.menu.InventoryMenuUtils;\n+import tc.oc.pgm.tracker.TrackerMatchModule;\n+import tc.oc.pgm.tracker.info.ProjectileInfo;\n+import tc.oc.pgm.util.named.NameStyle;\n+import tc.oc.pgm.util.text.TextFormatter;\n+import tc.oc.pgm.util.text.TextTranslations;\n+import tc.oc.pgm.util.text.types.PlayerComponent;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class StatsMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+  private final Map<UUID, PlayerStats> allPlayerStats = new HashMap<>();\n+  // Since Bukkit#getOfflinePlayer reads the cached user files, and those files have an expire date\n+  // + will be wiped if X amount of players join, we need a separate cache for players with stats\n+  private final Map<UUID, String> cachedUsernames = new HashMap<>();\n+\n+  private final boolean verboseStats = PGM.get().getConfiguration().showVerboseStats();\n+  private final Component verboseStatsTitle = TranslatableComponent.of(\"match.stats.title\");\n+\n+  public StatsMatchModule(Match match) {\n+    this.match = match;\n+  }\n+\n+  public static class PlayerStats {\n+    // K/D\n+    int kills;\n+    int deaths;\n+    int killstreak;\n+    int killstreakMax;\n+\n+    // Bow\n+    int longestBowKill;\n+    double bowDamage;\n+    int shotsTaken;\n+    int shotsHit;\n+\n+    // Damage\n+    double damageDone;\n+    double damageTaken;\n+\n+    // Objectives\n+    int destroyablePiecesBroken;\n+    int flagsCaptured;\n+\n+    Duration longestFlagHold;\n+    Instant longestFlagHoldCache;\n+\n+    //\n+    private Future<?> task;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "721bcd1e28d769fe3235825b5ea4d61d55aee72f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwMTE0MA==", "bodyText": "In reality, you just support teams not competitors, do a check on team match module existing or competitors being Team, instead of checking for no tributes", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r487001140", "createdAt": "2020-09-11T12:07:50Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/stats/StatsMatchModule.java", "diffHunk": "@@ -0,0 +1,492 @@\n+package tc.oc.pgm.stats;\n+\n+import com.google.common.collect.Lists;\n+import java.text.DecimalFormat;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import net.kyori.text.Component;\n+import net.kyori.text.TextComponent;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n+import net.kyori.text.format.TextDecoration;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.Action;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityShootBowEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.ParticipantState;\n+import tc.oc.pgm.api.player.PlayerRelation;\n+import tc.oc.pgm.api.player.event.MatchPlayerDeathEvent;\n+import tc.oc.pgm.api.setting.SettingKey;\n+import tc.oc.pgm.api.setting.SettingValue;\n+import tc.oc.pgm.destroyable.DestroyableHealthChange;\n+import tc.oc.pgm.destroyable.DestroyableHealthChangeEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.ffa.Tribute;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.flag.event.FlagPickupEvent;\n+import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n+import tc.oc.pgm.flag.state.Dropped;\n+import tc.oc.pgm.menu.InventoryMenu;\n+import tc.oc.pgm.menu.InventoryMenuItem;\n+import tc.oc.pgm.menu.InventoryMenuUtils;\n+import tc.oc.pgm.tracker.TrackerMatchModule;\n+import tc.oc.pgm.tracker.info.ProjectileInfo;\n+import tc.oc.pgm.util.named.NameStyle;\n+import tc.oc.pgm.util.text.TextFormatter;\n+import tc.oc.pgm.util.text.TextTranslations;\n+import tc.oc.pgm.util.text.types.PlayerComponent;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class StatsMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+  private final Map<UUID, PlayerStats> allPlayerStats = new HashMap<>();\n+  // Since Bukkit#getOfflinePlayer reads the cached user files, and those files have an expire date\n+  // + will be wiped if X amount of players join, we need a separate cache for players with stats\n+  private final Map<UUID, String> cachedUsernames = new HashMap<>();\n+\n+  private final boolean verboseStats = PGM.get().getConfiguration().showVerboseStats();\n+  private final Component verboseStatsTitle = TranslatableComponent.of(\"match.stats.title\");\n+\n+  public StatsMatchModule(Match match) {\n+    this.match = match;\n+  }\n+\n+  public static class PlayerStats {\n+    // K/D\n+    int kills;\n+    int deaths;\n+    int killstreak;\n+    int killstreakMax;\n+\n+    // Bow\n+    int longestBowKill;\n+    double bowDamage;\n+    int shotsTaken;\n+    int shotsHit;\n+\n+    // Damage\n+    double damageDone;\n+    double damageTaken;\n+\n+    // Objectives\n+    int destroyablePiecesBroken;\n+    int flagsCaptured;\n+\n+    Duration longestFlagHold;\n+    Instant longestFlagHoldCache;\n+\n+    //\n+    private Future<?> task;\n+\n+    private void onMurder() {\n+      kills++;\n+      killstreak++;\n+      if (killstreak > killstreakMax) killstreakMax = killstreak;\n+    }\n+\n+    private void onDeath() {\n+      deaths++;\n+      killstreak = 0;\n+    }\n+\n+    private void onDamage(double damage, boolean bow) {\n+      damageDone += damage;\n+      if (bow) {\n+        bowDamage += damage;\n+        shotsHit++;\n+      }\n+    }\n+\n+    private void onDamaged(double damage) {\n+      damageTaken += damage;\n+    }\n+\n+    private void onDestroyablePieceBroken(int change) {\n+      destroyablePiecesBroken += change;\n+    }\n+\n+    private void onFlagCapture() {\n+      flagsCaptured++;\n+      onFlagDrop();\n+    }\n+\n+    private void onFlagPickup() {\n+      longestFlagHoldCache = Instant.now();\n+    }\n+\n+    private void onFlagDrop() {\n+      setLongestFlagHold(\n+          Duration.ofMillis(Instant.now().toEpochMilli() - longestFlagHoldCache.toEpochMilli()));\n+    }\n+\n+    private void setLongestFlagHold(Duration time) {\n+      if ((time.toNanos() - longestFlagHold.toNanos()) > 0) longestFlagHold = time;\n+    }\n+\n+    private void setLongestBowKill(double distance) {\n+      if (distance > longestBowKill) {\n+        longestBowKill = (int) Math.ceil(distance);\n+      }\n+    }\n+\n+    private void onBowShoot() {\n+      shotsTaken++;\n+    }\n+\n+    /** A common format used by all stats with decimals */\n+    public static final DecimalFormat STATS_DECIMALFORMAT = new DecimalFormat(\"#.##\");\n+\n+    public static String statFormat(Object number) {\n+      return STATS_DECIMALFORMAT.format(number);\n+    }\n+\n+    public Component getBasicStatsMessage() {\n+      return TranslatableComponent.of(\n+          \"match.stats\",\n+          TextColor.GRAY,\n+          TextComponent.of(kills, TextColor.GREEN),\n+          TextComponent.of(killstreak, TextColor.GREEN),\n+          TextComponent.of(deaths, TextColor.RED),\n+          TextComponent.of(getKD(), TextColor.GREEN));\n+    }\n+\n+    // Methods that gives stats with decimals already formatted\n+\n+    public String getKD() {\n+      String kd;\n+      if (deaths == 0) {\n+        kd = Double.toString(kills);\n+      } else {\n+        kd = statFormat(kills / (double) deaths);\n+      }\n+      return kd;\n+    }\n+\n+    public String getArrowAccuracy() {\n+      String acc;\n+      if (shotsTaken == 0) acc = String.valueOf(100);\n+      else acc = statFormat(shotsHit / (shotsTaken / (double) 100));\n+      return acc;\n+    }\n+\n+    public String getDamageDone() {\n+      return statFormat(damageDone);\n+    }\n+\n+    public String getBowDamage() {\n+      return statFormat(bowDamage);\n+    }\n+\n+    public String getDamageTaken() {\n+      return statFormat(damageTaken);\n+    }\n+\n+    public String getLongestFlagHold() {\n+      if (longestFlagHold == null) return String.valueOf(0);\n+      return String.valueOf(longestFlagHold.toMinutes());\n+    }\n+  }\n+\n+  @EventHandler\n+  public void onDamage(EntityDamageByEntityEvent event) {\n+    ParticipantState damager =\n+        match.needModule(TrackerMatchModule.class).getOwner(event.getDamager());\n+    ParticipantState damaged = match.getParticipantState(event.getEntity());\n+    boolean bow = event.getDamager() instanceof Arrow;\n+    if (damager != null) getPlayerStat(damager).onDamage(event.getFinalDamage(), bow);\n+    if (damaged != null) getPlayerStat(damaged).onDamaged(event.getFinalDamage());\n+  }\n+\n+  @EventHandler\n+  public void onShoot(EntityShootBowEvent event) {\n+    if (event.getEntity() instanceof Player) {\n+      MatchPlayer player = match.getPlayer(event.getEntity());\n+      if (player != null) getPlayerStat(player).onBowShoot();\n+    }\n+  }\n+\n+  @EventHandler\n+  public void onDestroyableBreak(DestroyableHealthChangeEvent event) {\n+    DestroyableHealthChange change = event.getChange();\n+    if (change != null && change.getHealthChange() > 0 && change.getPlayerCause() != null)\n+      getPlayerStat(change.getPlayerCause()).onDestroyablePieceBroken(change.getHealthChange());\n+  }\n+\n+  @EventHandler\n+  public void onFlagCapture(FlagCaptureEvent event) {\n+    getPlayerStat(event.getCarrier()).onFlagCapture();\n+  }\n+\n+  @EventHandler\n+  public void onFlagHold(FlagPickupEvent event) {\n+    getPlayerStat(event.getCarrier()).onFlagPickup();\n+  }\n+\n+  @EventHandler\n+  public void onFlagDrop(FlagStateChangeEvent event) {\n+    if (event.getOldState() instanceof Dropped)\n+      getPlayerStat(((Dropped) event.getOldState()).getDropper()).onFlagDrop();\n+  }\n+\n+  @EventHandler\n+  public void onPlayerDeath(MatchPlayerDeathEvent event) {\n+    MatchPlayer victim = event.getVictim();\n+    MatchPlayer murderer = null;\n+\n+    if (event.getKiller() != null)\n+      murderer = event.getKiller().getParty().getPlayer(event.getKiller().getId());\n+\n+    if (victim.getSettings().getValue(SettingKey.STATS).equals(SettingValue.STATS_ON)) {\n+      PlayerStats victimStats = getPlayerStat(victim);\n+\n+      victimStats.onDeath();\n+\n+      sendPlayerStats(victim, victimStats);\n+    }\n+\n+    if (murderer != null\n+        && PlayerRelation.get(victim.getParticipantState(), murderer) != PlayerRelation.ALLY\n+        && PlayerRelation.get(victim.getParticipantState(), murderer) != PlayerRelation.SELF\n+        && murderer.getSettings().getValue(SettingKey.STATS).equals(SettingValue.STATS_ON)) {\n+\n+      PlayerStats murdererStats = getPlayerStat(murderer);\n+\n+      if (event.getDamageInfo() instanceof ProjectileInfo) {\n+        murdererStats.setLongestBowKill(\n+            victim\n+                .getState()\n+                .getLocation()\n+                .distance(((ProjectileInfo) event.getDamageInfo()).getOrigin()));\n+      }\n+\n+      murdererStats.onMurder();\n+\n+      sendPlayerStats(murderer, murdererStats);\n+    }\n+  }\n+\n+  private void sendPlayerStats(MatchPlayer player, PlayerStats stats) {\n+    if (stats.task != null && !stats.task.isDone()) {\n+      stats.task.cancel(true);\n+    }\n+    stats.task = sendLongHotbarMessage(player, stats.getBasicStatsMessage());\n+  }\n+\n+  private Future<?> sendLongHotbarMessage(MatchPlayer player, Component message) {\n+    Future<?> task =\n+        match\n+            .getExecutor(MatchScope.LOADED)\n+            .scheduleWithFixedDelay(() -> player.showHotbar(message), 0, 1, TimeUnit.SECONDS);\n+\n+    match.getExecutor(MatchScope.LOADED).schedule(() -> task.cancel(true), 4, TimeUnit.SECONDS);\n+\n+    return task;\n+  }\n+\n+  @EventHandler\n+  public void onMatchEnd(MatchFinishEvent event) {\n+\n+    if (allPlayerStats.isEmpty()) return;\n+\n+    Map<UUID, Integer> allKills = new HashMap<>();\n+    Map<UUID, Integer> allKillstreaks = new HashMap<>();\n+    Map<UUID, Integer> allDeaths = new HashMap<>();\n+    Map<UUID, Integer> allBowshots = new HashMap<>();\n+    Map<UUID, Double> allDamage = new HashMap<>();\n+\n+    for (Map.Entry<UUID, PlayerStats> mapEntry : allPlayerStats.entrySet()) {\n+      UUID playerUUID = mapEntry.getKey();\n+      PlayerStats playerStats = mapEntry.getValue();\n+\n+      getPlayerStat(playerUUID);\n+\n+      allKills.put(playerUUID, playerStats.kills);\n+      allKillstreaks.put(playerUUID, playerStats.killstreakMax);\n+      allDeaths.put(playerUUID, playerStats.deaths);\n+      allBowshots.put(playerUUID, playerStats.longestBowKill);\n+      allDamage.put(playerUUID, playerStats.damageDone);\n+    }\n+\n+    Component killMessage = getMessage(\"match.stats.kills\", sortStats(allKills), TextColor.GREEN);\n+    Component killstreakMessage =\n+        getMessage(\"match.stats.killstreak\", sortStats(allKillstreaks), TextColor.GREEN);\n+    Component deathMessage = getMessage(\"match.stats.deaths\", sortStats(allDeaths), TextColor.RED);\n+    Map.Entry<UUID, Integer> bestBowshot = sortStats(allBowshots);\n+    if (bestBowshot.getValue() == 1)\n+      bestBowshot.setValue(2); // Avoids translating \"1 block\" vs \"n blocks\"\n+    Component bowshotMessage = getMessage(\"match.stats.bowshot\", bestBowshot, TextColor.YELLOW);\n+    Component damageMessage =\n+        getMessage(\"match.stats.damage\", sortStatsDouble(allDamage), TextColor.GREEN);\n+\n+    match\n+        .getExecutor(MatchScope.LOADED)\n+        .schedule(\n+            () -> {\n+              for (MatchPlayer viewer : match.getPlayers()) {\n+                if (viewer.getSettings().getValue(SettingKey.STATS) == SettingValue.STATS_OFF)\n+                  continue;\n+\n+                viewer.sendMessage(\n+                    TextFormatter.horizontalLineHeading(\n+                        viewer.getBukkit(),\n+                        TranslatableComponent.of(\"match.stats.title\", TextColor.YELLOW),\n+                        TextColor.WHITE));\n+                viewer.sendMessage(killMessage);\n+                viewer.sendMessage(killstreakMessage);\n+                viewer.sendMessage(deathMessage);\n+                if (bestBowshot.getValue() != 0) viewer.sendMessage(bowshotMessage);\n+                viewer.sendMessage(damageMessage);\n+                if (verboseStats) viewer.getInventory().setItem(7, createToolItem(viewer));\n+              }\n+            },\n+            5 + 1, // NOTE: This is 1 second after the votebook appears\n+            TimeUnit.SECONDS);\n+\n+    final Collection<Competitor> competitors = match.getCompetitors();\n+    // TODO: Support all Parties, Tributes(FFA)\n+    if (verboseStats && competitors.stream().noneMatch(c -> c instanceof Tribute)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "721bcd1e28d769fe3235825b5ea4d61d55aee72f"}, "originalPosition": 375}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwMTg1Nw==", "bodyText": "There's a translatable for unknown, it's used in the tablist for unresolved authors, use it here", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r487001857", "createdAt": "2020-09-11T12:09:19Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/stats/StatsMatchModule.java", "diffHunk": "@@ -0,0 +1,492 @@\n+package tc.oc.pgm.stats;\n+\n+import com.google.common.collect.Lists;\n+import java.text.DecimalFormat;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import net.kyori.text.Component;\n+import net.kyori.text.TextComponent;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n+import net.kyori.text.format.TextDecoration;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.Action;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityShootBowEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.ParticipantState;\n+import tc.oc.pgm.api.player.PlayerRelation;\n+import tc.oc.pgm.api.player.event.MatchPlayerDeathEvent;\n+import tc.oc.pgm.api.setting.SettingKey;\n+import tc.oc.pgm.api.setting.SettingValue;\n+import tc.oc.pgm.destroyable.DestroyableHealthChange;\n+import tc.oc.pgm.destroyable.DestroyableHealthChangeEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.ffa.Tribute;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.flag.event.FlagPickupEvent;\n+import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n+import tc.oc.pgm.flag.state.Dropped;\n+import tc.oc.pgm.menu.InventoryMenu;\n+import tc.oc.pgm.menu.InventoryMenuItem;\n+import tc.oc.pgm.menu.InventoryMenuUtils;\n+import tc.oc.pgm.tracker.TrackerMatchModule;\n+import tc.oc.pgm.tracker.info.ProjectileInfo;\n+import tc.oc.pgm.util.named.NameStyle;\n+import tc.oc.pgm.util.text.TextFormatter;\n+import tc.oc.pgm.util.text.TextTranslations;\n+import tc.oc.pgm.util.text.types.PlayerComponent;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class StatsMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+  private final Map<UUID, PlayerStats> allPlayerStats = new HashMap<>();\n+  // Since Bukkit#getOfflinePlayer reads the cached user files, and those files have an expire date\n+  // + will be wiped if X amount of players join, we need a separate cache for players with stats\n+  private final Map<UUID, String> cachedUsernames = new HashMap<>();\n+\n+  private final boolean verboseStats = PGM.get().getConfiguration().showVerboseStats();\n+  private final Component verboseStatsTitle = TranslatableComponent.of(\"match.stats.title\");\n+\n+  public StatsMatchModule(Match match) {\n+    this.match = match;\n+  }\n+\n+  public static class PlayerStats {\n+    // K/D\n+    int kills;\n+    int deaths;\n+    int killstreak;\n+    int killstreakMax;\n+\n+    // Bow\n+    int longestBowKill;\n+    double bowDamage;\n+    int shotsTaken;\n+    int shotsHit;\n+\n+    // Damage\n+    double damageDone;\n+    double damageTaken;\n+\n+    // Objectives\n+    int destroyablePiecesBroken;\n+    int flagsCaptured;\n+\n+    Duration longestFlagHold;\n+    Instant longestFlagHoldCache;\n+\n+    //\n+    private Future<?> task;\n+\n+    private void onMurder() {\n+      kills++;\n+      killstreak++;\n+      if (killstreak > killstreakMax) killstreakMax = killstreak;\n+    }\n+\n+    private void onDeath() {\n+      deaths++;\n+      killstreak = 0;\n+    }\n+\n+    private void onDamage(double damage, boolean bow) {\n+      damageDone += damage;\n+      if (bow) {\n+        bowDamage += damage;\n+        shotsHit++;\n+      }\n+    }\n+\n+    private void onDamaged(double damage) {\n+      damageTaken += damage;\n+    }\n+\n+    private void onDestroyablePieceBroken(int change) {\n+      destroyablePiecesBroken += change;\n+    }\n+\n+    private void onFlagCapture() {\n+      flagsCaptured++;\n+      onFlagDrop();\n+    }\n+\n+    private void onFlagPickup() {\n+      longestFlagHoldCache = Instant.now();\n+    }\n+\n+    private void onFlagDrop() {\n+      setLongestFlagHold(\n+          Duration.ofMillis(Instant.now().toEpochMilli() - longestFlagHoldCache.toEpochMilli()));\n+    }\n+\n+    private void setLongestFlagHold(Duration time) {\n+      if ((time.toNanos() - longestFlagHold.toNanos()) > 0) longestFlagHold = time;\n+    }\n+\n+    private void setLongestBowKill(double distance) {\n+      if (distance > longestBowKill) {\n+        longestBowKill = (int) Math.ceil(distance);\n+      }\n+    }\n+\n+    private void onBowShoot() {\n+      shotsTaken++;\n+    }\n+\n+    /** A common format used by all stats with decimals */\n+    public static final DecimalFormat STATS_DECIMALFORMAT = new DecimalFormat(\"#.##\");\n+\n+    public static String statFormat(Object number) {\n+      return STATS_DECIMALFORMAT.format(number);\n+    }\n+\n+    public Component getBasicStatsMessage() {\n+      return TranslatableComponent.of(\n+          \"match.stats\",\n+          TextColor.GRAY,\n+          TextComponent.of(kills, TextColor.GREEN),\n+          TextComponent.of(killstreak, TextColor.GREEN),\n+          TextComponent.of(deaths, TextColor.RED),\n+          TextComponent.of(getKD(), TextColor.GREEN));\n+    }\n+\n+    // Methods that gives stats with decimals already formatted\n+\n+    public String getKD() {\n+      String kd;\n+      if (deaths == 0) {\n+        kd = Double.toString(kills);\n+      } else {\n+        kd = statFormat(kills / (double) deaths);\n+      }\n+      return kd;\n+    }\n+\n+    public String getArrowAccuracy() {\n+      String acc;\n+      if (shotsTaken == 0) acc = String.valueOf(100);\n+      else acc = statFormat(shotsHit / (shotsTaken / (double) 100));\n+      return acc;\n+    }\n+\n+    public String getDamageDone() {\n+      return statFormat(damageDone);\n+    }\n+\n+    public String getBowDamage() {\n+      return statFormat(bowDamage);\n+    }\n+\n+    public String getDamageTaken() {\n+      return statFormat(damageTaken);\n+    }\n+\n+    public String getLongestFlagHold() {\n+      if (longestFlagHold == null) return String.valueOf(0);\n+      return String.valueOf(longestFlagHold.toMinutes());\n+    }\n+  }\n+\n+  @EventHandler\n+  public void onDamage(EntityDamageByEntityEvent event) {\n+    ParticipantState damager =\n+        match.needModule(TrackerMatchModule.class).getOwner(event.getDamager());\n+    ParticipantState damaged = match.getParticipantState(event.getEntity());\n+    boolean bow = event.getDamager() instanceof Arrow;\n+    if (damager != null) getPlayerStat(damager).onDamage(event.getFinalDamage(), bow);\n+    if (damaged != null) getPlayerStat(damaged).onDamaged(event.getFinalDamage());\n+  }\n+\n+  @EventHandler\n+  public void onShoot(EntityShootBowEvent event) {\n+    if (event.getEntity() instanceof Player) {\n+      MatchPlayer player = match.getPlayer(event.getEntity());\n+      if (player != null) getPlayerStat(player).onBowShoot();\n+    }\n+  }\n+\n+  @EventHandler\n+  public void onDestroyableBreak(DestroyableHealthChangeEvent event) {\n+    DestroyableHealthChange change = event.getChange();\n+    if (change != null && change.getHealthChange() > 0 && change.getPlayerCause() != null)\n+      getPlayerStat(change.getPlayerCause()).onDestroyablePieceBroken(change.getHealthChange());\n+  }\n+\n+  @EventHandler\n+  public void onFlagCapture(FlagCaptureEvent event) {\n+    getPlayerStat(event.getCarrier()).onFlagCapture();\n+  }\n+\n+  @EventHandler\n+  public void onFlagHold(FlagPickupEvent event) {\n+    getPlayerStat(event.getCarrier()).onFlagPickup();\n+  }\n+\n+  @EventHandler\n+  public void onFlagDrop(FlagStateChangeEvent event) {\n+    if (event.getOldState() instanceof Dropped)\n+      getPlayerStat(((Dropped) event.getOldState()).getDropper()).onFlagDrop();\n+  }\n+\n+  @EventHandler\n+  public void onPlayerDeath(MatchPlayerDeathEvent event) {\n+    MatchPlayer victim = event.getVictim();\n+    MatchPlayer murderer = null;\n+\n+    if (event.getKiller() != null)\n+      murderer = event.getKiller().getParty().getPlayer(event.getKiller().getId());\n+\n+    if (victim.getSettings().getValue(SettingKey.STATS).equals(SettingValue.STATS_ON)) {\n+      PlayerStats victimStats = getPlayerStat(victim);\n+\n+      victimStats.onDeath();\n+\n+      sendPlayerStats(victim, victimStats);\n+    }\n+\n+    if (murderer != null\n+        && PlayerRelation.get(victim.getParticipantState(), murderer) != PlayerRelation.ALLY\n+        && PlayerRelation.get(victim.getParticipantState(), murderer) != PlayerRelation.SELF\n+        && murderer.getSettings().getValue(SettingKey.STATS).equals(SettingValue.STATS_ON)) {\n+\n+      PlayerStats murdererStats = getPlayerStat(murderer);\n+\n+      if (event.getDamageInfo() instanceof ProjectileInfo) {\n+        murdererStats.setLongestBowKill(\n+            victim\n+                .getState()\n+                .getLocation()\n+                .distance(((ProjectileInfo) event.getDamageInfo()).getOrigin()));\n+      }\n+\n+      murdererStats.onMurder();\n+\n+      sendPlayerStats(murderer, murdererStats);\n+    }\n+  }\n+\n+  private void sendPlayerStats(MatchPlayer player, PlayerStats stats) {\n+    if (stats.task != null && !stats.task.isDone()) {\n+      stats.task.cancel(true);\n+    }\n+    stats.task = sendLongHotbarMessage(player, stats.getBasicStatsMessage());\n+  }\n+\n+  private Future<?> sendLongHotbarMessage(MatchPlayer player, Component message) {\n+    Future<?> task =\n+        match\n+            .getExecutor(MatchScope.LOADED)\n+            .scheduleWithFixedDelay(() -> player.showHotbar(message), 0, 1, TimeUnit.SECONDS);\n+\n+    match.getExecutor(MatchScope.LOADED).schedule(() -> task.cancel(true), 4, TimeUnit.SECONDS);\n+\n+    return task;\n+  }\n+\n+  @EventHandler\n+  public void onMatchEnd(MatchFinishEvent event) {\n+\n+    if (allPlayerStats.isEmpty()) return;\n+\n+    Map<UUID, Integer> allKills = new HashMap<>();\n+    Map<UUID, Integer> allKillstreaks = new HashMap<>();\n+    Map<UUID, Integer> allDeaths = new HashMap<>();\n+    Map<UUID, Integer> allBowshots = new HashMap<>();\n+    Map<UUID, Double> allDamage = new HashMap<>();\n+\n+    for (Map.Entry<UUID, PlayerStats> mapEntry : allPlayerStats.entrySet()) {\n+      UUID playerUUID = mapEntry.getKey();\n+      PlayerStats playerStats = mapEntry.getValue();\n+\n+      getPlayerStat(playerUUID);\n+\n+      allKills.put(playerUUID, playerStats.kills);\n+      allKillstreaks.put(playerUUID, playerStats.killstreakMax);\n+      allDeaths.put(playerUUID, playerStats.deaths);\n+      allBowshots.put(playerUUID, playerStats.longestBowKill);\n+      allDamage.put(playerUUID, playerStats.damageDone);\n+    }\n+\n+    Component killMessage = getMessage(\"match.stats.kills\", sortStats(allKills), TextColor.GREEN);\n+    Component killstreakMessage =\n+        getMessage(\"match.stats.killstreak\", sortStats(allKillstreaks), TextColor.GREEN);\n+    Component deathMessage = getMessage(\"match.stats.deaths\", sortStats(allDeaths), TextColor.RED);\n+    Map.Entry<UUID, Integer> bestBowshot = sortStats(allBowshots);\n+    if (bestBowshot.getValue() == 1)\n+      bestBowshot.setValue(2); // Avoids translating \"1 block\" vs \"n blocks\"\n+    Component bowshotMessage = getMessage(\"match.stats.bowshot\", bestBowshot, TextColor.YELLOW);\n+    Component damageMessage =\n+        getMessage(\"match.stats.damage\", sortStatsDouble(allDamage), TextColor.GREEN);\n+\n+    match\n+        .getExecutor(MatchScope.LOADED)\n+        .schedule(\n+            () -> {\n+              for (MatchPlayer viewer : match.getPlayers()) {\n+                if (viewer.getSettings().getValue(SettingKey.STATS) == SettingValue.STATS_OFF)\n+                  continue;\n+\n+                viewer.sendMessage(\n+                    TextFormatter.horizontalLineHeading(\n+                        viewer.getBukkit(),\n+                        TranslatableComponent.of(\"match.stats.title\", TextColor.YELLOW),\n+                        TextColor.WHITE));\n+                viewer.sendMessage(killMessage);\n+                viewer.sendMessage(killstreakMessage);\n+                viewer.sendMessage(deathMessage);\n+                if (bestBowshot.getValue() != 0) viewer.sendMessage(bowshotMessage);\n+                viewer.sendMessage(damageMessage);\n+                if (verboseStats) viewer.getInventory().setItem(7, createToolItem(viewer));\n+              }\n+            },\n+            5 + 1, // NOTE: This is 1 second after the votebook appears\n+            TimeUnit.SECONDS);\n+\n+    final Collection<Competitor> competitors = match.getCompetitors();\n+    // TODO: Support all Parties, Tributes(FFA)\n+    if (verboseStats && competitors.stream().noneMatch(c -> c instanceof Tribute)) {\n+\n+      final List<InventoryMenuItem> items =\n+          competitors.stream()\n+              .map(c -> new TeamInventoryMenuItem(match, c))\n+              .collect(Collectors.toList());\n+\n+      endOfMatchMenu =\n+          competitors.size() <= 4\n+              ? InventoryMenuUtils.smallMenu(match, verboseStatsTitle, items)\n+              : InventoryMenuUtils.progressiveMenu(match, verboseStatsTitle, items);\n+    }\n+  }\n+\n+  InventoryMenu endOfMatchMenu;\n+\n+  private ItemStack createToolItem(MatchPlayer player) {\n+    ItemStack tool = new ItemStack(Material.RED_SANDSTONE);\n+    ItemMeta meta = tool.getItemMeta();\n+    Component displayName =\n+        TranslatableComponent.of(\"match.stats.title\", TextColor.GREEN, TextDecoration.BOLD);\n+    Component lore = TranslatableComponent.of(\"setting.lore\", TextColor.GRAY);\n+    meta.setDisplayName(TextTranslations.translateLegacy(displayName, player.getBukkit()));\n+    meta.setLore(Lists.newArrayList(TextTranslations.translateLegacy(lore, player.getBukkit())));\n+    meta.addItemFlags(ItemFlag.values());\n+    tool.setItemMeta(meta);\n+    return tool;\n+  }\n+\n+  @EventHandler\n+  public void onToolClick(PlayerInteractEvent event) {\n+    if (!verboseStats) return;\n+    Action action = event.getAction();\n+    if ((action == Action.RIGHT_CLICK_AIR || action == Action.RIGHT_CLICK_BLOCK)\n+        && match.isFinished()) {\n+      ItemStack item = event.getPlayer().getItemInHand();\n+\n+      if (item.getType() == Material.RED_SANDSTONE) {\n+        MatchPlayer player = match.getPlayer(event.getPlayer());\n+        if (player == null) return;\n+        endOfMatchMenu.display(player);\n+      }\n+    }\n+  }\n+\n+  private Map.Entry<UUID, Integer> sortStats(Map<UUID, Integer> map) {\n+    return map.entrySet().stream().max(Comparator.comparingInt(Map.Entry::getValue)).orElse(null);\n+  }\n+\n+  private Map.Entry<UUID, Double> sortStatsDouble(Map<UUID, Double> map) {\n+    return map.entrySet().stream()\n+        .max(Comparator.comparingDouble(Map.Entry::getValue))\n+        .orElse(null);\n+  }\n+\n+  Component getMessage(\n+      String messageKey, Map.Entry<UUID, ? extends Number> mapEntry, TextColor color) {\n+    return TranslatableComponent.of(\n+        messageKey,\n+        playerName(mapEntry.getKey()),\n+        numberComponent(String.valueOf(mapEntry.getValue()), color));\n+  }\n+\n+  public static Component numberComponent(int stat, TextColor color) {\n+    return TextComponent.of(stat, color, TextDecoration.BOLD);\n+  }\n+\n+  public static Component numberComponent(String stat, TextColor color) {\n+    return TextComponent.of(stat, color, TextDecoration.BOLD);\n+  }\n+\n+  @EventHandler\n+  public void onPlayerLeave(PlayerQuitEvent event) {\n+    Player player = event.getPlayer();\n+    if (allPlayerStats.containsKey(player.getUniqueId()))\n+      cachedUsernames.put(player.getUniqueId(), player.getName());\n+  }\n+\n+  @EventHandler\n+  public void onPlayerJoin(PlayerJoinEvent event) {\n+    UUID playerUUID = event.getPlayer().getUniqueId();\n+    cachedUsernames.remove(playerUUID);\n+  }\n+\n+  private Component playerName(UUID playerUUID) {\n+    return PlayerComponent.of(\n+        Bukkit.getPlayer(playerUUID),\n+        cachedUsernames.getOrDefault(playerUUID, \"Unknown\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "721bcd1e28d769fe3235825b5ea4d61d55aee72f"}, "originalPosition": 462}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MzA5ODI2", "url": "https://github.com/PGMDev/PGM/pull/598#pullrequestreview-488309826", "createdAt": "2020-09-15T04:14:51Z", "commit": {"oid": "8facb9d192efdef172db5b68177a77e71b5c1a59"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDoxNDo1MVrOHRv4QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDoxNDo1MVrOHRv4QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3MjI4OA==", "bodyText": "Won't this create 3.333333333 things unless passed thru a number format?", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r488372288", "createdAt": "2020-09-15T04:14:51Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/stats/StatsMatchModule.java", "diffHunk": "@@ -430,17 +432,13 @@ public void onToolClick(PlayerInteractEvent event) {\n   Component getMessage(\n       String messageKey, Map.Entry<UUID, ? extends Number> mapEntry, TextColor color) {\n     return TranslatableComponent.of(\n-        messageKey,\n-        playerName(mapEntry.getKey()),\n-        numberComponent(String.valueOf(mapEntry.getValue()), color));\n-  }\n-\n-  public static Component numberComponent(int stat, TextColor color) {\n-    return TextComponent.of(stat, color, TextDecoration.BOLD);\n+        messageKey, playerName(mapEntry.getKey()), numberComponent(mapEntry.getValue(), color));\n   }\n \n-  public static Component numberComponent(String stat, TextColor color) {\n-    return TextComponent.of(stat, color, TextDecoration.BOLD);\n+  public static Component numberComponent(Number stat, TextColor color) {\n+    double doubleStat = stat.doubleValue();\n+    if (doubleStat % 1 == 0) return TextComponent.of((int) stat, color, TextDecoration.BOLD);\n+    else return TextComponent.of((double) stat, color, TextDecoration.BOLD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8facb9d192efdef172db5b68177a77e71b5c1a59"}, "originalPosition": 153}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNTE0NDg5", "url": "https://github.com/PGMDev/PGM/pull/598#pullrequestreview-491514489", "createdAt": "2020-09-18T14:24:25Z", "commit": {"oid": "44794bc429b9aac52d4ce157e4595049d2cf96b7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoyNDoyNVrOHUPavg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoyODoyM1rOHUPlEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4NjE3NA==", "bodyText": "Consider leaving a Double.NaN in here, and on the component display as a - or similar, to show no number rather than 100% or 0%", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r490986174", "createdAt": "2020-09-18T14:24:25Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/stats/TeamInventoryMenuItem.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package tc.oc.pgm.stats;\n+\n+import static tc.oc.pgm.stats.StatsMatchModule.PlayerStats.statFormat;\n+import static tc.oc.pgm.stats.StatsMatchModule.numberComponent;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import net.kyori.text.Component;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.inventory.ClickType;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.menu.InventoryMenu;\n+import tc.oc.pgm.menu.InventoryMenuItem;\n+import tc.oc.pgm.menu.InventoryMenuUtils;\n+import tc.oc.pgm.util.bukkit.BukkitUtils;\n+import tc.oc.pgm.util.text.TextTranslations;\n+\n+public class TeamInventoryMenuItem implements InventoryMenuItem {\n+\n+  private final Competitor team;\n+  private final InventoryMenu teamSubGUI;\n+\n+  private final TextColor RESET = TextColor.WHITE;\n+\n+  TeamInventoryMenuItem(Match match, Competitor team) {\n+    this.team = team;\n+    this.teamSubGUI =\n+        InventoryMenuUtils.prettyMenu(\n+            match,\n+            TranslatableComponent.of(\"match.stats.title\"),\n+            team.getPlayers().stream()\n+                .map(PlayerStatsInventoryMenuItem::new)\n+                .collect(Collectors.toList()));\n+  }\n+\n+  @Override\n+  public Component getName() {\n+    return TranslatableComponent.of(\"match.stats.team\", team.getName());\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.valueOf(team.getColor().name());\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+\n+    StatsMatchModule smm = player.getMatch().needModule(StatsMatchModule.class);\n+    List<String> lore = new ArrayList<>();\n+    int teamKills = 0;\n+    int teamDeaths = 0;\n+    double damageDone = 0;\n+    double damageTaken = 0;\n+    double bowDamage = 0;\n+    int shotsTaken = 0;\n+    int shotsHit = 0;\n+    for (MatchPlayer teamPlayer : team.getPlayers()) {\n+      StatsMatchModule.PlayerStats stats = smm.getPlayerStat(teamPlayer.getId());\n+      teamKills += stats.kills;\n+      teamDeaths += stats.deaths;\n+      damageDone += stats.getDamageDone();\n+      damageTaken += stats.getDamageTaken();\n+      bowDamage += stats.getBowDamage();\n+      shotsTaken += stats.shotsTaken;\n+      shotsHit += stats.shotsHit;\n+    }\n+\n+    double teamKD = teamDeaths == 0 ? teamKills : statFormat(teamKills / (double) teamDeaths);\n+    // You hit 100% of the shots you dont take? :thinking:\n+    double teamBowAcc = shotsTaken == 0 ? 100 : statFormat(shotsHit / (shotsTaken / (double) 100));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44794bc429b9aac52d4ce157e4595049d2cf96b7"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4Nzc3MA==", "bodyText": "Don't convert a double into a double. Format when you're about to display it to the user, when creating the TextComponent. Here's you're not setting format, you're just arbitrarily altering doubles to try to force a specific rounding", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r490987770", "createdAt": "2020-09-18T14:26:42Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/stats/StatsMatchModule.java", "diffHunk": "@@ -0,0 +1,489 @@\n+package tc.oc.pgm.stats;\n+\n+import com.google.common.collect.Lists;\n+import java.text.DecimalFormat;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import net.kyori.text.Component;\n+import net.kyori.text.TextComponent;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n+import net.kyori.text.format.TextDecoration;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.Action;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityShootBowEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.ParticipantState;\n+import tc.oc.pgm.api.player.PlayerRelation;\n+import tc.oc.pgm.api.player.event.MatchPlayerDeathEvent;\n+import tc.oc.pgm.api.setting.SettingKey;\n+import tc.oc.pgm.api.setting.SettingValue;\n+import tc.oc.pgm.destroyable.DestroyableHealthChange;\n+import tc.oc.pgm.destroyable.DestroyableHealthChangeEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.flag.event.FlagPickupEvent;\n+import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n+import tc.oc.pgm.flag.state.Carried;\n+import tc.oc.pgm.menu.InventoryMenu;\n+import tc.oc.pgm.menu.InventoryMenuItem;\n+import tc.oc.pgm.menu.InventoryMenuUtils;\n+import tc.oc.pgm.teams.Team;\n+import tc.oc.pgm.tracker.TrackerMatchModule;\n+import tc.oc.pgm.tracker.info.ProjectileInfo;\n+import tc.oc.pgm.util.named.NameStyle;\n+import tc.oc.pgm.util.text.TextFormatter;\n+import tc.oc.pgm.util.text.TextTranslations;\n+import tc.oc.pgm.util.text.types.PlayerComponent;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class StatsMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+  private final Map<UUID, PlayerStats> allPlayerStats = new HashMap<>();\n+  // Since Bukkit#getOfflinePlayer reads the cached user files, and those files have an expire date\n+  // + will be wiped if X amount of players join, we need a separate cache for players with stats\n+  private final Map<UUID, String> cachedUsernames = new HashMap<>();\n+\n+  private final boolean verboseStats = PGM.get().getConfiguration().showVerboseStats();\n+  private final Component verboseStatsTitle = TranslatableComponent.of(\"match.stats.title\");\n+\n+  // Defined at match end, see #onMatchEnd\n+  InventoryMenu endOfMatchMenu;\n+\n+  public StatsMatchModule(Match match) {\n+    this.match = match;\n+  }\n+\n+  public static class PlayerStats {\n+    // K/D\n+    int kills;\n+    int deaths;\n+    int killstreak;\n+    int killstreakMax;\n+\n+    // Bow\n+    int longestBowKill;\n+    private double bowDamage;\n+    int shotsTaken;\n+    int shotsHit;\n+\n+    // Damage\n+    private double damageDone;\n+    private double damageTaken;\n+\n+    // Objectives\n+    int destroyablePiecesBroken;\n+    int flagsCaptured;\n+\n+    Duration longestFlagHold = Duration.ZERO;\n+    private Instant longestFlagHoldCache;\n+\n+    // The task responsible for displaying the stats over the hotbar\n+    // See #sendLongHotbarMessage\n+    private Future<?> hotbarTask;\n+\n+    private void onMurder() {\n+      kills++;\n+      killstreak++;\n+      if (killstreak > killstreakMax) killstreakMax = killstreak;\n+    }\n+\n+    private void onDeath() {\n+      deaths++;\n+      killstreak = 0;\n+    }\n+\n+    private void onDamage(double damage, boolean bow) {\n+      damageDone += damage;\n+      if (bow) {\n+        bowDamage += damage;\n+        shotsHit++;\n+      }\n+    }\n+\n+    private void onDamaged(double damage) {\n+      damageTaken += damage;\n+    }\n+\n+    private void onDestroyablePieceBroken(int change) {\n+      destroyablePiecesBroken += change;\n+    }\n+\n+    private void onFlagCapture() {\n+      flagsCaptured++;\n+      onFlagDrop();\n+    }\n+\n+    private void onFlagPickup() {\n+      longestFlagHoldCache = Instant.now();\n+    }\n+\n+    private void onFlagDrop() {\n+      setLongestFlagHold(\n+          Duration.ofMillis(Instant.now().toEpochMilli() - longestFlagHoldCache.toEpochMilli()));\n+    }\n+\n+    private void setLongestFlagHold(Duration time) {\n+      if (longestFlagHold == null || (time.toNanos() - longestFlagHold.toNanos()) > 0)\n+        longestFlagHold = time;\n+    }\n+\n+    private void setLongestBowKill(double distance) {\n+      if (distance > longestBowKill) {\n+        longestBowKill = (int) Math.ceil(distance);\n+      }\n+    }\n+\n+    private void onBowShoot() {\n+      shotsTaken++;\n+    }\n+\n+    /** A common format used by all stats with decimals */\n+    public static final DecimalFormat STATS_DECIMALFORMAT = new DecimalFormat(\"#.##\");\n+\n+    public static double statFormat(Number number) {\n+      String stat = STATS_DECIMALFORMAT.format(number).replace(',', '.');\n+      return Double.parseDouble(stat);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44794bc429b9aac52d4ce157e4595049d2cf96b7"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4ODgxOA==", "bodyText": "Use a number formatter here, to set the format you want (with 2 decimals) and pass the resulting formatted string to TextComponent", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r490988818", "createdAt": "2020-09-18T14:28:23Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/stats/StatsMatchModule.java", "diffHunk": "@@ -0,0 +1,489 @@\n+package tc.oc.pgm.stats;\n+\n+import com.google.common.collect.Lists;\n+import java.text.DecimalFormat;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import net.kyori.text.Component;\n+import net.kyori.text.TextComponent;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n+import net.kyori.text.format.TextDecoration;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.Action;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityShootBowEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.ParticipantState;\n+import tc.oc.pgm.api.player.PlayerRelation;\n+import tc.oc.pgm.api.player.event.MatchPlayerDeathEvent;\n+import tc.oc.pgm.api.setting.SettingKey;\n+import tc.oc.pgm.api.setting.SettingValue;\n+import tc.oc.pgm.destroyable.DestroyableHealthChange;\n+import tc.oc.pgm.destroyable.DestroyableHealthChangeEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.flag.event.FlagPickupEvent;\n+import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n+import tc.oc.pgm.flag.state.Carried;\n+import tc.oc.pgm.menu.InventoryMenu;\n+import tc.oc.pgm.menu.InventoryMenuItem;\n+import tc.oc.pgm.menu.InventoryMenuUtils;\n+import tc.oc.pgm.teams.Team;\n+import tc.oc.pgm.tracker.TrackerMatchModule;\n+import tc.oc.pgm.tracker.info.ProjectileInfo;\n+import tc.oc.pgm.util.named.NameStyle;\n+import tc.oc.pgm.util.text.TextFormatter;\n+import tc.oc.pgm.util.text.TextTranslations;\n+import tc.oc.pgm.util.text.types.PlayerComponent;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class StatsMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+  private final Map<UUID, PlayerStats> allPlayerStats = new HashMap<>();\n+  // Since Bukkit#getOfflinePlayer reads the cached user files, and those files have an expire date\n+  // + will be wiped if X amount of players join, we need a separate cache for players with stats\n+  private final Map<UUID, String> cachedUsernames = new HashMap<>();\n+\n+  private final boolean verboseStats = PGM.get().getConfiguration().showVerboseStats();\n+  private final Component verboseStatsTitle = TranslatableComponent.of(\"match.stats.title\");\n+\n+  // Defined at match end, see #onMatchEnd\n+  InventoryMenu endOfMatchMenu;\n+\n+  public StatsMatchModule(Match match) {\n+    this.match = match;\n+  }\n+\n+  public static class PlayerStats {\n+    // K/D\n+    int kills;\n+    int deaths;\n+    int killstreak;\n+    int killstreakMax;\n+\n+    // Bow\n+    int longestBowKill;\n+    private double bowDamage;\n+    int shotsTaken;\n+    int shotsHit;\n+\n+    // Damage\n+    private double damageDone;\n+    private double damageTaken;\n+\n+    // Objectives\n+    int destroyablePiecesBroken;\n+    int flagsCaptured;\n+\n+    Duration longestFlagHold = Duration.ZERO;\n+    private Instant longestFlagHoldCache;\n+\n+    // The task responsible for displaying the stats over the hotbar\n+    // See #sendLongHotbarMessage\n+    private Future<?> hotbarTask;\n+\n+    private void onMurder() {\n+      kills++;\n+      killstreak++;\n+      if (killstreak > killstreakMax) killstreakMax = killstreak;\n+    }\n+\n+    private void onDeath() {\n+      deaths++;\n+      killstreak = 0;\n+    }\n+\n+    private void onDamage(double damage, boolean bow) {\n+      damageDone += damage;\n+      if (bow) {\n+        bowDamage += damage;\n+        shotsHit++;\n+      }\n+    }\n+\n+    private void onDamaged(double damage) {\n+      damageTaken += damage;\n+    }\n+\n+    private void onDestroyablePieceBroken(int change) {\n+      destroyablePiecesBroken += change;\n+    }\n+\n+    private void onFlagCapture() {\n+      flagsCaptured++;\n+      onFlagDrop();\n+    }\n+\n+    private void onFlagPickup() {\n+      longestFlagHoldCache = Instant.now();\n+    }\n+\n+    private void onFlagDrop() {\n+      setLongestFlagHold(\n+          Duration.ofMillis(Instant.now().toEpochMilli() - longestFlagHoldCache.toEpochMilli()));\n+    }\n+\n+    private void setLongestFlagHold(Duration time) {\n+      if (longestFlagHold == null || (time.toNanos() - longestFlagHold.toNanos()) > 0)\n+        longestFlagHold = time;\n+    }\n+\n+    private void setLongestBowKill(double distance) {\n+      if (distance > longestBowKill) {\n+        longestBowKill = (int) Math.ceil(distance);\n+      }\n+    }\n+\n+    private void onBowShoot() {\n+      shotsTaken++;\n+    }\n+\n+    /** A common format used by all stats with decimals */\n+    public static final DecimalFormat STATS_DECIMALFORMAT = new DecimalFormat(\"#.##\");\n+\n+    public static double statFormat(Number number) {\n+      String stat = STATS_DECIMALFORMAT.format(number).replace(',', '.');\n+      return Double.parseDouble(stat);\n+    }\n+\n+    public Component getBasicStatsMessage() {\n+      return TranslatableComponent.of(\n+          \"match.stats\",\n+          TextColor.GRAY,\n+          TextComponent.of(kills, TextColor.GREEN),\n+          TextComponent.of(killstreak, TextColor.GREEN),\n+          TextComponent.of(deaths, TextColor.RED),\n+          TextComponent.of(getKD(), TextColor.GREEN));\n+    }\n+\n+    // Methods that gives stats with decimals already formatted\n+\n+    public double getKD() {\n+      double kd;\n+      if (deaths == 0) {\n+        kd = kills;\n+      } else {\n+        kd = statFormat(kills / (double) deaths);\n+      }\n+      return kd;\n+    }\n+\n+    public double getArrowAccuracy() {\n+      double acc;\n+      if (shotsTaken == 0) acc = 100;\n+      else acc = statFormat(shotsHit / (shotsTaken / (double) 100));\n+      return acc;\n+    }\n+\n+    public double getDamageDone() {\n+      return statFormat(damageDone);\n+    }\n+\n+    public double getBowDamage() {\n+      return statFormat(bowDamage);\n+    }\n+\n+    public double getDamageTaken() {\n+      return statFormat(damageTaken);\n+    }\n+  }\n+\n+  @EventHandler\n+  public void onDamage(EntityDamageByEntityEvent event) {\n+    ParticipantState damager =\n+        match.needModule(TrackerMatchModule.class).getOwner(event.getDamager());\n+    ParticipantState damaged = match.getParticipantState(event.getEntity());\n+    if ((damaged != null && damager != null) && damaged.getId() == damager.getId()) return;\n+    boolean bow = event.getDamager() instanceof Arrow;\n+    if (damager != null) getPlayerStat(damager).onDamage(event.getFinalDamage(), bow);\n+    if (damaged != null) getPlayerStat(damaged).onDamaged(event.getFinalDamage());\n+  }\n+\n+  @EventHandler\n+  public void onShoot(EntityShootBowEvent event) {\n+    if (event.getEntity() instanceof Player) {\n+      MatchPlayer player = match.getPlayer(event.getEntity());\n+      if (player != null) getPlayerStat(player).onBowShoot();\n+    }\n+  }\n+\n+  @EventHandler\n+  public void onDestroyableBreak(DestroyableHealthChangeEvent event) {\n+    DestroyableHealthChange change = event.getChange();\n+    if (change != null && change.getHealthChange() > 0 && change.getPlayerCause() != null)\n+      getPlayerStat(change.getPlayerCause()).onDestroyablePieceBroken(change.getHealthChange());\n+  }\n+\n+  @EventHandler\n+  public void onFlagCapture(FlagCaptureEvent event) {\n+    getPlayerStat(event.getCarrier()).onFlagCapture();\n+  }\n+\n+  @EventHandler\n+  public void onFlagHold(FlagPickupEvent event) {\n+    getPlayerStat(event.getCarrier()).onFlagPickup();\n+  }\n+\n+  @EventHandler\n+  public void onFlagDrop(FlagStateChangeEvent event) {\n+    if (event.getOldState() instanceof Carried)\n+      getPlayerStat(((Carried) event.getOldState()).getCarrier()).onFlagDrop();\n+  }\n+\n+  @EventHandler\n+  public void onPlayerDeath(MatchPlayerDeathEvent event) {\n+    MatchPlayer victim = event.getVictim();\n+    MatchPlayer murderer = null;\n+\n+    if (event.getKiller() != null)\n+      murderer = event.getKiller().getParty().getPlayer(event.getKiller().getId());\n+\n+    if (victim.getSettings().getValue(SettingKey.STATS).equals(SettingValue.STATS_ON)) {\n+      PlayerStats victimStats = getPlayerStat(victim);\n+\n+      victimStats.onDeath();\n+\n+      sendPlayerStats(victim, victimStats);\n+    }\n+\n+    if (murderer != null\n+        && PlayerRelation.get(victim.getParticipantState(), murderer) != PlayerRelation.ALLY\n+        && PlayerRelation.get(victim.getParticipantState(), murderer) != PlayerRelation.SELF\n+        && murderer.getSettings().getValue(SettingKey.STATS).equals(SettingValue.STATS_ON)) {\n+\n+      PlayerStats murdererStats = getPlayerStat(murderer);\n+\n+      if (event.getDamageInfo() instanceof ProjectileInfo) {\n+        murdererStats.setLongestBowKill(\n+            victim\n+                .getState()\n+                .getLocation()\n+                .distance(((ProjectileInfo) event.getDamageInfo()).getOrigin()));\n+      }\n+\n+      murdererStats.onMurder();\n+\n+      sendPlayerStats(murderer, murdererStats);\n+    }\n+  }\n+\n+  private void sendPlayerStats(MatchPlayer player, PlayerStats stats) {\n+    if (stats.hotbarTask != null && !stats.hotbarTask.isDone()) {\n+      stats.hotbarTask.cancel(true);\n+    }\n+    stats.hotbarTask = sendLongHotbarMessage(player, stats.getBasicStatsMessage());\n+  }\n+\n+  private Future<?> sendLongHotbarMessage(MatchPlayer player, Component message) {\n+    Future<?> task =\n+        match\n+            .getExecutor(MatchScope.LOADED)\n+            .scheduleWithFixedDelay(() -> player.showHotbar(message), 0, 1, TimeUnit.SECONDS);\n+\n+    match.getExecutor(MatchScope.LOADED).schedule(() -> task.cancel(true), 4, TimeUnit.SECONDS);\n+\n+    return task;\n+  }\n+\n+  @EventHandler\n+  public void onMatchEnd(MatchFinishEvent event) {\n+\n+    if (allPlayerStats.isEmpty()) return;\n+\n+    Map<UUID, Integer> allKills = new HashMap<>();\n+    Map<UUID, Integer> allKillstreaks = new HashMap<>();\n+    Map<UUID, Integer> allDeaths = new HashMap<>();\n+    Map<UUID, Integer> allBowshots = new HashMap<>();\n+    Map<UUID, Double> allDamage = new HashMap<>();\n+\n+    for (Map.Entry<UUID, PlayerStats> mapEntry : allPlayerStats.entrySet()) {\n+      UUID playerUUID = mapEntry.getKey();\n+      PlayerStats playerStats = mapEntry.getValue();\n+\n+      getPlayerStat(playerUUID);\n+\n+      allKills.put(playerUUID, playerStats.kills);\n+      allKillstreaks.put(playerUUID, playerStats.killstreakMax);\n+      allDeaths.put(playerUUID, playerStats.deaths);\n+      allBowshots.put(playerUUID, playerStats.longestBowKill);\n+      allDamage.put(playerUUID, playerStats.getDamageDone());\n+    }\n+\n+    Component killMessage = getMessage(\"match.stats.kills\", sortStats(allKills), TextColor.GREEN);\n+    Component killstreakMessage =\n+        getMessage(\"match.stats.killstreak\", sortStats(allKillstreaks), TextColor.GREEN);\n+    Component deathMessage = getMessage(\"match.stats.deaths\", sortStats(allDeaths), TextColor.RED);\n+    Map.Entry<UUID, Integer> bestBowshot = sortStats(allBowshots);\n+    if (bestBowshot.getValue() == 1)\n+      bestBowshot.setValue(2); // Avoids translating \"1 block\" vs \"n blocks\"\n+    Component bowshotMessage = getMessage(\"match.stats.bowshot\", bestBowshot, TextColor.YELLOW);\n+    Component damageMessage =\n+        getMessage(\"match.stats.damage\", sortStatsDouble(allDamage), TextColor.GREEN);\n+\n+    match\n+        .getExecutor(MatchScope.LOADED)\n+        .schedule(\n+            () -> {\n+              for (MatchPlayer viewer : match.getPlayers()) {\n+                if (viewer.getSettings().getValue(SettingKey.STATS) == SettingValue.STATS_OFF)\n+                  continue;\n+\n+                viewer.sendMessage(\n+                    TextFormatter.horizontalLineHeading(\n+                        viewer.getBukkit(),\n+                        TranslatableComponent.of(\"match.stats.title\", TextColor.YELLOW),\n+                        TextColor.WHITE));\n+                viewer.sendMessage(killMessage);\n+                viewer.sendMessage(killstreakMessage);\n+                viewer.sendMessage(deathMessage);\n+                if (bestBowshot.getValue() != 0) viewer.sendMessage(bowshotMessage);\n+                if (verboseStats) {\n+                  viewer.sendMessage(damageMessage);\n+                  viewer.getInventory().setItem(7, createToolItem(viewer));\n+                }\n+              }\n+            },\n+            5 + 1, // NOTE: This is 1 second after the votebook appears\n+            TimeUnit.SECONDS);\n+\n+    final Collection<Competitor> competitors = match.getCompetitors();\n+\n+    if (verboseStats && competitors.stream().allMatch(c -> c instanceof Team)) {\n+\n+      final List<InventoryMenuItem> items =\n+          competitors.stream()\n+              .map(c -> new TeamInventoryMenuItem(match, c))\n+              .collect(Collectors.toList());\n+\n+      endOfMatchMenu =\n+          competitors.size() <= 4\n+              ? InventoryMenuUtils.smallMenu(match, verboseStatsTitle, items)\n+              : InventoryMenuUtils.progressiveMenu(match, verboseStatsTitle, items);\n+    }\n+  }\n+\n+  private ItemStack createToolItem(MatchPlayer player) {\n+    ItemStack tool = new ItemStack(Material.RED_SANDSTONE);\n+    ItemMeta meta = tool.getItemMeta();\n+    Component displayName =\n+        TranslatableComponent.of(\"match.stats.title\", TextColor.GREEN, TextDecoration.BOLD);\n+    Component lore = TranslatableComponent.of(\"setting.lore\", TextColor.GRAY);\n+    meta.setDisplayName(TextTranslations.translateLegacy(displayName, player.getBukkit()));\n+    meta.setLore(Lists.newArrayList(TextTranslations.translateLegacy(lore, player.getBukkit())));\n+    meta.addItemFlags(ItemFlag.values());\n+    tool.setItemMeta(meta);\n+    return tool;\n+  }\n+\n+  @EventHandler\n+  public void onToolClick(PlayerInteractEvent event) {\n+    if (!verboseStats) return;\n+    Action action = event.getAction();\n+    if ((action == Action.RIGHT_CLICK_AIR || action == Action.RIGHT_CLICK_BLOCK)\n+        && match.isFinished()) {\n+      ItemStack item = event.getPlayer().getItemInHand();\n+\n+      if (item.getType() == Material.RED_SANDSTONE) {\n+        MatchPlayer player = match.getPlayer(event.getPlayer());\n+        if (player == null) return;\n+        endOfMatchMenu.display(player);\n+      }\n+    }\n+  }\n+\n+  private Map.Entry<UUID, Integer> sortStats(Map<UUID, Integer> map) {\n+    return map.entrySet().stream().max(Comparator.comparingInt(Map.Entry::getValue)).orElse(null);\n+  }\n+\n+  private Map.Entry<UUID, Double> sortStatsDouble(Map<UUID, Double> map) {\n+    return map.entrySet().stream()\n+        .max(Comparator.comparingDouble(Map.Entry::getValue))\n+        .orElse(null);\n+  }\n+\n+  Component getMessage(\n+      String messageKey, Map.Entry<UUID, ? extends Number> mapEntry, TextColor color) {\n+    return TranslatableComponent.of(\n+        messageKey, playerName(mapEntry.getKey()), numberComponent(mapEntry.getValue(), color));\n+  }\n+\n+  public static Component numberComponent(Number stat, TextColor color) {\n+    double doubleStat = stat.doubleValue();\n+    if (doubleStat % 1 == 0) return TextComponent.of(stat.intValue(), color, TextDecoration.BOLD);\n+    else return TextComponent.of(doubleStat, color, TextDecoration.BOLD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44794bc429b9aac52d4ce157e4595049d2cf96b7"}, "originalPosition": 441}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNjM0NTA5", "url": "https://github.com/PGMDev/PGM/pull/598#pullrequestreview-491634509", "createdAt": "2020-09-18T16:58:44Z", "commit": {"oid": "44794bc429b9aac52d4ce157e4595049d2cf96b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjo1ODo0NFrOHUU-kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjo1ODo0NFrOHUU-kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3NzI2Nw==", "bodyText": "What's the reason behind wrapping the string in a translatable component? \ud83e\udd14", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r491077267", "createdAt": "2020-09-18T16:58:44Z", "author": {"login": "applenick"}, "path": "util/src/main/java/tc/oc/pgm/util/text/types/PlayerComponent.java", "diffHunk": "@@ -92,7 +92,8 @@ static Component of(\n \n   // What an offline or vanished username renders as\n   static TextComponent.Builder formatOffline(String name, boolean plain) {\n-    TextComponent.Builder component = TextComponent.builder().append(name);\n+    TextComponent.Builder component =\n+        TextComponent.builder().append(TranslatableComponent.of(name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44794bc429b9aac52d4ce157e4595049d2cf96b7"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5c493149ad79f856d0116ba2e4a08d6625fce61", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/e5c493149ad79f856d0116ba2e4a08d6625fce61", "committedDate": "2020-09-20T21:20:18Z", "message": "Move out PlayerStats to its own class\n- change access to stat values\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}, "afterCommit": {"oid": "9e2509642b94f8ffeb35b4a2251d9479500c0ab9", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/9e2509642b94f8ffeb35b4a2251d9479500c0ab9", "committedDate": "2020-09-21T10:17:37Z", "message": "TeamInventoryMenuItem -> TeamStatsInventoryMenuItem\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MzE5MjUx", "url": "https://github.com/PGMDev/PGM/pull/598#pullrequestreview-495319251", "createdAt": "2020-09-24T08:08:16Z", "commit": {"oid": "9e2509642b94f8ffeb35b4a2251d9479500c0ab9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODowODoxNlrOHXOrxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoyMTo1OVrOHXPNTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDExOTg3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                double acc;\n          \n          \n            \n                if (shotsTaken == 0) acc = Double.NaN;\n          \n          \n            \n                else acc = shotsHit / (shotsTaken / (double) 100);\n          \n          \n            \n                return acc;\n          \n          \n            \n                if (shotsTaken == 0) return Double.NaN;\n          \n          \n            \n                return shotsHit / (shotsTaken / (double) 100);\n          \n      \n    \n    \n  \n\nSimplify logic", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r494119876", "createdAt": "2020-09-24T08:08:16Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/stats/PlayerStats.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package tc.oc.pgm.stats;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.Future;\n+import net.kyori.text.Component;\n+import net.kyori.text.TextComponent;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n+\n+/** A wrapper for stat info belonging to a {@link tc.oc.pgm.api.player.MatchPlayer} */\n+class PlayerStats {\n+  // K/D\n+  private int kills;\n+  private int deaths;\n+  private int killstreak; // Current killstreak\n+  private int killstreakMax; // The highest killstreak reached this match\n+\n+  // Bow\n+  private int longestBowKill;\n+  private double bowDamage;\n+  private int shotsTaken;\n+  private int shotsHit;\n+\n+  // Damage\n+  private double damageDone;\n+  private double damageTaken;\n+\n+  // Objectives\n+  private int destroyablePiecesBroken;\n+  private int flagsCaptured;\n+\n+  private Duration longestFlagHold = Duration.ZERO;\n+  private Instant longestFlagHoldCache;\n+\n+  // The task responsible for displaying the stats over the hotbar\n+  // See StatsMatchModule#sendLongHotbarMessage\n+  private Future<?> hotbarTaskCache;\n+\n+  // Methods to update the stats, should only be accessed by StatsMatchModule\n+\n+  protected void onMurder() {\n+    kills++;\n+    killstreak++;\n+    if (killstreak > killstreakMax) killstreakMax = killstreak;\n+  }\n+\n+  protected void onDeath() {\n+    deaths++;\n+    killstreak = 0;\n+  }\n+\n+  protected void onDamage(double damage, boolean bow) {\n+    damageDone += damage;\n+    if (bow) {\n+      bowDamage += damage;\n+      shotsHit++;\n+    }\n+  }\n+\n+  protected void onDamaged(double damage) {\n+    damageTaken += damage;\n+  }\n+\n+  protected void onDestroyablePieceBroken(int change) {\n+    destroyablePiecesBroken += change;\n+  }\n+\n+  protected void onFlagCapture() {\n+    flagsCaptured++;\n+    onFlagDrop();\n+  }\n+\n+  protected void onFlagPickup() {\n+    longestFlagHoldCache = Instant.now();\n+  }\n+\n+  protected void onFlagDrop() {\n+    setLongestFlagHold(\n+        Duration.ofMillis(Instant.now().toEpochMilli() - longestFlagHoldCache.toEpochMilli()));\n+  }\n+\n+  protected void setLongestFlagHold(Duration time) {\n+    if (longestFlagHold == null || (time.toNanos() - longestFlagHold.toNanos()) > 0)\n+      longestFlagHold = time;\n+  }\n+\n+  protected void setLongestBowKill(double distance) {\n+    if (distance > longestBowKill) {\n+      longestBowKill = (int) Math.ceil(distance);\n+    }\n+  }\n+\n+  protected void onBowShoot() {\n+    shotsTaken++;\n+  }\n+\n+  // Makes a simple stat message for this player that fits in one line\n+\n+  public Component getBasicStatsMessage() {\n+    return TranslatableComponent.of(\n+        \"match.stats\",\n+        TextColor.GRAY,\n+        TextComponent.of(kills, TextColor.GREEN),\n+        TextComponent.of(killstreak, TextColor.GREEN),\n+        TextComponent.of(deaths, TextColor.RED),\n+        TextComponent.of(getKD(), TextColor.GREEN));\n+  }\n+\n+  // Getters, both raw stats and some handy calculations\n+\n+  public double getKD() {\n+    double kd;\n+    if (deaths == 0) {\n+      kd = kills;\n+    } else {\n+      kd = kills / (double) deaths;\n+    }\n+    return kd;\n+  }\n+\n+  public double getArrowAccuracy() {\n+    double acc;\n+    if (shotsTaken == 0) acc = Double.NaN;\n+    else acc = shotsHit / (shotsTaken / (double) 100);\n+    return acc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e2509642b94f8ffeb35b4a2251d9479500c0ab9"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMDg2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                double kd;\n          \n          \n            \n                if (deaths == 0) {\n          \n          \n            \n                  kd = kills;\n          \n          \n            \n                } else {\n          \n          \n            \n                  kd = kills / (double) deaths;\n          \n          \n            \n                }\n          \n          \n            \n                return kd;\n          \n          \n            \n            return kills / Math.max(1d, (double) deaths);\n          \n      \n    \n    \n  \n\nSimplify this, you may be able to get rid of the double cast too if the first parameter is explicitly double", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r494120862", "createdAt": "2020-09-24T08:09:52Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/stats/PlayerStats.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package tc.oc.pgm.stats;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.Future;\n+import net.kyori.text.Component;\n+import net.kyori.text.TextComponent;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n+\n+/** A wrapper for stat info belonging to a {@link tc.oc.pgm.api.player.MatchPlayer} */\n+class PlayerStats {\n+  // K/D\n+  private int kills;\n+  private int deaths;\n+  private int killstreak; // Current killstreak\n+  private int killstreakMax; // The highest killstreak reached this match\n+\n+  // Bow\n+  private int longestBowKill;\n+  private double bowDamage;\n+  private int shotsTaken;\n+  private int shotsHit;\n+\n+  // Damage\n+  private double damageDone;\n+  private double damageTaken;\n+\n+  // Objectives\n+  private int destroyablePiecesBroken;\n+  private int flagsCaptured;\n+\n+  private Duration longestFlagHold = Duration.ZERO;\n+  private Instant longestFlagHoldCache;\n+\n+  // The task responsible for displaying the stats over the hotbar\n+  // See StatsMatchModule#sendLongHotbarMessage\n+  private Future<?> hotbarTaskCache;\n+\n+  // Methods to update the stats, should only be accessed by StatsMatchModule\n+\n+  protected void onMurder() {\n+    kills++;\n+    killstreak++;\n+    if (killstreak > killstreakMax) killstreakMax = killstreak;\n+  }\n+\n+  protected void onDeath() {\n+    deaths++;\n+    killstreak = 0;\n+  }\n+\n+  protected void onDamage(double damage, boolean bow) {\n+    damageDone += damage;\n+    if (bow) {\n+      bowDamage += damage;\n+      shotsHit++;\n+    }\n+  }\n+\n+  protected void onDamaged(double damage) {\n+    damageTaken += damage;\n+  }\n+\n+  protected void onDestroyablePieceBroken(int change) {\n+    destroyablePiecesBroken += change;\n+  }\n+\n+  protected void onFlagCapture() {\n+    flagsCaptured++;\n+    onFlagDrop();\n+  }\n+\n+  protected void onFlagPickup() {\n+    longestFlagHoldCache = Instant.now();\n+  }\n+\n+  protected void onFlagDrop() {\n+    setLongestFlagHold(\n+        Duration.ofMillis(Instant.now().toEpochMilli() - longestFlagHoldCache.toEpochMilli()));\n+  }\n+\n+  protected void setLongestFlagHold(Duration time) {\n+    if (longestFlagHold == null || (time.toNanos() - longestFlagHold.toNanos()) > 0)\n+      longestFlagHold = time;\n+  }\n+\n+  protected void setLongestBowKill(double distance) {\n+    if (distance > longestBowKill) {\n+      longestBowKill = (int) Math.ceil(distance);\n+    }\n+  }\n+\n+  protected void onBowShoot() {\n+    shotsTaken++;\n+  }\n+\n+  // Makes a simple stat message for this player that fits in one line\n+\n+  public Component getBasicStatsMessage() {\n+    return TranslatableComponent.of(\n+        \"match.stats\",\n+        TextColor.GRAY,\n+        TextComponent.of(kills, TextColor.GREEN),\n+        TextComponent.of(killstreak, TextColor.GREEN),\n+        TextComponent.of(deaths, TextColor.RED),\n+        TextComponent.of(getKD(), TextColor.GREEN));\n+  }\n+\n+  // Getters, both raw stats and some handy calculations\n+\n+  public double getKD() {\n+    double kd;\n+    if (deaths == 0) {\n+      kd = kills;\n+    } else {\n+      kd = kills / (double) deaths;\n+    }\n+    return kd;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e2509642b94f8ffeb35b4a2251d9479500c0ab9"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyODQ2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (Double.isNaN(stat.doubleValue()))\n          \n          \n            \n                if (Double.isNaN(doubleStat))", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r494128463", "createdAt": "2020-09-24T08:21:59Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/stats/StatsMatchModule.java", "diffHunk": "@@ -0,0 +1,377 @@\n+package tc.oc.pgm.stats;\n+\n+import com.google.common.collect.Lists;\n+import java.text.DecimalFormat;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import net.kyori.text.Component;\n+import net.kyori.text.TextComponent;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n+import net.kyori.text.format.TextDecoration;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.block.Action;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityShootBowEvent;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+import org.bukkit.event.player.PlayerQuitEvent;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchModule;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.ParticipantState;\n+import tc.oc.pgm.api.player.PlayerRelation;\n+import tc.oc.pgm.api.player.event.MatchPlayerDeathEvent;\n+import tc.oc.pgm.api.setting.SettingKey;\n+import tc.oc.pgm.api.setting.SettingValue;\n+import tc.oc.pgm.destroyable.DestroyableHealthChange;\n+import tc.oc.pgm.destroyable.DestroyableHealthChangeEvent;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.flag.event.FlagCaptureEvent;\n+import tc.oc.pgm.flag.event.FlagPickupEvent;\n+import tc.oc.pgm.flag.event.FlagStateChangeEvent;\n+import tc.oc.pgm.flag.state.Carried;\n+import tc.oc.pgm.menu.InventoryMenu;\n+import tc.oc.pgm.menu.InventoryMenuItem;\n+import tc.oc.pgm.menu.InventoryMenuUtils;\n+import tc.oc.pgm.teams.Team;\n+import tc.oc.pgm.tracker.TrackerMatchModule;\n+import tc.oc.pgm.tracker.info.ProjectileInfo;\n+import tc.oc.pgm.util.named.NameStyle;\n+import tc.oc.pgm.util.text.TextFormatter;\n+import tc.oc.pgm.util.text.TextTranslations;\n+import tc.oc.pgm.util.text.types.PlayerComponent;\n+\n+@ListenerScope(MatchScope.LOADED)\n+public class StatsMatchModule implements MatchModule, Listener {\n+\n+  private final Match match;\n+  private final Map<UUID, PlayerStats> allPlayerStats = new HashMap<>();\n+  // Since Bukkit#getOfflinePlayer reads the cached user files, and those files have an expire date\n+  // + will be wiped if X amount of players join, we need a separate cache for players with stats\n+  private final Map<UUID, String> cachedUsernames = new HashMap<>();\n+\n+  private final boolean verboseStats = PGM.get().getConfiguration().showVerboseStats();\n+  private final Component verboseStatsTitle = TranslatableComponent.of(\"match.stats.title\");\n+\n+  /** A common format used by all stats with decimals */\n+  public static final DecimalFormat STATS_DECIMALFORMAT = new DecimalFormat(\"#.##\");\n+\n+  // Defined at match end, see #onMatchEnd\n+  private InventoryMenu endOfMatchMenu;\n+\n+  public StatsMatchModule(Match match) {\n+    this.match = match;\n+  }\n+\n+  @EventHandler\n+  public void onDamage(EntityDamageByEntityEvent event) {\n+    ParticipantState damager =\n+        match.needModule(TrackerMatchModule.class).getOwner(event.getDamager());\n+    ParticipantState damaged = match.getParticipantState(event.getEntity());\n+    if ((damaged != null && damager != null) && damaged.getId() == damager.getId()) return;\n+    boolean bow = event.getDamager() instanceof Arrow;\n+    if (damager != null) getPlayerStat(damager).onDamage(event.getFinalDamage(), bow);\n+    if (damaged != null) getPlayerStat(damaged).onDamaged(event.getFinalDamage());\n+  }\n+\n+  @EventHandler\n+  public void onShoot(EntityShootBowEvent event) {\n+    if (event.getEntity() instanceof Player) {\n+      MatchPlayer player = match.getPlayer(event.getEntity());\n+      if (player != null) getPlayerStat(player).onBowShoot();\n+    }\n+  }\n+\n+  @EventHandler\n+  public void onDestroyableBreak(DestroyableHealthChangeEvent event) {\n+    DestroyableHealthChange change = event.getChange();\n+    if (change != null && change.getHealthChange() > 0 && change.getPlayerCause() != null)\n+      getPlayerStat(change.getPlayerCause()).onDestroyablePieceBroken(change.getHealthChange());\n+  }\n+\n+  @EventHandler\n+  public void onFlagCapture(FlagCaptureEvent event) {\n+    getPlayerStat(event.getCarrier()).onFlagCapture();\n+  }\n+\n+  @EventHandler\n+  public void onFlagHold(FlagPickupEvent event) {\n+    getPlayerStat(event.getCarrier()).onFlagPickup();\n+  }\n+\n+  @EventHandler\n+  public void onFlagDrop(FlagStateChangeEvent event) {\n+    if (event.getOldState() instanceof Carried)\n+      getPlayerStat(((Carried) event.getOldState()).getCarrier()).onFlagDrop();\n+  }\n+\n+  @EventHandler\n+  public void onPlayerDeath(MatchPlayerDeathEvent event) {\n+    MatchPlayer victim = event.getVictim();\n+    MatchPlayer murderer = null;\n+\n+    if (event.getKiller() != null)\n+      murderer = event.getKiller().getParty().getPlayer(event.getKiller().getId());\n+\n+    if (victim.getSettings().getValue(SettingKey.STATS).equals(SettingValue.STATS_ON)) {\n+      PlayerStats victimStats = getPlayerStat(victim);\n+\n+      victimStats.onDeath();\n+\n+      sendPlayerStats(victim, victimStats);\n+    }\n+\n+    if (murderer != null\n+        && PlayerRelation.get(victim.getParticipantState(), murderer) != PlayerRelation.ALLY\n+        && PlayerRelation.get(victim.getParticipantState(), murderer) != PlayerRelation.SELF\n+        && murderer.getSettings().getValue(SettingKey.STATS).equals(SettingValue.STATS_ON)) {\n+\n+      PlayerStats murdererStats = getPlayerStat(murderer);\n+\n+      if (event.getDamageInfo() instanceof ProjectileInfo) {\n+        murdererStats.setLongestBowKill(\n+            victim\n+                .getState()\n+                .getLocation()\n+                .distance(((ProjectileInfo) event.getDamageInfo()).getOrigin()));\n+      }\n+\n+      murdererStats.onMurder();\n+\n+      sendPlayerStats(murderer, murdererStats);\n+    }\n+  }\n+\n+  private void sendPlayerStats(MatchPlayer player, PlayerStats stats) {\n+    if (stats.getHotbarTask() != null && !stats.getHotbarTask().isDone()) {\n+      stats.getHotbarTask().cancel(true);\n+    }\n+    stats.putHotbarTaskCache(sendLongHotbarMessage(player, stats.getBasicStatsMessage()));\n+  }\n+\n+  private Future<?> sendLongHotbarMessage(MatchPlayer player, Component message) {\n+    Future<?> task =\n+        match\n+            .getExecutor(MatchScope.LOADED)\n+            .scheduleWithFixedDelay(() -> player.showHotbar(message), 0, 1, TimeUnit.SECONDS);\n+\n+    match.getExecutor(MatchScope.LOADED).schedule(() -> task.cancel(true), 4, TimeUnit.SECONDS);\n+\n+    return task;\n+  }\n+\n+  @EventHandler\n+  public void onMatchEnd(MatchFinishEvent event) {\n+\n+    if (allPlayerStats.isEmpty()) return;\n+\n+    Map<UUID, Integer> allKills = new HashMap<>();\n+    Map<UUID, Integer> allKillstreaks = new HashMap<>();\n+    Map<UUID, Integer> allDeaths = new HashMap<>();\n+    Map<UUID, Integer> allBowshots = new HashMap<>();\n+    Map<UUID, Double> allDamage = new HashMap<>();\n+\n+    for (Map.Entry<UUID, PlayerStats> mapEntry : allPlayerStats.entrySet()) {\n+      UUID playerUUID = mapEntry.getKey();\n+      PlayerStats playerStats = mapEntry.getValue();\n+\n+      getPlayerStat(playerUUID);\n+\n+      allKills.put(playerUUID, playerStats.getKills());\n+      allKillstreaks.put(playerUUID, playerStats.getMaxKillstreak());\n+      allDeaths.put(playerUUID, playerStats.getDeaths());\n+      allBowshots.put(playerUUID, playerStats.getLongestBowKill());\n+      allDamage.put(playerUUID, playerStats.getDamageDone());\n+    }\n+\n+    Component killMessage = getMessage(\"match.stats.kills\", sortStats(allKills), TextColor.GREEN);\n+    Component killstreakMessage =\n+        getMessage(\"match.stats.killstreak\", sortStats(allKillstreaks), TextColor.GREEN);\n+    Component deathMessage = getMessage(\"match.stats.deaths\", sortStats(allDeaths), TextColor.RED);\n+    Map.Entry<UUID, Integer> bestBowshot = sortStats(allBowshots);\n+    if (bestBowshot.getValue() == 1)\n+      bestBowshot.setValue(2); // Avoids translating \"1 block\" vs \"n blocks\"\n+    Component bowshotMessage = getMessage(\"match.stats.bowshot\", bestBowshot, TextColor.YELLOW);\n+    Component damageMessage =\n+        getMessage(\"match.stats.damage\", sortStatsDouble(allDamage), TextColor.GREEN);\n+\n+    match\n+        .getExecutor(MatchScope.LOADED)\n+        .schedule(\n+            () -> {\n+              for (MatchPlayer viewer : match.getPlayers()) {\n+                if (viewer.getSettings().getValue(SettingKey.STATS) == SettingValue.STATS_OFF)\n+                  continue;\n+\n+                viewer.sendMessage(\n+                    TextFormatter.horizontalLineHeading(\n+                        viewer.getBukkit(),\n+                        TranslatableComponent.of(\"match.stats.title\", TextColor.YELLOW),\n+                        TextColor.WHITE));\n+                viewer.sendMessage(killMessage);\n+                viewer.sendMessage(killstreakMessage);\n+                viewer.sendMessage(deathMessage);\n+                if (bestBowshot.getValue() != 0) viewer.sendMessage(bowshotMessage);\n+                if (verboseStats) {\n+                  viewer.sendMessage(damageMessage);\n+                  viewer.getInventory().setItem(7, createToolItem(viewer));\n+                }\n+              }\n+            },\n+            5 + 1, // NOTE: This is 1 second after the votebook appears\n+            TimeUnit.SECONDS);\n+\n+    final Collection<Competitor> competitors = match.getCompetitors();\n+\n+    if (verboseStats && competitors.stream().allMatch(c -> c instanceof Team)) {\n+\n+      final List<InventoryMenuItem> items =\n+          competitors.stream()\n+              .map(c -> new TeamStatsInventoryMenuItem(match, c))\n+              .collect(Collectors.toList());\n+\n+      endOfMatchMenu =\n+          competitors.size() <= 4\n+              ? InventoryMenuUtils.smallMenu(match, verboseStatsTitle, items)\n+              : InventoryMenuUtils.progressiveMenu(match, verboseStatsTitle, items);\n+    }\n+  }\n+\n+  private ItemStack createToolItem(MatchPlayer player) {\n+    ItemStack tool = new ItemStack(Material.RED_SANDSTONE);\n+    ItemMeta meta = tool.getItemMeta();\n+    Component displayName =\n+        TranslatableComponent.of(\"match.stats.title\", TextColor.GREEN, TextDecoration.BOLD);\n+    Component lore = TranslatableComponent.of(\"setting.lore\", TextColor.GRAY);\n+    meta.setDisplayName(TextTranslations.translateLegacy(displayName, player.getBukkit()));\n+    meta.setLore(Lists.newArrayList(TextTranslations.translateLegacy(lore, player.getBukkit())));\n+    meta.addItemFlags(ItemFlag.values());\n+    tool.setItemMeta(meta);\n+    return tool;\n+  }\n+\n+  @EventHandler\n+  public void onToolClick(PlayerInteractEvent event) {\n+    if (!verboseStats) return;\n+    Action action = event.getAction();\n+    if ((action == Action.RIGHT_CLICK_AIR || action == Action.RIGHT_CLICK_BLOCK)\n+        && match.isFinished()) {\n+      ItemStack item = event.getPlayer().getItemInHand();\n+\n+      if (item.getType() == Material.RED_SANDSTONE) {\n+        MatchPlayer player = match.getPlayer(event.getPlayer());\n+        if (player == null) return;\n+        endOfMatchMenu.display(player);\n+      }\n+    }\n+  }\n+\n+  private Map.Entry<UUID, Integer> sortStats(Map<UUID, Integer> map) {\n+    return map.entrySet().stream().max(Comparator.comparingInt(Map.Entry::getValue)).orElse(null);\n+  }\n+\n+  private Map.Entry<UUID, Double> sortStatsDouble(Map<UUID, Double> map) {\n+    return map.entrySet().stream()\n+        .max(Comparator.comparingDouble(Map.Entry::getValue))\n+        .orElse(null);\n+  }\n+\n+  Component getMessage(\n+      String messageKey, Map.Entry<UUID, ? extends Number> mapEntry, TextColor color) {\n+    return TranslatableComponent.of(\n+        messageKey, playerName(mapEntry.getKey()), numberComponent(mapEntry.getValue(), color));\n+  }\n+\n+  /**\n+   * Wraps a {@link Number} in a {@link TextComponent} that is bolded and colored with the given\n+   * {@link TextColor}.\n+   *\n+   * <p>If the given number is a double, it is formatted with {@link\n+   * StatsMatchModule#STATS_DECIMALFORMAT}.\n+   *\n+   * <p>If the number is NaN \"-\" is wrapped instead\n+   *\n+   * @param stat The number you want wrapped in a {@link Component}\n+   * @param color The color you want the number to be\n+   * @return A bolded {@link Component} wrapping the given number or \"-\" if NaN\n+   */\n+  public static Component numberComponent(Number stat, TextColor color) {\n+    double doubleStat = stat.doubleValue();\n+    String returnValue;\n+    if (Double.isNaN(stat.doubleValue()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e2509642b94f8ffeb35b4a2251d9479500c0ab9"}, "originalPosition": 321}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e2509642b94f8ffeb35b4a2251d9479500c0ab9", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/9e2509642b94f8ffeb35b4a2251d9479500c0ab9", "committedDate": "2020-09-21T10:17:37Z", "message": "TeamInventoryMenuItem -> TeamStatsInventoryMenuItem\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}, "afterCommit": {"oid": "750f8cc2dd467fb05a85792b3db321e5a385680f", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/750f8cc2dd467fb05a85792b3db321e5a385680f", "committedDate": "2020-09-24T18:51:49Z", "message": "Simplify some logic\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODY4MjY4", "url": "https://github.com/PGMDev/PGM/pull/598#pullrequestreview-495868268", "createdAt": "2020-09-24T18:59:44Z", "commit": {"oid": "750f8cc2dd467fb05a85792b3db321e5a385680f"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1OTkxMzE3", "url": "https://github.com/PGMDev/PGM/pull/598#pullrequestreview-495991317", "createdAt": "2020-09-24T22:23:49Z", "commit": {"oid": "750f8cc2dd467fb05a85792b3db321e5a385680f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjoyMzo0OVrOHXupwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMjoyMzo0OVrOHXupwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0MzY0OQ==", "bodyText": "Coloured leather helm to match the team picker pls \ud83d\ude4f", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r494643649", "createdAt": "2020-09-24T22:23:49Z", "author": {"login": "Pugzy"}, "path": "core/src/main/java/tc/oc/pgm/stats/TeamStatsInventoryMenuItem.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package tc.oc.pgm.stats;\n+\n+import static tc.oc.pgm.stats.StatsMatchModule.numberComponent;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import net.kyori.text.Component;\n+import net.kyori.text.TranslatableComponent;\n+import net.kyori.text.format.TextColor;\n+import net.md_5.bungee.api.ChatColor;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.inventory.ClickType;\n+import org.bukkit.inventory.ItemFlag;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.menu.InventoryMenu;\n+import tc.oc.pgm.menu.InventoryMenuItem;\n+import tc.oc.pgm.menu.InventoryMenuUtils;\n+import tc.oc.pgm.util.bukkit.BukkitUtils;\n+import tc.oc.pgm.util.text.TextTranslations;\n+\n+public class TeamStatsInventoryMenuItem implements InventoryMenuItem {\n+\n+  private final Competitor team;\n+  private final InventoryMenu teamSubGUI;\n+\n+  private final TextColor RESET = TextColor.WHITE;\n+\n+  TeamStatsInventoryMenuItem(Match match, Competitor team) {\n+    this.team = team;\n+    this.teamSubGUI =\n+        InventoryMenuUtils.prettyMenu(\n+            match,\n+            TranslatableComponent.of(\"match.stats.title\"),\n+            team.getPlayers().stream()\n+                .map(PlayerStatsInventoryMenuItem::new)\n+                .collect(Collectors.toList()));\n+  }\n+\n+  @Override\n+  public Component getName() {\n+    return TranslatableComponent.of(\"match.stats.team\", team.getName());\n+  }\n+\n+  @Override\n+  public ChatColor getColor() {\n+    return ChatColor.valueOf(team.getColor().name());\n+  }\n+\n+  @Override\n+  public List<String> getLore(MatchPlayer player) {\n+\n+    StatsMatchModule smm = player.getMatch().needModule(StatsMatchModule.class);\n+    List<String> lore = new ArrayList<>();\n+    int teamKills = 0;\n+    int teamDeaths = 0;\n+    double damageDone = 0;\n+    double damageTaken = 0;\n+    double bowDamage = 0;\n+    int shotsTaken = 0;\n+    int shotsHit = 0;\n+    for (MatchPlayer teamPlayer : team.getPlayers()) {\n+      PlayerStats stats = smm.getPlayerStat(teamPlayer.getId());\n+      teamKills += stats.getKills();\n+      teamDeaths += stats.getDeaths();\n+      damageDone += stats.getDamageDone();\n+      damageTaken += stats.getDamageTaken();\n+      bowDamage += stats.getBowDamage();\n+      shotsTaken += stats.getShotsTaken();\n+      shotsHit += stats.getShotsHit();\n+    }\n+\n+    double teamKD = teamDeaths == 0 ? teamKills : teamKills / (double) teamDeaths;\n+    double teamBowAcc = shotsTaken == 0 ? Double.NaN : shotsHit / (shotsTaken / (double) 100);\n+    double teamDamageGiven = damageDone;\n+    double bowDamageGiven = bowDamage;\n+    double teamDamageTaken = damageTaken;\n+\n+    Component killLore =\n+        TranslatableComponent.of(\n+            \"match.stats.kills.concise\", RESET, numberComponent(teamKills, TextColor.GREEN));\n+    Component deathLore =\n+        TranslatableComponent.of(\n+            \"match.stats.deaths.concise\", RESET, numberComponent(teamDeaths, TextColor.RED));\n+    Component kdLore =\n+        TranslatableComponent.of(\n+            \"match.stats.kd.concise\", RESET, numberComponent(teamKD, TextColor.GREEN));\n+    Component damageLore =\n+        TranslatableComponent.of(\n+            \"match.stats.damage.concise\",\n+            RESET,\n+            numberComponent(teamDamageGiven, TextColor.GREEN),\n+            numberComponent(bowDamageGiven, TextColor.YELLOW),\n+            numberComponent(teamDamageTaken, TextColor.RED));\n+    Component bowLore =\n+        TranslatableComponent.of(\n+            \"match.stats.bow.concise\",\n+            RESET,\n+            numberComponent(shotsTaken, TextColor.YELLOW),\n+            numberComponent(teamBowAcc, TextColor.YELLOW));\n+\n+    Player bukkit = player.getBukkit();\n+\n+    lore.add(TextTranslations.translateLegacy(killLore, bukkit));\n+    lore.add(TextTranslations.translateLegacy(deathLore, bukkit));\n+    lore.add(TextTranslations.translateLegacy(kdLore, bukkit));\n+    lore.add(TextTranslations.translateLegacy(damageLore, bukkit));\n+    lore.add(TextTranslations.translateLegacy(bowLore, bukkit));\n+\n+    return lore;\n+  }\n+\n+  @Override\n+  public Material getMaterial(MatchPlayer player) {\n+    return Material.WOOL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750f8cc2dd467fb05a85792b3db321e5a385680f"}, "originalPosition": 121}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c68d4846737b97f123420150ea0f70f4b47e63d4", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/c68d4846737b97f123420150ea0f70f4b47e63d4", "committedDate": "2020-09-25T10:40:25Z", "message": "Change the icon for team stats to colored chestplates\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}, "afterCommit": {"oid": "6fa972328f46315e9f79662366b85fb9d59061c5", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/6fa972328f46315e9f79662366b85fb9d59061c5", "committedDate": "2020-10-03T14:04:42Z", "message": "Change the icon for team stats to colored chestplates\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6fa972328f46315e9f79662366b85fb9d59061c5", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/6fa972328f46315e9f79662366b85fb9d59061c5", "committedDate": "2020-10-03T14:04:42Z", "message": "Change the icon for team stats to colored chestplates\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}, "afterCommit": {"oid": "85b095862a57297c9ad3870265062919954e235e", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/85b095862a57297c9ad3870265062919954e235e", "committedDate": "2020-10-07T22:00:53Z", "message": "Change the icon for team stats to colored chestplates\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDIyOTIz", "url": "https://github.com/PGMDev/PGM/pull/598#pullrequestreview-497022923", "createdAt": "2020-09-26T18:31:07Z", "commit": {"oid": "c68d4846737b97f123420150ea0f70f4b47e63d4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxODozMTowN1rOHYh4QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDozOTozNVrOHyaa8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4Mjk0NA==", "bodyText": "Best Killstreak", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r495482944", "createdAt": "2020-09-26T18:31:07Z", "author": {"login": "Electroid"}, "path": "util/src/main/i18n/templates/match.properties", "diffHunk": "@@ -52,19 +52,56 @@ match.stats = Kills: {0}  |  Killstreak: {1}  |  Deaths: {2}  |  K/D: {3}\n # {1} = an amount of kills(number)\n match.stats.kills = Kills: {1} by {0}\n \n+# {0} = an amount of kills(number)\n+match.stats.kills.concise = Kills: {0}\n+\n # {0} = a player name\n # {1} = a killstreak(number)\n match.stats.killstreak = Killstreak: {1} by {0}\n \n+# {0} = a killstreak(number)\n+match.stats.killstreak.concise = Highest killstreak: {0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c68d4846737b97f123420150ea0f70f4b47e63d4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4MzAwMg==", "bodyText": "At face value this looks like a very confusing stat, not even sure what it means. Is it nessecary? Seems Bow accuracy is fine enough?", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r495483002", "createdAt": "2020-09-26T18:32:02Z", "author": {"login": "Electroid"}, "path": "util/src/main/i18n/templates/match.properties", "diffHunk": "@@ -52,19 +52,56 @@ match.stats = Kills: {0}  |  Killstreak: {1}  |  Deaths: {2}  |  K/D: {3}\n # {1} = an amount of kills(number)\n match.stats.kills = Kills: {1} by {0}\n \n+# {0} = an amount of kills(number)\n+match.stats.kills.concise = Kills: {0}\n+\n # {0} = a player name\n # {1} = a killstreak(number)\n match.stats.killstreak = Killstreak: {1} by {0}\n \n+# {0} = a killstreak(number)\n+match.stats.killstreak.concise = Highest killstreak: {0}\n+\n # {0} = a player name\n # {1} = an amount of deaths(number)\n match.stats.deaths = Deaths: {1} by {0}\n \n+# {0} = an amount of deaths(number)\n+match.stats.deaths.concise = Deaths: {0}\n+\n+# {0} = numbers of kills divided by the number of deaths (kill-death ratio)\n+match.stats.kd.concise = K/D: {0}\n+\n # {0} = a player name\n # {1} = an amount of blocks\n match.stats.bowshot = Longest Shot: {1} blocks by {0}\n \n-match.stats.overall = Match Stats\n+# {0} = a player name\n+# {1} = an amount of damage\n+match.stats.damage = Damage: {1} by {0}\n+\n+# {0} = the number of damage done\n+# {1} = the number of damage done with a bow\n+# {2} = the number of damage taken\n+match.stats.damage.concise = Damage given(bow) / taken: {0}({1}) / {2}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c68d4846737b97f123420150ea0f70f4b47e63d4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYxODgwMw==", "bodyText": "Next Page", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r522618803", "createdAt": "2020-11-13T04:33:29Z", "author": {"login": "Electroid"}, "path": "util/src/main/i18n/templates/misc.properties", "diffHunk": "@@ -114,6 +114,10 @@ misc.to = To\n \n misc.from = From\n \n+misc.nextPage = Next page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8c0f70a37d6bed6fbf593b93d3c5503ab463f4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYxODkxNw==", "bodyText": "Previous Page", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r522618917", "createdAt": "2020-11-13T04:33:38Z", "author": {"login": "Electroid"}, "path": "util/src/main/i18n/templates/misc.properties", "diffHunk": "@@ -114,6 +114,10 @@ misc.to = To\n \n misc.from = From\n \n+misc.nextPage = Next page\n+\n+misc.previousPage = Previous page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8c0f70a37d6bed6fbf593b93d3c5503ab463f4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYxOTc4OA==", "bodyText": "I think this should just be {0}'s Stats", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r522619788", "createdAt": "2020-11-13T04:34:46Z", "author": {"login": "Electroid"}, "path": "util/src/main/i18n/templates/match.properties", "diffHunk": "@@ -52,19 +52,56 @@ match.stats = Kills: {0}  |  Killstreak: {1}  |  Deaths: {2}  |  K/D: {3}\n # {1} = an amount of kills(number)\n match.stats.kills = Kills: {1} by {0}\n \n+# {0} = an amount of kills(number)\n+match.stats.kills.concise = Kills: {0}\n+\n # {0} = a player name\n # {1} = a killstreak(number)\n match.stats.killstreak = Killstreak: {1} by {0}\n \n+# {0} = a killstreak(number)\n+match.stats.killstreak.concise = Highest killstreak: {0}\n+\n # {0} = a player name\n # {1} = an amount of deaths(number)\n match.stats.deaths = Deaths: {1} by {0}\n \n+# {0} = an amount of deaths(number)\n+match.stats.deaths.concise = Deaths: {0}\n+\n+# {0} = numbers of kills divided by the number of deaths (kill-death ratio)\n+match.stats.kd.concise = K/D: {0}\n+\n # {0} = a player name\n # {1} = an amount of blocks\n match.stats.bowshot = Longest Shot: {1} blocks by {0}\n \n-match.stats.overall = Match Stats\n+# {0} = a player name\n+# {1} = an amount of damage\n+match.stats.damage = Damage: {1} by {0}\n+\n+# {0} = the number of damage done\n+# {1} = the number of damage done with a bow\n+# {2} = the number of damage taken\n+match.stats.damage.concise = Damage given(bow) / taken: {0}({1}) / {2}\n+\n+# {0} = the number of bow shots taken\n+# {1} = the number representing someones accuracy(e.g 35%)\n+match.stats.bow.concise = Bow shots / Accuracy: {0} / {1}%\n+\n+# {0} = the number of flags captured\n+match.stats.flagsCaptured.concise = Flags captured: {0}\n+\n+# {0} = a number representing the duration of the hold\n+match.stats.flaghold.concise = Longest flag hold: {0}\n+\n+# {0} the amount of monument pieces broken(number)\n+match.stats.broken.concise = Monument pieces broken: {0}\n+\n+# {0} = a player name\n+match.stats.team = {0}'s Match Stats", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8c0f70a37d6bed6fbf593b93d3c5503ab463f4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYyMDY2NQ==", "bodyText": "Flags Captured", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r522620665", "createdAt": "2020-11-13T04:35:51Z", "author": {"login": "Electroid"}, "path": "util/src/main/i18n/templates/match.properties", "diffHunk": "@@ -52,19 +52,56 @@ match.stats = Kills: {0}  |  Killstreak: {1}  |  Deaths: {2}  |  K/D: {3}\n # {1} = an amount of kills(number)\n match.stats.kills = Kills: {1} by {0}\n \n+# {0} = an amount of kills(number)\n+match.stats.kills.concise = Kills: {0}\n+\n # {0} = a player name\n # {1} = a killstreak(number)\n match.stats.killstreak = Killstreak: {1} by {0}\n \n+# {0} = a killstreak(number)\n+match.stats.killstreak.concise = Highest killstreak: {0}\n+\n # {0} = a player name\n # {1} = an amount of deaths(number)\n match.stats.deaths = Deaths: {1} by {0}\n \n+# {0} = an amount of deaths(number)\n+match.stats.deaths.concise = Deaths: {0}\n+\n+# {0} = numbers of kills divided by the number of deaths (kill-death ratio)\n+match.stats.kd.concise = K/D: {0}\n+\n # {0} = a player name\n # {1} = an amount of blocks\n match.stats.bowshot = Longest Shot: {1} blocks by {0}\n \n-match.stats.overall = Match Stats\n+# {0} = a player name\n+# {1} = an amount of damage\n+match.stats.damage = Damage: {1} by {0}\n+\n+# {0} = the number of damage done\n+# {1} = the number of damage done with a bow\n+# {2} = the number of damage taken\n+match.stats.damage.concise = Damage given(bow) / taken: {0}({1}) / {2}\n+\n+# {0} = the number of bow shots taken\n+# {1} = the number representing someones accuracy(e.g 35%)\n+match.stats.bow.concise = Bow shots / Accuracy: {0} / {1}%\n+\n+# {0} = the number of flags captured\n+match.stats.flagsCaptured.concise = Flags captured: {0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8c0f70a37d6bed6fbf593b93d3c5503ab463f4"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYyMDgwNg==", "bodyText": "Longest Flag Capture", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r522620806", "createdAt": "2020-11-13T04:36:03Z", "author": {"login": "Electroid"}, "path": "util/src/main/i18n/templates/match.properties", "diffHunk": "@@ -52,19 +52,56 @@ match.stats = Kills: {0}  |  Killstreak: {1}  |  Deaths: {2}  |  K/D: {3}\n # {1} = an amount of kills(number)\n match.stats.kills = Kills: {1} by {0}\n \n+# {0} = an amount of kills(number)\n+match.stats.kills.concise = Kills: {0}\n+\n # {0} = a player name\n # {1} = a killstreak(number)\n match.stats.killstreak = Killstreak: {1} by {0}\n \n+# {0} = a killstreak(number)\n+match.stats.killstreak.concise = Highest killstreak: {0}\n+\n # {0} = a player name\n # {1} = an amount of deaths(number)\n match.stats.deaths = Deaths: {1} by {0}\n \n+# {0} = an amount of deaths(number)\n+match.stats.deaths.concise = Deaths: {0}\n+\n+# {0} = numbers of kills divided by the number of deaths (kill-death ratio)\n+match.stats.kd.concise = K/D: {0}\n+\n # {0} = a player name\n # {1} = an amount of blocks\n match.stats.bowshot = Longest Shot: {1} blocks by {0}\n \n-match.stats.overall = Match Stats\n+# {0} = a player name\n+# {1} = an amount of damage\n+match.stats.damage = Damage: {1} by {0}\n+\n+# {0} = the number of damage done\n+# {1} = the number of damage done with a bow\n+# {2} = the number of damage taken\n+match.stats.damage.concise = Damage given(bow) / taken: {0}({1}) / {2}\n+\n+# {0} = the number of bow shots taken\n+# {1} = the number representing someones accuracy(e.g 35%)\n+match.stats.bow.concise = Bow shots / Accuracy: {0} / {1}%\n+\n+# {0} = the number of flags captured\n+match.stats.flagsCaptured.concise = Flags captured: {0}\n+\n+# {0} = a number representing the duration of the hold\n+match.stats.flaghold.concise = Longest flag hold: {0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8c0f70a37d6bed6fbf593b93d3c5503ab463f4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYyMTA1MA==", "bodyText": "Monument Blocks Broken", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r522621050", "createdAt": "2020-11-13T04:36:17Z", "author": {"login": "Electroid"}, "path": "util/src/main/i18n/templates/match.properties", "diffHunk": "@@ -52,19 +52,56 @@ match.stats = Kills: {0}  |  Killstreak: {1}  |  Deaths: {2}  |  K/D: {3}\n # {1} = an amount of kills(number)\n match.stats.kills = Kills: {1} by {0}\n \n+# {0} = an amount of kills(number)\n+match.stats.kills.concise = Kills: {0}\n+\n # {0} = a player name\n # {1} = a killstreak(number)\n match.stats.killstreak = Killstreak: {1} by {0}\n \n+# {0} = a killstreak(number)\n+match.stats.killstreak.concise = Highest killstreak: {0}\n+\n # {0} = a player name\n # {1} = an amount of deaths(number)\n match.stats.deaths = Deaths: {1} by {0}\n \n+# {0} = an amount of deaths(number)\n+match.stats.deaths.concise = Deaths: {0}\n+\n+# {0} = numbers of kills divided by the number of deaths (kill-death ratio)\n+match.stats.kd.concise = K/D: {0}\n+\n # {0} = a player name\n # {1} = an amount of blocks\n match.stats.bowshot = Longest Shot: {1} blocks by {0}\n \n-match.stats.overall = Match Stats\n+# {0} = a player name\n+# {1} = an amount of damage\n+match.stats.damage = Damage: {1} by {0}\n+\n+# {0} = the number of damage done\n+# {1} = the number of damage done with a bow\n+# {2} = the number of damage taken\n+match.stats.damage.concise = Damage given(bow) / taken: {0}({1}) / {2}\n+\n+# {0} = the number of bow shots taken\n+# {1} = the number representing someones accuracy(e.g 35%)\n+match.stats.bow.concise = Bow shots / Accuracy: {0} / {1}%\n+\n+# {0} = the number of flags captured\n+match.stats.flagsCaptured.concise = Flags captured: {0}\n+\n+# {0} = a number representing the duration of the hold\n+match.stats.flaghold.concise = Longest flag hold: {0}\n+\n+# {0} the amount of monument pieces broken(number)\n+match.stats.broken.concise = Monument pieces broken: {0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8c0f70a37d6bed6fbf593b93d3c5503ab463f4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYyMjExNw==", "bodyText": "Melee Damage", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r522622117", "createdAt": "2020-11-13T04:37:42Z", "author": {"login": "Electroid"}, "path": "util/src/main/i18n/templates/match.properties", "diffHunk": "@@ -52,19 +52,56 @@ match.stats = Kills: {0}  |  Killstreak: {1}  |  Deaths: {2}  |  K/D: {3}\n # {1} = an amount of kills(number)\n match.stats.kills = Kills: {1} by {0}\n \n+# {0} = an amount of kills(number)\n+match.stats.kills.concise = Kills: {0}\n+\n # {0} = a player name\n # {1} = a killstreak(number)\n match.stats.killstreak = Killstreak: {1} by {0}\n \n+# {0} = a killstreak(number)\n+match.stats.killstreak.concise = Highest killstreak: {0}\n+\n # {0} = a player name\n # {1} = an amount of deaths(number)\n match.stats.deaths = Deaths: {1} by {0}\n \n+# {0} = an amount of deaths(number)\n+match.stats.deaths.concise = Deaths: {0}\n+\n+# {0} = numbers of kills divided by the number of deaths (kill-death ratio)\n+match.stats.kd.concise = K/D: {0}\n+\n # {0} = a player name\n # {1} = an amount of blocks\n match.stats.bowshot = Longest Shot: {1} blocks by {0}\n \n-match.stats.overall = Match Stats\n+# {0} = a player name\n+# {1} = an amount of damage\n+match.stats.damage = Damage: {1} by {0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8c0f70a37d6bed6fbf593b93d3c5503ab463f4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYyMjU1NA==", "bodyText": "Actually, not sure what this is for?", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r522622554", "createdAt": "2020-11-13T04:38:12Z", "author": {"login": "Electroid"}, "path": "util/src/main/i18n/templates/match.properties", "diffHunk": "@@ -52,19 +52,56 @@ match.stats = Kills: {0}  |  Killstreak: {1}  |  Deaths: {2}  |  K/D: {3}\n # {1} = an amount of kills(number)\n match.stats.kills = Kills: {1} by {0}\n \n+# {0} = an amount of kills(number)\n+match.stats.kills.concise = Kills: {0}\n+\n # {0} = a player name\n # {1} = a killstreak(number)\n match.stats.killstreak = Killstreak: {1} by {0}\n \n+# {0} = a killstreak(number)\n+match.stats.killstreak.concise = Highest killstreak: {0}\n+\n # {0} = a player name\n # {1} = an amount of deaths(number)\n match.stats.deaths = Deaths: {1} by {0}\n \n+# {0} = an amount of deaths(number)\n+match.stats.deaths.concise = Deaths: {0}\n+\n+# {0} = numbers of kills divided by the number of deaths (kill-death ratio)\n+match.stats.kd.concise = K/D: {0}\n+\n # {0} = a player name\n # {1} = an amount of blocks\n match.stats.bowshot = Longest Shot: {1} blocks by {0}\n \n-match.stats.overall = Match Stats\n+# {0} = a player name\n+# {1} = an amount of damage\n+match.stats.damage = Damage: {1} by {0}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYyMjExNw=="}, "originalCommit": {"oid": "7a8c0f70a37d6bed6fbf593b93d3c5503ab463f4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYyMzcyOQ==", "bodyText": "Bow Shots / Accuracy", "url": "https://github.com/PGMDev/PGM/pull/598#discussion_r522623729", "createdAt": "2020-11-13T04:39:35Z", "author": {"login": "Electroid"}, "path": "util/src/main/i18n/templates/match.properties", "diffHunk": "@@ -52,19 +52,56 @@ match.stats = Kills: {0}  |  Killstreak: {1}  |  Deaths: {2}  |  K/D: {3}\n # {1} = an amount of kills(number)\n match.stats.kills = Kills: {1} by {0}\n \n+# {0} = an amount of kills(number)\n+match.stats.kills.concise = Kills: {0}\n+\n # {0} = a player name\n # {1} = a killstreak(number)\n match.stats.killstreak = Killstreak: {1} by {0}\n \n+# {0} = a killstreak(number)\n+match.stats.killstreak.concise = Highest killstreak: {0}\n+\n # {0} = a player name\n # {1} = an amount of deaths(number)\n match.stats.deaths = Deaths: {1} by {0}\n \n+# {0} = an amount of deaths(number)\n+match.stats.deaths.concise = Deaths: {0}\n+\n+# {0} = numbers of kills divided by the number of deaths (kill-death ratio)\n+match.stats.kd.concise = K/D: {0}\n+\n # {0} = a player name\n # {1} = an amount of blocks\n match.stats.bowshot = Longest Shot: {1} blocks by {0}\n \n-match.stats.overall = Match Stats\n+# {0} = a player name\n+# {1} = an amount of damage\n+match.stats.damage = Damage: {1} by {0}\n+\n+# {0} = the number of damage done\n+# {1} = the number of damage done with a bow\n+# {2} = the number of damage taken\n+match.stats.damage.concise = Damage given(bow) / taken: {0}({1}) / {2}\n+\n+# {0} = the number of bow shots taken\n+# {1} = the number representing someones accuracy(e.g 35%)\n+match.stats.bow.concise = Bow shots / Accuracy: {0} / {1}%", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8c0f70a37d6bed6fbf593b93d3c5503ab463f4"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12008984ec8877d1c2c9f229d330d3f0e006ebf9", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/12008984ec8877d1c2c9f229d330d3f0e006ebf9", "committedDate": "2020-11-18T00:35:04Z", "message": "Verbose stats\n- Rip commit history\n\n- Also includes a refactor of InventoryMenu\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nFix some logic and prepare for longestFlagHold\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nAdd longest flag hold\n- some pretty stuff\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nEven prettier\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nReady for release\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nRemove old code\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nReviews and some javadoc\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nMake inventory title a Component\n instead of TranslatableComponent\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nVerbose stats\n- Rip commit history\n\n- Also includes a refactor of InventoryMenu\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nFix some logic and prepare for longestFlagHold\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nAdd longest flag hold\n- some pretty stuff\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nEven prettier\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nReady for release\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nRemove old code\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nReviews and some javadoc\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nCleanup\n- TranslatableComponent -> Component\n- Remove some old debug stuff\n- Fix some typos and javadoc stuff\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nPass all formatted doubles as doubles instead of Strings\n- Determine if a number is an int or double in StatsMatchModule#numberComponent\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nUse translatable instead of String\n- Rename hotbar task in PlayerStats\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nOnly display verbose stats if all competitors are Teams\n-Format\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nCorrectly parse doubles++\n- Fix page bug in InventoryMenuUtils#prettyMenu\n- Only display damage done if verbose stats is enabled\n- fix bad code in StatsMatchModule#getBasicStatsMessage\n- fix bad casting in StatsMatchModule#numberComponent\n- make sure damages used in StatsMatchModule#onMatchEnd uses the formatted damage numbers\n- limit ability to fetch unformatted doubles from PlayerStats\n- Fix flag stats\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nMove formatting of doubles\n- Into StatsMatchModule#numberComponent\n- If a stat is NaN it is displayed as \"-\"\n- Revert change to PlayerComponent(will be its own PR)\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nMove out PlayerStats to its own class\n- change access to stat values\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nTeamInventoryMenuItem -> TeamStatsInventoryMenuItem\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nSimplify some logic\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nChange the icon for team stats to colored chestplates\n\nSigned-off-by: KingSimon <simonmorland@gmail.com>\n\nClean up\n\nSigned-off-by: KingSimon <manmusic979@gmail.com>\nSigned-off-by: KingSimon <simonmorland@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03e2e7557c67fac5bdbb8c16ea18f9e421d4e325", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/03e2e7557c67fac5bdbb8c16ea18f9e421d4e325", "committedDate": "2020-11-18T00:35:04Z", "message": "Fix destroyable stat\n- remove detour in InventoryMenu\n\nSigned-off-by: KingSimon <19822231+KingOfSquares@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b89d2f9c1edce64c3815e9254b2214ce92099e0", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/4b89d2f9c1edce64c3815e9254b2214ce92099e0", "committedDate": "2020-11-18T00:35:04Z", "message": "Fix translations\n\nSigned-off-by: KingSimon <19822231+KingOfSquares@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2794840330c68f509b7d3c3c7dde9239c0b38b5", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/d2794840330c68f509b7d3c3c7dde9239c0b38b5", "committedDate": "2020-11-18T00:35:04Z", "message": "Remove verbose damage stat\n\nSigned-off-by: KingSimon <19822231+KingOfSquares@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e6b1d91798526638fb48439ef110a9ed754405b", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/0e6b1d91798526638fb48439ef110a9ed754405b", "committedDate": "2020-11-18T00:35:04Z", "message": "Revert \"Remove verbose damage stat\"\n\nThis reverts commit 7ad26b070c44e7062a32d2d06ab13806edec45c8."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ad26b070c44e7062a32d2d06ab13806edec45c8", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/7ad26b070c44e7062a32d2d06ab13806edec45c8", "committedDate": "2020-11-16T17:13:48Z", "message": "Remove verbose damage stat\n\nSigned-off-by: KingSimon <19822231+KingOfSquares@users.noreply.github.com>"}, "afterCommit": {"oid": "a5070cfed393d387e7732f28b79721bd52e1d074", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/a5070cfed393d387e7732f28b79721bd52e1d074", "committedDate": "2020-11-18T00:35:04Z", "message": "Shorten big numbers\n- Stats like damage can get really big and needs to be shortened to fit on the screen\n- Tweak the translation syntax of the verbose damage stat\n\nSigned-off-by: KingSimon <19822231+KingOfSquares@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0c5df3b35f815c34017ec1284b5ffe95decb561", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/c0c5df3b35f815c34017ec1284b5ffe95decb561", "committedDate": "2020-11-18T00:36:34Z", "message": "Shorten big numbers\n                                                         - Stats like damage can get really big and needs to be shortened to fit on the screen\n                                                         - Tweak the translation syntax of the verbose damage stat\n\nSigned-off-by: KingSimon <19822231+KingOfSquares@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5070cfed393d387e7732f28b79721bd52e1d074", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/a5070cfed393d387e7732f28b79721bd52e1d074", "committedDate": "2020-11-18T00:35:04Z", "message": "Shorten big numbers\n- Stats like damage can get really big and needs to be shortened to fit on the screen\n- Tweak the translation syntax of the verbose damage stat\n\nSigned-off-by: KingSimon <19822231+KingOfSquares@users.noreply.github.com>"}, "afterCommit": {"oid": "c0c5df3b35f815c34017ec1284b5ffe95decb561", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/c0c5df3b35f815c34017ec1284b5ffe95decb561", "committedDate": "2020-11-18T00:36:34Z", "message": "Shorten big numbers\n                                                         - Stats like damage can get really big and needs to be shortened to fit on the screen\n                                                         - Tweak the translation syntax of the verbose damage stat\n\nSigned-off-by: KingSimon <19822231+KingOfSquares@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8d2237982c14f94b953a174c9c9fd3ac167b3d8", "author": {"user": {"login": "KingOfSquares", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/c8d2237982c14f94b953a174c9c9fd3ac167b3d8", "committedDate": "2020-11-18T00:38:31Z", "message": "Actually fix translation\n\nSigned-off-by: KingSimon <19822231+KingOfSquares@users.noreply.github.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 443, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}