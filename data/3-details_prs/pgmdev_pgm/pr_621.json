{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDI1NzY0", "number": 621, "title": "Add names next to scores in FFA in /match and sort by score.", "bodyText": "fixes #619\nTyping /match on FFA now looks like this:\n\nSigned-off-by: mrcookie", "createdAt": "2020-08-19T20:07:18Z", "url": "https://github.com/PGMDev/PGM/pull/621", "merged": true, "mergeCommit": {"oid": "a647bd75d6c072634f4af490357f3a188aa1ba4c"}, "closed": true, "closedAt": "2020-10-20T23:59:18Z", "author": {"login": "mrcookieunderscore13"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAhjDBgFqTQ3MDg3MzA5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOMSSwgFqTUwMDA3NjAyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwODczMDkx", "url": "https://github.com/PGMDev/PGM/pull/621#pullrequestreview-470873091", "createdAt": "2020-08-19T20:22:23Z", "commit": {"oid": "8a48120a8397a118e2b7c7cb7f3144b92dd3d3d4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDAxNTE5", "url": "https://github.com/PGMDev/PGM/pull/621#pullrequestreview-471001519", "createdAt": "2020-08-19T22:13:23Z", "commit": {"oid": "8a48120a8397a118e2b7c7cb7f3144b92dd3d3d4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxMzoyM1rOHDcmyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoyMTo0MFrOHDdAbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3NjQ1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public TextComponent getStatusMessage() {\n          \n          \n            \n                TextComponent message = this.getScoreMessage();\n          \n          \n            \n              public Component getStatusMessage() {\n          \n          \n            \n                Component message = this.getScoreMessage();", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r473376457", "createdAt": "2020-08-19T22:13:23Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +86,47 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public TextComponent getScoreMessage() {\n+    List<TextComponent> scoreMessages = Lists.newArrayList();\n+    FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      (TextComponent)\n+                          x.getKey()\n+                              .getName(NameStyle.VERBOSE)\n+                              .append(TextComponent.of(x.getKey().getColor().toString() + \": \"))\n+                              .append(\n+                                  TextComponent.of(\n+                                      x.getKey().getColor().toString()\n+                                          + ((int) (double) x.getValue())))));\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue())));\n+      }\n     }\n-    return ChatColor.DARK_AQUA + \"Score: \" + Joiner.on(\" \").join(scores);\n+    return TextComponent.of(ChatColor.DARK_AQUA + \"Score: \")\n+        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n   }\n \n   /** Gets the status message for the match. */\n-  public String getStatusMessage() {\n-    StringBuilder message = new StringBuilder(this.getScoreMessage());\n+  public TextComponent getStatusMessage() {\n+    TextComponent message = this.getScoreMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a48120a8397a118e2b7c7cb7f3144b92dd3d3d4"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3NzAxNA==", "bodyText": "(int) x.getValue().doubleValue()\nsame for the scorePair.getValue call", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r473377014", "createdAt": "2020-08-19T22:14:09Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +86,47 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public TextComponent getScoreMessage() {\n+    List<TextComponent> scoreMessages = Lists.newArrayList();\n+    FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      (TextComponent)\n+                          x.getKey()\n+                              .getName(NameStyle.VERBOSE)\n+                              .append(TextComponent.of(x.getKey().getColor().toString() + \": \"))\n+                              .append(\n+                                  TextComponent.of(\n+                                      x.getKey().getColor().toString()\n+                                          + ((int) (double) x.getValue())))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a48120a8397a118e2b7c7cb7f3144b92dd3d3d4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM4MDE5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public TextComponent getScoreMessage() {\n          \n          \n            \n                List<TextComponent> scoreMessages = Lists.newArrayList();\n          \n          \n            \n                FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n          \n          \n            \n              public Component getScoreMessage() {\n          \n          \n            \n                final List<Component> scoreMessages = Lists.newArrayList();\n          \n          \n            \n                final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r473380198", "createdAt": "2020-08-19T22:18:12Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +86,47 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public TextComponent getScoreMessage() {\n+    List<TextComponent> scoreMessages = Lists.newArrayList();\n+    FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a48120a8397a118e2b7c7cb7f3144b92dd3d3d4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM4MzAyMg==", "bodyText": "Remove this wildcard import", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r473383022", "createdAt": "2020-08-19T22:21:40Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -2,14 +2,10 @@\n \n import static com.google.common.base.Preconditions.checkState;\n \n-import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n import java.time.Instant;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a48120a8397a118e2b7c7cb7f3144b92dd3d3d4"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMjkzNzMy", "url": "https://github.com/PGMDev/PGM/pull/621#pullrequestreview-472293732", "createdAt": "2020-08-21T08:15:17Z", "commit": {"oid": "b08151ae505f0ef4cfed606979a76e47759ba8dc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxNToxN1rOHEhr7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxODoxOVrOHEh2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwODI3MA==", "bodyText": "use a .limit(10) on the stream instead", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474508270", "createdAt": "2020-08-21T08:15:17Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));\n+      while (scoreMessages.size() > 10) {\n+        scoreMessages.remove(scoreMessages.size() - 1);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08151ae505f0ef4cfed606979a76e47759ba8dc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMDEzNg==", "bodyText": "Use a proper reducer instead of forEachOrdered", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474510136", "createdAt": "2020-08-21T08:17:22Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08151ae505f0ef4cfed606979a76e47759ba8dc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMDg5OQ==", "bodyText": "Don't use chat colors as strings, use them on the components instead", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474510899", "createdAt": "2020-08-21T08:18:19Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));\n+      while (scoreMessages.size() > 10) {\n+        scoreMessages.remove(scoreMessages.size() - 1);\n+      }\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                scorePair.getKey().getColor().toString()\n+                    + ((int) scorePair.getValue().doubleValue())));\n+      }\n     }\n-    return ChatColor.DARK_AQUA + \"Score: \" + Joiner.on(\" \").join(scores);\n+    return TextComponent.of(\"Score: \")\n+        .color(TextColor.DARK_AQUA)\n+        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n   }\n \n   /** Gets the status message for the match. */\n-  public String getStatusMessage() {\n-    StringBuilder message = new StringBuilder(this.getScoreMessage());\n+  public Component getStatusMessage() {\n+    Component message = this.getScoreMessage();\n     if (this.config.scoreLimit > 0) {\n       message\n-          .append(\"  \")\n-          .append(ChatColor.GRAY)\n-          .append(\"[\")\n-          .append(this.config.scoreLimit)\n-          .append(\"]\");\n+          .append(TextComponent.of(\"  \"))\n+          .append(TextComponent.of(TextColor.GRAY + \"[\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08151ae505f0ef4cfed606979a76e47759ba8dc"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNzY2MTQ2", "url": "https://github.com/PGMDev/PGM/pull/621#pullrequestreview-472766146", "createdAt": "2020-08-21T19:22:46Z", "commit": {"oid": "b08151ae505f0ef4cfed606979a76e47759ba8dc"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToyMjo0N1rOHE42_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToyNToyNVrOHE4_eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4NzkzMg==", "bodyText": "When working with TextComponent.of you can use the color in the primary constructor.\nWhat I mean is instead of\nTextComponent.of(\"Text\").color(TextColor.WHITE);\nyou do\nTextComponent.of(\"Text\", TextColor.WHITE);\nAlso, on line 105, why are you using a builder instead of just a simple TextComponent.of()?", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474887932", "createdAt": "2020-08-21T19:22:47Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08151ae505f0ef4cfed606979a76e47759ba8dc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4OTE5NQ==", "bodyText": "Use TextFormatter#convert on the color to use it as a TextColor instead.", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474889195", "createdAt": "2020-08-21T19:24:21Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));\n+      while (scoreMessages.size() > 10) {\n+        scoreMessages.remove(scoreMessages.size() - 1);\n+      }\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                scorePair.getKey().getColor().toString()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08151ae505f0ef4cfed606979a76e47759ba8dc"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg5MDEwNQ==", "bodyText": "Any reason why you are splitting up these symbols into different appends? Seems like they could be a single one(since you are not doing any newlines)", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474890105", "createdAt": "2020-08-21T19:25:25Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));\n+      while (scoreMessages.size() > 10) {\n+        scoreMessages.remove(scoreMessages.size() - 1);\n+      }\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                scorePair.getKey().getColor().toString()\n+                    + ((int) scorePair.getValue().doubleValue())));\n+      }\n     }\n-    return ChatColor.DARK_AQUA + \"Score: \" + Joiner.on(\" \").join(scores);\n+    return TextComponent.of(\"Score: \")\n+        .color(TextColor.DARK_AQUA)\n+        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n   }\n \n   /** Gets the status message for the match. */\n-  public String getStatusMessage() {\n-    StringBuilder message = new StringBuilder(this.getScoreMessage());\n+  public Component getStatusMessage() {\n+    Component message = this.getScoreMessage();\n     if (this.config.scoreLimit > 0) {\n       message\n-          .append(\"  \")\n-          .append(ChatColor.GRAY)\n-          .append(\"[\")\n-          .append(this.config.scoreLimit)\n-          .append(\"]\");\n+          .append(TextComponent.of(\"  \"))\n+          .append(TextComponent.of(TextColor.GRAY + \"[\"))\n+          .append(TextComponent.of(this.config.scoreLimit))\n+          .append(TextComponent.of(\"]\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08151ae505f0ef4cfed606979a76e47759ba8dc"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "author": {"user": {"login": "mrcookieunderscore13", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "committedDate": "2020-08-24T15:12:04Z", "message": "Add names next to scores in FFA in /match and sort by score.\n\nSigned-off-by: mrcookie <athertonmook@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a42da5406510e36a66b13ab03190523abb93d895", "author": {"user": {"login": "mrcookieunderscore13", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/a42da5406510e36a66b13ab03190523abb93d895", "committedDate": "2020-08-23T19:08:55Z", "message": "Says your score. Also code clean-up\n\nSigned-off-by: mrcookie <athertonmook@gmail.com>"}, "afterCommit": {"oid": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "author": {"user": {"login": "mrcookieunderscore13", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814", "committedDate": "2020-08-24T15:12:04Z", "message": "Add names next to scores in FFA in /match and sort by score.\n\nSigned-off-by: mrcookie <athertonmook@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4Nzk4NTk3", "url": "https://github.com/PGMDev/PGM/pull/621#pullrequestreview-478798597", "createdAt": "2020-08-31T17:20:34Z", "commit": {"oid": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoyMDozNFrOHKBlMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoyMDozNFrOHKBlMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg==", "bodyText": "You can simplify this using a reducer instead of a collector:\n    TextComponent result =\n        this.scores.entrySet().stream()\n            .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n            .limit(10)\n            .reduce(\n                TextComponent.builder(),\n                (builder, entry) ->\n                    builder\n                        .append(entry.getKey().getName(NameStyle.VERBOSE))\n                        .append(\": \", TextColor.GRAY)\n                        .append(\"\" + entry.getValue().intValue(), TextColor.WHITE),\n                ComponentBuilder::append)\n            .build();", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r480273712", "createdAt": "2020-08-31T17:20:34Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -92,26 +95,60 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build())\n+              .collect(Collectors.toList());\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n+      }\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbccc4f1661867e9082ae4f994eb70b95266b512", "author": {"user": {"login": "mrcookieunderscore13", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/bbccc4f1661867e9082ae4f994eb70b95266b512", "committedDate": "2020-10-01T02:09:56Z", "message": "Added translations\n\nSigned-off-by: mrcookie <athertonmook@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43a0e72822df2b7d2966ffef131cb4d95e6ab45a", "author": {"user": {"login": "mrcookieunderscore13", "name": null}}, "url": "https://github.com/PGMDev/PGM/commit/43a0e72822df2b7d2966ffef131cb4d95e6ab45a", "committedDate": "2020-10-01T02:35:04Z", "message": "Change color of \"You: \" to match your team color\n\nSigned-off-by: mrcookie <athertonmook@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMDc2MDI4", "url": "https://github.com/PGMDev/PGM/pull/621#pullrequestreview-500076028", "createdAt": "2020-10-01T07:31:01Z", "commit": {"oid": "43a0e72822df2b7d2966ffef131cb4d95e6ab45a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 458, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}