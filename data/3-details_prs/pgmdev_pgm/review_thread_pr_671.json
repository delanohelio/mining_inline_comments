{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NDY5NjA5", "number": 671, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjo1Njo0MFrOErmblQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzoxOTo1MlrOFAi0bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTUzODc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/filters/LocationQueryModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjo1Njo0MFrOHedNaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo1MjowNFrOHeiigQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5Nzg5OQ==", "bodyText": "You're losing pitch & yaw information when doing this.\nUse location.set(x,y,z) to keep yaw/pitch, but watch out of unintended side-effects, i doubt it will be a thing since player#getLocation always returns a new location, but if other places create this location it could be keeping it modified even after leaving the child filter.\nAlternatively just copy pitch & yaw alongisde world", "url": "https://github.com/PGMDev/PGM/pull/671#discussion_r501697899", "createdAt": "2020-10-08T12:56:40Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/filters/LocationQueryModifier.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package tc.oc.pgm.filters;\n+\n+import javax.annotation.Nullable;\n+import org.bukkit.Location;\n+import org.bukkit.event.Event;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.filter.Filter;\n+import tc.oc.pgm.api.filter.query.LocationQuery;\n+import tc.oc.pgm.filters.query.BlockQuery;\n+\n+public class LocationQueryModifier extends QueryModifier<LocationQuery> {\n+\n+  private final String[] coords;\n+  private final boolean local;\n+  Filter child;\n+\n+  public LocationQueryModifier(Filter child, String[] coords, boolean local) {\n+    super(child);\n+    this.coords = coords;\n+    this.local = local;\n+    this.child = child;\n+  }\n+\n+  @Override\n+  protected LocationQuery modifyQuery(LocationQuery query) {\n+    Location location = query.getLocation();\n+\n+    Vector newVector;\n+\n+    if (local) {\n+      newVector = parseLocalLocation(query.getLocation(), coords[0], coords[1], coords[2]);\n+    } else {\n+      newVector =\n+          new Vector(\n+              parseRelativeLocation(coords[0], location.getX()),\n+              parseRelativeLocation(coords[1], location.getY()),\n+              parseRelativeLocation(coords[2], location.getZ()));\n+    }\n+\n+    return new BlockQueryCustomLocation(\n+        query.getEvent(), newVector.toLocation(query.getMatch().getWorld()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba65089275671e1438a4741ae17916edfc4a0d2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4NTIxNw==", "bodyText": "this is solved with a clone(), good catch!", "url": "https://github.com/PGMDev/PGM/pull/671#discussion_r501785217", "createdAt": "2020-10-08T14:52:04Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/filters/LocationQueryModifier.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package tc.oc.pgm.filters;\n+\n+import javax.annotation.Nullable;\n+import org.bukkit.Location;\n+import org.bukkit.event.Event;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.filter.Filter;\n+import tc.oc.pgm.api.filter.query.LocationQuery;\n+import tc.oc.pgm.filters.query.BlockQuery;\n+\n+public class LocationQueryModifier extends QueryModifier<LocationQuery> {\n+\n+  private final String[] coords;\n+  private final boolean local;\n+  Filter child;\n+\n+  public LocationQueryModifier(Filter child, String[] coords, boolean local) {\n+    super(child);\n+    this.coords = coords;\n+    this.local = local;\n+    this.child = child;\n+  }\n+\n+  @Override\n+  protected LocationQuery modifyQuery(LocationQuery query) {\n+    Location location = query.getLocation();\n+\n+    Vector newVector;\n+\n+    if (local) {\n+      newVector = parseLocalLocation(query.getLocation(), coords[0], coords[1], coords[2]);\n+    } else {\n+      newVector =\n+          new Vector(\n+              parseRelativeLocation(coords[0], location.getX()),\n+              parseRelativeLocation(coords[1], location.getY()),\n+              parseRelativeLocation(coords[2], location.getZ()));\n+    }\n+\n+    return new BlockQueryCustomLocation(\n+        query.getEvent(), newVector.toLocation(query.getMatch().getWorld()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5Nzg5OQ=="}, "originalCommit": {"oid": "dba65089275671e1438a4741ae17916edfc4a0d2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Nzg3Njg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/filters/LocationQueryModifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMzo1NTozMFrOHlVOtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMzo1NTozMFrOHlVOtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwNzE5MA==", "bodyText": "Break this up into multiple classes, right now you are parsing this field during every query. Same with the relative vs. absolute coordinates. Do parsing at XML time, but it creates different classes with different functionality.", "url": "https://github.com/PGMDev/PGM/pull/671#discussion_r508907190", "createdAt": "2020-10-20T23:55:30Z", "author": {"login": "Electroid"}, "path": "core/src/main/java/tc/oc/pgm/filters/LocationQueryModifier.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package tc.oc.pgm.filters;\n+\n+import javax.annotation.Nullable;\n+import org.bukkit.Location;\n+import org.bukkit.event.Event;\n+import org.bukkit.util.Vector;\n+import tc.oc.pgm.api.filter.Filter;\n+import tc.oc.pgm.api.filter.query.LocationQuery;\n+import tc.oc.pgm.filters.query.BlockQuery;\n+\n+public class LocationQueryModifier extends QueryModifier<LocationQuery> {\n+\n+  private final String[] coords;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f8e79419a74533669f5e6f45c9254ce6cc1b7ab"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTQ4OTg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/filters/FilterParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzo0NTo0NlrOH1QFEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzo0NTo0NlrOH1QFEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwMDAxNw==", "bodyText": "I belive you could just pass this vector arround instead of a double[] with 3 values.\nIn case of the WorldLocationQueryModifier, pass both the vector and if x, y or z are relative or absolute", "url": "https://github.com/PGMDev/PGM/pull/671#discussion_r525600017", "createdAt": "2020-11-17T23:45:46Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/filters/FilterParser.java", "diffHunk": "@@ -443,4 +446,46 @@ public StructuralLoadFilter parseStructuralLoad(Element el) throws InvalidXMLExc\n   public TimeFilter parseTimeFilter(Element el) throws InvalidXMLException {\n     return new TimeFilter(XMLUtils.parseDuration(el, null));\n   }\n+\n+  // Methods for parsing QueryModifiers\n+\n+  @MethodParser(\"offset\")\n+  public LocationQueryModifier parseOffsetFilter(Element el) throws InvalidXMLException {\n+    String value = el.getAttributeValue(\"location\");\n+    // Check vector format\n+    XMLUtils.parseVector(new Node(el), value.replaceAll(\"[\\\\^~]\", \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd3c102aaa5b07c45925fbbc3e5b08edaef4662"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTE0NTcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/filters/FilterParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzoxOToxMVrOH-5njw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMjoxOTowMFrOIAJhZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxNzc3NQ==", "bodyText": "You're already running an XMLUtils.parseVector all the way at the top, no need to parse individual coords in substrings", "url": "https://github.com/PGMDev/PGM/pull/671#discussion_r535717775", "createdAt": "2020-12-03T23:19:11Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/filters/FilterParser.java", "diffHunk": "@@ -453,4 +457,46 @@ public TimeFilter parseTimeFilter(Element el) throws InvalidXMLException {\n   public ScoreFilter parseScoreFilter(Element el) throws InvalidXMLException {\n     return new ScoreFilter(XMLUtils.parseNumericRange(new Node(el), Integer.class));\n   }\n+\n+  // Methods for parsing QueryModifiers\n+\n+  @MethodParser(\"offset\")\n+  public LocationQueryModifier parseOffsetFilter(Element el) throws InvalidXMLException {\n+    String value = el.getAttributeValue(\"location\");\n+    // Check vector format\n+    XMLUtils.parseVector(new Node(el), value.replaceAll(\"[\\\\^~]\", \"\"));\n+\n+    String[] coords = value.split(\"\\\\s*,\\\\s*\");\n+\n+    Boolean local = null;\n+    for (String coord : coords) {\n+      if (local == null) {\n+        local = coord.startsWith(\"^\");\n+      }\n+\n+      if (coord.startsWith(\"^\") != local)\n+        throw new InvalidXMLException(\"Cannot mix world & local coordinates\", el);\n+    }\n+\n+    if (local == null) throw new InvalidXMLException(\"No coordinates provided\", el);\n+\n+    if (local) {\n+      double x = Double.parseDouble(coords[0].substring(1));\n+      double y = Double.parseDouble(coords[1].substring(1));\n+      double z = Double.parseDouble(coords[2].substring(1));\n+      return new LocalLocationQueryModifier(parseChild(el), new Vector(x, y, z));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c121aed7538e6349795b16bdaba4f574444b5d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyNjkxOQ==", "bodyText": "Right, forgot about that", "url": "https://github.com/PGMDev/PGM/pull/671#discussion_r537026919", "createdAt": "2020-12-06T12:19:00Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/filters/FilterParser.java", "diffHunk": "@@ -453,4 +457,46 @@ public TimeFilter parseTimeFilter(Element el) throws InvalidXMLException {\n   public ScoreFilter parseScoreFilter(Element el) throws InvalidXMLException {\n     return new ScoreFilter(XMLUtils.parseNumericRange(new Node(el), Integer.class));\n   }\n+\n+  // Methods for parsing QueryModifiers\n+\n+  @MethodParser(\"offset\")\n+  public LocationQueryModifier parseOffsetFilter(Element el) throws InvalidXMLException {\n+    String value = el.getAttributeValue(\"location\");\n+    // Check vector format\n+    XMLUtils.parseVector(new Node(el), value.replaceAll(\"[\\\\^~]\", \"\"));\n+\n+    String[] coords = value.split(\"\\\\s*,\\\\s*\");\n+\n+    Boolean local = null;\n+    for (String coord : coords) {\n+      if (local == null) {\n+        local = coord.startsWith(\"^\");\n+      }\n+\n+      if (coord.startsWith(\"^\") != local)\n+        throw new InvalidXMLException(\"Cannot mix world & local coordinates\", el);\n+    }\n+\n+    if (local == null) throw new InvalidXMLException(\"No coordinates provided\", el);\n+\n+    if (local) {\n+      double x = Double.parseDouble(coords[0].substring(1));\n+      double y = Double.parseDouble(coords[1].substring(1));\n+      double z = Double.parseDouble(coords[2].substring(1));\n+      return new LocalLocationQueryModifier(parseChild(el), new Vector(x, y, z));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxNzc3NQ=="}, "originalCommit": {"oid": "b1c121aed7538e6349795b16bdaba4f574444b5d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTE0Nzk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/filters/FilterParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzoxOTo1MlrOH-5ouw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzoxOTo1MlrOH-5ouw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxODA3NQ==", "bodyText": "kinda same thing here, no need for coordinates, just use the vector and just check for ~", "url": "https://github.com/PGMDev/PGM/pull/671#discussion_r535718075", "createdAt": "2020-12-03T23:19:52Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/filters/FilterParser.java", "diffHunk": "@@ -453,4 +457,46 @@ public TimeFilter parseTimeFilter(Element el) throws InvalidXMLException {\n   public ScoreFilter parseScoreFilter(Element el) throws InvalidXMLException {\n     return new ScoreFilter(XMLUtils.parseNumericRange(new Node(el), Integer.class));\n   }\n+\n+  // Methods for parsing QueryModifiers\n+\n+  @MethodParser(\"offset\")\n+  public LocationQueryModifier parseOffsetFilter(Element el) throws InvalidXMLException {\n+    String value = el.getAttributeValue(\"location\");\n+    // Check vector format\n+    XMLUtils.parseVector(new Node(el), value.replaceAll(\"[\\\\^~]\", \"\"));\n+\n+    String[] coords = value.split(\"\\\\s*,\\\\s*\");\n+\n+    Boolean local = null;\n+    for (String coord : coords) {\n+      if (local == null) {\n+        local = coord.startsWith(\"^\");\n+      }\n+\n+      if (coord.startsWith(\"^\") != local)\n+        throw new InvalidXMLException(\"Cannot mix world & local coordinates\", el);\n+    }\n+\n+    if (local == null) throw new InvalidXMLException(\"No coordinates provided\", el);\n+\n+    if (local) {\n+      double x = Double.parseDouble(coords[0].substring(1));\n+      double y = Double.parseDouble(coords[1].substring(1));\n+      double z = Double.parseDouble(coords[2].substring(1));\n+      return new LocalLocationQueryModifier(parseChild(el), new Vector(x, y, z));\n+    } else {\n+      boolean[] relative = new boolean[3];\n+      double[] coordinates = new double[3];\n+      for (int i = 0; i < coords.length; i++) {\n+        String coord = coords[i];\n+        boolean isRelative = coord.startsWith(\"~\");\n+        relative[i] = isRelative;\n+        coordinates[i] = Double.parseDouble(isRelative ? coord.substring(1) : coord);\n+      }\n+\n+      return new WorldLocationQueryModifier(\n+          parseChild(el), new Vector(coordinates[0], coordinates[1], coordinates[2]), relative);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c121aed7538e6349795b16bdaba4f574444b5d"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 942, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}