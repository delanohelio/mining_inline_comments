{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDI1NzY0", "number": 621, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxMzoyM1rOEaLq2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoyMDozNFrOEeZW9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODg5NjI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxMzoyM1rOHDcmyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxMzoyM1rOHDcmyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3NjQ1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public TextComponent getStatusMessage() {\n          \n          \n            \n                TextComponent message = this.getScoreMessage();\n          \n          \n            \n              public Component getStatusMessage() {\n          \n          \n            \n                Component message = this.getScoreMessage();", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r473376457", "createdAt": "2020-08-19T22:13:23Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +86,47 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public TextComponent getScoreMessage() {\n+    List<TextComponent> scoreMessages = Lists.newArrayList();\n+    FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      (TextComponent)\n+                          x.getKey()\n+                              .getName(NameStyle.VERBOSE)\n+                              .append(TextComponent.of(x.getKey().getColor().toString() + \": \"))\n+                              .append(\n+                                  TextComponent.of(\n+                                      x.getKey().getColor().toString()\n+                                          + ((int) (double) x.getValue())))));\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue())));\n+      }\n     }\n-    return ChatColor.DARK_AQUA + \"Score: \" + Joiner.on(\" \").join(scores);\n+    return TextComponent.of(ChatColor.DARK_AQUA + \"Score: \")\n+        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n   }\n \n   /** Gets the status message for the match. */\n-  public String getStatusMessage() {\n-    StringBuilder message = new StringBuilder(this.getScoreMessage());\n+  public TextComponent getStatusMessage() {\n+    TextComponent message = this.getScoreMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a48120a8397a118e2b7c7cb7f3144b92dd3d3d4"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODg5OTY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxNDowOVrOHDco9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxNDowOVrOHDco9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3NzAxNA==", "bodyText": "(int) x.getValue().doubleValue()\nsame for the scorePair.getValue call", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r473377014", "createdAt": "2020-08-19T22:14:09Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +86,47 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public TextComponent getScoreMessage() {\n+    List<TextComponent> scoreMessages = Lists.newArrayList();\n+    FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      (TextComponent)\n+                          x.getKey()\n+                              .getName(NameStyle.VERBOSE)\n+                              .append(TextComponent.of(x.getKey().getColor().toString() + \": \"))\n+                              .append(\n+                                  TextComponent.of(\n+                                      x.getKey().getColor().toString()\n+                                          + ((int) (double) x.getValue())))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a48120a8397a118e2b7c7cb7f3144b92dd3d3d4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODkxODQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxODoxMlrOHDc1Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxODoxMlrOHDc1Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM4MDE5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public TextComponent getScoreMessage() {\n          \n          \n            \n                List<TextComponent> scoreMessages = Lists.newArrayList();\n          \n          \n            \n                FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n          \n          \n            \n              public Component getScoreMessage() {\n          \n          \n            \n                final List<Component> scoreMessages = Lists.newArrayList();\n          \n          \n            \n                final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r473380198", "createdAt": "2020-08-19T22:18:12Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +86,47 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public TextComponent getScoreMessage() {\n+    List<TextComponent> scoreMessages = Lists.newArrayList();\n+    FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a48120a8397a118e2b7c7cb7f3144b92dd3d3d4"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODkzNTE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoyMTo0MFrOHDdAbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoyMTo0MFrOHDdAbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM4MzAyMg==", "bodyText": "Remove this wildcard import", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r473383022", "createdAt": "2020-08-19T22:21:40Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -2,14 +2,10 @@\n \n import static com.google.common.base.Preconditions.checkState;\n \n-import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n import java.time.Instant;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a48120a8397a118e2b7c7cb7f3144b92dd3d3d4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTkzMjY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxNToxN1rOHEhr7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxNToxN1rOHEhr7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwODI3MA==", "bodyText": "use a .limit(10) on the stream instead", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474508270", "createdAt": "2020-08-21T08:15:17Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));\n+      while (scoreMessages.size() > 10) {\n+        scoreMessages.remove(scoreMessages.size() - 1);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08151ae505f0ef4cfed606979a76e47759ba8dc"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTk0MzkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxNzoyMlrOHEhzOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxNzoyMlrOHEhzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMDEzNg==", "bodyText": "Use a proper reducer instead of forEachOrdered", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474510136", "createdAt": "2020-08-21T08:17:22Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08151ae505f0ef4cfed606979a76e47759ba8dc"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTk0ODQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxODoxOVrOHEh2Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxODoxOVrOHEh2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMDg5OQ==", "bodyText": "Don't use chat colors as strings, use them on the components instead", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474510899", "createdAt": "2020-08-21T08:18:19Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));\n+      while (scoreMessages.size() > 10) {\n+        scoreMessages.remove(scoreMessages.size() - 1);\n+      }\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                scorePair.getKey().getColor().toString()\n+                    + ((int) scorePair.getValue().doubleValue())));\n+      }\n     }\n-    return ChatColor.DARK_AQUA + \"Score: \" + Joiner.on(\" \").join(scores);\n+    return TextComponent.of(\"Score: \")\n+        .color(TextColor.DARK_AQUA)\n+        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n   }\n \n   /** Gets the status message for the match. */\n-  public String getStatusMessage() {\n-    StringBuilder message = new StringBuilder(this.getScoreMessage());\n+  public Component getStatusMessage() {\n+    Component message = this.getScoreMessage();\n     if (this.config.scoreLimit > 0) {\n       message\n-          .append(\"  \")\n-          .append(ChatColor.GRAY)\n-          .append(\"[\")\n-          .append(this.config.scoreLimit)\n-          .append(\"]\");\n+          .append(TextComponent.of(\"  \"))\n+          .append(TextComponent.of(TextColor.GRAY + \"[\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08151ae505f0ef4cfed606979a76e47759ba8dc"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODMzNjAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToyMjo0N1rOHE42_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToyMjo0N1rOHE42_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4NzkzMg==", "bodyText": "When working with TextComponent.of you can use the color in the primary constructor.\nWhat I mean is instead of\nTextComponent.of(\"Text\").color(TextColor.WHITE);\nyou do\nTextComponent.of(\"Text\", TextColor.WHITE);\nAlso, on line 105, why are you using a builder instead of just a simple TextComponent.of()?", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474887932", "createdAt": "2020-08-21T19:22:47Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08151ae505f0ef4cfed606979a76e47759ba8dc"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODM0MzcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToyNDoyMVrOHE476w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToyNDoyMVrOHE476w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4OTE5NQ==", "bodyText": "Use TextFormatter#convert on the color to use it as a TextColor instead.", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474889195", "createdAt": "2020-08-21T19:24:21Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));\n+      while (scoreMessages.size() > 10) {\n+        scoreMessages.remove(scoreMessages.size() - 1);\n+      }\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                scorePair.getKey().getColor().toString()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08151ae505f0ef4cfed606979a76e47759ba8dc"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODM0OTQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToyNToyNVrOHE4_eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToyNToyNVrOHE4_eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg5MDEwNQ==", "bodyText": "Any reason why you are splitting up these symbols into different appends? Seems like they could be a single one(since you are not doing any newlines)", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r474890105", "createdAt": "2020-08-21T19:25:25Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -88,26 +90,50 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage() {\n+    final List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      this.scores.entrySet().stream()\n+          .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+          .forEachOrdered(\n+              x ->\n+                  scoreMessages.add(\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(\n+                              TextComponent.builder().append(\": \").color(TextColor.GRAY).build())\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build()));\n+      while (scoreMessages.size() > 10) {\n+        scoreMessages.remove(scoreMessages.size() - 1);\n+      }\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                scorePair.getKey().getColor().toString()\n+                    + ((int) scorePair.getValue().doubleValue())));\n+      }\n     }\n-    return ChatColor.DARK_AQUA + \"Score: \" + Joiner.on(\" \").join(scores);\n+    return TextComponent.of(\"Score: \")\n+        .color(TextColor.DARK_AQUA)\n+        .append(TextFormatter.list(scoreMessages, TextColor.GRAY));\n   }\n \n   /** Gets the status message for the match. */\n-  public String getStatusMessage() {\n-    StringBuilder message = new StringBuilder(this.getScoreMessage());\n+  public Component getStatusMessage() {\n+    Component message = this.getScoreMessage();\n     if (this.config.scoreLimit > 0) {\n       message\n-          .append(\"  \")\n-          .append(ChatColor.GRAY)\n-          .append(\"[\")\n-          .append(this.config.scoreLimit)\n-          .append(\"]\");\n+          .append(TextComponent.of(\"  \"))\n+          .append(TextComponent.of(TextColor.GRAY + \"[\"))\n+          .append(TextComponent.of(this.config.scoreLimit))\n+          .append(TextComponent.of(\"]\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08151ae505f0ef4cfed606979a76e47759ba8dc"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzA4MjEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoyMDozNFrOHKBlMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxOTozNTo1NVrOHU8ktA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg==", "bodyText": "You can simplify this using a reducer instead of a collector:\n    TextComponent result =\n        this.scores.entrySet().stream()\n            .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n            .limit(10)\n            .reduce(\n                TextComponent.builder(),\n                (builder, entry) ->\n                    builder\n                        .append(entry.getKey().getName(NameStyle.VERBOSE))\n                        .append(\": \", TextColor.GRAY)\n                        .append(\"\" + entry.getValue().intValue(), TextColor.WHITE),\n                ComponentBuilder::append)\n            .build();", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r480273712", "createdAt": "2020-08-31T17:20:34Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -92,26 +95,60 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build())\n+              .collect(Collectors.toList());\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n+      }\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ4NDYzMQ==", "bodyText": "Well, I need the output to be a list, so I can use TextFormatter.list(...) to list the names in a nice format: Player1, Player2, ... , and PlayerN. Using a collector seems like the proper way right?", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r480484631", "createdAt": "2020-09-01T00:09:59Z", "author": {"login": "mrcookieunderscore13"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -92,26 +95,60 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build())\n+              .collect(Collectors.toList());\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n+      }\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg=="}, "originalCommit": {"oid": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU2OTk5NQ==", "bodyText": "A joining collector may be a better alternative then, look at how the Collectors.joining collector works for strings and do a similar one for this", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r480569995", "createdAt": "2020-09-01T01:44:43Z", "author": {"login": "Pablete1234"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -92,26 +95,60 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build())\n+              .collect(Collectors.toList());\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n+      }\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg=="}, "originalCommit": {"oid": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NjIxMA==", "bodyText": "Using Collectors.joining, there is no easy way to have the last element separated like <element n-1>, and <element n>, rather than just a comma. I don't understand what is wrong with the method I am currently using.", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r481476210", "createdAt": "2020-09-01T22:54:52Z", "author": {"login": "mrcookieunderscore13"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -92,26 +95,60 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build())\n+              .collect(Collectors.toList());\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n+      }\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg=="}, "originalCommit": {"oid": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MzQ0Mw==", "bodyText": "@mrcookieunderscore13 Maybe you are looking for something like what is in TextFormatter#list ?", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r490143443", "createdAt": "2020-09-17T10:37:48Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -92,26 +95,60 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build())\n+              .collect(Collectors.toList());\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n+      }\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg=="}, "originalCommit": {"oid": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxMDQxNA==", "bodyText": "@KingOfSquares I do use that method. I use the stream to make an ordered list of the players, and then a few lines down use TextFormatter#list to format it properly.", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r491710414", "createdAt": "2020-09-20T16:55:10Z", "author": {"login": "mrcookieunderscore13"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -92,26 +95,60 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build())\n+              .collect(Collectors.toList());\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n+      }\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg=="}, "originalCommit": {"oid": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcyNjAwNA==", "bodyText": "Right, then I think I misunderstood the argument between you and Pablo", "url": "https://github.com/PGMDev/PGM/pull/621#discussion_r491726004", "createdAt": "2020-09-20T19:35:55Z", "author": {"login": "KingOfSquares"}, "path": "core/src/main/java/tc/oc/pgm/score/ScoreMatchModule.java", "diffHunk": "@@ -92,26 +95,60 @@ public double getScore(Competitor competitor) {\n   }\n \n   /** Gets the score message for the match. */\n-  public String getScoreMessage() {\n-    List<String> scores = Lists.newArrayList();\n-    for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n-      scores.add(scorePair.getKey().getColor().toString() + ((int) (double) scorePair.getValue()));\n+  public Component getScoreMessage(MatchPlayer matchPlayer) {\n+    List<Component> scoreMessages = Lists.newArrayList();\n+    final FreeForAllMatchModule ffamm = match.getModule(FreeForAllMatchModule.class);\n+    if (ffamm != null) {\n+      scoreMessages =\n+          this.scores.entrySet().stream()\n+              .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n+              .limit(10)\n+              .map(\n+                  x ->\n+                      TextComponent.builder()\n+                          .append(x.getKey().getName(NameStyle.VERBOSE))\n+                          .append(TextComponent.of(\": \", TextColor.GRAY))\n+                          .append(TextComponent.of((int) x.getValue().doubleValue()))\n+                          .color(TextColor.WHITE)\n+                          .build())\n+              .collect(Collectors.toList());\n+    } else {\n+\n+      for (Entry<Competitor, Double> scorePair : this.scores.entrySet()) {\n+        scoreMessages.add(\n+            TextComponent.of(\n+                ((int) scorePair.getValue().doubleValue()),\n+                TextFormatter.convert(scorePair.getKey().getColor())));\n+      }\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MzcxMg=="}, "originalCommit": {"oid": "8dfab697acf7dbd9fe4bddbb9a8ebc26b018b814"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1047, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}