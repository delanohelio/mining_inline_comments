{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNzcwOTk1", "number": 223, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMDoxNToyMlrODXWeEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNzowNDo0OFrODXXHuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODExOTg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/modules/RaindropSoundsMatchModule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMDoxNToyMlrOFcnWKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMDoxNzoxMlrOFcnWZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0OTA5Ng==", "bodyText": "Will this play for touching a core? When touching cores you shouldn't get them until completion", "url": "https://github.com/PGMDev/PGM/pull/223#discussion_r365549096", "createdAt": "2020-01-12T00:15:22Z", "author": {"login": "Pablete1234"}, "path": "src/main/java/tc/oc/pgm/modules/RaindropSoundsMatchModule.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package tc.oc.pgm.modules;\n+\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import tc.oc.pgm.api.chat.Sound;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.MatchPlayerState;\n+import tc.oc.pgm.api.player.ParticipantState;\n+import tc.oc.pgm.api.player.event.MatchPlayerDeathEvent;\n+import tc.oc.pgm.api.setting.SettingKey;\n+import tc.oc.pgm.api.setting.SettingValue;\n+import tc.oc.pgm.api.setting.Settings;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.goals.events.GoalTouchEvent;\n+import tc.oc.pgm.match.MatchModule;\n+import tc.oc.pgm.match.MatchModuleFactory;\n+import tc.oc.pgm.module.ModuleLoadException;\n+import tc.oc.pgm.wool.PlayerWoolPlaceEvent;\n+\n+@ListenerScope(MatchScope.RUNNING)\n+public class RaindropSoundsMatchModule extends MatchModule implements Listener {\n+\n+  public static class Factory implements MatchModuleFactory<RaindropSoundsMatchModule> {\n+    @Override\n+    public RaindropSoundsMatchModule createMatchModule(Match match) throws ModuleLoadException {\n+      return new RaindropSoundsMatchModule(match);\n+    }\n+  }\n+\n+  private static final Sound SOUND = new Sound(\"random.levelup\", 1f, 1.5f);\n+\n+  public RaindropSoundsMatchModule(Match match) {\n+    super(match);\n+  }\n+\n+  private void play(MatchPlayer player) {\n+    Settings settings = player.getSettings();\n+    if (settings.getValue(SettingKey.RAINDROP_SOUNDS).equals(SettingValue.RAINDROP_SOUNDS_ON)) {\n+      player.playSound(SOUND);\n+    }\n+  }\n+\n+  private void play(MatchPlayerState playerState) {\n+    playerState.getPlayer().ifPresent(this::play);\n+  }\n+\n+  private void play(Competitor competitor) {\n+    competitor.getPlayers().forEach(this::play);\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onMatchPlayerDeath(MatchPlayerDeathEvent event) {\n+    ParticipantState killer = event.getKiller();\n+    if (killer != null) {\n+      play(killer);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onMatchFinish(MatchFinishEvent event) {\n+    event.getWinners().forEach(this::play);\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onGoalTouch(GoalTouchEvent event) {\n+    ParticipantState player = event.getPlayer();\n+    if (player != null) {\n+      play(player);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4573a64aaf4268b0609e9cb6b50d83f1793e22b8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0OTE1Nw==", "bodyText": "Yes, this will play just for the first touch.", "url": "https://github.com/PGMDev/PGM/pull/223#discussion_r365549157", "createdAt": "2020-01-12T00:17:12Z", "author": {"login": "TheMolkaPL"}, "path": "src/main/java/tc/oc/pgm/modules/RaindropSoundsMatchModule.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package tc.oc.pgm.modules;\n+\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import tc.oc.pgm.api.chat.Sound;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.MatchPlayerState;\n+import tc.oc.pgm.api.player.ParticipantState;\n+import tc.oc.pgm.api.player.event.MatchPlayerDeathEvent;\n+import tc.oc.pgm.api.setting.SettingKey;\n+import tc.oc.pgm.api.setting.SettingValue;\n+import tc.oc.pgm.api.setting.Settings;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.goals.events.GoalTouchEvent;\n+import tc.oc.pgm.match.MatchModule;\n+import tc.oc.pgm.match.MatchModuleFactory;\n+import tc.oc.pgm.module.ModuleLoadException;\n+import tc.oc.pgm.wool.PlayerWoolPlaceEvent;\n+\n+@ListenerScope(MatchScope.RUNNING)\n+public class RaindropSoundsMatchModule extends MatchModule implements Listener {\n+\n+  public static class Factory implements MatchModuleFactory<RaindropSoundsMatchModule> {\n+    @Override\n+    public RaindropSoundsMatchModule createMatchModule(Match match) throws ModuleLoadException {\n+      return new RaindropSoundsMatchModule(match);\n+    }\n+  }\n+\n+  private static final Sound SOUND = new Sound(\"random.levelup\", 1f, 1.5f);\n+\n+  public RaindropSoundsMatchModule(Match match) {\n+    super(match);\n+  }\n+\n+  private void play(MatchPlayer player) {\n+    Settings settings = player.getSettings();\n+    if (settings.getValue(SettingKey.RAINDROP_SOUNDS).equals(SettingValue.RAINDROP_SOUNDS_ON)) {\n+      player.playSound(SOUND);\n+    }\n+  }\n+\n+  private void play(MatchPlayerState playerState) {\n+    playerState.getPlayer().ifPresent(this::play);\n+  }\n+\n+  private void play(Competitor competitor) {\n+    competitor.getPlayers().forEach(this::play);\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onMatchPlayerDeath(MatchPlayerDeathEvent event) {\n+    ParticipantState killer = event.getKiller();\n+    if (killer != null) {\n+      play(killer);\n+    }\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onMatchFinish(MatchFinishEvent event) {\n+    event.getWinners().forEach(this::play);\n+  }\n+\n+  @EventHandler(priority = EventPriority.MONITOR)\n+  public void onGoalTouch(GoalTouchEvent event) {\n+    ParticipantState player = event.getPlayer();\n+    if (player != null) {\n+      play(player);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0OTA5Ng=="}, "originalCommit": {"oid": "4573a64aaf4268b0609e9cb6b50d83f1793e22b8"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODIyNjIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/api/setting/SettingKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNzowMzo1MFrOFcoI0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNzowMzo1MFrOFcoI0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MjA2NA==", "bodyText": "just sounds, want to make it expandable", "url": "https://github.com/PGMDev/PGM/pull/223#discussion_r365562064", "createdAt": "2020-01-12T07:03:50Z", "author": {"login": "Electroid"}, "path": "src/main/java/tc/oc/pgm/api/setting/SettingKey.java", "diffHunk": "@@ -30,6 +30,10 @@ public void update(MatchPlayer player) {\n       player.resetVisibility();\n     }\n   }, // Changes if observers are visible\n+  RAINDROP_SOUNDS(\n+      Arrays.asList(\"raindrop-sounds\", \"rds\"),\n+      RAINDROP_SOUNDS_ON,\n+      RAINDROP_SOUNDS_OFF), // Changes if raindrop sounds are played", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4573a64aaf4268b0609e9cb6b50d83f1793e22b8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODIyNjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/api/setting/SettingValue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNzowMzo1N1rOFcoI2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNzowMzo1N1rOFcoI2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MjA3Mg==", "bodyText": "sounds", "url": "https://github.com/PGMDev/PGM/pull/223#discussion_r365562072", "createdAt": "2020-01-12T07:03:57Z", "author": {"login": "Electroid"}, "path": "src/main/java/tc/oc/pgm/api/setting/SettingValue.java", "diffHunk": "@@ -33,6 +33,9 @@\n \n   OBSERVERS_ON(\"observers\", \"on\"), // Show observers\n   OBSERVERS_OFF(\"observers\", \"off\"), // Hide observers\n+\n+  RAINDROP_SOUNDS_ON(\"raindrop_sounds\", \"on\"), // Always play raindrop sounds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4573a64aaf4268b0609e9cb6b50d83f1793e22b8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODIyNjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/tc/oc/pgm/modules/RaindropSoundsMatchModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNzowNDo0OFrOFcoI9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwNzowNDo0OFrOFcoI9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2MjEwMQ==", "bodyText": "There's no concept of \"raindrops\" anymore, should just be sounds.", "url": "https://github.com/PGMDev/PGM/pull/223#discussion_r365562101", "createdAt": "2020-01-12T07:04:48Z", "author": {"login": "Electroid"}, "path": "src/main/java/tc/oc/pgm/modules/RaindropSoundsMatchModule.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package tc.oc.pgm.modules;\n+\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.EventPriority;\n+import org.bukkit.event.Listener;\n+import tc.oc.pgm.api.chat.Sound;\n+import tc.oc.pgm.api.match.Match;\n+import tc.oc.pgm.api.match.MatchScope;\n+import tc.oc.pgm.api.match.event.MatchFinishEvent;\n+import tc.oc.pgm.api.party.Competitor;\n+import tc.oc.pgm.api.player.MatchPlayer;\n+import tc.oc.pgm.api.player.MatchPlayerState;\n+import tc.oc.pgm.api.player.ParticipantState;\n+import tc.oc.pgm.api.player.event.MatchPlayerDeathEvent;\n+import tc.oc.pgm.api.setting.SettingKey;\n+import tc.oc.pgm.api.setting.SettingValue;\n+import tc.oc.pgm.api.setting.Settings;\n+import tc.oc.pgm.events.ListenerScope;\n+import tc.oc.pgm.goals.events.GoalTouchEvent;\n+import tc.oc.pgm.match.MatchModule;\n+import tc.oc.pgm.match.MatchModuleFactory;\n+import tc.oc.pgm.module.ModuleLoadException;\n+import tc.oc.pgm.wool.PlayerWoolPlaceEvent;\n+\n+@ListenerScope(MatchScope.RUNNING)\n+public class RaindropSoundsMatchModule extends MatchModule implements Listener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4573a64aaf4268b0609e9cb6b50d83f1793e22b8"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1109, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}