{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NTI1MjEz", "number": 3256, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxMToxNDo1NVrODiFCOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxMToxNDo1NVrODiFCOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDYwNjY0OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/DotNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxMToxNDo1NVrOFtKsjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDoyNjowOFrOFtustQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNTQ4Ng==", "bodyText": "Interesting, I thought entityType.isNullable() would imply !isPropertyEmbeddedInJoinProperties( parentAsDotNode.propertyName ).\nObviously the API of the PropertyMapping gets a little bit vague here. Most code assumes that properties in the PropertyMapping are actually deducible from just the association owners subclass column span, which nullable properties are inherently not. In that sense, it doesn't make sense for the property to be considered here. As far as I remember, this was at least how these were handled at the time I wrote this originally. It might have changed since, or I might just as well have simply overlooked this case.\nAnyways, I expected joinIsNeeded for generateJoin && entityType.isNullable - so nothing worries me here. The tests that the two of us introduced with HHH-12775 and others are also still passing. The tests for this PR are very extensive.  So I am sure this change is fine!", "url": "https://github.com/hibernate/hibernate-orm/pull/3256#discussion_r382905486", "createdAt": "2020-02-22T11:14:55Z", "author": {"login": "jwgmeligmeyling"}, "path": "hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/DotNode.java", "diffHunk": "@@ -394,11 +394,14 @@ private void dereferenceEntity(\n \n \t\tif ( isDotNode( parent ) ) {\n \t\t\t// our parent is another dot node, meaning we are being further dereferenced.\n-\t\t\t// thus we need to generate a join unless the parent refers to the associated\n-\t\t\t// entity's PK (because 'our' table would know the FK).\n+\t\t\t// thus we need to generate a join unless the association is non-nullable and\n+\t\t\t// parent refers to the associated entity's PK (because 'our' table would know the FK).\n \t\t\tparentAsDotNode = (DotNode) parent;\n \t\t\tproperty = parentAsDotNode.propertyName;\n-\t\t\tjoinIsNeeded = generateJoin && !isPropertyEmbeddedInJoinProperties( parentAsDotNode.propertyName );\n+\t\t\tjoinIsNeeded = generateJoin && (\n+\t\t\t\t\tentityType.isNullable() ||\n+\t\t\t\t\t!isPropertyEmbeddedInJoinProperties( parentAsDotNode.propertyName )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20aba6dd9eb1fde7976d7633c9c5304056902cde"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5NTM0OQ==", "bodyText": "@gbadner, thanks for your comments. I think the the issue here is that a nullable one-to-one association was not taken into account. When a querying using a path for an optional one-to-one with an implicit join, a join must be included in the query.", "url": "https://github.com/hibernate/hibernate-orm/pull/3256#discussion_r383495349", "createdAt": "2020-02-24T20:26:08Z", "author": {"login": "gbadner"}, "path": "hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/DotNode.java", "diffHunk": "@@ -394,11 +394,14 @@ private void dereferenceEntity(\n \n \t\tif ( isDotNode( parent ) ) {\n \t\t\t// our parent is another dot node, meaning we are being further dereferenced.\n-\t\t\t// thus we need to generate a join unless the parent refers to the associated\n-\t\t\t// entity's PK (because 'our' table would know the FK).\n+\t\t\t// thus we need to generate a join unless the association is non-nullable and\n+\t\t\t// parent refers to the associated entity's PK (because 'our' table would know the FK).\n \t\t\tparentAsDotNode = (DotNode) parent;\n \t\t\tproperty = parentAsDotNode.propertyName;\n-\t\t\tjoinIsNeeded = generateJoin && !isPropertyEmbeddedInJoinProperties( parentAsDotNode.propertyName );\n+\t\t\tjoinIsNeeded = generateJoin && (\n+\t\t\t\t\tentityType.isNullable() ||\n+\t\t\t\t\t!isPropertyEmbeddedInJoinProperties( parentAsDotNode.propertyName )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNTQ4Ng=="}, "originalCommit": {"oid": "20aba6dd9eb1fde7976d7633c9c5304056902cde"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4043, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}