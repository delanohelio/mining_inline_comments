{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNzkzNjk2", "number": 3282, "title": "HHH-13619", "bodyText": "Proposed solution introduces new CollectionSizeNode and CollectionPathNode types and hooks them in to grammars and walking", "createdAt": "2020-03-04T19:02:23Z", "url": "https://github.com/hibernate/hibernate-orm/pull/3282", "merged": true, "mergeCommit": {"oid": "26ab3c536296193304e906bc478f58082d6f8420"}, "closed": true, "closedAt": "2020-03-06T12:15:52Z", "author": {"login": "sebersole"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKbVpEAH2gAyMzgzNzkzNjk2OjI0Y2VkZmE2ZWM2MzEwNWI0MjNlYzg3ZjhkYWRjYTcxNmQ2NDE5MGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKtrg_gH2gAyMzgzNzkzNjk2OjI2YWIzYzUzNjI5NjE5MzMwNGU5MDZiYzQ3OGY1ODA4MmQ2Zjg0MjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "24cedfa6ec63105b423ec87f8dadca716d64190a", "author": {"user": {"login": "gbadner", "name": null}}, "url": "https://github.com/hibernate/hibernate-orm/commit/24cedfa6ec63105b423ec87f8dadca716d64190a", "committedDate": "2020-03-04T18:36:24Z", "message": "HHH-13619 : test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "692f19c83fef4339112e4fbabcc09437999a1bdf", "author": {"user": {"login": "sebersole", "name": "Steve Ebersole"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/692f19c83fef4339112e4fbabcc09437999a1bdf", "committedDate": "2020-03-04T18:37:37Z", "message": "HHH-13619 - Support for JPA's `size` function as a select expression\n\n- initial support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "336c3b9e30616bdfe024a2ce3d802037c54f0b60", "author": {"user": {"login": "sebersole", "name": "Steve Ebersole"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/336c3b9e30616bdfe024a2ce3d802037c54f0b60", "committedDate": "2020-03-04T18:37:37Z", "message": "HHH-13619 - Support for JPA's `size` function as a select expression\n\n- code cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDg3MjEx", "url": "https://github.com/hibernate/hibernate-orm/pull/3282#pullrequestreview-369487211", "createdAt": "2020-03-05T11:19:01Z", "commit": {"oid": "336c3b9e30616bdfe024a2ce3d802037c54f0b60"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToxOTowMlrOFyPu2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToxOTowMlrOFyPu2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMDg3Mw==", "bodyText": "really a minor but probably we can initialize qualifierQueryPath and referencePath later\nif ( qualifier == null ) {\n   referencePath = referenceName;\n....}else{\n final String qualifierQueryPath = ( (FromReferenceNode) qualifier ).getPath();\n referencePath = qualifierQueryPath + \".\" + reference;\n}", "url": "https://github.com/hibernate/hibernate-orm/pull/3282#discussion_r388230873", "createdAt": "2020-03-05T11:19:02Z", "author": {"login": "dreab8"}, "path": "hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/CollectionPathNode.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later\n+ * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html\n+ */\n+package org.hibernate.hql.internal.ast.tree;\n+\n+import java.util.List;\n+\n+import org.hibernate.QueryException;\n+import org.hibernate.hql.internal.ast.HqlSqlWalker;\n+import org.hibernate.hql.internal.ast.SqlASTFactory;\n+import org.hibernate.internal.util.StringHelper;\n+import org.hibernate.persister.collection.CollectionPersister;\n+import org.hibernate.persister.collection.QueryableCollection;\n+import org.hibernate.persister.entity.EntityPersister;\n+import org.hibernate.persister.entity.Joinable;\n+import org.hibernate.persister.entity.PropertyMapping;\n+import org.hibernate.type.CollectionType;\n+import org.hibernate.type.CompositeType;\n+import org.hibernate.type.EntityType;\n+import org.hibernate.type.Type;\n+\n+import antlr.SemanticException;\n+import antlr.collections.AST;\n+\n+/**\n+ * @author Steve Ebersole\n+ */\n+public class CollectionPathNode extends SqlNode {\n+\t/**\n+\t * Used to resolve the collection \"owner key\" columns\n+ \t */\n+\tprivate final FromElement ownerFromElement;\n+\n+\tprivate final CollectionPersister collectionDescriptor;\n+\n+\tprivate final String collectionPropertyName;\n+\tprivate final String collectionPropertyPath;\n+\tprivate final String collectionQueryPath;\n+\n+\tprivate final HqlSqlWalker walker;\n+\n+\n+\t/**\n+\t * Instantiate a `CollectionPathNode`\n+\t *\n+\t * @see #from(AST, AST, HqlSqlWalker)\n+\t */\n+\tpublic CollectionPathNode(\n+\t\t\tFromElement ownerFromElement,\n+\t\t\tCollectionPersister collectionDescriptor,\n+\t\t\tString collectionPropertyName,\n+\t\t\tString collectionQueryPath,\n+\t\t\tString collectionPropertyPath,\n+\t\t\tHqlSqlWalker walker) {\n+\t\tthis.ownerFromElement = ownerFromElement;\n+\t\tthis.collectionDescriptor = collectionDescriptor;\n+\t\tthis.collectionPropertyName = collectionPropertyName;\n+\t\tthis.collectionQueryPath = collectionQueryPath;\n+\t\tthis.collectionPropertyPath = collectionPropertyPath;\n+\t\tthis.walker = walker;\n+\n+\t\twalker.addQuerySpaces( collectionDescriptor.getCollectionSpaces() );\n+\n+\t\tsuper.setType( SqlASTFactory.COLL_PATH );\n+\t\tsuper.setDataType( collectionDescriptor.getCollectionType() );\n+\t\tsuper.setText( collectionDescriptor.getRole() );\n+\t}\n+\n+\t/**\n+\t * Factory for `CollectionPathNode` instances\n+\t *\n+\t * @param qualifier The left-hand-side of a dot-ident node - may be null to indicate an ident arg\n+\t * @param reference The right-hand-side of the dot-ident or the ident that is an unqualified reference\n+\t */\n+\tpublic static CollectionPathNode from(\n+\t\t\tAST qualifier,\n+\t\t\tAST reference,\n+\t\t\tHqlSqlWalker walker) {\n+\n+\t\tfinal String referenceName = reference.getText();\n+\t\tfinal String qualifierQueryPath = qualifier == null\n+\t\t\t\t? \"\"\n+\t\t\t\t: ( (FromReferenceNode) qualifier ).getPath();\n+\t\tfinal String referencePath = qualifier == null\n+\t\t\t\t? referenceName\n+\t\t\t\t: qualifierQueryPath + \".\" + reference;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336c3b9e30616bdfe024a2ce3d802037c54f0b60"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDg4MTAz", "url": "https://github.com/hibernate/hibernate-orm/pull/3282#pullrequestreview-369488103", "createdAt": "2020-03-05T11:20:32Z", "commit": {"oid": "336c3b9e30616bdfe024a2ce3d802037c54f0b60"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToyMDozMlrOFyPxYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToyMDozMlrOFyPxYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMTUyMA==", "bodyText": "another minor, the ImpliedFromElement(FromClause fromClause, FromElement origin, String alias)  constructor is never used, may be it can be deleted", "url": "https://github.com/hibernate/hibernate-orm/pull/3282#discussion_r388231520", "createdAt": "2020-03-05T11:20:32Z", "author": {"login": "dreab8"}, "path": "hibernate-core/src/main/java/org/hibernate/hql/internal/ast/tree/ImpliedFromElement.java", "diffHunk": "@@ -23,6 +23,21 @@\n \t */\n \tprivate boolean inProjectionList;\n \n+\t/**\n+\t * Here to add debug breakpoints\n+\t */\n+\t@SuppressWarnings(\"unused\")\n+\tpublic ImpliedFromElement() {\n+\t\tsuper();\n+\t}\n+\n+\t/**\n+\t * Here to add debug breakpoints\n+\t */\n+\tpublic ImpliedFromElement(FromClause fromClause, FromElement origin, String alias) {\n+\t\tsuper( fromClause, origin, alias );\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336c3b9e30616bdfe024a2ce3d802037c54f0b60"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDg4NjU5", "url": "https://github.com/hibernate/hibernate-orm/pull/3282#pullrequestreview-369488659", "createdAt": "2020-03-05T11:21:29Z", "commit": {"oid": "336c3b9e30616bdfe024a2ce3d802037c54f0b60"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26ab3c536296193304e906bc478f58082d6f8420", "author": {"user": {"login": "sebersole", "name": "Steve Ebersole"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/26ab3c536296193304e906bc478f58082d6f8420", "committedDate": "2020-03-05T15:58:35Z", "message": "HHH-13619 - Support for JPA's `size` function as a select expression\n\n- PR revisions"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3201, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}