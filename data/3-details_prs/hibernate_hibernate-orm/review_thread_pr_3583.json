{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MDkwMTU0", "number": 3583, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODozNzozNlrOErTzAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo0Njo0MFrOErT_AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODQ4NTc2OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/boot/model/naming/ImplicitNamingStrategyComponentPathImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODozNzozNlrOHeAp-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTozMTo0MVrOHeCc7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMDA3Mw==", "bodyText": "I remember we have discussed the bad performance of xxx.equals( \"\" ) and @Sanne has created a util method to avoid it. We can simply use StringHelper.isNotEmpty( parent.getProperty ) here after parent's nullness checking.", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501230073", "createdAt": "2020-10-07T18:37:36Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/boot/model/naming/ImplicitNamingStrategyComponentPathImpl.java", "diffHunk": "@@ -30,14 +31,17 @@ protected String transformAttributePath(AttributePath attributePath) {\n \t}\n \n \tpublic static void process(AttributePath attributePath, StringBuilder sb) {\n-\t\tif ( attributePath.getParent() != null ) {\n-\t\t\tprocess( attributePath.getParent(), sb );\n-\t\t\tif ( StringHelper.isNotEmpty( attributePath.getParent().getProperty() ) ) {\n-\t\t\t\tsb.append( '_' );\n-\t\t\t}\n-\t\t}\n-\n \t\tString property = attributePath.getProperty();\n+\t\tfinal AttributePath parent = attributePath.getParent();\n+\t\tif ( parent != null && !parent.getProperty().equals( \"\" ) ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMTE4OQ==", "bodyText": "see #3491", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501231189", "createdAt": "2020-10-07T18:39:35Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/boot/model/naming/ImplicitNamingStrategyComponentPathImpl.java", "diffHunk": "@@ -30,14 +31,17 @@ protected String transformAttributePath(AttributePath attributePath) {\n \t}\n \n \tpublic static void process(AttributePath attributePath, StringBuilder sb) {\n-\t\tif ( attributePath.getParent() != null ) {\n-\t\t\tprocess( attributePath.getParent(), sb );\n-\t\t\tif ( StringHelper.isNotEmpty( attributePath.getParent().getProperty() ) ) {\n-\t\t\t\tsb.append( '_' );\n-\t\t\t}\n-\t\t}\n-\n \t\tString property = attributePath.getProperty();\n+\t\tfinal AttributePath parent = attributePath.getParent();\n+\t\tif ( parent != null && !parent.getProperty().equals( \"\" ) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMDA3Mw=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1OTUwMQ==", "bodyText": "Yes, that was burried in my comment at #3583 (comment) but I completely agree it should use #isNotEmpty", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501259501", "createdAt": "2020-10-07T19:31:41Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/boot/model/naming/ImplicitNamingStrategyComponentPathImpl.java", "diffHunk": "@@ -30,14 +31,17 @@ protected String transformAttributePath(AttributePath attributePath) {\n \t}\n \n \tpublic static void process(AttributePath attributePath, StringBuilder sb) {\n-\t\tif ( attributePath.getParent() != null ) {\n-\t\t\tprocess( attributePath.getParent(), sb );\n-\t\t\tif ( StringHelper.isNotEmpty( attributePath.getParent().getProperty() ) ) {\n-\t\t\t\tsb.append( '_' );\n-\t\t\t}\n-\t\t}\n-\n \t\tString property = attributePath.getProperty();\n+\t\tfinal AttributePath parent = attributePath.getParent();\n+\t\tif ( parent != null && !parent.getProperty().equals( \"\" ) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMDA3Mw=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODQ5Njk3OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/test/java/org/hibernate/id/idclass/IdClassNamingStrategyTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo0MDo1MFrOHeAxEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo0MDo1MFrOHeAxEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMTg4OA==", "bodyText": "It would be great to avoid TAB and space mixture for the above comments to avoid inconsistent presenting. The above is a good example.", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501231888", "createdAt": "2020-10-07T18:40:50Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/test/java/org/hibernate/id/idclass/IdClassNamingStrategyTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+package org.hibernate.id.idclass;\n+\n+import org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl;\n+import org.hibernate.cfg.Configuration;\n+\n+import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;\n+import org.junit.Test;\n+\n+public class IdClassNamingStrategyTest extends BaseCoreFunctionalTestCase {\n+\n+\t@Override\n+\tprotected Class<?>[] getAnnotatedClasses() {\n+\t\treturn new Class<?>[] { MyEntity.class };\n+\t}\n+\n+\t@Override\n+\tprotected void configure(Configuration configuration) {\n+\t\t/*\n+\t\t * With this implicit naming strategy, we got the following mapping:\n+\t\t *\n+\t\t * create table MyEntity (\n+         *   id_idA bigint not null,\n+         *   id_idB bigint not null,\n+         *   _identifierMapper_idA bigint not null, <-- ??\n+         *   _identifierMapper_idB bigint not null, <-- ??\n+         *   notes varchar(255),\n+         *   primary key (id_idA, id_idB)\n+         * )\n+\t\t */\n+\t\tconfiguration.setImplicitNamingStrategy( new ImplicitNamingStrategyComponentPathImpl() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODQ5ODgyOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/test/java/org/hibernate/id/idclass/IdClassNamingStrategyTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo0MToyMVrOHeAyNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo0MToyMVrOHeAyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMjE4Mg==", "bodyText": "We'd better add @TestForIssue annotation above", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501232182", "createdAt": "2020-10-07T18:41:21Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/test/java/org/hibernate/id/idclass/IdClassNamingStrategyTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+package org.hibernate.id.idclass;\n+\n+import org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl;\n+import org.hibernate.cfg.Configuration;\n+\n+import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;\n+import org.junit.Test;\n+\n+public class IdClassNamingStrategyTest extends BaseCoreFunctionalTestCase {\n+\n+\t@Override\n+\tprotected Class<?>[] getAnnotatedClasses() {\n+\t\treturn new Class<?>[] { MyEntity.class };\n+\t}\n+\n+\t@Override\n+\tprotected void configure(Configuration configuration) {\n+\t\t/*\n+\t\t * With this implicit naming strategy, we got the following mapping:\n+\t\t *\n+\t\t * create table MyEntity (\n+         *   id_idA bigint not null,\n+         *   id_idB bigint not null,\n+         *   _identifierMapper_idA bigint not null, <-- ??\n+         *   _identifierMapper_idB bigint not null, <-- ??\n+         *   notes varchar(255),\n+         *   primary key (id_idA, id_idB)\n+         * )\n+\t\t */\n+\t\tconfiguration.setImplicitNamingStrategy( new ImplicitNamingStrategyComponentPathImpl() );\n+\t}\n+\n+\t@Test\n+\tpublic void test() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODUwMjk5OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/test/java/org/hibernate/id/idclass/MyEntity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo0MjozM1rOHeA0xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo0MjozM1rOHeA0xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMjgzNw==", "bodyText": "I am wondering why the above is not new MyEntityId( idA, idB ), which seems counter-intuitive and confusing.", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501232837", "createdAt": "2020-10-07T18:42:33Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/test/java/org/hibernate/id/idclass/MyEntity.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+package org.hibernate.id.idclass;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+\n+@Entity\n+@IdClass( MyEntityId.class )\n+public class MyEntity {\n+\n+\t@Id\n+\tprivate Long idA;\n+\n+\t@Id\n+\tprivate Long idB;\n+\n+\tprivate String notes;\n+\n+\tpublic MyEntityId getId() {\n+\t\treturn new MyEntityId( idB, idA );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODUwNzA0OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/test/java/org/hibernate/id/idclass/MyEntityId.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo0Mzo0OVrOHeA3Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTo0ODozM1rOHeDAFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMzUxMA==", "bodyText": "It would be good practise to use package default visibility (remove public above) for these classes are only used by the testing case within the same package.", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501233510", "createdAt": "2020-10-07T18:43:49Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/test/java/org/hibernate/id/idclass/MyEntityId.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+package org.hibernate.id.idclass;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+public class MyEntityId implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2ODUwMA==", "bodyText": "I prefer leaving this as-is", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501268500", "createdAt": "2020-10-07T19:48:33Z", "author": {"login": "jrenaat"}, "path": "hibernate-core/src/test/java/org/hibernate/id/idclass/MyEntityId.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+package org.hibernate.id.idclass;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+public class MyEntityId implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMzUxMA=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODUxNjQ5OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/boot/model/naming/ImplicitNamingStrategyComponentPathImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo0Njo0MFrOHeA9kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOToyNzo1NlrOHeCVUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzNTA5MA==", "bodyText": "There must be a more efficient way to replace the above two statements with one without much performance cost, though I am not able to find one in our existing classes (StringUtils from apache commons seems forbidden).", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501235090", "createdAt": "2020-10-07T18:46:40Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/boot/model/naming/ImplicitNamingStrategyComponentPathImpl.java", "diffHunk": "@@ -30,14 +31,17 @@ protected String transformAttributePath(AttributePath attributePath) {\n \t}\n \n \tpublic static void process(AttributePath attributePath, StringBuilder sb) {\n-\t\tif ( attributePath.getParent() != null ) {\n-\t\t\tprocess( attributePath.getParent(), sb );\n-\t\t\tif ( StringHelper.isNotEmpty( attributePath.getParent().getProperty() ) ) {\n-\t\t\t\tsb.append( '_' );\n-\t\t\t}\n-\t\t}\n-\n \t\tString property = attributePath.getProperty();\n+\t\tfinal AttributePath parent = attributePath.getParent();\n+\t\tif ( parent != null && !parent.getProperty().equals( \"\" ) ) {\n+\t\t\tprocess( parent, sb );\n+\t\t\tsb.append( '_' );\n+\t\t}\n+\t\telse if ( PropertyPath.IDENTIFIER_MAPPER_PROPERTY.equals( property ) ) {\n+\t\t\t// skip it, do not pass go\n+\t\t\tsb.append( \"id\" );\n+\t\t\treturn;\n+\t\t}\n \t\tproperty = property.replace( \"<\", \"\" );\n \t\tproperty = property.replace( \">\", \"\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1NzU1Mg==", "bodyText": "Unless I am mistaken, the '<' and '>' can only occur as the first and last in the prop-name.  Direct access to the underlying char array is usually quite fast -\nif ( property.charAt( 0 ) == '<' && property.charAt( property.length() -1 ) == '>' ) {\n    property = property.substring( ... );\n}", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501257552", "createdAt": "2020-10-07T19:27:56Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/boot/model/naming/ImplicitNamingStrategyComponentPathImpl.java", "diffHunk": "@@ -30,14 +31,17 @@ protected String transformAttributePath(AttributePath attributePath) {\n \t}\n \n \tpublic static void process(AttributePath attributePath, StringBuilder sb) {\n-\t\tif ( attributePath.getParent() != null ) {\n-\t\t\tprocess( attributePath.getParent(), sb );\n-\t\t\tif ( StringHelper.isNotEmpty( attributePath.getParent().getProperty() ) ) {\n-\t\t\t\tsb.append( '_' );\n-\t\t\t}\n-\t\t}\n-\n \t\tString property = attributePath.getProperty();\n+\t\tfinal AttributePath parent = attributePath.getParent();\n+\t\tif ( parent != null && !parent.getProperty().equals( \"\" ) ) {\n+\t\t\tprocess( parent, sb );\n+\t\t\tsb.append( '_' );\n+\t\t}\n+\t\telse if ( PropertyPath.IDENTIFIER_MAPPER_PROPERTY.equals( property ) ) {\n+\t\t\t// skip it, do not pass go\n+\t\t\tsb.append( \"id\" );\n+\t\t\treturn;\n+\t\t}\n \t\tproperty = property.replace( \"<\", \"\" );\n \t\tproperty = property.replace( \">\", \"\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzNTA5MA=="}, "originalCommit": null, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4089, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}