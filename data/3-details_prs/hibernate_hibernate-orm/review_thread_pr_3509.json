{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNzU5MzA2", "number": 3509, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODowNDoxNFrOEbDw_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowNzo1OFrOE2zyeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODA4NzAwOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/query/hql/internal/SemanticQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODowNDoxNFrOHE2d2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNDowMzoyOVrOHFFc5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0ODcyOQ==", "bodyText": "We might use CollectionHelper.mapOfSize( enumConstants.length ) to avoid map resizing. new HashMap( n ) doesn't necessarily achieve the user's goal (if the hashing conflict doesn't exist, the hashMap would be expanded for sure, which defeats the purpose of the intention).", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r474848729", "createdAt": "2020-08-21T18:04:14Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/query/hql/internal/SemanticQueryBuilder.java", "diffHunk": "@@ -218,7 +228,26 @@ public static SqmStatement buildSemanticModel(\n \tpublic SemanticQueryBuilder(SqmCreationOptions creationOptions, SqmCreationContext creationContext) {\n \t\tthis.creationOptions = creationOptions;\n \t\tthis.creationContext = creationContext;\n-\n+\t\tthis.possibleEnumNames = new HashSet<>();\n+\t\tthis.enumCache = new HashMap<>();\n+\t\tcreationContext.getJpaMetamodel().visitManagedTypes( managedDomainType -> {\n+\t\t\tmanagedDomainType.visitAttributes( persistentAttribute -> {\n+\t\t\t\tif ( persistentAttribute.getJavaType().isEnum() ) {\n+\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\t\t\tClass<Enum<?>> enumClass = (Class<Enum<?>>) persistentAttribute.getJavaType();\n+\t\t\t\t\tMap<String, Enum<?>> enumValues = enumCache.get( enumClass );\n+\t\t\t\t\tif ( enumValues == null ) {\n+\t\t\t\t\t\tEnum<?>[] enumConstants = enumClass.getEnumConstants();\n+\t\t\t\t\t\tenumValues = new HashMap<>( enumConstants.length );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0OTYzNg==", "bodyText": "This is just a PoC, I'd obviously do this only at startup.", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r474849636", "createdAt": "2020-08-21T18:06:27Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/query/hql/internal/SemanticQueryBuilder.java", "diffHunk": "@@ -218,7 +228,26 @@ public static SqmStatement buildSemanticModel(\n \tpublic SemanticQueryBuilder(SqmCreationOptions creationOptions, SqmCreationContext creationContext) {\n \t\tthis.creationOptions = creationOptions;\n \t\tthis.creationContext = creationContext;\n-\n+\t\tthis.possibleEnumNames = new HashSet<>();\n+\t\tthis.enumCache = new HashMap<>();\n+\t\tcreationContext.getJpaMetamodel().visitManagedTypes( managedDomainType -> {\n+\t\t\tmanagedDomainType.visitAttributes( persistentAttribute -> {\n+\t\t\t\tif ( persistentAttribute.getJavaType().isEnum() ) {\n+\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\t\t\tClass<Enum<?>> enumClass = (Class<Enum<?>>) persistentAttribute.getJavaType();\n+\t\t\t\t\tMap<String, Enum<?>> enumValues = enumCache.get( enumClass );\n+\t\t\t\t\tif ( enumValues == null ) {\n+\t\t\t\t\t\tEnum<?>[] enumConstants = enumClass.getEnumConstants();\n+\t\t\t\t\t\tenumValues = new HashMap<>( enumConstants.length );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0ODcyOQ=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg1NjEzOQ==", "bodyText": "okay, make sense.", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r474856139", "createdAt": "2020-08-21T18:21:09Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/query/hql/internal/SemanticQueryBuilder.java", "diffHunk": "@@ -218,7 +228,26 @@ public static SqmStatement buildSemanticModel(\n \tpublic SemanticQueryBuilder(SqmCreationOptions creationOptions, SqmCreationContext creationContext) {\n \t\tthis.creationOptions = creationOptions;\n \t\tthis.creationContext = creationContext;\n-\n+\t\tthis.possibleEnumNames = new HashSet<>();\n+\t\tthis.enumCache = new HashMap<>();\n+\t\tcreationContext.getJpaMetamodel().visitManagedTypes( managedDomainType -> {\n+\t\t\tmanagedDomainType.visitAttributes( persistentAttribute -> {\n+\t\t\t\tif ( persistentAttribute.getJavaType().isEnum() ) {\n+\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\t\t\tClass<Enum<?>> enumClass = (Class<Enum<?>>) persistentAttribute.getJavaType();\n+\t\t\t\t\tMap<String, Enum<?>> enumValues = enumCache.get( enumClass );\n+\t\t\t\t\tif ( enumValues == null ) {\n+\t\t\t\t\t\tEnum<?>[] enumConstants = enumClass.getEnumConstants();\n+\t\t\t\t\t\tenumValues = new HashMap<>( enumConstants.length );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0ODcyOQ=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk4MzM0OQ==", "bodyText": "Enum.valueOf(Class<?> enumType, String name) would simplify the lookup dramatically if the PoC is approved.", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r474983349", "createdAt": "2020-08-21T21:45:32Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/query/hql/internal/SemanticQueryBuilder.java", "diffHunk": "@@ -218,7 +228,26 @@ public static SqmStatement buildSemanticModel(\n \tpublic SemanticQueryBuilder(SqmCreationOptions creationOptions, SqmCreationContext creationContext) {\n \t\tthis.creationOptions = creationOptions;\n \t\tthis.creationContext = creationContext;\n-\n+\t\tthis.possibleEnumNames = new HashSet<>();\n+\t\tthis.enumCache = new HashMap<>();\n+\t\tcreationContext.getJpaMetamodel().visitManagedTypes( managedDomainType -> {\n+\t\t\tmanagedDomainType.visitAttributes( persistentAttribute -> {\n+\t\t\t\tif ( persistentAttribute.getJavaType().isEnum() ) {\n+\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\t\t\tClass<Enum<?>> enumClass = (Class<Enum<?>>) persistentAttribute.getJavaType();\n+\t\t\t\t\tMap<String, Enum<?>> enumValues = enumCache.get( enumClass );\n+\t\t\t\t\tif ( enumValues == null ) {\n+\t\t\t\t\t\tEnum<?>[] enumConstants = enumClass.getEnumConstants();\n+\t\t\t\t\t\tenumValues = new HashMap<>( enumConstants.length );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0ODcyOQ=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA5NDI0Ng==", "bodyText": "Enum.valueOf(Class<?> enumType, String name) throws an exception for unknown keys which I want to avoid here. The caching was done on purpose.", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r475094246", "createdAt": "2020-08-22T14:03:29Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/query/hql/internal/SemanticQueryBuilder.java", "diffHunk": "@@ -218,7 +228,26 @@ public static SqmStatement buildSemanticModel(\n \tpublic SemanticQueryBuilder(SqmCreationOptions creationOptions, SqmCreationContext creationContext) {\n \t\tthis.creationOptions = creationOptions;\n \t\tthis.creationContext = creationContext;\n-\n+\t\tthis.possibleEnumNames = new HashSet<>();\n+\t\tthis.enumCache = new HashMap<>();\n+\t\tcreationContext.getJpaMetamodel().visitManagedTypes( managedDomainType -> {\n+\t\t\tmanagedDomainType.visitAttributes( persistentAttribute -> {\n+\t\t\t\tif ( persistentAttribute.getJavaType().isEnum() ) {\n+\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\t\t\tClass<Enum<?>> enumClass = (Class<Enum<?>>) persistentAttribute.getJavaType();\n+\t\t\t\t\tMap<String, Enum<?>> enumValues = enumCache.get( enumClass );\n+\t\t\t\t\tif ( enumValues == null ) {\n+\t\t\t\t\t\tEnum<?>[] enumConstants = enumClass.getEnumConstants();\n+\t\t\t\t\t\tenumValues = new HashMap<>( enumConstants.length );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0ODcyOQ=="}, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzEzMjcyOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/boot/internal/InFlightMetadataCollectorImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDowMzoxM1rOHuEsoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDoxNToxOVrOHvnpmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA3MzUwNQ==", "bodyText": "I'm curious where null is being put into this queue?  That seems wrong", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r518073505", "createdAt": "2020-11-05T14:03:13Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/boot/internal/InFlightMetadataCollectorImpl.java", "diffHunk": "@@ -1664,7 +1664,7 @@ private void processValueResolvers(MetadataBuildingContext buildingContext) {\n \n \t\twhile ( ! valueResolvers.isEmpty() ) {\n \t\t\tfinal boolean anyRemoved = valueResolvers.removeIf(\n-\t\t\t\t\tresolver -> resolver.apply( buildingContext )\n+\t\t\t\t\tresolver -> resolver == null || resolver.apply( buildingContext )", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5NDc0Nw==", "bodyText": "You are right. Since the PR is quite old already, I still had that in as a workaround for a previously issue, but it's working fine now even without this. Thanks!", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r519694747", "createdAt": "2020-11-09T10:15:19Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/boot/internal/InFlightMetadataCollectorImpl.java", "diffHunk": "@@ -1664,7 +1664,7 @@ private void processValueResolvers(MetadataBuildingContext buildingContext) {\n \n \t\twhile ( ! valueResolvers.isEmpty() ) {\n \t\t\tfinal boolean anyRemoved = valueResolvers.removeIf(\n-\t\t\t\t\tresolver -> resolver.apply( buildingContext )\n+\t\t\t\t\tresolver -> resolver == null || resolver.apply( buildingContext )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA3MzUwNQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzE1MTc1OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/model/domain/internal/JpaMetamodelImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDowNzozNVrOHuE4cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDoxNTo1NVrOHvnrRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA3NjUzMA==", "bodyText": "Seems like this will break in cases of de-typed domain models (aka \"map mode\").  Depends how we end up deciding to handle that in building the JPA metamodel.  Regardless, its easy enough to handle here simply by checking for persistentAttribute.getJavaType() == null", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r518076530", "createdAt": "2020-11-05T14:07:35Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/metamodel/model/domain/internal/JpaMetamodelImpl.java", "diffHunk": "@@ -493,6 +500,34 @@ public void processJpa(\n \t\t\tfor ( EmbeddableDomainType<?> embeddable : context.getEmbeddableTypeSet() ) {\n \t\t\t\tthis.jpaEmbeddableDescriptorMap.put( embeddable.getJavaType(), embeddable );\n \t\t\t}\n+\t\t\tStream.concat(\n+\t\t\t\t\tcontext.getEntityTypesByEntityName().values().stream(),\n+\t\t\t\t\tStream.concat(\n+\t\t\t\t\t\t\tcontext.getMappedSuperclassTypeMap().values().stream(),\n+\t\t\t\t\t\t\tcontext.getEmbeddableTypeSet().stream()\n+\t\t\t\t\t)\n+\t\t\t).forEach( managedDomainType -> {\n+\t\t\t\tmanagedDomainType.visitAttributes( persistentAttribute -> {\n+\t\t\t\t\tif ( persistentAttribute.getJavaType().isEnum() ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5NTE3NA==", "bodyText": "Nice catch, thanks. I adapted it.", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r519695174", "createdAt": "2020-11-09T10:15:55Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/metamodel/model/domain/internal/JpaMetamodelImpl.java", "diffHunk": "@@ -493,6 +500,34 @@ public void processJpa(\n \t\t\tfor ( EmbeddableDomainType<?> embeddable : context.getEmbeddableTypeSet() ) {\n \t\t\t\tthis.jpaEmbeddableDescriptorMap.put( embeddable.getJavaType(), embeddable );\n \t\t\t}\n+\t\t\tStream.concat(\n+\t\t\t\t\tcontext.getEntityTypesByEntityName().values().stream(),\n+\t\t\t\t\tStream.concat(\n+\t\t\t\t\t\t\tcontext.getMappedSuperclassTypeMap().values().stream(),\n+\t\t\t\t\t\t\tcontext.getEmbeddableTypeSet().stream()\n+\t\t\t\t\t)\n+\t\t\t).forEach( managedDomainType -> {\n+\t\t\t\tmanagedDomainType.visitAttributes( persistentAttribute -> {\n+\t\t\t\t\tif ( persistentAttribute.getJavaType().isEnum() ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA3NjUzMA=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzIwNzE1OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/query/hql/internal/SemanticQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDoxOTozNlrOHuFbSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDoxNjoyOVrOHvnsvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4NTQ1MA==", "bodyText": "Few things in this block to keep in mind...\n\nWe prefer to define final variables as final.  You have quite a few here.\nWe prefer code blocks use braces, including switch branches (i.e., case NOT_EQUAL: { ... })", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r518085450", "createdAt": "2020-11-05T14:19:36Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/query/hql/internal/SemanticQueryBuilder.java", "diffHunk": "@@ -1283,28 +1283,89 @@ else if ( ctx.GREATER_EQUAL()!=null ) {\n \n \t@Override\n \tpublic SqmComparisonPredicate visitComparisonPredicate(HqlParser.ComparisonPredicateContext ctx) {\n+\t\tComparisonOperator comparisonOperator = (ComparisonOperator) ctx.comparisonOperator().accept( this );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5NTU1MA==", "bodyText": "Thanks I'll keep this in mind.", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r519695550", "createdAt": "2020-11-09T10:16:29Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/query/hql/internal/SemanticQueryBuilder.java", "diffHunk": "@@ -1283,28 +1283,89 @@ else if ( ctx.GREATER_EQUAL()!=null ) {\n \n \t@Override\n \tpublic SqmComparisonPredicate visitComparisonPredicate(HqlParser.ComparisonPredicateContext ctx) {\n+\t\tComparisonOperator comparisonOperator = (ComparisonOperator) ctx.comparisonOperator().accept( this );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4NTQ1MA=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzIyODYyOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/query/sql/internal/NativeSelectQueryPlanImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDoyMzo1NFrOHuFoww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDoxODo1OVrOHvnzFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4ODg5OQ==", "bodyText": "Really, the mapping here is only need to get the converter (if one).  I wonder if we should instead simply pass in the converter?", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r518088899", "createdAt": "2020-11-05T14:23:54Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/query/sql/internal/NativeSelectQueryPlanImpl.java", "diffHunk": "@@ -140,8 +144,12 @@ public NativeSelectQueryPlanImpl(\n \t\t\t\t\t\t\ttype = StandardBasicTypes.OBJECT_TYPE;\n \t\t\t\t\t\t}\n \n-\t\t\t\t\t\tfinal JdbcMapping jdbcMapping = ( (BasicValuedMapping) type ).getJdbcMapping();\n-\t\t\t\t\t\tfinal JdbcParameterImpl jdbcParameter = new JdbcParameterImpl( jdbcMapping );\n+\t\t\t\t\t\tBasicValuedMapping basicValuedMapping = (BasicValuedMapping) type;\n+\t\t\t\t\t\tfinal JdbcMapping jdbcMapping = basicValuedMapping.getJdbcMapping();\n+\t\t\t\t\t\tfinal JdbcParameterImpl jdbcParameter = new JdbcParameterImpl(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5NzE3Mw==", "bodyText": "I moved the MappingModelExpressable to the QueryParameterBinding now like we discussed to handle the conversion during binding of the parameter value", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r519697173", "createdAt": "2020-11-09T10:18:59Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/query/sql/internal/NativeSelectQueryPlanImpl.java", "diffHunk": "@@ -140,8 +144,12 @@ public NativeSelectQueryPlanImpl(\n \t\t\t\t\t\t\ttype = StandardBasicTypes.OBJECT_TYPE;\n \t\t\t\t\t\t}\n \n-\t\t\t\t\t\tfinal JdbcMapping jdbcMapping = ( (BasicValuedMapping) type ).getJdbcMapping();\n-\t\t\t\t\t\tfinal JdbcParameterImpl jdbcParameter = new JdbcParameterImpl( jdbcMapping );\n+\t\t\t\t\t\tBasicValuedMapping basicValuedMapping = (BasicValuedMapping) type;\n+\t\t\t\t\t\tfinal JdbcMapping jdbcMapping = basicValuedMapping.getJdbcMapping();\n+\t\t\t\t\t\tfinal JdbcParameterImpl jdbcParameter = new JdbcParameterImpl(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4ODg5OQ=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODkzOTY0OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/model/domain/internal/JpaMetamodelImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDo0MDo1NFrOHvx6rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDo1Njo1OFrOHvyrRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg2Mjk1OQ==", "bodyText": "We might consider the following pattern:\nStream.of( \n\t\t\t\t\tcontext.getEntityTypesByEntityName().values().stream(),\n\t\t\t\t\tcontext.getMappedSuperclassTypeMap().values().stream(),\n\t\t\t\t\tcontext.getEmbeddableTypeSet().stream()\n\t\t\t).flatMap( Function.identity() ).forEach( ... )\n\nAs per https://www.techempower.com/blog/2016/10/19/efficient-multiple-stream-concatenation-in-java/, the flatmap approach performs better when the stream sizes are not large.", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r519862959", "createdAt": "2020-11-09T14:40:54Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/metamodel/model/domain/internal/JpaMetamodelImpl.java", "diffHunk": "@@ -493,6 +500,34 @@ public void processJpa(\n \t\t\tfor ( EmbeddableDomainType<?> embeddable : context.getEmbeddableTypeSet() ) {\n \t\t\t\tthis.jpaEmbeddableDescriptorMap.put( embeddable.getJavaType(), embeddable );\n \t\t\t}\n+\t\t\tStream.concat(\n+\t\t\t\t\tcontext.getEntityTypesByEntityName().values().stream(),\n+\t\t\t\t\tStream.concat(\n+\t\t\t\t\t\t\tcontext.getMappedSuperclassTypeMap().values().stream(),\n+\t\t\t\t\t\t\tcontext.getEmbeddableTypeSet().stream()\n+\t\t\t\t\t)\n+\t\t\t).forEach( managedDomainType -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a35128ab99a05dddb8b925f49168e8b2a9725b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3NTM5OA==", "bodyText": "According to the article the suggestion is to use flatMap(Stream::concat) so I'd rather stick to this pattern.", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r519875398", "createdAt": "2020-11-09T14:56:58Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/metamodel/model/domain/internal/JpaMetamodelImpl.java", "diffHunk": "@@ -493,6 +500,34 @@ public void processJpa(\n \t\t\tfor ( EmbeddableDomainType<?> embeddable : context.getEmbeddableTypeSet() ) {\n \t\t\t\tthis.jpaEmbeddableDescriptorMap.put( embeddable.getJavaType(), embeddable );\n \t\t\t}\n+\t\t\tStream.concat(\n+\t\t\t\t\tcontext.getEntityTypesByEntityName().values().stream(),\n+\t\t\t\t\tStream.concat(\n+\t\t\t\t\t\t\tcontext.getMappedSuperclassTypeMap().values().stream(),\n+\t\t\t\t\t\t\tcontext.getEmbeddableTypeSet().stream()\n+\t\t\t\t\t)\n+\t\t\t).forEach( managedDomainType -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg2Mjk1OQ=="}, "originalCommit": {"oid": "d5a35128ab99a05dddb8b925f49168e8b2a9725b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTAyMzc4OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/query/internal/QueryParameterBindingImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDo1ODowNlrOHvyubQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDo1ODowNlrOHvyubQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3NjIwNQ==", "bodyText": "I think we could eliminate two unnecessary generics warning by making use of <T> above.", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r519876205", "createdAt": "2020-11-09T14:58:06Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/query/internal/QueryParameterBindingImpl.java", "diffHunk": "@@ -227,6 +229,15 @@ public void setBindValues(\n \t\tthis.explicitTemporalPrecision = temporalTypePrecision;\n \t}\n \n+\t@Override\n+\tpublic MappingModelExpressable getType() {\n+\t\treturn type;\n+\t}\n+\n+\t@Override\n+\tpublic void setType(MappingModelExpressable type) {\n+\t\tthis.type = type;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a35128ab99a05dddb8b925f49168e8b2a9725b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTA0NzU5OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/test/java/org/hibernate/test/enums/OrdinalEnumTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowMzowMlrOHvy9EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowMzowMlrOHvy9EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3OTk1Mw==", "bodyText": "I think it would be ideal to include negation counterparts for each of the new testing cases above.", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r519879953", "createdAt": "2020-11-09T15:03:02Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/test/java/org/hibernate/test/enums/OrdinalEnumTypeTest.java", "diffHunk": "@@ -109,6 +109,46 @@ public void testEnumAsBindParameterAndExtract() {\n \t\t} );\n \t}\n \n+\t@Test\n+\t@TestForIssue(jiraKey = \"HHH-10282\")\n+\tpublic void hqlTestEnumShortHandSyntax() {\n+\t\tdoInHibernate( this::sessionFactory, session -> {\n+\t\t\tsession.createQuery(\n+\t\t\t\t\"select id from Person where originalHairColor = BLONDE\")\n+\t\t\t\t.getResultList();\n+\t\t} );\n+\t}\n+\n+\t@Test\n+\t@TestForIssue(jiraKey = \"HHH-10282\")\n+\tpublic void hqlTestEnumQualifiedShortHandSyntax() {\n+\t\tdoInHibernate( this::sessionFactory, session -> {\n+\t\t\tsession.createQuery(\n+\t\t\t\t\t\"select id from Person where originalHairColor = HairColor.BLONDE\")\n+\t\t\t\t\t.getResultList();\n+\t\t} );\n+\t}\n+\n+\t@Test\n+\t@TestForIssue(jiraKey = \"HHH-10282\")\n+\tpublic void hqlTestEnumShortHandSyntaxInPredicate() {\n+\t\tdoInHibernate( this::sessionFactory, session -> {\n+\t\t\tsession.createQuery(\n+\t\t\t\t\t\"select id from Person where originalHairColor in (BLONDE, BROWN)\")\n+\t\t\t\t\t.getResultList();\n+\t\t} );\n+\t}\n+\n+\t@Test\n+\t@TestForIssue(jiraKey = \"HHH-10282\")\n+\tpublic void hqlTestEnumQualifiedShortHandSyntaxInPredicate() {\n+\t\tdoInHibernate( this::sessionFactory, session -> {\n+\t\t\tsession.createQuery(\n+\t\t\t\t\t\"select id from Person where originalHairColor in (HairColor.BLONDE, HairColor.BROWN)\")\n+\t\t\t\t\t.getResultList();\n+\t\t} );\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a35128ab99a05dddb8b925f49168e8b2a9725b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTA3MDY2OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/sql/exec/internal/JdbcParameterImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowNzo1OFrOHvzLIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowNzo1OFrOHvzLIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4MzU1NA==", "bodyText": "I think it is one of @sebersole 's personal styles to leave out the blank line before the first element statement in a class. I prefer the above change but it is not a big deal.\nAnother style of Steve is to leave out the space delimiter between generic types as following:\nMap<K,V> map; // I would prefer Map<K, V> map\n\nBut I don't think it is a big deal and they have become my style components as well, :).", "url": "https://github.com/hibernate/hibernate-orm/pull/3509#discussion_r519883554", "createdAt": "2020-11-09T15:07:58Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/sql/exec/internal/JdbcParameterImpl.java", "diffHunk": "@@ -13,6 +13,7 @@\n  * @author Steve Ebersole\n  */\n public class JdbcParameterImpl extends AbstractJdbcParameter {\n+\n \tpublic JdbcParameterImpl(JdbcMapping jdbcMapping) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a35128ab99a05dddb8b925f49168e8b2a9725b"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4153, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}