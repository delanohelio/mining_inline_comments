{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NTM1NDgz", "number": 3354, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjozNToxMlrODzRc_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjowNDo0NVrOD0dUqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDg5OTE2OnYy", "diffSide": "LEFT", "path": "documentation/src/test/java/org/hibernate/userguide/pc/FilterJoinTableTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjozNToxMlrOGHu7cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjozNToxMlrOGHu7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2MjA5OA==", "bodyText": "The above filter is not used for Client. Seems an overlooking and might be misleading.", "url": "https://github.com/hibernate/hibernate-orm/pull/3354#discussion_r410762098", "createdAt": "2020-04-18T22:35:12Z", "author": {"login": "NathanQingyangXu"}, "path": "documentation/src/test/java/org/hibernate/userguide/pc/FilterJoinTableTest.java", "diffHunk": "@@ -118,10 +115,6 @@ public void testLifecycle() {\n             type=\"int\"\n         )\n     )\n-    @Filter(\n-        name=\"firstAccounts\",\n-        condition=\"order_id <= :maxOrderId\"\n-    )", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzMyOTY5OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/query/sqm/sql/internal/StandardSqmSelectTranslator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjowNDo0NVrOGJacLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMzowNzowMlrOGKoVUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMzU2Nw==", "bodyText": "An enhancement here would be to support filtering on non-primary-table columns", "url": "https://github.com/hibernate/hibernate-orm/pull/3354#discussion_r412523567", "createdAt": "2020-04-21T22:04:45Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/query/sqm/sql/internal/StandardSqmSelectTranslator.java", "diffHunk": "@@ -187,6 +195,24 @@ protected void prepareQuerySpec(QuerySpec sqlQuerySpec) {\n \n \t@Override\n \tprotected void postProcessQuerySpec(QuerySpec sqlQuerySpec) {\n+\t\tfinal List<TableGroup> roots = sqlQuerySpec.getFromClause().getRoots();\n+\t\tif ( roots != null && roots.size() == 1 ) {\n+\t\t\tfinal TableGroup root = roots.get( 0 );\n+\t\t\tfinal ModelPartContainer modelPartContainer = root.getModelPart();\n+\t\t\tfinal EntityPersister entityPersister = modelPartContainer.findContainingEntityMapping().getEntityPersister();\n+\t\t\tassert entityPersister instanceof AbstractEntityPersister;\n+\t\t\tfinal String primaryTableAlias = root.getPrimaryTableReference().getIdentificationVariable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "355aa7f1ae3b87eaa3236c5ca2717df3265c194d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMjQxMQ==", "bodyText": "I will implement this in the PR for https://trello.com/c/lF9R13J3/115-where-and-wherejointable, which will be created pretty soon.", "url": "https://github.com/hibernate/hibernate-orm/pull/3354#discussion_r412622411", "createdAt": "2020-04-22T02:27:42Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/query/sqm/sql/internal/StandardSqmSelectTranslator.java", "diffHunk": "@@ -187,6 +195,24 @@ protected void prepareQuerySpec(QuerySpec sqlQuerySpec) {\n \n \t@Override\n \tprotected void postProcessQuerySpec(QuerySpec sqlQuerySpec) {\n+\t\tfinal List<TableGroup> roots = sqlQuerySpec.getFromClause().getRoots();\n+\t\tif ( roots != null && roots.size() == 1 ) {\n+\t\t\tfinal TableGroup root = roots.get( 0 );\n+\t\t\tfinal ModelPartContainer modelPartContainer = root.getModelPart();\n+\t\t\tfinal EntityPersister entityPersister = modelPartContainer.findContainingEntityMapping().getEntityPersister();\n+\t\t\tassert entityPersister instanceof AbstractEntityPersister;\n+\t\t\tfinal String primaryTableAlias = root.getPrimaryTableReference().getIdentificationVariable();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMzU2Nw=="}, "originalCommit": {"oid": "355aa7f1ae3b87eaa3236c5ca2717df3265c194d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5OTc2Mw==", "bodyText": "Initially I thought this was easy to implement but then I found my code needs to invoke the following method from org.hibernate.persister.entity.Joinable.\n\t/**\n\t * Get the where clause filter, given a query alias and considering enabled session filters\n\t */\n\tpublic String filterFragment(String alias, Map<String, Filter> enabledFilters) throws MappingException;\n\nseems only primary table alias is needed here. For that reason, I would be cautious to maintain the status quo and keep the code changes out of the new PR which has been created: #3366 as I originally promised.\nPlan to investigate further and will create separate PR if needed.", "url": "https://github.com/hibernate/hibernate-orm/pull/3354#discussion_r413799763", "createdAt": "2020-04-23T13:07:02Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/query/sqm/sql/internal/StandardSqmSelectTranslator.java", "diffHunk": "@@ -187,6 +195,24 @@ protected void prepareQuerySpec(QuerySpec sqlQuerySpec) {\n \n \t@Override\n \tprotected void postProcessQuerySpec(QuerySpec sqlQuerySpec) {\n+\t\tfinal List<TableGroup> roots = sqlQuerySpec.getFromClause().getRoots();\n+\t\tif ( roots != null && roots.size() == 1 ) {\n+\t\t\tfinal TableGroup root = roots.get( 0 );\n+\t\t\tfinal ModelPartContainer modelPartContainer = root.getModelPart();\n+\t\t\tfinal EntityPersister entityPersister = modelPartContainer.findContainingEntityMapping().getEntityPersister();\n+\t\t\tassert entityPersister instanceof AbstractEntityPersister;\n+\t\t\tfinal String primaryTableAlias = root.getPrimaryTableReference().getIdentificationVariable();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMzU2Nw=="}, "originalCommit": {"oid": "355aa7f1ae3b87eaa3236c5ca2717df3265c194d"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3987, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}