{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MTczMDMw", "number": 3181, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1MDowNFrODbswqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1MDowNFrODbswqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzcxNDk2OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/TwoPhaseLoad.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1MDowNFrOFjVdDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1MTo0MFrOFjVgIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NTk4Mg==", "bodyText": "I don't understand this comment.  Did you mean to remove the debugf parameters maybe?", "url": "https://github.com/hibernate/hibernate-orm/pull/3181#discussion_r372595982", "createdAt": "2020-01-29T19:50:04Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/TwoPhaseLoad.java", "diffHunk": "@@ -367,38 +376,62 @@ public static void afterInitialize(\n \t}\n \n \t/**\n-\t * Check if eager of the association is overriden by anything.\n+\t * Check if eager of the association is overridden (i.e. skipping metamodel strategy), including (order sensitive):\n+\t * <ol>\n+\t *     <li>fetch graph</li>\n+\t *     <li>fetch profile</li>\n+\t * </ol>\n \t *\n \t * @param session session\n \t * @param entityName entity name\n \t * @param associationName association name\n-\t *\n+\t * @param associationType association type\n+\t * @param isDebugEnabled if debug log level enabled\n \t * @return null if there is no overriding, true if it is overridden to eager and false if it is overridden to lazy\n \t */\n \tprivate static Boolean getOverridingEager(\n \t\t\tfinal SharedSessionContractImplementor session,\n \t\t\tfinal String entityName,\n \t\t\tfinal String associationName,\n-\t\t\tfinal Type type,\n+\t\t\tfinal Type associationType,\n \t\t\tfinal boolean isDebugEnabled) {\n \t\t// Performance: check type.isCollectionType() first, as type.isAssociationType() is megamorphic\n-\t\tif ( type.isCollectionType() || type.isAssociationType()  ) {\n-\t\t\tfinal Boolean overridingEager = isEagerFetchProfile( session, entityName, associationName );\n+\t\tif ( associationType.isCollectionType() || associationType.isAssociationType()  ) {\n+\n+\t\t\t// check 'fetch graph' first; skip 'fetch profile' if 'fetch graph' takes effect\n+\t\t\tBoolean overridingEager = isEagerFetchGraph( session, associationName, associationType );\n \n-\t\t\t//This method is very hot, and private so let's piggy back on the fact that the caller already knows the debugging state.\n-\t\t\tif ( isDebugEnabled ) {\n-\t\t\t\tif ( overridingEager != null ) {\n+\t\t\tif ( overridingEager != null ) {\n+\t\t\t\t//This method is very hot, and private so let's piggy back on the fact that the caller already knows the debugging state.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4012e08d42c7a412284b739b1aad36f4f551a070"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5Njc2OQ==", "bodyText": "Oh, nm.. you  did not add that", "url": "https://github.com/hibernate/hibernate-orm/pull/3181#discussion_r372596769", "createdAt": "2020-01-29T19:51:40Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/TwoPhaseLoad.java", "diffHunk": "@@ -367,38 +376,62 @@ public static void afterInitialize(\n \t}\n \n \t/**\n-\t * Check if eager of the association is overriden by anything.\n+\t * Check if eager of the association is overridden (i.e. skipping metamodel strategy), including (order sensitive):\n+\t * <ol>\n+\t *     <li>fetch graph</li>\n+\t *     <li>fetch profile</li>\n+\t * </ol>\n \t *\n \t * @param session session\n \t * @param entityName entity name\n \t * @param associationName association name\n-\t *\n+\t * @param associationType association type\n+\t * @param isDebugEnabled if debug log level enabled\n \t * @return null if there is no overriding, true if it is overridden to eager and false if it is overridden to lazy\n \t */\n \tprivate static Boolean getOverridingEager(\n \t\t\tfinal SharedSessionContractImplementor session,\n \t\t\tfinal String entityName,\n \t\t\tfinal String associationName,\n-\t\t\tfinal Type type,\n+\t\t\tfinal Type associationType,\n \t\t\tfinal boolean isDebugEnabled) {\n \t\t// Performance: check type.isCollectionType() first, as type.isAssociationType() is megamorphic\n-\t\tif ( type.isCollectionType() || type.isAssociationType()  ) {\n-\t\t\tfinal Boolean overridingEager = isEagerFetchProfile( session, entityName, associationName );\n+\t\tif ( associationType.isCollectionType() || associationType.isAssociationType()  ) {\n+\n+\t\t\t// check 'fetch graph' first; skip 'fetch profile' if 'fetch graph' takes effect\n+\t\t\tBoolean overridingEager = isEagerFetchGraph( session, associationName, associationType );\n \n-\t\t\t//This method is very hot, and private so let's piggy back on the fact that the caller already knows the debugging state.\n-\t\t\tif ( isDebugEnabled ) {\n-\t\t\t\tif ( overridingEager != null ) {\n+\t\t\tif ( overridingEager != null ) {\n+\t\t\t\t//This method is very hot, and private so let's piggy back on the fact that the caller already knows the debugging state.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NTk4Mg=="}, "originalCommit": {"oid": "4012e08d42c7a412284b739b1aad36f4f551a070"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4066, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}