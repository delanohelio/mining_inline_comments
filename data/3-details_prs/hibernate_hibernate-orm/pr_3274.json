{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNDY1NTkw", "number": 3274, "title": "Add a Test Case Guide adoc", "bodyText": "", "createdAt": "2020-02-28T16:04:55Z", "url": "https://github.com/hibernate/hibernate-orm/pull/3274", "merged": true, "mergeCommit": {"oid": "c7e551afe704733eaf9b9050413234d286a3282a"}, "closed": true, "closedAt": "2020-02-28T16:19:20Z", "author": {"login": "dreab8"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIyKbNgH2gAyMzgxNDY1NTkwOjI5YjkwNDA0MzFhYmYyMjhhNmM5MzFhMzc5MDhhMzRjMjY4YzAzMTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIybfAgFqTM2NjUyMDczMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "29b9040431abf228a6c931a37908a34c268c0319", "author": {"user": {"login": "dreab8", "name": "Andrea Boriero"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/29b9040431abf228a6c931a37908a34c268c0319", "committedDate": "2020-02-28T16:04:07Z", "message": "Add a Test Case Guide adoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTE4MTI4", "url": "https://github.com/hibernate/hibernate-orm/pull/3274#pullrequestreview-366518128", "createdAt": "2020-02-28T16:19:11Z", "commit": {"oid": "29b9040431abf228a6c931a37908a34c268c0319"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTIwNzMz", "url": "https://github.com/hibernate/hibernate-orm/pull/3274#pullrequestreview-366520733", "createdAt": "2020-02-28T16:22:45Z", "commit": {"oid": "29b9040431abf228a6c931a37908a34c268c0319"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoyMjo0NVrOFv6w2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoyMjo0NVrOFv6w2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5MDE3MA==", "bodyText": "From my previous User Guide improvement endeavour, ASCIIDoc has bug rendering `xxx`s. I bypassed the issue by ``xxx``s.", "url": "https://github.com/hibernate/hibernate-orm/pull/3274#discussion_r385790170", "createdAt": "2020-02-28T16:22:45Z", "author": {"login": "NathanQingyangXu"}, "path": "test-case-guide.adoc", "diffHunk": "@@ -0,0 +1,32 @@\n+= Test Case Guide\n+:toc:\n+\n+This is meant as a guide for writing test cases to be attached to bug reports in the Hibernate Jira.  Really most of the information here works just as well when asking for help on community help channels (forums, IRC, HipChat, etc).\n+\n+\n+== Write a good test\n+\n+There are a number of tenants that make up a good test case as opposed to a poor one.  In fact there are a few guides for this across the web including (http://stackoverflow.com/help/mcve[MCVE]) and (http://sscce.org/[SSCCE]).  These guides all assert the same ideas albeit using different terms.  Given the ubiquity of StackOverflow and the fact that the MCVE guidelines were written specifically for StackOverflow, we will use those terms here as we assume most developers have seen them before:\n+\n+* (M)inimal - Provide just the minimal information needed.  If second level caching is irrelevant to the bug report then the test should not use second level caching.  If entity inheritance is irrelevant then do not use it in the test.  If your application uses Spring Data, remove Spring Data from the test.\n+* (C)omplete - Provide all information needed to reproduce the problem.  If a bug only occurs when using bytecode enhancement, then the test should include bytecode enhancement.  In other words the test should be self-contained.\n+* (V)erifiable - The test should actually reproduce the problem being reported.\n+\n+\n+== Test templates\n+\n+The Hibernate team maintains a set of \"test templates\" intended to help developers write tests.  These test templates are maintained in GitHub @ https://github.com/hibernate/hibernate-test-case-templates/tree/master/orm[hibernate-test-case-templates]\n+\n+* If you want to use the Hibernate native API, you should follow the instructions from http://in.relation.to/2015/06/26/hibernate-test-case-templates/[this article].\n+* If you want to use JPA, you should use the JPA templates that were detailed in http://in.relation.to/2016/01/14/hibernate-jpa-test-case-template/[this article].\n+\n+NOTE: the test templates are generally not a good starting point for problems building the SessionFactory/EntityManager.  In JUnit terms they manage the SessionFactory/EntityManager as set-up and teardown constructs._\n+\n+== Annotations\n+\n+When using \"test templates\" you can annotate a  single test or a whole test class with one of the following  annotations:\n+\n+* FailureExpected - allows to skip a single test or all test of a class, because test failures are expected. The test will acutally run, but not lead to an error report. In fact if a test is marked with `@FailureExpected` and the test actually succeed an error occurs. As a parameters to this annotation a jira key is required.\n+* RequiresDialect - tests methods/classes annotated with `@RequiresDialect` will only run if the current Dialect is matching the one specified on as annotation parameter. You can also specify a comment and/or jira key explaining why this test requires a certain dialect\n+* RequiresDialectFeature - tests methods/classes annotated with `@RequiresDialectFeature` will only run if the current Dialect offers the specified feature. Examples for this features are `SupportsSequences`, `SupportsExpectedLobUsagePattern` or `SupportsIdentityColumn`s. You can add more feature if you need to. Have a look at `DialectChecks`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b9040431abf228a6c931a37908a34c268c0319"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3187, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}