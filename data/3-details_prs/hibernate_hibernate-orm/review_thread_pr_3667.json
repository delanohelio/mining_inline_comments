{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTkwMTQx", "number": 3667, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoyODoxNVrOE9t8zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODozNjo0NVrOE-E5uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTUxNDM3OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/antlr/org/hibernate/grammars/hql/HqlParser.g4", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoyODoxNVrOH6ji7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzoxNDowNlrOH7EtIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MTgzNw==", "bodyText": "Whoah, there's gotta be a better way to handle this! We really shouldn't need an expression rule this messy.\nSo I speculate that perhaps you're trying to really strictly enforce the grammar of the language in the parser, which sounds like a good thing but, suprisingly, it's actually a really bad idea, since generated parsers generally produce very bad error messages. Further, it means that tools like IDE editors fail at parsing the code even for very minor syntax errors.\nIt's much better to be permissive in the parser, and then enforce restrictions in the code which interprets the AST.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531161837", "createdAt": "2020-11-26T17:28:15Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/antlr/org/hibernate/grammars/hql/HqlParser.g4", "diffHunk": "@@ -404,23 +396,23 @@ likeEscape\n \n expression\n \t//highest to lowest precedence\n-\t: LEFT_PAREN expression RIGHT_PAREN\t\t\t\t# GroupedExpression\n-\t| LEFT_PAREN subQuery RIGHT_PAREN\t\t\t\t# SubQueryExpression\n-\t| caseList\t\t\t\t\t\t\t\t\t\t# CaseExpression\n-\t| literal\t\t\t\t\t\t\t\t\t\t# LiteralExpression\n-\t| parameter\t\t\t\t\t\t\t\t\t\t# ParameterExpression\n-\t| entityTypeReference\t\t\t\t\t\t\t# EntityTypeExpression\n-\t| entityIdReference\t\t\t\t\t\t\t\t# EntityIdExpression\n-\t| entityVersionReference\t\t\t\t\t\t# EntityVersionExpression\n-\t| entityNaturalIdReference\t\t\t\t\t\t# EntityNaturalIdExpression\n-\t| path\t\t\t\t\t\t\t\t\t\t\t# PathExpression\n-\t| function\t\t\t\t\t\t\t\t\t\t# FunctionExpression\n-\t| signOperator expression\t\t\t\t\t\t# UnaryExpression\n-\t| expression datetimeField  \t\t\t\t\t# ToDurationExpression\n-\t| expression BY datetimeField\t\t\t\t\t# FromDurationExpression\n-\t| expression multiplicativeOperator expression\t# MultiplicationExpression\n-\t| expression additiveOperator expression\t\t# AdditionExpression\n-\t| expression DOUBLE_PIPE expression\t\t\t\t# ConcatenationExpression\n+\t: LEFT_PAREN expression RIGHT_PAREN\t\t\t\t\t# GroupedExpression\n+\t| LEFT_PAREN subQuery RIGHT_PAREN\t\t\t\t\t# SubQueryExpression\n+\t| caseList collationSpecification?\t\t\t\t\t# CaseExpression\n+\t| literal collationSpecification?\t\t\t\t\t# LiteralExpression\n+\t| parameter collationSpecification?\t\t\t\t\t# ParameterExpression\n+\t| entityTypeReference\t\t\t\t\t\t\t\t# EntityTypeExpression\n+\t| entityIdReference collationSpecification?\t\t\t# EntityIdExpression\n+\t| entityVersionReference collationSpecification?\t# EntityVersionExpression\n+\t| entityNaturalIdReference collationSpecification?\t# EntityNaturalIdExpression\n+\t| path collationSpecification?\t\t\t\t\t\t# PathExpression\n+\t| function collationSpecification?\t\t\t\t\t# FunctionExpression\n+\t| signOperator expression\t\t\t\t\t\t\t# UnaryExpression\n+\t| expression datetimeField  \t\t\t\t\t\t# ToDurationExpression\n+\t| expression BY datetimeField\t\t\t\t\t\t# FromDurationExpression\n+\t| expression multiplicativeOperator expression\t\t# MultiplicationExpression\n+\t| expression additiveOperator expression\t\t\t# AdditionExpression\n+\t| expression DOUBLE_PIPE expression\t\t\t\t\t# ConcatenationExpression", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MTA2Ng==", "bodyText": "@beikov\nWhat I mean is, I would much rather see the error\nsigned expression may not have a collation\n\nThan\nunexpected token: identifier", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531181066", "createdAt": "2020-11-26T18:24:24Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/antlr/org/hibernate/grammars/hql/HqlParser.g4", "diffHunk": "@@ -404,23 +396,23 @@ likeEscape\n \n expression\n \t//highest to lowest precedence\n-\t: LEFT_PAREN expression RIGHT_PAREN\t\t\t\t# GroupedExpression\n-\t| LEFT_PAREN subQuery RIGHT_PAREN\t\t\t\t# SubQueryExpression\n-\t| caseList\t\t\t\t\t\t\t\t\t\t# CaseExpression\n-\t| literal\t\t\t\t\t\t\t\t\t\t# LiteralExpression\n-\t| parameter\t\t\t\t\t\t\t\t\t\t# ParameterExpression\n-\t| entityTypeReference\t\t\t\t\t\t\t# EntityTypeExpression\n-\t| entityIdReference\t\t\t\t\t\t\t\t# EntityIdExpression\n-\t| entityVersionReference\t\t\t\t\t\t# EntityVersionExpression\n-\t| entityNaturalIdReference\t\t\t\t\t\t# EntityNaturalIdExpression\n-\t| path\t\t\t\t\t\t\t\t\t\t\t# PathExpression\n-\t| function\t\t\t\t\t\t\t\t\t\t# FunctionExpression\n-\t| signOperator expression\t\t\t\t\t\t# UnaryExpression\n-\t| expression datetimeField  \t\t\t\t\t# ToDurationExpression\n-\t| expression BY datetimeField\t\t\t\t\t# FromDurationExpression\n-\t| expression multiplicativeOperator expression\t# MultiplicationExpression\n-\t| expression additiveOperator expression\t\t# AdditionExpression\n-\t| expression DOUBLE_PIPE expression\t\t\t\t# ConcatenationExpression\n+\t: LEFT_PAREN expression RIGHT_PAREN\t\t\t\t\t# GroupedExpression\n+\t| LEFT_PAREN subQuery RIGHT_PAREN\t\t\t\t\t# SubQueryExpression\n+\t| caseList collationSpecification?\t\t\t\t\t# CaseExpression\n+\t| literal collationSpecification?\t\t\t\t\t# LiteralExpression\n+\t| parameter collationSpecification?\t\t\t\t\t# ParameterExpression\n+\t| entityTypeReference\t\t\t\t\t\t\t\t# EntityTypeExpression\n+\t| entityIdReference collationSpecification?\t\t\t# EntityIdExpression\n+\t| entityVersionReference collationSpecification?\t# EntityVersionExpression\n+\t| entityNaturalIdReference collationSpecification?\t# EntityNaturalIdExpression\n+\t| path collationSpecification?\t\t\t\t\t\t# PathExpression\n+\t| function collationSpecification?\t\t\t\t\t# FunctionExpression\n+\t| signOperator expression\t\t\t\t\t\t\t# UnaryExpression\n+\t| expression datetimeField  \t\t\t\t\t\t# ToDurationExpression\n+\t| expression BY datetimeField\t\t\t\t\t\t# FromDurationExpression\n+\t| expression multiplicativeOperator expression\t\t# MultiplicationExpression\n+\t| expression additiveOperator expression\t\t\t# AdditionExpression\n+\t| expression DOUBLE_PIPE expression\t\t\t\t\t# ConcatenationExpression", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MTgzNw=="}, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5MTEwNQ==", "bodyText": "Gotcha, I'll improve that.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531191105", "createdAt": "2020-11-26T18:58:51Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/antlr/org/hibernate/grammars/hql/HqlParser.g4", "diffHunk": "@@ -404,23 +396,23 @@ likeEscape\n \n expression\n \t//highest to lowest precedence\n-\t: LEFT_PAREN expression RIGHT_PAREN\t\t\t\t# GroupedExpression\n-\t| LEFT_PAREN subQuery RIGHT_PAREN\t\t\t\t# SubQueryExpression\n-\t| caseList\t\t\t\t\t\t\t\t\t\t# CaseExpression\n-\t| literal\t\t\t\t\t\t\t\t\t\t# LiteralExpression\n-\t| parameter\t\t\t\t\t\t\t\t\t\t# ParameterExpression\n-\t| entityTypeReference\t\t\t\t\t\t\t# EntityTypeExpression\n-\t| entityIdReference\t\t\t\t\t\t\t\t# EntityIdExpression\n-\t| entityVersionReference\t\t\t\t\t\t# EntityVersionExpression\n-\t| entityNaturalIdReference\t\t\t\t\t\t# EntityNaturalIdExpression\n-\t| path\t\t\t\t\t\t\t\t\t\t\t# PathExpression\n-\t| function\t\t\t\t\t\t\t\t\t\t# FunctionExpression\n-\t| signOperator expression\t\t\t\t\t\t# UnaryExpression\n-\t| expression datetimeField  \t\t\t\t\t# ToDurationExpression\n-\t| expression BY datetimeField\t\t\t\t\t# FromDurationExpression\n-\t| expression multiplicativeOperator expression\t# MultiplicationExpression\n-\t| expression additiveOperator expression\t\t# AdditionExpression\n-\t| expression DOUBLE_PIPE expression\t\t\t\t# ConcatenationExpression\n+\t: LEFT_PAREN expression RIGHT_PAREN\t\t\t\t\t# GroupedExpression\n+\t| LEFT_PAREN subQuery RIGHT_PAREN\t\t\t\t\t# SubQueryExpression\n+\t| caseList collationSpecification?\t\t\t\t\t# CaseExpression\n+\t| literal collationSpecification?\t\t\t\t\t# LiteralExpression\n+\t| parameter collationSpecification?\t\t\t\t\t# ParameterExpression\n+\t| entityTypeReference\t\t\t\t\t\t\t\t# EntityTypeExpression\n+\t| entityIdReference collationSpecification?\t\t\t# EntityIdExpression\n+\t| entityVersionReference collationSpecification?\t# EntityVersionExpression\n+\t| entityNaturalIdReference collationSpecification?\t# EntityNaturalIdExpression\n+\t| path collationSpecification?\t\t\t\t\t\t# PathExpression\n+\t| function collationSpecification?\t\t\t\t\t# FunctionExpression\n+\t| signOperator expression\t\t\t\t\t\t\t# UnaryExpression\n+\t| expression datetimeField  \t\t\t\t\t\t# ToDurationExpression\n+\t| expression BY datetimeField\t\t\t\t\t\t# FromDurationExpression\n+\t| expression multiplicativeOperator expression\t\t# MultiplicationExpression\n+\t| expression additiveOperator expression\t\t\t# AdditionExpression\n+\t| expression DOUBLE_PIPE expression\t\t\t\t\t# ConcatenationExpression", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MTgzNw=="}, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0NzI2MA==", "bodyText": "thanks", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531247260", "createdAt": "2020-11-26T22:57:17Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/antlr/org/hibernate/grammars/hql/HqlParser.g4", "diffHunk": "@@ -404,23 +396,23 @@ likeEscape\n \n expression\n \t//highest to lowest precedence\n-\t: LEFT_PAREN expression RIGHT_PAREN\t\t\t\t# GroupedExpression\n-\t| LEFT_PAREN subQuery RIGHT_PAREN\t\t\t\t# SubQueryExpression\n-\t| caseList\t\t\t\t\t\t\t\t\t\t# CaseExpression\n-\t| literal\t\t\t\t\t\t\t\t\t\t# LiteralExpression\n-\t| parameter\t\t\t\t\t\t\t\t\t\t# ParameterExpression\n-\t| entityTypeReference\t\t\t\t\t\t\t# EntityTypeExpression\n-\t| entityIdReference\t\t\t\t\t\t\t\t# EntityIdExpression\n-\t| entityVersionReference\t\t\t\t\t\t# EntityVersionExpression\n-\t| entityNaturalIdReference\t\t\t\t\t\t# EntityNaturalIdExpression\n-\t| path\t\t\t\t\t\t\t\t\t\t\t# PathExpression\n-\t| function\t\t\t\t\t\t\t\t\t\t# FunctionExpression\n-\t| signOperator expression\t\t\t\t\t\t# UnaryExpression\n-\t| expression datetimeField  \t\t\t\t\t# ToDurationExpression\n-\t| expression BY datetimeField\t\t\t\t\t# FromDurationExpression\n-\t| expression multiplicativeOperator expression\t# MultiplicationExpression\n-\t| expression additiveOperator expression\t\t# AdditionExpression\n-\t| expression DOUBLE_PIPE expression\t\t\t\t# ConcatenationExpression\n+\t: LEFT_PAREN expression RIGHT_PAREN\t\t\t\t\t# GroupedExpression\n+\t| LEFT_PAREN subQuery RIGHT_PAREN\t\t\t\t\t# SubQueryExpression\n+\t| caseList collationSpecification?\t\t\t\t\t# CaseExpression\n+\t| literal collationSpecification?\t\t\t\t\t# LiteralExpression\n+\t| parameter collationSpecification?\t\t\t\t\t# ParameterExpression\n+\t| entityTypeReference\t\t\t\t\t\t\t\t# EntityTypeExpression\n+\t| entityIdReference collationSpecification?\t\t\t# EntityIdExpression\n+\t| entityVersionReference collationSpecification?\t# EntityVersionExpression\n+\t| entityNaturalIdReference collationSpecification?\t# EntityNaturalIdExpression\n+\t| path collationSpecification?\t\t\t\t\t\t# PathExpression\n+\t| function collationSpecification?\t\t\t\t\t# FunctionExpression\n+\t| signOperator expression\t\t\t\t\t\t\t# UnaryExpression\n+\t| expression datetimeField  \t\t\t\t\t\t# ToDurationExpression\n+\t| expression BY datetimeField\t\t\t\t\t\t# FromDurationExpression\n+\t| expression multiplicativeOperator expression\t\t# MultiplicationExpression\n+\t| expression additiveOperator expression\t\t\t# AdditionExpression\n+\t| expression DOUBLE_PIPE expression\t\t\t\t\t# ConcatenationExpression", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MTgzNw=="}, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwNTEyMQ==", "bodyText": "Should be fixed now", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531705121", "createdAt": "2020-11-27T17:14:06Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/antlr/org/hibernate/grammars/hql/HqlParser.g4", "diffHunk": "@@ -404,23 +396,23 @@ likeEscape\n \n expression\n \t//highest to lowest precedence\n-\t: LEFT_PAREN expression RIGHT_PAREN\t\t\t\t# GroupedExpression\n-\t| LEFT_PAREN subQuery RIGHT_PAREN\t\t\t\t# SubQueryExpression\n-\t| caseList\t\t\t\t\t\t\t\t\t\t# CaseExpression\n-\t| literal\t\t\t\t\t\t\t\t\t\t# LiteralExpression\n-\t| parameter\t\t\t\t\t\t\t\t\t\t# ParameterExpression\n-\t| entityTypeReference\t\t\t\t\t\t\t# EntityTypeExpression\n-\t| entityIdReference\t\t\t\t\t\t\t\t# EntityIdExpression\n-\t| entityVersionReference\t\t\t\t\t\t# EntityVersionExpression\n-\t| entityNaturalIdReference\t\t\t\t\t\t# EntityNaturalIdExpression\n-\t| path\t\t\t\t\t\t\t\t\t\t\t# PathExpression\n-\t| function\t\t\t\t\t\t\t\t\t\t# FunctionExpression\n-\t| signOperator expression\t\t\t\t\t\t# UnaryExpression\n-\t| expression datetimeField  \t\t\t\t\t# ToDurationExpression\n-\t| expression BY datetimeField\t\t\t\t\t# FromDurationExpression\n-\t| expression multiplicativeOperator expression\t# MultiplicationExpression\n-\t| expression additiveOperator expression\t\t# AdditionExpression\n-\t| expression DOUBLE_PIPE expression\t\t\t\t# ConcatenationExpression\n+\t: LEFT_PAREN expression RIGHT_PAREN\t\t\t\t\t# GroupedExpression\n+\t| LEFT_PAREN subQuery RIGHT_PAREN\t\t\t\t\t# SubQueryExpression\n+\t| caseList collationSpecification?\t\t\t\t\t# CaseExpression\n+\t| literal collationSpecification?\t\t\t\t\t# LiteralExpression\n+\t| parameter collationSpecification?\t\t\t\t\t# ParameterExpression\n+\t| entityTypeReference\t\t\t\t\t\t\t\t# EntityTypeExpression\n+\t| entityIdReference collationSpecification?\t\t\t# EntityIdExpression\n+\t| entityVersionReference collationSpecification?\t# EntityVersionExpression\n+\t| entityNaturalIdReference collationSpecification?\t# EntityNaturalIdExpression\n+\t| path collationSpecification?\t\t\t\t\t\t# PathExpression\n+\t| function collationSpecification?\t\t\t\t\t# FunctionExpression\n+\t| signOperator expression\t\t\t\t\t\t\t# UnaryExpression\n+\t| expression datetimeField  \t\t\t\t\t\t# ToDurationExpression\n+\t| expression BY datetimeField\t\t\t\t\t\t# FromDurationExpression\n+\t| expression multiplicativeOperator expression\t\t# MultiplicationExpression\n+\t| expression additiveOperator expression\t\t\t# AdditionExpression\n+\t| expression DOUBLE_PIPE expression\t\t\t\t\t# ConcatenationExpression", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MTgzNw=="}, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTY1MTkwOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/DB2Dialect.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODoyNjozM1rOH6kwmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMzoxNTozMlrOH6o8pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MTcyMA==", "bodyText": "Why precisely was this needed?", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531181720", "createdAt": "2020-11-26T18:26:33Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DB2Dialect.java", "diffHunk": "@@ -572,6 +572,8 @@ protected SqlTypeDescriptor getSqlTypeDescriptorOverride(int sqlCode) {\n \t\t\t// Therefore here we overwrite the sql type descriptors to\n \t\t\t// use the non-N variants which are supported.\n \t\t\tswitch ( sqlCode ) {\n+\t\t\t\tcase Types.BOOLEAN:\n+\t\t\t\t\treturn SmallIntTypeDescriptor.INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5MTY3NQ==", "bodyText": "DB2 has no booleans. I adapted this from https://github.com/hibernate/hibernate-orm/blob/master/hibernate-core/src/main/java/org/hibernate/dialect/DB2Dialect.java#L502 as I thought this was missed.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531191675", "createdAt": "2020-11-26T19:00:36Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DB2Dialect.java", "diffHunk": "@@ -572,6 +572,8 @@ protected SqlTypeDescriptor getSqlTypeDescriptorOverride(int sqlCode) {\n \t\t\t// Therefore here we overwrite the sql type descriptors to\n \t\t\t// use the non-N variants which are supported.\n \t\t\tswitch ( sqlCode ) {\n+\t\t\t\tcase Types.BOOLEAN:\n+\t\t\t\t\treturn SmallIntTypeDescriptor.INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MTcyMA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0OTUyMg==", "bodyText": "DB2 has no booleans.\n\nI'm pretty sure that can't be right, since I know for sure I extensively tested the new DB2Dialect, and I'm using boolean as the mapping for both BIT and BOOLEAN.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531249522", "createdAt": "2020-11-26T23:11:00Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DB2Dialect.java", "diffHunk": "@@ -572,6 +572,8 @@ protected SqlTypeDescriptor getSqlTypeDescriptorOverride(int sqlCode) {\n \t\t\t// Therefore here we overwrite the sql type descriptors to\n \t\t\t// use the non-N variants which are supported.\n \t\t\tswitch ( sqlCode ) {\n+\t\t\t\tcase Types.BOOLEAN:\n+\t\t\t\t\treturn SmallIntTypeDescriptor.INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MTcyMA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI1MDM0MA==", "bodyText": "Apparently the answer is that BOOLEAN was introduced in DB2 11. So it looks like we need to make that type mapping conditional on the database version.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531250340", "createdAt": "2020-11-26T23:15:32Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DB2Dialect.java", "diffHunk": "@@ -572,6 +572,8 @@ protected SqlTypeDescriptor getSqlTypeDescriptorOverride(int sqlCode) {\n \t\t\t// Therefore here we overwrite the sql type descriptors to\n \t\t\t// use the non-N variants which are supported.\n \t\t\tswitch ( sqlCode ) {\n+\t\t\t\tcase Types.BOOLEAN:\n+\t\t\t\t\treturn SmallIntTypeDescriptor.INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MTcyMA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTY1NDc5OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODoyNzo1OVrOH6kyPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMjo1NTo0NVrOH6ovpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MjE0MA==", "bodyText": "This should not be necessary, and is probably wrong.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531182140", "createdAt": "2020-11-26T18:27:59Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -87,11 +91,14 @@ public DerbyDialect(int version) {\n \t\tregisterColumnType( Types.BIT, 1, \"boolean\" ); //no bit\n \t\tregisterColumnType( Types.BIT, \"smallint\" ); //no bit\n \t\tregisterColumnType( Types.TINYINT, \"smallint\" ); //no tinyint\n+\t\tregisterColumnType( Types.CHAR, \"char(1)\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5MTkyOA==", "bodyText": "Adapted from https://github.com/hibernate/hibernate-orm/blob/master/hibernate-core/src/main/java/org/hibernate/dialect/DB2Dialect.java#L95 which was the super type of the derby dialect", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531191928", "createdAt": "2020-11-26T19:01:29Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -87,11 +91,14 @@ public DerbyDialect(int version) {\n \t\tregisterColumnType( Types.BIT, 1, \"boolean\" ); //no bit\n \t\tregisterColumnType( Types.BIT, \"smallint\" ); //no bit\n \t\tregisterColumnType( Types.TINYINT, \"smallint\" ); //no tinyint\n+\t\tregisterColumnType( Types.CHAR, \"char(1)\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MjE0MA=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0NzAxNA==", "bodyText": "Yeah but if you look in Dialect, we now have registerColumnType( Types.CHAR, \"char($l)\" );, and you're overriding that here with \"char(1)\" which wrongly treats the SQL char() type as a single character instead of a string.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531247014", "createdAt": "2020-11-26T22:55:45Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -87,11 +91,14 @@ public DerbyDialect(int version) {\n \t\tregisterColumnType( Types.BIT, 1, \"boolean\" ); //no bit\n \t\tregisterColumnType( Types.BIT, \"smallint\" ); //no bit\n \t\tregisterColumnType( Types.TINYINT, \"smallint\" ); //no tinyint\n+\t\tregisterColumnType( Types.CHAR, \"char(1)\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MjE0MA=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTY1OTEwOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODozMDoxMFrOH6k01Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMjo1Njo0OFrOH6owWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MjgwNQ==", "bodyText": "No, we're not using this mapping anymore in Hibernate 6, that was what we used to using in Hibernate 5 and it was wrong and I changed it across all the Dialects.\nI'm pretty sure you shouldn't need to be changing type mappings for Derby because I tested the shit out of all this on Derby when I cleaned up the dialects.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531182805", "createdAt": "2020-11-26T18:30:10Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -87,11 +91,14 @@ public DerbyDialect(int version) {\n \t\tregisterColumnType( Types.BIT, 1, \"boolean\" ); //no bit\n \t\tregisterColumnType( Types.BIT, \"smallint\" ); //no bit\n \t\tregisterColumnType( Types.TINYINT, \"smallint\" ); //no tinyint\n+\t\tregisterColumnType( Types.CHAR, \"char(1)\" );\n \n \t\t//HHH-12827: map them both to the same type to\n \t\t//           avoid problems with schema update\n //\t\tregisterColumnType( Types.DECIMAL, \"decimal($p,$s)\" );\n \t\tregisterColumnType( Types.NUMERIC, \"decimal($p,$s)\" );\n+\t\tregisterColumnType( Types.FLOAT, \"float\" );\n+\t\tregisterColumnType( Types.DOUBLE, \"double\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4NDYwMg==", "bodyText": "See\n\nhttps://db.apache.org/derby/docs/10.8/ref/rrefsqlj27281.html\nhttps://db.apache.org/derby/docs/10.8/ref/rrefsqljdoubleprecision.html\n\nThe default type mappings in Dialect should be perfect for Derby.\nIf you map Types.FLOAT to float, then Java floats and doubles will both be mapped to the precision-less SQL type float`.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531184602", "createdAt": "2020-11-26T18:36:25Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -87,11 +91,14 @@ public DerbyDialect(int version) {\n \t\tregisterColumnType( Types.BIT, 1, \"boolean\" ); //no bit\n \t\tregisterColumnType( Types.BIT, \"smallint\" ); //no bit\n \t\tregisterColumnType( Types.TINYINT, \"smallint\" ); //no tinyint\n+\t\tregisterColumnType( Types.CHAR, \"char(1)\" );\n \n \t\t//HHH-12827: map them both to the same type to\n \t\t//           avoid problems with schema update\n //\t\tregisterColumnType( Types.DECIMAL, \"decimal($p,$s)\" );\n \t\tregisterColumnType( Types.NUMERIC, \"decimal($p,$s)\" );\n+\t\tregisterColumnType( Types.FLOAT, \"float\" );\n+\t\tregisterColumnType( Types.DOUBLE, \"double\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MjgwNQ=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5MjM1NQ==", "bodyText": "Ok, I just tried to copy over parts from 5 that seemed to be missing, but if you did this on purpose, I'll remove the double and float registrations.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531192355", "createdAt": "2020-11-26T19:03:00Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -87,11 +91,14 @@ public DerbyDialect(int version) {\n \t\tregisterColumnType( Types.BIT, 1, \"boolean\" ); //no bit\n \t\tregisterColumnType( Types.BIT, \"smallint\" ); //no bit\n \t\tregisterColumnType( Types.TINYINT, \"smallint\" ); //no tinyint\n+\t\tregisterColumnType( Types.CHAR, \"char(1)\" );\n \n \t\t//HHH-12827: map them both to the same type to\n \t\t//           avoid problems with schema update\n //\t\tregisterColumnType( Types.DECIMAL, \"decimal($p,$s)\" );\n \t\tregisterColumnType( Types.NUMERIC, \"decimal($p,$s)\" );\n+\t\tregisterColumnType( Types.FLOAT, \"float\" );\n+\t\tregisterColumnType( Types.DOUBLE, \"double\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MjgwNQ=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0NzE5NA==", "bodyText": "No no, please don't do that. Nothing is missing, it's all defined in the superclass now. If you just copy stuff over from Hibernate 5, it will be wrong, and you'll be hammering work I did that took me literally weeks to get right.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531247194", "createdAt": "2020-11-26T22:56:48Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -87,11 +91,14 @@ public DerbyDialect(int version) {\n \t\tregisterColumnType( Types.BIT, 1, \"boolean\" ); //no bit\n \t\tregisterColumnType( Types.BIT, \"smallint\" ); //no bit\n \t\tregisterColumnType( Types.TINYINT, \"smallint\" ); //no tinyint\n+\t\tregisterColumnType( Types.CHAR, \"char(1)\" );\n \n \t\t//HHH-12827: map them both to the same type to\n \t\t//           avoid problems with schema update\n //\t\tregisterColumnType( Types.DECIMAL, \"decimal($p,$s)\" );\n \t\tregisterColumnType( Types.NUMERIC, \"decimal($p,$s)\" );\n+\t\tregisterColumnType( Types.FLOAT, \"float\" );\n+\t\tregisterColumnType( Types.DOUBLE, \"double\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MjgwNQ=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTY3MzY2OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODozNzozN1rOH6k9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMzowMzozMFrOH6o0ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4NDk1NQ==", "bodyText": "Same as above: why was this necessary?", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531184955", "createdAt": "2020-11-26T18:37:37Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -440,9 +453,16 @@ public boolean supportsTupleDistinctCounts() {\n \t}\n \n \tprotected SqlTypeDescriptor getSqlTypeDescriptorOverride(int sqlCode) {\n-\t\treturn sqlCode == Types.NUMERIC\n-\t\t\t\t? DecimalTypeDescriptor.INSTANCE\n-\t\t\t\t: super.getSqlTypeDescriptorOverride(sqlCode);\n+\t\tswitch ( sqlCode ) {\n+\t\t\tcase Types.BOOLEAN:\n+\t\t\t\treturn SmallIntTypeDescriptor.INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5MjQ4Nw==", "bodyText": "Same rationale as for DB2 from above: #3667 (comment)\nDerby has no booleans", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531192487", "createdAt": "2020-11-26T19:03:38Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -440,9 +453,16 @@ public boolean supportsTupleDistinctCounts() {\n \t}\n \n \tprotected SqlTypeDescriptor getSqlTypeDescriptorOverride(int sqlCode) {\n-\t\treturn sqlCode == Types.NUMERIC\n-\t\t\t\t? DecimalTypeDescriptor.INSTANCE\n-\t\t\t\t: super.getSqlTypeDescriptorOverride(sqlCode);\n+\t\tswitch ( sqlCode ) {\n+\t\t\tcase Types.BOOLEAN:\n+\t\t\t\treturn SmallIntTypeDescriptor.INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4NDk1NQ=="}, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0ODI1MQ==", "bodyText": "Are you certain? https://db.apache.org/derby/docs/10.8/ref/rrefsqljBoolean.html", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531248251", "createdAt": "2020-11-26T23:03:30Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -440,9 +453,16 @@ public boolean supportsTupleDistinctCounts() {\n \t}\n \n \tprotected SqlTypeDescriptor getSqlTypeDescriptorOverride(int sqlCode) {\n-\t\treturn sqlCode == Types.NUMERIC\n-\t\t\t\t? DecimalTypeDescriptor.INSTANCE\n-\t\t\t\t: super.getSqlTypeDescriptorOverride(sqlCode);\n+\t\tswitch ( sqlCode ) {\n+\t\t\tcase Types.BOOLEAN:\n+\t\t\t\treturn SmallIntTypeDescriptor.INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4NDk1NQ=="}, "originalCommit": null, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTI1MDE2OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODoyMjo1NlrOH7F6fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDo0ODo0MVrOH71hhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyNDkyNg==", "bodyText": "38?\nIs there something magical about this number?", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531724926", "createdAt": "2020-11-27T18:22:56Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -252,6 +262,12 @@ public String castPattern(CastType from, CastType to) {\n \t\t\t\t\treturn \"case ?1 when false then 0 when true then 1 end\";\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tcase STRING:\n+\t\t\t\t// See https://issues.apache.org/jira/browse/DERBY-2072\n+\t\t\t\tif ( from.getKind() == CastTypeKind.NUMERIC ) {\n+\t\t\t\t\treturn \"cast(cast(?1 as char(38)) as ?2)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyNTA5MQ==", "bodyText": "Oh, right, I guess it's the maximum number of digits in a 32 bit integer....", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531725091", "createdAt": "2020-11-27T18:23:42Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -252,6 +262,12 @@ public String castPattern(CastType from, CastType to) {\n \t\t\t\t\treturn \"case ?1 when false then 0 when true then 1 end\";\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tcase STRING:\n+\t\t\t\t// See https://issues.apache.org/jira/browse/DERBY-2072\n+\t\t\t\tif ( from.getKind() == CastTypeKind.NUMERIC ) {\n+\t\t\t\t\treturn \"cast(cast(?1 as char(38)) as ?2)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyNDkyNg=="}, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyNTg2MA==", "bodyText": "Rmm, nope, it's not even the max number of digits in a long.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531725860", "createdAt": "2020-11-27T18:26:22Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -252,6 +262,12 @@ public String castPattern(CastType from, CastType to) {\n \t\t\t\t\treturn \"case ?1 when false then 0 when true then 1 end\";\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tcase STRING:\n+\t\t\t\t// See https://issues.apache.org/jira/browse/DERBY-2072\n+\t\t\t\tif ( from.getKind() == CastTypeKind.NUMERIC ) {\n+\t\t\t\t\treturn \"cast(cast(?1 as char(38)) as ?2)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyNDkyNg=="}, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyNzMzMw==", "bodyText": "Curious to know where 38 came from.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531727333", "createdAt": "2020-11-27T18:32:20Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -252,6 +262,12 @@ public String castPattern(CastType from, CastType to) {\n \t\t\t\t\treturn \"case ?1 when false then 0 when true then 1 end\";\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tcase STRING:\n+\t\t\t\t// See https://issues.apache.org/jira/browse/DERBY-2072\n+\t\t\t\tif ( from.getKind() == CastTypeKind.NUMERIC ) {\n+\t\t\t\t\treturn \"cast(cast(?1 as char(38)) as ?2)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyNDkyNg=="}, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0NDAwOQ==", "bodyText": "This was the suggested workaround in the comment https://issues.apache.org/jira/browse/DERBY-2072?focusedCommentId=17154473&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17154473\nI don't know what the maximum decimal precision is, so we might just as well use 254(char max capacity) to be safe, but 32 and 64 bit values should definitely fit into that data type. I'll just use the maximum capacity then and document this.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r532444009", "createdAt": "2020-11-30T09:13:06Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -252,6 +262,12 @@ public String castPattern(CastType from, CastType to) {\n \t\t\t\t\treturn \"case ?1 when false then 0 when true then 1 end\";\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tcase STRING:\n+\t\t\t\t// See https://issues.apache.org/jira/browse/DERBY-2072\n+\t\t\t\tif ( from.getKind() == CastTypeKind.NUMERIC ) {\n+\t\t\t\t\treturn \"cast(cast(?1 as char(38)) as ?2)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyNDkyNg=="}, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUwNDk2NQ==", "bodyText": "I don't know what the maximum decimal precision is\n\nI think it's 31, but I might be wrong.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r532504965", "createdAt": "2020-11-30T10:48:41Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -252,6 +262,12 @@ public String castPattern(CastType from, CastType to) {\n \t\t\t\t\treturn \"case ?1 when false then 0 when true then 1 end\";\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tcase STRING:\n+\t\t\t\t// See https://issues.apache.org/jira/browse/DERBY-2072\n+\t\t\t\tif ( from.getKind() == CastTypeKind.NUMERIC ) {\n+\t\t\t\t\treturn \"cast(cast(?1 as char(38)) as ?2)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyNDkyNg=="}, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTI3NDgzOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODozNjo0NVrOH7GIFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDowOToxMlrOH78tkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyODQwNA==", "bodyText": "IIRC, Postgres doesn't need this, so if you're going to add this here, please also override it on PostgresDialect to return \"\".\nRight now I don't recall if there were other databases which also don't require that.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531728404", "createdAt": "2020-11-27T18:36:45Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1257,7 +1258,8 @@ public String getSelectGUIDString() {\n \t * @return the SQL equivalent to Oracle's {@code from dual}.\n \t */\n \tpublic String getFromDual() {\n-\t\treturn \"\";\n+\t\t// The standard SQL solution to get a dual table is to use the VALUES clause\n+\t\treturn \"from (values (0)) as dual\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0NTk3Nw==", "bodyText": "If a query uses other clauses like where, group by etc. it needs a from clause. I can add another method supportsSelectQueryWithoutFromClause to handle these cases if you like.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r532445977", "createdAt": "2020-11-30T09:16:22Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1257,7 +1258,8 @@ public String getSelectGUIDString() {\n \t * @return the SQL equivalent to Oracle's {@code from dual}.\n \t */\n \tpublic String getFromDual() {\n-\t\treturn \"\";\n+\t\t// The standard SQL solution to get a dual table is to use the VALUES clause\n+\t\treturn \"from (values (0)) as dual\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyODQwNA=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUwNjI3OQ==", "bodyText": "If a query uses other clauses like where, group by etc. it needs a from clause.\n\nAh, OK, right. But does it make sense to have these clauses if there is no from clause? I don't see how they could possibly be useful.\n\nI can add another method supportsSelectQueryWithoutFromClause to handle these cases if you like.\n\nI would prefer that because from (values (0)) as dual is really pretty ugly and noisy.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r532506279", "createdAt": "2020-11-30T10:50:47Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1257,7 +1258,8 @@ public String getSelectGUIDString() {\n \t * @return the SQL equivalent to Oracle's {@code from dual}.\n \t */\n \tpublic String getFromDual() {\n-\t\treturn \"\";\n+\t\t// The standard SQL solution to get a dual table is to use the VALUES clause\n+\t\treturn \"from (values (0)) as dual\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyODQwNA=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MDM3Mg==", "bodyText": "For the record, I needed this in the emulation for tuple comparison like (a, b) in ((1, 2), (2, 3)) for DBMS that only support tuples for IN predicates with subqueries like e.g. Oracle. I'll add an additional method to handle omitting the from clause altogether though.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r532580372", "createdAt": "2020-11-30T13:02:42Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1257,7 +1258,8 @@ public String getSelectGUIDString() {\n \t * @return the SQL equivalent to Oracle's {@code from dual}.\n \t */\n \tpublic String getFromDual() {\n-\t\treturn \"\";\n+\t\t// The standard SQL solution to get a dual table is to use the VALUES clause\n+\t\treturn \"from (values (0)) as dual\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyODQwNA=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyMjczOQ==", "bodyText": "OK, that makes sense. \ud83d\udc4d", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r532622739", "createdAt": "2020-11-30T14:09:12Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1257,7 +1258,8 @@ public String getSelectGUIDString() {\n \t * @return the SQL equivalent to Oracle's {@code from dual}.\n \t */\n \tpublic String getFromDual() {\n-\t\treturn \"\";\n+\t\t// The standard SQL solution to get a dual table is to use the VALUES clause\n+\t\treturn \"from (values (0)) as dual\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyODQwNA=="}, "originalCommit": null, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4119, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}