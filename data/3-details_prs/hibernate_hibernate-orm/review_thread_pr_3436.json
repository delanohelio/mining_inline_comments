{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTQyNzU3", "number": 3436, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo1NjoxMVrOEHLl-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo1NjoxMVrOEHLl-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTY1NDMzOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/TwoPhaseLoad.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo1NjoxMVrOGmbfiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo1NjoxMVrOGmbfiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0OTUxMw==", "bodyText": "If this method is exposed to the public, we might change the last parameter type to Iterable<? extends PreloadEventListener> to be more robust. Not 100% sure, though.", "url": "https://github.com/hibernate/hibernate-orm/pull/3436#discussion_r442949513", "createdAt": "2020-06-19T16:56:11Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/TwoPhaseLoad.java", "diffHunk": "@@ -229,18 +248,36 @@ else if ( value != PropertyAccessStrategyBackRefImpl.UNKNOWN ) {\n \n \t\t\t\t// we know value != LazyPropertyInitializer.UNFETCHED_PROPERTY\n \t\t\t\tBoolean overridingEager = getOverridingEager( session, entityName, propertyNames[i], types[i], debugEnabled );\n-\t\t\t\thydratedState[i] = types[i].resolve( value, session, entity, overridingEager );\n+\t\t\t\thydratedState[i] = types[i].isEntityType()\n+\t\t\t\t\t\t? entityResolver.resolve( (EntityType) types[i], value, session, entity, overridingEager )\n+\t\t\t\t\t\t: types[i].resolve( value, session, entity, overridingEager );\n \t\t\t}\n \t\t\telse {\n \t\t\t\tif ( debugEnabled ) {\n \t\t\t\t\tLOG.debugf( \"Skipping <unknown> attribute : `%s`\", propertyNames[i] );\n \t\t\t\t}\n \t\t\t}\n-\t\t\t\n+\n \t\t\tif ( session.getFetchGraphLoadContext() != fetchGraphContext ) {\n \t\t\t\tsession.setFetchGraphLoadContext( fetchGraphContext );\n \t\t\t}\n \t\t}\n+\t}\n+\n+\tpublic static void initializeEntityFromEntityEntryLoadedState(\n+\t\t\tfinal Object entity,\n+\t\t\tfinal EntityEntry entityEntry,\n+\t\t\tfinal boolean readOnly,\n+\t\t\tfinal SharedSessionContractImplementor session,\n+\t\t\tfinal PreLoadEvent preLoadEvent,\n+\t\t\tfinal Iterable<PreLoadEventListener> preLoadEventListeners) throws HibernateException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843395b6a6ab7d701b43f2092fcf06495410dc65"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4198, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}