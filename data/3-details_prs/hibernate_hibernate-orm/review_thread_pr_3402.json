{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NjM0MjMx", "number": 3402, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo0NzowNFrOD85tVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo1NToyNFrOD856ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTg2NjQ2OnYy", "diffSide": "LEFT", "path": "hibernate-core/src/main/java/org/hibernate/boot/archive/internal/ArchiveHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo0NzowNFrOGWH-Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo0NzowNFrOGWH-Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1MjQ1OA==", "bodyText": "The above string concatenation will incur performance cost invariably even though trace logging level is disabled", "url": "https://github.com/hibernate/hibernate-orm/pull/3402#discussion_r425852458", "createdAt": "2020-05-15T14:47:04Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/boot/archive/internal/ArchiveHelper.java", "diffHunk": "@@ -93,7 +93,7 @@ else if ( \"zip\".equals( protocol )\n \t\t\t\t\t\"Unable to determine JAR Url from \" + url + \". Cause: \" + e.getMessage()\n \t\t\t);\n \t\t}\n-\t\tlog.trace( \"JAR URL from URL Entry: \" + url + \" >> \" + jarUrl );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTg3NTg3OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/boot/archive/internal/StandardArchiveDescriptorFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo0OToyMVrOGWIETA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0MTozN1rOGWRpgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1NDAyOA==", "bodyText": "I added logging level checking whenever the method invoking is involved. We never know how much performance cost will be paid for future coding might provide an overridden heavy weight method implementation. Adding logging level checking is simple and future proof.", "url": "https://github.com/hibernate/hibernate-orm/pull/3402#discussion_r425854028", "createdAt": "2020-05-15T14:49:21Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/boot/archive/internal/StandardArchiveDescriptorFactory.java", "diffHunk": "@@ -130,12 +130,14 @@ public URL adjustJarFileEntryUrl(URL url, URL rootUrl) {\n \t\t\t}\n \t\t\tcatch (MalformedURLException e) {\n \t\t\t\t// allow to pass through to return the original URL\n-\t\t\t\tlog.debugf(\n-\t\t\t\t\t\te,\n-\t\t\t\t\t\t\"Unable to adjust relative <jar-file/> URL [%s] relative to root URL [%s]\",\n-\t\t\t\t\t\tfilePart,\n-\t\t\t\t\t\trootUrlFile.getAbsolutePath()\n-\t\t\t\t);\n+\t\t\t\tif ( log.isDebugEnabled() ) {\n+\t\t\t\t\tlog.debugf(\n+\t\t\t\t\t\t\te,\n+\t\t\t\t\t\t\t\"Unable to adjust relative <jar-file/> URL [%s] relative to root URL [%s]\",\n+\t\t\t\t\t\t\tfilePart,\n+\t\t\t\t\t\t\trootUrlFile.getAbsolutePath()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5ODUwNA==", "bodyText": "Yes, it is future proof.  For whatever reason, and I may be in the minority which is fine, I prefer to not do the level check in trivial cases.  I don't think it is as easy as saying \"well anything that calls a method.  E.g. here calling #getAbsolutePath() does have an overhead, so this is fine.  The reason I prefer to avoid the check is ofc because the logging system does the same checks already.  I'm just talking in the general case as a reply to your comment.  Again, here it is fine", "url": "https://github.com/hibernate/hibernate-orm/pull/3402#discussion_r425898504", "createdAt": "2020-05-15T16:00:36Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/boot/archive/internal/StandardArchiveDescriptorFactory.java", "diffHunk": "@@ -130,12 +130,14 @@ public URL adjustJarFileEntryUrl(URL url, URL rootUrl) {\n \t\t\t}\n \t\t\tcatch (MalformedURLException e) {\n \t\t\t\t// allow to pass through to return the original URL\n-\t\t\t\tlog.debugf(\n-\t\t\t\t\t\te,\n-\t\t\t\t\t\t\"Unable to adjust relative <jar-file/> URL [%s] relative to root URL [%s]\",\n-\t\t\t\t\t\tfilePart,\n-\t\t\t\t\t\trootUrlFile.getAbsolutePath()\n-\t\t\t\t);\n+\t\t\t\tif ( log.isDebugEnabled() ) {\n+\t\t\t\t\tlog.debugf(\n+\t\t\t\t\t\t\te,\n+\t\t\t\t\t\t\t\"Unable to adjust relative <jar-file/> URL [%s] relative to root URL [%s]\",\n+\t\t\t\t\t\t\tfilePart,\n+\t\t\t\t\t\t\trootUrlFile.getAbsolutePath()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1NDAyOA=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTAxMQ==", "bodyText": "Yeah, this is not clear-cut decision and it is hard to decide which scenario is trivial. Yeah, method invoking might not be a good criterion.", "url": "https://github.com/hibernate/hibernate-orm/pull/3402#discussion_r426011011", "createdAt": "2020-05-15T19:41:37Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/boot/archive/internal/StandardArchiveDescriptorFactory.java", "diffHunk": "@@ -130,12 +130,14 @@ public URL adjustJarFileEntryUrl(URL url, URL rootUrl) {\n \t\t\t}\n \t\t\tcatch (MalformedURLException e) {\n \t\t\t\t// allow to pass through to return the original URL\n-\t\t\t\tlog.debugf(\n-\t\t\t\t\t\te,\n-\t\t\t\t\t\t\"Unable to adjust relative <jar-file/> URL [%s] relative to root URL [%s]\",\n-\t\t\t\t\t\tfilePart,\n-\t\t\t\t\t\trootUrlFile.getAbsolutePath()\n-\t\t\t\t);\n+\t\t\t\tif ( log.isDebugEnabled() ) {\n+\t\t\t\t\tlog.debugf(\n+\t\t\t\t\t\t\te,\n+\t\t\t\t\t\t\t\"Unable to adjust relative <jar-file/> URL [%s] relative to root URL [%s]\",\n+\t\t\t\t\t\t\tfilePart,\n+\t\t\t\t\t\t\trootUrlFile.getAbsolutePath()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1NDAyOA=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTg4NTcxOnYy", "diffSide": "LEFT", "path": "hibernate-core/src/main/java/org/hibernate/boot/model/source/internal/hbm/ModelBinder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo1MTo1N1rOGWIKug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo1MTo1N1rOGWIKug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1NTY3NA==", "bodyText": "The above pattern has two drawbacks:\n\nunnecessary string concatenation cost even the produced string is simply discarded later due to level disabling\nthe produced string might contain magic chars (i.e. %s) and will explode during runtime", "url": "https://github.com/hibernate/hibernate-orm/pull/3402#discussion_r425855674", "createdAt": "2020-05-15T14:51:57Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/boot/model/source/internal/hbm/ModelBinder.java", "diffHunk": "@@ -4221,7 +4227,7 @@ public void addAttributeBinding(Property attributeBinding) {\n \n \t\t@Override\n \t\tpublic void process() {\n-\t\t\tlog.debugf( \"Binding natural-id UniqueKey for entity : \" + entityBinding.getEntityName() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTg5OTg5OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/resource/beans/container/internal/JpaCompliantLifecycleStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo1NToyNFrOGWIT_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo1NToyNFrOGWIT_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1ODA0NA==", "bodyText": "It is still a common bug to miss format parameter. I tried the Checker Framework (https://checkerframework.org/) but it crashed when I used it on hibernate-orm, :(.", "url": "https://github.com/hibernate/hibernate-orm/pull/3402#discussion_r425858044", "createdAt": "2020-05-15T14:55:24Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/resource/beans/container/internal/JpaCompliantLifecycleStrategy.java", "diffHunk": "@@ -125,7 +125,7 @@ public void initialize() {\n \t\t\t\tthrow e;\n \t\t\t}\n \t\t\tcatch (Exception e) {\n-\t\t\t\tlog.debugf( \"Error resolving CDI bean [%s] - using fallback\" );\n+\t\t\t\tlog.debugf( \"Error resolving CDI bean [%s] - using fallback\", beanType.getName() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4005, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}