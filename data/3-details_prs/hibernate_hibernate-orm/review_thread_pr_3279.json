{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMDg1MDgw", "number": 3279, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozMTo1OFrODkGwCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozMzowM1rODkGwSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg1OTI5OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/internal/util/collections/CollectionHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozMTo1OFrOFwQAVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozMTo1OFrOFwQAVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODE5OQ==", "bodyText": "There is a bug in old implementation. Different than HashMap or HashSet, ConcurrentHashMap will perform sizing computation internally so we don't need to compute on top of that.", "url": "https://github.com/hibernate/hibernate-orm/pull/3279#discussion_r386138199", "createdAt": "2020-03-01T20:31:58Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/internal/util/collections/CollectionHelper.java", "diffHunk": "@@ -175,8 +188,7 @@ public static int determineProperSizing(int numberOfElements) {\n \t * @return The created map.\n \t */\n \tpublic static <K, V> ConcurrentHashMap<K, V> concurrentMap(int expectedNumberOfElements, float loadFactor) {\n-\t\tfinal int size = expectedNumberOfElements + 1 + (int) ( expectedNumberOfElements * loadFactor );\n-\t\treturn new ConcurrentHashMap<>( size, loadFactor );\n+\t\treturn new ConcurrentHashMap<>( expectedNumberOfElements, loadFactor );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "242e66dffdec7b86683d8852ccb1053c61a8c74e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg1OTk0OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/internal/AbstractEmbeddableRepresentationStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozMzowM1rOFwQAqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozMzowM1rOFwQAqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODI4Mg==", "bodyText": "No need to use the util method in CollectionHelper for ConcurrentHashMap constructor is enough for it will compute the size internally.", "url": "https://github.com/hibernate/hibernate-orm/pull/3279#discussion_r386138282", "createdAt": "2020-03-01T20:33:03Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/metamodel/internal/AbstractEmbeddableRepresentationStrategy.java", "diffHunk": "@@ -37,7 +38,7 @@ public AbstractEmbeddableRepresentationStrategy(\n \t\tthis.embeddableJavaTypeDescriptor = embeddableJavaTypeDescriptor;\n \n \t\tthis.propertyAccesses = new PropertyAccess[ propertySpan ];\n-\t\tthis.attributeNameToPositionMap = CollectionHelper.concurrentMap( propertySpan );\n+\t\tthis.attributeNameToPositionMap = new ConcurrentHashMap<>( propertySpan );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "242e66dffdec7b86683d8852ccb1053c61a8c74e"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4056, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}