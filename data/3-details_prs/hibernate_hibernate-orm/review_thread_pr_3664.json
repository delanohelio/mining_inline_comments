{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NDY5MDkx", "number": 3664, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo0MjoyMFrOE9WiZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo0MjoyMFrOE9WiZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzY3ODQ2OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/bytecode/enhance/spi/interceptor/LazyAttributesMetadata.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo0MjoyMFrOH5_5RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTowODowOFrOH7Jphg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3NzczMg==", "bodyText": "Just curious: what was the reason for this change?", "url": "https://github.com/hibernate/hibernate-orm/pull/3664#discussion_r530577732", "createdAt": "2020-11-25T18:42:20Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/bytecode/enhance/spi/interceptor/LazyAttributesMetadata.java", "diffHunk": "@@ -49,7 +48,7 @@ public static LazyAttributesMetadata from(\n \t\t\t\t\tproperty,\n \t\t\t\t\tisEnhanced,\n \t\t\t\t\tallowEnhancementAsProxy,\n-\t\t\t\t\tcollectionsInDefaultFetchGroupEnabled\n+\t\t\t\t\tfalse", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f0a4f2bf482d0eb2833dc801d46e655ea45434"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MjM4NQ==", "bodyText": "We have to consider attributes that are lazy from a persistence perspective, as lazy in bytecode enhancement. The flag would have caused the bytecode enhancement to see collections as part of the base fetch group which more or less means initialized. This is why the size code was triggered.\nThe whole bytecode enhancement logic is a bit of a mess in my opinion and I plan to improve this significantly in 6.0.", "url": "https://github.com/hibernate/hibernate-orm/pull/3664#discussion_r530592385", "createdAt": "2020-11-25T19:13:37Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/bytecode/enhance/spi/interceptor/LazyAttributesMetadata.java", "diffHunk": "@@ -49,7 +48,7 @@ public static LazyAttributesMetadata from(\n \t\t\t\t\tproperty,\n \t\t\t\t\tisEnhanced,\n \t\t\t\t\tallowEnhancementAsProxy,\n-\t\t\t\t\tcollectionsInDefaultFetchGroupEnabled\n+\t\t\t\t\tfalse", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3NzczMg=="}, "originalCommit": {"oid": "b2f0a4f2bf482d0eb2833dc801d46e655ea45434"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0NzMwMA==", "bodyText": "@beikov well if that's the case then that sounds like we should be rolling back my patch which added collectionsInDefaultFetchGroupEnabled in the first place! Apparently it only worked by coincidence because there was another bug.\nThe semantics of collectionsInDefaultFetchGroupEnabled was supposed to be that:\n\nthe field would be initialized, but\nthe collection wrapper would remain uninitialized and unfetched.\n\nIt was definitely not supposed to mean that the collection would be eagerly fetched.\nBut please define what you mean by \"more or less\" here.", "url": "https://github.com/hibernate/hibernate-orm/pull/3664#discussion_r530947300", "createdAt": "2020-11-26T11:01:11Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/bytecode/enhance/spi/interceptor/LazyAttributesMetadata.java", "diffHunk": "@@ -49,7 +48,7 @@ public static LazyAttributesMetadata from(\n \t\t\t\t\tproperty,\n \t\t\t\t\tisEnhanced,\n \t\t\t\t\tallowEnhancementAsProxy,\n-\t\t\t\t\tcollectionsInDefaultFetchGroupEnabled\n+\t\t\t\t\tfalse", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3NzczMg=="}, "originalCommit": {"oid": "b2f0a4f2bf482d0eb2833dc801d46e655ea45434"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3MTE3Nw==", "bodyText": "By not considering this flag here, it gets your desired semantics.\nThis part of the code determines if an attribute is considered lazy, which bytecode enhancement uses for determining whether it needs to initialize the object on access. Any attributes that are not listed as lazy are considered to be initialized. So when we access the collection then through calling size() this causes lazy initialization.", "url": "https://github.com/hibernate/hibernate-orm/pull/3664#discussion_r530971177", "createdAt": "2020-11-26T11:43:31Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/bytecode/enhance/spi/interceptor/LazyAttributesMetadata.java", "diffHunk": "@@ -49,7 +48,7 @@ public static LazyAttributesMetadata from(\n \t\t\t\t\tproperty,\n \t\t\t\t\tisEnhanced,\n \t\t\t\t\tallowEnhancementAsProxy,\n-\t\t\t\t\tcollectionsInDefaultFetchGroupEnabled\n+\t\t\t\t\tfalse", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3NzczMg=="}, "originalCommit": {"oid": "b2f0a4f2bf482d0eb2833dc801d46e655ea45434"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4NjExOA==", "bodyText": "FTR: @beikov and I chatted on the phone, and the decided that the changes related to collectionsInDefaultFetchGroupEnabled were not necessary.", "url": "https://github.com/hibernate/hibernate-orm/pull/3664#discussion_r531786118", "createdAt": "2020-11-27T21:08:08Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/bytecode/enhance/spi/interceptor/LazyAttributesMetadata.java", "diffHunk": "@@ -49,7 +48,7 @@ public static LazyAttributesMetadata from(\n \t\t\t\t\tproperty,\n \t\t\t\t\tisEnhanced,\n \t\t\t\t\tallowEnhancementAsProxy,\n-\t\t\t\t\tcollectionsInDefaultFetchGroupEnabled\n+\t\t\t\t\tfalse", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3NzczMg=="}, "originalCommit": {"oid": "b2f0a4f2bf482d0eb2833dc801d46e655ea45434"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4117, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}