{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMTExOTU5", "number": 3679, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDo0NzoxNlrOFG5ivQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDo1MjozMFrOFG5qdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzc4NTU3OnYy", "diffSide": "RIGHT", "path": "hibernate-testing/src/main/java/org/hibernate/testing/orm/junit/NotImplementedYetExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDo0NzoxNlrOIIIKZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDo0NzoxNlrOIIIKZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5MzI1Mg==", "bodyText": "This should be unique.  STORE_KEY = \"NOT_YET_IMPLEMENTED\" e.g.", "url": "https://github.com/hibernate/hibernate-orm/pull/3679#discussion_r545393252", "createdAt": "2020-12-17T20:47:16Z", "author": {"login": "sebersole"}, "path": "hibernate-testing/src/main/java/org/hibernate/testing/orm/junit/NotImplementedYetExtension.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.hibernate.testing.orm.junit;\n+\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.TestExecutionExceptionHandler;\n+\n+import org.jboss.logging.Logger;\n+\n+public class NotImplementedYetExtension\n+\t\timplements ExecutionCondition, AfterEachCallback, TestExecutionExceptionHandler {\n+\n+\tprivate static final Logger log = Logger.getLogger( NotImplementedYetExtension.class );\n+\tprivate static final String EXPECTED_FAILURE_STORE_KEY = \"EXPECTED_FAILURE\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07d8113392ca33c59559b9834b5b3bd9d0584e27"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzgwNTMzOnYy", "diffSide": "RIGHT", "path": "hibernate-testing/src/main/java/org/hibernate/testing/orm/junit/NotImplementedYetExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDo1MjozMVrOIIIVzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDo1MjozMVrOIIIVzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5NjE3Mg==", "bodyText": "Why are you disabling all tests that are not marked with this new annotation?", "url": "https://github.com/hibernate/hibernate-orm/pull/3679#discussion_r545396172", "createdAt": "2020-12-17T20:52:31Z", "author": {"login": "sebersole"}, "path": "hibernate-testing/src/main/java/org/hibernate/testing/orm/junit/NotImplementedYetExtension.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.hibernate.testing.orm.junit;\n+\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.TestExecutionExceptionHandler;\n+\n+import org.jboss.logging.Logger;\n+\n+public class NotImplementedYetExtension\n+\t\timplements ExecutionCondition, AfterEachCallback, TestExecutionExceptionHandler {\n+\n+\tprivate static final Logger log = Logger.getLogger( NotImplementedYetExtension.class );\n+\tprivate static final String EXPECTED_FAILURE_STORE_KEY = \"EXPECTED_FAILURE\";\n+\n+\t@Override\n+\tpublic void afterEach(ExtensionContext context) throws Exception {\n+\t\t// Check if the annotated element effectively logged a failure\n+\t\tThrowable throwable = context.getStore( getNamespace( context ) ).get(\n+\t\t\t\tEXPECTED_FAILURE_STORE_KEY,\n+\t\t\t\tThrowable.class\n+\t\t);\n+\t\tif ( throwable == null ) {\n+\t\t\tlog.warnf(\n+\t\t\t\t\t\"%s should have failed, but didn't; the functionality it validates may have been implemented by now\",\n+\t\t\t\t\tcontext.getDisplayName()\n+\t\t\t);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void handleTestExecutionException(ExtensionContext context, Throwable throwable) {\n+\t\tlog.debugf( \"#handleTestExecutionException(%s, %s)\", context.getDisplayName() );\n+\t\tlog.debugf( \"#Captured exception %s - ignoring it\", throwable );\n+\t\tcontext.getStore( getNamespace( context ) ).put( EXPECTED_FAILURE_STORE_KEY, throwable );\n+\t}\n+\n+\t@Override\n+\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+\t\tlog.debugf( \"#evaluateExecutionCondition(%s)\", context.getDisplayName() );\n+\n+\t\tif ( !context.getElement().isPresent() ) {\n+\t\t\tthrow new RuntimeException( \"Unable to determine how to handle given ExtensionContext : \" + context.getDisplayName() );\n+\t\t}\n+\n+\t\t// Test this in case some other annotation were extended with NotImplementedYetExtension\n+\t\tif ( !TestingUtil.hasEffectiveAnnotation( context, NotImplementedYet.class ) ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07d8113392ca33c59559b9834b5b3bd9d0584e27"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4081, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}