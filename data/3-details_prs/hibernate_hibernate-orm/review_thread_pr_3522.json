{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMjM2MTQ0", "number": 3522, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOToxMzo0NVrOEeOgtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjo0NToyNFrOEeSsig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTMwNDg2OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOToxMzo0NVrOHJw4aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjowNjoyMVrOHJ2FSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAwMDEwNQ==", "bodyText": "IMO we should instead call wrap in CompoundPredicate when adding elements.", "url": "https://github.com/hibernate/hibernate-orm/pull/3522#discussion_r480000105", "createdAt": "2020-08-31T09:13:45Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java", "diffHunk": "@@ -255,6 +255,12 @@ public Order desc(Expression<?> x) {\n \n \tpublic Predicate wrap(Expression<Boolean> expression) {\n \t\tif ( Predicate.class.isInstance( expression ) ) {\n+\t\t\tif ( CompoundPredicate.class.isInstance( expression ) ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2OTI5NA==", "bodyText": "You mean adding a new wrap method to CompoundPredicate? I did consider that but the code logic needs invoking the CriteriaBuilderImpl#wrap() recursively which makes the code difficult to read and understand. The current approach centralizes everything related to wrapping in this single method.\nAnother alternative is to add new overloading methods in the same class as following:\npublic Predicate wrap(Predicate predicate) {\n        return predicate;\n}\n\npublic Predicate wrap(CompoundPredicate compoundPredicate) {\n        final List<Expression<Boolean>> expressions = compoundPredicate.getExpressions();\n        for ( int i = 0; i < expressions.size(); i++ ) {\n\t\texpressions.set( i, wrap( expressions.get( i ) ) );\n\t}\n        return compoundPredicate;\n}\n\nThis approach seems to succeed in avoiding Class#isInstance() usage and to be a little bit more elegant, but it has downside in that the wrap method user might misuse the API. There is a good example of such misuse I encountered: jboss-logging/jboss-logging#36.", "url": "https://github.com/hibernate/hibernate-orm/pull/3522#discussion_r480069294", "createdAt": "2020-08-31T11:30:24Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java", "diffHunk": "@@ -255,6 +255,12 @@ public Order desc(Expression<?> x) {\n \n \tpublic Predicate wrap(Expression<Boolean> expression) {\n \t\tif ( Predicate.class.isInstance( expression ) ) {\n+\t\t\tif ( CompoundPredicate.class.isInstance( expression ) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAwMDEwNQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4NTMyMw==", "bodyText": "I refactored as you suggested. There is both pros and cons, but if the new public method is useful in other scenarios than CriteriaBuilderImpl, it might be worthwhile.", "url": "https://github.com/hibernate/hibernate-orm/pull/3522#discussion_r480085323", "createdAt": "2020-08-31T12:06:21Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/CriteriaBuilderImpl.java", "diffHunk": "@@ -255,6 +255,12 @@ public Order desc(Expression<?> x) {\n \n \tpublic Predicate wrap(Expression<Boolean> expression) {\n \t\tif ( Predicate.class.isInstance( expression ) ) {\n+\t\t\tif ( CompoundPredicate.class.isInstance( expression ) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAwMDEwNQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTk5MDUwOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/predicate/CompoundPredicate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjo0NToyNFrOHJ3TEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzoyMzowNlrOHJ4qzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEwNTIzNQ==", "bodyText": "Maybe it's better to do the wrapping in applyExpressions as that is the only code where expressions are added to the list.", "url": "https://github.com/hibernate/hibernate-orm/pull/3522#discussion_r480105235", "createdAt": "2020-08-31T12:45:24Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/predicate/CompoundPredicate.java", "diffHunk": "@@ -125,6 +125,13 @@ public Predicate not() {\n \t\treturn new NegatedPredicateWrapper( this );\n \t}\n \n+\tpublic void wrap() {\n+\t\tfinal CriteriaBuilderImpl criteriaBuilder = criteriaBuilder();\n+\t\tfor ( int i = 0, size = expressions.size(); i < size; i++ ) {\n+\t\t\texpressions.set( i, criteriaBuilder.wrap( expressions.get( i ) ) );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEyNzY5NQ==", "bodyText": "done. thanks.", "url": "https://github.com/hibernate/hibernate-orm/pull/3522#discussion_r480127695", "createdAt": "2020-08-31T13:23:06Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/predicate/CompoundPredicate.java", "diffHunk": "@@ -125,6 +125,13 @@ public Predicate not() {\n \t\treturn new NegatedPredicateWrapper( this );\n \t}\n \n+\tpublic void wrap() {\n+\t\tfinal CriteriaBuilderImpl criteriaBuilder = criteriaBuilder();\n+\t\tfor ( int i = 0, size = expressions.size(); i < size; i++ ) {\n+\t\t\texpressions.set( i, criteriaBuilder.wrap( expressions.get( i ) ) );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEwNTIzNQ=="}, "originalCommit": null, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4167, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}