{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MTg2ODU2", "number": 3548, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNDowODoxN1rOEi4KGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNDowODoxN1rOEi4KGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDA3MTMxOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/TwoPhaseLoad.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNDowODoxN1rOHQ8tnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNDowODoxN1rOHQ8tnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUzMzk4MA==", "bodyText": "The above one-liner is the gist of the ultimate fix. Its comment is self-explanatory.", "url": "https://github.com/hibernate/hibernate-orm/pull/3548#discussion_r487533980", "createdAt": "2020-09-13T14:08:17Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/TwoPhaseLoad.java", "diffHunk": "@@ -465,25 +428,14 @@ private static Boolean getOverridingEager(\n \t\t// Performance: check type.isCollectionType() first, as type.isAssociationType() is megamorphic\n \t\tif ( associationType.isCollectionType() || associationType.isAssociationType()  ) {\n \n-\t\t\t// check 'fetch graph' first; skip 'fetch profile' if 'fetch graph' takes effect\n-\t\t\tBoolean overridingEager = isEagerFetchGraph( session, associationName, associationType );\n-\n-\t\t\tif ( overridingEager != null ) {\n-\t\t\t\t//This method is very hot, and private so let's piggy back on the fact that the caller already knows the debugging state.\n-\t\t\t\tif ( isDebugEnabled ) {\n-\t\t\t\t\tLOG.debugf(\n-\t\t\t\t\t\t\t\"Overriding eager fetching using fetch graph. EntityName: %s, associationName: %s, eager fetching: %s\",\n-\t\t\t\t\t\t\tentityName,\n-\t\t\t\t\t\t\tassociationName,\n-\t\t\t\t\t\t\toverridingEager\n-\t\t\t\t\t);\n-\t\t\t\t}\n-\n-\t\t\t\treturn overridingEager;\n+\t\t\t// we can return false invariably for if the entity has been covered by entity graph,\n+\t\t\t// its associated JOIN has been present in the SQL generated and hence it would be loaded anyway\n+\t\t\tif ( session.isEnforcingFetchGraph() ) {\n+\t\t\t\treturn false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 161}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4183, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}