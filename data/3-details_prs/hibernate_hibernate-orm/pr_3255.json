{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDUyOTMy", "number": 3255, "title": "Wip/6.0 Wrap up verification of 'sorted-map' and 'sorted-set'", "bodyText": "Wrapped up existing testing cases for 'sorted-map' and 'sorted-set'.\nAlso ported 'org.hibernate.test.sorted' along the way. Fixed a serious Criteria bug when fixing some regression error.", "createdAt": "2020-02-21T20:10:46Z", "url": "https://github.com/hibernate/hibernate-orm/pull/3255", "merged": true, "mergeCommit": {"oid": "7ee45f68ee0d97208cb78d03dafcea7456f8a90c"}, "closed": true, "closedAt": "2020-03-09T18:48:48Z", "author": {"login": "NathanQingyangXu"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGlk4cABqjMwNjE3ODcyMzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMCgm6AFqTM3MTQ0MTA0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDM2MDMz", "url": "https://github.com/hibernate/hibernate-orm/pull/3255#pullrequestreview-363036033", "createdAt": "2020-02-22T15:58:22Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNTo1ODoyMlrOFtLuZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNTo1ODoyMlrOFtLuZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMjM0MA==", "bodyText": "An example error message I encountered went like this:\nExpected: iterable containing [\"aBC\", \"bcD\", \"cDe\", \"DeF\", \"Efg\"]\n     but: item 0: was \"abc\"", "url": "https://github.com/hibernate/hibernate-orm/pull/3255#discussion_r382922340", "createdAt": "2020-02-22T15:58:22Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/test/java/org/hibernate/orm/test/metamodel/mapping/collections/SetOperationTests.java", "diffHunk": "@@ -164,14 +168,40 @@ public void testSortedSetAccess(SessionFactoryScope scope) {\n \t\t\t\t\t// trigger the init\n \t\t\t\t\tHibernate.initialize( entity.getSortedSetOfBasics() );\n \t\t\t\t\tassertThat( entity.getSortedSetOfBasics(), InitializationCheckMatcher.isInitialized() );\n-\t\t\t\t\tassertThat( entity.getSortedSetOfBasics().size(), is( 2 ) );\n+\t\t\t\t\tassertThat( entity.getSortedSetOfBasics(), IsCollectionWithSize.hasSize( 5 ) );\n+\t\t\t\t\tassertThat( entity.getSetOfEnums(), InitializationCheckMatcher.isNotInitialized() );\n+\n+\t\t\t\t\tassertThat( entity.getSortedSetOfBasics(), IsIterableContainingInOrder.contains(\n+\t\t\t\t\t\t\t\"abc\",\n+\t\t\t\t\t\t\t\"bcd\",\n+\t\t\t\t\t\t\t\"cde\",\n+\t\t\t\t\t\t\t\"def\",\n+\t\t\t\t\t\t\t\"efg\"\n+\t\t\t\t\t) );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDM2Mjgy", "url": "https://github.com/hibernate/hibernate-orm/pull/3255#pullrequestreview-363036282", "createdAt": "2020-02-22T16:03:20Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNjowMzoyMFrOFtLvzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNjowMzoyMFrOFtLvzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMjcwMA==", "bodyText": "A common erroneous usage of assertEquals in our codebase.", "url": "https://github.com/hibernate/hibernate-orm/pull/3255#discussion_r382922700", "createdAt": "2020-02-22T16:03:20Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/test/java/org/hibernate/orm/test/sql/exec/onetoone/OneToOneWithDerivedIdentityTest.java", "diffHunk": "@@ -52,7 +52,7 @@ public void testGet() {\n \t\tinTransaction(\n \t\t\t\tsession -> {\n \t\t\t\t\tPerson person = session.get( Person.class, PERSON_ID );\n-\t\t\t\t\tassertEquals( person.getName(), \"Alfio\" );\n+\t\t\t\t\tassertEquals( \"Alfio\", person.getName() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMTI2NjYw", "url": "https://github.com/hibernate/hibernate-orm/pull/3255#pullrequestreview-363126660", "createdAt": "2020-02-23T22:16:31Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMjoxNjozMlrOFtTI-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMjoxNjozMlrOFtTI-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0MzgzMg==", "bodyText": "So the obvious bug here is we did build join but didn't add it to 'joins' field. Simple fixing.", "url": "https://github.com/hibernate/hibernate-orm/pull/3255#discussion_r383043832", "createdAt": "2020-02-23T22:16:32Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/query/sqm/tree/domain/AbstractSqmFrom.java", "diffHunk": "@@ -409,55 +409,55 @@ public SqmMapJoin joinMap(String attributeName, JoinType jt) {\n \t\t\tSqmPathSource<A> joinedPathSource,\n \t\t\tSqmJoinType joinType,\n \t\t\tboolean fetched) {\n+\t\tfinal SqmAttributeJoin sqmJoin;\n \t\tif ( joinedPathSource instanceof SingularPersistentAttribute ) {\n-\t\t\treturn buildSingularJoin(\n+\t\t\tsqmJoin = buildSingularJoin(\n \t\t\t\t\t(SingularPersistentAttribute<T,A>) joinedPathSource,\n \t\t\t\t\tjoinType,\n \t\t\t\t\tfetched\n \t\t\t);\n \t\t}\n-\n-\t\tif ( joinedPathSource instanceof BagPersistentAttribute ) {\n-\t\t\treturn buildBagJoin(\n+\t\telse if ( joinedPathSource instanceof BagPersistentAttribute ) {\n+\t\t\tsqmJoin = buildBagJoin(\n \t\t\t\t\t(BagPersistentAttribute) joinedPathSource,\n \t\t\t\t\tjoinType,\n \t\t\t\t\tfetched\n \t\t\t);\n \t\t}\n-\n-\t\tif ( joinedPathSource instanceof ListPersistentAttribute ) {\n-\t\t\treturn buildListJoin(\n+\t\telse if ( joinedPathSource instanceof ListPersistentAttribute ) {\n+\t\t\tsqmJoin = buildListJoin(\n \t\t\t\t\t(ListPersistentAttribute) joinedPathSource,\n \t\t\t\t\tjoinType,\n \t\t\t\t\tfetched\n \t\t\t);\n \t\t}\n-\n-\t\tif ( joinedPathSource instanceof MapPersistentAttribute ) {\n-\t\t\treturn buildMapJoin(\n+\t\telse if ( joinedPathSource instanceof MapPersistentAttribute ) {\n+\t\t\tsqmJoin = buildMapJoin(\n \t\t\t\t\t(MapPersistentAttribute) joinedPathSource,\n \t\t\t\t\tjoinType,\n \t\t\t\t\tfetched\n \t\t\t);\n \t\t}\n-\n-\t\tif ( joinedPathSource instanceof SetPersistentAttribute ) {\n-\t\t\treturn buildSetJoin(\n+\t\telse if ( joinedPathSource instanceof SetPersistentAttribute ) {\n+\t\t\tsqmJoin = buildSetJoin(\n \t\t\t\t\t(SetPersistentAttribute) joinedPathSource,\n \t\t\t\t\tjoinType,\n \t\t\t\t\tfetched\n \t\t\t);\n \t\t}\n-\n-\t\tthrow new IllegalArgumentException(\n-\t\t\t\tString.format(\n-\t\t\t\t\t\tLocale.ROOT,\n-\t\t\t\t\t\t\"Passed attribute [%s] did not correspond to a joinable reference [%s] relative to %s\",\n-\t\t\t\t\t\tjoinedPathSource.getPathName(),\n-\t\t\t\t\t\tjoinedPathSource,\n-\t\t\t\t\t\tgetNavigablePath().getFullPath()\n-\t\t\t\t)\n-\t\t);\n+\t\telse {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\tString.format(\n+\t\t\t\t\t\t\tLocale.ROOT,\n+\t\t\t\t\t\t\t\"Passed attribute [%s] did not correspond to a joinable reference [%s] relative to %s\",\n+\t\t\t\t\t\t\tjoinedPathSource.getPathName(),\n+\t\t\t\t\t\t\tjoinedPathSource,\n+\t\t\t\t\t\t\tgetNavigablePath().getFullPath()\n+\t\t\t\t\t)\n+\t\t\t);\n+\t\t}\n+\t\taddSqmJoin( sqmJoin );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "abceaf0cf7284331085ef55d32d5bdb6f9d8b1df", "author": {"user": {"login": "NathanQingyangXu", "name": "Nathan Xu"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/abceaf0cf7284331085ef55d32d5bdb6f9d8b1df", "committedDate": "2020-03-04T00:34:49Z", "message": "wrap up verification for both @SortedSet and @SortedMap"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "abceaf0cf7284331085ef55d32d5bdb6f9d8b1df", "author": {"user": {"login": "NathanQingyangXu", "name": "Nathan Xu"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/abceaf0cf7284331085ef55d32d5bdb6f9d8b1df", "committedDate": "2020-03-04T00:34:49Z", "message": "wrap up verification for both @SortedSet and @SortedMap"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDQxMDQ1", "url": "https://github.com/hibernate/hibernate-orm/pull/3255#pullrequestreview-371441045", "createdAt": "2020-03-09T18:48:36Z", "commit": {"oid": "abceaf0cf7284331085ef55d32d5bdb6f9d8b1df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3174, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}