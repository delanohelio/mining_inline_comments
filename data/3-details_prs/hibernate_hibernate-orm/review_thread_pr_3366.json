{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTA0NDI5", "number": 3366, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1MzowMlrOD1RNcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1OTowOVrOD1RYUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTgzMDg5OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/CollectionBinder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1MzowMlrOGKnusw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1MzowMlrOGKnusw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4OTg3NQ==", "bodyText": "The above code change is to revert back erroneous changes in some previous PR.", "url": "https://github.com/hibernate/hibernate-orm/pull/3366#discussion_r413789875", "createdAt": "2020-04-23T12:53:02Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/CollectionBinder.java", "diffHunk": "@@ -990,7 +990,7 @@ private void bindFilters(boolean hasAssociationTable) {\n \t\tif ( filterJoinTables != null ) {\n \t\t\tfor (FilterJoinTable filter : filterJoinTables.value()) {\n \t\t\t\tif ( hasAssociationTable ) {\n-\t\t\t\t\tcollection.addManyToManyFilter(filter.name(), filter.condition(),\n+\t\t\t\t\tcollection.addFilter(filter.name(), filter.condition(),\n \t\t\t\t\t\t\tfilter.deduceAliasInjectionPoints(),\n \t\t\t\t\t\t\ttoAliasTableMap(filter.aliases()), toAliasEntityMap(filter.aliases()));\n \t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336d3d739e13de22ef21722af4de60ad39f5d5b8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTg1ODczOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/loader/ast/internal/LoaderSelectBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1OTowOVrOGKn_3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1OTowOVrOGKn_3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5NDI3MA==", "bodyText": "The above change is simply to get rid of if ( loadQueryInfluencers.hasEnabledFilters() ) { for it will add @Where and @WhereJoinTable filter content as well. This is the gist of this PR.", "url": "https://github.com/hibernate/hibernate-orm/pull/3366#discussion_r413794270", "createdAt": "2020-04-23T12:59:09Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/loader/ast/internal/LoaderSelectBuilder.java", "diffHunk": "@@ -380,22 +381,20 @@ private void applyKeyRestriction(\n \t}\n \n \tprivate void applyFiltering(QuerySpec querySpec, TableGroup tableGroup, PluralAttributeMapping pluralAttributeMapping) {\n-\t\tif ( loadQueryInfluencers.hasEnabledFilters() ) {\n-\t\t\tfinal Joinable joinable = pluralAttributeMapping\n-\t\t\t\t\t.getCollectionDescriptor()\n-\t\t\t\t\t.getCollectionType()\n-\t\t\t\t\t.getAssociatedJoinable( creationContext.getSessionFactory() );\n-\t\t\tassert joinable instanceof AbstractCollectionPersister;\n-\t\t\tfinal String tableExpression = joinable.getTableName();\n-\t\t\tfinal String tableAlias = tableGroup.resolveTableReference( tableExpression ).getIdentificationVariable();\n-\t\t\tfinal Predicate filterPredicate = FilterHelper.createFilterPredicate(\n-\t\t\t\t\tloadQueryInfluencers,\n-\t\t\t\t\tjoinable,\n-\t\t\t\t\ttableAlias\n-\t\t\t);\n-\t\t\tif ( filterPredicate != null ) {\n-\t\t\t\tquerySpec.applyPredicate( filterPredicate );\n-\t\t\t}\n+\t\tfinal Joinable joinable = pluralAttributeMapping\n+\t\t\t\t.getCollectionDescriptor()\n+\t\t\t\t.getCollectionType()\n+\t\t\t\t.getAssociatedJoinable( creationContext.getSessionFactory() );\n+\t\tassert joinable instanceof AbstractCollectionPersister;\n+\t\tfinal String tableExpression = joinable.getTableName();\n+\t\tfinal String tableAlias = tableGroup.resolveTableReference( tableExpression ).getIdentificationVariable();\n+\t\tfinal Predicate filterPredicate = FilterHelper.createFilterPredicate(\n+\t\t\t\tloadQueryInfluencers,\n+\t\t\t\tjoinable,\n+\t\t\t\ttableAlias\n+\t\t);\n+\t\tif ( filterPredicate != null ) {\n+\t\t\tquerySpec.applyPredicate( filterPredicate );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336d3d739e13de22ef21722af4de60ad39f5d5b8"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3990, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}