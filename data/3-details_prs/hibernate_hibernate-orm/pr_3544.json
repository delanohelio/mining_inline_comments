{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNjcxNjk0", "number": 3544, "title": "HHH-14208 simplify example naming strategy code in user guide", "bodyText": "https://hibernate.atlassian.net/browse/HHH-14208\nThe gist of the PR is to improve the example naming strategy code in user guide. The resulting code snippet becomes much more concise and condense, serving better to convey the key idea of naming strategy usage.\nThe previous code snippet has 87 LOC; after the simplification, only 46 LOC remains. Also, it makes the code easier to understand without irrelevant and distracting content.", "createdAt": "2020-09-07T22:51:42Z", "url": "https://github.com/hibernate/hibernate-orm/pull/3544", "merged": true, "mergeCommit": {"oid": "97ea1d853d3e7c76c3aa6c985b38c1d63cbca437"}, "closed": true, "closedAt": "2020-09-09T05:58:19Z", "author": {"login": "NathanQingyangXu"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGrAacgH2gAyNDgxNjcxNjk0OjQ3M2Q4NjJkNzlmNDQ0YmFjY2M0ODRhMDU3YmIzY2FjZTU0ZjI1ZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdGrLVqgFqTQ4MzcyMjM3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "473d862d79f444baccc484a057bb3cace54f25ea", "author": {"user": {"login": "NathanQingyangXu", "name": "Nathan Xu"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/473d862d79f444baccc484a057bb3cace54f25ea", "committedDate": "2020-09-07T22:47:09Z", "message": "HHH-14208 simplify example naming strategy code in user guide"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzIyMTE4", "url": "https://github.com/hibernate/hibernate-orm/pull/3544#pullrequestreview-483722118", "createdAt": "2020-09-07T22:56:40Z", "commit": {"oid": "473d862d79f444baccc484a057bb3cace54f25ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMjo1Njo0MFrOHOIf4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMjo1Njo0MFrOHOIf4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4MTM0Ng==", "bodyText": "part is never null; check the Javadoc for details", "url": "https://github.com/hibernate/hibernate-orm/pull/3544#discussion_r484581346", "createdAt": "2020-09-07T22:56:40Z", "author": {"login": "NathanQingyangXu"}, "path": "documentation/src/test/java/org/hibernate/userguide/naming/AcmeCorpPhysicalNamingStrategy.java", "diffHunk": "@@ -69,50 +65,15 @@ public Identifier toPhysicalSequenceName(Identifier name, JdbcEnvironment jdbcEn\n \tpublic Identifier toPhysicalColumnName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n \t\tfinal List<String> parts = splitAndReplace( name.getText() );\n \t\treturn jdbcEnvironment.getIdentifierHelper().toIdentifier(\n-\t\t\t\tjoin( parts ),\n+\t\t\t\tStringUtils.join( parts, '_' ),\n \t\t\t\tname.isQuoted()\n \t\t);\n \t}\n \n-\tprivate static Map<String, String> buildAbbreviationMap() {\n-\t\tTreeMap<String,String> abbreviationMap = new TreeMap<> ( String.CASE_INSENSITIVE_ORDER );\n-\t\tabbreviationMap.put( \"account\", \"acct\" );\n-\t\tabbreviationMap.put( \"number\", \"num\" );\n-\t\treturn abbreviationMap;\n-\t}\n-\n-\tprivate LinkedList<String> splitAndReplace(String name) {\n-\t\tLinkedList<String> result = new LinkedList<>();\n-\t\tfor ( String part : StringUtils.splitByCharacterTypeCamelCase( name ) ) {\n-\t\t\tif ( part == null || part.trim().isEmpty() ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473d862d79f444baccc484a057bb3cace54f25ea"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzIyMjI4", "url": "https://github.com/hibernate/hibernate-orm/pull/3544#pullrequestreview-483722228", "createdAt": "2020-09-07T22:57:45Z", "commit": {"oid": "473d862d79f444baccc484a057bb3cace54f25ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMjo1Nzo0NVrOHOIgVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMjo1Nzo0NVrOHOIgVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4MTQ2Mw==", "bodyText": "parts have been normalized to lowercase, so equals is enough.", "url": "https://github.com/hibernate/hibernate-orm/pull/3544#discussion_r484581463", "createdAt": "2020-09-07T22:57:45Z", "author": {"login": "NathanQingyangXu"}, "path": "documentation/src/test/java/org/hibernate/userguide/naming/AcmeCorpPhysicalNamingStrategy.java", "diffHunk": "@@ -27,40 +28,35 @@\n  * Additionally standards call for the replacement of certain words with abbreviations.\n  *\n  * @author Steve Ebersole\n+ * @author Nathan Xu\n  */\n-public class AcmeCorpPhysicalNamingStrategy implements PhysicalNamingStrategy {\n-\tprivate static final Map<String,String> ABBREVIATIONS = buildAbbreviationMap();\n+public class AcmeCorpPhysicalNamingStrategy extends PhysicalNamingStrategyStandardImpl {\n+\tprivate static final Map<String, String> ABBREVIATIONS;\n \n-\t@Override\n-\tpublic Identifier toPhysicalCatalogName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n-\t\t// Acme naming standards do not apply to catalog names\n-\t\treturn name;\n-\t}\n-\n-\t@Override\n-\tpublic Identifier toPhysicalSchemaName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n-\t\t// Acme naming standards do not apply to schema names\n-\t\treturn name;\n+\tstatic {\n+\t\tABBREVIATIONS = new TreeMap<>( String.CASE_INSENSITIVE_ORDER );\n+\t\tABBREVIATIONS.put( \"account\", \"acct\" );\n+\t\tABBREVIATIONS.put( \"number\", \"num\" );\n \t}\n \n \t@Override\n \tpublic Identifier toPhysicalTableName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n \t\tfinal List<String> parts = splitAndReplace( name.getText() );\n \t\treturn jdbcEnvironment.getIdentifierHelper().toIdentifier(\n-\t\t\t\tjoin( parts ),\n+\t\t\t\tStringUtils.join( parts, '_' ),\n \t\t\t\tname.isQuoted()\n \t\t);\n \t}\n \n \t@Override\n \tpublic Identifier toPhysicalSequenceName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n-\t\tfinal LinkedList<String> parts = splitAndReplace( name.getText() );\n+\t\tfinal List<String> parts = splitAndReplace( name.getText() );\n \t\t// Acme Corp says all sequences should end with _seq\n-\t\tif ( !\"seq\".equalsIgnoreCase( parts.getLast() ) ) {\n+\t\tif ( !\"seq\".equals( parts.get( parts.size() - 1 ) ) ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473d862d79f444baccc484a057bb3cace54f25ea"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzIyMzc4", "url": "https://github.com/hibernate/hibernate-orm/pull/3544#pullrequestreview-483722378", "createdAt": "2020-09-07T22:59:04Z", "commit": {"oid": "473d862d79f444baccc484a057bb3cace54f25ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMjo1OTowNVrOHOIg8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMjo1OTowNVrOHOIg8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU4MTYxOA==", "bodyText": "The usage of JDK stream here is to make the code easier to understand and let user guide reader focus more on the key issue, i.e. naming strategy.", "url": "https://github.com/hibernate/hibernate-orm/pull/3544#discussion_r484581618", "createdAt": "2020-09-07T22:59:05Z", "author": {"login": "NathanQingyangXu"}, "path": "documentation/src/test/java/org/hibernate/userguide/naming/AcmeCorpPhysicalNamingStrategy.java", "diffHunk": "@@ -69,50 +65,15 @@ public Identifier toPhysicalSequenceName(Identifier name, JdbcEnvironment jdbcEn\n \tpublic Identifier toPhysicalColumnName(Identifier name, JdbcEnvironment jdbcEnvironment) {\n \t\tfinal List<String> parts = splitAndReplace( name.getText() );\n \t\treturn jdbcEnvironment.getIdentifierHelper().toIdentifier(\n-\t\t\t\tjoin( parts ),\n+\t\t\t\tStringUtils.join( parts, '_' ),\n \t\t\t\tname.isQuoted()\n \t\t);\n \t}\n \n-\tprivate static Map<String, String> buildAbbreviationMap() {\n-\t\tTreeMap<String,String> abbreviationMap = new TreeMap<> ( String.CASE_INSENSITIVE_ORDER );\n-\t\tabbreviationMap.put( \"account\", \"acct\" );\n-\t\tabbreviationMap.put( \"number\", \"num\" );\n-\t\treturn abbreviationMap;\n-\t}\n-\n-\tprivate LinkedList<String> splitAndReplace(String name) {\n-\t\tLinkedList<String> result = new LinkedList<>();\n-\t\tfor ( String part : StringUtils.splitByCharacterTypeCamelCase( name ) ) {\n-\t\t\tif ( part == null || part.trim().isEmpty() ) {\n-\t\t\t\t// skip null and space\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\tpart = applyAbbreviationReplacement( part );\n-\t\t\tresult.add( part.toLowerCase( Locale.ROOT ) );\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\tprivate String applyAbbreviationReplacement(String word) {\n-\t\tif ( ABBREVIATIONS.containsKey( word ) ) {\n-\t\t\treturn ABBREVIATIONS.get( word );\n-\t\t}\n-\n-\t\treturn word;\n-\t}\n-\n-\tprivate String join(List<String> parts) {\n-\t\tboolean firstPass = true;\n-\t\tString separator = \"\";\n-\t\tStringBuilder joined = new StringBuilder();\n-\t\tfor ( String part : parts ) {\n-\t\t\tjoined.append( separator ).append( part );\n-\t\t\tif ( firstPass ) {\n-\t\t\t\tfirstPass = false;\n-\t\t\t\tseparator = \"_\";\n-\t\t\t}\n-\t\t}\n-\t\treturn joined.toString();\n+\tprivate List<String> splitAndReplace(String name) {\n+\t\treturn Arrays.stream( StringUtils.splitByCharacterTypeCamelCase( name ) )\n+\t\t\t\t.filter( StringUtils::isNotBlank )\n+\t\t\t\t.map( p -> ABBREVIATIONS.getOrDefault( p, p ).toLowerCase( Locale.ROOT ) )\n+\t\t\t\t.collect( Collectors.toList() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473d862d79f444baccc484a057bb3cace54f25ea"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2910, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}