{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1Nzg3NjQ5", "number": 3393, "title": "wip/6.0 Replace 'AtomicInteger' with 'MutableInteger' in single thread scenario", "bodyText": "There seems to be an established pattern to use AtomicInteger as a convenient class of mutable integer container, regardless of whether it is used in single thread scenario (e.g. within method as a temporary variable without being exposed externally) or not. That is a misuse or sloppiness for we have to pay the performance cost of concurrency safety unnecessarily.\nLuckily, in some recent PR by Andrea, a more appropriate substitute has been committed: MutableInteger.\nBelow is the jmh benchmark result between AtomicInteger and MutableInteger when it comes to increasing by 1:\nBenchmark                Mode  Cnt   Score     Error    Units\nbenchmarkAtomicInteger   avgt   5       13.143 \u00b1 6.360  ns/op\nbenchmarkMutableInteger  avgt   5       0.399 \u00b1 0.045   ns/op\n\nIt is a simple fact that MutableInteger is much much quicker!\nThis is the simple jmh benchmark methods:\n    @Benchmark\n    @BenchmarkMode(Mode.AverageTime)\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n    public void benchmarkAtomicInteger() {\n        AtomicInteger counter = new AtomicInteger();\n        int val = counter.incrementAndGet();\n    }\n\n    @Benchmark\n    @BenchmarkMode(Mode.AverageTime)\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n    public void benchmarkMutableInteger() {\n        MutableInteger counter = new MutableInteger();\n        int val = counter.getAndIncrement();\n    }\n\nAnother common performance optimization is we can use new AtomicInteger() in lieu of new AtomicInteger( 0 ). Jmh proves that the performance difference is significant:\nBenchmark                                 Mode  Cnt   Score    Error  Units\nbenchmarkAtomicIntegerDefaultConstructor  avgt    5  15.199 \u00b1 13.034  ns/op\nbenchmarkAtomicIntegerExplicitConstructor avgt    5  35.029 \u00b1 88.696  ns/op\n\n    @Benchmark\n    @BenchmarkMode(Mode.AverageTime)\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n    public void benchmarkAtomicIntegerDefaultConstructor() {\n        AtomicInteger counter = new AtomicInteger();\n        int val = counter.incrementAndGet();\n    }\n\n    @Benchmark\n    @BenchmarkMode(Mode.AverageTime)\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n    public void benchmarkAtomicIntegerExplicitConstructor() {\n        AtomicInteger counter = new AtomicInteger( 0 );\n        int val = counter.incrementAndGet();\n    }", "createdAt": "2020-05-10T22:00:38Z", "url": "https://github.com/hibernate/hibernate-orm/pull/3393", "merged": true, "mergeCommit": {"oid": "5c11778032f31aad8e75e5b262d6ef75543781ef"}, "closed": true, "closedAt": "2020-05-11T08:48:16Z", "author": {"login": "NathanQingyangXu"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgCPOfAH2gAyNDE1Nzg3NjQ5OjVjMTE3NzgwMzJmMzFhYWQ4ZTc1ZTViMjYyZDZlZjc1NTQzNzgxZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgCbwPgFqTQwODc4NTc0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5c11778032f31aad8e75e5b262d6ef75543781ef", "author": {"user": {"login": "NathanQingyangXu", "name": "Nathan Xu"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/5c11778032f31aad8e75e5b262d6ef75543781ef", "committedDate": "2020-05-10T21:48:06Z", "message": "replace 'AtomicInteger' with 'MutableInteger' in single thread scenario"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Nzg1NzQ5", "url": "https://github.com/hibernate/hibernate-orm/pull/3393#pullrequestreview-408785749", "createdAt": "2020-05-10T22:01:47Z", "commit": {"oid": "5c11778032f31aad8e75e5b262d6ef75543781ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMjowMTo0N1rOGTH9Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMjowMTo0N1rOGTH9Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwNjUwMg==", "bodyText": "I created this util class for 'long' case. Currently it is not used but it might be useful in the future.", "url": "https://github.com/hibernate/hibernate-orm/pull/3393#discussion_r422706502", "createdAt": "2020-05-10T22:01:47Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/internal/util/MutableLong.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later\n+ * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html\n+ */\n+package org.hibernate.internal.util;\n+\n+public class MutableLong {\n+\tprivate long value;\n+\n+\tpublic MutableLong() {\n+\t}\n+\n+\tpublic MutableLong(long value) {\n+\t\tthis.value = value;\n+\t}\n+\n+\tpublic MutableLong deepCopy() {\n+\t\treturn new MutableLong( value );\n+\t}\n+\n+\tpublic long getAndIncrement() {\n+\t\treturn value++;\n+\t}\n+\n+\tpublic long incrementAndGet() {\n+\t\treturn ++value;\n+\t}\n+\n+\tpublic long get() {\n+\t\treturn value;\n+\t}\n+\n+\tpublic void set(long value) {\n+\t\tthis.value = value;\n+\t}\n+\n+\tpublic void increase() {\n+\t\t++value;\n+\t}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c11778032f31aad8e75e5b262d6ef75543781ef"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3083, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}