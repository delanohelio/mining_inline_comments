{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NjAzNDc3", "number": 3204, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjoxNDo0MVrODcSOUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzoyNToyOVrODcTeZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTg1Mjk4OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjoxNDo0MVrOFkQW8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo1OToyMFrOFrvddA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU2MTA3Mg==", "bodyText": "This is against the Quarkus mandate that thou shall not read annotations at runtime.  Just saying", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r373561072", "createdAt": "2020-01-31T16:14:41Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -225,6 +225,22 @@ protected Dialect() {\n \t\tdefaultSizeStrategy = new DefaultSizeStrategyImpl();\n \t}\n \n+\tprivate void logDeprecation() {\n+\t\tLOG.usingDialect( this );\n+\n+\t\tClass<? extends Dialect> dialect = getClass();\n+\t\tif ( dialect.isAnnotationPresent(Deprecated.class) ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU2NzgzNg==", "bodyText": "Yeah I wondered about that... but this warning isn't necessary in Quarkus, so perhaps it doesn't matter?", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r373567836", "createdAt": "2020-01-31T16:27:51Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -225,6 +225,22 @@ protected Dialect() {\n \t\tdefaultSizeStrategy = new DefaultSizeStrategyImpl();\n \t}\n \n+\tprivate void logDeprecation() {\n+\t\tLOG.usingDialect( this );\n+\n+\t\tClass<? extends Dialect> dialect = getClass();\n+\t\tif ( dialect.isAnnotationPresent(Deprecated.class) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU2MTA3Mg=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU3MjAwMg==", "bodyText": "The warning is not, but the isAnnotationPresent would still happen.  I don't necessarily care, just pointing it out", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r373572002", "createdAt": "2020-01-31T16:36:01Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -225,6 +225,22 @@ protected Dialect() {\n \t\tdefaultSizeStrategy = new DefaultSizeStrategyImpl();\n \t}\n \n+\tprivate void logDeprecation() {\n+\t\tLOG.usingDialect( this );\n+\n+\t\tClass<? extends Dialect> dialect = getClass();\n+\t\tif ( dialect.isAnnotationPresent(Deprecated.class) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU2MTA3Mg=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMwNjA1OQ==", "bodyText": "@Sanne what do you think here?", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r381306059", "createdAt": "2020-02-19T13:58:44Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -225,6 +225,22 @@ protected Dialect() {\n \t\tdefaultSizeStrategy = new DefaultSizeStrategyImpl();\n \t}\n \n+\tprivate void logDeprecation() {\n+\t\tLOG.usingDialect( this );\n+\n+\t\tClass<? extends Dialect> dialect = getClass();\n+\t\tif ( dialect.isAnnotationPresent(Deprecated.class) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU2MTA3Mg=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxNzQ5OQ==", "bodyText": "Currently the constructor of Dialect is somethign which is not invoked at runtime, so this shouldn't be a problem.\nI do wonder though if this method isn't better off to be invoked explicitly from the Dialect factory, rather than being a side effect of the constructor - I believe that would give us some more flexibility regarding wanting such a check to happen.", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r381317499", "createdAt": "2020-02-19T14:17:29Z", "author": {"login": "Sanne"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -225,6 +225,22 @@ protected Dialect() {\n \t\tdefaultSizeStrategy = new DefaultSizeStrategyImpl();\n \t}\n \n+\tprivate void logDeprecation() {\n+\t\tLOG.usingDialect( this );\n+\n+\t\tClass<? extends Dialect> dialect = getClass();\n+\t\tif ( dialect.isAnnotationPresent(Deprecated.class) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU2MTA3Mg=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzNDY0NQ==", "bodyText": "Personally I like the \"do this in DialectFactory\" approach better, but if its not a problem for Quarkus then its not a big deal to me.", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r381334645", "createdAt": "2020-02-19T14:42:42Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -225,6 +225,22 @@ protected Dialect() {\n \t\tdefaultSizeStrategy = new DefaultSizeStrategyImpl();\n \t}\n \n+\tprivate void logDeprecation() {\n+\t\tLOG.usingDialect( this );\n+\n+\t\tClass<? extends Dialect> dialect = getClass();\n+\t\tif ( dialect.isAnnotationPresent(Deprecated.class) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU2MTA3Mg=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwOTk5NA==", "bodyText": "I'm perfectly happy to do it in DialectFactory, my only minor concern would be is that if some people have code where they instantiate their Dialect directly, outside of the DialectFactory infrastructure, then they might not get the warning. On the other hand, if they're doing that, then I guess they would get a compilation warning in their code. So that's probably good enough.", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r381409994", "createdAt": "2020-02-19T16:58:24Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -225,6 +225,22 @@ protected Dialect() {\n \t\tdefaultSizeStrategy = new DefaultSizeStrategyImpl();\n \t}\n \n+\tprivate void logDeprecation() {\n+\t\tLOG.usingDialect( this );\n+\n+\t\tClass<? extends Dialect> dialect = getClass();\n+\t\tif ( dialect.isAnnotationPresent(Deprecated.class) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU2MTA3Mg=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQxMDY3Ng==", "bodyText": "(Let me know what you guys think and I'll make the change if that's what you prefer.)", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r381410676", "createdAt": "2020-02-19T16:59:20Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -225,6 +225,22 @@ protected Dialect() {\n \t\tdefaultSizeStrategy = new DefaultSizeStrategyImpl();\n \t}\n \n+\tprivate void logDeprecation() {\n+\t\tLOG.usingDialect( this );\n+\n+\t\tClass<? extends Dialect> dialect = getClass();\n+\t\tif ( dialect.isAnnotationPresent(Deprecated.class) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU2MTA3Mg=="}, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTg1ODA1OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjoxNjoxNVrOFkQaBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxMDozNzoxMFrOFkdSPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU2MTg2Mg==", "bodyText": "I don't think the separate method does anything here; just move that code inline.  Or at least name the method better - it does not just log deprecations", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r373561862", "createdAt": "2020-01-31T16:16:15Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -136,7 +136,7 @@\n \t// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n \tprotected Dialect() {\n-\t\tLOG.usingDialect( this );\n+\t\tlogDeprecation();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3Mjg2MQ==", "bodyText": "I renamed it.", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r373772861", "createdAt": "2020-02-01T10:37:10Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -136,7 +136,7 @@\n \t// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n \tprotected Dialect() {\n-\t\tLOG.usingDialect( this );\n+\t\tlogDeprecation();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU2MTg2Mg=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDA1Nzk2OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/internal/log/DeprecationLogger.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzoyNToyOVrOFkSYVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo0MzoyOVrOFrq2gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NDE5OA==", "bodyText": "I'm surprised this even compiles for you. These ids need to be unique.  The JBoss Logging AP checks that during compile", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r373594198", "createdAt": "2020-01-31T17:25:29Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/internal/log/DeprecationLogger.java", "diffHunk": "@@ -249,4 +249,15 @@ void connectionProviderClassDeprecated(\n \t\t\t\t\t\"5.3 in upgrading.  It will be removed in a later version.\"\n \t)\n \tvoid logUseOfDeprecatedZeroBasedJdbcStyleParams();\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated\",\n+\t\t\tid = 90000025)\n+\tvoid deprecatedDialect(String dialect);\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated; use %s instead\",\n+\t\t\tid = 90000025)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwNzE3NA==", "bodyText": "Haha OK sorry I pushed super quickly as I was running out the door.", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r373607174", "createdAt": "2020-01-31T17:56:19Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/internal/log/DeprecationLogger.java", "diffHunk": "@@ -249,4 +249,15 @@ void connectionProviderClassDeprecated(\n \t\t\t\t\t\"5.3 in upgrading.  It will be removed in a later version.\"\n \t)\n \tvoid logUseOfDeprecatedZeroBasedJdbcStyleParams();\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated\",\n+\t\t\tid = 90000025)\n+\tvoid deprecatedDialect(String dialect);\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated; use %s instead\",\n+\t\t\tid = 90000025)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NDE5OA=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY3ODUxMw==", "bodyText": "Hrm, strange, for me it compiles and no tests fail.\nPerhaps the ids don't need to be unique when you have an overloaded method name like what I have here?\nOr perhaps I'm doing something wrong?\nInvestigating...", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r373678513", "createdAt": "2020-01-31T20:47:53Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/internal/log/DeprecationLogger.java", "diffHunk": "@@ -249,4 +249,15 @@ void connectionProviderClassDeprecated(\n \t\t\t\t\t\"5.3 in upgrading.  It will be removed in a later version.\"\n \t)\n \tvoid logUseOfDeprecatedZeroBasedJdbcStyleParams();\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated\",\n+\t\t\tid = 90000025)\n+\tvoid deprecatedDialect(String dialect);\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated; use %s instead\",\n+\t\t\tid = 90000025)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NDE5OA=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY3OTkzOQ==", "bodyText": "Seems to work perfectly:\nWARN: HHH90000025: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead\n\nAnyway, @sebersole I'm perfectly happy to give them two different ids, I gave them the same id only because I figured that the represented the same problem (use of a deprecated Dialect).\nYour call.", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r373679939", "createdAt": "2020-01-31T20:52:12Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/internal/log/DeprecationLogger.java", "diffHunk": "@@ -249,4 +249,15 @@ void connectionProviderClassDeprecated(\n \t\t\t\t\t\"5.3 in upgrading.  It will be removed in a later version.\"\n \t)\n \tvoid logUseOfDeprecatedZeroBasedJdbcStyleParams();\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated\",\n+\t\t\tid = 90000025)\n+\tvoid deprecatedDialect(String dialect);\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated; use %s instead\",\n+\t\t\tid = 90000025)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NDE5OA=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMwNTYwMA==", "bodyText": "Maybe it does account for overloaded names, not sure.  I agree it is the same underlying issue and would be nice to reuse the same message id.  Just thought that was not allowed (I know its not in other cases).\n@dmlloyd Any thoughts on this?  Thanks", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r381305600", "createdAt": "2020-02-19T13:58:06Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/internal/log/DeprecationLogger.java", "diffHunk": "@@ -249,4 +249,15 @@ void connectionProviderClassDeprecated(\n \t\t\t\t\t\"5.3 in upgrading.  It will be removed in a later version.\"\n \t)\n \tvoid logUseOfDeprecatedZeroBasedJdbcStyleParams();\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated\",\n+\t\t\tid = 90000025)\n+\tvoid deprecatedDialect(String dialect);\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated; use %s instead\",\n+\t\t\tid = 90000025)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NDE5OA=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxMDI0OQ==", "bodyText": "Overloading is OK if both messages pertain to the \"same\" thing.  The definition of \"same\" is a bit hazy but IMO this case would qualify.\nIIRC overloading the same ID is allowed by the tooling as long as the method name matches as well.", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r381310249", "createdAt": "2020-02-19T14:05:34Z", "author": {"login": "dmlloyd"}, "path": "hibernate-core/src/main/java/org/hibernate/internal/log/DeprecationLogger.java", "diffHunk": "@@ -249,4 +249,15 @@ void connectionProviderClassDeprecated(\n \t\t\t\t\t\"5.3 in upgrading.  It will be removed in a later version.\"\n \t)\n \tvoid logUseOfDeprecatedZeroBasedJdbcStyleParams();\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated\",\n+\t\t\tid = 90000025)\n+\tvoid deprecatedDialect(String dialect);\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated; use %s instead\",\n+\t\t\tid = 90000025)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NDE5OA=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzMjIxOQ==", "bodyText": "Awesome to know.  Thanks @dmlloyd !", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r381332219", "createdAt": "2020-02-19T14:39:09Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/internal/log/DeprecationLogger.java", "diffHunk": "@@ -249,4 +249,15 @@ void connectionProviderClassDeprecated(\n \t\t\t\t\t\"5.3 in upgrading.  It will be removed in a later version.\"\n \t)\n \tvoid logUseOfDeprecatedZeroBasedJdbcStyleParams();\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated\",\n+\t\t\tid = 90000025)\n+\tvoid deprecatedDialect(String dialect);\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated; use %s instead\",\n+\t\t\tid = 90000025)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NDE5OA=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzNTE3MA==", "bodyText": "Awesome to know.  Thanks @dmlloyd", "url": "https://github.com/hibernate/hibernate-orm/pull/3204#discussion_r381335170", "createdAt": "2020-02-19T14:43:29Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/internal/log/DeprecationLogger.java", "diffHunk": "@@ -249,4 +249,15 @@ void connectionProviderClassDeprecated(\n \t\t\t\t\t\"5.3 in upgrading.  It will be removed in a later version.\"\n \t)\n \tvoid logUseOfDeprecatedZeroBasedJdbcStyleParams();\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated\",\n+\t\t\tid = 90000025)\n+\tvoid deprecatedDialect(String dialect);\n+\n+\t@LogMessage(level = WARN)\n+\t@Message(value = \"%s has been deprecated; use %s instead\",\n+\t\t\tid = 90000025)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NDE5OA=="}, "originalCommit": null, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4076, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}