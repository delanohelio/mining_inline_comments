{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODE4NjE4", "number": 3481, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzoyOToyNFrOERi-kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzoyOToyNFrOERi-kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODM0MzIyOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/hql/internal/ast/util/JoinProcessor.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzoyOToyNFrOG2UgmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODozNTozMlrOG2WzoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxMjMxMg==", "bodyText": "@beikov so I have a question for you. It seems the logic fix is to include joins whenever there is where clause, but is there such possibility that the where clause can be found in child entity per se so we don't need to bother joining? Could we tell whether the joining is really necessary?", "url": "https://github.com/hibernate/hibernate-orm/pull/3481#discussion_r459612312", "createdAt": "2020-07-23T17:29:24Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/hql/internal/ast/util/JoinProcessor.java", "diffHunk": "@@ -142,6 +142,14 @@ public static JoinType toHibernateJoinType(int astJoinType) {\n \t\t\tif ( role != null ) {\n \t\t\t\tresult.add( fromElement.getOrigin().getPropertyTableName(role.substring(role.lastIndexOf('.') + 1)) );\n \t\t\t}\n+\t\t\tfinal EntityPersister entityPersister = fromElement.getEntityPersister();\n+\t\t\tif ( entityPersister instanceof AbstractEntityPersister ) {\n+\t\t\t\tAbstractEntityPersister aep = (AbstractEntityPersister) entityPersister;\n+\t\t\t\twhile ( !aep.filterFragment( \"\", Collections.emptyMap() ).isEmpty() && aep.getMappedSuperclass() != null ) {\n+\t\t\t\t\tCollections.addAll( result, aep.getTableNames() );\n+\t\t\t\t\taep = (AbstractEntityPersister) walker.getSessionFactoryHelper().findEntityPersisterByName( aep.getMappedSuperclass() );\n+\t\t\t\t}\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dce416c23e1a2cabc7d7192df99a76d8785bd00a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNjIyMA==", "bodyText": "We don't know the structure of the @Where condition, so we can't check if the columns that are used in it are part of a specific table. Apart from that, I am also not sure if we could theoretically skip an intermediate join when e.g. A3 extends A2 extends A1, I guess the join condition to for adding A1 is based on columns of A2, so even if A2 is not used, we could not drop that table join if A1 defines a @Where condition.\nThis is IMO the best we can do", "url": "https://github.com/hibernate/hibernate-orm/pull/3481#discussion_r459626220", "createdAt": "2020-07-23T17:53:24Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/hql/internal/ast/util/JoinProcessor.java", "diffHunk": "@@ -142,6 +142,14 @@ public static JoinType toHibernateJoinType(int astJoinType) {\n \t\t\tif ( role != null ) {\n \t\t\t\tresult.add( fromElement.getOrigin().getPropertyTableName(role.substring(role.lastIndexOf('.') + 1)) );\n \t\t\t}\n+\t\t\tfinal EntityPersister entityPersister = fromElement.getEntityPersister();\n+\t\t\tif ( entityPersister instanceof AbstractEntityPersister ) {\n+\t\t\t\tAbstractEntityPersister aep = (AbstractEntityPersister) entityPersister;\n+\t\t\t\twhile ( !aep.filterFragment( \"\", Collections.emptyMap() ).isEmpty() && aep.getMappedSuperclass() != null ) {\n+\t\t\t\t\tCollections.addAll( result, aep.getTableNames() );\n+\t\t\t\t\taep = (AbstractEntityPersister) walker.getSessionFactoryHelper().findEntityPersisterByName( aep.getMappedSuperclass() );\n+\t\t\t\t}\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxMjMxMg=="}, "originalCommit": {"oid": "dce416c23e1a2cabc7d7192df99a76d8785bd00a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNTc2OQ==", "bodyText": "Thanks for the explanation. Hopefully v6 can be smarter on this.", "url": "https://github.com/hibernate/hibernate-orm/pull/3481#discussion_r459635769", "createdAt": "2020-07-23T18:10:09Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/hql/internal/ast/util/JoinProcessor.java", "diffHunk": "@@ -142,6 +142,14 @@ public static JoinType toHibernateJoinType(int astJoinType) {\n \t\t\tif ( role != null ) {\n \t\t\t\tresult.add( fromElement.getOrigin().getPropertyTableName(role.substring(role.lastIndexOf('.') + 1)) );\n \t\t\t}\n+\t\t\tfinal EntityPersister entityPersister = fromElement.getEntityPersister();\n+\t\t\tif ( entityPersister instanceof AbstractEntityPersister ) {\n+\t\t\t\tAbstractEntityPersister aep = (AbstractEntityPersister) entityPersister;\n+\t\t\t\twhile ( !aep.filterFragment( \"\", Collections.emptyMap() ).isEmpty() && aep.getMappedSuperclass() != null ) {\n+\t\t\t\t\tCollections.addAll( result, aep.getTableNames() );\n+\t\t\t\t\taep = (AbstractEntityPersister) walker.getSessionFactoryHelper().findEntityPersisterByName( aep.getMappedSuperclass() );\n+\t\t\t\t}\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxMjMxMg=="}, "originalCommit": {"oid": "dce416c23e1a2cabc7d7192df99a76d8785bd00a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NDE2Ng==", "bodyText": "We'd need to parse the SQL the user provides and I'm not sure this can be done perfectly in general, although we seem to do it already somehow because the column is prefixed properly with the table alias, so maybe there might be a way to do it right now also.", "url": "https://github.com/hibernate/hibernate-orm/pull/3481#discussion_r459644166", "createdAt": "2020-07-23T18:25:05Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/hql/internal/ast/util/JoinProcessor.java", "diffHunk": "@@ -142,6 +142,14 @@ public static JoinType toHibernateJoinType(int astJoinType) {\n \t\t\tif ( role != null ) {\n \t\t\t\tresult.add( fromElement.getOrigin().getPropertyTableName(role.substring(role.lastIndexOf('.') + 1)) );\n \t\t\t}\n+\t\t\tfinal EntityPersister entityPersister = fromElement.getEntityPersister();\n+\t\t\tif ( entityPersister instanceof AbstractEntityPersister ) {\n+\t\t\t\tAbstractEntityPersister aep = (AbstractEntityPersister) entityPersister;\n+\t\t\t\twhile ( !aep.filterFragment( \"\", Collections.emptyMap() ).isEmpty() && aep.getMappedSuperclass() != null ) {\n+\t\t\t\t\tCollections.addAll( result, aep.getTableNames() );\n+\t\t\t\t\taep = (AbstractEntityPersister) walker.getSessionFactoryHelper().findEntityPersisterByName( aep.getMappedSuperclass() );\n+\t\t\t\t}\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxMjMxMg=="}, "originalCommit": {"oid": "dce416c23e1a2cabc7d7192df99a76d8785bd00a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0OTk1Mw==", "bodyText": "Yeah, that was my concern. We should have finished semantic parsing of filter fragment already.", "url": "https://github.com/hibernate/hibernate-orm/pull/3481#discussion_r459649953", "createdAt": "2020-07-23T18:35:32Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/hql/internal/ast/util/JoinProcessor.java", "diffHunk": "@@ -142,6 +142,14 @@ public static JoinType toHibernateJoinType(int astJoinType) {\n \t\t\tif ( role != null ) {\n \t\t\t\tresult.add( fromElement.getOrigin().getPropertyTableName(role.substring(role.lastIndexOf('.') + 1)) );\n \t\t\t}\n+\t\t\tfinal EntityPersister entityPersister = fromElement.getEntityPersister();\n+\t\t\tif ( entityPersister instanceof AbstractEntityPersister ) {\n+\t\t\t\tAbstractEntityPersister aep = (AbstractEntityPersister) entityPersister;\n+\t\t\t\twhile ( !aep.filterFragment( \"\", Collections.emptyMap() ).isEmpty() && aep.getMappedSuperclass() != null ) {\n+\t\t\t\t\tCollections.addAll( result, aep.getTableNames() );\n+\t\t\t\t\taep = (AbstractEntityPersister) walker.getSessionFactoryHelper().findEntityPersisterByName( aep.getMappedSuperclass() );\n+\t\t\t\t}\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxMjMxMg=="}, "originalCommit": {"oid": "dce416c23e1a2cabc7d7192df99a76d8785bd00a"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4129, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}