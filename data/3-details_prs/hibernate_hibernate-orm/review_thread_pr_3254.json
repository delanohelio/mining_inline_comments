{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MTU5ODUz", "number": 3254, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDoxNDoyN1rODh5CbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODo1MDoyMVrOEs7x6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODY0MTA5OnYy", "diffSide": "RIGHT", "path": "tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDoxNDoyN1rOFs4Mzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowOTowMVrOFtBjLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng==", "bodyText": "One-shot usage of TypeUtils.containsAnnotation(Element, String) is okay, but multiple invocations won't be as efficient as\nAnnotationMirror annotationMirrors =  element.getAnnotationMirrors();\n// go about checking based on one-pass on the `AnnotationMirror` collection using methods from TypeUtil\n\nFurthermore, I do think we can reformat the above code in some way to improve readability. For instance, I spent quite some time figuring out how the parenthesis pairs match up above.\nIgnore the performance concern if irrelevant; but I do think we can improve the code as following\nif ( TypeUtils.containsAnnotation( element, Constants.CONVERT, Constants.HIBERNATE_TYPE ) && ! TypeUtils.containsAnnotation( element, Constants.ONE_TO_MANY, Constants.MANY_TO_MANY, Constants.ELEMENT_COLLECTION) ) {\n... ...\n}\n\nprovided performance concern could be ignored", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382602446", "createdAt": "2020-02-21T14:14:27Z", "author": {"login": "NathanQingyangXu"}, "path": "tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java", "diffHunk": "@@ -138,6 +138,16 @@ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType decla\n \t\t\t\taccessTypeInfo.setDefaultAccessType( entity.getEntityAccessTypeInfo().getAccessType() );\n \t\t\t}\n \t\t}\n+\t\tif (( TypeUtils.containsAnnotation( element, Constants.CONVERT ) ||\n+\t\t\t\tTypeUtils.containsAnnotation( element, Constants.HIBERNATE_TYPE ) ) &&\n+\t\t\t\t!isCollectionAssociation( element )\n+\t\t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10d266ffa51b9a50d3617ee641d8005f6fd6451"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwOTk2NQ==", "bodyText": "Sure thing. Feel free to modify it any way you want and push the commit.", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382609965", "createdAt": "2020-02-21T14:28:34Z", "author": {"login": "vladmihalcea"}, "path": "tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java", "diffHunk": "@@ -138,6 +138,16 @@ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType decla\n \t\t\t\taccessTypeInfo.setDefaultAccessType( entity.getEntityAccessTypeInfo().getAccessType() );\n \t\t\t}\n \t\t}\n+\t\tif (( TypeUtils.containsAnnotation( element, Constants.CONVERT ) ||\n+\t\t\t\tTypeUtils.containsAnnotation( element, Constants.HIBERNATE_TYPE ) ) &&\n+\t\t\t\t!isCollectionAssociation( element )\n+\t\t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, "originalCommit": {"oid": "c10d266ffa51b9a50d3617ee641d8005f6fd6451"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzNTExNg==", "bodyText": "I don't think I have such rights, but I can create a PR after yours is merged.", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382635116", "createdAt": "2020-02-21T15:12:50Z", "author": {"login": "NathanQingyangXu"}, "path": "tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java", "diffHunk": "@@ -138,6 +138,16 @@ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType decla\n \t\t\t\taccessTypeInfo.setDefaultAccessType( entity.getEntityAccessTypeInfo().getAccessType() );\n \t\t\t}\n \t\t}\n+\t\tif (( TypeUtils.containsAnnotation( element, Constants.CONVERT ) ||\n+\t\t\t\tTypeUtils.containsAnnotation( element, Constants.HIBERNATE_TYPE ) ) &&\n+\t\t\t\t!isCollectionAssociation( element )\n+\t\t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, "originalCommit": {"oid": "c10d266ffa51b9a50d3617ee641d8005f6fd6451"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0Mzg0Nw==", "bodyText": "I think you can fork my repository, and your change and send a Pull Request.", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382643847", "createdAt": "2020-02-21T15:28:16Z", "author": {"login": "vladmihalcea"}, "path": "tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java", "diffHunk": "@@ -138,6 +138,16 @@ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType decla\n \t\t\t\taccessTypeInfo.setDefaultAccessType( entity.getEntityAccessTypeInfo().getAccessType() );\n \t\t\t}\n \t\t}\n+\t\tif (( TypeUtils.containsAnnotation( element, Constants.CONVERT ) ||\n+\t\t\t\tTypeUtils.containsAnnotation( element, Constants.HIBERNATE_TYPE ) ) &&\n+\t\t\t\t!isCollectionAssociation( element )\n+\t\t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, "originalCommit": {"oid": "c10d266ffa51b9a50d3617ee641d8005f6fd6451"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NzQ1OQ==", "bodyText": "Thanks for the tip, but I would approve the PR if you made the code cleaning as I proposed, :).", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382677459", "createdAt": "2020-02-21T16:25:53Z", "author": {"login": "NathanQingyangXu"}, "path": "tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java", "diffHunk": "@@ -138,6 +138,16 @@ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType decla\n \t\t\t\taccessTypeInfo.setDefaultAccessType( entity.getEntityAccessTypeInfo().getAccessType() );\n \t\t\t}\n \t\t}\n+\t\tif (( TypeUtils.containsAnnotation( element, Constants.CONVERT ) ||\n+\t\t\t\tTypeUtils.containsAnnotation( element, Constants.HIBERNATE_TYPE ) ) &&\n+\t\t\t\t!isCollectionAssociation( element )\n+\t\t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, "originalCommit": {"oid": "c10d266ffa51b9a50d3617ee641d8005f6fd6451"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NDk5OA==", "bodyText": "I don't know exactly what changes you want to make, so it's better if you cherry-pick my commit, add your changes and submit a new PR to the main fork.\nI'll close my PR once you do that.", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382684998", "createdAt": "2020-02-21T16:39:38Z", "author": {"login": "vladmihalcea"}, "path": "tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java", "diffHunk": "@@ -138,6 +138,16 @@ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType decla\n \t\t\t\taccessTypeInfo.setDefaultAccessType( entity.getEntityAccessTypeInfo().getAccessType() );\n \t\t\t}\n \t\t}\n+\t\tif (( TypeUtils.containsAnnotation( element, Constants.CONVERT ) ||\n+\t\t\t\tTypeUtils.containsAnnotation( element, Constants.HIBERNATE_TYPE ) ) &&\n+\t\t\t\t!isCollectionAssociation( element )\n+\t\t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, "originalCommit": {"oid": "c10d266ffa51b9a50d3617ee641d8005f6fd6451"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwNjEwNw==", "bodyText": "Sorry for the misunderstanding. I think\nif (( TypeUtils.containsAnnotation( element, Constants.CONVERT ) ||\n\t\t\t\tTypeUtils.containsAnnotation( element, Constants.HIBERNATE_TYPE ) ) &&\n\t\t\t\t!isCollectionAssociation( element )\n\t\t) {\n\ncould be simplified dramatically by\nif ( TypeUtils.containsAnnotation( element, Constants.CONVERT, Constants.HIBERNATE_TYPE ) && ! TypeUtils.containsAnnotation( element, Constants.ONE_TO_MANY, Constants.MANY_TO_MANY, Constants.ELEMENT_COLLECTION) ) {", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382706107", "createdAt": "2020-02-21T17:20:33Z", "author": {"login": "NathanQingyangXu"}, "path": "tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java", "diffHunk": "@@ -138,6 +138,16 @@ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType decla\n \t\t\t\taccessTypeInfo.setDefaultAccessType( entity.getEntityAccessTypeInfo().getAccessType() );\n \t\t\t}\n \t\t}\n+\t\tif (( TypeUtils.containsAnnotation( element, Constants.CONVERT ) ||\n+\t\t\t\tTypeUtils.containsAnnotation( element, Constants.HIBERNATE_TYPE ) ) &&\n+\t\t\t\t!isCollectionAssociation( element )\n+\t\t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, "originalCommit": {"oid": "c10d266ffa51b9a50d3617ee641d8005f6fd6451"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NjA1Mw==", "bodyText": "@NathanQingyangXu I pushed a new commit based on your changes.", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382746053", "createdAt": "2020-02-21T18:48:25Z", "author": {"login": "vladmihalcea"}, "path": "tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java", "diffHunk": "@@ -138,6 +138,16 @@ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType decla\n \t\t\t\taccessTypeInfo.setDefaultAccessType( entity.getEntityAccessTypeInfo().getAccessType() );\n \t\t\t}\n \t\t}\n+\t\tif (( TypeUtils.containsAnnotation( element, Constants.CONVERT ) ||\n+\t\t\t\tTypeUtils.containsAnnotation( element, Constants.HIBERNATE_TYPE ) ) &&\n+\t\t\t\t!isCollectionAssociation( element )\n+\t\t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, "originalCommit": {"oid": "c10d266ffa51b9a50d3617ee641d8005f6fd6451"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NTYzMA==", "bodyText": "thanks. I approved. I would let other reviewer focus on business logic stuff.", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382755630", "createdAt": "2020-02-21T19:09:01Z", "author": {"login": "NathanQingyangXu"}, "path": "tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java", "diffHunk": "@@ -138,6 +138,16 @@ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType decla\n \t\t\t\taccessTypeInfo.setDefaultAccessType( entity.getEntityAccessTypeInfo().getAccessType() );\n \t\t\t}\n \t\t}\n+\t\tif (( TypeUtils.containsAnnotation( element, Constants.CONVERT ) ||\n+\t\t\t\tTypeUtils.containsAnnotation( element, Constants.HIBERNATE_TYPE ) ) &&\n+\t\t\t\t!isCollectionAssociation( element )\n+\t\t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, "originalCommit": {"oid": "c10d266ffa51b9a50d3617ee641d8005f6fd6451"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTUyMjMyOnYy", "diffSide": "RIGHT", "path": "tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODo1MDoyMlrOHgcLig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODo1MDoyMlrOHgcLig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3ODE4Ng==", "bodyText": "I don't think this is according to the JPA specification, but I didn't look into it to find a reference. My gut tells me, this should be fixed by annotating the target attribute with @Basic so IMO it should look like the following:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif ( TypeUtils.containsAnnotation(\n          \n          \n            \n            \t\t\t\telement,\n          \n          \n            \n            \t\t\t\tConstants.CONVERT,\n          \n          \n            \n            \t\t\t\tConstants.HIBERNATE_TYPE\n          \n          \n            \n            \t\t) && !TypeUtils.containsAnnotation(\n          \n          \n            \n            \t\t\t\telement,\n          \n          \n            \n            \t\t\t\tConstants.ONE_TO_MANY,\n          \n          \n            \n            \t\t\t\tConstants.MANY_TO_MANY,\n          \n          \n            \n            \t\t\t\tConstants.ELEMENT_COLLECTION\n          \n          \n            \n            \t\t) ) {\n          \n          \n            \n            \t\t\treturn new AnnotationMetaSingleAttribute(\n          \n          \n            \n            \t\t\t\t\tentity,\n          \n          \n            \n            \t\t\t\t\telement,\n          \n          \n            \n            \t\t\t\t\tTypeUtils.toTypeString( declaredType )\n          \n          \n            \n            \t\t\t);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tif ( TypeUtils.containsAnnotation(\n          \n          \n            \n            \t\t\t\telement,\n          \n          \n            \n            \t\t\t\tConstants.CONVERT,\n          \n          \n            \n            \t\t\t\tConstants.HIBERNATE_TYPE,\n          \n          \n            \n            \t\t\t\tConstants.BASIC\n          \n          \n            \n            \t\t) ) {\n          \n          \n            \n            \t\t\treturn new AnnotationMetaSingleAttribute(\n          \n          \n            \n            \t\t\t\t\tentity,\n          \n          \n            \n            \t\t\t\t\telement,\n          \n          \n            \n            \t\t\t\t\tTypeUtils.toTypeString( declaredType )\n          \n          \n            \n            \t\t\t);\n          \n          \n            \n            \t\t}", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r503778186", "createdAt": "2020-10-13T08:50:22Z", "author": {"login": "beikov"}, "path": "tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java", "diffHunk": "@@ -138,6 +138,22 @@ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType decla\n \t\t\t\taccessTypeInfo.setDefaultAccessType( entity.getEntityAccessTypeInfo().getAccessType() );\n \t\t\t}\n \t\t}\n+\t\tif ( TypeUtils.containsAnnotation(\n+\t\t\t\telement,\n+\t\t\t\tConstants.CONVERT,\n+\t\t\t\tConstants.HIBERNATE_TYPE\n+\t\t) && !TypeUtils.containsAnnotation(\n+\t\t\t\telement,\n+\t\t\t\tConstants.ONE_TO_MANY,\n+\t\t\t\tConstants.MANY_TO_MANY,\n+\t\t\t\tConstants.ELEMENT_COLLECTION\n+\t\t) ) {\n+\t\t\treturn new AnnotationMetaSingleAttribute(\n+\t\t\t\t\tentity,\n+\t\t\t\t\telement,\n+\t\t\t\t\tTypeUtils.toTypeString( declaredType )\n+\t\t\t);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f4244f78d22f2ebbc03f25b7ef26f9728cb847"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4038, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}