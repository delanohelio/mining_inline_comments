{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTkwMTQx", "number": 3667, "title": "Various fixes for 6.0", "bodyText": "A quick overview of what I did:\n\nImplement support for group by and having clause\nImplement tuple emulation handling\nFollow SQL standard regarding collations i.e. collations can be applied to any scalar expression\nFix timezone issues with timestamp literal parsing\nFix a few Derby issues\nPass through jdbc timezone for rendering timestamp literals with offsets/zones\nImplement cache key based on copied binding values for query result caching\nFix a few generics warnings\nAllow configuring if parameters or literals should be created for values passed to JPA Criteria API. Don't interfere with the rendering process of literals to SQL anymore\nCaching for temporal literal parser formats", "createdAt": "2020-11-26T16:56:04Z", "url": "https://github.com/hibernate/hibernate-orm/pull/3667", "merged": true, "mergeCommit": {"oid": "c4673e5a5c0b7ff0c168995e87f333d272d7b44c"}, "closed": true, "closedAt": "2020-12-08T10:27:28Z", "author": {"login": "beikov"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgXZbQAFqTUzOTQ4MTA4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkHiH7gH2gAyNTI4MTkwMTQxOmRjNDcxMTJhZjk4YzJlZmM4NzVkMTBiZTY1NzE5YTM2ZTIwMTAwZTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NDgxMDgy", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#pullrequestreview-539481082", "createdAt": "2020-11-26T17:28:15Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoyODoxNVrOH6ji7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxODozNzozN1rOH6k9Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MTgzNw==", "bodyText": "Whoah, there's gotta be a better way to handle this! We really shouldn't need an expression rule this messy.\nSo I speculate that perhaps you're trying to really strictly enforce the grammar of the language in the parser, which sounds like a good thing but, suprisingly, it's actually a really bad idea, since generated parsers generally produce very bad error messages. Further, it means that tools like IDE editors fail at parsing the code even for very minor syntax errors.\nIt's much better to be permissive in the parser, and then enforce restrictions in the code which interprets the AST.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531161837", "createdAt": "2020-11-26T17:28:15Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/antlr/org/hibernate/grammars/hql/HqlParser.g4", "diffHunk": "@@ -404,23 +396,23 @@ likeEscape\n \n expression\n \t//highest to lowest precedence\n-\t: LEFT_PAREN expression RIGHT_PAREN\t\t\t\t# GroupedExpression\n-\t| LEFT_PAREN subQuery RIGHT_PAREN\t\t\t\t# SubQueryExpression\n-\t| caseList\t\t\t\t\t\t\t\t\t\t# CaseExpression\n-\t| literal\t\t\t\t\t\t\t\t\t\t# LiteralExpression\n-\t| parameter\t\t\t\t\t\t\t\t\t\t# ParameterExpression\n-\t| entityTypeReference\t\t\t\t\t\t\t# EntityTypeExpression\n-\t| entityIdReference\t\t\t\t\t\t\t\t# EntityIdExpression\n-\t| entityVersionReference\t\t\t\t\t\t# EntityVersionExpression\n-\t| entityNaturalIdReference\t\t\t\t\t\t# EntityNaturalIdExpression\n-\t| path\t\t\t\t\t\t\t\t\t\t\t# PathExpression\n-\t| function\t\t\t\t\t\t\t\t\t\t# FunctionExpression\n-\t| signOperator expression\t\t\t\t\t\t# UnaryExpression\n-\t| expression datetimeField  \t\t\t\t\t# ToDurationExpression\n-\t| expression BY datetimeField\t\t\t\t\t# FromDurationExpression\n-\t| expression multiplicativeOperator expression\t# MultiplicationExpression\n-\t| expression additiveOperator expression\t\t# AdditionExpression\n-\t| expression DOUBLE_PIPE expression\t\t\t\t# ConcatenationExpression\n+\t: LEFT_PAREN expression RIGHT_PAREN\t\t\t\t\t# GroupedExpression\n+\t| LEFT_PAREN subQuery RIGHT_PAREN\t\t\t\t\t# SubQueryExpression\n+\t| caseList collationSpecification?\t\t\t\t\t# CaseExpression\n+\t| literal collationSpecification?\t\t\t\t\t# LiteralExpression\n+\t| parameter collationSpecification?\t\t\t\t\t# ParameterExpression\n+\t| entityTypeReference\t\t\t\t\t\t\t\t# EntityTypeExpression\n+\t| entityIdReference collationSpecification?\t\t\t# EntityIdExpression\n+\t| entityVersionReference collationSpecification?\t# EntityVersionExpression\n+\t| entityNaturalIdReference collationSpecification?\t# EntityNaturalIdExpression\n+\t| path collationSpecification?\t\t\t\t\t\t# PathExpression\n+\t| function collationSpecification?\t\t\t\t\t# FunctionExpression\n+\t| signOperator expression\t\t\t\t\t\t\t# UnaryExpression\n+\t| expression datetimeField  \t\t\t\t\t\t# ToDurationExpression\n+\t| expression BY datetimeField\t\t\t\t\t\t# FromDurationExpression\n+\t| expression multiplicativeOperator expression\t\t# MultiplicationExpression\n+\t| expression additiveOperator expression\t\t\t# AdditionExpression\n+\t| expression DOUBLE_PIPE expression\t\t\t\t\t# ConcatenationExpression", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MTA2Ng==", "bodyText": "@beikov\nWhat I mean is, I would much rather see the error\nsigned expression may not have a collation\n\nThan\nunexpected token: identifier", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531181066", "createdAt": "2020-11-26T18:24:24Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/antlr/org/hibernate/grammars/hql/HqlParser.g4", "diffHunk": "@@ -404,23 +396,23 @@ likeEscape\n \n expression\n \t//highest to lowest precedence\n-\t: LEFT_PAREN expression RIGHT_PAREN\t\t\t\t# GroupedExpression\n-\t| LEFT_PAREN subQuery RIGHT_PAREN\t\t\t\t# SubQueryExpression\n-\t| caseList\t\t\t\t\t\t\t\t\t\t# CaseExpression\n-\t| literal\t\t\t\t\t\t\t\t\t\t# LiteralExpression\n-\t| parameter\t\t\t\t\t\t\t\t\t\t# ParameterExpression\n-\t| entityTypeReference\t\t\t\t\t\t\t# EntityTypeExpression\n-\t| entityIdReference\t\t\t\t\t\t\t\t# EntityIdExpression\n-\t| entityVersionReference\t\t\t\t\t\t# EntityVersionExpression\n-\t| entityNaturalIdReference\t\t\t\t\t\t# EntityNaturalIdExpression\n-\t| path\t\t\t\t\t\t\t\t\t\t\t# PathExpression\n-\t| function\t\t\t\t\t\t\t\t\t\t# FunctionExpression\n-\t| signOperator expression\t\t\t\t\t\t# UnaryExpression\n-\t| expression datetimeField  \t\t\t\t\t# ToDurationExpression\n-\t| expression BY datetimeField\t\t\t\t\t# FromDurationExpression\n-\t| expression multiplicativeOperator expression\t# MultiplicationExpression\n-\t| expression additiveOperator expression\t\t# AdditionExpression\n-\t| expression DOUBLE_PIPE expression\t\t\t\t# ConcatenationExpression\n+\t: LEFT_PAREN expression RIGHT_PAREN\t\t\t\t\t# GroupedExpression\n+\t| LEFT_PAREN subQuery RIGHT_PAREN\t\t\t\t\t# SubQueryExpression\n+\t| caseList collationSpecification?\t\t\t\t\t# CaseExpression\n+\t| literal collationSpecification?\t\t\t\t\t# LiteralExpression\n+\t| parameter collationSpecification?\t\t\t\t\t# ParameterExpression\n+\t| entityTypeReference\t\t\t\t\t\t\t\t# EntityTypeExpression\n+\t| entityIdReference collationSpecification?\t\t\t# EntityIdExpression\n+\t| entityVersionReference collationSpecification?\t# EntityVersionExpression\n+\t| entityNaturalIdReference collationSpecification?\t# EntityNaturalIdExpression\n+\t| path collationSpecification?\t\t\t\t\t\t# PathExpression\n+\t| function collationSpecification?\t\t\t\t\t# FunctionExpression\n+\t| signOperator expression\t\t\t\t\t\t\t# UnaryExpression\n+\t| expression datetimeField  \t\t\t\t\t\t# ToDurationExpression\n+\t| expression BY datetimeField\t\t\t\t\t\t# FromDurationExpression\n+\t| expression multiplicativeOperator expression\t\t# MultiplicationExpression\n+\t| expression additiveOperator expression\t\t\t# AdditionExpression\n+\t| expression DOUBLE_PIPE expression\t\t\t\t\t# ConcatenationExpression", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MTgzNw=="}, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MTcyMA==", "bodyText": "Why precisely was this needed?", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531181720", "createdAt": "2020-11-26T18:26:33Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DB2Dialect.java", "diffHunk": "@@ -572,6 +572,8 @@ protected SqlTypeDescriptor getSqlTypeDescriptorOverride(int sqlCode) {\n \t\t\t// Therefore here we overwrite the sql type descriptors to\n \t\t\t// use the non-N variants which are supported.\n \t\t\tswitch ( sqlCode ) {\n+\t\t\t\tcase Types.BOOLEAN:\n+\t\t\t\t\treturn SmallIntTypeDescriptor.INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MjE0MA==", "bodyText": "This should not be necessary, and is probably wrong.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531182140", "createdAt": "2020-11-26T18:27:59Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -87,11 +91,14 @@ public DerbyDialect(int version) {\n \t\tregisterColumnType( Types.BIT, 1, \"boolean\" ); //no bit\n \t\tregisterColumnType( Types.BIT, \"smallint\" ); //no bit\n \t\tregisterColumnType( Types.TINYINT, \"smallint\" ); //no tinyint\n+\t\tregisterColumnType( Types.CHAR, \"char(1)\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MjgwNQ==", "bodyText": "No, we're not using this mapping anymore in Hibernate 6, that was what we used to using in Hibernate 5 and it was wrong and I changed it across all the Dialects.\nI'm pretty sure you shouldn't need to be changing type mappings for Derby because I tested the shit out of all this on Derby when I cleaned up the dialects.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531182805", "createdAt": "2020-11-26T18:30:10Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -87,11 +91,14 @@ public DerbyDialect(int version) {\n \t\tregisterColumnType( Types.BIT, 1, \"boolean\" ); //no bit\n \t\tregisterColumnType( Types.BIT, \"smallint\" ); //no bit\n \t\tregisterColumnType( Types.TINYINT, \"smallint\" ); //no tinyint\n+\t\tregisterColumnType( Types.CHAR, \"char(1)\" );\n \n \t\t//HHH-12827: map them both to the same type to\n \t\t//           avoid problems with schema update\n //\t\tregisterColumnType( Types.DECIMAL, \"decimal($p,$s)\" );\n \t\tregisterColumnType( Types.NUMERIC, \"decimal($p,$s)\" );\n+\t\tregisterColumnType( Types.FLOAT, \"float\" );\n+\t\tregisterColumnType( Types.DOUBLE, \"double\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4NDYwMg==", "bodyText": "See\n\nhttps://db.apache.org/derby/docs/10.8/ref/rrefsqlj27281.html\nhttps://db.apache.org/derby/docs/10.8/ref/rrefsqljdoubleprecision.html\n\nThe default type mappings in Dialect should be perfect for Derby.\nIf you map Types.FLOAT to float, then Java floats and doubles will both be mapped to the precision-less SQL type float`.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531184602", "createdAt": "2020-11-26T18:36:25Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -87,11 +91,14 @@ public DerbyDialect(int version) {\n \t\tregisterColumnType( Types.BIT, 1, \"boolean\" ); //no bit\n \t\tregisterColumnType( Types.BIT, \"smallint\" ); //no bit\n \t\tregisterColumnType( Types.TINYINT, \"smallint\" ); //no tinyint\n+\t\tregisterColumnType( Types.CHAR, \"char(1)\" );\n \n \t\t//HHH-12827: map them both to the same type to\n \t\t//           avoid problems with schema update\n //\t\tregisterColumnType( Types.DECIMAL, \"decimal($p,$s)\" );\n \t\tregisterColumnType( Types.NUMERIC, \"decimal($p,$s)\" );\n+\t\tregisterColumnType( Types.FLOAT, \"float\" );\n+\t\tregisterColumnType( Types.DOUBLE, \"double\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4MjgwNQ=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE4NDk1NQ==", "bodyText": "Same as above: why was this necessary?", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531184955", "createdAt": "2020-11-26T18:37:37Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -440,9 +453,16 @@ public boolean supportsTupleDistinctCounts() {\n \t}\n \n \tprotected SqlTypeDescriptor getSqlTypeDescriptorOverride(int sqlCode) {\n-\t\treturn sqlCode == Types.NUMERIC\n-\t\t\t\t? DecimalTypeDescriptor.INSTANCE\n-\t\t\t\t: super.getSqlTypeDescriptorOverride(sqlCode);\n+\t\tswitch ( sqlCode ) {\n+\t\t\tcase Types.BOOLEAN:\n+\t\t\t\treturn SmallIntTypeDescriptor.INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTMxODc2", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#pullrequestreview-540131876", "createdAt": "2020-11-27T18:22:56Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODoyMjo1NlrOH7F6fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODoyMjo1NlrOH7F6fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyNDkyNg==", "bodyText": "38?\nIs there something magical about this number?", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531724926", "createdAt": "2020-11-27T18:22:56Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/DerbyDialect.java", "diffHunk": "@@ -252,6 +262,12 @@ public String castPattern(CastType from, CastType to) {\n \t\t\t\t\treturn \"case ?1 when false then 0 when true then 1 end\";\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tcase STRING:\n+\t\t\t\t// See https://issues.apache.org/jira/browse/DERBY-2072\n+\t\t\t\tif ( from.getKind() == CastTypeKind.NUMERIC ) {\n+\t\t\t\t\treturn \"cast(cast(?1 as char(38)) as ?2)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTM1NjU1", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#pullrequestreview-540135655", "createdAt": "2020-11-27T18:36:45Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODozNjo0NVrOH7GIFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODozNjo0NVrOH7GIFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyODQwNA==", "bodyText": "IIRC, Postgres doesn't need this, so if you're going to add this here, please also override it on PostgresDialect to return \"\".\nRight now I don't recall if there were other databases which also don't require that.", "url": "https://github.com/hibernate/hibernate-orm/pull/3667#discussion_r531728404", "createdAt": "2020-11-27T18:36:45Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1257,7 +1258,8 @@ public String getSelectGUIDString() {\n \t * @return the SQL equivalent to Oracle's {@code from dual}.\n \t */\n \tpublic String getFromDual() {\n-\t\treturn \"\";\n+\t\t// The standard SQL solution to get a dual table is to use the VALUES clause\n+\t\treturn \"from (values (0)) as dual\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b1aeea05e0a270420b8f6931b6818a5982d4ac2", "author": {"user": {"login": "beikov", "name": "Christian Beikov"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/4b1aeea05e0a270420b8f6931b6818a5982d4ac2", "committedDate": "2020-12-01T17:17:22Z", "message": "Fix a few test issues, implement tuple emulation, group by support and support configuring criteria value handling mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2144c99c376aaedf679671fe8b6b01fc788a91cb", "author": {"user": {"login": "beikov", "name": "Christian Beikov"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/2144c99c376aaedf679671fe8b6b01fc788a91cb", "committedDate": "2020-12-01T17:17:26Z", "message": "Fix a few more tests, simplify collation handling, HQL parsing support for tuples, revert wrong dialect changes, alias support for group by and order by, implement index optimized tuple comparison emulation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7be98459d518de82be4ac79d158f633d88dbbbc5", "author": {"user": {"login": "beikov", "name": "Christian Beikov"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/7be98459d518de82be4ac79d158f633d88dbbbc5", "committedDate": "2020-12-01T17:17:26Z", "message": "Fixes according to review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a226a174fae53629987740f28cfa5ab2163fe02b", "author": {"user": {"login": "beikov", "name": "Christian Beikov"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/a226a174fae53629987740f28cfa5ab2163fe02b", "committedDate": "2020-12-01T17:17:26Z", "message": "Use WrapperOptions for JdbcLiteralFormatter instead of SessionImplementor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce096f16878d1adb0f6608303b9e68e337cf70fa", "author": {"user": {"login": "beikov", "name": "Christian Beikov"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/ce096f16878d1adb0f6608303b9e68e337cf70fa", "committedDate": "2020-12-01T17:17:26Z", "message": "Move out the temporary session cleanup into a dedicated method called after translation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "899406522188f91f9ab237edd648ee6e9852cdf0", "author": {"user": {"login": "beikov", "name": "Christian Beikov"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/899406522188f91f9ab237edd648ee6e9852cdf0", "committedDate": "2020-12-01T17:17:26Z", "message": "Fix some more tests and fix auto flushing for select queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edd6994c4f6f485fe00d574000b35275a1608d2b", "author": {"user": {"login": "beikov", "name": "Christian Beikov"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/edd6994c4f6f485fe00d574000b35275a1608d2b", "committedDate": "2020-12-01T17:32:26Z", "message": "Move persistence context access in EntitySelectFetchInitializer to fix PostgreSQL issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "edd6994c4f6f485fe00d574000b35275a1608d2b", "author": {"user": {"login": "beikov", "name": "Christian Beikov"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/edd6994c4f6f485fe00d574000b35275a1608d2b", "committedDate": "2020-12-01T17:32:26Z", "message": "Move persistence context access in EntitySelectFetchInitializer to fix PostgreSQL issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c98a51fc9a22af939bee1922329eadc79f2daa7", "author": {"user": {"login": "beikov", "name": "Christian Beikov"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/3c98a51fc9a22af939bee1922329eadc79f2daa7", "committedDate": "2020-12-04T20:33:58Z", "message": "Use processing stack during parsing to access query spec, fix lots of db2 issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "3c98a51fc9a22af939bee1922329eadc79f2daa7", "author": {"user": {"login": "beikov", "name": "Christian Beikov"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/3c98a51fc9a22af939bee1922329eadc79f2daa7", "committedDate": "2020-12-04T20:33:58Z", "message": "Use processing stack during parsing to access query spec, fix lots of db2 issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc47112af98c2efc875d10be65719a36e20100e0", "author": {"user": {"login": "beikov", "name": "Christian Beikov"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/dc47112af98c2efc875d10be65719a36e20100e0", "committedDate": "2020-12-08T10:25:07Z", "message": "Fix a few more test issues and handle group by summarization rendering strategies as well as group by literal rendering strategies"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2801, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}