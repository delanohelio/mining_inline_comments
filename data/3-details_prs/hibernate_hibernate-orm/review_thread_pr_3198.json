{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NDg2MzEx", "number": 3198, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyNDoyM1rODcLU2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTo0MzoxMVrODcLozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODcyMjgxOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyNDoyM1rOFkFi1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyNDoyM1rOFkFi1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4Mzg5NA==", "bodyText": "Doesn't work for now, because InlineStrategy itself is unfinished and throws.", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373383894", "createdAt": "2020-01-31T09:24:23Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1573,7 +1579,18 @@ public String getCreateMultisetTableString() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType entityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n+\t\tif ( entityDescriptor.getIdentifierMapping() instanceof CompositeIdentifierMapping) {\n+\t\t\tif ( !supportsTuplesInSubqueries() ) {\n+\t\t\t\treturn new InlineStrategy( this );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODcyNDU1OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyNTowMFrOFkFj6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzowMTowNlrOFkRvvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDE3MQ==", "bodyText": "Is this right? Should it add \"HT_\" to the table name?", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373384171", "createdAt": "2020-01-31T09:25:00Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1573,7 +1579,18 @@ public String getCreateMultisetTableString() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType entityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n+\t\tif ( entityDescriptor.getIdentifierMapping() instanceof CompositeIdentifierMapping) {\n+\t\t\tif ( !supportsTuplesInSubqueries() ) {\n+\t\t\t\treturn new InlineStrategy( this );\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn new PersistentTableStrategy(\n+\t\t\t\tnew IdTable( entityDescriptor, name -> name ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4MzgwNg==", "bodyText": "I believe you are correct", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373583806", "createdAt": "2020-01-31T17:01:06Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1573,7 +1579,18 @@ public String getCreateMultisetTableString() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType entityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n+\t\tif ( entityDescriptor.getIdentifierMapping() instanceof CompositeIdentifierMapping) {\n+\t\t\tif ( !supportsTuplesInSubqueries() ) {\n+\t\t\t\treturn new InlineStrategy( this );\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn new PersistentTableStrategy(\n+\t\t\t\tnew IdTable( entityDescriptor, name -> name ),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDE3MQ=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODcyNjAxOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/FirebirdDialect.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyNTozNFrOFkFk1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzowNjo1OFrOFkR5zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDQwNA==", "bodyText": "Is this right?", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373384404", "createdAt": "2020-01-31T09:25:34Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/FirebirdDialect.java", "diffHunk": "@@ -594,4 +601,20 @@ public JDBCException convert(SQLException sqlException, String message, String s\n \t\t};\n \t}\n \n+\t@Override\n+\tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(EntityMappingType entityDescriptor, RuntimeModelCreationContext runtimeModelCreationContext) {\n+\t\treturn getVersion() < 210\n+\t\t\t\t? super.getFallbackSqmMutationStrategy( entityDescriptor, runtimeModelCreationContext )\n+\t\t\t\t: new GlobalTemporaryTableStrategy(\n+\t\t\t\t\t\tnew IdTable( entityDescriptor, name -> \"HT_\" + name ),\n+\t\t\t\t\t\t() -> new TempIdTableExporter( false, this::getTypeName ) {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tprotected String getCreateOptions() {\n+\t\t\t\t\t\t\t\treturn \"on commit delete rows\";\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\tAfterUseAction.CLEAN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NjM4MA==", "bodyText": "Not sure how firebird implements their global-temp-table support.  Cleaning it should be fine, its more a question of whether its needed.  I'd leave it as is", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373586380", "createdAt": "2020-01-31T17:06:58Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/FirebirdDialect.java", "diffHunk": "@@ -594,4 +601,20 @@ public JDBCException convert(SQLException sqlException, String message, String s\n \t\t};\n \t}\n \n+\t@Override\n+\tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(EntityMappingType entityDescriptor, RuntimeModelCreationContext runtimeModelCreationContext) {\n+\t\treturn getVersion() < 210\n+\t\t\t\t? super.getFallbackSqmMutationStrategy( entityDescriptor, runtimeModelCreationContext )\n+\t\t\t\t: new GlobalTemporaryTableStrategy(\n+\t\t\t\t\t\tnew IdTable( entityDescriptor, name -> \"HT_\" + name ),\n+\t\t\t\t\t\t() -> new TempIdTableExporter( false, this::getTypeName ) {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tprotected String getCreateOptions() {\n+\t\t\t\t\t\t\t\treturn \"on commit delete rows\";\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\tAfterUseAction.CLEAN,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDQwNA=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODcyNjgyOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyNTo0NlrOFkFlNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzowNDozN1rOFkR14w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDUwMw==", "bodyText": "Is this right?", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373384503", "createdAt": "2020-01-31T09:25:46Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1573,7 +1579,18 @@ public String getCreateMultisetTableString() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType entityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n+\t\tif ( entityDescriptor.getIdentifierMapping() instanceof CompositeIdentifierMapping) {\n+\t\t\tif ( !supportsTuplesInSubqueries() ) {\n+\t\t\t\treturn new InlineStrategy( this );\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn new PersistentTableStrategy(\n+\t\t\t\tnew IdTable( entityDescriptor, name -> name ),\n+\t\t\t\tAfterUseAction.CLEAN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NTM3OQ==", "bodyText": "Yes, we want to clean the rows after we use them", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373585379", "createdAt": "2020-01-31T17:04:37Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1573,7 +1579,18 @@ public String getCreateMultisetTableString() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType entityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n+\t\tif ( entityDescriptor.getIdentifierMapping() instanceof CompositeIdentifierMapping) {\n+\t\t\tif ( !supportsTuplesInSubqueries() ) {\n+\t\t\t\treturn new InlineStrategy( this );\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn new PersistentTableStrategy(\n+\t\t\t\tnew IdTable( entityDescriptor, name -> name ),\n+\t\t\t\tAfterUseAction.CLEAN,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDUwMw=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODc2MzE3OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/TimesTenDialect.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTozOToxOFrOFkF7lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzowOTowOVrOFkR9jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MDIzMA==", "bodyText": "Is this correct?", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373390230", "createdAt": "2020-01-31T09:39:18Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/TimesTenDialect.java", "diffHunk": "@@ -216,28 +219,18 @@ public boolean isCurrentTimestampSelectStringCallable() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType rootEntityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n-\n-//\t\treturn new GlobalTemporaryTableBulkIdStrategy(\n-//\t\t\t\tnew IdTableSupportStandardImpl() {\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String generateIdTableName(String baseName) {\n-//\t\t\t\t\t\tfinal String name = super.generateIdTableName( baseName );\n-//\t\t\t\t\t\treturn name.length() > 30 ? name.substring( 1, 30 ) : name;\n-//\t\t\t\t\t}\n-//\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String getCreateIdTableCommand() {\n-//\t\t\t\t\t\treturn \"create global temporary table\";\n-//\t\t\t\t\t}\n-//\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String getCreateIdTableStatementOptions() {\n-//\t\t\t\t\t\treturn \"on commit delete rows\";\n-//\t\t\t\t\t}\n-//\t\t\t\t},\n-//\t\t\t\tAfterUseAction.CLEAN\n-//\t\t);\n+\t\treturn new GlobalTemporaryTableStrategy(\n+\t\t\t\tnew IdTable( rootEntityDescriptor,\n+\t\t\t\t\t\tname -> name.length() > 30 ? name.substring( 0, 30 ) : name ),\n+\t\t\t\t() -> new TempIdTableExporter( false, this::getTypeName ) {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tprotected String getCreateOptions() {\n+\t\t\t\t\t\treturn \"on commit delete rows\";\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\tAfterUseAction.CLEAN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NzM0MA==", "bodyText": "See earlier", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373587340", "createdAt": "2020-01-31T17:09:09Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/TimesTenDialect.java", "diffHunk": "@@ -216,28 +219,18 @@ public boolean isCurrentTimestampSelectStringCallable() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType rootEntityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n-\n-//\t\treturn new GlobalTemporaryTableBulkIdStrategy(\n-//\t\t\t\tnew IdTableSupportStandardImpl() {\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String generateIdTableName(String baseName) {\n-//\t\t\t\t\t\tfinal String name = super.generateIdTableName( baseName );\n-//\t\t\t\t\t\treturn name.length() > 30 ? name.substring( 1, 30 ) : name;\n-//\t\t\t\t\t}\n-//\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String getCreateIdTableCommand() {\n-//\t\t\t\t\t\treturn \"create global temporary table\";\n-//\t\t\t\t\t}\n-//\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String getCreateIdTableStatementOptions() {\n-//\t\t\t\t\t\treturn \"on commit delete rows\";\n-//\t\t\t\t\t}\n-//\t\t\t\t},\n-//\t\t\t\tAfterUseAction.CLEAN\n-//\t\t);\n+\t\treturn new GlobalTemporaryTableStrategy(\n+\t\t\t\tnew IdTable( rootEntityDescriptor,\n+\t\t\t\t\t\tname -> name.length() > 30 ? name.substring( 0, 30 ) : name ),\n+\t\t\t\t() -> new TempIdTableExporter( false, this::getTypeName ) {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tprotected String getCreateOptions() {\n+\t\t\t\t\t\treturn \"on commit delete rows\";\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\tAfterUseAction.CLEAN,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MDIzMA=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODc3MjQxOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/SAPDBDialect.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTo0MjozOVrOFkGBIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxMTozNDo0OVrOFkdbYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MTY0OQ==", "bodyText": "Is it correct to use PhysicalIdTableExporter here, even though it's really a temp table?", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373391649", "createdAt": "2020-01-31T09:42:39Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/SAPDBDialect.java", "diffHunk": "@@ -195,23 +198,18 @@ public CaseFragment createCaseFragment() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType rootEntityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n-\n-//\t\treturn new LocalTemporaryTableBulkIdStrategy(\n-//\t\t\t\tnew IdTableSupportStandardImpl() {\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String generateIdTableName(String baseName) {\n-//\t\t\t\t\t\treturn \"temp.\" + super.generateIdTableName( baseName );\n-//\t\t\t\t\t}\n-//\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String getCreateIdTableStatementOptions() {\n-//\t\t\t\t\t\treturn \"ignore rollback\";\n-//\t\t\t\t\t}\n-//\t\t\t\t},\n-//\t\t\t\tAfterUseAction.DROP,\n-//\t\t\t\tnull\n-//\t\t);\n+\t\treturn new LocalTemporaryTableStrategy(\n+\t\t\t\tnew IdTable( rootEntityDescriptor, name -> \"temp.\" + name ),\n+\t\t\t\t() -> new PhysicalIdTableExporter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NzE5OQ==", "bodyText": "No, it should use TempIdTableExporter", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373587199", "createdAt": "2020-01-31T17:08:47Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/SAPDBDialect.java", "diffHunk": "@@ -195,23 +198,18 @@ public CaseFragment createCaseFragment() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType rootEntityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n-\n-//\t\treturn new LocalTemporaryTableBulkIdStrategy(\n-//\t\t\t\tnew IdTableSupportStandardImpl() {\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String generateIdTableName(String baseName) {\n-//\t\t\t\t\t\treturn \"temp.\" + super.generateIdTableName( baseName );\n-//\t\t\t\t\t}\n-//\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String getCreateIdTableStatementOptions() {\n-//\t\t\t\t\t\treturn \"ignore rollback\";\n-//\t\t\t\t\t}\n-//\t\t\t\t},\n-//\t\t\t\tAfterUseAction.DROP,\n-//\t\t\t\tnull\n-//\t\t);\n+\t\treturn new LocalTemporaryTableStrategy(\n+\t\t\t\tnew IdTable( rootEntityDescriptor, name -> \"temp.\" + name ),\n+\t\t\t\t() -> new PhysicalIdTableExporter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MTY0OQ=="}, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3Mjk1MA==", "bodyText": "OK thanks I will fix that.", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373772950", "createdAt": "2020-02-01T10:39:09Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/SAPDBDialect.java", "diffHunk": "@@ -195,23 +198,18 @@ public CaseFragment createCaseFragment() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType rootEntityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n-\n-//\t\treturn new LocalTemporaryTableBulkIdStrategy(\n-//\t\t\t\tnew IdTableSupportStandardImpl() {\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String generateIdTableName(String baseName) {\n-//\t\t\t\t\t\treturn \"temp.\" + super.generateIdTableName( baseName );\n-//\t\t\t\t\t}\n-//\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String getCreateIdTableStatementOptions() {\n-//\t\t\t\t\t\treturn \"ignore rollback\";\n-//\t\t\t\t\t}\n-//\t\t\t\t},\n-//\t\t\t\tAfterUseAction.DROP,\n-//\t\t\t\tnull\n-//\t\t);\n+\t\treturn new LocalTemporaryTableStrategy(\n+\t\t\t\tnew IdTable( rootEntityDescriptor, name -> \"temp.\" + name ),\n+\t\t\t\t() -> new PhysicalIdTableExporter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MTY0OQ=="}, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NTIwMg==", "bodyText": "Done.", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373775202", "createdAt": "2020-02-01T11:34:49Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/SAPDBDialect.java", "diffHunk": "@@ -195,23 +198,18 @@ public CaseFragment createCaseFragment() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType rootEntityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n-\n-//\t\treturn new LocalTemporaryTableBulkIdStrategy(\n-//\t\t\t\tnew IdTableSupportStandardImpl() {\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String generateIdTableName(String baseName) {\n-//\t\t\t\t\t\treturn \"temp.\" + super.generateIdTableName( baseName );\n-//\t\t\t\t\t}\n-//\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String getCreateIdTableStatementOptions() {\n-//\t\t\t\t\t\treturn \"ignore rollback\";\n-//\t\t\t\t\t}\n-//\t\t\t\t},\n-//\t\t\t\tAfterUseAction.DROP,\n-//\t\t\t\tnull\n-//\t\t);\n+\t\treturn new LocalTemporaryTableStrategy(\n+\t\t\t\tnew IdTable( rootEntityDescriptor, name -> \"temp.\" + name ),\n+\t\t\t\t() -> new PhysicalIdTableExporter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MTY0OQ=="}, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODc3Mzg4OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTo0MzoxMVrOFkGCAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxMDozOToyOFrOFkdSsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MTg3Mw==", "bodyText": "Is this right?", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373391873", "createdAt": "2020-01-31T09:43:11Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1573,7 +1579,18 @@ public String getCreateMultisetTableString() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType entityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n+\t\tif ( entityDescriptor.getIdentifierMapping() instanceof CompositeIdentifierMapping) {\n+\t\t\tif ( !supportsTuplesInSubqueries() ) {\n+\t\t\t\treturn new InlineStrategy( this );\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn new PersistentTableStrategy(\n+\t\t\t\tnew IdTable( entityDescriptor, name -> name ),\n+\t\t\t\tAfterUseAction.CLEAN,\n+\t\t\t\tPhysicalIdTableExporter::new,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NTY5MQ==", "bodyText": "Yes, we want to export the physical table", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373585691", "createdAt": "2020-01-31T17:05:24Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1573,7 +1579,18 @@ public String getCreateMultisetTableString() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType entityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n+\t\tif ( entityDescriptor.getIdentifierMapping() instanceof CompositeIdentifierMapping) {\n+\t\t\tif ( !supportsTuplesInSubqueries() ) {\n+\t\t\t\treturn new InlineStrategy( this );\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn new PersistentTableStrategy(\n+\t\t\t\tnew IdTable( entityDescriptor, name -> name ),\n+\t\t\t\tAfterUseAction.CLEAN,\n+\t\t\t\tPhysicalIdTableExporter::new,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MTg3Mw=="}, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3Mjk3Ng==", "bodyText": "Thanks.", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373772976", "createdAt": "2020-02-01T10:39:28Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1573,7 +1579,18 @@ public String getCreateMultisetTableString() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType entityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n+\t\tif ( entityDescriptor.getIdentifierMapping() instanceof CompositeIdentifierMapping) {\n+\t\t\tif ( !supportsTuplesInSubqueries() ) {\n+\t\t\t\treturn new InlineStrategy( this );\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn new PersistentTableStrategy(\n+\t\t\t\tnew IdTable( entityDescriptor, name -> name ),\n+\t\t\t\tAfterUseAction.CLEAN,\n+\t\t\t\tPhysicalIdTableExporter::new,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MTg3Mw=="}, "originalCommit": null, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4072, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}