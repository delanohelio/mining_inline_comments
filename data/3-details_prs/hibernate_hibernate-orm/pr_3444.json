{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwOTUwNDE3", "number": 3444, "title": "HHH-14198 - Expose CompositeUserTypes through JPA Metamodel", "bodyText": "Composite User Types work like regular Composite Types (like Embeddable) in HQL. However, because they cannot be represented in the JPA metamodel, libraries like GraphQL for JPA or Blaze-Persistence cannot fully utilize them. In order to make the composite property names available to these libraries, it would be nice to optionally expose these attributes as embedded attributes. This pull request aims to make that change and makes it configurable through a custom setting.\nComposite User Types are a common solution for mapping composite interfaces. A common example is for example Money from the Java Money API (JSR-354), for which composite user types are implemented in Jadira.\nI know Composite User Types are currently not consiered in Hibernate 6.x. See also this Zulip thread. I am not sure if Hibernate 6.x will even have multi column types, which I presume would be a requirement to even introduce Composite User types back at some point. Usually Embeddables are a much easier, suitable mechanism for composite user types. But Embeddables are not always a viable alternative, because Embeddables require the type to be subclassed (as an interface cannot be mapped, and the type may not solely comprise fields that can be mapped to a simple basic type). To deal with this exact problem, MonetaryAmounts are still mapped as composite user type. There also have been suggestions to the JPA Spec to consider AttributeConverters for Embeddables for pracitcally the same purpose (which I think is going to be a mess of an implementation). See: eclipse-ee4j/jpa-api#105\nAnyways, regardless of whether this gets integrated in 5.x, I don't expect it to be integrated in 6.x unless we also reintroduce Composite User Types. I am willing to contribute Composite User Types for 6.x if people see benefit in it and think it can be done in the first place.\nhttps://hibernate.atlassian.net/browse/HHH-14198", "createdAt": "2020-06-27T19:10:23Z", "url": "https://github.com/hibernate/hibernate-orm/pull/3444", "merged": true, "mergeCommit": {"oid": "17d365ecf8965044227dc401f13fec86e3117e02"}, "closed": true, "closedAt": "2020-09-04T12:53:13Z", "author": {"login": "jwgmeligmeyling"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvdUtBgFqTQzODcyMDc3OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFXmSzABqjM3MjY4NTU1Njg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzIwNzc4", "url": "https://github.com/hibernate/hibernate-orm/pull/3444#pullrequestreview-438720778", "createdAt": "2020-06-27T19:50:23Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOTo1MDoyM1rOGp37lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOTo1MDoyM1rOGp37lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU2MTE3Mw==", "bodyText": "It seems we might need to swap the two parameter orders for assertEquals(). The issue only manifests itself when testing is broken, however.", "url": "https://github.com/hibernate/hibernate-orm/pull/3444#discussion_r446561173", "createdAt": "2020-06-27T19:50:23Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/test/java/org/hibernate/test/cut/CompositeUserTypeTest.java", "diffHunk": "@@ -67,6 +83,21 @@ public void testCompositeUserType() {\n \t\tt.commit();\n \t\ts.close();\n \t}\n+\n+\t@Test\n+\tpublic void testMetamodel() {\n+\t\tMetamodelImplementor metamodel = sessionFactory().getMetamodel();\n+\t\tPersistentAttributeDescriptor<? super Transaction, ?> value = metamodel.managedType(Transaction.class).getAttribute(\"value\");\n+\t\tassertEquals(value.getPersistentAttributeType(), Attribute.PersistentAttributeType.EMBEDDED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NDk4MDYz", "url": "https://github.com/hibernate/hibernate-orm/pull/3444#pullrequestreview-466498063", "createdAt": "2020-08-13T07:10:16Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NDAyNDE5", "url": "https://github.com/hibernate/hibernate-orm/pull/3444#pullrequestreview-478402419", "createdAt": "2020-08-31T08:03:45Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODowMzo0NVrOHJusfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODowMzo0NVrOHJusfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NDI4NA==", "bodyText": "After fixing this, I see nothing else blocking this PR. Any concerns @Sanne ?", "url": "https://github.com/hibernate/hibernate-orm/pull/3444#discussion_r479964284", "createdAt": "2020-08-31T08:03:45Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/test/java/org/hibernate/test/cut/CompositeUserTypeTest.java", "diffHunk": "@@ -67,6 +83,21 @@ public void testCompositeUserType() {\n \t\tt.commit();\n \t\ts.close();\n \t}\n+\n+\t@Test\n+\tpublic void testMetamodel() {\n+\t\tMetamodelImplementor metamodel = sessionFactory().getMetamodel();\n+\t\tPersistentAttributeDescriptor<? super Transaction, ?> value = metamodel.managedType(Transaction.class).getAttribute(\"value\");\n+\t\tassertEquals(value.getPersistentAttributeType(), Attribute.PersistentAttributeType.EMBEDDED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU2MTE3Mw=="}, "originalCommit": null, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f91c1c4751ac711742663e18bf2481432c44d03", "author": {"user": {"login": "jwgmeligmeyling", "name": "Jan-Willem Gmelig Meyling"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/6f91c1c4751ac711742663e18bf2481432c44d03", "committedDate": "2020-09-03T21:35:53Z", "message": "HHH-14198 - Expose CompositeUserTypes through JPA Metamodel\n\nComposite User Types work like regular Composite Types (like Embeddable) in HQL. However, because they cannot be represented in the JPA metamodel, libraries like [GraphQL for JPA](https://github.com/jcrygier/graphql-jpa) or [Blaze-Persistence](https://persistence.blazebit.com/) cannot fully utilize them. In order to make the composite property names available to these libraries, it would be nice to optionally expose these attributes as embedded attributes. This pull request aims to make that change and makes it configurable through a custom setting.\n\nComposite User Types are a common solution for mapping composite interfaces. A common example is for example `Money` from the Java Money API (JSR-354), for which composite user types are implemented in [Jadira](http://jadira.sourceforge.net/usertype-userguide.html).\n\nI know Composite User Types are currently not consiered in Hibernate 6.x. See also [this](https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/CompositeUserType) Zulip thread. I am not sure if Hibernate 6.x will even have multi column types, which I presume would be a requirement to even introduce Composite User types back at some point. Usually Embeddables are a much easier, suitable mechanism for composite user types. But Embeddables are not always a viable alternative, because Embeddables require the type to be subclassed (as an interface cannot be mapped, and the type may not solely comprise fields that can be mapped to a simple basic type). To deal with this exact problem, `MonetaryAmounts` are still mapped as composite user type. There also have been suggestions to the JPA Spec to consider `AttributeConverters` for Embeddables for pracitcally the same purpose (which I think is going to be a mess of an implementation). See: https://github.com/eclipse-ee4j/jpa-api/issues/105\n\nAnyways, regardless of whether this gets integrated in 5.x, I don't expect it to be integrated in 6.x unless we also reintroduce Composite User Types. I am willing to contribute Composite User Types for 6.x if people see benefit in it and think it can be done in the first place."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "6f91c1c4751ac711742663e18bf2481432c44d03", "author": {"user": {"login": "jwgmeligmeyling", "name": "Jan-Willem Gmelig Meyling"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/6f91c1c4751ac711742663e18bf2481432c44d03", "committedDate": "2020-09-03T21:35:53Z", "message": "HHH-14198 - Expose CompositeUserTypes through JPA Metamodel\n\nComposite User Types work like regular Composite Types (like Embeddable) in HQL. However, because they cannot be represented in the JPA metamodel, libraries like [GraphQL for JPA](https://github.com/jcrygier/graphql-jpa) or [Blaze-Persistence](https://persistence.blazebit.com/) cannot fully utilize them. In order to make the composite property names available to these libraries, it would be nice to optionally expose these attributes as embedded attributes. This pull request aims to make that change and makes it configurable through a custom setting.\n\nComposite User Types are a common solution for mapping composite interfaces. A common example is for example `Money` from the Java Money API (JSR-354), for which composite user types are implemented in [Jadira](http://jadira.sourceforge.net/usertype-userguide.html).\n\nI know Composite User Types are currently not consiered in Hibernate 6.x. See also [this](https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/CompositeUserType) Zulip thread. I am not sure if Hibernate 6.x will even have multi column types, which I presume would be a requirement to even introduce Composite User types back at some point. Usually Embeddables are a much easier, suitable mechanism for composite user types. But Embeddables are not always a viable alternative, because Embeddables require the type to be subclassed (as an interface cannot be mapped, and the type may not solely comprise fields that can be mapped to a simple basic type). To deal with this exact problem, `MonetaryAmounts` are still mapped as composite user type. There also have been suggestions to the JPA Spec to consider `AttributeConverters` for Embeddables for pracitcally the same purpose (which I think is going to be a mess of an implementation). See: https://github.com/eclipse-ee4j/jpa-api/issues/105\n\nAnyways, regardless of whether this gets integrated in 5.x, I don't expect it to be integrated in 6.x unless we also reintroduce Composite User Types. I am willing to contribute Composite User Types for 6.x if people see benefit in it and think it can be done in the first place."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2970, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}