{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMDYzNDE0", "number": 3276, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjoxOToxMVrODkF7EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyMzoxNlrODkNsKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTcyMzY4OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/boot/internal/InFlightMetadataCollectorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjoxOToxMVrOFwO7pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjoxOToxMVrOFwO7pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEyMDYxNQ==", "bodyText": "we don't need key checking when we simply wanna remove it, regardless of whether it exists or not.", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386120615", "createdAt": "2020-03-01T16:19:11Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/boot/internal/InFlightMetadataCollectorImpl.java", "diffHunk": "@@ -688,7 +688,7 @@ public void applyResultSetMapping(NamedResultSetMappingDefinition resultSetMappi\n \t@Override\n \tpublic void addDefaultResultSetMapping(NamedResultSetMappingDefinition definition) {\n \t\tfinal String name = definition.getRegistrationName();\n-\t\tif ( !defaultSqlResultSetMappingNames.contains( name ) && sqlResultSetMappingMap.containsKey( name ) ) {\n+\t\tif ( !defaultSqlResultSetMappingNames.contains( name ) ) {\n \t\t\tsqlResultSetMappingMap.remove( name );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTcyNTA5OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/context/internal/ThreadLocalSessionContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjoyMTozN1rOFwO8WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjoyMTozN1rOFwO8WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEyMDc5Mw==", "bodyText": "We don't need nullness checking for either instanceof or Class#isInstance() will take care of that already", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386120793", "createdAt": "2020-03-01T16:21:37Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/context/internal/ThreadLocalSessionContext.java", "diffHunk": "@@ -111,7 +111,7 @@ private boolean needsWrapping(Session session) {\n \t\t// try to make sure we don't wrap and already wrapped session\n \t\tif ( Proxy.isProxyClass( session.getClass() ) ) {\n \t\t\tfinal InvocationHandler invocationHandler = Proxy.getInvocationHandler( session );\n-\t\t\tif ( invocationHandler != null && TransactionProtectionWrapper.class.isInstance( invocationHandler ) ) {\n+\t\t\tif ( TransactionProtectionWrapper.class.isInstance( invocationHandler ) ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTcyNjQzOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/dialect/function/TimestampaddFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjoyNDozNVrOFwO9Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjoyNDozNVrOFwO9Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEyMDk3NQ==", "bodyText": "JDK8's method reference can simplify our code clutter dramatically", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386120975", "createdAt": "2020-03-01T16:24:35Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/dialect/function/TimestampaddFunction.java", "diffHunk": "@@ -90,8 +90,7 @@ public SelfRenderingFunctionSqlAstExpression expression(\n \t\t\tSqlAstNode... sqlAstArguments) {\n \t\tExpression to = (Expression) sqlAstArguments[2];\n \t\treturn new SelfRenderingFunctionSqlAstExpression(\n-\t\t\t\t(sqlAppender, sqlAstArguments1, walker)\n-\t\t\t\t\t\t-> render(sqlAppender, sqlAstArguments1, walker),\n+\t\t\t\tthis::render,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTgyMjA4OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/internal/FastSessionServices.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxOToyMzowOVrOFwPtUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxOToyMzowOVrOFwPtUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMzMyOA==", "bodyText": "Seems there is no reason to use putIfAbsent. put should be enough for initial map population.", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386133328", "createdAt": "2020-03-01T19:23:09Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/internal/FastSessionServices.java", "diffHunk": "@@ -221,11 +221,11 @@ private static boolean isTransactionAccessible(SessionFactoryImpl sf, Transactio\n \t\tHashMap<String,Object> p = new HashMap<>();\n \n \t\t//Static defaults:\n-\t\tp.putIfAbsent( AvailableSettings.FLUSH_MODE, FlushMode.AUTO.name() );\n-\t\tp.putIfAbsent( JPA_LOCK_SCOPE, PessimisticLockScope.EXTENDED.name() );\n-\t\tp.putIfAbsent( JPA_LOCK_TIMEOUT, LockOptions.WAIT_FOREVER );\n-\t\tp.putIfAbsent( JPA_SHARED_CACHE_RETRIEVE_MODE, CacheModeHelper.DEFAULT_RETRIEVE_MODE );\n-\t\tp.putIfAbsent( JPA_SHARED_CACHE_STORE_MODE, CacheModeHelper.DEFAULT_STORE_MODE );\n+\t\tp.put( AvailableSettings.FLUSH_MODE, FlushMode.AUTO.name() );\n+\t\tp.put( JPA_LOCK_SCOPE, PessimisticLockScope.EXTENDED.name() );\n+\t\tp.put( JPA_LOCK_TIMEOUT, LockOptions.WAIT_FOREVER );\n+\t\tp.put( JPA_SHARED_CACHE_RETRIEVE_MODE, CacheModeHelper.DEFAULT_RETRIEVE_MODE );\n+\t\tp.put( JPA_SHARED_CACHE_STORE_MODE, CacheModeHelper.DEFAULT_STORE_MODE );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjk5NTI4OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/StatefulPersistenceContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyMjo1N1rOFwaV8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzowMTo1OVrOFwerMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNzU3MA==", "bodyText": "just my personal opinion but not sure this helps code readability", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386307570", "createdAt": "2020-03-02T10:22:57Z", "author": {"login": "dreab8"}, "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/StatefulPersistenceContext.java", "diffHunk": "@@ -408,7 +408,7 @@ public Object getEntity(EntityKey key) {\n \n \t@Override\n \tpublic boolean containsEntity(EntityKey key) {\n-\t\treturn entitiesByKey == null ? false : entitiesByKey.containsKey( key );\n+\t\treturn entitiesByKey != null && entitiesByKey.containsKey( key );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3ODU0Ng==", "bodyText": "I copied the suggestion by Intellij IDE and I think its suggestion does make sense in this case. If you think the code change is unnecessary, I can revert it back.", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386378546", "createdAt": "2020-03-02T13:01:59Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/StatefulPersistenceContext.java", "diffHunk": "@@ -408,7 +408,7 @@ public Object getEntity(EntityKey key) {\n \n \t@Override\n \tpublic boolean containsEntity(EntityKey key) {\n-\t\treturn entitiesByKey == null ? false : entitiesByKey.containsKey( key );\n+\t\treturn entitiesByKey != null && entitiesByKey.containsKey( key );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNzU3MA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjk5NjI3OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/cfg/AbstractPropertyHolder.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyMzoxNlrOFwaWiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzoxMzoyOVrOFwfASQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNzcyMQ==", "bodyText": "just my personal opinion but not sure this helps code readability", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386307721", "createdAt": "2020-03-02T10:23:16Z", "author": {"login": "dreab8"}, "path": "hibernate-core/src/main/java/org/hibernate/cfg/AbstractPropertyHolder.java", "diffHunk": "@@ -134,7 +134,7 @@ protected ConverterDescriptor makeAttributeConverterDescriptor(AttributeConversi\n \n \t@Override\n \tpublic boolean isInIdClass() {\n-\t\treturn isInIdClass != null ? isInIdClass : parent != null ? parent.isInIdClass() : false;\n+\t\treturn isInIdClass != null ? isInIdClass : ( parent != null && parent.isInIdClass() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0Njg4MA==", "bodyText": "FWIW I think using && instead of a nested ?: is a lot more readable. However, the parens are unnecessary. ?: has a lower precedence than &&, so I would write:\nreturn isInIdClass != null ? isInIdClass : parent != null && parent.isInIdClass();", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386346880", "createdAt": "2020-03-02T11:47:31Z", "author": {"login": "gavinking"}, "path": "hibernate-core/src/main/java/org/hibernate/cfg/AbstractPropertyHolder.java", "diffHunk": "@@ -134,7 +134,7 @@ protected ConverterDescriptor makeAttributeConverterDescriptor(AttributeConversi\n \n \t@Override\n \tpublic boolean isInIdClass() {\n-\t\treturn isInIdClass != null ? isInIdClass : parent != null ? parent.isInIdClass() : false;\n+\t\treturn isInIdClass != null ? isInIdClass : ( parent != null && parent.isInIdClass() );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNzcyMQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1MTYwNQ==", "bodyText": "what about using  an If statement instead?\nif ( isInIdClass != null ) {\n   return isInIdClass;\n}\nelse if ( parent != null ) {\n   return parent.isInIdClass();\n}\nelse {\n   return false;\n}", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386351605", "createdAt": "2020-03-02T11:58:30Z", "author": {"login": "dreab8"}, "path": "hibernate-core/src/main/java/org/hibernate/cfg/AbstractPropertyHolder.java", "diffHunk": "@@ -134,7 +134,7 @@ protected ConverterDescriptor makeAttributeConverterDescriptor(AttributeConversi\n \n \t@Override\n \tpublic boolean isInIdClass() {\n-\t\treturn isInIdClass != null ? isInIdClass : parent != null ? parent.isInIdClass() : false;\n+\t\treturn isInIdClass != null ? isInIdClass : ( parent != null && parent.isInIdClass() );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNzcyMQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NDgyNw==", "bodyText": "FWIW I think using && instead of a nested ?: is a lot more readable. However, the parens are unnecessary. ?: has a lower precedence than &&, so I would write:\nreturn isInIdClass != null ? isInIdClass : parent != null && parent.isInIdClass();\n\nYeah, technically we don't need parenthesis. I used it to improve the 'perceived complexity' from human code reader. I agree with you generally speaking && is better, but in this case I think Andrea's suggestion makes sense and I accepted his suggestion.", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386374827", "createdAt": "2020-03-02T12:53:48Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/cfg/AbstractPropertyHolder.java", "diffHunk": "@@ -134,7 +134,7 @@ protected ConverterDescriptor makeAttributeConverterDescriptor(AttributeConversi\n \n \t@Override\n \tpublic boolean isInIdClass() {\n-\t\treturn isInIdClass != null ? isInIdClass : parent != null ? parent.isInIdClass() : false;\n+\t\treturn isInIdClass != null ? isInIdClass : ( parent != null && parent.isInIdClass() );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNzcyMQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM4Mzk0NQ==", "bodyText": "IMO as soon as the ternary becomes in any way \"non-simple\" we ought to use if/else.  So I agree with Andrea's suggestion as well.", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386383945", "createdAt": "2020-03-02T13:13:29Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/cfg/AbstractPropertyHolder.java", "diffHunk": "@@ -134,7 +134,7 @@ protected ConverterDescriptor makeAttributeConverterDescriptor(AttributeConversi\n \n \t@Override\n \tpublic boolean isInIdClass() {\n-\t\treturn isInIdClass != null ? isInIdClass : parent != null ? parent.isInIdClass() : false;\n+\t\treturn isInIdClass != null ? isInIdClass : ( parent != null && parent.isInIdClass() );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNzcyMQ=="}, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4054, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}