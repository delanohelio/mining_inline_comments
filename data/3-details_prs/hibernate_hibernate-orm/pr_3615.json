{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMjc5NDk4", "number": 3615, "title": "HHH-13310 getParameterValue() not working for collections", "bodyText": "https://hibernate.atlassian.net/browse/HHH-13310\nI tried to avoid any change to API/SPIs, but I ended up adding the  isAParameterList to org.hibernate.query.spi.QueryParameterBindings, having this method a default should make the PR backportable also to 5.4 and 5.3.", "createdAt": "2020-10-29T13:34:59Z", "url": "https://github.com/hibernate/hibernate-orm/pull/3615", "merged": true, "mergeCommit": {"oid": "e67874e6ec9d6ac302dd2441b06c91c884933981"}, "closed": true, "closedAt": "2020-11-10T19:02:02Z", "author": {"login": "dreab8"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXS18FAFqTUxOTY5MzcxMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbN4SLABqjM5ODA0MTA5Mjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NjkzNzEy", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#pullrequestreview-519693712", "createdAt": "2020-10-29T13:59:21Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzo1OToyMlrOHqdJDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDoxMzowMFrOHqdxVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI3OTY5NQ==", "bodyText": "Not a fan of passing these Strings.  We incur the overhead of building them regardless of whether they are used or not.  The pattern I've adopted to deal with situations like this (allowing callers to handle exceptional cases) is to pass along functional interfaces.  Here e.g. instead of\n\t\treturn (T) getParameterValue(\n\t\t\t\t(QueryParameter) parameter,\n\t\t\t\tnotBoundErrorMessage,\n\t\t\t\tcouldNotResolveErrorMessage,\n\t\t\t\tboundCheckingLogMessage\n\t\t);\n\nI'd use something like:\n\t\treturn (T) getParameterValue(\n\t\t\t\t(QueryParameter) parameter,\n\t\t\t\t() -> new IllegalStateException( \"Parameter value not yet bound : \" + name ),\n\t\t\t\t() -> new IllegalArgumentException( \"Could not resolve parameter by name - \" + name, e ),\n\t\t\t\t...\n\t\t);\n\nAlso not generally a fan of mixing String concatenation and formatting.  Especially in the same String", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514279695", "createdAt": "2020-10-29T13:59:22Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/query/internal/AbstractProducedQuery.java", "diffHunk": "@@ -749,57 +749,86 @@ public boolean isBound(Parameter<?> parameter) {\n \t@Override\n \tpublic <T> T getParameterValue(Parameter<T> parameter) {\n \t\tLOGGER.tracef( \"#getParameterValue(%s)\", parameter );\n-\n \t\tgetProducer().checkOpen( false );\n \n-\t\tif ( !getParameterMetadata().containsReference( (QueryParameter) parameter ) ) {\n-\t\t\tthrow new IllegalArgumentException( \"Parameter reference [\" + parameter + \"] did not come from this query\" );\n-\t\t}\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + parameter.toString();\n+\t\tfinal String couldNotResolveErrorMessage = \"Parameter reference [\" + parameter + \"] did not come from this query\";\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether parameter reference \" + parameter + \" is bound : %s\";\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI5MDAwNQ==", "bodyText": "The A in the name is irrelevant.  The name should be #isParameterList.  But personally I like #isMultiValuedBinding  better", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514290005", "createdAt": "2020-10-29T14:13:00Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/query/spi/QueryParameterBindings.java", "diffHunk": "@@ -35,4 +35,12 @@\n \tType[] collectPositionalBindTypes();\n \tObject[] collectPositionalBindValues();\n \tMap<String,TypedValue> collectNamedParameterBindings();\n+\n+\t/**\n+\t * @deprecated expect a different approach to org.hibernate.engine.spi.QueryParameters in 6.0\n+\t */\n+\t@Deprecated\n+\tdefault boolean isAParameterList(QueryParameter parameter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NzQ1MjYx", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#pullrequestreview-519745261", "createdAt": "2020-10-29T14:47:28Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo0NzoyOFrOHqfbIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo0NzoyOFrOHqfbIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxNzA4OQ==", "bodyText": "Do we have inconsistent whitespace usage issue above? The content might cease to align vertically correctly if we change the tab size.", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514317089", "createdAt": "2020-10-29T14:47:28Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/query/internal/AbstractProducedQuery.java", "diffHunk": "@@ -749,57 +749,86 @@ public boolean isBound(Parameter<?> parameter) {\n \t@Override\n \tpublic <T> T getParameterValue(Parameter<T> parameter) {\n \t\tLOGGER.tracef( \"#getParameterValue(%s)\", parameter );\n-\n \t\tgetProducer().checkOpen( false );\n \n-\t\tif ( !getParameterMetadata().containsReference( (QueryParameter) parameter ) ) {\n-\t\t\tthrow new IllegalArgumentException( \"Parameter reference [\" + parameter + \"] did not come from this query\" );\n-\t\t}\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + parameter.toString();\n+\t\tfinal String couldNotResolveErrorMessage = \"Parameter reference [\" + parameter + \"] did not come from this query\";\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether parameter reference \" + parameter + \" is bound : %s\";\n \n-\t\tfinal QueryParameterBinding<T> binding = getQueryParameterBindings().getBinding( (QueryParameter<T>) parameter );\n-\t\tLOGGER.debugf( \"Checking whether parameter reference [%s] is bound : %s\", parameter, binding.isBound() );\n-\t\tif ( !binding.isBound() ) {\n-\t\t\tthrow new IllegalStateException( \"Parameter value not yet bound : \" + parameter.toString() );\n-\t\t}\n-\t\treturn binding.getBindValue();\n+\t\treturn (T) getParameterValue(\n+\t\t\t\t(QueryParameter) parameter,\n+\t\t\t\tnotBoundErrorMessage,\n+\t\t\t\tcouldNotResolveErrorMessage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NzUyMzc4", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#pullrequestreview-519752378", "createdAt": "2020-10-29T14:53:57Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1Mzo1N1rOHqfvSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1Mzo1N1rOHqfvSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMjI1MA==", "bodyText": "Seems the exception is not related to the method parameter. IllegalStatementException is more appropriate?", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514322250", "createdAt": "2020-10-29T14:53:57Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/query/internal/AbstractProducedQuery.java", "diffHunk": "@@ -749,57 +749,86 @@ public boolean isBound(Parameter<?> parameter) {\n \t@Override\n \tpublic <T> T getParameterValue(Parameter<T> parameter) {\n \t\tLOGGER.tracef( \"#getParameterValue(%s)\", parameter );\n-\n \t\tgetProducer().checkOpen( false );\n \n-\t\tif ( !getParameterMetadata().containsReference( (QueryParameter) parameter ) ) {\n-\t\t\tthrow new IllegalArgumentException( \"Parameter reference [\" + parameter + \"] did not come from this query\" );\n-\t\t}\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + parameter.toString();\n+\t\tfinal String couldNotResolveErrorMessage = \"Parameter reference [\" + parameter + \"] did not come from this query\";\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether parameter reference \" + parameter + \" is bound : %s\";\n \n-\t\tfinal QueryParameterBinding<T> binding = getQueryParameterBindings().getBinding( (QueryParameter<T>) parameter );\n-\t\tLOGGER.debugf( \"Checking whether parameter reference [%s] is bound : %s\", parameter, binding.isBound() );\n-\t\tif ( !binding.isBound() ) {\n-\t\t\tthrow new IllegalStateException( \"Parameter value not yet bound : \" + parameter.toString() );\n-\t\t}\n-\t\treturn binding.getBindValue();\n+\t\treturn (T) getParameterValue(\n+\t\t\t\t(QueryParameter) parameter,\n+\t\t\t\tnotBoundErrorMessage,\n+\t\t\t\tcouldNotResolveErrorMessage,\n+\t\t\t\tboundCheckingLogMessage\n+\t\t);\n \t}\n \n \t@Override\n \tpublic Object getParameterValue(String name) {\n \t\tgetProducer().checkOpen( false );\n \n-\t\tfinal QueryParameterBinding binding;\n-\t\ttry {\n-\t\t\tbinding = getQueryParameterBindings().getBinding( name );\n-\t\t}\n-\t\tcatch (QueryParameterException e) {\n-\t\t\tthrow new IllegalArgumentException( \"Could not resolve parameter by name - \" + name, e );\n-\t\t}\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + name;\n+\t\tfinal String couldNotResolveErrorMessage = \"Could not resolve parameter by name - \" + name;\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether named parameter [ \" + name + \"] is bound : %s\";\n \n-\t\tLOGGER.debugf( \"Checking whether named parameter [%s] is bound : %s\", name, binding.isBound() );\n-\t\tif ( !binding.isBound() ) {\n-\t\t\tthrow new IllegalStateException( \"Parameter value not yet bound : \" + name );\n-\t\t}\n-\t\treturn binding.getBindValue();\n+\t\tfinal QueryParameter<Object> queryParameter = getParameterMetadata().getQueryParameter( name );\n+\t\treturn getParameterValue(\n+\t\t\t\tqueryParameter,\n+\t\t\t\tnotBoundErrorMessage,\n+\t\t\t\tcouldNotResolveErrorMessage,\n+\t\t\t\tboundCheckingLogMessage\n+\t\t);\n \t}\n \n \t@Override\n \tpublic Object getParameterValue(int position) {\n \t\tgetProducer().checkOpen( false );\n \n-\t\tfinal QueryParameterBinding binding;\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + position;\n+\t\tfinal String couldNotResolveErrorMessage = \"Could not resolve parameter by position - \" + position;\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether positional parameter [ \" + position + \"] is bound : %s\";\n+\n+\t\tfinal QueryParameter<Object> queryParameter = getParameterMetadata().getQueryParameter( position );\n+\t\treturn getParameterValue(\n+\t\t\t\tqueryParameter,\n+\t\t\t\tnotBoundErrorMessage,\n+\t\t\t\tcouldNotResolveErrorMessage,\n+\t\t\t\tboundCheckingLogMessage\n+\t\t);\n+\t}\n+\n+\tprivate Object getParameterValue(\n+\t\t\tQueryParameter queryParameter,\n+\t\t\tString notBoundErrorMessage,\n+\t\t\tString couldNotResolveErrorMessage,\n+\t\t\tString boundCheckingLogMessage) {\n \t\ttry {\n-\t\t\tbinding = getQueryParameterBindings().getBinding( position );\n+\t\t\tfinal QueryParameterBindings parameterBindings = getQueryParameterBindings();\n+\n+\t\t\tif ( queryParameter == null ) {\n+\t\t\t\tthrow new IllegalArgumentException( couldNotResolveErrorMessage );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NzU0Mzg0", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#pullrequestreview-519754384", "createdAt": "2020-10-29T14:55:42Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1NTo0MlrOHqf1Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1NTo0MlrOHqf1Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMzgwNg==", "bodyText": "We should pay attention to the performance cost for the above statement as well. The first parameter building cost will be paid even when we disable debug level logging!", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514323806", "createdAt": "2020-10-29T14:55:42Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/query/internal/AbstractProducedQuery.java", "diffHunk": "@@ -749,57 +749,86 @@ public boolean isBound(Parameter<?> parameter) {\n \t@Override\n \tpublic <T> T getParameterValue(Parameter<T> parameter) {\n \t\tLOGGER.tracef( \"#getParameterValue(%s)\", parameter );\n-\n \t\tgetProducer().checkOpen( false );\n \n-\t\tif ( !getParameterMetadata().containsReference( (QueryParameter) parameter ) ) {\n-\t\t\tthrow new IllegalArgumentException( \"Parameter reference [\" + parameter + \"] did not come from this query\" );\n-\t\t}\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + parameter.toString();\n+\t\tfinal String couldNotResolveErrorMessage = \"Parameter reference [\" + parameter + \"] did not come from this query\";\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether parameter reference \" + parameter + \" is bound : %s\";\n \n-\t\tfinal QueryParameterBinding<T> binding = getQueryParameterBindings().getBinding( (QueryParameter<T>) parameter );\n-\t\tLOGGER.debugf( \"Checking whether parameter reference [%s] is bound : %s\", parameter, binding.isBound() );\n-\t\tif ( !binding.isBound() ) {\n-\t\t\tthrow new IllegalStateException( \"Parameter value not yet bound : \" + parameter.toString() );\n-\t\t}\n-\t\treturn binding.getBindValue();\n+\t\treturn (T) getParameterValue(\n+\t\t\t\t(QueryParameter) parameter,\n+\t\t\t\tnotBoundErrorMessage,\n+\t\t\t\tcouldNotResolveErrorMessage,\n+\t\t\t\tboundCheckingLogMessage\n+\t\t);\n \t}\n \n \t@Override\n \tpublic Object getParameterValue(String name) {\n \t\tgetProducer().checkOpen( false );\n \n-\t\tfinal QueryParameterBinding binding;\n-\t\ttry {\n-\t\t\tbinding = getQueryParameterBindings().getBinding( name );\n-\t\t}\n-\t\tcatch (QueryParameterException e) {\n-\t\t\tthrow new IllegalArgumentException( \"Could not resolve parameter by name - \" + name, e );\n-\t\t}\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + name;\n+\t\tfinal String couldNotResolveErrorMessage = \"Could not resolve parameter by name - \" + name;\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether named parameter [ \" + name + \"] is bound : %s\";\n \n-\t\tLOGGER.debugf( \"Checking whether named parameter [%s] is bound : %s\", name, binding.isBound() );\n-\t\tif ( !binding.isBound() ) {\n-\t\t\tthrow new IllegalStateException( \"Parameter value not yet bound : \" + name );\n-\t\t}\n-\t\treturn binding.getBindValue();\n+\t\tfinal QueryParameter<Object> queryParameter = getParameterMetadata().getQueryParameter( name );\n+\t\treturn getParameterValue(\n+\t\t\t\tqueryParameter,\n+\t\t\t\tnotBoundErrorMessage,\n+\t\t\t\tcouldNotResolveErrorMessage,\n+\t\t\t\tboundCheckingLogMessage\n+\t\t);\n \t}\n \n \t@Override\n \tpublic Object getParameterValue(int position) {\n \t\tgetProducer().checkOpen( false );\n \n-\t\tfinal QueryParameterBinding binding;\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + position;\n+\t\tfinal String couldNotResolveErrorMessage = \"Could not resolve parameter by position - \" + position;\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether positional parameter [ \" + position + \"] is bound : %s\";\n+\n+\t\tfinal QueryParameter<Object> queryParameter = getParameterMetadata().getQueryParameter( position );\n+\t\treturn getParameterValue(\n+\t\t\t\tqueryParameter,\n+\t\t\t\tnotBoundErrorMessage,\n+\t\t\t\tcouldNotResolveErrorMessage,\n+\t\t\t\tboundCheckingLogMessage\n+\t\t);\n+\t}\n+\n+\tprivate Object getParameterValue(\n+\t\t\tQueryParameter queryParameter,\n+\t\t\tString notBoundErrorMessage,\n+\t\t\tString couldNotResolveErrorMessage,\n+\t\t\tString boundCheckingLogMessage) {\n \t\ttry {\n-\t\t\tbinding = getQueryParameterBindings().getBinding( position );\n+\t\t\tfinal QueryParameterBindings parameterBindings = getQueryParameterBindings();\n+\n+\t\t\tif ( queryParameter == null ) {\n+\t\t\t\tthrow new IllegalArgumentException( couldNotResolveErrorMessage );\n+\t\t\t}\n+\t\t\tif ( parameterBindings.isAParameterList( queryParameter ) ) {\n+\t\t\t\tfinal QueryParameterListBinding<Object> queryParameterListBinding = parameterBindings\n+\t\t\t\t\t\t.getQueryParameterListBinding( queryParameter );\n+\t\t\t\tfinal Collection<Object> bindValues = queryParameterListBinding.getBindValues();\n+\t\t\t\tif ( bindValues == null ) {\n+\t\t\t\t\tthrow new IllegalStateException( notBoundErrorMessage );\n+\t\t\t\t}\n+\t\t\t\treturn bindValues;\n+\t\t\t}\n+\n+\t\t\tfinal QueryParameterBinding<Object> binding = parameterBindings.getBinding( queryParameter );\n+\t\t\tfinal boolean bound = binding.isBound();\n+\t\t\tLOGGER.debugf( boundCheckingLogMessage, bound );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NzU2Mzkw", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#pullrequestreview-519756390", "createdAt": "2020-10-29T14:57:31Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1NzozMVrOHqf7Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1NzozMVrOHqf7Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNTM1MQ==", "bodyText": "Again, personally I think the following is more readable:\nreturn parameterListBindingMap != null && parameterListBindingMap.containsKey( parameter );", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514325351", "createdAt": "2020-10-29T14:57:31Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/query/internal/QueryParameterBindingsImpl.java", "diffHunk": "@@ -317,6 +317,14 @@ public void verifyParametersBound(boolean reserveFirstParameter) {\n //\t\treturn values.toArray( new Object[values.size()] );\n \t}\n \n+\t@Override\n+\tpublic boolean isAParameterList(QueryParameter parameter) {\n+\t\tif ( parameterListBindingMap == null ) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn parameterListBindingMap.containsKey( parameter );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fc14b9517539d8b079ccaaf9034bd49a990fe9c", "author": {"user": {"login": "dreab8", "name": "Andrea Boriero"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/3fc14b9517539d8b079ccaaf9034bd49a990fe9c", "committedDate": "2020-11-02T11:07:51Z", "message": "HHH-13310 Add test for issue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "21b95781845217dded4a4ff3b7dab8aedcb96f00", "author": {"user": {"login": "dreab8", "name": "Andrea Boriero"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/21b95781845217dded4a4ff3b7dab8aedcb96f00", "committedDate": "2020-11-10T18:42:48Z", "message": "HHH-13310 getParameterValue() not working for collections"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "21b95781845217dded4a4ff3b7dab8aedcb96f00", "author": {"user": {"login": "dreab8", "name": "Andrea Boriero"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/21b95781845217dded4a4ff3b7dab8aedcb96f00", "committedDate": "2020-11-10T18:42:48Z", "message": "HHH-13310 getParameterValue() not working for collections"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2762, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}