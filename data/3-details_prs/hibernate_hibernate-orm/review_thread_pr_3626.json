{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3ODg5ODI0", "number": 3626, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDo1MDozNFrOE3K1xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDo1MjoxM1rOE3K4aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mjg0NzQyOnYy", "diffSide": "LEFT", "path": "gradle/java-module.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDo1MDozNVrOHwW2Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDo1ODowOFrOHwXJuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ2ODA1OQ==", "bodyText": "just wondering, was it necessary to remove these?", "url": "https://github.com/hibernate/hibernate-orm/pull/3626#discussion_r520468059", "createdAt": "2020-11-10T10:50:35Z", "author": {"login": "Sanne"}, "path": "gradle/java-module.gradle", "diffHunk": "@@ -112,17 +112,72 @@ dependencies {\n \n tasks.withType( JavaCompile ) {\n \toptions.encoding = 'UTF-8'\n-\tsourceCompatibility = project.baselineJavaVersion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4182ec5d55479c075f2d2d00cca0cc26828cf070"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MzAxNg==", "bodyText": "I didn't remove these, I just moved them further below. We can't use sourceCompatibility and such when toolchains are enabled, so I needed an if block.", "url": "https://github.com/hibernate/hibernate-orm/pull/3626#discussion_r520473016", "createdAt": "2020-11-10T10:58:08Z", "author": {"login": "yrodiere"}, "path": "gradle/java-module.gradle", "diffHunk": "@@ -112,17 +112,72 @@ dependencies {\n \n tasks.withType( JavaCompile ) {\n \toptions.encoding = 'UTF-8'\n-\tsourceCompatibility = project.baselineJavaVersion", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ2ODA1OQ=="}, "originalCommit": {"oid": "4182ec5d55479c075f2d2d00cca0cc26828cf070"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mjg1NDE3OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDo1MjoxM1rOHwW6mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDo1NzozMlrOHwXIGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ2OTE0NA==", "bodyText": "hu?? Have a pointer about what kinds of things it needs doing?", "url": "https://github.com/hibernate/hibernate-orm/pull/3626#discussion_r520469144", "createdAt": "2020-11-10T10:52:13Z", "author": {"login": "Sanne"}, "path": "settings.gradle", "diffHunk": "@@ -13,35 +13,79 @@ if ( !JavaVersion.current().java8Compatible ) {\n     throw new GradleException( \"Gradle must be run with Java 8 or later\" )\n }\n \n-// Consume the property 'testedJavaVersion' here and\n-// set it on gradle.ext so that we can inspect the result in build.gradle.\n-// We wouldn't be able to do that if we consumed\n-// the property in base-information.gradle and set it on project.ext.\n-\n-if ( hasProperty( 'testedJavaVersion' ) ) {\n-    logger.warn( \"[WARN] Targeting Java version '$testedJavaVersion' in tests.\" )\n-    gradle.ext.testedJavaVersion = testedJavaVersion\n-    gradle.ext.testedJavaVersionAsEnum = JavaVersion.toVersion( testedJavaVersion )\n-}\n-else {\n-    // We will simply use Gradle's JDK for compilation, tests and javadoc generation.\n-    def major\n-    if ( JavaVersion.current() == JavaVersion.VERSION_HIGHER) {\n-        logger.warn( \"Gradle does not support this JDK, because it is too recent; build is likely to fail.\" +\n-                \" To avoid failures, you should specify an older Java version in the 'testedJavaVersion' parameter.\" +\n-                \" Just append the following to your gradle command:\" +\n-                \" '-PtestedJavaVersion=<major version of your newer JDK, e.g. 14>'\" )\n-        // Use a hack to retrieve the major as a string.\n-        // This only works for Java 9+ (we're at least on Java 18 here).\n-        gradle.ext.testedJavaVersion = System.getProperty( 'java.specification.version' )\n+gradle.ext.baselineJavaVersion = JavaLanguageVersion.of( 8 )\n+\n+// Gradle does bytecode transformation on tests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4182ec5d55479c075f2d2d00cca0cc26828cf070"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MTc3Mg==", "bodyText": "Not really, but you can try setting the max supported version to 16 and running the build on 16: you'll see errors related to \"incompatible major.minor\" pop up, originating from Gradle.\nMaybe Gradle just inspects the bytecode, I don't know. But it definitely is sensitive to the bytecode version.", "url": "https://github.com/hibernate/hibernate-orm/pull/3626#discussion_r520471772", "createdAt": "2020-11-10T10:56:17Z", "author": {"login": "yrodiere"}, "path": "settings.gradle", "diffHunk": "@@ -13,35 +13,79 @@ if ( !JavaVersion.current().java8Compatible ) {\n     throw new GradleException( \"Gradle must be run with Java 8 or later\" )\n }\n \n-// Consume the property 'testedJavaVersion' here and\n-// set it on gradle.ext so that we can inspect the result in build.gradle.\n-// We wouldn't be able to do that if we consumed\n-// the property in base-information.gradle and set it on project.ext.\n-\n-if ( hasProperty( 'testedJavaVersion' ) ) {\n-    logger.warn( \"[WARN] Targeting Java version '$testedJavaVersion' in tests.\" )\n-    gradle.ext.testedJavaVersion = testedJavaVersion\n-    gradle.ext.testedJavaVersionAsEnum = JavaVersion.toVersion( testedJavaVersion )\n-}\n-else {\n-    // We will simply use Gradle's JDK for compilation, tests and javadoc generation.\n-    def major\n-    if ( JavaVersion.current() == JavaVersion.VERSION_HIGHER) {\n-        logger.warn( \"Gradle does not support this JDK, because it is too recent; build is likely to fail.\" +\n-                \" To avoid failures, you should specify an older Java version in the 'testedJavaVersion' parameter.\" +\n-                \" Just append the following to your gradle command:\" +\n-                \" '-PtestedJavaVersion=<major version of your newer JDK, e.g. 14>'\" )\n-        // Use a hack to retrieve the major as a string.\n-        // This only works for Java 9+ (we're at least on Java 18 here).\n-        gradle.ext.testedJavaVersion = System.getProperty( 'java.specification.version' )\n+gradle.ext.baselineJavaVersion = JavaLanguageVersion.of( 8 )\n+\n+// Gradle does bytecode transformation on tests.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ2OTE0NA=="}, "originalCommit": {"oid": "4182ec5d55479c075f2d2d00cca0cc26828cf070"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MjYwMA==", "bodyText": "ok, thanks.", "url": "https://github.com/hibernate/hibernate-orm/pull/3626#discussion_r520472600", "createdAt": "2020-11-10T10:57:32Z", "author": {"login": "Sanne"}, "path": "settings.gradle", "diffHunk": "@@ -13,35 +13,79 @@ if ( !JavaVersion.current().java8Compatible ) {\n     throw new GradleException( \"Gradle must be run with Java 8 or later\" )\n }\n \n-// Consume the property 'testedJavaVersion' here and\n-// set it on gradle.ext so that we can inspect the result in build.gradle.\n-// We wouldn't be able to do that if we consumed\n-// the property in base-information.gradle and set it on project.ext.\n-\n-if ( hasProperty( 'testedJavaVersion' ) ) {\n-    logger.warn( \"[WARN] Targeting Java version '$testedJavaVersion' in tests.\" )\n-    gradle.ext.testedJavaVersion = testedJavaVersion\n-    gradle.ext.testedJavaVersionAsEnum = JavaVersion.toVersion( testedJavaVersion )\n-}\n-else {\n-    // We will simply use Gradle's JDK for compilation, tests and javadoc generation.\n-    def major\n-    if ( JavaVersion.current() == JavaVersion.VERSION_HIGHER) {\n-        logger.warn( \"Gradle does not support this JDK, because it is too recent; build is likely to fail.\" +\n-                \" To avoid failures, you should specify an older Java version in the 'testedJavaVersion' parameter.\" +\n-                \" Just append the following to your gradle command:\" +\n-                \" '-PtestedJavaVersion=<major version of your newer JDK, e.g. 14>'\" )\n-        // Use a hack to retrieve the major as a string.\n-        // This only works for Java 9+ (we're at least on Java 18 here).\n-        gradle.ext.testedJavaVersion = System.getProperty( 'java.specification.version' )\n+gradle.ext.baselineJavaVersion = JavaLanguageVersion.of( 8 )\n+\n+// Gradle does bytecode transformation on tests.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ2OTE0NA=="}, "originalCommit": {"oid": "4182ec5d55479c075f2d2d00cca0cc26828cf070"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4103, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}