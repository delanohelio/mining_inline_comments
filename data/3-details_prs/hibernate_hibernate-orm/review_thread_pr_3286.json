{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDgwMDU1", "number": 3286, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxODo1NDo0MFrODmHW2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxODo1NDo0MFrODmHW2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjkzMDE5OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/proxy/pojo/ProxyFactoryHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxODo1NDo0MFrOFzW0TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzozNTo0OFrOFz80fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NTUzMw==", "bodyText": "It seems getterOrSetter parameter is not necessary for we can get that information if we refactor the method to accept either Getter or Setter only. For instance\nprivate static void validateGetterSetterMethodProxyability(Object getterOrSetter ) {\n                String methodCategory = getterOrSetter instanceof Getter ? \"Getter\" : \"Setter\";\n                Method method = getterOrSetter instanceof Getter ? Getter.class.cast(getterOrSetter).getMethod(): Setter.class.cast(getterOrSetter).getMethod();\n\t\tif ( method != null && Modifier.isFinal( method.getModifiers() ) ) {\n\t\t\tthrow new HibernateException(\n\t\t\t\t\tString.format(\n\t\t\t\t\t\t\t\"%s methods of lazy classes cannot be final: %s#%s\",\n\t\t\t\t\t\t\tmethodCategory,\n\t\t\t\t\t\t\tmethod.getDeclaringClass().getName(),\n\t\t\t\t\t\t\tmethod.getName()\n\t\t\t\t\t)\n\t\t\t);\n\nI also changed the visibility from public to private above. If Getter and Setter shared some common interface (like methodAware), it would be more elegant and straightforward.\nnot a big deal for sure and feel free to ignore my comment.", "url": "https://github.com/hibernate/hibernate-orm/pull/3286#discussion_r389395533", "createdAt": "2020-03-08T18:54:40Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/proxy/pojo/ProxyFactoryHelper.java", "diffHunk": "@@ -84,14 +85,21 @@ public static void validateProxyability(final PersistentClass persistentClass) {\n \t\tClass clazz = persistentClass.getMappedClass();\n \t\twhile ( properties.hasNext() ) {\n \t\t\tProperty property = (Property) properties.next();\n-\t\t\tMethod method = property.getGetter( clazz ).getMethod();\n-\t\t\tif ( method != null && Modifier.isFinal( method.getModifiers() ) ) {\n-\t\t\t\tLOG.gettersOfLazyClassesCannotBeFinal( persistentClass.getEntityName(), property.getName() );\n-\t\t\t}\n-\t\t\tmethod = property.getSetter( clazz ).getMethod();\n-\t\t\tif ( method != null && Modifier.isFinal( method.getModifiers() ) ) {\n-\t\t\t\tLOG.settersOfLazyClassesCannotBeFinal( persistentClass.getEntityName(), property.getName() );\n-\t\t\t}\n+\t\t\tvalidateGetterSetterMethodProxyability( \"Getter\", property.getGetter( clazz ).getMethod() );\n+\t\t\tvalidateGetterSetterMethodProxyability( \"Setter\", property.getSetter( clazz ).getMethod() );\n+\t\t}\n+\t}\n+\n+\tpublic static void validateGetterSetterMethodProxyability(String getterOrSetter, Method method ) {\n+\t\tif ( method != null && Modifier.isFinal( method.getModifiers() ) ) {\n+\t\t\tthrow new HibernateException(\n+\t\t\t\t\tString.format(\n+\t\t\t\t\t\t\t\"%s methods of lazy classes cannot be final: %s#%s\",\n+\t\t\t\t\t\t\tgetterOrSetter,\n+\t\t\t\t\t\t\tmethod.getDeclaringClass().getName(),\n+\t\t\t\t\t\t\tmethod.getName()\n+\t\t\t\t\t)\n+\t\t\t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c48caafadbf0c8fbba17871ed96307091cc4b966"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODgwNw==", "bodyText": "@NathanQingyangXu , PojoEntityTuplizer#buildProxyFactory also calls `ProxyFactoryHelper#validateGetterSetterMethodProxyability```, so it needs to be public.\nOf course, ProxyFactoryHelper#validateProxyability could have repeated the call to ProxyFactoryHelper#extractProxyGetIdentifierMethod, but then I would have to change the signature of the method to accept a Setter and a Getter.\nSince ProxyFactoryHelper is an SPI, I would need to deprecate the original method. It just didn't seem worthwhile.\nI just did what I thought would have the smallest impact.", "url": "https://github.com/hibernate/hibernate-orm/pull/3286#discussion_r390008807", "createdAt": "2020-03-09T23:05:36Z", "author": {"login": "gbadner"}, "path": "hibernate-core/src/main/java/org/hibernate/proxy/pojo/ProxyFactoryHelper.java", "diffHunk": "@@ -84,14 +85,21 @@ public static void validateProxyability(final PersistentClass persistentClass) {\n \t\tClass clazz = persistentClass.getMappedClass();\n \t\twhile ( properties.hasNext() ) {\n \t\t\tProperty property = (Property) properties.next();\n-\t\t\tMethod method = property.getGetter( clazz ).getMethod();\n-\t\t\tif ( method != null && Modifier.isFinal( method.getModifiers() ) ) {\n-\t\t\t\tLOG.gettersOfLazyClassesCannotBeFinal( persistentClass.getEntityName(), property.getName() );\n-\t\t\t}\n-\t\t\tmethod = property.getSetter( clazz ).getMethod();\n-\t\t\tif ( method != null && Modifier.isFinal( method.getModifiers() ) ) {\n-\t\t\t\tLOG.settersOfLazyClassesCannotBeFinal( persistentClass.getEntityName(), property.getName() );\n-\t\t\t}\n+\t\t\tvalidateGetterSetterMethodProxyability( \"Getter\", property.getGetter( clazz ).getMethod() );\n+\t\t\tvalidateGetterSetterMethodProxyability( \"Setter\", property.getSetter( clazz ).getMethod() );\n+\t\t}\n+\t}\n+\n+\tpublic static void validateGetterSetterMethodProxyability(String getterOrSetter, Method method ) {\n+\t\tif ( method != null && Modifier.isFinal( method.getModifiers() ) ) {\n+\t\t\tthrow new HibernateException(\n+\t\t\t\t\tString.format(\n+\t\t\t\t\t\t\t\"%s methods of lazy classes cannot be final: %s#%s\",\n+\t\t\t\t\t\t\tgetterOrSetter,\n+\t\t\t\t\t\t\tmethod.getDeclaringClass().getName(),\n+\t\t\t\t\t\t\tmethod.getName()\n+\t\t\t\t\t)\n+\t\t\t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NTUzMw=="}, "originalCommit": {"oid": "c48caafadbf0c8fbba17871ed96307091cc4b966"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxODE3NQ==", "bodyText": "thanks for the explanation", "url": "https://github.com/hibernate/hibernate-orm/pull/3286#discussion_r390018175", "createdAt": "2020-03-09T23:35:48Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/proxy/pojo/ProxyFactoryHelper.java", "diffHunk": "@@ -84,14 +85,21 @@ public static void validateProxyability(final PersistentClass persistentClass) {\n \t\tClass clazz = persistentClass.getMappedClass();\n \t\twhile ( properties.hasNext() ) {\n \t\t\tProperty property = (Property) properties.next();\n-\t\t\tMethod method = property.getGetter( clazz ).getMethod();\n-\t\t\tif ( method != null && Modifier.isFinal( method.getModifiers() ) ) {\n-\t\t\t\tLOG.gettersOfLazyClassesCannotBeFinal( persistentClass.getEntityName(), property.getName() );\n-\t\t\t}\n-\t\t\tmethod = property.getSetter( clazz ).getMethod();\n-\t\t\tif ( method != null && Modifier.isFinal( method.getModifiers() ) ) {\n-\t\t\t\tLOG.settersOfLazyClassesCannotBeFinal( persistentClass.getEntityName(), property.getName() );\n-\t\t\t}\n+\t\t\tvalidateGetterSetterMethodProxyability( \"Getter\", property.getGetter( clazz ).getMethod() );\n+\t\t\tvalidateGetterSetterMethodProxyability( \"Setter\", property.getSetter( clazz ).getMethod() );\n+\t\t}\n+\t}\n+\n+\tpublic static void validateGetterSetterMethodProxyability(String getterOrSetter, Method method ) {\n+\t\tif ( method != null && Modifier.isFinal( method.getModifiers() ) ) {\n+\t\t\tthrow new HibernateException(\n+\t\t\t\t\tString.format(\n+\t\t\t\t\t\t\t\"%s methods of lazy classes cannot be final: %s#%s\",\n+\t\t\t\t\t\t\tgetterOrSetter,\n+\t\t\t\t\t\t\tmethod.getDeclaringClass().getName(),\n+\t\t\t\t\t\t\tmethod.getName()\n+\t\t\t\t\t)\n+\t\t\t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NTUzMw=="}, "originalCommit": {"oid": "c48caafadbf0c8fbba17871ed96307091cc4b966"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4060, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}