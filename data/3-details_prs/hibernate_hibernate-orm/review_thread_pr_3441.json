{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MDc1OTU3", "number": 3441, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo1MTozMFrOEHLhIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxOTowOTowNlrOEHNoBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTY0MTkyOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/type/descriptor/sql/internal/JdbcLiteralFormatterCharacterData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo1MTozMFrOGmbXfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzoyMzozMFrOGmcNpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0NzQ1NQ==", "bodyText": "Any difference between\nString.format( Locale.ROOT, \"%s\", inlineLiteral );\n\nand\ninlineLiteral\n\nA little bit curious for I think this might be one of my knowledge gaps", "url": "https://github.com/hibernate/hibernate-orm/pull/3441#discussion_r442947455", "createdAt": "2020-06-19T16:51:30Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/type/descriptor/sql/internal/JdbcLiteralFormatterCharacterData.java", "diffHunk": "@@ -34,12 +37,15 @@ public JdbcLiteralFormatterCharacterData(JavaTypeDescriptor javaTypeDescriptor,\n \tpublic String toJdbcLiteral(Object value, Dialect dialect, SharedSessionContractImplementor session) {\n \t\tfinal String literalValue = unwrap( value, String.class, session );\n \n+\t\tfinal String inlineLiteral = dialect.inlineLiteral( literalValue );\n+\n \t\tif ( isNationalized ) {\n \t\t\t// is there a standardized form for n-string literals?  This is the SQL Server syntax for sure\n-\t\t\treturn String.format( Locale.ROOT, \"n'%s'\", literalValue );\n+\t\t\treturn String.format( Locale.ROOT, NATIONALIZED_FORMAT, inlineLiteral );\n+\n \t\t}\n \t\telse {\n-\t\t\treturn String.format( Locale.ROOT, \"'%s'\", literalValue );\n+\t\t\treturn String.format( Locale.ROOT, FORMAT, inlineLiteral );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2MTMxNw==", "bodyText": "good point, I think we can avoid return String.format( Locale.ROOT, FORMAT, inlineLiteral ); and just return inlineLiteral", "url": "https://github.com/hibernate/hibernate-orm/pull/3441#discussion_r442961317", "createdAt": "2020-06-19T17:23:30Z", "author": {"login": "dreab8"}, "path": "hibernate-core/src/main/java/org/hibernate/type/descriptor/sql/internal/JdbcLiteralFormatterCharacterData.java", "diffHunk": "@@ -34,12 +37,15 @@ public JdbcLiteralFormatterCharacterData(JavaTypeDescriptor javaTypeDescriptor,\n \tpublic String toJdbcLiteral(Object value, Dialect dialect, SharedSessionContractImplementor session) {\n \t\tfinal String literalValue = unwrap( value, String.class, session );\n \n+\t\tfinal String inlineLiteral = dialect.inlineLiteral( literalValue );\n+\n \t\tif ( isNationalized ) {\n \t\t\t// is there a standardized form for n-string literals?  This is the SQL Server syntax for sure\n-\t\t\treturn String.format( Locale.ROOT, \"n'%s'\", literalValue );\n+\t\t\treturn String.format( Locale.ROOT, NATIONALIZED_FORMAT, inlineLiteral );\n+\n \t\t}\n \t\telse {\n-\t\t\treturn String.format( Locale.ROOT, \"'%s'\", literalValue );\n+\t\t\treturn String.format( Locale.ROOT, FORMAT, inlineLiteral );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0NzQ1NQ=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTk4MjkyOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/type/descriptor/sql/internal/JdbcLiteralFormatterCharacterData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxOTowNzowNlrOGmevrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxOTowNzowNlrOGmevrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwMjc5Ng==", "bodyText": "We can simplify the above without the usage of String.format as well. String.format is pretty slow!", "url": "https://github.com/hibernate/hibernate-orm/pull/3441#discussion_r443002796", "createdAt": "2020-06-19T19:07:06Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/type/descriptor/sql/internal/JdbcLiteralFormatterCharacterData.java", "diffHunk": "@@ -34,12 +36,14 @@ public JdbcLiteralFormatterCharacterData(JavaTypeDescriptor javaTypeDescriptor,\n \tpublic String toJdbcLiteral(Object value, Dialect dialect, SharedSessionContractImplementor session) {\n \t\tfinal String literalValue = unwrap( value, String.class, session );\n \n+\t\tfinal String inlineLiteral = dialect.inlineLiteral( literalValue );\n+\n \t\tif ( isNationalized ) {\n \t\t\t// is there a standardized form for n-string literals?  This is the SQL Server syntax for sure\n-\t\t\treturn String.format( Locale.ROOT, \"n'%s'\", literalValue );\n-\t\t}\n-\t\telse {\n-\t\t\treturn String.format( Locale.ROOT, \"'%s'\", literalValue );\n+\t\t\treturn String.format( Locale.ROOT, NATIONALIZED_FORMAT, inlineLiteral );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTk4NzI2OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/type/descriptor/sql/internal/JdbcLiteralFormatterCharacterData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxOTowOTowNlrOGmeyZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxOTowOTowNlrOGmeyZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwMzQ5NQ==", "bodyText": "I just wanna double check n'%s' was discarded as previously intentionally? Seems a little bit weird by appending n only.", "url": "https://github.com/hibernate/hibernate-orm/pull/3441#discussion_r443003495", "createdAt": "2020-06-19T19:09:06Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/type/descriptor/sql/internal/JdbcLiteralFormatterCharacterData.java", "diffHunk": "@@ -19,6 +19,8 @@\n  * @author Steve Ebersole\n  */\n public class JdbcLiteralFormatterCharacterData extends BasicJdbcLiteralFormatter {\n+\tpublic static final String NATIONALIZED_FORMAT = \"n%s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4201, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}