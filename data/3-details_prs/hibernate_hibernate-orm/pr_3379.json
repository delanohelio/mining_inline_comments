{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MTQwMTEx", "number": 3379, "title": "wip/6.0 Implement @Formula", "bodyText": "https://trello.com/c/zUReFP2N/77-formula-support\nMajority of the changed files are due to a new isColumnFormula method parameter to ColumnConsumer.\nThe main logic change is in the single org.hibernate.sql.ast.tree.expression.ColumnReference class which accepts a new boolean isColumnFormula constructor parameter to denote whether the existing columnExpression corresponds to a formula SQL fragment. Other than that, everything is straightforward.\nThe four @Formula related testing cases in org.hibernate.test.annotations.formula have been enabled, together with a FormulaBasicsTest copied from user guide.\nExisting unimplemented method in MappingModelCreationHelper prohibits the implementation of @JoinFormula and for that reason, a Trello card was created to solve that separately: https://trello.com/c/ssoKQgnC/128-joinformula-and-joincolumnorformula-support", "createdAt": "2020-04-26T19:07:13Z", "url": "https://github.com/hibernate/hibernate-orm/pull/3379", "merged": true, "mergeCommit": {"oid": "40575125f18fddae7da90e916b06b36efd1a23f5"}, "closed": true, "closedAt": "2020-07-30T14:44:40Z", "author": {"login": "NathanQingyangXu"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbhn5cgBqjMyNzM0MDE1ODk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6AudRAFqTQ1ODQ3MTU2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMzAwMzcz", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#pullrequestreview-402300373", "createdAt": "2020-04-29T00:24:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDoyNDozNlrOGNr0uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDoyNDozNlrOGNr0uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMjY4MA==", "bodyText": "This class change should be the facade of the code changes in this PR and starting with it is a good idea to grasp this seemingly big PR.", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r417002680", "createdAt": "2020-04-29T00:24:36Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/sql/ast/tree/expression/ColumnReference.java", "diffHunk": "@@ -25,32 +25,43 @@\n  * Models a reference to a Column in a SQL AST\n  *\n  * @author Steve Ebersole\n+ * @author Nathan Xu\n  */\n public class ColumnReference implements Expression, Assignable {\n \tprivate final String qualifier;\n \tprivate final String columnExpression;\n+\tprivate final boolean isColumnExpressionFormula;\n \tprivate final String referenceExpression;\n \tprivate final JdbcMapping jdbcMapping;\n \n \tpublic ColumnReference(\n \t\t\tString qualifier,\n \t\t\tString columnExpression,\n+\t\t\tboolean isColumnExpressionFormula,\n \t\t\tJdbcMapping jdbcMapping,\n \t\t\tSessionFactoryImplementor sessionFactory) {\n \t\tthis.qualifier = StringHelper.nullIfEmpty( qualifier );\n-\t\tthis.columnExpression = columnExpression;\n-\t\tthis.referenceExpression = this.qualifier == null\n-\t\t\t\t? columnExpression\n-\t\t\t\t: this.qualifier + \".\" + columnExpression;\n+\t\tif ( isColumnExpressionFormula ) {\n+\t\t\tassert qualifier != null;\n+\t\t\tthis.columnExpression = StringHelper.replace( columnExpression, Template.TEMPLATE, qualifier );\n+\t\t}\n+\t\telse {\n+\t\t\tthis.columnExpression = columnExpression;\n+\t\t}\n+\t\tthis.isColumnExpressionFormula = isColumnExpressionFormula;\n+\t\tthis.referenceExpression = this.qualifier == null || isColumnExpressionFormula\n+\t\t\t\t? this.columnExpression\n+\t\t\t\t: this.qualifier + \".\" + this.columnExpression;\n \t\tthis.jdbcMapping = jdbcMapping;\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MDE4MTU4", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#pullrequestreview-408018158", "createdAt": "2020-05-08T06:10:38Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjoxMDozOFrOGSaTgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjoxNTozOVrOGSaZkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1ODUzMQ==", "bodyText": "Revert this. referenceExpression is non-null AFAICS", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r421958531", "createdAt": "2020-05-08T06:10:38Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/sql/ast/tree/expression/ColumnReference.java", "diffHunk": "@@ -108,7 +123,7 @@ public boolean equals(Object o) {\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn referenceExpression.hashCode();\n+\t\treturn Objects.hashCode( referenceExpression );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1OTE2NQ==", "bodyText": "AFAICS you are not using this so IMO you can remove this. It's enough to check in the constructor but there is no need for the state later", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r421959165", "createdAt": "2020-05-08T06:12:44Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/sql/ast/tree/expression/ColumnReference.java", "diffHunk": "@@ -25,32 +25,43 @@\n  * Models a reference to a Column in a SQL AST\n  *\n  * @author Steve Ebersole\n+ * @author Nathan Xu\n  */\n public class ColumnReference implements Expression, Assignable {\n \tprivate final String qualifier;\n \tprivate final String columnExpression;\n+\tprivate final boolean isColumnExpressionFormula;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2MDA4Mw==", "bodyText": "Do you have a card for this so that we don't forget about it?", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r421960083", "createdAt": "2020-05-08T06:15:39Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java", "diffHunk": "@@ -826,7 +826,8 @@ else if ( batchSize > 1 ) {\n \t\t\t\tcolAliases[k] = thing.getAlias( dialect, prop.getValue().getTable() );\n \t\t\t\tif ( thing.isFormula() ) {\n \t\t\t\t\tfoundFormula = true;\n-\t\t\t\t\t( (Formula) thing ).setFormula( substituteBrackets( ( (Formula) thing ).getFormula() ) );\n+\t\t\t\t\t// ( (Formula) thing ).setFormula( substituteBrackets( ( (Formula) thing ).getFormula() ) );\n+\t\t\t\t\t// TOOD: uncomment the above statement when this#substituteBrackets(String) is implemented", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjI0Njcx", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#pullrequestreview-408624671", "createdAt": "2020-05-09T07:58:03Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1ODQ3NzQ4", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#pullrequestreview-435847748", "createdAt": "2020-06-23T14:35:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDozNTowOVrOGnsSHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDozNTowOVrOGnsSHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3MzE4Mg==", "bodyText": "Outside the scope of this PR, but as a larger question here we also need to start thinking about how @ColumnTransformer is supported here.  May be better to just pass along the \"read\" and \"write\" fragment portions?", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r444273182", "createdAt": "2020-06-23T14:35:09Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnConsumer.java", "diffHunk": "@@ -15,5 +15,6 @@\n \tvoid accept(\n \t\t\tString containingTableExpression,\n \t\t\tString columnExpression,\n+\t\t\tboolean isColumnExpressionFormula,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1ODQ5NzQ1", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#pullrequestreview-435849745", "createdAt": "2020-06-23T14:37:00Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDozNzowMVrOGnsYHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo0NDoyOFrOGnsvQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3NDcxOA==", "bodyText": "Why disallow this?  In theory it should be fine.", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r444274718", "createdAt": "2020-06-23T14:37:01Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/BasicValuedSingularAttributeMapping.java", "diffHunk": "@@ -73,13 +78,21 @@ public BasicValuedSingularAttributeMapping(\n \t\tthis.navigableRole = navigableRole;\n \t\tthis.tableExpression = tableExpression;\n \t\tthis.mappedColumnExpression = mappedColumnExpression;\n+\t\tthis.isMappedColumnExpressionFormula = isMappedColumnExpressionFormula;\n \t\tthis.valueConverter = valueConverter;\n \t\tthis.jdbcMapping = jdbcMapping;\n \n \t\tif ( valueConverter == null ) {\n \t\t\tdomainTypeDescriptor = jdbcMapping.getJavaTypeDescriptor();\n \t\t}\n \t\telse {\n+\t\t\tif ( isMappedColumnExpressionFormula ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MDY0MA==", "bodyText": "The added isFormula is not needed.  It is always false.", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r444280640", "createdAt": "2020-06-23T14:44:28Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ordering/ast/SequencePart.java", "diffHunk": "@@ -16,6 +16,7 @@\n public interface SequencePart {\n \tSequencePart resolvePathPart(\n \t\t\tString name,\n+\t\t\tboolean isFormula,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1ODg3MjI2", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#pullrequestreview-435887226", "createdAt": "2020-06-23T15:14:26Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "55ea61f2de2b7ae9b885754c89bc88ece6fea497", "author": {"user": {"login": "NathanQingyangXu", "name": "Nathan Xu"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/55ea61f2de2b7ae9b885754c89bc88ece6fea497", "committedDate": "2020-07-27T22:41:25Z", "message": "implement @Formula"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "55ea61f2de2b7ae9b885754c89bc88ece6fea497", "author": {"user": {"login": "NathanQingyangXu", "name": "Nathan Xu"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/55ea61f2de2b7ae9b885754c89bc88ece6fea497", "committedDate": "2020-07-27T22:41:25Z", "message": "implement @Formula"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NDcxNTYz", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#pullrequestreview-458471563", "createdAt": "2020-07-30T14:44:26Z", "commit": {"oid": "55ea61f2de2b7ae9b885754c89bc88ece6fea497"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3062, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}