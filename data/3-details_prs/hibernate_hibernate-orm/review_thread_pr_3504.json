{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDk4Mzkw", "number": 3504, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxODoxM1rOEaSYCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzoyODoyNVrOEaXZVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTk5NDk5OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/hql/internal/ast/SqlGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxODoxM1rOHDoBDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxODoxM1rOHDoBDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MzQwNg==", "bodyText": "Previously no new writer was created and both FORMATDATETIME and || functions share the same writer, thus the strange SQL was created.", "url": "https://github.com/hibernate/hibernate-orm/pull/3504#discussion_r473563406", "createdAt": "2020-08-20T03:18:13Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/hql/internal/ast/SqlGenerator.java", "diffHunk": "@@ -192,13 +188,16 @@ protected void beginFunctionTemplate(AST node, AST nameNode) {\n \t\t// \t\tMETHOD_NAME\n \t\tFunctionNode functionNode = (FunctionNode) node;\n \t\tSQLFunction sqlFunction = functionNode.getSQLFunction();\n+\n+\t\toutputStack.addFirst( writer );\n+\n \t\tif ( sqlFunction == null ) {\n \t\t\t// if SQLFunction is null we just write the function out as it appears in the hql statement\n+\t\t\twriter = new StandardFunctionArguments();\n \t\t\tsuper.beginFunctionTemplate( node, nameNode );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDgxNzUwOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/test/java/org/hibernate/query/hhh14154/HHH14154Test.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzoyODoyNVrOHDv6Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoxNjo1MFrOHD-H3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5Mjc1NQ==", "bodyText": "I don't think every DBMS supports this function, so please add a @RequiresDialect(H2Dialect.class)", "url": "https://github.com/hibernate/hibernate-orm/pull/3504#discussion_r473692755", "createdAt": "2020-08-20T07:28:25Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/test/java/org/hibernate/query/hhh14154/HHH14154Test.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.hibernate.query.hhh14154;\n+\n+import java.util.Date;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Root;\n+\n+import org.hibernate.testing.TestForIssue;\n+import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;\n+import org.junit.Test;\n+\n+import static org.hibernate.testing.transaction.TransactionUtil.doInJPA;\n+\n+/**\n+ * @author Nathan Xu\n+ */\n+@TestForIssue( jiraKey = \"HHH-14154\" )\n+public class HHH14154Test extends BaseCoreFunctionalTestCase {\n+\n+\t@Override\n+\tprotected Class<?>[] getAnnotatedClasses() {\n+\t\treturn new Class<?>[] { HHH14154Test.Foo.class };\n+\t}\n+\n+\t@Test\n+\tpublic void testNoExceptionThrown() {\n+\t\tdoInJPA( this::sessionFactory, em -> {\n+\t\t\tfinal CriteriaBuilder cb = em.getCriteriaBuilder();\n+\t\t\tfinal CriteriaQuery<Foo> cq = cb.createQuery( Foo.class );\n+\t\t\tfinal Root<Foo> foo = cq.from( Foo.class );\n+\t\t\tcq.select(foo)\n+\t\t\t\t.where(\n+\t\t\t\t\tcb.lessThanOrEqualTo(\n+\t\t\t\t\t\tcb.concat(\n+\t\t\t\t\t\t\tcb.function( \"FORMATDATETIME\", String.class, foo.get( \"startTime\" ), cb.literal( \"HH:mm:ss\" ) ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyNTU5Ng==", "bodyText": "done. thanks. also added the bug reporter as one of the authors.", "url": "https://github.com/hibernate/hibernate-orm/pull/3504#discussion_r473925596", "createdAt": "2020-08-20T12:16:50Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/test/java/org/hibernate/query/hhh14154/HHH14154Test.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.hibernate.query.hhh14154;\n+\n+import java.util.Date;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Root;\n+\n+import org.hibernate.testing.TestForIssue;\n+import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;\n+import org.junit.Test;\n+\n+import static org.hibernate.testing.transaction.TransactionUtil.doInJPA;\n+\n+/**\n+ * @author Nathan Xu\n+ */\n+@TestForIssue( jiraKey = \"HHH-14154\" )\n+public class HHH14154Test extends BaseCoreFunctionalTestCase {\n+\n+\t@Override\n+\tprotected Class<?>[] getAnnotatedClasses() {\n+\t\treturn new Class<?>[] { HHH14154Test.Foo.class };\n+\t}\n+\n+\t@Test\n+\tpublic void testNoExceptionThrown() {\n+\t\tdoInJPA( this::sessionFactory, em -> {\n+\t\t\tfinal CriteriaBuilder cb = em.getCriteriaBuilder();\n+\t\t\tfinal CriteriaQuery<Foo> cq = cb.createQuery( Foo.class );\n+\t\t\tfinal Root<Foo> foo = cq.from( Foo.class );\n+\t\t\tcq.select(foo)\n+\t\t\t\t.where(\n+\t\t\t\t\tcb.lessThanOrEqualTo(\n+\t\t\t\t\t\tcb.concat(\n+\t\t\t\t\t\t\tcb.function( \"FORMATDATETIME\", String.class, foo.get( \"startTime\" ), cb.literal( \"HH:mm:ss\" ) ),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5Mjc1NQ=="}, "originalCommit": null, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4146, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}