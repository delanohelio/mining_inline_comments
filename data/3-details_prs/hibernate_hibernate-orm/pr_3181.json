{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MTczMDMw", "number": 3181, "title": "HHH-8776 Fix 'fetch graph' implementation", "bodyText": "I found our 'fetch graph' implementation is almost perfect (e.g. load plan, SQL generation are perfectly in line with 'fetch graph' JPA spec), the only missing part is in TwoPhaseLoad. We have added 'fetch profile' overwriting (w.r.t meta model) logic there. Seems we are missing the 'fetch graph' overwriting counterpart there.\nTesting code for both 'find' and 'query' are added.", "createdAt": "2020-01-23T04:23:23Z", "url": "https://github.com/hibernate/hibernate-orm/pull/3181", "merged": true, "mergeCommit": {"oid": "3eb49972f33e4a52c93125c4cb51239551208092"}, "closed": true, "closedAt": "2020-01-29T19:52:34Z", "author": {"login": "NathanQingyangXu"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9CYShgH2gAyMzY2MTczMDMwOmI0OWRiYWU0NWM5MmM1ODBjYzdiZTY5YmFkNzQ2MThiMzRjYzZkZDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_LcQxgFqTM1MDM4MDA5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b49dbae45c92c580cc7be69bad74618b34cc6dd8", "author": {"user": {"login": "NathanQingyangXu", "name": "Nathan Xu"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/b49dbae45c92c580cc7be69bad74618b34cc6dd8", "committedDate": "2020-01-23T04:10:39Z", "message": "HHH-8776 fix 'fetch graph' semantic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e822d8f4baf398ae7793be66f0e9ee6624240fd5", "author": {"user": {"login": "NathanQingyangXu", "name": "Nathan Xu"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/e822d8f4baf398ae7793be66f0e9ee6624240fd5", "committedDate": "2020-01-23T12:39:51Z", "message": "HHH-8776 fix check style issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "222b208cfeee2fbab26088ecae92add31da34dbc", "author": {"user": {"login": "NathanQingyangXu", "name": "Nathan Xu"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/222b208cfeee2fbab26088ecae92add31da34dbc", "committedDate": "2020-01-24T03:31:47Z", "message": "HHH-8776 add testing cases to prove 'fetch graph' takes precedence over 'fetch profile'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4012e08d42c7a412284b739b1aad36f4f551a070", "author": {"user": {"login": "NathanQingyangXu", "name": "Nathan Xu"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/4012e08d42c7a412284b739b1aad36f4f551a070", "committedDate": "2020-01-24T19:28:28Z", "message": "HHH-8776 add more 'final' keywords to align with existing coding style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzgwMDk3", "url": "https://github.com/hibernate/hibernate-orm/pull/3181#pullrequestreview-350380097", "createdAt": "2020-01-29T19:50:04Z", "commit": {"oid": "4012e08d42c7a412284b739b1aad36f4f551a070"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1MDowNFrOFjVdDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1MTo0MFrOFjVgIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NTk4Mg==", "bodyText": "I don't understand this comment.  Did you mean to remove the debugf parameters maybe?", "url": "https://github.com/hibernate/hibernate-orm/pull/3181#discussion_r372595982", "createdAt": "2020-01-29T19:50:04Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/TwoPhaseLoad.java", "diffHunk": "@@ -367,38 +376,62 @@ public static void afterInitialize(\n \t}\n \n \t/**\n-\t * Check if eager of the association is overriden by anything.\n+\t * Check if eager of the association is overridden (i.e. skipping metamodel strategy), including (order sensitive):\n+\t * <ol>\n+\t *     <li>fetch graph</li>\n+\t *     <li>fetch profile</li>\n+\t * </ol>\n \t *\n \t * @param session session\n \t * @param entityName entity name\n \t * @param associationName association name\n-\t *\n+\t * @param associationType association type\n+\t * @param isDebugEnabled if debug log level enabled\n \t * @return null if there is no overriding, true if it is overridden to eager and false if it is overridden to lazy\n \t */\n \tprivate static Boolean getOverridingEager(\n \t\t\tfinal SharedSessionContractImplementor session,\n \t\t\tfinal String entityName,\n \t\t\tfinal String associationName,\n-\t\t\tfinal Type type,\n+\t\t\tfinal Type associationType,\n \t\t\tfinal boolean isDebugEnabled) {\n \t\t// Performance: check type.isCollectionType() first, as type.isAssociationType() is megamorphic\n-\t\tif ( type.isCollectionType() || type.isAssociationType()  ) {\n-\t\t\tfinal Boolean overridingEager = isEagerFetchProfile( session, entityName, associationName );\n+\t\tif ( associationType.isCollectionType() || associationType.isAssociationType()  ) {\n+\n+\t\t\t// check 'fetch graph' first; skip 'fetch profile' if 'fetch graph' takes effect\n+\t\t\tBoolean overridingEager = isEagerFetchGraph( session, associationName, associationType );\n \n-\t\t\t//This method is very hot, and private so let's piggy back on the fact that the caller already knows the debugging state.\n-\t\t\tif ( isDebugEnabled ) {\n-\t\t\t\tif ( overridingEager != null ) {\n+\t\t\tif ( overridingEager != null ) {\n+\t\t\t\t//This method is very hot, and private so let's piggy back on the fact that the caller already knows the debugging state.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4012e08d42c7a412284b739b1aad36f4f551a070"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5Njc2OQ==", "bodyText": "Oh, nm.. you  did not add that", "url": "https://github.com/hibernate/hibernate-orm/pull/3181#discussion_r372596769", "createdAt": "2020-01-29T19:51:40Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/TwoPhaseLoad.java", "diffHunk": "@@ -367,38 +376,62 @@ public static void afterInitialize(\n \t}\n \n \t/**\n-\t * Check if eager of the association is overriden by anything.\n+\t * Check if eager of the association is overridden (i.e. skipping metamodel strategy), including (order sensitive):\n+\t * <ol>\n+\t *     <li>fetch graph</li>\n+\t *     <li>fetch profile</li>\n+\t * </ol>\n \t *\n \t * @param session session\n \t * @param entityName entity name\n \t * @param associationName association name\n-\t *\n+\t * @param associationType association type\n+\t * @param isDebugEnabled if debug log level enabled\n \t * @return null if there is no overriding, true if it is overridden to eager and false if it is overridden to lazy\n \t */\n \tprivate static Boolean getOverridingEager(\n \t\t\tfinal SharedSessionContractImplementor session,\n \t\t\tfinal String entityName,\n \t\t\tfinal String associationName,\n-\t\t\tfinal Type type,\n+\t\t\tfinal Type associationType,\n \t\t\tfinal boolean isDebugEnabled) {\n \t\t// Performance: check type.isCollectionType() first, as type.isAssociationType() is megamorphic\n-\t\tif ( type.isCollectionType() || type.isAssociationType()  ) {\n-\t\t\tfinal Boolean overridingEager = isEagerFetchProfile( session, entityName, associationName );\n+\t\tif ( associationType.isCollectionType() || associationType.isAssociationType()  ) {\n+\n+\t\t\t// check 'fetch graph' first; skip 'fetch profile' if 'fetch graph' takes effect\n+\t\t\tBoolean overridingEager = isEagerFetchGraph( session, associationName, associationType );\n \n-\t\t\t//This method is very hot, and private so let's piggy back on the fact that the caller already knows the debugging state.\n-\t\t\tif ( isDebugEnabled ) {\n-\t\t\t\tif ( overridingEager != null ) {\n+\t\t\tif ( overridingEager != null ) {\n+\t\t\t\t//This method is very hot, and private so let's piggy back on the fact that the caller already knows the debugging state.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NTk4Mg=="}, "originalCommit": {"oid": "4012e08d42c7a412284b739b1aad36f4f551a070"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3260, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}