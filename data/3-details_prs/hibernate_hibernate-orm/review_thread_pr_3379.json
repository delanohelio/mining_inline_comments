{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MTQwMTEx", "number": 3379, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDoyNDozNlrOD3bnYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo0NDoyOFrOEIALjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDUwNzIzOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/sql/ast/tree/expression/ColumnReference.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDoyNDozNlrOGNr0uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDoyNDozNlrOGNr0uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMjY4MA==", "bodyText": "This class change should be the facade of the code changes in this PR and starting with it is a good idea to grasp this seemingly big PR.", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r417002680", "createdAt": "2020-04-29T00:24:36Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/sql/ast/tree/expression/ColumnReference.java", "diffHunk": "@@ -25,32 +25,43 @@\n  * Models a reference to a Column in a SQL AST\n  *\n  * @author Steve Ebersole\n+ * @author Nathan Xu\n  */\n public class ColumnReference implements Expression, Assignable {\n \tprivate final String qualifier;\n \tprivate final String columnExpression;\n+\tprivate final boolean isColumnExpressionFormula;\n \tprivate final String referenceExpression;\n \tprivate final JdbcMapping jdbcMapping;\n \n \tpublic ColumnReference(\n \t\t\tString qualifier,\n \t\t\tString columnExpression,\n+\t\t\tboolean isColumnExpressionFormula,\n \t\t\tJdbcMapping jdbcMapping,\n \t\t\tSessionFactoryImplementor sessionFactory) {\n \t\tthis.qualifier = StringHelper.nullIfEmpty( qualifier );\n-\t\tthis.columnExpression = columnExpression;\n-\t\tthis.referenceExpression = this.qualifier == null\n-\t\t\t\t? columnExpression\n-\t\t\t\t: this.qualifier + \".\" + columnExpression;\n+\t\tif ( isColumnExpressionFormula ) {\n+\t\t\tassert qualifier != null;\n+\t\t\tthis.columnExpression = StringHelper.replace( columnExpression, Template.TEMPLATE, qualifier );\n+\t\t}\n+\t\telse {\n+\t\t\tthis.columnExpression = columnExpression;\n+\t\t}\n+\t\tthis.isColumnExpressionFormula = isColumnExpressionFormula;\n+\t\tthis.referenceExpression = this.qualifier == null || isColumnExpressionFormula\n+\t\t\t\t? this.columnExpression\n+\t\t\t\t: this.qualifier + \".\" + this.columnExpression;\n \t\tthis.jdbcMapping = jdbcMapping;\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjk0OTk4OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/sql/ast/tree/expression/ColumnReference.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjoxMDozOFrOGSaTgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDowMToyN1rOGSgXJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1ODUzMQ==", "bodyText": "Revert this. referenceExpression is non-null AFAICS", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r421958531", "createdAt": "2020-05-08T06:10:38Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/sql/ast/tree/expression/ColumnReference.java", "diffHunk": "@@ -108,7 +123,7 @@ public boolean equals(Object o) {\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn referenceExpression.hashCode();\n+\t\treturn Objects.hashCode( referenceExpression );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1Nzc2NQ==", "bodyText": "I changed this to align well with the equals() implementation, which has used Objects.equals() already.\nI both reverted this and changed the equals() implementation to avoid unnecessary nullness checking.", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r422057765", "createdAt": "2020-05-08T10:01:27Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/sql/ast/tree/expression/ColumnReference.java", "diffHunk": "@@ -108,7 +123,7 @@ public boolean equals(Object o) {\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn referenceExpression.hashCode();\n+\t\treturn Objects.hashCode( referenceExpression );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1ODUzMQ=="}, "originalCommit": null, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjk1NDI4OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/sql/ast/tree/expression/ColumnReference.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjoxMjo0NFrOGSaV_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDowMzowN1rOGSgZvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1OTE2NQ==", "bodyText": "AFAICS you are not using this so IMO you can remove this. It's enough to check in the constructor but there is no need for the state later", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r421959165", "createdAt": "2020-05-08T06:12:44Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/sql/ast/tree/expression/ColumnReference.java", "diffHunk": "@@ -25,32 +25,43 @@\n  * Models a reference to a Column in a SQL AST\n  *\n  * @author Steve Ebersole\n+ * @author Nathan Xu\n  */\n public class ColumnReference implements Expression, Assignable {\n \tprivate final String qualifier;\n \tprivate final String columnExpression;\n+\tprivate final boolean isColumnExpressionFormula;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1ODQyOQ==", "bodyText": "Yeah, currently it is not used publicly, but I do think it is a basic feature of this class and we are supposed to expose it for later use.", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r422058429", "createdAt": "2020-05-08T10:03:07Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/sql/ast/tree/expression/ColumnReference.java", "diffHunk": "@@ -25,32 +25,43 @@\n  * Models a reference to a Column in a SQL AST\n  *\n  * @author Steve Ebersole\n+ * @author Nathan Xu\n  */\n public class ColumnReference implements Expression, Assignable {\n \tprivate final String qualifier;\n \tprivate final String columnExpression;\n+\tprivate final boolean isColumnExpressionFormula;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1OTE2NQ=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjk2MDQ0OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjoxNTozOVrOGSaZkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDoxMDowNFrOGSgkaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2MDA4Mw==", "bodyText": "Do you have a card for this so that we don't forget about it?", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r421960083", "createdAt": "2020-05-08T06:15:39Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java", "diffHunk": "@@ -826,7 +826,8 @@ else if ( batchSize > 1 ) {\n \t\t\t\tcolAliases[k] = thing.getAlias( dialect, prop.getValue().getTable() );\n \t\t\t\tif ( thing.isFormula() ) {\n \t\t\t\t\tfoundFormula = true;\n-\t\t\t\t\t( (Formula) thing ).setFormula( substituteBrackets( ( (Formula) thing ).getFormula() ) );\n+\t\t\t\t\t// ( (Formula) thing ).setFormula( substituteBrackets( ( (Formula) thing ).getFormula() ) );\n+\t\t\t\t\t// TOOD: uncomment the above statement when this#substituteBrackets(String) is implemented", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2MTE2MA==", "bodyText": "Nope. In current v6 development, it would be ideal to fix issues related as much as possible. I left a //TODO comment above so I think it might be enough. There are too many NotYetImplementedFor6Exception() statements here and there in current v6 branch and creating a specific card for each of them might be too fine-grained, IMHO.\nHowever, I did fix the typo (//TOOD -> //TODO).", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r422061160", "createdAt": "2020-05-08T10:10:04Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java", "diffHunk": "@@ -826,7 +826,8 @@ else if ( batchSize > 1 ) {\n \t\t\t\tcolAliases[k] = thing.getAlias( dialect, prop.getValue().getTable() );\n \t\t\t\tif ( thing.isFormula() ) {\n \t\t\t\t\tfoundFormula = true;\n-\t\t\t\t\t( (Formula) thing ).setFormula( substituteBrackets( ( (Formula) thing ).getFormula() ) );\n+\t\t\t\t\t// ( (Formula) thing ).setFormula( substituteBrackets( ( (Formula) thing ).getFormula() ) );\n+\t\t\t\t\t// TOOD: uncomment the above statement when this#substituteBrackets(String) is implemented", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2MDA4Mw=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODIyMjU1OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDozNTowOVrOGnsSHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMDozMTowN1rOGp4JFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3MzE4Mg==", "bodyText": "Outside the scope of this PR, but as a larger question here we also need to start thinking about how @ColumnTransformer is supported here.  May be better to just pass along the \"read\" and \"write\" fragment portions?", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r444273182", "createdAt": "2020-06-23T14:35:09Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnConsumer.java", "diffHunk": "@@ -15,5 +15,6 @@\n \tvoid accept(\n \t\t\tString containingTableExpression,\n \t\t\tString columnExpression,\n+\t\t\tboolean isColumnExpressionFormula,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU2NDYzMA==", "bodyText": "Good point. I am gonna create a Trello ticket for @ColumnTransformer soon. Yeah, adding \"read\" and \"write\" fragment seems accommodate every possible scenario (normal column, formula and columnTransformer). But from design perspective, maybe it is an idea to create a higher level class to include the three cases (maybe via class hierarchy). That would simplify code understanding and ease code maintaining.", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r446564630", "createdAt": "2020-06-27T20:31:07Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnConsumer.java", "diffHunk": "@@ -15,5 +15,6 @@\n \tvoid accept(\n \t\t\tString containingTableExpression,\n \t\t\tString columnExpression,\n+\t\t\tboolean isColumnExpressionFormula,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3MzE4Mg=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODIzMjU1OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/BasicValuedSingularAttributeMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDozNzowMVrOGnsYHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMDoxNTozNlrOGp4D0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3NDcxOA==", "bodyText": "Why disallow this?  In theory it should be fine.", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r444274718", "createdAt": "2020-06-23T14:37:01Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/BasicValuedSingularAttributeMapping.java", "diffHunk": "@@ -73,13 +78,21 @@ public BasicValuedSingularAttributeMapping(\n \t\tthis.navigableRole = navigableRole;\n \t\tthis.tableExpression = tableExpression;\n \t\tthis.mappedColumnExpression = mappedColumnExpression;\n+\t\tthis.isMappedColumnExpressionFormula = isMappedColumnExpressionFormula;\n \t\tthis.valueConverter = valueConverter;\n \t\tthis.jdbcMapping = jdbcMapping;\n \n \t\tif ( valueConverter == null ) {\n \t\t\tdomainTypeDescriptor = jdbcMapping.getJavaTypeDescriptor();\n \t\t}\n \t\telse {\n+\t\t\tif ( isMappedColumnExpressionFormula ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU2MzI4MA==", "bodyText": "I forgot what was in my mind when I coded this a long time ago, :). I deleted this as you suggested. Thanks.", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r446563280", "createdAt": "2020-06-27T20:15:36Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/BasicValuedSingularAttributeMapping.java", "diffHunk": "@@ -73,13 +78,21 @@ public BasicValuedSingularAttributeMapping(\n \t\tthis.navigableRole = navigableRole;\n \t\tthis.tableExpression = tableExpression;\n \t\tthis.mappedColumnExpression = mappedColumnExpression;\n+\t\tthis.isMappedColumnExpressionFormula = isMappedColumnExpressionFormula;\n \t\tthis.valueConverter = valueConverter;\n \t\tthis.jdbcMapping = jdbcMapping;\n \n \t\tif ( valueConverter == null ) {\n \t\t\tdomainTypeDescriptor = jdbcMapping.getJavaTypeDescriptor();\n \t\t}\n \t\telse {\n+\t\t\tif ( isMappedColumnExpressionFormula ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3NDcxOA=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODI3MDIxOnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ordering/ast/SequencePart.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo0NDoyOFrOGnsvQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMDoxNDozNFrOGp4DWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MDY0MA==", "bodyText": "The added isFormula is not needed.  It is always false.", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r444280640", "createdAt": "2020-06-23T14:44:28Z", "author": {"login": "sebersole"}, "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ordering/ast/SequencePart.java", "diffHunk": "@@ -16,6 +16,7 @@\n public interface SequencePart {\n \tSequencePart resolvePathPart(\n \t\t\tString name,\n+\t\t\tboolean isFormula,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU2MzE2Mg==", "bodyText": "Deleted it. Thanks for the comment.", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r446563162", "createdAt": "2020-06-27T20:14:34Z", "author": {"login": "NathanQingyangXu"}, "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ordering/ast/SequencePart.java", "diffHunk": "@@ -16,6 +16,7 @@\n public interface SequencePart {\n \tSequencePart resolvePathPart(\n \t\t\tString name,\n+\t\t\tboolean isFormula,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MDY0MA=="}, "originalCommit": null, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3992, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}