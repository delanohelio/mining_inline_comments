{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MDg2MDk2", "number": 3528, "title": "HHH-13058 Fix issue left join root cannot be replaced by correlated parent in subquery", "bodyText": "https://hibernate.atlassian.net/browse/HHH-13058\nThe current correlated subquery ignores the first left join and ends up with 'inner join' instead invariably. So suppose for the below entities:\n@Entity(name = \"Task\")\npublic class Task {\n    @Id\n    Long id;\n\n    @ManyToOne\n    Patient patient;\n}\n\n@Entity(name = \"Patient\")\npublic class Patient {\n    @Id\n    Long id;\n\n    @ManyToOne\n    Site site;\n}\n\n@Entity(name = \"Site\")\npublic class Site {\n    @Id\n    Long id;\n}\n\nNote that @ManyToOne's optional is true by default.\nthe following Criteria would skip the Task without Patient:\nfinal Subquery<Task> subquery = outerQuery.subquery( Task.class );\nfinal Root<Task> subtask = subquery.correlate( outerTask );\nfinal From<Task, Patient> patient = subtask.join( Task_.patient, JoinType.LEFT );\nfinal From<Patient, Site> site = patient.join( Patient_.site, JoinType.LEFT );\nouterQuery.where(\n    builder.exists(\n        subquery.select( subtask )\n            .where(\n                builder.or(\n                    patient.isNull(),\n                    site.in( validSites )\n                )\n        )\n    )\n);\n\nbecause internally the jpasql generated is:\nselect generatedAlias0 from Task as generatedAlias0 \nwhere exists (\n    select generatedAlias0 \n    from generatedAlias0.patient as generatedAlias1 \n        left join generatedAlias1.site as generatedAlias2 \n    where ( generatedAlias1 is null ) or ( generatedAlias2 in (:param0, :param1) \n))\n\nNote that generatedAlias1 is null can never be true for the left join from Task to Patient has been skipped by correlate parent's alias substitution; but given that Task's Patient is optional we should reserve the left join from Task to Patient.\nThe fix in this PR is to create the following jpasql instead:\nselect generatedAlias0 from Task as generatedAlias0 \nwhere exists (\n    select generatedAlias0 \n    from Task as generatedAlias1 \n        left join generatedAlias1.patient as generatedAlias1 \n        left join generatedAlias1.site as generatedAlias2 \n    where \n        generatedAlias1 = generatedAlias0 and (( generatedAlias1 is null ) or ( generatedAlias2 in (:param0, :param1))\n))\n\nThe basic idea is to generate new alias for correlated root and add newAlias = oldAlias to the WHERE jpasql clause, thus reserving the LEFT JOIN semantic of the correlated root in subquery.\nHowever, the old pattern still remains for performance reason and the above changes only apply when LEFT JOIN is involved.", "createdAt": "2020-08-26T18:44:21Z", "url": "https://github.com/hibernate/hibernate-orm/pull/3528", "merged": true, "mergeCommit": {"oid": "6365204c488eb2db1dbe52261a59a726e0fb425c"}, "closed": true, "closedAt": "2020-09-03T06:50:21Z", "author": {"login": "NathanQingyangXu"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdC0_xOABqjM2OTcwNDIxNjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEuTWXAFqTQ4MDEzMTIxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NzUxMjkx", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#pullrequestreview-478751291", "createdAt": "2020-08-31T16:12:57Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxMjo1OFrOHJ_RnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoyMjozMVrOHJ_nnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzNTkzMg==", "bodyText": "I'm not sure this will generate the correct HQL. Maybe this should be the following\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif ( getAlias() == null ) {\n          \n          \n            \n            \t\tif ( super.getAlias() == null ) {\n          \n      \n    \n    \n  \n\nand you should revert the other changes in this file", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r480235932", "createdAt": "2020-08-31T16:12:58Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/path/AbstractFromImpl.java", "diffHunk": "@@ -81,12 +81,7 @@ protected boolean canBeDereferenced() {\n \t@Override\n \tpublic void prepareAlias(RenderingContext renderingContext) {\n \t\tif ( getAlias() == null ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MTU2Nw==", "bodyText": "IMO this should be reverted and we should specially handle the left join case instead as this kind of querying might result in worse performance for some cases. A subquery like select ... from alias.elementCollection will only use the join table in the SQL. AFAIU, the changes you are doing here will always use the owner entity table in the from clause and then join the join table.", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r480241567", "createdAt": "2020-08-31T16:22:31Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/QueryStructure.java", "diffHunk": "@@ -286,52 +287,17 @@ private FromImplementor locateImplicitSelection() {\n \t\treturn implicitSelection;\n \t}\n \n-\t@SuppressWarnings({ \"unchecked\" })\n \tprivate void renderFromClause(StringBuilder jpaqlQuery, RenderingContext renderingContext) {\n \t\trenderingContext.getClauseStack().push( Clause.FROM );\n \n \t\ttry {\n \t\t\tjpaqlQuery.append( \" from \" );\n-\t\t\tString sep = \"\";\n-\t\t\tfor ( Root root : getRoots() ) {\n-\t\t\t\t( (FromImplementor) root ).prepareAlias( renderingContext );\n-\t\t\t\tjpaqlQuery.append( sep );\n-\t\t\t\tsep = \", \";\n-\t\t\t\tjpaqlQuery.append( ( (FromImplementor) root ).renderTableExpression( renderingContext ) );\n-\t\t\t}\n \n-\t\t\tfor ( Root root : getRoots() ) {\n-\t\t\t\trenderJoins( jpaqlQuery, renderingContext, root.getJoins() );\n-\t\t\t\tif ( root instanceof RootImpl ) {\n-\t\t\t\t\tSet<TreatedRoot> treats = ( (RootImpl) root ).getTreats();\n-\t\t\t\t\tfor ( TreatedRoot treat : treats ) {\n-\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, treat.getJoins() );\n-\t\t\t\t\t\trenderFetches( jpaqlQuery, renderingContext, treat.getFetches() );\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\trenderFetches( jpaqlQuery, renderingContext, root.getFetches() );\n-\t\t\t}\n+\t\t\tdoRenderFrom( getRoots(), jpaqlQuery, renderingContext );\n \n \t\t\tif ( isSubQuery ) {\n \t\t\t\tif ( correlationRoots != null ) {\n-\t\t\t\t\tfor ( FromImplementor<?, ?> correlationRoot : correlationRoots ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5OTk1NzA3", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#pullrequestreview-479995707", "createdAt": "2020-09-01T18:09:01Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowOTowMVrOHLCaKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxMToxOFrOHLCfKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNTg1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\tjpaqlQuery.append( \" and (\" );\n          \n          \n            \n            \t\t\t\t\tjpaqlQuery.append( \" and \" );", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r481335851", "createdAt": "2020-09-01T18:09:01Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/QueryStructure.java", "diffHunk": "@@ -341,20 +358,48 @@ private void renderFromClause(StringBuilder jpaqlQuery, RenderingContext renderi\n \t}\n \n \tprotected void renderWhereClause(StringBuilder jpaqlQuery, RenderingContext renderingContext) {\n-\t\tif ( getRestriction() == null ) {\n+\t\tfinal String correlationRestrictionWhereFragment = getCorrelationRestrictionsWhereFragment();\n+\t\tif ( getRestriction() == null && correlationRestrictionWhereFragment.isEmpty() ) {\n \t\t\treturn;\n \t\t}\n \n \t\trenderingContext.getClauseStack().push( Clause.WHERE );\n \t\ttry {\n-\t\t\tjpaqlQuery.append( \" where \" )\n-\t\t\t\t\t.append( ( (Renderable) getRestriction() ).render( renderingContext ) );\n+\t\t\tjpaqlQuery.append( \" where \" );\n+\t\t\tjpaqlQuery.append( correlationRestrictionWhereFragment );\n+\t\t\tif ( getRestriction() != null ) {\n+\t\t\t\tif ( !correlationRestrictionWhereFragment.isEmpty() ) {\n+\t\t\t\t\tjpaqlQuery.append( \" and (\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNjA4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tif ( !correlationRestrictionWhereFragment.isEmpty() ) {\n          \n          \n            \n            \t\t\t\t\tjpaqlQuery.append( \")\" );\n          \n          \n            \n            \t\t\t\t}", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r481336080", "createdAt": "2020-09-01T18:09:25Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/QueryStructure.java", "diffHunk": "@@ -341,20 +358,48 @@ private void renderFromClause(StringBuilder jpaqlQuery, RenderingContext renderi\n \t}\n \n \tprotected void renderWhereClause(StringBuilder jpaqlQuery, RenderingContext renderingContext) {\n-\t\tif ( getRestriction() == null ) {\n+\t\tfinal String correlationRestrictionWhereFragment = getCorrelationRestrictionsWhereFragment();\n+\t\tif ( getRestriction() == null && correlationRestrictionWhereFragment.isEmpty() ) {\n \t\t\treturn;\n \t\t}\n \n \t\trenderingContext.getClauseStack().push( Clause.WHERE );\n \t\ttry {\n-\t\t\tjpaqlQuery.append( \" where \" )\n-\t\t\t\t\t.append( ( (Renderable) getRestriction() ).render( renderingContext ) );\n+\t\t\tjpaqlQuery.append( \" where \" );\n+\t\t\tjpaqlQuery.append( correlationRestrictionWhereFragment );\n+\t\t\tif ( getRestriction() != null ) {\n+\t\t\t\tif ( !correlationRestrictionWhereFragment.isEmpty() ) {\n+\t\t\t\t\tjpaqlQuery.append( \" and (\" );\n+\t\t\t\t}\n+\t\t\t\tjpaqlQuery.append( ( (Renderable) getRestriction() ).render( renderingContext ) );\n+\t\t\t\tif ( !correlationRestrictionWhereFragment.isEmpty() ) {\n+\t\t\t\t\tjpaqlQuery.append( \")\" );\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzA3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\t\t\trenderFetches( jpaqlQuery, renderingContext, correlationRoot.getFetches() );\n          \n      \n    \n    \n  \n\nSubquery can't have fetches", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r481337077", "createdAt": "2020-09-01T18:11:13Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/QueryStructure.java", "diffHunk": "@@ -318,18 +318,35 @@ private void renderFromClause(StringBuilder jpaqlQuery, RenderingContext renderi\n \t\t\t\t\t\tfinal FromImplementor correlationParent = correlationRoot.getCorrelationParent();\n \t\t\t\t\t\tcorrelationParent.prepareAlias( renderingContext );\n \t\t\t\t\t\tfinal String correlationRootAlias = correlationParent.getAlias();\n-\t\t\t\t\t\tfor ( Join<?, ?> correlationJoin : correlationRoot.getJoins() ) {\n-\t\t\t\t\t\t\tfinal JoinImplementor correlationJoinImpl = (JoinImplementor) correlationJoin;\n-\t\t\t\t\t\t\t// IMPL NOTE: reuse the sep from above!\n+\t\t\t\t\t\tif ( correlationRoot.canBeReplacedByCorrelatedParentInSubQuery() ) {\n+\t\t\t\t\t\t\tfor ( Join<?, ?> correlationJoin : correlationRoot.getJoins() ) {\n+\t\t\t\t\t\t\t\tfinal JoinImplementor correlationJoinImpl = (JoinImplementor) correlationJoin;\n+\t\t\t\t\t\t\t\t// IMPL NOTE: reuse the sep from above!\n+\t\t\t\t\t\t\t\tjpaqlQuery.append( sep );\n+\t\t\t\t\t\t\t\tcorrelationJoinImpl.prepareAlias( renderingContext );\n+\t\t\t\t\t\t\t\tjpaqlQuery.append( correlationRootAlias )\n+\t\t\t\t\t\t\t\t\t\t.append( '.' )\n+\t\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAttribute().getName() )\n+\t\t\t\t\t\t\t\t\t\t.append( \" as \" )\n+\t\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAlias() );\n+\t\t\t\t\t\t\t\tsep = \", \";\n+\t\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, correlationJoinImpl.getJoins() );\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\tcorrelationRoot.prepareAlias( renderingContext );\n \t\t\t\t\t\t\tjpaqlQuery.append( sep );\n-\t\t\t\t\t\t\tcorrelationJoinImpl.prepareAlias( renderingContext );\n-\t\t\t\t\t\t\tjpaqlQuery.append( correlationRootAlias )\n-\t\t\t\t\t\t\t\t\t.append( '.' )\n-\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAttribute().getName() )\n-\t\t\t\t\t\t\t\t\t.append( \" as \" )\n-\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAlias() );\n \t\t\t\t\t\t\tsep = \", \";\n-\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, correlationJoinImpl.getJoins() );\n+\t\t\t\t\t\t\tjpaqlQuery.append( correlationRoot.renderTableExpression( renderingContext ) );\n+\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, correlationRoot.getJoins() );\n+\t\t\t\t\t\t\tif ( correlationRoot instanceof Root ) {\n+\t\t\t\t\t\t\t\tSet<TreatedRoot> treats = ( (RootImpl) correlationRoot ).getTreats();\n+\t\t\t\t\t\t\t\tfor ( TreatedRoot treat : treats ) {\n+\t\t\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, treat.getJoins() );\n+\t\t\t\t\t\t\t\t\trenderFetches( jpaqlQuery, renderingContext, treat.getFetches() );\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\trenderFetches( jpaqlQuery, renderingContext, correlationRoot.getFetches() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzEyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\t\t\t\trenderFetches( jpaqlQuery, renderingContext, treat.getFetches() );\n          \n      \n    \n    \n  \n\nSubquery can't have fetches", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r481337129", "createdAt": "2020-09-01T18:11:18Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/QueryStructure.java", "diffHunk": "@@ -318,18 +318,35 @@ private void renderFromClause(StringBuilder jpaqlQuery, RenderingContext renderi\n \t\t\t\t\t\tfinal FromImplementor correlationParent = correlationRoot.getCorrelationParent();\n \t\t\t\t\t\tcorrelationParent.prepareAlias( renderingContext );\n \t\t\t\t\t\tfinal String correlationRootAlias = correlationParent.getAlias();\n-\t\t\t\t\t\tfor ( Join<?, ?> correlationJoin : correlationRoot.getJoins() ) {\n-\t\t\t\t\t\t\tfinal JoinImplementor correlationJoinImpl = (JoinImplementor) correlationJoin;\n-\t\t\t\t\t\t\t// IMPL NOTE: reuse the sep from above!\n+\t\t\t\t\t\tif ( correlationRoot.canBeReplacedByCorrelatedParentInSubQuery() ) {\n+\t\t\t\t\t\t\tfor ( Join<?, ?> correlationJoin : correlationRoot.getJoins() ) {\n+\t\t\t\t\t\t\t\tfinal JoinImplementor correlationJoinImpl = (JoinImplementor) correlationJoin;\n+\t\t\t\t\t\t\t\t// IMPL NOTE: reuse the sep from above!\n+\t\t\t\t\t\t\t\tjpaqlQuery.append( sep );\n+\t\t\t\t\t\t\t\tcorrelationJoinImpl.prepareAlias( renderingContext );\n+\t\t\t\t\t\t\t\tjpaqlQuery.append( correlationRootAlias )\n+\t\t\t\t\t\t\t\t\t\t.append( '.' )\n+\t\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAttribute().getName() )\n+\t\t\t\t\t\t\t\t\t\t.append( \" as \" )\n+\t\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAlias() );\n+\t\t\t\t\t\t\t\tsep = \", \";\n+\t\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, correlationJoinImpl.getJoins() );\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\tcorrelationRoot.prepareAlias( renderingContext );\n \t\t\t\t\t\t\tjpaqlQuery.append( sep );\n-\t\t\t\t\t\t\tcorrelationJoinImpl.prepareAlias( renderingContext );\n-\t\t\t\t\t\t\tjpaqlQuery.append( correlationRootAlias )\n-\t\t\t\t\t\t\t\t\t.append( '.' )\n-\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAttribute().getName() )\n-\t\t\t\t\t\t\t\t\t.append( \" as \" )\n-\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAlias() );\n \t\t\t\t\t\t\tsep = \", \";\n-\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, correlationJoinImpl.getJoins() );\n+\t\t\t\t\t\t\tjpaqlQuery.append( correlationRoot.renderTableExpression( renderingContext ) );\n+\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, correlationRoot.getJoins() );\n+\t\t\t\t\t\t\tif ( correlationRoot instanceof Root ) {\n+\t\t\t\t\t\t\t\tSet<TreatedRoot> treats = ( (RootImpl) correlationRoot ).getTreats();\n+\t\t\t\t\t\t\t\tfor ( TreatedRoot treat : treats ) {\n+\t\t\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, treat.getJoins() );\n+\t\t\t\t\t\t\t\t\trenderFetches( jpaqlQuery, renderingContext, treat.getFetches() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "2662edf5f07d3e7cb73660634f0b02b65cc8170e", "author": {"user": {"login": "NathanQingyangXu", "name": "Nathan Xu"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/2662edf5f07d3e7cb73660634f0b02b65cc8170e", "committedDate": "2020-09-01T21:27:31Z", "message": "HHH-13058 fix issue left join root cannot be replaced by correlated parent in subquery"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "2662edf5f07d3e7cb73660634f0b02b65cc8170e", "author": {"user": {"login": "NathanQingyangXu", "name": "Nathan Xu"}}, "url": "https://github.com/hibernate/hibernate-orm/commit/2662edf5f07d3e7cb73660634f0b02b65cc8170e", "committedDate": "2020-09-01T21:27:31Z", "message": "HHH-13058 fix issue left join root cannot be replaced by correlated parent in subquery"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMTMxMjEx", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#pullrequestreview-480131211", "createdAt": "2020-09-01T21:29:42Z", "commit": {"oid": "2662edf5f07d3e7cb73660634f0b02b65cc8170e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2900, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}