{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NTcwMzc2", "number": 3498, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMjo1MjoxMlrOEYzS4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMjo1MjozNlrOEYzS9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDQxNjk2OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/test/java/org/hibernate/test/dialect/functional/SQLServerDialectTempTableCollationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMjo1MjoxMlrOHBSPug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMjo1MjoxMlrOHBSPug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEwOTU2Mg==", "bodyText": "Instead of logging a debug message, I think it would be better to have a catch clause in the outer try-finally block that rethrows as RuntimeException. Or is there a valid use case for a SQLException being thrown?", "url": "https://github.com/hibernate/hibernate-orm/pull/3498#discussion_r471109562", "createdAt": "2020-08-16T12:52:12Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/test/java/org/hibernate/test/dialect/functional/SQLServerDialectTempTableCollationTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+package org.hibernate.test.dialect.functional;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Table;\n+\n+import org.hibernate.boot.registry.BootstrapServiceRegistry;\n+import org.hibernate.boot.registry.internal.StandardServiceRegistryImpl;\n+import org.hibernate.cfg.AvailableSettings;\n+import org.hibernate.cfg.Configuration;\n+import org.hibernate.dialect.SQLServer2005Dialect;\n+import org.hibernate.engine.jdbc.spi.JdbcServices;\n+\n+import org.hibernate.testing.AfterClassOnce;\n+import org.hibernate.testing.RequiresDialect;\n+import org.hibernate.testing.TestForIssue;\n+import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.hibernate.testing.transaction.TransactionUtil.doInHibernate;\n+\n+/**\n+ * @author Nathan Xu\n+ */\n+@RequiresDialect( SQLServer2005Dialect.class )\n+@TestForIssue( jiraKey = \"HHH-3326\" )\n+public class SQLServerDialectTempTableCollationTest extends BaseCoreFunctionalTestCase {\n+\n+\tprivate String originalDBCollation;\n+\tprivate final String changedDBCollation = \"SQL_Latin1_General_CP437_BIN\";\n+\n+\t@Override\n+\tprotected Configuration constructConfiguration() {\n+\t\tConfiguration configuration = super.constructConfiguration();\n+\t\tconfiguration.setProperty( AvailableSettings.KEYWORD_AUTO_QUOTING_ENABLED, Boolean.TRUE.toString() );\n+\t\treturn configuration;\n+\t}\n+\n+\t@AfterClassOnce\n+\tprotected void revertBackOriginalDBCollation() {\n+\t\tif ( originalDBCollation != null && !changedDBCollation.equals( originalDBCollation ) ) {\n+\t\t\tBootstrapServiceRegistry bootRegistry = buildBootstrapServiceRegistry();\n+\t\t\tStandardServiceRegistryImpl serviceRegistry = buildServiceRegistry(\n+\t\t\t\t\tbootRegistry,\n+\t\t\t\t\tconstructConfiguration()\n+\t\t\t);\n+\t\t\ttry (Connection connection = serviceRegistry.getService( JdbcServices.class )\n+\t\t\t\t\t.getBootstrapJdbcConnectionAccess()\n+\t\t\t\t\t.obtainConnection();\n+\t\t\t\t Statement statement = connection.createStatement()) {\n+\t\t\t\tconnection.setAutoCommit( true );\n+\t\t\t\tstatement.executeUpdate( \"ALTER DATABASE CURRENT COLLATE \" + originalDBCollation );\n+\t\t\t}\n+\t\t\tcatch (SQLException e) {\n+\t\t\t\tlog.debug( e.getMessage() );\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tserviceRegistry.destroy();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprotected void buildSessionFactory() {\n+\t\tBootstrapServiceRegistry bootRegistry = buildBootstrapServiceRegistry();\n+\t\tStandardServiceRegistryImpl serviceRegistry = buildServiceRegistry( bootRegistry, constructConfiguration() );\n+\n+\t\ttry {\n+\t\t\ttry ( Connection connection = serviceRegistry.getService( JdbcServices.class ).getBootstrapJdbcConnectionAccess().obtainConnection();\n+\t\t\t\t Statement statement = connection.createStatement() ) {\n+\t\t\t\tconnection.setAutoCommit( true );\n+\t\t\t\ttry ( ResultSet rs = statement.executeQuery( \"SELECT SERVERPROPERTY('collation')\" ) ) {\n+\t\t\t\t\trs.next();\n+\t\t\t\t\tString instanceCollation = rs.getString( 1 );\n+\t\t\t\t\tAssert.assertNotEquals( instanceCollation, changedDBCollation );\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (SQLException e) {\n+\t\t\t\tlog.debug( e.getMessage() );\n+\t\t\t}\n+\t\t\ttry ( Connection connection = serviceRegistry.getService( JdbcServices.class ).getBootstrapJdbcConnectionAccess().obtainConnection();\n+\t\t\t\t  Statement statement = connection.createStatement() ) {\n+\t\t\t\tconnection.setAutoCommit( true );\n+\t\t\t\ttry ( ResultSet rs = statement.executeQuery( \"SELECT CONVERT (varchar(256), DATABASEPROPERTYEX(DB_NAME(),'collation'))\" ) ) {\n+\t\t\t\t\trs.next();\n+\t\t\t\t\toriginalDBCollation = rs.getString( 1 );\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (SQLException e) {\n+\t\t\t\tlog.debug( e.getMessage() );\n+\t\t\t}\n+\t\t\ttry ( Connection connection = serviceRegistry.getService( JdbcServices.class ).getBootstrapJdbcConnectionAccess().obtainConnection();\n+\t\t\t\t Statement statement = connection.createStatement() ) {\n+\t\t\t\tconnection.setAutoCommit( true );\n+\t\t\t\tstatement.executeUpdate( \"ALTER DATABASE CURRENT COLLATE \" + changedDBCollation );\n+\t\t\t}\n+\t\t\tcatch (SQLException e) {\n+\t\t\t\tlog.debug( e.getMessage() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDQxNzE4OnYy", "diffSide": "RIGHT", "path": "hibernate-core/src/test/java/org/hibernate/test/dialect/functional/SQLServerDialectTempTableCollationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMjo1MjozNlrOHBSP1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMjo1MjozNlrOHBSP1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEwOTU5MA==", "bodyText": "Rethrow as RuntimeException", "url": "https://github.com/hibernate/hibernate-orm/pull/3498#discussion_r471109590", "createdAt": "2020-08-16T12:52:36Z", "author": {"login": "beikov"}, "path": "hibernate-core/src/test/java/org/hibernate/test/dialect/functional/SQLServerDialectTempTableCollationTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+package org.hibernate.test.dialect.functional;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Table;\n+\n+import org.hibernate.boot.registry.BootstrapServiceRegistry;\n+import org.hibernate.boot.registry.internal.StandardServiceRegistryImpl;\n+import org.hibernate.cfg.AvailableSettings;\n+import org.hibernate.cfg.Configuration;\n+import org.hibernate.dialect.SQLServer2005Dialect;\n+import org.hibernate.engine.jdbc.spi.JdbcServices;\n+\n+import org.hibernate.testing.AfterClassOnce;\n+import org.hibernate.testing.RequiresDialect;\n+import org.hibernate.testing.TestForIssue;\n+import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.hibernate.testing.transaction.TransactionUtil.doInHibernate;\n+\n+/**\n+ * @author Nathan Xu\n+ */\n+@RequiresDialect( SQLServer2005Dialect.class )\n+@TestForIssue( jiraKey = \"HHH-3326\" )\n+public class SQLServerDialectTempTableCollationTest extends BaseCoreFunctionalTestCase {\n+\n+\tprivate String originalDBCollation;\n+\tprivate final String changedDBCollation = \"SQL_Latin1_General_CP437_BIN\";\n+\n+\t@Override\n+\tprotected Configuration constructConfiguration() {\n+\t\tConfiguration configuration = super.constructConfiguration();\n+\t\tconfiguration.setProperty( AvailableSettings.KEYWORD_AUTO_QUOTING_ENABLED, Boolean.TRUE.toString() );\n+\t\treturn configuration;\n+\t}\n+\n+\t@AfterClassOnce\n+\tprotected void revertBackOriginalDBCollation() {\n+\t\tif ( originalDBCollation != null && !changedDBCollation.equals( originalDBCollation ) ) {\n+\t\t\tBootstrapServiceRegistry bootRegistry = buildBootstrapServiceRegistry();\n+\t\t\tStandardServiceRegistryImpl serviceRegistry = buildServiceRegistry(\n+\t\t\t\t\tbootRegistry,\n+\t\t\t\t\tconstructConfiguration()\n+\t\t\t);\n+\t\t\ttry (Connection connection = serviceRegistry.getService( JdbcServices.class )\n+\t\t\t\t\t.getBootstrapJdbcConnectionAccess()\n+\t\t\t\t\t.obtainConnection();\n+\t\t\t\t Statement statement = connection.createStatement()) {\n+\t\t\t\tconnection.setAutoCommit( true );\n+\t\t\t\tstatement.executeUpdate( \"ALTER DATABASE CURRENT COLLATE \" + originalDBCollation );\n+\t\t\t}\n+\t\t\tcatch (SQLException e) {\n+\t\t\t\tlog.debug( e.getMessage() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4141, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}