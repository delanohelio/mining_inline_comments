{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NTUwNzY0", "number": 1039, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDowNTo1NlrOEGL4sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDowNTo1NlrOEGL4sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTIxNjQ5OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/core_runner.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDowNTo1NlrOGk04aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1Njo0N1rOGlQ3Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODMyOQ==", "bodyText": "It might be easier to know what errors are raised by semgrep if we subclass and have an InvalidLanguageError that takes in language and span?", "url": "https://github.com/returntocorp/semgrep/pull/1039#discussion_r441268329", "createdAt": "2020-06-17T04:05:56Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -224,7 +228,18 @@ def _run_rule(\n         for language, all_patterns_for_language in self._group_patterns_by_language(\n             [rule]\n         ).items():\n-            targets = target_manager.get_files(language, rule.includes, rule.excludes)\n+            try:\n+                targets = target_manager.get_files(\n+                    language, rule.includes, rule.excludes\n+                )\n+            except UnknownLanguageError as ex:\n+                raise ErrorWithSpan(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6cd9eccd8277fa213640b6825008edf4854a7ed"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMDAzMg==", "bodyText": "We can do that but it would duplicate what you have -- at the time you throw the error we don't have context.\nSince the cause is chained in, the verbose mode I'm imagining would be able to easily show a complete stack trace.\nHowever, we can definitely just subclass and have two unknown language errors.", "url": "https://github.com/returntocorp/semgrep/pull/1039#discussion_r441530032", "createdAt": "2020-06-17T13:07:23Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -224,7 +228,18 @@ def _run_rule(\n         for language, all_patterns_for_language in self._group_patterns_by_language(\n             [rule]\n         ).items():\n-            targets = target_manager.get_files(language, rule.includes, rule.excludes)\n+            try:\n+                targets = target_manager.get_files(\n+                    language, rule.includes, rule.excludes\n+                )\n+            except UnknownLanguageError as ex:\n+                raise ErrorWithSpan(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODMyOQ=="}, "originalCommit": {"oid": "c6cd9eccd8277fa213640b6825008edf4854a7ed"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNjc3OQ==", "bodyText": "Oh I see. I think that's fine. Maybe rename the target manager exception to _UnknownLanguageError or something since with this PR that exception should be internal anyway. I think it makes sense as you say below to always subclass ErrorWithSpan so it's always clear from the type of the exception alone what kind of error this is vs having to look into the short_msg to find out", "url": "https://github.com/returntocorp/semgrep/pull/1039#discussion_r441726779", "createdAt": "2020-06-17T17:56:47Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -224,7 +228,18 @@ def _run_rule(\n         for language, all_patterns_for_language in self._group_patterns_by_language(\n             [rule]\n         ).items():\n-            targets = target_manager.get_files(language, rule.includes, rule.excludes)\n+            try:\n+                targets = target_manager.get_files(\n+                    language, rule.includes, rule.excludes\n+                )\n+            except UnknownLanguageError as ex:\n+                raise ErrorWithSpan(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODMyOQ=="}, "originalCommit": {"oid": "c6cd9eccd8277fa213640b6825008edf4854a7ed"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4606, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}