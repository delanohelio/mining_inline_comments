{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMDE5NDMw", "number": 1186, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjozNjoxNFrOEKrtEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToyNzozOFrOEKtozw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjM3MjY1OnYy", "diffSide": "RIGHT", "path": "semgrep-core/bin/Main.ml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjozNjoxNFrOGr3fEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjozNjoxNFrOGr3fEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1MTAyNA==", "bodyText": "Does this mean semgrep-core will use 4GB split among all the jobs or each one can use 4GB?", "url": "https://github.com/returntocorp/semgrep/pull/1186#discussion_r448651024", "createdAt": "2020-07-01T22:36:14Z", "author": {"login": "brendongo"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -347,6 +348,24 @@ let timeout_function lang = fun f ->\n   then f ()\n   else Common.timeout_function ~verbose:!verbose timeout f\n \n+(* from https://discuss.ocaml.org/t/todays-trick-memory-limits-with-gc-alarms/4431 *)\n+let run_with_memory_limit limit f =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7aa6e25d28f726fa386c8a44c64221007d1b5ff"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjY4NzE1OnYy", "diffSide": "RIGHT", "path": "semgrep-core/bin/Main.ml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToyNjoyMlrOGr6WXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToyNjoyMlrOGr6WXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5Nzk1MA==", "bodyText": "It would be nice to have a permanent test for this. You could add a --test or --debug flag that would enable the Gc.full_major () (or an environment variable).", "url": "https://github.com/returntocorp/semgrep/pull/1186#discussion_r448697950", "createdAt": "2020-07-02T01:26:22Z", "author": {"login": "mjambon"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -530,7 +549,16 @@ let iter_generic_ast_of_files_and_get_matches_and_exn_to_errors f files =\n          let ast = parse_generic lang file in\n \n          (* calling the hook *)\n-         f file lang ast, []\n+         run_with_memory_limit !maxout (fun () ->\n+           (f file lang ast, [])\n+           (* to test -maxout, you can uncomment the code below, to give\n+            * a chance to the Gc.create_alarm to run even if the program does\n+            * noi even need to run the Gc. However, this has a slow perf\n+            * penality on small programs, which is why it's better to keep\n+            * it in comment when you're not testing -maxout.\n+            *)\n+           (*|> (fun v -> Gc.full_major(); v) *)\n+         )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7aa6e25d28f726fa386c8a44c64221007d1b5ff"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjY4OTQzOnYy", "diffSide": "RIGHT", "path": "semgrep-core/bin/Main.ml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToyNzozOFrOGr6Xmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToyNzozOFrOGr6Xmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5ODI2Nw==", "bodyText": "I didn't know about this way.", "url": "https://github.com/returntocorp/semgrep/pull/1186#discussion_r448698267", "createdAt": "2020-07-02T01:27:38Z", "author": {"login": "mjambon"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -347,6 +348,24 @@ let timeout_function lang = fun f ->\n   then f ()\n   else Common.timeout_function ~verbose:!verbose timeout f\n \n+(* from https://discuss.ocaml.org/t/todays-trick-memory-limits-with-gc-alarms/4431 *)\n+let run_with_memory_limit limit f =\n+  let limit_memory () =\n+    let mem = (Gc.quick_stat ()).Gc.heap_words in\n+    if mem > limit / (Sys.word_size / 8)\n+    then begin\n+        if !verbose\n+        then pr2 (spf \"maxout allocated memory: %d\"\n+                      (mem * (Sys.word_size / 8)));\n+        raise Out_of_memory\n+      end\n+  in\n+  let alarm = Gc.create_alarm limit_memory in\n+  Fun.protect f ~finally:(fun () ->\n+      Gc.delete_alarm alarm;\n+      Gc.compact ()\n+  )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7aa6e25d28f726fa386c8a44c64221007d1b5ff"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4504, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}