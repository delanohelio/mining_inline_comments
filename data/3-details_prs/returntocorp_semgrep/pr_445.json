{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjM4OTA5", "number": 445, "title": "better error outputs and no more pattern validation required", "bodyText": "pattern validation is skipped altogether: massive time savings! cuts a lot of code in sgrep-lint and closes #386\n provide more descriptive exception times in sgrep core and handlers that convert them to structured JSON\n the first invalid pattern will be reported in a JSON message by sgrep core\n sgrep-lint will read the json error report and choose an exit code and friendly user message (decoding the pattern index to actually get all the way back to the user's rule id)\nCloses #397\n introduce more exit codes for various failure types\n\nAddresses some of the points in #384", "createdAt": "2020-04-11T19:52:07Z", "url": "https://github.com/returntocorp/semgrep/pull/445", "merged": true, "mergeCommit": {"oid": "2b5bb48002c56a2cc209d510b7b8dac4aa675390"}, "closed": true, "closedAt": "2020-04-12T02:19:33Z", "author": {"login": "ievans"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWpqVjAH2gAyNDAyMjM4OTA5OjI4NDIxNmNjNTQ4YjBiNDQ5YWJlNmFkOTcwYzU4MWE3ZDA2OThkMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcW1DWxgFqTM5MTgyOTI0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "284216cc548b0b449abe6ad970c581a7d0698d08", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/284216cc548b0b449abe6ad970c581a7d0698d08", "committedDate": "2020-04-11T18:04:46Z", "message": "progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce1da94478f23ec8ee29f9bf1bc6c35fcf71d710", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/ce1da94478f23ec8ee29f9bf1bc6c35fcf71d710", "committedDate": "2020-04-11T19:03:44Z", "message": "compiles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3904ad8a3d75c0a0d8297418aee28ffda536eb4", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/e3904ad8a3d75c0a0d8297418aee28ffda536eb4", "committedDate": "2020-04-11T19:46:05Z", "message": "use error messages inside sgrep-lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b24d399d2f491dd4af71bedcc12f93fd21bfdf5", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/0b24d399d2f491dd4af71bedcc12f93fd21bfdf5", "committedDate": "2020-04-11T19:53:20Z", "message": "address mypy comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f322afd221576ce790605eaf471e9c5485c04b3", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/7f322afd221576ce790605eaf471e9c5485c04b3", "committedDate": "2020-04-11T20:34:53Z", "message": "fix test suite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/ad6775378a80c60dadc23f40d713c33949759a84", "committedDate": "2020-04-11T20:38:30Z", "message": "cleanup dead code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODAwMzc0", "url": "https://github.com/returntocorp/semgrep/pull/445#pullrequestreview-391800374", "createdAt": "2020-04-11T21:01:51Z", "commit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTowMTo1MVrOGEQEAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTowMTo1MVrOGEQEAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExMDY1Ng==", "bodyText": "cc @aryx . What is the future of the sgrep CLI? Would it be reasonable to default to JSON output in all cases? Simplifies things for sgrep_lint but I don't have full visibility.", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r407110656", "createdAt": "2020-04-11T21:01:51Z", "author": {"login": "ievans"}, "path": "sgrep/bin/main_sgrep.ml", "diffHunk": "@@ -540,10 +566,14 @@ let main () =\n     (* main entry *)\n     (* --------------------------------------------------------- *)\n     | x::xs -> \n-        if !rules_file <> \"\"\n-        then sgrep_with_rules !rules_file (x::xs)\n-        else sgrep_with_one_pattern (x::xs)\n-\n+        (try (\n+          if !rules_file <> \"\"\n+          then sgrep_with_rules !rules_file (x::xs)\n+          else sgrep_with_one_pattern (x::xs)\n+        ) with exn -> \n+          pr (format_output_exception exn); (* todo, should be pr2 probably *)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODI5MDg5", "url": "https://github.com/returntocorp/semgrep/pull/445#pullrequestreview-391829089", "createdAt": "2020-04-12T07:18:12Z", "commit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzoxODoxMlrOGES-LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzoxODoxMlrOGES-LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODMxNg==", "bodyText": "pr means on stdout, pr2 means on stderr.\nI don't know what sgrep-lint captures, I think stdout, so probably good to have pr", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r407158316", "createdAt": "2020-04-12T07:18:12Z", "author": {"login": "aryx"}, "path": "sgrep/bin/main_sgrep.ml", "diffHunk": "@@ -540,10 +566,14 @@ let main () =\n     (* main entry *)\n     (* --------------------------------------------------------- *)\n     | x::xs -> \n-        if !rules_file <> \"\"\n-        then sgrep_with_rules !rules_file (x::xs)\n-        else sgrep_with_one_pattern (x::xs)\n-\n+        (try (\n+          if !rules_file <> \"\"\n+          then sgrep_with_rules !rules_file (x::xs)\n+          else sgrep_with_one_pattern (x::xs)\n+        ) with exn -> \n+          pr (format_output_exception exn); (* todo, should be pr2 probably *)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODI5MTQx", "url": "https://github.com/returntocorp/semgrep/pull/445#pullrequestreview-391829141", "createdAt": "2020-04-12T07:18:56Z", "commit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzoxODo1N1rOGES-ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzoxODo1N1rOGES-ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODM5NQ==", "bodyText": "I think you can remove the 'Exception' suffix, it's clear from the context that it's an exception.", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r407158395", "createdAt": "2020-04-12T07:18:57Z", "author": {"login": "aryx"}, "path": "sgrep/lib/parse_rules.ml", "diffHunk": "@@ -16,16 +16,21 @@ open Common\n \n module R = Rule\n \n+exception InvalidRuleException of string * string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODI5MTk2", "url": "https://github.com/returntocorp/semgrep/pull/445#pullrequestreview-391829196", "createdAt": "2020-04-12T07:20:02Z", "commit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzoyMDowMlrOGES-3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzoyMDowMlrOGES-3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODQ5Mw==", "bodyText": "note that this yaml file is always generated by sgrep-lint; regular users are not supposed to feed sgrep-core directly with yaml file (except me when I test things), so those errors should be caught by the sgrep-lint wrapper anyway.", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r407158493", "createdAt": "2020-04-12T07:20:02Z", "author": {"login": "aryx"}, "path": "sgrep/lib/parse_rules.ml", "diffHunk": "@@ -52,37 +57,36 @@ let parse file =\n                let languages = langs |> List.map (function\n                 | `String s ->\n                   (match Lang.lang_of_string_opt s with\n-                  | None -> error (spf \"unsupported language: %s\" s)\n+                  | None -> raise (InvalidLanguageException (id, (spf \"unsupported language: %s\" s)))\n                   | Some l -> l\n                   )\n-                | _ -> error (spf \"expecting a string for languages\")\n+                | _ -> raise (InvalidRuleException (id, (spf \"expecting a string for languages\")))\n                ) in\n                let lang =\n                  match languages with\n-                 | [] -> error \"we need at least one language\"\n+                 | [] -> raise (InvalidRuleException (id, \"we need at least one language\"))\n                  | x::_xs -> x\n                in\n                let pattern =\n                  (* todo? call Normalize_ast.normalize here? *)\n                  try Parse_generic.parse_pattern lang pattern\n                  with exn ->\n-                   error (spf \"could not parse the pattern %s (exn = %s)\"\n-                            pattern (Common.exn_to_s exn))\n+                   raise (InvalidPatternException (id, pattern, (Lang.string_of_lang lang), (Common.exn_to_s exn)))\n                in\n-               let severity = severity_of_string sev in\n+               let severity = (severity_of_string id sev) in\n                { R. id; pattern; message; languages; severity }\n              | x ->\n                pr2_gen x;\n-               error \"wrong rule fields\"\n+               raise (InvalidYamlException \"wrong rule fields\")\n              )\n           | x ->\n               pr2_gen x;\n-              error \"wrong rule fields\"\n+              raise (InvalidYamlException \"wrong rule fields\")\n          )\n-      | _ -> error \"missing rules entry\"\n+      | _ -> raise (InvalidYamlException \"missing rules entry as top-level key\")\n       )\n   | Result.Error (`Msg s) ->\n-    failwith (spf \"sgrep_lint: could not parse %s (error = %s)\" file s)\n+    raise (UnparsableYamlException s)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODI5MjQ0", "url": "https://github.com/returntocorp/semgrep/pull/445#pullrequestreview-391829244", "createdAt": "2020-04-12T07:21:03Z", "commit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1113, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}