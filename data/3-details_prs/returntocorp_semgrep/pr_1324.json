{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjYyMjEy", "number": 1324, "title": "Add 'metavariable-regex' operator", "bodyText": "Fix #1217. The 'metavariable-regex' operator filters finding's by metavariable value against a Python re.match compatible expression.", "createdAt": "2020-07-22T17:41:57Z", "url": "https://github.com/returntocorp/semgrep/pull/1324", "merged": true, "mergeCommit": {"oid": "794348ee48ccfe4a41e0afd71c9ba9073923c23f"}, "closed": true, "closedAt": "2020-07-23T13:21:58Z", "author": {"login": "mschwager"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3eqHMAFqTQ1MzU1MzQyNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3rPC0AFqTQ1MzkzMDQzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTUzNDI3", "url": "https://github.com/returntocorp/semgrep/pull/1324#pullrequestreview-453553427", "createdAt": "2020-07-22T17:55:04Z", "commit": {"oid": "fd12dc686e34d3d3b3cc9c45c2b95e5a820f30c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1NTowNFrOG1tydg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1NTowNFrOG1tydg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NzkxMA==", "bodyText": "is this the right error type? Don't we have an error type that represents invalid (semantically) YAML pattern?", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r458977910", "createdAt": "2020-07-22T17:55:04Z", "author": {"login": "ievans"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -134,6 +161,30 @@ def _evaluate_single_expression(\n             }\n         )\n         return output_ranges\n+    elif expression.operator == OPERATORS.METAVARIABLE_REGEX:\n+        if (\n+            not isinstance(expression.operand, dict)\n+            or \"metavariable\" not in expression.operand\n+            or \"regex\" not in expression.operand\n+        ):\n+            raise SemgrepError(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd12dc686e34d3d3b3cc9c45c2b95e5a820f30c5"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79cec25749e4a0630da07bd6477e1472d5b6e9ef", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/79cec25749e4a0630da07bd6477e1472d5b6e9ef", "committedDate": "2020-07-22T17:57:24Z", "message": "Add 'metavariable-regex' operator\n\nFix #1217. The 'metavariable-regex' operator filters finding's\nmetavariable values against a Python re.match compatible expression."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTU1NDUx", "url": "https://github.com/returntocorp/semgrep/pull/1324#pullrequestreview-453555451", "createdAt": "2020-07-22T17:57:40Z", "commit": {"oid": "fd12dc686e34d3d3b3cc9c45c2b95e5a820f30c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42bd662db40a9305d300e650d0050da0c26bf39a", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/42bd662db40a9305d300e650d0050da0c26bf39a", "committedDate": "2020-07-22T17:58:56Z", "message": "Bump CHANGELOG"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd12dc686e34d3d3b3cc9c45c2b95e5a820f30c5", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/fd12dc686e34d3d3b3cc9c45c2b95e5a820f30c5", "committedDate": "2020-07-22T17:38:46Z", "message": "Add 'metavariable-regex' operator\n\nFix #1217. The 'metavariable-regex' operator filters finding's\nmetavariable values against a Python re.match compatible expression."}, "afterCommit": {"oid": "42bd662db40a9305d300e650d0050da0c26bf39a", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/42bd662db40a9305d300e650d0050da0c26bf39a", "committedDate": "2020-07-22T17:58:56Z", "message": "Bump CHANGELOG"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d689d90d5d9ed872d5ec57d43be00d4484390781", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/d689d90d5d9ed872d5ec57d43be00d4484390781", "committedDate": "2020-07-22T18:48:06Z", "message": "Fix tests and use more appropriate exceptions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTkyMTIy", "url": "https://github.com/returntocorp/semgrep/pull/1324#pullrequestreview-453592122", "createdAt": "2020-07-22T18:48:39Z", "commit": {"oid": "42bd662db40a9305d300e650d0050da0c26bf39a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0ODozOVrOG1vs_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0ODozOVrOG1vs_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwOTI3OA==", "bodyText": "\u2764\ufe0f for documentation", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459009278", "createdAt": "2020-07-22T18:48:39Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -197,6 +199,30 @@ rules:\n *Note that single (`'`) and double (`\"`) quotes [behave differently](https://docs.octoprint.org/en/master/configuration/yaml.html#scalars)\n in YAML syntax. Single quotes are typically preferred when using backslashes (`\\`) with `pattern-regex`.*\n \n+### `metavariable-regex`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42bd662db40a9305d300e650d0050da0c26bf39a"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTk0MjE1", "url": "https://github.com/returntocorp/semgrep/pull/1324#pullrequestreview-453594215", "createdAt": "2020-07-22T18:51:26Z", "commit": {"oid": "d689d90d5d9ed872d5ec57d43be00d4484390781"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo1MToyNlrOG1vzww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo1MToyNlrOG1vzww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxMTAxMQ==", "bodyText": "Is this the correct error message? What does this case have to do with pattern-where-python?", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459011011", "createdAt": "2020-07-22T18:51:26Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -99,7 +126,8 @@ def _evaluate_single_expression(\n                 f\"at least one rule needs to execute arbitrary code; this is dangerous! if you want to continue, enable the flag: {RCE_RULE_FLAG}\",\n                 code=NEED_ARBITRARY_CODE_EXEC_EXIT_CODE,\n             )\n-        assert expression.operand, \"must have operand for this operator type\"\n+        if not isinstance(expression.operand, str):\n+            raise InvalidRuleSchemaError(\"pattern-where-python must have a string value\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d689d90d5d9ed872d5ec57d43be00d4484390781"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTk1MjQ4", "url": "https://github.com/returntocorp/semgrep/pull/1324#pullrequestreview-453595248", "createdAt": "2020-07-22T18:52:49Z", "commit": {"oid": "d689d90d5d9ed872d5ec57d43be00d4484390781"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo1Mjo0OVrOG1v24w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo1Mjo0OVrOG1v24w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxMTgxMQ==", "bodyText": "This may be confusing, as the dict presumably won't be in a pattern key...", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459011811", "createdAt": "2020-07-22T18:52:49Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/rule.py", "diffHunk": "@@ -172,11 +179,11 @@ def _parse_boolean_expression(\n                         )\n \n     @staticmethod\n-    def _validate_operand(operand: YamlTree) -> str:  # type: ignore\n-        if not isinstance(operand.value, str):\n+    def _validate_operand(operand: YamlTree) -> Union[str, dict]:  # type: ignore\n+        if not (isinstance(operand.value, str) or isinstance(operand.value, dict)):\n             raise InvalidRuleSchemaError(\n                 short_msg=\"invalid operand\",\n-                long_msg=f\"type of `pattern` must be a string, but it was a {type(operand.unroll()).__name__}\",\n+                long_msg=f\"type of `pattern` must be a string or dict, but it was a {type(operand.unroll()).__name__}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d689d90d5d9ed872d5ec57d43be00d4484390781"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTk2Nzc1", "url": "https://github.com/returntocorp/semgrep/pull/1324#pullrequestreview-453596775", "createdAt": "2020-07-22T18:54:57Z", "commit": {"oid": "d689d90d5d9ed872d5ec57d43be00d4484390781"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo1NDo1N1rOG1v7xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo1NDo1N1rOG1v7xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxMzA2MA==", "bodyText": "I'd be curious to see a negative test case for:\n- pattern:\n    metavariable: '$X'\n    regex: 'method1'", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459013060", "createdAt": "2020-07-22T18:54:57Z", "author": {"login": "nbrahms"}, "path": "semgrep/tests/e2e/rules/metavariable-regex-multi-regex.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+rules:\n+  - id: metavar-test-multi-regex\n+    patterns:\n+      - pattern: 'metavariable_regex_test.$X($Y)'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d689d90d5d9ed872d5ec57d43be00d4484390781"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3a303f663c3dff9bfa55f48416d7d80e336f0a2", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/a3a303f663c3dff9bfa55f48416d7d80e336f0a2", "committedDate": "2020-07-22T19:32:46Z", "message": "Bump error message and use SemgrepError"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44bae5eb3823feb1b47d0b1d5a869bf8084e67d9", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/44bae5eb3823feb1b47d0b1d5a869bf8084e67d9", "committedDate": "2020-07-22T19:48:10Z", "message": "Fixup test message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzOTMwNDM4", "url": "https://github.com/returntocorp/semgrep/pull/1324#pullrequestreview-453930438", "createdAt": "2020-07-23T08:32:10Z", "commit": {"oid": "44bae5eb3823feb1b47d0b1d5a869bf8084e67d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODozMjoxMFrOG2BCbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODozMjoxMFrOG2BCbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5MzI5NQ==", "bodyText": "Why the quotes around $METHOD?\nWhy the quotes around the regexp below? The main advantage of YAML is not having\nto use \"\" as in JSON around strings.\nWe do not use quotes around semgrep patterns for examples.", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459293295", "createdAt": "2020-07-23T08:32:10Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -197,6 +199,30 @@ rules:\n *Note that single (`'`) and double (`\"`) quotes [behave differently](https://docs.octoprint.org/en/master/configuration/yaml.html#scalars)\n in YAML syntax. Single quotes are typically preferred when using backslashes (`\\`) with `pattern-regex`.*\n \n+### `metavariable-regex`\n+\n+The `metavariable-regex` operator searches metavariables for a [Python `re.match`](https://docs.python.org/3/library/re.html#re.match)\n+compatible expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables)\n+value.\n+\n+**Example**\n+\n+The `metavariable-regex` operator is a mapping which requires the\n+`metavariable` and `regex` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: insecure-methods\n+    patterns:\n+      - pattern: module.$METHOD(...)\n+      - metavariable-regex:\n+          metavariable: '$METHOD'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44bae5eb3823feb1b47d0b1d5a869bf8084e67d9"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1360, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}