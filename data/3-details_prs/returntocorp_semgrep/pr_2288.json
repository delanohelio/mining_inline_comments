{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMjE4MzYx", "number": 2288, "title": "type outline for kotlin", "bodyText": "Basic type support for kotlin.\nTest Plan:\nRun semgrep-core -dump_ast tests/kotlin/types.kt. This gives me the AST:\nPr(\n  [DefStmt(\n     ({\n       name=EId((\"foo\", ()),\n              {id_resolved=Ref(None); id_type=Ref(None);\n               id_const_literal=Ref(None); });\n       attrs=[]; tparams=[]; },\n      FuncDef(\n        {fkind=(Function, ()); fparams=[]; frettype=None;\n         fbody=Block(\n                 [ExprStmt(\n                    Call(\n                      Id((\"x\", ()),\n                        {id_resolved=Ref(None); id_type=Ref(None);\n                         id_const_literal=Ref(None); }),\n                      [Arg(OtherExpr(OE_StmtExpr, [S(Return((), None, ()))]));\n                       Arg(IdSpecial((This, ())))]), ())]);\n         })))])\n\n\nTodo:\n\nadd type modifier information to type_ function (after annotations and everything else are done)\n\nUnsure about:\n\nTyTuple return for user_type -- is this ok?\nfunction_type is not using v1 currently. Will need to think about how to add this in.", "createdAt": "2020-12-18T00:42:00Z", "url": "https://github.com/returntocorp/semgrep/pull/2288", "merged": true, "mergeCommit": {"oid": "53fdad9134d82449c5a7e69fefb40d45de9825ab"}, "closed": true, "closedAt": "2020-12-28T13:47:25Z", "author": {"login": "colleend"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnNK_RgH2gAyNTQyMjE4MzYxOjcyZTgzMGI3MDk2YTQyYzQ3ZDkwM2ZkNmYwMzMxMWRjN2MyOGI5ODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdqmablgFqTU1OTE1MTUzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "72e830b7096a42c47d903fd6f03311dc7c28b981", "author": {"user": {"login": "colleend", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/72e830b7096a42c47d903fd6f03311dc7c28b981", "committedDate": "2020-12-18T00:41:03Z", "message": "type outline for kotlin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1Mjk5NDE0", "url": "https://github.com/returntocorp/semgrep/pull/2288#pullrequestreview-555299414", "createdAt": "2020-12-18T08:44:47Z", "commit": {"oid": "72e830b7096a42c47d903fd6f03311dc7c28b981"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODo0NDo0OFrOIIYsYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODo1MDoyNlrOIIZDhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY2NDA5Ng==", "bodyText": "I tyink you can build a ParamClassic with p_type = v1, and p_name = None,\nlike we do in C for function signatures.", "url": "https://github.com/returntocorp/semgrep/pull/2288#discussion_r545664096", "createdAt": "2020-12-18T08:44:48Z", "author": {"login": "aryx"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -465,8 +465,9 @@ and annotation (env : env) (x : CST.annotation) =\n and anon_choice_param_b77c1d8 (env : env) (x : CST.anon_choice_param_b77c1d8) =\n   (match x with\n    | `Param x -> parameter env x\n-   | `Type x -> let _ =  type_ env x in\n-       raise Todo\n+   | `Type x ->\n+       let v1 =  type_ env x in\n+       ParamPattern (PatType v1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e830b7096a42c47d903fd6f03311dc7c28b981"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY2NzQ1Nw==", "bodyText": "in grammar.js they use repeat1($._quest)\nand _quest: $ => \"?\"\nwhich means there is at least one \"?\", so you can write the pattern:\n| [] -> raise Impossible (* see repeat1($._quest) in grammar.js *)", "url": "https://github.com/returntocorp/semgrep/pull/2288#discussion_r545667457", "createdAt": "2020-12-18T08:47:54Z", "author": {"login": "aryx"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1344,13 +1345,25 @@ and nullable_type (env : env) ((v1, v2) : CST.nullable_type) =\n     )\n   in\n   let v2 = List.map (token env) (* \"?\" *) v2 in\n-  todo env (v1, v2)\n+  (match v2 with\n+   | hd::tl -> TyQuestion (v1, hd)\n+   | _ ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e830b7096a42c47d903fd6f03311dc7c28b981"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY2ODg5NQ==", "bodyText": "There is even AST_generic.param_of_type() to help build this parameter_classic type.", "url": "https://github.com/returntocorp/semgrep/pull/2288#discussion_r545668895", "createdAt": "2020-12-18T08:49:12Z", "author": {"login": "aryx"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -465,8 +465,9 @@ and annotation (env : env) (x : CST.annotation) =\n and anon_choice_param_b77c1d8 (env : env) (x : CST.anon_choice_param_b77c1d8) =\n   (match x with\n    | `Param x -> parameter env x\n-   | `Type x -> let _ =  type_ env x in\n-       raise Todo\n+   | `Type x ->\n+       let v1 =  type_ env x in\n+       ParamPattern (PatType v1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY2NDA5Ng=="}, "originalCommit": {"oid": "72e830b7096a42c47d903fd6f03311dc7c28b981"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY3MDAyMg==", "bodyText": "You can factorize a bit and do let param = { (AST_generic.param_of_id v1) with ptype = v3 }", "url": "https://github.com/returntocorp/semgrep/pull/2288#discussion_r545670022", "createdAt": "2020-12-18T08:50:26Z", "author": {"login": "aryx"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1344,13 +1345,25 @@ and nullable_type (env : env) ((v1, v2) : CST.nullable_type) =\n     )\n   in\n   let v2 = List.map (token env) (* \"?\" *) v2 in\n-  todo env (v1, v2)\n+  (match v2 with\n+   | hd::tl -> TyQuestion (v1, hd)\n+   | _ ->\n+       let q = Parse_info.fake_info \"?\" in\n+       TyQuestion (v1, q)\n+  )\n \n and parameter (env : env) ((v1, v2, v3) : CST.parameter) : parameter =\n   let v1 = simple_identifier env v1 in\n   let v2 = token env v2 (* \":\" *) in\n   let v3 = type_ env v3 in\n-  todo env (v1, v2, v3)\n+  let param = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e830b7096a42c47d903fd6f03311dc7c28b981"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdffc729ef8af778577c770c76dfb9ed732fe73f", "author": {"user": {"login": "colleend", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/bdffc729ef8af778577c770c76dfb9ed732fe73f", "committedDate": "2020-12-18T19:03:49Z", "message": "adding changes for succinctness and paramclassic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MTUxNTMx", "url": "https://github.com/returntocorp/semgrep/pull/2288#pullrequestreview-559151531", "createdAt": "2020-12-28T13:47:19Z", "commit": {"oid": "bdffc729ef8af778577c770c76dfb9ed732fe73f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 846, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}