{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTYwODUw", "number": 739, "title": "Fix #629, add pattern-regex functionality", "bodyText": "Sample output:\n$ python -m pipenv run python -m semgrep --config tests/e2e/rules/regex.yaml tests/e2e/targets/basic/regex.py\ntests/e2e/targets/basic/regex.py\nERROR rule:tests.e2e.rules.test-regex: test regex message\n123.123.123.123\n\nSome design considerations:\n\npattern-regex cannot currently be combined with other patterns like pattern or pattern-inside. Since pattern-regex does not operate like other operators it's already somewhat shoehorned in. Tighter integration will likely require a refactor and quite a bit more work. Combining with other operators would require pattern-regex to operate as both a top-level AND child operator. The current semgrep architecture makes this somewhat of a challenge (all rules are flattened). We can always iterate here as functionality is requested.\npattern-regex does not work with existing include/exclude functionality. It simply looks for files with extensions that should match the language. This is because include/exclude functionality is implemented in semgrep-core. Re-implementing the same logic in semgrep is undesirable and likely difficult and a fragile architecture (will we always remember to keep them in sync?). Alternatively, if we want to rectify this we should refactor the code to perform all this work in one location, or consider something like Bento which already has this functionality. Again, we can re-evaluate, refactor, and add functionality as user requests come in.", "createdAt": "2020-05-12T20:48:03Z", "url": "https://github.com/returntocorp/semgrep/pull/739", "merged": true, "mergeCommit": {"oid": "e4ed446be5ae907b4a1b2f93eb69205dc241eea7"}, "closed": true, "closedAt": "2020-05-15T17:25:52Z", "author": {"login": "mschwager"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgqqy-gFqTQxMDQxMzgyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABchlMpWgFqTQxMjgyMTE4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDEzODI1", "url": "https://github.com/returntocorp/semgrep/pull/739#pullrequestreview-410413825", "createdAt": "2020-05-12T20:53:45Z", "commit": {"oid": "40e1e8b5c3208879c099dc58388321cc50c7f033"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDo1Mzo0NVrOGUYjJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDo1NDowNFrOGUYj4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyNjkxNw==", "bodyText": "pattern-regex operates on the entire file buffer, not line-by-line. This was intentionally done so that it can find code like:\nsome_func_call(\n    \"INSECURE_STRING\"\n)\nOperating line-by-line wouldn't allow for an expression to consider the argument above. The downside is that we don't have an easy way to access line and column information (it's all just one big file contents string). This means we couldn't leverage existing [\"extra\"][\"lines\"] functionality. We instead store the regex match contents directly in the finding and reference it here as contents.", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424026917", "createdAt": "2020-05-12T20:53:45Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -92,6 +92,9 @@ def build_normal_output(\n                     severity_prepend = f\"{severity} \"\n             yield f\"{severity_prepend}{YELLOW_COLOR}rule:{check_id}: {message}{RESET_COLOR}\"\n \n+        if extra.get(\"contents\"):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40e1e8b5c3208879c099dc58388321cc50c7f033"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyNzEwNw==", "bodyText": "See above.", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424027107", "createdAt": "2020-05-12T20:54:04Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/rule_match.py", "diffHunk": "@@ -97,11 +97,15 @@ def to_json(self) -> Dict[str, Any]:\n         json_obj[\"extra\"][\"message\"] = self._message\n         json_obj[\"extra\"][\"metadata\"] = self._metadata\n         json_obj[\"extra\"][\"severity\"] = self._severity\n+\n         if self._fix:\n             json_obj[\"extra\"][\"fix\"] = self._fix\n+\n         json_obj[\"start\"] = self._start\n         json_obj[\"end\"] = self._end\n-        json_obj[\"extra\"][\"lines\"] = \"\\n\".join(self.lines).rstrip()\n+\n+        if \"line\" in self.start and \"line\" in self.end:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40e1e8b5c3208879c099dc58388321cc50c7f033"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMzMxMjM3", "url": "https://github.com/returntocorp/semgrep/pull/739#pullrequestreview-411331237", "createdAt": "2020-05-13T22:02:43Z", "commit": {"oid": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjowMjo0M1rOGVFGeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxMjozMFrOGVFWPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1Njg1Ng==", "bodyText": "Function level comment would be helpful. Not immediately clear what this function does", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424756856", "createdAt": "2020-05-13T22:02:43Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/util.py", "diffHunk": "@@ -64,3 +68,8 @@ def set_flags(debug: bool, quiet: bool) -> None:\n     if quiet:\n         QUIET = True\n         debug_print(\"QUIET is on\")\n+\n+\n+def partition(pred: Callable, iterable: Iterable) -> Tuple[List, List]:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1NzU2NQ==", "bodyText": "Should we put the regex match in \"content\" here? So it becomes one stop shop of the offending match?", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424757565", "createdAt": "2020-05-13T22:04:30Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/rule_match.py", "diffHunk": "@@ -97,11 +97,15 @@ def to_json(self) -> Dict[str, Any]:\n         json_obj[\"extra\"][\"message\"] = self._message\n         json_obj[\"extra\"][\"metadata\"] = self._metadata\n         json_obj[\"extra\"][\"severity\"] = self._severity\n+\n         if self._fix:\n             json_obj[\"extra\"][\"fix\"] = self._fix\n+\n         json_obj[\"start\"] = self._start\n         json_obj[\"end\"] = self._end\n-        json_obj[\"extra\"][\"lines\"] = \"\\n\".join(self.lines).rstrip()\n+\n+        if \"line\" in self.start and \"line\" in self.end:\n+            json_obj[\"extra\"][\"lines\"] = \"\\n\".join(self.lines).rstrip()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1ODUyOA==", "bodyText": "Is there a reason we go through BooleanRuleExpression when we don't get any of the boolean composition anyway?", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424758528", "createdAt": "2020-05-13T22:07:00Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/rule.py", "diffHunk": "@@ -72,6 +72,13 @@ def _build_boolean_expression(\n                     OPERATORS.AND, rule_raw[\"id\"], None, rule_raw[pattern_name]\n                 )\n \n+        for pattern_name in pattern_names_for_operator(OPERATORS.REGEX):\n+            pattern = rule_raw.get(pattern_name)\n+            if pattern:\n+                return BooleanRuleExpression(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MDg5Mw==", "bodyText": "Probably better for readability to have this in a function?", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424760893", "createdAt": "2020-05-13T22:12:30Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -159,12 +188,65 @@ def _run_rules(\n             for language, all_patterns_for_language in self._group_patterns_by_language(\n                 rules\n             ).items():\n-                with tempfile.NamedTemporaryFile(\"w\") as fout:\n-                    # very important not to sort keys here\n-                    patterns_json = [p.to_json() for p in all_patterns_for_language]\n-                    yaml_as_str = yaml.safe_dump(\n-                        {\"rules\": patterns_json}, sort_keys=False\n+                # semgrep-core doesn't know about OPERATORS.REGEX - this is\n+                # strictly a semgrep Python feature. Regex filtering is\n+                # performed purely in Python code.\n+                patterns_regex, patterns = partition(\n+                    lambda p: p.expression.operator == OPERATORS.REGEX,\n+                    all_patterns_for_language,\n+                )\n+                if patterns_regex:\n+                    file_extensions = LANGUAGE_EXTENSIONS[language]\n+                    filepaths = [\n+                        str(target)\n+                        for target in targets\n+                        if target.is_file()\n+                        and self._pattern_regex_all\n+                        or any(\n+                            str(target).endswith(extension)\n+                            for extension in file_extensions\n+                        )\n+                    ]\n+                    filepaths.extend(\n+                        os.path.join(dirpath, filename)\n+                        for target in targets\n+                        if target.is_dir()\n+                        for dirpath, _, filenames in os.walk(str(target))\n+                        for filename in filenames\n+                        if self._pattern_regex_all\n+                        or any(\n+                            os.path.join(dirpath, filename).endswith(extension)\n+                            for extension in file_extensions\n+                        )\n+                    )\n+                    re_fn = functools.partial(\n+                        get_re_matches,\n+                        [pattern.to_json() for pattern in patterns_regex],\n                     )\n+                    with multiprocessing.Pool(self._jobs) as pool:\n+                        matches = pool.map(re_fn, filepaths)\n+\n+                    outputs.extend(\n+                        PatternMatch(\n+                            {\n+                                \"check_id\": match.pattern[\"id\"],\n+                                \"path\": match.path,\n+                                \"start\": {\"offset\": match.match[\"span\"][0]},\n+                                \"end\": {\"offset\": match.match[\"span\"][1]},\n+                                \"extra\": {\"contents\": match.match[\"contents\"]},\n+                            }\n+                        )\n+                        for file_matches in matches\n+                        for match in file_matches\n+                    )\n+\n+                    # Only consider OPERATORS.REGEX xor OPERATORS.AND for now\n+                    continue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMzQ2MTA3", "url": "https://github.com/returntocorp/semgrep/pull/739#pullrequestreview-411346107", "createdAt": "2020-05-13T22:34:39Z", "commit": {"oid": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjozNDo0MFrOGVF27A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjozNDo0MFrOGVF27A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2OTI2MA==", "bodyText": "Also need to move this to a diff version since 0.7.0 was cut", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424769260", "createdAt": "2020-05-13T22:34:40Z", "author": {"login": "brendongo"}, "path": "CHANGELOG.md", "diffHunk": "@@ -8,7 +8,10 @@ This project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html\n - `--exclude`, `--include`, `--exclude-dir`, and `--include-dir` flags\n   for targeting specific paths with command line options.\n   The behavior of these flags mimics `grep`'s behavior.\n-- A `--sarif` flag to receive output formatted according to the\n+- `pattern-regex` functionality - see docs for more information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMzU5MzYy", "url": "https://github.com/returntocorp/semgrep/pull/739#pullrequestreview-411359362", "createdAt": "2020-05-13T23:07:15Z", "commit": {"oid": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzowNzoxNVrOGVGkNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzowNzoxNVrOGVGkNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4MDg1NA==", "bodyText": "I don't think we should add this", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424780854", "createdAt": "2020-05-13T23:07:15Z", "author": {"login": "DrewDennison"}, "path": "semgrep/semgrep/cli.py", "diffHunk": "@@ -136,6 +136,14 @@ def cli() -> None:\n             \"to the number of CPUs on the system.\"\n         ),\n     )\n+    config.add_argument(\n+        \"--pattern-regex-all\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMzYzNTE3", "url": "https://github.com/returntocorp/semgrep/pull/739#pullrequestreview-411363517", "createdAt": "2020-05-13T23:18:24Z", "commit": {"oid": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzoxODoyNFrOGVGyLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzoxODoyNFrOGVGyLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NDQzMQ==", "bodyText": "@aryx note the semi-coupling. @ulziibay could we automatically generate this mapping from the work you did in semgrep-core?", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424784431", "createdAt": "2020-05-13T23:18:24Z", "author": {"login": "ievans"}, "path": "semgrep/semgrep/constants.py", "diffHunk": "@@ -13,6 +13,13 @@\n DEFAULT_CONFIG_FOLDER = f\".{DEFAULT_SEMGREP_CONFIG_NAME}\"\n \n YML_EXTENSIONS = {\".yml\", \".yaml\"}\n+LANGUAGE_EXTENSIONS = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjI1MDk2", "url": "https://github.com/returntocorp/semgrep/pull/739#pullrequestreview-412225096", "createdAt": "2020-05-14T22:19:39Z", "commit": {"oid": "021cf02165323c35076f69f739ae74043c9a48a1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjoxOTozOVrOGVwMGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjoyMTo1OVrOGVwPnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2MjgwOA==", "bodyText": "Update this, this is now possible.", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425462808", "createdAt": "2020-05-14T22:19:39Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -82,12 +83,14 @@ All required fields must be present at the top-level of a rule. I.e. immediately\n | `id` | `string` | Unique, descriptive identifier . e.g. `no-unused-variable`. |\n | `message` | `string` | Message highlighting why this rule fired and how to remediate the issue. |\n | `severity` | `string` | One of: `WARNING`, `ERROR`. |\n-| `languages` | `array` | Any of: `python`, `javascript`, or `go`. |\n+| `languages` | `array` | Any of: `c`, `go`, `java`, `javascript`, or `python`. |\n | [`pattern`](configuration-files.md#pattern)_\\*_ | `string` | Find code matching this expression. |\n | [`patterns`](configuration-files.md#patterns)_\\*_ | `array` | Logical AND of multiple patterns. |\n | [`pattern-either`](configuration-files.md#pattern-either)_\\*_ | `array` | Logical OR of multiple patterns. |\n+| [`pattern-regex`](configuration-files.md#pattern-regex)_\\*\u2020_ | `string` | Search files for [Python `re`](https://docs.python.org/3/library/re.html) compatible expressions. |\n \n-_\\* Only one of `pattern`, `patterns`, or `pattern-either` is required._\n+* _\\* Only one of `pattern`, `patterns`, `pattern-either`, or `pattern-regex` is required._\n+* _\u2020 The `pattern-regex` field may not be combined with other patterns._", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "021cf02165323c35076f69f739ae74043c9a48a1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2MzcxMQ==", "bodyText": "Remove this check, contents is no longer used.", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425463711", "createdAt": "2020-05-14T22:21:59Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -92,6 +98,9 @@ def build_normal_output(\n                     severity_prepend = f\"{severity} \"\n             yield f\"{severity_prepend}{YELLOW_COLOR}rule:{check_id}: {message}{RESET_COLOR}\"\n \n+        if extra.get(\"contents\"):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "021cf02165323c35076f69f739ae74043c9a48a1"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0246bb31f709ba6605a58d410ed85f165933a2d8", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/0246bb31f709ba6605a58d410ed85f165933a2d8", "committedDate": "2020-05-15T14:04:44Z", "message": "Fix #629, add pattern-regex functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fc2c47943c9f96f3661fa53dfd9a88916a4dcbd", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/1fc2c47943c9f96f3661fa53dfd9a88916a4dcbd", "committedDate": "2020-05-15T14:05:14Z", "message": "Add --pattern-regex-all flag to consider all files during regex search"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e19cac70b0e253fdb76e041e3fbd6c6051ec2d6e", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/e19cac70b0e253fdb76e041e3fbd6c6051ec2d6e", "committedDate": "2020-05-15T14:06:59Z", "message": "Appease tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaa722d98357886ef392fdc1de143600bd548145", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/aaa722d98357886ef392fdc1de143600bd548145", "committedDate": "2020-05-15T14:06:59Z", "message": "Utilize include/exclude functionality to avoid using file extensions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f9856b80b09fe1ba3d00b6756f8423926036050", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/7f9856b80b09fe1ba3d00b6756f8423926036050", "committedDate": "2020-05-15T14:22:34Z", "message": "Address last pieces of feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "021cf02165323c35076f69f739ae74043c9a48a1", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/021cf02165323c35076f69f739ae74043c9a48a1", "committedDate": "2020-05-14T22:18:54Z", "message": "Utilize include/exclude functionality to avoid using file extensions"}, "afterCommit": {"oid": "7f9856b80b09fe1ba3d00b6756f8423926036050", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/7f9856b80b09fe1ba3d00b6756f8423926036050", "committedDate": "2020-05-15T14:22:34Z", "message": "Address last pieces of feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNjk2MTc3", "url": "https://github.com/returntocorp/semgrep/pull/739#pullrequestreview-412696177", "createdAt": "2020-05-15T14:25:14Z", "commit": {"oid": "7f9856b80b09fe1ba3d00b6756f8423926036050"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDoyNToxNFrOGWHG_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDoyNToxNFrOGWHG_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgzODMzMw==", "bodyText": "Mypy was complaining about this: semgrep/semgrep/constants.py:21: error: unused 'type: ignore' comment. Not sure what the issue is.", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425838333", "createdAt": "2020-05-15T14:25:14Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/constants.py", "diffHunk": "@@ -18,7 +18,7 @@\n YML_EXTENSIONS = {\".yml\", \".yaml\"}\n \n try:\n-    from semgrep.version import version  # type: ignore\n+    from semgrep.version import version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9856b80b09fe1ba3d00b6756f8423926036050"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faac26b8cca5ad9c9627bb5cb21584a4e8dc151f", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/faac26b8cca5ad9c9627bb5cb21584a4e8dc151f", "committedDate": "2020-05-15T14:25:50Z", "message": "Fixup CHANGELOG"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4e89dcbe40830bfb8d5a8e5341e5587824e1770", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/e4e89dcbe40830bfb8d5a8e5341e5587824e1770", "committedDate": "2020-05-15T14:33:57Z", "message": "Add type ignore back in"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzUyMzQ1", "url": "https://github.com/returntocorp/semgrep/pull/739#pullrequestreview-412752345", "createdAt": "2020-05-15T15:31:35Z", "commit": {"oid": "e4e89dcbe40830bfb8d5a8e5341e5587824e1770"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNTozMTozNVrOGWJu_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNTozMTozNVrOGWJu_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MTM0MQ==", "bodyText": "Just FYI re. fnmatch if you haven't seen it before (not sure if it uses the same syntax as our include / exclude).", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425881341", "createdAt": "2020-05-15T15:31:35Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -26,10 +29,55 @@\n from semgrep.semgrep_types import OPERATORS\n from semgrep.util import debug_print\n from semgrep.util import INVALID_PATTERN_EXIT_CODE\n+from semgrep.util import partition\n from semgrep.util import print_error\n from semgrep.util import print_error_exit\n \n \n+def get_re_matches(patterns: Dict, path: Path) -> List[PatternMatch]:\n+    contents = path.read_text()\n+\n+    return [\n+        PatternMatch(\n+            {\n+                \"check_id\": pattern[\"id\"],\n+                \"path\": str(path),\n+                \"start\": {\"offset\": match.start()},\n+                \"end\": {\"offset\": match.end()},\n+                \"extra\": {\"lines\": [contents[match.start() : match.end()]]},\n+            }\n+        )\n+        for pattern in patterns\n+        for match in re.finditer(pattern[\"pattern\"], contents)\n+    ]\n+\n+\n+def get_target_files(\n+    targets: List[Path], exclude: List[str], include: List[str]\n+) -> List[Path]:\n+    if not include:\n+        # Default to all files\n+        include = [\"*\"]\n+\n+    filepaths = [\n+        target\n+        for target in targets\n+        if target.is_file()\n+        and any(target.match(i) for i in include)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e89dcbe40830bfb8d5a8e5341e5587824e1770"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzUyOTI4", "url": "https://github.com/returntocorp/semgrep/pull/739#pullrequestreview-412752928", "createdAt": "2020-05-15T15:32:21Z", "commit": {"oid": "e4e89dcbe40830bfb8d5a8e5341e5587824e1770"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNTozMjoyMVrOGWJwqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNTozMjoyMVrOGWJwqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MTc2OQ==", "bodyText": "@brendongo At some point we should break this block up into subfunctions", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425881769", "createdAt": "2020-05-15T15:32:21Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -159,12 +207,33 @@ def _run_rules(\n             for language, all_patterns_for_language in self._group_patterns_by_language(\n                 rules\n             ).items():\n-                with tempfile.NamedTemporaryFile(\"w\") as fout:\n-                    # very important not to sort keys here\n-                    patterns_json = [p.to_json() for p in all_patterns_for_language]\n-                    yaml_as_str = yaml.safe_dump(\n-                        {\"rules\": patterns_json}, sort_keys=False\n+                # semgrep-core doesn't know about OPERATORS.REGEX - this is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e89dcbe40830bfb8d5a8e5341e5587824e1770"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzU0NTg5", "url": "https://github.com/returntocorp/semgrep/pull/739#pullrequestreview-412754589", "createdAt": "2020-05-15T15:34:33Z", "commit": {"oid": "e4e89dcbe40830bfb8d5a8e5341e5587824e1770"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNTozNDozM1rOGWJ10w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNTozNDozM1rOGWJ10w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MzA5MQ==", "bodyText": "Yet another reason I need to build that iterables library...", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425883091", "createdAt": "2020-05-15T15:34:33Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/util.py", "diffHunk": "@@ -64,3 +68,9 @@ def set_flags(debug: bool, quiet: bool) -> None:\n     if quiet:\n         QUIET = True\n         debug_print(\"QUIET is on\")\n+\n+\n+def partition(pred: Callable, iterable: Iterable) -> Tuple[List, List]:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e89dcbe40830bfb8d5a8e5341e5587824e1770"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzc1MzEz", "url": "https://github.com/returntocorp/semgrep/pull/739#pullrequestreview-412775313", "createdAt": "2020-05-15T16:01:04Z", "commit": {"oid": "e4e89dcbe40830bfb8d5a8e5341e5587824e1770"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODIxMTg3", "url": "https://github.com/returntocorp/semgrep/pull/739#pullrequestreview-412821187", "createdAt": "2020-05-15T17:05:53Z", "commit": {"oid": "e4e89dcbe40830bfb8d5a8e5341e5587824e1770"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 979, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}