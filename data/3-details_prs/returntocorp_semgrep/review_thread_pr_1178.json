{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNzI5Mjk4", "number": 1178, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxNTo0OFrOEKh4DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzoxNTo1NlrOEKmHKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDc2MjM2OnYy", "diffSide": "RIGHT", "path": ".pre-commit-config.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxNTo0OFrOGrn0SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxNTo0OFrOGrn0SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NDMxMg==", "bodyText": "Bento flake8 included bugbear.", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448394312", "createdAt": "2020-07-01T14:15:48Z", "author": {"login": "mschwager"}, "path": ".pre-commit-config.yaml", "diffHunk": "@@ -34,22 +34,38 @@ repos:\n         args: [--config, mypy.ini]\n \n   - repo: https://gitlab.com/pycqa/flake8\n-    rev: \"3.7.9\"\n+    rev: \"3.8.3\"\n     hooks:\n       - id: flake8\n-        args: [\"--select=E9,F63,F7,F82\"]\n+        additional_dependencies: [\"flake8-bugbear==20.1.4\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a4d14017e4a4c84b3f6cf317747beb4e431009"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDc2NTY5OnYy", "diffSide": "RIGHT", "path": ".pre-commit-config.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxNjozOFrOGrn2XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxNjozOFrOGrn2XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NDg0NA==", "bodyText": "It's faster to do include/exclude in pre-commit vs. waiting until semgrep is run.", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448394844", "createdAt": "2020-07-01T14:16:38Z", "author": {"login": "mschwager"}, "path": ".pre-commit-config.yaml", "diffHunk": "@@ -34,22 +34,38 @@ repos:\n         args: [--config, mypy.ini]\n \n   - repo: https://gitlab.com/pycqa/flake8\n-    rev: \"3.7.9\"\n+    rev: \"3.8.3\"\n     hooks:\n       - id: flake8\n-        args: [\"--select=E9,F63,F7,F82\"]\n+        additional_dependencies: [\"flake8-bugbear==20.1.4\"]\n+        args: [\"--select=B,E9,F63,F7,F82\"]\n \n   - repo: https://github.com/returntocorp/semgrep\n     rev: 'v0.12.0'\n     hooks:\n       - id: semgrep-develop\n-        args: ['--config', 'https://semgrep.live/p/python', '--include', '*.py', '--precommit', '--error']\n+        name: Semgrep Python\n+        types: [python]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a4d14017e4a4c84b3f6cf317747beb4e431009"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDc2ODYxOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/util.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxNzoyM1rOGrn4Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxNzoyM1rOGrn4Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NTMzOQ==", "bodyText": "I moved this here for easier access to sub_run.", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448395339", "createdAt": "2020-07-01T14:17:23Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/util.py", "diffHunk": "@@ -128,3 +130,30 @@ def progress_bar(\n         wrapped: Iterable[T] = tqdm(listified, file=file, **kwargs)\n         return wrapped\n     return listified\n+\n+\n+def sub_run(cmd: List[str], **kwargs: Any) -> Any:\n+    \"\"\"A simple proxy function to minimize and centralize subprocess usage.\"\"\"\n+    # fmt: off\n+    result = subprocess.run(cmd, **kwargs)  # nosem: python.lang.security.audit.dangerous-subprocess-use.dangerous-subprocess-use\n+    # fmt: on\n+    return result\n+\n+\n+def sub_check_output(cmd: List[str], **kwargs: Any) -> Any:\n+    \"\"\"A simple proxy function to minimize and centralize subprocess usage.\"\"\"\n+    # fmt: off\n+    result = subprocess.check_output(cmd, **kwargs)  # nosem: python.lang.security.audit.dangerous-subprocess-use.dangerous-subprocess-use\n+    # fmt: on\n+    return result\n+\n+\n+def compute_semgrep_path() -> str:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a4d14017e4a4c84b3f6cf317747beb4e431009"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDc3MjExOnYy", "diffSide": "RIGHT", "path": ".pre-commit-config.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxODoxNFrOGrn6bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxODoxNFrOGrn6bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NTg4Nw==", "bodyText": "@minusworld ++", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448395887", "createdAt": "2020-07-01T14:18:14Z", "author": {"login": "mschwager"}, "path": ".pre-commit-config.yaml", "diffHunk": "@@ -34,22 +34,38 @@ repos:\n         args: [--config, mypy.ini]\n \n   - repo: https://gitlab.com/pycqa/flake8\n-    rev: \"3.7.9\"\n+    rev: \"3.8.3\"\n     hooks:\n       - id: flake8\n-        args: [\"--select=E9,F63,F7,F82\"]\n+        additional_dependencies: [\"flake8-bugbear==20.1.4\"]\n+        args: [\"--select=B,E9,F63,F7,F82\"]\n \n   - repo: https://github.com/returntocorp/semgrep\n     rev: 'v0.12.0'\n     hooks:\n       - id: semgrep-develop\n-        args: ['--config', 'https://semgrep.live/p/python', '--include', '*.py', '--precommit', '--error']\n+        name: Semgrep Python\n+        types: [python]\n+        exclude: \"^semgrep/tests/.+$|^install-scripts/.+$|^release-scripts/.+$\"\n+        args: ['--config', 'https://semgrep.live/p/python', '--precommit', '--error']\n \n   - repo: https://github.com/returntocorp/semgrep\n     rev: 'v0.12.0'\n     hooks:\n       - id: semgrep-develop\n-        args: ['--config', '.bento/semgrep.yml', '--include', '*.py', '--precommit', '--error']\n+        name: Semgrep Bandit\n+        types: [python]\n+        exclude: \"^semgrep/tests/.+$|^install-scripts/.+$|^release-scripts/.+$\"\n+        args: ['--config', 'https://semgrep.live/p/bandit', '--precommit', '--error']", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a4d14017e4a4c84b3f6cf317747beb4e431009"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDgxNTMwOnYy", "diffSide": "LEFT", "path": ".github/workflows/lint.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyODoyMFrOGroVjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyODoyMFrOGroVjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMjgzMQ==", "bodyText": "This is now handled with the \"Semgrep Local\" pre-commit hook.", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448402831", "createdAt": "2020-07-01T14:28:20Z", "author": {"login": "mschwager"}, "path": ".github/workflows/lint.yml", "diffHunk": "@@ -38,19 +26,6 @@ jobs:\n           publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}\n           publishDeployment: ${{ secrets.SEMGREP_APP_DEPLOYMENT_ID }}\n \n-  semgrep-run-local-rules:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050673d6c438eb961c72f78b8c71a035a374d19d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDgyNDM5OnYy", "diffSide": "RIGHT", "path": "semgrep/setup.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozMDoxNFrOGrobJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozMDoxNFrOGrobJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNDI2Mg==", "bodyText": "I added an ignore for setup.py in the linting configuration instead of inline ignores, it seems like more trouble than it's worth at this point.", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448404262", "createdAt": "2020-07-01T14:30:14Z", "author": {"login": "mschwager"}, "path": "semgrep/setup.py", "diffHunk": "@@ -86,13 +86,11 @@ def run(self):\n             os.putenv(\"SKIP_NUITKA\", \"TRUE\")\n             if \"osx\" in distutils.util.get_platform():\n                 with chdir(repo_root):\n-                    os.system(  # nosem: contrib.dlint.dlint-equivalent.insecure-os-exec-use\n-                        os.path.join(repo_root, \"release-scripts/osx-release.sh\")\n-                    )\n+                    os.system(os.path.join(repo_root, \"release-scripts/osx-release.sh\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050673d6c438eb961c72f78b8c71a035a374d19d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTAyOTQzOnYy", "diffSide": "LEFT", "path": ".bento/archive.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNToxOToxNFrOGrqdxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNToyMDo1MFrOGrqhuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzNzcwMg==", "bodyText": "Do we still need the nosem in the source files, if we're now excluding setup.py?", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448437702", "createdAt": "2020-07-01T15:19:14Z", "author": {"login": "nbrahms"}, "path": ".bento/archive.json", "diffHunk": "@@ -1,51 +0,0 @@\n-{\n-  \"bandit\": {\n-    \"violations\": {\n-      \"4e0db4785748aff9799910743970a07b\": {\n-        \"tool_id\": \"bandit\",\n-        \"check_id\": \"start-process-with-a-shell\",\n-        \"path\": \"semgrep/setup.py\",\n-        \"message\": \"Starting a process with a shell, possible injection detected, security issue.\",\n-        \"severity\": 2,\n-        \"syntactic_context\": \"os.system(  # nosem: contrib.dlint.dlint-equivalent.insecure-os-exec-use\\n    os.path.join(repo_root, \\\"release-scripts/ubuntu-release.sh\\\")\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050673d6c438eb961c72f78b8c71a035a374d19d"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzODcxMg==", "bodyText": "nm, I read to the end", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448438712", "createdAt": "2020-07-01T15:20:50Z", "author": {"login": "nbrahms"}, "path": ".bento/archive.json", "diffHunk": "@@ -1,51 +0,0 @@\n-{\n-  \"bandit\": {\n-    \"violations\": {\n-      \"4e0db4785748aff9799910743970a07b\": {\n-        \"tool_id\": \"bandit\",\n-        \"check_id\": \"start-process-with-a-shell\",\n-        \"path\": \"semgrep/setup.py\",\n-        \"message\": \"Starting a process with a shell, possible injection detected, security issue.\",\n-        \"severity\": 2,\n-        \"syntactic_context\": \"os.system(  # nosem: contrib.dlint.dlint-equivalent.insecure-os-exec-use\\n    os.path.join(repo_root, \\\"release-scripts/ubuntu-release.sh\\\")\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzNzcwMg=="}, "originalCommit": {"oid": "050673d6c438eb961c72f78b8c71a035a374d19d"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTA0MjM2OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/util.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNToyMjozOFrOGrqmMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODoxOTo1MVrOGrwp0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzOTg1Nw==", "bodyText": "It seems like it makes more sense just to remove the rule from the pack, if we effectively don't want to use it on this project at all.", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448439857", "createdAt": "2020-07-01T15:22:38Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/util.py", "diffHunk": "@@ -128,3 +130,30 @@ def progress_bar(\n         wrapped: Iterable[T] = tqdm(listified, file=file, **kwargs)\n         return wrapped\n     return listified\n+\n+\n+def sub_run(cmd: List[str], **kwargs: Any) -> Any:\n+    \"\"\"A simple proxy function to minimize and centralize subprocess usage.\"\"\"\n+    # fmt: off\n+    result = subprocess.run(cmd, **kwargs)  # nosem: python.lang.security.audit.dangerous-subprocess-use.dangerous-subprocess-use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050673d6c438eb961c72f78b8c71a035a374d19d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MDM0MA==", "bodyText": "Otherwise, it would make sense to me to deliberately disable it on every appearance, rather than hiding it in a wrapper function", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448440340", "createdAt": "2020-07-01T15:23:21Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/util.py", "diffHunk": "@@ -128,3 +130,30 @@ def progress_bar(\n         wrapped: Iterable[T] = tqdm(listified, file=file, **kwargs)\n         return wrapped\n     return listified\n+\n+\n+def sub_run(cmd: List[str], **kwargs: Any) -> Any:\n+    \"\"\"A simple proxy function to minimize and centralize subprocess usage.\"\"\"\n+    # fmt: off\n+    result = subprocess.run(cmd, **kwargs)  # nosem: python.lang.security.audit.dangerous-subprocess-use.dangerous-subprocess-use", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzOTg1Nw=="}, "originalCommit": {"oid": "050673d6c438eb961c72f78b8c71a035a374d19d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyNTU4MQ==", "bodyText": "It's fairly common practice to centralize security-sensitive functionality. This provides a few benefits: 1.) it gives you a central location to harden potentially insecure calls, and 2.) it's easier to audit one location that's been deemed secure than many spread throughout the codebase. This isn't so important here because we have a fairly basic threat model as a CLI app running additional subprocess calls, but it's inline with the experience our users may face. I do think this check is on the fringe of usefulness (a better, less noisy version would be checking for shell=True), but again, I think this is a useful exercise in workflows our users will experience.\nAdditionally, if we deliberately disable on all appearances then we'll also likely have to include a # fmt: off and # fmt: on because black tends to reformat the code such that semgrep doesn't recognize the # nosem. Adding these three comments around every subprocess calls feels like a lot.\nNote that, regarding (1) above, subprocess calls can take a str or a list. Using a list makes it less likely that string concatenation somewhere leads to arbitrary code execution in a subprocess call. So using mypy to enforce cmd is a list is also a benefit here.", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448525581", "createdAt": "2020-07-01T17:52:55Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/util.py", "diffHunk": "@@ -128,3 +130,30 @@ def progress_bar(\n         wrapped: Iterable[T] = tqdm(listified, file=file, **kwargs)\n         return wrapped\n     return listified\n+\n+\n+def sub_run(cmd: List[str], **kwargs: Any) -> Any:\n+    \"\"\"A simple proxy function to minimize and centralize subprocess usage.\"\"\"\n+    # fmt: off\n+    result = subprocess.run(cmd, **kwargs)  # nosem: python.lang.security.audit.dangerous-subprocess-use.dangerous-subprocess-use", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzOTg1Nw=="}, "originalCommit": {"oid": "050673d6c438eb961c72f78b8c71a035a374d19d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzOTA4OQ==", "bodyText": "I'll move forward with this for now and we can always iterate and improve", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448539089", "createdAt": "2020-07-01T18:19:51Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/util.py", "diffHunk": "@@ -128,3 +130,30 @@ def progress_bar(\n         wrapped: Iterable[T] = tqdm(listified, file=file, **kwargs)\n         return wrapped\n     return listified\n+\n+\n+def sub_run(cmd: List[str], **kwargs: Any) -> Any:\n+    \"\"\"A simple proxy function to minimize and centralize subprocess usage.\"\"\"\n+    # fmt: off\n+    result = subprocess.run(cmd, **kwargs)  # nosem: python.lang.security.audit.dangerous-subprocess-use.dangerous-subprocess-use", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzOTg1Nw=="}, "originalCommit": {"oid": "050673d6c438eb961c72f78b8c71a035a374d19d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTMyMTczOnYy", "diffSide": "LEFT", "path": ".bento/config.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjozNTozM1rOGrtU4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzoxMTo0OVrOGruhUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4NDU3Ng==", "bodyText": "Bento flake8 also included flake8-json, and flake8-debugger is there anything in those worth keeping?", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448484576", "createdAt": "2020-07-01T16:35:33Z", "author": {"login": "brendongo"}, "path": ".bento/config.yml", "diffHunk": "@@ -1,35 +0,0 @@\n-autorun:\n-  block: true\n-formatter:\n-- clippy: {}\n-tools:\n-  bandit:\n-    ignore:\n-    - any-other-function-with-shell-equals-true\n-    - assert-used\n-    - hardcoded-bind-all-interfaces\n-    - hardcoded-password-default\n-    - hardcoded-password-funcarg\n-    - hardcoded-password-string\n-    - hardcoded-sql-expressions\n-    - hardcoded-tmp-directory\n-    - import-lxml\n-    - import-pickle\n-    - import-subprocess\n-    - import-xml-expat\n-    - import-xml-minidom\n-    - import-xml-pulldom\n-    - import-xml-sax\n-    - import_xml-etree\n-    - md5\n-    - random\n-    - start-process-with-no-shell\n-    - start-process-with-partial-path\n-    - subprocess-without-shell-equals-true\n-    - try-except-continue\n-    - urllib-urlopen\n-    run: true\n-  flake8:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050673d6c438eb961c72f78b8c71a035a374d19d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ5OTkyNg==", "bodyText": "flake8-debugger seems reasonable: https://pypi.org/project/flake8-debugger/, but I don't find it too useful. Thoughts?\nflake8-json is just for getting JSON output, so we don't need it \ud83d\udc4d", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448499926", "createdAt": "2020-07-01T17:03:21Z", "author": {"login": "mschwager"}, "path": ".bento/config.yml", "diffHunk": "@@ -1,35 +0,0 @@\n-autorun:\n-  block: true\n-formatter:\n-- clippy: {}\n-tools:\n-  bandit:\n-    ignore:\n-    - any-other-function-with-shell-equals-true\n-    - assert-used\n-    - hardcoded-bind-all-interfaces\n-    - hardcoded-password-default\n-    - hardcoded-password-funcarg\n-    - hardcoded-password-string\n-    - hardcoded-sql-expressions\n-    - hardcoded-tmp-directory\n-    - import-lxml\n-    - import-pickle\n-    - import-subprocess\n-    - import-xml-expat\n-    - import-xml-minidom\n-    - import-xml-pulldom\n-    - import-xml-sax\n-    - import_xml-etree\n-    - md5\n-    - random\n-    - start-process-with-no-shell\n-    - start-process-with-partial-path\n-    - subprocess-without-shell-equals-true\n-    - try-except-continue\n-    - urllib-urlopen\n-    run: true\n-  flake8:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4NDU3Ng=="}, "originalCommit": {"oid": "050673d6c438eb961c72f78b8c71a035a374d19d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwNDE0Ng==", "bodyText": "Hmm yeah doesn't seem too useful looking at it. At this point porting those rules could be a nice first issue on rule writing.", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448504146", "createdAt": "2020-07-01T17:11:49Z", "author": {"login": "brendongo"}, "path": ".bento/config.yml", "diffHunk": "@@ -1,35 +0,0 @@\n-autorun:\n-  block: true\n-formatter:\n-- clippy: {}\n-tools:\n-  bandit:\n-    ignore:\n-    - any-other-function-with-shell-equals-true\n-    - assert-used\n-    - hardcoded-bind-all-interfaces\n-    - hardcoded-password-default\n-    - hardcoded-password-funcarg\n-    - hardcoded-password-string\n-    - hardcoded-sql-expressions\n-    - hardcoded-tmp-directory\n-    - import-lxml\n-    - import-pickle\n-    - import-subprocess\n-    - import-xml-expat\n-    - import-xml-minidom\n-    - import-xml-pulldom\n-    - import-xml-sax\n-    - import_xml-etree\n-    - md5\n-    - random\n-    - start-process-with-no-shell\n-    - start-process-with-partial-path\n-    - subprocess-without-shell-equals-true\n-    - try-except-continue\n-    - urllib-urlopen\n-    run: true\n-  flake8:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4NDU3Ng=="}, "originalCommit": {"oid": "050673d6c438eb961c72f78b8c71a035a374d19d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTQ1NjQzOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/util.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzoxNTo1NlrOGrupaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo1MzoxMlrOGrv1ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwNjIxOQ==", "bodyText": "Do these get autoformatted otherwise?", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448506219", "createdAt": "2020-07-01T17:15:56Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/util.py", "diffHunk": "@@ -128,3 +130,30 @@ def progress_bar(\n         wrapped: Iterable[T] = tqdm(listified, file=file, **kwargs)\n         return wrapped\n     return listified\n+\n+\n+def sub_run(cmd: List[str], **kwargs: Any) -> Any:\n+    \"\"\"A simple proxy function to minimize and centralize subprocess usage.\"\"\"\n+    # fmt: off", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050673d6c438eb961c72f78b8c71a035a374d19d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyNTczMQ==", "bodyText": "Yup! I explained this a bit more above", "url": "https://github.com/returntocorp/semgrep/pull/1178#discussion_r448525731", "createdAt": "2020-07-01T17:53:12Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/util.py", "diffHunk": "@@ -128,3 +130,30 @@ def progress_bar(\n         wrapped: Iterable[T] = tqdm(listified, file=file, **kwargs)\n         return wrapped\n     return listified\n+\n+\n+def sub_run(cmd: List[str], **kwargs: Any) -> Any:\n+    \"\"\"A simple proxy function to minimize and centralize subprocess usage.\"\"\"\n+    # fmt: off", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwNjIxOQ=="}, "originalCommit": {"oid": "050673d6c438eb961c72f78b8c71a035a374d19d"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4498, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}