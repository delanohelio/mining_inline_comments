{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNTkxMTkz", "number": 1824, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxNDo0NlrOEtJNLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMjowM1rOEvXIxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzcyMjA2OnYy", "diffSide": "LEFT", "path": "semgrep/semgrep/evaluation.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxNDo0NlrOHgxYVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjoxMTowNlrOHg7Sfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNTUyNg==", "bodyText": "I think this may have been unintentionally left in. It makes it difficult to debug this module because it's impossible to set the logger level to DEBUG with this here. Now that we have the --debug flag I think this is no longer necessary, or unintentional.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504125526", "createdAt": "2020-10-13T17:14:46Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -11,13 +11,12 @@\n from typing import Tuple\n \n logger = logging.getLogger(__name__)\n-# disable logging from this module most of the time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59a58f9cbf4b9cb719dc833299632b1b0b0e019"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NTczNQ==", "bodyText": "I did it intentionally -- it was really difficult to debug other parts of the program with the large amount of output this module spews. But very open to other approaches", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504145735", "createdAt": "2020-10-13T17:49:47Z", "author": {"login": "ievans"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -11,13 +11,12 @@\n from typing import Tuple\n \n logger = logging.getLogger(__name__)\n-# disable logging from this module most of the time", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNTUyNg=="}, "originalCommit": {"oid": "a59a58f9cbf4b9cb719dc833299632b1b0b0e019"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MTEwMg==", "bodyText": "Hmm, I usually try to err on the side of over-outputting with debug output vs. under-outputting. It's much easier to filter existing output than include additional output information in an already released version. If you're looking for a specific message in the debug output you can always:\n$ semgrep --debug ... 2>&1 | grep 'compiled result'\n\nOr, if you want to squelch a particularly noisy log line you can do something like:\n$ semgrep --debug  ... 2>&1 | grep -v 'after filter'\n\nAnother good option here is including %(name)s in our logger format in semgrep/semgrep/util.py. Then we could do something like the following to squelch a single module's logging:\n$ semgrep --debug  ... 2>&1 | grep -v 'semgrep.evaluation'", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504191102", "createdAt": "2020-10-13T19:05:43Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -11,13 +11,12 @@\n from typing import Tuple\n \n logger = logging.getLogger(__name__)\n-# disable logging from this module most of the time", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNTUyNg=="}, "originalCommit": {"oid": "a59a58f9cbf4b9cb719dc833299632b1b0b0e019"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI4Nzg3MA==", "bodyText": "I now use in semgrep-core a logging library inspired by the python one, and you can use a config file to specify the different levels for the different modules outside the code. See https://github.com/returntocorp/semgrep/blob/develop/semgrep-core/log_config.json.ex1", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504287870", "createdAt": "2020-10-13T22:11:06Z", "author": {"login": "aryx"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -11,13 +11,12 @@\n from typing import Tuple\n \n logger = logging.getLogger(__name__)\n-# disable logging from this module most of the time", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNTUyNg=="}, "originalCommit": {"oid": "a59a58f9cbf4b9cb719dc833299632b1b0b0e019"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzcyMzcyOnYy", "diffSide": "LEFT", "path": "semgrep/semgrep/evaluation.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxNTowN1rOHgxZSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxNTowN1rOHgxZSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNTc3MQ==", "bodyText": "This is no longer needed with the jsonschema changes.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504125771", "createdAt": "2020-10-13T17:15:07Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -193,14 +254,6 @@ def _evaluate_single_expression(\n         )\n         return output_ranges\n     elif expression.operator == OPERATORS.METAVARIABLE_REGEX:\n-        if (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59a58f9cbf4b9cb719dc833299632b1b0b0e019"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODM4ODM5OnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoxODowNFrOHg3y0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo1ODoxNVrOHkTBrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzMDYxMA==", "bodyText": "could also be called pattern-where-python-safe", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504230610", "createdAt": "2020-10-13T20:18:04Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -19,6 +19,7 @@ Contents:\n   * [`pattern-either`](configuration-files.md#pattern-either)\n   * [`pattern-regex`](configuration-files.md#pattern-regex)\n   * [`metavariable-regex`](configuration-files.md#metavariable-regex)\n+  * [`metavariable-comparison`](configuration-files.md#metavariable-comparison)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzMjg1MA==", "bodyText": "Maybe the only safe thing people want to express are comparisons, so maybe it's not a bad name but it does not really give room for being more than that. For example some people wanted to check if $X in [1, 42, 57]\nand it's not really a comparison (or maybe it is).", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504232850", "createdAt": "2020-10-13T20:20:18Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -19,6 +19,7 @@ Contents:\n   * [`pattern-either`](configuration-files.md#pattern-either)\n   * [`pattern-regex`](configuration-files.md#pattern-regex)\n   * [`metavariable-regex`](configuration-files.md#metavariable-regex)\n+  * [`metavariable-comparison`](configuration-files.md#metavariable-comparison)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzMDYxMA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1MTg0NQ==", "bodyText": "IMO, naming it pattern-where-python-safe will make people question why they'd ever need pattern-where-python and what the differences between the two are. Then we'd have to document all the differences, which may be hard to grok for someone without a program analysis background. E.g. \"what's the difference between an expression and a statement\", \"why can't I call functions X, Y, and Z?\", etc. This would also tie our hands if we ever decided to open up the list of available languages. I.e. would we also have a pattern-where-javascript-safe?\nKeeping this distinct from pattern-where-python allows for a simpler mental model of our operators IMO.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504251845", "createdAt": "2020-10-13T20:53:21Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -19,6 +19,7 @@ Contents:\n   * [`pattern-either`](configuration-files.md#pattern-either)\n   * [`pattern-regex`](configuration-files.md#pattern-regex)\n   * [`metavariable-regex`](configuration-files.md#metavariable-regex)\n+  * [`metavariable-comparison`](configuration-files.md#metavariable-comparison)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzMDYxMA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI4ODgwMg==", "bodyText": "sounds fair.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504288802", "createdAt": "2020-10-13T22:13:20Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -19,6 +19,7 @@ Contents:\n   * [`pattern-either`](configuration-files.md#pattern-either)\n   * [`pattern-regex`](configuration-files.md#pattern-regex)\n   * [`metavariable-regex`](configuration-files.md#metavariable-regex)\n+  * [`metavariable-comparison`](configuration-files.md#metavariable-comparison)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzMDYxMA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMjUwOQ==", "bodyText": "I like the resolution here. I also would add that this suggestion would make the unsafe variant our de facto default, which is something we should always strive to avoid.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r507822509", "createdAt": "2020-10-19T14:58:15Z", "author": {"login": "underyx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -19,6 +19,7 @@ Contents:\n   * [`pattern-either`](configuration-files.md#pattern-either)\n   * [`pattern-regex`](configuration-files.md#pattern-regex)\n   * [`metavariable-regex`](configuration-files.md#metavariable-regex)\n+  * [`metavariable-comparison`](configuration-files.md#metavariable-comparison)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzMDYxMA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODQxMDgwOnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoyMTozOVrOHg4BPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoyMTozOVrOHg4BPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNDMwMA==", "bodyText": "maybe say also \"and as opposed to pattern-where-python is guaranteed to be safe and so can be computed without\n--unsafe-eval-do-at-your-own-risk CLI parameter\".", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504234300", "createdAt": "2020-10-13T20:21:39Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODQxNTI0OnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoyMjoyNlrOHg4EKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTowMjozNFrOHg5YWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNTA1MA==", "bodyText": "why the quote around the metavariable? we don't put quote to express patterns.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504235050", "createdAt": "2020-10-13T20:22:26Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzODc0Nw==", "bodyText": "Also why specify the metavariable ... just export all the metavariables in the current matched state and pass it to semgrep-core -eval.\nAlso this prevents to use multiple metavariables comparisons as $X < $Y.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504238747", "createdAt": "2020-10-13T20:28:03Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNTA1MA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1NjYwMA==", "bodyText": "Specifying the metavariable allows for the base and strip behavior. We could do something like make metavariables, bases, and strips all lists or something so we can specify multiple, but I went with the simplest approach here.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504256600", "createdAt": "2020-10-13T21:02:34Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNTA1MA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODQxNzcwOnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoyMjo1MVrOHg4FzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjoxNDoxOVrOHg7XrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNTQ2OQ==", "bodyText": "same, why the quote? The main interest of yaml is to remove the need for quotes no?", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504235469", "createdAt": "2020-10-13T20:22:51Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1NTg4Mw==", "bodyText": "Hah, I think YAML provides a bit more than lack of quotes over JSON :D\nI've been burned one too many times by YAML interpreting string data as a different scalar type, so I always quote strings by default now /shrug. An interesting example here was including git short hashes in YAML data, so on the off chance your commit hash was like 1234567 YAML would interpret it as an integer instead of the usual string like 5dbfa6d. That was a fun bug to track down.\nI don't have strong feelings - feel free to change the examples in the docs if you'd like.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504255883", "createdAt": "2020-10-13T21:01:02Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNTQ2OQ=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI4OTE5Nw==", "bodyText": "Got it, no the examples are fine, I was just worried I misunderstood something with YAML.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504289197", "createdAt": "2020-10-13T22:14:19Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNTQ2OQ=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODQyNjkxOnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoyNDo1NFrOHg4L6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNToxNToxM1rOHiNAdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNzAzNA==", "bodyText": "the number syntax itself contains the base, why specify the base here?\nOCaml, and I guess Python will be able to read 0xa or 10 or 0o82 or whatever syntax and convert to an internal number.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504237034", "createdAt": "2020-10-13T20:24:54Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.\n+\n+The `metavariable-comparison` operator also takes optional `base: int` and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MjQ0NQ==", "bodyText": "I don't think that's true at the moment. The regex for integer detection is currently ^[0-9]+$, which misses 0x, 0o, etc. Since the metavariable content is always initially a string, I wanted to provide a mechanism for parsing the string value in different bases.\nGenerally, if you look at our semgrep-rules, the majority of rules using pattern-where-python perform a simple comparison, and often parse a number in a different base, or perform a string strip. I know this implementation isn't the maximally powerful/generalized solution, it instead aims to cover the majority of use cases, not all of them, and hit the sweet spot between power and usability (and minimize --dangerously... usage). E.g.\n24:  - pattern-where-python: |\n25-      int(vars['$PERM'], 8) > 0o600\n\n18:  - pattern-where-python: |-\n19-      int(vars['$BITS']) < 2048\n\n18:  - pattern-where-python: |-\n19-      int(vars['$SIZE']) < 128\n\n11:  - pattern-where-python: int(vars['$NUM'].replace('\"', '')) > 32767 or int(vars['$NUM'].replace('\"', '')) < -32768\n\n21:  - pattern-where-python: |-\n22-      int(vars['$NUM'].replace('\"', '')) > 2147483647 or int(vars['$NUM'].replace('\"', '')) < -2147483648", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504262445", "createdAt": "2020-10-13T21:14:34Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.\n+\n+The `metavariable-comparison` operator also takes optional `base: int` and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNzAzNA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU1NTk3MA==", "bodyText": "@aryx I had a thought here: would it make more sense for semgrep-core to simply take in the data as the corresponding JSON type instead of performing string parsing? I.e. a JSON integer is an integer, a JSON float is a float, a JSON string is a string, etc, instead of trying to interpret the data with regexs. That way Python can interpret the metavariable data it receives, then semgrep-core can simply operate on the JSON types.\nIMO Python is better equipped to deal with things like string parsing, while OCaml is obviously better equipped to deal with program analysis tasks.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r505555970", "createdAt": "2020-10-15T13:47:19Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.\n+\n+The `metavariable-comparison` operator also takes optional `base: int` and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNzAzNA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU4NDY3MQ==", "bodyText": "Yes, good idea (but no Python is not better equipped for string parsing :) )", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r505584671", "createdAt": "2020-10-15T14:23:25Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.\n+\n+The `metavariable-comparison` operator also takes optional `base: int` and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNzAzNA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU4NTAwMw==", "bodyText": "I'll modify -eval to accept directly the right Json type.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r505585003", "createdAt": "2020-10-15T14:23:52Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.\n+\n+The `metavariable-comparison` operator also takes optional `base: int` and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNzAzNA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyNjc0MQ==", "bodyText": "@mschwager #1839", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r505626741", "createdAt": "2020-10-15T15:15:13Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.\n+\n+The `metavariable-comparison` operator also takes optional `base: int` and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNzAzNA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODQyOTczOnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoyNTozMVrOHg4NdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxNjowMVrOHg5yDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNzQyOQ==", "bodyText": "again, I don't think we need strip, if the metavariable matches a string, then -eval will do the right thing and allow only operations on strings.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504237429", "createdAt": "2020-10-13T20:25:31Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.\n+\n+The `metavariable-comparison` operator also takes optional `base: int` and\n+`strip: bool` keys. These keys set the integer base the metavariable value\n+should be interpreted as and remove quotes from the metavariable value,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MzE4Mw==", "bodyText": "strip is for strings that look like integers. E.g.\n21:  - pattern-where-python: |-\n22-      int(vars['$NUM'].replace('\"', '')) > 2147483647 or int(vars['$NUM'].replace('\"', '')) < -2147483648\n\n11:  - pattern-where-python: int(vars['$NUM'].replace('\"', '')) > 32767 or int(vars['$NUM'].replace('\"', '')) < -32768\n\nPerforming string operations on \"2147483647\" won't be helpful in this situation.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504263183", "createdAt": "2020-10-13T21:16:01Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.\n+\n+The `metavariable-comparison` operator also takes optional `base: int` and\n+`strip: bool` keys. These keys set the integer base the metavariable value\n+should be interpreted as and remove quotes from the metavariable value,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNzQyOQ=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODQ0MTEyOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/evaluation.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoyODo1NlrOHg4USQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxNjozMVrOHg5y8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzOTE3Nw==", "bodyText": "@brendongo might get rid of the use of abstract_content at some point, which is quite fragile.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504239177", "createdAt": "2020-10-13T20:28:56Z", "author": {"login": "aryx"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -56,6 +55,68 @@ def get_re_range_matches(\n     return result\n \n \n+def compare_range_match(\n+    metavariable: str,\n+    comparison: str,\n+    strip: Optional[bool],\n+    base: Optional[int],\n+    content: str,\n+) -> bool:\n+\n+    if strip:\n+        content = content.strip(\"\\\"'`\")\n+\n+    try:\n+        # Assume float data if \".\" in content\n+        if \".\" in content:\n+            converted = float(content)\n+        else:\n+            if base:\n+                converted = int(content, base=base)\n+            else:\n+                converted = int(content)\n+    except ValueError:\n+        logger.debug(\n+            f\"metavariable '{metavariable}' incorrect comparison type '{content}'\"\n+        )\n+        return False\n+\n+    return metavariable_comparison(metavariable, comparison, converted)\n+\n+\n+def get_comparison_range_matches(\n+    metavariable: str,\n+    comparison: str,\n+    strip: Optional[bool],\n+    base: Optional[int],\n+    ranges: Set[Range],\n+    pattern_matches: List[PatternMatch],\n+) -> Set[Range]:\n+\n+    result: Set[Range] = set()\n+    for _range in ranges:\n+        if metavariable not in _range.vars:\n+            logger.debug(f\"metavariable '{metavariable}' missing in range '{_range}'\")\n+            continue\n+\n+        any_matching_ranges = any(\n+            pm.range == _range\n+            and metavariable in pm.metavars\n+            and compare_range_match(\n+                metavariable,\n+                comparison,\n+                strip,\n+                base,\n+                pm.metavars[metavariable][\"abstract_content\"],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MzQwOQ==", "bodyText": "It's used in quite a few places, so we'll have to tread carefully if/when we do.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504263409", "createdAt": "2020-10-13T21:16:31Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -56,6 +55,68 @@ def get_re_range_matches(\n     return result\n \n \n+def compare_range_match(\n+    metavariable: str,\n+    comparison: str,\n+    strip: Optional[bool],\n+    base: Optional[int],\n+    content: str,\n+) -> bool:\n+\n+    if strip:\n+        content = content.strip(\"\\\"'`\")\n+\n+    try:\n+        # Assume float data if \".\" in content\n+        if \".\" in content:\n+            converted = float(content)\n+        else:\n+            if base:\n+                converted = int(content, base=base)\n+            else:\n+                converted = int(content)\n+    except ValueError:\n+        logger.debug(\n+            f\"metavariable '{metavariable}' incorrect comparison type '{content}'\"\n+        )\n+        return False\n+\n+    return metavariable_comparison(metavariable, comparison, converted)\n+\n+\n+def get_comparison_range_matches(\n+    metavariable: str,\n+    comparison: str,\n+    strip: Optional[bool],\n+    base: Optional[int],\n+    ranges: Set[Range],\n+    pattern_matches: List[PatternMatch],\n+) -> Set[Range]:\n+\n+    result: Set[Range] = set()\n+    for _range in ranges:\n+        if metavariable not in _range.vars:\n+            logger.debug(f\"metavariable '{metavariable}' missing in range '{_range}'\")\n+            continue\n+\n+        any_matching_ranges = any(\n+            pm.range == _range\n+            and metavariable in pm.metavars\n+            and compare_range_match(\n+                metavariable,\n+                comparison,\n+                strip,\n+                base,\n+                pm.metavars[metavariable][\"abstract_content\"],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzOTE3Nw=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODQ0NTM1OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/metavariable_comparison.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDozMDowOVrOHg4W8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxNzoxMVrOHg50Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzOTg1Nw==", "bodyText": "I can fix that and sort on the semgrep-core side. This is ugly indeed otherwise to impose an order.\nSorry.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504239857", "createdAt": "2020-10-13T20:30:09Z", "author": {"login": "aryx"}, "path": "semgrep/semgrep/metavariable_comparison.py", "diffHunk": "@@ -0,0 +1,34 @@\n+import collections\n+import json\n+import subprocess\n+import tempfile\n+from typing import Union\n+\n+from semgrep.constants import PLEASE_FILE_ISSUE_TEXT\n+from semgrep.constants import SEMGREP_PATH\n+from semgrep.error import SemgrepError\n+from semgrep.util import sub_check_output\n+\n+\n+def metavariable_comparison(\n+    metavariable: str, comparison: str, content: Union[int, float]\n+) -> bool:\n+    # semgrep-core requires the 'language' key be before the 'code' key,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2Mzc0Mg==", "bodyText": "No worries! That was going to be one of my v2 feature requests. That and float support :)", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504263742", "createdAt": "2020-10-13T21:17:11Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/metavariable_comparison.py", "diffHunk": "@@ -0,0 +1,34 @@\n+import collections\n+import json\n+import subprocess\n+import tempfile\n+from typing import Union\n+\n+from semgrep.constants import PLEASE_FILE_ISSUE_TEXT\n+from semgrep.constants import SEMGREP_PATH\n+from semgrep.error import SemgrepError\n+from semgrep.util import sub_check_output\n+\n+\n+def metavariable_comparison(\n+    metavariable: str, comparison: str, content: Union[int, float]\n+) -> bool:\n+    # semgrep-core requires the 'language' key be before the 'code' key,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzOTg1Nw=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODQ0OTEwOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/metavariable_comparison.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDozMToxN1rOHg4ZJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDozMToxN1rOHg4ZJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0MDQyMQ==", "bodyText": "Note that if it returns NONE, this means the expression passed was not considered safe or part of the handled subset. Maybe you want to return that information to the user.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504240421", "createdAt": "2020-10-13T20:31:17Z", "author": {"login": "aryx"}, "path": "semgrep/semgrep/metavariable_comparison.py", "diffHunk": "@@ -0,0 +1,34 @@\n+import collections\n+import json\n+import subprocess\n+import tempfile\n+from typing import Union\n+\n+from semgrep.constants import PLEASE_FILE_ISSUE_TEXT\n+from semgrep.constants import SEMGREP_PATH\n+from semgrep.error import SemgrepError\n+from semgrep.util import sub_check_output\n+\n+\n+def metavariable_comparison(\n+    metavariable: str, comparison: str, content: Union[int, float]\n+) -> bool:\n+    # semgrep-core requires the 'language' key be before the 'code' key,\n+    # so we must use an OrderedDict with special ordering here\n+    core_request = collections.OrderedDict()\n+    core_request[\"metavars\"] = {metavariable: str(content)}\n+    core_request[\"language\"] = \"python\"  # Hardcode for now\n+    core_request[\"code\"] = comparison\n+\n+    with tempfile.NamedTemporaryFile(\"w\") as temp_file:\n+        json.dump(core_request, temp_file)\n+        temp_file.flush()\n+        cmd = [SEMGREP_PATH, \"-eval\", temp_file.name]\n+        try:\n+            output = sub_check_output(cmd)\n+        except subprocess.CalledProcessError as ex:\n+            raise SemgrepError(\n+                f\"error invoking semgrep with:\\n\\t{' '.join(cmd)}\\n\\t{ex}\\n{PLEASE_FILE_ISSUE_TEXT}\"\n+            )\n+\n+    return output.strip() == b\"true\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDk3NjA0OnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMjowM1rOHkTN6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyMzozNVrOHkW5-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTY0Mg==", "bodyText": "Could we also document whether it can compare strings to, for instance, ensure alphabetical ordering?", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r507825642", "createdAt": "2020-10-19T15:02:03Z", "author": {"login": "underyx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "536d391dd6a87b9912df1e04cb897cd307598230"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0MDUxNQ==", "bodyText": "Although semgrep-core is wired up for performing basic string comparisons I didn't include this in the Python interface. The pattern-regex operator can be used for string operations. I tend to split these use-cases in my mind like this: pattern-regex is useful for performing string operations and pattern-comparison is useful for performing numeric operations.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r507840515", "createdAt": "2020-10-19T15:22:02Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTY0Mg=="}, "originalCommit": {"oid": "536d391dd6a87b9912df1e04cb897cd307598230"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1Mzg3Nw==", "bodyText": "I was thinking of a pattern like\n$FIRST = ...\n$SECOND = ...\n\nand then ensuring $FIRST < $SECOND to check for alphabetical order in a whole file.\n\nIs there a way to do this with regex? \ud83e\udd14\nCould we specify in the docs that only numeric comparisons are supported, then?", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r507853877", "createdAt": "2020-10-19T15:39:27Z", "author": {"login": "underyx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTY0Mg=="}, "originalCommit": {"oid": "536d391dd6a87b9912df1e04cb897cd307598230"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2NzkzNQ==", "bodyText": "... and then ensuring $FIRST < $SECOND to check for alphabetical order in a whole file.\n\nI don't think I understand what you're trying to achieve here. You want to determine if a non-code file is in alphabetical order? Like a CSV file? This can't be done with a regex, especially because these operators only handle a single metavariable.\n\nCould we specify in the docs that only numeric comparisons are supported, then?\n\nSure thing \ud83d\udc4d", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r507867935", "createdAt": "2020-10-19T15:57:09Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTY0Mg=="}, "originalCommit": {"oid": "536d391dd6a87b9912df1e04cb897cd307598230"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3MDgxMQ==", "bodyText": "I meant, in a constants.py, which looks like:\nFOO_LOGIN = \"me\"\nFOO_PASS = \"hunter2\"\n\nBAR_PASS = \"hunter3\"\nI'd write\n  pattern: |\n    $FIRST = ...\n    $SECOND = ...\n  metavariable-comparison:\n    comparison: $FIRST < $SECOND\nto ensure that BAR_PASS is defined first and thus the whole file is in alphabetical order.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r507870811", "createdAt": "2020-10-19T16:01:02Z", "author": {"login": "underyx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTY0Mg=="}, "originalCommit": {"oid": "536d391dd6a87b9912df1e04cb897cd307598230"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3MTk0Ng==", "bodyText": "Reference: https://eslint.org/docs/rules/sort-vars", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r507871946", "createdAt": "2020-10-19T16:02:43Z", "author": {"login": "underyx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTY0Mg=="}, "originalCommit": {"oid": "536d391dd6a87b9912df1e04cb897cd307598230"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NjA3Mw==", "bodyText": "Oh I see what you mean. That behavior is not currently supported. Lexicographical ordering of strings seems like a fairly niche use-case that I'd like to avoid for the v1 of this functionality in the interest of moving forward.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r507886073", "createdAt": "2020-10-19T16:23:35Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTY0Mg=="}, "originalCommit": {"oid": "536d391dd6a87b9912df1e04cb897cd307598230"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4800, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}