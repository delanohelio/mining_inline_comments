{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NDg2NDE0", "number": 1845, "title": "Make spacegrep export json for semgrep", "bodyText": "The command-line option is --output-format semgrep (see spacegrep --help). There's a good chance that the json format is wrong in some places, since I just guessed it from the ocaml implementation.\nHere's some sample output (searching for the pattern free $X in the text of the GNU AGPL license):\n~/semgrep/spacegrep $ ./bin/spacegrep 'free $X' -d LICENSE --output-format semgrep\n{\n  \"matches\": [\n    {\n      \"check_id\": \"0\",\n      \"path\": \"LICENSE\",\n      \"start\": { \"line\": 18, \"col\": 69, \"offset\": 828 },\n      \"end\": { \"line\": 19, \"col\": 9, \"offset\": 841 },\n      \"extra\": {\n        \"metavars\": {\n          \"X\": {\n            \"start\": { \"line\": 19, \"col\": 1, \"offset\": 833 },\n            \"end\": { \"line\": 19, \"col\": 9, \"offset\": 841 },\n            \"abstract_content\": \"software\",\n            \"unique_id\": {\n              \"type\": \"AST\",\n              \"md5sum\": \"1a629dbf487ee1ca79cc2d1e486ce02c\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"check_id\": \"0\",\n      \"path\": \"LICENSE\",\n      \"start\": { \"line\": 21, \"col\": 20, \"offset\": 881 },\n      \"end\": { \"line\": 21, \"col\": 33, \"offset\": 894 },\n      \"extra\": {\n        \"metavars\": {\n          \"X\": {\n            \"start\": { \"line\": 21, \"col\": 25, \"offset\": 886 },\n            \"end\": { \"line\": 21, \"col\": 33, \"offset\": 894 },\n            \"abstract_content\": \"software\",\n            \"unique_id\": {\n              \"type\": \"AST\",\n              \"md5sum\": \"bbc57b936bbfa438158dc98783674d59\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"check_id\": \"0\",\n      \"path\": \"LICENSE\",\n      \"start\": { \"line\": 23, \"col\": 42, \"offset\": 1041 },\n      \"end\": { \"line\": 23, \"col\": 55, \"offset\": 1054 },\n      \"extra\": {\n        \"metavars\": {\n          \"X\": {\n            \"start\": { \"line\": 23, \"col\": 47, \"offset\": 1046 },\n            \"end\": { \"line\": 23, \"col\": 55, \"offset\": 1054 },\n            \"abstract_content\": \"software\",\n            \"unique_id\": {\n              \"type\": \"AST\",\n              \"md5sum\": \"5ce1e82ba71603d64920df43efd511ab\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"check_id\": \"0\",\n      \"path\": \"LICENSE\",\n      \"start\": { \"line\": 26, \"col\": 1, \"offset\": 1209 },\n      \"end\": { \"line\": 26, \"col\": 14, \"offset\": 1222 },\n      \"extra\": {\n        \"metavars\": {\n          \"X\": {\n            \"start\": { \"line\": 26, \"col\": 6, \"offset\": 1214 },\n            \"end\": { \"line\": 26, \"col\": 14, \"offset\": 1222 },\n            \"abstract_content\": \"programs\",\n            \"unique_id\": {\n              \"type\": \"AST\",\n              \"md5sum\": \"16a2dfd24543a2ac106890f59cde43b4\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"check_id\": \"0\",\n      \"path\": \"LICENSE\",\n      \"start\": { \"line\": 36, \"col\": 34, \"offset\": 1729 },\n      \"end\": { \"line\": 36, \"col\": 47, \"offset\": 1742 },\n      \"extra\": {\n        \"metavars\": {\n          \"X\": {\n            \"start\": { \"line\": 36, \"col\": 39, \"offset\": 1734 },\n            \"end\": { \"line\": 36, \"col\": 47, \"offset\": 1742 },\n            \"abstract_content\": \"software\",\n            \"unique_id\": {\n              \"type\": \"AST\",\n              \"md5sum\": \"d0df4dcb9761c250dc5958a221841740\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"check_id\": \"0\",\n      \"path\": \"LICENSE\",\n      \"start\": { \"line\": 127, \"col\": 67, \"offset\": 6280 },\n      \"end\": { \"line\": 128, \"col\": 9, \"offset\": 6293 },\n      \"extra\": {\n        \"metavars\": {\n          \"X\": {\n            \"start\": { \"line\": 128, \"col\": 1, \"offset\": 6285 },\n            \"end\": { \"line\": 128, \"col\": 9, \"offset\": 6293 },\n            \"abstract_content\": \"programs\",\n            \"unique_id\": {\n              \"type\": \"AST\",\n              \"md5sum\": \"20cf165194aaee276b15967c27d7c83a\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"check_id\": \"0\",\n      \"path\": \"LICENSE\",\n      \"start\": { \"line\": 490, \"col\": 10, \"offset\": 25228 },\n      \"end\": { \"line\": 490, \"col\": 17, \"offset\": 25235 },\n      \"extra\": {\n        \"metavars\": {\n          \"X\": {\n            \"start\": { \"line\": 490, \"col\": 15, \"offset\": 25233 },\n            \"end\": { \"line\": 490, \"col\": 17, \"offset\": 25235 },\n            \"abstract_content\": \"of\",\n            \"unique_id\": {\n              \"type\": \"AST\",\n              \"md5sum\": \"bb0abe8681c10329a1fa96f8504ea7b7\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"check_id\": \"0\",\n      \"path\": \"LICENSE\",\n      \"start\": { \"line\": 626, \"col\": 1, \"offset\": 32588 },\n      \"end\": { \"line\": 626, \"col\": 14, \"offset\": 32601 },\n      \"extra\": {\n        \"metavars\": {\n          \"X\": {\n            \"start\": { \"line\": 626, \"col\": 6, \"offset\": 32593 },\n            \"end\": { \"line\": 626, \"col\": 14, \"offset\": 32601 },\n            \"abstract_content\": \"software\",\n            \"unique_id\": {\n              \"type\": \"AST\",\n              \"md5sum\": \"ff37ab074556812d3f0d3ef0a375b183\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"check_id\": \"0\",\n      \"path\": \"LICENSE\",\n      \"start\": { \"line\": 636, \"col\": 21, \"offset\": 33083 },\n      \"end\": { \"line\": 636, \"col\": 34, \"offset\": 33096 },\n      \"extra\": {\n        \"metavars\": {\n          \"X\": {\n            \"start\": { \"line\": 636, \"col\": 26, \"offset\": 33088 },\n            \"end\": { \"line\": 636, \"col\": 34, \"offset\": 33096 },\n            \"abstract_content\": \"software\",\n            \"unique_id\": {\n              \"type\": \"AST\",\n              \"md5sum\": \"ccf9c58d24cfa70cbf68103c9f1d1469\"\n            }\n          }\n        }\n      }\n    }\n  ],\n  \"errors\": [],\n  \"stats\": { \"okfiles\": 1, \"errorfiles\": 0 }\n}", "createdAt": "2020-10-16T01:26:57Z", "url": "https://github.com/returntocorp/semgrep/pull/1845", "merged": true, "mergeCommit": {"oid": "1f6ff0cbcdda4d40e632656def073fd584b051a8"}, "closed": true, "closedAt": "2020-10-16T05:33:18Z", "author": {"login": "mjambon"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSr1chAH2gAyNTA0NDg2NDE0OmNiNmExZmI2ZTQ3OGQyYzBmNjU0MGI4MGQyMWZhMzg3ZWUxYjE3ZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTBSLAgFqTUxMDIxNjE5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cb6a1fb6e478d2c0f6540b80d21fa387ee1b17ea", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/cb6a1fb6e478d2c0f6540b80d21fa387ee1b17ea", "committedDate": "2020-10-15T06:32:10Z", "message": "Add atd interface to export matches in json for semgrep"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95cab0f70b5c7f00ea2b8c9974ac98b941acbb6a", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/95cab0f70b5c7f00ea2b8c9974ac98b941acbb6a", "committedDate": "2020-10-16T01:01:23Z", "message": "Add '--output-format semgrep' option to spacegrep, producing json output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6da262af29a6ddb719a0fb5bc10dbd91f6f75e11", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/6da262af29a6ddb719a0fb5bc10dbd91f6f75e11", "committedDate": "2020-10-16T01:20:00Z", "message": "Fix pfff submodule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c276b821e285c27f3e10cd2eb769c02958b5c7f1", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/c276b821e285c27f3e10cd2eb769c02958b5c7f1", "committedDate": "2020-10-16T01:21:03Z", "message": "Merge remote-tracking branch 'origin/develop' into spacejson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43ef4e341700508b2fa2d0bc10ad44e3644ee6de", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/43ef4e341700508b2fa2d0bc10ad44e3644ee6de", "committedDate": "2020-10-16T01:30:13Z", "message": "Fix 'offset' field in json locations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "833fec2f64b0e958603288c5ae35041a8716cca3", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/833fec2f64b0e958603288c5ae35041a8716cca3", "committedDate": "2020-10-16T01:56:30Z", "message": "Add spacegrep tests to CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01f37e6d4267147b9624fd5e72da605c50c9484d", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/01f37e6d4267147b9624fd5e72da605c50c9484d", "committedDate": "2020-10-16T02:09:49Z", "message": "Fix command for testing spacegrep"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0441f342a9a157718db11e5df8c9f2c81f9a1c99", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/0441f342a9a157718db11e5df8c9f2c81f9a1c99", "committedDate": "2020-10-16T02:22:26Z", "message": "Fix spacegrep test command"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTc2NTU0", "url": "https://github.com/returntocorp/semgrep/pull/1845#pullrequestreview-509976554", "createdAt": "2020-10-16T02:51:11Z", "commit": {"oid": "0441f342a9a157718db11e5df8c9f2c81f9a1c99"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMjE2MTkz", "url": "https://github.com/returntocorp/semgrep/pull/1845#pullrequestreview-510216193", "createdAt": "2020-10-16T07:26:02Z", "commit": {"oid": "0441f342a9a157718db11e5df8c9f2c81f9a1c99"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzoyNjowMlrOHirEzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzozMTowM1rOHirVhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExOTM3NQ==", "bodyText": "Type definitions for JSON communication with the semgrep Python wrapper.", "url": "https://github.com/returntocorp/semgrep/pull/1845#discussion_r506119375", "createdAt": "2020-10-16T07:26:02Z", "author": {"login": "aryx"}, "path": "spacegrep/src/lib/Semgrep.atd", "diffHunk": "@@ -0,0 +1,71 @@\n+(*\n+   Type definitions for json communication with semgrep.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0441f342a9a157718db11e5df8c9f2c81f9a1c99"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEyMDI1OQ==", "bodyText": "Nice!\nI should probably use it in semgrep-core too now that they are in the same repo :)", "url": "https://github.com/returntocorp/semgrep/pull/1845#discussion_r506120259", "createdAt": "2020-10-16T07:26:43Z", "author": {"login": "aryx"}, "path": "spacegrep/src/lib/Semgrep.atd", "diffHunk": "@@ -0,0 +1,71 @@\n+(*\n+   Type definitions for json communication with semgrep.\n+\n+   Inferred from JSON_report.ml in semgrep-core.\n+*)\n+\n+type match_results = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0441f342a9a157718db11e5df8c9f2c81f9a1c99"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEyMTE4MQ==", "bodyText": "it's actually in pfff/h_program-lang/R2c.ml", "url": "https://github.com/returntocorp/semgrep/pull/1845#discussion_r506121181", "createdAt": "2020-10-16T07:27:48Z", "author": {"login": "aryx"}, "path": "spacegrep/src/lib/Semgrep.atd", "diffHunk": "@@ -0,0 +1,71 @@\n+(*\n+   Type definitions for json communication with semgrep.\n+\n+   Inferred from JSON_report.ml in semgrep-core.\n+*)\n+\n+type match_results = {\n+  matches: match_ list;\n+  errors: error list;\n+  stats: stats;\n+}\n+\n+type stats = {\n+  okfiles: int;\n+  errorfiles: int;\n+}\n+\n+type match_ = {\n+  ?check_id: string option; (* rule ID *)\n+  path: string; (* source file *)\n+  start: position;\n+  end_ <json name=\"end\">: position;\n+  extra: match_extra;\n+}\n+\n+(* See R2c.ml in semgrep-core *)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0441f342a9a157718db11e5df8c9f2c81f9a1c99"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEyMzI2NA==", "bodyText": "Anyway you should need it. It's used when a metavariable matches an identifier and we want to make sure that independent matches on the same identifer name correspond to same scoped identifier (see Naming_AST.ml in pfff))", "url": "https://github.com/returntocorp/semgrep/pull/1845#discussion_r506123264", "createdAt": "2020-10-16T07:30:16Z", "author": {"login": "aryx"}, "path": "spacegrep/src/lib/Semgrep.atd", "diffHunk": "@@ -0,0 +1,71 @@\n+(*\n+   Type definitions for json communication with semgrep.\n+\n+   Inferred from JSON_report.ml in semgrep-core.\n+*)\n+\n+type match_results = {\n+  matches: match_ list;\n+  errors: error list;\n+  stats: stats;\n+}\n+\n+type stats = {\n+  okfiles: int;\n+  errorfiles: int;\n+}\n+\n+type match_ = {\n+  ?check_id: string option; (* rule ID *)\n+  path: string; (* source file *)\n+  start: position;\n+  end_ <json name=\"end\">: position;\n+  extra: match_extra;\n+}\n+\n+(* See R2c.ml in semgrep-core *)\n+type error = {\n+  ?check_id: string option;\n+  path: string;\n+  start: position;\n+  end_ <json name=\"end\">: position;\n+  extra: error_extra;\n+}\n+\n+type position = {\n+  line: int; (* starts at 1 *)\n+  col: int; (* starts at 1 *)\n+  offset: int; (* byte position from the beginning of the file, starts at 0 *)\n+}\n+\n+type match_extra = {\n+  ?message: string option; (* rule.message (?) *)\n+  metavars: (string * metavar_value) list <json repr=\"object\">;\n+}\n+\n+type error_extra = {\n+  message: string;\n+  line: string;\n+}\n+\n+type metavar_value = {\n+  start: position;\n+  end_ <json name=\"end\">: position;\n+  abstract_content: string; (* value? *)\n+  unique_id: unique_id;\n+}\n+\n+(*\n+   This is just the variant for type=AST.\n+   In order to accommodate two record types into one variant, use\n+   the atdgen feature called a json adapter.\n+*)\n+type unique_id = {\n+  type_ <json name=\"type\">: unique_id_type;\n+  md5sum: string;\n+}\n+\n+type unique_id_type = [\n+(*  | ID <json name=\"id\"> *) (* variant not supported at the moment *)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0441f342a9a157718db11e5df8c9f2c81f9a1c99"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEyMzY1NQ==", "bodyText": "Nice! I need to use this atdgen more.", "url": "https://github.com/returntocorp/semgrep/pull/1845#discussion_r506123655", "createdAt": "2020-10-16T07:31:03Z", "author": {"login": "aryx"}, "path": "spacegrep/src/lib/Semgrep.ml", "diffHunk": "@@ -0,0 +1,78 @@\n+(*\n+   Convert matches to the format expected by the semgrep wrapper,\n+   similar to what semgrep-core produces.\n+*)\n+\n+open Match\n+open Semgrep_t\n+\n+let semgrep_pos (x : Lexing.position) : Semgrep_t.position =\n+  {\n+    line = x.pos_lnum + 1;\n+    col = x.pos_cnum - x.pos_bol + 1;\n+    offset = x.pos_cnum;\n+  }\n+\n+let unique_id_of_loc (loc : Loc.t) : unique_id =\n+  let md5sum =\n+    Marshal.to_string loc []\n+    |> Digest.string\n+    |> Digest.to_hex\n+  in\n+  {\n+    type_ = `AST;\n+    md5sum;\n+  }\n+\n+let convert_capture x =\n+  let pos1, pos2 = x.loc in\n+  x.name, {\n+    start = semgrep_pos pos1;\n+    end_ = semgrep_pos pos2;\n+    abstract_content = x.value;\n+    unique_id = unique_id_of_loc x.loc;\n+  }\n+\n+(*\n+   Convert match results to the format expected by semgrep.\n+*)\n+let make_semgrep_json doc_matches : Semgrep_t.match_results =\n+  let matches =\n+    List.map (fun (src, pat_matches) ->\n+      let path = Src_file.source_string src in\n+      List.map (fun (pat_id, matches) ->\n+        let check_id = Some (string_of_int pat_id) in\n+        List.map (fun match_ ->\n+          let ((pos1, _), (_, pos2)) = match_.region in\n+          let metavars = List.map convert_capture match_.captures in\n+          let extra = {\n+            message = None;\n+            metavars;\n+          } in\n+          ({\n+            check_id;\n+            path;\n+            start = semgrep_pos pos1;\n+            end_ = semgrep_pos pos2;\n+            extra;\n+          } : match_)\n+        ) matches\n+      ) pat_matches\n+      |> List.flatten\n+    ) doc_matches\n+    |> List.flatten\n+  in\n+  {\n+    matches;\n+    errors = [];\n+    stats = {\n+      okfiles = List.length doc_matches;\n+      errorfiles = 0;\n+    };\n+  }\n+\n+let print_semgrep_json doc_matches =\n+  make_semgrep_json doc_matches\n+  |> Semgrep_j.string_of_match_results", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0441f342a9a157718db11e5df8c9f2c81f9a1c99"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1197, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}