{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NjIzMjcz", "number": 892, "title": "Use cache for parsing files faster the second time", "bodyText": "This should fix #876 (at least the ocaml part).\nThis saves parsed (and Naming_AST.resolved) generic AST\nin /tmp/semgrep_core_cache<uid/ if the -use_parsing_cache command-line\nargument was passed to semgrep-core.\nTo clean the cache, simply do\nrm -f /tmp/semgrep_core_cache<uid/ from the Python side if you need to.\nTest plan:\ntakes 2.1s the first time and 0.7sec the second time when testing\non tests/PERF/ js files.\n/home/pad/github/semgrep/semgrep-core/_build/default/bin/Main.exe -equivalences /home/pad/github/semgrep/semgrep-core/data/basic_equivalences.yml -verbose -profile -e 1==2 -lang js tests/PERF/\nprofiling result\nMain total                               :      1.996 sec          1 count\nParse_js.parse                           :      1.043 sec          4 count\nSemgrep.check                            :      0.537 sec          4 count\nParse_js.tokens                          :      0.401 sec         13 count\nSemgrep.match_e_e                        :      0.307 sec     132621 count\n...\nThis time with -use_parsing_cache:\n/home/pad/github/semgrep/semgrep-core/_build/default/bin/Main.exe -equivalences /home/pad/github/semgrep/semgrep-core/data/basic_equivalences.yml -use_parsing_cache -verbose -profile -e 1==2 -lang js tests/PERF/\n\nprofiling result\nMain total                               :      0.546 sec          1 count\nSemgrep.check                            :      0.486 sec          4 count\nSemgrep.match_e_e                        :      0.285 sec     132621 count\nrule:-e/-f                               :      0.105 sec     132621 count\nApply_equivalences.apply                 :      0.042 sec          4 count\nMain.cache_computation                   :      0.040 sec          4 count\n...\nls -al /tmp/semgrep_core_cache_1000/\ntotal 9984\ndrwx------  2 pad  pad     4096 Jun  2 16:08 .\ndrwxrwxrwt 17 root root   49152 Jun  2 16:26 ..\n-rw-r--r--  1 pad  pad  1019805 Jun  2 16:07 027e133a90b2c79d01c3224dfb0fed8f.ast_cache\n-rw-r--r--  1 pad  pad  3953523 Jun  2 16:05 20d25efa622e4bfbc4015d03ba0d1d68.ast_cache\n-rw-r--r--  1 pad  pad  3953523 Jun  2 16:08 6c05be109ca532cf545c082bda4a07fd.ast_cache\n-rw-r--r--  1 pad  pad     7590 Jun  2 16:05 8cae6609c9048056880aa68cc383912c.ast_cache\n-rw-r--r--  1 pad  pad     7590 Jun  2 16:07 92a4a1e679734b50b6dbc1cbfae37e86.ast_cache\n-rw-r--r--  1 pad  pad    98103 Jun  2 16:07 a51fb3d6d3645f7004df0cee7b18e176.ast_cache\n-rw-r--r--  1 pad  pad    98103 Jun  2 16:05 bd7d534ea53a44d782902098c97fedb9.ast_cache\n-rw-r--r--  1 pad  pad  1019805 Jun  2 16:05 e763c7f5ef9424a2a7e295dd564cfabb.ast_cache\nThere are each time 2 files with the same size because I bumped ast_version\nand so it regenerated new cache entries.", "createdAt": "2020-06-02T14:28:34Z", "url": "https://github.com/returntocorp/semgrep/pull/892", "merged": true, "mergeCommit": {"oid": "564b1631ce91f1096d747d9165eaf2cfb86b8654"}, "closed": true, "closedAt": "2020-06-10T13:48:43Z", "author": {"login": "aryx"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnVuyDAH2gAyNDI2NjIzMjczOjEzM2NhNmMzZjRlNGRiMDNlOTVlN2MyOTk1NWExMzY2MTVmYTVkMmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp5qSGgH2gAyNDI2NjIzMjczOjYzYzYzOTRmNjk2NWNhOTYwZDkwZDRhNzk4NmRhNTUyOWU4MTA5MDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e", "author": {"user": {"login": "aryx", "name": "Yoann Padioleau"}}, "url": "https://github.com/returntocorp/semgrep/commit/133ca6c3f4e4db03e95e7c29955a136615fa5d2e", "committedDate": "2020-06-02T14:28:14Z", "message": "Use cache for parsing files faster the second time\n\nThis should fix #876 (at least the ocaml part).\nThis saves parsed (and Naming_AST.resolved) generic AST\nin /tmp/semgrep_core_cache<uid/ if the -use_parsing_cache command-line\nargument was passed to semgrep-core.\n\nTo clean the cache, simply do\nrm -f /tmp/semgrep_core_cache<uid/ from the Python side if you need to.\n\nTest plan:\ntakes 2.1s the first time and 0.7sec the second time when testing\non tests/PERF/ js files.\n\n/home/pad/github/semgrep/semgrep-core/_build/default/bin/Main.exe -equivalences /home/pad/github/semgrep/semgrep-core/data/basic_equivalences.yml -verbose -profile -e 1==2 -lang js tests/PERF/\n---------------------\nprofiling result\n---------------------\nMain total                               :      1.996 sec          1 count\nParse_js.parse                           :      1.043 sec          4 count\nSemgrep.check                            :      0.537 sec          4 count\nParse_js.tokens                          :      0.401 sec         13 count\nSemgrep.match_e_e                        :      0.307 sec     132621 count\n...\n\nThis time with -use_parsing_cache:\n/home/pad/github/semgrep/semgrep-core/_build/default/bin/Main.exe -equivalences /home/pad/github/semgrep/semgrep-core/data/basic_equivalences.yml -use_parsing_cache -verbose -profile -e 1==2 -lang js tests/PERF/\n\n---------------------\nprofiling result\n---------------------\nMain total                               :      0.546 sec          1 count\nSemgrep.check                            :      0.486 sec          4 count\nSemgrep.match_e_e                        :      0.285 sec     132621 count\nrule:-e/-f                               :      0.105 sec     132621 count\nApply_equivalences.apply                 :      0.042 sec          4 count\nMain.cache_computation                   :      0.040 sec          4 count\n...\n\nls -al /tmp/semgrep_core_cache_1000/\ntotal 9984\ndrwx------  2 pad  pad     4096 Jun  2 16:08 .\ndrwxrwxrwt 17 root root   49152 Jun  2 16:26 ..\n-rw-r--r--  1 pad  pad  1019805 Jun  2 16:07 027e133a90b2c79d01c3224dfb0fed8f.ast_cache\n-rw-r--r--  1 pad  pad  3953523 Jun  2 16:05 20d25efa622e4bfbc4015d03ba0d1d68.ast_cache\n-rw-r--r--  1 pad  pad  3953523 Jun  2 16:08 6c05be109ca532cf545c082bda4a07fd.ast_cache\n-rw-r--r--  1 pad  pad     7590 Jun  2 16:05 8cae6609c9048056880aa68cc383912c.ast_cache\n-rw-r--r--  1 pad  pad     7590 Jun  2 16:07 92a4a1e679734b50b6dbc1cbfae37e86.ast_cache\n-rw-r--r--  1 pad  pad    98103 Jun  2 16:07 a51fb3d6d3645f7004df0cee7b18e176.ast_cache\n-rw-r--r--  1 pad  pad    98103 Jun  2 16:05 bd7d534ea53a44d782902098c97fedb9.ast_cache\n-rw-r--r--  1 pad  pad  1019805 Jun  2 16:05 e763c7f5ef9424a2a7e295dd564cfabb.ast_cache\n\nThere are each time 2 files with the same size because I bumped ast_version\nand so it regenerated new cache entries."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNzgxMjgx", "url": "https://github.com/returntocorp/semgrep/pull/892#pullrequestreview-422781281", "createdAt": "2020-06-02T15:14:21Z", "commit": {"oid": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxNDoyMVrOGd2eXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxNDoyMVrOGd2eXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NDM5OA==", "bodyText": "What are your thoughts re. adding the file md5 checksum here? This would enable the Python wrapper to skip calculating this value itself.", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r433954398", "createdAt": "2020-06-02T15:14:21Z", "author": {"login": "nbrahms"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -264,6 +275,55 @@ let gen_layer ~root ~query file =\n   ()\n (*e: function [[Main_semgrep_core.gen_layer]] *)\n \n+let filemtime file =\n+  (Unix.stat file).Unix.st_mtime\n+\n+(* The function below is mostly a copy-paste of Common.cache_computation.\n+ * This function is slightly more flexible because we can put the cache file\n+ * anywhere thanks to the argument 'cache_file_of_file'.\n+ * We also try to be a bit more type-safe by using the version tag above.\n+ * TODO: merge in pfff/commons/Common.ml at some point\n+ *)\n+let cache_computation file cache_file_of_file f =\n+  if not !use_parsing_cache\n+  then f ()\n+  else begin\n+    if not (Sys.file_exists file)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNzgzMTcx", "url": "https://github.com/returntocorp/semgrep/pull/892#pullrequestreview-422783171", "createdAt": "2020-06-02T15:16:22Z", "commit": {"oid": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxNjoyMlrOGd2kAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxNjoyMlrOGd2kAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NTg0MQ==", "bodyText": "What's the purpose of hashing the filename here?", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r433955841", "createdAt": "2020-06-02T15:16:22Z", "author": {"login": "nbrahms"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -264,6 +275,55 @@ let gen_layer ~root ~query file =\n   ()\n (*e: function [[Main_semgrep_core.gen_layer]] *)\n \n+let filemtime file =\n+  (Unix.stat file).Unix.st_mtime\n+\n+(* The function below is mostly a copy-paste of Common.cache_computation.\n+ * This function is slightly more flexible because we can put the cache file\n+ * anywhere thanks to the argument 'cache_file_of_file'.\n+ * We also try to be a bit more type-safe by using the version tag above.\n+ * TODO: merge in pfff/commons/Common.ml at some point\n+ *)\n+let cache_computation file cache_file_of_file f =\n+  if not !use_parsing_cache\n+  then f ()\n+  else begin\n+    if not (Sys.file_exists file)\n+    then begin\n+      pr2 (\"WARNING: cache_computation: can't find file \"  ^ file);\n+      pr2 (\"defaulting to calling the function\");\n+      f ()\n+    end else begin\n+    profile_code \"Main.cache_computation\" (fun () ->\n+\n+      let file_cache = cache_file_of_file file in\n+      if Sys.file_exists file_cache && filemtime file_cache >= filemtime file\n+      then begin\n+        if !verbose then pr2 (\"using cache: \" ^ file_cache);\n+        let (version, res) = Common2.get_value file_cache in\n+        if version != ast_version\n+        then failwith (spf \"Version mismatch! Clean the cache file %s\"\n+                      file_cache);\n+        res\n+      end\n+      else begin\n+        let res = f () in\n+        Common2.write_value (ast_version, res) file_cache;\n+        res\n+      end\n+      )\n+    end\n+  end\n+\n+\n+let cache_file_of_file filename =\n+  let dir = spf \"/tmp/semgrep_core_cache_%d\" (Unix.getuid()) in\n+  if not (Sys.file_exists dir)\n+  then Unix.mkdir dir 0o700;\n+  (* hopefully there will be no collision *)\n+  let md5 = Digest.string filename in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNzg0NTQ0", "url": "https://github.com/returntocorp/semgrep/pull/892#pullrequestreview-422784544", "createdAt": "2020-06-02T15:17:53Z", "commit": {"oid": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxNzo1M1rOGd2oFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxNzo1M1rOGd2oFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1Njg4NQ==", "bodyText": "Not sure how Docker cp works, but just flagging that this computation might always return false for the Docker container used with Docker CP.", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r433956885", "createdAt": "2020-06-02T15:17:53Z", "author": {"login": "nbrahms"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -264,6 +275,55 @@ let gen_layer ~root ~query file =\n   ()\n (*e: function [[Main_semgrep_core.gen_layer]] *)\n \n+let filemtime file =\n+  (Unix.stat file).Unix.st_mtime\n+\n+(* The function below is mostly a copy-paste of Common.cache_computation.\n+ * This function is slightly more flexible because we can put the cache file\n+ * anywhere thanks to the argument 'cache_file_of_file'.\n+ * We also try to be a bit more type-safe by using the version tag above.\n+ * TODO: merge in pfff/commons/Common.ml at some point\n+ *)\n+let cache_computation file cache_file_of_file f =\n+  if not !use_parsing_cache\n+  then f ()\n+  else begin\n+    if not (Sys.file_exists file)\n+    then begin\n+      pr2 (\"WARNING: cache_computation: can't find file \"  ^ file);\n+      pr2 (\"defaulting to calling the function\");\n+      f ()\n+    end else begin\n+    profile_code \"Main.cache_computation\" (fun () ->\n+\n+      let file_cache = cache_file_of_file file in\n+      if Sys.file_exists file_cache && filemtime file_cache >= filemtime file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyODA2NTIx", "url": "https://github.com/returntocorp/semgrep/pull/892#pullrequestreview-422806521", "createdAt": "2020-06-02T15:37:45Z", "commit": {"oid": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTozNzo0NVrOGd3fzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTozNzo0NVrOGd3fzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3MTE1MA==", "bodyText": "I suggest that this be the full version (including git commit) of pfff, so that any rev to pfff invalidates the cache.", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r433971150", "createdAt": "2020-06-02T15:37:45Z", "author": {"login": "nbrahms"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -136,6 +136,17 @@ let supported_langs: string = String.concat \", \" keys\n let ncores = ref 1\n (*e: constant [[Main_semgrep_core.ncores]] *)\n \n+(* TODO: we may need to put that in AST_generic.ml at some point\n+ * and people should bump this number each time they make a modification\n+ * to the generic AST (or to some analysis such as Naming_AST.ml which\n+ * will have an impact on the marshalled AST). Otherwise, we may\n+ * get some segmentation fault as OCaml marshalling is not entirely\n+ * type-safe!!\n+ *)\n+let ast_version = 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyOTEyNjc0", "url": "https://github.com/returntocorp/semgrep/pull/892#pullrequestreview-422912674", "createdAt": "2020-06-02T17:44:47Z", "commit": {"oid": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo0NDo0N1rOGd82pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo0NDo0N1rOGd82pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1ODkxOA==", "bodyText": "About /tmp: you can use Filename.get_temp_dir_name () instead of assuming /tmp exists. (this point was raised by @mschwager )\nfrom https://caml.inria.fr/pub/docs/manual-ocaml/libref/Filename.html :\nval get_temp_dir_name : unit -> string\n\n\nThe name of the temporary directory: Under Unix, the value of the TMPDIR environment variable, or \"/tmp\" if the variable is not set. Under Windows, the value of the TEMP environment variable, or \".\" if the variable is not set. The temporary directory can be changed with Filename.set_temp_dir_name.\nSince 4.00.0", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r434058918", "createdAt": "2020-06-02T17:44:47Z", "author": {"login": "mjambon"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -264,6 +275,55 @@ let gen_layer ~root ~query file =\n   ()\n (*e: function [[Main_semgrep_core.gen_layer]] *)\n \n+let filemtime file =\n+  (Unix.stat file).Unix.st_mtime\n+\n+(* The function below is mostly a copy-paste of Common.cache_computation.\n+ * This function is slightly more flexible because we can put the cache file\n+ * anywhere thanks to the argument 'cache_file_of_file'.\n+ * We also try to be a bit more type-safe by using the version tag above.\n+ * TODO: merge in pfff/commons/Common.ml at some point\n+ *)\n+let cache_computation file cache_file_of_file f =\n+  if not !use_parsing_cache\n+  then f ()\n+  else begin\n+    if not (Sys.file_exists file)\n+    then begin\n+      pr2 (\"WARNING: cache_computation: can't find file \"  ^ file);\n+      pr2 (\"defaulting to calling the function\");\n+      f ()\n+    end else begin\n+    profile_code \"Main.cache_computation\" (fun () ->\n+\n+      let file_cache = cache_file_of_file file in\n+      if Sys.file_exists file_cache && filemtime file_cache >= filemtime file\n+      then begin\n+        if !verbose then pr2 (\"using cache: \" ^ file_cache);\n+        let (version, res) = Common2.get_value file_cache in\n+        if version != ast_version\n+        then failwith (spf \"Version mismatch! Clean the cache file %s\"\n+                      file_cache);\n+        res\n+      end\n+      else begin\n+        let res = f () in\n+        Common2.write_value (ast_version, res) file_cache;\n+        res\n+      end\n+      )\n+    end\n+  end\n+\n+\n+let cache_file_of_file filename =\n+  let dir = spf \"/tmp/semgrep_core_cache_%d\" (Unix.getuid()) in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87579a7ae6617f5cd68df30b9cd720edbc149c91", "author": {"user": {"login": "aryx", "name": "Yoann Padioleau"}}, "url": "https://github.com/returntocorp/semgrep/commit/87579a7ae6617f5cd68df30b9cd720edbc149c91", "committedDate": "2020-06-10T13:04:48Z", "message": "Merge branch 'develop' into use_parsing_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63c6394f6965ca960d90d4a7986da5529e810901", "author": {"user": {"login": "aryx", "name": "Yoann Padioleau"}}, "url": "https://github.com/returntocorp/semgrep/commit/63c6394f6965ca960d90d4a7986da5529e810901", "committedDate": "2020-06-10T13:27:45Z", "message": "* semgrep-core/bin/Main.ml: address nathan and martin suggestions"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1614, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}