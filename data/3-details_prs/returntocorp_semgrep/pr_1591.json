{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNDUwODEw", "number": 1591, "title": "Add true negative annotations to --test functionality", "bodyText": "Example here: returntocorp/semgrep-rules#812\nOutput:\n$ python -m semgrep --test ~/r2c/sgrep-rules/python/lang/security/deserialization/\nstarting tests...\nrunning 1 rules...\nrunning 1 rules...\nrunning 4 rules...\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588|4/4\n0 yaml files missing tests\n3 yaml files tested\ncheck id scoring:\n================================================================================\n~/r2c/sgrep-rules/python/lang/security/deserialization/avoid-pyyaml-load.yaml\n  \u2714 - avoid-pyyaml-load                                           TP: 1\tTN: 0\tFP: 0\tFN: 0 \n~/r2c/sgrep-rules/python/lang/security/deserialization/avoid-unsafe-ruamel.yaml\n  \u2714 - avoid-unsafe-ruamel                                         TP: 2\tTN: 3\tFP: 0\tFN: 0 \n~/r2c/sgrep-rules/python/lang/security/deserialization/pickle.yaml\n  \u2714 - avoid-shelve                                                TP: 1\tTN: 0\tFP: 0\tFN: 0 \n  \u2714 - avoid-dill                                                  TP: 1\tTN: 0\tFP: 0\tFN: 0 \n  \u2714 - avoid-cPickle                                               TP: 1\tTN: 0\tFP: 0\tFN: 0 \n  \u2714 - avoid-pickle                                                TP: 3\tTN: 0\tFP: 0\tFN: 0 \n================================================================================\nfinal confusion matrix: TP: 9\tTN: 3\tFP: 0\tFN: 0\n================================================================================\nall tests passed", "createdAt": "2020-08-25T20:12:26Z", "url": "https://github.com/returntocorp/semgrep/pull/1591", "merged": true, "mergeCommit": {"oid": "107406b72679e5e7e3f9010ae71f0651eb53c5c5"}, "closed": true, "closedAt": "2020-08-26T20:12:18Z", "author": {"login": "mschwager"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCc9fBgH2gAyNDczNDUwODEwOjE1ZDQ0YjFlNGZjMWIwYzM5OGJlZjI2YTQ3ODVmOWVhNTBhNDJjOTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCxeeRgFqTQ3NTgxODI2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "15d44b1e4fc1b0c398bef26a4785f9ea50a42c91", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/15d44b1e4fc1b0c398bef26a4785f9ea50a42c91", "committedDate": "2020-08-25T20:09:35Z", "message": "Add true negative annotations to --test functionality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NzY0MTM2", "url": "https://github.com/returntocorp/semgrep/pull/1591#pullrequestreview-475764136", "createdAt": "2020-08-26T18:49:34Z", "commit": {"oid": "15d44b1e4fc1b0c398bef26a4785f9ea50a42c91"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODo0OTozNFrOHHZJWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODo0OTozNFrOHHZJWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxNDA3Mg==", "bodyText": "@minusworld here's the error if an ok'ed line is reported. It'd be a good idea to go over our existing tests and mark the ok'ed lines with their specific rule-id. That way we'll be notified if we have any false positives.", "url": "https://github.com/returntocorp/semgrep/pull/1591#discussion_r477514072", "createdAt": "2020-08-26T18:49:34Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/test.py", "diffHunk": "@@ -142,11 +160,18 @@ def join_keys(a: Dict[str, Any], b: Dict[str, Any]) -> Set[str]:\n         for check_id in join_keys(comment_lines[file_path], reported_lines[file_path]):\n             all_reported = set(reported_lines[file_path][check_id])\n             expected = set(comment_lines[file_path][check_id])\n+            oked = set(ok_lines[file_path][check_id])\n             ignored = set(ignore_lines[file_path])\n \n+            reported_oked_lines = oked.intersection(all_reported)\n+            if reported_oked_lines:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15d44b1e4fc1b0c398bef26a4785f9ea50a42c91"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1ODE4MjY4", "url": "https://github.com/returntocorp/semgrep/pull/1591#pullrequestreview-475818268", "createdAt": "2020-08-26T20:03:43Z", "commit": {"oid": "15d44b1e4fc1b0c398bef26a4785f9ea50a42c91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1332, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}