{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNjAwNTU2", "number": 1712, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzowMDo1MlrOEmLk4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzowMDo1MlrOEmLk4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDcxMDEwOnYy", "diffSide": "RIGHT", "path": "scripts/merge-rules.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzowMDo1MlrOHWD5Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoyNDoyN1rOHYRdPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5NDUzMQ==", "bodyText": "hey @tkisason thanks for the PR! Can we add in a case for no args to print the help? seems to me that sys.argv[1] will fail if no args given", "url": "https://github.com/returntocorp/semgrep/pull/1712#discussion_r492894531", "createdAt": "2020-09-22T17:00:52Z", "author": {"login": "DrewDennison"}, "path": "scripts/merge-rules.py", "diffHunk": "@@ -0,0 +1,42 @@\n+#!/usr/bin/env python3\n+import os\n+import sys\n+from ruamel.yaml import YAML\n+\n+\n+def getRulefilesFromPath(path):\n+    rulefiles = []\n+    for root, dirs, files in os.walk(path):\n+        dirs[:] = [d for d in dirs if not d.startswith(\".\")]\n+        for name in files:\n+            file = os.path.join(root, name)\n+            if (file.endswith(\".yml\") or file.endswith(\".yaml\")) and (\n+                not name.startswith(\".\")\n+            ):\n+                rulefiles.append(file)\n+    print(f\"Found {len(rulefiles)} rulefiles\")\n+    return rulefiles\n+\n+\n+def mergeRules(rulefilelist, outputfile):\n+    yaml = YAML(typ=\"rt\")\n+    rulefile = {\"rules\": []}\n+    for file in rulefilelist:\n+        rulefileyaml = yaml.load(open(file))\n+        rulefile[\"rules\"] += rulefileyaml[\"rules\"]\n+    rulecount = len(rulefile[\"rules\"])\n+    print(f\"Created {rulecount} rules\")\n+    output = open(outputfile, \"w\")\n+    yaml.dump(rulefile, output)\n+    output.close()\n+\n+\n+if __name__ == \"__main__\":\n+    if len(sys.argv) != 3:\n+        print(\"Merges all yaml/yml files in a directory and all subdirs\")\n+        print(\"Skips directories and files prefixed with a .\")\n+        print(f\"Usage {sys.argv[0]} [input folder] [output filename]\")\n+    else:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4043d8a1d1aee6ea572b3976953b96ad7cf8f371"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzMjg0MQ==", "bodyText": "This is exactly how it works. It will check if there are exactly 3 arguments (script name, input folder and output filename) and this is not satisfied it will print out the help:\n(semgrep-rule-merger) ~/workspace/semgrep-rule-merger> ./semgrep-rule-merger.py\nMerges all yaml/yml files in a directory and all subdirs\nSkips directories and files prefixed with a .\nUsage ./semgrep-rule-merger.py [input folder] [output filename]\n(semgrep-rule-merger) ~/workspace/semgrep-rule-merger> ./semgrep-rule-merger.py semgrep-rules\nMerges all yaml/yml files in a directory and all subdirs\nSkips directories and files prefixed with a .\nUsage ./semgrep-rule-merger.py [input folder] [output filename]\n(semgrep-rule-merger) ~/workspace/semgrep-rule-merger> ./semgrep-rule-merger.py semgrep-rules out.yml foo\nMerges all yaml/yml files in a directory and all subdirs\nSkips directories and files prefixed with a .\nUsage ./semgrep-rule-merger.py [input folder] [output filename]\nIf 3 arguments are passed, then it will run the needed functions.\nIs this ok or should i change it in some way?", "url": "https://github.com/returntocorp/semgrep/pull/1712#discussion_r492932841", "createdAt": "2020-09-22T18:04:18Z", "author": {"login": "tkisason"}, "path": "scripts/merge-rules.py", "diffHunk": "@@ -0,0 +1,42 @@\n+#!/usr/bin/env python3\n+import os\n+import sys\n+from ruamel.yaml import YAML\n+\n+\n+def getRulefilesFromPath(path):\n+    rulefiles = []\n+    for root, dirs, files in os.walk(path):\n+        dirs[:] = [d for d in dirs if not d.startswith(\".\")]\n+        for name in files:\n+            file = os.path.join(root, name)\n+            if (file.endswith(\".yml\") or file.endswith(\".yaml\")) and (\n+                not name.startswith(\".\")\n+            ):\n+                rulefiles.append(file)\n+    print(f\"Found {len(rulefiles)} rulefiles\")\n+    return rulefiles\n+\n+\n+def mergeRules(rulefilelist, outputfile):\n+    yaml = YAML(typ=\"rt\")\n+    rulefile = {\"rules\": []}\n+    for file in rulefilelist:\n+        rulefileyaml = yaml.load(open(file))\n+        rulefile[\"rules\"] += rulefileyaml[\"rules\"]\n+    rulecount = len(rulefile[\"rules\"])\n+    print(f\"Created {rulecount} rules\")\n+    output = open(outputfile, \"w\")\n+    yaml.dump(rulefile, output)\n+    output.close()\n+\n+\n+if __name__ == \"__main__\":\n+    if len(sys.argv) != 3:\n+        print(\"Merges all yaml/yml files in a directory and all subdirs\")\n+        print(\"Skips directories and files prefixed with a .\")\n+        print(f\"Usage {sys.argv[0]} [input folder] [output filename]\")\n+    else:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5NDUzMQ=="}, "originalCommit": {"oid": "4043d8a1d1aee6ea572b3976953b96ad7cf8f371"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyMDg1Mg==", "bodyText": "@DrewDennison Note the if len(sys.argv) == 3... are we good to merge this one?", "url": "https://github.com/returntocorp/semgrep/pull/1712#discussion_r494420852", "createdAt": "2020-09-24T15:41:06Z", "author": {"login": "nbrahms"}, "path": "scripts/merge-rules.py", "diffHunk": "@@ -0,0 +1,42 @@\n+#!/usr/bin/env python3\n+import os\n+import sys\n+from ruamel.yaml import YAML\n+\n+\n+def getRulefilesFromPath(path):\n+    rulefiles = []\n+    for root, dirs, files in os.walk(path):\n+        dirs[:] = [d for d in dirs if not d.startswith(\".\")]\n+        for name in files:\n+            file = os.path.join(root, name)\n+            if (file.endswith(\".yml\") or file.endswith(\".yaml\")) and (\n+                not name.startswith(\".\")\n+            ):\n+                rulefiles.append(file)\n+    print(f\"Found {len(rulefiles)} rulefiles\")\n+    return rulefiles\n+\n+\n+def mergeRules(rulefilelist, outputfile):\n+    yaml = YAML(typ=\"rt\")\n+    rulefile = {\"rules\": []}\n+    for file in rulefilelist:\n+        rulefileyaml = yaml.load(open(file))\n+        rulefile[\"rules\"] += rulefileyaml[\"rules\"]\n+    rulecount = len(rulefile[\"rules\"])\n+    print(f\"Created {rulecount} rules\")\n+    output = open(outputfile, \"w\")\n+    yaml.dump(rulefile, output)\n+    output.close()\n+\n+\n+if __name__ == \"__main__\":\n+    if len(sys.argv) != 3:\n+        print(\"Merges all yaml/yml files in a directory and all subdirs\")\n+        print(\"Skips directories and files prefixed with a .\")\n+        print(f\"Usage {sys.argv[0]} [input folder] [output filename]\")\n+    else:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5NDUzMQ=="}, "originalCommit": {"oid": "4043d8a1d1aee6ea572b3976953b96ad7cf8f371"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMzg4NQ==", "bodyText": "lgtm", "url": "https://github.com/returntocorp/semgrep/pull/1712#discussion_r495213885", "createdAt": "2020-09-25T20:24:27Z", "author": {"login": "chmccreery"}, "path": "scripts/merge-rules.py", "diffHunk": "@@ -0,0 +1,42 @@\n+#!/usr/bin/env python3\n+import os\n+import sys\n+from ruamel.yaml import YAML\n+\n+\n+def getRulefilesFromPath(path):\n+    rulefiles = []\n+    for root, dirs, files in os.walk(path):\n+        dirs[:] = [d for d in dirs if not d.startswith(\".\")]\n+        for name in files:\n+            file = os.path.join(root, name)\n+            if (file.endswith(\".yml\") or file.endswith(\".yaml\")) and (\n+                not name.startswith(\".\")\n+            ):\n+                rulefiles.append(file)\n+    print(f\"Found {len(rulefiles)} rulefiles\")\n+    return rulefiles\n+\n+\n+def mergeRules(rulefilelist, outputfile):\n+    yaml = YAML(typ=\"rt\")\n+    rulefile = {\"rules\": []}\n+    for file in rulefilelist:\n+        rulefileyaml = yaml.load(open(file))\n+        rulefile[\"rules\"] += rulefileyaml[\"rules\"]\n+    rulecount = len(rulefile[\"rules\"])\n+    print(f\"Created {rulecount} rules\")\n+    output = open(outputfile, \"w\")\n+    yaml.dump(rulefile, output)\n+    output.close()\n+\n+\n+if __name__ == \"__main__\":\n+    if len(sys.argv) != 3:\n+        print(\"Merges all yaml/yml files in a directory and all subdirs\")\n+        print(\"Skips directories and files prefixed with a .\")\n+        print(f\"Usage {sys.argv[0]} [input folder] [output filename]\")\n+    else:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5NDUzMQ=="}, "originalCommit": {"oid": "4043d8a1d1aee6ea572b3976953b96ad7cf8f371"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4864, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}