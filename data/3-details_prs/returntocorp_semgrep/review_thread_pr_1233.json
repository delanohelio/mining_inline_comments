{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NDk1NDg4", "number": 1233, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0Njo0MVrOENXCwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0NzoyN1rOENXDkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDQ0NDgxOnYy", "diffSide": "RIGHT", "path": "semgrep-core/parsing/Parse_ruby_tree_sitter.ml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0Njo0MVrOGwADDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDozMzozMVrOGwE2_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4NTYxNQ==", "bodyText": "Might be worth noting that most of this can go in a language-agnostic library in the future.", "url": "https://github.com/returntocorp/semgrep/pull/1233#discussion_r452985615", "createdAt": "2020-07-10T17:46:41Z", "author": {"login": "nbrahms"}, "path": "semgrep-core/parsing/Parse_ruby_tree_sitter.ml", "diffHunk": "@@ -27,14 +27,66 @@ module G = AST_generic\n  * The resulting AST can then be converted to the generic AST by using\n  * pfff/lang_ruby/analyze/ruby_to_generic.ml\n  *)\n+(*****************************************************************************)\n+(* Globals *)\n+(*****************************************************************************)\n+(* not very multicore friendly *)\n+let global_file = ref \"\"\n+let global_conv = ref (Hashtbl.create 0)\n \n (*****************************************************************************)\n (* Helpers *)\n (*****************************************************************************)\n-let token2 (_tok : Tree_sitter_run.Token.t) =\n-  PI.fake_info \"XXX\"\n-let str (_tok : Tree_sitter_run.Token.t) =\n-  \"STRXXX\", PI.fake_info \"XXX\"\n+\n+(* mostly a copy of Parse_info.full_charpos_to_pos_large *)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7222137d6f21b8bc943e7fc3f985d623bb606737"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NDQ0Nw==", "bodyText": "yep, totally, I'll move it to a tree_sitter_utils.ml when I do Parse_java_tree_sitter.ml (or the typescript one).", "url": "https://github.com/returntocorp/semgrep/pull/1233#discussion_r453064447", "createdAt": "2020-07-10T20:33:31Z", "author": {"login": "aryx"}, "path": "semgrep-core/parsing/Parse_ruby_tree_sitter.ml", "diffHunk": "@@ -27,14 +27,66 @@ module G = AST_generic\n  * The resulting AST can then be converted to the generic AST by using\n  * pfff/lang_ruby/analyze/ruby_to_generic.ml\n  *)\n+(*****************************************************************************)\n+(* Globals *)\n+(*****************************************************************************)\n+(* not very multicore friendly *)\n+let global_file = ref \"\"\n+let global_conv = ref (Hashtbl.create 0)\n \n (*****************************************************************************)\n (* Helpers *)\n (*****************************************************************************)\n-let token2 (_tok : Tree_sitter_run.Token.t) =\n-  PI.fake_info \"XXX\"\n-let str (_tok : Tree_sitter_run.Token.t) =\n-  \"STRXXX\", PI.fake_info \"XXX\"\n+\n+(* mostly a copy of Parse_info.full_charpos_to_pos_large *)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4NTYxNQ=="}, "originalCommit": {"oid": "7222137d6f21b8bc943e7fc3f985d623bb606737"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDQ0Njg5OnYy", "diffSide": "RIGHT", "path": "semgrep-core/tests/python/concrete_syntax.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0NzoyN1rOGwAEcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDozNDo0MlrOGwE4xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4NTk2OQ==", "bodyText": "Why's this file changing?", "url": "https://github.com/returntocorp/semgrep/pull/1233#discussion_r452985969", "createdAt": "2020-07-10T17:47:27Z", "author": {"login": "nbrahms"}, "path": "semgrep-core/tests/python/concrete_syntax.py", "diffHunk": "@@ -1,11 +1,13 @@\n def foo():", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7222137d6f21b8bc943e7fc3f985d623bb606737"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NDkwMA==", "bodyText": "It's because to start the examples from ruby I copy-pasted a few one from python (which themselves were copy-pasted\nfrom examples for javascripts) and realized some python examples were not as powerful as they could be (the javascript examples were better for instance).", "url": "https://github.com/returntocorp/semgrep/pull/1233#discussion_r453064900", "createdAt": "2020-07-10T20:34:42Z", "author": {"login": "aryx"}, "path": "semgrep-core/tests/python/concrete_syntax.py", "diffHunk": "@@ -1,11 +1,13 @@\n def foo():", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4NTk2OQ=="}, "originalCommit": {"oid": "7222137d6f21b8bc943e7fc3f985d623bb606737"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4512, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}