{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NzM5NTY5", "number": 1207, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMzo1MTozOFrOEMSA6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMzo1MzoyN1rOEMSCZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzEzNTE0OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/target_manager.py", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMzo1MTozOFrOGuTbgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMTozODo1N1rOGuVHQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNjAxOQ==", "bodyText": "TargetManager should not need to know how to handle output. Probably better to have functions return relevant info and the caller can handle how it wants to deal with outputing said info.", "url": "https://github.com/returntocorp/semgrep/pull/1207#discussion_r451206019", "createdAt": "2020-07-07T23:51:38Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -62,26 +67,22 @@ def lang_to_exts(language: Language) -> List[FileExtension]:\n         raise _UnknownLanguageError(f\"Unsupported Language: {language}\")\n \n \n+@attr.s(auto_attribs=True)\n class TargetManager:\n-    def __init__(\n-        self,\n-        includes: List[str],\n-        excludes: List[str],\n-        targets: List[str],\n-        respect_git_ignore: bool,\n-    ) -> None:\n-        \"\"\"\n-            Handles all file include/exclude logic for semgrep\n+    \"\"\"\n+        Handles all file include/exclude logic for semgrep\n \n-            If respect_git_ignore is true then will only consider files that are\n-            tracked or (untracked but not ignored) by git\n-        \"\"\"\n-        self._targets = targets\n-        self._includes = includes\n-        self._excludes = excludes\n-        self._respect_git_ignore = respect_git_ignore\n+        If respect_git_ignore is true then will only consider files that are\n+        tracked or (untracked but not ignored) by git\n+    \"\"\"\n+\n+    targets: List[str]\n+    includes: List[str]\n+    excludes: List[str]\n+    respect_git_ignore: bool\n+    output_handler: OutputHandler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3c71caf42d49653dcd8e5198527c1cde487c085"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMDk1OQ==", "bodyText": "Can you elaborate on this a bit more? I understand the preference for not making output_handler a required argument, but don't really understand the alternative you are suggesting (how would you change the FilesNotFoundError?)", "url": "https://github.com/returntocorp/semgrep/pull/1207#discussion_r451210959", "createdAt": "2020-07-08T00:09:35Z", "author": {"login": "chmccreery"}, "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -62,26 +67,22 @@ def lang_to_exts(language: Language) -> List[FileExtension]:\n         raise _UnknownLanguageError(f\"Unsupported Language: {language}\")\n \n \n+@attr.s(auto_attribs=True)\n class TargetManager:\n-    def __init__(\n-        self,\n-        includes: List[str],\n-        excludes: List[str],\n-        targets: List[str],\n-        respect_git_ignore: bool,\n-    ) -> None:\n-        \"\"\"\n-            Handles all file include/exclude logic for semgrep\n+    \"\"\"\n+        Handles all file include/exclude logic for semgrep\n \n-            If respect_git_ignore is true then will only consider files that are\n-            tracked or (untracked but not ignored) by git\n-        \"\"\"\n-        self._targets = targets\n-        self._includes = includes\n-        self._excludes = excludes\n-        self._respect_git_ignore = respect_git_ignore\n+        If respect_git_ignore is true then will only consider files that are\n+        tracked or (untracked but not ignored) by git\n+    \"\"\"\n+\n+    targets: List[str]\n+    includes: List[str]\n+    excludes: List[str]\n+    respect_git_ignore: bool\n+    output_handler: OutputHandler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNjAxOQ=="}, "originalCommit": {"oid": "f3c71caf42d49653dcd8e5198527c1cde487c085"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxNTQ0Ng==", "bodyText": "@brendongo IMO we should really have a context object do this (a la Bento) or a reader monad or the like. But passing output_handler here is exactly how we separate knowing how to handle output from the TargetManager.", "url": "https://github.com/returntocorp/semgrep/pull/1207#discussion_r451215446", "createdAt": "2020-07-08T00:26:47Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -62,26 +67,22 @@ def lang_to_exts(language: Language) -> List[FileExtension]:\n         raise _UnknownLanguageError(f\"Unsupported Language: {language}\")\n \n \n+@attr.s(auto_attribs=True)\n class TargetManager:\n-    def __init__(\n-        self,\n-        includes: List[str],\n-        excludes: List[str],\n-        targets: List[str],\n-        respect_git_ignore: bool,\n-    ) -> None:\n-        \"\"\"\n-            Handles all file include/exclude logic for semgrep\n+    \"\"\"\n+        Handles all file include/exclude logic for semgrep\n \n-            If respect_git_ignore is true then will only consider files that are\n-            tracked or (untracked but not ignored) by git\n-        \"\"\"\n-        self._targets = targets\n-        self._includes = includes\n-        self._excludes = excludes\n-        self._respect_git_ignore = respect_git_ignore\n+        If respect_git_ignore is true then will only consider files that are\n+        tracked or (untracked but not ignored) by git\n+    \"\"\"\n+\n+    targets: List[str]\n+    includes: List[str]\n+    excludes: List[str]\n+    respect_git_ignore: bool\n+    output_handler: OutputHandler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNjAxOQ=="}, "originalCommit": {"oid": "f3c71caf42d49653dcd8e5198527c1cde487c085"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxNjI5NQ==", "bodyText": "I mean: TargetManager should concern itself with file includes excludes and not need to know how to use an output_handler object. Resolved targets can return a tuple with the second item being problematic files.", "url": "https://github.com/returntocorp/semgrep/pull/1207#discussion_r451216295", "createdAt": "2020-07-08T00:30:05Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -62,26 +67,22 @@ def lang_to_exts(language: Language) -> List[FileExtension]:\n         raise _UnknownLanguageError(f\"Unsupported Language: {language}\")\n \n \n+@attr.s(auto_attribs=True)\n class TargetManager:\n-    def __init__(\n-        self,\n-        includes: List[str],\n-        excludes: List[str],\n-        targets: List[str],\n-        respect_git_ignore: bool,\n-    ) -> None:\n-        \"\"\"\n-            Handles all file include/exclude logic for semgrep\n+    \"\"\"\n+        Handles all file include/exclude logic for semgrep\n \n-            If respect_git_ignore is true then will only consider files that are\n-            tracked or (untracked but not ignored) by git\n-        \"\"\"\n-        self._targets = targets\n-        self._includes = includes\n-        self._excludes = excludes\n-        self._respect_git_ignore = respect_git_ignore\n+        If respect_git_ignore is true then will only consider files that are\n+        tracked or (untracked but not ignored) by git\n+    \"\"\"\n+\n+    targets: List[str]\n+    includes: List[str]\n+    excludes: List[str]\n+    respect_git_ignore: bool\n+    output_handler: OutputHandler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNjAxOQ=="}, "originalCommit": {"oid": "f3c71caf42d49653dcd8e5198527c1cde487c085"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxNzQ1OA==", "bodyText": "TargetManager should not need to know that any errors are \"handled\" or that they are even errors to begin with. The TargetManager just knows that of the files you handed it, these happened to not exist and it lets you know that. It's up to the caller to deal with this information.", "url": "https://github.com/returntocorp/semgrep/pull/1207#discussion_r451217458", "createdAt": "2020-07-08T00:34:59Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -62,26 +67,22 @@ def lang_to_exts(language: Language) -> List[FileExtension]:\n         raise _UnknownLanguageError(f\"Unsupported Language: {language}\")\n \n \n+@attr.s(auto_attribs=True)\n class TargetManager:\n-    def __init__(\n-        self,\n-        includes: List[str],\n-        excludes: List[str],\n-        targets: List[str],\n-        respect_git_ignore: bool,\n-    ) -> None:\n-        \"\"\"\n-            Handles all file include/exclude logic for semgrep\n+    \"\"\"\n+        Handles all file include/exclude logic for semgrep\n \n-            If respect_git_ignore is true then will only consider files that are\n-            tracked or (untracked but not ignored) by git\n-        \"\"\"\n-        self._targets = targets\n-        self._includes = includes\n-        self._excludes = excludes\n-        self._respect_git_ignore = respect_git_ignore\n+        If respect_git_ignore is true then will only consider files that are\n+        tracked or (untracked but not ignored) by git\n+    \"\"\"\n+\n+    targets: List[str]\n+    includes: List[str]\n+    excludes: List[str]\n+    respect_git_ignore: bool\n+    output_handler: OutputHandler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNjAxOQ=="}, "originalCommit": {"oid": "f3c71caf42d49653dcd8e5198527c1cde487c085"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNTI1MA==", "bodyText": "Thinking about this more and the list of files that don't exist is unrelated to the language so might be better placed in the constructor instead of in this code path. Seems like a significant endeavor would be supportive of getting this PR in as is with injection implementation and revisiting that and constructor in a follow up.", "url": "https://github.com/returntocorp/semgrep/pull/1207#discussion_r451225250", "createdAt": "2020-07-08T01:05:42Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -62,26 +67,22 @@ def lang_to_exts(language: Language) -> List[FileExtension]:\n         raise _UnknownLanguageError(f\"Unsupported Language: {language}\")\n \n \n+@attr.s(auto_attribs=True)\n class TargetManager:\n-    def __init__(\n-        self,\n-        includes: List[str],\n-        excludes: List[str],\n-        targets: List[str],\n-        respect_git_ignore: bool,\n-    ) -> None:\n-        \"\"\"\n-            Handles all file include/exclude logic for semgrep\n+    \"\"\"\n+        Handles all file include/exclude logic for semgrep\n \n-            If respect_git_ignore is true then will only consider files that are\n-            tracked or (untracked but not ignored) by git\n-        \"\"\"\n-        self._targets = targets\n-        self._includes = includes\n-        self._excludes = excludes\n-        self._respect_git_ignore = respect_git_ignore\n+        If respect_git_ignore is true then will only consider files that are\n+        tracked or (untracked but not ignored) by git\n+    \"\"\"\n+\n+    targets: List[str]\n+    includes: List[str]\n+    excludes: List[str]\n+    respect_git_ignore: bool\n+    output_handler: OutputHandler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNjAxOQ=="}, "originalCommit": {"oid": "f3c71caf42d49653dcd8e5198527c1cde487c085"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNTUyOA==", "bodyText": "you might want to think about the edge cases of a rule with multiple languages calling get_files multiple times though", "url": "https://github.com/returntocorp/semgrep/pull/1207#discussion_r451225528", "createdAt": "2020-07-08T01:06:41Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -62,26 +67,22 @@ def lang_to_exts(language: Language) -> List[FileExtension]:\n         raise _UnknownLanguageError(f\"Unsupported Language: {language}\")\n \n \n+@attr.s(auto_attribs=True)\n class TargetManager:\n-    def __init__(\n-        self,\n-        includes: List[str],\n-        excludes: List[str],\n-        targets: List[str],\n-        respect_git_ignore: bool,\n-    ) -> None:\n-        \"\"\"\n-            Handles all file include/exclude logic for semgrep\n+    \"\"\"\n+        Handles all file include/exclude logic for semgrep\n \n-            If respect_git_ignore is true then will only consider files that are\n-            tracked or (untracked but not ignored) by git\n-        \"\"\"\n-        self._targets = targets\n-        self._includes = includes\n-        self._excludes = excludes\n-        self._respect_git_ignore = respect_git_ignore\n+        If respect_git_ignore is true then will only consider files that are\n+        tracked or (untracked but not ignored) by git\n+    \"\"\"\n+\n+    targets: List[str]\n+    includes: List[str]\n+    excludes: List[str]\n+    respect_git_ignore: bool\n+    output_handler: OutputHandler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNjAxOQ=="}, "originalCommit": {"oid": "f3c71caf42d49653dcd8e5198527c1cde487c085"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzMzYwMg==", "bodyText": "Good thought! We just tested this case and it seems to print out the right thing (only once)", "url": "https://github.com/returntocorp/semgrep/pull/1207#discussion_r451233602", "createdAt": "2020-07-08T01:38:57Z", "author": {"login": "chmccreery"}, "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -62,26 +67,22 @@ def lang_to_exts(language: Language) -> List[FileExtension]:\n         raise _UnknownLanguageError(f\"Unsupported Language: {language}\")\n \n \n+@attr.s(auto_attribs=True)\n class TargetManager:\n-    def __init__(\n-        self,\n-        includes: List[str],\n-        excludes: List[str],\n-        targets: List[str],\n-        respect_git_ignore: bool,\n-    ) -> None:\n-        \"\"\"\n-            Handles all file include/exclude logic for semgrep\n+    \"\"\"\n+        Handles all file include/exclude logic for semgrep\n \n-            If respect_git_ignore is true then will only consider files that are\n-            tracked or (untracked but not ignored) by git\n-        \"\"\"\n-        self._targets = targets\n-        self._includes = includes\n-        self._excludes = excludes\n-        self._respect_git_ignore = respect_git_ignore\n+        If respect_git_ignore is true then will only consider files that are\n+        tracked or (untracked but not ignored) by git\n+    \"\"\"\n+\n+    targets: List[str]\n+    includes: List[str]\n+    excludes: List[str]\n+    respect_git_ignore: bool\n+    output_handler: OutputHandler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNjAxOQ=="}, "originalCommit": {"oid": "f3c71caf42d49653dcd8e5198527c1cde487c085"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzEzODkyOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/target_manager.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMzo1MzoyN1rOGuTdqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMDo1MTo0MVrOGuUY9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNjU2OA==", "bodyText": "You might need to handle symlinked files as well?", "url": "https://github.com/returntocorp/semgrep/pull/1207#discussion_r451206568", "createdAt": "2020-07-07T23:53:27Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -237,23 +238,31 @@ def filtered_files(self, lang: Language) -> Set[Path]:\n         if lang in self._filtered_targets:\n             return self._filtered_targets[lang]\n \n-        targets = self.resolve_targets(self._targets)\n-        explicit_files, directories = partition_set(lambda p: not p.is_dir(), targets)\n+        targets = self.resolve_targets(self.targets)\n+\n+        files, directories = partition_set(lambda p: not p.is_dir(), targets)\n+\n+        # Error on non-existent files\n+        explicit_files, nonexistent_files = partition_set(lambda p: p.is_file(), files)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3c71caf42d49653dcd8e5198527c1cde487c085"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMjE0Mw==", "bodyText": "It looks like is_file() should cover regular files and symlinks (and I just tested with symlinks and got the behavior I expected- but maybe that is not the desired behavior): https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_file\nOr do you mean that symlinked files should be handled differently instead of lumped in with regular files?", "url": "https://github.com/returntocorp/semgrep/pull/1207#discussion_r451212143", "createdAt": "2020-07-08T00:14:07Z", "author": {"login": "chmccreery"}, "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -237,23 +238,31 @@ def filtered_files(self, lang: Language) -> Set[Path]:\n         if lang in self._filtered_targets:\n             return self._filtered_targets[lang]\n \n-        targets = self.resolve_targets(self._targets)\n-        explicit_files, directories = partition_set(lambda p: not p.is_dir(), targets)\n+        targets = self.resolve_targets(self.targets)\n+\n+        files, directories = partition_set(lambda p: not p.is_dir(), targets)\n+\n+        # Error on non-existent files\n+        explicit_files, nonexistent_files = partition_set(lambda p: p.is_file(), files)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNjU2OA=="}, "originalCommit": {"oid": "f3c71caf42d49653dcd8e5198527c1cde487c085"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxNjY1MA==", "bodyText": "Oh hmm so it does. Not sure why tests are failing then", "url": "https://github.com/returntocorp/semgrep/pull/1207#discussion_r451216650", "createdAt": "2020-07-08T00:31:32Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -237,23 +238,31 @@ def filtered_files(self, lang: Language) -> Set[Path]:\n         if lang in self._filtered_targets:\n             return self._filtered_targets[lang]\n \n-        targets = self.resolve_targets(self._targets)\n-        explicit_files, directories = partition_set(lambda p: not p.is_dir(), targets)\n+        targets = self.resolve_targets(self.targets)\n+\n+        files, directories = partition_set(lambda p: not p.is_dir(), targets)\n+\n+        # Error on non-existent files\n+        explicit_files, nonexistent_files = partition_set(lambda p: p.is_file(), files)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNjU2OA=="}, "originalCommit": {"oid": "f3c71caf42d49653dcd8e5198527c1cde487c085"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyMTc1MQ==", "bodyText": "At least one of them is because we added the parameter to TargetManager but the test file still thinks it only takes 4 arguments... I'm working on it", "url": "https://github.com/returntocorp/semgrep/pull/1207#discussion_r451221751", "createdAt": "2020-07-08T00:51:41Z", "author": {"login": "chmccreery"}, "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -237,23 +238,31 @@ def filtered_files(self, lang: Language) -> Set[Path]:\n         if lang in self._filtered_targets:\n             return self._filtered_targets[lang]\n \n-        targets = self.resolve_targets(self._targets)\n-        explicit_files, directories = partition_set(lambda p: not p.is_dir(), targets)\n+        targets = self.resolve_targets(self.targets)\n+\n+        files, directories = partition_set(lambda p: not p.is_dir(), targets)\n+\n+        # Error on non-existent files\n+        explicit_files, nonexistent_files = partition_set(lambda p: p.is_file(), files)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNjU2OA=="}, "originalCommit": {"oid": "f3c71caf42d49653dcd8e5198527c1cde487c085"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4509, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}