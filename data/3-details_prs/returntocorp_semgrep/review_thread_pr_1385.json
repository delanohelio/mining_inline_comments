{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTE5MDYw", "number": 1385, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDowNzoyN1rOETC5jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDowOTo0M1rOETC7TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDA1OTAwOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/core_exception.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDowNzoyN1rOG4j-cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDowNzoyN1rOG4j-cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2Mjg2Ng==", "bodyText": "lol", "url": "https://github.com/returntocorp/semgrep/pull/1385#discussion_r461962866", "createdAt": "2020-07-29T00:07:27Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/core_exception.py", "diffHunk": "@@ -56,27 +59,38 @@ def from_json(  # type: ignore\n         start_pos = Position(start[\"line\"], start[\"col\"])\n         end_pos = Position(end[\"line\"], end[\"col\"])\n \n+        # Semgrep-Core caches TimeoutErrors as FatalErrors\n+        # Hack to treat these as TimeoutErrors\n+        check_id = json_obj[\"check_id\"]\n+        if check_id == \"FatalError\" and \"Timeout\" in json_obj[\"extra\"][\"message\"]:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eccf8d8cd126f9a202edc4e947f42029cf5b814"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDA2MDI3OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/core_exception.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDowODowNFrOG4j_IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDozMjo0NVrOG4kbJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzA0MA==", "bodyText": "how do you feel about json_obj.get(\"check_id\", rule_id)?", "url": "https://github.com/returntocorp/semgrep/pull/1385#discussion_r461963040", "createdAt": "2020-07-29T00:08:04Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/core_exception.py", "diffHunk": "@@ -56,27 +59,38 @@ def from_json(  # type: ignore\n         start_pos = Position(start[\"line\"], start[\"col\"])\n         end_pos = Position(end[\"line\"], end[\"col\"])\n \n+        # Semgrep-Core caches TimeoutErrors as FatalErrors\n+        # Hack to treat these as TimeoutErrors\n+        check_id = json_obj[\"check_id\"]\n+        if check_id == \"FatalError\" and \"Timeout\" in json_obj[\"extra\"][\"message\"]:\n+            check_id = \"Timeout\"\n+\n         return cls(\n-            json_obj[\"check_id\"],\n+            check_id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eccf8d8cd126f9a202edc4e947f42029cf5b814"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDIxMg==", "bodyText": "This is needed for the above hack \ud83d\ude22", "url": "https://github.com/returntocorp/semgrep/pull/1385#discussion_r461970212", "createdAt": "2020-07-29T00:32:45Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/core_exception.py", "diffHunk": "@@ -56,27 +59,38 @@ def from_json(  # type: ignore\n         start_pos = Position(start[\"line\"], start[\"col\"])\n         end_pos = Position(end[\"line\"], end[\"col\"])\n \n+        # Semgrep-Core caches TimeoutErrors as FatalErrors\n+        # Hack to treat these as TimeoutErrors\n+        check_id = json_obj[\"check_id\"]\n+        if check_id == \"FatalError\" and \"Timeout\" in json_obj[\"extra\"][\"message\"]:\n+            check_id = \"Timeout\"\n+\n         return cls(\n-            json_obj[\"check_id\"],\n+            check_id,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzA0MA=="}, "originalCommit": {"oid": "7eccf8d8cd126f9a202edc4e947f42029cf5b814"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDA2MzQ4OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/core_runner.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDowOTo0M1rOG4kBCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMDozMjozMVrOG4ka0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzUyOQ==", "bodyText": "I assume hash is set up on SemgrepError to do the right thing here?", "url": "https://github.com/returntocorp/semgrep/pull/1385#discussion_r461963529", "createdAt": "2020-07-29T00:09:43Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -468,18 +473,8 @@ def dedup_output(outputs: List[RuleMatch]) -> List[RuleMatch]:\n     return list({uniq_id(r): r for r in outputs}.values())\n \n \n-def dedup_errors(errors: List[CoreException]) -> List[CoreException]:\n-    def uniq_error_id(error: CoreException) -> Tuple[str, str, int, int, int, int]:\n-        return (\n-            error._check_id,\n-            str(error._path),\n-            error._start.line,\n-            error._start.col,\n-            error._end.line,\n-            error._end.col,\n-        )\n-\n-    return list({uniq_error_id(r): r for r in errors}.values())\n+def dedup_errors(errors: List[SemgrepError]) -> List[SemgrepError]:\n+    return list(set(errors))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eccf8d8cd126f9a202edc4e947f42029cf5b814"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDEzMA==", "bodyText": "Yep. Attrs handles it correctly and there are tests verifying it", "url": "https://github.com/returntocorp/semgrep/pull/1385#discussion_r461970130", "createdAt": "2020-07-29T00:32:31Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -468,18 +473,8 @@ def dedup_output(outputs: List[RuleMatch]) -> List[RuleMatch]:\n     return list({uniq_id(r): r for r in outputs}.values())\n \n \n-def dedup_errors(errors: List[CoreException]) -> List[CoreException]:\n-    def uniq_error_id(error: CoreException) -> Tuple[str, str, int, int, int, int]:\n-        return (\n-            error._check_id,\n-            str(error._path),\n-            error._start.line,\n-            error._start.col,\n-            error._end.line,\n-            error._end.col,\n-        )\n-\n-    return list({uniq_error_id(r): r for r in errors}.values())\n+def dedup_errors(errors: List[SemgrepError]) -> List[SemgrepError]:\n+    return list(set(errors))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzUyOQ=="}, "originalCommit": {"oid": "7eccf8d8cd126f9a202edc4e947f42029cf5b814"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4973, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}