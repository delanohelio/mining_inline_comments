{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3OTYwOTM0", "number": 916, "title": "Remove print_error_exit in favor of using exceptions", "bodyText": "More refactors before completing #777. This was briefly discussed here: #904 (comment)\nBasically, #777 is difficult because there are many ways we can have \"unsupported rules.\" The first two that come to mind are an unknown operator as a top-level operator and as a child operator. These are two different error cases in the codebase, and when we're sys.exit'ing all over the place it's difficult to gracefully handle these situations.\nIdeally we would have a YAML rule schema defined somewhere and each rule would be compared against that in a single location. This is compared to the current situation where we unpack the rule file across multiple locations in the codebase and error out in different ways as move along.\nAn added bonus here is we can now use a lot of these functions as a library function and it won't exit the process on us. This is especially useful for things like unit testing where we can assert a function raises SemgrepError instead of exiting.", "createdAt": "2020-06-04T16:42:08Z", "url": "https://github.com/returntocorp/semgrep/pull/916", "merged": true, "mergeCommit": {"oid": "c05d94d29e3b4d9f10ba2553a1968ad9b52ddfac"}, "closed": true, "closedAt": "2020-06-04T20:37:40Z", "author": {"login": "mschwager"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoA5-xgBqjM0MDc4MDMxMTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoDmkrAH2gAyNDI3OTYwOTM0OjY1OTQ2MjBmODdlOTJiOWE2NzY5YWU1OGRkZjY5YjliYmY0MDhmYTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4faf7f88104f423ab319e386c3ead31c5978cd49", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/4faf7f88104f423ab319e386c3ead31c5978cd49", "committedDate": "2020-06-04T16:32:35Z", "message": "Remove print_error_exit in favor of using exceptions"}, "afterCommit": {"oid": "e3c8173adbc9698274109dc1936c5033c2665bea", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/e3c8173adbc9698274109dc1936c5033c2665bea", "committedDate": "2020-06-04T16:46:05Z", "message": "Remove print_error_exit in favor of using exceptions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NzM1MDA5", "url": "https://github.com/returntocorp/semgrep/pull/916#pullrequestreview-424735009", "createdAt": "2020-06-04T18:47:10Z", "commit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo0NzoxMFrOGfTcWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo1MTo1MVrOGfTmSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NzU5NA==", "bodyText": "Including the cmd here will produce non-deterministic results in tests. This is because the command contains a temporary file path pointing to the rule file, which will change every run. We can either find some workaround, or just not include the cmd info. Personally I don't find it very useful.", "url": "https://github.com/returntocorp/semgrep/pull/916#discussion_r435477594", "createdAt": "2020-06-04T18:47:10Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -294,16 +297,13 @@ def _run_rules(\n                                     output_json\n                                 )\n                             else:\n-                                print_error(\n-                                    f\"unexpected non-json output while invoking semgrep core with {' '.join(cmd)} \\n {ex}\"\n+                                raise SemgrepError(\n+                                    f\"unexpected non-json output while invoking semgrep-core:\\n\\t{ex}\\n{PLEASE_FILE_ISSUE_TEXT}\"\n                                 )\n-                                print_error_exit(f\"\\n{PLEASE_FILE_ISSUE_TEXT}\")\n-                                raise ex  # let our general exception handler take care of this\n                         except Exception as e:\n-                            print_error(\n-                                f\"non-zero return code while invoking semgrep with:\\n\\t{' '.join(cmd)}\\n{ex} {e}\"\n+                            raise SemgrepError(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3ODQ4Nw==", "bodyText": "This was causing some tests to fail. print_error_exit was defaulting to FATAL_EXIT_CODE, while we were initially defaulting to 1. This should clean it up \ud83d\udc4d", "url": "https://github.com/returntocorp/semgrep/pull/916#discussion_r435478487", "createdAt": "2020-06-04T18:48:54Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -6,7 +16,7 @@ class SemgrepError(Exception):\n     are displayed to the user.\n     \"\"\"\n \n-    def __init__(self, *args: object, code: int = 1) -> None:\n+    def __init__(self, *args: object, code: int = FATAL_EXIT_CODE) -> None:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3ODc1OA==", "bodyText": "This doesn't make any sense :P", "url": "https://github.com/returntocorp/semgrep/pull/916#discussion_r435478758", "createdAt": "2020-06-04T18:49:24Z", "author": {"login": "mschwager"}, "path": "semgrep/tests/e2e/snapshots/test_rule_parser/test_rule_parser__failure__error_messages/bad1/error.txt", "diffHunk": "@@ -1,2 +1,2 @@\n-rules/syntax/bad1.yaml: inside rule id eqeq-is-bad, pattern fields can't look like this: only ['pattern-inside', 'pattern-not-inside', 'pattern-either', 'pattern-not', 'pattern', 'patterns', 'pattern-where-python', 'fix', 'equivalences', 'pattern-regex'] operators can have children, but found `['pattern-inside']` with children", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3OTI0Mg==", "bodyText": "Small cleanup here, this was something like and_inside, now it's pattern-inside.", "url": "https://github.com/returntocorp/semgrep/pull/916#discussion_r435479242", "createdAt": "2020-06-04T18:50:17Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/rule.py", "diffHunk": "@@ -55,7 +55,7 @@ def _parse_boolean_expression(\n                         )\n                     else:\n                         raise InvalidRuleSchemaError(\n-                            f\"operator {operator} must have children\"\n+                            f\"operator {boolean_operator} must have children\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3OTYzNA==", "bodyText": "Without sorting here we will get non-deterministic results in the tests.", "url": "https://github.com/returntocorp/semgrep/pull/916#discussion_r435479634", "createdAt": "2020-06-04T18:50:55Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/semgrep_main.py", "diffHunk": "@@ -46,12 +47,12 @@ def validate_single_rule(config_id: str, rule: Dict[str, Any]) -> Optional[Rule]\n     if not rule_keys.issubset(YAML_ALL_VALID_RULE_KEYS):\n         extra_keys = rule_keys - YAML_ALL_VALID_RULE_KEYS\n         print_error(\n-            f\"{config_id} has invalid rule key {extra_keys} at rule id {rule_id_err_msg}, can only have: {YAML_ALL_VALID_RULE_KEYS}\"\n+            f\"{config_id} has an invalid top-level rule key {extra_keys} at rule id {rule_id_err_msg}, can only have: {sorted(YAML_ALL_VALID_RULE_KEYS)}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4MDEzNw==", "bodyText": "It doesn't really make sense to raise SemgrepError here since we're in the tests.", "url": "https://github.com/returntocorp/semgrep/pull/916#discussion_r435480137", "createdAt": "2020-06-04T18:51:51Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/test.py", "diffHunk": "@@ -307,7 +306,7 @@ def main(\n def test_main(args: argparse.Namespace) -> None:\n     _test_compute_confusion_matrix()\n     if len(args.target) != 1:\n-        print_error_exit(\"only one target directory allowed for tests\")\n+        raise Exception(\"only one target directory allowed for tests\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0Nzc2MDI5", "url": "https://github.com/returntocorp/semgrep/pull/916#pullrequestreview-424776029", "createdAt": "2020-06-04T19:47:52Z", "commit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6fa36be2fd5c7e0e288421d49fd138eb7c250c2", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/b6fa36be2fd5c7e0e288421d49fd138eb7c250c2", "committedDate": "2020-06-04T19:50:15Z", "message": "Remove print_error_exit in favor of using exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c9d64507b51a2b1aaed1b6851273ae25a372a16", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/8c9d64507b51a2b1aaed1b6851273ae25a372a16", "committedDate": "2020-06-04T19:50:15Z", "message": "Move EXIT_CODEs to error.py and correct default error code from 1 -> 2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c117658bb16d341cd511911e8c315329272caef", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/5c117658bb16d341cd511911e8c315329272caef", "committedDate": "2020-06-04T18:45:00Z", "message": "Move EXIT_CODEs to error.py and correct default error code from 1 -> 2"}, "afterCommit": {"oid": "8c9d64507b51a2b1aaed1b6851273ae25a372a16", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/8c9d64507b51a2b1aaed1b6851273ae25a372a16", "committedDate": "2020-06-04T19:50:15Z", "message": "Move EXIT_CODEs to error.py and correct default error code from 1 -> 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6594620f87e92b9a6769ae58ddf69b9bbf408fa0", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/6594620f87e92b9a6769ae58ddf69b9bbf408fa0", "committedDate": "2020-06-04T19:54:54Z", "message": "Remove unused import"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1485, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}