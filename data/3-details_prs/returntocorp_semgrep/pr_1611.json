{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2Mzc5NTAx", "number": 1611, "title": "Parallelize --test functionality", "bodyText": "I manually compared the before/after output to confirm it was the same. Before/after:\nreal\t0m55.896s\nuser\t0m47.893s\nsys\t0m7.067s\n\nreal\t0m17.683s\nuser\t1m26.406s\nsys\t0m11.285s", "createdAt": "2020-08-31T15:43:47Z", "url": "https://github.com/returntocorp/semgrep/pull/1611", "merged": true, "mergeCommit": {"oid": "2a0daee61b7aa344096beb654ffc63e0a6897f25"}, "closed": true, "closedAt": "2020-08-31T20:33:35Z", "author": {"login": "mschwager"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEUsQBAH2gAyNDc2Mzc5NTAxOmJhNzJiZDdkNGU1MWUwOTNlNWM0MDYzZDNjMTAyZTZjYTViYTFiZGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEYjjKgH2gAyNDc2Mzc5NTAxOjQ1YjA2YThlMTc0OGYxMzc0NDYwMDhkNzM5MTcxY2E2MjRkNGM3ZWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb", "committedDate": "2020-08-31T15:39:22Z", "message": "Parallelize --test functionality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NzMyMzYw", "url": "https://github.com/returntocorp/semgrep/pull/1611#pullrequestreview-478732360", "createdAt": "2020-08-31T15:47:16Z", "commit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTo0NzoxNlrOHJ-W6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTo0NzoxNlrOHJ-W6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyMDkwNA==", "bodyText": "This is required because we cannot do a multiprocessing.Pool inside another Pool. We need to avoid the double Pool with --test using Pool and our rules in semgrep-rules using pattern-regex (uses Pool here). Since our tests only have one corresponding target file we can limit our multiprocessing use to > 1 target.", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480220904", "createdAt": "2020-08-31T15:47:16Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -426,9 +426,14 @@ def handle_regex_patterns(\n             ]\n         except re.error as err:\n             raise SemgrepError(f\"invalid regular expression specified: {err}\")\n-        re_fn = functools.partial(get_re_matches, patterns_re)\n-        with multiprocessing.Pool(self._jobs) as pool:\n-            matches = pool.map(re_fn, targets)\n+\n+        if len(targets) > 1:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NzYwNTUy", "url": "https://github.com/returntocorp/semgrep/pull/1611#pullrequestreview-478760552", "createdAt": "2020-08-31T16:25:54Z", "commit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoyNTo1NVrOHJ_vlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoyNTo1NVrOHJ_vlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MzYwNw==", "bodyText": "It looks like you're assuming that we never test with more than one file? IMO that's a bit fragile. Would it make more sense to set a TESTING global and check against that?", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480243607", "createdAt": "2020-08-31T16:25:55Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -426,9 +426,14 @@ def handle_regex_patterns(\n             ]\n         except re.error as err:\n             raise SemgrepError(f\"invalid regular expression specified: {err}\")\n-        re_fn = functools.partial(get_re_matches, patterns_re)\n-        with multiprocessing.Pool(self._jobs) as pool:\n-            matches = pool.map(re_fn, targets)\n+\n+        if len(targets) > 1:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NzYxNDYx", "url": "https://github.com/returntocorp/semgrep/pull/1611#pullrequestreview-478761461", "createdAt": "2020-08-31T16:27:08Z", "commit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoyNzowOVrOHJ_yKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoyNzowOVrOHJ_yKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NDI2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try:\n          \n          \n            \n                    output = invoke_semgrep(filename, *args, **kwargs)\n          \n          \n            \n                except Exception as error:\n          \n          \n            \n                    return (filename, error, {})\n          \n          \n            \n                else:\n          \n          \n            \n                    return (filename, None, output)\n          \n          \n            \n                try:\n          \n          \n            \n                    output = invoke_semgrep(filename, *args, **kwargs)\n          \n          \n            \n                    return (filename, None, output)\n          \n          \n            \n                except Exception as error:\n          \n          \n            \n                    return (filename, error, {})", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480244265", "createdAt": "2020-08-31T16:27:09Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/test.py", "diffHunk": "@@ -195,62 +198,75 @@ def confusion_matrix_to_string(confusion: List[int]) -> str:\n     return f\"TP: {tp}\\tTN: {tn}\\tFP: {fp}\\tFN: {fn}\"\n \n \n+def invoke_semgrep_multi(filename, *args, **kwargs):\n+    try:\n+        output = invoke_semgrep(filename, *args, **kwargs)\n+    except Exception as error:\n+        return (filename, error, {})\n+    else:\n+        return (filename, None, output)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45b06a8e1748f137446008d739171ca624d4c7ed", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/45b06a8e1748f137446008d739171ca624d4c7ed", "committedDate": "2020-08-31T20:09:29Z", "message": "Explicitly state why we're avoiding multiprocessing when testing"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1336, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}