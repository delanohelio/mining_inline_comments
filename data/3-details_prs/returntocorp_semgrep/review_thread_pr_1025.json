{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0OTIyMDM3", "number": 1025, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyMzo0MlrOEGDt7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyNzowMlrOEGDyxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzg3ODIzOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/autofix.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyMzo0MlrOGkn53Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTowNDo1NFrOGkpTxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NTcwOQ==", "bodyText": "Double raise", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441055709", "createdAt": "2020-06-16T18:23:42Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/autofix.py", "diffHunk": "@@ -45,8 +95,18 @@ def apply_fixes(rule_matches_by_rule: Dict[Rule, List[RuleMatch]]) -> None:\n     for _, rule_matches in rule_matches_by_rule.items():\n         for rule_match in rule_matches:\n             fix = rule_match.fix\n-            if fix:\n-                filepath = rule_match.path\n+            filepath = rule_match.path\n+            if fix and fix.startswith(\"s/\"):  # Regex-style fix\n+                try:\n+                    from_str, to_str = _parse_regex_fix(fix)\n+                    _regex_replace(rule_match, from_str, to_str)\n+                    modified_files.add(filepath)\n+                except Exception as e:\n+                    raise e", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bad4009445361b33055a9c74f9b75ed09051af78"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3ODcyNQ==", "bodyText": "Oh yeah, that was for debugging. Good catch", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441078725", "createdAt": "2020-06-16T19:04:54Z", "author": {"login": "minusworld"}, "path": "semgrep/semgrep/autofix.py", "diffHunk": "@@ -45,8 +95,18 @@ def apply_fixes(rule_matches_by_rule: Dict[Rule, List[RuleMatch]]) -> None:\n     for _, rule_matches in rule_matches_by_rule.items():\n         for rule_match in rule_matches:\n             fix = rule_match.fix\n-            if fix:\n-                filepath = rule_match.path\n+            filepath = rule_match.path\n+            if fix and fix.startswith(\"s/\"):  # Regex-style fix\n+                try:\n+                    from_str, to_str = _parse_regex_fix(fix)\n+                    _regex_replace(rule_match, from_str, to_str)\n+                    modified_files.add(filepath)\n+                except Exception as e:\n+                    raise e", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NTcwOQ=="}, "originalCommit": {"oid": "bad4009445361b33055a9c74f9b75ed09051af78"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzg4MDQ0OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/autofix.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyNDoxNlrOGkn7Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyNDoxNlrOGkn7Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NjA0Ng==", "bodyText": "Might be useful to print out fix string", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441056046", "createdAt": "2020-06-16T18:24:16Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/autofix.py", "diffHunk": "@@ -45,8 +95,18 @@ def apply_fixes(rule_matches_by_rule: Dict[Rule, List[RuleMatch]]) -> None:\n     for _, rule_matches in rule_matches_by_rule.items():\n         for rule_match in rule_matches:\n             fix = rule_match.fix\n-            if fix:\n-                filepath = rule_match.path\n+            filepath = rule_match.path\n+            if fix and fix.startswith(\"s/\"):  # Regex-style fix\n+                try:\n+                    from_str, to_str = _parse_regex_fix(fix)\n+                    _regex_replace(rule_match, from_str, to_str)\n+                    modified_files.add(filepath)\n+                except Exception as e:\n+                    raise e\n+                    raise SemgrepError(\n+                        f\"unable to use regex to modify file {filepath}: {e}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bad4009445361b33055a9c74f9b75ed09051af78"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzg4NjI4OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/autofix.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyNTo0OVrOGkn-1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDozNzoxMlrOGksQOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1Njk4MA==", "bodyText": "Add comment that it replaces the first instance of from_str to to_str", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441056980", "createdAt": "2020-06-16T18:25:49Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/autofix.py", "diffHunk": "@@ -35,6 +53,38 @@ def _modify_file(rule_match: RuleMatch, fix: str) -> None:\n     p.write_text(contents_after_fix_str)\n \n \n+def _parse_regex_fix(sed_string: str) -> Tuple[str, str]:\n+    \"\"\"\n+    Return the second and third elements of a sed-like string:\n+    E.g., s/one/two/g returns (one, two)\n+    \"\"\"\n+    splitstr = sed_string.split(\"/\")  # Do it this way to satisfy mypy\n+    return splitstr[1], splitstr[2]\n+\n+\n+def _regex_replace(rule_match: RuleMatch, from_str: str, to_str: str) -> None:\n+    \"\"\"\n+    Use a regular expression to autofix.\n+    Replaces from_str to to_str.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bad4009445361b33055a9c74f9b75ed09051af78"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MzU2OQ==", "bodyText": "Based on my read of the docs, it replaces all occurrences as is:  https://docs.python.org/3/library/re.html#re.sub\n>>> import re\n>>> replaceme = \"XaaaaXXaaXXXaaXaaaaaaXX\"\n>>> re.sub(\"X\", \"E\", replaceme)\n'EaaaaEEaaEEEaaEaaaaaaEE'\n>>> \nDo you have a preferred behavior? Is it more intuitive to replace everything or just the first occurrence?\n(I basically just lifted the sed syntax but I always use /g ... and it isn't really sed anyway so I'm not sure which is more familiar)", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441083569", "createdAt": "2020-06-16T19:13:53Z", "author": {"login": "minusworld"}, "path": "semgrep/semgrep/autofix.py", "diffHunk": "@@ -35,6 +53,38 @@ def _modify_file(rule_match: RuleMatch, fix: str) -> None:\n     p.write_text(contents_after_fix_str)\n \n \n+def _parse_regex_fix(sed_string: str) -> Tuple[str, str]:\n+    \"\"\"\n+    Return the second and third elements of a sed-like string:\n+    E.g., s/one/two/g returns (one, two)\n+    \"\"\"\n+    splitstr = sed_string.split(\"/\")  # Do it this way to satisfy mypy\n+    return splitstr[1], splitstr[2]\n+\n+\n+def _regex_replace(rule_match: RuleMatch, from_str: str, to_str: str) -> None:\n+    \"\"\"\n+    Use a regular expression to autofix.\n+    Replaces from_str to to_str.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1Njk4MA=="}, "originalCommit": {"oid": "bad4009445361b33055a9c74f9b75ed09051af78"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyMjQxOQ==", "bodyText": "Oh i must have misread the docs. Can you add comment that it replaces all occurrences. Alternatively you can use the prescence of /g to make it all behavior but default to one replacement if g isnt there?", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441122419", "createdAt": "2020-06-16T20:28:50Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/autofix.py", "diffHunk": "@@ -35,6 +53,38 @@ def _modify_file(rule_match: RuleMatch, fix: str) -> None:\n     p.write_text(contents_after_fix_str)\n \n \n+def _parse_regex_fix(sed_string: str) -> Tuple[str, str]:\n+    \"\"\"\n+    Return the second and third elements of a sed-like string:\n+    E.g., s/one/two/g returns (one, two)\n+    \"\"\"\n+    splitstr = sed_string.split(\"/\")  # Do it this way to satisfy mypy\n+    return splitstr[1], splitstr[2]\n+\n+\n+def _regex_replace(rule_match: RuleMatch, from_str: str, to_str: str) -> None:\n+    \"\"\"\n+    Use a regular expression to autofix.\n+    Replaces from_str to to_str.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1Njk4MA=="}, "originalCommit": {"oid": "bad4009445361b33055a9c74f9b75ed09051af78"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyNjk2OQ==", "bodyText": "Yup. I realized after this discussion that a better solution would be to just parse the /g or /N flag so I just added that in.", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441126969", "createdAt": "2020-06-16T20:37:12Z", "author": {"login": "minusworld"}, "path": "semgrep/semgrep/autofix.py", "diffHunk": "@@ -35,6 +53,38 @@ def _modify_file(rule_match: RuleMatch, fix: str) -> None:\n     p.write_text(contents_after_fix_str)\n \n \n+def _parse_regex_fix(sed_string: str) -> Tuple[str, str]:\n+    \"\"\"\n+    Return the second and third elements of a sed-like string:\n+    E.g., s/one/two/g returns (one, two)\n+    \"\"\"\n+    splitstr = sed_string.split(\"/\")  # Do it this way to satisfy mypy\n+    return splitstr[1], splitstr[2]\n+\n+\n+def _regex_replace(rule_match: RuleMatch, from_str: str, to_str: str) -> None:\n+    \"\"\"\n+    Use a regular expression to autofix.\n+    Replaces from_str to to_str.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1Njk4MA=="}, "originalCommit": {"oid": "bad4009445361b33055a9c74f9b75ed09051af78"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzg5MDYwOnYy", "diffSide": "RIGHT", "path": "semgrep/tests/e2e/rules/autofix/csv-writer.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyNzowMlrOGkoBfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOToxMDo0OFrOGkpggg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NzY2Mg==", "bodyText": "This probably doesn't play well if there are any close parenthesis in an argument to csv writer. The code will replace the first close parent encountered.", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441057662", "createdAt": "2020-06-16T18:27:02Z", "author": {"login": "brendongo"}, "path": "semgrep/tests/e2e/rules/autofix/csv-writer.yaml", "diffHunk": "@@ -0,0 +1,14 @@\n+rules:\n+- id: python.lang.security.unquoted-csv-writer.unquoted-csv-writer\n+  patterns:\n+  - pattern-not: csv.writer(..., quoting=csv.QUOTE_ALL, ...)\n+  - pattern: csv.writer(...)\n+  fix: s/\\)/, quoting=csv.QUOTE_ALL)/g", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bad4009445361b33055a9c74f9b75ed09051af78"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MTk4Ng==", "bodyText": "OK, yeah. So that means the proper 'fix' is making sure it's at the end of the line or something similar.\nI realize regexes aren't the ideal autofix solution, but it at least makes autofixes attainable for demo purposes -- or for the committed! \ud83d\ude1d", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441081986", "createdAt": "2020-06-16T19:10:48Z", "author": {"login": "minusworld"}, "path": "semgrep/tests/e2e/rules/autofix/csv-writer.yaml", "diffHunk": "@@ -0,0 +1,14 @@\n+rules:\n+- id: python.lang.security.unquoted-csv-writer.unquoted-csv-writer\n+  patterns:\n+  - pattern-not: csv.writer(..., quoting=csv.QUOTE_ALL, ...)\n+  - pattern: csv.writer(...)\n+  fix: s/\\)/, quoting=csv.QUOTE_ALL)/g", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NzY2Mg=="}, "originalCommit": {"oid": "bad4009445361b33055a9c74f9b75ed09051af78"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4596, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}