{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NzU4MzA4", "number": 579, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMToyMzoyOVrOD19kYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMToyMzoyOVrOD19kYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTA5ODU4OnYy", "diffSide": "RIGHT", "path": "docs/config/simple.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMToyMzoyOVrOGLpvTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToxNzozNlrOGMotiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3MTM3NA==", "bodyText": "Golang works too. Maybe say \"some languages\" to make it more generic? not all languages have constants", "url": "https://github.com/returntocorp/semgrep/pull/579#discussion_r414871374", "createdAt": "2020-04-24T21:23:29Z", "author": {"login": "ievans"}, "path": "docs/config/simple.md", "diffHunk": "@@ -1,208 +1,344 @@\n # Simple\n \n-## Example semgrep Patterns\n+This document describes `semgrep` pattern features and provides pattern examples.\n+\n+Contents:\n+\n+* [Pattern Features](#pattern-features)\n+  * [Expression Matching](#expression-matching)\n+  * [Metavariables](#metavariables)\n+  * [Ellipsis Operator](#ellipsis-operator)\n+    * [Function Calls](#function-calls)\n+    * [Method Calls](#method-calls)\n+    * [Function Definitions](#function-definitions)\n+    * [Class Definitions](#class-definitions)\n+    * [Strings](#strings)\n+\t* [Arrays](#arrays)\n+    * [Conditionals and Loops](#conditionals-and-loops)\n+  * [Equivalences](#equivalences)\n+    * [Imports](#imports)\n+    * [Constants](#constants)\n+* [Limitations](#limitations)\n+  * [Statement Types](#statement-types)\n+  * [Partial Statements](#partial-statements)\n+\n+## Pattern Features\n \n ### Expression Matching\n \n-```text\n-pattern: 1 + foo(42)\n+Expression matching searches code for the given pattern. This pattern can match\n+a full expression, or be part of a subexpression:\n \n-# CODE EXAMPLES\n+```text\n+pattern: 1 + func(42)\n+```\n \n-foobar(1 + foo(42)) + whatever()\n+```python\n+foo(1 + func(42)) + bar()\n ```\n \n ### Metavariables\n \n+Metavariables are used to track a value across a specific code scope. This\n+includes variables, functions, arguments, classes, object methods, imports,\n+exceptions, and more.\n+\n+This pattern will match the following pieces of code:\n+\n ```text\n pattern: $X + $Y\n+```\n \n-# CODE EXAMPLES\n-\n+```python\n foo() + bar()\n ```\n \n-**Matching Identifiers**\n+```python\n+current + total\n+```\n+\n+Patterns can also be used to match imports:\n \n ```text\n pattern: import $X\n+```\n \n-# CODE EXAMPLES\n-\n+```python\n import random\n ```\n \n-**Reusing Metavariables**\n+Re-using metavariables shows their true power. We can re-use a metavariable\n+to detect useless assignments:\n \n ```text\n-pattern: \ufffc$X == $X\n+pattern: |\n+  $X = $Y\n+  $X = $Z\n+```\n \n-# CODE EXAMPLES\n+*Note the YAML `|` operator allows for [multiline strings](https://yaml-multiline.info/).*\n \n-1+2 == 1+2\n+```python\n+initial_value = 10  # Oops, useless assignment\n+initial_value = get_initial_value()\n ```\n \n-### Function Calls\n+### Ellipsis Operator\n+\n+The ellipsis operator (`...`) abstracts away sequences. In other words, it\n+allows you to gloss over the details so you can focus on what's important.\n+\n+#### Function Calls\n+\n+The ellipsis operator can be used to search for specific function calls or\n+function calls with specific arguments. To search for all calls to a specific\n+function:\n \n ```text\n-pattern: foo(...)\n+pattern: insecure_function(...)\n+```\n \n-# CODE EXAMPLES\n+We can also search for calls with arguments after a match:\n \n-foo(1,2)\n+```text\n+pattern: func(1, ...)\n ```\n \n-The above will not match patterns like `obj.foo(1,2)` because the AST for a function differs from a method call internally.\n+```python\n+func(1, \"extra stuff\", False)\n+func(1)  # Matches no arguments as well\n+```\n \n-**With Arguments After a Match**\n+Or calls with arguments before a match:\n \n ```text\n-pattern: foo(1, ...)\n+pattern: func(..., 1)\n+```\n+\n+```python\n+func(\"extra stuff\", False, 1)\n+func(1)  # Matches no arguments as well\n+```\n+\n+Or calls where an argument appears anywhere:\n \n-# CODE EXAMPLES\n+```text\n+pattern: requests.get(..., verify=False, ...)\n+```\n \n-foo(1, \"extra stuff\", False)\n-foo(1) # matches no arguments as well\n+```python\n+requests.get(verify=False, url=URL)\n+requests.get(URL, verify=False, timeout=3)\n+requests.get(URL, verify=False)\n ```\n \n-**With Arguments Before a Match**\n+The keyword argument value can also be matched:\n \n ```text\n-pattern: foo(..., 1, ...)\n+pattern: $FUNC(..., $KEY=$VALUE, ...)\n+```\n \n-# CODE EXAMPLES\n+#### Method Calls\n \n-foo(1, 2)\n-foo(2, 1)\n-foo(2, 3, 1)\n+The ellipsis operator can be used to search for method calls on a specific\n+object type:\n+\n+```text\n+pattern: $OBJECT.extractall(...)\n ```\n \n-**Object with Method Call**\n+```python\n+tarball.extractall('/path/to/directory')  # Oops, potential arbitrary file overwrite\n+```\n+\n+#### Function Definitions\n+\n+The ellipsis operator can be used in function argument lists or in the function\n+body. To find function definitions with [mutable default arguments](https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments):\n \n ```text\n-pattern: $X.get(..., None)\n+pattern: |\n+  def $FUNC(..., $ARG={}, ...):\n+      ...\n+```\n \n-# CODE EXAMPLES\n+*Note the YAML `|` operator allows for [multiline strings](https://yaml-multiline.info/).*\n \n-json_data.get('success', None)\n+```python\n+def parse_data(parser, data={}):  # Oops, mutable default arguments\n+    pass\n ```\n \n-**Keyword Arguments in Any Order**\n+#### Class Definitions\n+\n+The ellipsis operator can be used in class definitions. To find classes that\n+inherit from a certain parent:\n \n ```text\n-pattern: foo(kwd1=$X, err=$Y)\n+pattern: |\n+  class $CLASS(InsecureBaseClass):\n+      ...\n+```\n \n-# CODE EXAMPLES (keyword arguments in arbitrary order)\n+*Note the YAML `|` operator allows for [multiline strings](https://yaml-multiline.info/).*\n \n-foo(err=False, kwd1=True)\n+```python\n+class DataRetriever(InsecureBaseClass):\n+    def __init__(self):\n+        pass\n ```\n \n-### String Matching\n+#### Strings\n \n-**Using the \u2018...\u2019 Operator**\n+The ellipsis operator can be used to search for strings containing any data:\n \n ```text\n-pattern: foo(\"...\")\n-\n-# CODE EXAMPLES\n+pattern: crypto.set_secret_key(\"...\")\n+```\n \n-foo(\"this is a specific string\")\n+```python\n+crypto.set_secret_key(\"HARDCODED SECRET\")\n ```\n \n-**Using** [**OCaml regular expression**](https://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html) **Patterns**\n+[OCaml regular expressions](https://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html)\n+can also be used to search for specific strings:\n \n ```text\n-pattern: foo(\"=~/.*a.*/\")\n+pattern: requests.get(\"=~/.*dev\\.corp\\.com.*/\")\n+```\n+\n+```python\n+requests.get(\"api.dev.corp.com\")  # Oops, development API left in\n+```\n+\n+#### Arrays\n \n-# CODE EXAMPLES\n+The ellipsis operator can be used to match literal arrays:\n \n-foo(\"this has an a\")\n+```text\n+pattern: user_list = [..., 10]\n+```\n+\n+```python\n+user_list = [8, 9, 10]\n ```\n \n-### Conditionals\n+#### Conditionals and Loops\n+\n+The ellipsis operator can be used inside conditionals or loops:\n \n ```text\n pattern: |\n-    if $X:\n-        $Y\n+  if $CONDITION:\n+      ...\n+```\n \n-# CODE EXAMPLES\n+*Note the YAML `|` operator allows for [multiline strings](https://yaml-multiline.info/).*\n \n-if __name__ == \"__main__\":\n-    print('hello world')\n+```python\n+if can_make_request:\n+    check_status()\n+    make_request()\n+    return\n ```\n \n+A metavariable can also be used to match a conditional or loop body if the\n+body statement information will be re-used later:\n+\n ```text\n pattern: |\n-    if $X:\n-        ...\n-\n-# CODE EXAMPLES\n+  if $CONDITION:\n+      $BODY\n+```\n \n-if __name__ == \"__main__\":\n-    print('hello world')\n-    foo()\n-    bar()\n+```python\n+if can_make_request:\n+    single_request_statement()\n ```\n \n-Note you can\u2019t match a half statement; both of the examples above must specify the contents of the condition\u2019s body \\(e.g. `$Y` and `...`\\), otherwise they are not valid AST elements.\n+**Note you can\u2019t match a half statement; both of the examples above must\n+specify the contents of the condition's body (e.g. `$BODY` or `...`),\n+otherwise they are not valid patterns.**\n+\n+### Equivalences\n+\n+`semgrep` will handle certain types of equivalent code.\n \n-### In a statement context, a Metavariable can also match any statement\n+#### Imports\n+\n+Equivalent imports using aliasing or submodules will be matched.\n \n ```text\n-pattern: |\n-    if $X:\n-        $Y\n+pattern: subprocess.Popen(...)\n+```\n \n-# CODE EXAMPLES\n-if 1:\n-  foo()\n+```python\n+import subprocess.Popen as sub_popen\n+sub_popen('ls')\n+```\n \n-if 2:\n-  return 1\n+```text\n+pattern: foo.bar.baz.qux(...)\n+```\n \n-if 3:     # matches a \u201cblock\u201d (a single statement containing multiple statements)\n-  foo()\n-  bar()\n+```python\n+from foo.bar import baz\n+baz.qux()\n ```\n \n-Because in Python there is usually no terminator \\(e.g., `;`\\), there is an ambiguity about `$Y` in the above, which could match a statement and also an expression that is then matched later.\n+#### Constants\n \n-### Match on import types\n+JavaScript code will match propagated constants:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a633e3dc072233852cf3c8893d553918d6bf9bf6"}, "originalPosition": 368}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwMzExMw==", "bodyText": "Good call, I'll add a Golang example too", "url": "https://github.com/returntocorp/semgrep/pull/579#discussion_r415903113", "createdAt": "2020-04-27T15:17:36Z", "author": {"login": "mschwager"}, "path": "docs/config/simple.md", "diffHunk": "@@ -1,208 +1,344 @@\n # Simple\n \n-## Example semgrep Patterns\n+This document describes `semgrep` pattern features and provides pattern examples.\n+\n+Contents:\n+\n+* [Pattern Features](#pattern-features)\n+  * [Expression Matching](#expression-matching)\n+  * [Metavariables](#metavariables)\n+  * [Ellipsis Operator](#ellipsis-operator)\n+    * [Function Calls](#function-calls)\n+    * [Method Calls](#method-calls)\n+    * [Function Definitions](#function-definitions)\n+    * [Class Definitions](#class-definitions)\n+    * [Strings](#strings)\n+\t* [Arrays](#arrays)\n+    * [Conditionals and Loops](#conditionals-and-loops)\n+  * [Equivalences](#equivalences)\n+    * [Imports](#imports)\n+    * [Constants](#constants)\n+* [Limitations](#limitations)\n+  * [Statement Types](#statement-types)\n+  * [Partial Statements](#partial-statements)\n+\n+## Pattern Features\n \n ### Expression Matching\n \n-```text\n-pattern: 1 + foo(42)\n+Expression matching searches code for the given pattern. This pattern can match\n+a full expression, or be part of a subexpression:\n \n-# CODE EXAMPLES\n+```text\n+pattern: 1 + func(42)\n+```\n \n-foobar(1 + foo(42)) + whatever()\n+```python\n+foo(1 + func(42)) + bar()\n ```\n \n ### Metavariables\n \n+Metavariables are used to track a value across a specific code scope. This\n+includes variables, functions, arguments, classes, object methods, imports,\n+exceptions, and more.\n+\n+This pattern will match the following pieces of code:\n+\n ```text\n pattern: $X + $Y\n+```\n \n-# CODE EXAMPLES\n-\n+```python\n foo() + bar()\n ```\n \n-**Matching Identifiers**\n+```python\n+current + total\n+```\n+\n+Patterns can also be used to match imports:\n \n ```text\n pattern: import $X\n+```\n \n-# CODE EXAMPLES\n-\n+```python\n import random\n ```\n \n-**Reusing Metavariables**\n+Re-using metavariables shows their true power. We can re-use a metavariable\n+to detect useless assignments:\n \n ```text\n-pattern: \ufffc$X == $X\n+pattern: |\n+  $X = $Y\n+  $X = $Z\n+```\n \n-# CODE EXAMPLES\n+*Note the YAML `|` operator allows for [multiline strings](https://yaml-multiline.info/).*\n \n-1+2 == 1+2\n+```python\n+initial_value = 10  # Oops, useless assignment\n+initial_value = get_initial_value()\n ```\n \n-### Function Calls\n+### Ellipsis Operator\n+\n+The ellipsis operator (`...`) abstracts away sequences. In other words, it\n+allows you to gloss over the details so you can focus on what's important.\n+\n+#### Function Calls\n+\n+The ellipsis operator can be used to search for specific function calls or\n+function calls with specific arguments. To search for all calls to a specific\n+function:\n \n ```text\n-pattern: foo(...)\n+pattern: insecure_function(...)\n+```\n \n-# CODE EXAMPLES\n+We can also search for calls with arguments after a match:\n \n-foo(1,2)\n+```text\n+pattern: func(1, ...)\n ```\n \n-The above will not match patterns like `obj.foo(1,2)` because the AST for a function differs from a method call internally.\n+```python\n+func(1, \"extra stuff\", False)\n+func(1)  # Matches no arguments as well\n+```\n \n-**With Arguments After a Match**\n+Or calls with arguments before a match:\n \n ```text\n-pattern: foo(1, ...)\n+pattern: func(..., 1)\n+```\n+\n+```python\n+func(\"extra stuff\", False, 1)\n+func(1)  # Matches no arguments as well\n+```\n+\n+Or calls where an argument appears anywhere:\n \n-# CODE EXAMPLES\n+```text\n+pattern: requests.get(..., verify=False, ...)\n+```\n \n-foo(1, \"extra stuff\", False)\n-foo(1) # matches no arguments as well\n+```python\n+requests.get(verify=False, url=URL)\n+requests.get(URL, verify=False, timeout=3)\n+requests.get(URL, verify=False)\n ```\n \n-**With Arguments Before a Match**\n+The keyword argument value can also be matched:\n \n ```text\n-pattern: foo(..., 1, ...)\n+pattern: $FUNC(..., $KEY=$VALUE, ...)\n+```\n \n-# CODE EXAMPLES\n+#### Method Calls\n \n-foo(1, 2)\n-foo(2, 1)\n-foo(2, 3, 1)\n+The ellipsis operator can be used to search for method calls on a specific\n+object type:\n+\n+```text\n+pattern: $OBJECT.extractall(...)\n ```\n \n-**Object with Method Call**\n+```python\n+tarball.extractall('/path/to/directory')  # Oops, potential arbitrary file overwrite\n+```\n+\n+#### Function Definitions\n+\n+The ellipsis operator can be used in function argument lists or in the function\n+body. To find function definitions with [mutable default arguments](https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments):\n \n ```text\n-pattern: $X.get(..., None)\n+pattern: |\n+  def $FUNC(..., $ARG={}, ...):\n+      ...\n+```\n \n-# CODE EXAMPLES\n+*Note the YAML `|` operator allows for [multiline strings](https://yaml-multiline.info/).*\n \n-json_data.get('success', None)\n+```python\n+def parse_data(parser, data={}):  # Oops, mutable default arguments\n+    pass\n ```\n \n-**Keyword Arguments in Any Order**\n+#### Class Definitions\n+\n+The ellipsis operator can be used in class definitions. To find classes that\n+inherit from a certain parent:\n \n ```text\n-pattern: foo(kwd1=$X, err=$Y)\n+pattern: |\n+  class $CLASS(InsecureBaseClass):\n+      ...\n+```\n \n-# CODE EXAMPLES (keyword arguments in arbitrary order)\n+*Note the YAML `|` operator allows for [multiline strings](https://yaml-multiline.info/).*\n \n-foo(err=False, kwd1=True)\n+```python\n+class DataRetriever(InsecureBaseClass):\n+    def __init__(self):\n+        pass\n ```\n \n-### String Matching\n+#### Strings\n \n-**Using the \u2018...\u2019 Operator**\n+The ellipsis operator can be used to search for strings containing any data:\n \n ```text\n-pattern: foo(\"...\")\n-\n-# CODE EXAMPLES\n+pattern: crypto.set_secret_key(\"...\")\n+```\n \n-foo(\"this is a specific string\")\n+```python\n+crypto.set_secret_key(\"HARDCODED SECRET\")\n ```\n \n-**Using** [**OCaml regular expression**](https://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html) **Patterns**\n+[OCaml regular expressions](https://caml.inria.fr/pub/docs/manual-ocaml/libref/Str.html)\n+can also be used to search for specific strings:\n \n ```text\n-pattern: foo(\"=~/.*a.*/\")\n+pattern: requests.get(\"=~/.*dev\\.corp\\.com.*/\")\n+```\n+\n+```python\n+requests.get(\"api.dev.corp.com\")  # Oops, development API left in\n+```\n+\n+#### Arrays\n \n-# CODE EXAMPLES\n+The ellipsis operator can be used to match literal arrays:\n \n-foo(\"this has an a\")\n+```text\n+pattern: user_list = [..., 10]\n+```\n+\n+```python\n+user_list = [8, 9, 10]\n ```\n \n-### Conditionals\n+#### Conditionals and Loops\n+\n+The ellipsis operator can be used inside conditionals or loops:\n \n ```text\n pattern: |\n-    if $X:\n-        $Y\n+  if $CONDITION:\n+      ...\n+```\n \n-# CODE EXAMPLES\n+*Note the YAML `|` operator allows for [multiline strings](https://yaml-multiline.info/).*\n \n-if __name__ == \"__main__\":\n-    print('hello world')\n+```python\n+if can_make_request:\n+    check_status()\n+    make_request()\n+    return\n ```\n \n+A metavariable can also be used to match a conditional or loop body if the\n+body statement information will be re-used later:\n+\n ```text\n pattern: |\n-    if $X:\n-        ...\n-\n-# CODE EXAMPLES\n+  if $CONDITION:\n+      $BODY\n+```\n \n-if __name__ == \"__main__\":\n-    print('hello world')\n-    foo()\n-    bar()\n+```python\n+if can_make_request:\n+    single_request_statement()\n ```\n \n-Note you can\u2019t match a half statement; both of the examples above must specify the contents of the condition\u2019s body \\(e.g. `$Y` and `...`\\), otherwise they are not valid AST elements.\n+**Note you can\u2019t match a half statement; both of the examples above must\n+specify the contents of the condition's body (e.g. `$BODY` or `...`),\n+otherwise they are not valid patterns.**\n+\n+### Equivalences\n+\n+`semgrep` will handle certain types of equivalent code.\n \n-### In a statement context, a Metavariable can also match any statement\n+#### Imports\n+\n+Equivalent imports using aliasing or submodules will be matched.\n \n ```text\n-pattern: |\n-    if $X:\n-        $Y\n+pattern: subprocess.Popen(...)\n+```\n \n-# CODE EXAMPLES\n-if 1:\n-  foo()\n+```python\n+import subprocess.Popen as sub_popen\n+sub_popen('ls')\n+```\n \n-if 2:\n-  return 1\n+```text\n+pattern: foo.bar.baz.qux(...)\n+```\n \n-if 3:     # matches a \u201cblock\u201d (a single statement containing multiple statements)\n-  foo()\n-  bar()\n+```python\n+from foo.bar import baz\n+baz.qux()\n ```\n \n-Because in Python there is usually no terminator \\(e.g., `;`\\), there is an ambiguity about `$Y` in the above, which could match a statement and also an expression that is then matched later.\n+#### Constants\n \n-### Match on import types\n+JavaScript code will match propagated constants:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3MTM3NA=="}, "originalCommit": {"oid": "a633e3dc072233852cf3c8893d553918d6bf9bf6"}, "originalPosition": 368}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4763, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}