{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNTk5MDk1", "number": 2088, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToyNTozOFrOE6_7kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToyNjozN1rOE6_83A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzAwMzA0OnYy", "diffSide": "RIGHT", "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToyNTozOFrOH2Y4FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzowNDo1OVrOH2or8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MjcyNA==", "bodyText": "We could add an operator for that maybe. It's actually used also in Python (but right now I use\nOE_In, and OE_NotIn, but really we could make In and NotIn operators like Plus/... in AST_generic.operator.", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r526792724", "createdAt": "2020-11-19T11:25:38Z", "author": {"login": "aryx"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -516,28 +517,29 @@ and binary_expression (env : env) (x : CST.binary_expression) =\n         | `Is_op x -> is_operator env x\n         )\n       in\n+      let v2_id = Id ((\"\", v2), empty_id_info()) in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0dff8f3f7e73dbb5769c8c68a08d67ff9247133"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA1MTc2Mg==", "bodyText": "adding in AST_generic sounds great, we could probably also add in the Is/NotIs operators in there too \ud83e\udd14", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r527051762", "createdAt": "2020-11-19T17:04:59Z", "author": {"login": "colleend"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -516,28 +517,29 @@ and binary_expression (env : env) (x : CST.binary_expression) =\n         | `Is_op x -> is_operator env x\n         )\n       in\n+      let v2_id = Id ((\"\", v2), empty_id_info()) in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MjcyNA=="}, "originalCommit": {"oid": "f0dff8f3f7e73dbb5769c8c68a08d67ff9247133"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzAwNjM2OnYy", "diffSide": "RIGHT", "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToyNjozN1rOH2Y6PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjo0NTozNVrOH21EKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzI3Ng==", "bodyText": "better to keep the todo than using fake thing when you're not sure.", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r526793276", "createdAt": "2020-11-19T11:26:37Z", "author": {"login": "aryx"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1369,25 +1371,30 @@ and primary_constructor (env : env) ((v1, v2) : CST.primary_constructor) =\n and primary_expression (env : env) (x : CST.primary_expression) : expr =\n   (match x with\n   | `Paren_exp x -> parenthesized_expression env x\n-  | `Simple_id x -> \n+  | `Simple_id x ->\n       let id = simple_identifier env x in\n       Id(id, empty_id_info())\n   | `Lit_cst x -> L (literal_constant env x)\n   | `Str_lit x -> L (String (string_literal env x))\n   | `Call_ref (v1, v2, v3) ->\n       let v1 =\n         (match v1 with\n-        | Some x -> simple_identifier env x\n-        | None -> todo env ())\n+        | Some x ->\n+            let id = simple_identifier env x in\n+            Id(id, empty_id_info())\n+        | None ->\n+            let fake_id = (\"None\", fake \"None\") in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0dff8f3f7e73dbb5769c8c68a08d67ff9247133"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA3NzExNg==", "bodyText": "yep, probably can add Is and Isnot; I have no idea what it is though. Is it a type check?\nmaybe we could convert it in an InstanceOf which is part of the 'special' type.", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r527077116", "createdAt": "2020-11-19T17:41:49Z", "author": {"login": "aryx"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1369,25 +1371,30 @@ and primary_constructor (env : env) ((v1, v2) : CST.primary_constructor) =\n and primary_expression (env : env) (x : CST.primary_expression) : expr =\n   (match x with\n   | `Paren_exp x -> parenthesized_expression env x\n-  | `Simple_id x -> \n+  | `Simple_id x ->\n       let id = simple_identifier env x in\n       Id(id, empty_id_info())\n   | `Lit_cst x -> L (literal_constant env x)\n   | `Str_lit x -> L (String (string_literal env x))\n   | `Call_ref (v1, v2, v3) ->\n       let v1 =\n         (match v1 with\n-        | Some x -> simple_identifier env x\n-        | None -> todo env ())\n+        | Some x ->\n+            let id = simple_identifier env x in\n+            Id(id, empty_id_info())\n+        | None ->\n+            let fake_id = (\"None\", fake \"None\") in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzI3Ng=="}, "originalCommit": {"oid": "f0dff8f3f7e73dbb5769c8c68a08d67ff9247133"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNDA4Mw==", "bodyText": "yep, they're type checks -- if we convert is and isnot both to instanceof, would we need to differentiate between if it's isnot or is when doing matching?", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r527104083", "createdAt": "2020-11-19T18:23:51Z", "author": {"login": "colleend"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1369,25 +1371,30 @@ and primary_constructor (env : env) ((v1, v2) : CST.primary_constructor) =\n and primary_expression (env : env) (x : CST.primary_expression) : expr =\n   (match x with\n   | `Paren_exp x -> parenthesized_expression env x\n-  | `Simple_id x -> \n+  | `Simple_id x ->\n       let id = simple_identifier env x in\n       Id(id, empty_id_info())\n   | `Lit_cst x -> L (literal_constant env x)\n   | `Str_lit x -> L (String (string_literal env x))\n   | `Call_ref (v1, v2, v3) ->\n       let v1 =\n         (match v1 with\n-        | Some x -> simple_identifier env x\n-        | None -> todo env ())\n+        | Some x ->\n+            let id = simple_identifier env x in\n+            Id(id, empty_id_info())\n+        | None ->\n+            let fake_id = (\"None\", fake \"None\") in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzI3Ng=="}, "originalCommit": {"oid": "f0dff8f3f7e73dbb5769c8c68a08d67ff9247133"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1MjA4OA==", "bodyText": "In theory you can create an Ast with a regular Not before the InstanceOf. But problably simpler\nyou add Is and IsNot in AST_generic.operator.", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r527152088", "createdAt": "2020-11-19T19:43:21Z", "author": {"login": "aryx"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1369,25 +1371,30 @@ and primary_constructor (env : env) ((v1, v2) : CST.primary_constructor) =\n and primary_expression (env : env) (x : CST.primary_expression) : expr =\n   (match x with\n   | `Paren_exp x -> parenthesized_expression env x\n-  | `Simple_id x -> \n+  | `Simple_id x ->\n       let id = simple_identifier env x in\n       Id(id, empty_id_info())\n   | `Lit_cst x -> L (literal_constant env x)\n   | `Str_lit x -> L (String (string_literal env x))\n   | `Call_ref (v1, v2, v3) ->\n       let v1 =\n         (match v1 with\n-        | Some x -> simple_identifier env x\n-        | None -> todo env ())\n+        | Some x ->\n+            let id = simple_identifier env x in\n+            Id(id, empty_id_info())\n+        | None ->\n+            let fake_id = (\"None\", fake \"None\") in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzI3Ng=="}, "originalCommit": {"oid": "f0dff8f3f7e73dbb5769c8c68a08d67ff9247133"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1NDU3MA==", "bodyText": "got it! I'll add it to the AST_generic then \ud83d\ude04", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r527254570", "createdAt": "2020-11-19T22:45:35Z", "author": {"login": "colleend"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1369,25 +1371,30 @@ and primary_constructor (env : env) ((v1, v2) : CST.primary_constructor) =\n and primary_expression (env : env) (x : CST.primary_expression) : expr =\n   (match x with\n   | `Paren_exp x -> parenthesized_expression env x\n-  | `Simple_id x -> \n+  | `Simple_id x ->\n       let id = simple_identifier env x in\n       Id(id, empty_id_info())\n   | `Lit_cst x -> L (literal_constant env x)\n   | `Str_lit x -> L (String (string_literal env x))\n   | `Call_ref (v1, v2, v3) ->\n       let v1 =\n         (match v1 with\n-        | Some x -> simple_identifier env x\n-        | None -> todo env ())\n+        | Some x ->\n+            let id = simple_identifier env x in\n+            Id(id, empty_id_info())\n+        | None ->\n+            let fake_id = (\"None\", fake \"None\") in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzI3Ng=="}, "originalCommit": {"oid": "f0dff8f3f7e73dbb5769c8c68a08d67ff9247133"}, "originalPosition": 148}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4746, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}