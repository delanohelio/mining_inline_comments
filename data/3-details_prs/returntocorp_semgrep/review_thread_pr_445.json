{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjM4OTA5", "number": 445, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTowMTo1MVrODw--1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzoyMDowMlrODxBeLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjkwMTMzOnYy", "diffSide": "RIGHT", "path": "sgrep/bin/main_sgrep.ml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTowMTo1MVrOGEQEAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzoxNjoxMFrOGES9YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExMDY1Ng==", "bodyText": "cc @aryx . What is the future of the sgrep CLI? Would it be reasonable to default to JSON output in all cases? Simplifies things for sgrep_lint but I don't have full visibility.", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r407110656", "createdAt": "2020-04-11T21:01:51Z", "author": {"login": "ievans"}, "path": "sgrep/bin/main_sgrep.ml", "diffHunk": "@@ -540,10 +566,14 @@ let main () =\n     (* main entry *)\n     (* --------------------------------------------------------- *)\n     | x::xs -> \n-        if !rules_file <> \"\"\n-        then sgrep_with_rules !rules_file (x::xs)\n-        else sgrep_with_one_pattern (x::xs)\n-\n+        (try (\n+          if !rules_file <> \"\"\n+          then sgrep_with_rules !rules_file (x::xs)\n+          else sgrep_with_one_pattern (x::xs)\n+        ) with exn -> \n+          pr (format_output_exception exn); (* todo, should be pr2 probably *)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODExMw==", "bodyText": "I like to have a simple path to test sgrep core functionality. When there's a bug, I prefer to limit as much as possible layers, so I just want one pattern (no yaml file, no sgrep-lint wrapper) and a test file. Before it was bad because there was sgrep_lint.ml and sgrep_generic.ml but now it's mostly the same code behind -e and -rules_file (they both call the same sgrep_generic.ml) so I think it's fine.", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r407158113", "createdAt": "2020-04-12T07:16:10Z", "author": {"login": "aryx"}, "path": "sgrep/bin/main_sgrep.ml", "diffHunk": "@@ -540,10 +566,14 @@ let main () =\n     (* main entry *)\n     (* --------------------------------------------------------- *)\n     | x::xs -> \n-        if !rules_file <> \"\"\n-        then sgrep_with_rules !rules_file (x::xs)\n-        else sgrep_with_one_pattern (x::xs)\n-\n+        (try (\n+          if !rules_file <> \"\"\n+          then sgrep_with_rules !rules_file (x::xs)\n+          else sgrep_with_one_pattern (x::xs)\n+        ) with exn -> \n+          pr (format_output_exception exn); (* todo, should be pr2 probably *)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExMDY1Ng=="}, "originalCommit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzMwNzY4OnYy", "diffSide": "RIGHT", "path": "sgrep/bin/main_sgrep.ml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzoxODoxMlrOGES-LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzoxODoxMlrOGES-LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODMxNg==", "bodyText": "pr means on stdout, pr2 means on stderr.\nI don't know what sgrep-lint captures, I think stdout, so probably good to have pr", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r407158316", "createdAt": "2020-04-12T07:18:12Z", "author": {"login": "aryx"}, "path": "sgrep/bin/main_sgrep.ml", "diffHunk": "@@ -540,10 +566,14 @@ let main () =\n     (* main entry *)\n     (* --------------------------------------------------------- *)\n     | x::xs -> \n-        if !rules_file <> \"\"\n-        then sgrep_with_rules !rules_file (x::xs)\n-        else sgrep_with_one_pattern (x::xs)\n-\n+        (try (\n+          if !rules_file <> \"\"\n+          then sgrep_with_rules !rules_file (x::xs)\n+          else sgrep_with_one_pattern (x::xs)\n+        ) with exn -> \n+          pr (format_output_exception exn); (* todo, should be pr2 probably *)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzMwODM5OnYy", "diffSide": "RIGHT", "path": "sgrep/lib/parse_rules.ml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzoxODo1N1rOGES-ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODowODowM1rOGFa0Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODM5NQ==", "bodyText": "I think you can remove the 'Exception' suffix, it's clear from the context that it's an exception.", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r407158395", "createdAt": "2020-04-12T07:18:57Z", "author": {"login": "aryx"}, "path": "sgrep/lib/parse_rules.ml", "diffHunk": "@@ -16,16 +16,21 @@ open Common\n \n module R = Rule\n \n+exception InvalidRuleException of string * string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNTM3NA==", "bodyText": "Yes, it's just a habit from Python", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r408335374", "createdAt": "2020-04-14T18:08:03Z", "author": {"login": "ievans"}, "path": "sgrep/lib/parse_rules.ml", "diffHunk": "@@ -16,16 +16,21 @@ open Common\n \n module R = Rule\n \n+exception InvalidRuleException of string * string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODM5NQ=="}, "originalCommit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzMwOTI3OnYy", "diffSide": "RIGHT", "path": "sgrep/lib/parse_rules.ml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzoyMDowMlrOGES-3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODowODoxMFrOGFa0Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODQ5Mw==", "bodyText": "note that this yaml file is always generated by sgrep-lint; regular users are not supposed to feed sgrep-core directly with yaml file (except me when I test things), so those errors should be caught by the sgrep-lint wrapper anyway.", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r407158493", "createdAt": "2020-04-12T07:20:02Z", "author": {"login": "aryx"}, "path": "sgrep/lib/parse_rules.ml", "diffHunk": "@@ -52,37 +57,36 @@ let parse file =\n                let languages = langs |> List.map (function\n                 | `String s ->\n                   (match Lang.lang_of_string_opt s with\n-                  | None -> error (spf \"unsupported language: %s\" s)\n+                  | None -> raise (InvalidLanguageException (id, (spf \"unsupported language: %s\" s)))\n                   | Some l -> l\n                   )\n-                | _ -> error (spf \"expecting a string for languages\")\n+                | _ -> raise (InvalidRuleException (id, (spf \"expecting a string for languages\")))\n                ) in\n                let lang =\n                  match languages with\n-                 | [] -> error \"we need at least one language\"\n+                 | [] -> raise (InvalidRuleException (id, \"we need at least one language\"))\n                  | x::_xs -> x\n                in\n                let pattern =\n                  (* todo? call Normalize_ast.normalize here? *)\n                  try Parse_generic.parse_pattern lang pattern\n                  with exn ->\n-                   error (spf \"could not parse the pattern %s (exn = %s)\"\n-                            pattern (Common.exn_to_s exn))\n+                   raise (InvalidPatternException (id, pattern, (Lang.string_of_lang lang), (Common.exn_to_s exn)))\n                in\n-               let severity = severity_of_string sev in\n+               let severity = (severity_of_string id sev) in\n                { R. id; pattern; message; languages; severity }\n              | x ->\n                pr2_gen x;\n-               error \"wrong rule fields\"\n+               raise (InvalidYamlException \"wrong rule fields\")\n              )\n           | x ->\n               pr2_gen x;\n-              error \"wrong rule fields\"\n+              raise (InvalidYamlException \"wrong rule fields\")\n          )\n-      | _ -> error \"missing rules entry\"\n+      | _ -> raise (InvalidYamlException \"missing rules entry as top-level key\")\n       )\n   | Result.Error (`Msg s) ->\n-    failwith (spf \"sgrep_lint: could not parse %s (error = %s)\" file s)\n+    raise (UnparsableYamlException s)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNTQ1OA==", "bodyText": "True", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r408335458", "createdAt": "2020-04-14T18:08:10Z", "author": {"login": "ievans"}, "path": "sgrep/lib/parse_rules.ml", "diffHunk": "@@ -52,37 +57,36 @@ let parse file =\n                let languages = langs |> List.map (function\n                 | `String s ->\n                   (match Lang.lang_of_string_opt s with\n-                  | None -> error (spf \"unsupported language: %s\" s)\n+                  | None -> raise (InvalidLanguageException (id, (spf \"unsupported language: %s\" s)))\n                   | Some l -> l\n                   )\n-                | _ -> error (spf \"expecting a string for languages\")\n+                | _ -> raise (InvalidRuleException (id, (spf \"expecting a string for languages\")))\n                ) in\n                let lang =\n                  match languages with\n-                 | [] -> error \"we need at least one language\"\n+                 | [] -> raise (InvalidRuleException (id, \"we need at least one language\"))\n                  | x::_xs -> x\n                in\n                let pattern =\n                  (* todo? call Normalize_ast.normalize here? *)\n                  try Parse_generic.parse_pattern lang pattern\n                  with exn ->\n-                   error (spf \"could not parse the pattern %s (exn = %s)\"\n-                            pattern (Common.exn_to_s exn))\n+                   raise (InvalidPatternException (id, pattern, (Lang.string_of_lang lang), (Common.exn_to_s exn)))\n                in\n-               let severity = severity_of_string sev in\n+               let severity = (severity_of_string id sev) in\n                { R. id; pattern; message; languages; severity }\n              | x ->\n                pr2_gen x;\n-               error \"wrong rule fields\"\n+               raise (InvalidYamlException \"wrong rule fields\")\n              )\n           | x ->\n               pr2_gen x;\n-              error \"wrong rule fields\"\n+              raise (InvalidYamlException \"wrong rule fields\")\n          )\n-      | _ -> error \"missing rules entry\"\n+      | _ -> raise (InvalidYamlException \"missing rules entry as top-level key\")\n       )\n   | Result.Error (`Msg s) ->\n-    failwith (spf \"sgrep_lint: could not parse %s (error = %s)\" file s)\n+    raise (UnparsableYamlException s)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODQ5Mw=="}, "originalCommit": {"oid": "ad6775378a80c60dadc23f40d713c33949759a84"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4822, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}