{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMDcxMDUw", "number": 1136, "title": "Modified to allow metavar replacement", "bodyText": "Split up code for call and implemented metavariables, with a count to ensure different ones\nTested with\nfrom metrics import send\ndef foo():\na.bar(var, f(var2))\nbar + send('my-report-id') + bar()\n(hi, my)\n(hi, my, bye)\nA[1]\nA[-1]\nA[1:4]\nA[1:4:-1]\nA[::-1]\nA[1:]\nif 1 == 2: foo()\ntrue", "createdAt": "2020-06-25T14:48:08Z", "url": "https://github.com/returntocorp/semgrep/pull/1136", "merged": true, "mergeCommit": {"oid": "bbf52c40ca8afa1473c5c82738a4d519b4153c23"}, "closed": true, "closedAt": "2020-06-26T07:39:00Z", "author": {"login": "emjin"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuvxRIgH2gAyNDQwMDcxMDUwOmY1ZDg0MmM2NjI0M2JjYmJiOGNlYjI3YWExYzJhN2U2NGE5NzIxY2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu-QFigFqTQzODA3NTM4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f5d842c66243bcbbb8ceb27aa1c2a7e64a9721cc", "author": {"user": {"login": "emjin", "name": "Emma Jin"}}, "url": "https://github.com/returntocorp/semgrep/commit/f5d842c66243bcbbb8ceb27aa1c2a7e64a9721cc", "committedDate": "2020-06-25T14:45:57Z", "message": "Modified to allow metavar replacement\n\nSplit up code for call and implemented metavariables, with a count to ensure different ones\n\nTested with\nfrom metrics import send\ndef foo():\n   a.bar(var, f(var2))\n   bar + send('my-report-id') + bar()\n   (hi, my)\n   (hi, my, bye)\n   A[1]\n   A[-1]\n   A[1:4]\n   A[1:4:-1]\n   A[::-1]\n   A[1:]\n   if 1 == 2: foo()\n   true"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62544c5e526b965470bfccbaf09a5c521157ab92", "author": {"user": {"login": "emjin", "name": "Emma Jin"}}, "url": "https://github.com/returntocorp/semgrep/commit/62544c5e526b965470bfccbaf09a5c521157ab92", "committedDate": "2020-06-25T16:10:11Z", "message": "Changed count to not be a ref cell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cccd7d85c9235154bdd32cb4d5faef38c01ff4f", "author": {"user": {"login": "emjin", "name": "Emma Jin"}}, "url": "https://github.com/returntocorp/semgrep/commit/2cccd7d85c9235154bdd32cb4d5faef38c01ff4f", "committedDate": "2020-06-25T17:59:51Z", "message": "Added logic to check if arguments are the same and give them the same metavariable when they are\n\nCurrently implementing using a list, later I should change this to use a map\n\nTested on cases\na.bar(f(x), f(x)) and 1==1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1f9443323ad7c262a426c5775cc5096536c6e8b", "author": {"user": {"login": "emjin", "name": "Emma Jin"}}, "url": "https://github.com/returntocorp/semgrep/commit/b1f9443323ad7c262a426c5775cc5096536c6e8b", "committedDate": "2020-06-25T18:43:30Z", "message": "Changed from $X1, $X2 to $X, $Y, etc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "971de58f7009d496bef255211b53fe4d3cc42504", "author": {"user": {"login": "emjin", "name": "Emma Jin"}}, "url": "https://github.com/returntocorp/semgrep/commit/971de58f7009d496bef255211b53fe4d3cc42504", "committedDate": "2020-06-25T22:28:50Z", "message": "Added deep metavar pattern inference\n\nTested against\nfrom metrics import send\ndef foo():\n   a.bar(f(x), y==f(x))\n   bar + send('my-report-id') + bar()\n   (hi, my)\n   (hi, my, bye)\n   A[1]\n   A[-1]\n   A[1:4]\n   A[1:4:-1]\n   A[::-1]\n   A[1:]\n   if 1 == 1: foo()\n   true\n   3.3\n   self.data\n   \"nice\" if is_nice else \"not nice\"\n   f(a, b(g(a)), c, c(k), a, c)\n   if node.id== node.  id: foo()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6d1d53240e2acf96ee7ec0c129e0659c94731b8", "author": {"user": {"login": "emjin", "name": "Emma Jin"}}, "url": "https://github.com/returntocorp/semgrep/commit/d6d1d53240e2acf96ee7ec0c129e0659c94731b8", "committedDate": "2020-06-26T03:17:38Z", "message": "Added typed metavar option\n\nCurrently untested because I can't get a java program to work.\n\n(Tried\nclass foo {\n    public static void main() {\n        int a = 2;\n        foo(a);\n    }\n}\nand got Parse_info.NoTokenLocation(\"FakeTokStr\"))"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDc1Mzgz", "url": "https://github.com/returntocorp/semgrep/pull/1136#pullrequestreview-438075383", "createdAt": "2020-06-26T07:35:16Z", "commit": {"oid": "d6d1d53240e2acf96ee7ec0c129e0659c94731b8"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzozNToxNlrOGpWwrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzozNjowNFrOGpWyIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxNzcwOQ==", "bodyText": "We usually calls that kind of thing an \"environment\". It's not really a state because\nyou don't modify it in place (it's not a global; it's something you pass around).", "url": "https://github.com/returntocorp/semgrep/pull/1136#discussion_r446017709", "createdAt": "2020-06-26T07:35:16Z", "author": {"login": "aryx"}, "path": "semgrep-core/synthesizing/Pattern_from_Code.ml", "diffHunk": "@@ -28,25 +28,146 @@ open AST_generic\n type named_variants =\n   (string * Pattern.t) list\n \n+type global_state = { count : int; mapping : (expr * expr) list;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6d1d53240e2acf96ee7ec0c129e0659c94731b8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxODA4Mw==", "bodyText": "you can write this as\nmatch count with\n| 1 -> make_id 'X'\n| 2 -> make_id 'Y'\n| _ when count <= 26 -> ...\n| _ -> Format.sprintf ...", "url": "https://github.com/returntocorp/semgrep/pull/1136#discussion_r446018083", "createdAt": "2020-06-26T07:36:04Z", "author": {"login": "aryx"}, "path": "semgrep-core/synthesizing/Pattern_from_Code.ml", "diffHunk": "@@ -28,25 +28,146 @@ open AST_generic\n type named_variants =\n   (string * Pattern.t) list\n \n+type global_state = { count : int; mapping : (expr * expr) list;\n+                      has_type : bool }\n+\n+(*****************************************************************************)\n+(* State helpers *)\n+(*****************************************************************************)\n+\n+(* TODO make mapping a map and use map lookup *)\n+let lookup state e =\n+let mapping = state.mapping in\n+let rec look = function\n+    | [] -> None\n+    | (e1, e2)::xs ->\n+      if Matching_generic.equal_ast_binded_code (E e) (E e1) then Some e2 else look xs\n+in\n+  look mapping\n+\n+\n (*****************************************************************************)\n (* Helpers *)\n (*****************************************************************************)\n let fk = Parse_info.fake_info \"fake\"\n let _bk f (lp,x,rp) = (lp, f x, rp)\n \n+let default_id str =\n+  Id((str, fk),\n+   {id_resolved = ref None; id_type = ref None; id_const_literal = ref None})\n+\n+let default_tyvar str typ =\n+  TypedMetavar((str, fk), fk, typ)\n+\n+let count_to_id count =\n+  let make_id ch = Format.sprintf \"$%c\" ch in\n+  if count = 1 then make_id 'X'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6d1d53240e2acf96ee7ec0c129e0659c94731b8"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1435, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}