{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2Mzc5NTAx", "number": 1611, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTo0NzoxNlrOEeXTgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoyNzowOFrOEeYOFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjc0NTYwOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/core_runner.py", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTo0NzoxNlrOHJ-W6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDozMzoyOFrOHKIQyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyMDkwNA==", "bodyText": "This is required because we cannot do a multiprocessing.Pool inside another Pool. We need to avoid the double Pool with --test using Pool and our rules in semgrep-rules using pattern-regex (uses Pool here). Since our tests only have one corresponding target file we can limit our multiprocessing use to > 1 target.", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480220904", "createdAt": "2020-08-31T15:47:16Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -426,9 +426,14 @@ def handle_regex_patterns(\n             ]\n         except re.error as err:\n             raise SemgrepError(f\"invalid regular expression specified: {err}\")\n-        re_fn = functools.partial(get_re_matches, patterns_re)\n-        with multiprocessing.Pool(self._jobs) as pool:\n-            matches = pool.map(re_fn, targets)\n+\n+        if len(targets) > 1:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyMTE4Mw==", "bodyText": "https://stackoverflow.com/questions/6974695/python-process-pool-non-daemonic", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480221183", "createdAt": "2020-08-31T15:47:44Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -426,9 +426,14 @@ def handle_regex_patterns(\n             ]\n         except re.error as err:\n             raise SemgrepError(f\"invalid regular expression specified: {err}\")\n-        re_fn = functools.partial(get_re_matches, patterns_re)\n-        with multiprocessing.Pool(self._jobs) as pool:\n-            matches = pool.map(re_fn, targets)\n+\n+        if len(targets) > 1:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyMDkwNA=="}, "originalCommit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0Mjc3OQ==", "bodyText": "Have you looked into using a thread pool instead of a process pool? We got around most of these nasty issues in Bento by using multithreading inside a single process.\nThis won't work, of course, if your tests are mutating global state.", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480242779", "createdAt": "2020-08-31T16:24:30Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -426,9 +426,14 @@ def handle_regex_patterns(\n             ]\n         except re.error as err:\n             raise SemgrepError(f\"invalid regular expression specified: {err}\")\n-        re_fn = functools.partial(get_re_matches, patterns_re)\n-        with multiprocessing.Pool(self._jobs) as pool:\n-            matches = pool.map(re_fn, targets)\n+\n+        if len(targets) > 1:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyMDkwNA=="}, "originalCommit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NjU5Ng==", "bodyText": "cf. http://lucasb.eyer.be/snips/python-thread-pool.html", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480246596", "createdAt": "2020-08-31T16:31:22Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -426,9 +426,14 @@ def handle_regex_patterns(\n             ]\n         except re.error as err:\n             raise SemgrepError(f\"invalid regular expression specified: {err}\")\n-        re_fn = functools.partial(get_re_matches, patterns_re)\n-        with multiprocessing.Pool(self._jobs) as pool:\n-            matches = pool.map(re_fn, targets)\n+\n+        if len(targets) > 1:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyMDkwNA=="}, "originalCommit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4MzE3OQ==", "bodyText": "Hmm, interesting. I'm going to save that for a future improvement. I've mostly achieved what I set out to with this, so I'm going to push it over the line \ud83d\udc4d", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480383179", "createdAt": "2020-08-31T20:33:28Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -426,9 +426,14 @@ def handle_regex_patterns(\n             ]\n         except re.error as err:\n             raise SemgrepError(f\"invalid regular expression specified: {err}\")\n-        re_fn = functools.partial(get_re_matches, patterns_re)\n-        with multiprocessing.Pool(self._jobs) as pool:\n-            matches = pool.map(re_fn, targets)\n+\n+        if len(targets) > 1:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyMDkwNA=="}, "originalCommit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjg5MTcxOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/core_runner.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoyNTo1NVrOHJ_vlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDoxMDoyNFrOHKHknQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MzYwNw==", "bodyText": "It looks like you're assuming that we never test with more than one file? IMO that's a bit fragile. Would it make more sense to set a TESTING global and check against that?", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480243607", "createdAt": "2020-08-31T16:25:55Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -426,9 +426,14 @@ def handle_regex_patterns(\n             ]\n         except re.error as err:\n             raise SemgrepError(f\"invalid regular expression specified: {err}\")\n-        re_fn = functools.partial(get_re_matches, patterns_re)\n-        with multiprocessing.Pool(self._jobs) as pool:\n-            matches = pool.map(re_fn, targets)\n+\n+        if len(targets) > 1:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3MTg2OQ==", "bodyText": "Good catch! Although I did slightly better than a global.", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480371869", "createdAt": "2020-08-31T20:10:24Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -426,9 +426,14 @@ def handle_regex_patterns(\n             ]\n         except re.error as err:\n             raise SemgrepError(f\"invalid regular expression specified: {err}\")\n-        re_fn = functools.partial(get_re_matches, patterns_re)\n-        with multiprocessing.Pool(self._jobs) as pool:\n-            matches = pool.map(re_fn, targets)\n+\n+        if len(targets) > 1:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MzYwNw=="}, "originalCommit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjg5NTU3OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoyNzowOVrOHJ_yKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1NzowNFrOHKHLOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NDI2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try:\n          \n          \n            \n                    output = invoke_semgrep(filename, *args, **kwargs)\n          \n          \n            \n                except Exception as error:\n          \n          \n            \n                    return (filename, error, {})\n          \n          \n            \n                else:\n          \n          \n            \n                    return (filename, None, output)\n          \n          \n            \n                try:\n          \n          \n            \n                    output = invoke_semgrep(filename, *args, **kwargs)\n          \n          \n            \n                    return (filename, None, output)\n          \n          \n            \n                except Exception as error:\n          \n          \n            \n                    return (filename, error, {})", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480244265", "createdAt": "2020-08-31T16:27:09Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/test.py", "diffHunk": "@@ -195,62 +198,75 @@ def confusion_matrix_to_string(confusion: List[int]) -> str:\n     return f\"TP: {tp}\\tTN: {tn}\\tFP: {fp}\\tFN: {fn}\"\n \n \n+def invoke_semgrep_multi(filename, *args, **kwargs):\n+    try:\n+        output = invoke_semgrep(filename, *args, **kwargs)\n+    except Exception as error:\n+        return (filename, error, {})\n+    else:\n+        return (filename, None, output)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NTM3MQ==", "bodyText": "I try to only include the line I'm expecting an exception from in the try statement. This minimizes: \"Where did this exception get thrown from?\" Obviously this is an innocent enough change since we don't expect the return to raise, but I believe these are semantically equivalent so I'll stick to my rule of thumb here.", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480365371", "createdAt": "2020-08-31T19:57:04Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/test.py", "diffHunk": "@@ -195,62 +198,75 @@ def confusion_matrix_to_string(confusion: List[int]) -> str:\n     return f\"TP: {tp}\\tTN: {tn}\\tFP: {fp}\\tFN: {fn}\"\n \n \n+def invoke_semgrep_multi(filename, *args, **kwargs):\n+    try:\n+        output = invoke_semgrep(filename, *args, **kwargs)\n+    except Exception as error:\n+        return (filename, error, {})\n+    else:\n+        return (filename, None, output)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NDI2NQ=="}, "originalCommit": {"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4932, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}