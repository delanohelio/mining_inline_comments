{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3OTYwOTM0", "number": 916, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo0NzoxMFrOECsNgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo1MTo1MVrOECsTkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjU2OTYzOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/core_runner.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo0NzoxMFrOGfTcWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTo0Mzo1MVrOGfVPyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NzU5NA==", "bodyText": "Including the cmd here will produce non-deterministic results in tests. This is because the command contains a temporary file path pointing to the rule file, which will change every run. We can either find some workaround, or just not include the cmd info. Personally I don't find it very useful.", "url": "https://github.com/returntocorp/semgrep/pull/916#discussion_r435477594", "createdAt": "2020-06-04T18:47:10Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -294,16 +297,13 @@ def _run_rules(\n                                     output_json\n                                 )\n                             else:\n-                                print_error(\n-                                    f\"unexpected non-json output while invoking semgrep core with {' '.join(cmd)} \\n {ex}\"\n+                                raise SemgrepError(\n+                                    f\"unexpected non-json output while invoking semgrep-core:\\n\\t{ex}\\n{PLEASE_FILE_ISSUE_TEXT}\"\n                                 )\n-                                print_error_exit(f\"\\n{PLEASE_FILE_ISSUE_TEXT}\")\n-                                raise ex  # let our general exception handler take care of this\n                         except Exception as e:\n-                            print_error(\n-                                f\"non-zero return code while invoking semgrep with:\\n\\t{' '.join(cmd)}\\n{ex} {e}\"\n+                            raise SemgrepError(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNzE0Nw==", "bodyText": "Yeah I'm fine with removing cmd. Since really with tmp files you cant actually run that command afterwards anyway.", "url": "https://github.com/returntocorp/semgrep/pull/916#discussion_r435507147", "createdAt": "2020-06-04T19:43:51Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -294,16 +297,13 @@ def _run_rules(\n                                     output_json\n                                 )\n                             else:\n-                                print_error(\n-                                    f\"unexpected non-json output while invoking semgrep core with {' '.join(cmd)} \\n {ex}\"\n+                                raise SemgrepError(\n+                                    f\"unexpected non-json output while invoking semgrep-core:\\n\\t{ex}\\n{PLEASE_FILE_ISSUE_TEXT}\"\n                                 )\n-                                print_error_exit(f\"\\n{PLEASE_FILE_ISSUE_TEXT}\")\n-                                raise ex  # let our general exception handler take care of this\n                         except Exception as e:\n-                            print_error(\n-                                f\"non-zero return code while invoking semgrep with:\\n\\t{' '.join(cmd)}\\n{ex} {e}\"\n+                            raise SemgrepError(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NzU5NA=="}, "originalCommit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjU3NTA5OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/error.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo0ODo1NFrOGfTf1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo0ODo1NFrOGfTf1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3ODQ4Nw==", "bodyText": "This was causing some tests to fail. print_error_exit was defaulting to FATAL_EXIT_CODE, while we were initially defaulting to 1. This should clean it up \ud83d\udc4d", "url": "https://github.com/returntocorp/semgrep/pull/916#discussion_r435478487", "createdAt": "2020-06-04T18:48:54Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -6,7 +16,7 @@ class SemgrepError(Exception):\n     are displayed to the user.\n     \"\"\"\n \n-    def __init__(self, *args: object, code: int = 1) -> None:\n+    def __init__(self, *args: object, code: int = FATAL_EXIT_CODE) -> None:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjU3NjgyOnYy", "diffSide": "LEFT", "path": "semgrep/tests/e2e/snapshots/test_rule_parser/test_rule_parser__failure__error_messages/bad1/error.txt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo0OToyNFrOGfTg5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo0OToyNFrOGfTg5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3ODc1OA==", "bodyText": "This doesn't make any sense :P", "url": "https://github.com/returntocorp/semgrep/pull/916#discussion_r435478758", "createdAt": "2020-06-04T18:49:24Z", "author": {"login": "mschwager"}, "path": "semgrep/tests/e2e/snapshots/test_rule_parser/test_rule_parser__failure__error_messages/bad1/error.txt", "diffHunk": "@@ -1,2 +1,2 @@\n-rules/syntax/bad1.yaml: inside rule id eqeq-is-bad, pattern fields can't look like this: only ['pattern-inside', 'pattern-not-inside', 'pattern-either', 'pattern-not', 'pattern', 'patterns', 'pattern-where-python', 'fix', 'equivalences', 'pattern-regex'] operators can have children, but found `['pattern-inside']` with children", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjU3OTY3OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/rule.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo1MDoxN1rOGfTiyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo1MDoxN1rOGfTiyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3OTI0Mg==", "bodyText": "Small cleanup here, this was something like and_inside, now it's pattern-inside.", "url": "https://github.com/returntocorp/semgrep/pull/916#discussion_r435479242", "createdAt": "2020-06-04T18:50:17Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/rule.py", "diffHunk": "@@ -55,7 +55,7 @@ def _parse_boolean_expression(\n                         )\n                     else:\n                         raise InvalidRuleSchemaError(\n-                            f\"operator {operator} must have children\"\n+                            f\"operator {boolean_operator} must have children\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjU4MjE3OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/semgrep_main.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo1MDo1NVrOGfTkUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo1MDo1NVrOGfTkUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3OTYzNA==", "bodyText": "Without sorting here we will get non-deterministic results in the tests.", "url": "https://github.com/returntocorp/semgrep/pull/916#discussion_r435479634", "createdAt": "2020-06-04T18:50:55Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/semgrep_main.py", "diffHunk": "@@ -46,12 +47,12 @@ def validate_single_rule(config_id: str, rule: Dict[str, Any]) -> Optional[Rule]\n     if not rule_keys.issubset(YAML_ALL_VALID_RULE_KEYS):\n         extra_keys = rule_keys - YAML_ALL_VALID_RULE_KEYS\n         print_error(\n-            f\"{config_id} has invalid rule key {extra_keys} at rule id {rule_id_err_msg}, can only have: {YAML_ALL_VALID_RULE_KEYS}\"\n+            f\"{config_id} has an invalid top-level rule key {extra_keys} at rule id {rule_id_err_msg}, can only have: {sorted(YAML_ALL_VALID_RULE_KEYS)}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjU4NTE1OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/test.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo1MTo1MVrOGfTmSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo1MTo1MVrOGfTmSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4MDEzNw==", "bodyText": "It doesn't really make sense to raise SemgrepError here since we're in the tests.", "url": "https://github.com/returntocorp/semgrep/pull/916#discussion_r435480137", "createdAt": "2020-06-04T18:51:51Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/test.py", "diffHunk": "@@ -307,7 +306,7 @@ def main(\n def test_main(args: argparse.Namespace) -> None:\n     _test_compute_confusion_matrix()\n     if len(args.target) != 1:\n-        print_error_exit(\"only one target directory allowed for tests\")\n+        raise Exception(\"only one target directory allowed for tests\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c117658bb16d341cd511911e8c315329272caef"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4525, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}