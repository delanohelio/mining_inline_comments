{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTMzOTIy", "number": 1058, "title": "Add JSON errors for various parse errors", "bodyText": "A long time coming. SemgrepError now defines a standard JSON serialization. All SemgrepErrors will be included in the JSON output when requested. Individual exceptions should override to_dict_base to provide a custom JSON serialization other than str(ex).\nI also split out stdout and stderr from the snapshot tests which trigger known errors -- hopefully this makes the snapshot tests less brittle as well as ensuring that all output is going to the right place!\nEverything else is just rudimentary refactoring moving a bits of code around.\nWith this change, we can now include errors for rule schemas in semgrep.live!", "createdAt": "2020-06-17T22:46:13Z", "url": "https://github.com/returntocorp/semgrep/pull/1058", "merged": true, "mergeCommit": {"oid": "0dcce1f604fe7364beea00c3b82010616d449706"}, "closed": true, "closedAt": "2020-06-18T00:15:22Z", "author": {"login": "rcoh"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsRzNMAH2gAyNDM2MTMzOTIyOjlhZjFhNjA4YjRkNDRiOGI3NTkyYTZlMGQxM2FjODczMDEyNDhmYmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsSayZAFqTQzMjg0MjE0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9af1a608b4d44b8b7592a6e0d13ac87301248fbc", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/9af1a608b4d44b8b7592a6e0d13ac87301248fbc", "committedDate": "2020-06-17T22:43:04Z", "message": "Add JSON errors for various parse errors\n\nI also split out stdout and stderr from the snapshot tests which trigger known errors -- hopefully this makes the snapshot tests less brittle as well as ensuring that all\noutput is going to the right place!"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODQyMDU5", "url": "https://github.com/returntocorp/semgrep/pull/1058#pullrequestreview-432842059", "createdAt": "2020-06-17T23:26:03Z", "commit": {"oid": "9af1a608b4d44b8b7592a6e0d13ac87301248fbc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzoyNjowM1rOGlanKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzoyNjowM1rOGlanKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4NjUwNg==", "bodyText": "Is this the best way to enforce this?", "url": "https://github.com/returntocorp/semgrep/pull/1058#discussion_r441886506", "createdAt": "2020-06-17T23:26:03Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -94,19 +111,21 @@ def __init__(\n         self.level = level\n         self.spans = spans\n         self.help = help\n-\n-    @property\n-    def code(self) -> int:  # type: ignore\n-        \"\"\"\n-        If we explicitly set a code, return that.\n-        Otherwise, if the cause sets a code, return that.\n-        Otherwise, return a generic FATAL_EXIT_CODE\n-        \"\"\"\n-        return (\n-            self.__dict__.get(\"code\")\n-            or getattr(self.__cause__, \"code\", None)\n-            or FATAL_EXIT_CODE\n+        assert hasattr(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9af1a608b4d44b8b7592a6e0d13ac87301248fbc"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODQyMTQ0", "url": "https://github.com/returntocorp/semgrep/pull/1058#pullrequestreview-432842144", "createdAt": "2020-06-17T23:26:18Z", "commit": {"oid": "9af1a608b4d44b8b7592a6e0d13ac87301248fbc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1573, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}