{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMzI1Nzgz", "number": 793, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTo1NzoxMVrOD982_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDowMzo1M1rOD98_0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mjg2ODQ2OnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTo1NzoxMVrOGXwX8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTo1NzoxMVrOGXwX8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2Mjk5Mg==", "bodyText": "We should link the sub-headers below here too.", "url": "https://github.com/returntocorp/semgrep/pull/793#discussion_r427562992", "createdAt": "2020-05-19T19:57:11Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -22,6 +22,7 @@ Contents:\n   * [`pattern-inside`](configuration-files.md#pattern-inside)\n   * [`pattern-not-inside`](configuration-files.md#pattern-not-inside)\n   * [`pattern-where-python`](configuration-files.md#pattern-where-python)\n+* [Metavariable matching](configuration-files.md#metavariable-matching)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada493fecbd03b8bef2f034d57256cd0e71d60e0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mjg4MTY4OnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDowMDo1NlrOGXwgRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDozNDoxNlrOGXxldQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NTEyNw==", "bodyText": "The rest of this document uses \"logical AND\" and \"logical OR\" vs. \"logical inclusion\" and \"logical union\". I also think that language is simpler to understand for an entry-level engineer vs. a program analysis expert.", "url": "https://github.com/returntocorp/semgrep/pull/793#discussion_r427565127", "createdAt": "2020-05-19T20:00:56Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -271,6 +272,117 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n+## Metavariable matching\n+\n+### Metavariables in logical inclusions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada493fecbd03b8bef2f034d57256cd0e71d60e0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4MjgzNw==", "bodyText": "I have inclusion here to be inclusive (heh) of both patterns and pattern-inside, but maybe we should just be extensional.", "url": "https://github.com/returntocorp/semgrep/pull/793#discussion_r427582837", "createdAt": "2020-05-19T20:34:16Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -271,6 +272,117 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n+## Metavariable matching\n+\n+### Metavariables in logical inclusions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NTEyNw=="}, "originalCommit": {"oid": "ada493fecbd03b8bef2f034d57256cd0e71d60e0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mjg5MTA1OnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDowMzo1M1rOGXwmfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowMDozNVrOGcIPsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NjcxOQ==", "bodyText": "I'm not really sure what this is saying. Could we instead say something like \"Metavariables persist across pattern, patterns, and pattern-inside operators.\"", "url": "https://github.com/returntocorp/semgrep/pull/793#discussion_r427566719", "createdAt": "2020-05-19T20:03:53Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -271,6 +272,117 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n+## Metavariable matching\n+\n+### Metavariables in logical inclusions\n+\n+Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada493fecbd03b8bef2f034d57256cd0e71d60e0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4MjQ4Mg==", "bodyText": "@mschwager would it be easiest if you just took a swing at the documentation? I'm definitely struggling to articulate this without getting way too technical.", "url": "https://github.com/returntocorp/semgrep/pull/793#discussion_r427582482", "createdAt": "2020-05-19T20:33:41Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -271,6 +272,117 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n+## Metavariable matching\n+\n+### Metavariables in logical inclusions\n+\n+Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NjcxOQ=="}, "originalCommit": {"oid": "ada493fecbd03b8bef2f034d57256cd0e71d60e0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0ODQwMw==", "bodyText": "Just getting back to this, happy to iterate!", "url": "https://github.com/returntocorp/semgrep/pull/793#discussion_r432148403", "createdAt": "2020-05-28T22:00:35Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -271,6 +272,117 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n+## Metavariable matching\n+\n+### Metavariables in logical inclusions\n+\n+Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NjcxOQ=="}, "originalCommit": {"oid": "ada493fecbd03b8bef2f034d57256cd0e71d60e0"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4724, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}