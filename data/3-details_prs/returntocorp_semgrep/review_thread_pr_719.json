{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MTEyNDA5", "number": 719, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODoyMDo1MlrOD6j1eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODoyMDo1MlrOD6j1eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzMxMTI4OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/output.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODoyMDo1MlrOGSdo0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODoyMDo1MlrOGSdo0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAxMzEzOA==", "bodyText": "This is to satisfy the type hints. Should never happen as we control the output_format value in our code.", "url": "https://github.com/returntocorp/semgrep/pull/719#discussion_r422013138", "createdAt": "2020-05-08T08:20:52Z", "author": {"login": "underyx"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -105,15 +109,48 @@ def build_output_json(rule_matches: List[RuleMatch], semgrep_errors: List[Any])\n     return json.dumps(output_json)\n \n \n+def _sarif_tool_info() -> Dict[str, Any]:\n+    return {\"name\": \"semgrep\", \"semanticVersion\": __VERSION__}\n+\n+\n+def build_sarif_output(\n+    rule_matches: List[RuleMatch], rules: FrozenSet[Rule], semgrep_errors: List[Any]\n+) -> str:\n+    \"\"\"\n+    Format matches in SARIF v2.1.0 formatted JSON.\n+\n+    - written based on https://help.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/about-sarif-support-for-code-scanning\n+    - which links to this schema https://github.com/oasis-tcs/sarif-spec/blob/master/Schemata/sarif-schema-2.1.0.json\n+    - full spec is at https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html\n+    \"\"\"\n+    output_dict = {\n+        \"$schema\": \"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\",\n+        \"version\": \"2.1.0\",\n+        \"tool\": {\n+            \"driver\": {\n+                **_sarif_tool_info(),\n+                \"rules\": [rule.to_sarif() for rule in rules],\n+            }\n+        },\n+        \"results\": [match.to_sarif() for match in rule_matches],\n+    }\n+    return json.dumps(output_dict)\n+\n+\n def build_output(\n     rule_matches: List[RuleMatch],\n+    rules: FrozenSet[Rule],\n     semgrep_errors: List[Any],\n-    json_format: bool,\n+    output_format: str,\n     color_output: bool,\n ) -> str:\n-    if json_format:\n+    if output_format == \"json\":\n         return build_output_json(rule_matches, semgrep_errors)\n-    else:\n+    elif output_format == \"sarif\":\n+        return build_sarif_output(rule_matches, rules, semgrep_errors)\n+    elif output_format == \"normal\":\n         return \"\\n\".join(\n             build_normal_output(rule_matches, semgrep_errors, color_output)\n         )\n+    else:\n+        raise RuntimeError(f\"Not sure how to format as '{output_format}'\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f5c31bf846b525920e7c0df2ac3fd295f53881"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4702, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}