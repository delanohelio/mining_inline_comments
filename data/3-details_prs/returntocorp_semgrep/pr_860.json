{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzYxMTEw", "number": 860, "title": "Documentation touchups", "bodyText": "Mostly iterating on \"Metavariable Matching\" verbiage after some suggestions in #793.\nSee the following for the rendered update: https://github.com/returntocorp/semgrep/blob/cb6ce51fc3574e1c31da405edebb98652b4e586d/docs/configuration-files.md#metavariable-matching", "createdAt": "2020-05-28T22:06:11Z", "url": "https://github.com/returntocorp/semgrep/pull/860", "merged": true, "mergeCommit": {"oid": "765fab21f5cb00571b834cc7fdb5564b77822519"}, "closed": true, "closedAt": "2020-06-03T14:20:47Z", "author": {"login": "mschwager"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcl1V0kgFqTQyMDUyNjQ3Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnc1T5AFqTQyMzEwNjY5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTI2NDc3", "url": "https://github.com/returntocorp/semgrep/pull/860#pullrequestreview-420526477", "createdAt": "2020-05-28T22:06:37Z", "commit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowNjozN1rOGcIZsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowOTozMlrOGcIeDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MDk2Mw==", "bodyText": "Fixing up a small typo from earlier.", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432150963", "createdAt": "2020-05-28T22:06:37Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -91,14 +94,15 @@ All required fields must be present at the top-level of a rule. I.e. immediately\n | [`pattern-either`](configuration-files.md#pattern-either)_\\*_ | `array` | Logical OR of multiple patterns. |\n | [`pattern-regex`](configuration-files.md#pattern-regex)_\\*_ | `string` | Search files for [Python `re`](https://docs.python.org/3/library/re.html) compatible expressions. |\n \n-* _\\* Only one of `pattern`, `patterns`, `pattern-either`, or `pattern-regex` is required._\n+_\\* Only one of `pattern`, `patterns`, `pattern-either`, or `pattern-regex` is required._", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTA0Ng==", "bodyText": "fix was missing here.", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432151046", "createdAt": "2020-05-28T22:06:49Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -91,14 +94,15 @@ All required fields must be present at the top-level of a rule. I.e. immediately\n | [`pattern-either`](configuration-files.md#pattern-either)_\\*_ | `array` | Logical OR of multiple patterns. |\n | [`pattern-regex`](configuration-files.md#pattern-regex)_\\*_ | `string` | Search files for [Python `re`](https://docs.python.org/3/library/re.html) compatible expressions. |\n \n-* _\\* Only one of `pattern`, `patterns`, `pattern-either`, or `pattern-regex` is required._\n+_\\* Only one of `pattern`, `patterns`, `pattern-either`, or `pattern-regex` is required._\n \n **Optional:**\n \n | Field | Type | Description |\n | :--- | :--- | :--- |\n-| [`metadata`](advanced.md#metadata) | `object` | Arbitrary user-provided data. Use to attach data to rules without affecting semgrep's behavior |\n-| [`paths`](configuration-files.md#paths) | `object` | Paths to run this check on, or to ignore this check in. See [examples](advanced.md#paths). |\n+| [`fix`](configuration-files.md#fix) | `object` | Simple search-and-replace autofix functionality. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTUxNw==", "bodyText": "I lumped negations in with \"Note that the behavior is consistent across all child operators: pattern, pattern-not, pattern-regex, pattern-inside, pattern-not-inside.\" above. Does that make sense?", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432151517", "createdAt": "2020-05-28T22:07:59Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs\n+\n+Metavariable values must be identical across sub-patterns when performing\n+logical AND operations with the `patterns` operator.\n \n **Example**\n \n-Consider the configuration:\n+Consider the following rule:\n+\n ```yaml\n-  patterns:\n-    - pattern-inside: |\n-        def $F($X):\n-            ...\n-    - pattern: open($X)\n+rules:\n+  - id: function-args-to-open\n+    patterns:\n+      - pattern-inside: |\n+          def $F($X):\n+              ...\n+      - pattern: open($X)\n+    message: \"Function argument passed to open() builtin\"\n+    languages: [python]\n+    severity: ERROR\n ```\n \n-This configuration will match this Python code:\n+This rule will match the following code:\n+\n ```python\n def foo(path):\n     open(path)\n ```\n \n But will not match this code:\n+\n ```python\n def foo(path):\n     open(something_else)\n ```\n \n-### Metavariables in logical negations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MjA3OA==", "bodyText": "I think this was originally a typo in location. This got lumped in between two \"Ellipsis Operator\" sub-headers.", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432152078", "createdAt": "2020-05-28T22:09:32Z", "author": {"login": "mschwager"}, "path": "docs/pattern-features.md", "diffHunk": "@@ -228,31 +228,6 @@ pattern: $X = 1 + 2 + ...\n foo = 1 + 2 + 3 + 4\n ```\n \n-### Deep Expression Operator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTM1MjMy", "url": "https://github.com/returntocorp/semgrep/pull/860#pullrequestreview-420535232", "createdAt": "2020-05-28T22:26:04Z", "commit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyNjowNFrOGcI15A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyNjowNFrOGcI15A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODE4MA==", "bodyText": "The reason I used \"inclusion\" here is that it covers both patterns and pattern-inside.\nNot sure what the best \"boolean\" analogy is here.", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432158180", "createdAt": "2020-05-28T22:26:04Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTM1Mzc4", "url": "https://github.com/returntocorp/semgrep/pull/860#pullrequestreview-420535378", "createdAt": "2020-05-28T22:26:23Z", "commit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyNjoyNFrOGcI2YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyNjoyNFrOGcI2YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODMwNA==", "bodyText": "This should mention pattern-inside, as all the real-world examples would use pattern-inside.", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432158304", "createdAt": "2020-05-28T22:26:24Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs\n+\n+Metavariable values must be identical across sub-patterns when performing\n+logical AND operations with the `patterns` operator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTM1ODgw", "url": "https://github.com/returntocorp/semgrep/pull/860#pullrequestreview-420535880", "createdAt": "2020-05-28T22:27:31Z", "commit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyNzozMVrOGcI33g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyNzozMVrOGcI33g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODY4Ng==", "bodyText": "The behavior is consistent with which top-level operator?", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432158686", "createdAt": "2020-05-28T22:27:31Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a9a5829917e6190149fea487fa3c29864f10278", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/9a9a5829917e6190149fea487fa3c29864f10278", "committedDate": "2020-05-29T21:18:00Z", "message": "Documentation touchups"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "610cb687241a0153dd2353bb0d53a7dd3a4bd09f", "author": {"user": {"login": "brendongo", "name": "Brendon Go"}}, "url": "https://github.com/returntocorp/semgrep/commit/610cb687241a0153dd2353bb0d53a7dd3a4bd09f", "committedDate": "2020-05-29T21:17:21Z", "message": "tests: more verbose output for semgrep-rules regression tests (#869)"}, "afterCommit": {"oid": "9a9a5829917e6190149fea487fa3c29864f10278", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/9a9a5829917e6190149fea487fa3c29864f10278", "committedDate": "2020-05-29T21:18:00Z", "message": "Documentation touchups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjEyOTU4", "url": "https://github.com/returntocorp/semgrep/pull/860#pullrequestreview-422212958", "createdAt": "2020-06-01T22:02:25Z", "commit": {"oid": "9a9a5829917e6190149fea487fa3c29864f10278"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMTA2Njk5", "url": "https://github.com/returntocorp/semgrep/pull/860#pullrequestreview-423106699", "createdAt": "2020-06-02T22:44:42Z", "commit": {"oid": "9a9a5829917e6190149fea487fa3c29864f10278"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1603, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}