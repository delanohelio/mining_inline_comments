{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMDkxMTAy", "number": 233, "title": "change the shape of evaluate expression to take a single expression", "bodyText": "updates docs for pattern-either; closes #209", "createdAt": "2020-03-03T17:51:29Z", "url": "https://github.com/returntocorp/semgrep/pull/233", "merged": true, "mergeCommit": {"oid": "0bb0dfe66156b0d7c15efdae398e5dcf75e1a3dd"}, "closed": true, "closedAt": "2020-03-04T19:59:11Z", "author": {"login": "ievans"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKFi5ZAH2gAyMzgzMDkxMTAyOjVhZDBiYWZhMjEyYWY3NWEwYzc5OGI4N2JiNmM3YTYzNGY5MDQ3Y2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKJydRgFqTM2ODM2MjYwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5ad0bafa212af75a0c798b87bb6c7a634f9047ca", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/5ad0bafa212af75a0c798b87bb6c7a634f9047ca", "committedDate": "2020-03-03T17:12:58Z", "message": "change the shape of evaluate expression to take a single expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7ff9c3790782f03015b240053e62c9ff6be3fc8", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/d7ff9c3790782f03015b240053e62c9ff6be3fc8", "committedDate": "2020-03-03T20:18:01Z", "message": "black"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50e4a17d74fcb8a6214a13fb46f980975894f55a", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/50e4a17d74fcb8a6214a13fb46f980975894f55a", "committedDate": "2020-03-03T20:52:50Z", "message": "add tests, update docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "965c314b0ca4f937196e5ee1d9a9979d06edb381", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/965c314b0ca4f937196e5ee1d9a9979d06edb381", "committedDate": "2020-03-03T20:53:51Z", "message": "black"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MzIxMTMy", "url": "https://github.com/returntocorp/semgrep/pull/233#pullrequestreview-368321132", "createdAt": "2020-03-03T21:01:54Z", "commit": {"oid": "965c314b0ca4f937196e5ee1d9a9979d06edb381"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTowMTo1NFrOFxWYYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTowMTo1NFrOFxWYYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5MTIzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              ```python\n          \n          \n            \n              ```sgrep", "url": "https://github.com/returntocorp/semgrep/pull/233#discussion_r387291234", "createdAt": "2020-03-03T21:01:54Z", "author": {"login": "DrewDennison"}, "path": "docs/config.md", "diffHunk": "@@ -53,14 +53,29 @@ The main difference here is that we are composing patterns together. Every patte\n \n Will match nothing, because foo() and foo(1) can never occur together. If we made the first pattern `foo(...)`, the rule will work, although the pattern is unecessary.\n \n-There are several operators that can be used under `patterns`:\n+## Pattern Composition Operators\n+\n+### basic operators\n+\n+There are several operators that can be used in a rule. At the top level, there are three:\n \n - `pattern`: The rule will only fire if this pattern is found.\n-- `pattern-not`: Opposite of `pattern`\n-- `pattern-either`: You can put multiple other patterns under this; any of those patterns will count as a match.\n-- `pattterns`: Like `pattern-either`, you can put multiple patterns under this to create nested, implicitly-ANDed instructions.\n-- `pattern-inside`: The rule will only fire if the following patterns are inside this specified pattern. Useful for specifying a function that this behavior must occur in, for instance.\n-- `pattern-not-inside`: Opposite of `pattern-inside`\n+- `pattern-either`: (logical OR) Nest multiple other patterns under this; any of those patterns will count as a match.\n+- `pattterns`: (logical AND) You can put multiple patterns under this to create nested, implicitly-ANDed instructions.\n+\n+### filter operators\n+\n+Filters: there are several operators that act as filters to remove results you don't want. They must be combined with `pattern` operator in order to see results; e.g., if you have a rule with just `patttern-not`, nothing will fire.\n+\n+- `pattern-not`: This rule will filter out any cases where the pattern is found.\n+- `pattern-inside`: Filter out results that do not lie inside this specified pattern. Useful for specifying a function that this behavior must occur in, for instance.\n+- `pattern-not-inside`: Opposite of `pattern-inside`; this will filter out any following pattern results that are *not* inside the specified pattern.\n+- `pattern-where-python`: Uses a python expression to decide whether or not to filter out this result. Variables are passed to your python expression Python in an array called `vars`. **Running rules from other people that use this filter is dangerous as it can allow arbitrary code exeuction. If you have a rule using Python, you must pass the flag  `--dangerously-allow-arbitrary-code-execution-from-rules`.** Example:\n+  ```python", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "965c314b0ca4f937196e5ee1d9a9979d06edb381"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fe3a923e03e5ddb4bfd4875c364891758b50d35", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/4fe3a923e03e5ddb4bfd4875c364891758b50d35", "committedDate": "2020-03-03T21:11:41Z", "message": "Update docs/config.md\n\nCo-Authored-By: Drew Dennison <drew@returntocorp.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MzYyNjAz", "url": "https://github.com/returntocorp/semgrep/pull/233#pullrequestreview-368362603", "createdAt": "2020-03-03T22:09:17Z", "commit": {"oid": "965c314b0ca4f937196e5ee1d9a9979d06edb381"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjowOToxN1rOFxYaLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjowOToxN1rOFxYaLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyNDQ2Mg==", "bodyText": "Would it make sense to use patterns-or and patterns-and here? These keys may be a bit more obvious to first-time users with some programming background. We can always keep the current keys and only document the new ones to ensure backward compatibility.", "url": "https://github.com/returntocorp/semgrep/pull/233#discussion_r387324462", "createdAt": "2020-03-03T22:09:17Z", "author": {"login": "mschwager"}, "path": "docs/config.md", "diffHunk": "@@ -53,14 +53,29 @@ The main difference here is that we are composing patterns together. Every patte\n \n Will match nothing, because foo() and foo(1) can never occur together. If we made the first pattern `foo(...)`, the rule will work, although the pattern is unecessary.\n \n-There are several operators that can be used under `patterns`:\n+## Pattern Composition Operators\n+\n+### basic operators\n+\n+There are several operators that can be used in a rule. At the top level, there are three:\n \n - `pattern`: The rule will only fire if this pattern is found.\n-- `pattern-not`: Opposite of `pattern`\n-- `pattern-either`: You can put multiple other patterns under this; any of those patterns will count as a match.\n-- `pattterns`: Like `pattern-either`, you can put multiple patterns under this to create nested, implicitly-ANDed instructions.\n-- `pattern-inside`: The rule will only fire if the following patterns are inside this specified pattern. Useful for specifying a function that this behavior must occur in, for instance.\n-- `pattern-not-inside`: Opposite of `pattern-inside`\n+- `pattern-either`: (logical OR) Nest multiple other patterns under this; any of those patterns will count as a match.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "965c314b0ca4f937196e5ee1d9a9979d06edb381"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1147, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}