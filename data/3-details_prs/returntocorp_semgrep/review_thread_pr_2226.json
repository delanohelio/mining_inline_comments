{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NTE0NzYy", "number": 2226, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzo0MzowNVrOFDMYwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNjowODo0M1rOFDSmrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODkyOTkyOnYy", "diffSide": "RIGHT", "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzo0MzowNVrOICuogw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo1NDoyMFrOIDTVXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczMjA5OQ==", "bodyText": "Note that you don't need parentheses around v2. It's more idiomatic to write:\n(v1, Some v2)", "url": "https://github.com/returntocorp/semgrep/pull/2226#discussion_r539732099", "createdAt": "2020-12-09T23:43:05Z", "author": {"login": "mjambon"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -355,7 +355,7 @@ let line_string_content (env : env) (x : CST.line_string_content) =\n let return_at (env : env) ((v1, v2) : CST.return_at) =\n   let v1 = token env v1 (* \"return@\" *) in\n   let v2 = simple_identifier env v2 in\n-  todo env (v1, v2)\n+  (v1, Some(v2))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "390203a907a2026b8bd639c6e54ccabf3e38fc05"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzMzQwNQ==", "bodyText": "ah, got it -- good catch! I'll fix this in my next push \ud83d\udc4d", "url": "https://github.com/returntocorp/semgrep/pull/2226#discussion_r540333405", "createdAt": "2020-12-10T16:54:20Z", "author": {"login": "colleend"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -355,7 +355,7 @@ let line_string_content (env : env) (x : CST.line_string_content) =\n let return_at (env : env) ((v1, v2) : CST.return_at) =\n   let v1 = token env v1 (* \"return@\" *) in\n   let v2 = simple_identifier env v2 in\n-  todo env (v1, v2)\n+  (v1, Some(v2))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczMjA5OQ=="}, "originalCommit": {"oid": "390203a907a2026b8bd639c6e54ccabf3e38fc05"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTk0ODYyOnYy", "diffSide": "RIGHT", "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNjowODo0M1rOIC3QsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo1NzowNFrOIDTdog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3MzQ1Ng==", "bodyText": "maybe you can use Conditional instead, but it accepts 3 expressions.", "url": "https://github.com/returntocorp/semgrep/pull/2226#discussion_r539873456", "createdAt": "2020-12-10T06:08:43Z", "author": {"login": "aryx"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1432,41 +1465,47 @@ and primary_expression (env : env) (x : CST.primary_expression) : expr =\n        let v4 = token env v4 (* \")\" *) in\n        let v5 =\n          (match v5 with\n-          | `Cont_stru_body x -> control_structure_body env x\n-          | `SEMI tok -> token_todo env tok (* \";\" *)\n+          | `Cont_stru_body x ->\n+              let v1 = control_structure_body env x in\n+              (v1, None)\n+          | `SEMI tok ->\n+              token_todo env tok (* \";\" *)\n           | `Opt_cont_stru_body_opt_SEMI_else_choice_cont_stru_body (v1, v2, v3, v4) ->\n               let v1 =\n                 (match v1 with\n                  | Some x -> control_structure_body env x\n                  | None -> todo env ())\n               in\n-              let v2 =\n+              (*let v2 =\n                 (match v2 with\n                  | Some tok -> token env tok (* \";\" *)\n                  | None -> todo env ())\n-              in\n+                in*)\n               let v3 = token env v3 (* \"else\" *) in\n               let v4 =\n                 (match v4 with\n                  | `Cont_stru_body x -> control_structure_body env x\n                  | `SEMI tok -> token_todo env tok (* \";\" *)\n                 )\n               in\n-              todo env (v1, v2, v3, v4)\n+              (v1, Some(v4))\n          )\n        in\n-       todo env (v1, v2, v3, v4, v5)\n+       let (v6, v7) = v5 in\n+       let if_stmt = If (v1, v3, v6, v7) in\n+       OtherExpr (OE_StmtExpr, [S if_stmt])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "390203a907a2026b8bd639c6e54ccabf3e38fc05"}, "originalPosition": 342}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzNTUyMg==", "bodyText": "ah yes -- the 3 expressions part is difficult because v5 returns a statement \ud83d\ude22", "url": "https://github.com/returntocorp/semgrep/pull/2226#discussion_r540335522", "createdAt": "2020-12-10T16:57:04Z", "author": {"login": "colleend"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1432,41 +1465,47 @@ and primary_expression (env : env) (x : CST.primary_expression) : expr =\n        let v4 = token env v4 (* \")\" *) in\n        let v5 =\n          (match v5 with\n-          | `Cont_stru_body x -> control_structure_body env x\n-          | `SEMI tok -> token_todo env tok (* \";\" *)\n+          | `Cont_stru_body x ->\n+              let v1 = control_structure_body env x in\n+              (v1, None)\n+          | `SEMI tok ->\n+              token_todo env tok (* \";\" *)\n           | `Opt_cont_stru_body_opt_SEMI_else_choice_cont_stru_body (v1, v2, v3, v4) ->\n               let v1 =\n                 (match v1 with\n                  | Some x -> control_structure_body env x\n                  | None -> todo env ())\n               in\n-              let v2 =\n+              (*let v2 =\n                 (match v2 with\n                  | Some tok -> token env tok (* \";\" *)\n                  | None -> todo env ())\n-              in\n+                in*)\n               let v3 = token env v3 (* \"else\" *) in\n               let v4 =\n                 (match v4 with\n                  | `Cont_stru_body x -> control_structure_body env x\n                  | `SEMI tok -> token_todo env tok (* \";\" *)\n                 )\n               in\n-              todo env (v1, v2, v3, v4)\n+              (v1, Some(v4))\n          )\n        in\n-       todo env (v1, v2, v3, v4, v5)\n+       let (v6, v7) = v5 in\n+       let if_stmt = If (v1, v3, v6, v7) in\n+       OtherExpr (OE_StmtExpr, [S if_stmt])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3MzQ1Ng=="}, "originalCommit": {"oid": "390203a907a2026b8bd639c6e54ccabf3e38fc05"}, "originalPosition": 342}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4708, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}