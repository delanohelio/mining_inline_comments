{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NDI5MzQw", "number": 907, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDozODozOFrOECT--Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjowOToxOVrOECogKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODYwMDI1OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/core_runner.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDozODozOFrOGesfJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo1NzoyOFrOGetFZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzOTMzMg==", "bodyText": "Does ruamel.yaml have a fast import time wrt yaml?", "url": "https://github.com/returntocorp/semgrep/pull/907#discussion_r434839332", "createdAt": "2020-06-03T20:38:38Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -16,6 +16,8 @@\n from typing import Optional\n from typing import Tuple\n \n+from ruamel.yaml import YAML", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c8a1e4052a5566db06452c5ff2f5f8e141da555"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0OTEyNQ==", "bodyText": "I think we're good: semgrep --version  0.22s user 0.01s system 100% cpu 0.232 total", "url": "https://github.com/returntocorp/semgrep/pull/907#discussion_r434849125", "createdAt": "2020-06-03T20:57:28Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -16,6 +16,8 @@\n from typing import Optional\n from typing import Tuple\n \n+from ruamel.yaml import YAML", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzOTMzMg=="}, "originalCommit": {"oid": "5c8a1e4052a5566db06452c5ff2f5f8e141da555"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTk1Nzk2OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/rule_lang.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjowODoxOFrOGfNVHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjowODoxOFrOGfNVHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3NzQzNw==", "bodyText": "Can we use the standard {PLEASE_REPORT_ISSUE...} here?", "url": "https://github.com/returntocorp/semgrep/pull/907#discussion_r435377437", "createdAt": "2020-06-04T16:08:18Z", "author": {"login": "ievans"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -0,0 +1,89 @@\n+from io import StringIO\n+from typing import Any\n+from typing import Dict\n+from typing import List\n+from typing import NamedTuple\n+from typing import Optional\n+from typing import Union\n+\n+from ruamel.yaml import Node\n+from ruamel.yaml import RoundTripConstructor\n+from ruamel.yaml import YAML\n+\n+\n+class Position(NamedTuple):\n+    line: int\n+    column: int\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.line}:{self.column}\"\n+\n+\n+class Span(NamedTuple):\n+    start: Position\n+    end: Position\n+    file: Optional[str]\n+\n+    @classmethod\n+    def from_node(cls, node: Node, file: Optional[str]) -> \"Span\":\n+        start = Position(line=node.start_mark.line, column=node.start_mark.column)\n+        end = Position(line=node.end_mark.line, column=node.end_mark.column)\n+        return Span(start=start, end=end, file=file)\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.start}-{self.end}\"\n+\n+\n+# Actually recursive but mypy is unhelpful\n+YamlValue = Union[str, int, List[Any], Dict[str, Any]]\n+LocatedYamlValue = Union[str, int, List[\"YamlTree\"], Dict[\"YamlTree\", \"YamlTree\"]]\n+\n+\n+class YamlTree:\n+    def __init__(self, value: LocatedYamlValue, span: Span):\n+        self.value = value\n+        self.span = span\n+\n+    # __eq__ and _hash__ delegate to value to support `value['a']` working properly.\n+    # otherwise, since the key is _actually_ a `Located` object you'd need to give the\n+    # span to pull it out of the dictionary.\n+    def __eq__(self, other: Any) -> bool:\n+        return self.value.__eq__(other)\n+\n+    def __hash__(self) -> int:\n+        return hash(self.value)\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.span}: ---> {self.value}\"\n+\n+    def unroll(self) -> YamlValue:\n+        \"\"\"\n+        Recursively expand the `self.value`, converting back to a normal datastructure\n+        \"\"\"\n+        if isinstance(self.value, list):\n+            return [x.unroll() for x in self.value]\n+        elif isinstance(self.value, dict):\n+            return {str(k.unroll()): v.unroll() for k, v in self.value.items()}\n+        elif isinstance(self.value, YamlTree):\n+            return self.value.unroll()\n+        else:\n+            return self.value\n+\n+\n+def parse_yaml(contents: str) -> Dict[str, Any]:\n+    yaml = YAML()\n+    return yaml.load(StringIO(contents))  # type: ignore\n+\n+\n+def parse_yaml_preserve_spans(contents: str, filename: Optional[str]) -> YamlTree:\n+    class SpanPreservingRuamelConstructor(RoundTripConstructor):\n+        def construct_object(self, node: Node, deep: bool = False) -> YamlTree:\n+            r = super().construct_object(node, deep)\n+            return YamlTree(r, Span.from_node(node, filename))\n+\n+    yaml = YAML()\n+    yaml.Constructor = SpanPreservingRuamelConstructor\n+    data = yaml.load(StringIO(contents))\n+    if not isinstance(data, YamlTree):\n+        raise Exception(\"Something has gone horribly wrong in the YAML parser\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3e130e0acc890d907590f115372a3d7dc23cb4"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTk2MjAzOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/rule_lang.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjowOToxOVrOGfNXuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjoxNToxNlrOGfNmzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3ODEwNw==", "bodyText": "should we explicit note in comment or function name whether or not this is safe?", "url": "https://github.com/returntocorp/semgrep/pull/907#discussion_r435378107", "createdAt": "2020-06-04T16:09:19Z", "author": {"login": "ievans"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -0,0 +1,89 @@\n+from io import StringIO\n+from typing import Any\n+from typing import Dict\n+from typing import List\n+from typing import NamedTuple\n+from typing import Optional\n+from typing import Union\n+\n+from ruamel.yaml import Node\n+from ruamel.yaml import RoundTripConstructor\n+from ruamel.yaml import YAML\n+\n+\n+class Position(NamedTuple):\n+    line: int\n+    column: int\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.line}:{self.column}\"\n+\n+\n+class Span(NamedTuple):\n+    start: Position\n+    end: Position\n+    file: Optional[str]\n+\n+    @classmethod\n+    def from_node(cls, node: Node, file: Optional[str]) -> \"Span\":\n+        start = Position(line=node.start_mark.line, column=node.start_mark.column)\n+        end = Position(line=node.end_mark.line, column=node.end_mark.column)\n+        return Span(start=start, end=end, file=file)\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.start}-{self.end}\"\n+\n+\n+# Actually recursive but mypy is unhelpful\n+YamlValue = Union[str, int, List[Any], Dict[str, Any]]\n+LocatedYamlValue = Union[str, int, List[\"YamlTree\"], Dict[\"YamlTree\", \"YamlTree\"]]\n+\n+\n+class YamlTree:\n+    def __init__(self, value: LocatedYamlValue, span: Span):\n+        self.value = value\n+        self.span = span\n+\n+    # __eq__ and _hash__ delegate to value to support `value['a']` working properly.\n+    # otherwise, since the key is _actually_ a `Located` object you'd need to give the\n+    # span to pull it out of the dictionary.\n+    def __eq__(self, other: Any) -> bool:\n+        return self.value.__eq__(other)\n+\n+    def __hash__(self) -> int:\n+        return hash(self.value)\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.span}: ---> {self.value}\"\n+\n+    def unroll(self) -> YamlValue:\n+        \"\"\"\n+        Recursively expand the `self.value`, converting back to a normal datastructure\n+        \"\"\"\n+        if isinstance(self.value, list):\n+            return [x.unroll() for x in self.value]\n+        elif isinstance(self.value, dict):\n+            return {str(k.unroll()): v.unroll() for k, v in self.value.items()}\n+        elif isinstance(self.value, YamlTree):\n+            return self.value.unroll()\n+        else:\n+            return self.value\n+\n+\n+def parse_yaml(contents: str) -> Dict[str, Any]:\n+    yaml = YAML()\n+    return yaml.load(StringIO(contents))  # type: ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3e130e0acc890d907590f115372a3d7dc23cb4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4MTk2NQ==", "bodyText": "(seems actually pretty important given that we suggest parsing remote YAML files all the time)", "url": "https://github.com/returntocorp/semgrep/pull/907#discussion_r435381965", "createdAt": "2020-06-04T16:15:16Z", "author": {"login": "ievans"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -0,0 +1,89 @@\n+from io import StringIO\n+from typing import Any\n+from typing import Dict\n+from typing import List\n+from typing import NamedTuple\n+from typing import Optional\n+from typing import Union\n+\n+from ruamel.yaml import Node\n+from ruamel.yaml import RoundTripConstructor\n+from ruamel.yaml import YAML\n+\n+\n+class Position(NamedTuple):\n+    line: int\n+    column: int\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.line}:{self.column}\"\n+\n+\n+class Span(NamedTuple):\n+    start: Position\n+    end: Position\n+    file: Optional[str]\n+\n+    @classmethod\n+    def from_node(cls, node: Node, file: Optional[str]) -> \"Span\":\n+        start = Position(line=node.start_mark.line, column=node.start_mark.column)\n+        end = Position(line=node.end_mark.line, column=node.end_mark.column)\n+        return Span(start=start, end=end, file=file)\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.start}-{self.end}\"\n+\n+\n+# Actually recursive but mypy is unhelpful\n+YamlValue = Union[str, int, List[Any], Dict[str, Any]]\n+LocatedYamlValue = Union[str, int, List[\"YamlTree\"], Dict[\"YamlTree\", \"YamlTree\"]]\n+\n+\n+class YamlTree:\n+    def __init__(self, value: LocatedYamlValue, span: Span):\n+        self.value = value\n+        self.span = span\n+\n+    # __eq__ and _hash__ delegate to value to support `value['a']` working properly.\n+    # otherwise, since the key is _actually_ a `Located` object you'd need to give the\n+    # span to pull it out of the dictionary.\n+    def __eq__(self, other: Any) -> bool:\n+        return self.value.__eq__(other)\n+\n+    def __hash__(self) -> int:\n+        return hash(self.value)\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.span}: ---> {self.value}\"\n+\n+    def unroll(self) -> YamlValue:\n+        \"\"\"\n+        Recursively expand the `self.value`, converting back to a normal datastructure\n+        \"\"\"\n+        if isinstance(self.value, list):\n+            return [x.unroll() for x in self.value]\n+        elif isinstance(self.value, dict):\n+            return {str(k.unroll()): v.unroll() for k, v in self.value.items()}\n+        elif isinstance(self.value, YamlTree):\n+            return self.value.unroll()\n+        else:\n+            return self.value\n+\n+\n+def parse_yaml(contents: str) -> Dict[str, Any]:\n+    yaml = YAML()\n+    return yaml.load(StringIO(contents))  # type: ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3ODEwNw=="}, "originalCommit": {"oid": "de3e130e0acc890d907590f115372a3d7dc23cb4"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4655, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}