{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMDEwNzI2", "number": 1447, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMToxODoyNVrOEVK_Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjo1NjowNVrOEVMi_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjM1NTIzOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/output.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMToxODoyNVrOG7x3Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMToyMDozOFrOG7x7Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzNjEzNA==", "bodyText": "Do we run into issues since codepaths diverge now? i.e. when the error is a MatchTimeoutError we don't set self.has_output to True, we don't check membership in self.error_set before appending to semgrep_structured_errors etc. (see handle_semgrep_error)", "url": "https://github.com/returntocorp/semgrep/pull/1447#discussion_r465336134", "createdAt": "2020-08-04T21:18:25Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -226,8 +228,24 @@ def __init__(\n         self.final_error: Optional[Exception] = None\n \n     def handle_semgrep_errors(self, errors: List[SemgrepError]) -> None:\n+        timeout_errors = defaultdict(list)\n         for err in errors:\n-            self.handle_semgrep_error(err)\n+            if isinstance(err, MatchTimeoutError):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d56662046fb023cc0d0ec8056da0cad906a88b3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzNzE3NA==", "bodyText": "Oh I missed that, let me push an edit to this file...", "url": "https://github.com/returntocorp/semgrep/pull/1447#discussion_r465337174", "createdAt": "2020-08-04T21:20:38Z", "author": {"login": "sabrinabrogren"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -226,8 +228,24 @@ def __init__(\n         self.final_error: Optional[Exception] = None\n \n     def handle_semgrep_errors(self, errors: List[SemgrepError]) -> None:\n+        timeout_errors = defaultdict(list)\n         for err in errors:\n-            self.handle_semgrep_error(err)\n+            if isinstance(err, MatchTimeoutError):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzNjEzNA=="}, "originalCommit": {"oid": "9d56662046fb023cc0d0ec8056da0cad906a88b3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjYxMTE5OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/output.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjo1NjowNVrOG70QBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjo1NjowNVrOG70QBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3NTIzNg==", "bodyText": "Nit: error(s) so pluralization is fine if len is 1", "url": "https://github.com/returntocorp/semgrep/pull/1447#discussion_r465375236", "createdAt": "2020-08-04T22:56:05Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -226,8 +228,25 @@ def __init__(\n         self.final_error: Optional[Exception] = None\n \n     def handle_semgrep_errors(self, errors: List[SemgrepError]) -> None:\n+        timeout_errors = defaultdict(list)\n         for err in errors:\n-            self.handle_semgrep_error(err)\n+            if isinstance(err, MatchTimeoutError) and err not in self.error_set:\n+                self.semgrep_structured_errors.append(err)\n+                self.error_set.add(err)\n+                timeout_errors[err.path].append(err.rule_id)\n+            else:\n+                self.handle_semgrep_error(err)\n+\n+        if timeout_errors and self.settings.output_format == OutputFormat.TEXT:\n+            self.handle_semgrep_timeout_errors(timeout_errors)\n+\n+    def handle_semgrep_timeout_errors(self, errors: Dict[Path, List[str]]) -> None:\n+        self.has_output = True\n+        separator = \", \"\n+        for path in errors.keys():\n+            logger.error(\n+                f\"Warning: {len(errors[path])} timeout errors in {path} when running the following rules: [{separator.join(errors[path])}]\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f810da39f0d79b9b58d91538df60570a0abf207c"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4988, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}