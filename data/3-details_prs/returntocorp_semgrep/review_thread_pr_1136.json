{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMDcxMDUw", "number": 1136, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzozNToxNlrOEJCJ7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzozNjowNFrOEJCK6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTA3OTQ5OnYy", "diffSide": "RIGHT", "path": "semgrep-core/synthesizing/Pattern_from_Code.ml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzozNToxNlrOGpWwrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzozNToxNlrOGpWwrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxNzcwOQ==", "bodyText": "We usually calls that kind of thing an \"environment\". It's not really a state because\nyou don't modify it in place (it's not a global; it's something you pass around).", "url": "https://github.com/returntocorp/semgrep/pull/1136#discussion_r446017709", "createdAt": "2020-06-26T07:35:16Z", "author": {"login": "aryx"}, "path": "semgrep-core/synthesizing/Pattern_from_Code.ml", "diffHunk": "@@ -28,25 +28,146 @@ open AST_generic\n type named_variants =\n   (string * Pattern.t) list\n \n+type global_state = { count : int; mapping : (expr * expr) list;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6d1d53240e2acf96ee7ec0c129e0659c94731b8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTA4MjAxOnYy", "diffSide": "RIGHT", "path": "semgrep-core/synthesizing/Pattern_from_Code.ml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzozNjowNFrOGpWyIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzozNjowNFrOGpWyIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxODA4Mw==", "bodyText": "you can write this as\nmatch count with\n| 1 -> make_id 'X'\n| 2 -> make_id 'Y'\n| _ when count <= 26 -> ...\n| _ -> Format.sprintf ...", "url": "https://github.com/returntocorp/semgrep/pull/1136#discussion_r446018083", "createdAt": "2020-06-26T07:36:04Z", "author": {"login": "aryx"}, "path": "semgrep-core/synthesizing/Pattern_from_Code.ml", "diffHunk": "@@ -28,25 +28,146 @@ open AST_generic\n type named_variants =\n   (string * Pattern.t) list\n \n+type global_state = { count : int; mapping : (expr * expr) list;\n+                      has_type : bool }\n+\n+(*****************************************************************************)\n+(* State helpers *)\n+(*****************************************************************************)\n+\n+(* TODO make mapping a map and use map lookup *)\n+let lookup state e =\n+let mapping = state.mapping in\n+let rec look = function\n+    | [] -> None\n+    | (e1, e2)::xs ->\n+      if Matching_generic.equal_ast_binded_code (E e) (E e1) then Some e2 else look xs\n+in\n+  look mapping\n+\n+\n (*****************************************************************************)\n (* Helpers *)\n (*****************************************************************************)\n let fk = Parse_info.fake_info \"fake\"\n let _bk f (lp,x,rp) = (lp, f x, rp)\n \n+let default_id str =\n+  Id((str, fk),\n+   {id_resolved = ref None; id_type = ref None; id_const_literal = ref None})\n+\n+let default_tyvar str typ =\n+  TypedMetavar((str, fk), fk, typ)\n+\n+let count_to_id count =\n+  let make_id ch = Format.sprintf \"$%c\" ch in\n+  if count = 1 then make_id 'X'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6d1d53240e2acf96ee7ec0c129e0659c94731b8"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4484, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}