{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMjk0ODQz", "number": 832, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjowNjo1NlrOD_vnhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjoxMDozNFrOD_vt5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTY3MDQ0OnYy", "diffSide": "RIGHT", "path": "semgrep-core/matching/Generic_vs_generic.ml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjowNjo1NlrOGalj-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjowNjo1NlrOGalj-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzMTU3OA==", "bodyText": "Can we make this an externally defined constant?\nFWIW, I'd feel a bit more comfortable if we made the key type for the environment association a variant, but I realize that may be an annoyingly large change to make here.", "url": "https://github.com/returntocorp/semgrep/pull/832#discussion_r430531578", "createdAt": "2020-05-26T16:06:56Z", "author": {"login": "nbrahms"}, "path": "semgrep-core/matching/Generic_vs_generic.ml", "diffHunk": "@@ -84,6 +84,18 @@ let m_string_xhp_text sa sb =\n   else fail ()\n (*e: function [[Generic_vs_generic.m_string_xhp_text]] *)\n \n+(* ugly, see comment in Semgrep_generic.match_sts_sts *)\n+let env_add_matched_stmt st tin =\n+  let key = \"!STMTS!\" in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94df0caba75d20761179f10ec6eac3410409823d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTY4Njc3OnYy", "diffSide": "RIGHT", "path": "semgrep-core/matching/Semgrep_generic.ml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjoxMDozNFrOGaltsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjoxMDozNFrOGaltsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNDA2Ng==", "bodyText": "Can you comment as to why we're reversing the statement list?", "url": "https://github.com/returntocorp/semgrep/pull/832#discussion_r430534066", "createdAt": "2020-05-26T16:10:34Z", "author": {"login": "nbrahms"}, "path": "semgrep-core/matching/Semgrep_generic.ml", "diffHunk": "@@ -72,7 +72,35 @@ let match_st_st pattern e =\n (*s: function [[Semgrep_generic.match_sts_sts]] *)\n let match_sts_sts pattern e =\n   let env = Matching_generic.empty_environment () in\n-  GG.m_stmts_deep pattern e env\n+  (* When matching statements, we need not only to report whether\n+   * there is match, but also the actual statements that were matched.\n+   * Indeed, even if we want the implicit '...' at the end of\n+   * a sequence of statements pattern (AST_generic.Ss) to match all\n+   * the rest, we don't want to report the whole Ss as a match but just\n+   * the actually matched subset.\n+   * To do so would require to change the interface of a matcher\n+   * to not only return the matched environment but also the matched\n+   * statements. This would require in turn to provide new versions\n+   * for >>=, >||>, etc.\n+   * Instead, we can abuse the environment to also record the\n+   * matched statements! This is a bit ugly, but the alternative might\n+   * be worse.\n+   *\n+   * TODO? do we need to generate unique key? we don't want\n+   * nested calls to m_stmts_deep to polluate our metavar? We need\n+   * to pass the key to m_stmts_deep?\n+   *)\n+  let key = \"!STMTS!\" in\n+  let env = (key, Ss [])::env in\n+\n+  let res = GG.m_stmts_deep pattern e env in\n+\n+  res |> List.map (fun tin ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94df0caba75d20761179f10ec6eac3410409823d"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4624, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}