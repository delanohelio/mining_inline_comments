{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDM1ODY0", "number": 951, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowNzo0MVrOEEaCmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODoxOTozN1rOEEaSLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDU2NDEwOnYy", "diffSide": "RIGHT", "path": "semgrep/tests/e2e/snapshots/test_rule_parser/test_rule_parser__failure__error_messages/bad2/error.txt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowNzo0MVrOGiApvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDo0NjowMlrOGiFtJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNTQ1Mg==", "bodyText": "Will the color codes exist if a user is piping output to a file?", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438315452", "createdAt": "2020-06-10T18:07:41Z", "author": {"login": "brendongo"}, "path": "semgrep/tests/e2e/snapshots/test_rule_parser/test_rule_parser__failure__error_messages/bad2/error.txt", "diffHunk": "@@ -1,2 +1,12 @@\n-rules/syntax/bad2.yaml has an invalid top-level rule key {'pattern-inside'} at rule id eqeq-is-bad, can only have: ['equivalences', 'fix', 'id', 'languages', 'message', 'metadata', 'paths', 'pattern', 'pattern-either', 'pattern-regex', 'patterns', 'severity']\n+\u001b[31merror\u001b[39m: extra top-level key\n+  --> rules/syntax/bad2.yaml:3\n+\u001b[94m1 | \u001b[39mrules:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMjA0Mw==", "bodyText": "yeah, although this isn't a change how things currently behave se -- In the original version of this diff I stripped all the colors out if it the input was a tty. I can re-add it if you want.", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438322043", "createdAt": "2020-06-10T18:19:28Z", "author": {"login": "rcoh"}, "path": "semgrep/tests/e2e/snapshots/test_rule_parser/test_rule_parser__failure__error_messages/bad2/error.txt", "diffHunk": "@@ -1,2 +1,12 @@\n-rules/syntax/bad2.yaml has an invalid top-level rule key {'pattern-inside'} at rule id eqeq-is-bad, can only have: ['equivalences', 'fix', 'id', 'languages', 'message', 'metadata', 'paths', 'pattern', 'pattern-either', 'pattern-regex', 'patterns', 'severity']\n+\u001b[31merror\u001b[39m: extra top-level key\n+  --> rules/syntax/bad2.yaml:3\n+\u001b[94m1 | \u001b[39mrules:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNTQ1Mg=="}, "originalCommit": {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0Njk3NA==", "bodyText": "I think we should be consistent. I remember a previous PR stripping out color codes when outputing to a file or was that just an early version of this PR?", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438346974", "createdAt": "2020-06-10T19:05:44Z", "author": {"login": "brendongo"}, "path": "semgrep/tests/e2e/snapshots/test_rule_parser/test_rule_parser__failure__error_messages/bad2/error.txt", "diffHunk": "@@ -1,2 +1,12 @@\n-rules/syntax/bad2.yaml has an invalid top-level rule key {'pattern-inside'} at rule id eqeq-is-bad, can only have: ['equivalences', 'fix', 'id', 'languages', 'message', 'metadata', 'paths', 'pattern', 'pattern-either', 'pattern-regex', 'patterns', 'severity']\n+\u001b[31merror\u001b[39m: extra top-level key\n+  --> rules/syntax/bad2.yaml:3\n+\u001b[94m1 | \u001b[39mrules:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNTQ1Mg=="}, "originalCommit": {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5ODI0Ng==", "bodyText": "I've readded output stripping & test with and without color.", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438398246", "createdAt": "2020-06-10T20:46:02Z", "author": {"login": "rcoh"}, "path": "semgrep/tests/e2e/snapshots/test_rule_parser/test_rule_parser__failure__error_messages/bad2/error.txt", "diffHunk": "@@ -1,2 +1,12 @@\n-rules/syntax/bad2.yaml has an invalid top-level rule key {'pattern-inside'} at rule id eqeq-is-bad, can only have: ['equivalences', 'fix', 'id', 'languages', 'message', 'metadata', 'paths', 'pattern', 'pattern-either', 'pattern-regex', 'patterns', 'severity']\n+\u001b[31merror\u001b[39m: extra top-level key\n+  --> rules/syntax/bad2.yaml:3\n+\u001b[94m1 | \u001b[39mrules:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNTQ1Mg=="}, "originalCommit": {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDU2ODAxOnYy", "diffSide": "RIGHT", "path": "semgrep/tests/e2e/rules/syntax/missing-toplevel.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowODo0OVrOGiAsQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowODo0OVrOGiAsQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNjA5OQ==", "bodyText": "Can you add a comment/modify the message to mention what top level key is missing", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438316099", "createdAt": "2020-06-10T18:08:49Z", "author": {"login": "brendongo"}, "path": "semgrep/tests/e2e/rules/syntax/missing-toplevel.yaml", "diffHunk": "@@ -0,0 +1,14 @@\n+rule:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDU2OTE1OnYy", "diffSide": "RIGHT", "path": "semgrep/tests/e2e/rules/syntax/missing-field.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowOToxMlrOGiAtEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowOToxMlrOGiAtEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNjMwNA==", "bodyText": "Can you add a comment/modify message field to mention what field is missing", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438316304", "createdAt": "2020-06-10T18:09:12Z", "author": {"login": "brendongo"}, "path": "semgrep/tests/e2e/rules/syntax/missing-field.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+rules:\n+- id: flask-secure-set-cookie\n+  languages: [python]\n+  patterns:\n+    - pattern-not: |\n+        flask.response.set_cookie(..., httponly=True, secure=True,...)\n+    - pattern: |\n+        flask.response.set_cookie(....)\n+  message: |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDU3OTE1OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/semgrep_main.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODoxMjowNFrOGiAzoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODoxMjowNFrOGiAzoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNzk4NA==", "bodyText": "Can you create Issues for TODOs instead of having an inline todo", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438317984", "createdAt": "2020-06-10T18:12:04Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/semgrep_main.py", "diffHunk": "@@ -43,14 +45,27 @@ def validate_single_rule(config_id: str, rule_yaml: YamlTree) -> Optional[Rule]:\n     rule_keys = set(rule.keys())\n     if not rule_keys.issuperset(YAML_MUST_HAVE_KEYS):\n         missing_keys = YAML_MUST_HAVE_KEYS - rule_keys\n+        # TODO: return the error messages so we can emit nice JSON errors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDU5MDUxOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/error.py", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODoxNToyOVrOGiA7CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowNTo1OVrOGiCldA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxOTg4MQ==", "bodyText": "Better Named SemgrepRuleFormatError or something more specific. Current name implies it can be any error with context but it only applies to rule format errors.", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438319881", "createdAt": "2020-06-10T18:15:29Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -32,3 +44,108 @@ class InvalidPatternNameError(SemgrepError):\n \n class UnknownOperatorError(SemgrepError):\n     pass\n+\n+\n+class ErrorWithContext(SemgrepError):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMjkxNA==", "bodyText": "I'm also going to use the same error to display errors from semgrep-core in the code", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438322914", "createdAt": "2020-06-10T18:21:01Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -32,3 +44,108 @@ class InvalidPatternNameError(SemgrepError):\n \n class UnknownOperatorError(SemgrepError):\n     pass\n+\n+\n+class ErrorWithContext(SemgrepError):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxOTg4MQ=="}, "originalCommit": {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMzA3Nw==", "bodyText": "maybe ErrorWithSpan?", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438323077", "createdAt": "2020-06-10T18:21:17Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -32,3 +44,108 @@ class InvalidPatternNameError(SemgrepError):\n \n class UnknownOperatorError(SemgrepError):\n     pass\n+\n+\n+class ErrorWithContext(SemgrepError):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxOTg4MQ=="}, "originalCommit": {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0MjYwMg==", "bodyText": "what kind of errors from semgrep-core?", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438342602", "createdAt": "2020-06-10T18:57:07Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -32,3 +44,108 @@ class InvalidPatternNameError(SemgrepError):\n \n class UnknownOperatorError(SemgrepError):\n     pass\n+\n+\n+class ErrorWithContext(SemgrepError):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxOTg4MQ=="}, "originalCommit": {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NzEyNA==", "bodyText": "invalid patterns & parse errors on ASTs", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438347124", "createdAt": "2020-06-10T19:05:59Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -32,3 +44,108 @@ class InvalidPatternNameError(SemgrepError):\n \n class UnknownOperatorError(SemgrepError):\n     pass\n+\n+\n+class ErrorWithContext(SemgrepError):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxOTg4MQ=="}, "originalCommit": {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDYwMzk4OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/error.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODoxOTozN1rOGiBD1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODoxOTozN1rOGiBD1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMjEzMw==", "bodyText": "Top level comment on what each arg means would be helpful", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438322133", "createdAt": "2020-06-10T18:19:37Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -32,3 +44,108 @@ class InvalidPatternNameError(SemgrepError):\n \n class UnknownOperatorError(SemgrepError):\n     pass\n+\n+\n+class ErrorWithContext(SemgrepError):\n+    \"\"\"\n+    Error which will print context from the Span. You should provide the most specific span possible,\n+    eg. if the error is an invalid key, provide exactly the span for that key. You can then expand what's printed\n+    with span.with_context(...)\n+    \"\"\"\n+\n+    def __init__(\n+        self,\n+        short_msg: str,\n+        long_msg: Optional[str],\n+        level: str,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4561, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}