{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MjA4Njc0", "number": 1078, "title": "Fix bug & add nice error for null YAML values", "bodyText": "", "createdAt": "2020-06-19T16:59:00Z", "url": "https://github.com/returntocorp/semgrep/pull/1078", "merged": true, "mergeCommit": {"oid": "36809ea668910ddf3c74efc60a5fb27253551c83"}, "closed": true, "closedAt": "2020-06-22T19:26:10Z", "author": {"login": "rcoh"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcs2HfGABqjM0NjMyNjcwMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABct0GAhAFqTQzNTEyMjE5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6351b2a42d165402782823fc23c3801ead8314f1", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/6351b2a42d165402782823fc23c3801ead8314f1", "committedDate": "2020-06-19T16:57:48Z", "message": "Fix bug & add nice error for null YAML values"}, "afterCommit": {"oid": "8afc08033210b3584dcb97d5958fe62b87cbc31d", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/8afc08033210b3584dcb97d5958fe62b87cbc31d", "committedDate": "2020-06-19T17:01:39Z", "message": "Fix bug & add nice error for null YAML values"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8afc08033210b3584dcb97d5958fe62b87cbc31d", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/8afc08033210b3584dcb97d5958fe62b87cbc31d", "committedDate": "2020-06-19T17:01:39Z", "message": "Fix bug & add nice error for null YAML values"}, "afterCommit": {"oid": "c8312e84a80c090868d8bfbb92678c83caec92ee", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/c8312e84a80c090868d8bfbb92678c83caec92ee", "committedDate": "2020-06-19T17:07:22Z", "message": "Fix bug & add nice error for null YAML values"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8312e84a80c090868d8bfbb92678c83caec92ee", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/c8312e84a80c090868d8bfbb92678c83caec92ee", "committedDate": "2020-06-19T17:07:22Z", "message": "Fix bug & add nice error for null YAML values"}, "afterCommit": {"oid": "39742ddddff5209519ea52bbb533a511e87ce422", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/39742ddddff5209519ea52bbb533a511e87ce422", "committedDate": "2020-06-19T17:08:39Z", "message": "Fix bug & add nice error for null YAML values"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjY0MTgy", "url": "https://github.com/returntocorp/semgrep/pull/1078#pullrequestreview-434264182", "createdAt": "2020-06-19T18:16:30Z", "commit": {"oid": "39742ddddff5209519ea52bbb533a511e87ce422"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxNjozMFrOGmdjpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoyMjoxMFrOGmdsyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzMzNA==", "bodyText": "I would move this up to the top.", "url": "https://github.com/returntocorp/semgrep/pull/1078#discussion_r442983334", "createdAt": "2020-06-19T18:16:30Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -224,9 +231,22 @@ class YamlMap:\n \n     def __init__(self, internal: Dict[YamlTree[str], YamlTree]):\n         self._internal = internal\n+        for k, v in self._internal.items():\n+            if v.value is None:\n+                from semgrep.error import InvalidRuleSchemaError", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39742ddddff5209519ea52bbb533a511e87ce422"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NTE1MQ==", "bodyText": "Is this so we can handle the None case later? Can we handle it here rather than pass the value along and deal with it later?", "url": "https://github.com/returntocorp/semgrep/pull/1078#discussion_r442985151", "createdAt": "2020-06-19T18:21:02Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -185,10 +186,16 @@ def unroll(self) -> YamlValue:\n             return {str(k.unroll()): v.unroll() for k, v in self.value.items()}\n         elif isinstance(self.value, YamlTree):\n             return self.value.unroll()\n-        elif isinstance(self.value, str) or isinstance(self.value, int):\n+        elif (\n+            isinstance(self.value, str)\n+            or isinstance(self.value, int)\n+            or self.value is None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39742ddddff5209519ea52bbb533a511e87ce422"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NTQ2Ng==", "bodyText": "Was this unused?", "url": "https://github.com/returntocorp/semgrep/pull/1078#discussion_r442985466", "createdAt": "2020-06-19T18:21:48Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/config_resolver.py", "diffHunk": "@@ -170,7 +170,6 @@ def load_config_from_local_path(\n             raise SemgrepError(\n                 f\"unable to find a config; path `{loc}` does not exist{addendum}\"\n             )\n-    raise Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39742ddddff5209519ea52bbb533a511e87ce422"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NTY3NQ==", "bodyText": "This looks unintentional.", "url": "https://github.com/returntocorp/semgrep/pull/1078#discussion_r442985675", "createdAt": "2020-06-19T18:22:10Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -19,6 +19,7 @@\n from semgrep.constants import PLEASE_FILE_ISSUE_TEXT\n \n # Do not construct directly, use `SpanBuilder().add_source`\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39742ddddff5209519ea52bbb533a511e87ce422"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a526d8436de677a714cbf63590e9115537ff2bea", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/a526d8436de677a714cbf63590e9115537ff2bea", "committedDate": "2020-06-22T16:39:05Z", "message": "Fix bug & add nice error for null YAML values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9d9cd7cc89fb0773aed605b2949faa9580e5ebe", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/f9d9cd7cc89fb0773aed605b2949faa9580e5ebe", "committedDate": "2020-06-22T16:39:05Z", "message": "Fix extra newline, clarify comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b0ff9062c5fd1b74c3ef33283dc44feaea24b43", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/9b0ff9062c5fd1b74c3ef33283dc44feaea24b43", "committedDate": "2020-06-22T16:39:05Z", "message": "Fix extra newline, reorder constructor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "044c01c49bd93f7d3f080a3e657a7213a7ef7648", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/044c01c49bd93f7d3f080a3e657a7213a7ef7648", "committedDate": "2020-06-19T18:34:05Z", "message": "Fix extra newline, reorder constructor"}, "afterCommit": {"oid": "1d5f4d418cb01eaff22dbec374e2251df37cca25", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/1d5f4d418cb01eaff22dbec374e2251df37cca25", "committedDate": "2020-06-22T17:06:14Z", "message": "Never allow null values anywhere in Semgrep YAML"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1526c39988bf164e9dd20afcd0494f532f70f141", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/1526c39988bf164e9dd20afcd0494f532f70f141", "committedDate": "2020-06-22T17:11:48Z", "message": "Never allow null values anywhere in Semgrep YAML"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d5f4d418cb01eaff22dbec374e2251df37cca25", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/1d5f4d418cb01eaff22dbec374e2251df37cca25", "committedDate": "2020-06-22T17:06:14Z", "message": "Never allow null values anywhere in Semgrep YAML"}, "afterCommit": {"oid": "1526c39988bf164e9dd20afcd0494f532f70f141", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/1526c39988bf164e9dd20afcd0494f532f70f141", "committedDate": "2020-06-22T17:11:48Z", "message": "Never allow null values anywhere in Semgrep YAML"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTIyMTkw", "url": "https://github.com/returntocorp/semgrep/pull/1078#pullrequestreview-435122190", "createdAt": "2020-06-22T17:13:03Z", "commit": {"oid": "1d5f4d418cb01eaff22dbec374e2251df37cca25"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxNDoxMFrOGnJ2nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxNDoxMFrOGnJ2nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwOTA4NQ==", "bodyText": "I would move this to the top of the file. It's nice to have all your imports in one place at the top vs. sprinkled throughout.", "url": "https://github.com/returntocorp/semgrep/pull/1078#discussion_r443709085", "createdAt": "2020-06-22T17:14:10Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -258,12 +291,26 @@ def parse_yaml_preserve_spans(contents: str, filename: Optional[str]) -> YamlTre\n     parse yaml into a YamlTree object. The resulting spans are tracked in SourceTracker\n     so they can be used later when constructing error messages or displaying context.\n     \"\"\"\n-    # this uses the `RoundTripConstructor` which inherits from `SafeConstructor`\n     source_hash = SourceTracker.add_source(contents)\n \n+    # this uses the `RoundTripConstructor` which inherits from `SafeConstructor`\n     class SpanPreservingRuamelConstructor(RoundTripConstructor):\n         def construct_object(self, node: Node, deep: bool = False) -> YamlTree:\n             r = super().construct_object(node, deep)\n+            if r is None:\n+                from semgrep.error import InvalidRuleSchemaError", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1526c39988bf164e9dd20afcd0494f532f70f141"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1581, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}