{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMDYzOTgz", "number": 619, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoyMDo1NFrOD4QClA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoyNzowOVrOD4QGbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzA5NjUyOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/cli.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoyMDo1NVrOGO-p3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoyOTo0OVrOGO-zOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1OTc3NA==", "bodyText": "Do we want this to be in a separate file from the config?", "url": "https://github.com/returntocorp/semgrep/pull/619#discussion_r418359774", "createdAt": "2020-05-01T00:20:55Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/cli.py", "diffHunk": "@@ -134,6 +134,9 @@ def cli() -> None:\n         help=\"Apply the autofix patches. WARNING: data loss can occur with this flag. Make sure your files are stored in a version control system.\",\n         action=\"store_true\",\n     )\n+    output.add_argument(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78f21bf10e98af271b5e10dcab5a5712ac10e8b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MTc2Mw==", "bodyText": "I don't think this is wired to anything so can probably do without a cli arg for now?", "url": "https://github.com/returntocorp/semgrep/pull/619#discussion_r418361763", "createdAt": "2020-05-01T00:28:27Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/cli.py", "diffHunk": "@@ -134,6 +134,9 @@ def cli() -> None:\n         help=\"Apply the autofix patches. WARNING: data loss can occur with this flag. Make sure your files are stored in a version control system.\",\n         action=\"store_true\",\n     )\n+    output.add_argument(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1OTc3NA=="}, "originalCommit": {"oid": "d78f21bf10e98af271b5e10dcab5a5712ac10e8b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MjE3MQ==", "bodyText": "Oh, yeah, I forgot to remove it. \ud83d\ude05", "url": "https://github.com/returntocorp/semgrep/pull/619#discussion_r418362171", "createdAt": "2020-05-01T00:29:49Z", "author": {"login": "minusworld"}, "path": "semgrep/semgrep/cli.py", "diffHunk": "@@ -134,6 +134,9 @@ def cli() -> None:\n         help=\"Apply the autofix patches. WARNING: data loss can occur with this flag. Make sure your files are stored in a version control system.\",\n         action=\"store_true\",\n     )\n+    output.add_argument(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1OTc3NA=="}, "originalCommit": {"oid": "d78f21bf10e98af271b5e10dcab5a5712ac10e8b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzEwMTY4OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/core_runner.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoyNDoyMlrOGO-tQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMDozMVrOGO-0Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MDY0MA==", "bodyText": "Can we use with context similar to line 143 below? So we dont have to remember to close.", "url": "https://github.com/returntocorp/semgrep/pull/619#discussion_r418360640", "createdAt": "2020-05-01T00:24:22Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -95,6 +118,25 @@ def _run_rules(\n         outputs: List[PatternMatch] = []  # multiple invocations per language\n         errors: List[Any] = []\n \n+        # This will need to be addressed in the future. Since we flatten all the patterns,\n+        # there's no way to tell semgrep which equivalences apply to which rules.\n+        # So, my approach here is a naive implementation which likewise flattens all equivalences...\n+        # Here there be dragons.... :-(\n+        #  .>   )\\;`a__\n+        # (  _ _)/ /-.\" ~~\n+        #  `( )_ )/\n+        #   <_  <_ sb/dwb\n+        equivalences = self._flatten_all_equivalences(rules)\n+        if equivalences:\n+            equiv_fout = tempfile.NamedTemporaryFile(\"w\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78f21bf10e98af271b5e10dcab5a5712ac10e8b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MjQxNA==", "bodyText": "Sure; I went with this method because I thought it would be easier to read than two separate with contexts. I'll fix it up.", "url": "https://github.com/returntocorp/semgrep/pull/619#discussion_r418362414", "createdAt": "2020-05-01T00:30:31Z", "author": {"login": "minusworld"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -95,6 +118,25 @@ def _run_rules(\n         outputs: List[PatternMatch] = []  # multiple invocations per language\n         errors: List[Any] = []\n \n+        # This will need to be addressed in the future. Since we flatten all the patterns,\n+        # there's no way to tell semgrep which equivalences apply to which rules.\n+        # So, my approach here is a naive implementation which likewise flattens all equivalences...\n+        # Here there be dragons.... :-(\n+        #  .>   )\\;`a__\n+        # (  _ _)/ /-.\" ~~\n+        #  `( )_ )/\n+        #   <_  <_ sb/dwb\n+        equivalences = self._flatten_all_equivalences(rules)\n+        if equivalences:\n+            equiv_fout = tempfile.NamedTemporaryFile(\"w\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MDY0MA=="}, "originalCommit": {"oid": "d78f21bf10e98af271b5e10dcab5a5712ac10e8b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzEwNjM2OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/rule.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoyNzowOVrOGO-v6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozMTo0NVrOGO-1vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MTMyMQ==", "bodyText": "Would it make more sense for this to return a list of Equivalence objects?", "url": "https://github.com/returntocorp/semgrep/pull/619#discussion_r418361321", "createdAt": "2020-05-01T00:27:09Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/rule.py", "diffHunk": "@@ -129,6 +129,10 @@ def expression(self) -> BooleanRuleExpression:\n     def fix(self) -> Optional[str]:\n         return self._raw.get(\"fix\")\n \n+    @property\n+    def equivalences(self) -> Dict[str, str]:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78f21bf10e98af271b5e10dcab5a5712ac10e8b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MjgxNA==", "bodyText": "Probably. I mimicked how it's done for Pattern; which means they don't actually turn into Equivalences until later on. I'll give it another look over to see if it makes sense to use Equivalences here", "url": "https://github.com/returntocorp/semgrep/pull/619#discussion_r418362814", "createdAt": "2020-05-01T00:31:45Z", "author": {"login": "minusworld"}, "path": "semgrep/semgrep/rule.py", "diffHunk": "@@ -129,6 +129,10 @@ def expression(self) -> BooleanRuleExpression:\n     def fix(self) -> Optional[str]:\n         return self._raw.get(\"fix\")\n \n+    @property\n+    def equivalences(self) -> Dict[str, str]:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MTMyMQ=="}, "originalCommit": {"oid": "d78f21bf10e98af271b5e10dcab5a5712ac10e8b"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4776, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}