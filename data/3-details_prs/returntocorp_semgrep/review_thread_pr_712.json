{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0ODYyMzEy", "number": 712, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODo1ODo0OFrOD6YRCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjo1MjozOFrOD6ctCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTQxNTc5OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/semgrep_types.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODo1ODo0OFrOGSMEhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODo1ODo0OFrOGSMEhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyNTMxOQ==", "bodyText": "I'll reword this", "url": "https://github.com/returntocorp/semgrep/pull/712#discussion_r421725319", "createdAt": "2020-05-07T18:58:48Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/semgrep_types.py", "diffHunk": "@@ -118,9 +119,42 @@ def pattern_names_for_operators(operators: List[Operator]) -> List[str]:\n class Range(NamedTuple):\n     start: int\n     end: int\n+    vars: Mapping[str, Any]\n \n     def is_enclosing_or_eq(self, other_range: \"Range\") -> bool:\n-        return self.start <= other_range.start and other_range.end <= self.end\n+        return (\n+            self.start <= other_range.start\n+            and other_range.end <= self.end\n+            and self.vars_match(other_range)\n+        )\n+\n+    def vars_match(self, rhs: \"Range\") -> bool:\n+        \"\"\"\n+        Returns true if and only if all metavariables that match as variable nodes in either", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "561dc9f0302a77b89bb3023fcbfcd257e7d134f2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTQ0NDkwOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/semgrep_types.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOTowNjo1N1rOGSMWWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToxMDowOVrOGSQZZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyOTg4MQ==", "bodyText": "should this be a property of PatternMatch rather than Range?", "url": "https://github.com/returntocorp/semgrep/pull/712#discussion_r421729881", "createdAt": "2020-05-07T19:06:57Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/semgrep_types.py", "diffHunk": "@@ -118,9 +119,42 @@ def pattern_names_for_operators(operators: List[Operator]) -> List[str]:\n class Range(NamedTuple):\n     start: int\n     end: int\n+    vars: Mapping[str, Any]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "561dc9f0302a77b89bb3023fcbfcd257e7d134f2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5NjE5OA==", "bodyText": "I need it for the equality and inclusion operations, so I'd have to call it all over the place if I did that. I think it makes more sense for an object to declare its own equality.", "url": "https://github.com/returntocorp/semgrep/pull/712#discussion_r421796198", "createdAt": "2020-05-07T21:10:09Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/semgrep_types.py", "diffHunk": "@@ -118,9 +119,42 @@ def pattern_names_for_operators(operators: List[Operator]) -> List[str]:\n class Range(NamedTuple):\n     start: int\n     end: int\n+    vars: Mapping[str, Any]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyOTg4MQ=="}, "originalCommit": {"oid": "561dc9f0302a77b89bb3023fcbfcd257e7d134f2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjE0MjgzOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/semgrep_types.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjo1MjozOFrOGSTBag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzozMjowM1rOGST0BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTIxMA==", "bodyText": "Do we need to do a membership check if we are looping over a set intersection?", "url": "https://github.com/returntocorp/semgrep/pull/712#discussion_r421839210", "createdAt": "2020-05-07T22:52:38Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/semgrep_types.py", "diffHunk": "@@ -118,9 +119,42 @@ def pattern_names_for_operators(operators: List[Operator]) -> List[str]:\n class Range(NamedTuple):\n     start: int\n     end: int\n+    vars: Mapping[str, Any]\n \n     def is_enclosing_or_eq(self, other_range: \"Range\") -> bool:\n-        return self.start <= other_range.start and other_range.end <= self.end\n+        return (\n+            self.start <= other_range.start\n+            and other_range.end <= self.end\n+            and self.vars_match(other_range)\n+        )\n+\n+    def vars_match(self, rhs: \"Range\") -> bool:\n+        \"\"\"\n+        Returns true if and only if all metavariables in both this and the other Range refer to the same\n+        variables (if variable nodes), in the same scope, or the same expressions (if expression nodes).\n+\n+        That is, if two patterns define a \"$X\", and $X refers to a variable in one pattern, then\n+        $X must refer to the same variable in both patterns\n+        :param rhs: The other Range\n+        \"\"\"\n+        to_match = set(self.vars.keys()).intersection(rhs.vars.keys())\n+        return all(\n+            v in self.vars and v in rhs.vars and self.vars[v] == rhs.vars[v]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e56655ce8279ae0fd75199ae1e8d11e87e0c975"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1MjE2NQ==", "bodyText": "oh yeah that's stale", "url": "https://github.com/returntocorp/semgrep/pull/712#discussion_r421852165", "createdAt": "2020-05-07T23:32:03Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/semgrep_types.py", "diffHunk": "@@ -118,9 +119,42 @@ def pattern_names_for_operators(operators: List[Operator]) -> List[str]:\n class Range(NamedTuple):\n     start: int\n     end: int\n+    vars: Mapping[str, Any]\n \n     def is_enclosing_or_eq(self, other_range: \"Range\") -> bool:\n-        return self.start <= other_range.start and other_range.end <= self.end\n+        return (\n+            self.start <= other_range.start\n+            and other_range.end <= self.end\n+            and self.vars_match(other_range)\n+        )\n+\n+    def vars_match(self, rhs: \"Range\") -> bool:\n+        \"\"\"\n+        Returns true if and only if all metavariables in both this and the other Range refer to the same\n+        variables (if variable nodes), in the same scope, or the same expressions (if expression nodes).\n+\n+        That is, if two patterns define a \"$X\", and $X refers to a variable in one pattern, then\n+        $X must refer to the same variable in both patterns\n+        :param rhs: The other Range\n+        \"\"\"\n+        to_match = set(self.vars.keys()).intersection(rhs.vars.keys())\n+        return all(\n+            v in self.vars and v in rhs.vars and self.vars[v] == rhs.vars[v]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTIxMA=="}, "originalCommit": {"oid": "8e56655ce8279ae0fd75199ae1e8d11e87e0c975"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4692, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}