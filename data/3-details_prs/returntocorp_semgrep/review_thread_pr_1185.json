{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyOTgzNjIx", "number": 1185, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo1NToyMFrOEKqIVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo1ODo1OVrOEKqMew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjExNDc5OnYy", "diffSide": "RIGHT", "path": "semgrep-core/bin/Main.ml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo1NToyMFrOGr1EQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo1OTowNFrOGr1K4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMTM5Mw==", "bodyText": "Should we store just timeouts or any parse error as well?", "url": "https://github.com/returntocorp/semgrep/pull/1185#discussion_r448611393", "createdAt": "2020-07-01T20:55:20Z", "author": {"login": "brendongo"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -380,8 +382,20 @@ let parse_generic lang file =\n   Naming_AST.resolve lang ast;\n   Constant_propagation.propagate lang ast;\n   (*e: [[Main_semgrep_core.parse_generic()]] resolve names in the AST *)\n-  ast\n+  Left ast\n+ (* This is a bit subtle, but we now store in the cache whether we had\n+  * a timeout on this file. Indeed, semgrep now calls semgrep-core\n+  * per rule, and if one file timeout during parsing, it would timeout\n+  * for each rule, but we don't want to wait each time 5sec for each rule.\n+  * So here we store the exn in the cache, and below we reraise it\n+  * after we got it back from the cache.\n+  *)\n+ with Timeout -> Right Timeout", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "832a53650528a479c0eb0242068db7c517beff06"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMzA4OA==", "bodyText": "yep, maybe better cache any exn.\nI think only when we got a timeout things are really annoying performance wise because we\nwill do n times 5s, but it's true that maybe sometimes parsing takes only 4s but end up in a parse error.\nI'll change the diff.", "url": "https://github.com/returntocorp/semgrep/pull/1185#discussion_r448613088", "createdAt": "2020-07-01T20:59:04Z", "author": {"login": "aryx"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -380,8 +382,20 @@ let parse_generic lang file =\n   Naming_AST.resolve lang ast;\n   Constant_propagation.propagate lang ast;\n   (*e: [[Main_semgrep_core.parse_generic()]] resolve names in the AST *)\n-  ast\n+  Left ast\n+ (* This is a bit subtle, but we now store in the cache whether we had\n+  * a timeout on this file. Indeed, semgrep now calls semgrep-core\n+  * per rule, and if one file timeout during parsing, it would timeout\n+  * for each rule, but we don't want to wait each time 5sec for each rule.\n+  * So here we store the exn in the cache, and below we reraise it\n+  * after we got it back from the cache.\n+  *)\n+ with Timeout -> Right Timeout", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMTM5Mw=="}, "originalCommit": {"oid": "832a53650528a479c0eb0242068db7c517beff06"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjEyNTM5OnYy", "diffSide": "RIGHT", "path": "semgrep-core/bin/Main.ml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo1ODo1OVrOGr1KuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMTowNDoyNlrOGr1TxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMzA0OQ==", "bodyText": "What does Left and Right do?", "url": "https://github.com/returntocorp/semgrep/pull/1185#discussion_r448613049", "createdAt": "2020-07-01T20:58:59Z", "author": {"login": "brendongo"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -380,8 +382,20 @@ let parse_generic lang file =\n   Naming_AST.resolve lang ast;\n   Constant_propagation.propagate lang ast;\n   (*e: [[Main_semgrep_core.parse_generic()]] resolve names in the AST *)\n-  ast\n+  Left ast", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "832a53650528a479c0eb0242068db7c517beff06"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxNTM2NQ==", "bodyText": "Left and Right are constructors defined in pfff/.../Common.ml\nThey are a pretty standard idiom in OCaml and haskell to represent an alternative between 2 types.\nIt's defined as  type ('a, 'b) either = Left of 'a | Right of 'b", "url": "https://github.com/returntocorp/semgrep/pull/1185#discussion_r448615365", "createdAt": "2020-07-01T21:04:26Z", "author": {"login": "aryx"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -380,8 +382,20 @@ let parse_generic lang file =\n   Naming_AST.resolve lang ast;\n   Constant_propagation.propagate lang ast;\n   (*e: [[Main_semgrep_core.parse_generic()]] resolve names in the AST *)\n-  ast\n+  Left ast", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMzA0OQ=="}, "originalCommit": {"oid": "832a53650528a479c0eb0242068db7c517beff06"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4501, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}