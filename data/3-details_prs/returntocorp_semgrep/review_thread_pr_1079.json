{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MjM5NjY2", "number": 1079, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNzoyNTowMlrOEHTtPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNzoyNTowMlrOEHTtPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDk4MzY1OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/config_resolver.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNzoyNTowMlrOGmngrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxMjo1NVrOGnJ0Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0NjQxMw==", "bodyText": "if you're refactoring this, I think we should fix it to accurately reflect what it's returning (really, just a YAML tree). The caller can attach the config id.", "url": "https://github.com/returntocorp/semgrep/pull/1079#discussion_r443146413", "createdAt": "2020-06-20T17:25:02Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/config_resolver.py", "diffHunk": "@@ -90,37 +90,38 @@ def indent(msg: str) -> str:\n \n def parse_config_at_path(\n     loc: Path, base_path: Optional[Path] = None\n-) -> Dict[str, Optional[YamlTree]]:\n+) -> Dict[str, YamlTree]:\n+    \"\"\"\n+        Assumes file at loc exists\n+    \"\"\"\n     config_id = str(loc)\n     if base_path:\n         config_id = str(loc).replace(str(base_path), \"\")\n-    try:\n-        with loc.open() as f:\n-            return parse_config_string(config_id, f.read(), str(loc))\n-    except FileNotFoundError:\n-        print_error(f\"YAML file at {loc} not found\")\n-        return {str(loc): None}\n+\n+    with loc.open() as f:\n+        return parse_config_string(config_id, f.read(), str(loc))\n \n \n def parse_config_string(\n     config_id: str, contents: str, filename: Optional[str]\n-) -> Dict[str, Optional[YamlTree]]:\n+) -> Dict[str, YamlTree]:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a95621852685ff9cd7a7c1156fbedce65c03ec"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5NTAxNQ==", "bodyText": "We could also have a global outputmanager or a way to access it from anywhere ala logger built-in.", "url": "https://github.com/returntocorp/semgrep/pull/1079#discussion_r443695015", "createdAt": "2020-06-22T16:48:40Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/config_resolver.py", "diffHunk": "@@ -90,37 +90,38 @@ def indent(msg: str) -> str:\n \n def parse_config_at_path(\n     loc: Path, base_path: Optional[Path] = None\n-) -> Dict[str, Optional[YamlTree]]:\n+) -> Dict[str, YamlTree]:\n+    \"\"\"\n+        Assumes file at loc exists\n+    \"\"\"\n     config_id = str(loc)\n     if base_path:\n         config_id = str(loc).replace(str(base_path), \"\")\n-    try:\n-        with loc.open() as f:\n-            return parse_config_string(config_id, f.read(), str(loc))\n-    except FileNotFoundError:\n-        print_error(f\"YAML file at {loc} not found\")\n-        return {str(loc): None}\n+\n+    with loc.open() as f:\n+        return parse_config_string(config_id, f.read(), str(loc))\n \n \n def parse_config_string(\n     config_id: str, contents: str, filename: Optional[str]\n-) -> Dict[str, Optional[YamlTree]]:\n+) -> Dict[str, YamlTree]:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0NjQxMw=="}, "originalCommit": {"oid": "01a95621852685ff9cd7a7c1156fbedce65c03ec"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwODQyNg==", "bodyText": "I'd rather avoid having it be global -- having it be properly scoped enables us to eg. run multiple tests in parallel and keep output contained", "url": "https://github.com/returntocorp/semgrep/pull/1079#discussion_r443708426", "createdAt": "2020-06-22T17:12:55Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/config_resolver.py", "diffHunk": "@@ -90,37 +90,38 @@ def indent(msg: str) -> str:\n \n def parse_config_at_path(\n     loc: Path, base_path: Optional[Path] = None\n-) -> Dict[str, Optional[YamlTree]]:\n+) -> Dict[str, YamlTree]:\n+    \"\"\"\n+        Assumes file at loc exists\n+    \"\"\"\n     config_id = str(loc)\n     if base_path:\n         config_id = str(loc).replace(str(base_path), \"\")\n-    try:\n-        with loc.open() as f:\n-            return parse_config_string(config_id, f.read(), str(loc))\n-    except FileNotFoundError:\n-        print_error(f\"YAML file at {loc} not found\")\n-        return {str(loc): None}\n+\n+    with loc.open() as f:\n+        return parse_config_string(config_id, f.read(), str(loc))\n \n \n def parse_config_string(\n     config_id: str, contents: str, filename: Optional[str]\n-) -> Dict[str, Optional[YamlTree]]:\n+) -> Dict[str, YamlTree]:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0NjQxMw=="}, "originalCommit": {"oid": "01a95621852685ff9cd7a7c1156fbedce65c03ec"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4623, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}