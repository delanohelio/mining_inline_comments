{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMzE3NjEw", "number": 833, "title": "Add a bit in the README about the Deep Expression Operator", "bodyText": "Closes #819.", "createdAt": "2020-05-26T16:32:19Z", "url": "https://github.com/returntocorp/semgrep/pull/833", "merged": true, "mergeCommit": {"oid": "5619694f759fae36dfb366ae1700c0e601e26cb4"}, "closed": true, "closedAt": "2020-05-28T20:15:29Z", "author": {"login": "minusworld"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclHTTbAH2gAyNDIzMzE3NjEwOmRjNTkwNmZjZjk0YzcyYjQ0Mjg4NjJlMmEwZTZmY2E0OTYyZTk0YTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclwpIbgH2gAyNDIzMzE3NjEwOmFjOGYyMjYwMDliMmY1YjdjZWRjZDAyOTY2N2E1ZDBlNDE4NDFkYzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dc5906fcf94c72b4428862e2a0e6fca4962e94a6", "author": {"user": {"login": "minusworld", "name": "Grayson H"}}, "url": "https://github.com/returntocorp/semgrep/commit/dc5906fcf94c72b4428862e2a0e6fca4962e94a6", "committedDate": "2020-05-26T16:31:42Z", "message": "Add a bit in the README about the Deep Expression Operator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d928d96a2cb220976c13aff878f219ef6adf90a", "author": {"user": {"login": "minusworld", "name": "Grayson H"}}, "url": "https://github.com/returntocorp/semgrep/commit/9d928d96a2cb220976c13aff878f219ef6adf90a", "committedDate": "2020-05-27T01:19:31Z", "message": "Move bit about deep expression operator to docs/pattern-features.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTYwNDgx", "url": "https://github.com/returntocorp/semgrep/pull/833#pullrequestreview-418960481", "createdAt": "2020-05-27T08:18:29Z", "commit": {"oid": "9d928d96a2cb220976c13aff878f219ef6adf90a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoxODoyOVrOGa-bRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODoxODoyOVrOGa-bRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzODk1MA==", "bodyText": "or more generally in any expression context.", "url": "https://github.com/returntocorp/semgrep/pull/833#discussion_r430938950", "createdAt": "2020-05-27T08:18:29Z", "author": {"login": "aryx"}, "path": "docs/pattern-features.md", "diffHunk": "@@ -227,6 +228,29 @@ pattern: $X = 1 + 2 + ...\n foo = 1 + 2 + 3 + 4\n ```\n \n+### Deep Expression Operator\n+\n+You may want to match an expression that could be nested deep within another expression. An example of this is looking for a pattern anywhere within an if statement. To do this, use the deep expression operator: `<... [your_pattern] ...>`. This will match your pattern in the current expression context and recursively in any subexpressions.\n+\n+For example, this pattern:\n+\n+```yaml\n+if <... $USER.is_admin() ...>:\n+  ...\n+```\n+\n+will match:\n+\n+```python\n+if user.authenticated() and user.is_admin() and user.has_group(gid):\n+  ...\n+```\n+\n+The deep expression operator will work in:\n+* if statements -- `if <... $X ...>:`\n+* nested calls -- `sql.query(<... $X ...>)`\n+* operands of a binary expression -- `\"...\" + <... $X ...>`\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d928d96a2cb220976c13aff878f219ef6adf90a"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MjM4MzM4", "url": "https://github.com/returntocorp/semgrep/pull/833#pullrequestreview-419238338", "createdAt": "2020-05-27T14:00:28Z", "commit": {"oid": "9d928d96a2cb220976c13aff878f219ef6adf90a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDowMDoyOFrOGbLleg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDowNzo0NlrOGbL6Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1NDU1NA==", "bodyText": "Nit: we can remove these changes.", "url": "https://github.com/returntocorp/semgrep/pull/833#discussion_r431154554", "createdAt": "2020-05-27T14:00:28Z", "author": {"login": "mschwager"}, "path": "README.md", "diffHunk": "@@ -110,6 +110,8 @@ $FILE = open(...)\n will find all occurrences in your code where the result of an `open()` call is assigned\n to a variable.\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d928d96a2cb220976c13aff878f219ef6adf90a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1NTkyMg==", "bodyText": "Can we change this to the full pattern syntax? E.g.\npattern: |\n    if <... $USER.is_admin() ...>:\n        ...\nI think that will provide users with more context on where they would use this.", "url": "https://github.com/returntocorp/semgrep/pull/833#discussion_r431155922", "createdAt": "2020-05-27T14:02:21Z", "author": {"login": "mschwager"}, "path": "docs/pattern-features.md", "diffHunk": "@@ -227,6 +228,29 @@ pattern: $X = 1 + 2 + ...\n foo = 1 + 2 + 3 + 4\n ```\n \n+### Deep Expression Operator\n+\n+You may want to match an expression that could be nested deep within another expression. An example of this is looking for a pattern anywhere within an if statement. To do this, use the deep expression operator: `<... [your_pattern] ...>`. This will match your pattern in the current expression context and recursively in any subexpressions.\n+\n+For example, this pattern:\n+\n+```yaml\n+if <... $USER.is_admin() ...>:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d928d96a2cb220976c13aff878f219ef6adf90a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1OTg5OQ==", "bodyText": "Good call! Maybe we can provide some more expression contexts where the deep expression operator works, then leave a bullet saying something like \"And any other expression context.\"\nMy concern is that your average engineer won't understand what \"expression context\" means. When I think about docs I try to target my language to something an average, entry-level engineer can understand. I've been thinking about semgrep as \"Static analysis, for everyone\" and we can target that with simplicity, open source, good docs, and self-service as some of our competitive advantages :)", "url": "https://github.com/returntocorp/semgrep/pull/833#discussion_r431159899", "createdAt": "2020-05-27T14:07:46Z", "author": {"login": "mschwager"}, "path": "docs/pattern-features.md", "diffHunk": "@@ -227,6 +228,29 @@ pattern: $X = 1 + 2 + ...\n foo = 1 + 2 + 3 + 4\n ```\n \n+### Deep Expression Operator\n+\n+You may want to match an expression that could be nested deep within another expression. An example of this is looking for a pattern anywhere within an if statement. To do this, use the deep expression operator: `<... [your_pattern] ...>`. This will match your pattern in the current expression context and recursively in any subexpressions.\n+\n+For example, this pattern:\n+\n+```yaml\n+if <... $USER.is_admin() ...>:\n+  ...\n+```\n+\n+will match:\n+\n+```python\n+if user.authenticated() and user.is_admin() and user.has_group(gid):\n+  ...\n+```\n+\n+The deep expression operator will work in:\n+* if statements -- `if <... $X ...>:`\n+* nested calls -- `sql.query(<... $X ...>)`\n+* operands of a binary expression -- `\"...\" + <... $X ...>`\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzODk1MA=="}, "originalCommit": {"oid": "9d928d96a2cb220976c13aff878f219ef6adf90a"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7a939e4157b3c45906cd5660cdd3894c84df2ef", "author": {"user": {"login": "minusworld", "name": "Grayson H"}}, "url": "https://github.com/returntocorp/semgrep/commit/c7a939e4157b3c45906cd5660cdd3894c84df2ef", "committedDate": "2020-05-27T19:15:13Z", "message": "Minor nit changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTM5NTM2", "url": "https://github.com/returntocorp/semgrep/pull/833#pullrequestreview-420139536", "createdAt": "2020-05-28T14:03:02Z", "commit": {"oid": "c7a939e4157b3c45906cd5660cdd3894c84df2ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac8f226009b2f5b7cedcd029667a5d0e41841dc9", "author": {"user": {"login": "minusworld", "name": "Grayson H"}}, "url": "https://github.com/returntocorp/semgrep/commit/ac8f226009b2f5b7cedcd029667a5d0e41841dc9", "committedDate": "2020-05-28T16:41:39Z", "message": "Remove extra whitespace from README"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1588, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}