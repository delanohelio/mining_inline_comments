{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MzkwNTA5", "number": 1332, "title": "Go Struct Order Fix", "bodyText": "fix to the go struct ordering bug, issue #1173 . Added a case to match ellipses on both sides -- this case will match anything, regardless of order. There is an issue where this will match a correct line twice.", "createdAt": "2020-07-22T22:40:03Z", "url": "https://github.com/returntocorp/semgrep/pull/1332", "merged": true, "mergeCommit": {"oid": "54dfdc829deb6b0ec9cc05b2535a95fd8a1dcdbc"}, "closed": true, "closedAt": "2020-07-30T21:39:16Z", "author": {"login": "colleend"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3iubWAH2gAyNDU1MzkwNTA5OmRlNzA0ZDFhZGE4OGY0MzAyY2Y0NmQ2ZDRjNjIxMGQxMmI4OTgzY2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6FJFKAFqTQ1ODcwOTUwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "de704d1ada88f4302cf46d6d4c6210d12b8983cc", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/de704d1ada88f4302cf46d6d4c6210d12b8983cc", "committedDate": "2020-07-22T22:39:24Z", "message": "fix to the go struct ordering bug, issue 1173. Added a case to match ellipses on both sides -- this case will match anything, regardless of order. There is an issue where this will match a correct line twice."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NzA1MjEz", "url": "https://github.com/returntocorp/semgrep/pull/1332#pullrequestreview-454705213", "createdAt": "2020-07-24T08:11:47Z", "commit": {"oid": "de704d1ada88f4302cf46d6d4c6210d12b8983cc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NzA3MDM3", "url": "https://github.com/returntocorp/semgrep/pull/1332#pullrequestreview-454707037", "createdAt": "2020-07-24T08:14:56Z", "commit": {"oid": "de704d1ada88f4302cf46d6d4c6210d12b8983cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODoxNDo1NlrOG2m2iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODoxNDo1NlrOG2m2iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxMjg0MA==", "bodyText": "We don't have any ocaml coding style with @mjambon yet, but I usually try to avoid to use 'open' and prefer to qualify functions used in other modules because it's harder then when you see just  'foo arg' to see to which module it belongs to. You can use IDEs to help, but it still IMHO makes the code slightly harder to read.\nThere are a few exceptions when it's just annoying to qualify the same module again and again. For example I usually do open AST_generic when I know a module will exclusively use entities defined in this AST.", "url": "https://github.com/returntocorp/semgrep/pull/1332#discussion_r459912840", "createdAt": "2020-07-24T08:14:56Z", "author": {"login": "aryx"}, "path": "semgrep-core/matching/Generic_vs_generic.ml", "diffHunk": "@@ -16,6 +16,7 @@\n  *)\n (*e: pad/r2c copyright *)\n open Common\n+open List", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de704d1ada88f4302cf46d6d4c6210d12b8983cc"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NzA3Mzcy", "url": "https://github.com/returntocorp/semgrep/pull/1332#pullrequestreview-454707372", "createdAt": "2020-07-24T08:15:28Z", "commit": {"oid": "de704d1ada88f4302cf46d6d4c6210d12b8983cc"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0OTY3MDc2", "url": "https://github.com/returntocorp/semgrep/pull/1332#pullrequestreview-454967076", "createdAt": "2020-07-24T15:09:49Z", "commit": {"oid": "de704d1ada88f4302cf46d6d4c6210d12b8983cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTowOTo1MFrOG2zIwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTowOTo1MFrOG2zIwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNDExNA==", "bodyText": "Is this trying to get the last element in the list?\nIf so, I think you can do List.nth xsa (List.length xsa - 1).\nI'm also wondering what happens with ellipses in the middle of the list; e.g. ..., a, ..., b, .... I'm wondering if we need some sort of recursive solution here? (cc. @aryx )", "url": "https://github.com/returntocorp/semgrep/pull/1332#discussion_r460114114", "createdAt": "2020-07-24T15:09:50Z", "author": {"login": "nbrahms"}, "path": "semgrep-core/matching/Generic_vs_generic.ml", "diffHunk": "@@ -995,7 +996,17 @@ and m_list__m_argument (xsa: A.argument list) (xsb: A.argument list) =\n   (* dots: ..., can also match no argument *)\n   | [A.Arg (A.Ellipsis _i)], [] ->\n       return ()\n-\n+  (* Fix to issue 1173. Case where there are ellipsis to the left and right of a statement.\n+    * Order should not matter in this case, as we can see from the go structs example.\n+    * However, there is an issue where this will match a correct line twice occasionally.\n+    * Look into m_list_in_any_order for correction in this case. *)\n+   | (A.Arg (A.Ellipsis _i))::xsa, xsb\n+     when let rev_xsa = rev xsa in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de704d1ada88f4302cf46d6d4c6210d12b8983cc"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0OTY4NjA0", "url": "https://github.com/returntocorp/semgrep/pull/1332#pullrequestreview-454968604", "createdAt": "2020-07-24T15:11:47Z", "commit": {"oid": "de704d1ada88f4302cf46d6d4c6210d12b8983cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToxMTo0N1rOG2zNmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToxMTo0N1rOG2zNmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNTM1NA==", "bodyText": "To what extent is our desire to match in any order due to the pattern syntax; vs. the parent AST node?\nI might imagine instead defining two different arg matching paths, using one from, e.g., function argument list, and using the other from object, import, and struct definition lists. cc. @aryx for thoughts here.", "url": "https://github.com/returntocorp/semgrep/pull/1332#discussion_r460115354", "createdAt": "2020-07-24T15:11:47Z", "author": {"login": "nbrahms"}, "path": "semgrep-core/matching/Generic_vs_generic.ml", "diffHunk": "@@ -995,7 +996,17 @@ and m_list__m_argument (xsa: A.argument list) (xsb: A.argument list) =\n   (* dots: ..., can also match no argument *)\n   | [A.Arg (A.Ellipsis _i)], [] ->\n       return ()\n-\n+  (* Fix to issue 1173. Case where there are ellipsis to the left and right of a statement.\n+    * Order should not matter in this case, as we can see from the go structs example.\n+    * However, there is an issue where this will match a correct line twice occasionally.\n+    * Look into m_list_in_any_order for correction in this case. *)\n+   | (A.Arg (A.Ellipsis _i))::xsa, xsb", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de704d1ada88f4302cf46d6d4c6210d12b8983cc"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6e948a3c14655f146fce4fd992420ee87468d0f", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/a6e948a3c14655f146fce4fd992420ee87468d0f", "committedDate": "2020-07-30T19:24:29Z", "message": "Merge branch 'develop' of github.com:returntocorp/semgrep into go_struct_order_bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d75dabb01c6c857d36e27a394be0da4ff7bc40e", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/4d75dabb01c6c857d36e27a394be0da4ff7bc40e", "committedDate": "2020-07-30T19:37:54Z", "message": "tests for pfff struct order fix."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27939d1cb9ac2eb9cb16b0bcdcc8088eda11071f", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/27939d1cb9ac2eb9cb16b0bcdcc8088eda11071f", "committedDate": "2020-07-30T19:41:07Z", "message": "updating Generic vs generic to get rid of changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55c93929c66371dbd83e4d90ef895aa8843873ed", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/55c93929c66371dbd83e4d90ef895aa8843873ed", "committedDate": "2020-07-30T19:42:25Z", "message": "deleting repeated files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e698ab1d4fb42db18c324822dd68dc4286861b18", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/e698ab1d4fb42db18c324822dd68dc4286861b18", "committedDate": "2020-07-30T19:50:35Z", "message": "pulled update to pfff"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NzA5NTA1", "url": "https://github.com/returntocorp/semgrep/pull/1332#pullrequestreview-458709505", "createdAt": "2020-07-30T19:53:08Z", "commit": {"oid": "e698ab1d4fb42db18c324822dd68dc4286861b18"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1363, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}