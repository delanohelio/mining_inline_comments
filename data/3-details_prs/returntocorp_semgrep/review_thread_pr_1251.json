{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MjkxMTUy", "number": 1251, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDozODo1OVrOEN2Stw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDozODo1OVrOEN2Stw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTU2NDcxOnYy", "diffSide": "RIGHT", "path": "semgrep-core/synthesizing/Unit_synthesizer.ml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDozODo1OVrOGwriqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDozODo1OVrOGwriqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5ODIxNw==", "bodyText": "I'll probably want to put this as the error message and not print it out each time", "url": "https://github.com/returntocorp/semgrep/pull/1251#discussion_r453698217", "createdAt": "2020-07-13T14:38:59Z", "author": {"login": "emjin"}, "path": "semgrep-core/synthesizing/Unit_synthesizer.ml", "diffHunk": "@@ -174,28 +174,40 @@ let unittest =\n         let code = Parse_generic.parse_program file in\n         let r = Range.range_of_linecol_spec range file in\n         Naming_AST.resolve lang code;\n-        let check_pats (_, pat) =\n+        let check_pats (str, pat) =\n           try\n             let pattern = Parse_generic.parse_pattern lang pat in\n             let e_opt = Range_to_AST.expr_at_range r code in\n                match e_opt with\n                  | Some e ->\n-                    let matches_with_env = Semgrep_generic.match_any_any pattern (A.E e) in\n-                    (* Debugging note: uses pattern_to_string for convenience, but really should *)\n-                    (* match the code in the given file at the given range *)\n-                    pr2 (AST_generic.show_any (A.E e));\n-                    pr2 (AST_generic.show_any (pattern));\n-                    assert_bool (spf \"pattern:|%s| should match |%s\" pat (PPG.pattern_to_string lang (A.E e)))\n-                    (matches_with_env <> [])\n-                 | None -> failwith (spf \"Couldn't find range %s in %s\" range file)\n+                    let matches_with_env = Semgrep_generic.match_any_any\n+                          pattern (A.E e) in\n+                    (* Debugging note: uses pattern_to_string for convenience,\n+                     * but really should match the code in the given file at\n+                     * the given range *)\n+                    if matches_with_env = []\n+                    then begin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30b34792eb66259ceaa2cfa83ff8ccb2490fca4"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4523, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}