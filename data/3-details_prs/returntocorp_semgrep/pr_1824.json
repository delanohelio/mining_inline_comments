{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNTkxMTkz", "number": 1824, "title": "Add 'metavariable-comparison' frontend to expression eval", "bodyText": "Fixes #1724.\nThings notably out-of-scope for the first iteration of this functionality:\n1.) Multi-language expressions\n2.) Multi-metavariable expressions\nPer (1), let's start small with a language we know well and expand from there as needed. Per (2), we can leverage the logical AND functionality of 'patterns' here instead of multiple metavariables in the same expression. Again, let's start small and iterate as needed.", "createdAt": "2020-10-13T17:13:20Z", "url": "https://github.com/returntocorp/semgrep/pull/1824", "merged": true, "mergeCommit": {"oid": "177aef49e6a3b7aab309fe669527e23f99337cd4"}, "closed": true, "closedAt": "2020-10-19T18:02:08Z", "author": {"login": "mschwager"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSL2X0gFqTUwNzY2MzQzNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUGXRNAH2gAyNTAyNTkxMTkzOjAyOTI1MTBjODJjNjIwNWFhNmEyZWFkY2FmOTFmZTQxMjBjZjUyOGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NjYzNDM3", "url": "https://github.com/returntocorp/semgrep/pull/1824#pullrequestreview-507663437", "createdAt": "2020-10-13T17:14:46Z", "commit": {"oid": "a59a58f9cbf4b9cb719dc833299632b1b0b0e019"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxNDo0NlrOHgxYVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxNTowN1rOHgxZSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNTUyNg==", "bodyText": "I think this may have been unintentionally left in. It makes it difficult to debug this module because it's impossible to set the logger level to DEBUG with this here. Now that we have the --debug flag I think this is no longer necessary, or unintentional.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504125526", "createdAt": "2020-10-13T17:14:46Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -11,13 +11,12 @@\n from typing import Tuple\n \n logger = logging.getLogger(__name__)\n-# disable logging from this module most of the time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59a58f9cbf4b9cb719dc833299632b1b0b0e019"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNTc3MQ==", "bodyText": "This is no longer needed with the jsonschema changes.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504125771", "createdAt": "2020-10-13T17:15:07Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -193,14 +254,6 @@ def _evaluate_single_expression(\n         )\n         return output_ranges\n     elif expression.operator == OPERATORS.METAVARIABLE_REGEX:\n-        if (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59a58f9cbf4b9cb719dc833299632b1b0b0e019"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3Nzk3MDEz", "url": "https://github.com/returntocorp/semgrep/pull/1824#pullrequestreview-507797013", "createdAt": "2020-10-13T20:18:04Z", "commit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoxODowNFrOHg3y0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDozMToxN1rOHg4ZJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzMDYxMA==", "bodyText": "could also be called pattern-where-python-safe", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504230610", "createdAt": "2020-10-13T20:18:04Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -19,6 +19,7 @@ Contents:\n   * [`pattern-either`](configuration-files.md#pattern-either)\n   * [`pattern-regex`](configuration-files.md#pattern-regex)\n   * [`metavariable-regex`](configuration-files.md#metavariable-regex)\n+  * [`metavariable-comparison`](configuration-files.md#metavariable-comparison)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzMjg1MA==", "bodyText": "Maybe the only safe thing people want to express are comparisons, so maybe it's not a bad name but it does not really give room for being more than that. For example some people wanted to check if $X in [1, 42, 57]\nand it's not really a comparison (or maybe it is).", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504232850", "createdAt": "2020-10-13T20:20:18Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -19,6 +19,7 @@ Contents:\n   * [`pattern-either`](configuration-files.md#pattern-either)\n   * [`pattern-regex`](configuration-files.md#pattern-regex)\n   * [`metavariable-regex`](configuration-files.md#metavariable-regex)\n+  * [`metavariable-comparison`](configuration-files.md#metavariable-comparison)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzMDYxMA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNDMwMA==", "bodyText": "maybe say also \"and as opposed to pattern-where-python is guaranteed to be safe and so can be computed without\n--unsafe-eval-do-at-your-own-risk CLI parameter\".", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504234300", "createdAt": "2020-10-13T20:21:39Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNTA1MA==", "bodyText": "why the quote around the metavariable? we don't put quote to express patterns.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504235050", "createdAt": "2020-10-13T20:22:26Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNTQ2OQ==", "bodyText": "same, why the quote? The main interest of yaml is to remove the need for quotes no?", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504235469", "createdAt": "2020-10-13T20:22:51Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNzAzNA==", "bodyText": "the number syntax itself contains the base, why specify the base here?\nOCaml, and I guess Python will be able to read 0xa or 10 or 0o82 or whatever syntax and convert to an internal number.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504237034", "createdAt": "2020-10-13T20:24:54Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.\n+\n+The `metavariable-comparison` operator also takes optional `base: int` and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNzQyOQ==", "bodyText": "again, I don't think we need strip, if the metavariable matches a string, then -eval will do the right thing and allow only operations on strings.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504237429", "createdAt": "2020-10-13T20:25:31Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.\n+\n+The `metavariable-comparison` operator also takes optional `base: int` and\n+`strip: bool` keys. These keys set the integer base the metavariable value\n+should be interpreted as and remove quotes from the metavariable value,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzODc0Nw==", "bodyText": "Also why specify the metavariable ... just export all the metavariables in the current matched state and pass it to semgrep-core -eval.\nAlso this prevents to use multiple metavariables comparisons as $X < $Y.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504238747", "createdAt": "2020-10-13T20:28:03Z", "author": {"login": "aryx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNTA1MA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzOTE3Nw==", "bodyText": "@brendongo might get rid of the use of abstract_content at some point, which is quite fragile.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504239177", "createdAt": "2020-10-13T20:28:56Z", "author": {"login": "aryx"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -56,6 +55,68 @@ def get_re_range_matches(\n     return result\n \n \n+def compare_range_match(\n+    metavariable: str,\n+    comparison: str,\n+    strip: Optional[bool],\n+    base: Optional[int],\n+    content: str,\n+) -> bool:\n+\n+    if strip:\n+        content = content.strip(\"\\\"'`\")\n+\n+    try:\n+        # Assume float data if \".\" in content\n+        if \".\" in content:\n+            converted = float(content)\n+        else:\n+            if base:\n+                converted = int(content, base=base)\n+            else:\n+                converted = int(content)\n+    except ValueError:\n+        logger.debug(\n+            f\"metavariable '{metavariable}' incorrect comparison type '{content}'\"\n+        )\n+        return False\n+\n+    return metavariable_comparison(metavariable, comparison, converted)\n+\n+\n+def get_comparison_range_matches(\n+    metavariable: str,\n+    comparison: str,\n+    strip: Optional[bool],\n+    base: Optional[int],\n+    ranges: Set[Range],\n+    pattern_matches: List[PatternMatch],\n+) -> Set[Range]:\n+\n+    result: Set[Range] = set()\n+    for _range in ranges:\n+        if metavariable not in _range.vars:\n+            logger.debug(f\"metavariable '{metavariable}' missing in range '{_range}'\")\n+            continue\n+\n+        any_matching_ranges = any(\n+            pm.range == _range\n+            and metavariable in pm.metavars\n+            and compare_range_match(\n+                metavariable,\n+                comparison,\n+                strip,\n+                base,\n+                pm.metavars[metavariable][\"abstract_content\"],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzOTg1Nw==", "bodyText": "I can fix that and sort on the semgrep-core side. This is ugly indeed otherwise to impose an order.\nSorry.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504239857", "createdAt": "2020-10-13T20:30:09Z", "author": {"login": "aryx"}, "path": "semgrep/semgrep/metavariable_comparison.py", "diffHunk": "@@ -0,0 +1,34 @@\n+import collections\n+import json\n+import subprocess\n+import tempfile\n+from typing import Union\n+\n+from semgrep.constants import PLEASE_FILE_ISSUE_TEXT\n+from semgrep.constants import SEMGREP_PATH\n+from semgrep.error import SemgrepError\n+from semgrep.util import sub_check_output\n+\n+\n+def metavariable_comparison(\n+    metavariable: str, comparison: str, content: Union[int, float]\n+) -> bool:\n+    # semgrep-core requires the 'language' key be before the 'code' key,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0MDQyMQ==", "bodyText": "Note that if it returns NONE, this means the expression passed was not considered safe or part of the handled subset. Maybe you want to return that information to the user.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504240421", "createdAt": "2020-10-13T20:31:17Z", "author": {"login": "aryx"}, "path": "semgrep/semgrep/metavariable_comparison.py", "diffHunk": "@@ -0,0 +1,34 @@\n+import collections\n+import json\n+import subprocess\n+import tempfile\n+from typing import Union\n+\n+from semgrep.constants import PLEASE_FILE_ISSUE_TEXT\n+from semgrep.constants import SEMGREP_PATH\n+from semgrep.error import SemgrepError\n+from semgrep.util import sub_check_output\n+\n+\n+def metavariable_comparison(\n+    metavariable: str, comparison: str, content: Union[int, float]\n+) -> bool:\n+    # semgrep-core requires the 'language' key be before the 'code' key,\n+    # so we must use an OrderedDict with special ordering here\n+    core_request = collections.OrderedDict()\n+    core_request[\"metavars\"] = {metavariable: str(content)}\n+    core_request[\"language\"] = \"python\"  # Hardcode for now\n+    core_request[\"code\"] = comparison\n+\n+    with tempfile.NamedTemporaryFile(\"w\") as temp_file:\n+        json.dump(core_request, temp_file)\n+        temp_file.flush()\n+        cmd = [SEMGREP_PATH, \"-eval\", temp_file.name]\n+        try:\n+            output = sub_check_output(cmd)\n+        except subprocess.CalledProcessError as ex:\n+            raise SemgrepError(\n+                f\"error invoking semgrep with:\\n\\t{' '.join(cmd)}\\n\\t{ex}\\n{PLEASE_FILE_ISSUE_TEXT}\"\n+            )\n+\n+    return output.strip() == b\"true\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3ODIwMzEz", "url": "https://github.com/returntocorp/semgrep/pull/1824#pullrequestreview-507820313", "createdAt": "2020-10-13T20:53:21Z", "commit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDo1MzoyMVrOHg5FxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxNzoxMVrOHg50Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1MTg0NQ==", "bodyText": "IMO, naming it pattern-where-python-safe will make people question why they'd ever need pattern-where-python and what the differences between the two are. Then we'd have to document all the differences, which may be hard to grok for someone without a program analysis background. E.g. \"what's the difference between an expression and a statement\", \"why can't I call functions X, Y, and Z?\", etc. This would also tie our hands if we ever decided to open up the list of available languages. I.e. would we also have a pattern-where-javascript-safe?\nKeeping this distinct from pattern-where-python allows for a simpler mental model of our operators IMO.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504251845", "createdAt": "2020-10-13T20:53:21Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -19,6 +19,7 @@ Contents:\n   * [`pattern-either`](configuration-files.md#pattern-either)\n   * [`pattern-regex`](configuration-files.md#pattern-regex)\n   * [`metavariable-regex`](configuration-files.md#metavariable-regex)\n+  * [`metavariable-comparison`](configuration-files.md#metavariable-comparison)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzMDYxMA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1NTg4Mw==", "bodyText": "Hah, I think YAML provides a bit more than lack of quotes over JSON :D\nI've been burned one too many times by YAML interpreting string data as a different scalar type, so I always quote strings by default now /shrug. An interesting example here was including git short hashes in YAML data, so on the off chance your commit hash was like 1234567 YAML would interpret it as an integer instead of the usual string like 5dbfa6d. That was a fun bug to track down.\nI don't have strong feelings - feel free to change the examples in the docs if you'd like.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504255883", "createdAt": "2020-10-13T21:01:02Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNTQ2OQ=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1NjYwMA==", "bodyText": "Specifying the metavariable allows for the base and strip behavior. We could do something like make metavariables, bases, and strips all lists or something so we can specify multiple, but I went with the simplest approach here.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504256600", "createdAt": "2020-10-13T21:02:34Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNTA1MA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MjQ0NQ==", "bodyText": "I don't think that's true at the moment. The regex for integer detection is currently ^[0-9]+$, which misses 0x, 0o, etc. Since the metavariable content is always initially a string, I wanted to provide a mechanism for parsing the string value in different bases.\nGenerally, if you look at our semgrep-rules, the majority of rules using pattern-where-python perform a simple comparison, and often parse a number in a different base, or perform a string strip. I know this implementation isn't the maximally powerful/generalized solution, it instead aims to cover the majority of use cases, not all of them, and hit the sweet spot between power and usability (and minimize --dangerously... usage). E.g.\n24:  - pattern-where-python: |\n25-      int(vars['$PERM'], 8) > 0o600\n\n18:  - pattern-where-python: |-\n19-      int(vars['$BITS']) < 2048\n\n18:  - pattern-where-python: |-\n19-      int(vars['$SIZE']) < 128\n\n11:  - pattern-where-python: int(vars['$NUM'].replace('\"', '')) > 32767 or int(vars['$NUM'].replace('\"', '')) < -32768\n\n21:  - pattern-where-python: |-\n22-      int(vars['$NUM'].replace('\"', '')) > 2147483647 or int(vars['$NUM'].replace('\"', '')) < -2147483648", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504262445", "createdAt": "2020-10-13T21:14:34Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.\n+\n+The `metavariable-comparison` operator also takes optional `base: int` and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNzAzNA=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MzE4Mw==", "bodyText": "strip is for strings that look like integers. E.g.\n21:  - pattern-where-python: |-\n22-      int(vars['$NUM'].replace('\"', '')) > 2147483647 or int(vars['$NUM'].replace('\"', '')) < -2147483648\n\n11:  - pattern-where-python: int(vars['$NUM'].replace('\"', '')) > 32767 or int(vars['$NUM'].replace('\"', '')) < -32768\n\nPerforming string operations on \"2147483647\" won't be helpful in this situation.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504263183", "createdAt": "2020-10-13T21:16:01Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.\n+\n+The `metavariable-comparison` operator also takes optional `base: int` and\n+`strip: bool` keys. These keys set the integer base the metavariable value\n+should be interpreted as and remove quotes from the metavariable value,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNzQyOQ=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MzQwOQ==", "bodyText": "It's used in quite a few places, so we'll have to tread carefully if/when we do.", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504263409", "createdAt": "2020-10-13T21:16:31Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -56,6 +55,68 @@ def get_re_range_matches(\n     return result\n \n \n+def compare_range_match(\n+    metavariable: str,\n+    comparison: str,\n+    strip: Optional[bool],\n+    base: Optional[int],\n+    content: str,\n+) -> bool:\n+\n+    if strip:\n+        content = content.strip(\"\\\"'`\")\n+\n+    try:\n+        # Assume float data if \".\" in content\n+        if \".\" in content:\n+            converted = float(content)\n+        else:\n+            if base:\n+                converted = int(content, base=base)\n+            else:\n+                converted = int(content)\n+    except ValueError:\n+        logger.debug(\n+            f\"metavariable '{metavariable}' incorrect comparison type '{content}'\"\n+        )\n+        return False\n+\n+    return metavariable_comparison(metavariable, comparison, converted)\n+\n+\n+def get_comparison_range_matches(\n+    metavariable: str,\n+    comparison: str,\n+    strip: Optional[bool],\n+    base: Optional[int],\n+    ranges: Set[Range],\n+    pattern_matches: List[PatternMatch],\n+) -> Set[Range]:\n+\n+    result: Set[Range] = set()\n+    for _range in ranges:\n+        if metavariable not in _range.vars:\n+            logger.debug(f\"metavariable '{metavariable}' missing in range '{_range}'\")\n+            continue\n+\n+        any_matching_ranges = any(\n+            pm.range == _range\n+            and metavariable in pm.metavars\n+            and compare_range_match(\n+                metavariable,\n+                comparison,\n+                strip,\n+                base,\n+                pm.metavars[metavariable][\"abstract_content\"],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzOTE3Nw=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2Mzc0Mg==", "bodyText": "No worries! That was going to be one of my v2 feature requests. That and float support :)", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r504263742", "createdAt": "2020-10-13T21:17:11Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/metavariable_comparison.py", "diffHunk": "@@ -0,0 +1,34 @@\n+import collections\n+import json\n+import subprocess\n+import tempfile\n+from typing import Union\n+\n+from semgrep.constants import PLEASE_FILE_ISSUE_TEXT\n+from semgrep.constants import SEMGREP_PATH\n+from semgrep.error import SemgrepError\n+from semgrep.util import sub_check_output\n+\n+\n+def metavariable_comparison(\n+    metavariable: str, comparison: str, content: Union[int, float]\n+) -> bool:\n+    # semgrep-core requires the 'language' key be before the 'code' key,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzOTg1Nw=="}, "originalCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MDc4NDM2", "url": "https://github.com/returntocorp/semgrep/pull/1824#pullrequestreview-509078436", "createdAt": "2020-10-15T07:10:54Z", "commit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87b4a9cfd54ae7406eaf76424cf5eaadfd19ea2b", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/87b4a9cfd54ae7406eaf76424cf5eaadfd19ea2b", "committedDate": "2020-10-15T16:19:42Z", "message": "Add 'metavariable-comparison' frontend to expression eval\n\nFixes #1724.\n\nThings notably out-of-scope for the first iteration of this functionality:\n\n1.) Multi-language expressions\n2.) Multi-metavariable expressions\n\nPer (1), let's start small with a language we know well and expand from\nthere as needed. Per (2), we can leverage the logical AND functionality\nof 'patterns' here instead of multiple metavariables in the same\nexpression. Again, let's start small and iterate as needed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9be44103056383c7979db04ae01684f098c8116", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/b9be44103056383c7979db04ae01684f098c8116", "committedDate": "2020-10-15T16:20:12Z", "message": "Bump CHANGELOG"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64c3f947efe9db10bc93261553dba9052589c88b", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/64c3f947efe9db10bc93261553dba9052589c88b", "committedDate": "2020-10-15T16:42:42Z", "message": "Update for latest JSON changes, and add invalid comparison expression handling/test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64f8eebcd90f8c358c9803d2c70f13512c316700", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/64f8eebcd90f8c358c9803d2c70f13512c316700", "committedDate": "2020-10-13T17:17:33Z", "message": "Bump CHANGELOG"}, "afterCommit": {"oid": "64c3f947efe9db10bc93261553dba9052589c88b", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/64c3f947efe9db10bc93261553dba9052589c88b", "committedDate": "2020-10-15T16:42:42Z", "message": "Update for latest JSON changes, and add invalid comparison expression handling/test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9949f274722672f7a8681d3fd2a0b34fb2ddadcb", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/9949f274722672f7a8681d3fd2a0b34fb2ddadcb", "committedDate": "2020-10-15T17:13:48Z", "message": "Use correct variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f8bbeed756ce87b80e94777caa592544b3f0bf8", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/8f8bbeed756ce87b80e94777caa592544b3f0bf8", "committedDate": "2020-10-15T19:09:56Z", "message": "Bad CHANGELOG overwrite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15da55f5e9c9f0538493ab0f6bae4c1a6a607cd4", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/15da55f5e9c9f0538493ab0f6bae4c1a6a607cd4", "committedDate": "2020-10-15T19:59:19Z", "message": "Don't fail hard if we encounter a variable name or other string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "536d391dd6a87b9912df1e04cb897cd307598230", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/536d391dd6a87b9912df1e04cb897cd307598230", "committedDate": "2020-10-16T19:41:49Z", "message": "Allow base of 0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODYxOTgz", "url": "https://github.com/returntocorp/semgrep/pull/1824#pullrequestreview-511861983", "createdAt": "2020-10-19T15:02:03Z", "commit": {"oid": "536d391dd6a87b9912df1e04cb897cd307598230"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMjowM1rOHkTN6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMjowM1rOHkTN6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTY0Mg==", "bodyText": "Could we also document whether it can compare strings to, for instance, ensure alphabetical ordering?", "url": "https://github.com/returntocorp/semgrep/pull/1824#discussion_r507825642", "createdAt": "2020-10-19T15:02:03Z", "author": {"login": "underyx"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -224,6 +226,64 @@ rules:\n     severity: ERROR\n ```\n \n+### `metavariable-comparison`\n+\n+The `metavariable-comparison` operator compares metavariables against a basic [Python comparison](https://docs.python.org/3/reference/expressions.html#comparisons)\n+expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables) value.\n+\n+**Example**\n+\n+The `metavariable-comparison` operator is a mapping which requires the\n+`metavariable` and `comparison` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: superuser-port\n+    patterns:\n+      - pattern: set_port($ARG)\n+      - metavariable-comparison:\n+          metavariable: '$ARG'\n+          comparison: '$ARG < 1024'\n+    message: \"module setting superuser port\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+This will catch code like `set_port(80)` or `set_port(443)`, but not `set_port(8080)`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "536d391dd6a87b9912df1e04cb897cd307598230"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0292510c82c6205aa6a2eadcaf91fe4120cf528b", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/0292510c82c6205aa6a2eadcaf91fe4120cf528b", "committedDate": "2020-10-19T16:00:34Z", "message": "Add 'numeric' note"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1186, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}