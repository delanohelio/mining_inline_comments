{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNjExMzcz", "number": 1193, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowMTozM1rOEK9vYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowNTowM1rOEK90lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTMyNzY4OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/evaluation.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowMTozM1rOGsUDVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowMTozM1rOGsUDVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExOTA2MA==", "bodyText": "flake8 suggestion", "url": "https://github.com/returntocorp/semgrep/pull/1193#discussion_r449119060", "createdAt": "2020-07-02T16:01:33Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -92,7 +92,7 @@ def _evaluate_single_expression(\n         )\n         return output_ranges\n     elif expression.operator == OPERATORS.WHERE_PYTHON:\n-        if not flags or flags[RCE_RULE_FLAG] != True:\n+        if not flags or not flags[RCE_RULE_FLAG]:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651794c3f6417cd370d37e9fbf84ff8b9569bc1f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTMyOTkzOnYy", "diffSide": "LEFT", "path": "semgrep/semgrep/evaluation.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowMjoxNVrOGsUE0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowMjoxNVrOGsUE0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExOTQ0Mg==", "bodyText": "This is just re-stating the mypy types and doesn't really contribute anything", "url": "https://github.com/returntocorp/semgrep/pull/1193#discussion_r449119442", "createdAt": "2020-07-02T16:02:15Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -137,39 +137,35 @@ def _evaluate_single_expression(\n         raise UnknownOperatorError(f\"unknown operator {expression.operator}\")\n \n \n-# Given a `where-python` expression as a string and currently matched metavars,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651794c3f6417cd370d37e9fbf84ff8b9569bc1f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTMzMzUzOnYy", "diffSide": "LEFT", "path": "semgrep/semgrep/evaluation.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowMzowNlrOGsUHFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowMzowNlrOGsUHFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEyMDAyMA==", "bodyText": "\"Be careful\" doesn't really tell me anything here - the # nosem below tells me this is \"approved insecure behavior\"", "url": "https://github.com/returntocorp/semgrep/pull/1193#discussion_r449120020", "createdAt": "2020-07-02T16:03:06Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -137,39 +137,35 @@ def _evaluate_single_expression(\n         raise UnknownOperatorError(f\"unknown operator {expression.operator}\")\n \n \n-# Given a `where-python` expression as a string and currently matched metavars,\n-# return whether the expression matches as a boolean\n def _where_python_statement_matches(\n     where_expression: str, metavars: Dict[str, Any]\n ) -> bool:\n     # TODO: filter out obvious dangerous things here\n-    output_var = None\n+    result = False\n \n-    # HACK: we're executing arbitrary Python in the where-python,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651794c3f6417cd370d37e9fbf84ff8b9569bc1f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTMzNTgzOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/evaluation.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowMzo0NFrOGsUIhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowMzo0NFrOGsUIhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEyMDM5MQ==", "bodyText": "It's impossible to statically determine the type here, the isinstance call below confirms the type for us \ud83d\udc4d", "url": "https://github.com/returntocorp/semgrep/pull/1193#discussion_r449120391", "createdAt": "2020-07-02T16:03:44Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -137,39 +137,35 @@ def _evaluate_single_expression(\n         raise UnknownOperatorError(f\"unknown operator {expression.operator}\")\n \n \n-# Given a `where-python` expression as a string and currently matched metavars,\n-# return whether the expression matches as a boolean\n def _where_python_statement_matches(\n     where_expression: str, metavars: Dict[str, Any]\n ) -> bool:\n     # TODO: filter out obvious dangerous things here\n-    output_var = None\n+    result = False\n \n-    # HACK: we're executing arbitrary Python in the where-python,\n-    # be careful my friend\n-    vars = {k: v[\"abstract_content\"] for k, v in metavars.items()}\n+    local_vars = {k: v[\"abstract_content\"] for k, v in metavars.items()}\n     RETURN_VAR = \"semgrep_pattern_return\"\n     try:\n         cleaned_where_expression = where_expression.strip()\n         lines = cleaned_where_expression.split(\"\\n\")\n         new_last_line = f\"{RETURN_VAR} = {lines[-1]}\"\n         lines[-1] = new_last_line\n         to_eval = \"\\n\".join(lines)\n-        scope = {\"vars\": vars}\n+        scope = {\"vars\": local_vars}\n         # fmt: off\n         exec(to_eval, scope)  # nosem: contrib.dlint.dlint-equivalent.insecure-exec-use, python.lang.security.audit.exec-detected.exec-detected\n         # fmt: on\n-        output_var = scope[RETURN_VAR]\n+        result = scope[RETURN_VAR]  # type: ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651794c3f6417cd370d37e9fbf84ff8b9569bc1f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTMzNzY0OnYy", "diffSide": "LEFT", "path": "semgrep/semgrep/evaluation.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowNDoxNVrOGsUJsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowNDoxNVrOGsUJsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEyMDY4OQ==", "bodyText": "This function is no longer used after we removed the --exclude-tests flag.", "url": "https://github.com/returntocorp/semgrep/pull/1193#discussion_r449120689", "createdAt": "2020-07-02T16:04:15Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -189,10 +185,6 @@ def safe_relative_to(a: Path, b: Path) -> Path:\n         return a\n \n \n-def should_exclude_this_path(path: Path) -> bool:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651794c3f6417cd370d37e9fbf84ff8b9569bc1f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTM0MTAzOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/evaluation.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowNTowM1rOGsUL3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjowNTowM1rOGsUL3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEyMTI0Ng==", "bodyText": "vars is a builtin Python function, let's avoid using it as a local variable name.", "url": "https://github.com/returntocorp/semgrep/pull/1193#discussion_r449121246", "createdAt": "2020-07-02T16:05:03Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -137,39 +137,35 @@ def _evaluate_single_expression(\n         raise UnknownOperatorError(f\"unknown operator {expression.operator}\")\n \n \n-# Given a `where-python` expression as a string and currently matched metavars,\n-# return whether the expression matches as a boolean\n def _where_python_statement_matches(\n     where_expression: str, metavars: Dict[str, Any]\n ) -> bool:\n     # TODO: filter out obvious dangerous things here\n-    output_var = None\n+    result = False\n \n-    # HACK: we're executing arbitrary Python in the where-python,\n-    # be careful my friend\n-    vars = {k: v[\"abstract_content\"] for k, v in metavars.items()}\n+    local_vars = {k: v[\"abstract_content\"] for k, v in metavars.items()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651794c3f6417cd370d37e9fbf84ff8b9569bc1f"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4508, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}