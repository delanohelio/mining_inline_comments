{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NDI5MzQw", "number": 907, "title": "Switch YAML parsing to Ruamel", "bodyText": "Change YAML parsing to Ruamel\nWrap Ruamel output in YamlTree to preserve all the span information (Ruamel only preserves the start, not the end of spans in it's normal output)\nCoax the mypy gods into accepting this. Python is bad for ADTs...\n\nPart of the #773 rebuild.", "createdAt": "2020-06-03T20:15:02Z", "url": "https://github.com/returntocorp/semgrep/pull/907", "merged": true, "mergeCommit": {"oid": "c9e1087fdde0dc27b9901d7e376fd5abb80b7faf"}, "closed": true, "closedAt": "2020-06-04T19:47:21Z", "author": {"login": "rcoh"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnvUmXAH2gAyNDI3NDI5MzQwOjNhMzc0NzQ0M2UzYTdhYTM4OGViYzhjYjNkODJiYWQ5NDdkNjdiNGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoBppjgH2gAyNDI3NDI5MzQwOmFlNDk2ZDNhNGJmNWRlNDUyYmMxOTY5ZjU1NzMzMWQyMGE1MjVhZDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3a3747443e3a7aa388ebc8cb3d82bad947d67b4c", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/3a3747443e3a7aa388ebc8cb3d82bad947d67b4c", "committedDate": "2020-06-03T20:17:10Z", "message": "Switch YAML parsing to Ruamel\n\n- Change YAML parsing to Ruamel\n- Wrap Ruamel output in `YamlTree` to preserve all the span information (Ruamel only preserves the start, not the end of spans in it's normal output)\n- Coax the mypy gods into accepting this. Python is bad for ADTs..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea6b7dc34a1d5c4584a76267c40b504918b0786c", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/ea6b7dc34a1d5c4584a76267c40b504918b0786c", "committedDate": "2020-06-03T20:13:05Z", "message": "Switch YAML parsing to Ruamel\n\n- Change YAML parsing to Ruamel\n- Wrap Ruamel output in `YamlTree` to preserve all the span information (Ruamel only preserves the start, not the end of spans in it's normal output)\n- Coax the mypy gods into accepting this. Python is bad for ADTs..."}, "afterCommit": {"oid": "3a3747443e3a7aa388ebc8cb3d82bad947d67b4c", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/3a3747443e3a7aa388ebc8cb3d82bad947d67b4c", "committedDate": "2020-06-03T20:17:10Z", "message": "Switch YAML parsing to Ruamel\n\n- Change YAML parsing to Ruamel\n- Wrap Ruamel output in `YamlTree` to preserve all the span information (Ruamel only preserves the start, not the end of spans in it's normal output)\n- Coax the mypy gods into accepting this. Python is bad for ADTs..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e8ce200daab7d6628f2f137e0ee6a5262bdfbac", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/3e8ce200daab7d6628f2f137e0ee6a5262bdfbac", "committedDate": "2020-06-03T20:26:21Z", "message": "pre-commit CI job"}, "afterCommit": {"oid": "5c8a1e4052a5566db06452c5ff2f5f8e141da555", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/5c8a1e4052a5566db06452c5ff2f5f8e141da555", "committedDate": "2020-06-03T20:31:53Z", "message": "pre-commit CI job"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzOTExNDQ3", "url": "https://github.com/returntocorp/semgrep/pull/907#pullrequestreview-423911447", "createdAt": "2020-06-03T20:38:38Z", "commit": {"oid": "5c8a1e4052a5566db06452c5ff2f5f8e141da555"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDozODozOFrOGesfJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDozODozOFrOGesfJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzOTMzMg==", "bodyText": "Does ruamel.yaml have a fast import time wrt yaml?", "url": "https://github.com/returntocorp/semgrep/pull/907#discussion_r434839332", "createdAt": "2020-06-03T20:38:38Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -16,6 +16,8 @@\n from typing import Optional\n from typing import Tuple\n \n+from ruamel.yaml import YAML", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c8a1e4052a5566db06452c5ff2f5f8e141da555"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c8a1e4052a5566db06452c5ff2f5f8e141da555", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/5c8a1e4052a5566db06452c5ff2f5f8e141da555", "committedDate": "2020-06-03T20:31:53Z", "message": "pre-commit CI job"}, "afterCommit": {"oid": "e076f9c3e1d63669e5641beac5a6e645ee5b4e1b", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/e076f9c3e1d63669e5641beac5a6e645ee5b4e1b", "committedDate": "2020-06-03T20:42:25Z", "message": "pre-commit CI job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4767f27ca32c9299150d11d9a4ce1a070ddda5dc", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/4767f27ca32c9299150d11d9a4ce1a070ddda5dc", "committedDate": "2020-06-03T20:54:39Z", "message": "Fix pre-commit on CI with stubs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e076f9c3e1d63669e5641beac5a6e645ee5b4e1b", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/e076f9c3e1d63669e5641beac5a6e645ee5b4e1b", "committedDate": "2020-06-03T20:42:25Z", "message": "pre-commit CI job"}, "afterCommit": {"oid": "4767f27ca32c9299150d11d9a4ce1a070ddda5dc", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/4767f27ca32c9299150d11d9a4ce1a070ddda5dc", "committedDate": "2020-06-03T20:54:39Z", "message": "Fix pre-commit on CI with stubs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95d1bf4639b386e17127d4d6d0ba36e32961789f", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/95d1bf4639b386e17127d4d6d0ba36e32961789f", "committedDate": "2020-06-03T21:32:50Z", "message": "Fix bug on coming from single-line patterns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de3e130e0acc890d907590f115372a3d7dc23cb4", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/de3e130e0acc890d907590f115372a3d7dc23cb4", "committedDate": "2020-06-03T22:07:21Z", "message": "Fix broken tests (missing snapshot and missed change to ruamel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cdc761d7d9de3a738b813e54e1abacefbcc7e03c", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/cdc761d7d9de3a738b813e54e1abacefbcc7e03c", "committedDate": "2020-06-03T21:45:29Z", "message": "Add missing rule parse failure case"}, "afterCommit": {"oid": "de3e130e0acc890d907590f115372a3d7dc23cb4", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/de3e130e0acc890d907590f115372a3d7dc23cb4", "committedDate": "2020-06-03T22:07:21Z", "message": "Fix broken tests (missing snapshot and missed change to ruamel)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjA4MTc1", "url": "https://github.com/returntocorp/semgrep/pull/907#pullrequestreview-424608175", "createdAt": "2020-06-04T16:08:18Z", "commit": {"oid": "de3e130e0acc890d907590f115372a3d7dc23cb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjowODoxOFrOGfNVHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjowODoxOFrOGfNVHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3NzQzNw==", "bodyText": "Can we use the standard {PLEASE_REPORT_ISSUE...} here?", "url": "https://github.com/returntocorp/semgrep/pull/907#discussion_r435377437", "createdAt": "2020-06-04T16:08:18Z", "author": {"login": "ievans"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -0,0 +1,89 @@\n+from io import StringIO\n+from typing import Any\n+from typing import Dict\n+from typing import List\n+from typing import NamedTuple\n+from typing import Optional\n+from typing import Union\n+\n+from ruamel.yaml import Node\n+from ruamel.yaml import RoundTripConstructor\n+from ruamel.yaml import YAML\n+\n+\n+class Position(NamedTuple):\n+    line: int\n+    column: int\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.line}:{self.column}\"\n+\n+\n+class Span(NamedTuple):\n+    start: Position\n+    end: Position\n+    file: Optional[str]\n+\n+    @classmethod\n+    def from_node(cls, node: Node, file: Optional[str]) -> \"Span\":\n+        start = Position(line=node.start_mark.line, column=node.start_mark.column)\n+        end = Position(line=node.end_mark.line, column=node.end_mark.column)\n+        return Span(start=start, end=end, file=file)\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.start}-{self.end}\"\n+\n+\n+# Actually recursive but mypy is unhelpful\n+YamlValue = Union[str, int, List[Any], Dict[str, Any]]\n+LocatedYamlValue = Union[str, int, List[\"YamlTree\"], Dict[\"YamlTree\", \"YamlTree\"]]\n+\n+\n+class YamlTree:\n+    def __init__(self, value: LocatedYamlValue, span: Span):\n+        self.value = value\n+        self.span = span\n+\n+    # __eq__ and _hash__ delegate to value to support `value['a']` working properly.\n+    # otherwise, since the key is _actually_ a `Located` object you'd need to give the\n+    # span to pull it out of the dictionary.\n+    def __eq__(self, other: Any) -> bool:\n+        return self.value.__eq__(other)\n+\n+    def __hash__(self) -> int:\n+        return hash(self.value)\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.span}: ---> {self.value}\"\n+\n+    def unroll(self) -> YamlValue:\n+        \"\"\"\n+        Recursively expand the `self.value`, converting back to a normal datastructure\n+        \"\"\"\n+        if isinstance(self.value, list):\n+            return [x.unroll() for x in self.value]\n+        elif isinstance(self.value, dict):\n+            return {str(k.unroll()): v.unroll() for k, v in self.value.items()}\n+        elif isinstance(self.value, YamlTree):\n+            return self.value.unroll()\n+        else:\n+            return self.value\n+\n+\n+def parse_yaml(contents: str) -> Dict[str, Any]:\n+    yaml = YAML()\n+    return yaml.load(StringIO(contents))  # type: ignore\n+\n+\n+def parse_yaml_preserve_spans(contents: str, filename: Optional[str]) -> YamlTree:\n+    class SpanPreservingRuamelConstructor(RoundTripConstructor):\n+        def construct_object(self, node: Node, deep: bool = False) -> YamlTree:\n+            r = super().construct_object(node, deep)\n+            return YamlTree(r, Span.from_node(node, filename))\n+\n+    yaml = YAML()\n+    yaml.Constructor = SpanPreservingRuamelConstructor\n+    data = yaml.load(StringIO(contents))\n+    if not isinstance(data, YamlTree):\n+        raise Exception(\"Something has gone horribly wrong in the YAML parser\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3e130e0acc890d907590f115372a3d7dc23cb4"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjA5MTUw", "url": "https://github.com/returntocorp/semgrep/pull/907#pullrequestreview-424609150", "createdAt": "2020-06-04T16:09:19Z", "commit": {"oid": "de3e130e0acc890d907590f115372a3d7dc23cb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjowOToxOVrOGfNXuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjowOToxOVrOGfNXuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3ODEwNw==", "bodyText": "should we explicit note in comment or function name whether or not this is safe?", "url": "https://github.com/returntocorp/semgrep/pull/907#discussion_r435378107", "createdAt": "2020-06-04T16:09:19Z", "author": {"login": "ievans"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -0,0 +1,89 @@\n+from io import StringIO\n+from typing import Any\n+from typing import Dict\n+from typing import List\n+from typing import NamedTuple\n+from typing import Optional\n+from typing import Union\n+\n+from ruamel.yaml import Node\n+from ruamel.yaml import RoundTripConstructor\n+from ruamel.yaml import YAML\n+\n+\n+class Position(NamedTuple):\n+    line: int\n+    column: int\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.line}:{self.column}\"\n+\n+\n+class Span(NamedTuple):\n+    start: Position\n+    end: Position\n+    file: Optional[str]\n+\n+    @classmethod\n+    def from_node(cls, node: Node, file: Optional[str]) -> \"Span\":\n+        start = Position(line=node.start_mark.line, column=node.start_mark.column)\n+        end = Position(line=node.end_mark.line, column=node.end_mark.column)\n+        return Span(start=start, end=end, file=file)\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.start}-{self.end}\"\n+\n+\n+# Actually recursive but mypy is unhelpful\n+YamlValue = Union[str, int, List[Any], Dict[str, Any]]\n+LocatedYamlValue = Union[str, int, List[\"YamlTree\"], Dict[\"YamlTree\", \"YamlTree\"]]\n+\n+\n+class YamlTree:\n+    def __init__(self, value: LocatedYamlValue, span: Span):\n+        self.value = value\n+        self.span = span\n+\n+    # __eq__ and _hash__ delegate to value to support `value['a']` working properly.\n+    # otherwise, since the key is _actually_ a `Located` object you'd need to give the\n+    # span to pull it out of the dictionary.\n+    def __eq__(self, other: Any) -> bool:\n+        return self.value.__eq__(other)\n+\n+    def __hash__(self) -> int:\n+        return hash(self.value)\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.span}: ---> {self.value}\"\n+\n+    def unroll(self) -> YamlValue:\n+        \"\"\"\n+        Recursively expand the `self.value`, converting back to a normal datastructure\n+        \"\"\"\n+        if isinstance(self.value, list):\n+            return [x.unroll() for x in self.value]\n+        elif isinstance(self.value, dict):\n+            return {str(k.unroll()): v.unroll() for k, v in self.value.items()}\n+        elif isinstance(self.value, YamlTree):\n+            return self.value.unroll()\n+        else:\n+            return self.value\n+\n+\n+def parse_yaml(contents: str) -> Dict[str, Any]:\n+    yaml = YAML()\n+    return yaml.load(StringIO(contents))  # type: ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3e130e0acc890d907590f115372a3d7dc23cb4"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjA5MzMz", "url": "https://github.com/returntocorp/semgrep/pull/907#pullrequestreview-424609333", "createdAt": "2020-06-04T16:09:31Z", "commit": {"oid": "de3e130e0acc890d907590f115372a3d7dc23cb4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "813e8b5852f8bf70fe65e9be3393e9cef3627bf9", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/813e8b5852f8bf70fe65e9be3393e9cef3627bf9", "committedDate": "2020-06-04T16:20:29Z", "message": "CR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae496d3a4bf5de452bc1969f557331d20a525ad6", "author": {"user": {"login": "rcoh", "name": "Russell Cohen"}}, "url": "https://github.com/returntocorp/semgrep/commit/ae496d3a4bf5de452bc1969f557331d20a525ad6", "committedDate": "2020-06-04T17:38:27Z", "message": "Merge branch 'develop' into russell/switch-to-ruamel"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1624, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}