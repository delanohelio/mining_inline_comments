{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNTk5MDk1", "number": 2088, "title": "adding binary expr transformation", "bodyText": "Test plan:\nRun semgrep-core/_build/default/cli/Main.exe --dump_ast tests/kotlin/binary-func.kt\n\nTransforms all the binary expressions, along with Super and call references for primary expressions.\n\nNot sure about:\n\nShould Call_ref return DotAccess?\nWhat should Infix_exp and Check_exp return?", "createdAt": "2020-11-19T00:40:12Z", "url": "https://github.com/returntocorp/semgrep/pull/2088", "merged": true, "mergeCommit": {"oid": "9e3c4380a9ebc43f5e158ed739a7999e5abd707c"}, "closed": true, "closedAt": "2020-11-19T11:27:06Z", "author": {"login": "colleend"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdd3vi6gH2gAyNTIzNTk5MDk1OmYwZGZmOGYzZjdlNzNkYmI1NzY5YzhjNjhhMDhkNjdmZjkyNDcxMzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeBB4BgFqTUzNDMyOTU1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f0dff8f3f7e73dbb5769c8c68a08d67ff9247133", "author": {"user": {"login": "colleend", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/f0dff8f3f7e73dbb5769c8c68a08d67ff9247133", "committedDate": "2020-11-19T00:37:45Z", "message": "adding binary expr transformation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MzI5NTUx", "url": "https://github.com/returntocorp/semgrep/pull/2088#pullrequestreview-534329551", "createdAt": "2020-11-19T11:25:38Z", "commit": {"oid": "f0dff8f3f7e73dbb5769c8c68a08d67ff9247133"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToyNTozOFrOH2Y4FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToyNjozN1rOH2Y6PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MjcyNA==", "bodyText": "We could add an operator for that maybe. It's actually used also in Python (but right now I use\nOE_In, and OE_NotIn, but really we could make In and NotIn operators like Plus/... in AST_generic.operator.", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r526792724", "createdAt": "2020-11-19T11:25:38Z", "author": {"login": "aryx"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -516,28 +517,29 @@ and binary_expression (env : env) (x : CST.binary_expression) =\n         | `Is_op x -> is_operator env x\n         )\n       in\n+      let v2_id = Id ((\"\", v2), empty_id_info()) in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0dff8f3f7e73dbb5769c8c68a08d67ff9247133"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzI3Ng==", "bodyText": "better to keep the todo than using fake thing when you're not sure.", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r526793276", "createdAt": "2020-11-19T11:26:37Z", "author": {"login": "aryx"}, "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1369,25 +1371,30 @@ and primary_constructor (env : env) ((v1, v2) : CST.primary_constructor) =\n and primary_expression (env : env) (x : CST.primary_expression) : expr =\n   (match x with\n   | `Paren_exp x -> parenthesized_expression env x\n-  | `Simple_id x -> \n+  | `Simple_id x ->\n       let id = simple_identifier env x in\n       Id(id, empty_id_info())\n   | `Lit_cst x -> L (literal_constant env x)\n   | `Str_lit x -> L (String (string_literal env x))\n   | `Call_ref (v1, v2, v3) ->\n       let v1 =\n         (match v1 with\n-        | Some x -> simple_identifier env x\n-        | None -> todo env ())\n+        | Some x ->\n+            let id = simple_identifier env x in\n+            Id(id, empty_id_info())\n+        | None ->\n+            let fake_id = (\"None\", fake \"None\") in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0dff8f3f7e73dbb5769c8c68a08d67ff9247133"}, "originalPosition": 148}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 867, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}