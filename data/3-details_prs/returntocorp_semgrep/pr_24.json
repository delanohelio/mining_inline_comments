{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4ODI1OTc1", "number": 24, "title": "Fix single file rule argument", "bodyText": "When passing single file, os.walk was skipping over the rules in it.\nThis fixes that.\nTo test: run sgrep-lint with single rule file and see the rule firing and the error/success counter correctly applied.\nulziibayarotgonbaatar@ulziibayars-MacBook-Pro sgrep % sgrep-lint ~/Workspace/sgrep-rules/python/flask/secure-static-file-serve.yaml ~/Workspace/sgrep-rules/tests/python/flask/send_static_file/test_send_file_without_path_sanitization.py| jq\nrunning 1 rules from 1 yaml files (0 yaml files were invalid)\n{\n  \"matches\": [\n    {\n      \"check_id\": \"avoid_send_file_without_path_sanitization\",\n      \"path\": \"/Users/ulziibayarotgonbaatar/Workspace/sgrep-rules/tests/python/flask/send_static_file/test_send_file_without_path_sanitization.py\",\n      \"start\": {\n        \"line\": 8,\n        \"col\": 10,\n        \"offset\": 149\n      },\n      \"end\": {\n        \"line\": 8,\n        \"col\": 28,\n        \"offset\": 167\n      },\n      \"extra\": {\n        \"message\": \"Looks like `filename` could flow to `flask.send_file()` function. Make sure to properly sanitize filename or use `flask.send_from_directory`\",\n        \"metavars\": {}\n      }\n    }\n  ]\n}", "createdAt": "2020-01-30T00:02:28Z", "url": "https://github.com/returntocorp/semgrep/pull/24", "merged": true, "mergeCommit": {"oid": "c092846e5f425d978674029f5bfb4eb66a3b9321"}, "closed": true, "closedAt": "2020-01-31T00:31:11Z", "author": {"login": "ulziibay"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_gBpRgFqTM1MTA5NzgwOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_j4k_ABqjI5OTUzOTU1NDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDk3ODA4", "url": "https://github.com/returntocorp/semgrep/pull/24#pullrequestreview-351097808", "createdAt": "2020-01-30T19:50:54Z", "commit": {"oid": "6ef6024a10103eadc28b45d52dc00ba9ebeb1603"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTo1MDo1NFrOFj31xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTo1MDo1NFrOFj31xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1OTM2Nw==", "bodyText": "@ulziibay should this be under an else:", "url": "https://github.com/returntocorp/semgrep/pull/24#discussion_r373159367", "createdAt": "2020-01-30T19:50:54Z", "author": {"login": "ievans"}, "path": "sgrep.py", "diffHunk": "@@ -270,27 +270,37 @@ def rewrite_message_with_metavars(yaml_rule, sgrep_result):\n     return msg_text\n \n \n-def collect_rules(yaml_file_or_dirs: str) -> Tuple[List[Dict[str, Any]], Tuple[int, int]]:\n+def _collect_rules_from_files(files: List[str], root: Optional[str] = None)-> Tuple[List[Dict[str, Any]], Tuple[int, int]]:\n     collected_rules = []\n     errors, not_errors = 0, 0\n-    for root, dirs, files in os.walk(yaml_file_or_dirs):\n-        dirs.sort()\n-        for filename in sorted(files):\n-            if pathlib.Path(filename).suffix in YML_EXTENSIONS:\n+    for filename in sorted(files):\n+        if pathlib.Path(filename).suffix in YML_EXTENSIONS:\n+            if root:\n                 full_path = os.path.join(root, filename)\n-                rules_in_file = parse_sgrep_yml(full_path)\n-                if rules_in_file is None:\n-                    errors += 1\n-                else:\n-                    not_errors += 1\n-                    for rule in rules_in_file:\n-                        prefix = '.'.join([x for x in PurePath(\n-                            pathlib.Path(full_path)).parts[:-1] if len(x)])\n-                        new_id = f\"{prefix}.{rule['id']}\".lstrip('.')\n-                        rule['id'] = new_id\n-                    collected_rules.extend(rules_in_file)\n+            else:\n+                full_path = filename\n+            rules_in_file = parse_sgrep_yml(full_path)\n+            if rules_in_file is None:\n+                errors += 1\n+            else:\n+                not_errors += 1\n+                for rule in rules_in_file:\n+                    prefix = '.'.join([x for x in PurePath(\n+                        pathlib.Path(full_path)).parts[:-1] if len(x)])\n+                    new_id = f\"{prefix}.{rule['id']}\".lstrip('.')\n+                    rule['id'] = new_id\n+                collected_rules.extend(rules_in_file)\n     return collected_rules, (errors, not_errors)\n \n+def collect_rules(yaml_file_or_dirs: str) -> Tuple[List[Dict[str, Any]], Tuple[int, int]]:\n+    if os.path.isfile(yaml_file_or_dirs):\n+        file_path = os.path.abspath(yaml_file_or_dirs)\n+        return _collect_rules_from_files([file_path])\n+\n+    for root, dirs, files in os.walk(yaml_file_or_dirs):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef6024a10103eadc28b45d52dc00ba9ebeb1603"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTg2NDM0", "url": "https://github.com/returntocorp/semgrep/pull/24#pullrequestreview-351186434", "createdAt": "2020-01-30T22:27:29Z", "commit": {"oid": "6ef6024a10103eadc28b45d52dc00ba9ebeb1603"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dd825e634bc01ec1f1d424e66d19b5d7b3fb647", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/2dd825e634bc01ec1f1d424e66d19b5d7b3fb647", "committedDate": "2020-01-31T00:19:51Z", "message": "Fix single file rule argument"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fffdc6563a9fa155300a27ee65c811cecd69682", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/5fffdc6563a9fa155300a27ee65c811cecd69682", "committedDate": "2020-01-31T00:20:30Z", "message": "Address comments about code reuse"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ef6024a10103eadc28b45d52dc00ba9ebeb1603", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/6ef6024a10103eadc28b45d52dc00ba9ebeb1603", "committedDate": "2020-01-30T19:05:46Z", "message": "Address comments about code reuse"}, "afterCommit": {"oid": "5fffdc6563a9fa155300a27ee65c811cecd69682", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/5fffdc6563a9fa155300a27ee65c811cecd69682", "committedDate": "2020-01-31T00:20:30Z", "message": "Address comments about code reuse"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1167, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}