{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MjQyMTE2", "number": 1102, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo1Njo1NVrOEIIcIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo1Njo1NVrOEIIcIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTYyMzM3OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/semgrep_main.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo1Njo1NVrOGn6XCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjowNzo0MFrOGn8UAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwMzgxOQ==", "bodyText": "You should be able to do json.load(io_capture), which is probably a bit more memory efficient.", "url": "https://github.com/returntocorp/semgrep/pull/1102#discussion_r444503819", "createdAt": "2020-06-23T20:56:55Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/semgrep_main.py", "diffHunk": "@@ -239,23 +243,57 @@ def rule_match_nosem(rule_match: RuleMatch, strict: bool) -> bool:\n     return result\n \n \n+def invoke_semgrep(config: Path, targets: List[Path], **kwargs: Any) -> Any:\n+    \"\"\"\n+        Call semgrep with config on targets and return result as a json object\n+\n+        Uses default arguments of MAIN unless overwritten with a kwarg\n+    \"\"\"\n+    io_capture = StringIO()\n+    output_handler = OutputHandler(\n+        OutputSettings(\n+            output_format=OutputFormat.JSON,\n+            output_destination=None,\n+            quiet=False,\n+            error_on_findings=False,\n+        ),\n+        stdout=io_capture,\n+    )\n+    main(\n+        output_handler=output_handler,\n+        target=[str(t) for t in targets],\n+        pattern=\"\",\n+        lang=\"\",\n+        config=str(config),\n+        **kwargs,\n+    )\n+    output_handler.close()\n+    return json.loads(io_capture.getvalue())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a91d114f79f91b6826a2c5949f40129302fb1b4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzNTgxMA==", "bodyText": "I don't think you can do this on an IO stream you are writing to since the pointer will be at the end of the stream", "url": "https://github.com/returntocorp/semgrep/pull/1102#discussion_r444535810", "createdAt": "2020-06-23T22:07:40Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/semgrep_main.py", "diffHunk": "@@ -239,23 +243,57 @@ def rule_match_nosem(rule_match: RuleMatch, strict: bool) -> bool:\n     return result\n \n \n+def invoke_semgrep(config: Path, targets: List[Path], **kwargs: Any) -> Any:\n+    \"\"\"\n+        Call semgrep with config on targets and return result as a json object\n+\n+        Uses default arguments of MAIN unless overwritten with a kwarg\n+    \"\"\"\n+    io_capture = StringIO()\n+    output_handler = OutputHandler(\n+        OutputSettings(\n+            output_format=OutputFormat.JSON,\n+            output_destination=None,\n+            quiet=False,\n+            error_on_findings=False,\n+        ),\n+        stdout=io_capture,\n+    )\n+    main(\n+        output_handler=output_handler,\n+        target=[str(t) for t in targets],\n+        pattern=\"\",\n+        lang=\"\",\n+        config=str(config),\n+        **kwargs,\n+    )\n+    output_handler.close()\n+    return json.loads(io_capture.getvalue())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwMzgxOQ=="}, "originalCommit": {"oid": "0a91d114f79f91b6826a2c5949f40129302fb1b4"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4996, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}