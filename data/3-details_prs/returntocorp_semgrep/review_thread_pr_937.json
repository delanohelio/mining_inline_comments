{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4Nzk2OTAx", "number": 937, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjoyMzoyMlrOEDHRaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjoyMzoyMlrOEDHRaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzAwMzMxOnYy", "diffSide": "RIGHT", "path": "semgrep/tests/conftest.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjoyMzoyMlrOGf-9oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjoyMzoyMlrOGf-9oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5MDYyNQ==", "bodyText": "Add comment on what this function does", "url": "https://github.com/returntocorp/semgrep/pull/937#discussion_r436190625", "createdAt": "2020-06-05T22:23:22Z", "author": {"login": "brendongo"}, "path": "semgrep/tests/conftest.py", "diffHunk": "@@ -88,6 +92,86 @@ def _run_semgrep(\n     return output\n \n \n+REPO_CACHE = Path(\n+    os.path.expanduser(\n+        os.environ.get(\"GITHUB_REPO_CACHE\", appdirs.user_cache_dir(\"semgrep-tests\"))\n+    )\n+)\n+\n+\n+@pytest.fixture()\n+def clone_github_repo():\n+    yield _github_repo_retry_wrapper\n+\n+\n+@contextlib.contextmanager\n+def chdir(dirname=None):\n+    curdir = os.getcwd()\n+    try:\n+        if dirname is not None:\n+            os.chdir(dirname)\n+        yield\n+    finally:\n+        os.chdir(curdir)\n+\n+\n+def _github_repo_retry_wrapper(\n+    repo_url: str, sha: Optional[str] = None, retries: int = 3\n+):\n+    sha_str = sha or \"latest\"\n+    repo_dir = \"-\".join(repo_url.split(\"/\")[-2:]) + \"-\" + sha_str\n+    repo_destination = REPO_CACHE / repo_dir\n+    try:\n+        return _github_repo(repo_url, sha, repo_destination)\n+    except (GitError, subprocess.CalledProcessError) as ex:\n+        print(f\"Failed to clone github repo for tests {ex}\")\n+        if repo_destination.exists():\n+            shutil.rmtree(repo_destination)\n+        if retries == 0:\n+            raise\n+        else:\n+            return _github_repo_retry_wrapper(repo_url, sha, retries - 1)\n+\n+\n+class GitError(BaseException):\n+    pass\n+\n+\n+def _github_repo(repo_url: str, sha: Optional[str], repo_destination: Path):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845569145f526652c7e7d2f74ff36e141fdadee2"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4540, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}