{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNzA4MjE0", "number": 986, "title": "Add imported entity metavariable as expression in the environment", "bodyText": "This fix issue #974\nThe main issue is that the metavariable matching was working, but\nthe metavar was added as an ident in the environment, instead of an expr,\nand so later one when the same metavariable is used in an expression context,\nit was not matching the same metavar that was binded to an ident.\nWe had similar problems before where a metavar on a function definition\nwas not matching later the same metavar used in a function call.\nTest plan:\ntest files included", "createdAt": "2020-06-12T14:19:02Z", "url": "https://github.com/returntocorp/semgrep/pull/986", "merged": true, "mergeCommit": {"oid": "23ff7303d7f867fb127f19a54806833a43c03d62"}, "closed": true, "closedAt": "2020-06-13T11:31:27Z", "author": {"login": "aryx"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqjlZ1AH2gAyNDMzNzA4MjE0OjRmYmUyNTI2YTkyMTA1OTEyODhmNTc3MDFkZDI1ZTljNjZkMTEwNmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqlpRSAFqTQyOTg4OTAwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4fbe2526a9210591288f57701dd25e9c66d1106f", "author": {"user": {"login": "aryx", "name": "Yoann Padioleau"}}, "url": "https://github.com/returntocorp/semgrep/commit/4fbe2526a9210591288f57701dd25e9c66d1106f", "committedDate": "2020-06-12T14:18:26Z", "message": "Add imported entity metavariable as expression in the environment\n\nThis fix issue #974\nThe main issue is that the metavariable matching was working, but\nthe metavar was added as an ident in the environment, instead of an expr,\nand so later one when the same metavariable is used in an expression context,\nit was not matching the same metavar that was binded to an ident.\n\nWe had similar problems before where a metavar on a function definition\nwas not matching later the same metavar used in a function call.\n\nTest plan:\ntest files included"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODg5MDA3", "url": "https://github.com/returntocorp/semgrep/pull/986#pullrequestreview-429889007", "createdAt": "2020-06-12T16:42:28Z", "commit": {"oid": "4fbe2526a9210591288f57701dd25e9c66d1106f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo0MjoyOFrOGjKu4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo0MjoyOFrOGjKu4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyOTE4NA==", "bodyText": "Nice! Does this work for anything pulled into the namespace here? In other words, if I have import { func1, func2, func3 } this will detect func1(...), func2(...), or func3(...)? I can imagine user's will want it either way. Is there a way to specify if I only care about func1(...). E.g. something like import { ..., func1, ... } from 'dependency';?", "url": "https://github.com/returntocorp/semgrep/pull/986#discussion_r439529184", "createdAt": "2020-06-12T16:42:28Z", "author": {"login": "mschwager"}, "path": "semgrep-core/tests/js/metavar_import3.sgrep", "diffHunk": "@@ -0,0 +1,3 @@\n+import { $X } from 'dependency';\n+...\n+$X(...);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbe2526a9210591288f57701dd25e9c66d1106f"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1541, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}