{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NzUxMTcz", "number": 1758, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDowOTo1MlrOEpL7MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDowOTo1MlrOEpL7MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjIyNDQ4OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/test.py", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDowOTo1MlrOHatiIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTozMzo1OVrOHawI6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MTA0MA==", "bodyText": "These two pieces of code are not strictly equivalent. Are you sure this is what you want?", "url": "https://github.com/returntocorp/semgrep/pull/1758#discussion_r497771040", "createdAt": "2020-09-30T20:09:52Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/test.py", "diffHunk": "@@ -215,9 +219,11 @@ def _generate_line(test_file, matches):\n     )\n \n \n-def invoke_semgrep_multi(filename, *args, **kwargs):\n+def invoke_semgrep_multi(\n+    filename: Path, *args: Path, **kwargs: Any\n+) -> Tuple[Path, Optional[Exception], Any]:\n     try:\n-        output = invoke_semgrep(filename, *args, **kwargs)\n+        output = invoke_semgrep(filename, list(args), **kwargs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e92bd52189d3fa3f1e4e12a78af69395a57357"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4OTkwOA==", "bodyText": "I can't figure out how this code was working before TBH, but invoke_semgrep definitely takes a list in that position.", "url": "https://github.com/returntocorp/semgrep/pull/1758#discussion_r497789908", "createdAt": "2020-09-30T20:46:27Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/test.py", "diffHunk": "@@ -215,9 +219,11 @@ def _generate_line(test_file, matches):\n     )\n \n \n-def invoke_semgrep_multi(filename, *args, **kwargs):\n+def invoke_semgrep_multi(\n+    filename: Path, *args: Path, **kwargs: Any\n+) -> Tuple[Path, Optional[Exception], Any]:\n     try:\n-        output = invoke_semgrep(filename, *args, **kwargs)\n+        output = invoke_semgrep(filename, list(args), **kwargs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MTA0MA=="}, "originalCommit": {"oid": "53e92bd52189d3fa3f1e4e12a78af69395a57357"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwMTcyMg==", "bodyText": "If we look at config_with_tests we can see it contains data like:\nipdb> pp config_with_tests                                                                           \n[(PosixPath('~/r2c/semgrep-rules/python/requests/security/no-auth-over-http.yaml'),\n  [PosixPath('~/r2c/semgrep-rules/python/requests/security/no-auth-over-http.py')]),\n (PosixPath('~/r2c/semgrep-rules/python/requests/security/disabled-cert-validation.yaml'),\n  [PosixPath('~/r2c/semgrep-rules/python/requests/security/disabled-cert-validation.py')]),\n (PosixPath('~/r2c/semgrep-rules/python/requests/best-practice/use-timeout.yaml'),\nWith starmap we pass these in as arguments to invoke_semgrep_multi. E.g.\n\nfilename -> PosixPath('~/r2c/semgrep-rules/python/requests/security/no-auth-over-http.yaml')\n*args -> [PosixPath('~/r2c/semgrep-rules/python/requests/security/no-auth-over-http.py')] (but it could be more with additional positional arguments passed in)\n\ninvoke_semgrep_multi was meant to be a loose wrapper around invoke_semgrep with multiprocessing, so I went with *args and **kwargs. So it is true that list(args) will work, but that wasn't really the intent here. If someone passes in an additional positional argument it won't work as expected. I think you want *args: Any and no list in the invoke_semgrep call.", "url": "https://github.com/returntocorp/semgrep/pull/1758#discussion_r497801722", "createdAt": "2020-09-30T21:08:57Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/test.py", "diffHunk": "@@ -215,9 +219,11 @@ def _generate_line(test_file, matches):\n     )\n \n \n-def invoke_semgrep_multi(filename, *args, **kwargs):\n+def invoke_semgrep_multi(\n+    filename: Path, *args: Path, **kwargs: Any\n+) -> Tuple[Path, Optional[Exception], Any]:\n     try:\n-        output = invoke_semgrep(filename, *args, **kwargs)\n+        output = invoke_semgrep(filename, list(args), **kwargs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MTA0MA=="}, "originalCommit": {"oid": "53e92bd52189d3fa3f1e4e12a78af69395a57357"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwMjQ0MA==", "bodyText": "We could've even included filename in the *args passthru here, but we needed to return it below.", "url": "https://github.com/returntocorp/semgrep/pull/1758#discussion_r497802440", "createdAt": "2020-09-30T21:10:22Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/test.py", "diffHunk": "@@ -215,9 +219,11 @@ def _generate_line(test_file, matches):\n     )\n \n \n-def invoke_semgrep_multi(filename, *args, **kwargs):\n+def invoke_semgrep_multi(\n+    filename: Path, *args: Path, **kwargs: Any\n+) -> Tuple[Path, Optional[Exception], Any]:\n     try:\n-        output = invoke_semgrep(filename, *args, **kwargs)\n+        output = invoke_semgrep(filename, list(args), **kwargs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MTA0MA=="}, "originalCommit": {"oid": "53e92bd52189d3fa3f1e4e12a78af69395a57357"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxMDI0Mw==", "bodyText": "Let's not fight with the typechecker. We control the signature and call of the method, so let's just use it explicitly.", "url": "https://github.com/returntocorp/semgrep/pull/1758#discussion_r497810243", "createdAt": "2020-09-30T21:26:32Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/test.py", "diffHunk": "@@ -215,9 +219,11 @@ def _generate_line(test_file, matches):\n     )\n \n \n-def invoke_semgrep_multi(filename, *args, **kwargs):\n+def invoke_semgrep_multi(\n+    filename: Path, *args: Path, **kwargs: Any\n+) -> Tuple[Path, Optional[Exception], Any]:\n     try:\n-        output = invoke_semgrep(filename, *args, **kwargs)\n+        output = invoke_semgrep(filename, list(args), **kwargs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MTA0MA=="}, "originalCommit": {"oid": "53e92bd52189d3fa3f1e4e12a78af69395a57357"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxMzczOA==", "bodyText": "FWIW I tested this on semgrep-rules and it does the right thing TM", "url": "https://github.com/returntocorp/semgrep/pull/1758#discussion_r497813738", "createdAt": "2020-09-30T21:33:59Z", "author": {"login": "nbrahms"}, "path": "semgrep/semgrep/test.py", "diffHunk": "@@ -215,9 +219,11 @@ def _generate_line(test_file, matches):\n     )\n \n \n-def invoke_semgrep_multi(filename, *args, **kwargs):\n+def invoke_semgrep_multi(\n+    filename: Path, *args: Path, **kwargs: Any\n+) -> Tuple[Path, Optional[Exception], Any]:\n     try:\n-        output = invoke_semgrep(filename, *args, **kwargs)\n+        output = invoke_semgrep(filename, list(args), **kwargs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MTA0MA=="}, "originalCommit": {"oid": "53e92bd52189d3fa3f1e4e12a78af69395a57357"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4881, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}