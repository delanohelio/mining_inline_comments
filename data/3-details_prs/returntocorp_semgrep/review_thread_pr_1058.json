{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTMzOTIy", "number": 1058, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzoyNjowM1rOEGjIhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzoyNjowM1rOEGjIhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzAyNTM0OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/error.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzoyNjowM1rOGlanKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMDoxNToxN1rOGlbdXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4NjUwNg==", "bodyText": "Is this the best way to enforce this?", "url": "https://github.com/returntocorp/semgrep/pull/1058#discussion_r441886506", "createdAt": "2020-06-17T23:26:03Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -94,19 +111,21 @@ def __init__(\n         self.level = level\n         self.spans = spans\n         self.help = help\n-\n-    @property\n-    def code(self) -> int:  # type: ignore\n-        \"\"\"\n-        If we explicitly set a code, return that.\n-        Otherwise, if the cause sets a code, return that.\n-        Otherwise, return a generic FATAL_EXIT_CODE\n-        \"\"\"\n-        return (\n-            self.__dict__.get(\"code\")\n-            or getattr(self.__cause__, \"code\", None)\n-            or FATAL_EXIT_CODE\n+        assert hasattr(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9af1a608b4d44b8b7592a6e0d13ac87301248fbc"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwMDM4MA==", "bodyText": "I suppose we could write a semgrep rule :-)", "url": "https://github.com/returntocorp/semgrep/pull/1058#discussion_r441900380", "createdAt": "2020-06-18T00:15:17Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -94,19 +111,21 @@ def __init__(\n         self.level = level\n         self.spans = spans\n         self.help = help\n-\n-    @property\n-    def code(self) -> int:  # type: ignore\n-        \"\"\"\n-        If we explicitly set a code, return that.\n-        Otherwise, if the cause sets a code, return that.\n-        Otherwise, return a generic FATAL_EXIT_CODE\n-        \"\"\"\n-        return (\n-            self.__dict__.get(\"code\")\n-            or getattr(self.__cause__, \"code\", None)\n-            or FATAL_EXIT_CODE\n+        assert hasattr(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4NjUwNg=="}, "originalCommit": {"oid": "9af1a608b4d44b8b7592a6e0d13ac87301248fbc"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4612, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}