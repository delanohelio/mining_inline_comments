{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NjI4NDk5", "number": 1418, "title": "Simplify README.md", "bodyText": "In this PR I streamline the README and focus on Semgrep's CLI usage.", "createdAt": "2020-07-30T21:59:22Z", "url": "https://github.com/returntocorp/semgrep/pull/1418", "merged": true, "mergeCommit": {"oid": "db2d5d2f12f039473155143ed8930d26c5a662c1"}, "closed": true, "closedAt": "2020-08-07T18:59:07Z", "author": {"login": "dlukeomalley"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6G8OTAH2gAyNDU5NjI4NDk5OmVlNDc0NzM5MWE4YjRkM2UzZWM0OTU5ZThhZDdlZjBjMmRjYjk0ZTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8nNiEgH2gAyNDU5NjI4NDk5OjcxNzk0YWZjYmZkYmFiMGI2NTdlYjIxNzY0M2ZkZWMxZmQ1MjgyOTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4", "committedDate": "2020-07-30T21:58:54Z", "message": "Simplify README.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Nzg2MDI3", "url": "https://github.com/returntocorp/semgrep/pull/1418#pullrequestreview-458786027", "createdAt": "2020-07-30T22:00:14Z", "commit": {"oid": "ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjowMDoxNFrOG51Unw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjowMDoxNFrOG51Unw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5NTY0Nw==", "bodyText": "Missing JSON and OCaml", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r463295647", "createdAt": "2020-07-30T22:00:14Z", "author": {"login": "dlukeomalley"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,172 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful DSL; patterns look like the source code you\u2019re targeting\n+- Batteries included with hundreds of existing community rules for OWASP 10 issues and common mistakes\n+- Run it in CI, at pre-commit, or in the editor\n+- Runs offline on uncompiled code\n \n-Visit [Installation](#installation) and [Usage](#usage) to get started.\n+Semgrep supports:\n \n-## Installation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODE1NzM3", "url": "https://github.com/returntocorp/semgrep/pull/1418#pullrequestreview-458815737", "createdAt": "2020-07-30T22:51:02Z", "commit": {"oid": "ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjo1MTowMlrOG52eNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzowNzoxMVrOG52xuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxNDQ4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The best place to start with Semgrep is its [Quick Start](https://semgrep.dev/editors). For a more in-depth introduction, see the [Semgrep Tutorial](https://semgrep.dev/learn).\n          \n          \n            \n            The best place to start with Semgrep is its [Quick Start](https://semgrep.dev/editor). For a more in-depth introduction, see the [Semgrep Tutorial](https://semgrep.dev/learn).", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r463314485", "createdAt": "2020-07-30T22:51:02Z", "author": {"login": "pabloest"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,172 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful DSL; patterns look like the source code you\u2019re targeting\n+- Batteries included with hundreds of existing community rules for OWASP 10 issues and common mistakes\n+- Run it in CI, at pre-commit, or in the editor\n+- Runs offline on uncompiled code\n \n-Visit [Installation](#installation) and [Usage](#usage) to get started.\n+Semgrep supports:\n \n-## Installation\n-> Want to skip installation? You can run Semgrep via our interactive live editor at [semgrep.dev](https://semgrep.dev/editor).\n+| **Python** | **Java** | **Go** | **JavaScript** | **Ruby** | **TypeScript** | **C** |\n+| :--------- | :------- | :----- | :------------- | :------- | :------------- | :---- |\n+| \u2705         | \u2705       | \u2705     | \u2705             | \ud83d\udea7       | \ud83d\udea7             | \ud83d\udea7    |\n \n-On macOS, binaries are available via Homebrew:\n+Semgrep is proudly supported by r2c. Learn more about a hosted version of Semgrep with an enterprise feature set at [r2c.dev](https://r2c.dev/).\n \n-```bash\n-$ brew install semgrep\n-```\n-\n-On Ubuntu/WSL/linux, we recommend installing via `pip`\n+## Getting Started\n \n-```bash\n-$ pip3 install semgrep\n-```\n+The best place to start with Semgrep is its [Quick Start](https://semgrep.dev/editors). For a more in-depth introduction, see the [Semgrep Tutorial](https://semgrep.dev/learn).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxNDY2MQ==", "bodyText": "Thoughts on writing out \u201cdomain-specific language?\u201d", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r463314661", "createdAt": "2020-07-30T22:51:35Z", "author": {"login": "pabloest"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,172 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful DSL; patterns look like the source code you\u2019re targeting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxNDc1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - No painful DSL; patterns look like the source code you\u2019re targeting\n          \n          \n            \n            - No painful DSL; Semgrep patterns look like the source code you\u2019re targeting\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r463314751", "createdAt": "2020-07-30T22:51:51Z", "author": {"login": "pabloest"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,172 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful DSL; patterns look like the source code you\u2019re targeting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxNDgzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Batteries included with hundreds of existing community rules for OWASP 10 issues and common mistakes\n          \n          \n            \n            - Batteries included with hundreds of existing community rules for OWASP Top 10 issues and common mistakes", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r463314839", "createdAt": "2020-07-30T22:52:05Z", "author": {"login": "pabloest"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,172 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful DSL; patterns look like the source code you\u2019re targeting\n+- Batteries included with hundreds of existing community rules for OWASP 10 issues and common mistakes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxNTE5Mg==", "bodyText": "How does one run it in the editor?", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r463315192", "createdAt": "2020-07-30T22:53:17Z", "author": {"login": "pabloest"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,172 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful DSL; patterns look like the source code you\u2019re targeting\n+- Batteries included with hundreds of existing community rules for OWASP 10 issues and common mistakes\n+- Run it in CI, at pre-commit, or in the editor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxNTUzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Once installed, Semgrep can be run with quick patterns or entire rule packs:\n          \n          \n            \n            Once installed, Semgrep can be run with single patterns or entire rule packs:", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r463315535", "createdAt": "2020-07-30T22:54:27Z", "author": {"login": "pabloest"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,172 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful DSL; patterns look like the source code you\u2019re targeting\n+- Batteries included with hundreds of existing community rules for OWASP 10 issues and common mistakes\n+- Run it in CI, at pre-commit, or in the editor\n+- Runs offline on uncompiled code\n \n-Visit [Installation](#installation) and [Usage](#usage) to get started.\n+Semgrep supports:\n \n-## Installation\n-> Want to skip installation? You can run Semgrep via our interactive live editor at [semgrep.dev](https://semgrep.dev/editor).\n+| **Python** | **Java** | **Go** | **JavaScript** | **Ruby** | **TypeScript** | **C** |\n+| :--------- | :------- | :----- | :------------- | :------- | :------------- | :---- |\n+| \u2705         | \u2705       | \u2705     | \u2705             | \ud83d\udea7       | \ud83d\udea7             | \ud83d\udea7    |\n \n-On macOS, binaries are available via Homebrew:\n+Semgrep is proudly supported by r2c. Learn more about a hosted version of Semgrep with an enterprise feature set at [r2c.dev](https://r2c.dev/).\n \n-```bash\n-$ brew install semgrep\n-```\n-\n-On Ubuntu/WSL/linux, we recommend installing via `pip`\n+## Getting Started\n \n-```bash\n-$ pip3 install semgrep\n-```\n+The best place to start with Semgrep is its [Quick Start](https://semgrep.dev/editors). For a more in-depth introduction, see the [Semgrep Tutorial](https://semgrep.dev/learn).\n \n-An install script is also available with each [release](https://github.com/returntocorp/semgrep/releases/download/v0.17.0/semgrep-v0.17.0-ubuntu-generic.sh) if you want a native binary.\n+Semgrep can be installed using `brew`, `pip`, or `docker`:\n \n-```bash\n-$ ./semgrep-v0.17.0-ubuntu-generic.sh\n-```\n+```sh\n+# For macOS\n+$ brew install semgrep\n \n-To try Semgrep without installation, you can also run it via Docker:\n+# On Ubuntu/WSL/linux, we recommend installing via `pip`\n+$ pip3 install semgrep\n \n-```\n+# To try Semgrep without installation run via Docker\n $ docker run --rm -v \"${PWD}:/src\" returntocorp/semgrep --help\n ```\n \n-See [Usage](#usage) to learn about running pre-built rules and writing custom ones.\n-\n-## Motivation\n-\n-Semgrep exists because:\n-\n-1. Insecure code is easy to write\n-2. The future of security involves automatically guiding developers towards a \u201cpaved road\u201d made of default-safe frameworks (i.e. [React](https://reactjs.org/) or Object-relational Mappers)\n-3. `grep` isn\u2019t expressive enough and traditional static analysis tools (SAST) are too complicated/slow for paved road automation\n-\n-The AppSec, Developer, and DevOps communities deserve a static analysis tool that is fast, easy to use, code-aware, multi-lingual, and open source!\n-\n-## Overview\n-\n-Semgrep is optimized for:\n-\n-* **Speed**: Fast enough to run on every build, commit, or file save\n-* **Finding bugs that matter**: Run your own specialized rules or choose OWASP 10 checks from the [Semgrep Registry](https://semgrep.dev/r). Rules match source code at the Abstract Syntax Tree (AST) level, unlike regexes that match strings and aren't semantically aware.\n-* **Ease of customization**: Rules look like the code you\u2019re searching, no static analysis PhD required. They don't require compiled code, only source, reducing iteration time.\n-* **Ease of integration**. Highly portable and many CI and git-hook integrations already exist. Output `--json` and pipe results into your existing systems.\n-* **Polyglot environments**: Don't learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, RuboCop, Gosec). Use the same syntax and concepts independent of language.\n-\n-\n-### Language Support\n-\n-| **Python** | **JavaScript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **JSON** | **Ruby** | **OCaml** | **TypeScript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------|:----------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                            | \u2705       | \ud83d\udea7       |\ud83d\udea7        |  Coming...      | Coming...             |\n-\n-Missing support for a language? Let us know by filing a ticket, joining our Slack, or emailing [support@r2c.dev](mailto:support@rc2.dev?subject=Language%20Support:).\n-\n-### Pattern Syntax Teaser\n-\n-One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries.\n-\n-The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n-\n-**Example**: Say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:\n-\n-~~~python\n-# Simple cases grep finds\n-exec(\"ls\")\n-exec(some_var)\n-\n-# But you don't have to worry about whitespace\n-exec (foo)\n-\n-# Or calls across multiple lines\n-exec (\n-    bar\n-)\n-~~~\n-\n-Importantly, Semgrep would *not* match the following:\n-\n-~~~python\n-# grep would match this, but Semgrep ignores it because\n-# it doesn't have the right function name\n-other_exec(bar)\n-\n-# Semgrep ignores commented out lines\n-# exec(foo)\n-\n-# and hard-coded strings\n-print(\"exec(bar)\")\n-~~~\n-\n-Semgrep will even match aliased imports:\n-\n-~~~python\n-# Semgrep knows that safe_function refers to exec so it\n-# will still match!\n-#   Oof, try finding this with grep\n-import exec as safe_function\n-safe_function(tricksy)\n-~~~\n-\n-Play with this example in your browser [here](https://semgrep.dev/QrkD), or copy the above code into a file locally (`exec.py`) and run:\n-\n-~~~python\n-$ semgrep -l python -e \"exec(...)\" /path/to/exec.py\n-~~~\n-\n-More example patterns:\n-\n-| **Pattern**                                                        | **Matches**                                                |\n-|:-------------------------------------------------------------------|:-----------------------------------------------------------|\n-| [`$X == $X`](https://semgrep.dev/20B)                             | `if (node.id == node.id): ...`                             |\n-| [`requests.get(..., verify=False, ...)`](https://semgrep.dev/jqn) | `requests.get(url, timeout=3, verify=False)`               |\n-| [`os.system(...)`](https://semgrep.dev/1W5)                       | `from os import system; system('echo semgrep')`            |\n-| [`$ELEMENT.innerHTML`](https://semgrep.dev/9ze)                   | ``el.innerHTML = \"<img src='x' onerror='alert(`XSS`)'>\";`` |\n-| [`$TOKEN.SignedString([]byte(\"...\"))`](https://semgrep.dev/rXW)   | `ss, err := token.SignedString([]byte(\"HARDCODED KEY\"))`   |\n-\n-\u2192 [see more example patterns in the Semgrep Registry](https://semgrep.dev/registry).\n-\n-For more info on what you can do in patterns, see the [pattern features\n-docs](docs/pattern-features.md).\n-\n-## Usage\n-\n-Semgrep supports three primary workflows:\n-\n-* Run pre-built rules\n-* Writing custom rules\n-* Run Semgrep continuously in CI\n-\n-The following sections cover each in more detail.\n-\n-### Run Pre-Built Rules\n-\n-The easiest way to get started with Semgrep (other than [semgrep.dev](https://semgrep.dev/)) is to scan your code with pre-built rules.\n-\n-The [Semgrep Registry](https://semgrep.dev/r) contains rules for many programming errors, including security issues and correctness bugs. Security rules are annotated with CWE and OWASP metadata when applicable. OWASP rule coverage per language is displayed below.\n-\n-<p align=\"center\">\n-    <img width=\"600\" src=\"https://web-assets.r2c.dev/semgrep-rules-owasp-coverage-20200520.png\" style=\"max-width:100%;\" />\n-</p>\n-\n-You can use pre-built [Rule Packs](https://semgrep.dev/packs), that contain sets of rules grouped by language and/or framework:\n-\n-```bash\n-$ semgrep --config=https://semgrep.dev/c/p/java\n-$ semgrep --config=https://semgrep.dev/c/p/python\n-$ semgrep --config=https://semgrep.dev/c/p/golang\n-$ semgrep --config=https://semgrep.dev/c/p/javascript\n-...\n-```\n-\n-Or you can run all of Semgrep's default rules for all languages as appropriate (note: each rule says what language it's for, so Semgrep won't try to run a Python rule on Java code).\n-\n-```bash\n-$ semgrep --config=r2c\n-```\n-\n-You can also run a specific rule or group of rules:\n+Once installed, Semgrep can be run with quick patterns or entire rule packs:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxNjU5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Explore community rule packs and CI integrations at [semgrep.dev](https://semgrep.dev/packs).\n          \n          \n            \n            Explore the Semgrep Registry of rules and CI integrations at [semgrep.dev](https://semgrep.dev/packs).", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r463316597", "createdAt": "2020-07-30T22:57:37Z", "author": {"login": "pabloest"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,172 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful DSL; patterns look like the source code you\u2019re targeting\n+- Batteries included with hundreds of existing community rules for OWASP 10 issues and common mistakes\n+- Run it in CI, at pre-commit, or in the editor\n+- Runs offline on uncompiled code\n \n-Visit [Installation](#installation) and [Usage](#usage) to get started.\n+Semgrep supports:\n \n-## Installation\n-> Want to skip installation? You can run Semgrep via our interactive live editor at [semgrep.dev](https://semgrep.dev/editor).\n+| **Python** | **Java** | **Go** | **JavaScript** | **Ruby** | **TypeScript** | **C** |\n+| :--------- | :------- | :----- | :------------- | :------- | :------------- | :---- |\n+| \u2705         | \u2705       | \u2705     | \u2705             | \ud83d\udea7       | \ud83d\udea7             | \ud83d\udea7    |\n \n-On macOS, binaries are available via Homebrew:\n+Semgrep is proudly supported by r2c. Learn more about a hosted version of Semgrep with an enterprise feature set at [r2c.dev](https://r2c.dev/).\n \n-```bash\n-$ brew install semgrep\n-```\n-\n-On Ubuntu/WSL/linux, we recommend installing via `pip`\n+## Getting Started\n \n-```bash\n-$ pip3 install semgrep\n-```\n+The best place to start with Semgrep is its [Quick Start](https://semgrep.dev/editors). For a more in-depth introduction, see the [Semgrep Tutorial](https://semgrep.dev/learn).\n \n-An install script is also available with each [release](https://github.com/returntocorp/semgrep/releases/download/v0.17.0/semgrep-v0.17.0-ubuntu-generic.sh) if you want a native binary.\n+Semgrep can be installed using `brew`, `pip`, or `docker`:\n \n-```bash\n-$ ./semgrep-v0.17.0-ubuntu-generic.sh\n-```\n+```sh\n+# For macOS\n+$ brew install semgrep\n \n-To try Semgrep without installation, you can also run it via Docker:\n+# On Ubuntu/WSL/linux, we recommend installing via `pip`\n+$ pip3 install semgrep\n \n-```\n+# To try Semgrep without installation run via Docker\n $ docker run --rm -v \"${PWD}:/src\" returntocorp/semgrep --help\n ```\n \n-See [Usage](#usage) to learn about running pre-built rules and writing custom ones.\n-\n-## Motivation\n-\n-Semgrep exists because:\n-\n-1. Insecure code is easy to write\n-2. The future of security involves automatically guiding developers towards a \u201cpaved road\u201d made of default-safe frameworks (i.e. [React](https://reactjs.org/) or Object-relational Mappers)\n-3. `grep` isn\u2019t expressive enough and traditional static analysis tools (SAST) are too complicated/slow for paved road automation\n-\n-The AppSec, Developer, and DevOps communities deserve a static analysis tool that is fast, easy to use, code-aware, multi-lingual, and open source!\n-\n-## Overview\n-\n-Semgrep is optimized for:\n-\n-* **Speed**: Fast enough to run on every build, commit, or file save\n-* **Finding bugs that matter**: Run your own specialized rules or choose OWASP 10 checks from the [Semgrep Registry](https://semgrep.dev/r). Rules match source code at the Abstract Syntax Tree (AST) level, unlike regexes that match strings and aren't semantically aware.\n-* **Ease of customization**: Rules look like the code you\u2019re searching, no static analysis PhD required. They don't require compiled code, only source, reducing iteration time.\n-* **Ease of integration**. Highly portable and many CI and git-hook integrations already exist. Output `--json` and pipe results into your existing systems.\n-* **Polyglot environments**: Don't learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, RuboCop, Gosec). Use the same syntax and concepts independent of language.\n-\n-\n-### Language Support\n-\n-| **Python** | **JavaScript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **JSON** | **Ruby** | **OCaml** | **TypeScript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------|:----------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                            | \u2705       | \ud83d\udea7       |\ud83d\udea7        |  Coming...      | Coming...             |\n-\n-Missing support for a language? Let us know by filing a ticket, joining our Slack, or emailing [support@r2c.dev](mailto:support@rc2.dev?subject=Language%20Support:).\n-\n-### Pattern Syntax Teaser\n-\n-One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries.\n-\n-The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n-\n-**Example**: Say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:\n-\n-~~~python\n-# Simple cases grep finds\n-exec(\"ls\")\n-exec(some_var)\n-\n-# But you don't have to worry about whitespace\n-exec (foo)\n-\n-# Or calls across multiple lines\n-exec (\n-    bar\n-)\n-~~~\n-\n-Importantly, Semgrep would *not* match the following:\n-\n-~~~python\n-# grep would match this, but Semgrep ignores it because\n-# it doesn't have the right function name\n-other_exec(bar)\n-\n-# Semgrep ignores commented out lines\n-# exec(foo)\n-\n-# and hard-coded strings\n-print(\"exec(bar)\")\n-~~~\n-\n-Semgrep will even match aliased imports:\n-\n-~~~python\n-# Semgrep knows that safe_function refers to exec so it\n-# will still match!\n-#   Oof, try finding this with grep\n-import exec as safe_function\n-safe_function(tricksy)\n-~~~\n-\n-Play with this example in your browser [here](https://semgrep.dev/QrkD), or copy the above code into a file locally (`exec.py`) and run:\n-\n-~~~python\n-$ semgrep -l python -e \"exec(...)\" /path/to/exec.py\n-~~~\n-\n-More example patterns:\n-\n-| **Pattern**                                                        | **Matches**                                                |\n-|:-------------------------------------------------------------------|:-----------------------------------------------------------|\n-| [`$X == $X`](https://semgrep.dev/20B)                             | `if (node.id == node.id): ...`                             |\n-| [`requests.get(..., verify=False, ...)`](https://semgrep.dev/jqn) | `requests.get(url, timeout=3, verify=False)`               |\n-| [`os.system(...)`](https://semgrep.dev/1W5)                       | `from os import system; system('echo semgrep')`            |\n-| [`$ELEMENT.innerHTML`](https://semgrep.dev/9ze)                   | ``el.innerHTML = \"<img src='x' onerror='alert(`XSS`)'>\";`` |\n-| [`$TOKEN.SignedString([]byte(\"...\"))`](https://semgrep.dev/rXW)   | `ss, err := token.SignedString([]byte(\"HARDCODED KEY\"))`   |\n-\n-\u2192 [see more example patterns in the Semgrep Registry](https://semgrep.dev/registry).\n-\n-For more info on what you can do in patterns, see the [pattern features\n-docs](docs/pattern-features.md).\n-\n-## Usage\n-\n-Semgrep supports three primary workflows:\n-\n-* Run pre-built rules\n-* Writing custom rules\n-* Run Semgrep continuously in CI\n-\n-The following sections cover each in more detail.\n-\n-### Run Pre-Built Rules\n-\n-The easiest way to get started with Semgrep (other than [semgrep.dev](https://semgrep.dev/)) is to scan your code with pre-built rules.\n-\n-The [Semgrep Registry](https://semgrep.dev/r) contains rules for many programming errors, including security issues and correctness bugs. Security rules are annotated with CWE and OWASP metadata when applicable. OWASP rule coverage per language is displayed below.\n-\n-<p align=\"center\">\n-    <img width=\"600\" src=\"https://web-assets.r2c.dev/semgrep-rules-owasp-coverage-20200520.png\" style=\"max-width:100%;\" />\n-</p>\n-\n-You can use pre-built [Rule Packs](https://semgrep.dev/packs), that contain sets of rules grouped by language and/or framework:\n-\n-```bash\n-$ semgrep --config=https://semgrep.dev/c/p/java\n-$ semgrep --config=https://semgrep.dev/c/p/python\n-$ semgrep --config=https://semgrep.dev/c/p/golang\n-$ semgrep --config=https://semgrep.dev/c/p/javascript\n-...\n-```\n-\n-Or you can run all of Semgrep's default rules for all languages as appropriate (note: each rule says what language it's for, so Semgrep won't try to run a Python rule on Java code).\n-\n-```bash\n-$ semgrep --config=r2c\n-```\n-\n-You can also run a specific rule or group of rules:\n+Once installed, Semgrep can be run with quick patterns or entire rule packs:\n \n-```bash\n-# Run a specific rule\n-$ semgrep --config=https://semgrep.dev/c/r/java.spring.security.audit.cookie-missing-samesite\n+```sh\n+# Check for Python == where the left and right hand sides are the same (often a bug)\n+$ semgrep -e `$X==$X` --lang=py path/to/src\n \n-# Run a set of rules\n-$ semgrep --config=https://semgrep.dev/c/r/java.spring.security\n+# Run the default rule pack with rules for many languages\n+$ semgrep --config=default path/to/src\n ```\n \n-All public Semgrep rules can be viewed on the [Registry](https://semgrep.dev/r), which pulls the rules from YAML files defined in the [semgrep-rules](https://github.com/returntocorp/semgrep-rules) GitHub repo.\n-\n-Here are some sample vulnerable repos to test on:\n-* Django: [lets-be-bad-guys](https://github.com/mpirnat/lets-be-bad-guys), [django.nV](https://github.com/nVisium/django.nV)\n-* Flask: [Vulnerable-Flask-App](https://github.com/we45/Vulnerable-Flask-App)\n-* Java: [WebGoat](https://github.com/WebGoat/WebGoat), [OWASP Benchmark](https://github.com/OWASP/Benchmark)\n-* NodeJS: [OWASP Juice Shop](https://github.com/bkimminich/juice-shop), [DevSlop Pixi](https://github.com/DevSlop/Pixi)\n-* Golang: [GoVWA](https://github.com/0c34/govwa)\n-\n-### Writing Custom Rules\n-\n-One of the strengths of Semgrep is how easy it is to write rules.\n-\n-This makes it possible to:\n-* Quickly port rules from other tools.\n-* Think of an interesting code pattern, and then find instances of it in your\n-    code.\n-* Find code base or org-specific bugs and antipatterns - things that built-in\n-    checks for existing tools won't find because they're unique to you.\n-* and more!\n-\n-#### Simple Rules\n-\n-For iterating on simple patterns, you can use the `--lang` and `--pattern`\n-flags.\n-\n-```bash\n-$ semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n-```\n+Explore community rule packs and CI integrations at [semgrep.dev](https://semgrep.dev/packs).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxOTA0OA==", "bodyText": "IMO the [1] type of link formatting is a bit hard to use since the click targets are small and it\u2019s a bit academic-looking. How about something like this?\nExample uses\n\n\n\nUse case\nSemgrep rule\n\n\n\n\nBan dangerous APIs\nNo exec\n\n\nSearch routes and authentiation\nSpring routes\n\n\nEnforce the use secure defaults\nSet cookie\n\n\nEnforce project best-practices\nUse assert, Unchecked subprocess call\n\n\nCodify project-specific knowledge\nVerify before make\n\n\nAudit security hotspots\nAirflow XSS, Hardcoded credentials\n\n\nAudit configuration files\nS3 ARN use", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r463319048", "createdAt": "2020-07-30T23:05:39Z", "author": {"login": "pabloest"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,172 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful DSL; patterns look like the source code you\u2019re targeting\n+- Batteries included with hundreds of existing community rules for OWASP 10 issues and common mistakes\n+- Run it in CI, at pre-commit, or in the editor\n+- Runs offline on uncompiled code\n \n-Visit [Installation](#installation) and [Usage](#usage) to get started.\n+Semgrep supports:\n \n-## Installation\n-> Want to skip installation? You can run Semgrep via our interactive live editor at [semgrep.dev](https://semgrep.dev/editor).\n+| **Python** | **Java** | **Go** | **JavaScript** | **Ruby** | **TypeScript** | **C** |\n+| :--------- | :------- | :----- | :------------- | :------- | :------------- | :---- |\n+| \u2705         | \u2705       | \u2705     | \u2705             | \ud83d\udea7       | \ud83d\udea7             | \ud83d\udea7    |\n \n-On macOS, binaries are available via Homebrew:\n+Semgrep is proudly supported by r2c. Learn more about a hosted version of Semgrep with an enterprise feature set at [r2c.dev](https://r2c.dev/).\n \n-```bash\n-$ brew install semgrep\n-```\n-\n-On Ubuntu/WSL/linux, we recommend installing via `pip`\n+## Getting Started\n \n-```bash\n-$ pip3 install semgrep\n-```\n+The best place to start with Semgrep is its [Quick Start](https://semgrep.dev/editors). For a more in-depth introduction, see the [Semgrep Tutorial](https://semgrep.dev/learn).\n \n-An install script is also available with each [release](https://github.com/returntocorp/semgrep/releases/download/v0.17.0/semgrep-v0.17.0-ubuntu-generic.sh) if you want a native binary.\n+Semgrep can be installed using `brew`, `pip`, or `docker`:\n \n-```bash\n-$ ./semgrep-v0.17.0-ubuntu-generic.sh\n-```\n+```sh\n+# For macOS\n+$ brew install semgrep\n \n-To try Semgrep without installation, you can also run it via Docker:\n+# On Ubuntu/WSL/linux, we recommend installing via `pip`\n+$ pip3 install semgrep\n \n-```\n+# To try Semgrep without installation run via Docker\n $ docker run --rm -v \"${PWD}:/src\" returntocorp/semgrep --help\n ```\n \n-See [Usage](#usage) to learn about running pre-built rules and writing custom ones.\n-\n-## Motivation\n-\n-Semgrep exists because:\n-\n-1. Insecure code is easy to write\n-2. The future of security involves automatically guiding developers towards a \u201cpaved road\u201d made of default-safe frameworks (i.e. [React](https://reactjs.org/) or Object-relational Mappers)\n-3. `grep` isn\u2019t expressive enough and traditional static analysis tools (SAST) are too complicated/slow for paved road automation\n-\n-The AppSec, Developer, and DevOps communities deserve a static analysis tool that is fast, easy to use, code-aware, multi-lingual, and open source!\n-\n-## Overview\n-\n-Semgrep is optimized for:\n-\n-* **Speed**: Fast enough to run on every build, commit, or file save\n-* **Finding bugs that matter**: Run your own specialized rules or choose OWASP 10 checks from the [Semgrep Registry](https://semgrep.dev/r). Rules match source code at the Abstract Syntax Tree (AST) level, unlike regexes that match strings and aren't semantically aware.\n-* **Ease of customization**: Rules look like the code you\u2019re searching, no static analysis PhD required. They don't require compiled code, only source, reducing iteration time.\n-* **Ease of integration**. Highly portable and many CI and git-hook integrations already exist. Output `--json` and pipe results into your existing systems.\n-* **Polyglot environments**: Don't learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, RuboCop, Gosec). Use the same syntax and concepts independent of language.\n-\n-\n-### Language Support\n-\n-| **Python** | **JavaScript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **JSON** | **Ruby** | **OCaml** | **TypeScript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------|:----------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                            | \u2705       | \ud83d\udea7       |\ud83d\udea7        |  Coming...      | Coming...             |\n-\n-Missing support for a language? Let us know by filing a ticket, joining our Slack, or emailing [support@r2c.dev](mailto:support@rc2.dev?subject=Language%20Support:).\n-\n-### Pattern Syntax Teaser\n-\n-One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries.\n-\n-The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n-\n-**Example**: Say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:\n-\n-~~~python\n-# Simple cases grep finds\n-exec(\"ls\")\n-exec(some_var)\n-\n-# But you don't have to worry about whitespace\n-exec (foo)\n-\n-# Or calls across multiple lines\n-exec (\n-    bar\n-)\n-~~~\n-\n-Importantly, Semgrep would *not* match the following:\n-\n-~~~python\n-# grep would match this, but Semgrep ignores it because\n-# it doesn't have the right function name\n-other_exec(bar)\n-\n-# Semgrep ignores commented out lines\n-# exec(foo)\n-\n-# and hard-coded strings\n-print(\"exec(bar)\")\n-~~~\n-\n-Semgrep will even match aliased imports:\n-\n-~~~python\n-# Semgrep knows that safe_function refers to exec so it\n-# will still match!\n-#   Oof, try finding this with grep\n-import exec as safe_function\n-safe_function(tricksy)\n-~~~\n-\n-Play with this example in your browser [here](https://semgrep.dev/QrkD), or copy the above code into a file locally (`exec.py`) and run:\n-\n-~~~python\n-$ semgrep -l python -e \"exec(...)\" /path/to/exec.py\n-~~~\n-\n-More example patterns:\n-\n-| **Pattern**                                                        | **Matches**                                                |\n-|:-------------------------------------------------------------------|:-----------------------------------------------------------|\n-| [`$X == $X`](https://semgrep.dev/20B)                             | `if (node.id == node.id): ...`                             |\n-| [`requests.get(..., verify=False, ...)`](https://semgrep.dev/jqn) | `requests.get(url, timeout=3, verify=False)`               |\n-| [`os.system(...)`](https://semgrep.dev/1W5)                       | `from os import system; system('echo semgrep')`            |\n-| [`$ELEMENT.innerHTML`](https://semgrep.dev/9ze)                   | ``el.innerHTML = \"<img src='x' onerror='alert(`XSS`)'>\";`` |\n-| [`$TOKEN.SignedString([]byte(\"...\"))`](https://semgrep.dev/rXW)   | `ss, err := token.SignedString([]byte(\"HARDCODED KEY\"))`   |\n-\n-\u2192 [see more example patterns in the Semgrep Registry](https://semgrep.dev/registry).\n-\n-For more info on what you can do in patterns, see the [pattern features\n-docs](docs/pattern-features.md).\n-\n-## Usage\n-\n-Semgrep supports three primary workflows:\n-\n-* Run pre-built rules\n-* Writing custom rules\n-* Run Semgrep continuously in CI\n-\n-The following sections cover each in more detail.\n-\n-### Run Pre-Built Rules\n-\n-The easiest way to get started with Semgrep (other than [semgrep.dev](https://semgrep.dev/)) is to scan your code with pre-built rules.\n-\n-The [Semgrep Registry](https://semgrep.dev/r) contains rules for many programming errors, including security issues and correctness bugs. Security rules are annotated with CWE and OWASP metadata when applicable. OWASP rule coverage per language is displayed below.\n-\n-<p align=\"center\">\n-    <img width=\"600\" src=\"https://web-assets.r2c.dev/semgrep-rules-owasp-coverage-20200520.png\" style=\"max-width:100%;\" />\n-</p>\n-\n-You can use pre-built [Rule Packs](https://semgrep.dev/packs), that contain sets of rules grouped by language and/or framework:\n-\n-```bash\n-$ semgrep --config=https://semgrep.dev/c/p/java\n-$ semgrep --config=https://semgrep.dev/c/p/python\n-$ semgrep --config=https://semgrep.dev/c/p/golang\n-$ semgrep --config=https://semgrep.dev/c/p/javascript\n-...\n-```\n-\n-Or you can run all of Semgrep's default rules for all languages as appropriate (note: each rule says what language it's for, so Semgrep won't try to run a Python rule on Java code).\n-\n-```bash\n-$ semgrep --config=r2c\n-```\n-\n-You can also run a specific rule or group of rules:\n+Once installed, Semgrep can be run with quick patterns or entire rule packs:\n \n-```bash\n-# Run a specific rule\n-$ semgrep --config=https://semgrep.dev/c/r/java.spring.security.audit.cookie-missing-samesite\n+```sh\n+# Check for Python == where the left and right hand sides are the same (often a bug)\n+$ semgrep -e `$X==$X` --lang=py path/to/src\n \n-# Run a set of rules\n-$ semgrep --config=https://semgrep.dev/c/r/java.spring.security\n+# Run the default rule pack with rules for many languages\n+$ semgrep --config=default path/to/src\n ```\n \n-All public Semgrep rules can be viewed on the [Registry](https://semgrep.dev/r), which pulls the rules from YAML files defined in the [semgrep-rules](https://github.com/returntocorp/semgrep-rules) GitHub repo.\n-\n-Here are some sample vulnerable repos to test on:\n-* Django: [lets-be-bad-guys](https://github.com/mpirnat/lets-be-bad-guys), [django.nV](https://github.com/nVisium/django.nV)\n-* Flask: [Vulnerable-Flask-App](https://github.com/we45/Vulnerable-Flask-App)\n-* Java: [WebGoat](https://github.com/WebGoat/WebGoat), [OWASP Benchmark](https://github.com/OWASP/Benchmark)\n-* NodeJS: [OWASP Juice Shop](https://github.com/bkimminich/juice-shop), [DevSlop Pixi](https://github.com/DevSlop/Pixi)\n-* Golang: [GoVWA](https://github.com/0c34/govwa)\n-\n-### Writing Custom Rules\n-\n-One of the strengths of Semgrep is how easy it is to write rules.\n-\n-This makes it possible to:\n-* Quickly port rules from other tools.\n-* Think of an interesting code pattern, and then find instances of it in your\n-    code.\n-* Find code base or org-specific bugs and antipatterns - things that built-in\n-    checks for existing tools won't find because they're unique to you.\n-* and more!\n-\n-#### Simple Rules\n-\n-For iterating on simple patterns, you can use the `--lang` and `--pattern`\n-flags.\n-\n-```bash\n-$ semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n-```\n+Explore community rule packs and CI integrations at [semgrep.dev](https://semgrep.dev/packs).\n \n-The `--lang` flag tells Semgrep which language you're targeting and `--pattern` is the code pattern to search for.\n+## Examples\n \n-#### Advanced Rules\n+### Core Uses\n \n-Some rules need more than one line of pattern to express. Sometimes you want to express code patterns, like: `X` must be true AND `Y` must be too, or `X` but NOT `Y`, or `X` must occur inside a block of code that `Y` matches.\n+- Ban dangerous APIs [[1](https://semgrep.live/clintgibler:no-exec)]\n+- Search routes and authentiation [[1](https://semgrep.live/clintgibler:spring-routes)]\n+- Enforce the use secure defaults [[1](https://semgrep.dev/dlukeomalley:flask-set-cookie)]\n+- Enforce project best-practices [[1](https://semgrep.dev/dlukeomalley:use-assertEqual-for-equality), [2](https://semgrep.dev/dlukeomalley:unchecked-subprocess-call)]\n+- Codify project-specific knowledge [[1](https://semgrep.dev/dlukeomalley:verify-before-make)]\n+- Audit security hotspots [[1](https://semgrep.live/ievans:airflow-xss), [2](https://semgrep.dev/dlukeomalley:hardcoded-credentials)]\n+- Audit configuration files [[1](https://semgrep.dev/dlukeomalley:s3-arn-use)]\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxOTIyMw==", "bodyText": "Not sure if GitHub placed this ^^^ comment in the right location. It was meant to be a comment on the code between lines [90, 98] and [100, 103].", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r463319223", "createdAt": "2020-07-30T23:06:20Z", "author": {"login": "pabloest"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,172 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful DSL; patterns look like the source code you\u2019re targeting\n+- Batteries included with hundreds of existing community rules for OWASP 10 issues and common mistakes\n+- Run it in CI, at pre-commit, or in the editor\n+- Runs offline on uncompiled code\n \n-Visit [Installation](#installation) and [Usage](#usage) to get started.\n+Semgrep supports:\n \n-## Installation\n-> Want to skip installation? You can run Semgrep via our interactive live editor at [semgrep.dev](https://semgrep.dev/editor).\n+| **Python** | **Java** | **Go** | **JavaScript** | **Ruby** | **TypeScript** | **C** |\n+| :--------- | :------- | :----- | :------------- | :------- | :------------- | :---- |\n+| \u2705         | \u2705       | \u2705     | \u2705             | \ud83d\udea7       | \ud83d\udea7             | \ud83d\udea7    |\n \n-On macOS, binaries are available via Homebrew:\n+Semgrep is proudly supported by r2c. Learn more about a hosted version of Semgrep with an enterprise feature set at [r2c.dev](https://r2c.dev/).\n \n-```bash\n-$ brew install semgrep\n-```\n-\n-On Ubuntu/WSL/linux, we recommend installing via `pip`\n+## Getting Started\n \n-```bash\n-$ pip3 install semgrep\n-```\n+The best place to start with Semgrep is its [Quick Start](https://semgrep.dev/editors). For a more in-depth introduction, see the [Semgrep Tutorial](https://semgrep.dev/learn).\n \n-An install script is also available with each [release](https://github.com/returntocorp/semgrep/releases/download/v0.17.0/semgrep-v0.17.0-ubuntu-generic.sh) if you want a native binary.\n+Semgrep can be installed using `brew`, `pip`, or `docker`:\n \n-```bash\n-$ ./semgrep-v0.17.0-ubuntu-generic.sh\n-```\n+```sh\n+# For macOS\n+$ brew install semgrep\n \n-To try Semgrep without installation, you can also run it via Docker:\n+# On Ubuntu/WSL/linux, we recommend installing via `pip`\n+$ pip3 install semgrep\n \n-```\n+# To try Semgrep without installation run via Docker\n $ docker run --rm -v \"${PWD}:/src\" returntocorp/semgrep --help\n ```\n \n-See [Usage](#usage) to learn about running pre-built rules and writing custom ones.\n-\n-## Motivation\n-\n-Semgrep exists because:\n-\n-1. Insecure code is easy to write\n-2. The future of security involves automatically guiding developers towards a \u201cpaved road\u201d made of default-safe frameworks (i.e. [React](https://reactjs.org/) or Object-relational Mappers)\n-3. `grep` isn\u2019t expressive enough and traditional static analysis tools (SAST) are too complicated/slow for paved road automation\n-\n-The AppSec, Developer, and DevOps communities deserve a static analysis tool that is fast, easy to use, code-aware, multi-lingual, and open source!\n-\n-## Overview\n-\n-Semgrep is optimized for:\n-\n-* **Speed**: Fast enough to run on every build, commit, or file save\n-* **Finding bugs that matter**: Run your own specialized rules or choose OWASP 10 checks from the [Semgrep Registry](https://semgrep.dev/r). Rules match source code at the Abstract Syntax Tree (AST) level, unlike regexes that match strings and aren't semantically aware.\n-* **Ease of customization**: Rules look like the code you\u2019re searching, no static analysis PhD required. They don't require compiled code, only source, reducing iteration time.\n-* **Ease of integration**. Highly portable and many CI and git-hook integrations already exist. Output `--json` and pipe results into your existing systems.\n-* **Polyglot environments**: Don't learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, RuboCop, Gosec). Use the same syntax and concepts independent of language.\n-\n-\n-### Language Support\n-\n-| **Python** | **JavaScript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **JSON** | **Ruby** | **OCaml** | **TypeScript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------|:----------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                            | \u2705       | \ud83d\udea7       |\ud83d\udea7        |  Coming...      | Coming...             |\n-\n-Missing support for a language? Let us know by filing a ticket, joining our Slack, or emailing [support@r2c.dev](mailto:support@rc2.dev?subject=Language%20Support:).\n-\n-### Pattern Syntax Teaser\n-\n-One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries.\n-\n-The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n-\n-**Example**: Say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:\n-\n-~~~python\n-# Simple cases grep finds\n-exec(\"ls\")\n-exec(some_var)\n-\n-# But you don't have to worry about whitespace\n-exec (foo)\n-\n-# Or calls across multiple lines\n-exec (\n-    bar\n-)\n-~~~\n-\n-Importantly, Semgrep would *not* match the following:\n-\n-~~~python\n-# grep would match this, but Semgrep ignores it because\n-# it doesn't have the right function name\n-other_exec(bar)\n-\n-# Semgrep ignores commented out lines\n-# exec(foo)\n-\n-# and hard-coded strings\n-print(\"exec(bar)\")\n-~~~\n-\n-Semgrep will even match aliased imports:\n-\n-~~~python\n-# Semgrep knows that safe_function refers to exec so it\n-# will still match!\n-#   Oof, try finding this with grep\n-import exec as safe_function\n-safe_function(tricksy)\n-~~~\n-\n-Play with this example in your browser [here](https://semgrep.dev/QrkD), or copy the above code into a file locally (`exec.py`) and run:\n-\n-~~~python\n-$ semgrep -l python -e \"exec(...)\" /path/to/exec.py\n-~~~\n-\n-More example patterns:\n-\n-| **Pattern**                                                        | **Matches**                                                |\n-|:-------------------------------------------------------------------|:-----------------------------------------------------------|\n-| [`$X == $X`](https://semgrep.dev/20B)                             | `if (node.id == node.id): ...`                             |\n-| [`requests.get(..., verify=False, ...)`](https://semgrep.dev/jqn) | `requests.get(url, timeout=3, verify=False)`               |\n-| [`os.system(...)`](https://semgrep.dev/1W5)                       | `from os import system; system('echo semgrep')`            |\n-| [`$ELEMENT.innerHTML`](https://semgrep.dev/9ze)                   | ``el.innerHTML = \"<img src='x' onerror='alert(`XSS`)'>\";`` |\n-| [`$TOKEN.SignedString([]byte(\"...\"))`](https://semgrep.dev/rXW)   | `ss, err := token.SignedString([]byte(\"HARDCODED KEY\"))`   |\n-\n-\u2192 [see more example patterns in the Semgrep Registry](https://semgrep.dev/registry).\n-\n-For more info on what you can do in patterns, see the [pattern features\n-docs](docs/pattern-features.md).\n-\n-## Usage\n-\n-Semgrep supports three primary workflows:\n-\n-* Run pre-built rules\n-* Writing custom rules\n-* Run Semgrep continuously in CI\n-\n-The following sections cover each in more detail.\n-\n-### Run Pre-Built Rules\n-\n-The easiest way to get started with Semgrep (other than [semgrep.dev](https://semgrep.dev/)) is to scan your code with pre-built rules.\n-\n-The [Semgrep Registry](https://semgrep.dev/r) contains rules for many programming errors, including security issues and correctness bugs. Security rules are annotated with CWE and OWASP metadata when applicable. OWASP rule coverage per language is displayed below.\n-\n-<p align=\"center\">\n-    <img width=\"600\" src=\"https://web-assets.r2c.dev/semgrep-rules-owasp-coverage-20200520.png\" style=\"max-width:100%;\" />\n-</p>\n-\n-You can use pre-built [Rule Packs](https://semgrep.dev/packs), that contain sets of rules grouped by language and/or framework:\n-\n-```bash\n-$ semgrep --config=https://semgrep.dev/c/p/java\n-$ semgrep --config=https://semgrep.dev/c/p/python\n-$ semgrep --config=https://semgrep.dev/c/p/golang\n-$ semgrep --config=https://semgrep.dev/c/p/javascript\n-...\n-```\n-\n-Or you can run all of Semgrep's default rules for all languages as appropriate (note: each rule says what language it's for, so Semgrep won't try to run a Python rule on Java code).\n-\n-```bash\n-$ semgrep --config=r2c\n-```\n-\n-You can also run a specific rule or group of rules:\n+Once installed, Semgrep can be run with quick patterns or entire rule packs:\n \n-```bash\n-# Run a specific rule\n-$ semgrep --config=https://semgrep.dev/c/r/java.spring.security.audit.cookie-missing-samesite\n+```sh\n+# Check for Python == where the left and right hand sides are the same (often a bug)\n+$ semgrep -e `$X==$X` --lang=py path/to/src\n \n-# Run a set of rules\n-$ semgrep --config=https://semgrep.dev/c/r/java.spring.security\n+# Run the default rule pack with rules for many languages\n+$ semgrep --config=default path/to/src\n ```\n \n-All public Semgrep rules can be viewed on the [Registry](https://semgrep.dev/r), which pulls the rules from YAML files defined in the [semgrep-rules](https://github.com/returntocorp/semgrep-rules) GitHub repo.\n-\n-Here are some sample vulnerable repos to test on:\n-* Django: [lets-be-bad-guys](https://github.com/mpirnat/lets-be-bad-guys), [django.nV](https://github.com/nVisium/django.nV)\n-* Flask: [Vulnerable-Flask-App](https://github.com/we45/Vulnerable-Flask-App)\n-* Java: [WebGoat](https://github.com/WebGoat/WebGoat), [OWASP Benchmark](https://github.com/OWASP/Benchmark)\n-* NodeJS: [OWASP Juice Shop](https://github.com/bkimminich/juice-shop), [DevSlop Pixi](https://github.com/DevSlop/Pixi)\n-* Golang: [GoVWA](https://github.com/0c34/govwa)\n-\n-### Writing Custom Rules\n-\n-One of the strengths of Semgrep is how easy it is to write rules.\n-\n-This makes it possible to:\n-* Quickly port rules from other tools.\n-* Think of an interesting code pattern, and then find instances of it in your\n-    code.\n-* Find code base or org-specific bugs and antipatterns - things that built-in\n-    checks for existing tools won't find because they're unique to you.\n-* and more!\n-\n-#### Simple Rules\n-\n-For iterating on simple patterns, you can use the `--lang` and `--pattern`\n-flags.\n-\n-```bash\n-$ semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n-```\n+Explore community rule packs and CI integrations at [semgrep.dev](https://semgrep.dev/packs).\n \n-The `--lang` flag tells Semgrep which language you're targeting and `--pattern` is the code pattern to search for.\n+## Examples\n \n-#### Advanced Rules\n+### Core Uses\n \n-Some rules need more than one line of pattern to express. Sometimes you want to express code patterns, like: `X` must be true AND `Y` must be too, or `X` but NOT `Y`, or `X` must occur inside a block of code that `Y` matches.\n+- Ban dangerous APIs [[1](https://semgrep.live/clintgibler:no-exec)]\n+- Search routes and authentiation [[1](https://semgrep.live/clintgibler:spring-routes)]\n+- Enforce the use secure defaults [[1](https://semgrep.dev/dlukeomalley:flask-set-cookie)]\n+- Enforce project best-practices [[1](https://semgrep.dev/dlukeomalley:use-assertEqual-for-equality), [2](https://semgrep.dev/dlukeomalley:unchecked-subprocess-call)]\n+- Codify project-specific knowledge [[1](https://semgrep.dev/dlukeomalley:verify-before-make)]\n+- Audit security hotspots [[1](https://semgrep.live/ievans:airflow-xss), [2](https://semgrep.dev/dlukeomalley:hardcoded-credentials)]\n+- Audit configuration files [[1](https://semgrep.dev/dlukeomalley:s3-arn-use)]\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxOTA0OA=="}, "originalCommit": {"oid": "ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxOTQ4Mw==", "bodyText": "I thought you wanted to capitalize Registry, no?", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r463319483", "createdAt": "2020-07-30T23:07:11Z", "author": {"login": "pabloest"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,172 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful DSL; patterns look like the source code you\u2019re targeting\n+- Batteries included with hundreds of existing community rules for OWASP 10 issues and common mistakes\n+- Run it in CI, at pre-commit, or in the editor\n+- Runs offline on uncompiled code\n \n-Visit [Installation](#installation) and [Usage](#usage) to get started.\n+Semgrep supports:\n \n-## Installation\n-> Want to skip installation? You can run Semgrep via our interactive live editor at [semgrep.dev](https://semgrep.dev/editor).\n+| **Python** | **Java** | **Go** | **JavaScript** | **Ruby** | **TypeScript** | **C** |\n+| :--------- | :------- | :----- | :------------- | :------- | :------------- | :---- |\n+| \u2705         | \u2705       | \u2705     | \u2705             | \ud83d\udea7       | \ud83d\udea7             | \ud83d\udea7    |\n \n-On macOS, binaries are available via Homebrew:\n+Semgrep is proudly supported by r2c. Learn more about a hosted version of Semgrep with an enterprise feature set at [r2c.dev](https://r2c.dev/).\n \n-```bash\n-$ brew install semgrep\n-```\n-\n-On Ubuntu/WSL/linux, we recommend installing via `pip`\n+## Getting Started\n \n-```bash\n-$ pip3 install semgrep\n-```\n+The best place to start with Semgrep is its [Quick Start](https://semgrep.dev/editors). For a more in-depth introduction, see the [Semgrep Tutorial](https://semgrep.dev/learn).\n \n-An install script is also available with each [release](https://github.com/returntocorp/semgrep/releases/download/v0.17.0/semgrep-v0.17.0-ubuntu-generic.sh) if you want a native binary.\n+Semgrep can be installed using `brew`, `pip`, or `docker`:\n \n-```bash\n-$ ./semgrep-v0.17.0-ubuntu-generic.sh\n-```\n+```sh\n+# For macOS\n+$ brew install semgrep\n \n-To try Semgrep without installation, you can also run it via Docker:\n+# On Ubuntu/WSL/linux, we recommend installing via `pip`\n+$ pip3 install semgrep\n \n-```\n+# To try Semgrep without installation run via Docker\n $ docker run --rm -v \"${PWD}:/src\" returntocorp/semgrep --help\n ```\n \n-See [Usage](#usage) to learn about running pre-built rules and writing custom ones.\n-\n-## Motivation\n-\n-Semgrep exists because:\n-\n-1. Insecure code is easy to write\n-2. The future of security involves automatically guiding developers towards a \u201cpaved road\u201d made of default-safe frameworks (i.e. [React](https://reactjs.org/) or Object-relational Mappers)\n-3. `grep` isn\u2019t expressive enough and traditional static analysis tools (SAST) are too complicated/slow for paved road automation\n-\n-The AppSec, Developer, and DevOps communities deserve a static analysis tool that is fast, easy to use, code-aware, multi-lingual, and open source!\n-\n-## Overview\n-\n-Semgrep is optimized for:\n-\n-* **Speed**: Fast enough to run on every build, commit, or file save\n-* **Finding bugs that matter**: Run your own specialized rules or choose OWASP 10 checks from the [Semgrep Registry](https://semgrep.dev/r). Rules match source code at the Abstract Syntax Tree (AST) level, unlike regexes that match strings and aren't semantically aware.\n-* **Ease of customization**: Rules look like the code you\u2019re searching, no static analysis PhD required. They don't require compiled code, only source, reducing iteration time.\n-* **Ease of integration**. Highly portable and many CI and git-hook integrations already exist. Output `--json` and pipe results into your existing systems.\n-* **Polyglot environments**: Don't learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, RuboCop, Gosec). Use the same syntax and concepts independent of language.\n-\n-\n-### Language Support\n-\n-| **Python** | **JavaScript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **JSON** | **Ruby** | **OCaml** | **TypeScript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------|:----------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                            | \u2705       | \ud83d\udea7       |\ud83d\udea7        |  Coming...      | Coming...             |\n-\n-Missing support for a language? Let us know by filing a ticket, joining our Slack, or emailing [support@r2c.dev](mailto:support@rc2.dev?subject=Language%20Support:).\n-\n-### Pattern Syntax Teaser\n-\n-One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries.\n-\n-The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n-\n-**Example**: Say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:\n-\n-~~~python\n-# Simple cases grep finds\n-exec(\"ls\")\n-exec(some_var)\n-\n-# But you don't have to worry about whitespace\n-exec (foo)\n-\n-# Or calls across multiple lines\n-exec (\n-    bar\n-)\n-~~~\n-\n-Importantly, Semgrep would *not* match the following:\n-\n-~~~python\n-# grep would match this, but Semgrep ignores it because\n-# it doesn't have the right function name\n-other_exec(bar)\n-\n-# Semgrep ignores commented out lines\n-# exec(foo)\n-\n-# and hard-coded strings\n-print(\"exec(bar)\")\n-~~~\n-\n-Semgrep will even match aliased imports:\n-\n-~~~python\n-# Semgrep knows that safe_function refers to exec so it\n-# will still match!\n-#   Oof, try finding this with grep\n-import exec as safe_function\n-safe_function(tricksy)\n-~~~\n-\n-Play with this example in your browser [here](https://semgrep.dev/QrkD), or copy the above code into a file locally (`exec.py`) and run:\n-\n-~~~python\n-$ semgrep -l python -e \"exec(...)\" /path/to/exec.py\n-~~~\n-\n-More example patterns:\n-\n-| **Pattern**                                                        | **Matches**                                                |\n-|:-------------------------------------------------------------------|:-----------------------------------------------------------|\n-| [`$X == $X`](https://semgrep.dev/20B)                             | `if (node.id == node.id): ...`                             |\n-| [`requests.get(..., verify=False, ...)`](https://semgrep.dev/jqn) | `requests.get(url, timeout=3, verify=False)`               |\n-| [`os.system(...)`](https://semgrep.dev/1W5)                       | `from os import system; system('echo semgrep')`            |\n-| [`$ELEMENT.innerHTML`](https://semgrep.dev/9ze)                   | ``el.innerHTML = \"<img src='x' onerror='alert(`XSS`)'>\";`` |\n-| [`$TOKEN.SignedString([]byte(\"...\"))`](https://semgrep.dev/rXW)   | `ss, err := token.SignedString([]byte(\"HARDCODED KEY\"))`   |\n-\n-\u2192 [see more example patterns in the Semgrep Registry](https://semgrep.dev/registry).\n-\n-For more info on what you can do in patterns, see the [pattern features\n-docs](docs/pattern-features.md).\n-\n-## Usage\n-\n-Semgrep supports three primary workflows:\n-\n-* Run pre-built rules\n-* Writing custom rules\n-* Run Semgrep continuously in CI\n-\n-The following sections cover each in more detail.\n-\n-### Run Pre-Built Rules\n-\n-The easiest way to get started with Semgrep (other than [semgrep.dev](https://semgrep.dev/)) is to scan your code with pre-built rules.\n-\n-The [Semgrep Registry](https://semgrep.dev/r) contains rules for many programming errors, including security issues and correctness bugs. Security rules are annotated with CWE and OWASP metadata when applicable. OWASP rule coverage per language is displayed below.\n-\n-<p align=\"center\">\n-    <img width=\"600\" src=\"https://web-assets.r2c.dev/semgrep-rules-owasp-coverage-20200520.png\" style=\"max-width:100%;\" />\n-</p>\n-\n-You can use pre-built [Rule Packs](https://semgrep.dev/packs), that contain sets of rules grouped by language and/or framework:\n-\n-```bash\n-$ semgrep --config=https://semgrep.dev/c/p/java\n-$ semgrep --config=https://semgrep.dev/c/p/python\n-$ semgrep --config=https://semgrep.dev/c/p/golang\n-$ semgrep --config=https://semgrep.dev/c/p/javascript\n-...\n-```\n-\n-Or you can run all of Semgrep's default rules for all languages as appropriate (note: each rule says what language it's for, so Semgrep won't try to run a Python rule on Java code).\n-\n-```bash\n-$ semgrep --config=r2c\n-```\n-\n-You can also run a specific rule or group of rules:\n+Once installed, Semgrep can be run with quick patterns or entire rule packs:\n \n-```bash\n-# Run a specific rule\n-$ semgrep --config=https://semgrep.dev/c/r/java.spring.security.audit.cookie-missing-samesite\n+```sh\n+# Check for Python == where the left and right hand sides are the same (often a bug)\n+$ semgrep -e `$X==$X` --lang=py path/to/src\n \n-# Run a set of rules\n-$ semgrep --config=https://semgrep.dev/c/r/java.spring.security\n+# Run the default rule pack with rules for many languages\n+$ semgrep --config=default path/to/src\n ```\n \n-All public Semgrep rules can be viewed on the [Registry](https://semgrep.dev/r), which pulls the rules from YAML files defined in the [semgrep-rules](https://github.com/returntocorp/semgrep-rules) GitHub repo.\n-\n-Here are some sample vulnerable repos to test on:\n-* Django: [lets-be-bad-guys](https://github.com/mpirnat/lets-be-bad-guys), [django.nV](https://github.com/nVisium/django.nV)\n-* Flask: [Vulnerable-Flask-App](https://github.com/we45/Vulnerable-Flask-App)\n-* Java: [WebGoat](https://github.com/WebGoat/WebGoat), [OWASP Benchmark](https://github.com/OWASP/Benchmark)\n-* NodeJS: [OWASP Juice Shop](https://github.com/bkimminich/juice-shop), [DevSlop Pixi](https://github.com/DevSlop/Pixi)\n-* Golang: [GoVWA](https://github.com/0c34/govwa)\n-\n-### Writing Custom Rules\n-\n-One of the strengths of Semgrep is how easy it is to write rules.\n-\n-This makes it possible to:\n-* Quickly port rules from other tools.\n-* Think of an interesting code pattern, and then find instances of it in your\n-    code.\n-* Find code base or org-specific bugs and antipatterns - things that built-in\n-    checks for existing tools won't find because they're unique to you.\n-* and more!\n-\n-#### Simple Rules\n-\n-For iterating on simple patterns, you can use the `--lang` and `--pattern`\n-flags.\n-\n-```bash\n-$ semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n-```\n+Explore community rule packs and CI integrations at [semgrep.dev](https://semgrep.dev/packs).\n \n-The `--lang` flag tells Semgrep which language you're targeting and `--pattern` is the code pattern to search for.\n+## Examples\n \n-#### Advanced Rules\n+### Core Uses\n \n-Some rules need more than one line of pattern to express. Sometimes you want to express code patterns, like: `X` must be true AND `Y` must be too, or `X` but NOT `Y`, or `X` must occur inside a block of code that `Y` matches.\n+- Ban dangerous APIs [[1](https://semgrep.live/clintgibler:no-exec)]\n+- Search routes and authentiation [[1](https://semgrep.live/clintgibler:spring-routes)]\n+- Enforce the use secure defaults [[1](https://semgrep.dev/dlukeomalley:flask-set-cookie)]\n+- Enforce project best-practices [[1](https://semgrep.dev/dlukeomalley:use-assertEqual-for-equality), [2](https://semgrep.dev/dlukeomalley:unchecked-subprocess-call)]\n+- Codify project-specific knowledge [[1](https://semgrep.dev/dlukeomalley:verify-before-make)]\n+- Audit security hotspots [[1](https://semgrep.live/ievans:airflow-xss), [2](https://semgrep.dev/dlukeomalley:hardcoded-credentials)]\n+- Audit configuration files [[1](https://semgrep.dev/dlukeomalley:s3-arn-use)]\n \n-For these cases, Semgrep has a more powerful and flexible [YAML syntax](docs/configuration-files.md).\n+### Upgrading Code\n \n-You can run a single rule or directory of rules specified in YAML by:\n-```bash\n-$ semgrep --config my_rule.yml path/to/dir_or_file\n+- Migrate from deprecated APIs [[1](https://semgrep.dev/editor?registry=java.lang.security.audit.crypto.des-is-deprecated), [2](https://semgrep.dev/editor?registry=python.bokeh.maintainability.deprecated.deprecated_apis), [3](https://semgrep.dev/editor?registry=python.flask.maintainability.deprecated.deprecated-apis)]\n+- Apply automatic fixes [[1](https://semgrep.live/clintgibler:use-listenAndServeTLS), [2]()]\n \n-$ semgrep --config yaml_dir/ path/to/dir_or_file\n-```\n-\n-**Example Advanced Rule**\n-\n-Say you are building a financial trading application in which every `Transaction` object must first be passed to `verify_transaction()` before being passed to `make_transaction()`, or it's a business logic bug.\n-\n-You can express this behavior with the following Semgrep YAML pattern:\n-\n-```yaml\n-rules:\n-- id: find-unverified-transactions\n-  patterns:\n-    - pattern: |\n-        public $RETURN $METHOD(...){\n-            ...\n-            make_transaction($T);\n-            ...\n-        }\n-    - pattern-not: |\n-        public $RETURN $METHOD(...){\n-            ...\n-            verify_transaction($T);\n-            ...\n-            make_transaction($T);\n-            ...\n-        }\n-  message: |\n-    In $METHOD, there's a call to make_transaction() without first calling verify_transaction() on the Transaction object.\n-```\n-\n-* `$RETURN`, `$METHOD`, and `$T` are *metavariables*, an abstraction that Semgrep provides when you want to match something but you don't know exactly what it is ahead of time.\n-  * You can think of *metavariables* like a [capture group](https://regexone.com/lesson/capturing_groups) in regular expressions.\n-* The `pattern` clause defines what we're looking for: any method that calls `make_transaction()`.\n-* The `pattern-not` clause *filters out* matches we don't want; in this case, methods where a transaction (`$T`) is passed to `verify_transaction()` before `make_transaction()`.\n-* The `message` is what's returned in Semgrep output, either to STDOUT or as a comment on the pull request on GitHub or other systems.\n-  * Note that *metavariables* can be used to customize messages and make them\n-    contextually relevant. Here we're helpfully telling the user the method\n-    where we've identified the bug.\n-\n-You can play with this transaction example here: https://semgrep.dev/4b4g.\n-\n-**Learn More**\n-\n-* See the [pattern features docs](docs/pattern-features.md) for more info and\n-  examples on the flexibility and power of Semgrep patterns.\n-* See the [YAML configuration file docs](docs/configuration-files.md) for\n-  details on all of the keys that can be used and how they work.\n-* See [Semgrep rule writing methodology](docs/writing_rules/README.md) for\n-  details on the thought process behind writing and rolling out a new Semgrep\n-  rule successfully, and see [these docs](docs/writing_rules/examples.md) for\n-  walkthroughs of writing rules from scratch.\n-* There's also an interactive, example-based Semgrep rule writing tutorial here:\n-  https://semgrep.dev/learn.\n-\n-### Run Semgrep Continuously in CI\n-\n-Semgrep can be run via CLI or Docker and output results as JSON (via the `--json` flag), so it can be inserted into any CI pipeline and have its results processed by whatever tools you're using.\n-\n-Semgrep is aware of *diffs*, so it can report only findings that occur in newly added code, for example, in a commit or pull request.\n-\n-Currently, the easiest way to integrate Semgrep into CI is via a GitHub action we've built. See the [integrations docs](docs/integrations.md) for more details.\n-\n-Semgrep can also output results in the standardized Static Analysis Results Interchange Format ([SARIF](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html)) with the `--sarif` flag, if you use tools that accept this format.\n-\n-## Upgrading\n+## Resources\n \n-How you upgrade Semgrep will depend on how you installed it.\n+Learn more:\n \n-From Homebrew:\n+- [Live editor](https://semgrep.dev/editor)\n+- [Community rule registry](https://semgrep.dev/r)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4747391a8b4d3e3ec4959e8ad7ef0c2dcb94e4"}, "originalPosition": 366}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7e4554562a1ca587eab1f978161d683dca5d661", "author": {"user": {"login": "dlukeomalley", "name": "Luke O'Malley"}}, "url": "https://github.com/returntocorp/semgrep/commit/b7e4554562a1ca587eab1f978161d683dca5d661", "committedDate": "2020-07-31T04:18:40Z", "message": "editors -> editor\n\nCo-authored-by: Pablo Estrada <pablo@r2c.dev>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1441bcd07a879c48439b3a3b6c0e56f91712c86", "author": {"user": {"login": "dlukeomalley", "name": "Luke O'Malley"}}, "url": "https://github.com/returntocorp/semgrep/commit/c1441bcd07a879c48439b3a3b6c0e56f91712c86", "committedDate": "2020-07-31T04:22:48Z", "message": "quick -> single\n\nCo-authored-by: Pablo Estrada <pablo@r2c.dev>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51ab6ac78f1cda687e85c3d5f52234b7a0ba823b", "author": {"user": {"login": "dlukeomalley", "name": "Luke O'Malley"}}, "url": "https://github.com/returntocorp/semgrep/commit/51ab6ac78f1cda687e85c3d5f52234b7a0ba823b", "committedDate": "2020-07-31T04:23:05Z", "message": "Update README.md\n\nCo-authored-by: Pablo Estrada <pablo@r2c.dev>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MTgzOTA4", "url": "https://github.com/returntocorp/semgrep/pull/1418#pullrequestreview-459183908", "createdAt": "2020-07-31T13:43:29Z", "commit": {"oid": "51ab6ac78f1cda687e85c3d5f52234b7a0ba823b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo0MzoyOVrOG6JC9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo0MzoyOVrOG6JC9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxODgwNw==", "bodyText": "We need to keep the Upgrading header - it's referenced by the upgrade CLI message:\n\n\"A new version of Semgrep is available. Please see https://github.com/returntocorp/semgrep#upgrading for more information.\"\n\nThat or we need to change the upgrade message and put this information in a new location. But then of course older Semgrep versions will be pointing to the wrong location.", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r463618807", "createdAt": "2020-07-31T13:43:29Z", "author": {"login": "mschwager"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,172 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful DSL; patterns look like the source code you\u2019re targeting\n+- Batteries included with hundreds of existing community rules for OWASP 10 issues and common mistakes\n+- Run it in CI, at pre-commit, or in the editor\n+- Runs offline on uncompiled code\n \n-Visit [Installation](#installation) and [Usage](#usage) to get started.\n+Semgrep supports:\n \n-## Installation\n-> Want to skip installation? You can run Semgrep via our interactive live editor at [semgrep.dev](https://semgrep.dev/editor).\n+| **Python** | **Java** | **Go** | **JavaScript** | **Ruby** | **TypeScript** | **C** |\n+| :--------- | :------- | :----- | :------------- | :------- | :------------- | :---- |\n+| \u2705         | \u2705       | \u2705     | \u2705             | \ud83d\udea7       | \ud83d\udea7             | \ud83d\udea7    |\n \n-On macOS, binaries are available via Homebrew:\n+Semgrep is proudly supported by r2c. Learn more about a hosted version of Semgrep with an enterprise feature set at [r2c.dev](https://r2c.dev/).\n \n-```bash\n-$ brew install semgrep\n-```\n-\n-On Ubuntu/WSL/linux, we recommend installing via `pip`\n+## Getting Started\n \n-```bash\n-$ pip3 install semgrep\n-```\n+The best place to start with Semgrep is its [Quick Start](https://semgrep.dev/editor). For a more in-depth introduction, see the [Semgrep Tutorial](https://semgrep.dev/learn).\n \n-An install script is also available with each [release](https://github.com/returntocorp/semgrep/releases/download/v0.17.0/semgrep-v0.17.0-ubuntu-generic.sh) if you want a native binary.\n+Semgrep can be installed using `brew`, `pip`, or `docker`:\n \n-```bash\n-$ ./semgrep-v0.17.0-ubuntu-generic.sh\n-```\n+```sh\n+# For macOS\n+$ brew install semgrep\n \n-To try Semgrep without installation, you can also run it via Docker:\n+# On Ubuntu/WSL/linux, we recommend installing via `pip`\n+$ pip3 install semgrep\n \n-```\n+# To try Semgrep without installation run via Docker\n $ docker run --rm -v \"${PWD}:/src\" returntocorp/semgrep --help\n ```\n \n-See [Usage](#usage) to learn about running pre-built rules and writing custom ones.\n-\n-## Motivation\n-\n-Semgrep exists because:\n-\n-1. Insecure code is easy to write\n-2. The future of security involves automatically guiding developers towards a \u201cpaved road\u201d made of default-safe frameworks (i.e. [React](https://reactjs.org/) or Object-relational Mappers)\n-3. `grep` isn\u2019t expressive enough and traditional static analysis tools (SAST) are too complicated/slow for paved road automation\n-\n-The AppSec, Developer, and DevOps communities deserve a static analysis tool that is fast, easy to use, code-aware, multi-lingual, and open source!\n-\n-## Overview\n-\n-Semgrep is optimized for:\n-\n-* **Speed**: Fast enough to run on every build, commit, or file save\n-* **Finding bugs that matter**: Run your own specialized rules or choose OWASP 10 checks from the [Semgrep Registry](https://semgrep.dev/r). Rules match source code at the Abstract Syntax Tree (AST) level, unlike regexes that match strings and aren't semantically aware.\n-* **Ease of customization**: Rules look like the code you\u2019re searching, no static analysis PhD required. They don't require compiled code, only source, reducing iteration time.\n-* **Ease of integration**. Highly portable and many CI and git-hook integrations already exist. Output `--json` and pipe results into your existing systems.\n-* **Polyglot environments**: Don't learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, RuboCop, Gosec). Use the same syntax and concepts independent of language.\n-\n-\n-### Language Support\n-\n-| **Python** | **JavaScript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **JSON** | **Ruby** | **OCaml** | **TypeScript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------|:----------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                            | \u2705       | \ud83d\udea7       |\ud83d\udea7        |  Coming...      | Coming...             |\n-\n-Missing support for a language? Let us know by filing a ticket, joining our Slack, or emailing [support@r2c.dev](mailto:support@rc2.dev?subject=Language%20Support:).\n-\n-### Pattern Syntax Teaser\n-\n-One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries.\n-\n-The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n-\n-**Example**: Say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:\n-\n-~~~python\n-# Simple cases grep finds\n-exec(\"ls\")\n-exec(some_var)\n-\n-# But you don't have to worry about whitespace\n-exec (foo)\n-\n-# Or calls across multiple lines\n-exec (\n-    bar\n-)\n-~~~\n-\n-Importantly, Semgrep would *not* match the following:\n-\n-~~~python\n-# grep would match this, but Semgrep ignores it because\n-# it doesn't have the right function name\n-other_exec(bar)\n-\n-# Semgrep ignores commented out lines\n-# exec(foo)\n-\n-# and hard-coded strings\n-print(\"exec(bar)\")\n-~~~\n-\n-Semgrep will even match aliased imports:\n-\n-~~~python\n-# Semgrep knows that safe_function refers to exec so it\n-# will still match!\n-#   Oof, try finding this with grep\n-import exec as safe_function\n-safe_function(tricksy)\n-~~~\n-\n-Play with this example in your browser [here](https://semgrep.dev/QrkD), or copy the above code into a file locally (`exec.py`) and run:\n-\n-~~~python\n-$ semgrep -l python -e \"exec(...)\" /path/to/exec.py\n-~~~\n-\n-More example patterns:\n-\n-| **Pattern**                                                        | **Matches**                                                |\n-|:-------------------------------------------------------------------|:-----------------------------------------------------------|\n-| [`$X == $X`](https://semgrep.dev/20B)                             | `if (node.id == node.id): ...`                             |\n-| [`requests.get(..., verify=False, ...)`](https://semgrep.dev/jqn) | `requests.get(url, timeout=3, verify=False)`               |\n-| [`os.system(...)`](https://semgrep.dev/1W5)                       | `from os import system; system('echo semgrep')`            |\n-| [`$ELEMENT.innerHTML`](https://semgrep.dev/9ze)                   | ``el.innerHTML = \"<img src='x' onerror='alert(`XSS`)'>\";`` |\n-| [`$TOKEN.SignedString([]byte(\"...\"))`](https://semgrep.dev/rXW)   | `ss, err := token.SignedString([]byte(\"HARDCODED KEY\"))`   |\n-\n-\u2192 [see more example patterns in the Semgrep Registry](https://semgrep.dev/registry).\n-\n-For more info on what you can do in patterns, see the [pattern features\n-docs](docs/pattern-features.md).\n-\n-## Usage\n-\n-Semgrep supports three primary workflows:\n-\n-* Run pre-built rules\n-* Writing custom rules\n-* Run Semgrep continuously in CI\n-\n-The following sections cover each in more detail.\n-\n-### Run Pre-Built Rules\n-\n-The easiest way to get started with Semgrep (other than [semgrep.dev](https://semgrep.dev/)) is to scan your code with pre-built rules.\n-\n-The [Semgrep Registry](https://semgrep.dev/r) contains rules for many programming errors, including security issues and correctness bugs. Security rules are annotated with CWE and OWASP metadata when applicable. OWASP rule coverage per language is displayed below.\n-\n-<p align=\"center\">\n-    <img width=\"600\" src=\"https://web-assets.r2c.dev/semgrep-rules-owasp-coverage-20200520.png\" style=\"max-width:100%;\" />\n-</p>\n-\n-You can use pre-built [Rule Packs](https://semgrep.dev/packs), that contain sets of rules grouped by language and/or framework:\n-\n-```bash\n-$ semgrep --config=https://semgrep.dev/c/p/java\n-$ semgrep --config=https://semgrep.dev/c/p/python\n-$ semgrep --config=https://semgrep.dev/c/p/golang\n-$ semgrep --config=https://semgrep.dev/c/p/javascript\n-...\n-```\n-\n-Or you can run all of Semgrep's default rules for all languages as appropriate (note: each rule says what language it's for, so Semgrep won't try to run a Python rule on Java code).\n-\n-```bash\n-$ semgrep --config=r2c\n-```\n-\n-You can also run a specific rule or group of rules:\n+Once installed, Semgrep can be run with single patterns or entire rule packs:\n \n-```bash\n-# Run a specific rule\n-$ semgrep --config=https://semgrep.dev/c/r/java.spring.security.audit.cookie-missing-samesite\n+```sh\n+# Check for Python == where the left and right hand sides are the same (often a bug)\n+$ semgrep -e `$X==$X` --lang=py path/to/src\n \n-# Run a set of rules\n-$ semgrep --config=https://semgrep.dev/c/r/java.spring.security\n+# Run the default rule pack with rules for many languages\n+$ semgrep --config=default path/to/src\n ```\n \n-All public Semgrep rules can be viewed on the [Registry](https://semgrep.dev/r), which pulls the rules from YAML files defined in the [semgrep-rules](https://github.com/returntocorp/semgrep-rules) GitHub repo.\n-\n-Here are some sample vulnerable repos to test on:\n-* Django: [lets-be-bad-guys](https://github.com/mpirnat/lets-be-bad-guys), [django.nV](https://github.com/nVisium/django.nV)\n-* Flask: [Vulnerable-Flask-App](https://github.com/we45/Vulnerable-Flask-App)\n-* Java: [WebGoat](https://github.com/WebGoat/WebGoat), [OWASP Benchmark](https://github.com/OWASP/Benchmark)\n-* NodeJS: [OWASP Juice Shop](https://github.com/bkimminich/juice-shop), [DevSlop Pixi](https://github.com/DevSlop/Pixi)\n-* Golang: [GoVWA](https://github.com/0c34/govwa)\n-\n-### Writing Custom Rules\n-\n-One of the strengths of Semgrep is how easy it is to write rules.\n-\n-This makes it possible to:\n-* Quickly port rules from other tools.\n-* Think of an interesting code pattern, and then find instances of it in your\n-    code.\n-* Find code base or org-specific bugs and antipatterns - things that built-in\n-    checks for existing tools won't find because they're unique to you.\n-* and more!\n-\n-#### Simple Rules\n-\n-For iterating on simple patterns, you can use the `--lang` and `--pattern`\n-flags.\n-\n-```bash\n-$ semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n-```\n+Explore the Semgrep Registry of rules and CI integrations at [semgrep.dev](https://semgrep.dev/packs).\n \n-The `--lang` flag tells Semgrep which language you're targeting and `--pattern` is the code pattern to search for.\n+## Examples\n \n-#### Advanced Rules\n+### Core Uses\n \n-Some rules need more than one line of pattern to express. Sometimes you want to express code patterns, like: `X` must be true AND `Y` must be too, or `X` but NOT `Y`, or `X` must occur inside a block of code that `Y` matches.\n+- Ban dangerous APIs [[1](https://semgrep.live/clintgibler:no-exec)]\n+- Search routes and authentiation [[1](https://semgrep.live/clintgibler:spring-routes)]\n+- Enforce the use secure defaults [[1](https://semgrep.dev/dlukeomalley:flask-set-cookie)]\n+- Enforce project best-practices [[1](https://semgrep.dev/dlukeomalley:use-assertEqual-for-equality), [2](https://semgrep.dev/dlukeomalley:unchecked-subprocess-call)]\n+- Codify project-specific knowledge [[1](https://semgrep.dev/dlukeomalley:verify-before-make)]\n+- Audit security hotspots [[1](https://semgrep.live/ievans:airflow-xss), [2](https://semgrep.dev/dlukeomalley:hardcoded-credentials)]\n+- Audit configuration files [[1](https://semgrep.dev/dlukeomalley:s3-arn-use)]\n \n-For these cases, Semgrep has a more powerful and flexible [YAML syntax](docs/configuration-files.md).\n+### Upgrading Code\n \n-You can run a single rule or directory of rules specified in YAML by:\n-```bash\n-$ semgrep --config my_rule.yml path/to/dir_or_file\n+- Migrate from deprecated APIs [[1](https://semgrep.dev/editor?registry=java.lang.security.audit.crypto.des-is-deprecated), [2](https://semgrep.dev/editor?registry=python.bokeh.maintainability.deprecated.deprecated_apis), [3](https://semgrep.dev/editor?registry=python.flask.maintainability.deprecated.deprecated-apis)]\n+- Apply automatic fixes [[1](https://semgrep.live/clintgibler:use-listenAndServeTLS), [2]()]\n \n-$ semgrep --config yaml_dir/ path/to/dir_or_file\n-```\n-\n-**Example Advanced Rule**\n-\n-Say you are building a financial trading application in which every `Transaction` object must first be passed to `verify_transaction()` before being passed to `make_transaction()`, or it's a business logic bug.\n-\n-You can express this behavior with the following Semgrep YAML pattern:\n-\n-```yaml\n-rules:\n-- id: find-unverified-transactions\n-  patterns:\n-    - pattern: |\n-        public $RETURN $METHOD(...){\n-            ...\n-            make_transaction($T);\n-            ...\n-        }\n-    - pattern-not: |\n-        public $RETURN $METHOD(...){\n-            ...\n-            verify_transaction($T);\n-            ...\n-            make_transaction($T);\n-            ...\n-        }\n-  message: |\n-    In $METHOD, there's a call to make_transaction() without first calling verify_transaction() on the Transaction object.\n-```\n-\n-* `$RETURN`, `$METHOD`, and `$T` are *metavariables*, an abstraction that Semgrep provides when you want to match something but you don't know exactly what it is ahead of time.\n-  * You can think of *metavariables* like a [capture group](https://regexone.com/lesson/capturing_groups) in regular expressions.\n-* The `pattern` clause defines what we're looking for: any method that calls `make_transaction()`.\n-* The `pattern-not` clause *filters out* matches we don't want; in this case, methods where a transaction (`$T`) is passed to `verify_transaction()` before `make_transaction()`.\n-* The `message` is what's returned in Semgrep output, either to STDOUT or as a comment on the pull request on GitHub or other systems.\n-  * Note that *metavariables* can be used to customize messages and make them\n-    contextually relevant. Here we're helpfully telling the user the method\n-    where we've identified the bug.\n-\n-You can play with this transaction example here: https://semgrep.dev/4b4g.\n-\n-**Learn More**\n-\n-* See the [pattern features docs](docs/pattern-features.md) for more info and\n-  examples on the flexibility and power of Semgrep patterns.\n-* See the [YAML configuration file docs](docs/configuration-files.md) for\n-  details on all of the keys that can be used and how they work.\n-* See [Semgrep rule writing methodology](docs/writing_rules/README.md) for\n-  details on the thought process behind writing and rolling out a new Semgrep\n-  rule successfully, and see [these docs](docs/writing_rules/examples.md) for\n-  walkthroughs of writing rules from scratch.\n-* There's also an interactive, example-based Semgrep rule writing tutorial here:\n-  https://semgrep.dev/learn.\n-\n-### Run Semgrep Continuously in CI\n-\n-Semgrep can be run via CLI or Docker and output results as JSON (via the `--json` flag), so it can be inserted into any CI pipeline and have its results processed by whatever tools you're using.\n-\n-Semgrep is aware of *diffs*, so it can report only findings that occur in newly added code, for example, in a commit or pull request.\n-\n-Currently, the easiest way to integrate Semgrep into CI is via a GitHub action we've built. See the [integrations docs](docs/integrations.md) for more details.\n-\n-Semgrep can also output results in the standardized Static Analysis Results Interchange Format ([SARIF](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html)) with the `--sarif` flag, if you use tools that accept this format.\n-\n-## Upgrading", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ab6ac78f1cda687e85c3d5f52234b7a0ba823b"}, "originalPosition": 358}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21759a5fa0a17453e676b7e1c6a0b3a5a53cc634", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/21759a5fa0a17453e676b7e1c6a0b3a5a53cc634", "committedDate": "2020-08-03T17:54:47Z", "message": "Table -> list, denote beta"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4899b48296ee3cfe83d635706be3026cf538054", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/c4899b48296ee3cfe83d635706be3026cf538054", "committedDate": "2020-08-03T17:55:17Z", "message": "Spell out DSL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fac2b68b3b17248ca7105d9a52e41178c6ece7b", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/3fac2b68b3b17248ca7105d9a52e41178c6ece7b", "committedDate": "2020-08-03T17:56:02Z", "message": "pattern -> rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58ba06c93db48d77bc51b03d16c792dcf34b2a03", "author": {"user": {"login": "dlukeomalley", "name": "Luke O'Malley"}}, "url": "https://github.com/returntocorp/semgrep/commit/58ba06c93db48d77bc51b03d16c792dcf34b2a03", "committedDate": "2020-08-03T17:57:49Z", "message": "Update README.md\n\nCo-authored-by: Pablo Estrada <pablo@r2c.dev>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "794db82baa8bf49cdae75b60b1f8133ea4ab9e57", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/794db82baa8bf49cdae75b60b1f8133ea4ab9e57", "committedDate": "2020-08-05T14:19:25Z", "message": "Add example table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b15017d36d0100db167819c44219d90c9837b53c", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/b15017d36d0100db167819c44219d90c9837b53c", "committedDate": "2020-08-05T14:23:23Z", "message": "Add upgrading section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef255f8deb9fd379226deed62da8579abf7ebebe", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/ef255f8deb9fd379226deed62da8579abf7ebebe", "committedDate": "2020-08-05T14:24:41Z", "message": "Capitalize registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92217a7724f6d249dba15dcd4d4ccbe6a238a801", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/92217a7724f6d249dba15dcd4d4ccbe6a238a801", "committedDate": "2020-08-05T14:29:58Z", "message": "typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae64f32e870299e658620daec40bb950ccd944ee", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/ae64f32e870299e658620daec40bb950ccd944ee", "committedDate": "2020-08-05T17:05:38Z", "message": "Squelch '--help' output in README"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzU0MjY5", "url": "https://github.com/returntocorp/semgrep/pull/1418#pullrequestreview-462754269", "createdAt": "2020-08-06T18:00:21Z", "commit": {"oid": "ae64f32e870299e658620daec40bb950ccd944ee"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODowMDoyMVrOG8-cCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODowNDo1OFrOG8-lxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MDcyOQ==", "bodyText": "Since we don't really support C and don't have immediate plans to, would it make sense to moving this to last? And Python we support best, maybe put that first?", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r466590729", "createdAt": "2020-08-06T18:00:21Z", "author": {"login": "clintgibler"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,133 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful domain-specific language; Semgrep rules look like the source code you\u2019re targeting\n+- Batteries included with hundreds of existing community rules for OWASP Top 10 issues and common mistakes\n+- Run it in CI, at pre-commit, or in the editor\n+- Runs offline on uncompiled code\n \n-Visit [Installation](#installation) and [Usage](#usage) to get started.\n+Semgrep supports:\n \n-## Installation\n-> Want to skip installation? You can run Semgrep via our interactive live editor at [semgrep.dev](https://semgrep.dev/editor).\n+- C (beta)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae64f32e870299e658620daec40bb950ccd944ee"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MTM0OA==", "bodyText": "Do you like the list more than the table?", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r466591348", "createdAt": "2020-08-06T18:01:31Z", "author": {"login": "clintgibler"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,133 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful domain-specific language; Semgrep rules look like the source code you\u2019re targeting\n+- Batteries included with hundreds of existing community rules for OWASP Top 10 issues and common mistakes\n+- Run it in CI, at pre-commit, or in the editor\n+- Runs offline on uncompiled code\n \n-Visit [Installation](#installation) and [Usage](#usage) to get started.\n+Semgrep supports:\n \n-## Installation\n-> Want to skip installation? You can run Semgrep via our interactive live editor at [semgrep.dev](https://semgrep.dev/editor).\n+- C (beta)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MDcyOQ=="}, "originalCommit": {"oid": "ae64f32e870299e658620daec40bb950ccd944ee"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MjMzNw==", "bodyText": "What does the default pack run? Should we recommend https://semgrep.dev/p/r2c-CI or https://semgrep.dev/p/r2c-security-audit?", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r466592337", "createdAt": "2020-08-06T18:03:21Z", "author": {"login": "clintgibler"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,133 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful domain-specific language; Semgrep rules look like the source code you\u2019re targeting\n+- Batteries included with hundreds of existing community rules for OWASP Top 10 issues and common mistakes\n+- Run it in CI, at pre-commit, or in the editor\n+- Runs offline on uncompiled code\n \n-Visit [Installation](#installation) and [Usage](#usage) to get started.\n+Semgrep supports:\n \n-## Installation\n-> Want to skip installation? You can run Semgrep via our interactive live editor at [semgrep.dev](https://semgrep.dev/editor).\n+- C (beta)\n+- Go\n+- Java\n+- JavaScript\n+- JSON\n+- OCaml\n+- Python\n+- Ruby (beta)\n \n-On macOS, binaries are available via Homebrew:\n+Semgrep is proudly supported by r2c. Learn more about a hosted version of Semgrep with an enterprise feature set at [r2c.dev](https://r2c.dev/).\n \n-```bash\n-$ brew install semgrep\n-```\n+## Getting Started\n \n-On Ubuntu/WSL/linux, we recommend installing via `pip`\n+The best place to start with Semgrep is its [Quick Start](https://semgrep.dev/editor). For a more in-depth introduction, see the [Semgrep Tutorial](https://semgrep.dev/learn).\n \n-```bash\n-$ pip3 install semgrep\n-```\n+Semgrep can be installed using `brew`, `pip`, or `docker`:\n \n-An install script is also available with each [release](https://github.com/returntocorp/semgrep/releases/download/v0.17.0/semgrep-v0.17.0-ubuntu-generic.sh) if you want a native binary.\n-\n-```bash\n-$ ./semgrep-v0.17.0-ubuntu-generic.sh\n-```\n+```sh\n+# For macOS\n+$ brew install semgrep\n \n-To try Semgrep without installation, you can also run it via Docker:\n+# On Ubuntu/WSL/linux, we recommend installing via `pip`\n+$ python3 -m pip install semgrep\n \n-```\n+# To try Semgrep without installation run via Docker\n $ docker run --rm -v \"${PWD}:/src\" returntocorp/semgrep --help\n ```\n \n-See [Usage](#usage) to learn about running pre-built rules and writing custom ones.\n-\n-## Motivation\n-\n-Semgrep exists because:\n-\n-1. Insecure code is easy to write\n-2. The future of security involves automatically guiding developers towards a \u201cpaved road\u201d made of default-safe frameworks (i.e. [React](https://reactjs.org/) or Object-relational Mappers)\n-3. `grep` isn\u2019t expressive enough and traditional static analysis tools (SAST) are too complicated/slow for paved road automation\n-\n-The AppSec, Developer, and DevOps communities deserve a static analysis tool that is fast, easy to use, code-aware, multi-lingual, and open source!\n-\n-## Overview\n-\n-Semgrep is optimized for:\n-\n-* **Speed**: Fast enough to run on every build, commit, or file save\n-* **Finding bugs that matter**: Run your own specialized rules or choose OWASP 10 checks from the [Semgrep Registry](https://semgrep.dev/r). Rules match source code at the Abstract Syntax Tree (AST) level, unlike regexes that match strings and aren't semantically aware.\n-* **Ease of customization**: Rules look like the code you\u2019re searching, no static analysis PhD required. They don't require compiled code, only source, reducing iteration time.\n-* **Ease of integration**. Highly portable and many CI and git-hook integrations already exist. Output `--json` and pipe results into your existing systems.\n-* **Polyglot environments**: Don't learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, RuboCop, Gosec). Use the same syntax and concepts independent of language.\n-\n-\n-### Language Support\n-\n-| **Python** | **JavaScript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **JSON** | **Ruby** | **OCaml** | **TypeScript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------|:----------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                            | \u2705       | \ud83d\udea7       |\ud83d\udea7        |  Coming...      | Coming...             |\n-\n-Missing support for a language? Let us know by filing a ticket, joining our Slack, or emailing [support@r2c.dev](mailto:support@rc2.dev?subject=Language%20Support:).\n-\n-### Pattern Syntax Teaser\n-\n-One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries.\n-\n-The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n-\n-**Example**: Say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:\n-\n-~~~python\n-# Simple cases grep finds\n-exec(\"ls\")\n-exec(some_var)\n-\n-# But you don't have to worry about whitespace\n-exec (foo)\n-\n-# Or calls across multiple lines\n-exec (\n-    bar\n-)\n-~~~\n-\n-Importantly, Semgrep would *not* match the following:\n-\n-~~~python\n-# grep would match this, but Semgrep ignores it because\n-# it doesn't have the right function name\n-other_exec(bar)\n-\n-# Semgrep ignores commented out lines\n-# exec(foo)\n-\n-# and hard-coded strings\n-print(\"exec(bar)\")\n-~~~\n-\n-Semgrep will even match aliased imports:\n-\n-~~~python\n-# Semgrep knows that safe_function refers to exec so it\n-# will still match!\n-#   Oof, try finding this with grep\n-import exec as safe_function\n-safe_function(tricksy)\n-~~~\n-\n-Play with this example in your browser [here](https://semgrep.dev/QrkD), or copy the above code into a file locally (`exec.py`) and run:\n-\n-~~~python\n-$ semgrep -l python -e \"exec(...)\" /path/to/exec.py\n-~~~\n-\n-More example patterns:\n-\n-| **Pattern**                                                        | **Matches**                                                |\n-|:-------------------------------------------------------------------|:-----------------------------------------------------------|\n-| [`$X == $X`](https://semgrep.dev/20B)                             | `if (node.id == node.id): ...`                             |\n-| [`requests.get(..., verify=False, ...)`](https://semgrep.dev/jqn) | `requests.get(url, timeout=3, verify=False)`               |\n-| [`os.system(...)`](https://semgrep.dev/1W5)                       | `from os import system; system('echo semgrep')`            |\n-| [`$ELEMENT.innerHTML`](https://semgrep.dev/9ze)                   | ``el.innerHTML = \"<img src='x' onerror='alert(`XSS`)'>\";`` |\n-| [`$TOKEN.SignedString([]byte(\"...\"))`](https://semgrep.dev/rXW)   | `ss, err := token.SignedString([]byte(\"HARDCODED KEY\"))`   |\n-\n-\u2192 [see more example patterns in the Semgrep Registry](https://semgrep.dev/registry).\n-\n-For more info on what you can do in patterns, see the [pattern features\n-docs](docs/pattern-features.md).\n+To confirm installation and get an overview of Semgrep's functionality run with `--help`:\n \n-## Usage\n-\n-Semgrep supports three primary workflows:\n-\n-* Run pre-built rules\n-* Writing custom rules\n-* Run Semgrep continuously in CI\n-\n-The following sections cover each in more detail.\n-\n-### Run Pre-Built Rules\n-\n-The easiest way to get started with Semgrep (other than [semgrep.dev](https://semgrep.dev/)) is to scan your code with pre-built rules.\n-\n-The [Semgrep Registry](https://semgrep.dev/r) contains rules for many programming errors, including security issues and correctness bugs. Security rules are annotated with CWE and OWASP metadata when applicable. OWASP rule coverage per language is displayed below.\n-\n-<p align=\"center\">\n-    <img width=\"600\" src=\"https://web-assets.r2c.dev/semgrep-rules-owasp-coverage-20200520.png\" style=\"max-width:100%;\" />\n-</p>\n-\n-You can use pre-built [Rule Packs](https://semgrep.dev/packs), that contain sets of rules grouped by language and/or framework:\n-\n-```bash\n-$ semgrep --config=https://semgrep.dev/c/p/java\n-$ semgrep --config=https://semgrep.dev/c/p/python\n-$ semgrep --config=https://semgrep.dev/c/p/golang\n-$ semgrep --config=https://semgrep.dev/c/p/javascript\n-...\n ```\n-\n-Or you can run all of Semgrep's default rules for all languages as appropriate (note: each rule says what language it's for, so Semgrep won't try to run a Python rule on Java code).\n-\n-```bash\n-$ semgrep --config=r2c\n-```\n-\n-You can also run a specific rule or group of rules:\n-\n-```bash\n-# Run a specific rule\n-$ semgrep --config=https://semgrep.dev/c/r/java.spring.security.audit.cookie-missing-samesite\n-\n-# Run a set of rules\n-$ semgrep --config=https://semgrep.dev/c/r/java.spring.security\n+$ semgrep --help\n ```\n \n-All public Semgrep rules can be viewed on the [Registry](https://semgrep.dev/r), which pulls the rules from YAML files defined in the [semgrep-rules](https://github.com/returntocorp/semgrep-rules) GitHub repo.\n-\n-Here are some sample vulnerable repos to test on:\n-* Django: [lets-be-bad-guys](https://github.com/mpirnat/lets-be-bad-guys), [django.nV](https://github.com/nVisium/django.nV)\n-* Flask: [Vulnerable-Flask-App](https://github.com/we45/Vulnerable-Flask-App)\n-* Java: [WebGoat](https://github.com/WebGoat/WebGoat), [OWASP Benchmark](https://github.com/OWASP/Benchmark)\n-* NodeJS: [OWASP Juice Shop](https://github.com/bkimminich/juice-shop), [DevSlop Pixi](https://github.com/DevSlop/Pixi)\n-* Golang: [GoVWA](https://github.com/0c34/govwa)\n-\n-### Writing Custom Rules\n-\n-One of the strengths of Semgrep is how easy it is to write rules.\n+Once installed, Semgrep can be run with single rule patterns or entire rule packs:\n \n-This makes it possible to:\n-* Quickly port rules from other tools.\n-* Think of an interesting code pattern, and then find instances of it in your\n-    code.\n-* Find code base or org-specific bugs and antipatterns - things that built-in\n-    checks for existing tools won't find because they're unique to you.\n-* and more!\n+```sh\n+# Check for Python == where the left and right hand sides are the same (often a bug)\n+$ semgrep -e `$X==$X` --lang=py path/to/src\n \n-#### Simple Rules\n-\n-For iterating on simple patterns, you can use the `--lang` and `--pattern`\n-flags.\n-\n-```bash\n-$ semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n+# Run the default rule pack with rules for many languages\n+$ semgrep --config=default path/to/src", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae64f32e870299e658620daec40bb950ccd944ee"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MzIyMA==", "bodyText": "Don't we capitalize Semgrep?", "url": "https://github.com/returntocorp/semgrep/pull/1418#discussion_r466593220", "createdAt": "2020-08-06T18:04:58Z", "author": {"login": "clintgibler"}, "path": "README.md", "diffHunk": "@@ -36,339 +34,133 @@\n   <a href=\"https://github.com/returntocorp/semgrep/issues/new/choose\">\n     <img src=\"https://img.shields.io/badge/issues-welcome-green?style=flat-square\" alt=\"Issues welcome!\" />\n   </a>\n-      <a href=\"https://github.com/returntocorp/semgrep/actions?query=workflow%3ATests+branch%3Adevelop\">\n-      <img src=\"https://github.com/returntocorp/semgrep/workflows/Tests/badge.svg?branch=develop\" alt=\"Test Status\"/>\n-  </a>\n-  <a href=\"https://twitter.com/intent/follow?screen_name=r2cdev\">\n-    <img src=\"https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue\" alt=\"Follow @r2cdev\" />\n+  <a href=\"https://github.com/returntocorp/semgrep#readme\">\n+    <img src=\"https://img.shields.io/github/stars/returntocorp/semgrep?label=GitHub%20Stars&style=flat-square\" alt=\"1000+ GitHub stars\" />\n   </a>\n </p>\n \n-Semgrep is a [command-line](#installation) tool for offline static analysis. Use pre-built or custom rules to enforce code and security standards in your codebase. You can try it now with our [interactive live editor](https://semgrep.dev/editor).\n+Semgrep tl;dr:\n \n-Semgrep combines the convenient and iterative style of `grep` with the powerful features of an Abstract Syntax Tree (AST) matcher and limited dataflow. Easily find function calls, class or method definitions, and more without having to understand ASTs or wrestle with regexes.\n+- A simple, customizable, and fast static analysis tool for finding bugs\n+- Combines the speed and customization of `grep` with the precision of traditional static analysis tools\n+- No painful domain-specific language; Semgrep rules look like the source code you\u2019re targeting\n+- Batteries included with hundreds of existing community rules for OWASP Top 10 issues and common mistakes\n+- Run it in CI, at pre-commit, or in the editor\n+- Runs offline on uncompiled code\n \n-Visit [Installation](#installation) and [Usage](#usage) to get started.\n+Semgrep supports:\n \n-## Installation\n-> Want to skip installation? You can run Semgrep via our interactive live editor at [semgrep.dev](https://semgrep.dev/editor).\n+- C (beta)\n+- Go\n+- Java\n+- JavaScript\n+- JSON\n+- OCaml\n+- Python\n+- Ruby (beta)\n \n-On macOS, binaries are available via Homebrew:\n+Semgrep is proudly supported by r2c. Learn more about a hosted version of Semgrep with an enterprise feature set at [r2c.dev](https://r2c.dev/).\n \n-```bash\n-$ brew install semgrep\n-```\n+## Getting Started\n \n-On Ubuntu/WSL/linux, we recommend installing via `pip`\n+The best place to start with Semgrep is its [Quick Start](https://semgrep.dev/editor). For a more in-depth introduction, see the [Semgrep Tutorial](https://semgrep.dev/learn).\n \n-```bash\n-$ pip3 install semgrep\n-```\n+Semgrep can be installed using `brew`, `pip`, or `docker`:\n \n-An install script is also available with each [release](https://github.com/returntocorp/semgrep/releases/download/v0.17.0/semgrep-v0.17.0-ubuntu-generic.sh) if you want a native binary.\n-\n-```bash\n-$ ./semgrep-v0.17.0-ubuntu-generic.sh\n-```\n+```sh\n+# For macOS\n+$ brew install semgrep\n \n-To try Semgrep without installation, you can also run it via Docker:\n+# On Ubuntu/WSL/linux, we recommend installing via `pip`\n+$ python3 -m pip install semgrep\n \n-```\n+# To try Semgrep without installation run via Docker\n $ docker run --rm -v \"${PWD}:/src\" returntocorp/semgrep --help\n ```\n \n-See [Usage](#usage) to learn about running pre-built rules and writing custom ones.\n-\n-## Motivation\n-\n-Semgrep exists because:\n-\n-1. Insecure code is easy to write\n-2. The future of security involves automatically guiding developers towards a \u201cpaved road\u201d made of default-safe frameworks (i.e. [React](https://reactjs.org/) or Object-relational Mappers)\n-3. `grep` isn\u2019t expressive enough and traditional static analysis tools (SAST) are too complicated/slow for paved road automation\n-\n-The AppSec, Developer, and DevOps communities deserve a static analysis tool that is fast, easy to use, code-aware, multi-lingual, and open source!\n-\n-## Overview\n-\n-Semgrep is optimized for:\n-\n-* **Speed**: Fast enough to run on every build, commit, or file save\n-* **Finding bugs that matter**: Run your own specialized rules or choose OWASP 10 checks from the [Semgrep Registry](https://semgrep.dev/r). Rules match source code at the Abstract Syntax Tree (AST) level, unlike regexes that match strings and aren't semantically aware.\n-* **Ease of customization**: Rules look like the code you\u2019re searching, no static analysis PhD required. They don't require compiled code, only source, reducing iteration time.\n-* **Ease of integration**. Highly portable and many CI and git-hook integrations already exist. Output `--json` and pipe results into your existing systems.\n-* **Polyglot environments**: Don't learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, RuboCop, Gosec). Use the same syntax and concepts independent of language.\n-\n-\n-### Language Support\n-\n-| **Python** | **JavaScript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **JSON** | **Ruby** | **OCaml** | **TypeScript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------|:----------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                            | \u2705       | \ud83d\udea7       |\ud83d\udea7        |  Coming...      | Coming...             |\n-\n-Missing support for a language? Let us know by filing a ticket, joining our Slack, or emailing [support@r2c.dev](mailto:support@rc2.dev?subject=Language%20Support:).\n-\n-### Pattern Syntax Teaser\n-\n-One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries.\n-\n-The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n-\n-**Example**: Say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:\n-\n-~~~python\n-# Simple cases grep finds\n-exec(\"ls\")\n-exec(some_var)\n-\n-# But you don't have to worry about whitespace\n-exec (foo)\n-\n-# Or calls across multiple lines\n-exec (\n-    bar\n-)\n-~~~\n-\n-Importantly, Semgrep would *not* match the following:\n-\n-~~~python\n-# grep would match this, but Semgrep ignores it because\n-# it doesn't have the right function name\n-other_exec(bar)\n-\n-# Semgrep ignores commented out lines\n-# exec(foo)\n-\n-# and hard-coded strings\n-print(\"exec(bar)\")\n-~~~\n-\n-Semgrep will even match aliased imports:\n-\n-~~~python\n-# Semgrep knows that safe_function refers to exec so it\n-# will still match!\n-#   Oof, try finding this with grep\n-import exec as safe_function\n-safe_function(tricksy)\n-~~~\n-\n-Play with this example in your browser [here](https://semgrep.dev/QrkD), or copy the above code into a file locally (`exec.py`) and run:\n-\n-~~~python\n-$ semgrep -l python -e \"exec(...)\" /path/to/exec.py\n-~~~\n-\n-More example patterns:\n-\n-| **Pattern**                                                        | **Matches**                                                |\n-|:-------------------------------------------------------------------|:-----------------------------------------------------------|\n-| [`$X == $X`](https://semgrep.dev/20B)                             | `if (node.id == node.id): ...`                             |\n-| [`requests.get(..., verify=False, ...)`](https://semgrep.dev/jqn) | `requests.get(url, timeout=3, verify=False)`               |\n-| [`os.system(...)`](https://semgrep.dev/1W5)                       | `from os import system; system('echo semgrep')`            |\n-| [`$ELEMENT.innerHTML`](https://semgrep.dev/9ze)                   | ``el.innerHTML = \"<img src='x' onerror='alert(`XSS`)'>\";`` |\n-| [`$TOKEN.SignedString([]byte(\"...\"))`](https://semgrep.dev/rXW)   | `ss, err := token.SignedString([]byte(\"HARDCODED KEY\"))`   |\n-\n-\u2192 [see more example patterns in the Semgrep Registry](https://semgrep.dev/registry).\n-\n-For more info on what you can do in patterns, see the [pattern features\n-docs](docs/pattern-features.md).\n+To confirm installation and get an overview of Semgrep's functionality run with `--help`:\n \n-## Usage\n-\n-Semgrep supports three primary workflows:\n-\n-* Run pre-built rules\n-* Writing custom rules\n-* Run Semgrep continuously in CI\n-\n-The following sections cover each in more detail.\n-\n-### Run Pre-Built Rules\n-\n-The easiest way to get started with Semgrep (other than [semgrep.dev](https://semgrep.dev/)) is to scan your code with pre-built rules.\n-\n-The [Semgrep Registry](https://semgrep.dev/r) contains rules for many programming errors, including security issues and correctness bugs. Security rules are annotated with CWE and OWASP metadata when applicable. OWASP rule coverage per language is displayed below.\n-\n-<p align=\"center\">\n-    <img width=\"600\" src=\"https://web-assets.r2c.dev/semgrep-rules-owasp-coverage-20200520.png\" style=\"max-width:100%;\" />\n-</p>\n-\n-You can use pre-built [Rule Packs](https://semgrep.dev/packs), that contain sets of rules grouped by language and/or framework:\n-\n-```bash\n-$ semgrep --config=https://semgrep.dev/c/p/java\n-$ semgrep --config=https://semgrep.dev/c/p/python\n-$ semgrep --config=https://semgrep.dev/c/p/golang\n-$ semgrep --config=https://semgrep.dev/c/p/javascript\n-...\n ```\n-\n-Or you can run all of Semgrep's default rules for all languages as appropriate (note: each rule says what language it's for, so Semgrep won't try to run a Python rule on Java code).\n-\n-```bash\n-$ semgrep --config=r2c\n-```\n-\n-You can also run a specific rule or group of rules:\n-\n-```bash\n-# Run a specific rule\n-$ semgrep --config=https://semgrep.dev/c/r/java.spring.security.audit.cookie-missing-samesite\n-\n-# Run a set of rules\n-$ semgrep --config=https://semgrep.dev/c/r/java.spring.security\n+$ semgrep --help\n ```\n \n-All public Semgrep rules can be viewed on the [Registry](https://semgrep.dev/r), which pulls the rules from YAML files defined in the [semgrep-rules](https://github.com/returntocorp/semgrep-rules) GitHub repo.\n-\n-Here are some sample vulnerable repos to test on:\n-* Django: [lets-be-bad-guys](https://github.com/mpirnat/lets-be-bad-guys), [django.nV](https://github.com/nVisium/django.nV)\n-* Flask: [Vulnerable-Flask-App](https://github.com/we45/Vulnerable-Flask-App)\n-* Java: [WebGoat](https://github.com/WebGoat/WebGoat), [OWASP Benchmark](https://github.com/OWASP/Benchmark)\n-* NodeJS: [OWASP Juice Shop](https://github.com/bkimminich/juice-shop), [DevSlop Pixi](https://github.com/DevSlop/Pixi)\n-* Golang: [GoVWA](https://github.com/0c34/govwa)\n-\n-### Writing Custom Rules\n-\n-One of the strengths of Semgrep is how easy it is to write rules.\n+Once installed, Semgrep can be run with single rule patterns or entire rule packs:\n \n-This makes it possible to:\n-* Quickly port rules from other tools.\n-* Think of an interesting code pattern, and then find instances of it in your\n-    code.\n-* Find code base or org-specific bugs and antipatterns - things that built-in\n-    checks for existing tools won't find because they're unique to you.\n-* and more!\n+```sh\n+# Check for Python == where the left and right hand sides are the same (often a bug)\n+$ semgrep -e `$X==$X` --lang=py path/to/src\n \n-#### Simple Rules\n-\n-For iterating on simple patterns, you can use the `--lang` and `--pattern`\n-flags.\n-\n-```bash\n-$ semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n+# Run the default rule pack with rules for many languages\n+$ semgrep --config=default path/to/src\n ```\n \n-The `--lang` flag tells Semgrep which language you're targeting and `--pattern` is the code pattern to search for.\n-\n-#### Advanced Rules\n+Explore the Semgrep Registry of rules and CI integrations at [semgrep.dev](https://semgrep.dev/packs).\n \n-Some rules need more than one line of pattern to express. Sometimes you want to express code patterns, like: `X` must be true AND `Y` must be too, or `X` but NOT `Y`, or `X` must occur inside a block of code that `Y` matches.\n+## Examples\n \n-For these cases, Semgrep has a more powerful and flexible [YAML syntax](docs/configuration-files.md).\n-\n-You can run a single rule or directory of rules specified in YAML by:\n-```bash\n-$ semgrep --config my_rule.yml path/to/dir_or_file\n-\n-$ semgrep --config yaml_dir/ path/to/dir_or_file\n-```\n+| Use case                          | Semgrep rule                                                                                                                                                                                                                                                                                                                                           |\n+| :-------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n+| Ban dangerous APIs                | [Prevent use of exec](https://semgrep.live/clintgibler:no-exec)                                                                                                                                                                                                                                                                                        |\n+| Search routes and authentiation   | [Extract Spring routes](https://semgrep.live/clintgibler:spring-routes)                                                                                                                                                                                                                                                                                |\n+| Enforce the use secure defaults   | [Securely set Flask cookies](https://semgrep.dev/dlukeomalley:flask-set-cookie)                                                                                                                                                                                                                                                                        |\n+| Enforce project best-practices    | [Use assertEqual for == checks](https://semgrep.dev/dlukeomalley:use-assertEqual-for-equality), [Always check subprocess calls](https://semgrep.dev/dlukeomalley:unchecked-subprocess-call)                                                                                                                                                            |\n+| Codify project-specific knowledge | [Verify transactions before making them](https://semgrep.dev/dlukeomalley:verify-before-make)                                                                                                                                                                                                                                                          |\n+| Audit security hotspots           | [Airflow XSS](https://semgrep.live/ievans:airflow-xss), [Hardcoded credentials](https://semgrep.dev/dlukeomalley:hardcoded-credentials)                                                                                                                                                                                                                |\n+| Audit configuration files         | [Find S3 ARN uses](https://semgrep.dev/dlukeomalley:s3-arn-use)                                                                                                                                                                                                                                                                                        |\n+| Migrate from deprecated APIs      | [DES is deprecated](https://semgrep.dev/editor?registry=java.lang.security.audit.crypto.des-is-deprecated), [Deprecated Flask APIs](https://semgrep.dev/editor?registry=python.flask.maintainability.deprecated.deprecated-apis), [Deprecated Bokeh APIs](https://semgrep.dev/editor?registry=python.bokeh.maintainability.deprecated.deprecated_apis) |\n+| Apply automatic fixes             | [Use listenAndServeTLS](https://semgrep.live/clintgibler:use-listenAndServeTLS)                                                                                                                                                                                                                                                                        |\n \n-**Example Advanced Rule**\n-\n-Say you are building a financial trading application in which every `Transaction` object must first be passed to `verify_transaction()` before being passed to `make_transaction()`, or it's a business logic bug.\n-\n-You can express this behavior with the following Semgrep YAML pattern:\n-\n-```yaml\n-rules:\n-- id: find-unverified-transactions\n-  patterns:\n-    - pattern: |\n-        public $RETURN $METHOD(...){\n-            ...\n-            make_transaction($T);\n-            ...\n-        }\n-    - pattern-not: |\n-        public $RETURN $METHOD(...){\n-            ...\n-            verify_transaction($T);\n-            ...\n-            make_transaction($T);\n-            ...\n-        }\n-  message: |\n-    In $METHOD, there's a call to make_transaction() without first calling verify_transaction() on the Transaction object.\n-```\n+## Resources\n \n-* `$RETURN`, `$METHOD`, and `$T` are *metavariables*, an abstraction that Semgrep provides when you want to match something but you don't know exactly what it is ahead of time.\n-  * You can think of *metavariables* like a [capture group](https://regexone.com/lesson/capturing_groups) in regular expressions.\n-* The `pattern` clause defines what we're looking for: any method that calls `make_transaction()`.\n-* The `pattern-not` clause *filters out* matches we don't want; in this case, methods where a transaction (`$T`) is passed to `verify_transaction()` before `make_transaction()`.\n-* The `message` is what's returned in Semgrep output, either to STDOUT or as a comment on the pull request on GitHub or other systems.\n-  * Note that *metavariables* can be used to customize messages and make them\n-    contextually relevant. Here we're helpfully telling the user the method\n-    where we've identified the bug.\n+Learn more:\n \n-You can play with this transaction example here: https://semgrep.dev/4b4g.\n+- [Live editor](https://semgrep.dev/editor)\n+- [Semgrep Registry](https://semgrep.dev/r)\n+- [Documentation](docs/README.md)\n+- [r2c YouTube channel](https://www.youtube.com/channel/UC5ahcFBorwzUTqPipFhjkWg) for more videos.\n \n-**Learn More**\n+Get in touch:\n \n-* See the [pattern features docs](docs/pattern-features.md) for more info and\n-  examples on the flexibility and power of Semgrep patterns.\n-* See the [YAML configuration file docs](docs/configuration-files.md) for\n-  details on all of the keys that can be used and how they work.\n-* See [Semgrep rule writing methodology](docs/writing_rules/README.md) for\n-  details on the thought process behind writing and rolling out a new Semgrep\n-  rule successfully, and see [these docs](docs/writing_rules/examples.md) for\n-  walkthroughs of writing rules from scratch.\n-* There's also an interactive, example-based Semgrep rule writing tutorial here:\n-  https://semgrep.dev/learn.\n+- Submit a [bug report](https://github.com/returntocorp/semgrep/issues)\n+- Join the [Semgrep Slack](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA) to say \"hi\" or ask questions\n \n-### Run Semgrep Continuously in CI\n+## Usage\n \n-Semgrep can be run via CLI or Docker and output results as JSON (via the `--json` flag), so it can be inserted into any CI pipeline and have its results processed by whatever tools you're using.\n+### Command Line Options\n \n-Semgrep is aware of *diffs*, so it can report only findings that occur in newly added code, for example, in a commit or pull request.\n+See `semgrep --help` for command line options.\n \n-Currently, the easiest way to integrate Semgrep into CI is via a GitHub action we've built. See the [integrations docs](docs/integrations.md) for more details.\n+### Exit Codes\n \n-Semgrep can also output results in the standardized Static Analysis Results Interchange Format ([SARIF](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html)) with the `--sarif` flag, if you use tools that accept this format.\n+`semgrep` may exit with the following exit codes:\n \n-## Upgrading\n+- `0`: Semgrep ran successfully and found no errors\n+- `1`: Semgrep ran successfully and found issues in your code\n+- \\>=`2`: Semgrep failed to run\n \n-How you upgrade Semgrep will depend on how you installed it.\n+### Upgrading\n \n-From Homebrew:\n+To upgrade, run the command below associated with how you installed Semgrep:\n \n-```bash\n+```sh\n+# Using HomeBrew\n $ brew upgrade semgrep\n-```\n-\n-From PyPI:\n \n-```bash\n-$ python -m pip install --upgrade semgrep\n-```\n+# Using `pip`\n+$ python3 -m pip install --upgrade semgrep\n \n-From Docker:\n-\n-```bash\n+# Using Docker\n $ docker pull returntocorp/semgrep:latest\n ```\n \n-## Resources\n-\n-Learn more:\n-* [Semgrep presentation](https://www.youtube.com/watch?v=pul1bRIOYc8) and [slides](https://web-assets.r2c.dev/presentations/r2c-semgrep-OWASP-BayArea-21-May-2020.pdf) from the Bay Area OWASP meetup.\n-* Check out the [r2c YouTube channel](https://www.youtube.com/channel/UC5ahcFBorwzUTqPipFhjkWg) for more videos.\n-* More detailed [Semgrep docs](docs/README.md)\n-\n-Get in touch:\n-* Submit a [bug report](https://github.com/returntocorp/semgrep/issues)\n-* Join our [community Slack](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA) to say \"hi\" or ask questions\n-\n ## Contributing\n \n Semgrep is LGPL-licensed, feel free to help out: [CONTRIBUTING](https://github.com/returntocorp/semgrep/blob/develop/CONTRIBUTING.md).\n \n-Semgrep is a frontend to a larger program analysis library named [`pfff`](https://github.com/returntocorp/pfff/). `pfff` began and was open-sourced at [Facebook](https://github.com/facebookarchive/pfff) but is now archived. The primary maintainer now works at [r2c](https://r2c.dev). Semgrep was originally named `sgrep` and was renamed to avoid collisions with existing projects.\n+Semgrep is a frontend to a larger program analysis library named [`pfff`](https://github.com/returntocorp/pfff/). `pfff` began and was open-sourced at [Facebook](https://github.com/facebookarchive/pfff) but is now archived. The primary maintainer now works at [r2c](https://r2c.dev). Semgrep was originally named `sgrep` and was renamed to avoid collisons with existing projects.\n \n ## Commercial Support\n \n-Semgrep is proudly supported by [r2c](https://r2c.dev). We're hiring!\n+Semgrep is supported by [r2c](https://r2c.dev). We're hiring!\n \n-Interested in a fully-supported, hosted version of Semgrep? [Drop your email](https://forms.gle/dpUUvSo1WtELL8DW6) and we'll ping you!\n+Interested in a fully-supported, hosted version of semgrep? [Drop your email](https://forms.gle/dpUUvSo1WtELL8DW6) and we'll be in touch!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae64f32e870299e658620daec40bb950ccd944ee"}, "originalPosition": 435}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79729ac7b6410fc8775fddc3218dcdfbb815f7f2", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/79729ac7b6410fc8775fddc3218dcdfbb815f7f2", "committedDate": "2020-08-07T04:41:36Z", "message": "Respond to Clint feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27c1235913f21a2cfc336968f7d6df28a307228e", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/27c1235913f21a2cfc336968f7d6df28a307228e", "committedDate": "2020-08-07T05:44:46Z", "message": "Experiment with tabel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71794afcbfdbab0b657eb217643fdec1fd528294", "author": {"user": null}, "url": "https://github.com/returntocorp/semgrep/commit/71794afcbfdbab0b657eb217643fdec1fd528294", "committedDate": "2020-08-07T16:42:37Z", "message": "Merge"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1398, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}