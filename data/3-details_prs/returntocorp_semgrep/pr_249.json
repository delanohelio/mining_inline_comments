{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzOTgwMjE4", "number": 249, "title": "Feature/generic import matching", "bodyText": "Closes #197\nWith returntocorp/pfff#44, adds support for the following:\ncode: from foo.bar import a1, a2\npattern: import foo.bar.a2\n\nWe use the conversion to generic_ast to normalize code: from foo.bar import a1, a2 into:\nfrom foo.bar import a1\nfrom foo.bar import a2\n\nTests for\n\n python\n javascript (blocked on #250)\n golang", "createdAt": "2020-03-04T23:46:36Z", "url": "https://github.com/returntocorp/semgrep/pull/249", "merged": true, "mergeCommit": {"oid": "38490dd3f1b5989fe478c9a88c98ebc9c02acf79"}, "closed": true, "closedAt": "2020-03-05T23:40:00Z", "author": {"login": "DrewDennison"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKGk4DAH2gAyMzgzOTgwMjE4OjlmMWNiN2RlNGMzNzE2N2RkNDc5YjdjZWRjNTYzODdhNTI5M2Q5NjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcK9LrCgFqTM3MDE3ODAxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9f1cb7de4c37167dd479b7cedc56387a5293d961", "author": {"user": {"login": "DrewDennison", "name": "Drew Dennison"}}, "url": "https://github.com/returntocorp/semgrep/commit/9f1cb7de4c37167dd479b7cedc56387a5293d961", "committedDate": "2020-03-03T18:25:02Z", "message": "add imports.py and a python ast.parse test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ac49e6638e6f7b9dc8b5280fefd7a02e4ab1243", "author": {"user": {"login": "DrewDennison", "name": "Drew Dennison"}}, "url": "https://github.com/returntocorp/semgrep/commit/8ac49e6638e6f7b9dc8b5280fefd7a02e4ab1243", "committedDate": "2020-03-03T18:29:57Z", "message": "revert ocaml code that accidently got committed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "552e8df8b8d37903143912836114ac2d816b87d8", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/552e8df8b8d37903143912836114ac2d816b87d8", "committedDate": "2020-03-03T18:47:18Z", "message": "some tests passing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d78b77f0c325e56a85715efbf91071253fc83f4", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/8d78b77f0c325e56a85715efbf91071253fc83f4", "committedDate": "2020-03-03T18:53:25Z", "message": "handle aliases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00fee171191faf065048207bdee8b7a57f11a520", "author": {"user": {"login": "DrewDennison", "name": "Drew Dennison"}}, "url": "https://github.com/returntocorp/semgrep/commit/00fee171191faf065048207bdee8b7a57f11a520", "committedDate": "2020-03-03T19:08:29Z", "message": "add negative test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9529013c9e3b817df11ad33067ae9ebca07ad6d3", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/9529013c9e3b817df11ad33067ae9ebca07ad6d3", "committedDate": "2020-03-03T19:59:32Z", "message": "step one: equivalent ImportFrom, ImportAs, ImportAll"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3118cc8594d5cfae35d31cb137e0a0290e63eba", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/c3118cc8594d5cfae35d31cb137e0a0290e63eba", "committedDate": "2020-03-03T20:01:54Z", "message": "use for import *"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "254dc1990e72e44b9148947f37ff3856d627a57f", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/254dc1990e72e44b9148947f37ff3856d627a57f", "committedDate": "2020-03-03T20:06:07Z", "message": "document todos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca9bf72c5b74a5ca2c3402ab49318ea0a625e4a7", "author": {"user": {"login": "DrewDennison", "name": "Drew Dennison"}}, "url": "https://github.com/returntocorp/semgrep/commit/ca9bf72c5b74a5ca2c3402ab49318ea0a625e4a7", "committedDate": "2020-03-04T21:33:19Z", "message": "add in subset matching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2c4a6785453647e8b351b22b592742d5562b34e", "author": {"user": {"login": "DrewDennison", "name": "Drew Dennison"}}, "url": "https://github.com/returntocorp/semgrep/commit/b2c4a6785453647e8b351b22b592742d5562b34e", "committedDate": "2020-03-04T23:46:04Z", "message": "Merge branch 'develop' into feature/generic-import-matching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc961e82713493604aad5d8f98067fcef1500be8", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/fc961e82713493604aad5d8f98067fcef1500be8", "committedDate": "2020-03-04T23:49:10Z", "message": "javascript test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392b4a38a3b42fa81db1a1d89577dc9308eaa151", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/392b4a38a3b42fa81db1a1d89577dc9308eaa151", "committedDate": "2020-03-05T00:13:16Z", "message": "add tests for go"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f28219290125b0877efac4213262233e0d82ce35", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/f28219290125b0877efac4213262233e0d82ce35", "committedDate": "2020-03-05T00:16:13Z", "message": "failing import tests for golang"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65b45c16d1e57d19eb2cc9fd493645105d158003", "author": {"user": {"login": "DrewDennison", "name": "Drew Dennison"}}, "url": "https://github.com/returntocorp/semgrep/commit/65b45c16d1e57d19eb2cc9fd493645105d158003", "committedDate": "2020-03-05T00:41:20Z", "message": "blacken"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caf629ecee8f272fe4a2f9a3fcdd3ed5dabef540", "author": {"user": {"login": "DrewDennison", "name": "Drew Dennison"}}, "url": "https://github.com/returntocorp/semgrep/commit/caf629ecee8f272fe4a2f9a3fcdd3ed5dabef540", "committedDate": "2020-03-05T19:09:12Z", "message": "broken"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72d288d980014b14b0ef0d830056d3be6bb2f8dc", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/72d288d980014b14b0ef0d830056d3be6bb2f8dc", "committedDate": "2020-03-05T19:09:12Z", "message": "compiles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ad5aa315665af1acf4c9f60114ea468849f1025", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/5ad5aa315665af1acf4c9f60114ea468849f1025", "committedDate": "2020-03-05T19:09:12Z", "message": "share w Drew"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bdd8bfcfea725924ff60d05e25349f81863b17c", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/7bdd8bfcfea725924ff60d05e25349f81863b17c", "committedDate": "2020-03-05T19:09:12Z", "message": "perfix matching working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c52bd4d198cefdf51bfcebb4db5b9c1d6a913b88", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/c52bd4d198cefdf51bfcebb4db5b9c1d6a913b88", "committedDate": "2020-03-05T19:09:13Z", "message": "golang tests working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edda59dbcec92c0778a820b27f76433f7605def7", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/edda59dbcec92c0778a820b27f76433f7605def7", "committedDate": "2020-03-05T19:09:13Z", "message": "missing javascript parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20024d08c663c860caac8cf2f26f079bd00cd0bc", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/20024d08c663c860caac8cf2f26f079bd00cd0bc", "committedDate": "2020-03-05T19:09:50Z", "message": "javascript tests TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7", "author": {"user": {"login": "ievans", "name": "Isaac Evans"}}, "url": "https://github.com/returntocorp/semgrep/commit/6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7", "committedDate": "2020-03-05T19:29:40Z", "message": "update new shape of ImportFrom (see pfff b888e5)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTg3MjEw", "url": "https://github.com/returntocorp/semgrep/pull/249#pullrequestreview-369987210", "createdAt": "2020-03-05T23:34:23Z", "commit": {"oid": "6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTc4MDEz", "url": "https://github.com/returntocorp/semgrep/pull/249#pullrequestreview-370178013", "createdAt": "2020-03-06T09:17:12Z", "commit": {"oid": "6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxNzoxM1rOFyx3HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDowMTozMlrOFyzQWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDA0NA==", "bodyText": "not sure what this has to do with this PR. Because of some rebasing stuff?", "url": "https://github.com/returntocorp/semgrep/pull/249#discussion_r388790044", "createdAt": "2020-03-06T09:17:13Z", "author": {"login": "aryx"}, "path": "bin/main_sgrep.ml", "diffHunk": "@@ -57,6 +57,7 @@ let lang = ref \"unset\"\n \n let case_sensitive = ref false\n let match_format = ref Matching_report.Normal\n+let r2c = ref false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDgzOA==", "bodyText": "This will not work. The <= OCaml operator does not do what you think.\nIf you use Common2.set, then you should use Common2.include_set, or you should use commons/set_.mli which is a defunctorized version simpler to use than the set.ml in the ocaml standard library.", "url": "https://github.com/returntocorp/semgrep/pull/249#discussion_r388790838", "createdAt": "2020-03-06T09:18:56Z", "author": {"login": "aryx"}, "path": "lib/generic_vs_generic.ml", "diffHunk": "@@ -305,6 +305,15 @@ let rec m_list f a b =\n   | _::_, _ ->\n       fail ()\n \n+let m_list_subset a b =\n+  (* match if a is a subset of b *)\n+  let set_a = Common2.set a in\n+  let set_b = Common2.set b in\n+  if set_a <= set_b then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MTY1MA==", "bodyText": "Actually it's never used in the file, so you should remove this dead code. Actually the OCaml compiler warns against such deadcode when you have a function not used in the file if it's not exported (but I forgot to define a generic_vs_generic.mli file, so it's on me).", "url": "https://github.com/returntocorp/semgrep/pull/249#discussion_r388791650", "createdAt": "2020-03-06T09:20:41Z", "author": {"login": "aryx"}, "path": "lib/generic_vs_generic.ml", "diffHunk": "@@ -305,6 +305,15 @@ let rec m_list f a b =\n   | _::_, _ ->\n       fail ()\n \n+let m_list_subset a b =\n+  (* match if a is a subset of b *)\n+  let set_a = Common2.set a in\n+  let set_b = Common2.set b in\n+  if set_a <= set_b then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDgzOA=="}, "originalCommit": {"oid": "6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MjUyMg==", "bodyText": "maybe a little comment here before this case like (* a prefix is ok *)", "url": "https://github.com/returntocorp/semgrep/pull/249#discussion_r388792522", "createdAt": "2020-03-06T09:22:26Z", "author": {"login": "aryx"}, "path": "lib/generic_vs_generic.ml", "diffHunk": "@@ -370,10 +390,44 @@ let m_dotted_name a b =\n   (* TODO: [$X] should match any list *)\n   (a, b) -> (m_list m_ident) a b\n \n+\n+let rec m_list_prefix f a b =\n+  match a, b with\n+  | [], [] ->\n+      return ()\n+  | xa::aas, xb::bbs ->\n+      f xa xb >>= (fun () ->\n+      m_list_prefix f aas bbs >>= (fun () ->\n+        return ()\n+      )\n+      )\n+  | [], _ -> return ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwNTIzMg==", "bodyText": "This is not an Ast_generic.label. This is conceptually restricted to labels as in 'goto foo' foo:.\nMaybe vscode told you it was that because most IDEs don't know how to handle typedefs.", "url": "https://github.com/returntocorp/semgrep/pull/249#discussion_r388805232", "createdAt": "2020-03-06T09:47:00Z", "author": {"login": "aryx"}, "path": "lib/generic_vs_generic.ml", "diffHunk": "@@ -1936,23 +1990,64 @@ and m_macro_definition a b =\n (* Directives (Module import/export, macros) *)\n (* ------------------------------------------------------------------------- *)\n \n+\n+(* normalize from:\n+    from foo import bar -> import foo.bar\n+    from foo.bar import baz -> import foo.bar.baz\n+    from foo.bar.baz import yoo -> import foo.bar.baz.yoo\n+\n+    TODO: we plan to refactor ImportFrom such that it has at most one identifier; this function assumes that has already happened\n+*)\n+and normalize_import_as (a0: Parse_info.token_mutable) (from_module_name: Ast_generic.module_name) (import_opt: Ast_generic.alias option) = \n+  match from_module_name with \n+  | Ast_generic.DottedName idents -> \n+    begin\n+    match import_opt with \n+    | Some(import) ->\n+      let (import_ident_name: Ast_generic.label), _ = import in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwNTg0Mw==", "bodyText": "ImportFrom should never have a None; You put an alias option in ast_generic.ml but this is wrong.\nIf you need a normalized form that is sgrep specific, create one in this file and do the matching on that.", "url": "https://github.com/returntocorp/semgrep/pull/249#discussion_r388805843", "createdAt": "2020-03-06T09:48:11Z", "author": {"login": "aryx"}, "path": "lib/generic_vs_generic.ml", "diffHunk": "@@ -1936,23 +1990,64 @@ and m_macro_definition a b =\n (* Directives (Module import/export, macros) *)\n (* ------------------------------------------------------------------------- *)\n \n+\n+(* normalize from:\n+    from foo import bar -> import foo.bar\n+    from foo.bar import baz -> import foo.bar.baz\n+    from foo.bar.baz import yoo -> import foo.bar.baz.yoo\n+\n+    TODO: we plan to refactor ImportFrom such that it has at most one identifier; this function assumes that has already happened\n+*)\n+and normalize_import_as (a0: Parse_info.token_mutable) (from_module_name: Ast_generic.module_name) (import_opt: Ast_generic.alias option) = \n+  match from_module_name with \n+  | Ast_generic.DottedName idents -> \n+    begin\n+    match import_opt with \n+    | Some(import) ->\n+      let (import_ident_name: Ast_generic.label), _ = import in\n+      let new_module_name: Ast_generic.dotted_ident = idents @ [import_ident_name] in \n+        A.ImportFrom(a0, Ast_generic.DottedName new_module_name, None)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwODU3NA==", "bodyText": "So this is now deadcode since you call normalize before.\nThis is not what we should do, because now you've prevented people to match on specific import constructs.\nFor example how do you detect bad code using 'from x import *' that people may want to search specifically for.\n/home/pad/github/sgrep/sgrep/_build/default/bin/main_sgrep.exe -lang python -e from foo import * tests/python/\n/home/pad/github/sgrep/sgrep/tests/python/import_negatives.py:2\nimport foo.bar.baz\nWe don't want that.\nInstead what we should do is we should try to match with the specific stuff first, and if it does not match, then we can try some normalization, but only if people use the very general 'import foo'.\nOnly 'import foo' should be allowed to match the more complex one (what I call less-is-more, that is it's ok to specifiy less information in the pattern, here no aliasing, and no '*', but we should still enable people when they want to be precise to match precisely what they want).", "url": "https://github.com/returntocorp/semgrep/pull/249#discussion_r388808574", "createdAt": "2020-03-06T09:53:19Z", "author": {"login": "aryx"}, "path": "lib/generic_vs_generic.ml", "diffHunk": "@@ -1936,23 +1990,64 @@ and m_macro_definition a b =\n (* Directives (Module import/export, macros) *)\n (* ------------------------------------------------------------------------- *)\n \n+\n+(* normalize from:\n+    from foo import bar -> import foo.bar\n+    from foo.bar import baz -> import foo.bar.baz\n+    from foo.bar.baz import yoo -> import foo.bar.baz.yoo\n+\n+    TODO: we plan to refactor ImportFrom such that it has at most one identifier; this function assumes that has already happened\n+*)\n+and normalize_import_as (a0: Parse_info.token_mutable) (from_module_name: Ast_generic.module_name) (import_opt: Ast_generic.alias option) = \n+  match from_module_name with \n+  | Ast_generic.DottedName idents -> \n+    begin\n+    match import_opt with \n+    | Some(import) ->\n+      let (import_ident_name: Ast_generic.label), _ = import in\n+      let new_module_name: Ast_generic.dotted_ident = idents @ [import_ident_name] in \n+        A.ImportFrom(a0, Ast_generic.DottedName new_module_name, None)\n+    | None -> A.ImportFrom(a0, from_module_name, None)\n+  end;  \n+  | Ast_generic.FileName _ -> (* TODO *)\n+    A.ImportFrom(a0, from_module_name, import_opt)\n+\n+and strip_aliases (aliases: Ast_generic.alias list) = List.map (fun (ident, _) -> ident) aliases\n+\n+(* \n+  a function that will take ImportFrom, ImportAs, ImportAll -> normalized \n+  ImportFrom for matching `import` purposes\n+*)\n+and normalize_import i =\n+  match i with\n+  | A.ImportFrom(a0, from_module_name, import) -> normalize_import_as a0 from_module_name import\n+  | A.ImportAs(a0, a1, _) -> normalize_import_as a0 a1 None\n+  | A.ImportAll(a0, a1, _) -> normalize_import_as a0 a1 None\n+  | _ -> i\n+\n and m_directive a b = \n-  match a, b with\n-  | A.ImportFrom(a0, a1, a2), B.ImportFrom(b0, b1, b2) ->\n+  let normal_a = normalize_import a in\n+  let normal_b = normalize_import b in\n+  (*\n+    pr2 (spf \"A = %s\" (str_of_any (Dir normal_a)));\n+    pr2 (spf \"B = %s\" (str_of_any (Dir normal_b)));\n+  *)\n+  (* a is the pattern, b is the target*)\n+  match normal_a, normal_b with\n+  | A.ImportFrom(a0, a1, _), B.ImportFrom(b0, b1, _) ->\n     m_tok a0 b0 >>= (fun () ->\n-    m_module_name a1 b1 >>= (fun () -> \n-    (m_list m_alias) a2 b2 >>= (fun () -> \n-    return ()\n-    )))\n+    m_module_name_prefix a1 b1 >>= (fun () -> \n+    return()\n+    ))\n   | A.ImportAs(a0, a1, a2), B.ImportAs(b0, b1, b2) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwOTA0Nw==", "bodyText": "this is deadcode too now.", "url": "https://github.com/returntocorp/semgrep/pull/249#discussion_r388809047", "createdAt": "2020-03-06T09:54:07Z", "author": {"login": "aryx"}, "path": "lib/generic_vs_generic.ml", "diffHunk": "@@ -1936,23 +1990,64 @@ and m_macro_definition a b =\n (* Directives (Module import/export, macros) *)\n (* ------------------------------------------------------------------------- *)\n \n+\n+(* normalize from:\n+    from foo import bar -> import foo.bar\n+    from foo.bar import baz -> import foo.bar.baz\n+    from foo.bar.baz import yoo -> import foo.bar.baz.yoo\n+\n+    TODO: we plan to refactor ImportFrom such that it has at most one identifier; this function assumes that has already happened\n+*)\n+and normalize_import_as (a0: Parse_info.token_mutable) (from_module_name: Ast_generic.module_name) (import_opt: Ast_generic.alias option) = \n+  match from_module_name with \n+  | Ast_generic.DottedName idents -> \n+    begin\n+    match import_opt with \n+    | Some(import) ->\n+      let (import_ident_name: Ast_generic.label), _ = import in\n+      let new_module_name: Ast_generic.dotted_ident = idents @ [import_ident_name] in \n+        A.ImportFrom(a0, Ast_generic.DottedName new_module_name, None)\n+    | None -> A.ImportFrom(a0, from_module_name, None)\n+  end;  \n+  | Ast_generic.FileName _ -> (* TODO *)\n+    A.ImportFrom(a0, from_module_name, import_opt)\n+\n+and strip_aliases (aliases: Ast_generic.alias list) = List.map (fun (ident, _) -> ident) aliases\n+\n+(* \n+  a function that will take ImportFrom, ImportAs, ImportAll -> normalized \n+  ImportFrom for matching `import` purposes\n+*)\n+and normalize_import i =\n+  match i with\n+  | A.ImportFrom(a0, from_module_name, import) -> normalize_import_as a0 from_module_name import\n+  | A.ImportAs(a0, a1, _) -> normalize_import_as a0 a1 None\n+  | A.ImportAll(a0, a1, _) -> normalize_import_as a0 a1 None\n+  | _ -> i\n+\n and m_directive a b = \n-  match a, b with\n-  | A.ImportFrom(a0, a1, a2), B.ImportFrom(b0, b1, b2) ->\n+  let normal_a = normalize_import a in\n+  let normal_b = normalize_import b in\n+  (*\n+    pr2 (spf \"A = %s\" (str_of_any (Dir normal_a)));\n+    pr2 (spf \"B = %s\" (str_of_any (Dir normal_b)));\n+  *)\n+  (* a is the pattern, b is the target*)\n+  match normal_a, normal_b with\n+  | A.ImportFrom(a0, a1, _), B.ImportFrom(b0, b1, _) ->\n     m_tok a0 b0 >>= (fun () ->\n-    m_module_name a1 b1 >>= (fun () -> \n-    (m_list m_alias) a2 b2 >>= (fun () -> \n-    return ()\n-    )))\n+    m_module_name_prefix a1 b1 >>= (fun () -> \n+    return()\n+    ))\n   | A.ImportAs(a0, a1, a2), B.ImportAs(b0, b1, b2) ->\n     m_tok a0 b0 >>= (fun () ->\n-    m_module_name a1 b1 >>= (fun () -> \n+    m_module_name_prefix a1 b1 >>= (fun () -> \n     (m_option m_ident) a2 b2 >>= (fun () -> \n     return ()\n     )))\n   | A.ImportAll(a0, a1, a2), B.ImportAll(b0, b1, b2) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwOTI5MA==", "bodyText": "What is this script for?\nMaybe a small comment at the top explaining its usage and a trace example of its use?", "url": "https://github.com/returntocorp/semgrep/pull/249#discussion_r388809290", "createdAt": "2020-03-06T09:54:40Z", "author": {"login": "aryx"}, "path": "scripts/import_parser_python_ast.py", "diffHunk": "@@ -0,0 +1,14 @@\n+import ast", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwOTg3Nw==", "bodyText": "The file should be renamed less_imports.sgrep, because it fits in the 'less-is-ok' big principle of sgrep (see the README.md and its Design section). I'm opened to a better name than 'less-is-ok'.", "url": "https://github.com/returntocorp/semgrep/pull/249#discussion_r388809877", "createdAt": "2020-03-06T09:55:47Z", "author": {"login": "aryx"}, "path": "tests/go/imports.sgrep", "diffHunk": "@@ -0,0 +1 @@\n+import \"foo/bar\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMjg4OQ==", "bodyText": "should be renamed too less_imports_prefix.sgrep", "url": "https://github.com/returntocorp/semgrep/pull/249#discussion_r388812889", "createdAt": "2020-03-06T10:01:32Z", "author": {"login": "aryx"}, "path": "tests/go/imports_prefix.sgrep", "diffHunk": "@@ -0,0 +1 @@\n+import \"foo\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e0bf3dc46c337183e67c88ccd4e0ab39d6842a7"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1155, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}