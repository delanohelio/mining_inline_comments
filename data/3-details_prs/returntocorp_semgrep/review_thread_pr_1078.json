{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MjA4Njc0", "number": 1078, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxNjozMFrOEHM2_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxNDoxMFrOEHqTzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTg2MTczOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/rule_lang.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxNjozMFrOGmdjpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxNjozMFrOGmdjpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzMzNA==", "bodyText": "I would move this up to the top.", "url": "https://github.com/returntocorp/semgrep/pull/1078#discussion_r442983334", "createdAt": "2020-06-19T18:16:30Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -224,9 +231,22 @@ class YamlMap:\n \n     def __init__(self, internal: Dict[YamlTree[str], YamlTree]):\n         self._internal = internal\n+        for k, v in self._internal.items():\n+            if v.value is None:\n+                from semgrep.error import InvalidRuleSchemaError", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39742ddddff5209519ea52bbb533a511e87ce422"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTg3MjYyOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/rule_lang.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoyMTowMlrOGmdqvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxOToxMzoxNFrOGme4bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NTE1MQ==", "bodyText": "Is this so we can handle the None case later? Can we handle it here rather than pass the value along and deal with it later?", "url": "https://github.com/returntocorp/semgrep/pull/1078#discussion_r442985151", "createdAt": "2020-06-19T18:21:02Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -185,10 +186,16 @@ def unroll(self) -> YamlValue:\n             return {str(k.unroll()): v.unroll() for k, v in self.value.items()}\n         elif isinstance(self.value, YamlTree):\n             return self.value.unroll()\n-        elif isinstance(self.value, str) or isinstance(self.value, int):\n+        elif (\n+            isinstance(self.value, str)\n+            or isinstance(self.value, int)\n+            or self.value is None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39742ddddff5209519ea52bbb533a511e87ce422"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4OTQ4NQ==", "bodyText": "This is actually the unrolling process (where we convert YAML into a regular dict to be used in cases where we don't care about spans anymore).\nBy handling the check in the YamlMap constructor, we're handling it as early as possible (at YAML parse time rather than failing later during unrolling).\nThis check could probably actually be deleted given the other code, but I figured it was probably better not to explode with a strange error as we did to Clint.\nIt's also not 100% clear to me we never want to allow explicit nulls, eg. in a list.", "url": "https://github.com/returntocorp/semgrep/pull/1078#discussion_r442989485", "createdAt": "2020-06-19T18:31:50Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -185,10 +186,16 @@ def unroll(self) -> YamlValue:\n             return {str(k.unroll()): v.unroll() for k, v in self.value.items()}\n         elif isinstance(self.value, YamlTree):\n             return self.value.unroll()\n-        elif isinstance(self.value, str) or isinstance(self.value, int):\n+        elif (\n+            isinstance(self.value, str)\n+            or isinstance(self.value, int)\n+            or self.value is None", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NTE1MQ=="}, "originalCommit": {"oid": "39742ddddff5209519ea52bbb533a511e87ce422"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwNTAzNg==", "bodyText": "Ahh, interesting, good catch.\n\nThis check could probably actually be deleted given the other code, but I figured it was probably better not to explode with a strange error as we did to Clint.\n\nI would actually argue that this is beneficial. Failing loudly and handling that case will let us know vs. failing silently with unexpected behavior somewhere later in the program.\n\nIt's also not 100% clear to me we never want to allow explicit nulls, eg. in a list.\n\nI think this is what we currently want - pretty much everything is a string at the moment. Again, I'd rather fail loudly and handle nulls if/when we need them in the future vs. trying to accommodate future functionality.\nThoughts?", "url": "https://github.com/returntocorp/semgrep/pull/1078#discussion_r443005036", "createdAt": "2020-06-19T19:13:14Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -185,10 +186,16 @@ def unroll(self) -> YamlValue:\n             return {str(k.unroll()): v.unroll() for k, v in self.value.items()}\n         elif isinstance(self.value, YamlTree):\n             return self.value.unroll()\n-        elif isinstance(self.value, str) or isinstance(self.value, int):\n+        elif (\n+            isinstance(self.value, str)\n+            or isinstance(self.value, int)\n+            or self.value is None", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NTE1MQ=="}, "originalCommit": {"oid": "39742ddddff5209519ea52bbb533a511e87ce422"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTg3NDU4OnYy", "diffSide": "LEFT", "path": "semgrep/semgrep/config_resolver.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoyMTo0OFrOGmdr-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoyNzozOVrOGmd1LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NTQ2Ng==", "bodyText": "Was this unused?", "url": "https://github.com/returntocorp/semgrep/pull/1078#discussion_r442985466", "createdAt": "2020-06-19T18:21:48Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/config_resolver.py", "diffHunk": "@@ -170,7 +170,6 @@ def load_config_from_local_path(\n             raise SemgrepError(\n                 f\"unable to find a config; path `{loc}` does not exist{addendum}\"\n             )\n-    raise Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39742ddddff5209519ea52bbb533a511e87ce422"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NzgyMQ==", "bodyText": "yeah, unreachable code", "url": "https://github.com/returntocorp/semgrep/pull/1078#discussion_r442987821", "createdAt": "2020-06-19T18:27:39Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/config_resolver.py", "diffHunk": "@@ -170,7 +170,6 @@ def load_config_from_local_path(\n             raise SemgrepError(\n                 f\"unable to find a config; path `{loc}` does not exist{addendum}\"\n             )\n-    raise Exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NTQ2Ng=="}, "originalCommit": {"oid": "39742ddddff5209519ea52bbb533a511e87ce422"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTg3NjExOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/rule_lang.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoyMjoxMFrOGmdsyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoyMjoxMFrOGmdsyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NTY3NQ==", "bodyText": "This looks unintentional.", "url": "https://github.com/returntocorp/semgrep/pull/1078#discussion_r442985675", "createdAt": "2020-06-19T18:22:10Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -19,6 +19,7 @@\n from semgrep.constants import PLEASE_FILE_ISSUE_TEXT\n \n # Do not construct directly, use `SpanBuilder().add_source`\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39742ddddff5209519ea52bbb533a511e87ce422"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDY4Njg2OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/rule_lang.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxNDoxMFrOGnJ2nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoyMDoxM1rOGnKDNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwOTA4NQ==", "bodyText": "I would move this to the top of the file. It's nice to have all your imports in one place at the top vs. sprinkled throughout.", "url": "https://github.com/returntocorp/semgrep/pull/1078#discussion_r443709085", "createdAt": "2020-06-22T17:14:10Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -258,12 +291,26 @@ def parse_yaml_preserve_spans(contents: str, filename: Optional[str]) -> YamlTre\n     parse yaml into a YamlTree object. The resulting spans are tracked in SourceTracker\n     so they can be used later when constructing error messages or displaying context.\n     \"\"\"\n-    # this uses the `RoundTripConstructor` which inherits from `SafeConstructor`\n     source_hash = SourceTracker.add_source(contents)\n \n+    # this uses the `RoundTripConstructor` which inherits from `SafeConstructor`\n     class SpanPreservingRuamelConstructor(RoundTripConstructor):\n         def construct_object(self, node: Node, deep: bool = False) -> YamlTree:\n             r = super().construct_object(node, deep)\n+            if r is None:\n+                from semgrep.error import InvalidRuleSchemaError", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1526c39988bf164e9dd20afcd0494f532f70f141"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMjMxMA==", "bodyText": "Circular imporr", "url": "https://github.com/returntocorp/semgrep/pull/1078#discussion_r443712310", "createdAt": "2020-06-22T17:20:13Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -258,12 +291,26 @@ def parse_yaml_preserve_spans(contents: str, filename: Optional[str]) -> YamlTre\n     parse yaml into a YamlTree object. The resulting spans are tracked in SourceTracker\n     so they can be used later when constructing error messages or displaying context.\n     \"\"\"\n-    # this uses the `RoundTripConstructor` which inherits from `SafeConstructor`\n     source_hash = SourceTracker.add_source(contents)\n \n+    # this uses the `RoundTripConstructor` which inherits from `SafeConstructor`\n     class SpanPreservingRuamelConstructor(RoundTripConstructor):\n         def construct_object(self, node: Node, deep: bool = False) -> YamlTree:\n             r = super().construct_object(node, deep)\n+            if r is None:\n+                from semgrep.error import InvalidRuleSchemaError", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwOTA4NQ=="}, "originalCommit": {"oid": "1526c39988bf164e9dd20afcd0494f532f70f141"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4621, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}