{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjU0MDU4", "number": 681, "title": "Add matching line to json output", "bodyText": "Move around functionaliy in rule_match object and output.py", "createdAt": "2020-05-05T00:33:34Z", "url": "https://github.com/returntocorp/semgrep/pull/681", "merged": true, "mergeCommit": {"oid": "7f71ca35a63c9e4a3610a3f167c6d4be50cb8be1"}, "closed": true, "closedAt": "2020-05-05T04:35:03Z", "author": {"login": "brendongo"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceJB-ngFqTQwNTQzNTc5MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABceMFF7ABqjMzMDI1NDg5OTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDM1Nzkw", "url": "https://github.com/returntocorp/semgrep/pull/681#pullrequestreview-405435790", "createdAt": "2020-05-05T00:35:07Z", "commit": {"oid": "73060ccafdd434fb7a4949b26b527b33e62bb3bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDM2NDAz", "url": "https://github.com/returntocorp/semgrep/pull/681#pullrequestreview-405436403", "createdAt": "2020-05-05T00:37:34Z", "commit": {"oid": "73060ccafdd434fb7a4949b26b527b33e62bb3bf"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDozNzozNFrOGQW_ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDo0Mjo1NFrOGQXEsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzA5OQ==", "bodyText": "eventually we should have an Error object type / data class", "url": "https://github.com/returntocorp/semgrep/pull/681#discussion_r419807099", "createdAt": "2020-05-05T00:37:34Z", "author": {"login": "DrewDennison"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -105,22 +85,39 @@ def build_normal_output(\n                     severity_prepend = f\"{YELLOW_COLOR}{severity} \"\n                 else:\n                     severity_prepend = f\"{severity} \"\n-            yield f\"{severity_prepend}{YELLOW_COLOR}rule:{check_id}: {finding.get('extra', {}).get('message')}{RESET_COLOR}\"\n+            yield f\"{severity_prepend}{YELLOW_COLOR}rule:{check_id}: {message}{RESET_COLOR}\"\n \n         last_file = current_file\n         last_message = message\n-        yield from finding_to_line(finding, color_output)\n+        yield from finding_to_line(rule_match, color_output)\n         if fix:\n             yield f\"{BLUE_COLOR}autofix:{RESET_COLOR} {fix}\"\n \n \n-def build_output_json(output_json: Dict[str, Any]) -> str:\n+def build_output_json(rule_matches: List[RuleMatch], semgrep_errors: List[Any]) -> str:\n     # wrap errors under \"data\" entry to be compatible with\n     # https://docs.r2c.dev/en/latest/api/output.html#errors\n-    errors = output_json[\"errors\"]\n-    if errors:\n-        output_json[\"errors\"] = {\n-            \"data\": output_json[\"errors\"],\n-            \"message\": \"SgrepRuntimeErrors\",\n-        }\n+    output_json = {}\n+    output_json[\"results\"] = [rm.to_json() for rm in rule_matches]\n+\n+    errors = []\n+    for error in semgrep_errors:\n+        errors.append(\n+            {\"data\": semgrep_errors, \"message\": \"SemgrepCoreRuntimeErrors\",}\n+        )\n+    output_json[\"errors\"] = errors\n     return json.dumps(output_json)\n+\n+\n+def build_output(\n+    rule_matches: List[RuleMatch],\n+    semgrep_errors: List[Any],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73060ccafdd434fb7a4949b26b527b33e62bb3bf"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzI2NA==", "bodyText": "we could make this return a string instead of a list? idk maybe we use the list in other places", "url": "https://github.com/returntocorp/semgrep/pull/681#discussion_r419807264", "createdAt": "2020-05-05T00:38:12Z", "author": {"login": "DrewDennison"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -105,22 +85,39 @@ def build_normal_output(\n                     severity_prepend = f\"{YELLOW_COLOR}{severity} \"\n                 else:\n                     severity_prepend = f\"{severity} \"\n-            yield f\"{severity_prepend}{YELLOW_COLOR}rule:{check_id}: {finding.get('extra', {}).get('message')}{RESET_COLOR}\"\n+            yield f\"{severity_prepend}{YELLOW_COLOR}rule:{check_id}: {message}{RESET_COLOR}\"\n \n         last_file = current_file\n         last_message = message\n-        yield from finding_to_line(finding, color_output)\n+        yield from finding_to_line(rule_match, color_output)\n         if fix:\n             yield f\"{BLUE_COLOR}autofix:{RESET_COLOR} {fix}\"\n \n \n-def build_output_json(output_json: Dict[str, Any]) -> str:\n+def build_output_json(rule_matches: List[RuleMatch], semgrep_errors: List[Any]) -> str:\n     # wrap errors under \"data\" entry to be compatible with\n     # https://docs.r2c.dev/en/latest/api/output.html#errors\n-    errors = output_json[\"errors\"]\n-    if errors:\n-        output_json[\"errors\"] = {\n-            \"data\": output_json[\"errors\"],\n-            \"message\": \"SgrepRuntimeErrors\",\n-        }\n+    output_json = {}\n+    output_json[\"results\"] = [rm.to_json() for rm in rule_matches]\n+\n+    errors = []\n+    for error in semgrep_errors:\n+        errors.append(\n+            {\"data\": semgrep_errors, \"message\": \"SemgrepCoreRuntimeErrors\",}\n+        )\n+    output_json[\"errors\"] = errors\n     return json.dumps(output_json)\n+\n+\n+def build_output(\n+    rule_matches: List[RuleMatch],\n+    semgrep_errors: List[Any],\n+    json_format: bool,\n+    color_output: bool,\n+) -> str:\n+    if json_format:\n+        return build_output_json(rule_matches, semgrep_errors)\n+    else:\n+        return \"\\n\".join(\n+            build_normal_output(rule_matches, semgrep_errors, color_output)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73060ccafdd434fb7a4949b26b527b33e62bb3bf"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzU5Nw==", "bodyText": "could possible add @lru_cache() if we expect this to be read multiple times. I noticed that black does this for reading .gitignore", "url": "https://github.com/returntocorp/semgrep/pull/681#discussion_r419807597", "createdAt": "2020-05-05T00:39:28Z", "author": {"login": "DrewDennison"}, "path": "semgrep/semgrep/rule_match.py", "diffHunk": "@@ -63,6 +65,18 @@ def start(self) -> Dict[str, Any]:\n     def end(self) -> Dict[str, Any]:\n         return self._end\n \n+    @property\n+    def lines(self) -> Iterable[str]:\n+        \"\"\"\n+            Return lines in file that this RuleMatch is referring to.\n+\n+            Assumes file exists.  Note that start/end line is one-indexed\n+        \"\"\"\n+        with self.path.open(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73060ccafdd434fb7a4949b26b527b33e62bb3bf"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzgzNg==", "bodyText": "would we ever expect to be able to call self.start.line?", "url": "https://github.com/returntocorp/semgrep/pull/681#discussion_r419807836", "createdAt": "2020-05-05T00:40:27Z", "author": {"login": "DrewDennison"}, "path": "semgrep/semgrep/rule_match.py", "diffHunk": "@@ -63,6 +65,18 @@ def start(self) -> Dict[str, Any]:\n     def end(self) -> Dict[str, Any]:\n         return self._end\n \n+    @property\n+    def lines(self) -> Iterable[str]:\n+        \"\"\"\n+            Return lines in file that this RuleMatch is referring to.\n+\n+            Assumes file exists.  Note that start/end line is one-indexed\n+        \"\"\"\n+        with self.path.open(\n+            buffering=1, errors=\"replace\"\n+        ) as fin:  # buffering=1 turns on line-level reads\n+            return list(itertools.islice(fin, self.start[\"line\"] - 1, self.end[\"line\"]))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73060ccafdd434fb7a4949b26b527b33e62bb3bf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwODQzNA==", "bodyText": "wish we did the serialization closer to the post but I suspect you want to do this once", "url": "https://github.com/returntocorp/semgrep/pull/681#discussion_r419808434", "createdAt": "2020-05-05T00:42:54Z", "author": {"login": "DrewDennison"}, "path": "semgrep/semgrep/semgrep_main.py", "diffHunk": "@@ -131,39 +131,27 @@ def rename_rule_ids(valid_configs: Dict[str, Any]) -> Dict[str, Any]:\n ### Handle output\n \n \n-def post_output(output_url: str, output_data: Dict[str, Any]) -> None:\n+def post_output(output_url: str, output: str) -> None:\n     import requests  # here for faster startup times\n \n     print_msg(f\"posting to {output_url}...\")\n-    r = requests.post(output_url, json=output_data)\n+    r = requests.post(output_url, data=output)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73060ccafdd434fb7a4949b26b527b33e62bb3bf"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa76c6add736c1252e058dfba775b7f47a9edb9a", "author": {"user": {"login": "brendongo", "name": "Brendon Go"}}, "url": "https://github.com/returntocorp/semgrep/commit/aa76c6add736c1252e058dfba775b7f47a9edb9a", "committedDate": "2020-05-05T04:07:51Z", "message": "Add matching line to json output\n\nMove around functionaliy in rule_match object and output.py."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73060ccafdd434fb7a4949b26b527b33e62bb3bf", "author": {"user": {"login": "brendongo", "name": "Brendon Go"}}, "url": "https://github.com/returntocorp/semgrep/commit/73060ccafdd434fb7a4949b26b527b33e62bb3bf", "committedDate": "2020-05-05T00:29:23Z", "message": "Add matching line to json output\n\nMove around functionaliy in rule_match object and output.py"}, "afterCommit": {"oid": "aa76c6add736c1252e058dfba775b7f47a9edb9a", "author": {"user": {"login": "brendongo", "name": "Brendon Go"}}, "url": "https://github.com/returntocorp/semgrep/commit/aa76c6add736c1252e058dfba775b7f47a9edb9a", "committedDate": "2020-05-05T04:07:51Z", "message": "Add matching line to json output\n\nMove around functionaliy in rule_match object and output.py."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 945, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}