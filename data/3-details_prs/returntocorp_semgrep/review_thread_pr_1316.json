{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0Njc4MTE0", "number": 1316, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0MTo1OVrOEQydXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0MjoyOVrOEQyd6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDM5Mzg5OnYy", "diffSide": "RIGHT", "path": "semgrep-core/tests/generate_test_matrix.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0MTo1OVrOG1I_7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1MDozM1rOG1JRAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NTE1MA==", "bodyText": "Is there an issue tracking this?", "url": "https://github.com/returntocorp/semgrep/pull/1316#discussion_r458375150", "createdAt": "2020-07-21T20:41:59Z", "author": {"login": "ievans"}, "path": "semgrep-core/tests/generate_test_matrix.py", "diffHunk": "@@ -40,6 +40,15 @@\n     \"exprstmt\": \"Expression and Statement\",\n }\n \n+LANGUAGE_EXCEPTIONS = {\n+    \"java\": [\n+        \"naming_import\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c669dc1fd39000a8773e3fc4253d26fb056ea76b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3OTUyMw==", "bodyText": "From what I can tell, Java doesn't support import aliasing. To address the comment below as well, this list is the explicit declaration that a language doesn't support something. A missing test tells me \"someone forgot to test this, or maybe it's not supported\" whereas this list tells me \"this language doesn't support this feature.\" Or, at least, that's what I was hoping. Is there a better way we can state that?", "url": "https://github.com/returntocorp/semgrep/pull/1316#discussion_r458379523", "createdAt": "2020-07-21T20:50:33Z", "author": {"login": "mschwager"}, "path": "semgrep-core/tests/generate_test_matrix.py", "diffHunk": "@@ -40,6 +40,15 @@\n     \"exprstmt\": \"Expression and Statement\",\n }\n \n+LANGUAGE_EXCEPTIONS = {\n+    \"java\": [\n+        \"naming_import\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NTE1MA=="}, "originalCommit": {"oid": "c669dc1fd39000a8773e3fc4253d26fb056ea76b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDM5NTI4OnYy", "diffSide": "RIGHT", "path": "semgrep-core/tests/generate_test_matrix.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0MjoyOVrOG1JA7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0MjoyOVrOG1JA7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NTQwNQ==", "bodyText": "is it really worth having language exception? I'd prefer to be explicit: \"we don't have test cases for this, it is probably not supported\"", "url": "https://github.com/returntocorp/semgrep/pull/1316#discussion_r458375405", "createdAt": "2020-07-21T20:42:29Z", "author": {"login": "ievans"}, "path": "semgrep-core/tests/generate_test_matrix.py", "diffHunk": "@@ -89,7 +98,14 @@ def generate_cheatsheet(root_dir: str):\n                 \n                 entry = (read_if_exists(sgrep_path), sgrep_path,  read_if_exists(code_path), code_path)\n                 print((lang, entry))\n-                output[lang][VERBOSE_FEATURE_NAME.get(category, category)][VERBOSE_SUBCATEGORY_NAME.get(subcategory, subcategory)].append(entry)\n+                feature_name = VERBOSE_FEATURE_NAME.get(category, category)\n+                subcategory_name = VERBOSE_SUBCATEGORY_NAME.get(subcategory, subcategory)\n+                language_exception = (\n+                    feature_name in LANGUAGE_EXCEPTIONS.get(lang, [])\n+                    or subcategory in LANGUAGE_EXCEPTIONS.get(lang, [])\n+                )\n+                if not language_exception:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c669dc1fd39000a8773e3fc4253d26fb056ea76b"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4945, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}