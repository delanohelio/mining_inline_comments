{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MzE5MjI4", "number": 1767, "title": "Convert tree-sitter parse error exn to Parse_info.Parsing_error", "bodyText": "There is already some code to automatically intercept Parse_info exns\nto display their location, so better to use a consistent scheme\nacross pfff and tree-sitter parsers.\ntest plan:\n(semgrep) pad@yrax:~/semgrep/tests/OTHER/parsing_errors$ semgrep -l ts -e 'FOO' .\nwarn: parse error\n  --> err.ts:2\n2 |          return 1+\n  |          ^^^^^^^^^\n= help: If the code appears to be valid, this may be a semgrep bug.\nCould not parse err.ts as ts\n\nWarnings exist. Run with `--strict` to turn warnings into errors.\n\nbetter than the previous error that was always reported on the first line.\nThis also improves error location for the errors reported in\n#1713", "createdAt": "2020-10-01T14:46:42Z", "url": "https://github.com/returntocorp/semgrep/pull/1767", "merged": true, "mergeCommit": {"oid": "0ab5151c9c24bd523df393c861b538a737c54ce5"}, "closed": true, "closedAt": "2020-10-02T06:49:37Z", "author": {"login": "aryx"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOSgDygH2gAyNDk2MzE5MjI4OjI2ODdiNDA5YTU4N2UxMmQxM2IxYjIzNjA0ZDgzMTliY2RjYWIyNjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOT9oEgFqTUwMDQ5OTY0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2687b409a587e12d13b1b23604d8319bcdcab261", "author": {"user": {"login": "aryx", "name": "Yoann Padioleau"}}, "url": "https://github.com/returntocorp/semgrep/commit/2687b409a587e12d13b1b23604d8319bcdcab261", "committedDate": "2020-10-01T14:45:29Z", "message": "Convert tree-sitter parse error exn to Parse_info.Parsing_error\n\nThere is already some code to automatically intercept Parse_info exns\nto display their location, so better to use a consistent scheme\nacross pfff and tree-sitter parsers.\n\ntest plan:\n```\n(semgrep) pad@yrax:~/semgrep/tests/OTHER/parsing_errors$ semgrep -l ts -e 'FOO' .\nwarn: parse error\n  --> err.ts:2\n2 |          return 1+\n  |          ^^^^^^^^^\n= help: If the code appears to be valid, this may be a semgrep bug.\nCould not parse err.ts as ts\n\nWarnings exist. Run with `--strict` to turn warnings into errors.\n```\n\nbetter than the previous error that was always reported on the first line.\nThis also improves error location for the errors reported in\nhttps://github.com/returntocorp/semgrep/issues/1713"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDkyMDU4", "url": "https://github.com/returntocorp/semgrep/pull/1767#pullrequestreview-500492058", "createdAt": "2020-10-01T15:53:39Z", "commit": {"oid": "2687b409a587e12d13b1b23604d8319bcdcab261"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTo1MzozOVrOHbQ8zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTo1MzozOVrOHbQ8zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM1MTMxMA==", "bodyText": "To get the constructor, you can do Printexc.exn_slot_name exn (since ocaml 4.02). But I don't see how to do the rest without Obj, other than catching the exception in the child (or make the parser return an Ok/Error).", "url": "https://github.com/returntocorp/semgrep/pull/1767#discussion_r498351310", "createdAt": "2020-10-01T15:53:39Z", "author": {"login": "mjambon"}, "path": "semgrep-core/parsing/Parse_tree_sitter_helpers.ml", "diffHunk": "@@ -92,6 +92,45 @@ let combine_tokens env xs =\n       let t = token env x in\n       t\n \n+let mk_tree_sitter_error (err : Tree_sitter_run.Tree_sitter_error.t) =\n+  let start = err.start_pos in\n+  let loc = {\n+    PI.str = err.substring;\n+    charpos = 0; (* fake *)\n+    line = start.row + 1;\n+    column = start.column;\n+    file = err.file.name;\n+  } in\n+  loc\n+\n+let convert_tree_sitter_exn_to_pfff_exn f =\n+  try f ()\n+  with\n+  (* The case below is what we would like to do! However if\n+   * you use Parallel.invoke to invoke the tree-sitter parser, this\n+   * code below will never trigger. Indeed, unmarshalled exn\n+   * can't be used in match or try or used for structural equality\n+   * hence the ugly workaround below. See marshal.mli or Paralle.ml for\n+   * more information.\n+   *)\n+  | Tree_sitter_run.Tree_sitter_error.Error ts_error ->\n+    let loc = mk_tree_sitter_error ts_error in\n+    let info = { PI.token = PI.OriginTok loc; transfo = PI.NoTransfo } in\n+    raise (PI.Parsing_error info)\n+\n+  (* !!!UGLY!!! remove this once we don't use Paralle.invoke *)\n+  | exn ->\n+      let s = Common.exn_to_s exn in\n+      if s = \"Tree_sitter_run.Tree_sitter_error.Error(_)\" then begin\n+        let t = Obj.repr exn in\n+        let info = Obj.field t 1 in\n+        let (ts_error : Tree_sitter_run.Tree_sitter_error.t) = Obj.obj info in\n+        let loc = mk_tree_sitter_error ts_error in\n+        let info = { PI.token = PI.OriginTok loc; transfo = PI.NoTransfo } in\n+        raise (PI.Parsing_error info)\n+      end else raise exn", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2687b409a587e12d13b1b23604d8319bcdcab261"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDk5NjQ3", "url": "https://github.com/returntocorp/semgrep/pull/1767#pullrequestreview-500499647", "createdAt": "2020-10-01T16:02:00Z", "commit": {"oid": "2687b409a587e12d13b1b23604d8319bcdcab261"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjowMjowMFrOHbRSLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjowMjowMFrOHbRSLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM1Njc4MQ==", "bodyText": "yep, the parser could return an algebraic data type. Only exn (open variants) have this marshalling issue.\nStill, I like this hacky solution :)", "url": "https://github.com/returntocorp/semgrep/pull/1767#discussion_r498356781", "createdAt": "2020-10-01T16:02:00Z", "author": {"login": "aryx"}, "path": "semgrep-core/parsing/Parse_tree_sitter_helpers.ml", "diffHunk": "@@ -92,6 +92,45 @@ let combine_tokens env xs =\n       let t = token env x in\n       t\n \n+let mk_tree_sitter_error (err : Tree_sitter_run.Tree_sitter_error.t) =\n+  let start = err.start_pos in\n+  let loc = {\n+    PI.str = err.substring;\n+    charpos = 0; (* fake *)\n+    line = start.row + 1;\n+    column = start.column;\n+    file = err.file.name;\n+  } in\n+  loc\n+\n+let convert_tree_sitter_exn_to_pfff_exn f =\n+  try f ()\n+  with\n+  (* The case below is what we would like to do! However if\n+   * you use Parallel.invoke to invoke the tree-sitter parser, this\n+   * code below will never trigger. Indeed, unmarshalled exn\n+   * can't be used in match or try or used for structural equality\n+   * hence the ugly workaround below. See marshal.mli or Paralle.ml for\n+   * more information.\n+   *)\n+  | Tree_sitter_run.Tree_sitter_error.Error ts_error ->\n+    let loc = mk_tree_sitter_error ts_error in\n+    let info = { PI.token = PI.OriginTok loc; transfo = PI.NoTransfo } in\n+    raise (PI.Parsing_error info)\n+\n+  (* !!!UGLY!!! remove this once we don't use Paralle.invoke *)\n+  | exn ->\n+      let s = Common.exn_to_s exn in\n+      if s = \"Tree_sitter_run.Tree_sitter_error.Error(_)\" then begin\n+        let t = Obj.repr exn in\n+        let info = Obj.field t 1 in\n+        let (ts_error : Tree_sitter_run.Tree_sitter_error.t) = Obj.obj info in\n+        let loc = mk_tree_sitter_error ts_error in\n+        let info = { PI.token = PI.OriginTok loc; transfo = PI.NoTransfo } in\n+        raise (PI.Parsing_error info)\n+      end else raise exn", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM1MTMxMA=="}, "originalCommit": {"oid": "2687b409a587e12d13b1b23604d8319bcdcab261"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1276, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}