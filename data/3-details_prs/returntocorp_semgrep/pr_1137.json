{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMTMyNDky", "number": 1137, "title": "Cache version checking to speed up runs", "bodyText": "This sped up subsequent semgrep runs quite a bit:\n$ time python -m semgrep --validate --config ~/r2c/sgrep-rules/contrib/dlint/dlint-equivalent.yaml\nConfiguration is valid - found 1 valid configuration(s) and 0 configuration error(s).\n\nreal\t0m1.031s\nuser\t0m0.438s\nsys\t0m0.024s\n\n$ time python -m semgrep --validate --config ~/r2c/sgrep-rules/contrib/dlint/dlint-equivalent.yaml\nConfiguration is valid - found 1 valid configuration(s) and 0 configuration error(s).\n\nreal\t0m0.387s\nuser\t0m0.366s\nsys\t0m0.022s", "createdAt": "2020-06-25T16:31:17Z", "url": "https://github.com/returntocorp/semgrep/pull/1137", "merged": true, "mergeCommit": {"oid": "5989bdfb9c03b31698473b3bbef5c6360fbed8b2"}, "closed": true, "closedAt": "2020-06-25T20:24:05Z", "author": {"login": "mschwager"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuxO_LgH2gAyNDQwMTMyNDkyOmY3MWJhZmRhYTQ1NTc2MGRiMjViNGM2NWY1OGNhNTFhNWU5YWQ3MmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuz9zqAH2gAyNDQwMTMyNDkyOjk5ODllZmI3NTIwYzAxMjdhMDNjMTg3ODdmZjU5Y2IyOGY1NjZmNWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f71bafdaa455760db25b4c65f58ca51a5e9ad72c", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/f71bafdaa455760db25b4c65f58ca51a5e9ad72c", "committedDate": "2020-06-25T16:28:19Z", "message": "Cache version checking to speed up runs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NjY1MzIy", "url": "https://github.com/returntocorp/semgrep/pull/1137#pullrequestreview-437665322", "createdAt": "2020-06-25T16:32:12Z", "commit": {"oid": "f71bafdaa455760db25b4c65f58ca51a5e9ad72c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjozMjoxMlrOGpCp4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjozNDo1MVrOGpCwGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4ODI4OQ==", "bodyText": "IIRC we're not autogenerating this file any more.", "url": "https://github.com/returntocorp/semgrep/pull/1137#discussion_r445688289", "createdAt": "2020-06-25T16:32:12Z", "author": {"login": "mschwager"}, "path": ".gitignore", "diffHunk": "@@ -149,5 +149,4 @@ dmypy.json\n *.DS_Store\n \n # Ignore autogenerated version file\n-semgrep/semgrep/version.py", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71bafdaa455760db25b4c65f58ca51a5e9ad72c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4OTg4MQ==", "bodyText": "Using .cache isn't ideal on OSX, but I figured this was fine compared to pulling in another dependency like appdirs just to grab a directory. If a user has strong feels about this they can always set SEMGREP_VERSION_CACHE_PATH.", "url": "https://github.com/returntocorp/semgrep/pull/1137#discussion_r445689881", "createdAt": "2020-06-25T16:34:51Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/version.py", "diffHunk": "@@ -0,0 +1,118 @@\n+import os\n+import time\n+from pathlib import Path\n+from typing import Optional\n+\n+import requests\n+from packaging.version import InvalidVersion\n+from packaging.version import Version\n+\n+from semgrep import constants\n+from semgrep import util\n+\n+VERSION_CHECK_URL = str(\n+    os.environ.get(\n+        \"SEMGREP_VERSION_CHECK_URL\", \"https://semgrep.live/api/check-version\"\n+    )\n+)\n+VERSION_CHECK_TIMEOUT = int(\n+    os.environ.get(\n+        \"SEMGREP_VERSION_CHECK_TIMEOUT\", 2  # Don't block user's for too long\n+    )\n+)\n+VERSION_CACHE_PATH = Path(\n+    os.environ.get(\n+        \"SEMGREP_VERSION_CACHE_PATH\",\n+        Path(os.path.expanduser(\"~/.cache\")) / \"semgrep_version\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71bafdaa455760db25b4c65f58ca51a5e9ad72c"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06af4fe2d44914877902189bec7c7945f4c4ddfc", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/06af4fe2d44914877902189bec7c7945f4c4ddfc", "committedDate": "2020-06-25T16:36:49Z", "message": "Appease 'requests' lint rule"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NjkxMTk2", "url": "https://github.com/returntocorp/semgrep/pull/1137#pullrequestreview-437691196", "createdAt": "2020-06-25T17:05:27Z", "commit": {"oid": "06af4fe2d44914877902189bec7c7945f4c4ddfc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzowNToyOFrOGpD4cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzowNToyOFrOGpD4cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwODQwMA==", "bodyText": "If you want a more accurate test you can actually assert that _fetch_latest_version was only called once", "url": "https://github.com/returntocorp/semgrep/pull/1137#discussion_r445708400", "createdAt": "2020-06-25T17:05:28Z", "author": {"login": "brendongo"}, "path": "semgrep/tests/unit/test_version.py", "diffHunk": "@@ -0,0 +1,17 @@\n+import time\n+\n+from semgrep.version import is_running_latest\n+\n+\n+def test_version_check_caching(tmp_path):\n+    tmp_cache_path = tmp_path / \"semgrep_version\"\n+\n+    time1 = time.time()\n+    is_running_latest(tmp_cache_path)\n+    time1 = time.time() - time1\n+\n+    time2 = time.time()\n+    is_running_latest(tmp_cache_path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06af4fe2d44914877902189bec7c7945f4c4ddfc"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Njk1NDIy", "url": "https://github.com/returntocorp/semgrep/pull/1137#pullrequestreview-437695422", "createdAt": "2020-06-25T17:11:12Z", "commit": {"oid": "06af4fe2d44914877902189bec7c7945f4c4ddfc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzoxMToxMlrOGpEFKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzoxMToxMlrOGpEFKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcxMTY1OQ==", "bodyText": "Do we need to check if the parent exists if we call mkdir with exist_ok=True anyway?", "url": "https://github.com/returntocorp/semgrep/pull/1137#discussion_r445711659", "createdAt": "2020-06-25T17:11:12Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/version.py", "diffHunk": "@@ -0,0 +1,119 @@\n+import os\n+import time\n+from pathlib import Path\n+from typing import Optional\n+\n+from packaging.version import InvalidVersion\n+from packaging.version import Version\n+\n+from semgrep import constants\n+from semgrep import util\n+\n+VERSION_CHECK_URL = str(\n+    os.environ.get(\n+        \"SEMGREP_VERSION_CHECK_URL\", \"https://semgrep.live/api/check-version\"\n+    )\n+)\n+VERSION_CHECK_TIMEOUT = int(\n+    os.environ.get(\n+        \"SEMGREP_VERSION_CHECK_TIMEOUT\", 2  # Don't block user's for too long\n+    )\n+)\n+VERSION_CACHE_PATH = Path(\n+    os.environ.get(\n+        \"SEMGREP_VERSION_CACHE_PATH\",\n+        Path(os.path.expanduser(\"~/.cache\")) / \"semgrep_version\",\n+    )\n+)\n+\n+\n+def _fetch_latest_version(\n+    url: str = VERSION_CHECK_URL, timeout: int = VERSION_CHECK_TIMEOUT\n+) -> Optional[str]:\n+    try:\n+        import requests\n+\n+        resp = requests.get(\n+            url,\n+            headers={\"User-Agent\": f\"Semgrep/{constants.__VERSION__}\"},\n+            timeout=timeout,\n+        )\n+    except Exception as e:\n+        util.debug_print(f\"Fetching latest version failed to connect: {e}\")\n+        return None\n+    else:\n+        if resp.status_code != requests.codes.OK:\n+            util.debug_print(\n+                f\"Fetching latest version received HTTP error code: {resp.status_code}\"\n+            )\n+            return None\n+        try:\n+            resp_json = resp.json()\n+        except ValueError:\n+            util.debug_print(\"Fetching latest version received invalid JSON\")\n+            return None\n+        else:\n+            return str(resp_json[\"latest\"])\n+\n+\n+def _get_version_from_cache(version_cache_path: Path) -> Optional[str]:\n+    now = time.time()\n+\n+    if version_cache_path.is_file():\n+        with version_cache_path.open() as f:\n+            timestamp_str = f.readline().strip()\n+            latest_version_str = f.readline().strip()\n+\n+            try:\n+                # Treat time as integer seconds so no need to deal with str float conversion\n+                timestamp = int(timestamp_str)\n+            except ValueError:\n+                util.debug_print(f\"Version cache invalid timestamp: {timestamp_str}\")\n+                return None\n+\n+            one_day = 86400\n+            if now - timestamp > one_day:\n+                util.debug_print(f\"Version cache expired: {timestamp_str}:{now}\")\n+                return None\n+\n+            return latest_version_str\n+\n+    util.debug_print(\"Version cache does not exist\")\n+    return None\n+\n+\n+def _get_latest_version(version_cache_path: Path) -> Optional[str]:\n+    latest_version_str = _get_version_from_cache(version_cache_path)\n+    if latest_version_str is None:\n+        latest_version_str = _fetch_latest_version()\n+        if latest_version_str is None:\n+            # Request timed out or invalid\n+            return None\n+\n+        if not version_cache_path.parent.is_dir():\n+            version_cache_path.parent.mkdir(parents=True, exist_ok=True)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06af4fe2d44914877902189bec7c7945f4c4ddfc"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3Njk1ODU5", "url": "https://github.com/returntocorp/semgrep/pull/1137#pullrequestreview-437695859", "createdAt": "2020-06-25T17:11:44Z", "commit": {"oid": "06af4fe2d44914877902189bec7c7945f4c4ddfc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "251b00e00a34bbbdaaed0901f6e74d0e5079e226", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/251b00e00a34bbbdaaed0901f6e74d0e5079e226", "committedDate": "2020-06-25T19:30:57Z", "message": "Address PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9989efb7520c0127a03c18787ff59cb28f566f5c", "author": {"user": {"login": "mschwager", "name": null}}, "url": "https://github.com/returntocorp/semgrep/commit/9989efb7520c0127a03c18787ff59cb28f566f5c", "committedDate": "2020-06-25T19:39:16Z", "message": "Don't depend on timing anymore which could be flaky"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1437, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}