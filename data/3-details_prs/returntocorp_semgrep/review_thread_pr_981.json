{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMzQzMDY5", "number": 981, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxMDowNlrOEFGA6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxODowMVrOEFIkOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzc2ODczOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/output.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxMDowNlrOGjHoUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjowMzo1M1rOGjJa9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODM1NQ==", "bodyText": "What's the advantage of a context manager here? Can we just initialize OutputHandlers where necessary and continue to let __main__ be the final arbiter of exceptions and exiting? It seems odd to have our output handler doing a sys.exit for us.", "url": "https://github.com/returntocorp/semgrep/pull/981#discussion_r439478355", "createdAt": "2020-06-12T15:10:06Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -173,3 +187,178 @@ def build_output(\n     else:\n         # https://github.com/python/mypy/issues/6366\n         raise RuntimeError(f\"Unhandled output format: {type(output_format).__name__}\")\n+\n+\n+class OutputSettings(NamedTuple):\n+    output_format: OutputFormat\n+    output_destination: Optional[str]\n+    quiet: bool\n+    error_on_findings: bool\n+\n+\n+@contextlib.contextmanager\n+def managed_output(output_settings: OutputSettings) -> Generator:  # type: ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb620bb7b4706cdd9e362eda8d274ccaef021a8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4NjUzNw==", "bodyText": "The point of the context manager was to ensure that .close() gets called and that no matter what happens, we output all the errors we've collected so far in a consistent way.\nI agree - I don't love having the output manager call sys.exit. However, I don't agree that main should be the final arbiter of exceptions - the whole point of this is to allow us to be able to collect things to output that will always be print in the event of a final exception, which I don't think __main__ is well set up to do.", "url": "https://github.com/returntocorp/semgrep/pull/981#discussion_r439486537", "createdAt": "2020-06-12T15:24:49Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -173,3 +187,178 @@ def build_output(\n     else:\n         # https://github.com/python/mypy/issues/6366\n         raise RuntimeError(f\"Unhandled output format: {type(output_format).__name__}\")\n+\n+\n+class OutputSettings(NamedTuple):\n+    output_format: OutputFormat\n+    output_destination: Optional[str]\n+    quiet: bool\n+    error_on_findings: bool\n+\n+\n+@contextlib.contextmanager\n+def managed_output(output_settings: OutputSettings) -> Generator:  # type: ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODM1NQ=="}, "originalCommit": {"oid": "6eb620bb7b4706cdd9e362eda8d274ccaef021a8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMDIzNQ==", "bodyText": "How about we let the OutputHandler deal with the output and have __main__ deal with the exit codes? I.e. call .close() in finally, but re-raise the exception ex in the except so __main__ can grab the code and exit. That way OutputHandler doesn't need to worry about exit_code, but can still do all the printing.\nI believe this should give us the behavior we want, e.g.\nIn [32]: try: \n    ...:     raise Exception('EXCEPTION') \n    ...: except Exception as e: \n    ...:     print('EXCEPT') \n    ...:     raise \n    ...: finally: \n    ...:     print('FINALLY') \n    ...:                                                                                                \nEXCEPT\nFINALLY\n---------------------------------------------------------------------------\nException                                 Traceback (most recent call last)\n<ipython-input-32-04917ed8d528> in <module>\n      1 try:\n----> 2     raise Exception('EXCEPTION')\n      3 except Exception as e:\n      4     print('EXCEPT')\n      5     raise\n\nException: EXCEPTION", "url": "https://github.com/returntocorp/semgrep/pull/981#discussion_r439500235", "createdAt": "2020-06-12T15:49:55Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -173,3 +187,178 @@ def build_output(\n     else:\n         # https://github.com/python/mypy/issues/6366\n         raise RuntimeError(f\"Unhandled output format: {type(output_format).__name__}\")\n+\n+\n+class OutputSettings(NamedTuple):\n+    output_format: OutputFormat\n+    output_destination: Optional[str]\n+    quiet: bool\n+    error_on_findings: bool\n+\n+\n+@contextlib.contextmanager\n+def managed_output(output_settings: OutputSettings) -> Generator:  # type: ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODM1NQ=="}, "originalCommit": {"oid": "6eb620bb7b4706cdd9e362eda8d274ccaef021a8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwNzcwMg==", "bodyText": "\ud83d\udc4d I like this", "url": "https://github.com/returntocorp/semgrep/pull/981#discussion_r439507702", "createdAt": "2020-06-12T16:03:53Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -173,3 +187,178 @@ def build_output(\n     else:\n         # https://github.com/python/mypy/issues/6366\n         raise RuntimeError(f\"Unhandled output format: {type(output_format).__name__}\")\n+\n+\n+class OutputSettings(NamedTuple):\n+    output_format: OutputFormat\n+    output_destination: Optional[str]\n+    quiet: bool\n+    error_on_findings: bool\n+\n+\n+@contextlib.contextmanager\n+def managed_output(output_settings: OutputSettings) -> Generator:  # type: ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODM1NQ=="}, "originalCommit": {"oid": "6eb620bb7b4706cdd9e362eda8d274ccaef021a8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzc2OTIwOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/output.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxMDoxMVrOGjHomw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxODoyOVrOGjH6pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODQyNw==", "bodyText": "This feels kinda hamfisted compared to using Python's builtin mechanism for doing this:\ntry:\n    ...\nexcept ExceptionType1:\n    ...\nexcept ExceptionType2:\n    ...", "url": "https://github.com/returntocorp/semgrep/pull/981#discussion_r439478427", "createdAt": "2020-06-12T15:10:11Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -173,3 +187,178 @@ def build_output(\n     else:\n         # https://github.com/python/mypy/issues/6366\n         raise RuntimeError(f\"Unhandled output format: {type(output_format).__name__}\")\n+\n+\n+class OutputSettings(NamedTuple):\n+    output_format: OutputFormat\n+    output_destination: Optional[str]\n+    quiet: bool\n+    error_on_findings: bool\n+\n+\n+@contextlib.contextmanager\n+def managed_output(output_settings: OutputSettings) -> Generator:  # type: ignore\n+    handler = OutputHandler(output_settings)\n+    try:\n+        yield handler\n+    except Exception as ex:\n+        handler.handle_unhandled_exception(ex)\n+    finally:\n+        exit_code = handler.close()\n+        sys.exit(exit_code)\n+\n+\n+class OutputHandler:\n+    \"\"\"\n+    Handle all output in a central location. Rather than calling `print_error` directly,\n+    you should call `handle_*` as appropriate.\n+\n+    In normal usage, it should be constructed via the contextmanager, `managed_output`. It ensures that everything\n+    is handled properly if exceptions are thrown.\n+\n+    If you need to stop execution immediately (think carefully if you really want this!), throw an exception.\n+    If this is normal behavior, the exception _must_ inherit from `SemgrepError`.\n+\n+    If you want execution to continue, _report_ the exception via the appropriate `handle_*` method.\n+    \"\"\"\n+\n+    def __init__(\n+        self,\n+        output_settings: OutputSettings,\n+        stderr: IO = sys.stderr,\n+        stdout: IO = sys.stdout,\n+    ):\n+        self.settings = output_settings\n+        self.stderr = stderr\n+        self.stdout = stdout\n+\n+        self.rule_matches: List[RuleMatch] = []\n+        self.debug_steps_by_rule: Dict[Rule, List[Dict[str, Any]]] = {}\n+        self.rules: FrozenSet[Rule] = frozenset()\n+        self.semgrep_core_errors: List[Dict[str, Any]] = []\n+        self.semgrep_rule_errors: List[SemgrepError] = []\n+        self.has_output = False\n+\n+        self.exit_code = 0\n+        self.final_error: Optional[Exception] = None\n+\n+    def handle_semgrep_core_errors(self, semgrep_errors: List[Dict[str, Any]]) -> None:\n+        \"\"\"\n+        Report errors coming directly from semgrep-core (raw JSON objects)\n+        \"\"\"\n+        self.semgrep_core_errors += semgrep_errors\n+        if self.settings.output_format == OutputFormat.TEXT:\n+            for error in semgrep_errors:\n+                print_error(pretty_error(error))\n+\n+    def handle_semgrep_rule_errors(self, error: SemgrepError) -> None:\n+        \"\"\"\n+        Report parse errors from semgrep rules. Either:\n+        - when the pattern fails to parse in semgrep-core\n+        - when the YAML or YAML structure is invalid\n+        \"\"\"\n+        self.semgrep_rule_errors.append(error)\n+        self._output_exception(error)\n+\n+    def handle_semgrep_core_output(\n+        self,\n+        rule_matches_by_rule: Dict[Rule, List[RuleMatch]],\n+        debug_steps_by_rule: Dict[Rule, List[Dict[str, Any]]],\n+    ) -> None:\n+        self.has_output = True\n+        self.rules = self.rules.union(rule_matches_by_rule.keys())\n+        self.rule_matches += [\n+            match\n+            for matches_of_one_rule in rule_matches_by_rule.values()\n+            for match in matches_of_one_rule\n+        ]\n+\n+        self.debug_steps_by_rule.update(debug_steps_by_rule)\n+\n+    def handle_unhandled_exception(self, ex: Exception) -> None:\n+        \"\"\"\n+        This is called by the context manager upon an unhandled exception. If you want to record a final\n+        error & set the exit code, but keep executing to perform cleanup tasks, call this method.\n+        \"\"\"\n+        if isinstance(ex, SemgrepError):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb620bb7b4706cdd9e362eda8d274ccaef021a8"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MzA0Nw==", "bodyText": "I sort of agree, I'm abusing exceptions are more general purpose errors here.\nWe want to be able to merely record that an error occurred and keep going, hence passing exception objects around rather than throwing them. This is replacing code, that simply called print_error(\"some string\").\nBut to be able to incorporate output for all stages of the pipeline into JSON, we need a more structured approach.", "url": "https://github.com/returntocorp/semgrep/pull/981#discussion_r439483047", "createdAt": "2020-06-12T15:18:29Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -173,3 +187,178 @@ def build_output(\n     else:\n         # https://github.com/python/mypy/issues/6366\n         raise RuntimeError(f\"Unhandled output format: {type(output_format).__name__}\")\n+\n+\n+class OutputSettings(NamedTuple):\n+    output_format: OutputFormat\n+    output_destination: Optional[str]\n+    quiet: bool\n+    error_on_findings: bool\n+\n+\n+@contextlib.contextmanager\n+def managed_output(output_settings: OutputSettings) -> Generator:  # type: ignore\n+    handler = OutputHandler(output_settings)\n+    try:\n+        yield handler\n+    except Exception as ex:\n+        handler.handle_unhandled_exception(ex)\n+    finally:\n+        exit_code = handler.close()\n+        sys.exit(exit_code)\n+\n+\n+class OutputHandler:\n+    \"\"\"\n+    Handle all output in a central location. Rather than calling `print_error` directly,\n+    you should call `handle_*` as appropriate.\n+\n+    In normal usage, it should be constructed via the contextmanager, `managed_output`. It ensures that everything\n+    is handled properly if exceptions are thrown.\n+\n+    If you need to stop execution immediately (think carefully if you really want this!), throw an exception.\n+    If this is normal behavior, the exception _must_ inherit from `SemgrepError`.\n+\n+    If you want execution to continue, _report_ the exception via the appropriate `handle_*` method.\n+    \"\"\"\n+\n+    def __init__(\n+        self,\n+        output_settings: OutputSettings,\n+        stderr: IO = sys.stderr,\n+        stdout: IO = sys.stdout,\n+    ):\n+        self.settings = output_settings\n+        self.stderr = stderr\n+        self.stdout = stdout\n+\n+        self.rule_matches: List[RuleMatch] = []\n+        self.debug_steps_by_rule: Dict[Rule, List[Dict[str, Any]]] = {}\n+        self.rules: FrozenSet[Rule] = frozenset()\n+        self.semgrep_core_errors: List[Dict[str, Any]] = []\n+        self.semgrep_rule_errors: List[SemgrepError] = []\n+        self.has_output = False\n+\n+        self.exit_code = 0\n+        self.final_error: Optional[Exception] = None\n+\n+    def handle_semgrep_core_errors(self, semgrep_errors: List[Dict[str, Any]]) -> None:\n+        \"\"\"\n+        Report errors coming directly from semgrep-core (raw JSON objects)\n+        \"\"\"\n+        self.semgrep_core_errors += semgrep_errors\n+        if self.settings.output_format == OutputFormat.TEXT:\n+            for error in semgrep_errors:\n+                print_error(pretty_error(error))\n+\n+    def handle_semgrep_rule_errors(self, error: SemgrepError) -> None:\n+        \"\"\"\n+        Report parse errors from semgrep rules. Either:\n+        - when the pattern fails to parse in semgrep-core\n+        - when the YAML or YAML structure is invalid\n+        \"\"\"\n+        self.semgrep_rule_errors.append(error)\n+        self._output_exception(error)\n+\n+    def handle_semgrep_core_output(\n+        self,\n+        rule_matches_by_rule: Dict[Rule, List[RuleMatch]],\n+        debug_steps_by_rule: Dict[Rule, List[Dict[str, Any]]],\n+    ) -> None:\n+        self.has_output = True\n+        self.rules = self.rules.union(rule_matches_by_rule.keys())\n+        self.rule_matches += [\n+            match\n+            for matches_of_one_rule in rule_matches_by_rule.values()\n+            for match in matches_of_one_rule\n+        ]\n+\n+        self.debug_steps_by_rule.update(debug_steps_by_rule)\n+\n+    def handle_unhandled_exception(self, ex: Exception) -> None:\n+        \"\"\"\n+        This is called by the context manager upon an unhandled exception. If you want to record a final\n+        error & set the exit code, but keep executing to perform cleanup tasks, call this method.\n+        \"\"\"\n+        if isinstance(ex, SemgrepError):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODQyNw=="}, "originalCommit": {"oid": "6eb620bb7b4706cdd9e362eda8d274ccaef021a8"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzc3NTczOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/output.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxMjowN1rOGjHsxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToyNDoyMlrOGjIHWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3OTQ5Mg==", "bodyText": "Instead of dealing with something like final_error we could just continue to catch exceptions in __main__ and output their contents there. If you still want to use something like _output_exception you could make a @staticmethod (it doesn't use self anyway) and use it in __main__.\nAgain, it feels kinda weird to have our output handler also manage all program exceptions as well. What if we want to catch and handle them elsewhere?", "url": "https://github.com/returntocorp/semgrep/pull/981#discussion_r439479492", "createdAt": "2020-06-12T15:12:07Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -173,3 +187,178 @@ def build_output(\n     else:\n         # https://github.com/python/mypy/issues/6366\n         raise RuntimeError(f\"Unhandled output format: {type(output_format).__name__}\")\n+\n+\n+class OutputSettings(NamedTuple):\n+    output_format: OutputFormat\n+    output_destination: Optional[str]\n+    quiet: bool\n+    error_on_findings: bool\n+\n+\n+@contextlib.contextmanager\n+def managed_output(output_settings: OutputSettings) -> Generator:  # type: ignore\n+    handler = OutputHandler(output_settings)\n+    try:\n+        yield handler\n+    except Exception as ex:\n+        handler.handle_unhandled_exception(ex)\n+    finally:\n+        exit_code = handler.close()\n+        sys.exit(exit_code)\n+\n+\n+class OutputHandler:\n+    \"\"\"\n+    Handle all output in a central location. Rather than calling `print_error` directly,\n+    you should call `handle_*` as appropriate.\n+\n+    In normal usage, it should be constructed via the contextmanager, `managed_output`. It ensures that everything\n+    is handled properly if exceptions are thrown.\n+\n+    If you need to stop execution immediately (think carefully if you really want this!), throw an exception.\n+    If this is normal behavior, the exception _must_ inherit from `SemgrepError`.\n+\n+    If you want execution to continue, _report_ the exception via the appropriate `handle_*` method.\n+    \"\"\"\n+\n+    def __init__(\n+        self,\n+        output_settings: OutputSettings,\n+        stderr: IO = sys.stderr,\n+        stdout: IO = sys.stdout,\n+    ):\n+        self.settings = output_settings\n+        self.stderr = stderr\n+        self.stdout = stdout\n+\n+        self.rule_matches: List[RuleMatch] = []\n+        self.debug_steps_by_rule: Dict[Rule, List[Dict[str, Any]]] = {}\n+        self.rules: FrozenSet[Rule] = frozenset()\n+        self.semgrep_core_errors: List[Dict[str, Any]] = []\n+        self.semgrep_rule_errors: List[SemgrepError] = []\n+        self.has_output = False\n+\n+        self.exit_code = 0\n+        self.final_error: Optional[Exception] = None\n+\n+    def handle_semgrep_core_errors(self, semgrep_errors: List[Dict[str, Any]]) -> None:\n+        \"\"\"\n+        Report errors coming directly from semgrep-core (raw JSON objects)\n+        \"\"\"\n+        self.semgrep_core_errors += semgrep_errors\n+        if self.settings.output_format == OutputFormat.TEXT:\n+            for error in semgrep_errors:\n+                print_error(pretty_error(error))\n+\n+    def handle_semgrep_rule_errors(self, error: SemgrepError) -> None:\n+        \"\"\"\n+        Report parse errors from semgrep rules. Either:\n+        - when the pattern fails to parse in semgrep-core\n+        - when the YAML or YAML structure is invalid\n+        \"\"\"\n+        self.semgrep_rule_errors.append(error)\n+        self._output_exception(error)\n+\n+    def handle_semgrep_core_output(\n+        self,\n+        rule_matches_by_rule: Dict[Rule, List[RuleMatch]],\n+        debug_steps_by_rule: Dict[Rule, List[Dict[str, Any]]],\n+    ) -> None:\n+        self.has_output = True\n+        self.rules = self.rules.union(rule_matches_by_rule.keys())\n+        self.rule_matches += [\n+            match\n+            for matches_of_one_rule in rule_matches_by_rule.values()\n+            for match in matches_of_one_rule\n+        ]\n+\n+        self.debug_steps_by_rule.update(debug_steps_by_rule)\n+\n+    def handle_unhandled_exception(self, ex: Exception) -> None:\n+        \"\"\"\n+        This is called by the context manager upon an unhandled exception. If you want to record a final\n+        error & set the exit code, but keep executing to perform cleanup tasks, call this method.\n+        \"\"\"\n+        if isinstance(ex, SemgrepError):\n+            self.exit_code = ex.code\n+        else:\n+            self.exit_code = FATAL_EXIT_CODE\n+        self.final_error = ex\n+\n+    def _output_exception(self, ex: Exception) -> None:\n+        if isinstance(ex, SemgrepError):\n+            print_error(str(ex))\n+        else:\n+            # If it isn't a known SemgrepError, bail hard.\n+            print_error(PLEASE_FILE_ISSUE_TEXT)\n+            raise ex\n+\n+    def close(self) -> int:\n+        \"\"\"\n+        Close the output handler.\n+\n+        This will write any output that hasn't been written so far. It returns\n+        the exit code of the program.\n+        \"\"\"\n+        # TODO: incorporate final_error into JSON output (https://github.com/returntocorp/semgrep/issues/746)\n+        if self.final_error:\n+            self._output_exception(self.final_error)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb620bb7b4706cdd9e362eda8d274ccaef021a8"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4NjI5Ng==", "bodyText": "if you want to capture an exception internally, handle it and move on, there is no reason you can't do that. The output manager handles exceptions to provide a unified way of reporting them the user in whatever way they've requested via assorted parameters, without having to have the internal code care about the output format.\nIn __main__ we don't actually know anything about the output mode, so we don't have the context we need to know how to handle the exception properly.", "url": "https://github.com/returntocorp/semgrep/pull/981#discussion_r439486296", "createdAt": "2020-06-12T15:24:22Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -173,3 +187,178 @@ def build_output(\n     else:\n         # https://github.com/python/mypy/issues/6366\n         raise RuntimeError(f\"Unhandled output format: {type(output_format).__name__}\")\n+\n+\n+class OutputSettings(NamedTuple):\n+    output_format: OutputFormat\n+    output_destination: Optional[str]\n+    quiet: bool\n+    error_on_findings: bool\n+\n+\n+@contextlib.contextmanager\n+def managed_output(output_settings: OutputSettings) -> Generator:  # type: ignore\n+    handler = OutputHandler(output_settings)\n+    try:\n+        yield handler\n+    except Exception as ex:\n+        handler.handle_unhandled_exception(ex)\n+    finally:\n+        exit_code = handler.close()\n+        sys.exit(exit_code)\n+\n+\n+class OutputHandler:\n+    \"\"\"\n+    Handle all output in a central location. Rather than calling `print_error` directly,\n+    you should call `handle_*` as appropriate.\n+\n+    In normal usage, it should be constructed via the contextmanager, `managed_output`. It ensures that everything\n+    is handled properly if exceptions are thrown.\n+\n+    If you need to stop execution immediately (think carefully if you really want this!), throw an exception.\n+    If this is normal behavior, the exception _must_ inherit from `SemgrepError`.\n+\n+    If you want execution to continue, _report_ the exception via the appropriate `handle_*` method.\n+    \"\"\"\n+\n+    def __init__(\n+        self,\n+        output_settings: OutputSettings,\n+        stderr: IO = sys.stderr,\n+        stdout: IO = sys.stdout,\n+    ):\n+        self.settings = output_settings\n+        self.stderr = stderr\n+        self.stdout = stdout\n+\n+        self.rule_matches: List[RuleMatch] = []\n+        self.debug_steps_by_rule: Dict[Rule, List[Dict[str, Any]]] = {}\n+        self.rules: FrozenSet[Rule] = frozenset()\n+        self.semgrep_core_errors: List[Dict[str, Any]] = []\n+        self.semgrep_rule_errors: List[SemgrepError] = []\n+        self.has_output = False\n+\n+        self.exit_code = 0\n+        self.final_error: Optional[Exception] = None\n+\n+    def handle_semgrep_core_errors(self, semgrep_errors: List[Dict[str, Any]]) -> None:\n+        \"\"\"\n+        Report errors coming directly from semgrep-core (raw JSON objects)\n+        \"\"\"\n+        self.semgrep_core_errors += semgrep_errors\n+        if self.settings.output_format == OutputFormat.TEXT:\n+            for error in semgrep_errors:\n+                print_error(pretty_error(error))\n+\n+    def handle_semgrep_rule_errors(self, error: SemgrepError) -> None:\n+        \"\"\"\n+        Report parse errors from semgrep rules. Either:\n+        - when the pattern fails to parse in semgrep-core\n+        - when the YAML or YAML structure is invalid\n+        \"\"\"\n+        self.semgrep_rule_errors.append(error)\n+        self._output_exception(error)\n+\n+    def handle_semgrep_core_output(\n+        self,\n+        rule_matches_by_rule: Dict[Rule, List[RuleMatch]],\n+        debug_steps_by_rule: Dict[Rule, List[Dict[str, Any]]],\n+    ) -> None:\n+        self.has_output = True\n+        self.rules = self.rules.union(rule_matches_by_rule.keys())\n+        self.rule_matches += [\n+            match\n+            for matches_of_one_rule in rule_matches_by_rule.values()\n+            for match in matches_of_one_rule\n+        ]\n+\n+        self.debug_steps_by_rule.update(debug_steps_by_rule)\n+\n+    def handle_unhandled_exception(self, ex: Exception) -> None:\n+        \"\"\"\n+        This is called by the context manager upon an unhandled exception. If you want to record a final\n+        error & set the exit code, but keep executing to perform cleanup tasks, call this method.\n+        \"\"\"\n+        if isinstance(ex, SemgrepError):\n+            self.exit_code = ex.code\n+        else:\n+            self.exit_code = FATAL_EXIT_CODE\n+        self.final_error = ex\n+\n+    def _output_exception(self, ex: Exception) -> None:\n+        if isinstance(ex, SemgrepError):\n+            print_error(str(ex))\n+        else:\n+            # If it isn't a known SemgrepError, bail hard.\n+            print_error(PLEASE_FILE_ISSUE_TEXT)\n+            raise ex\n+\n+    def close(self) -> int:\n+        \"\"\"\n+        Close the output handler.\n+\n+        This will write any output that hasn't been written so far. It returns\n+        the exit code of the program.\n+        \"\"\"\n+        # TODO: incorporate final_error into JSON output (https://github.com/returntocorp/semgrep/issues/746)\n+        if self.final_error:\n+            self._output_exception(self.final_error)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3OTQ5Mg=="}, "originalCommit": {"oid": "6eb620bb7b4706cdd9e362eda8d274ccaef021a8"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODE4NjgxOnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/output.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxODowMVrOGjLy6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyMTo1MlrOGjL5nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NjYwMg==", "bodyText": "I think we can avoid the indirection with final_error by doing something like:\n    try:\n        yield output_handler\n    except SemgrepError as ex:\n        output_handler.close()\n        print_error(str(ex))\n        raise\n    except Exception:\n        output_handler.close()\n        raise\n    else:\n        output_handler.close()\nA bit wonky with output_handler.close() in each block, but it's necessary for the different print ordering with SemgrepError.", "url": "https://github.com/returntocorp/semgrep/pull/981#discussion_r439546602", "createdAt": "2020-06-12T17:18:01Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -173,3 +185,167 @@ def build_output(\n     else:\n         # https://github.com/python/mypy/issues/6366\n         raise RuntimeError(f\"Unhandled output format: {type(output_format).__name__}\")\n+\n+\n+class OutputSettings(NamedTuple):\n+    output_format: OutputFormat\n+    output_destination: Optional[str]\n+    quiet: bool\n+    error_on_findings: bool\n+\n+\n+@contextlib.contextmanager\n+def managed_output(output_settings: OutputSettings) -> Generator:  # type: ignore\n+    \"\"\"\n+    Context manager to capture uncaught exceptions &\n+    \"\"\"\n+    output_handler = OutputHandler(output_settings)\n+    try:\n+        yield output_handler\n+    except Exception as ex:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c89bad9103521f5565ed6b989017bbc7338f65c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NzI5Ng==", "bodyText": "I want to eventually be able to get final_error into the JSON output so passing it in was intentional.", "url": "https://github.com/returntocorp/semgrep/pull/981#discussion_r439547296", "createdAt": "2020-06-12T17:19:36Z", "author": {"login": "rcoh"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -173,3 +185,167 @@ def build_output(\n     else:\n         # https://github.com/python/mypy/issues/6366\n         raise RuntimeError(f\"Unhandled output format: {type(output_format).__name__}\")\n+\n+\n+class OutputSettings(NamedTuple):\n+    output_format: OutputFormat\n+    output_destination: Optional[str]\n+    quiet: bool\n+    error_on_findings: bool\n+\n+\n+@contextlib.contextmanager\n+def managed_output(output_settings: OutputSettings) -> Generator:  # type: ignore\n+    \"\"\"\n+    Context manager to capture uncaught exceptions &\n+    \"\"\"\n+    output_handler = OutputHandler(output_settings)\n+    try:\n+        yield output_handler\n+    except Exception as ex:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NjYwMg=="}, "originalCommit": {"oid": "8c89bad9103521f5565ed6b989017bbc7338f65c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0ODMxOQ==", "bodyText": "Ahh, that makes sense \ud83d\udc4d", "url": "https://github.com/returntocorp/semgrep/pull/981#discussion_r439548319", "createdAt": "2020-06-12T17:21:52Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -173,3 +185,167 @@ def build_output(\n     else:\n         # https://github.com/python/mypy/issues/6366\n         raise RuntimeError(f\"Unhandled output format: {type(output_format).__name__}\")\n+\n+\n+class OutputSettings(NamedTuple):\n+    output_format: OutputFormat\n+    output_destination: Optional[str]\n+    quiet: bool\n+    error_on_findings: bool\n+\n+\n+@contextlib.contextmanager\n+def managed_output(output_settings: OutputSettings) -> Generator:  # type: ignore\n+    \"\"\"\n+    Context manager to capture uncaught exceptions &\n+    \"\"\"\n+    output_handler = OutputHandler(output_settings)\n+    try:\n+        yield output_handler\n+    except Exception as ex:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NjYwMg=="}, "originalCommit": {"oid": "8c89bad9103521f5565ed6b989017bbc7338f65c"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4568, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}