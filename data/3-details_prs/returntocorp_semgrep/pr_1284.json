{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NDU5MzYw", "number": 1284, "title": "Skeleton to use the Go tree-sitter parser", "bodyText": "This is part1 of adding support for the Go tree-sitter-based parser.\nThis diff just integrate the go tree-sitter library in the build system\nand create a boilerplate Parse_go_tree_sitter.ml to be filled later.\nTest plan:\nmake", "createdAt": "2020-07-15T12:48:52Z", "url": "https://github.com/returntocorp/semgrep/pull/1284", "merged": true, "mergeCommit": {"oid": "06753466feed78a072b362809737ffef7fa9ed5e"}, "closed": true, "closedAt": "2020-07-15T18:49:20Z", "author": {"login": "aryx"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1KEeAAH2gAyNDQ5NDU5MzYwOmE2Y2MzMGMwYmE1NjMxMWRlNDIxZTVhYzkxZWMzNTUxMzJkYTNjNWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1PQQYAFqTQ0OTIzOTA1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a6cc30c0ba56311de421e5ac91ec355132da3c5a", "author": {"user": {"login": "aryx", "name": "Yoann Padioleau"}}, "url": "https://github.com/returntocorp/semgrep/commit/a6cc30c0ba56311de421e5ac91ec355132da3c5a", "committedDate": "2020-07-15T12:48:00Z", "message": "Skeleton to use the Go tree-sitter parser\n\nThis is part1 of adding support for the Go tree-sitter-based parser.\nThis diff just integrate the go tree-sitter library in the build system\nand create a boilerplate Parse_go_tree_sitter.ml to be filled later.\n\nTest plan:\nmake"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "071048de5ceb5356d326ca94740a48f45a963b19", "author": {"user": {"login": "aryx", "name": "Yoann Padioleau"}}, "url": "https://github.com/returntocorp/semgrep/commit/071048de5ceb5356d326ca94740a48f45a963b19", "committedDate": "2020-07-15T12:57:45Z", "message": "* semgrep-core/parsing/Parse_go_tree_sitter.ml:\nremove the map_ prefix to every func (optional but I prefer the boilerplate\ncode that way)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df910e3b3a09767f57da4617fb44c4c5a730f3b7", "author": {"user": {"login": "aryx", "name": "Yoann Padioleau"}}, "url": "https://github.com/returntocorp/semgrep/commit/df910e3b3a09767f57da4617fb44c4c5a730f3b7", "committedDate": "2020-07-15T13:09:38Z", "message": "* semgrep-core/parsing/Parse_go_tree_sitter.ml: add prelude header and\nmain emtry point"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjM0Nzgz", "url": "https://github.com/returntocorp/semgrep/pull/1284#pullrequestreview-449234783", "createdAt": "2020-07-15T18:44:18Z", "commit": {"oid": "df910e3b3a09767f57da4617fb44c4c5a730f3b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjM3NDM3", "url": "https://github.com/returntocorp/semgrep/pull/1284#pullrequestreview-449237437", "createdAt": "2020-07-15T18:48:03Z", "commit": {"oid": "df910e3b3a09767f57da4617fb44c4c5a730f3b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODo0ODowM1rOGyLWlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODo0ODowM1rOGyLWlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI2Nzk4OA==", "bodyText": "should this be in a Java parsing PR instead?", "url": "https://github.com/returntocorp/semgrep/pull/1284#discussion_r455267988", "createdAt": "2020-07-15T18:48:03Z", "author": {"login": "nbrahms"}, "path": "semgrep-core/parsing/Parse_java_tree_sitter.ml", "diffHunk": "@@ -50,13 +51,11 @@ module G = AST_generic\n \n [@@@warning \"-32\"]\n \n-type env = unit\n+type env = H.env\n \n-let token (env : env) (_tok : Tree_sitter_run.Token.t) =\n-  failwith \"not implemented\"\n+let token (env : env) (_tok : Tree_sitter_run.Token.t) = H.token", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df910e3b3a09767f57da4617fb44c4c5a730f3b7"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjM4ODI2", "url": "https://github.com/returntocorp/semgrep/pull/1284#pullrequestreview-449238826", "createdAt": "2020-07-15T18:50:03Z", "commit": {"oid": "df910e3b3a09767f57da4617fb44c4c5a730f3b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODo1MDowM1rOGyLa0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODo1MDowM1rOGyLa0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI2OTA3NA==", "bodyText": "FWIW I'd love to see us, in the future, clearly separating boilerplate vs. contributed code.\nE.g.\nmatch Boilerplate.interpreted_string_literal env v with\n  (v1, v2, v3) -> todo env (v1, v2, v3)\nhere", "url": "https://github.com/returntocorp/semgrep/pull/1284#discussion_r455269074", "createdAt": "2020-07-15T18:50:03Z", "author": {"login": "nbrahms"}, "path": "semgrep-core/parsing/Parse_go_tree_sitter.ml", "diffHunk": "@@ -0,0 +1,1547 @@\n+(* Yoann Padioleau\n+ *\n+ * Copyright (C) 2020 r2c\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU General Public License (GPL)\n+ * version 2 as published by the Free Software Foundation.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * file license.txt for more details.\n+ *)\n+open Common\n+module AST = Ast_go\n+module CST = Tree_sitter_go.CST\n+module PI = Parse_info\n+(* open Ast_go *)\n+module G = AST_generic\n+module H = Parse_tree_sitter_helpers\n+\n+(*****************************************************************************)\n+(* Prelude *)\n+(*****************************************************************************)\n+(* Go parser using ocaml-tree-sitter-lang/go and converting\n+ * to pfff/lang_go/parsing/ast_go.ml\n+ *\n+ * The resulting AST can then be converted to the generic AST by using\n+ * pfff/lang_go/analyze/go_to_generic.ml\n+ *)\n+\n+(*****************************************************************************)\n+(* Helpers *)\n+(*****************************************************************************)\n+\n+(*****************************************************************************)\n+(* Boilerplate converter *)\n+(*****************************************************************************)\n+(* This was started by copying ocaml-tree-sitter-lang/go/.../Boilerplate.ml *)\n+\n+(**\n+   Boilerplate to be used as a template when mapping the go CST\n+   to another type of tree.\n+*)\n+\n+(* Disable warnings against unused variables *)\n+[@@@warning \"-26-27\"]\n+\n+(* Disable warning against unused 'rec' *)\n+[@@@warning \"-39\"]\n+\n+[@@@warning \"-32\"]\n+\n+type env = H.env\n+\n+let token (env : env) (_tok : Tree_sitter_run.Token.t) = H.token\n+\n+let blank (env : env) () = ()\n+\n+let todo (env : env) _ =\n+   failwith \"not implemented\"\n+\n+let int_literal (env : env) (tok : CST.int_literal) =\n+  token env tok (* int_literal *)\n+\n+let identifier (env : env) (tok : CST.identifier) =\n+  token env tok (* identifier *)\n+\n+let raw_string_literal (env : env) (tok : CST.raw_string_literal) =\n+  token env tok (* raw_string_literal *)\n+\n+let rune_literal (env : env) (tok : CST.rune_literal) =\n+  token env tok (* rune_literal *)\n+\n+let float_literal (env : env) (tok : CST.float_literal) =\n+  token env tok (* float_literal *)\n+\n+let imaginary_literal (env : env) (tok : CST.imaginary_literal) =\n+  token env tok (* imaginary_literal *)\n+\n+let escape_sequence (env : env) (tok : CST.escape_sequence) =\n+  token env tok (* escape_sequence *)\n+\n+let qualified_type (env : env) ((v1, v2, v3) : CST.qualified_type) =\n+  let v1 = token env v1 (* identifier *) in\n+  let v2 = token env v2 (* \".\" *) in\n+  let v3 = token env v3 (* identifier *) in\n+  todo env (v1, v2, v3)\n+\n+let package_clause (env : env) ((v1, v2) : CST.package_clause) =\n+  let v1 = token env v1 (* \"package\" *) in\n+  let v2 = token env v2 (* identifier *) in\n+  todo env (v1, v2)\n+\n+let empty_labeled_statement (env : env) ((v1, v2) : CST.empty_labeled_statement) =\n+  let v1 = token env v1 (* identifier *) in\n+  let v2 = token env v2 (* \":\" *) in\n+  todo env (v1, v2)\n+\n+let interpreted_string_literal (env : env) ((v1, v2, v3) : CST.interpreted_string_literal) =\n+  let v1 = token env v1 (* \"\\\"\" *) in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df910e3b3a09767f57da4617fb44c4c5a730f3b7"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjM5MDU1", "url": "https://github.com/returntocorp/semgrep/pull/1284#pullrequestreview-449239055", "createdAt": "2020-07-15T18:50:24Z", "commit": {"oid": "df910e3b3a09767f57da4617fb44c4c5a730f3b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1347, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}