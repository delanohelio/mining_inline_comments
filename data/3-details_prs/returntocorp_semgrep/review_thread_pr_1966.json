{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NzczNDk0", "number": 1966, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODowNToyN1rOE1x8WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODowNToyN1rOE1x8WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODI4MjQ4OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/spacegrep.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODowNToyN1rOHuP9AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODowNzoxN1rOHuQBKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1NzkyMQ==", "bodyText": "Is there a reason to use check_returncode then catch the exception instead of checking non-zero exit code in a conditional?", "url": "https://github.com/returntocorp/semgrep/pull/1966#discussion_r518257921", "createdAt": "2020-11-05T18:05:27Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/spacegrep.py", "diffHunk": "@@ -38,15 +39,32 @@ def run_spacegrep(patterns: List[Pattern], targets: List[Path]) -> dict:\n                 str(target),\n                 pattern_str,\n             ]\n-            p = sub_run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n-            raw_output = p.stdout\n-            raw_error = p.stderr\n+            try:\n+                p = sub_run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+                p.check_returncode()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60889970cfdb65cd987ed09ee76facd18dcb75a8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1ODk4NA==", "bodyText": "Primarily because I don't know what the return code will be (except for 0), so I'm not sure how to handle any non-zero return codes. My thought was to use this check_returncode shorthand, which raises a CalledProcessError, and then propagate the error upward with an except clause for now.", "url": "https://github.com/returntocorp/semgrep/pull/1966#discussion_r518258984", "createdAt": "2020-11-05T18:07:17Z", "author": {"login": "minusworld"}, "path": "semgrep/semgrep/spacegrep.py", "diffHunk": "@@ -38,15 +39,32 @@ def run_spacegrep(patterns: List[Pattern], targets: List[Path]) -> dict:\n                 str(target),\n                 pattern_str,\n             ]\n-            p = sub_run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n-            raw_output = p.stdout\n-            raw_error = p.stderr\n+            try:\n+                p = sub_run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+                p.check_returncode()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1NzkyMQ=="}, "originalCommit": {"oid": "60889970cfdb65cd987ed09ee76facd18dcb75a8"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4833, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}