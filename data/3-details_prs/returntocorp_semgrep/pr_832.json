{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMjk0ODQz", "number": 832, "title": "Fix range of matched statements", "bodyText": "", "createdAt": "2020-05-26T15:52:30Z", "url": "https://github.com/returntocorp/semgrep/pull/832", "merged": true, "mergeCommit": {"oid": "152458028abc3009e1e0623cbda5be4de8636077"}, "closed": true, "closedAt": "2020-05-27T09:54:29Z", "author": {"login": "aryx"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclFJ_VgH2gAyNDIzMjk0ODQzOmI3ZjI2N2M0YjE4M2Q0MGE5ZjNmNDUyZjhlZTlkZjBiNDFlNzU1MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclV6GkgH2gAyNDIzMjk0ODQzOmFjMTQ2NzU1MjEzODgwY2M3NWY1NmFjYzQxN2Q4ZjQ5MmE3ODU5MGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b7f267c4b183d40a9f3f452f8ee9df0b41e75503", "author": {"user": {"login": "aryx", "name": "Yoann Padioleau"}}, "url": "https://github.com/returntocorp/semgrep/commit/b7f267c4b183d40a9f3f452f8ee9df0b41e75503", "committedDate": "2020-05-26T14:01:43Z", "message": "* semgrep-core/bin/Main.ml: add SEMGREP_CORE_DEBUG env var to help\ndebug issues reported using semgrep wrapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94df0caba75d20761179f10ec6eac3410409823d", "author": {"user": {"login": "aryx", "name": "Yoann Padioleau"}}, "url": "https://github.com/returntocorp/semgrep/commit/94df0caba75d20761179f10ec6eac3410409823d", "committedDate": "2020-05-26T15:51:55Z", "message": "Returning the right range when matching sequence of statements\n\nThis closes issue #430\n\nTest plan:\ntest file included\n+ /home/pad/github/semgrep/semgrep-core/_build/default/bin/Main.exe -lang py -f tests/python/misc_range_statements.sgrep tests/python/misc_range_statements.py\ntests/python/misc_range_statements.py:3\n   foo()\n   foobar()\n   bar()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NDUzMzE4", "url": "https://github.com/returntocorp/semgrep/pull/832#pullrequestreview-418453318", "createdAt": "2020-05-26T16:06:56Z", "commit": {"oid": "94df0caba75d20761179f10ec6eac3410409823d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjowNjo1NlrOGalj-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjoxMDozNFrOGaltsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzMTU3OA==", "bodyText": "Can we make this an externally defined constant?\nFWIW, I'd feel a bit more comfortable if we made the key type for the environment association a variant, but I realize that may be an annoyingly large change to make here.", "url": "https://github.com/returntocorp/semgrep/pull/832#discussion_r430531578", "createdAt": "2020-05-26T16:06:56Z", "author": {"login": "nbrahms"}, "path": "semgrep-core/matching/Generic_vs_generic.ml", "diffHunk": "@@ -84,6 +84,18 @@ let m_string_xhp_text sa sb =\n   else fail ()\n (*e: function [[Generic_vs_generic.m_string_xhp_text]] *)\n \n+(* ugly, see comment in Semgrep_generic.match_sts_sts *)\n+let env_add_matched_stmt st tin =\n+  let key = \"!STMTS!\" in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94df0caba75d20761179f10ec6eac3410409823d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNDA2Ng==", "bodyText": "Can you comment as to why we're reversing the statement list?", "url": "https://github.com/returntocorp/semgrep/pull/832#discussion_r430534066", "createdAt": "2020-05-26T16:10:34Z", "author": {"login": "nbrahms"}, "path": "semgrep-core/matching/Semgrep_generic.ml", "diffHunk": "@@ -72,7 +72,35 @@ let match_st_st pattern e =\n (*s: function [[Semgrep_generic.match_sts_sts]] *)\n let match_sts_sts pattern e =\n   let env = Matching_generic.empty_environment () in\n-  GG.m_stmts_deep pattern e env\n+  (* When matching statements, we need not only to report whether\n+   * there is match, but also the actual statements that were matched.\n+   * Indeed, even if we want the implicit '...' at the end of\n+   * a sequence of statements pattern (AST_generic.Ss) to match all\n+   * the rest, we don't want to report the whole Ss as a match but just\n+   * the actually matched subset.\n+   * To do so would require to change the interface of a matcher\n+   * to not only return the matched environment but also the matched\n+   * statements. This would require in turn to provide new versions\n+   * for >>=, >||>, etc.\n+   * Instead, we can abuse the environment to also record the\n+   * matched statements! This is a bit ugly, but the alternative might\n+   * be worse.\n+   *\n+   * TODO? do we need to generate unique key? we don't want\n+   * nested calls to m_stmts_deep to polluate our metavar? We need\n+   * to pass the key to m_stmts_deep?\n+   *)\n+  let key = \"!STMTS!\" in\n+  let env = (key, Ss [])::env in\n+\n+  let res = GG.m_stmts_deep pattern e env in\n+\n+  res |> List.map (fun tin ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94df0caba75d20761179f10ec6eac3410409823d"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac146755213880cc75f56acc417d8f492a78590b", "author": {"user": {"login": "aryx", "name": "Yoann Padioleau"}}, "url": "https://github.com/returntocorp/semgrep/commit/ac146755213880cc75f56acc417d8f492a78590b", "committedDate": "2020-05-27T09:32:45Z", "message": "adding comments and move hardcoded constant in separate file."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1585, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}