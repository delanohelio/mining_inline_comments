{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzYxMTEw", "number": 860, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowNjozN1rOEAsR_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyNzozMVrOEAsk4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTYwOTU4OnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowNjozN1rOGcIZsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowNjozN1rOGcIZsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MDk2Mw==", "bodyText": "Fixing up a small typo from earlier.", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432150963", "createdAt": "2020-05-28T22:06:37Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -91,14 +94,15 @@ All required fields must be present at the top-level of a rule. I.e. immediately\n | [`pattern-either`](configuration-files.md#pattern-either)_\\*_ | `array` | Logical OR of multiple patterns. |\n | [`pattern-regex`](configuration-files.md#pattern-regex)_\\*_ | `string` | Search files for [Python `re`](https://docs.python.org/3/library/re.html) compatible expressions. |\n \n-* _\\* Only one of `pattern`, `patterns`, `pattern-either`, or `pattern-regex` is required._\n+_\\* Only one of `pattern`, `patterns`, `pattern-either`, or `pattern-regex` is required._", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTYxMDAzOnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowNjo0OVrOGcIaBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowNjo0OVrOGcIaBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTA0Ng==", "bodyText": "fix was missing here.", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432151046", "createdAt": "2020-05-28T22:06:49Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -91,14 +94,15 @@ All required fields must be present at the top-level of a rule. I.e. immediately\n | [`pattern-either`](configuration-files.md#pattern-either)_\\*_ | `array` | Logical OR of multiple patterns. |\n | [`pattern-regex`](configuration-files.md#pattern-regex)_\\*_ | `string` | Search files for [Python `re`](https://docs.python.org/3/library/re.html) compatible expressions. |\n \n-* _\\* Only one of `pattern`, `patterns`, `pattern-either`, or `pattern-regex` is required._\n+_\\* Only one of `pattern`, `patterns`, `pattern-either`, or `pattern-regex` is required._\n \n **Optional:**\n \n | Field | Type | Description |\n | :--- | :--- | :--- |\n-| [`metadata`](advanced.md#metadata) | `object` | Arbitrary user-provided data. Use to attach data to rules without affecting semgrep's behavior |\n-| [`paths`](configuration-files.md#paths) | `object` | Paths to run this check on, or to ignore this check in. See [examples](advanced.md#paths). |\n+| [`fix`](configuration-files.md#fix) | `object` | Simple search-and-replace autofix functionality. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTYxMzAwOnYy", "diffSide": "LEFT", "path": "docs/configuration-files.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowNzo1OVrOGcIb3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODowNzozNFrOGd91Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTUxNw==", "bodyText": "I lumped negations in with \"Note that the behavior is consistent across all child operators: pattern, pattern-not, pattern-regex, pattern-inside, pattern-not-inside.\" above. Does that make sense?", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432151517", "createdAt": "2020-05-28T22:07:59Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs\n+\n+Metavariable values must be identical across sub-patterns when performing\n+logical AND operations with the `patterns` operator.\n \n **Example**\n \n-Consider the configuration:\n+Consider the following rule:\n+\n ```yaml\n-  patterns:\n-    - pattern-inside: |\n-        def $F($X):\n-            ...\n-    - pattern: open($X)\n+rules:\n+  - id: function-args-to-open\n+    patterns:\n+      - pattern-inside: |\n+          def $F($X):\n+              ...\n+      - pattern: open($X)\n+    message: \"Function argument passed to open() builtin\"\n+    languages: [python]\n+    severity: ERROR\n ```\n \n-This configuration will match this Python code:\n+This rule will match the following code:\n+\n ```python\n def foo(path):\n     open(path)\n ```\n \n But will not match this code:\n+\n ```python\n def foo(path):\n     open(something_else)\n ```\n \n-### Metavariables in logical negations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODkwMA==", "bodyText": "I think the example is useful, so I'd probably leave it in its own section \ud83e\udd37", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432158900", "createdAt": "2020-05-28T22:28:04Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs\n+\n+Metavariable values must be identical across sub-patterns when performing\n+logical AND operations with the `patterns` operator.\n \n **Example**\n \n-Consider the configuration:\n+Consider the following rule:\n+\n ```yaml\n-  patterns:\n-    - pattern-inside: |\n-        def $F($X):\n-            ...\n-    - pattern: open($X)\n+rules:\n+  - id: function-args-to-open\n+    patterns:\n+      - pattern-inside: |\n+          def $F($X):\n+              ...\n+      - pattern: open($X)\n+    message: \"Function argument passed to open() builtin\"\n+    languages: [python]\n+    severity: ERROR\n ```\n \n-This configuration will match this Python code:\n+This rule will match the following code:\n+\n ```python\n def foo(path):\n     open(path)\n ```\n \n But will not match this code:\n+\n ```python\n def foo(path):\n     open(something_else)\n ```\n \n-### Metavariables in logical negations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTUxNw=="}, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NzgzOA==", "bodyText": "Does it make sense to include it as another example under the patterns metavariable matching section?", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432497838", "createdAt": "2020-05-29T13:53:56Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs\n+\n+Metavariable values must be identical across sub-patterns when performing\n+logical AND operations with the `patterns` operator.\n \n **Example**\n \n-Consider the configuration:\n+Consider the following rule:\n+\n ```yaml\n-  patterns:\n-    - pattern-inside: |\n-        def $F($X):\n-            ...\n-    - pattern: open($X)\n+rules:\n+  - id: function-args-to-open\n+    patterns:\n+      - pattern-inside: |\n+          def $F($X):\n+              ...\n+      - pattern: open($X)\n+    message: \"Function argument passed to open() builtin\"\n+    languages: [python]\n+    severity: ERROR\n ```\n \n-This configuration will match this Python code:\n+This rule will match the following code:\n+\n ```python\n def foo(path):\n     open(path)\n ```\n \n But will not match this code:\n+\n ```python\n def foo(path):\n     open(something_else)\n ```\n \n-### Metavariables in logical negations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTUxNw=="}, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA3NDg5OQ==", "bodyText": "sure", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r434074899", "createdAt": "2020-06-02T18:07:34Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs\n+\n+Metavariable values must be identical across sub-patterns when performing\n+logical AND operations with the `patterns` operator.\n \n **Example**\n \n-Consider the configuration:\n+Consider the following rule:\n+\n ```yaml\n-  patterns:\n-    - pattern-inside: |\n-        def $F($X):\n-            ...\n-    - pattern: open($X)\n+rules:\n+  - id: function-args-to-open\n+    patterns:\n+      - pattern-inside: |\n+          def $F($X):\n+              ...\n+      - pattern: open($X)\n+    message: \"Function argument passed to open() builtin\"\n+    languages: [python]\n+    severity: ERROR\n ```\n \n-This configuration will match this Python code:\n+This rule will match the following code:\n+\n ```python\n def foo(path):\n     open(path)\n ```\n \n But will not match this code:\n+\n ```python\n def foo(path):\n     open(something_else)\n ```\n \n-### Metavariables in logical negations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTUxNw=="}, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTYxNjU5OnYy", "diffSide": "LEFT", "path": "docs/pattern-features.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowOTozMlrOGcIeDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowOTozMlrOGcIeDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MjA3OA==", "bodyText": "I think this was originally a typo in location. This got lumped in between two \"Ellipsis Operator\" sub-headers.", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432152078", "createdAt": "2020-05-28T22:09:32Z", "author": {"login": "mschwager"}, "path": "docs/pattern-features.md", "diffHunk": "@@ -228,31 +228,6 @@ pattern: $X = 1 + 2 + ...\n foo = 1 + 2 + 3 + 4\n ```\n \n-### Deep Expression Operator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTY1NTE0OnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyNjowNFrOGcI15A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoxOTowNlrOGeeGRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODE4MA==", "bodyText": "The reason I used \"inclusion\" here is that it covers both patterns and pattern-inside.\nNot sure what the best \"boolean\" analogy is here.", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432158180", "createdAt": "2020-05-28T22:26:04Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MDk1NA==", "bodyText": "Maybe I'm misunderstanding how this works. My understanding is that metavariable matching occurs across patterns and pattern-either operators. It's operates differently in these cases, but the behavior is consistent across all child operators: pattern, pattern-not, pattern-regex, pattern-inside, pattern-not-inside.\nIs pattern-inside doing something special compared to pattern, pattern-not, etc?", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432490954", "createdAt": "2020-05-29T13:43:03Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODE4MA=="}, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyMDk1Ng==", "bodyText": "Hmm, pattern-inside is not a simple boolean AND when used inside patterns (IIRC, it is not commutative, for instance). This is why I've been distinguishing it from other child node of patterns. \ud83e\udd37", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r434020956", "createdAt": "2020-06-02T16:41:34Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODE4MA=="}, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NDU0Nw==", "bodyText": "In my head, this is a logical AND:\npatterns:\n  - pattern: ...\n  - pattern: ...\nand this is not:\npatterns:\n  - pattern-inside: ...\n  - pattern: ...", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r434164547", "createdAt": "2020-06-02T20:44:24Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODE4MA=="}, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2ODU2OA==", "bodyText": "Ahh, I see what you're saying. When using pattern-inside, A & B is not necessarily the same as B & A, so it's not truly a logical AND operation. Regardless, I still think the best way to word this to an average/entry-level engineer is as an AND operation for two reasons:\n\nI think user's will understand this better as an AND operation. For example, in Python these two statements are not equivalent in the same sense: False and operation_with_side_effect() vs. operation_with_side_effect() and False. Yet Python still describes this as an and.\nWe describe this as an AND operation elsewhere in semgrep, and that's fundamentally how we think about the patterns operator. pattern & pattern-inside vs. pattern-inside & pattern are not the same, but I believe that's how people intuitively think about it when using patterns.\n\nMaybe this is indicative of a broader docs need around the inside operators. I.e. we should state these non-equivalences upfront vs. doing it piecemeal in the metavariable matching section. Although I haven't heard any confusion from user's around this yet, so maybe it's not as big of an issue as we think it is. I think user's will intuitively understand that two code snippets cannot simultaneously be inside each other.\nMore broadly, I still think the best way to split these docs up is: under patterns the metavariables must match, and under pattern-either they don't have to match. After you understand that, then things should be consistent with other semgrep behavior.", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r434168568", "createdAt": "2020-06-02T20:52:29Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODE4MA=="}, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNTA2Ng==", "bodyText": "Also, I might just be wrong... at least in the simple case:\n\nhttps://semgrep.live/PekN?version=develop\nhttps://semgrep.live/JDdo?version=develop\n\n\ud83e\udd37 Given this I think my mental model matches up with yours a lot better.", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r434215066", "createdAt": "2020-06-02T22:43:52Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODE4MA=="}, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMzU5MQ==", "bodyText": "Oh interesting, I wouldn't've assumed that would work either. Well, the other upside of relentlessly documenting things is we get to learn how things work too :)", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r434603591", "createdAt": "2020-06-03T14:19:06Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODE4MA=="}, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTY1NTgzOnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyNjoyNFrOGcI2YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo0Mjo1OFrOGeDQhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODMwNA==", "bodyText": "This should mention pattern-inside, as all the real-world examples would use pattern-inside.", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432158304", "createdAt": "2020-05-28T22:26:24Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs\n+\n+Metavariable values must be identical across sub-patterns when performing\n+logical AND operations with the `patterns` operator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NzA2MQ==", "bodyText": "What's special about pattern-inside vs. say pattern-not-inside? My understanding is that all child operators have consistent behavior under the patterns operator.\nWhen trying to break this down I see it as: metavariables must match under the patterns operator, and don't need to match under the pattern-either operator. From there, all child operators essentially act as you would expect.\nSo instead of thinking about this in 3 special cases: 1.) (patterns, pattern-inside), 2.) (patterns, pattern-not-inside), 3.) (pattern-either, pattern), I see it as (patterns, <any-child-operator>) and (patterns-either, <any-child-operator>).\nAm I missing something important about the inside operators?", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432497061", "createdAt": "2020-05-29T13:52:44Z", "author": {"login": "mschwager"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs\n+\n+Metavariable values must be identical across sub-patterns when performing\n+logical AND operations with the `patterns` operator.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODMwNA=="}, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyMTY5Nw==", "bodyText": "See above re. behavior of -inside. I might be (very) confused here, but IIRC, pattern-inside does not conjugate like an AND.", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r434021697", "createdAt": "2020-06-02T16:42:49Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs\n+\n+Metavariable values must be identical across sub-patterns when performing\n+logical AND operations with the `patterns` operator.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODMwNA=="}, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2Mzg0NQ==", "bodyText": "TBH, I haven't thought through what happens with metavariables when pattern comes before pattern-inside inside a patterns block...", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r434163845", "createdAt": "2020-06-02T20:42:58Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is\n+consistent across all child operators: `pattern`, `pattern-not`,\n+`pattern-regex`, `pattern-inside`, `pattern-not-inside`.\n \n-Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.\n+### Metavariables in Logical ANDs\n+\n+Metavariable values must be identical across sub-patterns when performing\n+logical AND operations with the `patterns` operator.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODMwNA=="}, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTY1NzkzOnYy", "diffSide": "RIGHT", "path": "docs/configuration-files.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyNzozMVrOGcI33g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyNzozMVrOGcI33g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODY4Ng==", "bodyText": "The behavior is consistent with which top-level operator?", "url": "https://github.com/returntocorp/semgrep/pull/860#discussion_r432158686", "createdAt": "2020-05-28T22:27:31Z", "author": {"login": "nbrahms"}, "path": "docs/configuration-files.md", "diffHunk": "@@ -272,91 +276,90 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n-## Metavariable matching\n+## Metavariable Matching\n \n-### Metavariables in logical inclusions\n+Metavariable matching operates differently for logical AND (`patterns`)\n+and logical OR (`pattern-either`) parent operators. Note that the behavior is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ce51fc3574e1c31da405edebb98652b4e586d"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4638, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}