{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMDE5NDMw", "number": 1186, "title": "Add a new -maxout to limit memory consumption", "bodyText": "In the past semgrep-core provoked the reboot of the machine of a few users\nbecause it was using lots of memory (probably because of >||> and the\nexplosion of paths with '...').\nThis diff adds the possibility to limit the amount of memory\nsemgrep-core should use. It then returns an exception instead of crashing\nbefore exhausing all the swap of the user's machine.\nTest plan:\nuncomment the line in the diff about Gc.full_major and then:\ntime yy -verbose -lang js -maxout 10_000_000 -rules_file ../../data/basic.yml   l10000.js\n\n/home/pad/github/semgrep/semgrep-core/_build/default/bin/Main.exe -verbose -lang js -maxout 10_000_000 -rules_file ../../data/basic.yml l10000.js\nmaxout allocated memory: 72597504\n{\n\"matches\": [],\n\"errors\": [\n{\n\"check_id\": \"FatalError\",\n\"path\": \"l10000.js\",\n\"start\": { \"line\": 1, \"col\": 1 },\n\"end\": { \"line\": 1, \"col\": 1 },\n\"extra\": { \"message\": \"Fatal Error: Out of memory\", \"line\": \"/**\" }\n}\n],\n\"stats\": { \"okfiles\": 0, \"errorfiles\": 1 }\n}\n0.669 secs", "createdAt": "2020-07-01T22:10:48Z", "url": "https://github.com/returntocorp/semgrep/pull/1186", "merged": true, "mergeCommit": {"oid": "a08cc9ba4a42c751e062ebda4e6b7a89a1d699c7"}, "closed": true, "closedAt": "2020-07-27T07:08:35Z", "author": {"login": "aryx"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwxtw_gH2gAyNDQzMDE5NDMwOmI3YWE2ZTI1ZDI4ZjcyNmZhMzg2YzhhNDRjNjQyMjEwMDdkMWI1ZmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcw0jGdgFqTQ0MTI5MTExNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b7aa6e25d28f726fa386c8a44c64221007d1b5ff", "author": {"user": {"login": "aryx", "name": "Yoann Padioleau"}}, "url": "https://github.com/returntocorp/semgrep/commit/b7aa6e25d28f726fa386c8a44c64221007d1b5ff", "committedDate": "2020-07-01T22:09:47Z", "message": "Add a new -maxout to limit memory consumption\n\nIn the past semgrep-core provoked the reboot of the machine of a few users\nbecause it was using lots of memory (probably because of >||> and the\nexplosion of paths with '...').\nThis diff adds the possibility to limit the amount of memory\nsemgrep-core should use. It then returns an exception instead of crashing\nbefore exhausing all the swap of the user's machine.\n\nTest plan:\nuncomment the line in the diff about Gc.full_major and then:\n\ntime yy -verbose -lang js -maxout 10_000_000 -rules_file ../../data/basic.yml   l10000.js\n+ /home/pad/github/semgrep/semgrep-core/_build/default/bin/Main.exe -verbose -lang js -maxout 10_000_000 -rules_file ../../data/basic.yml l10000.js\nmaxout allocated memory: 72597504\n{\n  \"matches\": [],\n  \"errors\": [\n    {\n      \"check_id\": \"FatalError\",\n      \"path\": \"l10000.js\",\n      \"start\": { \"line\": 1, \"col\": 1 },\n      \"end\": { \"line\": 1, \"col\": 1 },\n      \"extra\": { \"message\": \"Fatal Error: Out of memory\", \"line\": \"/**\" }\n    }\n  ],\n  \"stats\": { \"okfiles\": 0, \"errorfiles\": 1 }\n}\n0.669 secs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjM4NTI1", "url": "https://github.com/returntocorp/semgrep/pull/1186#pullrequestreview-441238525", "createdAt": "2020-07-01T22:35:43Z", "commit": {"oid": "b7aa6e25d28f726fa386c8a44c64221007d1b5ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjM4NzE4", "url": "https://github.com/returntocorp/semgrep/pull/1186#pullrequestreview-441238718", "createdAt": "2020-07-01T22:36:14Z", "commit": {"oid": "b7aa6e25d28f726fa386c8a44c64221007d1b5ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjozNjoxNFrOGr3fEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjozNjoxNFrOGr3fEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1MTAyNA==", "bodyText": "Does this mean semgrep-core will use 4GB split among all the jobs or each one can use 4GB?", "url": "https://github.com/returntocorp/semgrep/pull/1186#discussion_r448651024", "createdAt": "2020-07-01T22:36:14Z", "author": {"login": "brendongo"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -347,6 +348,24 @@ let timeout_function lang = fun f ->\n   then f ()\n   else Common.timeout_function ~verbose:!verbose timeout f\n \n+(* from https://discuss.ocaml.org/t/todays-trick-memory-limits-with-gc-alarms/4431 *)\n+let run_with_memory_limit limit f =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7aa6e25d28f726fa386c8a44c64221007d1b5ff"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjkxMTE2", "url": "https://github.com/returntocorp/semgrep/pull/1186#pullrequestreview-441291116", "createdAt": "2020-07-02T01:26:21Z", "commit": {"oid": "b7aa6e25d28f726fa386c8a44c64221007d1b5ff"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToyNjoyMlrOGr6WXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToyNzozOFrOGr6Xmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5Nzk1MA==", "bodyText": "It would be nice to have a permanent test for this. You could add a --test or --debug flag that would enable the Gc.full_major () (or an environment variable).", "url": "https://github.com/returntocorp/semgrep/pull/1186#discussion_r448697950", "createdAt": "2020-07-02T01:26:22Z", "author": {"login": "mjambon"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -530,7 +549,16 @@ let iter_generic_ast_of_files_and_get_matches_and_exn_to_errors f files =\n          let ast = parse_generic lang file in\n \n          (* calling the hook *)\n-         f file lang ast, []\n+         run_with_memory_limit !maxout (fun () ->\n+           (f file lang ast, [])\n+           (* to test -maxout, you can uncomment the code below, to give\n+            * a chance to the Gc.create_alarm to run even if the program does\n+            * noi even need to run the Gc. However, this has a slow perf\n+            * penality on small programs, which is why it's better to keep\n+            * it in comment when you're not testing -maxout.\n+            *)\n+           (*|> (fun v -> Gc.full_major(); v) *)\n+         )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7aa6e25d28f726fa386c8a44c64221007d1b5ff"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5ODI2Nw==", "bodyText": "I didn't know about this way.", "url": "https://github.com/returntocorp/semgrep/pull/1186#discussion_r448698267", "createdAt": "2020-07-02T01:27:38Z", "author": {"login": "mjambon"}, "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -347,6 +348,24 @@ let timeout_function lang = fun f ->\n   then f ()\n   else Common.timeout_function ~verbose:!verbose timeout f\n \n+(* from https://discuss.ocaml.org/t/todays-trick-memory-limits-with-gc-alarms/4431 *)\n+let run_with_memory_limit limit f =\n+  let limit_memory () =\n+    let mem = (Gc.quick_stat ()).Gc.heap_words in\n+    if mem > limit / (Sys.word_size / 8)\n+    then begin\n+        if !verbose\n+        then pr2 (spf \"maxout allocated memory: %d\"\n+                      (mem * (Sys.word_size / 8)));\n+        raise Out_of_memory\n+      end\n+  in\n+  let alarm = Gc.create_alarm limit_memory in\n+  Fun.protect f ~finally:(fun () ->\n+      Gc.delete_alarm alarm;\n+      Gc.compact ()\n+  )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7aa6e25d28f726fa386c8a44c64221007d1b5ff"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1455, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}