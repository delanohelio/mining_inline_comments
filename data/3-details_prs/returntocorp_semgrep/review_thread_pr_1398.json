{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NjY2MDQ3", "number": 1398, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoyMjoyNVrOETabRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjo0OToxMFrOEVMc9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzkxMzY2OnYy", "diffSide": "RIGHT", "path": "semgrep-core/tests/generate_test_matrix.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoyMjoyNVrOG5IvbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDozMDo0M1rOG5JBQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2NTIyOA==", "bodyText": "I'm glad we're improving these! The naming was a bit confusing/inconsistent. Although, we should keep these names consistent with how we describe them in the docs: https://github.com/returntocorp/semgrep/blob/develop/docs/pattern-features.md. Looks like that covers \"Ellipsis Operator\", \"Equivalences\", \"Metavariables\", and \"Deep Expression Operator.\"", "url": "https://github.com/returntocorp/semgrep/pull/1398#discussion_r462565228", "createdAt": "2020-07-29T20:22:25Z", "author": {"login": "mschwager"}, "path": "semgrep-core/tests/generate_test_matrix.py", "diffHunk": "@@ -12,14 +12,17 @@\n \n \n FEATURES = [\"dots\", \"equivalence\", \"metavar\", \"misc\"]\n+\n+VERBOSE_REGEXP_SYNTAX = \"OCaml Syntax: \\\"=~/<regexp>/\\\"\"\n+\n VERBOSE_FEATURE_NAME = {\n-    \"dots\": \"Ellipsis\",\n-    \"equivalence\": \"Equivalences\",\n-    \"metavar\": \"Metavariables\",\n+    \"dots\": \"Wildcard Matches (...)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ee6b24a0fa57339f6fc980e756d9e91511adaec"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2OTc5Mg==", "bodyText": "@mschwager yes, I agree that consistency is important- thanks for bringing this up! I am happy to update the docs to match these, too, if you think that makes sense. What I was trying to do here was not so much re-name the operators (ellipsis are ellipsis after all) but instead re-frame the cheatsheet's headings as \"the problem the user is trying to solve\", rather than \"the operator they need\", which they may not know the name of yet", "url": "https://github.com/returntocorp/semgrep/pull/1398#discussion_r462569792", "createdAt": "2020-07-29T20:30:43Z", "author": {"login": "chmccreery"}, "path": "semgrep-core/tests/generate_test_matrix.py", "diffHunk": "@@ -12,14 +12,17 @@\n \n \n FEATURES = [\"dots\", \"equivalence\", \"metavar\", \"misc\"]\n+\n+VERBOSE_REGEXP_SYNTAX = \"OCaml Syntax: \\\"=~/<regexp>/\\\"\"\n+\n VERBOSE_FEATURE_NAME = {\n-    \"dots\": \"Ellipsis\",\n-    \"equivalence\": \"Equivalences\",\n-    \"metavar\": \"Metavariables\",\n+    \"dots\": \"Wildcard Matches (...)\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2NTIyOA=="}, "originalCommit": {"oid": "6ee6b24a0fa57339f6fc980e756d9e91511adaec"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjU5NTc1OnYy", "diffSide": "RIGHT", "path": "semgrep-core/tests/generate_test_matrix.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjo0OToxMFrOG70G6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjo1MDo0MFrOG70I8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3MjkwNg==", "bodyText": "is there a better way to do this?", "url": "https://github.com/returntocorp/semgrep/pull/1398#discussion_r465372906", "createdAt": "2020-08-04T22:49:10Z", "author": {"login": "ievans"}, "path": "semgrep-core/tests/generate_test_matrix.py", "diffHunk": "@@ -157,26 +159,28 @@ def generate_cheatsheet(root_dir: str):\n                 sgrep_path = find_path(root_dir, lang, category, subcategory, 'sgrep')\n                 code_path = find_path(root_dir, lang, category, subcategory, lang_dir_to_ext(lang))\n                 \n-                higlights = []\n+                highlights = []\n                 if os.path.exists(sgrep_path) and os.path.exists(code_path):\n                     ranges = run_semgrep_on_example(lang, sgrep_path, code_path)\n                     if ranges:\n                         j = json.loads(ranges)\n                         for entry in j['results']:\n-                            higlights.append({'start': entry['start'], 'end': entry['end']})\n+                            highlights.append({'start': entry['start'], 'end': entry['end']})\n \n                 entry = { \n                     'pattern': read_if_exists(sgrep_path),\n                     'pattern_path': sgrep_path,\n                     'code': read_if_exists(code_path),\n                     'code_path': code_path,\n-                     'highlights': higlights,\n+                    'highlights': highlights,\n                 }\n                \n \n                 #print((lang, entry))\n                 feature_name = VERBOSE_FEATURE_NAME.get(category, category)\n                 subcategory_name = VERBOSE_SUBCATEGORY_NAME.get(subcategory, subcategory)\n+                if (category == \"regexp\" and subcategory == \"string\"):\n+                    subcategory_name = VERBOSE_REGEXP_SYNTAX", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93c0749499690cc33ccf140e690ec18260dd185"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3MzQyNg==", "bodyText": "Only other way I could think of was to re-name the actual test files, because currently this subcategory mapping is based on those names, but that felt kind of hacky too, and I wasn't sure if other things depended on those names", "url": "https://github.com/returntocorp/semgrep/pull/1398#discussion_r465373426", "createdAt": "2020-08-04T22:50:40Z", "author": {"login": "chmccreery"}, "path": "semgrep-core/tests/generate_test_matrix.py", "diffHunk": "@@ -157,26 +159,28 @@ def generate_cheatsheet(root_dir: str):\n                 sgrep_path = find_path(root_dir, lang, category, subcategory, 'sgrep')\n                 code_path = find_path(root_dir, lang, category, subcategory, lang_dir_to_ext(lang))\n                 \n-                higlights = []\n+                highlights = []\n                 if os.path.exists(sgrep_path) and os.path.exists(code_path):\n                     ranges = run_semgrep_on_example(lang, sgrep_path, code_path)\n                     if ranges:\n                         j = json.loads(ranges)\n                         for entry in j['results']:\n-                            higlights.append({'start': entry['start'], 'end': entry['end']})\n+                            highlights.append({'start': entry['start'], 'end': entry['end']})\n \n                 entry = { \n                     'pattern': read_if_exists(sgrep_path),\n                     'pattern_path': sgrep_path,\n                     'code': read_if_exists(code_path),\n                     'code_path': code_path,\n-                     'highlights': higlights,\n+                    'highlights': highlights,\n                 }\n                \n \n                 #print((lang, entry))\n                 feature_name = VERBOSE_FEATURE_NAME.get(category, category)\n                 subcategory_name = VERBOSE_SUBCATEGORY_NAME.get(subcategory, subcategory)\n+                if (category == \"regexp\" and subcategory == \"string\"):\n+                    subcategory_name = VERBOSE_REGEXP_SYNTAX", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3MjkwNg=="}, "originalCommit": {"oid": "b93c0749499690cc33ccf140e690ec18260dd185"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4979, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}