{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNjQ4NzM3", "number": 1458, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMToyNzo0OFrOEVlXRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1NzowN1rOEW24VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDY3NzE5OnYy", "diffSide": "RIGHT", "path": "semgrep/tests/e2e/test_check.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMToyNzo0OFrOG8bQsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0NTozM1rOG8bvxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxNDM4Nw==", "bodyText": "Probably worth adding a test that has max-timeouts > 1 and checking that it doesn't stop running rules until it hits max-timeouts. Can probably just create another rule file that duplicates the rule in long.yaml a bunch of times.", "url": "https://github.com/returntocorp/semgrep/pull/1458#discussion_r466014387", "createdAt": "2020-08-05T21:27:48Z", "author": {"login": "brendongo"}, "path": "semgrep/tests/e2e/test_check.py", "diffHunk": "@@ -209,3 +209,29 @@ def test_max_memory(run_semgrep_in_tmp, snapshot):\n         ),\n         \"error.txt\",\n     )\n+\n+\n+def test_max_timeouts(run_semgrep_in_tmp, snapshot):\n+    # Check that semgrep-core timeouts are properly handled\n+\n+    snapshot.assert_match(\n+        run_semgrep_in_tmp(\n+            \"rules/long.yaml\",\n+            options=[\"--timeout\", \"1\", \"--max-timeouts\", \"1\"],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6f8f6420f15fc3ea98c68d30827f0eea15ecb04"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMjM0Mg==", "bodyText": "Will do!", "url": "https://github.com/returntocorp/semgrep/pull/1458#discussion_r466022342", "createdAt": "2020-08-05T21:45:33Z", "author": {"login": "sabrinabrogren"}, "path": "semgrep/tests/e2e/test_check.py", "diffHunk": "@@ -209,3 +209,29 @@ def test_max_memory(run_semgrep_in_tmp, snapshot):\n         ),\n         \"error.txt\",\n     )\n+\n+\n+def test_max_timeouts(run_semgrep_in_tmp, snapshot):\n+    # Check that semgrep-core timeouts are properly handled\n+\n+    snapshot.assert_match(\n+        run_semgrep_in_tmp(\n+            \"rules/long.yaml\",\n+            options=[\"--timeout\", \"1\", \"--max-timeouts\", \"1\"],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxNDM4Nw=="}, "originalCommit": {"oid": "f6f8f6420f15fc3ea98c68d30827f0eea15ecb04"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDAxODM4OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/core_runner.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1Mzo0NVrOG-U9Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1Mzo0NVrOG-U9Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwODE5NA==", "bodyText": "We can be slightly more defensive here by using >=, which could prevent an infinite loop in the future.", "url": "https://github.com/returntocorp/semgrep/pull/1458#discussion_r468008194", "createdAt": "2020-08-10T15:53:45Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -441,11 +457,19 @@ def _run_rules(\n             ):\n                 debug_tqdm_write(f\"Running rule {rule._raw.get('id')}\")\n                 rule_matches, debugging_steps, errors = self._run_rule(\n-                    rule, target_manager, semgrep_core_ast_cache_dir\n+                    rule, target_manager, semgrep_core_ast_cache_dir, max_timeout_files\n                 )\n                 findings_by_rule[rule] = rule_matches\n                 debugging_steps_by_rule[rule] = debugging_steps\n                 all_errors.extend(errors)\n+                for err in errors:\n+                    if isinstance(err, MatchTimeoutError):\n+                        file_timeouts[err.path] += 1\n+                        if (\n+                            self._timeout_threshold != 0\n+                            and file_timeouts[err.path] == self._timeout_threshold", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e087afeaeabec2c3305fc145ec1bbc7e53f7c2a5"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDAzMjg0OnYy", "diffSide": "RIGHT", "path": "semgrep/semgrep/output.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1NzowN1rOG-VFxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyMTo0M1rOG-edFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAxMDQzNg==", "bodyText": "Do we typically use with_color with our loggers? I see it's only currently used in semgrep/error.py and not in any logger calls. I'll defer to @brendongo here.", "url": "https://github.com/returntocorp/semgrep/pull/1458#discussion_r468010436", "createdAt": "2020-08-10T15:57:07Z", "author": {"login": "mschwager"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -243,9 +245,24 @@ def handle_semgrep_errors(self, errors: List[SemgrepError]) -> None:\n     def handle_semgrep_timeout_errors(self, errors: Dict[Path, List[str]]) -> None:\n         self.has_output = True\n         separator = \", \"\n+        print_threshold_hint = False\n         for path in errors.keys():\n+            num_errs = len(errors[path])\n+            errors[path].sort()\n+            error_msg = f\"Warning: {num_errs} timeout error(s) in {path} when running the following rules: [{separator.join(errors[path])}]\"\n+            if num_errs == self.settings.timeout_threshold:\n+                error_msg += f\"\\nSemgrep stopped running rules on {path} after {num_errs} timeout error(s). See `--timeout-threshold` for more info.\"\n+            print_threshold_hint = print_threshold_hint or (\n+                num_errs > 5 and not self.settings.timeout_threshold\n+            )\n+            logger.error(with_color(colorama.Fore.RED, error_msg))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e087afeaeabec2c3305fc145ec1bbc7e53f7c2a5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAyMjA0Ng==", "bodyText": "I used it here because the messages were red before, so when aggregating them and creating a new error message I added with-color to make them look like the other not aggregated error messages.", "url": "https://github.com/returntocorp/semgrep/pull/1458#discussion_r468022046", "createdAt": "2020-08-10T16:16:03Z", "author": {"login": "sabrinabrogren"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -243,9 +245,24 @@ def handle_semgrep_errors(self, errors: List[SemgrepError]) -> None:\n     def handle_semgrep_timeout_errors(self, errors: Dict[Path, List[str]]) -> None:\n         self.has_output = True\n         separator = \", \"\n+        print_threshold_hint = False\n         for path in errors.keys():\n+            num_errs = len(errors[path])\n+            errors[path].sort()\n+            error_msg = f\"Warning: {num_errs} timeout error(s) in {path} when running the following rules: [{separator.join(errors[path])}]\"\n+            if num_errs == self.settings.timeout_threshold:\n+                error_msg += f\"\\nSemgrep stopped running rules on {path} after {num_errs} timeout error(s). See `--timeout-threshold` for more info.\"\n+            print_threshold_hint = print_threshold_hint or (\n+                num_errs > 5 and not self.settings.timeout_threshold\n+            )\n+            logger.error(with_color(colorama.Fore.RED, error_msg))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAxMDQzNg=="}, "originalCommit": {"oid": "e087afeaeabec2c3305fc145ec1bbc7e53f7c2a5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2Mzg2MA==", "bodyText": "I think there are other errors that have color added as part of their str function that get written to log so this is fine.", "url": "https://github.com/returntocorp/semgrep/pull/1458#discussion_r468163860", "createdAt": "2020-08-10T20:21:43Z", "author": {"login": "brendongo"}, "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -243,9 +245,24 @@ def handle_semgrep_errors(self, errors: List[SemgrepError]) -> None:\n     def handle_semgrep_timeout_errors(self, errors: Dict[Path, List[str]]) -> None:\n         self.has_output = True\n         separator = \", \"\n+        print_threshold_hint = False\n         for path in errors.keys():\n+            num_errs = len(errors[path])\n+            errors[path].sort()\n+            error_msg = f\"Warning: {num_errs} timeout error(s) in {path} when running the following rules: [{separator.join(errors[path])}]\"\n+            if num_errs == self.settings.timeout_threshold:\n+                error_msg += f\"\\nSemgrep stopped running rules on {path} after {num_errs} timeout error(s). See `--timeout-threshold` for more info.\"\n+            print_threshold_hint = print_threshold_hint or (\n+                num_errs > 5 and not self.settings.timeout_threshold\n+            )\n+            logger.error(with_color(colorama.Fore.RED, error_msg))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAxMDQzNg=="}, "originalCommit": {"oid": "e087afeaeabec2c3305fc145ec1bbc7e53f7c2a5"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4898, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}