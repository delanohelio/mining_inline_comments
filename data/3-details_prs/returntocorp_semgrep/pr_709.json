{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NzIxNjAz", "number": 709, "title": "tests: Add performance tests", "bodyText": "Closes returntocorp/enterprise#54\nIntended Use\nI think I want to introduce performance testing in these two ways:\nTrack changes over time\nI'd make release tags run a job on GitHub Actions that runs the benchmark suite, commits a snapshot of the results (with --benchmark-save=vX.Y.Z) to a branch and opens a PR to develop. We can then chart the way performance is changing across releases based on these committed results.\nTesting perfomance impact while developing\nWhen trying to fix a performance bug, you can use this command to see the impact of your changes:\nmake benchmark ARGS=\"-k upsell_django_environ\"\n\nThis will benchmark the given semgrep-rules rule and show you how performance changed since the latest release (which would have its results committed.) This might not be easy as the GHA system architecture would be different from your local one.\nTesting perfomance impact of PRs\nIf we suspect that performance might be affected, comment on a PR with a command, like /benchmark. This'd trigger a GHA job that runs benchmarks. We wouldn't run this on every push as the suite already takes around 20 minutes to run.\nImplemented Test Scenarios\n\nsemgrep --version\nscan with a simple check on a simple file\nscan with a simple check on real world projects \u2014 sentry (py) & highcharts (js) as of May 6th, one project at a time\nrunning each semgrep-rules rule's unit tests as of May 6th, one rule at a time\n\nResults\nhttps://gist.github.com/underyx/6042073a3e464e7a60d542169e48f6a0", "createdAt": "2020-05-07T14:25:56Z", "url": "https://github.com/returntocorp/semgrep/pull/709", "merged": true, "mergeCommit": {"oid": "dd067802f3e30a54cecadebdaee837c1b74c9b1a"}, "closed": true, "closedAt": "2020-05-18T21:52:05Z", "author": {"login": "underyx"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABce-J9QAFqTQwNzUyOTAzNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcinFZbAFqTQxMzk2MzY3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTI5MDM0", "url": "https://github.com/returntocorp/semgrep/pull/709#pullrequestreview-407529034", "createdAt": "2020-05-07T14:28:47Z", "commit": {"oid": "a555eb9843da7e47fe48ebf335b3aa2f526aff5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoyODo0OFrOGSBURQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoyODo0OFrOGSBURQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0OTEyNQ==", "bodyText": "Oh, we need to support 3.6, make this namedtuple?", "url": "https://github.com/returntocorp/semgrep/pull/709#discussion_r421549125", "createdAt": "2020-05-07T14:28:48Z", "author": {"login": "underyx"}, "path": "semgrep/tests/performance/test_public_repos_perf.py", "diffHunk": "@@ -0,0 +1,47 @@\n+import subprocess\n+from dataclasses import dataclass\n+from pathlib import Path\n+\n+import pytest\n+\n+\n+@dataclass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a555eb9843da7e47fe48ebf335b3aa2f526aff5b"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMDYxNTg0", "url": "https://github.com/returntocorp/semgrep/pull/709#pullrequestreview-410061584", "createdAt": "2020-05-12T13:50:17Z", "commit": {"oid": "a555eb9843da7e47fe48ebf335b3aa2f526aff5b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzo1MDoxN1rOGUHlvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzo1NTozMFrOGUH2Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0OTA1Mg==", "bodyText": "Can we use --benchmark-autosave instead so we don't have to request user input? Having to repeatedly enter in snapshot names as you're benchmarking may get tedious, and won't work in CI environments.", "url": "https://github.com/returntocorp/semgrep/pull/709#discussion_r423749052", "createdAt": "2020-05-12T13:50:17Z", "author": {"login": "mschwager"}, "path": "semgrep/Makefile", "diffHunk": "@@ -12,3 +12,12 @@ install:\n \n .PHONY: qa-test\n qa-test: PYTHONPATH=. pytest tests/ --qa\n+\n+.PHONY: benchmark\n+benchmark:\n+\tPYTHONPATH=. pytest tests/ --benchmark-only $(ARGS)\n+\n+.PHONY: benchmark-snapshot\n+benchmark-snapshot:\n+\t@read -p \"Name your snapshot: \" snapshot_name;\\\n+\tPYTHONPATH=. pytest tests/ --benchmark-only --benchmark-save=$$snapshot_name $(ARGS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a555eb9843da7e47fe48ebf335b3aa2f526aff5b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1MTcyMQ==", "bodyText": "I'm still a little confused as to why we need subprocess here. Can't we call semgrep_main.main directly? That way we avoid the subprocess overhead when benchmarking which could throw results off. Am I missing something?", "url": "https://github.com/returntocorp/semgrep/pull/709#discussion_r423751721", "createdAt": "2020-05-12T13:53:37Z", "author": {"login": "mschwager"}, "path": "semgrep/tests/performance/test_public_repos_perf.py", "diffHunk": "@@ -0,0 +1,47 @@\n+import subprocess\n+from dataclasses import dataclass\n+from pathlib import Path\n+\n+import pytest\n+\n+\n+@dataclass\n+class RepoCase:\n+    url: str\n+    sha: str\n+    language: str\n+\n+    @property\n+    def test_id(self):\n+        return self.url.split(\"/\")[-1]\n+\n+\n+@pytest.mark.parametrize(\n+    \"repo_case\",\n+    [\n+        # SHAs of May 6, 2020\n+        RepoCase(\"https://github.com/getsentry/sentry\", \"f25ea5dc\", \"python\"),\n+        RepoCase(\"https://github.com/highcharts/highcharts\", \"04709689\", \"javascript\"),\n+    ],\n+    ids=lambda case: case.test_id,\n+)\n+def test_public_repos(run_semgrep_in_tmp, benchmark, repo_case):\n+    subprocess.check_output([\"git\", \"clone\", repo_case.url, \"repo\"])\n+    subprocess.check_output(\n+        [\"git\", \"--git-dir\", \"repo/.git\", \"checkout\", repo_case.sha]\n+    )\n+    benchmark(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a555eb9843da7e47fe48ebf335b3aa2f526aff5b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1MzIyNg==", "bodyText": "Does this break if the file paths change in semgrep-rules? I know Grayson was recently working on changing the paths. This may also be a source of fragility in the future if the paths continue to evolve.", "url": "https://github.com/returntocorp/semgrep/pull/709#discussion_r423753226", "createdAt": "2020-05-12T13:55:30Z", "author": {"login": "mschwager"}, "path": "semgrep/tests/performance/test_semgrep_rules_repo_perf.py", "diffHunk": "@@ -0,0 +1,198 @@\n+import subprocess\n+from pathlib import Path\n+\n+import pytest\n+\n+# output of `fd ya?ml$`\n+# not calculating dynamically to avoid slow test collection on each pytest run\n+RULE_PATHS: str = \"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a555eb9843da7e47fe48ebf335b3aa2f526aff5b"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a691cb177bc5dde657ad7328c71868b7153ef10", "author": {"user": {"login": "underyx", "name": "Bence Nagy"}}, "url": "https://github.com/returntocorp/semgrep/commit/5a691cb177bc5dde657ad7328c71868b7153ef10", "committedDate": "2020-05-16T10:05:09Z", "message": "tests: Add performance tests\n\nCloses https://github.com/returntocorp/enterprise/issues/54"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "633721c13330d6cde75b93cc1abd619e7b33483f", "author": {"user": {"login": "underyx", "name": "Bence Nagy"}}, "url": "https://github.com/returntocorp/semgrep/commit/633721c13330d6cde75b93cc1abd619e7b33483f", "committedDate": "2020-05-16T10:06:13Z", "message": "fixup! tests: Add performance tests\n\ndataclass to namedtuple"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a555eb9843da7e47fe48ebf335b3aa2f526aff5b", "author": {"user": {"login": "underyx", "name": "Bence Nagy"}}, "url": "https://github.com/returntocorp/semgrep/commit/a555eb9843da7e47fe48ebf335b3aa2f526aff5b", "committedDate": "2020-05-07T14:04:25Z", "message": "tests: Add performance tests\n\nCloses https://github.com/returntocorp/enterprise/issues/54"}, "afterCommit": {"oid": "633721c13330d6cde75b93cc1abd619e7b33483f", "author": {"user": {"login": "underyx", "name": "Bence Nagy"}}, "url": "https://github.com/returntocorp/semgrep/commit/633721c13330d6cde75b93cc1abd619e7b33483f", "committedDate": "2020-05-16T10:06:13Z", "message": "fixup! tests: Add performance tests\n\ndataclass to namedtuple"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eb99e16a7a4a4313e4ff35cdfc1fd79e211a4ee", "author": {"user": {"login": "underyx", "name": "Bence Nagy"}}, "url": "https://github.com/returntocorp/semgrep/commit/7eb99e16a7a4a4313e4ff35cdfc1fd79e211a4ee", "committedDate": "2020-05-16T10:29:29Z", "message": "fixup! fixup! tests: Add performance tests\n\nleftover dataclass import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f204e32d9269f01ca9de58fb359f15a9d76d7a2e", "author": {"user": {"login": "underyx", "name": "Bence Nagy"}}, "url": "https://github.com/returntocorp/semgrep/commit/f204e32d9269f01ca9de58fb359f15a9d76d7a2e", "committedDate": "2020-05-16T10:29:48Z", "message": "Update test_semgrep_rules_repo_perf paths"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "449012f570c5c3081d1aa36d0c7cfa8c3de84d42", "author": {"user": {"login": "underyx", "name": "Bence Nagy"}}, "url": "https://github.com/returntocorp/semgrep/commit/449012f570c5c3081d1aa36d0c7cfa8c3de84d42", "committedDate": "2020-05-16T10:43:12Z", "message": "Makefile: Autogenerate benchmark snapshot names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzOTYzNjcw", "url": "https://github.com/returntocorp/semgrep/pull/709#pullrequestreview-413963670", "createdAt": "2020-05-18T21:51:42Z", "commit": {"oid": "449012f570c5c3081d1aa36d0c7cfa8c3de84d42"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 959, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}