{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0OTY4OTg2", "number": 150, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo0NjozMlrODfnpeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo0ODozNVrODfnsdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDgyMDQyOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo0NjozMlrOFpbWwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo0NjozMlrOFpbWwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4NDEyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               <td>Javascript</td>\n          \n          \n            \n               <td>JavaScript</td>", "url": "https://github.com/returntocorp/semgrep/pull/150#discussion_r378984129", "createdAt": "2020-02-13T16:46:32Z", "author": {"login": "pabloest"}, "path": "README.md", "diffHunk": "@@ -2,41 +2,44 @@\n \n [![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-`sgrep`, for syntactical (and occasionnally semantic) grep, is a\n-tool to help find bugs by specifying code patterns using a familiar\n-syntax. The idea is to mix the convenience of grep with the\n-correctness and precision of a compiler frontend.\n-\n-Its main features are:\n-\n-1. **Use concrete code syntax**: easy to learn\n-2. **Metavariables ($X)**: abstract away code\n-3. **'...' operator**: abstract away sequences\n-4. **Knows about code equivalences**: one pattern can match many equivalent variations on the code\n-5. **Less is more**: abstract away additional details\n-\n-`sgrep` supports Python, JavaScript,  Golang, Java, and C, with more languages on the way!\n+`sgrep`, for syntactical (and occasionnally semantic) grep, is a tool to help find bugs by specifying code patterns using a familiar\n+syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+\n+As an example, the pattern `$X == $X` can be used to find useless equality checks. The pattern `subprocess.open(...)` will fire on cases even where imported modules are renamed, like `import subprocess as s; s.open(['foo'])`.\n+\n+## Supported Languages\n+\n+<table>\n+  <tr>\n+   <td>Javascript</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4cbf789d9585e23116879daaa70e56d1181080"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDgyODA3OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo0ODozNVrOFpbbhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo0ODozNVrOFpbbhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4NTM0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Want to learn more about sgrep? Check out thes [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n          \n          \n            \n            Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)", "url": "https://github.com/returntocorp/semgrep/pull/150#discussion_r378985348", "createdAt": "2020-02-13T16:48:35Z", "author": {"login": "pabloest"}, "path": "README.md", "diffHunk": "@@ -2,41 +2,44 @@\n \n [![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-`sgrep`, for syntactical (and occasionnally semantic) grep, is a\n-tool to help find bugs by specifying code patterns using a familiar\n-syntax. The idea is to mix the convenience of grep with the\n-correctness and precision of a compiler frontend.\n-\n-Its main features are:\n-\n-1. **Use concrete code syntax**: easy to learn\n-2. **Metavariables ($X)**: abstract away code\n-3. **'...' operator**: abstract away sequences\n-4. **Knows about code equivalences**: one pattern can match many equivalent variations on the code\n-5. **Less is more**: abstract away additional details\n-\n-`sgrep` supports Python, JavaScript,  Golang, Java, and C, with more languages on the way!\n+`sgrep`, for syntactical (and occasionnally semantic) grep, is a tool to help find bugs by specifying code patterns using a familiar\n+syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+\n+As an example, the pattern `$X == $X` can be used to find useless equality checks. The pattern `subprocess.open(...)` will fire on cases even where imported modules are renamed, like `import subprocess as s; s.open(['foo'])`.\n+\n+## Supported Languages\n+\n+<table>\n+  <tr>\n+   <td>Javascript</td>\n+   <td>Python</td>\n+   <td>Go</td>\n+   <td>Java</td>\n+   <td>C</td>\n+   <td>Ruby</td>\n+   <td>Scala</td>\n+</tr>\n+  <tr>\n+   <td>\u2705</td>\n+      <td>\u2705</td>\n+   <td>\u2705</td>\n+   <td>\u2705</td>\n+   <td>\u2705</td>\n+   <td>coming</td>\n+   <td>coming</td>\n+ </tr>\n+ </table>\n \n ## Meetups\n \n-Want to learn more about sgrep? Come to the next [meetup in San Francisco on Monday, February 10](https://www.eventbrite.com/e/detect-complex-code-patterns-using-semantic-grep-tickets-91167980885).\n-\n-### Previous meetups\n-\n-- r2c December 2019 meetup [slides](https://r2c.dev/sgrep-public.pdf)\n+Want to learn more about sgrep? Check out thes [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4cbf789d9585e23116879daaa70e56d1181080"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4830, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}