{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NzgyMzgy", "number": 8278, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo0NjoyMFrODvQlAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozNjowM1rODwXjZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODgxMjgyOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo0NjoyMFrOGBlMyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMToyNToxOFrOGBqfmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMTI0Mg==", "bodyText": "I'm wondering if we can't just create the signed JWT at build time? But I guess that would not work for dynamic configurations?", "url": "https://github.com/quarkusio/quarkus/pull/8278#discussion_r404311242", "createdAt": "2020-04-06T18:46:20Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -194,9 +199,11 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n \n         // Client secret has to be posted as a form parameter if OIDC requires the client_secret_post authentication\n         Credentials creds = configContext.oidcConfig.getCredentials();\n-        if (creds.clientSecret.value.isPresent() && creds.clientSecret.method.isPresent()\n-                && Secret.Method.POST == creds.clientSecret.method.get()) {\n+        if (creds.clientSecret.value.isPresent() && Secret.Method.POST == creds.clientSecret.method.orElse(null)) {\n             params.put(\"client_secret\", creds.clientSecret.value.get());\n+        } else if (creds.jwt.secret.isPresent()) {\n+            params.put(\"client_assertion_type\", \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\");\n+            params.put(\"client_assertion\", signJwtWithClientSecret(configContext.oidcConfig));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3369f8f29ed7e1faefde67d25d17f2c9caf68fd7"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5Nzk3Nw==", "bodyText": "@pedroigor Good idea, I can calculate it in OidcRecorder and save it in TenantConfigContext, if the secret is updated in the dev mode then it will be recalculated", "url": "https://github.com/quarkusio/quarkus/pull/8278#discussion_r404397977", "createdAt": "2020-04-06T21:25:18Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -194,9 +199,11 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n \n         // Client secret has to be posted as a form parameter if OIDC requires the client_secret_post authentication\n         Credentials creds = configContext.oidcConfig.getCredentials();\n-        if (creds.clientSecret.value.isPresent() && creds.clientSecret.method.isPresent()\n-                && Secret.Method.POST == creds.clientSecret.method.get()) {\n+        if (creds.clientSecret.value.isPresent() && Secret.Method.POST == creds.clientSecret.method.orElse(null)) {\n             params.put(\"client_secret\", creds.clientSecret.value.get());\n+        } else if (creds.jwt.secret.isPresent()) {\n+            params.put(\"client_assertion_type\", \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\");\n+            params.put(\"client_assertion\", signJwtWithClientSecret(configContext.oidcConfig));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMTI0Mg=="}, "originalCommit": {"oid": "3369f8f29ed7e1faefde67d25d17f2c9caf68fd7"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODgyMTk0OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo0ODo0M1rOGBlSYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMToyMjo1MVrOGBqadw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMjY3Mw==", "bodyText": "Maybe it should be createdTenantContextFromPublicKey instead ?", "url": "https://github.com/quarkusio/quarkus/pull/8278#discussion_r404312673", "createdAt": "2020-04-06T18:48:43Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -195,6 +190,20 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n         return new TenantConfigContext(auth, oidcConfig);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n+    private TenantConfigContext createdTenantContextFromPrivateKey(OAuth2ClientOptions options, OidcTenantConfig oidcConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3369f8f29ed7e1faefde67d25d17f2c9caf68fd7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NjY2Mw==", "bodyText": "@pedroigor ouch :-), will fix", "url": "https://github.com/quarkusio/quarkus/pull/8278#discussion_r404396663", "createdAt": "2020-04-06T21:22:51Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -195,6 +190,20 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n         return new TenantConfigContext(auth, oidcConfig);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n+    private TenantConfigContext createdTenantContextFromPrivateKey(OAuth2ClientOptions options, OidcTenantConfig oidcConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMjY3Mw=="}, "originalCommit": {"oid": "3369f8f29ed7e1faefde67d25d17f2c9caf68fd7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk0MDkzOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1Mzo1MVrOGCNAhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1Mzo1MVrOGCNAhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MzQ2Mg==", "bodyText": "oops, that is too much :-)", "url": "https://github.com/quarkusio/quarkus/pull/8278#discussion_r404963462", "createdAt": "2020-04-07T16:53:51Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -222,6 +229,25 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n         return cf;\n     }\n \n+    private String signJwtWithClientSecret(OidcTenantConfig cfg) {\n+        final byte[] keyBytes = cfg.credentials.jwt.secret.get().getBytes(StandardCharsets.UTF_8);\n+        SecretKey key = new SecretKeySpec(keyBytes, 0, keyBytes.length, \"HMACSHA256\");\n+\n+        // 'jti' claim is created by default.\n+        // 'exp' may be configured if it will be necessary.\n+        final long iat = (System.currentTimeMillis() / 1000);\n+        // 10 seconds\n+        final long exp = iat + 10 * 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98ae3dcccaf33401dbdd1ce1d7f82a032012d8a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDQ0MTM1OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozNjowM1rOGDU9Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoyMToxMVrOGDWUKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MjI1NA==", "bodyText": "This should really be at debug, in general we try not to pollute the log on startup, especially not messages that just inform the user of what they have done.", "url": "https://github.com/quarkusio/quarkus/pull/8278#discussion_r406142254", "createdAt": "2020-04-09T11:36:03Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -195,6 +189,20 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n         return new TenantConfigContext(auth, oidcConfig);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n+    private TenantConfigContext createdTenantContextFromPublicKey(OAuth2ClientOptions options, OidcTenantConfig oidcConfig) {\n+        if (oidcConfig.applicationType == ApplicationType.WEB_APP) {\n+            throw new ConfigurationException(\"'public-key' property can only be used with the 'service' applications\");\n+        }\n+        LOG.info(\"'public-key' property for the local token verification is set,\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30c0b60fa1c7280da6deae8483ca0d902a2cff5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2NDUyMA==", "bodyText": "@stuartwdouglas Sure, I'm now trying to always set debug but sometimes info gets in :-)", "url": "https://github.com/quarkusio/quarkus/pull/8278#discussion_r406164520", "createdAt": "2020-04-09T12:21:11Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -195,6 +189,20 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n         return new TenantConfigContext(auth, oidcConfig);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n+    private TenantConfigContext createdTenantContextFromPublicKey(OAuth2ClientOptions options, OidcTenantConfig oidcConfig) {\n+        if (oidcConfig.applicationType == ApplicationType.WEB_APP) {\n+            throw new ConfigurationException(\"'public-key' property can only be used with the 'service' applications\");\n+        }\n+        LOG.info(\"'public-key' property for the local token verification is set,\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MjI1NA=="}, "originalCommit": {"oid": "c30c0b60fa1c7280da6deae8483ca0d902a2cff5"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3701, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}