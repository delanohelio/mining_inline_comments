{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MTk2ODUw", "number": 8652, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozMjo1OVrODznFtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzoxMzoyMlrOD0PLEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDQ0NDA1OnYy", "diffSide": "RIGHT", "path": "extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozMjo1OVrOGIJRxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODo1OTowOVrOGI6wxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5Mzc5OA==", "bodyText": "I'm a bit worried that this will generate queries with paging all the time?\nEspecially in the context of https://github.com/quarkusio/quarkus/pull/8162/files coming.\nCan we make sure this is not the case?", "url": "https://github.com/quarkusio/quarkus/pull/8652#discussion_r411193798", "createdAt": "2020-04-20T08:32:59Z", "author": {"login": "gsmet"}, "path": "extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java", "diffHunk": "@@ -35,6 +35,12 @@ private TypesConverter() {\n     }\n \n     public static io.quarkus.panache.common.Page toPanachePage(org.springframework.data.domain.Pageable pageable) {\n-        return new io.quarkus.panache.common.Page(pageable.getPageNumber(), pageable.getPageSize());\n+        int pageNumber = 0;\n+        int pageSize = Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "914aa15b2051807c68267e6a75fd519f7fbbbdfa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5OTMwMw==", "bodyText": "Admitedly this isn't the perfect solution (ideally toPanachePage wouldn't be called at all when Pageable is unpaged).\nI guess with #8162 coming (I hadn't seen that one), we should be take care of it now. @aureamunoz would you like to do that or do you want me to?", "url": "https://github.com/quarkusio/quarkus/pull/8652#discussion_r411199303", "createdAt": "2020-04-20T08:41:20Z", "author": {"login": "geoand"}, "path": "extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java", "diffHunk": "@@ -35,6 +35,12 @@ private TypesConverter() {\n     }\n \n     public static io.quarkus.panache.common.Page toPanachePage(org.springframework.data.domain.Pageable pageable) {\n-        return new io.quarkus.panache.common.Page(pageable.getPageNumber(), pageable.getPageSize());\n+        int pageNumber = 0;\n+        int pageSize = Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5Mzc5OA=="}, "originalCommit": {"oid": "914aa15b2051807c68267e6a75fd519f7fbbbdfa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMzE1Nw==", "bodyText": "Hi, yes, I will take a look.", "url": "https://github.com/quarkusio/quarkus/pull/8652#discussion_r411203157", "createdAt": "2020-04-20T08:47:19Z", "author": {"login": "aureamunoz"}, "path": "extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java", "diffHunk": "@@ -35,6 +35,12 @@ private TypesConverter() {\n     }\n \n     public static io.quarkus.panache.common.Page toPanachePage(org.springframework.data.domain.Pageable pageable) {\n-        return new io.quarkus.panache.common.Page(pageable.getPageNumber(), pageable.getPageSize());\n+        int pageNumber = 0;\n+        int pageSize = Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5Mzc5OA=="}, "originalCommit": {"oid": "914aa15b2051807c68267e6a75fd519f7fbbbdfa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwNDU1MA==", "bodyText": "I just pushed another approach after look at the other PR (https://github.com/quarkusio/quarkus/pull/8162/files ). WDYT? @geoand @gsmet", "url": "https://github.com/quarkusio/quarkus/pull/8652#discussion_r412004550", "createdAt": "2020-04-21T08:59:09Z", "author": {"login": "aureamunoz"}, "path": "extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java", "diffHunk": "@@ -35,6 +35,12 @@ private TypesConverter() {\n     }\n \n     public static io.quarkus.panache.common.Page toPanachePage(org.springframework.data.domain.Pageable pageable) {\n-        return new io.quarkus.panache.common.Page(pageable.getPageNumber(), pageable.getPageSize());\n+        int pageNumber = 0;\n+        int pageSize = Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5Mzc5OA=="}, "originalCommit": {"oid": "914aa15b2051807c68267e6a75fd519f7fbbbdfa"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTkyMDczOnYy", "diffSide": "RIGHT", "path": "extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTowMTozOFrOGI633Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzoxNDo1MVrOGJFFCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwNjM2NQ==", "bodyText": "How come this works? How is null handled?", "url": "https://github.com/quarkusio/quarkus/pull/8652#discussion_r412006365", "createdAt": "2020-04-21T09:01:38Z", "author": {"login": "geoand"}, "path": "extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java", "diffHunk": "@@ -35,6 +35,11 @@ private TypesConverter() {\n     }\n \n     public static io.quarkus.panache.common.Page toPanachePage(org.springframework.data.domain.Pageable pageable) {\n-        return new io.quarkus.panache.common.Page(pageable.getPageNumber(), pageable.getPageSize());\n+        if (pageable.isPaged()) {\n+            int pageNumber = pageable.getPageNumber();\n+            int pageSize = pageable.getPageSize();\n+            return new io.quarkus.panache.common.Page(pageNumber, pageSize);\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426f7026fb3a4a0fdeaa76ecfc4ae0345bb768b0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3MzU3OQ==", "bodyText": "I looked into it, and null works because https://github.com/quarkusio/quarkus/blob/master/extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/PanacheQueryImpl.java#L176 properly handles null. So let's just add a comment.\nWe call list under the covers because of https://github.com/quarkusio/quarkus/blob/master/extensions/spring-data-jpa/deployment/src/main/java/io/quarkus/spring/data/deployment/generate/AbstractMethodsAdder.java#L172", "url": "https://github.com/quarkusio/quarkus/pull/8652#discussion_r412173579", "createdAt": "2020-04-21T13:14:51Z", "author": {"login": "geoand"}, "path": "extensions/spring-data-jpa/runtime/src/main/java/io/quarkus/spring/data/runtime/TypesConverter.java", "diffHunk": "@@ -35,6 +35,11 @@ private TypesConverter() {\n     }\n \n     public static io.quarkus.panache.common.Page toPanachePage(org.springframework.data.domain.Pageable pageable) {\n-        return new io.quarkus.panache.common.Page(pageable.getPageNumber(), pageable.getPageSize());\n+        if (pageable.isPaged()) {\n+            int pageNumber = pageable.getPageNumber();\n+            int pageSize = pageable.getPageSize();\n+            return new io.quarkus.panache.common.Page(pageNumber, pageSize);\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwNjM2NQ=="}, "originalCommit": {"oid": "426f7026fb3a4a0fdeaa76ecfc4ae0345bb768b0"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTAxMTM3OnYy", "diffSide": "RIGHT", "path": "integration-tests/spring-data-jpa/src/main/java/io/quarkus/it/spring/data/jpa/SongResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzoxMzoyMlrOGJFA2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzoxMzoyMlrOGJFA2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3MjUwNg==", "bodyText": "I think we need another method that return the make sure that the result  of songRepository.findAll(wholePage); is what we expect it to (that the page doesn't have a previous or next page).\nSomething like: https://github.com/quarkusio/quarkus/blob/master/integration-tests/spring-data-jpa/src/main/java/io/quarkus/it/spring/data/jpa/PersonResource.java#L135", "url": "https://github.com/quarkusio/quarkus/pull/8652#discussion_r412172506", "createdAt": "2020-04-21T13:13:22Z", "author": {"login": "geoand"}, "path": "integration-tests/spring-data-jpa/src/main/java/io/quarkus/it/spring/data/jpa/SongResource.java", "diffHunk": "@@ -22,6 +25,16 @@ public SongResource(SongRepository songRepository) {\n     @Path(\"/all\")\n     public List<Song> all() {\n         Pageable wholePage = Pageable.unpaged();\n-        return songRepository.findAll();\n+        Page<Song> all = songRepository.findAll(wholePage);\n+        return all.getContent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426f7026fb3a4a0fdeaa76ecfc4ae0345bb768b0"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3552, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}