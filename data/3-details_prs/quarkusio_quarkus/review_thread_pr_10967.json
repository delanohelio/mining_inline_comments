{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NjU1Nzgy", "number": 10967, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToxOToxM1rOESTjXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjo0MzozN1rOETHbmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjMwMTczOnYy", "diffSide": "RIGHT", "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/RegisterShutdownHookPluginTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToxOToxNFrOG3abMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTo0MDoxMVrOG3bKGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1NzgxMQ==", "bodyText": "That's not a good plugin to test. We do shutdown the quartz scheduler when a quarkus app/test stops ;-).", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r460757811", "createdAt": "2020-07-27T09:19:14Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/RegisterShutdownHookPluginTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class RegisterShutdownHookPluginTest {\n+\n+    @Inject\n+    Scheduler quartzScheduler;\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\n+                                    \"quarkus.quartz.plugin.shutdownhook.class=org.quartz.plugins.management.ShutdownHookPlugin\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c382a9bfcdb10eefcbf952c9a97bd91ce82e5444"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2OTgxOQ==", "bodyText": "This test is because if I register an invalid plugin, the Quartz won't start. The test can check if parsing the config to Quartz properties is working fine.", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r460769819", "createdAt": "2020-07-27T09:40:11Z", "author": {"login": "marcelorubim"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/RegisterShutdownHookPluginTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class RegisterShutdownHookPluginTest {\n+\n+    @Inject\n+    Scheduler quartzScheduler;\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\n+                                    \"quarkus.quartz.plugin.shutdownhook.class=org.quartz.plugins.management.ShutdownHookPlugin\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1NzgxMQ=="}, "originalCommit": {"oid": "c382a9bfcdb10eefcbf952c9a97bd91ce82e5444"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTAzNTI3OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/deployment/src/main/java/io/quarkus/quartz/deployment/QuartzProcessor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTozNDoxM1rOG30acg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODo1MjozM1rOG4aBKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MzYwMg==", "bodyText": "I think we should also add validation here that the class is a class implementing a org.quartz.JobListener interface. This way, we would throw the error earlier in build time. Let me know if you'd need help in doing it.\n/cc @mkouba", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461183602", "createdAt": "2020-07-27T21:34:13Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/deployment/src/main/java/io/quarkus/quartz/deployment/QuartzProcessor.java", "diffHunk": "@@ -136,6 +136,18 @@ private String guessDriver(Optional<JdbcDataSourceBuildItem> jdbcDataSource) {\n                     .add(new ReflectiveClassBuildItem(true, false, QuarkusQuartzConnectionPoolProvider.class.getName()));\n         }\n \n+        config.triggerListeners.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });\n+\n+        config.jobListeners.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });\n+\n+        config.plugins.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932ea063cbbd237e7337ab660607162196e0de1b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4ODQ3OA==", "bodyText": "See #10962 (comment)", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461188478", "createdAt": "2020-07-27T21:44:41Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/deployment/src/main/java/io/quarkus/quartz/deployment/QuartzProcessor.java", "diffHunk": "@@ -136,6 +136,18 @@ private String guessDriver(Optional<JdbcDataSourceBuildItem> jdbcDataSource) {\n                     .add(new ReflectiveClassBuildItem(true, false, QuarkusQuartzConnectionPoolProvider.class.getName()));\n         }\n \n+        config.triggerListeners.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });\n+\n+        config.jobListeners.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });\n+\n+        config.plugins.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MzYwMg=="}, "originalCommit": {"oid": "932ea063cbbd237e7337ab660607162196e0de1b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyMDMxMw==", "bodyText": "Thanks for the feedback! I did the changes you asked.\nFor the validation, the only thing I was not sure of which the exception I should throw. I decided on the IllegalArgumentException. Is it ok?", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461420313", "createdAt": "2020-07-28T08:47:47Z", "author": {"login": "marcelorubim"}, "path": "extensions/quartz/deployment/src/main/java/io/quarkus/quartz/deployment/QuartzProcessor.java", "diffHunk": "@@ -136,6 +136,18 @@ private String guessDriver(Optional<JdbcDataSourceBuildItem> jdbcDataSource) {\n                     .add(new ReflectiveClassBuildItem(true, false, QuarkusQuartzConnectionPoolProvider.class.getName()));\n         }\n \n+        config.triggerListeners.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });\n+\n+        config.jobListeners.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });\n+\n+        config.plugins.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MzYwMg=="}, "originalCommit": {"oid": "932ea063cbbd237e7337ab660607162196e0de1b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1MjY1Ng==", "bodyText": "This is fine for me.\nI am thinking maybe we can have a unit tests for validation. The UnsupportedClusteredJobConfigurationTest.java can be of inspiration.\nWhat do you think?", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461752656", "createdAt": "2020-07-28T17:31:45Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/deployment/src/main/java/io/quarkus/quartz/deployment/QuartzProcessor.java", "diffHunk": "@@ -136,6 +136,18 @@ private String guessDriver(Optional<JdbcDataSourceBuildItem> jdbcDataSource) {\n                     .add(new ReflectiveClassBuildItem(true, false, QuarkusQuartzConnectionPoolProvider.class.getName()));\n         }\n \n+        config.triggerListeners.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });\n+\n+        config.jobListeners.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });\n+\n+        config.plugins.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MzYwMg=="}, "originalCommit": {"oid": "932ea063cbbd237e7337ab660607162196e0de1b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5OTcyMw==", "bodyText": "Nice idea! And done!", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461799723", "createdAt": "2020-07-28T18:52:33Z", "author": {"login": "marcelorubim"}, "path": "extensions/quartz/deployment/src/main/java/io/quarkus/quartz/deployment/QuartzProcessor.java", "diffHunk": "@@ -136,6 +136,18 @@ private String guessDriver(Optional<JdbcDataSourceBuildItem> jdbcDataSource) {\n                     .add(new ReflectiveClassBuildItem(true, false, QuarkusQuartzConnectionPoolProvider.class.getName()));\n         }\n \n+        config.triggerListeners.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });\n+\n+        config.jobListeners.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });\n+\n+        config.plugins.values().forEach((value) -> {\n+            reflectiveClasses.add(new ReflectiveClassBuildItem(true, false, value.clazz));\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MzYwMg=="}, "originalCommit": {"oid": "932ea063cbbd237e7337ab660607162196e0de1b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTA0OTEwOnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTozODoyNVrOG30ikQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODo0OTo0NlrOG4C7ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NTY4MQ==", "bodyText": "We tend to avoid usage of lambdas in runtime modules. Can we go for classic for loops here? Probably extracting this logic into a method addListenerProperty(String prefix, QuartzAdditionalPropsConfig config) {...}, where the prefix is one of\n\nStdSchedulerFactory.PROP_PLUGIN_PREFIX ,\nStdSchedulerFactory.PROP_JOB_LISTENER_PREFIX and\nStdSchedulerFactory.PROP_JOB_LISTENER_PREFIX\n\nwould remove some of the duplication.", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461185681", "createdAt": "2020-07-27T21:38:25Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -323,6 +323,28 @@ private Properties getSchedulerConfigurationProperties(QuartzSupport quartzSuppo\n             }\n         }\n \n+        buildTimeConfig.triggerListeners.forEach((key, value) -> {\n+            props.put(StdSchedulerFactory.PROP_TRIGGER_LISTENER_PREFIX + \".\" + key + \".class\", value.clazz);\n+            value.propsValue\n+                    .forEach((s, s2) -> props\n+                            .put(String.format(\"%s.%s.%s\", StdSchedulerFactory.PROP_TRIGGER_LISTENER_PREFIX, key, s), s2));\n+        });\n+\n+        buildTimeConfig.jobListeners.forEach((key, value) -> {\n+            props.put(StdSchedulerFactory.PROP_JOB_LISTENER_PREFIX + \".\" + key + \".class\", value.clazz);\n+            value.propsValue\n+                    .forEach((s, s2) -> props\n+                            .put(String.format(\"%s.%s.%s\", StdSchedulerFactory.PROP_JOB_LISTENER_PREFIX, key, s), s2));\n+        });\n+\n+        buildTimeConfig.plugins.forEach((key, value) -> {\n+            props.put(StdSchedulerFactory.PROP_PLUGIN_PREFIX + \".\" + key + \".class\", value.clazz);\n+            value.propsValue\n+                    .forEach(\n+                            (s, s2) -> props.put(String.format(\"%s.%s.%s\", StdSchedulerFactory.PROP_PLUGIN_PREFIX, key, s),\n+                                    s2));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932ea063cbbd237e7337ab660607162196e0de1b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyMTUwNw==", "bodyText": "I did the refactoring. It's much better this way, without the duplication\n        props.putAll(getAdditionalConfigurationProperties(StdSchedulerFactory.PROP_PLUGIN_PREFIX, buildTimeConfig.plugins));\n        props.putAll(getAdditionalConfigurationProperties(StdSchedulerFactory.PROP_JOB_LISTENER_PREFIX,\n                buildTimeConfig.jobListeners));\n        props.putAll(getAdditionalConfigurationProperties(StdSchedulerFactory.PROP_TRIGGER_LISTENER_PREFIX,\n                buildTimeConfig.triggerListeners));\n\n        return props;\n    }\n\n    private Properties getAdditionalConfigurationProperties(String prefix, Map<String, QuartzAdditionalPropsConfig> config) {\n        Properties props = new Properties();\n        for (String key : config.keySet()) {\n            props.put(String.format(\"%s.%s.class\", prefix, key), config.get(key).clazz);\n            for (String propsName : config.get(key).propsValue.keySet()) {\n                props.put(String.format(\"%s.%s.%s\", prefix, key, propsName),\n                        config.get(key).propsValue.get(propsName));\n            }\n        }\n        return props;\n    }", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461421507", "createdAt": "2020-07-28T08:49:46Z", "author": {"login": "marcelorubim"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -323,6 +323,28 @@ private Properties getSchedulerConfigurationProperties(QuartzSupport quartzSuppo\n             }\n         }\n \n+        buildTimeConfig.triggerListeners.forEach((key, value) -> {\n+            props.put(StdSchedulerFactory.PROP_TRIGGER_LISTENER_PREFIX + \".\" + key + \".class\", value.clazz);\n+            value.propsValue\n+                    .forEach((s, s2) -> props\n+                            .put(String.format(\"%s.%s.%s\", StdSchedulerFactory.PROP_TRIGGER_LISTENER_PREFIX, key, s), s2));\n+        });\n+\n+        buildTimeConfig.jobListeners.forEach((key, value) -> {\n+            props.put(StdSchedulerFactory.PROP_JOB_LISTENER_PREFIX + \".\" + key + \".class\", value.clazz);\n+            value.propsValue\n+                    .forEach((s, s2) -> props\n+                            .put(String.format(\"%s.%s.%s\", StdSchedulerFactory.PROP_JOB_LISTENER_PREFIX, key, s), s2));\n+        });\n+\n+        buildTimeConfig.plugins.forEach((key, value) -> {\n+            props.put(StdSchedulerFactory.PROP_PLUGIN_PREFIX + \".\" + key + \".class\", value.clazz);\n+            value.propsValue\n+                    .forEach(\n+                            (s, s2) -> props.put(String.format(\"%s.%s.%s\", StdSchedulerFactory.PROP_PLUGIN_PREFIX, key, s),\n+                                    s2));\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NTY4MQ=="}, "originalCommit": {"oid": "932ea063cbbd237e7337ab660607162196e0de1b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTA1ODIwOnYy", "diffSide": "RIGHT", "path": "integration-tests/quartz/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo0MTozMVrOG30oEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo0NDoyN1rOG30tEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NzA4OQ==", "bodyText": "Nice.\nDo you think we can be able to add a line or two in the Quartz guide about configuring listeners and plugins?", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461187089", "createdAt": "2020-07-27T21:41:31Z", "author": {"login": "machi1990"}, "path": "integration-tests/quartz/src/main/resources/application.properties", "diffHunk": "@@ -15,3 +15,7 @@ quarkus.flyway.migrate-at-start=true\n quarkus.flyway.baseline-on-migrate=true\n quarkus.flyway.baseline-version=1.0\n quarkus.flyway.baseline-description=Quartz\n+\n+# Register de LoggingJobHistoryPlugin for testing\n+quarkus.quartz.plugin.jobHistory.class=org.quartz.plugins.history.LoggingJobHistoryPlugin\n+quarkus.quartz.plugin.jobHistory.jobSuccessMessage=Job [{1}.{0}] execution complete and reports: {8}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932ea063cbbd237e7337ab660607162196e0de1b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4ODM3MA==", "bodyText": "See #10962 (comment)", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461188370", "createdAt": "2020-07-27T21:44:27Z", "author": {"login": "machi1990"}, "path": "integration-tests/quartz/src/main/resources/application.properties", "diffHunk": "@@ -15,3 +15,7 @@ quarkus.flyway.migrate-at-start=true\n quarkus.flyway.baseline-on-migrate=true\n quarkus.flyway.baseline-version=1.0\n quarkus.flyway.baseline-description=Quartz\n+\n+# Register de LoggingJobHistoryPlugin for testing\n+quarkus.quartz.plugin.jobHistory.class=org.quartz.plugins.history.LoggingJobHistoryPlugin\n+quarkus.quartz.plugin.jobHistory.jobSuccessMessage=Job [{1}.{0}] execution complete and reports: {8}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NzA4OQ=="}, "originalCommit": {"oid": "932ea063cbbd237e7337ab660607162196e0de1b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjY4MTg2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/quartz.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzoyNzozNFrOG4W_Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTowMToxOVrOG4aVPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1MDAzNA==", "bodyText": "This is much better. Thank you.\nAlso in this issue we wanted to document the programmatic way of doing things as pointed out by @mkouba in #10962 (comment). Can you add a note in the documentation about that? Thank you.", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461750034", "createdAt": "2020-07-28T17:27:34Z", "author": {"login": "machi1990"}, "path": "docs/src/main/asciidoc/quartz.adoc", "diffHunk": "@@ -400,6 +400,20 @@ After a few seconds, in another terminal, run `curl localhost:8080/tasks` to ver\n \n You can also generate the native executable with `./mvnw clean package -Pnative`.\n \n+[[quartz-register-plugin-listeners]]\n+== Registering Plugin and Listeners\n+\n+You can register a plugin, jobListener or triggerListener through Quarkus configuration.\n+\n+The example bellow register the plugin `org.quartz.plugins.history.LoggingJobHistoryPlugin` named as `jobHistory` with the property `jobSuccessMessage` defined as `Job [{1}.{0}] execution complete and reports: {8}` \n+\n+[source,conf]\n+----\n+quarkus.quartz.plugin.jobHistory.class=org.quartz.plugins.history.LoggingJobHistoryPlugin\n+quarkus.quartz.plugin.jobHistory.jobSuccessMessage=Job [{1}.{0}] execution complete and reports: {8}\n+----\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0e7cf3482c3730f0a58e6897bb3eff5f94b752"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwMDkxMQ==", "bodyText": "I included this information on the documentation. But I didn't find on Quartz API where to register a Plugin programmatic. So I just pointed out this way for jobListener or triggerListener.\nDo you know if it is possible?", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461800911", "createdAt": "2020-07-28T18:54:32Z", "author": {"login": "marcelorubim"}, "path": "docs/src/main/asciidoc/quartz.adoc", "diffHunk": "@@ -400,6 +400,20 @@ After a few seconds, in another terminal, run `curl localhost:8080/tasks` to ver\n \n You can also generate the native executable with `./mvnw clean package -Pnative`.\n \n+[[quartz-register-plugin-listeners]]\n+== Registering Plugin and Listeners\n+\n+You can register a plugin, jobListener or triggerListener through Quarkus configuration.\n+\n+The example bellow register the plugin `org.quartz.plugins.history.LoggingJobHistoryPlugin` named as `jobHistory` with the property `jobSuccessMessage` defined as `Job [{1}.{0}] execution complete and reports: {8}` \n+\n+[source,conf]\n+----\n+quarkus.quartz.plugin.jobHistory.class=org.quartz.plugins.history.LoggingJobHistoryPlugin\n+quarkus.quartz.plugin.jobHistory.jobSuccessMessage=Job [{1}.{0}] execution complete and reports: {8}\n+----\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1MDAzNA=="}, "originalCommit": {"oid": "7f0e7cf3482c3730f0a58e6897bb3eff5f94b752"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwNDg2MQ==", "bodyText": "Nice work. I do not know if it possible.", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r461804861", "createdAt": "2020-07-28T19:01:19Z", "author": {"login": "machi1990"}, "path": "docs/src/main/asciidoc/quartz.adoc", "diffHunk": "@@ -400,6 +400,20 @@ After a few seconds, in another terminal, run `curl localhost:8080/tasks` to ver\n \n You can also generate the native executable with `./mvnw clean package -Pnative`.\n \n+[[quartz-register-plugin-listeners]]\n+== Registering Plugin and Listeners\n+\n+You can register a plugin, jobListener or triggerListener through Quarkus configuration.\n+\n+The example bellow register the plugin `org.quartz.plugins.history.LoggingJobHistoryPlugin` named as `jobHistory` with the property `jobSuccessMessage` defined as `Job [{1}.{0}] execution complete and reports: {8}` \n+\n+[source,conf]\n+----\n+quarkus.quartz.plugin.jobHistory.class=org.quartz.plugins.history.LoggingJobHistoryPlugin\n+quarkus.quartz.plugin.jobHistory.jobSuccessMessage=Job [{1}.{0}] execution complete and reports: {8}\n+----\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1MDAzNA=="}, "originalCommit": {"oid": "7f0e7cf3482c3730f0a58e6897bb3eff5f94b752"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDc5NjQzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/quartz.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjo0MTo0MVrOG4qqOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzowMzoyNFrOG4rQxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MjM3Nw==", "bodyText": "The example bellow registers the plugin...", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r462072377", "createdAt": "2020-07-29T06:41:41Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/quartz.adoc", "diffHunk": "@@ -400,6 +400,31 @@ After a few seconds, in another terminal, run `curl localhost:8080/tasks` to ver\n \n You can also generate the native executable with `./mvnw clean package -Pnative`.\n \n+[[quartz-register-plugin-listeners]]\n+== Registering Plugin and Listeners\n+\n+You can register a plugin, jobListener or triggerListener through Quarkus configuration.\n+\n+The example bellow register the plugin `org.quartz.plugins.history.LoggingJobHistoryPlugin` named as `jobHistory` with the property `jobSuccessMessage` defined as `Job [{1}.{0}] execution complete and reports: {8}` ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5cfb9464e11e07144d2d931d60bf37a1ca0adc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MjI0Nw==", "bodyText": "Thanks! I fixed it!", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r462082247", "createdAt": "2020-07-29T07:03:24Z", "author": {"login": "marcelorubim"}, "path": "docs/src/main/asciidoc/quartz.adoc", "diffHunk": "@@ -400,6 +400,31 @@ After a few seconds, in another terminal, run `curl localhost:8080/tasks` to ver\n \n You can also generate the native executable with `./mvnw clean package -Pnative`.\n \n+[[quartz-register-plugin-listeners]]\n+== Registering Plugin and Listeners\n+\n+You can register a plugin, jobListener or triggerListener through Quarkus configuration.\n+\n+The example bellow register the plugin `org.quartz.plugins.history.LoggingJobHistoryPlugin` named as `jobHistory` with the property `jobSuccessMessage` defined as `Job [{1}.{0}] execution complete and reports: {8}` ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MjM3Nw=="}, "originalCommit": {"oid": "1d5cfb9464e11e07144d2d931d60bf37a1ca0adc"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDgwMTU1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/quartz.adoc", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjo0MzozN1rOG4qtTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMDowNzowNlrOG4xsog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MzE2Ng==", "bodyText": "You can also register a listener programmatically with an injected org.quartz.Scheduler...", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r462073166", "createdAt": "2020-07-29T06:43:37Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/quartz.adoc", "diffHunk": "@@ -400,6 +400,31 @@ After a few seconds, in another terminal, run `curl localhost:8080/tasks` to ver\n \n You can also generate the native executable with `./mvnw clean package -Pnative`.\n \n+[[quartz-register-plugin-listeners]]\n+== Registering Plugin and Listeners\n+\n+You can register a plugin, jobListener or triggerListener through Quarkus configuration.\n+\n+The example bellow register the plugin `org.quartz.plugins.history.LoggingJobHistoryPlugin` named as `jobHistory` with the property `jobSuccessMessage` defined as `Job [{1}.{0}] execution complete and reports: {8}` \n+\n+[source,conf]\n+----\n+quarkus.quartz.plugin.jobHistory.class=org.quartz.plugins.history.LoggingJobHistoryPlugin\n+quarkus.quartz.plugin.jobHistory.jobSuccessMessage=Job [{1}.{0}] execution complete and reports: {8}\n+----\n+\n+You can also register a jobListener or a triggerListener through Quartz API by injecting the underlying `org.quartz.Scheduler`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5cfb9464e11e07144d2d931d60bf37a1ca0adc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MjM4OA==", "bodyText": "Done! Really seems better this way!", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r462082388", "createdAt": "2020-07-29T07:03:44Z", "author": {"login": "marcelorubim"}, "path": "docs/src/main/asciidoc/quartz.adoc", "diffHunk": "@@ -400,6 +400,31 @@ After a few seconds, in another terminal, run `curl localhost:8080/tasks` to ver\n \n You can also generate the native executable with `./mvnw clean package -Pnative`.\n \n+[[quartz-register-plugin-listeners]]\n+== Registering Plugin and Listeners\n+\n+You can register a plugin, jobListener or triggerListener through Quarkus configuration.\n+\n+The example bellow register the plugin `org.quartz.plugins.history.LoggingJobHistoryPlugin` named as `jobHistory` with the property `jobSuccessMessage` defined as `Job [{1}.{0}] execution complete and reports: {8}` \n+\n+[source,conf]\n+----\n+quarkus.quartz.plugin.jobHistory.class=org.quartz.plugins.history.LoggingJobHistoryPlugin\n+quarkus.quartz.plugin.jobHistory.jobSuccessMessage=Job [{1}.{0}] execution complete and reports: {8}\n+----\n+\n+You can also register a jobListener or a triggerListener through Quartz API by injecting the underlying `org.quartz.Scheduler`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MzE2Ng=="}, "originalCommit": {"oid": "1d5cfb9464e11e07144d2d931d60bf37a1ca0adc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4Mzk0MQ==", "bodyText": "Seems something is wrong with the CI itself.\nThe previous run was successful and on this one, I've only changed the docs.\n/cc @machi1990", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r462183941", "createdAt": "2020-07-29T10:00:37Z", "author": {"login": "marcelorubim"}, "path": "docs/src/main/asciidoc/quartz.adoc", "diffHunk": "@@ -400,6 +400,31 @@ After a few seconds, in another terminal, run `curl localhost:8080/tasks` to ver\n \n You can also generate the native executable with `./mvnw clean package -Pnative`.\n \n+[[quartz-register-plugin-listeners]]\n+== Registering Plugin and Listeners\n+\n+You can register a plugin, jobListener or triggerListener through Quarkus configuration.\n+\n+The example bellow register the plugin `org.quartz.plugins.history.LoggingJobHistoryPlugin` named as `jobHistory` with the property `jobSuccessMessage` defined as `Job [{1}.{0}] execution complete and reports: {8}` \n+\n+[source,conf]\n+----\n+quarkus.quartz.plugin.jobHistory.class=org.quartz.plugins.history.LoggingJobHistoryPlugin\n+quarkus.quartz.plugin.jobHistory.jobSuccessMessage=Job [{1}.{0}] execution complete and reports: {8}\n+----\n+\n+You can also register a jobListener or a triggerListener through Quartz API by injecting the underlying `org.quartz.Scheduler`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MzE2Ng=="}, "originalCommit": {"oid": "1d5cfb9464e11e07144d2d931d60bf37a1ca0adc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4NTE1Mw==", "bodyText": "It could be only a case of failing random test. Can you rebase on master and then push again to re-launch CI?", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r462185153", "createdAt": "2020-07-29T10:02:35Z", "author": {"login": "machi1990"}, "path": "docs/src/main/asciidoc/quartz.adoc", "diffHunk": "@@ -400,6 +400,31 @@ After a few seconds, in another terminal, run `curl localhost:8080/tasks` to ver\n \n You can also generate the native executable with `./mvnw clean package -Pnative`.\n \n+[[quartz-register-plugin-listeners]]\n+== Registering Plugin and Listeners\n+\n+You can register a plugin, jobListener or triggerListener through Quarkus configuration.\n+\n+The example bellow register the plugin `org.quartz.plugins.history.LoggingJobHistoryPlugin` named as `jobHistory` with the property `jobSuccessMessage` defined as `Job [{1}.{0}] execution complete and reports: {8}` \n+\n+[source,conf]\n+----\n+quarkus.quartz.plugin.jobHistory.class=org.quartz.plugins.history.LoggingJobHistoryPlugin\n+quarkus.quartz.plugin.jobHistory.jobSuccessMessage=Job [{1}.{0}] execution complete and reports: {8}\n+----\n+\n+You can also register a jobListener or a triggerListener through Quartz API by injecting the underlying `org.quartz.Scheduler`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MzE2Ng=="}, "originalCommit": {"oid": "1d5cfb9464e11e07144d2d931d60bf37a1ca0adc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4NzY4Mg==", "bodyText": "I'll do that. Thanks!", "url": "https://github.com/quarkusio/quarkus/pull/10967#discussion_r462187682", "createdAt": "2020-07-29T10:07:06Z", "author": {"login": "marcelorubim"}, "path": "docs/src/main/asciidoc/quartz.adoc", "diffHunk": "@@ -400,6 +400,31 @@ After a few seconds, in another terminal, run `curl localhost:8080/tasks` to ver\n \n You can also generate the native executable with `./mvnw clean package -Pnative`.\n \n+[[quartz-register-plugin-listeners]]\n+== Registering Plugin and Listeners\n+\n+You can register a plugin, jobListener or triggerListener through Quarkus configuration.\n+\n+The example bellow register the plugin `org.quartz.plugins.history.LoggingJobHistoryPlugin` named as `jobHistory` with the property `jobSuccessMessage` defined as `Job [{1}.{0}] execution complete and reports: {8}` \n+\n+[source,conf]\n+----\n+quarkus.quartz.plugin.jobHistory.class=org.quartz.plugins.history.LoggingJobHistoryPlugin\n+quarkus.quartz.plugin.jobHistory.jobSuccessMessage=Job [{1}.{0}] execution complete and reports: {8}\n+----\n+\n+You can also register a jobListener or a triggerListener through Quartz API by injecting the underlying `org.quartz.Scheduler`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MzE2Ng=="}, "originalCommit": {"oid": "1d5cfb9464e11e07144d2d931d60bf37a1ca0adc"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 877, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}