{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyODE2MTA4", "number": 7098, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTozNjoyMVrODeYk9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDo1NTowMFrODfNVHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTg2NTQ5OnYy", "diffSide": "RIGHT", "path": "extensions/mutiny/runtime/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTozNjoyMVrOFnfOBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMTowNzozMFrOFniIqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MDI3OQ==", "bodyText": "You don't need that one AFAICS.", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376950279", "createdAt": "2020-02-10T09:36:21Z", "author": {"login": "gsmet"}, "path": "extensions/mutiny/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-mutiny-parent</artifactId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-mutiny</artifactId>\n+    <name>Quarkus - Mutiny - Runtime</name>\n+    <description>Mutiny is a Reactive Programming library</description>\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.smallrye.reactive</groupId>\n+            <artifactId>mutiny</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.graalvm.nativeimage</groupId>\n+            <artifactId>svm</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cddfaab2bb60e2cd1299668b28ecb6806cf2d130"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5ODA1Nw==", "bodyText": "Yes, and the goal is to not need it at all - mutiny code is perfectly fine for GraalVM.", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376998057", "createdAt": "2020-02-10T11:07:30Z", "author": {"login": "cescoffier"}, "path": "extensions/mutiny/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-mutiny-parent</artifactId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-mutiny</artifactId>\n+    <name>Quarkus - Mutiny - Runtime</name>\n+    <description>Mutiny is a Reactive Programming library</description>\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.smallrye.reactive</groupId>\n+            <artifactId>mutiny</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.graalvm.nativeimage</groupId>\n+            <artifactId>svm</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MDI3OQ=="}, "originalCommit": {"oid": "cddfaab2bb60e2cd1299668b28ecb6806cf2d130"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTg3Mzk5OnYy", "diffSide": "RIGHT", "path": "extensions/vertx/runtime/src/main/java/io/quarkus/vertx/runtime/VertxProducer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTozODozNVrOFnfS2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjoyNzo1NVrOFnkQmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MTUxNA==", "bodyText": "Usually, we even say \"is deprecated and will be removed in a future version\". Because I suppose that's the case, isn't it?", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376951514", "createdAt": "2020-02-10T09:38:35Z", "author": {"login": "gsmet"}, "path": "extensions/vertx/runtime/src/main/java/io/quarkus/vertx/runtime/VertxProducer.java", "diffHunk": "@@ -37,25 +41,58 @@ public EventBus eventbus() {\n \n     @Singleton\n     @Produces\n-    public io.vertx.axle.core.Vertx axle() {\n+    public synchronized io.vertx.mutiny.core.Vertx mutiny() {\n+        if (mutinyVertx == null) {\n+            mutinyVertx = io.vertx.mutiny.core.Vertx.newInstance(vertx);\n+        }\n+        return mutinyVertx;\n+    }\n+\n+    @Singleton\n+    @Produces\n+    @Deprecated\n+    public synchronized io.vertx.axle.core.Vertx axle() {\n+        if (axleVertx == null) {\n+            LOGGER.warn(\n+                    \"`io.vertx.axle.core.Vertx` is deprecated - it is recommended to switch to `io.vertx.mutiny.core.Vertx`\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4dc16edfc1751ed87e23d9e94323a3b5f9122b5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5OTMxNQ==", "bodyText": "Yes, it's a good idea to inform the user of future removal.", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376999315", "createdAt": "2020-02-10T11:10:12Z", "author": {"login": "cescoffier"}, "path": "extensions/vertx/runtime/src/main/java/io/quarkus/vertx/runtime/VertxProducer.java", "diffHunk": "@@ -37,25 +41,58 @@ public EventBus eventbus() {\n \n     @Singleton\n     @Produces\n-    public io.vertx.axle.core.Vertx axle() {\n+    public synchronized io.vertx.mutiny.core.Vertx mutiny() {\n+        if (mutinyVertx == null) {\n+            mutinyVertx = io.vertx.mutiny.core.Vertx.newInstance(vertx);\n+        }\n+        return mutinyVertx;\n+    }\n+\n+    @Singleton\n+    @Produces\n+    @Deprecated\n+    public synchronized io.vertx.axle.core.Vertx axle() {\n+        if (axleVertx == null) {\n+            LOGGER.warn(\n+                    \"`io.vertx.axle.core.Vertx` is deprecated - it is recommended to switch to `io.vertx.mutiny.core.Vertx`\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MTUxNA=="}, "originalCommit": {"oid": "f4dc16edfc1751ed87e23d9e94323a3b5f9122b5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMjg1Nw==", "bodyText": "Fixed, also changed the bytecode version (related to @ConsumeEvent)", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r377032857", "createdAt": "2020-02-10T12:27:55Z", "author": {"login": "cescoffier"}, "path": "extensions/vertx/runtime/src/main/java/io/quarkus/vertx/runtime/VertxProducer.java", "diffHunk": "@@ -37,25 +41,58 @@ public EventBus eventbus() {\n \n     @Singleton\n     @Produces\n-    public io.vertx.axle.core.Vertx axle() {\n+    public synchronized io.vertx.mutiny.core.Vertx mutiny() {\n+        if (mutinyVertx == null) {\n+            mutinyVertx = io.vertx.mutiny.core.Vertx.newInstance(vertx);\n+        }\n+        return mutinyVertx;\n+    }\n+\n+    @Singleton\n+    @Produces\n+    @Deprecated\n+    public synchronized io.vertx.axle.core.Vertx axle() {\n+        if (axleVertx == null) {\n+            LOGGER.warn(\n+                    \"`io.vertx.axle.core.Vertx` is deprecated - it is recommended to switch to `io.vertx.mutiny.core.Vertx`\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MTUxNA=="}, "originalCommit": {"oid": "f4dc16edfc1751ed87e23d9e94323a3b5f9122b5"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTg5MzUwOnYy", "diffSide": "RIGHT", "path": "extensions/vertx/deployment/src/main/java/io/quarkus/vertx/deployment/EventBusConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0NDoyMFrOFnfesw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDo1ODozM1rOFnh3oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NDU0Nw==", "bodyText": "Looks like we lose the stacktrace here. That's expected?", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376954547", "createdAt": "2020-02-10T09:44:20Z", "author": {"login": "gsmet"}, "path": "extensions/vertx/deployment/src/main/java/io/quarkus/vertx/deployment/EventBusConsumer.java", "diffHunk": "@@ -231,6 +243,58 @@ private static void invoke(BeanInfo bean, MethodInfo method, ResultHandle messag\n         }\n     }\n \n+    /**\n+     * If the return type is CompletionStage use:\n+     * <code><pre>\n+     * cs.whenComplete((whenResult, whenFailure) -> {\n+     *  if (failure != null) {\n+     *         message.fail(status, whenFailure.getMessage());\n+     *  } else {\n+     *         message.reply(whenResult);\n+     *  }\n+     * })\n+     * </pre></code>\n+     *\n+     * @param messageHandle the message variable\n+     * @param invoke the bytecode creator\n+     * @return the function\n+     */\n+    private static FunctionCreator generateWhenCompleteHandler(ResultHandle messageHandle, BytecodeCreator invoke) {\n+        FunctionCreator handler = invoke.createFunction(BiConsumer.class);\n+        BytecodeCreator bytecode = handler.getBytecode();\n+\n+        // This avoid having to check cast in the branches\n+        AssignableResultHandle whenResult = bytecode.createVariable(Object.class);\n+        bytecode.assign(whenResult, bytecode.getMethodParam(0));\n+        AssignableResultHandle whenFailure = bytecode.createVariable(Exception.class);\n+        bytecode.assign(whenFailure, bytecode.getMethodParam(1));\n+        AssignableResultHandle message = bytecode.createVariable(Message.class);\n+        bytecode.assign(message, messageHandle);\n+\n+        BranchResult ifFailureIfNull = bytecode.ifNull(whenFailure);\n+        // failure is not null branch - message.fail(failureStatus, failure.getMessage())\n+        // In this branch we use the EXPLICIT FAILURE CODE\n+        BytecodeCreator failureIsNotNull = ifFailureIfNull.falseBranch();\n+        ResultHandle failureStatus = failureIsNotNull.load(ConsumeEvent.EXPLICIT_FAILURE_CODE);\n+        ResultHandle failureMessage = failureIsNotNull\n+                .invokeVirtualMethod(THROWABLE_GET_MESSAGE, whenFailure);\n+        failureIsNotNull.invokeInterfaceMethod(\n+                MESSAGE_FAIL,\n+                message,\n+                failureStatus,\n+                failureMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f585219e9a4bced13ab8199212efa5f8d128e03"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5MzY5Nw==", "bodyText": "Yes, it's how the vert.x event bus work. Anyway, it's async, stack traces are not very useful in this case. Note that it could also work remotely.", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376993697", "createdAt": "2020-02-10T10:58:33Z", "author": {"login": "cescoffier"}, "path": "extensions/vertx/deployment/src/main/java/io/quarkus/vertx/deployment/EventBusConsumer.java", "diffHunk": "@@ -231,6 +243,58 @@ private static void invoke(BeanInfo bean, MethodInfo method, ResultHandle messag\n         }\n     }\n \n+    /**\n+     * If the return type is CompletionStage use:\n+     * <code><pre>\n+     * cs.whenComplete((whenResult, whenFailure) -> {\n+     *  if (failure != null) {\n+     *         message.fail(status, whenFailure.getMessage());\n+     *  } else {\n+     *         message.reply(whenResult);\n+     *  }\n+     * })\n+     * </pre></code>\n+     *\n+     * @param messageHandle the message variable\n+     * @param invoke the bytecode creator\n+     * @return the function\n+     */\n+    private static FunctionCreator generateWhenCompleteHandler(ResultHandle messageHandle, BytecodeCreator invoke) {\n+        FunctionCreator handler = invoke.createFunction(BiConsumer.class);\n+        BytecodeCreator bytecode = handler.getBytecode();\n+\n+        // This avoid having to check cast in the branches\n+        AssignableResultHandle whenResult = bytecode.createVariable(Object.class);\n+        bytecode.assign(whenResult, bytecode.getMethodParam(0));\n+        AssignableResultHandle whenFailure = bytecode.createVariable(Exception.class);\n+        bytecode.assign(whenFailure, bytecode.getMethodParam(1));\n+        AssignableResultHandle message = bytecode.createVariable(Message.class);\n+        bytecode.assign(message, messageHandle);\n+\n+        BranchResult ifFailureIfNull = bytecode.ifNull(whenFailure);\n+        // failure is not null branch - message.fail(failureStatus, failure.getMessage())\n+        // In this branch we use the EXPLICIT FAILURE CODE\n+        BytecodeCreator failureIsNotNull = ifFailureIfNull.falseBranch();\n+        ResultHandle failureStatus = failureIsNotNull.load(ConsumeEvent.EXPLICIT_FAILURE_CODE);\n+        ResultHandle failureMessage = failureIsNotNull\n+                .invokeVirtualMethod(THROWABLE_GET_MESSAGE, whenFailure);\n+        failureIsNotNull.invokeInterfaceMethod(\n+                MESSAGE_FAIL,\n+                message,\n+                failureStatus,\n+                failureMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NDU0Nw=="}, "originalCommit": {"oid": "2f585219e9a4bced13ab8199212efa5f8d128e03"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTg5OTYxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/vertx.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0NjowNVrOFnfiWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0NjowNVrOFnfiWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NTQ4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For instance _bare_ Vert.x uses callbacks, the Mutiny variants using `Uni` and `Multi`, the RX Java 2 version uses `Single`, `Maybe`, `Completable`, `Observable` and `Flowable`...\n          \n          \n            \n            For instance _bare_ Vert.x uses callbacks, the Mutiny variants uses `Uni` and `Multi`, the RX Java 2 version uses `Single`, `Maybe`, `Completable`, `Observable` and `Flowable`...", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376955483", "createdAt": "2020-02-10T09:46:05Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/vertx.adoc", "diffHunk": "@@ -57,9 +59,9 @@ Once the extension has been added, you can access the _managed_ Vert.x instance\n ----\n \n If you are familiar with Vert.x, you know that Vert.x provides different API models.\n-For instance _bare_ Vert.x uses callbacks, the RX Java 2 version uses `Single`, `Maybe`, `Completable`, `Observable` and `Flowable`.\n+For instance _bare_ Vert.x uses callbacks, the Mutiny variants using `Uni` and `Multi`, the RX Java 2 version uses `Single`, `Maybe`, `Completable`, `Observable` and `Flowable`...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c2fcbab016a13e2b8c9ffe4daad1ff7d535917"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTkwNjU0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/reactive-messaging.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0Nzo0NlrOFnfmXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0Nzo0NlrOFnfmXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NjUwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can also return an `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:\n          \n          \n            \n            You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376956508", "createdAt": "2020-02-10T09:47:46Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/reactive-messaging.adoc", "diffHunk": "@@ -116,16 +146,25 @@ public String consume(String name) {\n }\n ----\n \n-You can also return a `CompletionStage<T>` to handle asynchronous reply:\n+You can also return an `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b33e3f27bb304378ddc4223940f7e80a214c36fc"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDE4MDU2OnYy", "diffSide": "RIGHT", "path": "extensions/vertx/deployment/src/test/java/io/quarkus/vertx/deployment/MessageConsumerFailureTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTowMjoyOVrOFn1cZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNjozMjoyMVrOFn-e4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNDQwNA==", "bodyText": "Remove any System.outs  from the code (including tests)", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r377314404", "createdAt": "2020-02-10T21:02:29Z", "author": {"login": "gastaldi"}, "path": "extensions/vertx/deployment/src/test/java/io/quarkus/vertx/deployment/MessageConsumerFailureTest.java", "diffHunk": "@@ -35,18 +38,24 @@\n \n     @Test\n     public void testFailure() throws InterruptedException {\n-        verifyFailure(\"foo\", \"java.lang.IllegalStateException: Foo is dead\");\n-        verifyFailure(\"foo-message\", \"java.lang.NullPointerException\");\n-        verifyFailure(\"foo-completion-stage\", \"java.lang.NullPointerException: Something is null\");\n+        verifyFailure(\"foo\", \"java.lang.IllegalStateException: Foo is dead\", false);\n+        verifyFailure(\"foo-message\", \"java.lang.NullPointerException\", false);\n+        verifyFailure(\"foo-completion-stage\", \"java.lang.NullPointerException: Something is null\", false);\n+        verifyFailure(\"foo-completion-stage-failure\", \"boom\", true);\n+        verifyFailure(\"foo-uni\", \"java.lang.NullPointerException: Something is null\", false);\n+        verifyFailure(\"foo-uni-failure\", \"boom\", true);\n     }\n \n-    void verifyFailure(String address, String expectedMessage) throws InterruptedException {\n+    void verifyFailure(String address, String expectedMessage, boolean explicit) throws InterruptedException {\n         BlockingQueue<Object> synchronizer = new LinkedBlockingQueue<>();\n+        System.out.println(\"sending to \" + address);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29bbe9a6d7b55926ba721710b88e5e57e422cf52"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MjQ5OQ==", "bodyText": "Thanks! I don't even remember adding these traces. They have been removed.", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r377462499", "createdAt": "2020-02-11T06:32:21Z", "author": {"login": "cescoffier"}, "path": "extensions/vertx/deployment/src/test/java/io/quarkus/vertx/deployment/MessageConsumerFailureTest.java", "diffHunk": "@@ -35,18 +38,24 @@\n \n     @Test\n     public void testFailure() throws InterruptedException {\n-        verifyFailure(\"foo\", \"java.lang.IllegalStateException: Foo is dead\");\n-        verifyFailure(\"foo-message\", \"java.lang.NullPointerException\");\n-        verifyFailure(\"foo-completion-stage\", \"java.lang.NullPointerException: Something is null\");\n+        verifyFailure(\"foo\", \"java.lang.IllegalStateException: Foo is dead\", false);\n+        verifyFailure(\"foo-message\", \"java.lang.NullPointerException\", false);\n+        verifyFailure(\"foo-completion-stage\", \"java.lang.NullPointerException: Something is null\", false);\n+        verifyFailure(\"foo-completion-stage-failure\", \"boom\", true);\n+        verifyFailure(\"foo-uni\", \"java.lang.NullPointerException: Something is null\", false);\n+        verifyFailure(\"foo-uni-failure\", \"boom\", true);\n     }\n \n-    void verifyFailure(String address, String expectedMessage) throws InterruptedException {\n+    void verifyFailure(String address, String expectedMessage, boolean explicit) throws InterruptedException {\n         BlockingQueue<Object> synchronizer = new LinkedBlockingQueue<>();\n+        System.out.println(\"sending to \" + address);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNDQwNA=="}, "originalCommit": {"oid": "29bbe9a6d7b55926ba721710b88e5e57e422cf52"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDUwODQ1OnYy", "diffSide": "RIGHT", "path": "extensions/vertx/deployment/src/test/java/io/quarkus/vertx/deployment/MessageConsumerFailureTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDo1NTowMFrOFoxsaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDo1NTowMFrOFoxsaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMwMTU0NA==", "bodyText": "Instead of booleans, it would be better to pass the expected replyException.failureCode(). That would get rid of the ifstatement in the verifyFailure method", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r378301544", "createdAt": "2020-02-12T14:55:00Z", "author": {"login": "gastaldi"}, "path": "extensions/vertx/deployment/src/test/java/io/quarkus/vertx/deployment/MessageConsumerFailureTest.java", "diffHunk": "@@ -35,12 +38,15 @@\n \n     @Test\n     public void testFailure() throws InterruptedException {\n-        verifyFailure(\"foo\", \"java.lang.IllegalStateException: Foo is dead\");\n-        verifyFailure(\"foo-message\", \"java.lang.NullPointerException\");\n-        verifyFailure(\"foo-completion-stage\", \"java.lang.NullPointerException: Something is null\");\n+        verifyFailure(\"foo\", \"java.lang.IllegalStateException: Foo is dead\", false);\n+        verifyFailure(\"foo-message\", \"java.lang.NullPointerException\", false);\n+        verifyFailure(\"foo-completion-stage\", \"java.lang.NullPointerException: Something is null\", false);\n+        verifyFailure(\"foo-completion-stage-failure\", \"boom\", true);\n+        verifyFailure(\"foo-uni\", \"java.lang.NullPointerException: Something is null\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb34c7e967f7d0bf974f8dcaff3a5e5468e7731"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 933, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}