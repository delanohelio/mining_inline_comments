{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMTYyNzY1", "number": 13960, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDo0NzoxMVrOFG-C7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QxODowMzo1NVrOFvL-qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODUyMzM0OnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/resolver/CapabilityErrors.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDo0NzoxMVrOIIOs_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODowMjo1MlrOIIWzuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUwMDQxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        writer.write(\"Please make sure there is only one provider of the following capabailities.\");\n          \n          \n            \n                        writer.write(\"Please make sure there is only one provider of the following capabilities.\");", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r545500414", "createdAt": "2020-12-18T00:47:11Z", "author": {"login": "maxandersen"}, "path": "independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/resolver/CapabilityErrors.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.bootstrap.resolver;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class CapabilityErrors {\n+\n+    private final Map<String, List<String>> conflicts = new HashMap<>();\n+\n+    public void addConflict(String capability, String provider) {\n+        conflicts.computeIfAbsent(capability, k -> new ArrayList<>()).add(provider);\n+    }\n+\n+    public boolean isEmpty() {\n+        return conflicts.isEmpty();\n+    }\n+\n+    public String report() {\n+        final StringWriter sw = new StringWriter();\n+        try (BufferedWriter writer = new BufferedWriter(sw)) {\n+            writer.write(\"Please make sure there is only one provider of the following capabailities.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f2115fe51bb30fd4a8f8428fdde57b3548c2e36"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzMzIwOQ==", "bodyText": "Fixed, thanks!", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r545633209", "createdAt": "2020-12-18T08:02:52Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/resolver/CapabilityErrors.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.bootstrap.resolver;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class CapabilityErrors {\n+\n+    private final Map<String, List<String>> conflicts = new HashMap<>();\n+\n+    public void addConflict(String capability, String provider) {\n+        conflicts.computeIfAbsent(capability, k -> new ArrayList<>()).add(provider);\n+    }\n+\n+    public boolean isEmpty() {\n+        return conflicts.isEmpty();\n+    }\n+\n+    public String report() {\n+        final StringWriter sw = new StringWriter();\n+        try (BufferedWriter writer = new BufferedWriter(sw)) {\n+            writer.write(\"Please make sure there is only one provider of the following capabailities.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUwMDQxNA=="}, "originalCommit": {"oid": "8f2115fe51bb30fd4a8f8428fdde57b3548c2e36"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMTU1Mzg2OnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/resolver/CapabilityErrors.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwMzo0ODoyN1rOIVZI0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwMzo0ODoyN1rOIVZI0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTMwMjg2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        writer.write(\"Please make sure there is only one provider of the following capabilities.\");\n          \n          \n            \n                        writer.write(\"Please make sure there is only one provider of the following capabilities:\");", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r559302867", "createdAt": "2021-01-18T03:48:27Z", "author": {"login": "gastaldi"}, "path": "independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/resolver/CapabilityErrors.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.bootstrap.resolver;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class CapabilityErrors {\n+\n+    private final Map<String, List<String>> conflicts = new HashMap<>();\n+\n+    public void addConflict(String capability, String provider) {\n+        conflicts.computeIfAbsent(capability, k -> new ArrayList<>()).add(provider);\n+    }\n+\n+    public boolean isEmpty() {\n+        return conflicts.isEmpty();\n+    }\n+\n+    public String report() {\n+        final StringWriter sw = new StringWriter();\n+        try (BufferedWriter writer = new BufferedWriter(sw)) {\n+            writer.write(\"Please make sure there is only one provider of the following capabilities.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c61eb0eb90bca13d0e5abb3fc62253fcbde7e181"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgyODA3MDA1OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMVQxMzowODo1NFrOJBllUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMVQxMzowODo1NFrOJBllUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0NDExMw==", "bodyText": "This kind of cast can be made safe (and more easily debuggable as a result):\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    testClass = (Class<? extends BooleanSupplier>) classLoader.loadClass(testClassName);\n          \n          \n            \n                                    testClass = classLoader.loadClass(testClassName).asSubclass(BooleanSupplier.class);", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r605644113", "createdAt": "2021-04-01T13:08:54Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -214,7 +218,45 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 .produces(RunTimeConfigurationProxyBuildItem.class)\n                 .produces(BytecodeRecorderObjectLoaderBuildItem.class)\n                 .build());\n-        return result;\n+\n+        return result.andThen(provideCapabilities(classLoader, appModel, readResult, launchMode, devModeType));\n+    }\n+\n+    private static Consumer<BuildChainBuilder> provideCapabilities(ClassLoader classLoader, AppModel appModel,\n+            BuildTimeConfigurationReader.ReadResult readResult, LaunchMode launchMode, DevModeType devModeType) {\n+        Map<Class<? extends BooleanSupplier>, BooleanSupplier> condCache = new HashMap<>();\n+\n+        Consumer<BuildChainBuilder> stepConfig = Functions.discardingConsumer();\n+        BooleanSupplier alwaysAddStep = () -> true;\n+        for (CapabilityContract contract : appModel.getCapabilityContracts().values()) {\n+            final String provider = contract.getExtension();\n+            for (String capability : contract.getProvidesCapabilities()) {\n+                int conditionIndex = capability.indexOf('?');\n+                final String name = conditionIndex < 0 ? capability : capability.substring(0, conditionIndex);\n+                BooleanSupplier buildIf = alwaysAddStep;\n+                int testClassStart;\n+                while (conditionIndex > 0) {\n+                    final boolean inv = conditionIndex < capability.length() - 1\n+                            && capability.charAt(conditionIndex + 1) == '!';\n+                    testClassStart = conditionIndex + (inv ? 2 : 1);\n+                    conditionIndex = capability.indexOf('?', testClassStart + 1);\n+                    final String testClassName = capability\n+                            .substring(testClassStart, conditionIndex > 0 ? conditionIndex : capability.length());\n+                    Class<? extends BooleanSupplier> testClass;\n+                    try {\n+                        testClass = (Class<? extends BooleanSupplier>) classLoader.loadClass(testClassName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgyODA3NzYwOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMVQxMzoxMDo0OVrOJBlqTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwODo0MDowN1rOJERObA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0NTM4OA==", "bodyText": "Could this loop not be done as a build step which produces a CapabilityBuildItem?  This kind of change to the extension loader makes it more brittle, and it was definitely intended that the build item system be able to support this kind of thing.", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r605645388", "createdAt": "2021-04-01T13:10:49Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -214,7 +218,45 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 .produces(RunTimeConfigurationProxyBuildItem.class)\n                 .produces(BytecodeRecorderObjectLoaderBuildItem.class)\n                 .build());\n-        return result;\n+\n+        return result.andThen(provideCapabilities(classLoader, appModel, readResult, launchMode, devModeType));\n+    }\n+\n+    private static Consumer<BuildChainBuilder> provideCapabilities(ClassLoader classLoader, AppModel appModel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjM4MjI5Nw==", "bodyText": "I changed the loop to add the build steps to the result directly but I am not sure whether that's what you meant. Could you clarify please? Thanks.", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r606382297", "createdAt": "2021-04-02T19:19:07Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -214,7 +218,45 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 .produces(RunTimeConfigurationProxyBuildItem.class)\n                 .produces(BytecodeRecorderObjectLoaderBuildItem.class)\n                 .build());\n-        return result;\n+\n+        return result.andThen(provideCapabilities(classLoader, appModel, readResult, launchMode, devModeType));\n+    }\n+\n+    private static Consumer<BuildChainBuilder> provideCapabilities(ClassLoader classLoader, AppModel appModel,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0NTM4OA=="}, "originalCommit": {"oid": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzA1OTg2Mg==", "bodyText": "The provideCapabilities method seems to produce one CapabilityBuildItem for each discovered capability.  Why not do this in a build step, which are able to examine the build class path and produce build items?", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r607059862", "createdAt": "2021-04-05T12:20:31Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -214,7 +218,45 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 .produces(RunTimeConfigurationProxyBuildItem.class)\n                 .produces(BytecodeRecorderObjectLoaderBuildItem.class)\n                 .build());\n-        return result;\n+\n+        return result.andThen(provideCapabilities(classLoader, appModel, readResult, launchMode, devModeType));\n+    }\n+\n+    private static Consumer<BuildChainBuilder> provideCapabilities(ClassLoader classLoader, AppModel appModel,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0NTM4OA=="}, "originalCommit": {"oid": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODQ1NjMwMA==", "bodyText": "Could you please review the last commit? Also I noticed the condition cache (condCache) is created per buildIf call. Should we create a global one, e.g. in public static Consumer<BuildChainBuilder> loadStepsFrom(ClassLoader classLoader, Properties buildSystemProps, AppModel appModel, LaunchMode launchMode, DevModeType devModeType, Consumer<ConfigBuilder> configCustomizer)? Thanks!", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r608456300", "createdAt": "2021-04-07T08:40:07Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -214,7 +218,45 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 .produces(RunTimeConfigurationProxyBuildItem.class)\n                 .produces(BytecodeRecorderObjectLoaderBuildItem.class)\n                 .build());\n-        return result;\n+\n+        return result.andThen(provideCapabilities(classLoader, appModel, readResult, launchMode, devModeType));\n+    }\n+\n+    private static Consumer<BuildChainBuilder> provideCapabilities(ClassLoader classLoader, AppModel appModel,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0NTM4OA=="}, "originalCommit": {"oid": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgyODA5Nzc1OnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/model/AppModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMVQxMzoxNTozMVrOJBl2tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMlQxOToyNTo1NVrOJCSx_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0ODU2Ng==", "bodyText": "Is this constructor still used? It might be better to move everything over to the builder constructor.", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r605648566", "createdAt": "2021-04-01T13:15:31Z", "author": {"login": "dmlloyd"}, "path": "independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/model/AppModel.java", "diffHunk": "@@ -62,20 +62,14 @@\n \n     private final Map<String, String> platformProperties;\n \n-    private AppModel(AppArtifact appArtifact, List<AppDependency> runtimeDeps, List<AppDependency> deploymentDeps,\n-            List<AppDependency> fullDeploymentDeps, Set<AppArtifactKey> parentFirstArtifacts,\n-            Set<AppArtifactKey> runnerParentFirstArtifacts, Set<AppArtifactKey> lesserPriorityArtifacts,\n-            Set<AppArtifactKey> localProjectArtifacts) {\n-        this(appArtifact, runtimeDeps, deploymentDeps, fullDeploymentDeps, parentFirstArtifacts, runnerParentFirstArtifacts,\n-                lesserPriorityArtifacts,\n-                localProjectArtifacts, Collections.emptyMap());\n-    }\n+    private final Map<String, CapabilityContract> capabilitiesContracts;\n \n     private AppModel(AppArtifact appArtifact, List<AppDependency> runtimeDeps, List<AppDependency> deploymentDeps,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjM4NDYzOA==", "bodyText": "It isn't, so I removed it. Now I noticed this class implements java.io.Serializable. But it does not declare any non-private constructor. I guess I can also remove Serializable from it.", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r606384638", "createdAt": "2021-04-02T19:25:55Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/app-model/src/main/java/io/quarkus/bootstrap/model/AppModel.java", "diffHunk": "@@ -62,20 +62,14 @@\n \n     private final Map<String, String> platformProperties;\n \n-    private AppModel(AppArtifact appArtifact, List<AppDependency> runtimeDeps, List<AppDependency> deploymentDeps,\n-            List<AppDependency> fullDeploymentDeps, Set<AppArtifactKey> parentFirstArtifacts,\n-            Set<AppArtifactKey> runnerParentFirstArtifacts, Set<AppArtifactKey> lesserPriorityArtifacts,\n-            Set<AppArtifactKey> localProjectArtifacts) {\n-        this(appArtifact, runtimeDeps, deploymentDeps, fullDeploymentDeps, parentFirstArtifacts, runnerParentFirstArtifacts,\n-                lesserPriorityArtifacts,\n-                localProjectArtifacts, Collections.emptyMap());\n-    }\n+    private final Map<String, CapabilityContract> capabilitiesContracts;\n \n     private AppModel(AppArtifact appArtifact, List<AppDependency> runtimeDeps, List<AppDependency> deploymentDeps,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0ODU2Ng=="}, "originalCommit": {"oid": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgyODEwMzI2OnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMVQxMzoxNjo0NFrOJBl59Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMlQxOToyNjozMFrOJCSy1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0OTM5Nw==", "bodyText": "Is there a compelling reason to make these fields protected?", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r605649397", "createdAt": "2021-04-01T13:16:44Z", "author": {"login": "dmlloyd"}, "path": "independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.maven.capabilities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CapabilityConfig {\n+\n+    protected String name;\n+    protected List<String> onlyIf = new ArrayList<>(0);\n+    protected List<String> onlyIfNot = new ArrayList<>(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjM4NDg1NA==", "bodyText": "I've made them private.", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r606384854", "createdAt": "2021-04-02T19:26:30Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.maven.capabilities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CapabilityConfig {\n+\n+    protected String name;\n+    protected List<String> onlyIf = new ArrayList<>(0);\n+    protected List<String> onlyIfNot = new ArrayList<>(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0OTM5Nw=="}, "originalCommit": {"oid": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgyODEwNDIxOnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMVQxMzoxNjo1OVrOJBl6gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMlQxOToyNjo0N1rOJCSzQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0OTUzOQ==", "bodyText": "Can these be final?", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r605649539", "createdAt": "2021-04-01T13:16:59Z", "author": {"login": "dmlloyd"}, "path": "independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.maven.capabilities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CapabilityConfig {\n+\n+    protected String name;\n+    protected List<String> onlyIf = new ArrayList<>(0);\n+    protected List<String> onlyIfNot = new ArrayList<>(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjM4NDk2MA==", "bodyText": "Made them final.", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r606384960", "createdAt": "2021-04-02T19:26:47Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/maven-plugin/src/main/java/io/quarkus/maven/capabilities/CapabilityConfig.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.maven.capabilities;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CapabilityConfig {\n+\n+    protected String name;\n+    protected List<String> onlyIf = new ArrayList<>(0);\n+    protected List<String> onlyIfNot = new ArrayList<>(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTY0OTUzOQ=="}, "originalCommit": {"oid": "8e1c5783e71775ca295e6d5c3fe57152ea31e8fa"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg1MDIzNjU2OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QxODowMzo1NVrOJEq9Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQyMDo0NDoxMFrOJHl77A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODg3Nzg4Mg==", "bodyText": "Now that this is done as a build step, could it possibly be done as a build step class in io/quarkus/deployment/steps?", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r608877882", "createdAt": "2021-04-07T18:03:55Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -226,36 +226,38 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n             AppModel appModel,\n             BuildTimeConfigurationReader.ReadResult readResult, LaunchMode launchMode, DevModeType devModeType) {\n         Map<Class<? extends BooleanSupplier>, BooleanSupplier> condCache = new HashMap<>();\n-\n-        BooleanSupplier alwaysAddStep = () -> true;\n-        for (CapabilityContract contract : appModel.getCapabilityContracts().values()) {\n-            final String provider = contract.getExtension();\n-            for (String capability : contract.getProvidesCapabilities()) {\n-                int conditionIndex = capability.indexOf('?');\n-                final String name = conditionIndex < 0 ? capability : capability.substring(0, conditionIndex);\n-                BooleanSupplier buildIf = alwaysAddStep;\n-                int testClassStart;\n-                while (conditionIndex > 0) {\n-                    final boolean inv = conditionIndex < capability.length() - 1\n-                            && capability.charAt(conditionIndex + 1) == '!';\n-                    testClassStart = conditionIndex + (inv ? 2 : 1);\n-                    conditionIndex = capability.indexOf('?', testClassStart + 1);\n-                    final String testClassName = capability\n-                            .substring(testClassStart, conditionIndex > 0 ? conditionIndex : capability.length());\n-                    Class<? extends BooleanSupplier> testClass;\n-                    try {\n-                        testClass = classLoader.loadClass(testClassName).asSubclass(BooleanSupplier.class);\n-                    } catch (ClassNotFoundException e) {\n-                        throw new RuntimeException(\"Failed to load capability condition class \" + testClassName, e);\n+        final BooleanSupplier alwaysAddStep = () -> true;\n+        result = result.andThen(bcb -> bcb.addBuildStep(bc -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5ea8f6c4c8ff7f5d35b67729352afb42e995b1e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDcwNzQzMg==", "bodyText": "Right, finally I got it. I added ProvideCapabilitiesBuildStep. I didn't want to re-implement BooleanSupplier instantiation code, so I extracted it to a public static method in the ExtensionLoader, which might not be the best idea. Which also means the suppliers will be created on every demand.  Would it make sense to have some global cache for them?", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r610707432", "createdAt": "2021-04-09T15:13:33Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -226,36 +226,38 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n             AppModel appModel,\n             BuildTimeConfigurationReader.ReadResult readResult, LaunchMode launchMode, DevModeType devModeType) {\n         Map<Class<? extends BooleanSupplier>, BooleanSupplier> condCache = new HashMap<>();\n-\n-        BooleanSupplier alwaysAddStep = () -> true;\n-        for (CapabilityContract contract : appModel.getCapabilityContracts().values()) {\n-            final String provider = contract.getExtension();\n-            for (String capability : contract.getProvidesCapabilities()) {\n-                int conditionIndex = capability.indexOf('?');\n-                final String name = conditionIndex < 0 ? capability : capability.substring(0, conditionIndex);\n-                BooleanSupplier buildIf = alwaysAddStep;\n-                int testClassStart;\n-                while (conditionIndex > 0) {\n-                    final boolean inv = conditionIndex < capability.length() - 1\n-                            && capability.charAt(conditionIndex + 1) == '!';\n-                    testClassStart = conditionIndex + (inv ? 2 : 1);\n-                    conditionIndex = capability.indexOf('?', testClassStart + 1);\n-                    final String testClassName = capability\n-                            .substring(testClassStart, conditionIndex > 0 ? conditionIndex : capability.length());\n-                    Class<? extends BooleanSupplier> testClass;\n-                    try {\n-                        testClass = classLoader.loadClass(testClassName).asSubclass(BooleanSupplier.class);\n-                    } catch (ClassNotFoundException e) {\n-                        throw new RuntimeException(\"Failed to load capability condition class \" + testClassName, e);\n+        final BooleanSupplier alwaysAddStep = () -> true;\n+        result = result.andThen(bcb -> bcb.addBuildStep(bc -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODg3Nzg4Mg=="}, "originalCommit": {"oid": "a5ea8f6c4c8ff7f5d35b67729352afb42e995b1e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDcwODE0Mw==", "bodyText": "I could probably move the step I added to the CapabilityAggregationStep instead.", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r610708143", "createdAt": "2021-04-09T15:14:37Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -226,36 +226,38 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n             AppModel appModel,\n             BuildTimeConfigurationReader.ReadResult readResult, LaunchMode launchMode, DevModeType devModeType) {\n         Map<Class<? extends BooleanSupplier>, BooleanSupplier> condCache = new HashMap<>();\n-\n-        BooleanSupplier alwaysAddStep = () -> true;\n-        for (CapabilityContract contract : appModel.getCapabilityContracts().values()) {\n-            final String provider = contract.getExtension();\n-            for (String capability : contract.getProvidesCapabilities()) {\n-                int conditionIndex = capability.indexOf('?');\n-                final String name = conditionIndex < 0 ? capability : capability.substring(0, conditionIndex);\n-                BooleanSupplier buildIf = alwaysAddStep;\n-                int testClassStart;\n-                while (conditionIndex > 0) {\n-                    final boolean inv = conditionIndex < capability.length() - 1\n-                            && capability.charAt(conditionIndex + 1) == '!';\n-                    testClassStart = conditionIndex + (inv ? 2 : 1);\n-                    conditionIndex = capability.indexOf('?', testClassStart + 1);\n-                    final String testClassName = capability\n-                            .substring(testClassStart, conditionIndex > 0 ? conditionIndex : capability.length());\n-                    Class<? extends BooleanSupplier> testClass;\n-                    try {\n-                        testClass = classLoader.loadClass(testClassName).asSubclass(BooleanSupplier.class);\n-                    } catch (ClassNotFoundException e) {\n-                        throw new RuntimeException(\"Failed to load capability condition class \" + testClassName, e);\n+        final BooleanSupplier alwaysAddStep = () -> true;\n+        result = result.andThen(bcb -> bcb.addBuildStep(bc -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODg3Nzg4Mg=="}, "originalCommit": {"oid": "a5ea8f6c4c8ff7f5d35b67729352afb42e995b1e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDcwOTg4NA==", "bodyText": "A global cache is reasonable.  The ClassValue class exists to associate values with classes in a less-leaky kind of way; that seems like the safest approach.", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r610709884", "createdAt": "2021-04-09T15:16:46Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -226,36 +226,38 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n             AppModel appModel,\n             BuildTimeConfigurationReader.ReadResult readResult, LaunchMode launchMode, DevModeType devModeType) {\n         Map<Class<? extends BooleanSupplier>, BooleanSupplier> condCache = new HashMap<>();\n-\n-        BooleanSupplier alwaysAddStep = () -> true;\n-        for (CapabilityContract contract : appModel.getCapabilityContracts().values()) {\n-            final String provider = contract.getExtension();\n-            for (String capability : contract.getProvidesCapabilities()) {\n-                int conditionIndex = capability.indexOf('?');\n-                final String name = conditionIndex < 0 ? capability : capability.substring(0, conditionIndex);\n-                BooleanSupplier buildIf = alwaysAddStep;\n-                int testClassStart;\n-                while (conditionIndex > 0) {\n-                    final boolean inv = conditionIndex < capability.length() - 1\n-                            && capability.charAt(conditionIndex + 1) == '!';\n-                    testClassStart = conditionIndex + (inv ? 2 : 1);\n-                    conditionIndex = capability.indexOf('?', testClassStart + 1);\n-                    final String testClassName = capability\n-                            .substring(testClassStart, conditionIndex > 0 ? conditionIndex : capability.length());\n-                    Class<? extends BooleanSupplier> testClass;\n-                    try {\n-                        testClass = classLoader.loadClass(testClassName).asSubclass(BooleanSupplier.class);\n-                    } catch (ClassNotFoundException e) {\n-                        throw new RuntimeException(\"Failed to load capability condition class \" + testClassName, e);\n+        final BooleanSupplier alwaysAddStep = () -> true;\n+        result = result.andThen(bcb -> bcb.addBuildStep(bc -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODg3Nzg4Mg=="}, "originalCommit": {"oid": "a5ea8f6c4c8ff7f5d35b67729352afb42e995b1e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTk0MTM1Ng==", "bodyText": "@dmlloyd could you please give it another look? I introduced BooleanSupplierFactoryBuildItem as a global factory and cache of BooleanSuppliers.", "url": "https://github.com/quarkusio/quarkus/pull/13960#discussion_r611941356", "createdAt": "2021-04-12T20:44:10Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -226,36 +226,38 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n             AppModel appModel,\n             BuildTimeConfigurationReader.ReadResult readResult, LaunchMode launchMode, DevModeType devModeType) {\n         Map<Class<? extends BooleanSupplier>, BooleanSupplier> condCache = new HashMap<>();\n-\n-        BooleanSupplier alwaysAddStep = () -> true;\n-        for (CapabilityContract contract : appModel.getCapabilityContracts().values()) {\n-            final String provider = contract.getExtension();\n-            for (String capability : contract.getProvidesCapabilities()) {\n-                int conditionIndex = capability.indexOf('?');\n-                final String name = conditionIndex < 0 ? capability : capability.substring(0, conditionIndex);\n-                BooleanSupplier buildIf = alwaysAddStep;\n-                int testClassStart;\n-                while (conditionIndex > 0) {\n-                    final boolean inv = conditionIndex < capability.length() - 1\n-                            && capability.charAt(conditionIndex + 1) == '!';\n-                    testClassStart = conditionIndex + (inv ? 2 : 1);\n-                    conditionIndex = capability.indexOf('?', testClassStart + 1);\n-                    final String testClassName = capability\n-                            .substring(testClassStart, conditionIndex > 0 ? conditionIndex : capability.length());\n-                    Class<? extends BooleanSupplier> testClass;\n-                    try {\n-                        testClass = classLoader.loadClass(testClassName).asSubclass(BooleanSupplier.class);\n-                    } catch (ClassNotFoundException e) {\n-                        throw new RuntimeException(\"Failed to load capability condition class \" + testClassName, e);\n+        final BooleanSupplier alwaysAddStep = () -> true;\n+        result = result.andThen(bcb -> bcb.addBuildStep(bc -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODg3Nzg4Mg=="}, "originalCommit": {"oid": "a5ea8f6c4c8ff7f5d35b67729352afb42e995b1e"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4422, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}