{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4OTE1NTcx", "number": 11080, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjo0Nzo1OVrOETi2kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozNjoyN1rOETn9kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTI5NDI1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjo0Nzo1OVrOG5VfHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjo0Nzo1OVrOG5VfHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NDA0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Both RESTassured and ``@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n          \n          \n            \n            Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462774045", "createdAt": "2020-07-30T06:47:59Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,115 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and ``@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc93842cc70386fa01d33cdf2080190df9a1dd8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTI5NjI1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjo0ODoyNFrOG5VgVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjo0ODoyNFrOG5VgVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3NDM1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            a path. This current supports both JAX-RS endpoints and Servlet's. This makes it a lot easier to see exactly which endpoints\n          \n          \n            \n            a path. This currently supports both JAX-RS endpoints and Servlets. This makes it a lot easier to see exactly which endpoints", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462774356", "createdAt": "2020-07-30T06:48:24Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,115 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and ``@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n+a path. This current supports both JAX-RS endpoints and Servlet's. This makes it a lot easier to see exactly which endpoints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc93842cc70386fa01d33cdf2080190df9a1dd8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTM0ODQyOnYy", "diffSide": "RIGHT", "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjo1ODo0N1rOG5V_nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxNToxMFrOG5W01A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MjM2NA==", "bodyText": "Does this really need to be volatile?", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462782364", "createdAt": "2020-07-30T06:58:47Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java", "diffHunk": "@@ -103,6 +105,7 @@\n     private static List<Object> afterEachCallbacks;\n     private static Class<?> quarkusTestMethodContextClass;\n     private static Class<? extends QuarkusTestProfile> quarkusTestProfile;\n+    private static volatile List<Function<Class<?>, String>> testHttpEndpointProviders;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc93842cc70386fa01d33cdf2080190df9a1dd8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NTk4OA==", "bodyText": "no, the original approach I took with this had it being set from a buildstep, but that was compex and would not work in native, so I abandoned the approach.", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462795988", "createdAt": "2020-07-30T07:15:10Z", "author": {"login": "stuartwdouglas"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java", "diffHunk": "@@ -103,6 +105,7 @@\n     private static List<Object> afterEachCallbacks;\n     private static Class<?> quarkusTestMethodContextClass;\n     private static Class<? extends QuarkusTestProfile> quarkusTestProfile;\n+    private static volatile List<Function<Class<?>, String>> testHttpEndpointProviders;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MjM2NA=="}, "originalCommit": {"oid": "ccc93842cc70386fa01d33cdf2080190df9a1dd8"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDEzMTM3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "isResolved": true, "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozNjoyN1rOG5dlmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjoxMjoxNFrOG5gUvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjc3OQ==", "bodyText": "Does it take into account the root path? And the potential @ApplicationPath?", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462906779", "createdAt": "2020-07-30T10:36:27Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,118 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n+a path. This currently supports both JAX-RS endpoints and Servlets. This makes it a lot easier to see exactly which endpoints\n+a given test is testing.\n+\n+For the purposes of these examples I am going to assume we have an endpoint that looks like the following:\n+\n+[source,java]\n+----\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+NOTE: This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the\n+`quarkus.resteasy.path` config value instead if you want a custom context path.\n+\n+=== TestHTTPResource\n+\n+You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n+will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n+be appended to the end of the endpoint path.\n+\n+[source,java]\n+----\n+package org.acme.getting.started.testing;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class StaticContentTest {\n+\n+    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n+    @TestHTTPResource\n+    URL url;\n+\n+    @Test\n+    public void testIndexHtml() throws Exception {\n+        try (InputStream in = url.openStream()) {\n+            String contents = readStream(in);\n+            Assertions.assertTrue(contents.equals(\"hello\"));\n+        }\n+    }\n+\n+    private static String readStream(InputStream in) throws IOException {\n+        byte[] data = new byte[1024];\n+        int r;\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        while ((r = in.read(data)) > 0) {\n+            out.write(data, 0, r);\n+        }\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+}\n+----\n+<1> Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52da5e265e0b44784b39b27b5b716e4f4bc8233d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNzkxMA==", "bodyText": "@ApplicationPath is mentioned in the doc to not be supported", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462907910", "createdAt": "2020-07-30T10:38:51Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,118 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n+a path. This currently supports both JAX-RS endpoints and Servlets. This makes it a lot easier to see exactly which endpoints\n+a given test is testing.\n+\n+For the purposes of these examples I am going to assume we have an endpoint that looks like the following:\n+\n+[source,java]\n+----\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+NOTE: This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the\n+`quarkus.resteasy.path` config value instead if you want a custom context path.\n+\n+=== TestHTTPResource\n+\n+You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n+will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n+be appended to the end of the endpoint path.\n+\n+[source,java]\n+----\n+package org.acme.getting.started.testing;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class StaticContentTest {\n+\n+    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n+    @TestHTTPResource\n+    URL url;\n+\n+    @Test\n+    public void testIndexHtml() throws Exception {\n+        try (InputStream in = url.openStream()) {\n+            String contents = readStream(in);\n+            Assertions.assertTrue(contents.equals(\"hello\"));\n+        }\n+    }\n+\n+    private static String readStream(InputStream in) throws IOException {\n+        byte[] data = new byte[1024];\n+        int r;\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        while ((r = in.read(data)) > 0) {\n+            out.write(data, 0, r);\n+        }\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+}\n+----\n+<1> Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjc3OQ=="}, "originalCommit": {"oid": "52da5e265e0b44784b39b27b5b716e4f4bc8233d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwODE0NA==", "bodyText": "quarkus.resteasy.path is supported", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462908144", "createdAt": "2020-07-30T10:39:18Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,118 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n+a path. This currently supports both JAX-RS endpoints and Servlets. This makes it a lot easier to see exactly which endpoints\n+a given test is testing.\n+\n+For the purposes of these examples I am going to assume we have an endpoint that looks like the following:\n+\n+[source,java]\n+----\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+NOTE: This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the\n+`quarkus.resteasy.path` config value instead if you want a custom context path.\n+\n+=== TestHTTPResource\n+\n+You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n+will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n+be appended to the end of the endpoint path.\n+\n+[source,java]\n+----\n+package org.acme.getting.started.testing;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class StaticContentTest {\n+\n+    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n+    @TestHTTPResource\n+    URL url;\n+\n+    @Test\n+    public void testIndexHtml() throws Exception {\n+        try (InputStream in = url.openStream()) {\n+            String contents = readStream(in);\n+            Assertions.assertTrue(contents.equals(\"hello\"));\n+        }\n+    }\n+\n+    private static String readStream(InputStream in) throws IOException {\n+        byte[] data = new byte[1024];\n+        int r;\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        while ((r = in.read(data)) > 0) {\n+            out.write(data, 0, r);\n+        }\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+}\n+----\n+<1> Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjc3OQ=="}, "originalCommit": {"oid": "52da5e265e0b44784b39b27b5b716e4f4bc8233d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMDM2Nw==", "bodyText": "OK, sorry for the noise then :).", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462920367", "createdAt": "2020-07-30T11:04:58Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,118 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n+a path. This currently supports both JAX-RS endpoints and Servlets. This makes it a lot easier to see exactly which endpoints\n+a given test is testing.\n+\n+For the purposes of these examples I am going to assume we have an endpoint that looks like the following:\n+\n+[source,java]\n+----\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+NOTE: This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the\n+`quarkus.resteasy.path` config value instead if you want a custom context path.\n+\n+=== TestHTTPResource\n+\n+You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n+will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n+be appended to the end of the endpoint path.\n+\n+[source,java]\n+----\n+package org.acme.getting.started.testing;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class StaticContentTest {\n+\n+    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n+    @TestHTTPResource\n+    URL url;\n+\n+    @Test\n+    public void testIndexHtml() throws Exception {\n+        try (InputStream in = url.openStream()) {\n+            String contents = readStream(in);\n+            Assertions.assertTrue(contents.equals(\"hello\"));\n+        }\n+    }\n+\n+    private static String readStream(InputStream in) throws IOException {\n+        byte[] data = new byte[1024];\n+        int r;\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        while ((r = in.read(data)) > 0) {\n+            out.write(data, 0, r);\n+        }\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+}\n+----\n+<1> Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjc3OQ=="}, "originalCommit": {"oid": "52da5e265e0b44784b39b27b5b716e4f4bc8233d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMTMyNA==", "bodyText": "No worries :)", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462921324", "createdAt": "2020-07-30T11:07:08Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,118 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n+a path. This currently supports both JAX-RS endpoints and Servlets. This makes it a lot easier to see exactly which endpoints\n+a given test is testing.\n+\n+For the purposes of these examples I am going to assume we have an endpoint that looks like the following:\n+\n+[source,java]\n+----\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+NOTE: This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the\n+`quarkus.resteasy.path` config value instead if you want a custom context path.\n+\n+=== TestHTTPResource\n+\n+You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n+will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n+be appended to the end of the endpoint path.\n+\n+[source,java]\n+----\n+package org.acme.getting.started.testing;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class StaticContentTest {\n+\n+    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n+    @TestHTTPResource\n+    URL url;\n+\n+    @Test\n+    public void testIndexHtml() throws Exception {\n+        try (InputStream in = url.openStream()) {\n+            String contents = readStream(in);\n+            Assertions.assertTrue(contents.equals(\"hello\"));\n+        }\n+    }\n+\n+    private static String readStream(InputStream in) throws IOException {\n+        byte[] data = new byte[1024];\n+        int r;\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        while ((r = in.read(data)) > 0) {\n+            out.write(data, 0, r);\n+        }\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+}\n+----\n+<1> Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjc3OQ=="}, "originalCommit": {"oid": "52da5e265e0b44784b39b27b5b716e4f4bc8233d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMTQ1NA==", "bodyText": "I could not really think of a way to handle it in native mode that was not just re-indexing everything. It seemed like a small caveat to an otherwise nice feature though.\nWhen this is in should we change our quickstarts and guides to use it?", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462921454", "createdAt": "2020-07-30T11:07:24Z", "author": {"login": "stuartwdouglas"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,118 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n+a path. This currently supports both JAX-RS endpoints and Servlets. This makes it a lot easier to see exactly which endpoints\n+a given test is testing.\n+\n+For the purposes of these examples I am going to assume we have an endpoint that looks like the following:\n+\n+[source,java]\n+----\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+NOTE: This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the\n+`quarkus.resteasy.path` config value instead if you want a custom context path.\n+\n+=== TestHTTPResource\n+\n+You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n+will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n+be appended to the end of the endpoint path.\n+\n+[source,java]\n+----\n+package org.acme.getting.started.testing;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class StaticContentTest {\n+\n+    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n+    @TestHTTPResource\n+    URL url;\n+\n+    @Test\n+    public void testIndexHtml() throws Exception {\n+        try (InputStream in = url.openStream()) {\n+            String contents = readStream(in);\n+            Assertions.assertTrue(contents.equals(\"hello\"));\n+        }\n+    }\n+\n+    private static String readStream(InputStream in) throws IOException {\n+        byte[] data = new byte[1024];\n+        int r;\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        while ((r = in.read(data)) > 0) {\n+            out.write(data, 0, r);\n+        }\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+}\n+----\n+<1> Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjc3OQ=="}, "originalCommit": {"oid": "52da5e265e0b44784b39b27b5b716e4f4bc8233d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMjQ3MQ==", "bodyText": "Yeah, that would be the best to make it known to users", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462922471", "createdAt": "2020-07-30T11:09:43Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,118 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n+a path. This currently supports both JAX-RS endpoints and Servlets. This makes it a lot easier to see exactly which endpoints\n+a given test is testing.\n+\n+For the purposes of these examples I am going to assume we have an endpoint that looks like the following:\n+\n+[source,java]\n+----\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+NOTE: This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the\n+`quarkus.resteasy.path` config value instead if you want a custom context path.\n+\n+=== TestHTTPResource\n+\n+You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n+will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n+be appended to the end of the endpoint path.\n+\n+[source,java]\n+----\n+package org.acme.getting.started.testing;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class StaticContentTest {\n+\n+    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n+    @TestHTTPResource\n+    URL url;\n+\n+    @Test\n+    public void testIndexHtml() throws Exception {\n+        try (InputStream in = url.openStream()) {\n+            String contents = readStream(in);\n+            Assertions.assertTrue(contents.equals(\"hello\"));\n+        }\n+    }\n+\n+    private static String readStream(InputStream in) throws IOException {\n+        byte[] data = new byte[1024];\n+        int r;\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        while ((r = in.read(data)) > 0) {\n+            out.write(data, 0, r);\n+        }\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+}\n+----\n+<1> Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjc3OQ=="}, "originalCommit": {"oid": "52da5e265e0b44784b39b27b5b716e4f4bc8233d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMjczOA==", "bodyText": "@stuartwdouglas are you planning on doing the follow up for reactive routes, or should I?", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462922738", "createdAt": "2020-07-30T11:10:13Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,118 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n+a path. This currently supports both JAX-RS endpoints and Servlets. This makes it a lot easier to see exactly which endpoints\n+a given test is testing.\n+\n+For the purposes of these examples I am going to assume we have an endpoint that looks like the following:\n+\n+[source,java]\n+----\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+NOTE: This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the\n+`quarkus.resteasy.path` config value instead if you want a custom context path.\n+\n+=== TestHTTPResource\n+\n+You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n+will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n+be appended to the end of the endpoint path.\n+\n+[source,java]\n+----\n+package org.acme.getting.started.testing;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class StaticContentTest {\n+\n+    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n+    @TestHTTPResource\n+    URL url;\n+\n+    @Test\n+    public void testIndexHtml() throws Exception {\n+        try (InputStream in = url.openStream()) {\n+            String contents = readStream(in);\n+            Assertions.assertTrue(contents.equals(\"hello\"));\n+        }\n+    }\n+\n+    private static String readStream(InputStream in) throws IOException {\n+        byte[] data = new byte[1024];\n+        int r;\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        while ((r = in.read(data)) > 0) {\n+            out.write(data, 0, r);\n+        }\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+}\n+----\n+<1> Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjc3OQ=="}, "originalCommit": {"oid": "52da5e265e0b44784b39b27b5b716e4f4bc8233d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyNjk1NQ==", "bodyText": "I am not doing anything more tonight, if you don't do it I will look at it tomorrow. We could also do Websockets, although they support URI templates in their path so it would need to just register the constant part of the template.", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462926955", "createdAt": "2020-07-30T11:19:27Z", "author": {"login": "stuartwdouglas"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,118 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n+a path. This currently supports both JAX-RS endpoints and Servlets. This makes it a lot easier to see exactly which endpoints\n+a given test is testing.\n+\n+For the purposes of these examples I am going to assume we have an endpoint that looks like the following:\n+\n+[source,java]\n+----\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+NOTE: This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the\n+`quarkus.resteasy.path` config value instead if you want a custom context path.\n+\n+=== TestHTTPResource\n+\n+You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n+will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n+be appended to the end of the endpoint path.\n+\n+[source,java]\n+----\n+package org.acme.getting.started.testing;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class StaticContentTest {\n+\n+    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n+    @TestHTTPResource\n+    URL url;\n+\n+    @Test\n+    public void testIndexHtml() throws Exception {\n+        try (InputStream in = url.openStream()) {\n+            String contents = readStream(in);\n+            Assertions.assertTrue(contents.equals(\"hello\"));\n+        }\n+    }\n+\n+    private static String readStream(InputStream in) throws IOException {\n+        byte[] data = new byte[1024];\n+        int r;\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        while ((r = in.read(data)) > 0) {\n+            out.write(data, 0, r);\n+        }\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+}\n+----\n+<1> Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjc3OQ=="}, "originalCommit": {"oid": "52da5e265e0b44784b39b27b5b716e4f4bc8233d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyOTAyNQ==", "bodyText": "I have lowered the revs on the engine with PTO approaching, so I may or may not do it today :). In any case I'll let you know.", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462929025", "createdAt": "2020-07-30T11:23:45Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,118 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n+a path. This currently supports both JAX-RS endpoints and Servlets. This makes it a lot easier to see exactly which endpoints\n+a given test is testing.\n+\n+For the purposes of these examples I am going to assume we have an endpoint that looks like the following:\n+\n+[source,java]\n+----\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+NOTE: This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the\n+`quarkus.resteasy.path` config value instead if you want a custom context path.\n+\n+=== TestHTTPResource\n+\n+You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n+will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n+be appended to the end of the endpoint path.\n+\n+[source,java]\n+----\n+package org.acme.getting.started.testing;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class StaticContentTest {\n+\n+    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n+    @TestHTTPResource\n+    URL url;\n+\n+    @Test\n+    public void testIndexHtml() throws Exception {\n+        try (InputStream in = url.openStream()) {\n+            String contents = readStream(in);\n+            Assertions.assertTrue(contents.equals(\"hello\"));\n+        }\n+    }\n+\n+    private static String readStream(InputStream in) throws IOException {\n+        byte[] data = new byte[1024];\n+        int r;\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        while ((r = in.read(data)) > 0) {\n+            out.write(data, 0, r);\n+        }\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+}\n+----\n+<1> Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjc3OQ=="}, "originalCommit": {"oid": "52da5e265e0b44784b39b27b5b716e4f4bc8233d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzNzg0Mw==", "bodyText": "I will just do it tomorrow, its simple and there is no hurry.", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462937843", "createdAt": "2020-07-30T11:42:23Z", "author": {"login": "stuartwdouglas"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,118 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n+a path. This currently supports both JAX-RS endpoints and Servlets. This makes it a lot easier to see exactly which endpoints\n+a given test is testing.\n+\n+For the purposes of these examples I am going to assume we have an endpoint that looks like the following:\n+\n+[source,java]\n+----\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+NOTE: This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the\n+`quarkus.resteasy.path` config value instead if you want a custom context path.\n+\n+=== TestHTTPResource\n+\n+You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n+will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n+be appended to the end of the endpoint path.\n+\n+[source,java]\n+----\n+package org.acme.getting.started.testing;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class StaticContentTest {\n+\n+    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n+    @TestHTTPResource\n+    URL url;\n+\n+    @Test\n+    public void testIndexHtml() throws Exception {\n+        try (InputStream in = url.openStream()) {\n+            String contents = readStream(in);\n+            Assertions.assertTrue(contents.equals(\"hello\"));\n+        }\n+    }\n+\n+    private static String readStream(InputStream in) throws IOException {\n+        byte[] data = new byte[1024];\n+        int r;\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        while ((r = in.read(data)) > 0) {\n+            out.write(data, 0, r);\n+        }\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+}\n+----\n+<1> Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjc3OQ=="}, "originalCommit": {"oid": "52da5e265e0b44784b39b27b5b716e4f4bc8233d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzOTA1NQ==", "bodyText": "Yeah I know. The rest of my day is probably going to be pretty light so I'll most likely do it", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462939055", "createdAt": "2020-07-30T11:45:01Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,118 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n+a path. This currently supports both JAX-RS endpoints and Servlets. This makes it a lot easier to see exactly which endpoints\n+a given test is testing.\n+\n+For the purposes of these examples I am going to assume we have an endpoint that looks like the following:\n+\n+[source,java]\n+----\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+NOTE: This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the\n+`quarkus.resteasy.path` config value instead if you want a custom context path.\n+\n+=== TestHTTPResource\n+\n+You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n+will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n+be appended to the end of the endpoint path.\n+\n+[source,java]\n+----\n+package org.acme.getting.started.testing;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class StaticContentTest {\n+\n+    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n+    @TestHTTPResource\n+    URL url;\n+\n+    @Test\n+    public void testIndexHtml() throws Exception {\n+        try (InputStream in = url.openStream()) {\n+            String contents = readStream(in);\n+            Assertions.assertTrue(contents.equals(\"hello\"));\n+        }\n+    }\n+\n+    private static String readStream(InputStream in) throws IOException {\n+        byte[] data = new byte[1024];\n+        int r;\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        while ((r = in.read(data)) > 0) {\n+            out.write(data, 0, r);\n+        }\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+}\n+----\n+<1> Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjc3OQ=="}, "originalCommit": {"oid": "52da5e265e0b44784b39b27b5b716e4f4bc8233d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1MTYxMw==", "bodyText": "I didn't realize it would be that easy :) #11092", "url": "https://github.com/quarkusio/quarkus/pull/11080#discussion_r462951613", "createdAt": "2020-07-30T12:12:14Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -228,6 +228,118 @@ public class StaticContentTest {\n \n For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL.\n \n+== Testing a specific endpoint\n+\n+Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n+a path. This currently supports both JAX-RS endpoints and Servlets. This makes it a lot easier to see exactly which endpoints\n+a given test is testing.\n+\n+For the purposes of these examples I am going to assume we have an endpoint that looks like the following:\n+\n+[source,java]\n+----\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+NOTE: This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the\n+`quarkus.resteasy.path` config value instead if you want a custom context path.\n+\n+=== TestHTTPResource\n+\n+You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n+will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n+be appended to the end of the endpoint path.\n+\n+[source,java]\n+----\n+package org.acme.getting.started.testing;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.common.http.TestHTTPResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class StaticContentTest {\n+\n+    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n+    @TestHTTPResource\n+    URL url;\n+\n+    @Test\n+    public void testIndexHtml() throws Exception {\n+        try (InputStream in = url.openStream()) {\n+            String contents = readStream(in);\n+            Assertions.assertTrue(contents.equals(\"hello\"));\n+        }\n+    }\n+\n+    private static String readStream(InputStream in) throws IOException {\n+        byte[] data = new byte[1024];\n+        int r;\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        while ((r = in.read(data)) > 0) {\n+            out.write(data, 0, r);\n+        }\n+        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n+    }\n+}\n+----\n+<1> Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNjc3OQ=="}, "originalCommit": {"oid": "52da5e265e0b44784b39b27b5b716e4f4bc8233d"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 772, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}