{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxODI2MTMw", "number": 9531, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzozMzowMVrOD_BgXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMDoyMToyNlrOD_PF5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDExNTUwOnYy", "diffSide": "RIGHT", "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/ScannerTransformer.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzozMzowMVrOGZeyQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo1OTo1M1rOGZfgpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MTk3MQ==", "bodyText": "Can we add a link to the issue we created in Flyway with just a note explaining why need this class. This way we can easily track the issue once it is merged, we can get rid of this class. WDYT?", "url": "https://github.com/quarkusio/quarkus/pull/9531#discussion_r429371971", "createdAt": "2020-05-22T17:33:01Z", "author": {"login": "machi1990"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/ScannerTransformer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package io.quarkus.flyway;\n+\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.objectweb.asm.Opcodes.POP;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import java.util.function.BiFunction;\n+\n+import org.flywaydb.core.internal.scanner.Scanner;\n+import org.flywaydb.core.internal.scanner.classpath.ResourceAndClassScanner;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.flyway.runtime.QuarkusPathLocationScanner;\n+import io.quarkus.gizmo.Gizmo;\n+\n+class ScannerTransformer implements BiFunction<String, ClassVisitor, ClassVisitor> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a1c57aa50a4390a0b86f7d242e10d11711ef91a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NjM2NQ==", "bodyText": "I was thinking that the extensive commit message would be enough, no?", "url": "https://github.com/quarkusio/quarkus/pull/9531#discussion_r429376365", "createdAt": "2020-05-22T17:43:20Z", "author": {"login": "geoand"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/ScannerTransformer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package io.quarkus.flyway;\n+\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.objectweb.asm.Opcodes.POP;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import java.util.function.BiFunction;\n+\n+import org.flywaydb.core.internal.scanner.Scanner;\n+import org.flywaydb.core.internal.scanner.classpath.ResourceAndClassScanner;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.flyway.runtime.QuarkusPathLocationScanner;\n+import io.quarkus.gizmo.Gizmo;\n+\n+class ScannerTransformer implements BiFunction<String, ClassVisitor, ClassVisitor> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MTk3MQ=="}, "originalCommit": {"oid": "5a1c57aa50a4390a0b86f7d242e10d11711ef91a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3ODYxNA==", "bodyText": "Yes, it helps to have it there too in the commit message. I think having it in the class will make quick when someone stumble through the class in the future to just copy the issue and check if it fixed upstream or especially during reviews of Flyway's auto upgrades by the bot.", "url": "https://github.com/quarkusio/quarkus/pull/9531#discussion_r429378614", "createdAt": "2020-05-22T17:48:39Z", "author": {"login": "machi1990"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/ScannerTransformer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package io.quarkus.flyway;\n+\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.objectweb.asm.Opcodes.POP;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import java.util.function.BiFunction;\n+\n+import org.flywaydb.core.internal.scanner.Scanner;\n+import org.flywaydb.core.internal.scanner.classpath.ResourceAndClassScanner;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.flyway.runtime.QuarkusPathLocationScanner;\n+import io.quarkus.gizmo.Gizmo;\n+\n+class ScannerTransformer implements BiFunction<String, ClassVisitor, ClassVisitor> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MTk3MQ=="}, "originalCommit": {"oid": "5a1c57aa50a4390a0b86f7d242e10d11711ef91a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3OTY0Mg==", "bodyText": "Well, since I'm the one that opened the issue, I'll obviously keep an eye for updates to it.\nBut I'll add the comment just in case", "url": "https://github.com/quarkusio/quarkus/pull/9531#discussion_r429379642", "createdAt": "2020-05-22T17:50:56Z", "author": {"login": "geoand"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/ScannerTransformer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package io.quarkus.flyway;\n+\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.objectweb.asm.Opcodes.POP;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import java.util.function.BiFunction;\n+\n+import org.flywaydb.core.internal.scanner.Scanner;\n+import org.flywaydb.core.internal.scanner.classpath.ResourceAndClassScanner;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.flyway.runtime.QuarkusPathLocationScanner;\n+import io.quarkus.gizmo.Gizmo;\n+\n+class ScannerTransformer implements BiFunction<String, ClassVisitor, ClassVisitor> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MTk3MQ=="}, "originalCommit": {"oid": "5a1c57aa50a4390a0b86f7d242e10d11711ef91a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4MDUyNA==", "bodyText": "Otherwise, I had the same concern as @Sanne but after following your discussions on this PR I suppose we can live with this for a while till the issue is fixed hence my suggestion for tracking it explicitly in the code.", "url": "https://github.com/quarkusio/quarkus/pull/9531#discussion_r429380524", "createdAt": "2020-05-22T17:52:16Z", "author": {"login": "machi1990"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/ScannerTransformer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package io.quarkus.flyway;\n+\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.objectweb.asm.Opcodes.POP;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import java.util.function.BiFunction;\n+\n+import org.flywaydb.core.internal.scanner.Scanner;\n+import org.flywaydb.core.internal.scanner.classpath.ResourceAndClassScanner;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.flyway.runtime.QuarkusPathLocationScanner;\n+import io.quarkus.gizmo.Gizmo;\n+\n+class ScannerTransformer implements BiFunction<String, ClassVisitor, ClassVisitor> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MTk3MQ=="}, "originalCommit": {"oid": "5a1c57aa50a4390a0b86f7d242e10d11711ef91a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4MDgzMw==", "bodyText": "Well, since I'm the one that opened the issue, I'll obviously keep an eye for updates to it.\nBut I'll add the comment just in case\n\nNice, thanks.", "url": "https://github.com/quarkusio/quarkus/pull/9531#discussion_r429380833", "createdAt": "2020-05-22T17:52:42Z", "author": {"login": "machi1990"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/ScannerTransformer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package io.quarkus.flyway;\n+\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.objectweb.asm.Opcodes.POP;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import java.util.function.BiFunction;\n+\n+import org.flywaydb.core.internal.scanner.Scanner;\n+import org.flywaydb.core.internal.scanner.classpath.ResourceAndClassScanner;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.flyway.runtime.QuarkusPathLocationScanner;\n+import io.quarkus.gizmo.Gizmo;\n+\n+class ScannerTransformer implements BiFunction<String, ClassVisitor, ClassVisitor> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MTk3MQ=="}, "originalCommit": {"oid": "5a1c57aa50a4390a0b86f7d242e10d11711ef91a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4MTUzMA==", "bodyText": "Added", "url": "https://github.com/quarkusio/quarkus/pull/9531#discussion_r429381530", "createdAt": "2020-05-22T17:54:16Z", "author": {"login": "geoand"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/ScannerTransformer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package io.quarkus.flyway;\n+\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.objectweb.asm.Opcodes.POP;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import java.util.function.BiFunction;\n+\n+import org.flywaydb.core.internal.scanner.Scanner;\n+import org.flywaydb.core.internal.scanner.classpath.ResourceAndClassScanner;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.flyway.runtime.QuarkusPathLocationScanner;\n+import io.quarkus.gizmo.Gizmo;\n+\n+class ScannerTransformer implements BiFunction<String, ClassVisitor, ClassVisitor> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MTk3MQ=="}, "originalCommit": {"oid": "5a1c57aa50a4390a0b86f7d242e10d11711ef91a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4Mzg0Ng==", "bodyText": "Great. All good for me.", "url": "https://github.com/quarkusio/quarkus/pull/9531#discussion_r429383846", "createdAt": "2020-05-22T17:59:53Z", "author": {"login": "machi1990"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/ScannerTransformer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package io.quarkus.flyway;\n+\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.objectweb.asm.Opcodes.POP;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import java.util.function.BiFunction;\n+\n+import org.flywaydb.core.internal.scanner.Scanner;\n+import org.flywaydb.core.internal.scanner.classpath.ResourceAndClassScanner;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.flyway.runtime.QuarkusPathLocationScanner;\n+import io.quarkus.gizmo.Gizmo;\n+\n+class ScannerTransformer implements BiFunction<String, ClassVisitor, ClassVisitor> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MTk3MQ=="}, "originalCommit": {"oid": "5a1c57aa50a4390a0b86f7d242e10d11711ef91a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjM0MTUxOnYy", "diffSide": "RIGHT", "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/ScannerTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMDoyMToyNlrOGZyO0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNDoxODo1MFrOGZ0VxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5MDU3Ng==", "bodyText": "I really should look at a 'Gizmo for transformers'...", "url": "https://github.com/quarkusio/quarkus/pull/9531#discussion_r429690576", "createdAt": "2020-05-25T00:21:26Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/ScannerTransformer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package io.quarkus.flyway;\n+\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.objectweb.asm.Opcodes.POP;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import java.util.function.BiFunction;\n+\n+import org.flywaydb.core.internal.scanner.Scanner;\n+import org.flywaydb.core.internal.scanner.classpath.ResourceAndClassScanner;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.flyway.runtime.QuarkusPathLocationScanner;\n+import io.quarkus.gizmo.Gizmo;\n+\n+/**\n+ * Transforms {@link Scanner} in a way to take advantage of our build time knowledge\n+ * This should be removed completely if https://github.com/flyway/flyway/issues/2822\n+ * is implemented\n+ */\n+class ScannerTransformer implements BiFunction<String, ClassVisitor, ClassVisitor> {\n+\n+    static final String FLYWAY_SCANNER_CLASS_NAME = Scanner.class.getName();\n+    private static final String FLYWAY_SCANNER_INTERNAL_CLASS_NAME = FLYWAY_SCANNER_CLASS_NAME.replace('.', '/');\n+\n+    private static final String FLYWAY_RESOURCE_AND_CLASS_SCANNER_CLASS_NAME = ResourceAndClassScanner.class.getName();\n+    private static final String FLYWAY_RESOURCE_AND_CLASS_SCANNER_INTERNAL_CLASS_NAME = FLYWAY_RESOURCE_AND_CLASS_SCANNER_CLASS_NAME\n+            .replace('.', '/');\n+\n+    private static final String QUARKUS_RESOURCE_AND_CLASS_SCANNER_CLASS_NAME = QuarkusPathLocationScanner.class.getName();\n+    private static final String QUARKUS_RESOURCE_AND_CLASS_SCANNER_INTERNAL_CLASS_NAME = QUARKUS_RESOURCE_AND_CLASS_SCANNER_CLASS_NAME\n+            .replace('.', '/');\n+\n+    private static final String CTOR_METHOD_NAME = \"<init>\";\n+\n+    @Override\n+    public ClassVisitor apply(String s, ClassVisitor cv) {\n+        return new ScannerVisitor(cv);\n+    }\n+\n+    private static final class ScannerVisitor extends ClassVisitor {\n+\n+        public ScannerVisitor(ClassVisitor cv) {\n+            super(Gizmo.ASM_API_VERSION, cv);\n+        }\n+\n+        @Override\n+        public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {\n+            MethodVisitor mv = super.visitMethod(access, name, descriptor, signature, exceptions);\n+            if (name.equals(CTOR_METHOD_NAME)) {\n+                return new ConstructorTransformer(mv);\n+            }\n+            return mv;\n+        }\n+\n+        /**\n+         * Replaces the constructor of the {@link Scanner} with:\n+         *\n+         * <pre>\n+         * public ScannerSubstitutions(Class<?> implementedInterface, Collection<Location> locations, ClassLoader classLoader,\n+         *         Charset encoding, ResourceNameCache resourceNameCache, LocationScannerCache locationScannerCache) {\n+         *     ResourceAndClassScanner quarkusScanner = new QuarkusPathLocationScanner(locations);\n+         *     resources.addAll(quarkusScanner.scanForResources());\n+         *     classes.addAll(quarkusScanner.scanForClasses());\n+         * }\n+         * </pre>\n+         */\n+        private static class ConstructorTransformer extends MethodVisitor {\n+\n+            public ConstructorTransformer(MethodVisitor mv) {\n+                super(Gizmo.ASM_API_VERSION, mv);\n+            }\n+\n+            @Override\n+            public void visitCode() {\n+                super.visitVarInsn(ALOAD, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f42f9d3abd49a591ab3a8045f77f7d21bb1d86"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyNTEyNQ==", "bodyText": "Yeah, that would make things a lot easier :)", "url": "https://github.com/quarkusio/quarkus/pull/9531#discussion_r429725125", "createdAt": "2020-05-25T04:18:50Z", "author": {"login": "geoand"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/ScannerTransformer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package io.quarkus.flyway;\n+\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.objectweb.asm.Opcodes.POP;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import java.util.function.BiFunction;\n+\n+import org.flywaydb.core.internal.scanner.Scanner;\n+import org.flywaydb.core.internal.scanner.classpath.ResourceAndClassScanner;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.flyway.runtime.QuarkusPathLocationScanner;\n+import io.quarkus.gizmo.Gizmo;\n+\n+/**\n+ * Transforms {@link Scanner} in a way to take advantage of our build time knowledge\n+ * This should be removed completely if https://github.com/flyway/flyway/issues/2822\n+ * is implemented\n+ */\n+class ScannerTransformer implements BiFunction<String, ClassVisitor, ClassVisitor> {\n+\n+    static final String FLYWAY_SCANNER_CLASS_NAME = Scanner.class.getName();\n+    private static final String FLYWAY_SCANNER_INTERNAL_CLASS_NAME = FLYWAY_SCANNER_CLASS_NAME.replace('.', '/');\n+\n+    private static final String FLYWAY_RESOURCE_AND_CLASS_SCANNER_CLASS_NAME = ResourceAndClassScanner.class.getName();\n+    private static final String FLYWAY_RESOURCE_AND_CLASS_SCANNER_INTERNAL_CLASS_NAME = FLYWAY_RESOURCE_AND_CLASS_SCANNER_CLASS_NAME\n+            .replace('.', '/');\n+\n+    private static final String QUARKUS_RESOURCE_AND_CLASS_SCANNER_CLASS_NAME = QuarkusPathLocationScanner.class.getName();\n+    private static final String QUARKUS_RESOURCE_AND_CLASS_SCANNER_INTERNAL_CLASS_NAME = QUARKUS_RESOURCE_AND_CLASS_SCANNER_CLASS_NAME\n+            .replace('.', '/');\n+\n+    private static final String CTOR_METHOD_NAME = \"<init>\";\n+\n+    @Override\n+    public ClassVisitor apply(String s, ClassVisitor cv) {\n+        return new ScannerVisitor(cv);\n+    }\n+\n+    private static final class ScannerVisitor extends ClassVisitor {\n+\n+        public ScannerVisitor(ClassVisitor cv) {\n+            super(Gizmo.ASM_API_VERSION, cv);\n+        }\n+\n+        @Override\n+        public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {\n+            MethodVisitor mv = super.visitMethod(access, name, descriptor, signature, exceptions);\n+            if (name.equals(CTOR_METHOD_NAME)) {\n+                return new ConstructorTransformer(mv);\n+            }\n+            return mv;\n+        }\n+\n+        /**\n+         * Replaces the constructor of the {@link Scanner} with:\n+         *\n+         * <pre>\n+         * public ScannerSubstitutions(Class<?> implementedInterface, Collection<Location> locations, ClassLoader classLoader,\n+         *         Charset encoding, ResourceNameCache resourceNameCache, LocationScannerCache locationScannerCache) {\n+         *     ResourceAndClassScanner quarkusScanner = new QuarkusPathLocationScanner(locations);\n+         *     resources.addAll(quarkusScanner.scanForResources());\n+         *     classes.addAll(quarkusScanner.scanForClasses());\n+         * }\n+         * </pre>\n+         */\n+        private static class ConstructorTransformer extends MethodVisitor {\n+\n+            public ConstructorTransformer(MethodVisitor mv) {\n+                super(Gizmo.ASM_API_VERSION, mv);\n+            }\n+\n+            @Override\n+            public void visitCode() {\n+                super.visitVarInsn(ALOAD, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5MDU3Ng=="}, "originalCommit": {"oid": "20f42f9d3abd49a591ab3a8045f77f7d21bb1d86"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2966, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}