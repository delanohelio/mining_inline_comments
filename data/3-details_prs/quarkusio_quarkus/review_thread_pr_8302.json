{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2Mjc4MDM1", "number": 8302, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzo0NjozNFrODtHe5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzo0NjozNFrODtHe5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjM1MTExOnYy", "diffSide": "RIGHT", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/InterfaceConfigPropertiesUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzo0NjozNFrOF-WloA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDoyMjoyMlrOF-YSEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkyNjExMg==", "bodyText": "@geoand no way to factorize this with the same ClassConfigPropertiesUtil bits?", "url": "https://github.com/quarkusio/quarkus/pull/8302#discussion_r400926112", "createdAt": "2020-03-31T13:46:34Z", "author": {"login": "ia3andy"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/InterfaceConfigPropertiesUtil.java", "diffHunk": "@@ -134,12 +135,32 @@ static String generateImplementationForInterfaceConfigProperties(ClassInfo origi\n \n                             Type genericType = determineSingleGenericType(returnType,\n                                     method.declaringClass().name());\n-                            ResultHandle result = methodCreator.invokeInterfaceMethod(\n-                                    MethodDescriptor.ofMethod(Config.class, \"getOptionalValue\", Optional.class, String.class,\n-                                            Class.class),\n-                                    config, methodCreator.load(fullConfigName),\n-                                    methodCreator.loadClass(genericType.name().toString()));\n-                            methodCreator.returnValue(result);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59fd01715c4ab0d24e21887cd4d803e740495f9e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk0OTA1NA==", "bodyText": "Sure, do you want to do that as an exercise to get your hands dirty with this code?", "url": "https://github.com/quarkusio/quarkus/pull/8302#discussion_r400949054", "createdAt": "2020-03-31T14:16:23Z", "author": {"login": "geoand"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/InterfaceConfigPropertiesUtil.java", "diffHunk": "@@ -134,12 +135,32 @@ static String generateImplementationForInterfaceConfigProperties(ClassInfo origi\n \n                             Type genericType = determineSingleGenericType(returnType,\n                                     method.declaringClass().name());\n-                            ResultHandle result = methodCreator.invokeInterfaceMethod(\n-                                    MethodDescriptor.ofMethod(Config.class, \"getOptionalValue\", Optional.class, String.class,\n-                                            Class.class),\n-                                    config, methodCreator.load(fullConfigName),\n-                                    methodCreator.loadClass(genericType.name().toString()));\n-                            methodCreator.returnValue(result);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkyNjExMg=="}, "originalCommit": {"oid": "59fd01715c4ab0d24e21887cd4d803e740495f9e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1Mzg3NA==", "bodyText": "Sure", "url": "https://github.com/quarkusio/quarkus/pull/8302#discussion_r400953874", "createdAt": "2020-03-31T14:22:22Z", "author": {"login": "ia3andy"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/InterfaceConfigPropertiesUtil.java", "diffHunk": "@@ -134,12 +135,32 @@ static String generateImplementationForInterfaceConfigProperties(ClassInfo origi\n \n                             Type genericType = determineSingleGenericType(returnType,\n                                     method.declaringClass().name());\n-                            ResultHandle result = methodCreator.invokeInterfaceMethod(\n-                                    MethodDescriptor.ofMethod(Config.class, \"getOptionalValue\", Optional.class, String.class,\n-                                            Class.class),\n-                                    config, methodCreator.load(fullConfigName),\n-                                    methodCreator.loadClass(genericType.name().toString()));\n-                            methodCreator.returnValue(result);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkyNjExMg=="}, "originalCommit": {"oid": "59fd01715c4ab0d24e21887cd4d803e740495f9e"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3715, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}