{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0OTc4MTk1", "number": 10896, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo1ODoxM1rOEjFxUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoxNzoxM1rOEjGLyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjMwMTYzOnYy", "diffSide": "RIGHT", "path": "integration-tests/mongodb-client/src/main/java/io/quarkus/it/mongodb/pojo/OptionalPropertyCodecProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo1ODoxM1rOHRQVoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjowNTozOFrOHRQlIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NTUyMA==", "bodyText": "Does this class get used anywhere?", "url": "https://github.com/quarkusio/quarkus/pull/10896#discussion_r487855520", "createdAt": "2020-09-14T11:58:13Z", "author": {"login": "geoand"}, "path": "integration-tests/mongodb-client/src/main/java/io/quarkus/it/mongodb/pojo/OptionalPropertyCodecProvider.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.it.mongodb.pojo;\n+\n+import java.util.Optional;\n+\n+import org.bson.BsonReader;\n+import org.bson.BsonWriter;\n+import org.bson.codecs.Codec;\n+import org.bson.codecs.DecoderContext;\n+import org.bson.codecs.EncoderContext;\n+import org.bson.codecs.pojo.PropertyCodecProvider;\n+import org.bson.codecs.pojo.PropertyCodecRegistry;\n+import org.bson.codecs.pojo.TypeWithTypeParameters;\n+\n+/**\n+ * This PropertyCodecProvider register a codec provider for the Optional type.\n+ * This allows the POJO Codec to handle it as it's a generic type.\n+ * See: http://mongodb.github.io/mongo-java-driver/3.12/bson/pojos/#generics-support\n+ */\n+public class OptionalPropertyCodecProvider implements PropertyCodecProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f204fce2c2f42979e70f9540403ff7e49fd9a5dc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NjkyOA==", "bodyText": "Yes, this is the purpose of this PR ;)\nIt will be discovered by the processor and used when creating the POJO Codec.\nMaybe I need to provie a better javadoc comment to explain this.", "url": "https://github.com/quarkusio/quarkus/pull/10896#discussion_r487856928", "createdAt": "2020-09-14T12:00:46Z", "author": {"login": "loicmathieu"}, "path": "integration-tests/mongodb-client/src/main/java/io/quarkus/it/mongodb/pojo/OptionalPropertyCodecProvider.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.it.mongodb.pojo;\n+\n+import java.util.Optional;\n+\n+import org.bson.BsonReader;\n+import org.bson.BsonWriter;\n+import org.bson.codecs.Codec;\n+import org.bson.codecs.DecoderContext;\n+import org.bson.codecs.EncoderContext;\n+import org.bson.codecs.pojo.PropertyCodecProvider;\n+import org.bson.codecs.pojo.PropertyCodecRegistry;\n+import org.bson.codecs.pojo.TypeWithTypeParameters;\n+\n+/**\n+ * This PropertyCodecProvider register a codec provider for the Optional type.\n+ * This allows the POJO Codec to handle it as it's a generic type.\n+ * See: http://mongodb.github.io/mongo-java-driver/3.12/bson/pojos/#generics-support\n+ */\n+public class OptionalPropertyCodecProvider implements PropertyCodecProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NTUyMA=="}, "originalCommit": {"oid": "f204fce2c2f42979e70f9540403ff7e49fd9a5dc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1OTQ5MA==", "bodyText": "Ah OK, now I see...\nThis is part of the integration test, not the extension itself. I thought this was part of the extension and was wondering how it got registered...\nSo I suggest that you enhance the comment of this class to make it evident that it gets discovered  and automatically registered by the extension - I am sure we'll forget in a while :)", "url": "https://github.com/quarkusio/quarkus/pull/10896#discussion_r487859490", "createdAt": "2020-09-14T12:05:38Z", "author": {"login": "geoand"}, "path": "integration-tests/mongodb-client/src/main/java/io/quarkus/it/mongodb/pojo/OptionalPropertyCodecProvider.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.it.mongodb.pojo;\n+\n+import java.util.Optional;\n+\n+import org.bson.BsonReader;\n+import org.bson.BsonWriter;\n+import org.bson.codecs.Codec;\n+import org.bson.codecs.DecoderContext;\n+import org.bson.codecs.EncoderContext;\n+import org.bson.codecs.pojo.PropertyCodecProvider;\n+import org.bson.codecs.pojo.PropertyCodecRegistry;\n+import org.bson.codecs.pojo.TypeWithTypeParameters;\n+\n+/**\n+ * This PropertyCodecProvider register a codec provider for the Optional type.\n+ * This allows the POJO Codec to handle it as it's a generic type.\n+ * See: http://mongodb.github.io/mongo-java-driver/3.12/bson/pojos/#generics-support\n+ */\n+public class OptionalPropertyCodecProvider implements PropertyCodecProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NTUyMA=="}, "originalCommit": {"oid": "f204fce2c2f42979e70f9540403ff7e49fd9a5dc"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjM2OTM3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb.adoc", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoxNzoxNFrOHRQ-Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjowODoxMVrOHR-oMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2NTg2Mg==", "bodyText": "Why can't we do it automatically in the extension? I'm not sure I understand what the problem is?", "url": "https://github.com/quarkusio/quarkus/pull/10896#discussion_r487865862", "createdAt": "2020-09-14T12:17:14Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb.adoc", "diffHunk": "@@ -573,6 +573,11 @@ a discriminator field inside the document. It can be useful when working with ab\n \n Quarkus will automatically register all the classes annotated with `@BsonDiscriminator` with the POJO codec.\n \n+The POJO Codec have enhanced generic support via `PropertyCodecProvider`,\n+Quarkus will automatically register any `PropertyCodecProvider` with the POJO Codec.\n+If you deploy your application as a native executable, be aware that reflection may not work properly with generic types, so you may need to register it manually for reflection,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f204fce2c2f42979e70f9540403ff7e49fd9a5dc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkzMTY1Ng==", "bodyText": "It's a general comment on generic usage, we cannot know which type will be used so if no code use it in a way that we can discover it (for example, this type is not an entity, not returned by JAX-RS, ...) it may be missing on the native image.\nThis sentence comes from some discussion around generic type usage, I don't remember it precisely", "url": "https://github.com/quarkusio/quarkus/pull/10896#discussion_r487931656", "createdAt": "2020-09-14T13:47:40Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/mongodb.adoc", "diffHunk": "@@ -573,6 +573,11 @@ a discriminator field inside the document. It can be useful when working with ab\n \n Quarkus will automatically register all the classes annotated with `@BsonDiscriminator` with the POJO codec.\n \n+The POJO Codec have enhanced generic support via `PropertyCodecProvider`,\n+Quarkus will automatically register any `PropertyCodecProvider` with the POJO Codec.\n+If you deploy your application as a native executable, be aware that reflection may not work properly with generic types, so you may need to register it manually for reflection,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2NTg2Mg=="}, "originalCommit": {"oid": "f204fce2c2f42979e70f9540403ff7e49fd9a5dc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ0MjAyNw==", "bodyText": "@gsmet are you OK with this comment or do you want me to change it ?", "url": "https://github.com/quarkusio/quarkus/pull/10896#discussion_r488442027", "createdAt": "2020-09-15T07:20:32Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/mongodb.adoc", "diffHunk": "@@ -573,6 +573,11 @@ a discriminator field inside the document. It can be useful when working with ab\n \n Quarkus will automatically register all the classes annotated with `@BsonDiscriminator` with the POJO codec.\n \n+The POJO Codec have enhanced generic support via `PropertyCodecProvider`,\n+Quarkus will automatically register any `PropertyCodecProvider` with the POJO Codec.\n+If you deploy your application as a native executable, be aware that reflection may not work properly with generic types, so you may need to register it manually for reflection,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2NTg2Mg=="}, "originalCommit": {"oid": "f204fce2c2f42979e70f9540403ff7e49fd9a5dc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxMDU2OA==", "bodyText": "I still don't understand what the problem is. Could you give an example of what is supposedly not working?", "url": "https://github.com/quarkusio/quarkus/pull/10896#discussion_r488510568", "createdAt": "2020-09-15T09:11:03Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb.adoc", "diffHunk": "@@ -573,6 +573,11 @@ a discriminator field inside the document. It can be useful when working with ab\n \n Quarkus will automatically register all the classes annotated with `@BsonDiscriminator` with the POJO codec.\n \n+The POJO Codec have enhanced generic support via `PropertyCodecProvider`,\n+Quarkus will automatically register any `PropertyCodecProvider` with the POJO Codec.\n+If you deploy your application as a native executable, be aware that reflection may not work properly with generic types, so you may need to register it manually for reflection,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2NTg2Mg=="}, "originalCommit": {"oid": "f204fce2c2f42979e70f9540403ff7e49fd9a5dc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxMzg0Ng==", "bodyText": "If you use an Optional<T> as a field of a of Pojo class and use a MySubPojo class at runtime as T in a way that can be discovered by GraalVM (for example, don't return it from a JAX-RS endpoint or stuff like this), you may need to register it for reflection.", "url": "https://github.com/quarkusio/quarkus/pull/10896#discussion_r488613846", "createdAt": "2020-09-15T12:08:01Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/mongodb.adoc", "diffHunk": "@@ -573,6 +573,11 @@ a discriminator field inside the document. It can be useful when working with ab\n \n Quarkus will automatically register all the classes annotated with `@BsonDiscriminator` with the POJO codec.\n \n+The POJO Codec have enhanced generic support via `PropertyCodecProvider`,\n+Quarkus will automatically register any `PropertyCodecProvider` with the POJO Codec.\n+If you deploy your application as a native executable, be aware that reflection may not work properly with generic types, so you may need to register it manually for reflection,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2NTg2Mg=="}, "originalCommit": {"oid": "f204fce2c2f42979e70f9540403ff7e49fd9a5dc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxMzkzNw==", "bodyText": "I can remove this sentence if you prefere", "url": "https://github.com/quarkusio/quarkus/pull/10896#discussion_r488613937", "createdAt": "2020-09-15T12:08:11Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/mongodb.adoc", "diffHunk": "@@ -573,6 +573,11 @@ a discriminator field inside the document. It can be useful when working with ab\n \n Quarkus will automatically register all the classes annotated with `@BsonDiscriminator` with the POJO codec.\n \n+The POJO Codec have enhanced generic support via `PropertyCodecProvider`,\n+Quarkus will automatically register any `PropertyCodecProvider` with the POJO Codec.\n+If you deploy your application as a native executable, be aware that reflection may not work properly with generic types, so you may need to register it manually for reflection,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2NTg2Mg=="}, "originalCommit": {"oid": "f204fce2c2f42979e70f9540403ff7e49fd9a5dc"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 831, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}