{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NDkzMDQ1", "number": 9412, "title": "ArC - register /quarkus/arc/beans and /quarkus/arc/observers routes in the dev mode", "bodyText": "these routes produce basic debug info in the JSON format\n\nHow to use:\n\nmvn quarkus:dev\nHTTP GET http://localhost:8080/arc/beans\nHTTP GET http://localhost:8080/arc/observers\nsimple filter #1 - HTTP GET http://localhost:8080/arc/beans?scope=Singleton\nsimple filter #2 -HTTP GET http://localhost:8080/arc/beans?beanClass=org.acme.Foo\nsimple filter #3 - HTTP GET http://localhost:8080/arc/beans?kind=PRODUCER_METHOD\n\nThis PR also contains a minimalistic JSON generator (io.quarkus.vertx.http.runtime.devmode.Json, mainly copied from the Weld Probe) because we can't use io.vertx.core.json.JsonObject/JsonArray unless the quarkus-jackson-databind extension is in.", "createdAt": "2020-05-18T13:13:31Z", "url": "https://github.com/quarkusio/quarkus/pull/9412", "merged": true, "mergeCommit": {"oid": "e60c79344ac34210271e6ee12f8fe37cf2a13df0"}, "closed": true, "closedAt": "2020-05-22T07:14:25Z", "author": {"login": "mkouba"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcifzj8gFqTQxMzU4ODcwNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcit7HGAFqTQxNDExOTEyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNTg4NzA3", "url": "https://github.com/quarkusio/quarkus/pull/9412#pullrequestreview-413588707", "createdAt": "2020-05-18T13:22:53Z", "commit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoyMjo1M1rOGW272w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoyMjo1M1rOGW272w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyMTkxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testJsonarray() {\n          \n          \n            \n                public void testJsonArray() {", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426621915", "createdAt": "2020-05-18T13:22:53Z", "author": {"login": "geoand"}, "path": "extensions/vertx-http/runtime/src/test/java/io/quarkus/vertx/http/runtime/devmode/JsonTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package io.quarkus.vertx.http.runtime.devmode;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonArrayBuilder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonObjectBuilder;\n+\n+public class JsonTest {\n+\n+    @Test\n+    public void testJsonarray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNTg4OTg4", "url": "https://github.com/quarkusio/quarkus/pull/9412#pullrequestreview-413588988", "createdAt": "2020-05-18T13:23:15Z", "commit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoyMzoxNVrOGW28uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoyMzoxNVrOGW28uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyMjEzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testJsonobject() {\n          \n          \n            \n                public void testJsonObject() {", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426622137", "createdAt": "2020-05-18T13:23:15Z", "author": {"login": "geoand"}, "path": "extensions/vertx-http/runtime/src/test/java/io/quarkus/vertx/http/runtime/devmode/JsonTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package io.quarkus.vertx.http.runtime.devmode;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonArrayBuilder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonObjectBuilder;\n+\n+public class JsonTest {\n+\n+    @Test\n+    public void testJsonarray() {\n+        assertEquals(\"[\\\"foo\\\",\\\"bar\\\",[\\\"baz\\\"]]\", Json.array().add(\"foo\").add(\"bar\").add(Json.array().add(\"baz\")).build());\n+    }\n+\n+    @Test\n+    public void testJsonobject() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNTg5OTAw", "url": "https://github.com/quarkusio/quarkus/pull/9412#pullrequestreview-413589900", "createdAt": "2020-05-18T13:24:18Z", "commit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoyNDoxOFrOGW2_fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoyNDoxOFrOGW2_fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyMjg0NQ==", "bodyText": "I'm not going to review this since you said it's just copied from Weld :)", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426622845", "createdAt": "2020-05-18T13:24:18Z", "author": {"login": "geoand"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/Json.java", "diffHunk": "@@ -0,0 +1,344 @@\n+package io.quarkus.vertx.http.runtime.devmode;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+\n+/**\n+ * A simple JSON string generator.\n+ */\n+public final class Json {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNTkxNTQw", "url": "https://github.com/quarkusio/quarkus/pull/9412#pullrequestreview-413591540", "createdAt": "2020-05-18T13:26:11Z", "commit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoyNjoxMVrOGW3EjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoyNjoxMVrOGW3EjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyNDE0MA==", "bodyText": "Perhaps as a follow up to this, ArcContainerImpl#getBeans can return a LinkedHashSet so it can return data in the same order", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426624140", "createdAt": "2020-05-18T13:26:11Z", "author": {"login": "geoand"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package io.quarkus.vertx.http.runtime.devmode;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import javax.enterprise.inject.Any;\n+import javax.enterprise.inject.Default;\n+\n+import io.quarkus.arc.InjectableBean;\n+import io.quarkus.arc.InjectableObserverMethod;\n+import io.quarkus.arc.impl.ArcContainerImpl;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonArrayBuilder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonObjectBuilder;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Recorder\n+public class ArcEndpointRecorder {\n+\n+    public Handler<RoutingContext> createBeansHandler() {\n+        return new Handler<RoutingContext>() {\n+\n+            @Override\n+            public void handle(RoutingContext ctx) {\n+                ctx.response().putHeader(\"Content-type\", \"application/json\");\n+\n+                ArcContainerImpl container = ArcContainerImpl.instance();\n+                List<InjectableBean<?>> beans = container.getBeans();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNTkzMzgx", "url": "https://github.com/quarkusio/quarkus/pull/9412#pullrequestreview-413593381", "createdAt": "2020-05-18T13:28:22Z", "commit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoyODoyM1rOGW3KDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoyODoyM1rOGW3KDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyNTU0OQ==", "bodyText": "We should document this capability and the options you have in the CDI guide", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426625549", "createdAt": "2020-05-18T13:28:23Z", "author": {"login": "geoand"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package io.quarkus.vertx.http.runtime.devmode;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import javax.enterprise.inject.Any;\n+import javax.enterprise.inject.Default;\n+\n+import io.quarkus.arc.InjectableBean;\n+import io.quarkus.arc.InjectableObserverMethod;\n+import io.quarkus.arc.impl.ArcContainerImpl;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonArrayBuilder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonObjectBuilder;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Recorder\n+public class ArcEndpointRecorder {\n+\n+    public Handler<RoutingContext> createBeansHandler() {\n+        return new Handler<RoutingContext>() {\n+\n+            @Override\n+            public void handle(RoutingContext ctx) {\n+                ctx.response().putHeader(\"Content-type\", \"application/json\");\n+\n+                ArcContainerImpl container = ArcContainerImpl.instance();\n+                List<InjectableBean<?>> beans = container.getBeans();\n+                beans.addAll(container.getInterceptors());\n+\n+                String kindParam = ctx.request().getParam(\"kind\");\n+                InjectableBean.Kind kind = kindParam != null ? InjectableBean.Kind.valueOf(kindParam) : null;\n+                String scopeEndsWith = ctx.request().getParam(\"scope\");\n+                String beanClassStartsWith = ctx.request().getParam(\"beanClass\");\n+\n+                for (Iterator<InjectableBean<?>> it = beans.iterator(); it.hasNext();) {\n+                    InjectableBean<?> injectableBean = it.next();\n+                    if (kind != null && !kind.equals(injectableBean.getKind())) {\n+                        it.remove();\n+                    }\n+                    if (scopeEndsWith != null && !injectableBean.getScope().getName().endsWith(scopeEndsWith)) {\n+                        it.remove();\n+                    }\n+                    if (beanClassStartsWith != null\n+                            && !injectableBean.getBeanClass().getName().startsWith(beanClassStartsWith)) {\n+                        it.remove();\n+                    }\n+                }\n+\n+                JsonArrayBuilder array = Json.array();\n+                for (InjectableBean<?> injectableBean : beans) {\n+                    JsonObjectBuilder bean = Json.object();\n+                    bean.put(\"id\", injectableBean.getIdentifier());\n+                    bean.put(\"kind\", injectableBean.getKind().toString());\n+                    bean.put(\"generatedClass\", injectableBean.getClass().getName());\n+                    bean.put(\"beanClass\", injectableBean.getBeanClass().getName());\n+                    JsonArrayBuilder types = Json.array();\n+                    for (Type beanType : injectableBean.getTypes()) {\n+                        types.add(beanType.getTypeName());\n+                    }\n+                    bean.put(\"types\", types);\n+                    JsonArrayBuilder qualifiers = Json.array();\n+                    for (Annotation qualifier : injectableBean.getQualifiers()) {\n+                        if (qualifier.annotationType().equals(Any.class) || qualifier.annotationType().equals(Default.class)) {\n+                            qualifiers.add(\"@\" + qualifier.annotationType().getSimpleName());\n+                        } else {\n+                            qualifiers.add(qualifier.toString());\n+                        }\n+                    }\n+                    bean.put(\"qualifiers\", qualifiers);\n+                    bean.put(\"scope\", injectableBean.getScope().getName());\n+\n+                    if (injectableBean.getDeclaringBean() != null) {\n+                        bean.put(\"declaringBean\", injectableBean.getDeclaringBean().getIdentifier());\n+                    }\n+                    if (injectableBean.getName() != null) {\n+                        bean.put(\"name\", injectableBean.getName());\n+                    }\n+                    if (injectableBean.isAlternative()) {\n+                        bean.put(\"alternativePriority\", injectableBean.getAlternativePriority());\n+                    }\n+                    if (injectableBean.isDefaultBean()) {\n+                        bean.put(\"isDefault\", true);\n+                    }\n+                    array.add(bean);\n+                }\n+                ctx.response().end(array.build());\n+            }\n+        };\n+    }\n+\n+    public Handler<RoutingContext> createObserversHandler() {\n+        return new Handler<RoutingContext>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNjA1MDA3", "url": "https://github.com/quarkusio/quarkus/pull/9412#pullrequestreview-413605007", "createdAt": "2020-05-18T13:41:26Z", "commit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzo0MToyN1rOGW3smQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzo0MToyN1rOGW3smQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYzNDM5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ctx.response().putHeader(\"Content-type\", \"application/json\");\n          \n          \n            \n                            ctx.response().putHeader(\"Content-Type\", \"application/json\");", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426634393", "createdAt": "2020-05-18T13:41:27Z", "author": {"login": "geoand"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package io.quarkus.vertx.http.runtime.devmode;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import javax.enterprise.inject.Any;\n+import javax.enterprise.inject.Default;\n+\n+import io.quarkus.arc.InjectableBean;\n+import io.quarkus.arc.InjectableObserverMethod;\n+import io.quarkus.arc.impl.ArcContainerImpl;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonArrayBuilder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonObjectBuilder;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Recorder\n+public class ArcEndpointRecorder {\n+\n+    public Handler<RoutingContext> createBeansHandler() {\n+        return new Handler<RoutingContext>() {\n+\n+            @Override\n+            public void handle(RoutingContext ctx) {\n+                ctx.response().putHeader(\"Content-type\", \"application/json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNjA4OTk0", "url": "https://github.com/quarkusio/quarkus/pull/9412#pullrequestreview-413608994", "createdAt": "2020-05-18T13:45:54Z", "commit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzo0NTo1NFrOGW34iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzo0NTo1NFrOGW34iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYzNzQ1MQ==", "bodyText": "What is the rationale of having scope being used with endsWith  and beanClass used startsWith?", "url": "https://github.com/quarkusio/quarkus/pull/9412#discussion_r426637451", "createdAt": "2020-05-18T13:45:54Z", "author": {"login": "geoand"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcEndpointRecorder.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package io.quarkus.vertx.http.runtime.devmode;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import javax.enterprise.inject.Any;\n+import javax.enterprise.inject.Default;\n+\n+import io.quarkus.arc.InjectableBean;\n+import io.quarkus.arc.InjectableObserverMethod;\n+import io.quarkus.arc.impl.ArcContainerImpl;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonArrayBuilder;\n+import io.quarkus.vertx.http.runtime.devmode.Json.JsonObjectBuilder;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Recorder\n+public class ArcEndpointRecorder {\n+\n+    public Handler<RoutingContext> createBeansHandler() {\n+        return new Handler<RoutingContext>() {\n+\n+            @Override\n+            public void handle(RoutingContext ctx) {\n+                ctx.response().putHeader(\"Content-type\", \"application/json\");\n+\n+                ArcContainerImpl container = ArcContainerImpl.instance();\n+                List<InjectableBean<?>> beans = container.getBeans();\n+                beans.addAll(container.getInterceptors());\n+\n+                String kindParam = ctx.request().getParam(\"kind\");\n+                InjectableBean.Kind kind = kindParam != null ? InjectableBean.Kind.valueOf(kindParam) : null;\n+                String scopeEndsWith = ctx.request().getParam(\"scope\");\n+                String beanClassStartsWith = ctx.request().getParam(\"beanClass\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cac7004945cb5986dee31c13dad95d830c83948", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/9cac7004945cb5986dee31c13dad95d830c83948", "committedDate": "2020-05-18T14:30:44Z", "message": "ArC - register /arc/beans and /arc/observers routes in the dev mode\n\n- these routes produce basic debug info in the JSON format"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1c3128e9e10b991d1faced5181717446decd3d1", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/c1c3128e9e10b991d1faced5181717446decd3d1", "committedDate": "2020-05-18T13:07:40Z", "message": "ArC - register /arc/beans and /arc/observers routes in the dev mode\n\n- these routes produce basic debug info in the JSON format"}, "afterCommit": {"oid": "9cac7004945cb5986dee31c13dad95d830c83948", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/9cac7004945cb5986dee31c13dad95d830c83948", "committedDate": "2020-05-18T14:30:44Z", "message": "ArC - register /arc/beans and /arc/observers routes in the dev mode\n\n- these routes produce basic debug info in the JSON format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNjU0MDU3", "url": "https://github.com/quarkusio/quarkus/pull/9412#pullrequestreview-413654057", "createdAt": "2020-05-18T14:34:08Z", "commit": {"oid": "9cac7004945cb5986dee31c13dad95d830c83948"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MTE5MTIx", "url": "https://github.com/quarkusio/quarkus/pull/9412#pullrequestreview-414119121", "createdAt": "2020-05-19T05:49:48Z", "commit": {"oid": "9cac7004945cb5986dee31c13dad95d830c83948"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3295, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}