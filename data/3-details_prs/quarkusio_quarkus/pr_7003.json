{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMzY3NjE5", "number": 7003, "title": "ArC- reduce overhead of metadata initialization in subclass constructors", "bodyText": "use shared literal instances for interceptor bindings\nuse shared interceptor chains", "createdAt": "2020-02-05T13:15:32Z", "url": "https://github.com/quarkusio/quarkus/pull/7003", "merged": true, "mergeCommit": {"oid": "91f650989f9fd0527494a62d12074b242058632e"}, "closed": true, "closedAt": "2020-02-06T07:12:13Z", "author": {"login": "mkouba"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBWJ6sgFqTM1MzcwOTk1Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBcjpWgFqTM1NDAzNDE2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNzA5OTUy", "url": "https://github.com/quarkusio/quarkus/pull/7003#pullrequestreview-353709952", "createdAt": "2020-02-05T13:24:06Z", "commit": {"oid": "689a18703ee3af8b634588407dfebdf8a6bf88f2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoyNDowNlrOFl3g_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoyNzowMVrOFl3m3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MTE5Ng==", "bodyText": "Shouldn't you use the LONG version?", "url": "https://github.com/quarkusio/quarkus/pull/7003#discussion_r375251196", "createdAt": "2020-02-05T13:24:06Z", "author": {"login": "gsmet"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/AnnotationLiteralGenerator.java", "diffHunk": "@@ -241,14 +254,30 @@ static ResultHandle arrayValue(AnnotationValue value, BytecodeCreator valueMetho\n                                 annotationClass);\n                     }\n                 }\n-                retValue = valueMethod.newArray(componentType(method), valueMethod.load(0));\n+                DotName componentName = componentTypeName(method);\n+                // Use empty array constants for common component kinds\n+                if (DotNames.CLASS.equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_CLASS_ARRAY);\n+                } else if (DotNames.STRING.equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);\n+                } else if (DotNames.LONG.equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689a18703ee3af8b634588407dfebdf8a6bf88f2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MTI2Mg==", "bodyText": "Shouldn't you use the INT version?", "url": "https://github.com/quarkusio/quarkus/pull/7003#discussion_r375251262", "createdAt": "2020-02-05T13:24:14Z", "author": {"login": "gsmet"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/AnnotationLiteralGenerator.java", "diffHunk": "@@ -241,14 +254,30 @@ static ResultHandle arrayValue(AnnotationValue value, BytecodeCreator valueMetho\n                                 annotationClass);\n                     }\n                 }\n-                retValue = valueMethod.newArray(componentType(method), valueMethod.load(0));\n+                DotName componentName = componentTypeName(method);\n+                // Use empty array constants for common component kinds\n+                if (DotNames.CLASS.equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_CLASS_ARRAY);\n+                } else if (DotNames.STRING.equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);\n+                } else if (DotNames.LONG.equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);\n+                } else if (DotNames.INTEGER.equals(componentName)) {\n+                    retValue = valueMethod.readStaticField(FieldDescriptors.ANNOTATION_LITERALS_EMPTY_STRING_ARRAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689a18703ee3af8b634588407dfebdf8a6bf88f2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MTQzNw==", "bodyText": "Is it normal it's String here?", "url": "https://github.com/quarkusio/quarkus/pull/7003#discussion_r375251437", "createdAt": "2020-02-05T13:24:35Z", "author": {"login": "gsmet"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/FieldDescriptors.java", "diffHunk": "@@ -12,6 +13,22 @@\n     static final FieldDescriptor QUALIFIERS_IP_QUALIFIERS = FieldDescriptor.of(Qualifiers.class, \"IP_DEFAULT_QUALIFIERS\",\n             Set.class);\n \n+    static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_CLASS_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n+            \"EMPTY_CLASS_ARRAY\",\n+            Class[].class);\n+\n+    static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_STRING_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n+            \"EMPTY_STRING_ARRAY\",\n+            String[].class);\n+\n+    static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_LONG_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n+            \"EMPTY_LONG_ARRAY\",\n+            String[].class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689a18703ee3af8b634588407dfebdf8a6bf88f2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MTUwNQ==", "bodyText": "Same here?", "url": "https://github.com/quarkusio/quarkus/pull/7003#discussion_r375251505", "createdAt": "2020-02-05T13:24:43Z", "author": {"login": "gsmet"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/FieldDescriptors.java", "diffHunk": "@@ -12,6 +13,22 @@\n     static final FieldDescriptor QUALIFIERS_IP_QUALIFIERS = FieldDescriptor.of(Qualifiers.class, \"IP_DEFAULT_QUALIFIERS\",\n             Set.class);\n \n+    static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_CLASS_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n+            \"EMPTY_CLASS_ARRAY\",\n+            Class[].class);\n+\n+    static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_STRING_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n+            \"EMPTY_STRING_ARRAY\",\n+            String[].class);\n+\n+    static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_LONG_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n+            \"EMPTY_LONG_ARRAY\",\n+            String[].class);\n+    \n+    static final FieldDescriptor ANNOTATION_LITERALS_EMPTY_INT_ARRAY = FieldDescriptor.of(AnnotationLiterals.class,\n+            \"EMPTY_INT_ARRAY\",\n+            String[].class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689a18703ee3af8b634588407dfebdf8a6bf88f2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MjcwMQ==", "bodyText": "Just to be sure, you call that one often or not? If you do better move that one to the constructor as they look fully immutable.", "url": "https://github.com/quarkusio/quarkus/pull/7003#discussion_r375252701", "createdAt": "2020-02-05T13:27:01Z", "author": {"login": "gsmet"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/AbstractInvocationContext.java", "diffHunk": "@@ -43,7 +44,7 @@ protected AbstractInvocationContext(Object target, Method method,\n \n     @Override\n     public Set<Annotation> getInterceptorBindings() {\n-        return interceptorBindings;\n+        return Collections.unmodifiableSet(interceptorBindings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689a18703ee3af8b634588407dfebdf8a6bf88f2"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fb215ec67d724ee51e93cecc9c4292296ce68e1", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/6fb215ec67d724ee51e93cecc9c4292296ce68e1", "committedDate": "2020-02-05T14:45:26Z", "message": "ArC- reduce overhead of metadata initialization in subclass constructors\n\n- use shared literal instances for interceptor bindings\n- use shared interceptor chains"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "689a18703ee3af8b634588407dfebdf8a6bf88f2", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/689a18703ee3af8b634588407dfebdf8a6bf88f2", "committedDate": "2020-02-05T13:11:39Z", "message": "ArC- reduce overhead of metadata initialization in subclass constructors\n\n- use shared literal instances for interceptor bindings\n- use shared interceptor chains"}, "afterCommit": {"oid": "6fb215ec67d724ee51e93cecc9c4292296ce68e1", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/6fb215ec67d724ee51e93cecc9c4292296ce68e1", "committedDate": "2020-02-05T14:45:26Z", "message": "ArC- reduce overhead of metadata initialization in subclass constructors\n\n- use shared literal instances for interceptor bindings\n- use shared interceptor chains"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6e2eb3c942fb59af5893b41d453760a006fb56d", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/e6e2eb3c942fb59af5893b41d453760a006fb56d", "committedDate": "2020-02-05T20:42:23Z", "message": "SubclassGenerator - set the initialCapacity for the map of metadata"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0b726ed1fe77751d96db296fc4fda76470c1deb", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/f0b726ed1fe77751d96db296fc4fda76470c1deb", "committedDate": "2020-02-05T18:50:47Z", "message": "SubclassGenerator - set the initialCapacity for the map of metadata"}, "afterCommit": {"oid": "e6e2eb3c942fb59af5893b41d453760a006fb56d", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/e6e2eb3c942fb59af5893b41d453760a006fb56d", "committedDate": "2020-02-05T20:42:23Z", "message": "SubclassGenerator - set the initialCapacity for the map of metadata"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDM0MTYz", "url": "https://github.com/quarkusio/quarkus/pull/7003#pullrequestreview-354034163", "createdAt": "2020-02-05T20:56:17Z", "commit": {"oid": "e6e2eb3c942fb59af5893b41d453760a006fb56d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 77, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}