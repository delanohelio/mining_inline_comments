{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyMDEyNDU5", "number": 10828, "title": "Upgrade SmallRye Health to 2.2.3 and add Health UI", "bodyText": "This PR upgrade the SmallRye Health to the latest 2.2.3 version and also add the new Health UI\nSigned-off-by: Phillip Kruger phillip.kruger@gmail.com", "createdAt": "2020-07-18T16:19:51Z", "url": "https://github.com/quarkusio/quarkus/pull/10828", "merged": true, "mergeCommit": {"oid": "96ece8e0208cca7bd5107f6d9afa286db3a6ac23"}, "closed": true, "closedAt": "2020-07-21T13:27:59Z", "author": {"login": "phillip-kruger"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2tOeiAFqTQ1MTM3OTc2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3GPCFAFqTQ1MjQ1NTg5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzc5NzY4", "url": "https://github.com/quarkusio/quarkus/pull/10828#pullrequestreview-451379768", "createdAt": "2020-07-20T08:02:10Z", "commit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODowMjoxMVrOGz-ZQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODoxODoyOVrOGz_HRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1MjgzNA==", "bodyText": "IIUC, the UI artifacts are only static files so why do we need to reextract them when the path to UI changes? Can't you just reuse already created temp dir and just change the path in the cached instance?", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457152834", "createdAt": "2020-07-20T08:02:11Z", "author": {"login": "xstefank"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1NzQ2MA==", "bodyText": "I would suggest incorporating this line in the if statement on the following line so you can avoid some processing which will be discarded for ignored files.", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457157460", "createdAt": "2020-07-20T08:08:40Z", "author": {"login": "xstefank"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.rootPathUi + \"/\"));\n+        } else if (health.alwaysIncludeUi) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(HEALTH_UI_WEBJAR_PREFIX) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(HEALTH_UI_WEBJAR_PREFIX + \"/\", \"\");\n+                                byte[] content = FileUtil.readFileContents(inputStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MDM5Mg==", "bodyText": "This can be called during dev mode so maybe even taking dep.getArtifact() into a variable may save some time? :) Not sure what is more expensive but there can be a lot of deps potentially so worth thinking about.", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457160392", "createdAt": "2020-07-20T08:12:42Z", "author": {"login": "xstefank"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.rootPathUi + \"/\"));\n+        } else if (health.alwaysIncludeUi) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(HEALTH_UI_WEBJAR_PREFIX) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(HEALTH_UI_WEBJAR_PREFIX + \"/\", \"\");\n+                                byte[] content = FileUtil.readFileContents(inputStream);\n+                                if (IGNORE_LIST.contains(filename)) {\n+                                    ClassLoader classLoader = SmallRyeHealthProcessor.class.getClassLoader();\n+                                    try (InputStream resourceAsStream = classLoader\n+                                            .getResourceAsStream(OWN_MEDIA_FOLDER + filename)) {\n+                                        content = IoUtil.readBytes(resourceAsStream);\n+                                    }\n+                                }\n+\n+                                String fileName = HEALTH_UI_FINAL_DESTINATION + \"/\" + filename;\n+\n+                                generatedResourceProducer\n+                                        .produce(new GeneratedResourceBuildItem(fileName, content));\n+\n+                                nativeImageResourceProducer\n+                                        .produce(new NativeImageResourceBuildItem(fileName));\n+\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+\n+            Handler<RoutingContext> handler = recorder\n+                    .uiHandler(HEALTH_UI_FINAL_DESTINATION, httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+        }\n+    }\n+\n+    private AppArtifact getHealthUiArtifact(CurateOutcomeBuildItem curateOutcomeBuildItem) {\n+        for (AppDependency dep : curateOutcomeBuildItem.getEffectiveModel().getFullDeploymentDeps()) {\n+            if (dep.getArtifact().getArtifactId().equals(HEALTH_UI_WEBJAR_ARTIFACT_ID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MzMxOA==", "bodyText": "can extractHealthUi be reused here?", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457163318", "createdAt": "2020-07-20T08:16:33Z", "author": {"login": "xstefank"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.rootPathUi + \"/\"));\n+        } else if (health.alwaysIncludeUi) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2NDYxMw==", "bodyText": "probably forgotten implementation of the test :)", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457164613", "createdAt": "2020-07-20T08:18:29Z", "author": {"login": "xstefank"}, "path": "extensions/smallrye-health/deployment/src/test/java/io/quarkus/smallrye/health/test/ui/ErroneousConfigTest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.quarkus.smallrye.graphql.deployment.ui;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.deployment.configuration.ConfigurationError;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class ErroneousConfigTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setExpectedException(ConfigurationError.class)\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addAsResource(new StringAsset(\"quarkus.smallrye-health.root-path-ui=/\\n\"), \"application.properties\"));\n+\n+    @Test\n+    public void shouldNotStartApplicationIfUIPathIsASlash() {\n+        Assertions.fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNDUyNzkx", "url": "https://github.com/quarkusio/quarkus/pull/10828#pullrequestreview-451452791", "createdAt": "2020-07-20T09:41:34Z", "commit": {"oid": "9a65948613cae3d924a7ada7f214b430a9069f5f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNTk2MTQw", "url": "https://github.com/quarkusio/quarkus/pull/10828#pullrequestreview-451596140", "createdAt": "2020-07-20T13:18:38Z", "commit": {"oid": "2705ae6d8b596906008276c0c0373d349e3b4e89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoxODozOFrOG0L5DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoxODozOFrOG0L5DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA==", "bodyText": "Better move these properties to a ui subgroup", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457373964", "createdAt": "2020-07-20T13:18:38Z", "author": {"login": "gastaldi"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -102,6 +131,26 @@\n          */\n         @ConfigItem(defaultValue = \"/group\")\n         String groupPath;\n+\n+        /**\n+         * The path where Health UI is available.\n+         * The value `/` is not allowed as it blocks the application from serving anything else.\n+         */\n+        @ConfigItem(defaultValue = \"/health-ui\")\n+        String rootPathUi;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2705ae6d8b596906008276c0c0373d349e3b4e89"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjYzOTI3", "url": "https://github.com/quarkusio/quarkus/pull/10828#pullrequestreview-451663927", "createdAt": "2020-07-20T14:32:23Z", "commit": {"oid": "f9d09b40e3d28ac67ad2591e1246389ba58871a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTQwNDI3", "url": "https://github.com/quarkusio/quarkus/pull/10828#pullrequestreview-452140427", "createdAt": "2020-07-21T05:41:42Z", "commit": {"oid": "464622c898f75c9e59b0a0236bf773435eeb72d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNTo0MTo0MlrOG0o47A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNTo0MTo0MlrOG0o47A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTA2OA==", "bodyText": "This may throw a NPE", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457849068", "createdAt": "2020-07-21T05:41:42Z", "author": {"login": "gastaldi"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +278,179 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.ui.enable) {\n+            return;\n+        }\n+        if (\"/\".equals(health.ui.rootPath)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    updateApiUrl(tempDir.resolve(FILE_TO_UPDATE), healthPath);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.ui.rootPath));\n+            routeProducer.produce(new RouteBuildItem(health.ui.rootPath, handler));\n+            routeProducer.produce(new RouteBuildItem(health.ui.rootPath + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.ui.rootPath + \"/\"));\n+        } else if (health.ui.alwaysInclude) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(HEALTH_UI_WEBJAR_PREFIX) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(HEALTH_UI_WEBJAR_PREFIX + \"/\", \"\");\n+                                byte[] content = FileUtil.readFileContents(inputStream);\n+                                if (entry.getName().endsWith(FILE_TO_UPDATE)) {\n+                                    content = updateApiUrl(new String(content, StandardCharsets.UTF_8), healthPath)\n+                                            .getBytes(StandardCharsets.UTF_8);\n+                                }\n+                                if (IGNORE_LIST.contains(filename)) {\n+                                    ClassLoader classLoader = SmallRyeHealthProcessor.class.getClassLoader();\n+                                    try (InputStream resourceAsStream = classLoader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "464622c898f75c9e59b0a0236bf773435eeb72d3"}, "originalPosition": 221}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTQwNzgx", "url": "https://github.com/quarkusio/quarkus/pull/10828#pullrequestreview-452140781", "createdAt": "2020-07-21T05:42:40Z", "commit": {"oid": "464622c898f75c9e59b0a0236bf773435eeb72d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNTo0Mjo0MFrOG0o6Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNTo0Mjo0MFrOG0o6Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTM3NQ==", "bodyText": "Throw UncheckedIoException instead", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457849375", "createdAt": "2020-07-21T05:42:40Z", "author": {"login": "gastaldi"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +278,179 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.ui.enable) {\n+            return;\n+        }\n+        if (\"/\".equals(health.ui.rootPath)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    updateApiUrl(tempDir.resolve(FILE_TO_UPDATE), healthPath);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "464622c898f75c9e59b0a0236bf773435eeb72d3"}, "originalPosition": 190}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMjIzNzg3", "url": "https://github.com/quarkusio/quarkus/pull/10828#pullrequestreview-452223787", "createdAt": "2020-07-21T08:10:43Z", "commit": {"oid": "a130fb367a109f0879edb6b5052274ced6d2ea09"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoxMDo0M1rOG0s9gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoxMDo0M1rOG0s9gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkxNTc3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Health UI\n          \n          \n            \n            == Health UI (Experimental API not included in the MicroProfile specification yet)", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457915778", "createdAt": "2020-07-21T08:10:43Z", "author": {"login": "xstefank"}, "path": "docs/src/main/asciidoc/microprofile-health.adoc", "diffHunk": "@@ -330,6 +330,16 @@ that will validate each datasources: link:datasource#datasource-health-check[Dat\n \n You can disable extension health check via the property `quarkus.health.extensions.enabled` so none will be automatically registered.\n \n+== Health UI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a130fb367a109f0879edb6b5052274ced6d2ea09"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "765399e6cf23f84b18830c22af49fc41daf89d93", "author": {"user": {"login": "phillip-kruger", "name": "Phillip Kr\u00fcger"}}, "url": "https://github.com/quarkusio/quarkus/commit/765399e6cf23f84b18830c22af49fc41daf89d93", "committedDate": "2020-07-21T08:18:37Z", "message": "Upgrade SmallRye Health to 2.2.3 and add Health UI\n\nSigned-off-by: Phillip Kruger <phillip.kruger@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNDU1ODk0", "url": "https://github.com/quarkusio/quarkus/pull/10828#pullrequestreview-452455894", "createdAt": "2020-07-21T13:27:46Z", "commit": {"oid": "765399e6cf23f84b18830c22af49fc41daf89d93"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1179, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}