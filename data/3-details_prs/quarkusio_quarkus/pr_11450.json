{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NTY0NjQw", "number": 11450, "title": "Quarkus CLI 2.0", "bodyText": "WIP: I'm still working on testing.\nThis mostly a port of the aesh/ stuff to Picocli.  I did change command structure a bit here and there.  One specific one is that \"list\" is renamed to \"extensions\".  I want the \"list\" command to list extensions and dependencies that were added to the project with the \"add\" command.\nI'll add some additional comments to this PR that show usage.", "createdAt": "2020-08-18T15:13:56Z", "url": "https://github.com/quarkusio/quarkus/pull/11450", "merged": true, "mergeCommit": {"oid": "c606559b2bd7708481519a5c29c100cc3afccf53"}, "closed": true, "closedAt": "2020-09-03T08:59:56Z", "author": {"login": "patriot1burke"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAI1lKAFqTQ2OTU3NzM3MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFMxSQgFqTQ4MTYzNzMzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NTc3Mzcw", "url": "https://github.com/quarkusio/quarkus/pull/11450#pullrequestreview-469577370", "createdAt": "2020-08-18T15:34:59Z", "commit": {"oid": "97b103628d2c368027fdacf03d4487a1a5dfc720"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTozNDo1OVrOHCaRpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTozNDo1OVrOHCaRpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4OTcwMA==", "bodyText": "Looks like brackets are no longer a thing in 2020 :)", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r472289700", "createdAt": "2020-08-18T15:34:59Z", "author": {"login": "gastaldi"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Create.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package io.quarkus.cli;\n+\n+import java.io.File;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.cli.core.ExitCodes;\n+import io.quarkus.devtools.commands.CreateProject;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.codegen.SourceType;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"create\", sortOptions = false, mixinStandardHelpOptions = true, description = \"Create a new quarkus project.\")\n+public class Create implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-g\", \"--groupId\" }, order = 1, paramLabel = \"GID\", description = \"The groupId for project\")\n+    String groupId = \"org.acme\";\n+\n+    @CommandLine.Option(names = { \"-a\",\n+            \"--artifactId\" }, order = 2, paramLabel = \"AID\", description = \"The artifactId for project\")\n+    String artifactId = \"my-project\";\n+\n+    @CommandLine.Option(names = { \"-v\",\n+            \"--proj-version\" }, order = 3, paramLabel = \"TAG\", description = \"The version for project\")\n+    String version = \"1.0-SNAPSHOT\";\n+\n+    @CommandLine.Option(names = { \"-0\",\n+            \"--skipExample\" }, order = 4, description = \"Generate without example code.\")\n+    boolean skipExample = false;\n+\n+    @CommandLine.ArgGroup()\n+    TargetBuildTool targetBuildTool = new TargetBuildTool();\n+\n+    static class TargetBuildTool {\n+        @CommandLine.Option(names = { \"--maven\" }, order = 5, description = \"Create a Maven project. (default)\")\n+        boolean maven = false;\n+\n+        @CommandLine.Option(names = { \"--gradle\" }, order = 6, description = \"Create a Gradle project.\")\n+        boolean gradle = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--grade-kotlin-dsl\" }, order = 7, description = \"Create a Gradle Kotlin DSL project.\")\n+        boolean gradleKotlinDsl = false;\n+    }\n+\n+    @CommandLine.ArgGroup()\n+    TargetLanguage language = new TargetLanguage();\n+\n+    static class TargetLanguage {\n+        @CommandLine.Option(names = {\n+                \"--java\" }, order = 8, description = \"Generate Java examples. (default)\")\n+        boolean java = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--kotlin\" }, order = 9, description = \"Generate Kotlin examples.\")\n+        boolean kotlin = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--scala\" }, order = 10, description = \"Generate Scala examples.\")\n+        boolean scala = false;\n+    }\n+\n+    @CommandLine.Parameters(arity = \"0..1\", paramLabel = \"EXTENSION\", description = \"extension to add to project\")\n+    Set<String> extensions;\n+\n+    @CommandLine.ParentCommand\n+    QuarkusCli parent;\n+\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public Integer call() throws Exception {\n+        try {\n+            File projectDirectory = new File(System.getProperty(\"user.dir\"));\n+\n+            File projectRoot = new File(projectDirectory, artifactId);\n+            if (projectRoot.exists()) {\n+                spec.commandLine().getErr().println(\"Unable to create the project, \" +\n+                        \"the directory \" + projectRoot.getAbsolutePath() + \" already exists\");\n+                return ExitCodes.FAILURE;\n+            }\n+\n+            SourceType sourceType = SourceType.JAVA;\n+            if (targetBuildTool.gradleKotlinDsl)\n+                sourceType = SourceType.KOTLIN;\n+            else if (language.scala)\n+                sourceType = SourceType.SCALA;\n+            else if (language.kotlin)\n+                sourceType = SourceType.KOTLIN;\n+            else if (extensions != null && !extensions.isEmpty())\n+                sourceType = CreateProject.determineSourceType(extensions);\n+\n+            BuildTool buildTool = BuildTool.MAVEN;\n+            if (targetBuildTool.gradle)\n+                buildTool = BuildTool.GRADLE;\n+            else if (targetBuildTool.gradleKotlinDsl)\n+                buildTool = BuildTool.GRADLE_KOTLIN_DSL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b103628d2c368027fdacf03d4487a1a5dfc720"}, "originalPosition": 99}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7375dcbacebd912998c81c4feb5fc53a52c97df", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/a7375dcbacebd912998c81c4feb5fc53a52c97df", "committedDate": "2020-08-18T21:32:53Z", "message": "cli 2.0 remove aesh from bom"}, "afterCommit": {"oid": "ff26046b839d0845653e4ef750597977fd7eb60b", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/ff26046b839d0845653e4ef750597977fd7eb60b", "committedDate": "2020-08-20T00:22:00Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff26046b839d0845653e4ef750597977fd7eb60b", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/ff26046b839d0845653e4ef750597977fd7eb60b", "committedDate": "2020-08-20T00:22:00Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests"}, "afterCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/b65a79b9245df5c4782ce73073b1b5bd931fcb88", "committedDate": "2020-08-20T01:19:45Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzE0Nzc4", "url": "https://github.com/quarkusio/quarkus/pull/11450#pullrequestreview-471314778", "createdAt": "2020-08-20T07:23:37Z", "commit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzoyMzozN1rOHDvqzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzozMToyNlrOHDwEqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY4ODc4Mg==", "bodyText": "@aloubyansky @maxandersen @patriot1burke , this command is not going to be compatible with gradle. This is why for the add/remove/list extension, I would delegate the call to the wrapper plugin to make this command compatible on both mvn and gradle. If there is no wrapper, then you could fallback to this and if it target a gradle project fail with instruction.", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r473688782", "createdAt": "2020-08-20T07:23:37Z", "author": {"login": "ia3andy"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Add.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.cli;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.devtools.commands.AddExtensions;\n+import io.quarkus.devtools.commands.data.QuarkusCommandOutcome;\n+import io.quarkus.devtools.project.QuarkusProject;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"add\", mixinStandardHelpOptions = false, description = \"Add extension(s) to current project.\")\n+public class Add implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, description = \"display this help message\")\n+    boolean usageHelpRequested;\n+\n+    @CommandLine.Parameters(arity = \"1\", paramLabel = \"EXTENSION\", description = \"extension to add to project\")\n+    Set<String> extensions;\n+\n+    @CommandLine.ParentCommand\n+    QuarkusCli parent;\n+\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public Integer call() {\n+        Path projectDirectory = Paths.get(System.getProperty(\"user.dir\"));\n+        try {\n+            QuarkusProject quarkusProject = QuarkusProject.resolveExistingProject(projectDirectory,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5MTc3Ng==", "bodyText": "@patriot1burke fyi sourceType is not used by codestarts, you could remove it. What you will need to do though, is to add the language extension when --kotlin or --scala is selected.", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r473691776", "createdAt": "2020-08-20T07:27:14Z", "author": {"login": "ia3andy"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Create.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package io.quarkus.cli;\n+\n+import java.io.File;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.devtools.commands.CreateProject;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.codegen.SourceType;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"create\", sortOptions = false, mixinStandardHelpOptions = false, description = \"Create a new quarkus project.\")\n+public class Create implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, order = 0, description = \"display this help message\")\n+    boolean usageHelpRequested;\n+\n+    @CommandLine.Option(names = { \"-g\", \"--group-id\" }, order = 1, paramLabel = \"GID\", description = \"The groupId for project\")\n+    String groupId = \"org.acme\";\n+\n+    @CommandLine.Option(names = { \"-a\",\n+            \"--artifact-id\" }, order = 2, paramLabel = \"AID\", description = \"The artifactId for project\")\n+    String artifactId = \"my-project\";\n+\n+    @CommandLine.Option(names = { \"-v\",\n+            \"--version\" }, order = 3, paramLabel = \"TAG\", description = \"The version for project\")\n+    String version = \"1.0-SNAPSHOT\";\n+\n+    @CommandLine.Option(names = { \"-0\",\n+            \"--empty\" }, order = 4, description = \"Generate without example code.\")\n+    boolean empty = false;\n+\n+    @CommandLine.ArgGroup()\n+    TargetBuildTool targetBuildTool = new TargetBuildTool();\n+\n+    static class TargetBuildTool {\n+        @CommandLine.Option(names = { \"--maven\" }, order = 5, description = \"Create a Maven project. (default)\")\n+        boolean maven = false;\n+\n+        @CommandLine.Option(names = { \"--gradle\" }, order = 6, description = \"Create a Gradle project.\")\n+        boolean gradle = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--grade-kotlin-dsl\" }, order = 7, description = \"Create a Gradle Kotlin DSL project.\")\n+        boolean gradleKotlinDsl = false;\n+    }\n+\n+    @CommandLine.ArgGroup()\n+    TargetLanguage language = new TargetLanguage();\n+\n+    static class TargetLanguage {\n+        @CommandLine.Option(names = {\n+                \"--java\" }, order = 8, description = \"Generate Java examples. (default)\")\n+        boolean java = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--kotlin\" }, order = 9, description = \"Generate Kotlin examples.\")\n+        boolean kotlin = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--scala\" }, order = 10, description = \"Generate Scala examples.\")\n+        boolean scala = false;\n+    }\n+\n+    @CommandLine.Parameters(arity = \"0..1\", paramLabel = \"EXTENSION\", description = \"extension to add to project\")\n+    Set<String> extensions;\n+\n+    @CommandLine.ParentCommand\n+    QuarkusCli parent;\n+\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public Integer call() throws Exception {\n+        try {\n+            File projectDirectory = new File(System.getProperty(\"user.dir\"));\n+\n+            File projectRoot = new File(projectDirectory, artifactId);\n+            if (projectRoot.exists()) {\n+                spec.commandLine().getErr().println(\"Unable to create the project, \" +\n+                        \"the directory \" + projectRoot.getAbsolutePath() + \" already exists\");\n+                return CommandLine.ExitCode.SOFTWARE;\n+            }\n+\n+            SourceType sourceType = SourceType.JAVA;\n+            if (targetBuildTool.gradleKotlinDsl)\n+                sourceType = SourceType.KOTLIN;\n+            else if (language.scala)\n+                sourceType = SourceType.SCALA;\n+            else if (language.kotlin)\n+                sourceType = SourceType.KOTLIN;\n+            else if (extensions != null && !extensions.isEmpty())\n+                sourceType = CreateProject.determineSourceType(extensions);\n+\n+            BuildTool buildTool = BuildTool.MAVEN;\n+            if (targetBuildTool.gradle)\n+                buildTool = BuildTool.GRADLE;\n+            else if (targetBuildTool.gradleKotlinDsl)\n+                buildTool = BuildTool.GRADLE_KOTLIN_DSL;\n+\n+            boolean status = new CreateProject(projectRoot.toPath(),\n+                    QuarkusPlatformConfig.getGlobalDefault().getPlatformDescriptor())\n+                            .buildTool(buildTool)\n+                            .groupId(groupId)\n+                            .artifactId(artifactId)\n+                            .version(version)\n+                            .sourceType(sourceType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5NTQwMg==", "bodyText": "And even more now that I see you already implemented an ExecuteUtil :)", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r473695402", "createdAt": "2020-08-20T07:31:26Z", "author": {"login": "ia3andy"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Add.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.cli;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.devtools.commands.AddExtensions;\n+import io.quarkus.devtools.commands.data.QuarkusCommandOutcome;\n+import io.quarkus.devtools.project.QuarkusProject;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"add\", mixinStandardHelpOptions = false, description = \"Add extension(s) to current project.\")\n+public class Add implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, description = \"display this help message\")\n+    boolean usageHelpRequested;\n+\n+    @CommandLine.Parameters(arity = \"1\", paramLabel = \"EXTENSION\", description = \"extension to add to project\")\n+    Set<String> extensions;\n+\n+    @CommandLine.ParentCommand\n+    QuarkusCli parent;\n+\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public Integer call() {\n+        Path projectDirectory = Paths.get(System.getProperty(\"user.dir\"));\n+        try {\n+            QuarkusProject quarkusProject = QuarkusProject.resolveExistingProject(projectDirectory,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY4ODc4Mg=="}, "originalCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMjQ4Nzg4", "url": "https://github.com/quarkusio/quarkus/pull/11450#pullrequestreview-472248788", "createdAt": "2020-08-21T06:57:25Z", "commit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjo1NzoyNVrOHEd01w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoyODo1OFrOHEialw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0NTAxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            quarkus.banner.enabled=false\n          \n          \n            \n            quarkus.banner.enabled=false\n          \n          \n            \n            quarkus.package.type=fast-jar\n          \n      \n    \n    \n  \n\nusing fast-jar then everything is in target/quarkus-app rather than spread over the target folder", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474445015", "createdAt": "2020-08-21T06:57:25Z", "author": {"login": "maxandersen"}, "path": "devtools/cli/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,2 @@\n+quarkus.log.level=WARN\n+quarkus.banner.enabled=false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2MDAzMw==", "bodyText": "Why not \"VERSION\" ? Tag is different.\nSame with AID and GID wouldn't it be more intuitive to list as ARTIFACT and GROUP ?", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474460033", "createdAt": "2020-08-21T07:17:51Z", "author": {"login": "maxandersen"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Create.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package io.quarkus.cli;\n+\n+import java.io.File;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.devtools.commands.CreateProject;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.codegen.SourceType;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"create\", sortOptions = false, mixinStandardHelpOptions = false, description = \"Create a new quarkus project.\")\n+public class Create implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, order = 0, description = \"display this help message\")\n+    boolean usageHelpRequested;\n+\n+    @CommandLine.Option(names = { \"-g\", \"--group-id\" }, order = 1, paramLabel = \"GID\", description = \"The groupId for project\")\n+    String groupId = \"org.acme\";\n+\n+    @CommandLine.Option(names = { \"-a\",\n+            \"--artifact-id\" }, order = 2, paramLabel = \"AID\", description = \"The artifactId for project\")\n+    String artifactId = \"my-project\";\n+\n+    @CommandLine.Option(names = { \"-v\",\n+            \"--version\" }, order = 3, paramLabel = \"TAG\", description = \"The version for project\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ4MTg3OQ==", "bodyText": "mvn quarkus:dev have nice colors quarkus dev got none.\nSomething gets stripped.", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474481879", "createdAt": "2020-08-21T07:44:22Z", "author": {"login": "maxandersen"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Dev.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.quarkus.cli;\n+\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.cli.core.ExecuteUtil;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"dev\", mixinStandardHelpOptions = false, description = \"Execute project in live coding dev mode\")\n+public class Dev implements Callable<Integer> {\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, description = \"display this help message\")\n+    boolean usageHelpRequested;\n+\n+    @CommandLine.ParentCommand\n+    QuarkusCli parent;\n+\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public Integer call() throws Exception {\n+        try {\n+            return ExecuteUtil.executeBuildsystem(null, \"quarkus:dev\", \"quarkusDev\", spec.commandLine());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ5Njc0OA==", "bodyText": "quarkus rm hibernate in a project with just quarkus-hibernate-orm-panache still complains about having to be precise:\n\u274c Multiple extensions matching 'hibernate'\n     * io.quarkus:quarkus-hibernate-orm\n     * io.quarkus:quarkus-hibernate-reactive\n     * io.quarkus:quarkus-hibernate-envers\n     * io.quarkus:quarkus-hibernate-orm-panache\n     * io.quarkus:quarkus-hibernate-orm-rest-data-panache\n     * io.quarkus:quarkus-hibernate-orm-panache-kotlin\n     * io.quarkus:quarkus-hibernate-search-elasticsearch\n     * io.quarkus:quarkus-hibernate-validator\n     Be more specific e.g using the exact name or the full GAV.", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474496748", "createdAt": "2020-08-21T08:01:43Z", "author": {"login": "maxandersen"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Remove.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.quarkus.cli;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.devtools.commands.RemoveExtensions;\n+import io.quarkus.devtools.commands.data.QuarkusCommandOutcome;\n+import io.quarkus.devtools.project.QuarkusProject;\n+import io.quarkus.platform.descriptor.QuarkusPlatformDescriptor;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"remove\", aliases = \"rm\", mixinStandardHelpOptions = false, description = \"Remove an extension from this project.\")\n+public class Remove implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, description = \"display this help message\")\n+    boolean usageHelpRequested;\n+\n+    @CommandLine.Parameters(arity = \"1\", paramLabel = \"EXTENSION\", description = \"extension to remove\")\n+    Set<String> extensions;\n+\n+    @CommandLine.ParentCommand\n+    QuarkusCli parent;\n+\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public Integer call() {\n+        final QuarkusPlatformDescriptor platformDescr = QuarkusPlatformConfig.getGlobalDefault().getPlatformDescriptor();\n+        try {\n+            Path projectDirectory = Paths.get(System.getProperty(\"user.dir\"));\n+            RemoveExtensions project = new RemoveExtensions(QuarkusProject.resolveExistingProject(projectDirectory,\n+                    platformDescr)).extensions(extensions);\n+            QuarkusCommandOutcome result = project.execute();\n+            return result.isSuccess() ? CommandLine.ExitCode.OK : CommandLine.ExitCode.SOFTWARE;\n+        } catch (Exception e) {\n+            if (parent.showErrors)\n+                e.printStackTrace(spec.commandLine().getErr());\n+            spec.commandLine().getErr().println(\"Unable to remove extension matching:\" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMDUyMA==", "bodyText": "when no no mvnw nor mvn in path this seem to just fail silently. no error output, no nothing.", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474500520", "createdAt": "2020-08-21T08:06:19Z", "author": {"login": "maxandersen"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/core/ExecuteUtil.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package io.quarkus.cli.core;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.shared.invoker.DefaultInvocationRequest;\n+import org.apache.maven.shared.invoker.DefaultInvoker;\n+import org.apache.maven.shared.invoker.InvocationRequest;\n+import org.apache.maven.shared.invoker.InvocationResult;\n+import org.apache.maven.shared.invoker.Invoker;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+import picocli.CommandLine;\n+\n+public class ExecuteUtil {\n+\n+    public static void executeGradle(File projectDirectory, String buildTarget, CommandLine cl)\n+            throws Exception {\n+        String gradleExecutable = findExecutable(\"gradle\");\n+        if (gradleExecutable == null) {\n+            cl.getErr().println(\"Unable to find the gradle executable, is it in your path?\");\n+        } else {\n+            gradleExecutable += File.separator + \"bin\" + File.separator + \"gradle\";\n+\n+            Process process = new ProcessBuilder()\n+                    .command(gradleExecutable, buildTarget)\n+                    .directory(projectDirectory)\n+                    .start();\n+\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                cl.getOut().println(line);\n+            }\n+\n+            int exit = process.waitFor();\n+            if (exit != 0)\n+                cl.getErr().println(\"Build failed.\");\n+        }\n+    }\n+\n+    public static void executeMaven(File projectDirectory, String buildTarget, CommandLine cl) throws Exception {\n+        String mvnPath = findExecutable(\"mvn\");\n+        System.setProperty(\"maven.home\", mvnPath);\n+\n+        InvocationRequest request = new DefaultInvocationRequest();\n+        request.setPomFile(new File(projectDirectory.getAbsolutePath() + File.separatorChar + \"pom.xml\"));\n+        request.setGoals(Collections.singletonList(buildTarget));\n+\n+        Invoker invoker = new DefaultInvoker();\n+\n+        InvocationResult result = invoker.execute(request);\n+\n+        if (result.getExitCode() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNjc2OA==", "bodyText": "Tried building with -Dnative and I get errors; at least on OSX.\nError: Unsupported features in 3 methods\nDetailed message:\nError: Class initialization of io.netty.util.internal.logging.Log4JLogger failed. Use the option --initialize-at-run-time=io.netty.util.internal.logging.Log4JLogger to explicitly request delayed initialization of this class.\nOriginal exception that caused the problem: java.lang.NoClassDefFoundError: org/apache/log4j/Priority", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474506768", "createdAt": "2020-08-21T08:13:38Z", "author": {"login": "maxandersen"}, "path": "devtools/cli/pom.xml", "diffHunk": "@@ -0,0 +1,119 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-build-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../../build-parent/pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-cli</artifactId>\n+    <name>Quarkus - Command Line Interface</name>\n+    <description>Quarkus command line utility</description>\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-picocli</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-devtools-common</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.maven.shared</groupId>\n+            <artifactId>maven-invoker</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-platform-descriptor-json</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-platform-descriptor-resolver-json</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.assertj</groupId>\n+            <artifactId>assertj-core</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>build</goal>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMzI5MA==", "bodyText": "can confirm it doesn't work:\n quarkus add hibernate-orm-panache\nUnable to add extension: This feature is not yet implemented outside of the Gradle Plugin.", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474513290", "createdAt": "2020-08-21T08:21:04Z", "author": {"login": "maxandersen"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Add.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.cli;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.devtools.commands.AddExtensions;\n+import io.quarkus.devtools.commands.data.QuarkusCommandOutcome;\n+import io.quarkus.devtools.project.QuarkusProject;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"add\", mixinStandardHelpOptions = false, description = \"Add extension(s) to current project.\")\n+public class Add implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, description = \"display this help message\")\n+    boolean usageHelpRequested;\n+\n+    @CommandLine.Parameters(arity = \"1\", paramLabel = \"EXTENSION\", description = \"extension to add to project\")\n+    Set<String> extensions;\n+\n+    @CommandLine.ParentCommand\n+    QuarkusCli parent;\n+\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public Integer call() {\n+        Path projectDirectory = Paths.get(System.getProperty(\"user.dir\"));\n+        try {\n+            QuarkusProject quarkusProject = QuarkusProject.resolveExistingProject(projectDirectory,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY4ODc4Mg=="}, "originalCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxNTAwMA==", "bodyText": "all this parent/spec code and possibly also the error handling we could move to a base class and simplify these commands quite a bit.", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474515000", "createdAt": "2020-08-21T08:23:00Z", "author": {"login": "maxandersen"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Build.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.quarkus.cli;\n+\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.cli.core.ExecuteUtil;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"build\", mixinStandardHelpOptions = false, description = \"Build your quarkus project\")\n+public class Build implements Callable<Integer> {\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, description = \"display this help message\")\n+    boolean usageHelpRequested;\n+\n+    @CommandLine.ParentCommand\n+    QuarkusCli parent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxNTc0OQ==", "bodyText": "should we have a --verbose that would print out the commands actually executed ?", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474515749", "createdAt": "2020-08-21T08:23:51Z", "author": {"login": "maxandersen"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Build.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.quarkus.cli;\n+\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.cli.core.ExecuteUtil;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"build\", mixinStandardHelpOptions = false, description = \"Build your quarkus project\")\n+public class Build implements Callable<Integer> {\n+    @CommandLine.Option(names = { \"-h\", \"--help\" }, usageHelp = true, description = \"display this help message\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyMDIxNQ==", "bodyText": "looks like I can do quarkus clean build and that gets execute as multiple commands. That makes it slower than corresponding mvn clean build or gradle clean build\nWondering if we could \"group\" these rather than be done separately ?", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474520215", "createdAt": "2020-08-21T08:28:58Z", "author": {"login": "maxandersen"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Build.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package io.quarkus.cli;\n+\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.cli.core.ExecuteUtil;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"build\", mixinStandardHelpOptions = false, description = \"Build your quarkus project\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMzM3NDk4", "url": "https://github.com/quarkusio/quarkus/pull/11450#pullrequestreview-472337498", "createdAt": "2020-08-21T09:20:44Z", "commit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOToyMDo0NFrOHElSjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOToyMDo0NFrOHElSjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU2NzMwOQ==", "bodyText": "i'm wondering if we should have some short cuts like:\ncreate-jaxrs\ncreate-cli\ncreate-knative ...etc. which would lockin/predefine which codestart and extension set gets run ?", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474567309", "createdAt": "2020-08-21T09:20:44Z", "author": {"login": "maxandersen"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Create.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package io.quarkus.cli;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65a79b9245df5c4782ce73073b1b5bd931fcb88"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyODA0NDQy", "url": "https://github.com/quarkusio/quarkus/pull/11450#pullrequestreview-472804442", "createdAt": "2020-08-21T20:36:08Z", "commit": {"oid": "ba19af162259437d72852ed27ebcc71b173a33b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDozNjowOFrOHE8d6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDozNjowOFrOHE8d6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk0NzA0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String param = \"--extensions=\";\n          \n          \n            \n                    boolean first = true;\n          \n          \n            \n                    for (String ext : extensions) {\n          \n          \n            \n                        if (first)\n          \n          \n            \n                            first = false;\n          \n          \n            \n                        else\n          \n          \n            \n                            param += \",\";\n          \n          \n            \n            \n          \n          \n            \n                        param += ext;\n          \n          \n            \n                    }\n          \n          \n            \n                    String param = \"--extensions=\" + String.join(\",\",extensions);", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r474947049", "createdAt": "2020-08-21T20:36:08Z", "author": {"login": "gastaldi"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Add.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package io.quarkus.cli;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Set;\n+\n+import io.quarkus.cli.core.BaseSubCommand;\n+import io.quarkus.cli.core.ExecuteUtil;\n+import io.quarkus.devtools.commands.AddExtensions;\n+import io.quarkus.devtools.commands.data.QuarkusCommandOutcome;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"add\", mixinStandardHelpOptions = false, description = \"Add extension(s) to current project.\")\n+public class Add extends BaseSubCommand {\n+\n+    @CommandLine.Parameters(arity = \"1\", paramLabel = \"EXTENSION\", description = \"extension to add to project\")\n+    Set<String> extensions;\n+\n+    @Override\n+    public Integer call() {\n+        Path projectDirectory = Paths.get(System.getProperty(\"user.dir\"));\n+\n+        BuildTool buildTool = QuarkusProject.resolveExistingProjectBuildTool(projectDirectory);\n+        if (buildTool == BuildTool.MAVEN) {\n+            return addMaven(projectDirectory);\n+        } else {\n+            return addGradle(projectDirectory);\n+\n+        }\n+\n+    }\n+\n+    private Integer addMaven(Path projectDirectory) {\n+        try {\n+            QuarkusProject quarkusProject = QuarkusProject.resolveExistingProject(projectDirectory,\n+                    QuarkusPlatformConfig.getGlobalDefault().getPlatformDescriptor());\n+\n+            AddExtensions project = new AddExtensions(quarkusProject);\n+            project.extensions(extensions);\n+\n+            QuarkusCommandOutcome result = project.execute();\n+            return result.isSuccess() ? CommandLine.ExitCode.OK : CommandLine.ExitCode.SOFTWARE;\n+        } catch (Exception e) {\n+            if (parent.showErrors)\n+                e.printStackTrace(spec.commandLine().getErr());\n+            spec.commandLine().getErr()\n+                    .println(\"Unable to add extension\" + (extensions.size() > 1 ? \"s\" : \"\") + \": \" + e.getMessage());\n+            return CommandLine.ExitCode.SOFTWARE;\n+        }\n+    }\n+\n+    private Integer addGradle(Path projectDirectory) {\n+        ArrayList<String> args = new ArrayList<>();\n+        args.add(\"addExtension\");\n+        String param = \"--extensions=\";\n+        boolean first = true;\n+        for (String ext : extensions) {\n+            if (first)\n+                first = false;\n+            else\n+                param += \",\";\n+\n+            param += ext;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba19af162259437d72852ed27ebcc71b173a33b9"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc0c883f6503043086fa3205eae27544dd7db42d", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/cc0c883f6503043086fa3205eae27544dd7db42d", "committedDate": "2020-08-24T16:05:17Z", "message": "cli add some gradle tests"}, "afterCommit": {"oid": "0640c9e0b720715e5dc9431afc7895090cd91e6f", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/0640c9e0b720715e5dc9431afc7895090cd91e6f", "committedDate": "2020-08-24T17:25:55Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0640c9e0b720715e5dc9431afc7895090cd91e6f", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/0640c9e0b720715e5dc9431afc7895090cd91e6f", "committedDate": "2020-08-24T17:25:55Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests"}, "afterCommit": {"oid": "c7769d37b855fb5650ced02a1b98c4adce350e51", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/c7769d37b855fb5650ced02a1b98c4adce350e51", "committedDate": "2020-08-24T23:42:13Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7769d37b855fb5650ced02a1b98c4adce350e51", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/c7769d37b855fb5650ced02a1b98c4adce350e51", "committedDate": "2020-08-24T23:42:13Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests"}, "afterCommit": {"oid": "f4dcd1d89e01846dd079230b386fa50f7bd3d9f3", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/f4dcd1d89e01846dd079230b386fa50f7bd3d9f3", "committedDate": "2020-08-26T00:43:46Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4dcd1d89e01846dd079230b386fa50f7bd3d9f3", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/f4dcd1d89e01846dd079230b386fa50f7bd3d9f3", "committedDate": "2020-08-26T00:43:46Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions"}, "afterCommit": {"oid": "5c67414ff92fb65ce0d3b228a8e1cf6ed9fb0a3d", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/5c67414ff92fb65ce0d3b228a8e1cf6ed9fb0a3d", "committedDate": "2020-08-26T13:38:26Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c67414ff92fb65ce0d3b228a8e1cf6ed9fb0a3d", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/5c67414ff92fb65ce0d3b228a8e1cf6ed9fb0a3d", "committedDate": "2020-08-26T13:38:26Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor"}, "afterCommit": {"oid": "68c26b8db372d44408daaaaad50444cd42e4b194", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/68c26b8db372d44408daaaaad50444cd42e4b194", "committedDate": "2020-08-26T14:05:48Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor\n\ncli fix versoin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68c26b8db372d44408daaaaad50444cd42e4b194", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/68c26b8db372d44408daaaaad50444cd42e4b194", "committedDate": "2020-08-26T14:05:48Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor\n\ncli fix versoin"}, "afterCommit": {"oid": "330580c672915a8bf47956405895292f95c12658", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/330580c672915a8bf47956405895292f95c12658", "committedDate": "2020-08-27T19:40:11Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor\n\ncli fix versoin\n\ncli native build"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "330580c672915a8bf47956405895292f95c12658", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/330580c672915a8bf47956405895292f95c12658", "committedDate": "2020-08-27T19:40:11Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor\n\ncli fix versoin\n\ncli native build"}, "afterCommit": {"oid": "1091d9e4d79830716f7cb691090680cbac7ca4be", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/1091d9e4d79830716f7cb691090680cbac7ca4be", "committedDate": "2020-08-28T17:46:15Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor\n\ncli fix versoin\n\ncli native build\n\ncli fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NTE2NzYw", "url": "https://github.com/quarkusio/quarkus/pull/11450#pullrequestreview-478516760", "createdAt": "2020-08-31T10:56:51Z", "commit": {"oid": "1091d9e4d79830716f7cb691090680cbac7ca4be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NTI0ODk5", "url": "https://github.com/quarkusio/quarkus/pull/11450#pullrequestreview-478524899", "createdAt": "2020-08-31T11:12:33Z", "commit": {"oid": "1091d9e4d79830716f7cb691090680cbac7ca4be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToxMjozM1rOHJ0jrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToxMjozM1rOHJ0jrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2MDMzNA==", "bodyText": "you could do it only once I guess", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r480060334", "createdAt": "2020-08-31T11:12:33Z", "author": {"login": "ia3andy"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Create.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package io.quarkus.cli;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.cli.core.BaseSubCommand;\n+import io.quarkus.devtools.commands.CreateProject;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.codegen.SourceType;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"create\", sortOptions = false, usageHelpAutoWidth = true, mixinStandardHelpOptions = false, description = \"Create a new quarkus project.\")\n+public class Create extends BaseSubCommand implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-g\",\n+            \"--group-id\" }, order = 1, paramLabel = \"GROUP-ID\", description = \"The groupId for project\")\n+    String groupId = \"org.acme\";\n+\n+    @CommandLine.Option(names = { \"-a\",\n+            \"--artifact-id\" }, order = 2, paramLabel = \"ARTIFACT-ID\", description = \"The artifactId for project\")\n+    String artifactId = \"my-project\";\n+\n+    @CommandLine.Option(names = { \"-v\",\n+            \"--version\" }, order = 3, paramLabel = \"VERSION\", description = \"The version for project\")\n+    String version = \"1.0-SNAPSHOT\";\n+\n+    @CommandLine.Option(names = { \"-0\",\n+            \"--empty\" }, order = 4, description = \"Generate without example code.\")\n+    boolean empty = false;\n+\n+    @CommandLine.ArgGroup()\n+    TargetBuildTool targetBuildTool = new TargetBuildTool();\n+\n+    static class TargetBuildTool {\n+        @CommandLine.Option(names = { \"--maven\" }, order = 5, description = \"Create a Maven project. (default)\")\n+        boolean maven = false;\n+\n+        @CommandLine.Option(names = { \"--gradle\" }, order = 6, description = \"Create a Gradle project.\")\n+        boolean gradle = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--grade-kotlin-dsl\" }, order = 7, description = \"Create a Gradle Kotlin DSL project.\")\n+        boolean gradleKotlinDsl = false;\n+    }\n+\n+    @CommandLine.ArgGroup()\n+    TargetLanguage language = new TargetLanguage();\n+\n+    static class TargetLanguage {\n+        @CommandLine.Option(names = {\n+                \"--java\" }, order = 8, description = \"Generate Java examples. (default)\")\n+        boolean java = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--kotlin\" }, order = 9, description = \"Generate Kotlin examples.\")\n+        boolean kotlin = false;\n+\n+        @CommandLine.Option(names = {\n+                \"--scala\" }, order = 10, description = \"Generate Scala examples.\")\n+        boolean scala = false;\n+    }\n+\n+    @CommandLine.Parameters(arity = \"0..1\", paramLabel = \"EXTENSION\", description = \"extension to add to project\")\n+    Set<String> extensions;\n+\n+    @Override\n+    public Integer call() throws Exception {\n+        try {\n+            File projectDirectory = new File(System.getProperty(\"user.dir\"));\n+\n+            File projectRoot = new File(projectDirectory.getAbsoluteFile(), artifactId);\n+            if (projectRoot.exists()) {\n+                err().println(\"Unable to create the project, \" +\n+                        \"the directory \" + projectRoot.getAbsolutePath() + \" already exists\");\n+                return CommandLine.ExitCode.SOFTWARE;\n+            }\n+\n+            SourceType sourceType = SourceType.JAVA;\n+            if (targetBuildTool.gradleKotlinDsl) {\n+                sourceType = SourceType.KOTLIN;\n+                if (extensions == null)\n+                    extensions = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1091d9e4d79830716f7cb691090680cbac7ca4be"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NTI2NjQ1", "url": "https://github.com/quarkusio/quarkus/pull/11450#pullrequestreview-478526645", "createdAt": "2020-08-31T11:13:53Z", "commit": {"oid": "1091d9e4d79830716f7cb691090680cbac7ca4be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToxMzo1NFrOHJ0nmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToxMzo1NFrOHJ0nmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2MTMzNg==", "bodyText": "@maxandersen didn't we say we should use no-examples in the end?", "url": "https://github.com/quarkusio/quarkus/pull/11450#discussion_r480061336", "createdAt": "2020-08-31T11:13:54Z", "author": {"login": "ia3andy"}, "path": "devtools/cli/src/main/java/io/quarkus/cli/Create.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package io.quarkus.cli;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+\n+import io.quarkus.cli.core.BaseSubCommand;\n+import io.quarkus.devtools.commands.CreateProject;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.codegen.SourceType;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+import picocli.CommandLine;\n+\n+@CommandLine.Command(name = \"create\", sortOptions = false, usageHelpAutoWidth = true, mixinStandardHelpOptions = false, description = \"Create a new quarkus project.\")\n+public class Create extends BaseSubCommand implements Callable<Integer> {\n+\n+    @CommandLine.Option(names = { \"-g\",\n+            \"--group-id\" }, order = 1, paramLabel = \"GROUP-ID\", description = \"The groupId for project\")\n+    String groupId = \"org.acme\";\n+\n+    @CommandLine.Option(names = { \"-a\",\n+            \"--artifact-id\" }, order = 2, paramLabel = \"ARTIFACT-ID\", description = \"The artifactId for project\")\n+    String artifactId = \"my-project\";\n+\n+    @CommandLine.Option(names = { \"-v\",\n+            \"--version\" }, order = 3, paramLabel = \"VERSION\", description = \"The version for project\")\n+    String version = \"1.0-SNAPSHOT\";\n+\n+    @CommandLine.Option(names = { \"-0\",\n+            \"--empty\" }, order = 4, description = \"Generate without example code.\")\n+    boolean empty = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1091d9e4d79830716f7cb691090680cbac7ca4be"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4bb531f92d2fab734607b103987c0b14d06470f", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/d4bb531f92d2fab734607b103987c0b14d06470f", "committedDate": "2020-08-31T15:04:08Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor\n\ncli fix versoin\n\ncli native build\n\ncli fix\n\ncli --empty to --no-examples"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1091d9e4d79830716f7cb691090680cbac7ca4be", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/1091d9e4d79830716f7cb691090680cbac7ca4be", "committedDate": "2020-08-28T17:46:15Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor\n\ncli fix versoin\n\ncli native build\n\ncli fix"}, "afterCommit": {"oid": "d4bb531f92d2fab734607b103987c0b14d06470f", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/d4bb531f92d2fab734607b103987c0b14d06470f", "committedDate": "2020-08-31T15:04:08Z", "message": "quarkus cli 2.0\n\ncli 2.0 list and rename flags\n\ncli 2.0 version and list usage\n\ncli 2.0 sort = false list options\n\ncli 2.0 PATTERN\n\ncli 2.0 remove aesh from bom\n\nfinish cli 2.0 tests\n\nfix compilation error\n\ncli 2.0 fix colors and gradle\n\ncli 2.0 formatting\n\nwhy is cli test failing in CI\n\ncli try this to get testsuite to pass\n\ncli try yet again to get testsuite to pass\n\ncli maybe this will fix build\n\ncli add some gradle tests\n\ncli revisions\n\ncli width and build refactor\n\ncli fix versoin\n\ncli native build\n\ncli fix\n\ncli --empty to --no-examples"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNjM3MzM1", "url": "https://github.com/quarkusio/quarkus/pull/11450#pullrequestreview-481637335", "createdAt": "2020-09-03T08:59:33Z", "commit": {"oid": "d4bb531f92d2fab734607b103987c0b14d06470f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 822, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}