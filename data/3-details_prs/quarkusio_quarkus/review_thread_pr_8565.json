{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMTM1Mzcw", "number": 8565, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjowNzoxNVrODxnSvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoxMTozN1rODxnYbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzUwNTg5OnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-reactive-messaging/deployment/src/test/java/io/quarkus/smallrye/reactivemessaging/blocking/beans/BeanReturningMessages.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjowNzoxNVrOGFLeXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoyNzo1MFrOGFMLQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NDA2MA==", "bodyText": "Can you add: Thread.currentThread().interrupt();", "url": "https://github.com/quarkusio/quarkus/pull/8565#discussion_r408084060", "createdAt": "2020-04-14T12:07:15Z", "author": {"login": "cescoffier"}, "path": "extensions/smallrye-reactive-messaging/deployment/src/test/java/io/quarkus/smallrye/reactivemessaging/blocking/beans/BeanReturningMessages.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.quarkus.smallrye.reactivemessaging.blocking.beans;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+\n+@ApplicationScoped\n+public class BeanReturningMessages {\n+    private AtomicInteger count = new AtomicInteger();\n+    private List<String> threads = new CopyOnWriteArrayList<>();\n+\n+    @Blocking\n+    @Outgoing(\"infinite-producer-msg\")\n+    public Message<Integer> create() {\n+        try {\n+            Thread.sleep(200);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8334a906c071815974d43ad06b7089c34b2b288b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NDE3Nw==", "bodyText": "(and remove the dump of the stack trace maybe)", "url": "https://github.com/quarkusio/quarkus/pull/8565#discussion_r408084177", "createdAt": "2020-04-14T12:07:30Z", "author": {"login": "cescoffier"}, "path": "extensions/smallrye-reactive-messaging/deployment/src/test/java/io/quarkus/smallrye/reactivemessaging/blocking/beans/BeanReturningMessages.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.quarkus.smallrye.reactivemessaging.blocking.beans;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+\n+@ApplicationScoped\n+public class BeanReturningMessages {\n+    private AtomicInteger count = new AtomicInteger();\n+    private List<String> threads = new CopyOnWriteArrayList<>();\n+\n+    @Blocking\n+    @Outgoing(\"infinite-producer-msg\")\n+    public Message<Integer> create() {\n+        try {\n+            Thread.sleep(200);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NDA2MA=="}, "originalCommit": {"oid": "8334a906c071815974d43ad06b7089c34b2b288b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTU1NQ==", "bodyText": "done", "url": "https://github.com/quarkusio/quarkus/pull/8565#discussion_r408095555", "createdAt": "2020-04-14T12:27:50Z", "author": {"login": "michalszynkiewicz"}, "path": "extensions/smallrye-reactive-messaging/deployment/src/test/java/io/quarkus/smallrye/reactivemessaging/blocking/beans/BeanReturningMessages.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.quarkus.smallrye.reactivemessaging.blocking.beans;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+\n+@ApplicationScoped\n+public class BeanReturningMessages {\n+    private AtomicInteger count = new AtomicInteger();\n+    private List<String> threads = new CopyOnWriteArrayList<>();\n+\n+    @Blocking\n+    @Outgoing(\"infinite-producer-msg\")\n+    public Message<Integer> create() {\n+        try {\n+            Thread.sleep(200);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NDA2MA=="}, "originalCommit": {"oid": "8334a906c071815974d43ad06b7089c34b2b288b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzUwNzIyOnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-reactive-messaging/deployment/src/test/java/io/quarkus/smallrye/reactivemessaging/blocking/beans/BeanReturningPayloads.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjowNzo0MFrOGFLfHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoyNzo1NVrOGFMLkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NDI1Mw==", "bodyText": "Same comment as above (reset interrupt flag)", "url": "https://github.com/quarkusio/quarkus/pull/8565#discussion_r408084253", "createdAt": "2020-04-14T12:07:40Z", "author": {"login": "cescoffier"}, "path": "extensions/smallrye-reactive-messaging/deployment/src/test/java/io/quarkus/smallrye/reactivemessaging/blocking/beans/BeanReturningPayloads.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.smallrye.reactivemessaging.blocking.beans;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+\n+@ApplicationScoped\n+public class BeanReturningPayloads {\n+    private AtomicInteger count = new AtomicInteger();\n+    private List<String> threads = new CopyOnWriteArrayList<>();\n+\n+    @Blocking\n+    @Outgoing(\"infinite-producer-payload\")\n+    public int create() {\n+        try {\n+            Thread.sleep(200);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8334a906c071815974d43ad06b7089c34b2b288b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTYzMg==", "bodyText": "done", "url": "https://github.com/quarkusio/quarkus/pull/8565#discussion_r408095632", "createdAt": "2020-04-14T12:27:55Z", "author": {"login": "michalszynkiewicz"}, "path": "extensions/smallrye-reactive-messaging/deployment/src/test/java/io/quarkus/smallrye/reactivemessaging/blocking/beans/BeanReturningPayloads.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.smallrye.reactivemessaging.blocking.beans;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+\n+@ApplicationScoped\n+public class BeanReturningPayloads {\n+    private AtomicInteger count = new AtomicInteger();\n+    private List<String> threads = new CopyOnWriteArrayList<>();\n+\n+    @Blocking\n+    @Outgoing(\"infinite-producer-payload\")\n+    public int create() {\n+        try {\n+            Thread.sleep(200);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NDI1Mw=="}, "originalCommit": {"oid": "8334a906c071815974d43ad06b7089c34b2b288b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzUxNTYzOnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-reactive-messaging/runtime/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoxMDowMlrOGFLkOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoyOToyNVrOGFMPRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NTU2MA==", "bodyText": "We should be able to remove the quarkus-vertx-core dependency, as it's a transitive dependency of this one.", "url": "https://github.com/quarkusio/quarkus/pull/8565#discussion_r408085560", "createdAt": "2020-04-14T12:10:02Z", "author": {"login": "cescoffier"}, "path": "extensions/smallrye-reactive-messaging/runtime/pom.xml", "diffHunk": "@@ -25,6 +25,10 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-vertx-core</artifactId>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8334a906c071815974d43ad06b7089c34b2b288b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NjU4MQ==", "bodyText": "done, also added dependency between deployments", "url": "https://github.com/quarkusio/quarkus/pull/8565#discussion_r408096581", "createdAt": "2020-04-14T12:29:25Z", "author": {"login": "michalszynkiewicz"}, "path": "extensions/smallrye-reactive-messaging/runtime/pom.xml", "diffHunk": "@@ -25,6 +25,10 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-vertx-core</artifactId>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NTU2MA=="}, "originalCommit": {"oid": "8334a906c071815974d43ad06b7089c34b2b288b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzUxNjc0OnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-reactive-messaging/runtime/src/main/java/io/quarkus/smallrye/reactivemessaging/runtime/QuarkusMediatorConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoxMDoyNFrOGFLk8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozMDowMFrOGFMQmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NTc0Ng==", "bodyText": "Should it be private?", "url": "https://github.com/quarkusio/quarkus/pull/8565#discussion_r408085746", "createdAt": "2020-04-14T12:10:24Z", "author": {"login": "cescoffier"}, "path": "extensions/smallrye-reactive-messaging/runtime/src/main/java/io/quarkus/smallrye/reactivemessaging/runtime/QuarkusMediatorConfiguration.java", "diffHunk": "@@ -44,6 +44,12 @@\n \n     private Class<? extends Invoker> invokerClass;\n \n+    private boolean blocking;\n+\n+    private boolean blockingExecutionOrdered;\n+\n+    String workerPoolName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8334a906c071815974d43ad06b7089c34b2b288b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NjkyMA==", "bodyText": "done", "url": "https://github.com/quarkusio/quarkus/pull/8565#discussion_r408096920", "createdAt": "2020-04-14T12:30:00Z", "author": {"login": "michalszynkiewicz"}, "path": "extensions/smallrye-reactive-messaging/runtime/src/main/java/io/quarkus/smallrye/reactivemessaging/runtime/QuarkusMediatorConfiguration.java", "diffHunk": "@@ -44,6 +44,12 @@\n \n     private Class<? extends Invoker> invokerClass;\n \n+    private boolean blocking;\n+\n+    private boolean blockingExecutionOrdered;\n+\n+    String workerPoolName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NTc0Ng=="}, "originalCommit": {"oid": "8334a906c071815974d43ad06b7089c34b2b288b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzUyMDQ2OnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-reactive-messaging/runtime/src/main/java/io/quarkus/smallrye/reactivemessaging/runtime/QuarkusWorkerPoolRegistry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoxMTozN1rOGFLnbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozODoxN1rOGFMkTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NjM4MA==", "bodyText": "IS the only difference with the upstream version the AlternativePriority?", "url": "https://github.com/quarkusio/quarkus/pull/8565#discussion_r408086380", "createdAt": "2020-04-14T12:11:37Z", "author": {"login": "cescoffier"}, "path": "extensions/smallrye-reactive-messaging/runtime/src/main/java/io/quarkus/smallrye/reactivemessaging/runtime/QuarkusWorkerPoolRegistry.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.quarkus.smallrye.reactivemessaging.runtime;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.event.Reception;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.slf4j.LoggerFactory;\n+\n+import io.quarkus.arc.AlternativePriority;\n+import io.smallrye.mutiny.Uni;\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+import io.smallrye.reactive.messaging.connectors.ExecutionHolder;\n+import io.smallrye.reactive.messaging.connectors.WorkerPoolRegistry;\n+import io.smallrye.reactive.messaging.helpers.Validation;\n+import io.vertx.core.Handler;\n+import io.vertx.mutiny.core.Promise;\n+import io.vertx.mutiny.core.WorkerExecutor;\n+\n+@AlternativePriority(1)\n+@ApplicationScoped\n+// TODO: create a different entry for WorkerPoolRegistry than `analyzeWorker` and drop this class\n+public class QuarkusWorkerPoolRegistry extends WorkerPoolRegistry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8334a906c071815974d43ad06b7089c34b2b288b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5ODE0Nw==", "bodyText": "the difference is the defineWorker method; the upstream version only works on AnnotatedType: https://github.com/smallrye/smallrye-reactive-messaging/blob/master/smallrye-reactive-messaging-provider/src/main/java/io/smallrye/reactive/messaging/connectors/WorkerPoolRegistry.java#L98", "url": "https://github.com/quarkusio/quarkus/pull/8565#discussion_r408098147", "createdAt": "2020-04-14T12:32:11Z", "author": {"login": "michalszynkiewicz"}, "path": "extensions/smallrye-reactive-messaging/runtime/src/main/java/io/quarkus/smallrye/reactivemessaging/runtime/QuarkusWorkerPoolRegistry.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.quarkus.smallrye.reactivemessaging.runtime;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.event.Reception;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.slf4j.LoggerFactory;\n+\n+import io.quarkus.arc.AlternativePriority;\n+import io.smallrye.mutiny.Uni;\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+import io.smallrye.reactive.messaging.connectors.ExecutionHolder;\n+import io.smallrye.reactive.messaging.connectors.WorkerPoolRegistry;\n+import io.smallrye.reactive.messaging.helpers.Validation;\n+import io.vertx.core.Handler;\n+import io.vertx.mutiny.core.Promise;\n+import io.vertx.mutiny.core.WorkerExecutor;\n+\n+@AlternativePriority(1)\n+@ApplicationScoped\n+// TODO: create a different entry for WorkerPoolRegistry than `analyzeWorker` and drop this class\n+public class QuarkusWorkerPoolRegistry extends WorkerPoolRegistry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NjM4MA=="}, "originalCommit": {"oid": "8334a906c071815974d43ad06b7089c34b2b288b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTk2NA==", "bodyText": "Thanks!", "url": "https://github.com/quarkusio/quarkus/pull/8565#discussion_r408101964", "createdAt": "2020-04-14T12:38:17Z", "author": {"login": "cescoffier"}, "path": "extensions/smallrye-reactive-messaging/runtime/src/main/java/io/quarkus/smallrye/reactivemessaging/runtime/QuarkusWorkerPoolRegistry.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package io.quarkus.smallrye.reactivemessaging.runtime;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.event.Reception;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.slf4j.LoggerFactory;\n+\n+import io.quarkus.arc.AlternativePriority;\n+import io.smallrye.mutiny.Uni;\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+import io.smallrye.reactive.messaging.connectors.ExecutionHolder;\n+import io.smallrye.reactive.messaging.connectors.WorkerPoolRegistry;\n+import io.smallrye.reactive.messaging.helpers.Validation;\n+import io.vertx.core.Handler;\n+import io.vertx.mutiny.core.Promise;\n+import io.vertx.mutiny.core.WorkerExecutor;\n+\n+@AlternativePriority(1)\n+@ApplicationScoped\n+// TODO: create a different entry for WorkerPoolRegistry than `analyzeWorker` and drop this class\n+public class QuarkusWorkerPoolRegistry extends WorkerPoolRegistry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4NjM4MA=="}, "originalCommit": {"oid": "8334a906c071815974d43ad06b7089c34b2b288b"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3495, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}