{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NTI3NDk0", "number": 8352, "title": "Move the Security API to Mutiny", "bodyText": "", "createdAt": "2020-04-02T11:46:59Z", "url": "https://github.com/quarkusio/quarkus/pull/8352", "merged": true, "mergeCommit": {"oid": "c4a26c337270f8e2a05160d78023c0eec2fc879c"}, "closed": true, "closedAt": "2020-04-10T15:32:35Z", "author": {"login": "stuartwdouglas"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTvQqhgFqTM4NjYxNTY4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWRGqogBqjMyMjE4NTA3MjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjE1Njgw", "url": "https://github.com/quarkusio/quarkus/pull/8352#pullrequestreview-386615680", "createdAt": "2020-04-02T16:54:23Z", "commit": {"oid": "b5f71ef96ad266276c3a553b53f936b9efd3fa77"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1NDoyM1rOF_0cnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1NDoyM1rOF_0cnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MzkwMw==", "bodyText": "Hi Stuart, it is not really related to this PR, would it make sense to move quarkus-security into quarkus eventually ? I've added a couple of exceptions into quarkus-vertx-http which should probably be alongside other exceptions like AuthenticationFailedException, and we can tweak things faster there", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r402463903", "createdAt": "2020-04-02T16:54:23Z", "author": {"login": "sberyozkin"}, "path": "bom/runtime/pom.xml", "diffHunk": "@@ -182,7 +182,7 @@\n         <mockito.version>3.3.3</mockito.version>\n         <jna.version>5.3.1</jna.version>\n         <antlr.version>4.7.2</antlr.version>\n-        <quarkus-security.version>1.0.1.Final</quarkus-security.version>\n+        <quarkus-security.version>1.1.0.Beta1</quarkus-security.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5f71ef96ad266276c3a553b53f936b9efd3fa77"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1941e9bffeea9ab03e3e39d3f65d2fe1a6cd775", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/f1941e9bffeea9ab03e3e39d3f65d2fe1a6cd775", "committedDate": "2020-04-02T20:25:11Z", "message": "Move the Security API to Mutiny"}, "afterCommit": {"oid": "5d40ba6b39daeb855c56c86b32485505193d0f28", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/5d40ba6b39daeb855c56c86b32485505193d0f28", "committedDate": "2020-04-02T22:25:25Z", "message": "Move the Security API to Mutiny"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d40ba6b39daeb855c56c86b32485505193d0f28", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/5d40ba6b39daeb855c56c86b32485505193d0f28", "committedDate": "2020-04-02T22:25:25Z", "message": "Move the Security API to Mutiny"}, "afterCommit": {"oid": "97d6af27054280a071c8b32771bd4a2520e0fdd2", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/97d6af27054280a071c8b32771bd4a2520e0fdd2", "committedDate": "2020-04-02T23:22:24Z", "message": "Move the Security API to Mutiny"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97d6af27054280a071c8b32771bd4a2520e0fdd2", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/97d6af27054280a071c8b32771bd4a2520e0fdd2", "committedDate": "2020-04-02T23:22:24Z", "message": "Move the Security API to Mutiny"}, "afterCommit": {"oid": "47dc6c9d0357745ce3ff1aa2f52fe2a1160173a5", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/47dc6c9d0357745ce3ff1aa2f52fe2a1160173a5", "committedDate": "2020-04-03T03:30:00Z", "message": "Move the Security API to Mutiny"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47dc6c9d0357745ce3ff1aa2f52fe2a1160173a5", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/47dc6c9d0357745ce3ff1aa2f52fe2a1160173a5", "committedDate": "2020-04-03T03:30:00Z", "message": "Move the Security API to Mutiny"}, "afterCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/75166965a777d30d9638465a216dfe9846f8b26a", "committedDate": "2020-04-06T00:23:13Z", "message": "Move the Security API to Mutiny"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDkxNTY1", "url": "https://github.com/quarkusio/quarkus/pull/8352#pullrequestreview-388091565", "createdAt": "2020-04-06T09:46:38Z", "commit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MjEwMjQz", "url": "https://github.com/quarkusio/quarkus/pull/8352#pullrequestreview-388210243", "createdAt": "2020-04-06T12:42:37Z", "commit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo0MjozN1rOGBV3LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzo0NjoyOFrOGBYePg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1OTk0OQ==", "bodyText": "Depending on how much laziness you want, you can delay the object creation to subscription time:\nreturn Uni.createFrom().item(() -> {\n    return     .....build();\n});", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404059949", "createdAt": "2020-04-06T12:42:37Z", "author": {"login": "cescoffier"}, "path": "extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2Augmentor.java", "diffHunk": "@@ -37,11 +35,10 @@ public int priority() {\n                     builder.addRole(i);\n                 }\n             }\n-            cs.complete(builder.build());\n+            return Uni.createFrom().item(builder.build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2MDk5NQ==", "bodyText": "Any reason to change the output?\nInitially, you was redeeming null, now you create null from an Optional.", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404060995", "createdAt": "2020-04-06T12:44:16Z", "author": {"login": "cescoffier"}, "path": "extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2AuthMechanism.java", "diffHunk": "@@ -46,16 +46,16 @@\n \n         }\n         // No suitable header has been found in this request,\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2MTY2NQ==", "bodyText": "Depends on the laziness you want, you can delay the result creation with a supplier (() -> {...}).\nIt would only create the object on subscription.", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404061665", "createdAt": "2020-04-06T12:45:26Z", "author": {"login": "cescoffier"}, "path": "extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2AuthMechanism.java", "diffHunk": "@@ -46,16 +46,16 @@\n \n         }\n         // No suitable header has been found in this request,\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());\n     }\n \n     @Override\n-    public CompletionStage<ChallengeData> getChallenge(RoutingContext context) {\n+    public Uni<ChallengeData> getChallenge(RoutingContext context) {\n         ChallengeData result = new ChallengeData(\n                 HttpResponseStatus.UNAUTHORIZED.code(),\n                 HttpHeaderNames.WWW_AUTHENTICATE,\n                 \"Bearer {token}\");\n-        return CompletableFuture.completedFuture(result);\n+        return Uni.createFrom().item(result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2MjI5OQ==", "bodyText": "I believe you want to emit null right?", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404062299", "createdAt": "2020-04-06T12:46:31Z", "author": {"login": "cescoffier"}, "path": "extensions/elytron-security-properties-file/deployment/src/test/java/io/quarkus/security/test/CustomAuth.java", "diffHunk": "@@ -65,24 +65,22 @@\n \n                     // By this point we had a header we should have been able to verify but for some reason\n                     // it was not correctly structured.\n-                    CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n-                    cf.completeExceptionally(new AuthenticationFailedException());\n-                    return cf;\n+                    return Uni.createFrom().failure(new AuthenticationFailedException());\n                 }\n             }\n         }\n \n         // No suitable header has been found in this request,\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2MjU4OQ==", "bodyText": "You can, if you want, delay the creation of the challenge at subscription time.", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404062589", "createdAt": "2020-04-06T12:46:59Z", "author": {"login": "cescoffier"}, "path": "extensions/elytron-security-properties-file/deployment/src/test/java/io/quarkus/security/test/CustomAuth.java", "diffHunk": "@@ -65,24 +65,22 @@\n \n                     // By this point we had a header we should have been able to verify but for some reason\n                     // it was not correctly structured.\n-                    CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n-                    cf.completeExceptionally(new AuthenticationFailedException());\n-                    return cf;\n+                    return Uni.createFrom().failure(new AuthenticationFailedException());\n                 }\n             }\n         }\n \n         // No suitable header has been found in this request,\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());\n     }\n \n     @Override\n-    public CompletionStage<ChallengeData> getChallenge(RoutingContext context) {\n+    public Uni<ChallengeData> getChallenge(RoutingContext context) {\n         ChallengeData result = new ChallengeData(\n                 HttpResponseStatus.UNAUTHORIZED.code(),\n                 HttpHeaderNames.WWW_AUTHENTICATE,\n                 \"BASIC realm=CUSTOM\");\n-        return CompletableFuture.completedFuture(result);\n+        return Uni.createFrom().item(result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2Mzg5OQ==", "bodyText": "Wondering if this ChallengeData can be cached and singleton.", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404063899", "createdAt": "2020-04-06T12:49:19Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java", "diffHunk": "@@ -25,18 +25,17 @@\n         if (token != null) {\n             return authenticate(identityProviderManager, new AccessTokenCredential(token, context));\n         }\n-\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());\n     }\n \n-    public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n+    public Uni<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         String bearerToken = extractBearerToken(context);\n \n         if (bearerToken == null) {\n-            return CompletableFuture.completedFuture(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));\n+            return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NDAzMQ==", "bodyText": "Wondering if this ChallengeData can be cached and singleton.", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404064031", "createdAt": "2020-04-06T12:49:33Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java", "diffHunk": "@@ -25,18 +25,17 @@\n         if (token != null) {\n             return authenticate(identityProviderManager, new AccessTokenCredential(token, context));\n         }\n-\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());\n     }\n \n-    public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n+    public Uni<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         String bearerToken = extractBearerToken(context);\n \n         if (bearerToken == null) {\n-            return CompletableFuture.completedFuture(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));\n+            return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));\n         }\n \n-        return CompletableFuture.completedFuture(new ChallengeData(HttpResponseStatus.FORBIDDEN.code(), null, null));\n+        return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.FORBIDDEN.code(), null, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NDMxNw==", "bodyText": "Are you trying to emit null?", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404064317", "createdAt": "2020-04-06T12:50:03Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java", "diffHunk": "@@ -25,18 +25,17 @@\n         if (token != null) {\n             return authenticate(identityProviderManager, new AccessTokenCredential(token, context));\n         }\n-\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NDc4Nw==", "bodyText": "Is it something that could be migrated to Uni?", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404064787", "createdAt": "2020-04-06T12:50:50Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -56,13 +59,13 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                 .addPermissionChecker(new Function<Permission, CompletionStage<Boolean>>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NTAwNQ==", "bodyText": "That would avoid the eager subscription.", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404065005", "createdAt": "2020-04-06T12:51:10Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -56,13 +59,13 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                 .addPermissionChecker(new Function<Permission, CompletionStage<Boolean>>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NDc4Nw=="}, "originalCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NzEyNQ==", "bodyText": "Are we ok with waiting \"indefinitely\"?", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404067125", "createdAt": "2020-04-06T12:54:38Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -48,15 +49,15 @@\n             return context.runBlocking(new Supplier<SecurityIdentity>() {\n                 @Override\n                 public SecurityIdentity get() {\n-                    return authenticate(request, vertxContext).join();\n+                    return authenticate(request, vertxContext).await().indefinitely();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2OTE5Mg==", "bodyText": "you can use flatMap as a shortcut.", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404069192", "createdAt": "2020-04-06T12:57:59Z", "author": {"login": "cescoffier"}, "path": "extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusIdentityProviderManagerImpl.java", "diffHunk": "@@ -104,50 +104,49 @@ public SecurityIdentity authenticateBlocking(AuthenticationRequest request) {\n             throw new IllegalArgumentException(\n                     \"No IdentityProviders were registered to handle AuthenticationRequest \" + request);\n         }\n-        return (SecurityIdentity) handleProvider(0, (List) providers, request, blockingRequestContext).toCompletableFuture()\n-                .join();\n+        return (SecurityIdentity) handleProvider(0, (List) providers, request, blockingRequestContext).await().indefinitely();\n     }\n \n-    private <T extends AuthenticationRequest> CompletionStage<SecurityIdentity> handleProvider(int pos,\n+    private <T extends AuthenticationRequest> Uni<SecurityIdentity> handleProvider(int pos,\n             List<IdentityProvider<T>> providers, T request, AuthenticationRequestContext context) {\n         if (pos == providers.size()) {\n             //we failed to authentication\n             log.debug(\"Authentication failed as providers would authenticate the request\");\n-            CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n-            cf.completeExceptionally(new AuthenticationFailedException());\n-            return cf;\n+            return Uni.createFrom().failure(new AuthenticationFailedException());\n         }\n         IdentityProvider<T> current = providers.get(pos);\n-        CompletionStage<SecurityIdentity> cs = current.authenticate(request, context)\n-                .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+        Uni<SecurityIdentity> cs = current.authenticate(request, context)\n+                .onItem().produceUni(new Function<SecurityIdentity, Uni<SecurityIdentity>>() {\n                     @Override\n-                    public CompletionStage<SecurityIdentity> apply(SecurityIdentity identity) {\n-                        if (identity != null) {\n-                            return CompletableFuture.completedFuture(identity);\n+                    public Uni<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n+                        if (securityIdentity != null) {\n+                            return Uni.createFrom().item(securityIdentity);\n                         }\n                         return handleProvider(pos + 1, providers, request, context);\n                     }\n                 });\n-        return cs.thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n-            @Override\n-            public CompletionStage<SecurityIdentity> apply(SecurityIdentity identity) {\n-                return handleIdentityFromProvider(0, identity, context);\n-            }\n-        });\n+        return cs.onItem()\n+                .produceUni(new Function<SecurityIdentity, Uni<SecurityIdentity>>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2OTMxNA==", "bodyText": "you can use flatMap as a shortcut", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404069314", "createdAt": "2020-04-06T12:58:10Z", "author": {"login": "cescoffier"}, "path": "extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusIdentityProviderManagerImpl.java", "diffHunk": "@@ -104,50 +104,49 @@ public SecurityIdentity authenticateBlocking(AuthenticationRequest request) {\n             throw new IllegalArgumentException(\n                     \"No IdentityProviders were registered to handle AuthenticationRequest \" + request);\n         }\n-        return (SecurityIdentity) handleProvider(0, (List) providers, request, blockingRequestContext).toCompletableFuture()\n-                .join();\n+        return (SecurityIdentity) handleProvider(0, (List) providers, request, blockingRequestContext).await().indefinitely();\n     }\n \n-    private <T extends AuthenticationRequest> CompletionStage<SecurityIdentity> handleProvider(int pos,\n+    private <T extends AuthenticationRequest> Uni<SecurityIdentity> handleProvider(int pos,\n             List<IdentityProvider<T>> providers, T request, AuthenticationRequestContext context) {\n         if (pos == providers.size()) {\n             //we failed to authentication\n             log.debug(\"Authentication failed as providers would authenticate the request\");\n-            CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n-            cf.completeExceptionally(new AuthenticationFailedException());\n-            return cf;\n+            return Uni.createFrom().failure(new AuthenticationFailedException());\n         }\n         IdentityProvider<T> current = providers.get(pos);\n-        CompletionStage<SecurityIdentity> cs = current.authenticate(request, context)\n-                .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+        Uni<SecurityIdentity> cs = current.authenticate(request, context)\n+                .onItem().produceUni(new Function<SecurityIdentity, Uni<SecurityIdentity>>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwMjcxOA==", "bodyText": "Not totally sure what you are doing here.\nThe subscription will trigger the computation.\nBut you may want to be sure that an error has not been emitted.", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404102718", "createdAt": "2020-04-06T13:46:28Z", "author": {"login": "cescoffier"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/QuarkusErrorHandler.java", "diffHunk": "@@ -53,7 +53,7 @@ public void handle(RoutingContext event) {\n                     public void run() {\n                         event.response().end();\n                     }\n-                });\n+                }).subscribeAsCompletionStage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75166965a777d30d9638465a216dfe9846f8b26a", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/75166965a777d30d9638465a216dfe9846f8b26a", "committedDate": "2020-04-06T00:23:13Z", "message": "Move the Security API to Mutiny"}, "afterCommit": {"oid": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "committedDate": "2020-04-07T00:43:10Z", "message": "Move the Security API to Mutiny"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "committedDate": "2020-04-07T00:43:10Z", "message": "Move the Security API to Mutiny"}, "afterCommit": {"oid": "9497cbe244edcd714cdb69b5625c597e4006587e", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/9497cbe244edcd714cdb69b5625c597e4006587e", "committedDate": "2020-04-08T02:04:08Z", "message": "Move the Security API to Mutiny"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9497cbe244edcd714cdb69b5625c597e4006587e", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/9497cbe244edcd714cdb69b5625c597e4006587e", "committedDate": "2020-04-08T02:04:08Z", "message": "Move the Security API to Mutiny"}, "afterCommit": {"oid": "122a71d6d7dc5f2891ab34d352e14ebf74ae0efc", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/122a71d6d7dc5f2891ab34d352e14ebf74ae0efc", "committedDate": "2020-04-08T04:53:43Z", "message": "Move the Security API to Mutiny"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjg3MzEy", "url": "https://github.com/quarkusio/quarkus/pull/8352#pullrequestreview-391287312", "createdAt": "2020-04-10T06:29:31Z", "commit": {"oid": "122a71d6d7dc5f2891ab34d352e14ebf74ae0efc"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyOTozMlrOGDyRdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoyOTozMlrOGDyRdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjU4Mg==", "bodyText": "return val?", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r406622582", "createdAt": "2020-04-10T06:29:32Z", "author": {"login": "cescoffier"}, "path": "extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusSecurityIdentity.java", "diffHunk": "@@ -74,39 +77,42 @@ public boolean isAnonymous() {\n     }\n \n     @Override\n-    public CompletionStage<Boolean> checkPermission(Permission permission) {\n+    public Uni<Boolean> checkPermission(Permission permission) {\n         if (permissionCheckers.isEmpty()) {\n-            return CompletableFuture.completedFuture(true);\n+            return Uni.createFrom().item(true);\n         }\n-        List<CompletableFuture<Boolean>> results = new ArrayList<>(permissionCheckers.size());\n-        for (Function<Permission, CompletionStage<Boolean>> checker : permissionCheckers) {\n-            CompletionStage<Boolean> res = checker.apply(permission);\n+        List<Uni<Boolean>> results = new ArrayList<>(permissionCheckers.size());\n+        for (Function<Permission, Uni<Boolean>> checker : permissionCheckers) {\n+            Uni<Boolean> res = checker.apply(permission);\n             if (res != null) {\n-                results.add(res.toCompletableFuture());\n+                results.add(res);\n             }\n         }\n         if (results.isEmpty()) {\n-            return CompletableFuture.completedFuture(true);\n+            return Uni.createFrom().item(true);\n         }\n         if (results.size() == 1) {\n             return results.get(0);\n         }\n-        CompletionStage<Boolean> ret = results.get(0);\n-        for (int i = 1; i < results.size(); ++i) {\n-            ret = ret.thenCombine(results.get(i), new BiFunction<Boolean, Boolean, Boolean>() {\n-                @Override\n-                public Boolean apply(Boolean aBoolean, Boolean aBoolean2) {\n-                    if (aBoolean == null) {\n-                        return aBoolean2;\n+        return Uni.combine().all().unis(results).combinedWith(new Function<List<?>, Boolean>() {\n+            @Override\n+            public Boolean apply(List<?> o) {\n+                Boolean result = null;\n+                //if any are true we return true\n+                //otherwise if all are null we return null\n+                //if some are false and some null we return false\n+                for (Object i : o) {\n+                    if (i != null) {\n+                        boolean val = (boolean) i;\n+                        if (val) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122a71d6d7dc5f2891ab34d352e14ebf74ae0efc"}, "originalPosition": 81}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "122a71d6d7dc5f2891ab34d352e14ebf74ae0efc", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/122a71d6d7dc5f2891ab34d352e14ebf74ae0efc", "committedDate": "2020-04-08T04:53:43Z", "message": "Move the Security API to Mutiny"}, "afterCommit": {"oid": "68c72b9c32a446be025fad12c583a12f11b1600d", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/68c72b9c32a446be025fad12c583a12f11b1600d", "committedDate": "2020-04-10T12:47:01Z", "message": "Move the Security API to Mutiny"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68c72b9c32a446be025fad12c583a12f11b1600d", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/68c72b9c32a446be025fad12c583a12f11b1600d", "committedDate": "2020-04-10T12:47:01Z", "message": "Move the Security API to Mutiny"}, "afterCommit": {"oid": "d56031907d8fb97e21f26aabb9bf27500f6d1578", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/d56031907d8fb97e21f26aabb9bf27500f6d1578", "committedDate": "2020-04-10T13:26:50Z", "message": "Move the Security API to Mutiny"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ad8937c7d455b7b2e98c34c2811ac8dc4176a03", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/2ad8937c7d455b7b2e98c34c2811ac8dc4176a03", "committedDate": "2020-04-10T13:27:56Z", "message": "Move the Security API to Mutiny"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d56031907d8fb97e21f26aabb9bf27500f6d1578", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/d56031907d8fb97e21f26aabb9bf27500f6d1578", "committedDate": "2020-04-10T13:26:50Z", "message": "Move the Security API to Mutiny"}, "afterCommit": {"oid": "2ad8937c7d455b7b2e98c34c2811ac8dc4176a03", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/2ad8937c7d455b7b2e98c34c2811ac8dc4176a03", "committedDate": "2020-04-10T13:27:56Z", "message": "Move the Security API to Mutiny"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4699, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}