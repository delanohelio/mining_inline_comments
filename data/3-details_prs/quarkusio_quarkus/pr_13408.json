{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0OTM3Mjg3", "number": 13408, "title": "Add characterEscapeHandler TypedXmlWriter xmlseeAlso support and fix separator jaxbindex", "bodyText": "\u2026fix separator in jaxb index file", "createdAt": "2020-11-20T20:34:16Z", "url": "https://github.com/quarkusio/quarkus/pull/13408", "merged": true, "mergeCommit": {"oid": "19c0cee2745c16c39ba5c5adf59309a1b02cba99"}, "closed": true, "closedAt": "2021-09-08T20:15:04Z", "author": {"login": "dufoli"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeeQ5JABqjQwMjI4MzU3NDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABe8XV9ngBqjUyNzI3NzM0NDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa8e14aef5be9878ff632084233ef5d5b8144dab", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/quarkusio/quarkus/commit/aa8e14aef5be9878ff632084233ef5d5b8144dab", "committedDate": "2020-11-20T20:33:11Z", "message": "add characterEscapeHandler and TypedXmlWriter xmlseeAlso support and fix separator in jaxb index file"}, "afterCommit": {"oid": "4f5448afad31bdddc705c00b9615100cef515cba", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/quarkusio/quarkus/commit/4f5448afad31bdddc705c00b9615100cef515cba", "committedDate": "2020-11-20T21:30:01Z", "message": "add characterEscapeHandler and TypedXmlWriter xmlseeAlso support and fix separator in jaxb index file\n\nfix build"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cde070f88eceffeec634011f0417347337ee358e", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/quarkusio/quarkus/commit/cde070f88eceffeec634011f0417347337ee358e", "committedDate": "2020-11-20T21:34:14Z", "message": "Merge branch 'master' into fixJaxb"}, "afterCommit": {"oid": "4f5448afad31bdddc705c00b9615100cef515cba", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/quarkusio/quarkus/commit/4f5448afad31bdddc705c00b9615100cef515cba", "committedDate": "2020-11-20T21:30:01Z", "message": "add characterEscapeHandler and TypedXmlWriter xmlseeAlso support and fix separator in jaxb index file\n\nfix build"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f5448afad31bdddc705c00b9615100cef515cba", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/quarkusio/quarkus/commit/4f5448afad31bdddc705c00b9615100cef515cba", "committedDate": "2020-11-20T21:30:01Z", "message": "add characterEscapeHandler and TypedXmlWriter xmlseeAlso support and fix separator in jaxb index file\n\nfix build"}, "afterCommit": {"oid": "0782606cad5f735c9d04ea78f4664766c0603f26", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/quarkusio/quarkus/commit/0782606cad5f735c9d04ea78f4664766c0603f26", "committedDate": "2020-11-30T09:45:06Z", "message": "add characterEscapeHandler and TypedXmlWriter xmlseeAlso support and fix separator in jaxb index file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTAwNzc1", "url": "https://github.com/quarkusio/quarkus/pull/13408#pullrequestreview-550900775", "createdAt": "2020-12-13T09:19:50Z", "commit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwOToxOTo1MFrOIEx_jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwOToxOTo1MFrOIEx_jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg4NDMwMw==", "bodyText": "maybe use File.separatorChar or separator.\nhttps://docs.oracle.com/javase/8/docs/api/java/io/File.html#separator", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r541884303", "createdAt": "2020-12-13T09:19:50Z", "author": {"login": "Dufgui"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -210,7 +268,8 @@ private void handleJaxbFile(Path p, BuildProducer<NativeImageResourceBuildItem>\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n         try {\n             String path = p.toAbsolutePath().toString().substring(1);\n-            String pkg = p.toAbsolutePath().getParent().toString().substring(1).replace(\"/\", \".\") + \".\";\n+            String pkg = p.toAbsolutePath().getParent().toString().substring(1)\n+                    .replace(FileSystems.getDefault().getSeparator(), \".\") + \".\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMTg5OTM3", "url": "https://github.com/quarkusio/quarkus/pull/13408#pullrequestreview-561189937", "createdAt": "2021-01-04T17:04:39Z", "commit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowNDozOVrOIN5lcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowNjo0MlrOIN5qOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTg3Mw==", "bodyText": "Why ifExist? If the JAXB extension is there, don't we have them? Or are they different on various versions of the JDK?", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r551445873", "createdAt": "2021-01-04T17:04:39Z", "author": {"login": "gsmet"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0Njg5OA==", "bodyText": "Please avoid using one character variables that are meaningless. Here it's an interfaceName.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r551446898", "createdAt": "2021-01-04T17:06:22Z", "author": {"login": "gsmet"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -178,6 +198,44 @@ void processAnnotationsAndIndexFiles(\n         }\n     }\n \n+    private void produceProxyIfExist(BuildProducer<NativeImageProxyDefinitionBuildItem> proxies, String s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzA5Ng==", "bodyText": "Not sure I understand what you're trying to do here. Could you explain?", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r551447096", "createdAt": "2021-01-04T17:06:42Z", "author": {"login": "gsmet"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+        Set<String> proxiesCreated = new HashSet<>();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN, proxyDefinitions, proxiesCreated);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 51}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/quarkusio/quarkus/commit/5bc7a596d43ca6313fc1764a3c843f5284706487", "committedDate": "2020-12-03T20:47:31Z", "message": "fix jaxb build"}, "afterCommit": {"oid": "d182c442d8e3515ed33d8a27e9523510713bb6a4", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/quarkusio/quarkus/commit/d182c442d8e3515ed33d8a27e9523510713bb6a4", "committedDate": "2021-08-25T06:48:42Z", "message": "add characterEscapeHandler and TypedXmlWriter xmlseeAlso support and fix separator in jaxb index file"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d182c442d8e3515ed33d8a27e9523510713bb6a4", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/quarkusio/quarkus/commit/d182c442d8e3515ed33d8a27e9523510713bb6a4", "committedDate": "2021-08-25T06:48:42Z", "message": "add characterEscapeHandler and TypedXmlWriter xmlseeAlso support and fix separator in jaxb index file"}, "afterCommit": {"oid": "b6d343b0240ec64cfd1570816233b47e3f1b91f1", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/quarkusio/quarkus/commit/b6d343b0240ec64cfd1570816233b47e3f1b91f1", "committedDate": "2021-08-25T06:56:37Z", "message": "add characterEscapeHandler and TypedXmlWriter xmlseeAlso support and fix separator in jaxb index file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM4NTkzNDI4", "url": "https://github.com/quarkusio/quarkus/pull/13408#pullrequestreview-738593428", "createdAt": "2021-08-25T16:48:14Z", "commit": {"oid": "2bfde42dea5c524c284d6b6df1b4c439b5380578"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNVQxNjo0ODoxNVrOKXsbBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNVQxNjo0ODoxNVrOKXsbBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTkzMzcwMg==", "bodyText": "You need to bump the jaxb-api too no?", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r695933702", "createdAt": "2021-08-25T16:48:15Z", "author": {"login": "gastaldi"}, "path": "bom/application/pom.xml", "diffHunk": "@@ -71,7 +71,7 @@\n         <jakarta.validation-api.version>2.0.2</jakarta.validation-api.version>\n         <jakarta.websocket-api.version>1.1.2</jakarta.websocket-api.version>\n         <jakarta.xml.bind-api.version>2.3.3</jakarta.xml.bind-api.version>\n-        <jaxb-runtime.version>2.3.3-b02</jaxb-runtime.version>\n+        <jaxb-runtime.version>3.0.0</jaxb-runtime.version>\n         <!-- just for test dependency convergence -->\n         <jaxb-api.version>2.3.1</jaxb-api.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bfde42dea5c524c284d6b6df1b4c439b5380578"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM4NTk0NjE3", "url": "https://github.com/quarkusio/quarkus/pull/13408#pullrequestreview-738594617", "createdAt": "2021-08-25T16:49:30Z", "commit": {"oid": "2bfde42dea5c524c284d6b6df1b4c439b5380578"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNVQxNjo0OTozMFrOKXseoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNVQxNjo0OTozMFrOKXseoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTkzNDYyNA==", "bodyText": "Delete these lines", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r695934624", "createdAt": "2021-08-25T16:49:30Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,9 +177,25 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"org.glassfish.jaxb.core.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"org.glassfish.jaxb.characterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\"));\n+        // old 2.3 package path\n+        //proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        //proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\"));\n+        //proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bfde42dea5c524c284d6b6df1b4c439b5380578"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM4NTk2NDMw", "url": "https://github.com/quarkusio/quarkus/pull/13408#pullrequestreview-738596430", "createdAt": "2021-08-25T16:51:20Z", "commit": {"oid": "2bfde42dea5c524c284d6b6df1b4c439b5380578"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNVQxNjo1MToyMVrOKXsj8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNVQxNjo1MToyMVrOKXsj8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTkzNTk4Nw==", "bodyText": "Is this a class? I only found org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r695935987", "createdAt": "2021-08-25T16:51:21Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,9 +177,25 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"org.glassfish.jaxb.core.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"org.glassfish.jaxb.characterEscapeHandler\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bfde42dea5c524c284d6b6df1b4c439b5380578"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM5NDA3Mjc4", "url": "https://github.com/quarkusio/quarkus/pull/13408#pullrequestreview-739407278", "createdAt": "2021-08-26T12:26:53Z", "commit": {"oid": "fb6efb772a0fbfd89502556db56c564ff962a884"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNlQxMjoyNjo1M1rOKYT0uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNlQxMjoyNjo1M1rOKYT0uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjU3OTI1Ng==", "bodyText": "I am not sure if I have to add this in order to use yandex to get\ncom.sun.xml.txw2.TypedXmlWriter\ninherited class. Else I can add the big list of class inheritance. (it is a tree so long list)", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r696579256", "createdAt": "2021-08-26T12:26:53Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -182,6 +201,42 @@ void processAnnotationsAndIndexFiles(\n         }\n     }\n \n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    void produceRecursiveProxies(IndexView index,\n+            DotName interfaceDN,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxies, Set<String> proxiesCreated) {\n+        index.getKnownDirectImplementors(interfaceDN).stream()\n+                .filter(classinfo -> Modifier.isInterface(classinfo.flags()))\n+                .map(ClassInfo::name)\n+                .forEach((className) -> {\n+                    if (!proxiesCreated.contains(className.toString())) {\n+                        proxies.produce(new NativeImageProxyDefinitionBuildItem(className.toString()));\n+                        produceRecursiveProxies(index, className, proxies, proxiesCreated);\n+                        proxiesCreated.add(className.toString());\n+                    }\n+                });\n+\n+    }\n+\n+    @BuildStep\n+    void addDependencies(BuildProducer<IndexDependencyBuildItem> indexDependency) {\n+        //call by jaxb-runtime => jaxb-core => txw2\n+        //indexDependency.produce(new IndexDependencyBuildItem(\"org.glassfish.jaxb\", \"txw2\"));\n+        indexDependency.produce(new IndexDependencyBuildItem(\"org.glassfish.jaxb\", \"jaxb-runtime\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb6efb772a0fbfd89502556db56c564ff962a884"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQwNjk4MjUz", "url": "https://github.com/quarkusio/quarkus/pull/13408#pullrequestreview-740698253", "createdAt": "2021-08-27T16:28:36Z", "commit": {"oid": "f9c38a3f2bdbdb55f481d535cbb65257fe401066"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yN1QxNjoyODozNlrOKZQYpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yN1QxNjoyODozNlrOKZQYpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzU3MTQ5Mw==", "bodyText": "I think you can use index.getAllKnownImplementors(..) instead. Also try to avoid using Lambdas.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r697571493", "createdAt": "2021-08-27T16:28:36Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +174,66 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+        Set<String> proxiesCreated = new HashSet<>();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN, proxyDefinitions, proxiesCreated);\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    void produceRecursiveProxies(IndexView index,\n+            DotName interfaceDN,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxies, Set<String> proxiesCreated) {\n+        index.getKnownDirectImplementors(interfaceDN).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c38a3f2bdbdb55f481d535cbb65257fe401066"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQxMTEwOTQx", "url": "https://github.com/quarkusio/quarkus/pull/13408#pullrequestreview-741110941", "createdAt": "2021-08-29T12:49:54Z", "commit": {"oid": "081fa573a33f7ba24c611eaf40580fb645bc83a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yOVQxMjo0OTo1NVrOKZrNbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yOVQxMjo0OTo1NVrOKZrNbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODAxMDk5MQ==", "bodyText": "This method should not be public nor start with a capital letter", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698010991", "createdAt": "2021-08-29T12:49:55Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +172,73 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void processTypedXmlWriters(\n+            CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxyDefinitions) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN)\n+                .map(DotName::toString)\n+                .map(NativeImageProxyDefinitionBuildItem::new)\n+                .forEach(proxyDefinitions::produce);\n+    }\n+\n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    public static boolean ModifierIsInterface(ClassInfo classinfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "081fa573a33f7ba24c611eaf40580fb645bc83a1"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQxMTExMzE3", "url": "https://github.com/quarkusio/quarkus/pull/13408#pullrequestreview-741111317", "createdAt": "2021-08-29T12:54:25Z", "commit": {"oid": "081fa573a33f7ba24c611eaf40580fb645bc83a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yOVQxMjo1NDoyNVrOKZrQBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yOVQxMjo1NDoyNVrOKZrQBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODAxMTY1NQ==", "bodyText": "We prefer to avoid using streams and lambdas because it is costly computation-wise. I'd suggest using a plain for-each here.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698011655", "createdAt": "2021-08-29T12:54:25Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +172,73 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void processTypedXmlWriters(\n+            CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxyDefinitions) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN)\n+                .map(DotName::toString)\n+                .map(NativeImageProxyDefinitionBuildItem::new)\n+                .forEach(proxyDefinitions::produce);\n+    }\n+\n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    public static boolean ModifierIsInterface(ClassInfo classinfo) {\n+        return Modifier.isInterface(classinfo.flags());\n+    }\n+\n+    Stream<DotName> produceRecursiveProxies(IndexView index,\n+            DotName interfaceDN) {\n+        Stream<DotName> itf = Stream.of(interfaceDN);\n+        Stream<DotName> subItf = index.getKnownDirectImplementors(interfaceDN).stream()\n+                .filter(JaxbProcessor::ModifierIsInterface)\n+                .map(ClassInfo::name)\n+                .flatMap((className) -> produceRecursiveProxies(index, className));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "081fa573a33f7ba24c611eaf40580fb645bc83a1"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQxMTExNjE3", "url": "https://github.com/quarkusio/quarkus/pull/13408#pullrequestreview-741111617", "createdAt": "2021-08-29T12:57:31Z", "commit": {"oid": "081fa573a33f7ba24c611eaf40580fb645bc83a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yOVQxMjo1NzozMlrOKZrRxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yOVQxMjo1NzozMlrOKZrRxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODAxMjEwMg==", "bodyText": "This method isn't producing anything, just collecting DotNames", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698012102", "createdAt": "2021-08-29T12:57:32Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +172,73 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void processTypedXmlWriters(\n+            CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxyDefinitions) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN)\n+                .map(DotName::toString)\n+                .map(NativeImageProxyDefinitionBuildItem::new)\n+                .forEach(proxyDefinitions::produce);\n+    }\n+\n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    public static boolean ModifierIsInterface(ClassInfo classinfo) {\n+        return Modifier.isInterface(classinfo.flags());\n+    }\n+\n+    Stream<DotName> produceRecursiveProxies(IndexView index,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "081fa573a33f7ba24c611eaf40580fb645bc83a1"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQxODQxODkz", "url": "https://github.com/quarkusio/quarkus/pull/13408#pullrequestreview-741841893", "createdAt": "2021-08-30T16:30:44Z", "commit": {"oid": "1bfa2db71c2d1b0ad7ff95837da46d78c49d8a6c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQxODQ0NTQ3", "url": "https://github.com/quarkusio/quarkus/pull/13408#pullrequestreview-741844547", "createdAt": "2021-08-30T16:33:39Z", "commit": {"oid": "1bfa2db71c2d1b0ad7ff95837da46d78c49d8a6c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0zMFQxNjozMzozOVrOKaRTRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0zMFQxNjozMzozOVrOKaRTRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODYzNTA3Ng==", "bodyText": "You need to add this new module to an existing slot in https://github.com/quarkusio/quarkus/blob/main/.github/native-tests.json", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698635076", "createdAt": "2021-08-30T16:33:39Z", "author": {"login": "gastaldi"}, "path": "integration-tests/pom.xml", "diffHunk": "@@ -267,6 +267,7 @@\n                 <module>micrometer-prometheus</module>\n                 <module>opentelemetry</module>\n                 <module>logging-json</module>\n+                <module>jaxb</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bfa2db71c2d1b0ad7ff95837da46d78c49d8a6c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQxODYyMTI1", "url": "https://github.com/quarkusio/quarkus/pull/13408#pullrequestreview-741862125", "createdAt": "2021-08-30T16:53:32Z", "commit": {"oid": "1bfa2db71c2d1b0ad7ff95837da46d78c49d8a6c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0zMFQxNjo1MzozMlrOKaSKJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0zMFQxNjo1MzozMlrOKaSKJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODY0OTEyNg==", "bodyText": "Remove this line", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698649126", "createdAt": "2021-08-30T16:53:32Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +169,84 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\",\n+                        \"com.sun.xml.txw2.output.CharacterEscapeHandler\",\n+                        \"com.sun.xml.txw2.TypedXmlWriter\",\n+                        \"com.sun.xml.bind.v2.schemagen.episode.Bindings\",\n+                        \"com.sun.xml.bind.v2.schemagen.episode.SchemaBindings\",\n+                        \"com.sun.xml.bind.v2.schemagen.episode.Klass\",\n+                        \"com.sun.xml.bind.v2.schemagen.episode.Package\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Annotated\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Annotation\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Any\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Appinfo\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.AttrDecls\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.AttributeType\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ComplexContent\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ComplexExtension\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ComplexRestriction\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ComplexTypeHost\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ComplexTypeModel\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Documentation\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Element\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ExplicitGroup\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ExtensionType\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.FixedOrDefault\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Import\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.List\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.LocalAttribute\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.NestedParticle\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.NoFixedFacet\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Occurs\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Particle\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Redefinable\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Schema\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SchemaTop\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SimpleContent\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SimpleDerivation\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SimpleExtension\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SimpleRestriction\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SimpleRestrictionModel\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.TopLevelAttribute\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.TopLevelElement\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.TypeDefParticle\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Union\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Wildcard\",\n+                        \"com.sun.xml.txw2.TypedXmlWriter\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bfa2db71c2d1b0ad7ff95837da46d78c49d8a6c"}, "originalPosition": 115}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e5389c71917adc2715f5fed5465d43c37dc42c5", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/quarkusio/quarkus/commit/3e5389c71917adc2715f5fed5465d43c37dc42c5", "committedDate": "2021-08-31T19:11:33Z", "message": "fix format"}, "afterCommit": {"oid": "19c20f938f06e205e5a09ebca5c7bb0b07c45a7c", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/quarkusio/quarkus/commit/19c20f938f06e205e5a09ebca5c7bb0b07c45a7c", "committedDate": "2021-09-02T08:42:54Z", "message": "add characterEscapeHandler and TypedXmlWriter xmlseeAlso support and fix separator in jaxb index file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ5MDc2NDA4", "url": "https://github.com/quarkusio/quarkus/pull/13408#pullrequestreview-749076408", "createdAt": "2021-09-08T12:27:48Z", "commit": {"oid": "19c20f938f06e205e5a09ebca5c7bb0b07c45a7c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "402638661cb4db19911f6ff05abb272f271a55ee", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/quarkusio/quarkus/commit/402638661cb4db19911f6ff05abb272f271a55ee", "committedDate": "2021-09-08T14:29:55Z", "message": "Introduce JAXB fixes\n\n- Add missing NativeImageProxyDefinitionBuildItem\n- Support XmlSeeAlso annotations\n- Fix separator in jaxb index file"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9f2a16ccaca318bf1ea1bda02825be8fa7943f0", "author": {"user": {"login": "gastaldi", "name": "George Gastaldi"}}, "url": "https://github.com/quarkusio/quarkus/commit/a9f2a16ccaca318bf1ea1bda02825be8fa7943f0", "committedDate": "2021-09-08T14:32:14Z", "message": "Merge branch 'main' into fixJaxb"}, "afterCommit": {"oid": "402638661cb4db19911f6ff05abb272f271a55ee", "author": {"user": {"login": "dufoli", "name": "olivier dufour"}}, "url": "https://github.com/quarkusio/quarkus/commit/402638661cb4db19911f6ff05abb272f271a55ee", "committedDate": "2021-09-08T14:29:55Z", "message": "Introduce JAXB fixes\n\n- Add missing NativeImageProxyDefinitionBuildItem\n- Support XmlSeeAlso annotations\n- Fix separator in jaxb index file"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1450, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}