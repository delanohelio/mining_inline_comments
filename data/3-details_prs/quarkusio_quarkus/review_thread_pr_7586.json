{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzOTcyODQz", "number": 7586, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDoxNzoyM1rODlP78w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDoxNzoyM1rODlP78w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzg1MDExOnYy", "diffSide": "RIGHT", "path": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/vertx/JsonArrayWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDoxNzoyM1rOFyCUuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNTowMzo0NlrOFyGgWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxMTE5Mw==", "bodyText": "Can't asyncFlush happen before asyncWrite in this snippet? Wondering if it's better to read:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CompletionStage<Void> a = entityStream.asyncWrite(jsonArray.toBuffer().getBytes());\n          \n          \n            \n                    CompletionStage<Void> b = entityStream.asyncFlush();\n          \n          \n            \n                    return a.thenCompose(v -> b);\n          \n          \n            \n                    return entityStream.asyncWrite(jsonArray.toBuffer().getBytes())\n          \n          \n            \n                                   .thenCompose(v -> entityStream.asyncFlush());", "url": "https://github.com/quarkusio/quarkus/pull/7586#discussion_r388011193", "createdAt": "2020-03-05T00:17:23Z", "author": {"login": "gastaldi"}, "path": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/vertx/JsonArrayWriter.java", "diffHunk": "@@ -35,4 +38,14 @@ public void writeTo(JsonArray jsonArray, Class<?> type, Type genericType, Annota\n         entityStream.flush();\n         entityStream.close();\n     }\n+\n+    @Override\n+    public CompletionStage<Void> asyncWriteTo(JsonArray jsonArray, Class<?> type, Type genericType, Annotation[] annotations,\n+            MediaType mediaType,\n+            MultivaluedMap<String, Object> httpHeaders,\n+            AsyncOutputStream entityStream) {\n+        CompletionStage<Void> a = entityStream.asyncWrite(jsonArray.toBuffer().getBytes());\n+        CompletionStage<Void> b = entityStream.asyncFlush();\n+        return a.thenCompose(v -> b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68ec9ea69bda712f0c5e44ae996bea86b7799c5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3OTcwNg==", "bodyText": "I just removed the flush, it looks like none of the other writers have it, and in general flushes are a bad idea as they can force chunked encoding when it is not nessesary.", "url": "https://github.com/quarkusio/quarkus/pull/7586#discussion_r388079706", "createdAt": "2020-03-05T05:03:46Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/vertx/JsonArrayWriter.java", "diffHunk": "@@ -35,4 +38,14 @@ public void writeTo(JsonArray jsonArray, Class<?> type, Type genericType, Annota\n         entityStream.flush();\n         entityStream.close();\n     }\n+\n+    @Override\n+    public CompletionStage<Void> asyncWriteTo(JsonArray jsonArray, Class<?> type, Type genericType, Annotation[] annotations,\n+            MediaType mediaType,\n+            MultivaluedMap<String, Object> httpHeaders,\n+            AsyncOutputStream entityStream) {\n+        CompletionStage<Void> a = entityStream.asyncWrite(jsonArray.toBuffer().getBytes());\n+        CompletionStage<Void> b = entityStream.asyncFlush();\n+        return a.thenCompose(v -> b);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxMTE5Mw=="}, "originalCommit": {"oid": "b68ec9ea69bda712f0c5e44ae996bea86b7799c5"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4908, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}