{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyODU5ODYw", "number": 12009, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowMjo1MlrOEh0EJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowMjo1MlrOEh0EJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODkxNDk0OnYy", "diffSide": "RIGHT", "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowMjo1MlrOHPVr8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjoyNDoyMFrOHPkw1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NjAwMg==", "bodyText": "I usually recommend to use .name().toString(). The main reason is that for class it's ok but for types the toString() can lead to a non valid class name. Thus I think it's better to get used to always use name().toString().", "url": "https://github.com/quarkusio/quarkus/pull/12009#discussion_r485846002", "createdAt": "2020-09-09T19:02:52Z", "author": {"login": "gsmet"}, "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -421,6 +423,15 @@ void registerProviders(BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n                     .produce(new ReflectiveClassBuildItem(false, false, annotationInstance.value().asClass().toString()));\n         }\n \n+        // Register @RegisterClientHeaders for reflection\n+        for (AnnotationInstance annotationInstance : index.getAnnotations(REGISTER_CLIENT_HEADERS)) {\n+            AnnotationValue value = annotationInstance.value();\n+            if (value != null) {\n+                reflectiveClass\n+                        .produce(new ReflectiveClassBuildItem(false, false, annotationInstance.value().asClass().toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e9438bd0a2361c57ba5b287a5f9519de99225de"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4ODY5OA==", "bodyText": "Hm, that's a good point. I just copied the code and did not realize there is ClassInfo.toString(). However, for ClassInfo it should be safe, in contrast with org.jboss.jandex.ClassType...", "url": "https://github.com/quarkusio/quarkus/pull/12009#discussion_r486088698", "createdAt": "2020-09-10T06:13:27Z", "author": {"login": "mkouba"}, "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -421,6 +423,15 @@ void registerProviders(BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n                     .produce(new ReflectiveClassBuildItem(false, false, annotationInstance.value().asClass().toString()));\n         }\n \n+        // Register @RegisterClientHeaders for reflection\n+        for (AnnotationInstance annotationInstance : index.getAnnotations(REGISTER_CLIENT_HEADERS)) {\n+            AnnotationValue value = annotationInstance.value();\n+            if (value != null) {\n+                reflectiveClass\n+                        .produce(new ReflectiveClassBuildItem(false, false, annotationInstance.value().asClass().toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NjAwMg=="}, "originalCommit": {"oid": "9e9438bd0a2361c57ba5b287a5f9519de99225de"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5MzAxNQ==", "bodyText": "ClassInfo.toString is safe, although yeah, calling .name() first does remove any possible reason to doubt the code :)", "url": "https://github.com/quarkusio/quarkus/pull/12009#discussion_r486093015", "createdAt": "2020-09-10T06:24:20Z", "author": {"login": "geoand"}, "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -421,6 +423,15 @@ void registerProviders(BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n                     .produce(new ReflectiveClassBuildItem(false, false, annotationInstance.value().asClass().toString()));\n         }\n \n+        // Register @RegisterClientHeaders for reflection\n+        for (AnnotationInstance annotationInstance : index.getAnnotations(REGISTER_CLIENT_HEADERS)) {\n+            AnnotationValue value = annotationInstance.value();\n+            if (value != null) {\n+                reflectiveClass\n+                        .produce(new ReflectiveClassBuildItem(false, false, annotationInstance.value().asClass().toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NjAwMg=="}, "originalCommit": {"oid": "9e9438bd0a2361c57ba5b287a5f9519de99225de"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 397, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}