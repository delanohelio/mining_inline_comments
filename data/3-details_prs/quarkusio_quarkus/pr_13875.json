{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NTUyMTQ0", "number": 13875, "title": "Qute - support Mutiny Uni directly in the templates", "bodyText": "also mention the special handling of CompletionStage and Uni in docs", "createdAt": "2020-12-14T15:10:12Z", "url": "https://github.com/quarkusio/quarkus/pull/13875", "merged": true, "mergeCommit": {"oid": "6705c69180ab4ac55e9f7ea7a6e0c7062b995649"}, "closed": true, "closedAt": "2020-12-15T10:25:52Z", "author": {"login": "mkouba"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmIRKwgFqTU1MTU0NjYwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmVRbaABqjQxMTMxMDA1NTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNTQ2NjA2", "url": "https://github.com/quarkusio/quarkus/pull/13875#pullrequestreview-551546606", "createdAt": "2020-12-14T16:23:25Z", "commit": {"oid": "8a0722a519b976bb5fefc687a3ca7cfb93013e76"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoyMzoyNVrOIFYqQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoyMzoyNVrOIFYqQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxNzgyNA==", "bodyText": "Missing a > in the comment", "url": "https://github.com/quarkusio/quarkus/pull/13875#discussion_r542517824", "createdAt": "2020-12-14T16:23:25Z", "author": {"login": "cescoffier"}, "path": "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/QuteProcessor.java", "diffHunk": "@@ -1193,14 +1186,59 @@ static Type extractMatchType(Set<Type> closure, DotName matchName, Function<Type\n             return clazz.typeParameters();\n         }\n \n-        void clear() {\n+        ClassInfo clazz() {\n+            return clazz;\n+        }\n+\n+        Type type() {\n+            return type;\n+        }\n+\n+        boolean isPrimitive() {\n+            return type != null && type.kind() == org.jboss.jandex.Type.Kind.PRIMITIVE;\n+        }\n+\n+        boolean isArray() {\n+            return type != null && type.kind() == org.jboss.jandex.Type.Kind.ARRAY;\n+        }\n+\n+        boolean isParameterizedType() {\n+            return type != null && type.kind() == org.jboss.jandex.Type.Kind.PARAMETERIZED_TYPE;\n+        }\n+\n+        boolean isClass() {\n+            return type != null && type.kind() == org.jboss.jandex.Type.Kind.CLASS;\n+        }\n+\n+        void setValues(ClassInfo clazz, Type type) {\n+            this.clazz = clazz;\n+            this.type = type;\n+            autoExtractType();\n+        }\n+\n+        void clearValues() {\n             clazz = null;\n             type = null;\n         }\n \n         boolean isEmpty() {\n             return clazz == null;\n         }\n+\n+        void autoExtractType() {\n+            boolean hasCompletionStage = ValueResolverGenerator.hasCompletionStageInTypeClosure(clazz, index);\n+            boolean hasUni = hasCompletionStage ? false\n+                    : ValueResolverGenerator.hasClassInTypeClosure(clazz, Names.UNI, index);\n+            if (hasCompletionStage || hasUni) {\n+                Set<Type> closure = Types.getTypeClosure(clazz, Types.buildResolvedMap(\n+                        getParameterizedTypeArguments(), getTypeParameters(), new HashMap<>(), index), index);\n+                Function<Type, Type> firstParamType = t -> t.asParameterizedType().arguments().get(0);\n+                // CompletionStage<List<Item>> => List<Item>\n+                // Uni<List<String> => List<String>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a0722a519b976bb5fefc687a3ca7cfb93013e76"}, "originalPosition": 301}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNjc1NzE1", "url": "https://github.com/quarkusio/quarkus/pull/13875#pullrequestreview-551675715", "createdAt": "2020-12-14T17:28:39Z", "commit": {"oid": "8a0722a519b976bb5fefc687a3ca7cfb93013e76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzoyODo0MFrOIFbxKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzoyODo0MFrOIFbxKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2ODc0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If a part of an expressions resolves to a `Uni`, a `CompletionStage` is first created from `Uni` using `Uni#subscribeAsCompletionStage()` and then evaluated as described above.\n          \n          \n            \n            If a part of an expression resolves to a `Uni`, a `CompletionStage` is first created from `Uni` using `Uni#subscribeAsCompletionStage()` and then evaluated as described above.", "url": "https://github.com/quarkusio/quarkus/pull/13875#discussion_r542568746", "createdAt": "2020-12-14T17:28:40Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -440,6 +440,13 @@ Virtual method parameters can be \"nested\" virtual method invocations.\n ----\n <1> `item.calculateDiscount(10)` is evaluated first and then passed as an argument to `item.subtractPrice()`.\n \n+==== Evaluation of `CompletionStage` and `Uni` Objects\n+\n+Objects that implement `java.util.concurrent.CompletionStage` and `io.smallrye.mutiny.Uni` are evaluated in a special way.\n+If a part of an expressions resolves to a `CompletionStage`, the resolution continues once this stage is completed and the next part of the expression (if any) is evaluated against the result of the completed stage.\n+For example, if there is an expression `{foo.size}` and `foo` resolves to `CompletionStage<List<String>>` then `size` is resolved against the completed result, i.e. `List<String>`.\n+If a part of an expressions resolves to a `Uni`, a `CompletionStage` is first created from `Uni` using `Uni#subscribeAsCompletionStage()` and then evaluated as described above.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a0722a519b976bb5fefc687a3ca7cfb93013e76"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNjc2OTAx", "url": "https://github.com/quarkusio/quarkus/pull/13875#pullrequestreview-551676901", "createdAt": "2020-12-14T17:29:19Z", "commit": {"oid": "8a0722a519b976bb5fefc687a3ca7cfb93013e76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzoyOToxOVrOIFbzKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzoyOToxOVrOIFbzKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2OTI1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If a part of an expressions resolves to a `CompletionStage`, the resolution continues once this stage is completed and the next part of the expression (if any) is evaluated against the result of the completed stage.\n          \n          \n            \n            If a part of an expression resolves to a `CompletionStage`, the resolution continues once this stage is completed and the next part of the expression (if any) is evaluated against the result of the completed stage.", "url": "https://github.com/quarkusio/quarkus/pull/13875#discussion_r542569258", "createdAt": "2020-12-14T17:29:19Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -440,6 +440,13 @@ Virtual method parameters can be \"nested\" virtual method invocations.\n ----\n <1> `item.calculateDiscount(10)` is evaluated first and then passed as an argument to `item.subtractPrice()`.\n \n+==== Evaluation of `CompletionStage` and `Uni` Objects\n+\n+Objects that implement `java.util.concurrent.CompletionStage` and `io.smallrye.mutiny.Uni` are evaluated in a special way.\n+If a part of an expressions resolves to a `CompletionStage`, the resolution continues once this stage is completed and the next part of the expression (if any) is evaluated against the result of the completed stage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a0722a519b976bb5fefc687a3ca7cfb93013e76"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2718294c8553511ab93d31f6b3b87e14a08214a3", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/2718294c8553511ab93d31f6b3b87e14a08214a3", "committedDate": "2020-12-15T07:33:03Z", "message": "Qute - support Mutiny Uni directly in the templates\n\n- also mention the special handling of CompletionStage and Uni in docs\n\nCo-authored-by: George Gastaldi <gegastaldi@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96af9ac0845f41fa69d0735fa83bf54122962758", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/96af9ac0845f41fa69d0735fa83bf54122962758", "committedDate": "2020-12-15T07:30:38Z", "message": "Apply suggestions from code review\n\nCo-authored-by: George Gastaldi <gegastaldi@gmail.com>"}, "afterCommit": {"oid": "2718294c8553511ab93d31f6b3b87e14a08214a3", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/2718294c8553511ab93d31f6b3b87e14a08214a3", "committedDate": "2020-12-15T07:33:03Z", "message": "Qute - support Mutiny Uni directly in the templates\n\n- also mention the special handling of CompletionStage and Uni in docs\n\nCo-authored-by: George Gastaldi <gegastaldi@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4318, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}