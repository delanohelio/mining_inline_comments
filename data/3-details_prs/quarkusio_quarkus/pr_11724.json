{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1Njc5NDE4", "number": 11724, "title": "Reduce the amount of duplicate/redundant code shared between the jpa/mongo/java/kotlin/imperative/reactive panache implementations", "bodyText": "This PR attempts to reduce the amount of duplicate/similar code to a much smaller subset.  I think there's still a bit more work to be done but this PR gets the large, sweeping changes out of the way.\nI included @geoand as a potential reviewer because github listed him as a recent modifier of these files.", "createdAt": "2020-08-28T23:22:18Z", "url": "https://github.com/quarkusio/quarkus/pull/11724", "merged": true, "mergeCommit": {"oid": "10effb09e23ad4c7a5e7a4baa596ced7a7abc085"}, "closed": true, "closedAt": "2020-11-12T14:43:46Z", "author": {"login": "evanchooly"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQO4JGgBqjM4NTEyMzU4MjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbzpYggFqTUyOTE1NDkzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc5905238173db495d566d2967ed9bc24c6cae73", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/cc5905238173db495d566d2967ed9bc24c6cae73", "committedDate": "2020-09-04T15:26:47Z", "message": "refactored to common code"}, "afterCommit": {"oid": "fe07492c872a6b6b5485bc6d4453987d26c60fad", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/fe07492c872a6b6b5485bc6d4453987d26c60fad", "committedDate": "2020-10-07T15:38:47Z", "message": "all the modules currently working except for spring-data-jpa"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4ee8dfad39ae1e072f1013fda3ba03a382ac8af", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/b4ee8dfad39ae1e072f1013fda3ba03a382ac8af", "committedDate": "2020-10-08T18:45:55Z", "message": "formatter autofixes"}, "afterCommit": {"oid": "7a4ebe1672580bf899e9bd9aac54f043953f11e4", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/7a4ebe1672580bf899e9bd9aac54f043953f11e4", "committedDate": "2020-10-08T18:46:24Z", "message": "refactoring to common code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a4ebe1672580bf899e9bd9aac54f043953f11e4", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/7a4ebe1672580bf899e9bd9aac54f043953f11e4", "committedDate": "2020-10-08T18:46:24Z", "message": "refactoring to common code"}, "afterCommit": {"oid": "43382aa5390e01c9c097c2914095361b4ba1906a", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/43382aa5390e01c9c097c2914095361b4ba1906a", "committedDate": "2020-10-08T23:46:40Z", "message": "update reactive hibernate to use the new code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d37a2526d8ec32c018da4c7b4c871d88109ac718", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/d37a2526d8ec32c018da4c7b4c871d88109ac718", "committedDate": "2020-10-12T16:02:12Z", "message": "final clean ups prior to PR"}, "afterCommit": {"oid": "be137266e13ecd43c66633588bd96d3856ce25bc", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/be137266e13ecd43c66633588bd96d3856ce25bc", "committedDate": "2020-10-12T16:13:54Z", "message": "refactoring to common code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MjcxOTkx", "url": "https://github.com/quarkusio/quarkus/pull/11724#pullrequestreview-507271991", "createdAt": "2020-10-13T10:03:10Z", "commit": {"oid": "66d59d24f0f8d7cf43c23d5f69a063814dbb8216"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDowMzoxMFrOHgfIlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyNjo1OFrOHgf-4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyNjU4Mg==", "bodyText": "As a side note, we should really find a way for users to not use our Operation classes.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r503826582", "createdAt": "2020-10-13T10:03:10Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/runtime/KotlinJpaOperations.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.runtime;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import javax.persistence.EntityManager;\n+\n+import io.quarkus.hibernate.orm.panache.common.runtime.AbstractJpaOperations;\n+\n+public class KotlinJpaOperations extends AbstractJpaOperations<PanacheQueryImpl<?>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66d59d24f0f8d7cf43c23d5f69a063814dbb8216"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MDQ4Mg==", "bodyText": "Tests should not be using KotlinJpaOperations but instead super(query, params).", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r503840482", "createdAt": "2020-10-13T10:26:58Z", "author": {"login": "loicmathieu"}, "path": "integration-tests/hibernate-orm-panache-kotlin/src/main/kotlin/io/quarkus/it/panache/kotlin/PersonRepository.kt", "diffHunk": "@@ -1,12 +1,12 @@\n package io.quarkus.it.panache.kotlin\n \n import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepository\n-import io.quarkus.hibernate.orm.panache.kotlin.runtime.JpaOperations\n+import io.quarkus.hibernate.orm.panache.kotlin.runtime.KotlinJpaOperations.INSTANCE\n import javax.enterprise.context.ApplicationScoped\n \n @ApplicationScoped\n open class PersonRepository : PanacheRepository<Person> {\n     override fun count(query: String, params: Map<String, Any>): Long {\n-        return JpaOperations.count(Person::class.java, query, params)\n+        return INSTANCE.count(Person::class.java, query, params)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66d59d24f0f8d7cf43c23d5f69a063814dbb8216"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66d59d24f0f8d7cf43c23d5f69a063814dbb8216", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/66d59d24f0f8d7cf43c23d5f69a063814dbb8216", "committedDate": "2020-10-12T17:35:16Z", "message": "formatter autofixes"}, "afterCommit": {"oid": "16d50cdec94df1d9898f63ae2701733229541749", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/16d50cdec94df1d9898f63ae2701733229541749", "committedDate": "2020-10-13T14:05:06Z", "message": "refactoring to common code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16d50cdec94df1d9898f63ae2701733229541749", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/16d50cdec94df1d9898f63ae2701733229541749", "committedDate": "2020-10-13T14:05:06Z", "message": "refactoring to common code"}, "afterCommit": {"oid": "6136922d6e718ee3b165d54fa3bb02dcf348e63b", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/6136922d6e718ee3b165d54fa3bb02dcf348e63b", "committedDate": "2020-10-13T15:49:27Z", "message": "refactoring to common code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd82ec9ff77c5d8414dcafde27fffcb66471dc7b", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/dd82ec9ff77c5d8414dcafde27fffcb66471dc7b", "committedDate": "2020-10-13T21:35:24Z", "message": "fix compile error"}, "afterCommit": {"oid": "8d36b2486c172e37cde95ab553f1004f7c684cf3", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/8d36b2486c172e37cde95ab553f1004f7c684cf3", "committedDate": "2020-10-13T21:38:01Z", "message": "refactoring to common code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ce297ba8425129642412359910c4e61c70dcb8ef", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/ce297ba8425129642412359910c4e61c70dcb8ef", "committedDate": "2020-10-16T14:52:41Z", "message": "fixed missing dep"}, "afterCommit": {"oid": "444eaf2f014218cf326a2daae25e0d664165d34e", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/444eaf2f014218cf326a2daae25e0d664165d34e", "committedDate": "2020-10-16T16:20:10Z", "message": "refactoring to common code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNTAxOTEz", "url": "https://github.com/quarkusio/quarkus/pull/11724#pullrequestreview-511501913", "createdAt": "2020-10-19T08:00:51Z", "commit": {"oid": "444eaf2f014218cf326a2daae25e0d664165d34e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwODowMDo1MVrOHkCNdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwODoxMjoyN1rOHkCoWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0Njk5OQ==", "bodyText": "wildcard imports are prohibited", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r507546999", "createdAt": "2020-10-19T08:00:51Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/common/runtime/AbstractJpaOperations.java", "diffHunk": "@@ -1,5 +1,7 @@\n package io.quarkus.hibernate.orm.panache.common.runtime;\n \n+import static io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444eaf2f014218cf326a2daae25e0d664165d34e"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU1MjQ1Ng==", "bodyText": "panache-common is common to Hibernate and MongoDB, it should not depends on any Hibernate modules", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r507552456", "createdAt": "2020-10-19T08:10:10Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/panache-common/deployment/pom.xml", "diffHunk": "@@ -21,6 +21,11 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-panache-common</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-orm-deployment</artifactId>\n+            <scope>provided</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444eaf2f014218cf326a2daae25e0d664165d34e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU1Mzg4MQ==", "bodyText": "This class should be on hibernate-orm-panache-common not panache-common.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r507553881", "createdAt": "2020-10-19T08:12:27Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheJpaEntityClassVisitor.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.panache.common.deployment.visitors;\n+\n+import java.util.List;\n+\n+import org.hibernate.bytecode.enhance.spi.EnhancerConstants;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.IndexView;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizer;\n+import io.quarkus.panache.common.deployment.TypeBundle;\n+\n+public class PanacheJpaEntityClassVisitor extends PanacheEntityClassVisitor<EntityField> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444eaf2f014218cf326a2daae25e0d664165d34e"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dee842a6e33f06dbf81f81d64c3f0003579c232c", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/dee842a6e33f06dbf81f81d64c3f0003579c232c", "committedDate": "2020-10-19T14:42:53Z", "message": "clean ups.\nPR feedback changes"}, "afterCommit": {"oid": "737fda02e65ea5700365998780c69c521cd0100d", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/737fda02e65ea5700365998780c69c521cd0100d", "committedDate": "2020-10-19T14:59:03Z", "message": "refactoring to common code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "737fda02e65ea5700365998780c69c521cd0100d", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/737fda02e65ea5700365998780c69c521cd0100d", "committedDate": "2020-10-19T14:59:03Z", "message": "refactoring to common code"}, "afterCommit": {"oid": "daf0114f6c9b191d64492ffa125cae23c898e7cc", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/daf0114f6c9b191d64492ffa125cae23c898e7cc", "committedDate": "2020-10-19T17:42:06Z", "message": "refactoring to common code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMzkxNzQ1", "url": "https://github.com/quarkusio/quarkus/pull/11724#pullrequestreview-512391745", "createdAt": "2020-10-20T07:10:00Z", "commit": {"oid": "daf0114f6c9b191d64492ffa125cae23c898e7cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzoxMDowMFrOHktqNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzoxMDowMFrOHktqNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1ODg2OQ==", "bodyText": "Could we add it as optional ?\nI don't know if it's a bug library or not, but if it adds a lot of dependencies we should make it optional", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r508258869", "createdAt": "2020-10-20T07:10:00Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/panache-hibernate-common/deployment/pom.xml", "diffHunk": "@@ -17,6 +17,14 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-core-deployment</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers</artifactId>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf0114f6c9b191d64492ffa125cae23c898e7cc"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMzk1MTQ0", "url": "https://github.com/quarkusio/quarkus/pull/11724#pullrequestreview-512395144", "createdAt": "2020-10-20T07:14:47Z", "commit": {"oid": "daf0114f6c9b191d64492ffa125cae23c898e7cc"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNjk3NzM2", "url": "https://github.com/quarkusio/quarkus/pull/11724#pullrequestreview-512697736", "createdAt": "2020-10-20T13:18:57Z", "commit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NjM4ODgz", "url": "https://github.com/quarkusio/quarkus/pull/11724#pullrequestreview-516638883", "createdAt": "2020-10-26T10:23:30Z", "commit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "state": "DISMISSED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyMzozMFrOHoJJZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoxOToyMlrOHoXdSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NDk0OQ==", "bodyText": "Is the dep on envers really deliberate?", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r511854949", "createdAt": "2020-10-26T10:23:30Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,16 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-hibernate-orm-panache-common</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers-deployment</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NTEzNg==", "bodyText": "Same question about envers.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r511855136", "createdAt": "2020-10-26T10:23:48Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-reactive-panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,16 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-hibernate-reactive-panache-common</artifactId>\n         </dependency>\n+           <dependency>\n+               <groupId>io.quarkus</groupId>\n+               <artifactId>quarkus-hibernate-envers-deployment</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NTIyNQ==", "bodyText": "Same question about envers.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r511855225", "createdAt": "2020-10-26T10:23:57Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-hibernate-common/runtime/pom.xml", "diffHunk": "@@ -25,6 +25,10 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-panache-common</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg==", "bodyText": "This is user-facing API, and it's lacking methods compared to the current version so it's not compatible.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r511856972", "createdAt": "2020-10-26T10:26:45Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3MjQzNQ==", "bodyText": "Again, this is public API, you can't remove that.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r511872435", "createdAt": "2020-10-26T10:53:03Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-reactive-panache/runtime/src/main/java/io/quarkus/hibernate/reactive/panache/Panache.java", "diffHunk": "@@ -38,36 +36,4 @@\n         return getSession().withTransaction(t -> work.get());\n     }\n \n-    /**\n-     * Executes a database update operation and return the number of rows operated on.\n-     * \n-     * @param query a normal HQL query\n-     * @param params optional list of indexed parameters\n-     * @return the number of rows operated on.\n-     */\n-    public static Uni<Integer> executeUpdate(String query, Object... params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0NjQyNg==", "bodyText": "I don't think we want to make every Java Panache extension depend on Kotlin.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r511946426", "createdAt": "2020-10-26T13:10:46Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,10 @@\n             <groupId>org.ow2.asm</groupId>\n             <artifactId>asm</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.jetbrains.kotlin</groupId>\n+            <artifactId>kotlin-stdlib-jdk8</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3NTU0NA==", "bodyText": "We have two elements in typeArguments right? And we just put them in right above, so this stream is pretty weird, so is the block below.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512075544", "createdAt": "2020-10-26T16:00:04Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "diffHunk": "@@ -145,58 +185,122 @@ public void visitEnd() {\n         super.visitEnd();\n     }\n \n+    protected void discoverTypeParameters(ClassInfo classInfo, IndexView indexView, TypeBundle types, ByteCodeType baseType) {\n+        List<ByteCodeType> foundTypeArguments = recursivelyFindEntityTypeArguments(indexView,\n+                classInfo.name(), baseType.dotName());\n+\n+        ByteCodeType entityType = (foundTypeArguments.size() > 0) ? foundTypeArguments.get(0) : OBJECT;\n+        ByteCodeType idType = (foundTypeArguments.size() > 1) ? foundTypeArguments.get(1) : OBJECT;\n+\n+        typeArguments.put(\"Entity\", entityType);\n+        typeArguments.put(\"Id\", idType);\n+        typeArguments.keySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3NjU0OA==", "bodyText": "name1?", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512076548", "createdAt": "2020-10-26T16:01:22Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "diffHunk": "@@ -145,58 +185,122 @@ public void visitEnd() {\n         super.visitEnd();\n     }\n \n+    protected void discoverTypeParameters(ClassInfo classInfo, IndexView indexView, TypeBundle types, ByteCodeType baseType) {\n+        List<ByteCodeType> foundTypeArguments = recursivelyFindEntityTypeArguments(indexView,\n+                classInfo.name(), baseType.dotName());\n+\n+        ByteCodeType entityType = (foundTypeArguments.size() > 0) ? foundTypeArguments.get(0) : OBJECT;\n+        ByteCodeType idType = (foundTypeArguments.size() > 1) ? foundTypeArguments.get(1) : OBJECT;\n+\n+        typeArguments.put(\"Entity\", entityType);\n+        typeArguments.put(\"Id\", idType);\n+        typeArguments.keySet().stream()\n+                .filter(k -> !k.equals(\"Id\"))\n+                .forEach(k -> erasures.put(k, OBJECT.descriptor()));\n+        try {\n+            ByteCodeType entity = typeArguments.get(\"Entity\");\n+            if (entity != null) {\n+                erasures.put(entity.dotName().toString(), entity.descriptor());\n+            }\n+            erasures.put(types.queryType().dotName().toString(), OBJECT.descriptor());\n+            erasures.put(types.updateType().dotName().toString(), OBJECT.descriptor());\n+        } catch (UnsupportedOperationException ignored) {\n+        }\n+    }\n+\n     protected void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-        String descriptor = AsmUtil.getDescriptor(method, name -> null);\n-        String signature = AsmUtil.getSignature(method, name -> null);\n         List<org.jboss.jandex.Type> parameters = method.parameters();\n-        String castTo = null;\n-        if (targetReturnTypeErased != null && targetReturnTypeErased.asBoolean()) {\n-            castTo = method.returnType().name().toString('/');\n-        }\n \n         MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_SYNTHETIC,\n                 method.name(),\n-                descriptor,\n-                signature,\n+                AsmUtil.getDescriptor(method, name -> null),\n+                AsmUtil.getSignature(method, name1 -> null),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4MDI0Nw==", "bodyText": "Are you sure a primitive maps to the Object descriptor?", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512080247", "createdAt": "2020-10-26T16:06:29Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "diffHunk": "@@ -145,58 +185,122 @@ public void visitEnd() {\n         super.visitEnd();\n     }\n \n+    protected void discoverTypeParameters(ClassInfo classInfo, IndexView indexView, TypeBundle types, ByteCodeType baseType) {\n+        List<ByteCodeType> foundTypeArguments = recursivelyFindEntityTypeArguments(indexView,\n+                classInfo.name(), baseType.dotName());\n+\n+        ByteCodeType entityType = (foundTypeArguments.size() > 0) ? foundTypeArguments.get(0) : OBJECT;\n+        ByteCodeType idType = (foundTypeArguments.size() > 1) ? foundTypeArguments.get(1) : OBJECT;\n+\n+        typeArguments.put(\"Entity\", entityType);\n+        typeArguments.put(\"Id\", idType);\n+        typeArguments.keySet().stream()\n+                .filter(k -> !k.equals(\"Id\"))\n+                .forEach(k -> erasures.put(k, OBJECT.descriptor()));\n+        try {\n+            ByteCodeType entity = typeArguments.get(\"Entity\");\n+            if (entity != null) {\n+                erasures.put(entity.dotName().toString(), entity.descriptor());\n+            }\n+            erasures.put(types.queryType().dotName().toString(), OBJECT.descriptor());\n+            erasures.put(types.updateType().dotName().toString(), OBJECT.descriptor());\n+        } catch (UnsupportedOperationException ignored) {\n+        }\n+    }\n+\n     protected void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-        String descriptor = AsmUtil.getDescriptor(method, name -> null);\n-        String signature = AsmUtil.getSignature(method, name -> null);\n         List<org.jboss.jandex.Type> parameters = method.parameters();\n-        String castTo = null;\n-        if (targetReturnTypeErased != null && targetReturnTypeErased.asBoolean()) {\n-            castTo = method.returnType().name().toString('/');\n-        }\n \n         MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_SYNTHETIC,\n                 method.name(),\n-                descriptor,\n-                signature,\n+                AsmUtil.getDescriptor(method, name -> null),\n+                AsmUtil.getSignature(method, name1 -> null),\n                 null);\n         AsmUtil.copyParameterNames(mv, method);\n         mv.visitCode();\n         for (PanacheMethodCustomizer customizer : methodCustomizers) {\n             customizer.customize(thisClass, method, mv);\n         }\n-        // inject model\n+        loadOperations(mv);\n+        loadArguments(mv, parameters);\n+        invokeOperations(mv, method);\n+        mv.visitMaxs(0, 0);\n+        mv.visitEnd();\n+    }\n+\n+    private void loadOperations(MethodVisitor mv) {\n+        mv.visitFieldInsn(Opcodes.GETSTATIC, typeBundle.operations().internalName(), \"INSTANCE\",\n+                typeBundle.operations().descriptor());\n+    }\n+\n+    private void loadArguments(MethodVisitor mv, List<org.jboss.jandex.Type> parameters) {\n+        // inject Class\n         injectModel(mv);\n         for (int i = 0; i < parameters.size(); i++) {\n             mv.visitIntInsn(Opcodes.ALOAD, i);\n         }\n-        // inject Class\n-        String forwardingDescriptor = \"(\" + getModelDescriptor() + descriptor.substring(1);\n-        if (castTo != null) {\n-            // return type is erased to Object\n-            int lastParen = forwardingDescriptor.lastIndexOf(')');\n-            forwardingDescriptor = forwardingDescriptor.substring(0, lastParen + 1) + \"Ljava/lang/Object;\";\n-        }\n-        invokeOperation(method, mv, forwardingDescriptor);\n-        if (castTo != null)\n-            mv.visitTypeInsn(Opcodes.CHECKCAST, castTo);\n-        String returnTypeDescriptor = descriptor.substring(descriptor.lastIndexOf(\")\") + 1);\n-        mv.visitInsn(AsmUtil.getReturnInstruction(returnTypeDescriptor));\n-        mv.visitMaxs(0, 0);\n-        mv.visitEnd();\n     }\n \n-    protected void invokeOperation(MethodInfo method, MethodVisitor mv, String forwardingDescriptor) {\n-        mv.visitMethodInsn(Opcodes.INVOKESTATIC,\n-                getPanacheOperationsInternalName(),\n-                method.name(),\n-                forwardingDescriptor, false);\n+    private void invokeOperations(MethodVisitor mv, MethodInfo method) {\n+        String operationDescriptor;\n+\n+        StringJoiner joiner = new StringJoiner(\"\", \"(\", \")\");\n+        joiner.add(CLASS.descriptor());\n+        descriptors(method, joiner);\n+\n+        org.jboss.jandex.Type returnType = method.returnType();\n+        String descriptor = getDescriptor(returnType, argMapper);\n+        String key = returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                ? returnType.asTypeVariable().identifier()\n+                : returnType.name().toString();\n+        operationDescriptor = joiner + erasures.getOrDefault(key, descriptor);\n+\n+        mv.visitMethodInsn(INVOKEVIRTUAL, typeBundle.operations().internalName(), method.name(),\n+                operationDescriptor, false);\n+        if (returnType.kind() != org.jboss.jandex.Type.Kind.PRIMITIVE) {\n+            String cast;\n+            if (returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE) {\n+                TypeVariable typeVariable = returnType.asTypeVariable();\n+                ByteCodeType type = typeArguments.get(typeVariable.identifier());\n+                if (type == null && typeVariable.bounds().size() != 1) {\n+                    type = OBJECT;\n+                } else {\n+                    type = new ByteCodeType(typeVariable.bounds().get(0));\n+                }\n+                cast = type.internalName();\n+            } else {\n+                cast = returnType.name().toString().replace('.', '/');\n+            }\n+            mv.visitTypeInsn(CHECKCAST, cast);\n+        }\n+        mv.visitInsn(AsmUtil.getReturnInstruction(returnType));\n     }\n \n-    protected String getModelDescriptor() {\n-        return \"Ljava/lang/Class;\";\n+    private void descriptors(MethodInfo method, StringJoiner joiner) {\n+        for (org.jboss.jandex.Type parameter : method.parameters()) {\n+            if (parameter.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                    || method.name().endsWith(\"ById\")\n+                            && parameter.name().equals(typeArguments.get(\"Id\").dotName())) {\n+                joiner.add(OBJECT.descriptor());\n+            } else {\n+                joiner.add(mapType(parameter));\n+            }\n+        }\n     }\n \n-    protected abstract String getPanacheOperationsInternalName();\n+    private String mapType(org.jboss.jandex.Type parameter) {\n+        String descriptor;\n+        switch (parameter.kind()) {\n+            case PRIMITIVE:\n+            case TYPE_VARIABLE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4MDg2MQ==", "bodyText": "That looks like a weird special case when we have the list of typeArguments", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512080861", "createdAt": "2020-10-26T16:07:21Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "diffHunk": "@@ -145,58 +185,122 @@ public void visitEnd() {\n         super.visitEnd();\n     }\n \n+    protected void discoverTypeParameters(ClassInfo classInfo, IndexView indexView, TypeBundle types, ByteCodeType baseType) {\n+        List<ByteCodeType> foundTypeArguments = recursivelyFindEntityTypeArguments(indexView,\n+                classInfo.name(), baseType.dotName());\n+\n+        ByteCodeType entityType = (foundTypeArguments.size() > 0) ? foundTypeArguments.get(0) : OBJECT;\n+        ByteCodeType idType = (foundTypeArguments.size() > 1) ? foundTypeArguments.get(1) : OBJECT;\n+\n+        typeArguments.put(\"Entity\", entityType);\n+        typeArguments.put(\"Id\", idType);\n+        typeArguments.keySet().stream()\n+                .filter(k -> !k.equals(\"Id\"))\n+                .forEach(k -> erasures.put(k, OBJECT.descriptor()));\n+        try {\n+            ByteCodeType entity = typeArguments.get(\"Entity\");\n+            if (entity != null) {\n+                erasures.put(entity.dotName().toString(), entity.descriptor());\n+            }\n+            erasures.put(types.queryType().dotName().toString(), OBJECT.descriptor());\n+            erasures.put(types.updateType().dotName().toString(), OBJECT.descriptor());\n+        } catch (UnsupportedOperationException ignored) {\n+        }\n+    }\n+\n     protected void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-        String descriptor = AsmUtil.getDescriptor(method, name -> null);\n-        String signature = AsmUtil.getSignature(method, name -> null);\n         List<org.jboss.jandex.Type> parameters = method.parameters();\n-        String castTo = null;\n-        if (targetReturnTypeErased != null && targetReturnTypeErased.asBoolean()) {\n-            castTo = method.returnType().name().toString('/');\n-        }\n \n         MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_SYNTHETIC,\n                 method.name(),\n-                descriptor,\n-                signature,\n+                AsmUtil.getDescriptor(method, name -> null),\n+                AsmUtil.getSignature(method, name1 -> null),\n                 null);\n         AsmUtil.copyParameterNames(mv, method);\n         mv.visitCode();\n         for (PanacheMethodCustomizer customizer : methodCustomizers) {\n             customizer.customize(thisClass, method, mv);\n         }\n-        // inject model\n+        loadOperations(mv);\n+        loadArguments(mv, parameters);\n+        invokeOperations(mv, method);\n+        mv.visitMaxs(0, 0);\n+        mv.visitEnd();\n+    }\n+\n+    private void loadOperations(MethodVisitor mv) {\n+        mv.visitFieldInsn(Opcodes.GETSTATIC, typeBundle.operations().internalName(), \"INSTANCE\",\n+                typeBundle.operations().descriptor());\n+    }\n+\n+    private void loadArguments(MethodVisitor mv, List<org.jboss.jandex.Type> parameters) {\n+        // inject Class\n         injectModel(mv);\n         for (int i = 0; i < parameters.size(); i++) {\n             mv.visitIntInsn(Opcodes.ALOAD, i);\n         }\n-        // inject Class\n-        String forwardingDescriptor = \"(\" + getModelDescriptor() + descriptor.substring(1);\n-        if (castTo != null) {\n-            // return type is erased to Object\n-            int lastParen = forwardingDescriptor.lastIndexOf(')');\n-            forwardingDescriptor = forwardingDescriptor.substring(0, lastParen + 1) + \"Ljava/lang/Object;\";\n-        }\n-        invokeOperation(method, mv, forwardingDescriptor);\n-        if (castTo != null)\n-            mv.visitTypeInsn(Opcodes.CHECKCAST, castTo);\n-        String returnTypeDescriptor = descriptor.substring(descriptor.lastIndexOf(\")\") + 1);\n-        mv.visitInsn(AsmUtil.getReturnInstruction(returnTypeDescriptor));\n-        mv.visitMaxs(0, 0);\n-        mv.visitEnd();\n     }\n \n-    protected void invokeOperation(MethodInfo method, MethodVisitor mv, String forwardingDescriptor) {\n-        mv.visitMethodInsn(Opcodes.INVOKESTATIC,\n-                getPanacheOperationsInternalName(),\n-                method.name(),\n-                forwardingDescriptor, false);\n+    private void invokeOperations(MethodVisitor mv, MethodInfo method) {\n+        String operationDescriptor;\n+\n+        StringJoiner joiner = new StringJoiner(\"\", \"(\", \")\");\n+        joiner.add(CLASS.descriptor());\n+        descriptors(method, joiner);\n+\n+        org.jboss.jandex.Type returnType = method.returnType();\n+        String descriptor = getDescriptor(returnType, argMapper);\n+        String key = returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                ? returnType.asTypeVariable().identifier()\n+                : returnType.name().toString();\n+        operationDescriptor = joiner + erasures.getOrDefault(key, descriptor);\n+\n+        mv.visitMethodInsn(INVOKEVIRTUAL, typeBundle.operations().internalName(), method.name(),\n+                operationDescriptor, false);\n+        if (returnType.kind() != org.jboss.jandex.Type.Kind.PRIMITIVE) {\n+            String cast;\n+            if (returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE) {\n+                TypeVariable typeVariable = returnType.asTypeVariable();\n+                ByteCodeType type = typeArguments.get(typeVariable.identifier());\n+                if (type == null && typeVariable.bounds().size() != 1) {\n+                    type = OBJECT;\n+                } else {\n+                    type = new ByteCodeType(typeVariable.bounds().get(0));\n+                }\n+                cast = type.internalName();\n+            } else {\n+                cast = returnType.name().toString().replace('.', '/');\n+            }\n+            mv.visitTypeInsn(CHECKCAST, cast);\n+        }\n+        mv.visitInsn(AsmUtil.getReturnInstruction(returnType));\n     }\n \n-    protected String getModelDescriptor() {\n-        return \"Ljava/lang/Class;\";\n+    private void descriptors(MethodInfo method, StringJoiner joiner) {\n+        for (org.jboss.jandex.Type parameter : method.parameters()) {\n+            if (parameter.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                    || method.name().endsWith(\"ById\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4MTUzOQ==", "bodyText": "Same remarks as for the other visitor.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512081539", "createdAt": "2020-10-26T16:08:18Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheRepositoryClassVisitor.java", "diffHunk": "@@ -65,70 +67,65 @@ protected void injectModel(MethodVisitor mv) {\n     public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n         super.visit(version, access, name, signature, superName, interfaces);\n \n-        final String repositoryClassName = name.replace('/', '.');\n+        DotName baseType = typeBundle.repositoryBase().dotName();\n \n-        String[] foundTypeArguments = findEntityTypeArgumentsForPanacheRepository(indexView, repositoryClassName,\n-                getPanacheRepositoryBaseDotName());\n+        List<TypeVariable> typeVariables = indexView.getClassByName(baseType).typeParameters();\n+        entityUpperBound = !typeVariables.isEmpty()\n+                ? new ByteCodeType(typeVariables.get(0).bounds().get(0))\n+                : OBJECT;\n \n-        entityBinaryType = foundTypeArguments[0];\n-        entitySignature = \"L\" + entityBinaryType + \";\";\n-        this.entityType = Type.getType(entitySignature);\n-        idBinaryType = foundTypeArguments[1];\n-        idSignature = \"L\" + idBinaryType + \";\";\n-        Type idType = Type.getType(idSignature);\n+        discoverTypeParameters(daoClassInfo, indexView, typeBundle, typeBundle.repositoryBase());\n \n-        typeArguments.put(\"Entity\", this.entityType.getDescriptor());\n-        typeArguments.put(\"Id\", idType.getDescriptor());\n-        this.panacheRepositoryBaseClassInfo = indexView.getClassByName(getPanacheRepositoryBaseDotName());\n-    }\n+        this.entityType = typeArguments.getOrDefault(\"Entity\", OBJECT).type();\n \n-    @Override\n-    public MethodVisitor visitMethod(int access, String methodName, String descriptor, String signature,\n-            String[] exceptions) {\n-        userMethods.add(methodName + \"/\" + descriptor);\n-        return super.visitMethod(access, methodName, descriptor, signature, exceptions);\n-    }\n+        this.panacheRepositoryBaseClassInfo = indexView.getClassByName(baseType);\n \n-    public static String[] findEntityTypeArgumentsForPanacheRepository(IndexView indexView,\n-            String repositoryClassName,\n-            DotName repositoryDotName) {\n-        for (ClassInfo classInfo : indexView.getAllKnownImplementors(repositoryDotName)) {\n-            if (repositoryClassName.equals(classInfo.name().toString())) {\n-                return recursivelyFindEntityTypeArgumentsFromClass(indexView, classInfo.name(), repositoryDotName);\n-            }\n-        }\n+        argMapper = type -> {\n+            ByteCodeType byteCodeType = typeArguments.get(type);\n+            return byteCodeType != null\n+                    ? byteCodeType.descriptor()\n+                    : type;\n+        };\n \n-        return null;\n     }\n \n-    public static String[] recursivelyFindEntityTypeArgumentsFromClass(IndexView indexView, DotName clazz,\n-            DotName repositoryDotName) {\n-        if (clazz.equals(JandexUtil.DOTNAME_OBJECT)) {\n-            return null;\n+    protected void discoverTypeParameters(ClassInfo classInfo, IndexView indexView, TypeBundle types, ByteCodeType baseType) {\n+        List<ByteCodeType> foundTypeArguments = recursivelyFindEntityTypeArguments(indexView,\n+                classInfo.name(), baseType.dotName());\n+\n+        ByteCodeType entityType = (foundTypeArguments.size() > 0) ? foundTypeArguments.get(0) : OBJECT;\n+        ByteCodeType idType = (foundTypeArguments.size() > 1) ? foundTypeArguments.get(1) : OBJECT;\n+\n+        typeArguments.put(\"Entity\", entityType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4OTI2NQ==", "bodyText": "Same remark as for the other visitor.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512089265", "createdAt": "2020-10-26T16:19:08Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheRepositoryClassVisitor.java", "diffHunk": "@@ -202,53 +199,90 @@ protected void generateJvmBridge(MethodInfo method) {\n \n     }\n \n-    protected void generateModelBridge(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-        String descriptor = AsmUtil.getDescriptor(method, name -> typeArguments.get(name));\n+    protected void generateModelBridge(MethodInfo method) {\n         // JpaOperations erases the Id type to Object\n-        String descriptorForJpaOperations = AsmUtil.getDescriptor(method,\n-                name -> name.equals(\"Entity\") ? entitySignature : null);\n-        String signature = AsmUtil.getSignature(method, name -> typeArguments.get(name));\n         List<org.jboss.jandex.Type> parameters = method.parameters();\n \n-        String castTo = null;\n-        if (targetReturnTypeErased != null && targetReturnTypeErased.asBoolean()) {\n-            org.jboss.jandex.Type type = method.returnType();\n-            if (type.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE &&\n-                    type.asTypeVariable().identifier().equals(\"Entity\")) {\n-                castTo = entityBinaryType;\n-            }\n-            if (castTo == null)\n-                castTo = type.name().toString('/');\n-        }\n-\n         // Note: we can't use SYNTHETIC here because otherwise Mockito will never mock these methods\n         MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC,\n                 method.name(),\n-                descriptor,\n-                signature,\n+                AsmUtil.getDescriptor(method, argMapper),\n+                AsmUtil.getSignature(method, argMapper),\n                 null);\n         AsmUtil.copyParameterNames(mv, method);\n         mv.visitCode();\n+        loadOperations(mv);\n+        loadArguments(parameters, mv);\n+        invokeOperations(mv, method);\n+        mv.visitMaxs(0, 0);\n+        mv.visitEnd();\n+    }\n+\n+    private void invokeOperations(MethodVisitor mv, MethodInfo method) {\n+        String operationDescriptor;\n+\n+        StringJoiner joiner = new StringJoiner(\"\", \"(\", \")\");\n+        joiner.add(CLASS.descriptor());\n+        descriptors(method, joiner);\n+\n+        org.jboss.jandex.Type returnType = method.returnType();\n+        String descriptor = getDescriptor(returnType, argMapper);\n+        String key = returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                ? returnType.asTypeVariable().identifier()\n+                : returnType.name().toString();\n+        operationDescriptor = joiner + erasures.getOrDefault(key, descriptor);\n+\n+        mv.visitMethodInsn(INVOKEVIRTUAL, typeBundle.operations().internalName(), method.name(),\n+                operationDescriptor, false);\n+        if (returnType.kind() != org.jboss.jandex.Type.Kind.PRIMITIVE) {\n+            String cast;\n+            if (returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE) {\n+                ByteCodeType type = typeArguments.getOrDefault(returnType.asTypeVariable().identifier(), entityUpperBound);\n+                cast = type.internalName();\n+            } else {\n+                cast = returnType.name().toString().replace('.', '/');\n+            }\n+            mv.visitTypeInsn(CHECKCAST, cast);\n+        }\n+        mv.visitInsn(AsmUtil.getReturnInstruction(returnType));\n+    }\n+\n+    private void descriptors(MethodInfo method, StringJoiner joiner) {\n+        for (org.jboss.jandex.Type parameter : method.parameters()) {\n+            if (parameter.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                    || method.name().endsWith(\"ById\")\n+                            && parameter.name().equals(typeArguments.get(\"Id\").dotName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4OTQxOA==", "bodyText": "Same remark as for the other visitor.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512089418", "createdAt": "2020-10-26T16:19:22Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheRepositoryClassVisitor.java", "diffHunk": "@@ -202,53 +199,90 @@ protected void generateJvmBridge(MethodInfo method) {\n \n     }\n \n-    protected void generateModelBridge(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-        String descriptor = AsmUtil.getDescriptor(method, name -> typeArguments.get(name));\n+    protected void generateModelBridge(MethodInfo method) {\n         // JpaOperations erases the Id type to Object\n-        String descriptorForJpaOperations = AsmUtil.getDescriptor(method,\n-                name -> name.equals(\"Entity\") ? entitySignature : null);\n-        String signature = AsmUtil.getSignature(method, name -> typeArguments.get(name));\n         List<org.jboss.jandex.Type> parameters = method.parameters();\n \n-        String castTo = null;\n-        if (targetReturnTypeErased != null && targetReturnTypeErased.asBoolean()) {\n-            org.jboss.jandex.Type type = method.returnType();\n-            if (type.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE &&\n-                    type.asTypeVariable().identifier().equals(\"Entity\")) {\n-                castTo = entityBinaryType;\n-            }\n-            if (castTo == null)\n-                castTo = type.name().toString('/');\n-        }\n-\n         // Note: we can't use SYNTHETIC here because otherwise Mockito will never mock these methods\n         MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC,\n                 method.name(),\n-                descriptor,\n-                signature,\n+                AsmUtil.getDescriptor(method, argMapper),\n+                AsmUtil.getSignature(method, argMapper),\n                 null);\n         AsmUtil.copyParameterNames(mv, method);\n         mv.visitCode();\n+        loadOperations(mv);\n+        loadArguments(parameters, mv);\n+        invokeOperations(mv, method);\n+        mv.visitMaxs(0, 0);\n+        mv.visitEnd();\n+    }\n+\n+    private void invokeOperations(MethodVisitor mv, MethodInfo method) {\n+        String operationDescriptor;\n+\n+        StringJoiner joiner = new StringJoiner(\"\", \"(\", \")\");\n+        joiner.add(CLASS.descriptor());\n+        descriptors(method, joiner);\n+\n+        org.jboss.jandex.Type returnType = method.returnType();\n+        String descriptor = getDescriptor(returnType, argMapper);\n+        String key = returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                ? returnType.asTypeVariable().identifier()\n+                : returnType.name().toString();\n+        operationDescriptor = joiner + erasures.getOrDefault(key, descriptor);\n+\n+        mv.visitMethodInsn(INVOKEVIRTUAL, typeBundle.operations().internalName(), method.name(),\n+                operationDescriptor, false);\n+        if (returnType.kind() != org.jboss.jandex.Type.Kind.PRIMITIVE) {\n+            String cast;\n+            if (returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE) {\n+                ByteCodeType type = typeArguments.getOrDefault(returnType.asTypeVariable().identifier(), entityUpperBound);\n+                cast = type.internalName();\n+            } else {\n+                cast = returnType.name().toString().replace('.', '/');\n+            }\n+            mv.visitTypeInsn(CHECKCAST, cast);\n+        }\n+        mv.visitInsn(AsmUtil.getReturnInstruction(returnType));\n+    }\n+\n+    private void descriptors(MethodInfo method, StringJoiner joiner) {\n+        for (org.jboss.jandex.Type parameter : method.parameters()) {\n+            if (parameter.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                    || method.name().endsWith(\"ById\")\n+                            && parameter.name().equals(typeArguments.get(\"Id\").dotName())) {\n+                joiner.add(OBJECT.descriptor());\n+            } else {\n+                joiner.add(mapType(parameter));\n+            }\n+        }\n+    }\n+\n+    private String mapType(org.jboss.jandex.Type parameter) {\n+        String descriptor;\n+        switch (parameter.kind()) {\n+            case PRIMITIVE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 296}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0ba1e171b5e4a21d30ca70530bdae81dcb1dfb0", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/e0ba1e171b5e4a21d30ca70530bdae81dcb1dfb0", "committedDate": "2020-10-28T13:53:36Z", "message": "see what CI makes of this"}, "afterCommit": {"oid": "d247d8270d176932a24610b700845761978789a1", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/d247d8270d176932a24610b700845761978789a1", "committedDate": "2020-11-03T15:01:40Z", "message": "refactoring to common code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a8ccf71773b4b52b5e9a39f3dcbd24ecb8f7619", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/1a8ccf71773b4b52b5e9a39f3dcbd24ecb8f7619", "committedDate": "2020-11-05T15:36:38Z", "message": "finally tracked down conflicting deps"}, "afterCommit": {"oid": "eca5ada3807ddd9cbc39ec713cbc371ee571d822", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/eca5ada3807ddd9cbc39ec713cbc371ee571d822", "committedDate": "2020-11-05T17:21:53Z", "message": "finally tracked down conflicting deps"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5cd6cb70b9e8d1507d88470a5946acf308dbb04", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/c5cd6cb70b9e8d1507d88470a5946acf308dbb04", "committedDate": "2020-11-05T22:30:09Z", "message": "update spring-data-jpa to deal with the static methods"}, "afterCommit": {"oid": "2a182cd020de5ba429521d41bd00d7846325add8", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/2a182cd020de5ba429521d41bd00d7846325add8", "committedDate": "2020-11-05T22:46:57Z", "message": "refactoring to common code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e593470babaa213b03adb841492f3cfe4bd16eaf", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/e593470babaa213b03adb841492f3cfe4bd16eaf", "committedDate": "2020-11-05T23:36:37Z", "message": "formatter update"}, "afterCommit": {"oid": "5d4e39d2d93c3e3a0fa69ae4a72a4af0c8aa9be3", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/5d4e39d2d93c3e3a0fa69ae4a72a4af0c8aa9be3", "committedDate": "2020-11-05T23:53:50Z", "message": "refactoring to common code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d4e39d2d93c3e3a0fa69ae4a72a4af0c8aa9be3", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/5d4e39d2d93c3e3a0fa69ae4a72a4af0c8aa9be3", "committedDate": "2020-11-05T23:53:50Z", "message": "refactoring to common code"}, "afterCommit": {"oid": "fea10581c12c6523b2c92b053e7e25ac0932486d", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/fea10581c12c6523b2c92b053e7e25ac0932486d", "committedDate": "2020-11-09T20:47:45Z", "message": "refactoring to common code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2OTgzODQ0", "url": "https://github.com/quarkusio/quarkus/pull/11724#pullrequestreview-526983844", "createdAt": "2020-11-10T08:58:55Z", "commit": {"oid": "fea10581c12c6523b2c92b053e7e25ac0932486d"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODo1ODo1NVrOHwSTog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODo1ODo1NVrOHwSTog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5MzYzNA==", "bodyText": "This is still there, but we should remove it.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r520393634", "createdAt": "2020-11-10T08:58:55Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,10 @@\n             <groupId>org.ow2.asm</groupId>\n             <artifactId>asm</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.jetbrains.kotlin</groupId>\n+            <artifactId>kotlin-stdlib-jdk8</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fea10581c12c6523b2c92b053e7e25ac0932486d"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b7f0c397d064f6dd1ebd466179aa61d6a33a121", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/2b7f0c397d064f6dd1ebd466179aa61d6a33a121", "committedDate": "2020-11-10T18:01:29Z", "message": "refactoring to common code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0968f5bc24026a582684d3042112b9f20c439484", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/0968f5bc24026a582684d3042112b9f20c439484", "committedDate": "2020-11-10T14:53:31Z", "message": "move kotlin dep to compile scope"}, "afterCommit": {"oid": "2b7f0c397d064f6dd1ebd466179aa61d6a33a121", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/2b7f0c397d064f6dd1ebd466179aa61d6a33a121", "committedDate": "2020-11-10T18:01:29Z", "message": "refactoring to common code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MTU0OTM0", "url": "https://github.com/quarkusio/quarkus/pull/11724#pullrequestreview-529154934", "createdAt": "2020-11-12T14:43:33Z", "commit": {"oid": "2b7f0c397d064f6dd1ebd466179aa61d6a33a121"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 636, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}