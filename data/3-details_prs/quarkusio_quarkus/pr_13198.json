{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MDM0MzU3", "number": 13198, "title": "Expose metrics for kafka-streams with Micrometer", "bodyText": "Implementation for #13163\n\nUse the same configuration as for kafka clients (quarkus.micrometer.binder.kafka.enabled + class must be present)\nPublish KafkaStreamsMetrics (Micrometer binder) via CDI producer", "createdAt": "2020-11-09T20:56:10Z", "url": "https://github.com/quarkusio/quarkus/pull/13198", "merged": true, "mergeCommit": {"oid": "e2c51f677201800a63e30c3b20b1909dd9e13cf4"}, "closed": true, "closedAt": "2020-11-12T13:24:45Z", "author": {"login": "vonatzigenc"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABda9VM7AFqTUyNjcyNjMyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbnR2TgBqjM5ODYxOTU2MTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NzI2MzIz", "url": "https://github.com/quarkusio/quarkus/pull/13198#pullrequestreview-526726323", "createdAt": "2020-11-09T23:06:05Z", "commit": {"oid": "905140c6c1c16ba155c7202e870827f07c0aae76"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMzowNjowNVrOHwFJiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMzoyNjozM1rOHwFn4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3ODA1Nw==", "bodyText": "In thinking about this -- these (the new BooleanSupplier and BuildStep) can be placed into the existing Kafka processor to keep things together..", "url": "https://github.com/quarkusio/quarkus/pull/13198#discussion_r520178057", "createdAt": "2020-11-09T23:06:05Z", "author": {"login": "ebullient"}, "path": "extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/binder/KafkaStreamsBinderProcessor.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.quarkus.micrometer.deployment.binder;\n+\n+import java.util.function.BooleanSupplier;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.micrometer.runtime.MicrometerRecorder;\n+import io.quarkus.micrometer.runtime.config.MicrometerConfig;\n+\n+public class KafkaStreamsBinderProcessor {\n+\n+    static final String KAFKA_STREAMS_CLASS_NAME = \"org.apache.kafka.streams.KafkaStreams\";\n+    static final Class<?> KAFKA_STREAMS_CLASS_CLASS = MicrometerRecorder.getClassForName(KAFKA_STREAMS_CLASS_NAME);\n+\n+    static final String KAFKA_STREAMS_METRICS_PRODUCER_CLASS_NAME = \"io.quarkus.micrometer.runtime.binder.kafkastream.KafkaStreamsMetricsProducer\";\n+\n+    static class KafkaStreamsSupportEnabled implements BooleanSupplier {\n+        MicrometerConfig mConfig;\n+\n+        public boolean getAsBoolean() {\n+            return KAFKA_STREAMS_CLASS_CLASS != null && mConfig.checkBinderEnabledWithDefault(mConfig.binder.kafka);\n+        }\n+    }\n+\n+    @BuildStep(onlyIf = KafkaStreamsBinderProcessor.KafkaStreamsSupportEnabled.class)\n+    AdditionalBeanBuildItem createKafkaStreamsMetricsProducer() {\n+        return AdditionalBeanBuildItem.builder()\n+                .addBeanClass(KAFKA_STREAMS_METRICS_PRODUCER_CLASS_NAME)\n+                .setUnremovable().build();\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "905140c6c1c16ba155c7202e870827f07c0aae76"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3ODI0Ng==", "bodyText": "Thank you for the test! =)", "url": "https://github.com/quarkusio/quarkus/pull/13198#discussion_r520178246", "createdAt": "2020-11-09T23:06:36Z", "author": {"login": "ebullient"}, "path": "extensions/micrometer/deployment/src/test/java/io/quarkus/micrometer/deployment/binder/KafkaStreamsMetricsDisabledTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.micrometer.deployment.binder;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.micrometer.runtime.binder.kafkastream.KafkaStreamsMetricsProducer;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class KafkaStreamsMetricsDisabledTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withConfigurationResource(\"test-logging.properties\")\n+            .overrideConfigKey(\"quarkus.micrometer.binder.kafka.enabled\", \"true\")\n+            .overrideConfigKey(\"quarkus.micrometer.binder-enabled-default\", \"false\")\n+            .overrideConfigKey(\"quarkus.micrometer.registry-enabled-default\", \"false\")\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class));\n+\n+    @Inject\n+    Instance<KafkaStreamsMetricsProducer> instance;\n+\n+    @Test\n+    void testNoInstancePresentIfNoKafkaStreamsClass() {\n+        assertTrue(instance.isUnsatisfied(),\n+                \"No KafkaStreamsMetricsProducer expected, because we don't have dependency to kafka-streams\");\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "905140c6c1c16ba155c7202e870827f07c0aae76"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3OTI4NA==", "bodyText": "Again, torn here on the package. ;) Can we keep all things Kafka in one package? The class name is descriptive..", "url": "https://github.com/quarkusio/quarkus/pull/13198#discussion_r520179284", "createdAt": "2020-11-09T23:09:18Z", "author": {"login": "ebullient"}, "path": "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/kafkastream/KafkaStreamsMetricsProducer.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.quarkus.micrometer.runtime.binder.kafkastream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "905140c6c1c16ba155c7202e870827f07c0aae76"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4NTgyNA==", "bodyText": "@Startup is also unnecessary, because the producer will be driven by MeterBinder discovery (which is essentially at startup).\nI worry a little bit about initialization dependencies.. as resolving the MeterBinder (which is what will trigger this bean to be produced) then requires kafka streams to be started/resolved, which should be fine, but..\nI wonder if we should do something a little more like what the rest of Kafka metrics is doing, so that you have this @Startup bean which waits for KafkaStreams to be created / injected into the constructor..\nWhen that happens, it registers Kafka metrics with the global meter registry.\nAnd then the onStop method is unchanged?", "url": "https://github.com/quarkusio/quarkus/pull/13198#discussion_r520185824", "createdAt": "2020-11-09T23:26:33Z", "author": {"login": "ebullient"}, "path": "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/kafkastream/KafkaStreamsMetricsProducer.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.quarkus.micrometer.runtime.binder.kafkastream;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.apache.kafka.streams.KafkaStreams;\n+\n+import io.micrometer.core.instrument.binder.kafka.KafkaStreamsMetrics;\n+import io.quarkus.runtime.ShutdownEvent;\n+import io.quarkus.runtime.Startup;\n+\n+@ApplicationScoped\n+public class KafkaStreamsMetricsProducer {\n+\n+    KafkaStreamsMetrics kafkaStreamsMetrics;\n+\n+    @Inject\n+    public KafkaStreamsMetricsProducer(Instance<KafkaStreams> kafkaStreams) {\n+        if (!kafkaStreams.isUnsatisfied()) {\n+            kafkaStreamsMetrics = new KafkaStreamsMetrics(kafkaStreams.get());\n+        }\n+    }\n+\n+    @Produces\n+    @Singleton\n+    @Startup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "905140c6c1c16ba155c7202e870827f07c0aae76"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NjY5Mjky", "url": "https://github.com/quarkusio/quarkus/pull/13198#pullrequestreview-527669292", "createdAt": "2020-11-10T22:46:14Z", "commit": {"oid": "345e6070649d3a401c1819fef078b1194f7cb6bd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "345e6070649d3a401c1819fef078b1194f7cb6bd", "author": {"user": {"login": "vonatzigenc", "name": "Christian von Atzigen"}}, "url": "https://github.com/quarkusio/quarkus/commit/345e6070649d3a401c1819fef078b1194f7cb6bd", "committedDate": "2020-11-10T22:28:35Z", "message": "Merge branch 'master' into micrometer_support-kafka-streams"}, "afterCommit": {"oid": "1d392b5dfd222dd60cec0eb2d9a50a6ce7431aa7", "author": {"user": {"login": "vonatzigenc", "name": "Christian von Atzigen"}}, "url": "https://github.com/quarkusio/quarkus/commit/1d392b5dfd222dd60cec0eb2d9a50a6ce7431aa7", "committedDate": "2020-11-10T22:49:33Z", "message": "Add producer for KafkaStreamsMetrics\n\nSigned-off-by: Christian von Atzigen <christian.vonatzigen@mobi.ch>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDg5MjI5", "url": "https://github.com/quarkusio/quarkus/pull/13198#pullrequestreview-528489229", "createdAt": "2020-11-11T19:55:09Z", "commit": {"oid": "1d392b5dfd222dd60cec0eb2d9a50a6ce7431aa7"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTo1NToxMFrOHxcFsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDowMjoyMFrOHxcUWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMjQ4Mw==", "bodyText": "So a general question: do we want to have the knowledge about specific APIs like Kafka Streams within the Micrometer extension? I feel it might be better the other way around: pushing the registration of metrics into these modules themselves, as we do it also for Kafka Streams + Health. Not sure though whether there's anything speaking against this?", "url": "https://github.com/quarkusio/quarkus/pull/13198#discussion_r521602483", "createdAt": "2020-11-11T19:55:10Z", "author": {"login": "gunnarmorling"}, "path": "extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/binder/KafkaBinderProcessor.java", "diffHunk": "@@ -8,16 +8,21 @@\n import io.quarkus.micrometer.runtime.config.MicrometerConfig;\n \n /**\n- * Add support for Kafka Producer and Consumer instrumentation. Note that\n+ * Add support for Kafka Producer, Consumer and Streams instrumentation. Note that\n  * various bits of support may not be present at deploy time. Avoid referencing\n  * classes that in turn import optional dependencies.\n  */\n public class KafkaBinderProcessor {\n     static final String KAFKA_CONSUMER_CLASS_NAME = \"org.apache.kafka.clients.consumer.Consumer\";\n     static final Class<?> KAFKA_CONSUMER_CLASS_CLASS = MicrometerRecorder.getClassForName(KAFKA_CONSUMER_CLASS_NAME);\n \n+    static final String KAFKA_STREAMS_CLASS_NAME = \"org.apache.kafka.streams.KafkaStreams\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d392b5dfd222dd60cec0eb2d9a50a6ce7431aa7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMzc3OA==", "bodyText": "This comes back to my question above: can we invert that dependency possibly? I'm concerned we might end up with many deps in these modules like Metrics and Health to specific users, whereas turning it around would put all that component-specific knowledge into these extensions themselves.\nMight also be a question for a wider group to discuss.", "url": "https://github.com/quarkusio/quarkus/pull/13198#discussion_r521603778", "createdAt": "2020-11-11T19:57:39Z", "author": {"login": "gunnarmorling"}, "path": "extensions/micrometer/runtime/pom.xml", "diffHunk": "@@ -106,6 +106,11 @@\n             <artifactId>kafka-clients</artifactId>\n             <optional>true</optional>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d392b5dfd222dd60cec0eb2d9a50a6ce7431aa7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNDE0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This observer uses only classes from \"kafka-clients\" and none from \"kafka-streams\n          \n          \n            \n             * This observer uses only classes from \"kafka-clients\" and none from \"kafka-streams\".", "url": "https://github.com/quarkusio/quarkus/pull/13198#discussion_r521604147", "createdAt": "2020-11-11T19:58:24Z", "author": {"login": "gunnarmorling"}, "path": "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/kafka/KafkaEventObserver.java", "diffHunk": "@@ -13,7 +13,17 @@\n import io.micrometer.core.instrument.MeterRegistry;\n import io.micrometer.core.instrument.Metrics;\n import io.micrometer.core.instrument.binder.kafka.KafkaClientMetrics;\n+import io.quarkus.runtime.ShutdownEvent;\n \n+/**\n+ * Observer to create and register KafkaClientMetrics.\n+ *\n+ * This observer uses only classes from \"kafka-clients\" and none from \"kafka-streams", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d392b5dfd222dd60cec0eb2d9a50a6ce7431aa7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNDg1MA==", "bodyText": "Can be final?", "url": "https://github.com/quarkusio/quarkus/pull/13198#discussion_r521604850", "createdAt": "2020-11-11T19:59:43Z", "author": {"login": "gunnarmorling"}, "path": "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/kafka/KafkaStreamsEventObserver.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package io.quarkus.micrometer.runtime.binder.kafka;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+\n+import org.apache.kafka.streams.KafkaStreams;\n+import org.jboss.logging.Logger;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Metrics;\n+import io.micrometer.core.instrument.binder.kafka.KafkaStreamsMetrics;\n+import io.quarkus.runtime.ShutdownEvent;\n+\n+/**\n+ * Observer to create and register KafkaStreamsMetrics.\n+ * \n+ * Must be separated from KafkaEventObserver, because they use different dependencies and if only kafka-client is used, the\n+ * classes from kafka-streams aren't loaded.\n+ */\n+@ApplicationScoped\n+public class KafkaStreamsEventObserver {\n+\n+    private static final Logger log = Logger.getLogger(KafkaStreamsEventObserver.class);\n+    MeterRegistry registry = Metrics.globalRegistry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d392b5dfd222dd60cec0eb2d9a50a6ce7431aa7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNjIzMw==", "bodyText": "Why is kafkaStreamsMetrics a map? It seems we only ever put a single object into it? What is the purpose of this?", "url": "https://github.com/quarkusio/quarkus/pull/13198#discussion_r521606233", "createdAt": "2020-11-11T20:02:20Z", "author": {"login": "gunnarmorling"}, "path": "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/kafka/KafkaStreamsEventObserver.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package io.quarkus.micrometer.runtime.binder.kafka;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+\n+import org.apache.kafka.streams.KafkaStreams;\n+import org.jboss.logging.Logger;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Metrics;\n+import io.micrometer.core.instrument.binder.kafka.KafkaStreamsMetrics;\n+import io.quarkus.runtime.ShutdownEvent;\n+\n+/**\n+ * Observer to create and register KafkaStreamsMetrics.\n+ * \n+ * Must be separated from KafkaEventObserver, because they use different dependencies and if only kafka-client is used, the\n+ * classes from kafka-streams aren't loaded.\n+ */\n+@ApplicationScoped\n+public class KafkaStreamsEventObserver {\n+\n+    private static final Logger log = Logger.getLogger(KafkaStreamsEventObserver.class);\n+    MeterRegistry registry = Metrics.globalRegistry;\n+    Map<Object, KafkaStreamsMetrics> kafkaStreamsMetrics = new HashMap<>();\n+\n+    /**\n+     * Manage bind/close of KafkaStreamsMetrics for the specified KafkaStreams client.\n+     * If kafkaStreams has not been seen before, it will be bound to the\n+     * Micrometer registry and instrumented using a Kafka MeterBinder.\n+     * If the producer has been seen before, the MeterBinder will be closed.\n+     *\n+     * @param kafkaStreams Observed KafkaStreams instance\n+     */\n+    public synchronized void kafkaStreamsCreated(@Observes KafkaStreams kafkaStreams) {\n+        KafkaStreamsMetrics metrics = kafkaStreamsMetrics.remove(kafkaStreams);\n+        if (metrics == null) {\n+            metrics = new KafkaStreamsMetrics(kafkaStreams);\n+            try {\n+                metrics.bindTo(registry);\n+                kafkaStreamsMetrics.put(kafkaStreams, metrics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d392b5dfd222dd60cec0eb2d9a50a6ce7431aa7"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTM5Mjkz", "url": "https://github.com/quarkusio/quarkus/pull/13198#pullrequestreview-528539293", "createdAt": "2020-11-11T21:14:35Z", "commit": {"oid": "1d392b5dfd222dd60cec0eb2d9a50a6ce7431aa7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMToxNDozNVrOHxeiEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMToxNDozNVrOHxeiEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0MjUxNQ==", "bodyText": "Odd line break here.", "url": "https://github.com/quarkusio/quarkus/pull/13198#discussion_r521642515", "createdAt": "2020-11-11T21:14:35Z", "author": {"login": "gunnarmorling"}, "path": "extensions/micrometer/runtime/src/main/java/io/quarkus/micrometer/runtime/binder/kafka/KafkaEventObserver.java", "diffHunk": "@@ -13,7 +13,17 @@\n import io.micrometer.core.instrument.MeterRegistry;\n import io.micrometer.core.instrument.Metrics;\n import io.micrometer.core.instrument.binder.kafka.KafkaClientMetrics;\n+import io.quarkus.runtime.ShutdownEvent;\n \n+/**\n+ * Observer to create and register KafkaClientMetrics.\n+ *\n+ * This observer uses only classes from \"kafka-clients\" and none from \"kafka-streams\n+ *\n+ * Must be separated from KafkaStreamsEventObserver, because they use different dependencies and if only kafka-client is used,\n+ * the\n+ * classes from kafka-streams aren't loaded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d392b5dfd222dd60cec0eb2d9a50a6ce7431aa7"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTg1Njg5", "url": "https://github.com/quarkusio/quarkus/pull/13198#pullrequestreview-528585689", "createdAt": "2020-11-11T22:36:43Z", "commit": {"oid": "301b2274ec3ce2bc40d56533e0f9b17072c31d74"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "773210e8da602312184e598049c6fba8c6e0806e", "author": {"user": {"login": "vonatzigenc", "name": "Christian von Atzigen"}}, "url": "https://github.com/quarkusio/quarkus/commit/773210e8da602312184e598049c6fba8c6e0806e", "committedDate": "2020-11-12T00:16:10Z", "message": "Add producer for KafkaStreamsMetrics\n\nSigned-off-by: Christian von Atzigen <christian.vonatzigen@mobi.ch>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "301b2274ec3ce2bc40d56533e0f9b17072c31d74", "author": {"user": {"login": "vonatzigenc", "name": "Christian von Atzigen"}}, "url": "https://github.com/quarkusio/quarkus/commit/301b2274ec3ce2bc40d56533e0f9b17072c31d74", "committedDate": "2020-11-11T22:29:22Z", "message": "PR Feedback\n\nSigned-off-by: Christian von Atzigen <christian.vonatzigen@mobi.ch>"}, "afterCommit": {"oid": "773210e8da602312184e598049c6fba8c6e0806e", "author": {"user": {"login": "vonatzigenc", "name": "Christian von Atzigen"}}, "url": "https://github.com/quarkusio/quarkus/commit/773210e8da602312184e598049c6fba8c6e0806e", "committedDate": "2020-11-12T00:16:10Z", "message": "Add producer for KafkaStreamsMetrics\n\nSigned-off-by: Christian von Atzigen <christian.vonatzigen@mobi.ch>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1510, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}