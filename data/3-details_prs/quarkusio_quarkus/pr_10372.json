{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMDQ0MTY4", "number": 10372, "title": "Codestarts phase 1: Allow extensions to influence newly generated apps", "bodyText": "Part of #8134 and #8178\nThis code gives same level of functionalitty (even a bit more) as the current codegen using Codestarts and Qute\n\nDuring phase 1 (and until the api is more stable), all the codestarts are embeded in quarkus (and not yet part of extensions)\nGoal is to improve and validate the codestarts structure\ncodestarts are located in devtools/platform-descriptor-json/src/main/resources/bundled-codestarts (and codestarts)\nIt's possible to generate a set of Quarkus app (using the new codestarts) from CodestartProjectTest maven/gradle/kotlin/scala/java with or without example\nIt's also possible to try it with the mvn quarkus plugin:\n\nmvn io.quarkus:quarkus-maven-plugin:999-SNAPSHOT:create \\\n    -DprojectGroupId=org.acme \\\n    -DprojectArtifactId=my-first-codestart \\\n    -Dextensions=\"resteasy, resteasy-jsonb\" \\\n    -DplatformArtifactId=\"quarkus-bom\" -DplatformVersion=\"999-SNAPSHOT\" \\\n    -DcodestartsEnabled -DwithExampleCode\n\n\nHere is the doc: https://github.com/ia3andy/quarkus/blob/codestarts-v0/independent-projects/tools/codestarts/codestarts.adoc", "createdAt": "2020-06-30T13:49:59Z", "url": "https://github.com/quarkusio/quarkus/pull/10372", "merged": true, "mergeCommit": {"oid": "59043de089eea764a167d22f5439ee610c93e259"}, "closed": true, "closedAt": "2020-07-31T08:19:18Z", "author": {"login": "ia3andy"}, "timelineItems": {"totalCount": 93, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwWFFrgFqTQ0MDA0MjE0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6Nh7jgBqjM2MDY5NTY0NjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDQyMTQ3", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-440042147", "createdAt": "2020-06-30T13:57:54Z", "commit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1Nzo1NFrOGq9rBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1Nzo1NFrOGq9rBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMzgxMg==", "bodyText": "@aloubyansky \u2b06\ufe0f this is my dirty hack until we find a nicer solution", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447703812", "createdAt": "2020-06-30T13:57:54Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/platform-descriptor-resolver-json/src/main/java/io/quarkus/platform/descriptor/resolver/json/QuarkusJsonPlatformDescriptorResolver.java", "diffHunk": "@@ -451,10 +451,11 @@ private QuarkusPlatformDescriptor loadPlatformDescriptor(ArtifactResolver mvn, f\n         // check whether the quarkus-platform-descriptor-json used in the platform is already on the classpath\n         final String pomPropsPath = \"META-INF/maven/\" + ToolsConstants.IO_QUARKUS + \"/\" + QUARKUS_PLATFORM_DESCRIPTOR_JSON\n                 + \"/pom.properties\";\n-        final InputStream is = getCpResourceAsStream(pomPropsPath);\n-        if (is != null) {\n+        final URL url = Thread.currentThread().getContextClassLoader().getResource(pomPropsPath);\n+        // FIXME ia3andy temporary hack to work with jars\n+        if (url != null && !url.toString().startsWith(\"jar:\")) {\n             final Properties props = new Properties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDQyNDUx", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-440042451", "createdAt": "2020-06-30T13:58:12Z", "commit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1ODoxMlrOGq9r_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1ODoxMlrOGq9r_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwNDA2MA==", "bodyText": "What's the difference between them? I thought codestarts were example code?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447704060", "createdAt": "2020-06-30T13:58:12Z", "author": {"login": "gastaldi"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java", "diffHunk": "@@ -74,6 +74,12 @@\n     @Parameter(property = \"projectVersion\")\n     private String projectVersion;\n \n+    @Parameter(property = \"codestartsEnabled\")\n+    private Boolean codestartsEnabled;\n+\n+    @Parameter(property = \"withExampleCode\")\n+    private Boolean withExampleCode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDQzNDQ1", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-440043445", "createdAt": "2020-06-30T13:59:07Z", "commit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1OTowN1rOGq9u9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1OTowN1rOGq9u9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwNDgyMg==", "bodyText": "I am not sure why I renamed it, I will rename it back to the original name later", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447704822", "createdAt": "2020-06-30T13:59:07Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/codegen/buildtool/GradleGenerator.java", "diffHunk": "@@ -20,7 +20,7 @@\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Consumer;\n \n-public final class GradleBuildFilesCreator {\n+public final class GradleGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDQ4NDUw", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-440048450", "createdAt": "2020-06-30T14:04:02Z", "commit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowNDowMlrOGq99nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowNDowMlrOGq99nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODU3Mg==", "bodyText": "url may be null", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447708572", "createdAt": "2020-06-30T14:04:02Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/platform/descriptor/loader/json/ClassPathResourceLoader.java", "diffHunk": "@@ -16,6 +19,13 @@ public ClassPathResourceLoader(ClassLoader cl) {\n         this.cl = cl;\n     }\n \n+    @Override\n+    public <T> T loadResourcePath(String name, ResourcePathConsumer<T> consumer) throws IOException {\n+        final URL url = cl.getResource(name);\n+        final File file = ResourceLoaders.getResourceFile(url, name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDQ4NzU0", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-440048754", "createdAt": "2020-06-30T14:04:20Z", "commit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowNDoyMFrOGq9-dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowNDoyMFrOGq9-dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODc5MQ==", "bodyText": "This is strange. name should never be null or empty IMHO", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447708791", "createdAt": "2020-06-30T14:04:20Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/platform/descriptor/loader/json/DirectoryResourceLoader.java", "diffHunk": "@@ -18,16 +17,16 @@ public DirectoryResourceLoader(Path dir) {\n     }\n \n     @Override\n-    public <T> T loadResource(String name, ResourceInputStreamConsumer<T> consumer) throws IOException {\n-        Path resource = dir.resolve(name);\n-        if (!Files.exists(resource)) {\n-            throw new IOException(\"Failed to locate \" + resource);\n+    public <T> T loadResourcePath(String name, ResourcePathConsumer<T> consumer) throws IOException {\n+        Path path;\n+        if (name == null || name.isEmpty()) {\n+            path = dir;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDY2NzI1", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-440066725", "createdAt": "2020-06-30T14:21:49Z", "commit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoyMTo0OVrOGq-zBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoyMTo0OVrOGq-zBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyMjI0NA==", "bodyText": "This part is pretty \"raw\" for now and could be improved later for sure", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447722244", "createdAt": "2020-06-30T14:21:49Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/codegen/codestarts/CodestartProcessor.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package io.quarkus.devtools.project.codegen.codestarts;\n+\n+import static io.quarkus.devtools.project.codegen.codestarts.Codestart.BASE_LANGUAGE;\n+\n+import io.fabric8.maven.Maven;\n+import io.fabric8.maven.merge.SmartModelMerger;\n+import io.quarkus.platform.descriptor.QuarkusPlatformDescriptor;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import org.apache.maven.model.Model;\n+\n+final class CodestartProcessor {\n+\n+    private CodestartProcessor() {\n+    }\n+\n+    static void processCodestart(final QuarkusPlatformDescriptor descriptor, final Codestart codestart,\n+            final String languageName, final Path targetDirectory, final Map<String, Object> data) {\n+        try {\n+            descriptor.loadResourcePath(codestart.getResourceName(), p -> {\n+                resolveDirectoriesToProcessAsStream(p, languageName)\n+                        .forEach(dirPath -> processCodestartDir(languageName, dirPath, targetDirectory,\n+                                CodestartData.mergeData(codestart, languageName, data)));\n+                return null;\n+            });\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+\n+    }\n+\n+    static Stream<Path> resolveDirectoriesToProcessAsStream(final Path sourceDirectory, final String languageName)\n+            throws IOException {\n+        if (!Files.isDirectory(sourceDirectory)) {\n+            throw new IllegalStateException(\"Codestart sourceDirectory is not a directory: \" + sourceDirectory);\n+        }\n+        return Stream.of(BASE_LANGUAGE, languageName)\n+                .map(sourceDirectory::resolve)\n+                .filter(Files::isDirectory);\n+    }\n+\n+    static void processCodestartDir(final String languageName,\n+            final Path sourceDirectory,\n+            final Path targetProjectDirectory,\n+            final Map<String, Object> data) {\n+        try {\n+            Files.walk(sourceDirectory)\n+                    .filter(path -> !path.equals(sourceDirectory))\n+                    .forEach(path -> {\n+                        try {\n+                            final Path relativePath = sourceDirectory.relativize(path);\n+                            if (Files.isDirectory(path)) {\n+                                return;\n+                            } else {\n+                                final String fileName = relativePath.getFileName().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzgzMjQ3", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-440383247", "createdAt": "2020-06-30T21:02:30Z", "commit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTowMjozMFrOGrOWRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTowMjozMFrOGrOWRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzAyOQ==", "bodyText": "Is the test actually resolving the 1.5.2.Final platform descriptor?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r447977029", "createdAt": "2020-06-30T21:02:30Z", "author": {"login": "aloubyansky"}, "path": "integration-tests/devtools/src/test/java/io/quarkus/devtools/project/codegen/codestarts/CodestartProjectTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package io.quarkus.devtools.project.codegen.codestarts;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.devtools.PlatformAwareTestBase;\n+import io.quarkus.devtools.ProjectTestUtil;\n+\n+class CodestartProjectTest extends PlatformAwareTestBase {\n+\n+    private static final Path projectPath = Paths.get(\"target/codestarts-test\");\n+\n+    @BeforeAll\n+    static void setUp() throws IOException {\n+        ProjectTestUtil.delete(projectPath.toFile());\n+    }\n+\n+    private Map<String, Object> getTestInputData() {\n+        return getTestInputData(null);\n+    }\n+\n+    private Map<String, Object> getTestInputData(final Map<String, Object> override) {\n+        final HashMap<String, Object> data = new HashMap<>();\n+        data.put(\"project.version\", \"1.0.0-codestart\");\n+        data.put(\"quarkus.platform.group-id\", getPlatformDescriptor().getBomGroupId());\n+        data.put(\"quarkus.platform.artifact-id\", getPlatformDescriptor().getBomArtifactId());\n+        data.put(\"quarkus.platform.version\", \"1.5.2.Final\");\n+        data.put(\"quarkus.plugin.group-id\", \"io.quarkus\");\n+        data.put(\"quarkus.plugin.artifact-id\", \"quarkus-maven-plugin\");\n+        data.put(\"quarkus.plugin.version\", \"1.5.2.Final\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0dd36fa6b934ecf76ce28416f17029d073ce90ae", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/0dd36fa6b934ecf76ce28416f17029d073ce90ae", "committedDate": "2020-06-30T13:45:08Z", "message": "Codestarts phase 1 draft\n\nThis code gives same level of functionalitty (even a bit more) as the current codegen using Codestarts and Qute\n\n- Goal is to improve and validate the codestarts structure\n- There is no proper testing yet since I prefer to write them once we have discussed the structure\n- codestarts are located in devtools/platform-descriptor-json/src/main/resources/codestarts\n- It's possible to generate a set of Quarkus app (using the new codestarts) from `CodestartProjectTest` maven/gradle/kotlin/scala/java with or without example\n- It's also possible to try it with the mvn quarkus plugin:\n```\nmvn io.quarkus:quarkus-maven-plugin:999-SNAPSHOT:create \\\n    -DprojectGroupId=org.acme \\\n    -DprojectArtifactId=my-first-codestart \\\n    -Dextensions=\"resteasy, resteasy-jsonb\" \\\n    -DplatformArtifactId=\"quarkus-bom\" -DplatformVersion=\"999-SNAPSHOT\" \\\n    -DcodestartsEnabled -DwithExampleCode\n```\n\n- I will give a quick documentation to explain the codestart structure, but nothing to nice before we validate those concepts"}, "afterCommit": {"oid": "a752c4d930cec8af58a368935678989c1f7902f4", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/a752c4d930cec8af58a368935678989c1f7902f4", "committedDate": "2020-07-01T14:36:17Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a752c4d930cec8af58a368935678989c1f7902f4", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/a752c4d930cec8af58a368935678989c1f7902f4", "committedDate": "2020-07-01T14:36:17Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "fcb8f616eb6dfd78c5289ffe19c7817122588994", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/fcb8f616eb6dfd78c5289ffe19c7817122588994", "committedDate": "2020-07-07T10:31:27Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fcb8f616eb6dfd78c5289ffe19c7817122588994", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/fcb8f616eb6dfd78c5289ffe19c7817122588994", "committedDate": "2020-07-07T10:31:27Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "84ac8d8adb7255c32493076da7c9b2970f64526d", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/84ac8d8adb7255c32493076da7c9b2970f64526d", "committedDate": "2020-07-07T10:34:13Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84ac8d8adb7255c32493076da7c9b2970f64526d", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/84ac8d8adb7255c32493076da7c9b2970f64526d", "committedDate": "2020-07-07T10:34:13Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "a1bc06e7af310fa5b95a1dac9f4e7568b4713195", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/a1bc06e7af310fa5b95a1dac9f4e7568b4713195", "committedDate": "2020-07-07T10:50:09Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1bc06e7af310fa5b95a1dac9f4e7568b4713195", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/a1bc06e7af310fa5b95a1dac9f4e7568b4713195", "committedDate": "2020-07-07T10:50:09Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "bc973131fe41db98f2c5f8d7ddb5874fd97947e2", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/bc973131fe41db98f2c5f8d7ddb5874fd97947e2", "committedDate": "2020-07-07T11:44:07Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc973131fe41db98f2c5f8d7ddb5874fd97947e2", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/bc973131fe41db98f2c5f8d7ddb5874fd97947e2", "committedDate": "2020-07-07T11:44:07Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "2110687fbe29fc66303721629eefdf2bbb5fa5d8", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/2110687fbe29fc66303721629eefdf2bbb5fa5d8", "committedDate": "2020-07-07T11:48:34Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2110687fbe29fc66303721629eefdf2bbb5fa5d8", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/2110687fbe29fc66303721629eefdf2bbb5fa5d8", "committedDate": "2020-07-07T11:48:34Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "ba9039d9aafa0f73445f1c7e0294663fc28c4b45", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/ba9039d9aafa0f73445f1c7e0294663fc28c4b45", "committedDate": "2020-07-07T12:24:18Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba9039d9aafa0f73445f1c7e0294663fc28c4b45", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/ba9039d9aafa0f73445f1c7e0294663fc28c4b45", "committedDate": "2020-07-07T12:24:18Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "3ce4e803f3509b1095dffbfb2bc8ea270df9dd8c", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/3ce4e803f3509b1095dffbfb2bc8ea270df9dd8c", "committedDate": "2020-07-07T12:28:29Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ce4e803f3509b1095dffbfb2bc8ea270df9dd8c", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/3ce4e803f3509b1095dffbfb2bc8ea270df9dd8c", "committedDate": "2020-07-07T12:28:29Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "b5b0e7a02e93e00facb0cef751135fcbe443e43c", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/b5b0e7a02e93e00facb0cef751135fcbe443e43c", "committedDate": "2020-07-07T13:31:47Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5b0e7a02e93e00facb0cef751135fcbe443e43c", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/b5b0e7a02e93e00facb0cef751135fcbe443e43c", "committedDate": "2020-07-07T13:31:47Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "67cf27a0ea34c5fa0d879ee42415121bb7398f3f", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/67cf27a0ea34c5fa0d879ee42415121bb7398f3f", "committedDate": "2020-07-07T14:22:59Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67cf27a0ea34c5fa0d879ee42415121bb7398f3f", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/67cf27a0ea34c5fa0d879ee42415121bb7398f3f", "committedDate": "2020-07-07T14:22:59Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "c09c6e1d61b5119164da96a7d4da89f4d7973dcf", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/c09c6e1d61b5119164da96a7d4da89f4d7973dcf", "committedDate": "2020-07-07T14:39:22Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c09c6e1d61b5119164da96a7d4da89f4d7973dcf", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/c09c6e1d61b5119164da96a7d4da89f4d7973dcf", "committedDate": "2020-07-07T14:39:22Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "6846309c87f1499762a1165be2aff0e1c6235ca2", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/6846309c87f1499762a1165be2aff0e1c6235ca2", "committedDate": "2020-07-07T14:40:45Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6846309c87f1499762a1165be2aff0e1c6235ca2", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/6846309c87f1499762a1165be2aff0e1c6235ca2", "committedDate": "2020-07-07T14:40:45Z", "message": "Solve ClassPathResourceLoader issue with jar\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "58b87282b74ffda79a46758f0e3b46b222476ad6", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/58b87282b74ffda79a46758f0e3b46b222476ad6", "committedDate": "2020-07-09T09:45:27Z", "message": "Handle YAML/Properties config and add optaplanner-example"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58b87282b74ffda79a46758f0e3b46b222476ad6", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/58b87282b74ffda79a46758f0e3b46b222476ad6", "committedDate": "2020-07-09T09:45:27Z", "message": "Handle YAML/Properties config and add optaplanner-example"}, "afterCommit": {"oid": "4a3265268139e58ae90f01ee5d9ca51c4092876a", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/4a3265268139e58ae90f01ee5d9ca51c4092876a", "committedDate": "2020-07-09T09:52:56Z", "message": "Handle YAML/Properties config and add optaplanner-example"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a3265268139e58ae90f01ee5d9ca51c4092876a", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/4a3265268139e58ae90f01ee5d9ca51c4092876a", "committedDate": "2020-07-09T09:52:56Z", "message": "Handle YAML/Properties config and add optaplanner-example"}, "afterCommit": {"oid": "de79dfa591ace663bc02708f0dd822e843d5c17f", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/de79dfa591ace663bc02708f0dd822e843d5c17f", "committedDate": "2020-07-09T09:55:40Z", "message": "Handle YAML/Properties config and add optaplanner-example"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de79dfa591ace663bc02708f0dd822e843d5c17f", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/de79dfa591ace663bc02708f0dd822e843d5c17f", "committedDate": "2020-07-09T09:55:40Z", "message": "Handle YAML/Properties config and add optaplanner-example"}, "afterCommit": {"oid": "02de3f5385717305e3f5c300a126ba83c870297c", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/02de3f5385717305e3f5c300a126ba83c870297c", "committedDate": "2020-07-09T15:23:53Z", "message": "Handle YAML/Properties config and add optaplanner-example"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02de3f5385717305e3f5c300a126ba83c870297c", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/02de3f5385717305e3f5c300a126ba83c870297c", "committedDate": "2020-07-09T15:23:53Z", "message": "Handle YAML/Properties config and add optaplanner-example"}, "afterCommit": {"oid": "4ca940b353f04456b408096fce0ab4c86c1cb10f", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/4ca940b353f04456b408096fce0ab4c86c1cb10f", "committedDate": "2020-07-09T15:33:39Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ca940b353f04456b408096fce0ab4c86c1cb10f", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/4ca940b353f04456b408096fce0ab4c86c1cb10f", "committedDate": "2020-07-09T15:33:39Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "de02d88276908c4c20c6a3467d06e3086c07696e", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/de02d88276908c4c20c6a3467d06e3086c07696e", "committedDate": "2020-07-10T10:50:36Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de02d88276908c4c20c6a3467d06e3086c07696e", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/de02d88276908c4c20c6a3467d06e3086c07696e", "committedDate": "2020-07-10T10:50:36Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "6d6e76a36ab94c90db49ef793919cba6e202a8d7", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/6d6e76a36ab94c90db49ef793919cba6e202a8d7", "committedDate": "2020-07-10T10:59:51Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d6e76a36ab94c90db49ef793919cba6e202a8d7", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/6d6e76a36ab94c90db49ef793919cba6e202a8d7", "committedDate": "2020-07-10T10:59:51Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}, "afterCommit": {"oid": "175f4461664d15b5758f5a5f45a1a62cb6e399f3", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/175f4461664d15b5758f5a5f45a1a62cb6e399f3", "committedDate": "2020-07-10T11:01:06Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e1eb22edac75a9ccef3f82101abbe23ff77b3e7", "author": {"user": {"login": "paulrobinson", "name": "Paul Robinson"}}, "url": "https://github.com/quarkusio/quarkus/commit/7e1eb22edac75a9ccef3f82101abbe23ff77b3e7", "committedDate": "2020-07-10T12:03:27Z", "message": "Various tidy ups"}, "afterCommit": {"oid": "bceb563b0a1fae8d56435aa2c27a1572382902ba", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/bceb563b0a1fae8d56435aa2c27a1572382902ba", "committedDate": "2020-07-10T14:43:01Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bceb563b0a1fae8d56435aa2c27a1572382902ba", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/bceb563b0a1fae8d56435aa2c27a1572382902ba", "committedDate": "2020-07-10T14:43:01Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests"}, "afterCommit": {"oid": "8779eecdd20ee8775e5559a44314636f09cd35bd", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/8779eecdd20ee8775e5559a44314636f09cd35bd", "committedDate": "2020-07-20T08:10:15Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8779eecdd20ee8775e5559a44314636f09cd35bd", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/8779eecdd20ee8775e5559a44314636f09cd35bd", "committedDate": "2020-07-20T08:10:15Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests"}, "afterCommit": {"oid": "159a4ed38e7aaad4048cc5cfdba942b44f0c2662", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/159a4ed38e7aaad4048cc5cfdba942b44f0c2662", "committedDate": "2020-07-21T15:32:52Z", "message": "Use descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "159a4ed38e7aaad4048cc5cfdba942b44f0c2662", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/159a4ed38e7aaad4048cc5cfdba942b44f0c2662", "committedDate": "2020-07-21T15:32:52Z", "message": "Use descriptive processors for codestarts"}, "afterCommit": {"oid": "b9075aef8ca49612fe2b022844fcdc3cc9e76f11", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/b9075aef8ca49612fe2b022844fcdc3cc9e76f11", "committedDate": "2020-07-22T12:39:00Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9075aef8ca49612fe2b022844fcdc3cc9e76f11", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/b9075aef8ca49612fe2b022844fcdc3cc9e76f11", "committedDate": "2020-07-22T12:39:00Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "ba5bbd61e9159fb45dd09f33119fec3c433bba3f", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/ba5bbd61e9159fb45dd09f33119fec3c433bba3f", "committedDate": "2020-07-22T14:11:01Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba5bbd61e9159fb45dd09f33119fec3c433bba3f", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/ba5bbd61e9159fb45dd09f33119fec3c433bba3f", "committedDate": "2020-07-22T14:11:01Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "75078e95780201356ccf19f7d4dce7dde0b72817", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/75078e95780201356ccf19f7d4dce7dde0b72817", "committedDate": "2020-07-24T16:04:36Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75078e95780201356ccf19f7d4dce7dde0b72817", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/75078e95780201356ccf19f7d4dce7dde0b72817", "committedDate": "2020-07-24T16:04:36Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "72a5351c3a26a066a81d0ce3bea5624707f40b2a", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/72a5351c3a26a066a81d0ce3bea5624707f40b2a", "committedDate": "2020-07-28T14:43:29Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72a5351c3a26a066a81d0ce3bea5624707f40b2a", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/72a5351c3a26a066a81d0ce3bea5624707f40b2a", "committedDate": "2020-07-28T14:43:29Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "9a6a30f3e4b8d8bc7fabe3a1cab997557125f703", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/9a6a30f3e4b8d8bc7fabe3a1cab997557125f703", "committedDate": "2020-07-28T15:12:04Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a6a30f3e4b8d8bc7fabe3a1cab997557125f703", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/9a6a30f3e4b8d8bc7fabe3a1cab997557125f703", "committedDate": "2020-07-28T15:12:04Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "795089f7423d690120576b2333f38a9e20fa30dd", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/795089f7423d690120576b2333f38a9e20fa30dd", "committedDate": "2020-07-28T15:14:26Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "795089f7423d690120576b2333f38a9e20fa30dd", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/795089f7423d690120576b2333f38a9e20fa30dd", "committedDate": "2020-07-28T15:14:26Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "0c4fa42540357982f8ca3c863f72347add249524", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/0c4fa42540357982f8ca3c863f72347add249524", "committedDate": "2020-07-28T15:25:47Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c4fa42540357982f8ca3c863f72347add249524", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/0c4fa42540357982f8ca3c863f72347add249524", "committedDate": "2020-07-28T15:25:47Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "abf7fd83c8cd746924757e480a1bb33900c9f2b9", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/abf7fd83c8cd746924757e480a1bb33900c9f2b9", "committedDate": "2020-07-28T15:27:29Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abf7fd83c8cd746924757e480a1bb33900c9f2b9", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/abf7fd83c8cd746924757e480a1bb33900c9f2b9", "committedDate": "2020-07-28T15:27:29Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "1bc20d90a3537ee029b9e3419de5e276718a08eb", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/1bc20d90a3537ee029b9e3419de5e276718a08eb", "committedDate": "2020-07-28T15:34:29Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1bc20d90a3537ee029b9e3419de5e276718a08eb", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/1bc20d90a3537ee029b9e3419de5e276718a08eb", "committedDate": "2020-07-28T15:34:29Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "f70b7516ae11fc44363225d506637cd25d6f6862", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/f70b7516ae11fc44363225d506637cd25d6f6862", "committedDate": "2020-07-28T15:44:55Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f70b7516ae11fc44363225d506637cd25d6f6862", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/f70b7516ae11fc44363225d506637cd25d6f6862", "committedDate": "2020-07-28T15:44:55Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/88efcc09a2a93208fb603565c5030273727f20cc", "committedDate": "2020-07-29T07:16:45Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MjczNzk0", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457273794", "createdAt": "2020-07-29T07:46:52Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzo0Njo1MlrOG4snzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzo0Njo1MlrOG4snzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwNDUyNQ==", "bodyText": "targeted java version should be a parameter imo (like pass \"javaTarget\" in as major version number and then each template adds what they need for it). (same for all templates below)", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462104525", "createdAt": "2020-07-29T07:46:52Z", "author": {"login": "maxandersen"}, "path": "devtools/platform-descriptor-json/src/main/resources/bundled-codestarts/buildtool/gradle/kotlin/build.tpl.qute.gradle", "diffHunk": "@@ -0,0 +1,32 @@\n+{#include build-layout}\n+{#plugins}\n+plugins {\n+    id 'org.jetbrains.kotlin.jvm' version \"{version.kotlin}\"\n+    id \"org.jetbrains.kotlin.plugin.allopen\" version \"{version.kotlin}\"\n+    id '{quarkus.plugin.id}'\n+}\n+{/plugins}\n+{/include}\n+\n+quarkus {\n+    setOutputDirectory(\"$projectDir/build/classes/kotlin/main\")\n+}\n+\n+quarkusDev {\n+    setSourceDir(\"$projectDir/src/main/kotlin\")\n+}\n+\n+allOpen {\n+    annotation(\"javax.ws.rs.Path\")\n+    annotation(\"javax.enterprise.context.ApplicationScoped\")\n+    annotation(\"io.quarkus.test.junit.QuarkusTest\")\n+}\n+\n+compileKotlin {\n+    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3Mjc1MzMw", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457275330", "createdAt": "2020-07-29T07:49:13Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzo0OToxNFrOG4ssmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzo0OToxNFrOG4ssmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwNTc1NQ==", "bodyText": "should this not be defined in base test-depends meta rather than in the template ?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462105755", "createdAt": "2020-07-29T07:49:14Z", "author": {"login": "maxandersen"}, "path": "devtools/platform-descriptor-json/src/main/resources/bundled-codestarts/buildtool/maven/base/pom.tpl.qute.xml", "diffHunk": "@@ -12,52 +12,62 @@\n         <maven.compiler.target>1.8</maven.compiler.target>\n         <maven.compiler.parameters>true</maven.compiler.parameters>\n \n-        <quarkus.platform.artifact-id>${bom_artifactId}</quarkus.platform.artifact-id>\n-        <quarkus.platform.group-id>${bom_groupId}</quarkus.platform.group-id>\n-        <quarkus.platform.version>${bom_version}</quarkus.platform.version>\n-        <quarkus-plugin.version>${plugin_version}</quarkus-plugin.version>\n-        <compiler-plugin.version>${compiler_plugin_version}</compiler-plugin.version>\n-        <surefire-plugin.version>${surefire_plugin_version}</surefire-plugin.version>\n+        <quarkus.platform.group-id>{quarkus.platform.group-id}</quarkus.platform.group-id>\n+        <quarkus.platform.artifact-id>{quarkus.platform.artifact-id}</quarkus.platform.artifact-id>\n+        <quarkus.platform.version>{quarkus.platform.version}</quarkus.platform.version>\n+        <quarkus-plugin.version>{quarkus.plugin.version}</quarkus-plugin.version>\n+        <compiler-plugin.version>{maven.version.maven-compiler-plugin}</compiler-plugin.version>\n+        <surefire-plugin.version>{maven.version.maven-surefire-plugin}</surefire-plugin.version>\n     </properties>\n-    ${maven_repositories}${maven_plugin_repositories}\n+\n     <dependencyManagement>\n         <dependencies>\n             <dependency>\n-                <groupId>${quarkus.platform.group-id}</groupId>\n-                <artifactId>${quarkus.platform.artifact-id}</artifactId>\n-                <version>${quarkus.platform.version}</version>\n+                <groupId>$\\{quarkus.platform.group-id}</groupId>\n+                <artifactId>$\\{quarkus.platform.artifact-id}</artifactId>\n+                <version>$\\{quarkus.platform.version}</version>\n                 <type>pom</type>\n                 <scope>import</scope>\n             </dependency>\n         </dependencies>\n     </dependencyManagement>\n \n     <dependencies>\n+        {#each dependencies}\n         <dependency>\n-            <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-resteasy</artifactId>\n+            <groupId>{it.groupId}</groupId>\n+            <artifactId>{it.artifactId}</artifactId>\n+            {#if it.version}\n+            <version>{it.version}</version>\n+            {/if}\n         </dependency>\n+        {/each}\n \n         <!-- Test dependencies -->\n         <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MjgxODI5", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457281829", "createdAt": "2020-07-29T07:58:24Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzo1ODoyNFrOG4tA8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzo1ODoyNFrOG4tA8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExMDk2MQ==", "bodyText": "funny :)", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462110961", "createdAt": "2020-07-29T07:58:24Z", "author": {"login": "maxandersen"}, "path": "devtools/platform-descriptor-json/src/main/resources/bundled-codestarts/example/commandmode-example/codestart.yml", "diffHunk": "@@ -0,0 +1,14 @@\n+---\n+name: commandmode-example\n+ref: commandmode\n+type: example\n+fallback: true\n+missing-languages:\n+  - kotlin\n+  - scala\n+language:\n+  base:\n+    data:\n+      greeting:\n+        message: \"hello\"\n+        default-name: \"commando\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MjkxMjIw", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457291220", "createdAt": "2020-07-29T08:11:45Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoxMTo0NVrOG4teNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoxMTo0NVrOG4teNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExODQ1Mw==", "bodyText": "shouldn't this file and whole optaplanner example be pushed into optaplanner extension rather than in the bunlded/platform level  descriptors ?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462118453", "createdAt": "2020-07-29T08:11:45Z", "author": {"login": "maxandersen"}, "path": "devtools/platform-descriptor-json/src/main/resources/codestarts/optaplanner-example/java/src/main/java/org/acme/optaplanner/bootstrap/DemoDataGenerator.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.acme.optaplanner.bootstrap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzAzMjg3", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457303287", "createdAt": "2020-07-29T08:27:21Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoyNzoyMVrOG4uD9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoyNzoyMVrOG4uD9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEyODExOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n          \n          \n            \n            A Quarkus extension are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using that particular extension.", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462128118", "createdAt": "2020-07-29T08:27:21Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzA0MTEw", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457304110", "createdAt": "2020-07-29T08:28:21Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoyODoyMVrOG4uGiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoyODoyMVrOG4uGiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEyODc3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n          \n          \n            \n            There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for the base project (called Base) and the rest (called Extra).\n          \n      \n    \n    \n  \n\naren't they actually called 'base' and 'extra' no capitalization?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462128779", "createdAt": "2020-07-29T08:28:21Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzA0NjUz", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457304653", "createdAt": "2020-07-29T08:28:58Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoyODo1OFrOG4uIGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoyODo1OFrOG4uIGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEyOTE3Nw==", "bodyText": "add example name?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462129177", "createdAt": "2020-07-29T08:28:58Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzA1MTkx", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457305191", "createdAt": "2020-07-29T08:29:37Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoyOTozN1rOG4uJ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoyOTozN1rOG4uJ3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEyOTYzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . Optionally some templates which follow a structure and naming conventions\n          \n          \n            \n            . Optionally some templates which following a common structure and naming conventions", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462129630", "createdAt": "2020-07-29T08:29:37Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory\n+. A `codestart.yml` file\n+. Optionally some templates which follow a structure and naming conventions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzA1NDcw", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457305470", "createdAt": "2020-07-29T08:29:58Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoyOTo1OFrOG4uKwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoyOTo1OFrOG4uKwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEyOTg1Nw==", "bodyText": "which input ?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462129857", "createdAt": "2020-07-29T08:29:58Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory\n+. A `codestart.yml` file\n+. Optionally some templates which follow a structure and naming conventions\n+\n+*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+\n+=== Project generation\n+\n+When generating a Quarkus project:\n+\n+. Codestarts to use are resolved depending on the input", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzA1OTMx", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457305931", "createdAt": "2020-07-29T08:30:32Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozMDozMlrOG4uMUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozMDozMlrOG4uMUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzMDI1OA==", "bodyText": "\"shared data from its codestarts.yml\" ?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462130258", "createdAt": "2020-07-29T08:30:32Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory\n+. A `codestart.yml` file\n+. Optionally some templates which follow a structure and naming conventions\n+\n+*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+\n+=== Project generation\n+\n+When generating a Quarkus project:\n+\n+. Codestarts to use are resolved depending on the input\n+. The Codestarts' shared data is processed to make it available for all codestarts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzA2NDc5", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457306479", "createdAt": "2020-07-29T08:31:16Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozMToxNlrOG4uOJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozMToxNlrOG4uOJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzMDcyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ** The files are processed differently based on a naming convention.\n          \n          \n            \n            ** The files are processed based on a naming convention, i.e <give example>.", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462130727", "createdAt": "2020-07-29T08:31:16Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory\n+. A `codestart.yml` file\n+. Optionally some templates which follow a structure and naming conventions\n+\n+*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+\n+=== Project generation\n+\n+When generating a Quarkus project:\n+\n+. Codestarts to use are resolved depending on the input\n+. The Codestarts' shared data is processed to make it available for all codestarts\n+. The relevant files are processed:\n+** Only the files that are related to the selected language are processed\n+** The files are processed differently based on a naming convention.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzA2ODA0", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457306804", "createdAt": "2020-07-29T08:31:40Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozMTo0MVrOG4uPfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozMTo0MVrOG4uPfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzMTA2OA==", "bodyText": "make it an actual list?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462131068", "createdAt": "2020-07-29T08:31:41Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory\n+. A `codestart.yml` file\n+. Optionally some templates which follow a structure and naming conventions\n+\n+*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+\n+=== Project generation\n+\n+When generating a Quarkus project:\n+\n+. Codestarts to use are resolved depending on the input\n+. The Codestarts' shared data is processed to make it available for all codestarts\n+. The relevant files are processed:\n+** Only the files that are related to the selected language are processed\n+** The files are processed differently based on a naming convention.\n+** The data is used to render Qute templates\n+** We always process in this order: language, project, buildtool, config, custom, other.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzA5Nzkw", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457309790", "createdAt": "2020-07-29T08:35:40Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozNTo0MFrOG4uZJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozNTo0MFrOG4uZJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzMzU0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            === Files Naming Convention\n          \n          \n            \n            === Naming Convention for files", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462133540", "createdAt": "2020-07-29T08:35:40Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory\n+. A `codestart.yml` file\n+. Optionally some templates which follow a structure and naming conventions\n+\n+*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+\n+=== Project generation\n+\n+When generating a Quarkus project:\n+\n+. Codestarts to use are resolved depending on the input\n+. The Codestarts' shared data is processed to make it available for all codestarts\n+. The relevant files are processed:\n+** Only the files that are related to the selected language are processed\n+** The files are processed differently based on a naming convention.\n+** The data is used to render Qute templates\n+** We always process in this order: language, project, buildtool, config, custom, other.\n+\n+The data used to generate a specific codestart is a merge of:\n+\n+. The data of the codestart to generate\n+. All codestarts \"shared\" data\n+. The user input\n+. Some specific post processing (e.g. adding dependencies)\n+\n+*NOTE* The data (shared or not) can also be specific to a language.\n+\n+=== Directory Structure\n+\n+*NOTE* `codestart.yml` is the only required file.\n+\n+* `codestart.yml` must be at the root of the codestart\n+* `./base` contains all the files that will be processed\n+* `./[languageName]` contains all the files that will be processed if the specified language has been selected (overriding base)\n+\n+=== codestart.yml\n+\n+codestart.yml:\n+[source,yaml]\n+----\n+name: the unique name - REQUIRED\n+ref: the reference name (not unique) to use for extension matching (else the name is used)\n+type: the type [example (default), project, buildtool, language, config] or any custom type\n+fallback: flag to indicate that it should be selected as fallback when no codestart has been selected with type - Only for base types\n+preselected: flag to indicate that it should be pre-selected - Only for extra types.\n+spec:\n+  [base or language name]: the specification (base, java, ...)\n+    data: a map of data to use only for this codestart\n+    shared-data: a map of data to use accross all codestarts\n+    dependencies: a list of dependencies to add when this is selected\n+    test-dependencies: a list of test dependencies to add when this is selected\n+----\n+\n+=== Files Naming Convention", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzEwMDc4", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457310078", "createdAt": "2020-07-29T08:36:04Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozNjowNFrOG4uaGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozNjowNFrOG4uaGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzMzc4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * containing `.tpl.qute` will be processed with Qute (`.tpl.qute` will be removed from the output file name).\n          \n          \n            \n            * `.tpl.qute` will be processed with Qute (`.tpl.qute` will be removed from the output file name).", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462133784", "createdAt": "2020-07-29T08:36:04Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory\n+. A `codestart.yml` file\n+. Optionally some templates which follow a structure and naming conventions\n+\n+*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+\n+=== Project generation\n+\n+When generating a Quarkus project:\n+\n+. Codestarts to use are resolved depending on the input\n+. The Codestarts' shared data is processed to make it available for all codestarts\n+. The relevant files are processed:\n+** Only the files that are related to the selected language are processed\n+** The files are processed differently based on a naming convention.\n+** The data is used to render Qute templates\n+** We always process in this order: language, project, buildtool, config, custom, other.\n+\n+The data used to generate a specific codestart is a merge of:\n+\n+. The data of the codestart to generate\n+. All codestarts \"shared\" data\n+. The user input\n+. Some specific post processing (e.g. adding dependencies)\n+\n+*NOTE* The data (shared or not) can also be specific to a language.\n+\n+=== Directory Structure\n+\n+*NOTE* `codestart.yml` is the only required file.\n+\n+* `codestart.yml` must be at the root of the codestart\n+* `./base` contains all the files that will be processed\n+* `./[languageName]` contains all the files that will be processed if the specified language has been selected (overriding base)\n+\n+=== codestart.yml\n+\n+codestart.yml:\n+[source,yaml]\n+----\n+name: the unique name - REQUIRED\n+ref: the reference name (not unique) to use for extension matching (else the name is used)\n+type: the type [example (default), project, buildtool, language, config] or any custom type\n+fallback: flag to indicate that it should be selected as fallback when no codestart has been selected with type - Only for base types\n+preselected: flag to indicate that it should be pre-selected - Only for extra types.\n+spec:\n+  [base or language name]: the specification (base, java, ...)\n+    data: a map of data to use only for this codestart\n+    shared-data: a map of data to use accross all codestarts\n+    dependencies: a list of dependencies to add when this is selected\n+    test-dependencies: a list of test dependencies to add when this is selected\n+----\n+\n+=== Files Naming Convention\n+\n+* containing `.tpl.qute` will be processed with Qute (`.tpl.qute` will be removed from the output file name).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzEwNjM1", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457310635", "createdAt": "2020-07-29T08:36:52Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozNjo1MlrOG4ub0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozNjo1MlrOG4ub0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzNDIyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * containing `.include.qute` is used as a Qute template for inclusion (only available locally to the codestart).\n          \n          \n            \n            * `.include.qute` is used as a Qute template for inclusion (only available to the codestart, not listed in the generated project ).", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462134226", "createdAt": "2020-07-29T08:36:52Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory\n+. A `codestart.yml` file\n+. Optionally some templates which follow a structure and naming conventions\n+\n+*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+\n+=== Project generation\n+\n+When generating a Quarkus project:\n+\n+. Codestarts to use are resolved depending on the input\n+. The Codestarts' shared data is processed to make it available for all codestarts\n+. The relevant files are processed:\n+** Only the files that are related to the selected language are processed\n+** The files are processed differently based on a naming convention.\n+** The data is used to render Qute templates\n+** We always process in this order: language, project, buildtool, config, custom, other.\n+\n+The data used to generate a specific codestart is a merge of:\n+\n+. The data of the codestart to generate\n+. All codestarts \"shared\" data\n+. The user input\n+. Some specific post processing (e.g. adding dependencies)\n+\n+*NOTE* The data (shared or not) can also be specific to a language.\n+\n+=== Directory Structure\n+\n+*NOTE* `codestart.yml` is the only required file.\n+\n+* `codestart.yml` must be at the root of the codestart\n+* `./base` contains all the files that will be processed\n+* `./[languageName]` contains all the files that will be processed if the specified language has been selected (overriding base)\n+\n+=== codestart.yml\n+\n+codestart.yml:\n+[source,yaml]\n+----\n+name: the unique name - REQUIRED\n+ref: the reference name (not unique) to use for extension matching (else the name is used)\n+type: the type [example (default), project, buildtool, language, config] or any custom type\n+fallback: flag to indicate that it should be selected as fallback when no codestart has been selected with type - Only for base types\n+preselected: flag to indicate that it should be pre-selected - Only for extra types.\n+spec:\n+  [base or language name]: the specification (base, java, ...)\n+    data: a map of data to use only for this codestart\n+    shared-data: a map of data to use accross all codestarts\n+    dependencies: a list of dependencies to add when this is selected\n+    test-dependencies: a list of test dependencies to add when this is selected\n+----\n+\n+=== Files Naming Convention\n+\n+* containing `.tpl.qute` will be processed with Qute (`.tpl.qute` will be removed from the output file name).\n+* containing `.include.qute` is used as a Qute template for inclusion (only available locally to the codestart).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzE0NDQ3", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457314447", "createdAt": "2020-07-29T08:42:04Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0MjowNFrOG4unDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0MjowNFrOG4unDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzNzEwMg==", "bodyText": "forbidden..why ?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462137102", "createdAt": "2020-07-29T08:42:04Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory\n+. A `codestart.yml` file\n+. Optionally some templates which follow a structure and naming conventions\n+\n+*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+\n+=== Project generation\n+\n+When generating a Quarkus project:\n+\n+. Codestarts to use are resolved depending on the input\n+. The Codestarts' shared data is processed to make it available for all codestarts\n+. The relevant files are processed:\n+** Only the files that are related to the selected language are processed\n+** The files are processed differently based on a naming convention.\n+** The data is used to render Qute templates\n+** We always process in this order: language, project, buildtool, config, custom, other.\n+\n+The data used to generate a specific codestart is a merge of:\n+\n+. The data of the codestart to generate\n+. All codestarts \"shared\" data\n+. The user input\n+. Some specific post processing (e.g. adding dependencies)\n+\n+*NOTE* The data (shared or not) can also be specific to a language.\n+\n+=== Directory Structure\n+\n+*NOTE* `codestart.yml` is the only required file.\n+\n+* `codestart.yml` must be at the root of the codestart\n+* `./base` contains all the files that will be processed\n+* `./[languageName]` contains all the files that will be processed if the specified language has been selected (overriding base)\n+\n+=== codestart.yml\n+\n+codestart.yml:\n+[source,yaml]\n+----\n+name: the unique name - REQUIRED\n+ref: the reference name (not unique) to use for extension matching (else the name is used)\n+type: the type [example (default), project, buildtool, language, config] or any custom type\n+fallback: flag to indicate that it should be selected as fallback when no codestart has been selected with type - Only for base types\n+preselected: flag to indicate that it should be pre-selected - Only for extra types.\n+spec:\n+  [base or language name]: the specification (base, java, ...)\n+    data: a map of data to use only for this codestart\n+    shared-data: a map of data to use accross all codestarts\n+    dependencies: a list of dependencies to add when this is selected\n+    test-dependencies: a list of test dependencies to add when this is selected\n+----\n+\n+=== Files Naming Convention\n+\n+* containing `.tpl.qute` will be processed with Qute (`.tpl.qute` will be removed from the output file name).\n+* containing `.include.qute` is used as a Qute template for inclusion (only available locally to the codestart).\n+\n+  Example: When using `{#include [name]}` in a template, it will look for `[name].include.qute` in the language dir, then in the base dir or the codestart.\n+\n+* an output strategy can be defined for specific files, it defines some specific logic on how to deal with those files.\n+\n+ Example: in the Quarkus project `codestart.yml`:\n+[source,yaml]\n+----\n+output-strategy:\n+  \"pom.xml\": smart-pom-merge # smartly merge pom.xml contents together\n+  \"README.md\": append # they are appended together\n+  \"readme.md\": forbidden # it will fail if found in any codestart\n+  \"README.adoc\": forbidden", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzE1MzA1", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457315305", "createdAt": "2020-07-29T08:43:17Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0MzoxN1rOG4upgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0MzoxN1rOG4upgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzNzcyOA==", "bodyText": "we should somewhere list the default name/data codestart properties/data will be fed in.", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462137728", "createdAt": "2020-07-29T08:43:17Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory\n+. A `codestart.yml` file\n+. Optionally some templates which follow a structure and naming conventions\n+\n+*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+\n+=== Project generation\n+\n+When generating a Quarkus project:\n+\n+. Codestarts to use are resolved depending on the input\n+. The Codestarts' shared data is processed to make it available for all codestarts\n+. The relevant files are processed:\n+** Only the files that are related to the selected language are processed\n+** The files are processed differently based on a naming convention.\n+** The data is used to render Qute templates\n+** We always process in this order: language, project, buildtool, config, custom, other.\n+\n+The data used to generate a specific codestart is a merge of:\n+\n+. The data of the codestart to generate\n+. All codestarts \"shared\" data\n+. The user input\n+. Some specific post processing (e.g. adding dependencies)\n+\n+*NOTE* The data (shared or not) can also be specific to a language.\n+\n+=== Directory Structure\n+\n+*NOTE* `codestart.yml` is the only required file.\n+\n+* `codestart.yml` must be at the root of the codestart\n+* `./base` contains all the files that will be processed\n+* `./[languageName]` contains all the files that will be processed if the specified language has been selected (overriding base)\n+\n+=== codestart.yml\n+\n+codestart.yml:\n+[source,yaml]\n+----\n+name: the unique name - REQUIRED\n+ref: the reference name (not unique) to use for extension matching (else the name is used)\n+type: the type [example (default), project, buildtool, language, config] or any custom type\n+fallback: flag to indicate that it should be selected as fallback when no codestart has been selected with type - Only for base types\n+preselected: flag to indicate that it should be pre-selected - Only for extra types.\n+spec:\n+  [base or language name]: the specification (base, java, ...)\n+    data: a map of data to use only for this codestart\n+    shared-data: a map of data to use accross all codestarts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzE2ODAw", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457316800", "createdAt": "2020-07-29T08:45:15Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0NToxNlrOG4ut-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0NToxNlrOG4ut-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzODg3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *NOTE* Just add `.tpl.qute` if you want it to be rendered with qute and use some data\n          \n          \n            \n            *NOTE* Just add `.tpl.qute` if you want it to be rendered with qute and use some data and simple logic", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462138875", "createdAt": "2020-07-29T08:45:16Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory\n+. A `codestart.yml` file\n+. Optionally some templates which follow a structure and naming conventions\n+\n+*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+\n+=== Project generation\n+\n+When generating a Quarkus project:\n+\n+. Codestarts to use are resolved depending on the input\n+. The Codestarts' shared data is processed to make it available for all codestarts\n+. The relevant files are processed:\n+** Only the files that are related to the selected language are processed\n+** The files are processed differently based on a naming convention.\n+** The data is used to render Qute templates\n+** We always process in this order: language, project, buildtool, config, custom, other.\n+\n+The data used to generate a specific codestart is a merge of:\n+\n+. The data of the codestart to generate\n+. All codestarts \"shared\" data\n+. The user input\n+. Some specific post processing (e.g. adding dependencies)\n+\n+*NOTE* The data (shared or not) can also be specific to a language.\n+\n+=== Directory Structure\n+\n+*NOTE* `codestart.yml` is the only required file.\n+\n+* `codestart.yml` must be at the root of the codestart\n+* `./base` contains all the files that will be processed\n+* `./[languageName]` contains all the files that will be processed if the specified language has been selected (overriding base)\n+\n+=== codestart.yml\n+\n+codestart.yml:\n+[source,yaml]\n+----\n+name: the unique name - REQUIRED\n+ref: the reference name (not unique) to use for extension matching (else the name is used)\n+type: the type [example (default), project, buildtool, language, config] or any custom type\n+fallback: flag to indicate that it should be selected as fallback when no codestart has been selected with type - Only for base types\n+preselected: flag to indicate that it should be pre-selected - Only for extra types.\n+spec:\n+  [base or language name]: the specification (base, java, ...)\n+    data: a map of data to use only for this codestart\n+    shared-data: a map of data to use accross all codestarts\n+    dependencies: a list of dependencies to add when this is selected\n+    test-dependencies: a list of test dependencies to add when this is selected\n+----\n+\n+=== Files Naming Convention\n+\n+* containing `.tpl.qute` will be processed with Qute (`.tpl.qute` will be removed from the output file name).\n+* containing `.include.qute` is used as a Qute template for inclusion (only available locally to the codestart).\n+\n+  Example: When using `{#include [name]}` in a template, it will look for `[name].include.qute` in the language dir, then in the base dir or the codestart.\n+\n+* an output strategy can be defined for specific files, it defines some specific logic on how to deal with those files.\n+\n+ Example: in the Quarkus project `codestart.yml`:\n+[source,yaml]\n+----\n+output-strategy:\n+  \"pom.xml\": smart-pom-merge # smartly merge pom.xml contents together\n+  \"README.md\": append # they are appended together\n+  \"readme.md\": forbidden # it will fail if found in any codestart\n+  \"README.adoc\": forbidden\n+  \"readme.adoc\": forbidden\n+  \".gitignore\": append\n+  \"src/main/resources/application.yml\": smart-config-merge # smartly merge config together and automatically converted to the selected config type (yaml or properties)\n+  \"src/main/resources/application.yaml\": forbidden # should use yml instead\n+  \"src/main/resources/application.properties\": forbidden # should use yml instead\n+  \"*\": fail-on-duplicate # it will fail if a duplicate is found for all other files\n+----\n+\n+* other files are just copied as is.\n+\n+\n+=== Writing Example Code for an Extension\n+\n+Let's imagine we are writing the example codestart for my \"foo\" extension. As we discussed before, the base of the project is already provided so we can focus on the example code.\n+\n+1. Create your `codestart.yml`:\n+\n+codestart.yml:\n+[source,yaml]\n+----\n+---\n+name: foo-example\n+ref: foo\n+type: example\n+missing-languages:\n+  - kotlin\n+  - scala\n+spec:\n+  base:\n+    data:\n+      # Some data for my templates which gives could be overridden by the user input\n+      some:\n+        data:\n+          here: bar\n+          there: foo\n+    dependencies:\n+      # the dependencies needed for my codestart (note that the extension dependency is auto-added if missing)\n+      - io.quarkus:quarkus-foo\n+      - io.quarkus:quarkus-resteasy\n+      # ... you can also provide a version (when it's not part of the platform bom)\n+      - group:artifact:version\n+    test-dependencies:\n+      # test dependencies\n+      - io.rest-assured:rest-assured\n+----\n+\n+*NOTE* You don't need to add `pom.xml` or `build.gradle`, it is going to be auto generated. It will include the dependencies provided in the `codestart.yml`.\n+\n+2. Add you example code in java, kotlin or scala\n+\n+* java/src/main/java/org/acme/foo/Foo.java:\n+[source,java]\n+----\n+package org.acme.foo\n+\n+import javax.ws.rs.GET\n+import javax.ws.rs.Path\n+import javax.ws.rs.Produces\n+import javax.ws.rs.core.MediaType\n+\n+@Path(\"foo\")\n+class ExampleResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    fun hello() = \"Hello foo\"\n+}\n+----\n+\n+* kotlin/src/main/kotlin/org/acme/foo/Foo.kt\n+* scala/src/main/scala/org/acme/foo/Foo.kt\n+\n+*NOTE* Just add `.tpl.qute` if you want it to be rendered with qute and use some data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 170}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzE3NDQ4", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457317448", "createdAt": "2020-07-29T08:46:05Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0NjowNVrOG4uv-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0NjowNVrOG4uv-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzOTM4NQ==", "bodyText": "what happens if two extensions list the same key ? warning, error, nothing ?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462139385", "createdAt": "2020-07-29T08:46:05Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory\n+. A `codestart.yml` file\n+. Optionally some templates which follow a structure and naming conventions\n+\n+*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+\n+=== Project generation\n+\n+When generating a Quarkus project:\n+\n+. Codestarts to use are resolved depending on the input\n+. The Codestarts' shared data is processed to make it available for all codestarts\n+. The relevant files are processed:\n+** Only the files that are related to the selected language are processed\n+** The files are processed differently based on a naming convention.\n+** The data is used to render Qute templates\n+** We always process in this order: language, project, buildtool, config, custom, other.\n+\n+The data used to generate a specific codestart is a merge of:\n+\n+. The data of the codestart to generate\n+. All codestarts \"shared\" data\n+. The user input\n+. Some specific post processing (e.g. adding dependencies)\n+\n+*NOTE* The data (shared or not) can also be specific to a language.\n+\n+=== Directory Structure\n+\n+*NOTE* `codestart.yml` is the only required file.\n+\n+* `codestart.yml` must be at the root of the codestart\n+* `./base` contains all the files that will be processed\n+* `./[languageName]` contains all the files that will be processed if the specified language has been selected (overriding base)\n+\n+=== codestart.yml\n+\n+codestart.yml:\n+[source,yaml]\n+----\n+name: the unique name - REQUIRED\n+ref: the reference name (not unique) to use for extension matching (else the name is used)\n+type: the type [example (default), project, buildtool, language, config] or any custom type\n+fallback: flag to indicate that it should be selected as fallback when no codestart has been selected with type - Only for base types\n+preselected: flag to indicate that it should be pre-selected - Only for extra types.\n+spec:\n+  [base or language name]: the specification (base, java, ...)\n+    data: a map of data to use only for this codestart\n+    shared-data: a map of data to use accross all codestarts\n+    dependencies: a list of dependencies to add when this is selected\n+    test-dependencies: a list of test dependencies to add when this is selected\n+----\n+\n+=== Files Naming Convention\n+\n+* containing `.tpl.qute` will be processed with Qute (`.tpl.qute` will be removed from the output file name).\n+* containing `.include.qute` is used as a Qute template for inclusion (only available locally to the codestart).\n+\n+  Example: When using `{#include [name]}` in a template, it will look for `[name].include.qute` in the language dir, then in the base dir or the codestart.\n+\n+* an output strategy can be defined for specific files, it defines some specific logic on how to deal with those files.\n+\n+ Example: in the Quarkus project `codestart.yml`:\n+[source,yaml]\n+----\n+output-strategy:\n+  \"pom.xml\": smart-pom-merge # smartly merge pom.xml contents together\n+  \"README.md\": append # they are appended together\n+  \"readme.md\": forbidden # it will fail if found in any codestart\n+  \"README.adoc\": forbidden\n+  \"readme.adoc\": forbidden\n+  \".gitignore\": append\n+  \"src/main/resources/application.yml\": smart-config-merge # smartly merge config together and automatically converted to the selected config type (yaml or properties)\n+  \"src/main/resources/application.yaml\": forbidden # should use yml instead\n+  \"src/main/resources/application.properties\": forbidden # should use yml instead\n+  \"*\": fail-on-duplicate # it will fail if a duplicate is found for all other files\n+----\n+\n+* other files are just copied as is.\n+\n+\n+=== Writing Example Code for an Extension\n+\n+Let's imagine we are writing the example codestart for my \"foo\" extension. As we discussed before, the base of the project is already provided so we can focus on the example code.\n+\n+1. Create your `codestart.yml`:\n+\n+codestart.yml:\n+[source,yaml]\n+----\n+---\n+name: foo-example\n+ref: foo\n+type: example\n+missing-languages:\n+  - kotlin\n+  - scala\n+spec:\n+  base:\n+    data:\n+      # Some data for my templates which gives could be overridden by the user input\n+      some:\n+        data:\n+          here: bar\n+          there: foo\n+    dependencies:\n+      # the dependencies needed for my codestart (note that the extension dependency is auto-added if missing)\n+      - io.quarkus:quarkus-foo\n+      - io.quarkus:quarkus-resteasy\n+      # ... you can also provide a version (when it's not part of the platform bom)\n+      - group:artifact:version\n+    test-dependencies:\n+      # test dependencies\n+      - io.rest-assured:rest-assured\n+----\n+\n+*NOTE* You don't need to add `pom.xml` or `build.gradle`, it is going to be auto generated. It will include the dependencies provided in the `codestart.yml`.\n+\n+2. Add you example code in java, kotlin or scala\n+\n+* java/src/main/java/org/acme/foo/Foo.java:\n+[source,java]\n+----\n+package org.acme.foo\n+\n+import javax.ws.rs.GET\n+import javax.ws.rs.Path\n+import javax.ws.rs.Produces\n+import javax.ws.rs.core.MediaType\n+\n+@Path(\"foo\")\n+class ExampleResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    fun hello() = \"Hello foo\"\n+}\n+----\n+\n+* kotlin/src/main/kotlin/org/acme/foo/Foo.kt\n+* scala/src/main/scala/org/acme/foo/Foo.kt\n+\n+*NOTE* Just add `.tpl.qute` if you want it to be rendered with qute and use some data\n+\n+*NOTE* Most of the time you won't need it for code, but you can use a `base` directory to add files to process for all languages.\n+\n+\n+2. Add some configuration (if needed)\n+\n+The `base/src/main/resources/application.yml` file is going to be merged with the other codestarts config and automatically converted to the selected config type (yaml or properties).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 177}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzE3OTgz", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457317983", "createdAt": "2020-07-29T08:46:49Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0Njo0OVrOG4uxwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0Njo0OVrOG4uxwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzOTg0Mg==", "bodyText": "move this up as the first - repeat it at the end :)", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462139842", "createdAt": "2020-07-29T08:46:49Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory\n+. A `codestart.yml` file\n+. Optionally some templates which follow a structure and naming conventions\n+\n+*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+\n+=== Project generation\n+\n+When generating a Quarkus project:\n+\n+. Codestarts to use are resolved depending on the input\n+. The Codestarts' shared data is processed to make it available for all codestarts\n+. The relevant files are processed:\n+** Only the files that are related to the selected language are processed\n+** The files are processed differently based on a naming convention.\n+** The data is used to render Qute templates\n+** We always process in this order: language, project, buildtool, config, custom, other.\n+\n+The data used to generate a specific codestart is a merge of:\n+\n+. The data of the codestart to generate\n+. All codestarts \"shared\" data\n+. The user input\n+. Some specific post processing (e.g. adding dependencies)\n+\n+*NOTE* The data (shared or not) can also be specific to a language.\n+\n+=== Directory Structure\n+\n+*NOTE* `codestart.yml` is the only required file.\n+\n+* `codestart.yml` must be at the root of the codestart\n+* `./base` contains all the files that will be processed\n+* `./[languageName]` contains all the files that will be processed if the specified language has been selected (overriding base)\n+\n+=== codestart.yml\n+\n+codestart.yml:\n+[source,yaml]\n+----\n+name: the unique name - REQUIRED\n+ref: the reference name (not unique) to use for extension matching (else the name is used)\n+type: the type [example (default), project, buildtool, language, config] or any custom type\n+fallback: flag to indicate that it should be selected as fallback when no codestart has been selected with type - Only for base types\n+preselected: flag to indicate that it should be pre-selected - Only for extra types.\n+spec:\n+  [base or language name]: the specification (base, java, ...)\n+    data: a map of data to use only for this codestart\n+    shared-data: a map of data to use accross all codestarts\n+    dependencies: a list of dependencies to add when this is selected\n+    test-dependencies: a list of test dependencies to add when this is selected\n+----\n+\n+=== Files Naming Convention\n+\n+* containing `.tpl.qute` will be processed with Qute (`.tpl.qute` will be removed from the output file name).\n+* containing `.include.qute` is used as a Qute template for inclusion (only available locally to the codestart).\n+\n+  Example: When using `{#include [name]}` in a template, it will look for `[name].include.qute` in the language dir, then in the base dir or the codestart.\n+\n+* an output strategy can be defined for specific files, it defines some specific logic on how to deal with those files.\n+\n+ Example: in the Quarkus project `codestart.yml`:\n+[source,yaml]\n+----\n+output-strategy:\n+  \"pom.xml\": smart-pom-merge # smartly merge pom.xml contents together\n+  \"README.md\": append # they are appended together\n+  \"readme.md\": forbidden # it will fail if found in any codestart\n+  \"README.adoc\": forbidden\n+  \"readme.adoc\": forbidden\n+  \".gitignore\": append\n+  \"src/main/resources/application.yml\": smart-config-merge # smartly merge config together and automatically converted to the selected config type (yaml or properties)\n+  \"src/main/resources/application.yaml\": forbidden # should use yml instead\n+  \"src/main/resources/application.properties\": forbidden # should use yml instead\n+  \"*\": fail-on-duplicate # it will fail if a duplicate is found for all other files\n+----\n+\n+* other files are just copied as is.\n+\n+\n+=== Writing Example Code for an Extension\n+\n+Let's imagine we are writing the example codestart for my \"foo\" extension. As we discussed before, the base of the project is already provided so we can focus on the example code.\n+\n+1. Create your `codestart.yml`:\n+\n+codestart.yml:\n+[source,yaml]\n+----\n+---\n+name: foo-example\n+ref: foo\n+type: example\n+missing-languages:\n+  - kotlin\n+  - scala\n+spec:\n+  base:\n+    data:\n+      # Some data for my templates which gives could be overridden by the user input\n+      some:\n+        data:\n+          here: bar\n+          there: foo\n+    dependencies:\n+      # the dependencies needed for my codestart (note that the extension dependency is auto-added if missing)\n+      - io.quarkus:quarkus-foo\n+      - io.quarkus:quarkus-resteasy\n+      # ... you can also provide a version (when it's not part of the platform bom)\n+      - group:artifact:version\n+    test-dependencies:\n+      # test dependencies\n+      - io.rest-assured:rest-assured\n+----\n+\n+*NOTE* You don't need to add `pom.xml` or `build.gradle`, it is going to be auto generated. It will include the dependencies provided in the `codestart.yml`.\n+\n+2. Add you example code in java, kotlin or scala\n+\n+* java/src/main/java/org/acme/foo/Foo.java:\n+[source,java]\n+----\n+package org.acme.foo\n+\n+import javax.ws.rs.GET\n+import javax.ws.rs.Path\n+import javax.ws.rs.Produces\n+import javax.ws.rs.core.MediaType\n+\n+@Path(\"foo\")\n+class ExampleResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    fun hello() = \"Hello foo\"\n+}\n+----\n+\n+* kotlin/src/main/kotlin/org/acme/foo/Foo.kt\n+* scala/src/main/scala/org/acme/foo/Foo.kt\n+\n+*NOTE* Just add `.tpl.qute` if you want it to be rendered with qute and use some data\n+\n+*NOTE* Most of the time you won't need it for code, but you can use a `base` directory to add files to process for all languages.\n+\n+\n+2. Add some configuration (if needed)\n+\n+The `base/src/main/resources/application.yml` file is going to be merged with the other codestarts config and automatically converted to the selected config type (yaml or properties).\n+\n+Note: if it's specific to a language, you can put the config in each languages folders\n+\n+* base/src/main/resources/application.yml (using quarkus yaml config convention):\n+[source,yaml]\n+----\n+quarkus:\n+  http:\n+    port: 8081\n+----\n+\n+3. Create a readme section (if needed)\n+\n+This will be appended to all different selected examples.\n+\n+* base/README.md\n+[source,markdown]\n+----\n+# FOO Example\n+\n+The Foo Example shows...\n+----\n+\n+=== Tips for writing extension example code\n+\n+- You don't need to care about buildtool, dockerfiles, ...\n+- Use the package `org.acme.[unique-name]` for your sources.\n+- Use the path `/unique-name/...` for your REST paths\n+- Write tests for your examples\n+- Examples in different codestarts must be independent, only the config and the build file are merged.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 207}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzE4OTc0", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457318974", "createdAt": "2020-07-29T08:48:04Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0ODowNFrOG4u0wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0ODowNFrOG4u0wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0MDYwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - You don't need to care about buildtool, dockerfiles, ...\n          \n          \n            \n            - Your example must/should be independent from buildtool and dockerfiles\n          \n      \n    \n    \n  \n\nif there is more then list them specifically; ... is too fuzzy", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462140608", "createdAt": "2020-07-29T08:48:04Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/codestarts.adoc", "diffHunk": "@@ -0,0 +1,220 @@\n+= Quarkus - Codestarts\n+\n+This guide explains how to create and configure a Quarkus Codestart for an extension.\n+\n+== Description\n+\n+\"Codestarts\" is the name we gave to our Quarkus quickstart code generation system. \n+Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n+Quarkus extensions are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using it.\n+\n+== How it works\n+\n+There are two kinds of codestarts contributing to the generation of a project, the kind where we want to have only one for a project (called Base) and the rest (called Extra).\n+\n+Base:\n+\n+* project: The project skeleton (e.g. a Quarkus project)\n+* buildtool: The build tool (e.g. Maven, Gradle, Gradle with Kotlin DSL)\n+* language: The coding language (e.g. Java, Kotlin, Scala)\n+* config: The config type (e.g. yaml, properties)\n+\n+Extra:\n+* tooling: Anything that can be added to improve the project (e.g. dockerfiles)\n+* example: Any Quarkus extension can provide example code. The user can decide to activate it or not.\n+\n+Each codestart consists of:\n+\n+. A specific directory\n+. A `codestart.yml` file\n+. Optionally some templates which follow a structure and naming conventions\n+\n+*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+\n+=== Project generation\n+\n+When generating a Quarkus project:\n+\n+. Codestarts to use are resolved depending on the input\n+. The Codestarts' shared data is processed to make it available for all codestarts\n+. The relevant files are processed:\n+** Only the files that are related to the selected language are processed\n+** The files are processed differently based on a naming convention.\n+** The data is used to render Qute templates\n+** We always process in this order: language, project, buildtool, config, custom, other.\n+\n+The data used to generate a specific codestart is a merge of:\n+\n+. The data of the codestart to generate\n+. All codestarts \"shared\" data\n+. The user input\n+. Some specific post processing (e.g. adding dependencies)\n+\n+*NOTE* The data (shared or not) can also be specific to a language.\n+\n+=== Directory Structure\n+\n+*NOTE* `codestart.yml` is the only required file.\n+\n+* `codestart.yml` must be at the root of the codestart\n+* `./base` contains all the files that will be processed\n+* `./[languageName]` contains all the files that will be processed if the specified language has been selected (overriding base)\n+\n+=== codestart.yml\n+\n+codestart.yml:\n+[source,yaml]\n+----\n+name: the unique name - REQUIRED\n+ref: the reference name (not unique) to use for extension matching (else the name is used)\n+type: the type [example (default), project, buildtool, language, config] or any custom type\n+fallback: flag to indicate that it should be selected as fallback when no codestart has been selected with type - Only for base types\n+preselected: flag to indicate that it should be pre-selected - Only for extra types.\n+spec:\n+  [base or language name]: the specification (base, java, ...)\n+    data: a map of data to use only for this codestart\n+    shared-data: a map of data to use accross all codestarts\n+    dependencies: a list of dependencies to add when this is selected\n+    test-dependencies: a list of test dependencies to add when this is selected\n+----\n+\n+=== Files Naming Convention\n+\n+* containing `.tpl.qute` will be processed with Qute (`.tpl.qute` will be removed from the output file name).\n+* containing `.include.qute` is used as a Qute template for inclusion (only available locally to the codestart).\n+\n+  Example: When using `{#include [name]}` in a template, it will look for `[name].include.qute` in the language dir, then in the base dir or the codestart.\n+\n+* an output strategy can be defined for specific files, it defines some specific logic on how to deal with those files.\n+\n+ Example: in the Quarkus project `codestart.yml`:\n+[source,yaml]\n+----\n+output-strategy:\n+  \"pom.xml\": smart-pom-merge # smartly merge pom.xml contents together\n+  \"README.md\": append # they are appended together\n+  \"readme.md\": forbidden # it will fail if found in any codestart\n+  \"README.adoc\": forbidden\n+  \"readme.adoc\": forbidden\n+  \".gitignore\": append\n+  \"src/main/resources/application.yml\": smart-config-merge # smartly merge config together and automatically converted to the selected config type (yaml or properties)\n+  \"src/main/resources/application.yaml\": forbidden # should use yml instead\n+  \"src/main/resources/application.properties\": forbidden # should use yml instead\n+  \"*\": fail-on-duplicate # it will fail if a duplicate is found for all other files\n+----\n+\n+* other files are just copied as is.\n+\n+\n+=== Writing Example Code for an Extension\n+\n+Let's imagine we are writing the example codestart for my \"foo\" extension. As we discussed before, the base of the project is already provided so we can focus on the example code.\n+\n+1. Create your `codestart.yml`:\n+\n+codestart.yml:\n+[source,yaml]\n+----\n+---\n+name: foo-example\n+ref: foo\n+type: example\n+missing-languages:\n+  - kotlin\n+  - scala\n+spec:\n+  base:\n+    data:\n+      # Some data for my templates which gives could be overridden by the user input\n+      some:\n+        data:\n+          here: bar\n+          there: foo\n+    dependencies:\n+      # the dependencies needed for my codestart (note that the extension dependency is auto-added if missing)\n+      - io.quarkus:quarkus-foo\n+      - io.quarkus:quarkus-resteasy\n+      # ... you can also provide a version (when it's not part of the platform bom)\n+      - group:artifact:version\n+    test-dependencies:\n+      # test dependencies\n+      - io.rest-assured:rest-assured\n+----\n+\n+*NOTE* You don't need to add `pom.xml` or `build.gradle`, it is going to be auto generated. It will include the dependencies provided in the `codestart.yml`.\n+\n+2. Add you example code in java, kotlin or scala\n+\n+* java/src/main/java/org/acme/foo/Foo.java:\n+[source,java]\n+----\n+package org.acme.foo\n+\n+import javax.ws.rs.GET\n+import javax.ws.rs.Path\n+import javax.ws.rs.Produces\n+import javax.ws.rs.core.MediaType\n+\n+@Path(\"foo\")\n+class ExampleResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    fun hello() = \"Hello foo\"\n+}\n+----\n+\n+* kotlin/src/main/kotlin/org/acme/foo/Foo.kt\n+* scala/src/main/scala/org/acme/foo/Foo.kt\n+\n+*NOTE* Just add `.tpl.qute` if you want it to be rendered with qute and use some data\n+\n+*NOTE* Most of the time you won't need it for code, but you can use a `base` directory to add files to process for all languages.\n+\n+\n+2. Add some configuration (if needed)\n+\n+The `base/src/main/resources/application.yml` file is going to be merged with the other codestarts config and automatically converted to the selected config type (yaml or properties).\n+\n+Note: if it's specific to a language, you can put the config in each languages folders\n+\n+* base/src/main/resources/application.yml (using quarkus yaml config convention):\n+[source,yaml]\n+----\n+quarkus:\n+  http:\n+    port: 8081\n+----\n+\n+3. Create a readme section (if needed)\n+\n+This will be appended to all different selected examples.\n+\n+* base/README.md\n+[source,markdown]\n+----\n+# FOO Example\n+\n+The Foo Example shows...\n+----\n+\n+=== Tips for writing extension example code\n+\n+- You don't need to care about buildtool, dockerfiles, ...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 203}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzIzNDUw", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457323450", "createdAt": "2020-07-29T08:53:50Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo1Mzo1MFrOG4vCUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo1Mzo1MFrOG4vCUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NDA4Mw==", "bodyText": "what happens if example has both yaml and yml ? :)", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462144083", "createdAt": "2020-07-29T08:53:50Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartLoader.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.io.FilenameUtils;\n+\n+final class CodestartLoader {\n+    private static final ObjectMapper YAML_MAPPER = new ObjectMapper(new YAMLFactory())\n+            .enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n+            .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n+\n+    private static final String CODESTARTS_DIR_BUNDLED = \"bundled-codestarts\";\n+    private static final String CODESTARTS_DIR_FROM_EXTENSIONS = \"codestarts\";\n+\n+    private CodestartLoader() {\n+    }\n+\n+    public static List<Codestart> loadAllCodestarts(CodestartInput input) throws IOException {\n+        return Stream.concat(loadBundledCodestarts(input).stream(),\n+                loadCodestartsFromExtensions(input).stream()).collect(Collectors.toList());\n+    }\n+\n+    public static Collection<Codestart> loadBundledCodestarts(CodestartInput input) throws IOException {\n+        return loadCodestarts(input.getResourceLoader(), CODESTARTS_DIR_BUNDLED);\n+    }\n+\n+    public static Collection<Codestart> loadCodestartsFromExtensions(CodestartInput input)\n+            throws IOException {\n+        // TODO resolve codestarts which live inside extensions. Using a directory is just a temporary workaround.\n+        return loadCodestarts(input.getResourceLoader(), CODESTARTS_DIR_FROM_EXTENSIONS);\n+    }\n+\n+    // Visible for testing\n+    static Collection<Codestart> loadCodestarts(final CodestartResourceLoader resourceLoader, final String directoryName)\n+            throws IOException {\n+        return resourceLoader.loadResourceAsPath(directoryName,\n+                path -> Files.walk(path)\n+                        .filter(p -> p.getFileName().toString().matches(\"codestart\\\\.ya?ml$\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzI3MTMx", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457327131", "createdAt": "2020-07-29T08:58:26Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo1ODoyNlrOG4vOHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo1ODoyNlrOG4vOHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NzEwMg==", "bodyText": "that todo seems important to fix?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462147102", "createdAt": "2020-07-29T08:58:26Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartProcessor.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import static io.quarkus.devtools.codestarts.Codestart.BASE_LANGUAGE;\n+\n+import io.quarkus.devtools.codestarts.reader.CodestartFile;\n+import io.quarkus.devtools.codestarts.reader.CodestartFileReader;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategy;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategyHandler;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+final class CodestartProcessor {\n+\n+    private final CodestartResourceLoader resourceLoader;\n+    private final String languageName;\n+    private final Path targetDirectory;\n+    private final List<CodestartFileStrategy> strategies;\n+    private final Map<String, Object> data;\n+    private final Map<String, List<CodestartFile>> files = new LinkedHashMap<>();\n+\n+    CodestartProcessor(final CodestartResourceLoader resourceLoader,\n+            final String languageName,\n+            final Path targetDirectory,\n+            List<CodestartFileStrategy> strategies,\n+            final Map<String, Object> data) {\n+        this.resourceLoader = resourceLoader;\n+        this.languageName = languageName;\n+        this.targetDirectory = targetDirectory;\n+        this.strategies = strategies;\n+        this.data = data;\n+    }\n+\n+    void process(final Codestart codestart) throws IOException {\n+        resourceLoader.loadResourceAsPath(codestart.getResourceDir(), p -> {\n+            final Path baseDir = p.resolve(BASE_LANGUAGE);\n+            final Path languageDir = p.resolve(languageName);\n+            if (!codestart.getSpec().getMissingLanguages().isEmpty()\n+                    && codestart.getSpec().getMissingLanguages().contains(languageName)) {\n+                // TODO print a warning to inform that this codestart miss this language", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzM3MjE1", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457337215", "createdAt": "2020-07-29T09:11:11Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxMToxMVrOG4vsLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxMToxMVrOG4vsLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NDc5OQ==", "bodyText": "this code feels like should at least have some debug logging to help to trace/debug issues.", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462154799", "createdAt": "2020-07-29T09:11:11Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartProcessor.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import static io.quarkus.devtools.codestarts.Codestart.BASE_LANGUAGE;\n+\n+import io.quarkus.devtools.codestarts.reader.CodestartFile;\n+import io.quarkus.devtools.codestarts.reader.CodestartFileReader;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategy;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategyHandler;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+final class CodestartProcessor {\n+\n+    private final CodestartResourceLoader resourceLoader;\n+    private final String languageName;\n+    private final Path targetDirectory;\n+    private final List<CodestartFileStrategy> strategies;\n+    private final Map<String, Object> data;\n+    private final Map<String, List<CodestartFile>> files = new LinkedHashMap<>();\n+\n+    CodestartProcessor(final CodestartResourceLoader resourceLoader,\n+            final String languageName,\n+            final Path targetDirectory,\n+            List<CodestartFileStrategy> strategies,\n+            final Map<String, Object> data) {\n+        this.resourceLoader = resourceLoader;\n+        this.languageName = languageName;\n+        this.targetDirectory = targetDirectory;\n+        this.strategies = strategies;\n+        this.data = data;\n+    }\n+\n+    void process(final Codestart codestart) throws IOException {\n+        resourceLoader.loadResourceAsPath(codestart.getResourceDir(), p -> {\n+            final Path baseDir = p.resolve(BASE_LANGUAGE);\n+            final Path languageDir = p.resolve(languageName);\n+            if (!codestart.getSpec().getMissingLanguages().isEmpty()\n+                    && codestart.getSpec().getMissingLanguages().contains(languageName)) {\n+                // TODO print a warning to inform that this codestart miss this language\n+                return null; // We ignore that codestart as it doesn't implement the specified language\n+            }\n+            Stream.of(baseDir, languageDir)\n+                    .filter(Files::isDirectory)\n+                    .forEach(dirPath -> processCodestartDir(dirPath,\n+                            CodestartData.buildCodestartData(codestart, languageName, data)));\n+            return null;\n+        });\n+    }\n+\n+    void processCodestartDir(final Path sourceDirectory, final Map<String, Object> finalData) {\n+        try {\n+            final Collection<Path> sources = Files.walk(sourceDirectory)\n+                    .filter(path -> !path.equals(sourceDirectory))\n+                    .collect(Collectors.toList());\n+            for (Path sourcePath : sources) {\n+                final Path relativeSourcePath = sourceDirectory.relativize(sourcePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzM3Njc1", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457337675", "createdAt": "2020-07-29T09:11:51Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxMTo1MVrOG4vtog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxMTo1MVrOG4vtog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NTE3MA==", "bodyText": "add/move this try/catch inside the for loop so you can give some context to this exception (like which path is failing on)", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462155170", "createdAt": "2020-07-29T09:11:51Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartProcessor.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import static io.quarkus.devtools.codestarts.Codestart.BASE_LANGUAGE;\n+\n+import io.quarkus.devtools.codestarts.reader.CodestartFile;\n+import io.quarkus.devtools.codestarts.reader.CodestartFileReader;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategy;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategyHandler;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+final class CodestartProcessor {\n+\n+    private final CodestartResourceLoader resourceLoader;\n+    private final String languageName;\n+    private final Path targetDirectory;\n+    private final List<CodestartFileStrategy> strategies;\n+    private final Map<String, Object> data;\n+    private final Map<String, List<CodestartFile>> files = new LinkedHashMap<>();\n+\n+    CodestartProcessor(final CodestartResourceLoader resourceLoader,\n+            final String languageName,\n+            final Path targetDirectory,\n+            List<CodestartFileStrategy> strategies,\n+            final Map<String, Object> data) {\n+        this.resourceLoader = resourceLoader;\n+        this.languageName = languageName;\n+        this.targetDirectory = targetDirectory;\n+        this.strategies = strategies;\n+        this.data = data;\n+    }\n+\n+    void process(final Codestart codestart) throws IOException {\n+        resourceLoader.loadResourceAsPath(codestart.getResourceDir(), p -> {\n+            final Path baseDir = p.resolve(BASE_LANGUAGE);\n+            final Path languageDir = p.resolve(languageName);\n+            if (!codestart.getSpec().getMissingLanguages().isEmpty()\n+                    && codestart.getSpec().getMissingLanguages().contains(languageName)) {\n+                // TODO print a warning to inform that this codestart miss this language\n+                return null; // We ignore that codestart as it doesn't implement the specified language\n+            }\n+            Stream.of(baseDir, languageDir)\n+                    .filter(Files::isDirectory)\n+                    .forEach(dirPath -> processCodestartDir(dirPath,\n+                            CodestartData.buildCodestartData(codestart, languageName, data)));\n+            return null;\n+        });\n+    }\n+\n+    void processCodestartDir(final Path sourceDirectory, final Map<String, Object> finalData) {\n+        try {\n+            final Collection<Path> sources = Files.walk(sourceDirectory)\n+                    .filter(path -> !path.equals(sourceDirectory))\n+                    .collect(Collectors.toList());\n+            for (Path sourcePath : sources) {\n+                final Path relativeSourcePath = sourceDirectory.relativize(sourcePath);\n+                if (!Files.isDirectory(sourcePath)) {\n+                    final String sourceFileName = sourcePath.getFileName().toString();\n+\n+                    // Read files to process\n+                    final Optional<CodestartFileReader> possibleReader = CodestartFileReader.ALL.stream()\n+                            .filter(r -> r.matches(sourceFileName))\n+                            .findFirst();\n+                    final CodestartFileReader reader = possibleReader.orElse(CodestartFileReader.DEFAULT);\n+\n+                    final String targetFileName = reader.cleanFileName(sourceFileName);\n+                    final Path relativeTargetPath = relativeSourcePath.getNameCount() > 1\n+                            ? relativeSourcePath.getParent().resolve(targetFileName)\n+                            : Paths.get(targetFileName);\n+\n+                    final boolean hasConflictStrategyHandler = getStrategy(relativeTargetPath.toString()).isPresent();\n+\n+                    if (!possibleReader.isPresent() && !hasConflictStrategyHandler) {\n+                        // Copy static files\n+                        // TODO support static files from codestart.yml\n+                        final Path targetPath = targetDirectory.resolve(relativeTargetPath.toString());\n+                        processStaticFile(sourcePath, targetPath);\n+                    }\n+\n+                    final Optional<String> content = reader.read(sourcePath,\n+                            languageName, finalData);\n+                    if (content.isPresent()) {\n+                        final String key = relativeTargetPath.toString();\n+                        this.files.putIfAbsent(key, new ArrayList<>());\n+                        this.files.get(key).add(new CodestartFile(relativeSourcePath.toString(), content.get()));\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzM4ODY4", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457338868", "createdAt": "2020-07-29T09:13:22Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxMzoyMlrOG4vxEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxMzoyMlrOG4vxEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NjA0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new CodestartDefinitionException(\"ConflictStrategyHandler not found named '\" + entry.getValue()\n          \n          \n            \n                                    + \"' used for with filter '\" + entry.getKey() + \"'\");\n          \n          \n            \n                            throw new CodestartDefinitionException(\"ConflictStrategyHandler named '\" + entry.getValue()\n          \n          \n            \n                                    + \"' not found. Used with filter '\" + entry.getKey() + \"'\");", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462156049", "createdAt": "2020-07-29T09:13:22Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartProcessor.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import static io.quarkus.devtools.codestarts.Codestart.BASE_LANGUAGE;\n+\n+import io.quarkus.devtools.codestarts.reader.CodestartFile;\n+import io.quarkus.devtools.codestarts.reader.CodestartFileReader;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategy;\n+import io.quarkus.devtools.codestarts.strategy.CodestartFileStrategyHandler;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+final class CodestartProcessor {\n+\n+    private final CodestartResourceLoader resourceLoader;\n+    private final String languageName;\n+    private final Path targetDirectory;\n+    private final List<CodestartFileStrategy> strategies;\n+    private final Map<String, Object> data;\n+    private final Map<String, List<CodestartFile>> files = new LinkedHashMap<>();\n+\n+    CodestartProcessor(final CodestartResourceLoader resourceLoader,\n+            final String languageName,\n+            final Path targetDirectory,\n+            List<CodestartFileStrategy> strategies,\n+            final Map<String, Object> data) {\n+        this.resourceLoader = resourceLoader;\n+        this.languageName = languageName;\n+        this.targetDirectory = targetDirectory;\n+        this.strategies = strategies;\n+        this.data = data;\n+    }\n+\n+    void process(final Codestart codestart) throws IOException {\n+        resourceLoader.loadResourceAsPath(codestart.getResourceDir(), p -> {\n+            final Path baseDir = p.resolve(BASE_LANGUAGE);\n+            final Path languageDir = p.resolve(languageName);\n+            if (!codestart.getSpec().getMissingLanguages().isEmpty()\n+                    && codestart.getSpec().getMissingLanguages().contains(languageName)) {\n+                // TODO print a warning to inform that this codestart miss this language\n+                return null; // We ignore that codestart as it doesn't implement the specified language\n+            }\n+            Stream.of(baseDir, languageDir)\n+                    .filter(Files::isDirectory)\n+                    .forEach(dirPath -> processCodestartDir(dirPath,\n+                            CodestartData.buildCodestartData(codestart, languageName, data)));\n+            return null;\n+        });\n+    }\n+\n+    void processCodestartDir(final Path sourceDirectory, final Map<String, Object> finalData) {\n+        try {\n+            final Collection<Path> sources = Files.walk(sourceDirectory)\n+                    .filter(path -> !path.equals(sourceDirectory))\n+                    .collect(Collectors.toList());\n+            for (Path sourcePath : sources) {\n+                final Path relativeSourcePath = sourceDirectory.relativize(sourcePath);\n+                if (!Files.isDirectory(sourcePath)) {\n+                    final String sourceFileName = sourcePath.getFileName().toString();\n+\n+                    // Read files to process\n+                    final Optional<CodestartFileReader> possibleReader = CodestartFileReader.ALL.stream()\n+                            .filter(r -> r.matches(sourceFileName))\n+                            .findFirst();\n+                    final CodestartFileReader reader = possibleReader.orElse(CodestartFileReader.DEFAULT);\n+\n+                    final String targetFileName = reader.cleanFileName(sourceFileName);\n+                    final Path relativeTargetPath = relativeSourcePath.getNameCount() > 1\n+                            ? relativeSourcePath.getParent().resolve(targetFileName)\n+                            : Paths.get(targetFileName);\n+\n+                    final boolean hasConflictStrategyHandler = getStrategy(relativeTargetPath.toString()).isPresent();\n+\n+                    if (!possibleReader.isPresent() && !hasConflictStrategyHandler) {\n+                        // Copy static files\n+                        // TODO support static files from codestart.yml\n+                        final Path targetPath = targetDirectory.resolve(relativeTargetPath.toString());\n+                        processStaticFile(sourcePath, targetPath);\n+                    }\n+\n+                    final Optional<String> content = reader.read(sourcePath,\n+                            languageName, finalData);\n+                    if (content.isPresent()) {\n+                        final String key = relativeTargetPath.toString();\n+                        this.files.putIfAbsent(key, new ArrayList<>());\n+                        this.files.get(key).add(new CodestartFile(relativeSourcePath.toString(), content.get()));\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private static void processStaticFile(Path path, Path targetPath) throws IOException {\n+        Files.createDirectories(targetPath.getParent());\n+        Files.copy(path, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+    }\n+\n+    void checkTargetDir() throws IOException {\n+        if (!Files.exists(targetDirectory)) {\n+            boolean mkdirStatus = targetDirectory.toFile().mkdirs();\n+            if (!mkdirStatus) {\n+                throw new IOException(\"Failed to create the project directory: \" + targetDirectory);\n+            }\n+            return;\n+        }\n+        if (!Files.isDirectory(targetDirectory)) {\n+            throw new IOException(\"Project path needs to point to a directory: \" + targetDirectory);\n+        }\n+        final String[] files = targetDirectory.toFile().list();\n+        if (files != null && files.length > 0) {\n+            throw new IOException(\"You can't create a project when the directory is not empty: \" + targetDirectory);\n+        }\n+    }\n+\n+    public void writeFiles() throws IOException {\n+        for (Map.Entry<String, List<CodestartFile>> e : files.entrySet()) {\n+            final String relativePath = e.getKey();\n+            Files.createDirectories(targetDirectory.resolve(relativePath).getParent());\n+            getStrategy(relativePath).orElse(CodestartFileStrategyHandler.FAIL_ON_DUPLICATE)\n+                    .process(targetDirectory, relativePath, e.getValue(), data);\n+        }\n+    }\n+\n+    private Optional<CodestartFileStrategyHandler> getStrategy(final String key) {\n+        for (CodestartFileStrategy codestartFileStrategy : strategies) {\n+            if (codestartFileStrategy.test(key)) {\n+                return Optional.of(codestartFileStrategy.getHandler());\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    static List<CodestartFileStrategy> buildStrategies(Map<String, String> spec) {\n+        final List<CodestartFileStrategy> codestartFileStrategyHandlers = new ArrayList<>(spec.size());\n+\n+        for (Map.Entry<String, String> entry : spec.entrySet()) {\n+            final CodestartFileStrategyHandler handler = CodestartFileStrategyHandler.BY_NAME.get(entry.getValue());\n+            if (handler == null) {\n+                throw new CodestartDefinitionException(\"ConflictStrategyHandler not found named '\" + entry.getValue()\n+                        + \"' used for with filter '\" + entry.getKey() + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 153}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzM5NzE0", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457339714", "createdAt": "2020-07-29T09:14:26Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxNDoyNlrOG4vzqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxNDoyNlrOG4vzqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NjcxNQ==", "bodyText": "when that fails - will users get some context of which codestart spec that is failing ?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462156715", "createdAt": "2020-07-29T09:14:26Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartSpec.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public final class CodestartSpec {\n+\n+    enum Type {\n+        PROJECT(true),\n+        LANGUAGE(true),\n+        BUILDTOOL(true),\n+        CONFIG(true),\n+        EXAMPLE(false),\n+        TOOLING(false);\n+\n+        private final boolean base;\n+\n+        Type(boolean base) {\n+            this.base = base;\n+        }\n+\n+        public boolean isBase() {\n+            return base;\n+        }\n+    }\n+\n+    private final String name;\n+    private final boolean isPreselected;\n+    private final String ref;\n+    private final Type type;\n+    private final boolean isFallback;\n+    private final List<String> missingLanguages;\n+    private final Map<String, String> outputStrategy;\n+    private final Map<String, LanguageSpec> languagesSpec;\n+\n+    @JsonCreator\n+    public CodestartSpec(@JsonProperty(value = \"name\", required = true) String name,\n+            @JsonProperty(value = \"ref\") String ref,\n+            @JsonProperty(value = \"type\") Type type,\n+            @JsonProperty(\"fallback\") boolean isFallback,\n+            @JsonProperty(\"preselected\") boolean isPreselected,\n+            @JsonProperty(value = \"missing-languages\") List<String> missingLanguages,\n+            @JsonProperty(\"output-strategy\") Map<String, String> outputStrategy,\n+            @JsonProperty(\"language\") Map<String, LanguageSpec> languagesSpec) {\n+        this.name = requireNonNull(name, \"name is required\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzQxODY5", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457341869", "createdAt": "2020-07-29T09:17:13Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxNzoxNFrOG4v6VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxNzoxNFrOG4v6VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1ODQyMQ==", "bodyText": "why do you consider that random ?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462158421", "createdAt": "2020-07-29T09:17:14Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/reader/QuteCodestartFileReader.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package io.quarkus.devtools.codestarts.reader;\n+\n+import io.quarkus.devtools.codestarts.CodestartException;\n+import io.quarkus.qute.Engine;\n+import io.quarkus.qute.Expression;\n+import io.quarkus.qute.ResultMapper;\n+import io.quarkus.qute.Results;\n+import io.quarkus.qute.TemplateException;\n+import io.quarkus.qute.TemplateLocator;\n+import io.quarkus.qute.TemplateNode;\n+import io.quarkus.qute.Variant;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+final class QuteCodestartFileReader implements CodestartFileReader {\n+\n+    private static final String FLAG = \".tpl.qute\";\n+    public static final String INCLUDE_QUTE_FLAG = \".include.qute\";\n+\n+    @Override\n+    public boolean matches(String fileName) {\n+        return fileName.contains(FLAG) || fileName.contains(INCLUDE_QUTE_FLAG);\n+    }\n+\n+    @Override\n+    public String cleanFileName(String fileName) {\n+        return fileName.replace(FLAG, \"\");\n+    }\n+\n+    public Optional<String> read(Path sourcePath, String languageName, Map<String, Object> data) throws IOException {\n+        if (sourcePath.getFileName().toString().contains(INCLUDE_QUTE_FLAG)) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(readQuteFile(sourcePath, languageName, data));\n+    }\n+\n+    public static Engine newEngine() {\n+        return Engine.builder().addDefaults()\n+                .addResultMapper(new MissingValueMapper())\n+                .build();\n+    }\n+\n+    public static String readQuteFile(Path path, String languageName, Map<String, Object> data) throws IOException {\n+        final String content = new String(Files.readAllBytes(path), StandardCharsets.UTF_8);\n+        final Engine engine = Engine.builder().addDefaults()\n+                .addResultMapper(new MissingValueMapper())\n+                .removeStandaloneLines(true)\n+                .addLocator(id -> findIncludeTemplate(path, languageName, id).map(IncludeTemplateLocation::new))\n+                .build();\n+        try {\n+            return engine.parse(content).render(data);\n+        } catch (TemplateException e) {\n+            throw new IOException(\"Error while rendering template: \" + path.toString(), e);\n+        }\n+    }\n+\n+    private static Optional<Path> findIncludeTemplate(Path path, String languageName, String name) {\n+        // FIXME looking at the parent dir is a bit random\n+        final Path codestartPath = path.getParent().getParent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzQyNjk3", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457342697", "createdAt": "2020-07-29T09:18:23Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxODoyM1rOG4v9Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxODoyM1rOG4v9Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1OTExOQ==", "bodyText": "what is this used for ?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462159119", "createdAt": "2020-07-29T09:18:23Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/strategy/CodestartFileStrategy.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.devtools.codestarts.strategy;\n+\n+import java.util.Objects;\n+import java.util.function.Predicate;\n+\n+public class CodestartFileStrategy implements Predicate<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzQ0Mjkw", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457344290", "createdAt": "2020-07-29T09:20:38Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToyMDozOFrOG4wCLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToyMDozOFrOG4wCLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2MDQzMQ==", "bodyText": "do we have a usecase for this strategy ? I'm sure there is one i just can't figure one out atm ;)", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462160431", "createdAt": "2020-07-29T09:20:38Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/strategy/SmartPomMergeCodestartFileStrategyHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.devtools.codestarts.strategy;\n+\n+import io.fabric8.maven.Maven;\n+import io.fabric8.maven.merge.SmartModelMerger;\n+import io.quarkus.devtools.codestarts.reader.CodestartFile;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Map;\n+import org.apache.maven.model.Model;\n+\n+final class SmartPomMergeCodestartFileStrategyHandler implements CodestartFileStrategyHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzQ1NzU0", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457345754", "createdAt": "2020-07-29T09:22:36Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToyMjozN1rOG4wGug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToyMjozN1rOG4wGug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2MTU5NA==", "bodyText": "i need to know - what is that generated from ? :)", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462161594", "createdAt": "2020-07-29T09:22:37Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/devtools-common/src/test/resources/dir/some-file.template", "diffHunk": "@@ -0,0 +1,3 @@\n+Humble smack Shirelings tears baby usurper mouthful. Embrace fresh burned oil Wargs regurgitation unheard-of. Brandybucks puppet vines boats familiar prizewinners tunnel leaving riverbank welcome threw 60? Durin's certain washing crawled children? Pouf Dwarvish elected fruity writing. Laughing reserves hinges Barad-dur either troublemakers saw pleased thereof set weren't penny. Hear my voice. Come back to the light. Slight keyhole strong Shirkers 3434 promised?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzQ4MDY4", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457348068", "createdAt": "2020-07-29T09:25:45Z", "commit": {"oid": "88efcc09a2a93208fb603565c5030273727f20cc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3Mzk5MTM5", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457399139", "createdAt": "2020-07-29T10:36:28Z", "commit": {"oid": "a56451d4e39cd064fab627639001bbb4dad3a013"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NjM0NzQx", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-457634741", "createdAt": "2020-07-29T15:24:50Z", "commit": {"oid": "a56451d4e39cd064fab627639001bbb4dad3a013"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToyNDo1MVrOG49y7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToyNDo1MVrOG49y7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4NTkwMA==", "bodyText": "Is it called ..gitignore? With two dots at the beginning?", "url": "https://github.com/quarkusio/quarkus/pull/10372#discussion_r462385900", "createdAt": "2020-07-29T15:24:51Z", "author": {"login": "aloubyansky"}, "path": "devtools/platform-descriptor-json/src/main/resources/bundled-codestarts/buildtool/gradle/base/..gitignore", "diffHunk": "@@ -0,0 +1,3 @@\n+# Gradle", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56451d4e39cd064fab627639001bbb4dad3a013"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a56451d4e39cd064fab627639001bbb4dad3a013", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/a56451d4e39cd064fab627639001bbb4dad3a013", "committedDate": "2020-07-29T09:48:30Z", "message": "Update independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartProcessor.java\n\nCo-authored-by: Max Rydahl Andersen <max.andersen@gmail.com>"}, "afterCommit": {"oid": "b03c746cebcacb2b08c0260f7eea848ebd843c9e", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/b03c746cebcacb2b08c0260f7eea848ebd843c9e", "committedDate": "2020-07-29T15:52:10Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b03c746cebcacb2b08c0260f7eea848ebd843c9e", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/b03c746cebcacb2b08c0260f7eea848ebd843c9e", "committedDate": "2020-07-29T15:52:10Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "02f18e18d8d816c270500e77b39bc2855ab8daad", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/02f18e18d8d816c270500e77b39bc2855ab8daad", "committedDate": "2020-07-30T07:00:15Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e9b0363317c5ace74e7823f62666044b2d16cc6", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/5e9b0363317c5ace74e7823f62666044b2d16cc6", "committedDate": "2020-07-30T07:03:56Z", "message": "Update independent-projects/tools/codestarts/codestarts.adoc"}, "afterCommit": {"oid": "b6f3846c28bd9243f340fc6cf10982bbc35f81b9", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/b6f3846c28bd9243f340fc6cf10982bbc35f81b9", "committedDate": "2020-07-30T07:05:07Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6f3846c28bd9243f340fc6cf10982bbc35f81b9", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/b6f3846c28bd9243f340fc6cf10982bbc35f81b9", "committedDate": "2020-07-30T07:05:07Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "33ef9b54bf2ce6dd4ada59c8f841863feeb7ee79", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/33ef9b54bf2ce6dd4ada59c8f841863feeb7ee79", "committedDate": "2020-07-30T07:11:44Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33ef9b54bf2ce6dd4ada59c8f841863feeb7ee79", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/33ef9b54bf2ce6dd4ada59c8f841863feeb7ee79", "committedDate": "2020-07-30T07:11:44Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "b910dd3b10c2a4ce2e0e1b33fc2f849234ee0f48", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/b910dd3b10c2a4ce2e0e1b33fc2f849234ee0f48", "committedDate": "2020-07-30T07:23:58Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b910dd3b10c2a4ce2e0e1b33fc2f849234ee0f48", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/b910dd3b10c2a4ce2e0e1b33fc2f849234ee0f48", "committedDate": "2020-07-30T07:23:58Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "8fe89325413a2c323eea12349f43dafd651c151c", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/8fe89325413a2c323eea12349f43dafd651c151c", "committedDate": "2020-07-30T10:05:41Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fe89325413a2c323eea12349f43dafd651c151c", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/8fe89325413a2c323eea12349f43dafd651c151c", "committedDate": "2020-07-30T10:05:41Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "c05d6180cbf62ae571c56beceedd8971663cafb0", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/c05d6180cbf62ae571c56beceedd8971663cafb0", "committedDate": "2020-07-30T10:19:23Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Mjg1MDE5", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-458285019", "createdAt": "2020-07-30T10:39:38Z", "commit": {"oid": "c05d6180cbf62ae571c56beceedd8971663cafb0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Mjg1MDYy", "url": "https://github.com/quarkusio/quarkus/pull/10372#pullrequestreview-458285062", "createdAt": "2020-07-30T10:39:42Z", "commit": {"oid": "c05d6180cbf62ae571c56beceedd8971663cafb0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c05d6180cbf62ae571c56beceedd8971663cafb0", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/c05d6180cbf62ae571c56beceedd8971663cafb0", "committedDate": "2020-07-30T10:19:23Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "90cee50ee0e446d706a1e09337b26fbe329c9fab", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/90cee50ee0e446d706a1e09337b26fbe329c9fab", "committedDate": "2020-07-30T11:58:35Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90cee50ee0e446d706a1e09337b26fbe329c9fab", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/90cee50ee0e446d706a1e09337b26fbe329c9fab", "committedDate": "2020-07-30T11:58:35Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "dc539353b31bff57570a188875a229b9527dad32", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/dc539353b31bff57570a188875a229b9527dad32", "committedDate": "2020-07-30T14:46:19Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc539353b31bff57570a188875a229b9527dad32", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/dc539353b31bff57570a188875a229b9527dad32", "committedDate": "2020-07-30T14:46:19Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "6ae47f2dedef4bb7800eb8165b82eaba5cc78dce", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/6ae47f2dedef4bb7800eb8165b82eaba5cc78dce", "committedDate": "2020-07-30T15:39:03Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ae47f2dedef4bb7800eb8165b82eaba5cc78dce", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/6ae47f2dedef4bb7800eb8165b82eaba5cc78dce", "committedDate": "2020-07-30T15:39:03Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "f9bcdd8aa5d4c22599900d3c15ef2ec35d07826d", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/f9bcdd8aa5d4c22599900d3c15ef2ec35d07826d", "committedDate": "2020-07-30T15:45:47Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9bcdd8aa5d4c22599900d3c15ef2ec35d07826d", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/f9bcdd8aa5d4c22599900d3c15ef2ec35d07826d", "committedDate": "2020-07-30T15:45:47Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "51650ad526ad7075d04fc3df02a9dec19e2f3730", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/51650ad526ad7075d04fc3df02a9dec19e2f3730", "committedDate": "2020-07-30T19:15:15Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51650ad526ad7075d04fc3df02a9dec19e2f3730", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/51650ad526ad7075d04fc3df02a9dec19e2f3730", "committedDate": "2020-07-30T19:15:15Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "1582b2c81fc9de4dacdc210a08716023f71ce183", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/1582b2c81fc9de4dacdc210a08716023f71ce183", "committedDate": "2020-07-31T05:23:17Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1582b2c81fc9de4dacdc210a08716023f71ce183", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/1582b2c81fc9de4dacdc210a08716023f71ce183", "committedDate": "2020-07-31T05:23:17Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "196f994d811570f7b02ff2f34e8e2b72b73dd6ae", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/196f994d811570f7b02ff2f34e8e2b72b73dd6ae", "committedDate": "2020-07-31T05:26:18Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05771647ec8ebdbd752be412c1bc22d8bb2709a5", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/05771647ec8ebdbd752be412c1bc22d8bb2709a5", "committedDate": "2020-07-31T05:39:18Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "196f994d811570f7b02ff2f34e8e2b72b73dd6ae", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/196f994d811570f7b02ff2f34e8e2b72b73dd6ae", "committedDate": "2020-07-31T05:26:18Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}, "afterCommit": {"oid": "05771647ec8ebdbd752be412c1bc22d8bb2709a5", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/05771647ec8ebdbd752be412c1bc22d8bb2709a5", "committedDate": "2020-07-31T05:39:18Z", "message": "Introduce Codestarts\n\nPart of #8134 and #8178\n\nCopying a few lines of code from `ClassPathUtils.processAsPath`\n\nVarious tidy ups\n\nAdd qute-example codestart and change naming convention\n\nImprove integration tests\n\nUse descriptive processors for codestarts"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4218, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}