{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMjA4NTgx", "number": 13037, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1NjoxOFrOEz8LiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzoxMjo0OVrOEz_Gsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODk4ODI0OnYy", "diffSide": "RIGHT", "path": "integration-tests/micrometer-native/src/test/java/io/quarkus/it/micrometer/native_mode/NativeMeterRegistriesIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1NjoxOVrOHreNxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDo1Mjo1M1rOHrjs3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NTg2MA==", "bodyText": "This class can extend NativeMeterRegistriesTest?", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515345860", "createdAt": "2020-10-30T19:56:19Z", "author": {"login": "machi1990"}, "path": "integration-tests/micrometer-native/src/test/java/io/quarkus/it/micrometer/native_mode/NativeMeterRegistriesIT.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.it.micrometer.native_mode;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import java.util.List;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.junit.NativeImageTest;\n+import io.restassured.response.Response;\n+\n+@NativeImageTest\n+class NativeMeterRegistriesIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fd7c690a17ff431d12548a47f1358717462faa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzNTc0MA==", "bodyText": "It can, sure, but as the results are different in native mode vs. not, it isn't running the same test.\nSince there is a general expectation that one will extend the other, I've put that back, but I've also added an @OverRide annotation to hopefully call more attention to the fact that the native mode test is not the same.", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515435740", "createdAt": "2020-10-31T00:52:53Z", "author": {"login": "ebullient"}, "path": "integration-tests/micrometer-native/src/test/java/io/quarkus/it/micrometer/native_mode/NativeMeterRegistriesIT.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.it.micrometer.native_mode;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import java.util.List;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.junit.NativeImageTest;\n+import io.restassured.response.Response;\n+\n+@NativeImageTest\n+class NativeMeterRegistriesIT {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NTg2MA=="}, "originalCommit": {"oid": "57fd7c690a17ff431d12548a47f1358717462faa"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODk4OTI1OnYy", "diffSide": "RIGHT", "path": "integration-tests/micrometer-native/src/main/java/io/quarkus/it/micrometer/native_mode/MessageResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1Njo0NFrOHreOcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDoyOToyN1rOHrjg8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NjAzNA==", "bodyText": "wildcard imports are not used throughtout the codebase.", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515346034", "createdAt": "2020-10-30T19:56:44Z", "author": {"login": "machi1990"}, "path": "integration-tests/micrometer-native/src/main/java/io/quarkus/it/micrometer/native_mode/MessageResource.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.it.micrometer.native_mode;\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.management.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fd7c690a17ff431d12548a47f1358717462faa"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzMjY4OQ==", "bodyText": "It was also extraneous. ;) I removed it.", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515432689", "createdAt": "2020-10-31T00:29:27Z", "author": {"login": "ebullient"}, "path": "integration-tests/micrometer-native/src/main/java/io/quarkus/it/micrometer/native_mode/MessageResource.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.it.micrometer.native_mode;\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.management.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NjAzNA=="}, "originalCommit": {"oid": "57fd7c690a17ff431d12548a47f1358717462faa"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTQ2NjQ3OnYy", "diffSide": "RIGHT", "path": "integration-tests/micrometer-native/src/main/java/io/quarkus/it/micrometer/native_mode/MessageResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzoxMjowMlrOHris3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDoyMzoyOVrOHrjdqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxOTM1Ng==", "bodyText": "This one doesn't seem to be used?", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515419356", "createdAt": "2020-10-30T23:12:02Z", "author": {"login": "gsmet"}, "path": "integration-tests/micrometer-native/src/main/java/io/quarkus/it/micrometer/native_mode/MessageResource.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.it.micrometer.native_mode;\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.management.*;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n+import io.quarkus.vertx.web.Route;\n+import io.quarkus.vertx.web.RouteBase;\n+import io.vertx.core.http.HttpMethod;\n+\n+@RouteBase(path = \"/message\")\n+public class MessageResource {\n+\n+    private final MeterRegistry registry;\n+    private final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fd7c690a17ff431d12548a47f1358717462faa"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzMTg1MQ==", "bodyText": "you're right. will remove.", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515431851", "createdAt": "2020-10-31T00:23:29Z", "author": {"login": "ebullient"}, "path": "integration-tests/micrometer-native/src/main/java/io/quarkus/it/micrometer/native_mode/MessageResource.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.it.micrometer.native_mode;\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.management.*;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n+import io.quarkus.vertx.web.Route;\n+import io.quarkus.vertx.web.RouteBase;\n+import io.vertx.core.http.HttpMethod;\n+\n+@RouteBase(path = \"/message\")\n+public class MessageResource {\n+\n+    private final MeterRegistry registry;\n+    private final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxOTM1Ng=="}, "originalCommit": {"oid": "57fd7c690a17ff431d12548a47f1358717462faa"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTQ2NzM4OnYy", "diffSide": "RIGHT", "path": "extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/export/StatsdRegistryProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzoxMjo0OVrOHritYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDozOTozNFrOHrjmUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxOTQ5MQ==", "bodyText": "What is the reason why we don't support native mode for all these exporters?", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515419491", "createdAt": "2020-10-30T23:12:49Z", "author": {"login": "gsmet"}, "path": "extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/export/StatsdRegistryProcessor.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.micrometer.deployment.export;\n+\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.steps.NativeBuild;\n+import io.quarkus.micrometer.deployment.MicrometerRegistryProviderBuildItem;\n+import io.quarkus.micrometer.runtime.MicrometerRecorder;\n+import io.quarkus.micrometer.runtime.config.MicrometerConfig;\n+import io.quarkus.micrometer.runtime.export.StatsdMeterRegistryProvider;\n+\n+/**\n+ * Add support for the StatsD Meter Registry. Note that the registry may not\n+ * be available at deployment time for some projects: Avoid direct class\n+ * references.\n+ */\n+public class StatsdRegistryProcessor {\n+    private static final Logger log = Logger.getLogger(StatsdRegistryProcessor.class);\n+\n+    static final String REGISTRY_CLASS_NAME = \"io.micrometer.statsd.StatsdMeterRegistry\";\n+    static final Class<?> REGISTRY_CLASS = MicrometerRecorder.getClassForName(REGISTRY_CLASS_NAME);\n+\n+    public static class StatsdRegistryEnabled implements BooleanSupplier {\n+        MicrometerConfig mConfig;\n+\n+        @Override\n+        public boolean getAsBoolean() {\n+            return REGISTRY_CLASS != null && mConfig.checkRegistryEnabledWithDefault(mConfig.export.statsd);\n+        }\n+    }\n+\n+    @BuildStep(onlyIf = { NativeBuild.class, StatsdRegistryEnabled.class })\n+    MicrometerRegistryProviderBuildItem nativeModeNotSupported() {\n+        log.info(\"The StatsD meter registry does not support running in native mode.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fd7c690a17ff431d12548a47f1358717462faa"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzMjEzOQ==", "bodyText": "Because there is work to do in the upstreams to sort out why they don't work (dependencies, transport requirements, low-level protocol choices). Micrometer core and Prometheus work well in native mode, but some of these other (optional) registries have lower level dependencies that we have to work through.", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515432139", "createdAt": "2020-10-31T00:25:21Z", "author": {"login": "ebullient"}, "path": "extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/export/StatsdRegistryProcessor.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.micrometer.deployment.export;\n+\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.steps.NativeBuild;\n+import io.quarkus.micrometer.deployment.MicrometerRegistryProviderBuildItem;\n+import io.quarkus.micrometer.runtime.MicrometerRecorder;\n+import io.quarkus.micrometer.runtime.config.MicrometerConfig;\n+import io.quarkus.micrometer.runtime.export.StatsdMeterRegistryProvider;\n+\n+/**\n+ * Add support for the StatsD Meter Registry. Note that the registry may not\n+ * be available at deployment time for some projects: Avoid direct class\n+ * references.\n+ */\n+public class StatsdRegistryProcessor {\n+    private static final Logger log = Logger.getLogger(StatsdRegistryProcessor.class);\n+\n+    static final String REGISTRY_CLASS_NAME = \"io.micrometer.statsd.StatsdMeterRegistry\";\n+    static final Class<?> REGISTRY_CLASS = MicrometerRecorder.getClassForName(REGISTRY_CLASS_NAME);\n+\n+    public static class StatsdRegistryEnabled implements BooleanSupplier {\n+        MicrometerConfig mConfig;\n+\n+        @Override\n+        public boolean getAsBoolean() {\n+            return REGISTRY_CLASS != null && mConfig.checkRegistryEnabledWithDefault(mConfig.export.statsd);\n+        }\n+    }\n+\n+    @BuildStep(onlyIf = { NativeBuild.class, StatsdRegistryEnabled.class })\n+    MicrometerRegistryProviderBuildItem nativeModeNotSupported() {\n+        log.info(\"The StatsD meter registry does not support running in native mode.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxOTQ5MQ=="}, "originalCommit": {"oid": "57fd7c690a17ff431d12548a47f1358717462faa"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzNDA2Nw==", "bodyText": "e.g. #11923 (comment) -- There are options i want to consider w/ micrometer team", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515434067", "createdAt": "2020-10-31T00:39:34Z", "author": {"login": "ebullient"}, "path": "extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/export/StatsdRegistryProcessor.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.micrometer.deployment.export;\n+\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.steps.NativeBuild;\n+import io.quarkus.micrometer.deployment.MicrometerRegistryProviderBuildItem;\n+import io.quarkus.micrometer.runtime.MicrometerRecorder;\n+import io.quarkus.micrometer.runtime.config.MicrometerConfig;\n+import io.quarkus.micrometer.runtime.export.StatsdMeterRegistryProvider;\n+\n+/**\n+ * Add support for the StatsD Meter Registry. Note that the registry may not\n+ * be available at deployment time for some projects: Avoid direct class\n+ * references.\n+ */\n+public class StatsdRegistryProcessor {\n+    private static final Logger log = Logger.getLogger(StatsdRegistryProcessor.class);\n+\n+    static final String REGISTRY_CLASS_NAME = \"io.micrometer.statsd.StatsdMeterRegistry\";\n+    static final Class<?> REGISTRY_CLASS = MicrometerRecorder.getClassForName(REGISTRY_CLASS_NAME);\n+\n+    public static class StatsdRegistryEnabled implements BooleanSupplier {\n+        MicrometerConfig mConfig;\n+\n+        @Override\n+        public boolean getAsBoolean() {\n+            return REGISTRY_CLASS != null && mConfig.checkRegistryEnabledWithDefault(mConfig.export.statsd);\n+        }\n+    }\n+\n+    @BuildStep(onlyIf = { NativeBuild.class, StatsdRegistryEnabled.class })\n+    MicrometerRegistryProviderBuildItem nativeModeNotSupported() {\n+        log.info(\"The StatsD meter registry does not support running in native mode.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxOTQ5MQ=="}, "originalCommit": {"oid": "57fd7c690a17ff431d12548a47f1358717462faa"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4124, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}