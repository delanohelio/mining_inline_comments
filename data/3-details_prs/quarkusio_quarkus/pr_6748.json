{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDMzMDI3", "number": 6748, "title": "quarkus:create-extension fixes and enhancements", "bodyText": "This change includes the following improvements:\n\nmake sure the generated extension project can actually be built (by adding if necessary the maven compiler plugin version, quarkus version property, importing quarkus-bom-deployment);\nsupport creating an extension project in an empty dir with a single command, e.g. mvn io.quarkus:quarkus-maven-plugin:999-SNAPSHOT:create-extension -DgroupId=org.acme -DartifactId=my-ext -Dversion=1.0-SNAPSHOT;\nsimplifies and aligns certain mojo parameter property names with quarkus:create.\n\nFixes #3321", "createdAt": "2020-01-23T15:50:45Z", "url": "https://github.com/quarkusio/quarkus/pull/6748", "merged": true, "mergeCommit": {"oid": "857aca543a4943a1f1bd9e0dbaed85e8d907011f"}, "closed": true, "closedAt": "2020-01-30T21:40:41Z", "author": {"login": "aloubyansky"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_W6h8AH2gAyMzY2NDMzMDI3OjRkOTliMmU1MjNlMjVlODNhYWE2YzJmMDQwZjVlMWU4NTBlYTNkNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_YuplAFqTM1MDc1MDI3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4d99b2e523e25e83aaa6c2f040f5e1e850ea3d54", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/4d99b2e523e25e83aaa6c2f040f5e1e850ea3d54", "committedDate": "2020-01-30T09:14:00Z", "message": "Make sure the generated extension project can be actually be built, support creating an extension project in an empty dir with a single command, e.g. mvn io.quarkus:quarkus-maven-plugin:999-SNAPSHOT:create-extension -DgroupId=org.acme -DartifactId=my-ext -Dversion=1.0-SNAPSHOT"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f402a86a58b58c42a4f3447b4e447e482754794c", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/f402a86a58b58c42a4f3447b4e447e482754794c", "committedDate": "2020-01-23T15:37:49Z", "message": "Make sure the generated extension project can be actually be built, support creating an extension project in an empty dir with a single command, e.g. mvn io.quarkus:quarkus-maven-plugin:999-SNAPSHOT:create-extension -DgroupId=org.acme -DartifactId=my-ext -Dversion=1.0-SNAPSHOT"}, "afterCommit": {"oid": "4d99b2e523e25e83aaa6c2f040f5e1e850ea3d54", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/4d99b2e523e25e83aaa6c2f040f5e1e850ea3d54", "committedDate": "2020-01-30T09:14:00Z", "message": "Make sure the generated extension project can be actually be built, support creating an extension project in an empty dir with a single command, e.g. mvn io.quarkus:quarkus-maven-plugin:999-SNAPSHOT:create-extension -DgroupId=org.acme -DartifactId=my-ext -Dversion=1.0-SNAPSHOT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzIwNDM5", "url": "https://github.com/quarkusio/quarkus/pull/6748#pullrequestreview-350720439", "createdAt": "2020-01-30T10:29:39Z", "commit": {"oid": "4d99b2e523e25e83aaa6c2f040f5e1e850ea3d54"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDoyOTozOVrOFjmLbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDoyOTozOVrOFjmLbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2OTk5Nw==", "bodyText": "I am also not sure about this... Can we be sure it will work? If not, I think we should focus on the simple use case for now that we know will work.", "url": "https://github.com/quarkusio/quarkus/pull/6748#discussion_r372869997", "createdAt": "2020-01-30T10:29:39Z", "author": {"login": "geoand"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CreateExtensionMojo.java", "diffHunk": "@@ -411,123 +558,318 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n         }\n \n         if (runtimeBomPath != null) {\n-            runtimeBomPath = basedir.resolve(runtimeBomPath);\n+            runtimeBomPath = basedir.toPath().resolve(runtimeBomPath);\n             if (!Files.exists(runtimeBomPath)) {\n                 throw new MojoFailureException(\"runtimeBomPath does not exist: \" + runtimeBomPath);\n             }\n         }\n         if (deploymentBomPath != null) {\n-            deploymentBomPath = basedir.resolve(deploymentBomPath);\n+            deploymentBomPath = basedir.toPath().resolve(deploymentBomPath);\n             if (!Files.exists(deploymentBomPath)) {\n                 throw new MojoFailureException(\"deploymentBomPath does not exist: \" + deploymentBomPath);\n             }\n         }\n \n-        final Charset charset = Charset.forName(encoding);\n-\n-        final Path basePomXml = basedir.resolve(\"pom.xml\");\n-        if (Files.exists(basePomXml)) {\n-            try (Reader r = Files.newBufferedReader(basePomXml, charset)) {\n-                Model basePom = new MavenXpp3Reader().read(r);\n-                if (!\"pom\".equals(basePom.getPackaging())) {\n+        charset = Charset.forName(encoding);\n+\n+        try {\n+            File rootPom = null;\n+            Model rootModel = null;\n+            boolean importDeploymentBom = true;\n+            boolean setCompilerPluginVersion = true;\n+            boolean setQuarkusVersionProp = true;\n+            if (isCurrentProjectExists()) {\n+                rootPom = getCurrentProjectPom();\n+                rootModel = MojoUtils.readPom(rootPom);\n+                if (!\"pom\".equals(rootModel.getPackaging())) {\n                     throw new MojoFailureException(\n                             \"Can add extension modules only under a project with packaging 'pom'; found: \"\n-                                    + basePom.getPackaging() + \"\");\n+                                    + rootModel.getPackaging() + \"\");\n+                }\n+\n+                if (rootPom.equals(project.getFile())) {\n+                    importDeploymentBom = !hasQuarkusDeploymentBom();\n+                    setCompilerPluginVersion = !project.getPluginManagement().getPluginsAsMap()\n+                            .containsKey(COMPILER_PLUGIN_KEY);\n+                    setQuarkusVersionProp = !project.getProperties().containsKey(QUARKUS_VERSION_PROP);\n+                } else {\n+                    // aloubyansky: not sure we should support this case and not sure it ever worked properly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d99b2e523e25e83aaa6c2f040f5e1e850ea3d54"}, "originalPosition": 359}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzIwNTc0", "url": "https://github.com/quarkusio/quarkus/pull/6748#pullrequestreview-350720574", "createdAt": "2020-01-30T10:29:52Z", "commit": {"oid": "4d99b2e523e25e83aaa6c2f040f5e1e850ea3d54"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDoyOTo1M1rOFjmL0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDoyOTo1M1rOFjmL0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3MDA5OQ==", "bodyText": "Same as above as well :)", "url": "https://github.com/quarkusio/quarkus/pull/6748#discussion_r372870099", "createdAt": "2020-01-30T10:29:53Z", "author": {"login": "geoand"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CreateExtensionMojo.java", "diffHunk": "@@ -411,123 +558,318 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n         }\n \n         if (runtimeBomPath != null) {\n-            runtimeBomPath = basedir.resolve(runtimeBomPath);\n+            runtimeBomPath = basedir.toPath().resolve(runtimeBomPath);\n             if (!Files.exists(runtimeBomPath)) {\n                 throw new MojoFailureException(\"runtimeBomPath does not exist: \" + runtimeBomPath);\n             }\n         }\n         if (deploymentBomPath != null) {\n-            deploymentBomPath = basedir.resolve(deploymentBomPath);\n+            deploymentBomPath = basedir.toPath().resolve(deploymentBomPath);\n             if (!Files.exists(deploymentBomPath)) {\n                 throw new MojoFailureException(\"deploymentBomPath does not exist: \" + deploymentBomPath);\n             }\n         }\n \n-        final Charset charset = Charset.forName(encoding);\n-\n-        final Path basePomXml = basedir.resolve(\"pom.xml\");\n-        if (Files.exists(basePomXml)) {\n-            try (Reader r = Files.newBufferedReader(basePomXml, charset)) {\n-                Model basePom = new MavenXpp3Reader().read(r);\n-                if (!\"pom\".equals(basePom.getPackaging())) {\n+        charset = Charset.forName(encoding);\n+\n+        try {\n+            File rootPom = null;\n+            Model rootModel = null;\n+            boolean importDeploymentBom = true;\n+            boolean setCompilerPluginVersion = true;\n+            boolean setQuarkusVersionProp = true;\n+            if (isCurrentProjectExists()) {\n+                rootPom = getCurrentProjectPom();\n+                rootModel = MojoUtils.readPom(rootPom);\n+                if (!\"pom\".equals(rootModel.getPackaging())) {\n                     throw new MojoFailureException(\n                             \"Can add extension modules only under a project with packaging 'pom'; found: \"\n-                                    + basePom.getPackaging() + \"\");\n+                                    + rootModel.getPackaging() + \"\");\n+                }\n+\n+                if (rootPom.equals(project.getFile())) {\n+                    importDeploymentBom = !hasQuarkusDeploymentBom();\n+                    setCompilerPluginVersion = !project.getPluginManagement().getPluginsAsMap()\n+                            .containsKey(COMPILER_PLUGIN_KEY);\n+                    setQuarkusVersionProp = !project.getProperties().containsKey(QUARKUS_VERSION_PROP);\n+                } else {\n+                    // aloubyansky: not sure we should support this case and not sure it ever worked properly\n+                    // this is about creating an extension project not in the context of the current project from the Maven's plugin perspective\n+                    // kind of a pathological use-case from the Maven's perspective, imo\n+                    final DefaultArtifact rootArtifact = new DefaultArtifact(getGroupId(rootModel),\n+                            rootModel.getArtifactId(), null, rootModel.getPackaging(), getVersion(rootModel));\n+                    try {\n+                        final LocalWorkspace ws = LocalProject.loadWorkspace(rootPom.getParentFile().toPath()).getWorkspace();\n+                        final MavenArtifactResolver mvn = MavenArtifactResolver.builder()\n+                                .setRepositorySystem(MavenRepoInitializer.getRepositorySystem(repoSession.isOffline(), ws))\n+                                .setRepositorySystemSession(repoSession)\n+                                .setRemoteRepositories(repos)\n+                                .setWorkspace(LocalProject.loadWorkspace(rootPom.getParentFile().toPath()).getWorkspace())\n+                                .build();\n+                        final ArtifactDescriptorResult rootDescr = mvn.resolveDescriptor(rootArtifact);\n+                        importDeploymentBom = !hasQuarkusDeploymentBom(rootDescr.getManagedDependencies());\n+                        // TODO determine whether the compiler plugin is configured for the project\n+                        setQuarkusVersionProp = !rootDescr.getProperties().containsKey(QUARKUS_VERSION_PROP);\n+                    } catch (Exception e) {\n+                        throw new MojoExecutionException(\"Failed to resolve \" + rootArtifact + \" descriptor\", e);\n+                    }\n+                }\n+            } else if (this.grandParentRelativePath != null) {\n+                // aloubyansky: not sure we should support this case, same as above", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d99b2e523e25e83aaa6c2f040f5e1e850ea3d54"}, "originalPosition": 381}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzI4OTUx", "url": "https://github.com/quarkusio/quarkus/pull/6748#pullrequestreview-350728951", "createdAt": "2020-01-30T10:43:33Z", "commit": {"oid": "4d99b2e523e25e83aaa6c2f040f5e1e850ea3d54"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDo0MzozM1rOFjmkYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDo0MzozM1rOFjmkYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3NjM4Ng==", "bodyText": "This does work on Windows too, right?\nI see it's also used in one other place in Quarkus so I guess it's OK. But I would like to know why this is prefered instead of what the previous incarnation of the code did.", "url": "https://github.com/quarkusio/quarkus/pull/6748#discussion_r372876386", "createdAt": "2020-01-30T10:43:33Z", "author": {"login": "geoand"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CreateExtensionMojo.java", "diffHunk": "@@ -370,18 +446,89 @@\n     @Parameter(defaultValue = \"${project}\", readonly = true)\n     MavenProject project;\n \n+    /**\n+     * The entry point to Aether, i.e. the component doing all the work.\n+     *\n+     * @component\n+     */\n+    @Component\n+    private RepositorySystem repoSystem;\n+\n+    /**\n+     * The current repository/network configuration of Maven.\n+     *\n+     * @parameter default-value=\"${repositorySystemSession}\"\n+     * @readonly\n+     */\n+    @Parameter(defaultValue = \"${repositorySystemSession}\", readonly = true)\n+    private RepositorySystemSession repoSession;\n+\n+    /**\n+     * The project's remote repositories to use for the resolution of artifacts and their dependencies.\n+     *\n+     * @parameter default-value=\"${project.remoteProjectRepositories}\"\n+     * @readonly\n+     */\n+    @Parameter(defaultValue = \"${project.remoteProjectRepositories}\", readonly = true, required = true)\n+    private List<RemoteRepository> repos;\n+\n+    /**\n+     * The version of {@code org.apache.maven.plugins:maven-compiler-plugin} that should be used for\n+     * the extension project.\n+     */\n+    @Parameter(defaultValue = COMPILER_PLUGIN_DEFAULT_VERSION, required = true, property = \"quarkus.mavenCompilerPluginVersion\")\n+    String compilerPluginVersion;\n+\n+    boolean currentProjectIsBaseDir;\n+\n+    Charset charset;\n+\n     @Override\n     public void execute() throws MojoExecutionException, MojoFailureException {\n \n         if (this.basedir == null) {\n-            this.basedir = Paths.get(\".\").toAbsolutePath().normalize();\n+            currentProjectIsBaseDir = true;\n+            this.basedir = new File(\".\").getAbsoluteFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d99b2e523e25e83aaa6c2f040f5e1e850ea3d54"}, "originalPosition": 264}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzQyMjY1", "url": "https://github.com/quarkusio/quarkus/pull/6748#pullrequestreview-350742265", "createdAt": "2020-01-30T11:05:26Z", "commit": {"oid": "4d99b2e523e25e83aaa6c2f040f5e1e850ea3d54"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTowNToyNlrOFjnM3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTowNToyNlrOFjnM3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg4Njc0OA==", "bodyText": "I also want to see if this work on Windows, but CI should give us an answer soon enough :)", "url": "https://github.com/quarkusio/quarkus/pull/6748#discussion_r372886748", "createdAt": "2020-01-30T11:05:26Z", "author": {"login": "geoand"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CreateExtensionMojo.java", "diffHunk": "@@ -411,123 +558,318 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n         }\n \n         if (runtimeBomPath != null) {\n-            runtimeBomPath = basedir.resolve(runtimeBomPath);\n+            runtimeBomPath = basedir.toPath().resolve(runtimeBomPath);\n             if (!Files.exists(runtimeBomPath)) {\n                 throw new MojoFailureException(\"runtimeBomPath does not exist: \" + runtimeBomPath);\n             }\n         }\n         if (deploymentBomPath != null) {\n-            deploymentBomPath = basedir.resolve(deploymentBomPath);\n+            deploymentBomPath = basedir.toPath().resolve(deploymentBomPath);\n             if (!Files.exists(deploymentBomPath)) {\n                 throw new MojoFailureException(\"deploymentBomPath does not exist: \" + deploymentBomPath);\n             }\n         }\n \n-        final Charset charset = Charset.forName(encoding);\n-\n-        final Path basePomXml = basedir.resolve(\"pom.xml\");\n-        if (Files.exists(basePomXml)) {\n-            try (Reader r = Files.newBufferedReader(basePomXml, charset)) {\n-                Model basePom = new MavenXpp3Reader().read(r);\n-                if (!\"pom\".equals(basePom.getPackaging())) {\n+        charset = Charset.forName(encoding);\n+\n+        try {\n+            File rootPom = null;\n+            Model rootModel = null;\n+            boolean importDeploymentBom = true;\n+            boolean setCompilerPluginVersion = true;\n+            boolean setQuarkusVersionProp = true;\n+            if (isCurrentProjectExists()) {\n+                rootPom = getCurrentProjectPom();\n+                rootModel = MojoUtils.readPom(rootPom);\n+                if (!\"pom\".equals(rootModel.getPackaging())) {\n                     throw new MojoFailureException(\n                             \"Can add extension modules only under a project with packaging 'pom'; found: \"\n-                                    + basePom.getPackaging() + \"\");\n+                                    + rootModel.getPackaging() + \"\");\n+                }\n+\n+                if (rootPom.equals(project.getFile())) {\n+                    importDeploymentBom = !hasQuarkusDeploymentBom();\n+                    setCompilerPluginVersion = !project.getPluginManagement().getPluginsAsMap()\n+                            .containsKey(COMPILER_PLUGIN_KEY);\n+                    setQuarkusVersionProp = !project.getProperties().containsKey(QUARKUS_VERSION_PROP);\n+                } else {\n+                    // aloubyansky: not sure we should support this case and not sure it ever worked properly\n+                    // this is about creating an extension project not in the context of the current project from the Maven's plugin perspective\n+                    // kind of a pathological use-case from the Maven's perspective, imo\n+                    final DefaultArtifact rootArtifact = new DefaultArtifact(getGroupId(rootModel),\n+                            rootModel.getArtifactId(), null, rootModel.getPackaging(), getVersion(rootModel));\n+                    try {\n+                        final LocalWorkspace ws = LocalProject.loadWorkspace(rootPom.getParentFile().toPath()).getWorkspace();\n+                        final MavenArtifactResolver mvn = MavenArtifactResolver.builder()\n+                                .setRepositorySystem(MavenRepoInitializer.getRepositorySystem(repoSession.isOffline(), ws))\n+                                .setRepositorySystemSession(repoSession)\n+                                .setRemoteRepositories(repos)\n+                                .setWorkspace(LocalProject.loadWorkspace(rootPom.getParentFile().toPath()).getWorkspace())\n+                                .build();\n+                        final ArtifactDescriptorResult rootDescr = mvn.resolveDescriptor(rootArtifact);\n+                        importDeploymentBom = !hasQuarkusDeploymentBom(rootDescr.getManagedDependencies());\n+                        // TODO determine whether the compiler plugin is configured for the project\n+                        setQuarkusVersionProp = !rootDescr.getProperties().containsKey(QUARKUS_VERSION_PROP);\n+                    } catch (Exception e) {\n+                        throw new MojoExecutionException(\"Failed to resolve \" + rootArtifact + \" descriptor\", e);\n+                    }\n+                }\n+            } else if (this.grandParentRelativePath != null) {\n+                // aloubyansky: not sure we should support this case, same as above\n+                final File gpPom = getExtensionProjectBaseDir().resolve(this.grandParentRelativePath).normalize()\n+                        .toAbsolutePath().toFile();\n+                if (gpPom.exists()) {\n+                    rootPom = gpPom;\n+                    rootModel = MojoUtils.readPom(gpPom);\n+                    final DefaultArtifact rootArtifact = new DefaultArtifact(getGroupId(rootModel),\n+                            rootModel.getArtifactId(), null, rootModel.getPackaging(), getVersion(rootModel));\n+                    try {\n+                        final LocalWorkspace ws = LocalProject.loadWorkspace(rootPom.getParentFile().toPath()).getWorkspace();\n+                        final MavenArtifactResolver mvn = MavenArtifactResolver.builder()\n+                                .setRepositorySystem(MavenRepoInitializer.getRepositorySystem(repoSession.isOffline(), ws))\n+                                .setRepositorySystemSession(repoSession)\n+                                .setRemoteRepositories(repos)\n+                                .setWorkspace(ws)\n+                                .build();\n+                        final ArtifactDescriptorResult rootDescr = mvn.resolveDescriptor(rootArtifact);\n+                        importDeploymentBom = !hasQuarkusDeploymentBom(rootDescr.getManagedDependencies());\n+                        // TODO determine whether the compiler plugin is configured for the project\n+                        setQuarkusVersionProp = !rootDescr.getProperties().containsKey(QUARKUS_VERSION_PROP);\n+                    } catch (Exception e) {\n+                        throw new MojoExecutionException(\"Failed to resolve \" + rootArtifact + \" descriptor\", e);\n+                    }\n                 }\n-                addModules(basePomXml, basePom, charset);\n-            } catch (IOException e) {\n-                throw new MojoExecutionException(String.format(\"Could not read %s\", basePomXml), e);\n-            } catch (XmlPullParserException e) {\n-                throw new MojoExecutionException(String.format(\"Could not parse %s\", basePomXml), e);\n-            } catch (TemplateException e) {\n-                throw new MojoExecutionException(String.format(\"Could not process a FreeMarker template\"), e);\n             }\n-        } else {\n-            newParent(basedir);\n+\n+            final TemplateParams templateParams = getTemplateParams(rootModel);\n+            final Configuration cfg = getTemplateConfig();\n+\n+            generateExtensionProjects(cfg, templateParams);\n+            if (setQuarkusVersionProp) {\n+                setQuarkusVersionProp(getExtensionProjectBaseDir().resolve(\"pom.xml\").toFile());\n+            }\n+            if (importDeploymentBom) {\n+                addQuarkusDeploymentBom(getExtensionProjectBaseDir().resolve(\"pom.xml\").toFile());\n+            }\n+            if (setCompilerPluginVersion) {\n+                setCompilerPluginVersion(getExtensionProjectBaseDir().resolve(\"pom.xml\").toFile());\n+            }\n+            if (rootModel != null) {\n+                addModules(rootPom.toPath(), templateParams, rootModel);\n+            }\n+\n+            if (runtimeBomPath != null) {\n+                getLog().info(\n+                        String.format(\"Adding [%s] to dependencyManagement in [%s]\", templateParams.artifactId,\n+                                runtimeBomPath));\n+                List<PomTransformer.Transformation> transformations = new ArrayList<PomTransformer.Transformation>();\n+                transformations\n+                        .add(Transformation.addManagedDependency(templateParams.groupId, templateParams.artifactId,\n+                                templateParams.bomEntryVersion));\n+                for (Gavtcs gavtcs : templateParams.additionalRuntimeDependencies) {\n+                    getLog().info(String.format(\"Adding [%s] to dependencyManagement in [%s]\", gavtcs, runtimeBomPath));\n+                    transformations.add(Transformation.addManagedDependency(gavtcs));\n+                }\n+                pomTransformer(runtimeBomPath).transform(transformations);\n+            }\n+            if (deploymentBomPath != null) {\n+                final String aId = templateParams.artifactId + \"-deployment\";\n+                getLog().info(String.format(\"Adding [%s] to dependencyManagement in [%s]\", aId, deploymentBomPath));\n+                pomTransformer(deploymentBomPath)\n+                        .transform(Transformation.addManagedDependency(templateParams.groupId, aId,\n+                                templateParams.bomEntryVersion));\n+            }\n+            if (itestParentPath != null) {\n+                generateItest(cfg, templateParams);\n+            }\n+        } catch (IOException e) {\n+            throw new MojoExecutionException(String.format(\"Could not read %s\", project.getFile()), e);\n+        } catch (TemplateException e) {\n+            throw new MojoExecutionException(String.format(\"Could not process a FreeMarker template\"), e);\n         }\n     }\n \n-    void addModules(Path basePomXml, Model basePom, Charset charset)\n-            throws IOException, TemplateException, MojoFailureException, MojoExecutionException {\n+    private void setQuarkusVersionProp(File pom) throws IOException, MojoExecutionException {\n+        pomTransformer(pom.toPath()).transform(Transformation.addProperty(QUARKUS_VERSION_PROP,\n+                quarkusVersion.equals(DEFAULT_QUARKUS_VERSION) ? getPluginVersion() : quarkusVersion));\n+    }\n+\n+    private void setCompilerPluginVersion(File pom) throws IOException {\n+        pomTransformer(pom.toPath()).transform(Transformation.addProperty(COMPILER_PLUGIN_VERSION_PROP, compilerPluginVersion));\n+        pomTransformer(pom.toPath())\n+                .transform(Transformation.addManagedPlugin(\n+                        MojoUtils.plugin(COMPILER_PLUGIN_GROUP_ID, COMPILER_PLUGIN_ARTIFACT_ID,\n+                                COMPILER_PLUGIN_VERSION_POM_EXPR)));\n+    }\n+\n+    private void addQuarkusDeploymentBom(File pom) throws IOException, MojoExecutionException {\n+        addQuarkusDeploymentBom(MojoUtils.readPom(pom), pom);\n+    }\n+\n+    private void addQuarkusDeploymentBom(Model model, File file) throws IOException, MojoExecutionException {\n+        pomTransformer(file.toPath())\n+                .transform(Transformation.addManagedDependency(\n+                        new Gavtcs(platformGroupId, platformArtifactId, QUARKUS_VERSION_POM_EXPR, \"pom\", null, \"import\")));\n+    }\n \n-        final Configuration cfg = new Configuration(Configuration.VERSION_2_3_28);\n-        cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);\n-        cfg.setTemplateLoader(createTemplateLoader(basedir, templatesUriBase));\n-        cfg.setDefaultEncoding(charset.name());\n-        cfg.setInterpolationSyntax(Configuration.SQUARE_BRACKET_INTERPOLATION_SYNTAX);\n-        cfg.setTagSyntax(Configuration.SQUARE_BRACKET_TAG_SYNTAX);\n-\n-        TemplateParams model = new TemplateParams();\n-\n-        model.artifactId = artifactId;\n-        model.artifactIdPrefix = artifactIdPrefix;\n-        model.artifactIdBase = artifactIdBase;\n-        model.artifactIdBaseCamelCase = toCapCamelCase(model.artifactIdBase);\n-\n-        model.groupId = this.groupId != null ? this.groupId : getGroupId(basePom);\n-        model.version = this.version != null ? this.version : getVersion(basePom);\n-\n-        model.namePrefix = namePrefix;\n-        model.nameBase = nameBase;\n-        model.nameSegmentDelimiter = nameSegmentDelimiter;\n-        model.assumeManaged = detectAssumeManaged();\n-        model.quarkusVersion = quarkusVersion.replace('@', '$');\n-        model.bomEntryVersion = bomEntryVersion.replace('@', '$');\n-\n-        model.grandParentGroupId = grandParentGroupId != null ? grandParentGroupId : getGroupId(basePom);\n-        model.grandParentArtifactId = grandParentArtifactId != null ? grandParentArtifactId : basePom.getArtifactId();\n-        model.grandParentVersion = grandParentVersion != null ? grandParentVersion : getVersion(basePom);\n-        model.grandParentRelativePath = grandParentRelativePath != null ? grandParentRelativePath : \"../pom.xml\";\n-        model.javaPackageBase = javaPackageBase != null ? javaPackageBase\n-                : getJavaPackage(model.groupId, javaPackageInfix, artifactId);\n-        model.additionalRuntimeDependencies = getAdditionalRuntimeDependencies();\n-        model.runtimeBomPathSet = runtimeBomPath != null;\n-\n-        evalTemplate(cfg, \"parent-pom.xml\", basedir.resolve(model.artifactIdBase + \"/pom.xml\"), charset, model);\n-\n-        Files.createDirectories(basedir\n-                .resolve(model.artifactIdBase + \"/runtime/src/main/java/\" + model.javaPackageBase.replace('.', '/')));\n-        evalTemplate(cfg, \"runtime-pom.xml\", basedir.resolve(model.artifactIdBase + \"/runtime/pom.xml\"), charset,\n-                model);\n-\n-        evalTemplate(cfg, \"deployment-pom.xml\", basedir.resolve(model.artifactIdBase + \"/deployment/pom.xml\"), charset,\n-                model);\n-        final Path processorPath = basedir\n-                .resolve(model.artifactIdBase + \"/deployment/src/main/java/\" + model.javaPackageBase.replace('.', '/')\n-                        + \"/deployment/\" + model.artifactIdBaseCamelCase + \"Processor.java\");\n-        evalTemplate(cfg, \"Processor.java\", processorPath, charset, model);\n-\n-        if (!basePom.getModules().contains(model.artifactIdBase)) {\n-            getLog().info(String.format(\"Adding module [%s] to [%s]\", model.artifactIdBase, basePomXml));\n-            new PomTransformer(basePomXml, charset).transform(Transformation.addModule(model.artifactIdBase));\n+    private String getPluginVersion() throws MojoExecutionException {\n+        return CreateUtils.resolvePluginInfo(CreateExtensionMojo.class).getVersion();\n+    }\n+\n+    private boolean hasQuarkusDeploymentBom() {\n+        if (project.getDependencyManagement() == null) {\n+            return false;\n         }\n-        if (runtimeBomPath != null) {\n-            getLog().info(\n-                    String.format(\"Adding [%s] to dependencyManagement in [%s]\", model.artifactId, runtimeBomPath));\n-            List<PomTransformer.Transformation> transformations = new ArrayList<PomTransformer.Transformation>();\n-            transformations\n-                    .add(Transformation.addManagedDependency(model.groupId, model.artifactId, model.bomEntryVersion));\n-            for (Gavtcs gavtcs : model.additionalRuntimeDependencies) {\n-                getLog().info(String.format(\"Adding [%s] to dependencyManagement in [%s]\", gavtcs, runtimeBomPath));\n-                transformations.add(Transformation.addManagedDependency(gavtcs));\n+        for (org.apache.maven.model.Dependency dep : project.getDependencyManagement().getDependencies()) {\n+            if (dep.getArtifactId().equals(\"quarkus-core-deployment\")\n+                    && dep.getGroupId().equals(\"io.quarkus\")) {\n+                // this is not a 100% accurate check but practically valid\n+                return true;\n             }\n-            new PomTransformer(runtimeBomPath, charset).transform(transformations);\n         }\n-        if (deploymentBomPath != null) {\n-            final String aId = model.artifactId + \"-deployment\";\n-            getLog().info(String.format(\"Adding [%s] to dependencyManagement in [%s]\", aId, deploymentBomPath));\n-            new PomTransformer(deploymentBomPath, charset)\n-                    .transform(Transformation.addManagedDependency(model.groupId, aId, model.bomEntryVersion));\n+        return false;\n+    }\n+\n+    private boolean hasQuarkusDeploymentBom(List<Dependency> deps) {\n+        if (deps == null) {\n+            return false;\n+        }\n+        for (Dependency dep : deps) {\n+            if (dep.getArtifact().getArtifactId().equals(\"quarkus-core-deployment\")\n+                    && dep.getArtifact().getGroupId().equals(\"io.quarkus\")) {\n+                // this is not a 100% accurate check but practically valid\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * @return true if the goal is executed in an existing project\n+     */\n+    private boolean isCurrentProjectExists() {\n+        return currentProjectIsBaseDir ? project.getFile() != null\n+                : Files.exists(basedir.toPath().resolve(\"pom.xml\"));\n+    }\n+\n+    private File getCurrentProjectPom() {\n+        if (currentProjectIsBaseDir) {\n+            return project.getFile() == null ? new File(project.getBasedir(), \"pom.xml\") : project.getFile();\n         }\n-        if (itestParentPath != null) {\n-            generateItest(cfg, charset, model);\n+        return new File(basedir, \"pom.xml\");\n+    }\n+\n+    private Path getExtensionProjectBaseDir() {\n+        if (currentProjectIsBaseDir) {\n+            return project.getBasedir() == null ? basedir.toPath().resolve(artifactIdBase)\n+                    : project.getBasedir().toPath().resolve(artifactIdBase);\n         }\n+        return new File(basedir, artifactIdBase).toPath();\n+    }\n+\n+    private Path getExtensionRuntimeBaseDir() {\n+        return getExtensionProjectBaseDir().resolve(\"runtime\");\n+    }\n \n+    private Path getExtensionDeploymentBaseDir() {\n+        return getExtensionProjectBaseDir().resolve(\"deployment\");\n     }\n \n-    void generateItest(Configuration cfg, Charset charset, TemplateParams model)\n-            throws MojoFailureException, MojoExecutionException, TemplateException {\n-        final Path itestParentAbsPath = basedir.resolve(itestParentPath).toAbsolutePath();\n+    void addModules(Path basePomXml, TemplateParams templateParams, Model basePom)\n+            throws IOException, TemplateException, MojoFailureException, MojoExecutionException {\n+        if (!basePom.getModules().contains(templateParams.artifactIdBase)) {\n+            getLog().info(String.format(\"Adding module [%s] to [%s]\", templateParams.artifactIdBase, basePomXml));\n+            pomTransformer(basePomXml).transform(Transformation.addModule(templateParams.artifactIdBase));\n+        }\n+    }\n+\n+    private void generateExtensionProjects(Configuration cfg, TemplateParams templateParams)\n+            throws IOException, TemplateException, MojoExecutionException {\n+        evalTemplate(cfg, \"parent-pom.xml\", getExtensionProjectBaseDir().resolve(\"pom.xml\"), templateParams);\n+\n+        Files.createDirectories(\n+                getExtensionRuntimeBaseDir().resolve(\"src/main/java\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d99b2e523e25e83aaa6c2f040f5e1e850ea3d54"}, "originalPosition": 635}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzUwMjcy", "url": "https://github.com/quarkusio/quarkus/pull/6748#pullrequestreview-350750272", "createdAt": "2020-01-30T11:20:50Z", "commit": {"oid": "4d99b2e523e25e83aaa6c2f040f5e1e850ea3d54"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 131, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}