{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjI2OTE1", "number": 7086, "title": "Add a composite OidcAuthenticationMechanism", "bodyText": "Fixes #6997.\nFixes #7013.", "createdAt": "2020-02-07T22:25:01Z", "url": "https://github.com/quarkusio/quarkus/pull/7086", "merged": true, "mergeCommit": {"oid": "6b8790792979dac814ea4efc6ec3f21d248e8910"}, "closed": true, "closedAt": "2020-02-18T09:15:57Z", "author": {"login": "sberyozkin"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCHIIigFqTM1NTQ3NjMwOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFeGljgFqTM2MDE2MzA2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDc2MzA4", "url": "https://github.com/quarkusio/quarkus/pull/7086#pullrequestreview-355476308", "createdAt": "2020-02-07T22:32:09Z", "commit": {"oid": "b30b3080b424e250a1e7013b5c606c4454605a90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjozMjowOVrOFnMMyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjozMjowOVrOFnMMyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzODY2Nw==", "bodyText": "@pedroigor, @stuartwdouglas  Hi, this is a work in progress, I have one more test in the works which combines the service and web-app tenants. Happy enough with how it is working out, the only problem is resolving the configContext here deadlocks in oidc-tenancy tests :-) in the sync lock DefaultTenantConfigResolver.\nPretty sure it can be reproduced if for example BearerAuthenticationMechanism.authenticate on the master  would try to resolve early in its authenticate. Nearly there though...Thanks", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r376638667", "createdAt": "2020-02-07T22:32:09Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver tenantConfigResolver;\n+    private BearerAuthenticationMechanism bearerAuth = new BearerAuthenticationMechanism();\n+    private CodeAuthenticationMechanism codeAuth = new CodeAuthenticationMechanism();\n+\n+    @Override\n+    public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n+            IdentityProviderManager identityProviderManager) {\n+        TenantConfigContext configContext = tenantConfigResolver.resolve(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b30b3080b424e250a1e7013b5c606c4454605a90"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b30b3080b424e250a1e7013b5c606c4454605a90", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/b30b3080b424e250a1e7013b5c606c4454605a90", "committedDate": "2020-02-07T21:21:16Z", "message": "Add a composite OidcAuthenticationMechanism"}, "afterCommit": {"oid": "13598a8107fdbee2e548aa970ae2cca3cd1c6561", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/13598a8107fdbee2e548aa970ae2cca3cd1c6561", "committedDate": "2020-02-09T19:24:39Z", "message": "Add a composite OidcAuthenticationMechanism"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1ODk2NzIz", "url": "https://github.com/quarkusio/quarkus/pull/7086#pullrequestreview-355896723", "createdAt": "2020-02-10T12:26:02Z", "commit": {"oid": "13598a8107fdbee2e548aa970ae2cca3cd1c6561"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjoyNjowMlrOFnkNNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjoyNjowMlrOFnkNNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMTk4OA==", "bodyText": "It would be nice if we could create the mechanisms only when they are necessary. Also, I think most deployments will just rely on a single mechanism as they will not be using multi-tenancy at all.\nSo, I'm wondering if we could:\n\nDecide for a specific mechanism at build time depending on the existence of tenants\nMaybe too much, but if in a multi-tenancy deployment, create the mechanism only if necessary depending on the tenant type", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377031988", "createdAt": "2020-02-10T12:26:02Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private BearerAuthenticationMechanism bearerAuth = new BearerAuthenticationMechanism();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13598a8107fdbee2e548aa970ae2cca3cd1c6561"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "885e12110a79c5e136549cfa10a8aacc0091e66f", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/885e12110a79c5e136549cfa10a8aacc0091e66f", "committedDate": "2020-02-10T19:03:22Z", "message": "Adding multitenancy test"}, "afterCommit": {"oid": "4099e7dac2fc5167e83cb8f6dc50f5da8486f329", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/4099e7dac2fc5167e83cb8f6dc50f5da8486f329", "committedDate": "2020-02-10T21:26:21Z", "message": "Add a composite OidcAuthenticationMechanism"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4099e7dac2fc5167e83cb8f6dc50f5da8486f329", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/4099e7dac2fc5167e83cb8f6dc50f5da8486f329", "committedDate": "2020-02-10T21:26:21Z", "message": "Add a composite OidcAuthenticationMechanism"}, "afterCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/3ea8c62478a4950d9faf37cf000557992ab6c814", "committedDate": "2020-02-11T12:52:12Z", "message": "Add a composite OidcAuthenticationMechanism"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDEwMjU2", "url": "https://github.com/quarkusio/quarkus/pull/7086#pullrequestreview-357010256", "createdAt": "2020-02-11T21:30:40Z", "commit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTozMDo0MFrOFoZ1-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTozNzoxMFrOFoaCww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMDc3Nw==", "bodyText": "Why are you doing this lazy creation? These objects don't have any state, there is no measurable benefit to creating them lazily, but in return you add a volatile reads to every request which is more expensive.", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377910777", "createdAt": "2020-02-11T21:30:40Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private volatile BearerAuthenticationMechanism bearerAuth;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMTQwNg==", "bodyText": "Not that it matters, but this can actually create multiple instances here if multiple threads hit it at the same time.", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377911406", "createdAt": "2020-02-11T21:31:52Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private volatile BearerAuthenticationMechanism bearerAuth;\n+    private volatile CodeAuthenticationMechanism codeAuth;\n+\n+    @Override\n+    public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n+            IdentityProviderManager identityProviderManager) {\n+        return isWebApp(context) ? getCodeAuth().authenticate(context, identityProviderManager, resolver)\n+                : getBearerAuth().authenticate(context, identityProviderManager, resolver);\n+    }\n+\n+    @Override\n+    public CompletionStage<ChallengeData> getChallenge(RoutingContext context) {\n+        return isWebApp(context) ? getCodeAuth().getChallenge(context, resolver)\n+                : getBearerAuth().getChallenge(context, resolver);\n+    }\n+\n+    private CodeAuthenticationMechanism getCodeAuth() {\n+        if (codeAuth == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMjc0MA==", "bodyText": "It looks like resolve is now called lots of times per request. I think it might make sense to add some code to DefaultTenantResolver that stores the result in the routing context so subsequent invocations are effectively cached.", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377912740", "createdAt": "2020-02-11T21:34:36Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -124,7 +120,9 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n     }\n \n     private CompletionStage<SecurityIdentity> performCodeFlow(IdentityProviderManager identityProviderManager,\n-            RoutingContext context) {\n+            RoutingContext context, DefaultTenantConfigResolver resolver) {\n+        TenantConfigContext configContext = resolver.resolve(context, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMzU1OQ==", "bodyText": "I know this is not part of the PR, but this code should be in a PostCostruct method", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377913559", "createdAt": "2020-02-11T21:36:11Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java", "diffHunk": "@@ -26,12 +26,21 @@\n     private volatile TenantConfigContext defaultTenant;\n     private volatile Function<OidcTenantConfig, TenantConfigContext> tenantConfigContextFactory;\n \n-    TenantConfigContext resolve(RoutingContext context) {\n+    /**\n+     * Resolve {@linkplain TenantConfigContext} which contains the tenant configuration and\n+     * the active OIDC connection instance which may be null.\n+     * \n+     * @param context the current request context\n+     * @param create if true then the OIDC connection must be available or established\n+     *        for the resolution to be successful\n+     * @return\n+     */\n+    TenantConfigContext resolve(RoutingContext context, boolean create) {\n         if (tenantConfigResolver.isAmbiguous()) {\n             throw new IllegalStateException(\"Multiple \" + TenantConfigResolver.class + \" beans registered\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNDA1MQ==", "bodyText": "This should be managed in the build parent.", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377914051", "createdAt": "2020-02-11T21:37:10Z", "author": {"login": "stuartwdouglas"}, "path": "integration-tests/oidc-tenancy/pom.xml", "diffHunk": "@@ -16,6 +16,7 @@\n \n     <properties>\n         <keycloak.url>http://localhost:8180/auth</keycloak.url>\n+        <htmlunit.version>2.36.0</htmlunit.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/3ea8c62478a4950d9faf37cf000557992ab6c814", "committedDate": "2020-02-11T12:52:12Z", "message": "Add a composite OidcAuthenticationMechanism"}, "afterCommit": {"oid": "467df4253f8f992b8227ca132346d3f626aab369", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/467df4253f8f992b8227ca132346d3f626aab369", "committedDate": "2020-02-13T18:47:31Z", "message": "Add a composite OidcAuthenticationMechanism"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "467df4253f8f992b8227ca132346d3f626aab369", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/467df4253f8f992b8227ca132346d3f626aab369", "committedDate": "2020-02-13T18:47:31Z", "message": "Add a composite OidcAuthenticationMechanism"}, "afterCommit": {"oid": "ee030f69afc6bb2cb1eaa061274fa01e7bc7d438", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/ee030f69afc6bb2cb1eaa061274fa01e7bc7d438", "committedDate": "2020-02-13T18:48:27Z", "message": "Add a composite OidcAuthenticationMechanism"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16cfb50d7b3b3dbd75beddc0fce1017d9c9e9e26", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/16cfb50d7b3b3dbd75beddc0fce1017d9c9e9e26", "committedDate": "2020-02-14T10:19:03Z", "message": "Add a composite OidcAuthenticationMechanism"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee030f69afc6bb2cb1eaa061274fa01e7bc7d438", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/ee030f69afc6bb2cb1eaa061274fa01e7bc7d438", "committedDate": "2020-02-13T18:48:27Z", "message": "Add a composite OidcAuthenticationMechanism"}, "afterCommit": {"oid": "16cfb50d7b3b3dbd75beddc0fce1017d9c9e9e26", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/16cfb50d7b3b3dbd75beddc0fce1017d9c9e9e26", "committedDate": "2020-02-14T10:19:03Z", "message": "Add a composite OidcAuthenticationMechanism"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMTYzMDY0", "url": "https://github.com/quarkusio/quarkus/pull/7086#pullrequestreview-360163064", "createdAt": "2020-02-18T09:00:03Z", "commit": {"oid": "16cfb50d7b3b3dbd75beddc0fce1017d9c9e9e26"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4852, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}