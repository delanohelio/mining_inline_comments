{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMzA2MzM4", "number": 7510, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1ODo0MFrODmM9-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNzoyOFrODmT2mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzg0OTU1OnYy", "diffSide": "RIGHT", "path": "integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/TestEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1ODo0MFrOFze_AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzo0NzoyOVrOFzofrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyOTM0NQ==", "bodyText": "Let's be thorough and test the rest of the methods that should throw.", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389529345", "createdAt": "2020-03-09T08:58:40Z", "author": {"login": "FroMage"}, "path": "integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/TestEndpoint.java", "diffHunk": "@@ -851,6 +859,47 @@ private void testPaging(PanacheQuery<Person> query) {\n \n         Assertions.assertEquals(7, query.count());\n         Assertions.assertEquals(3, query.pageCount());\n+\n+        // mix page with range\n+        persons = query.page(0, 3).range(0, 1).list();\n+        Assertions.assertEquals(2, persons.size());\n+        Assertions.assertEquals(\"stef0\", persons.get(0).name);\n+        Assertions.assertEquals(\"stef1\", persons.get(1).name);\n+    }\n+\n+    private void testRange(PanacheQuery<Person> query) {\n+        List<Person> persons = query.range(0, 2).list();\n+        Assertions.assertEquals(3, persons.size());\n+        Assertions.assertEquals(\"stef0\", persons.get(0).name);\n+        Assertions.assertEquals(\"stef1\", persons.get(1).name);\n+        Assertions.assertEquals(\"stef2\", persons.get(2).name);\n+\n+        persons = query.range(3, 5).list();\n+        Assertions.assertEquals(3, persons.size());\n+        Assertions.assertEquals(\"stef3\", persons.get(0).name);\n+        Assertions.assertEquals(\"stef4\", persons.get(1).name);\n+        Assertions.assertEquals(\"stef5\", persons.get(2).name);\n+\n+        persons = query.range(6, 8).list();\n+        Assertions.assertEquals(1, persons.size());\n+        Assertions.assertEquals(\"stef6\", persons.get(0).name);\n+\n+        persons = query.range(8, 12).list();\n+        Assertions.assertEquals(0, persons.size());\n+\n+        // mix range with page\n+        try {\n+            // invalid\n+            query.range(0, 2).nextPage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "397387847299b79dd9b88b606845e5bb62d6c1ee"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY4NTE2NA==", "bodyText": "I added more test, and discover a missing check so worth it ;)", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389685164", "createdAt": "2020-03-09T13:47:29Z", "author": {"login": "loicmathieu"}, "path": "integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/TestEndpoint.java", "diffHunk": "@@ -851,6 +859,47 @@ private void testPaging(PanacheQuery<Person> query) {\n \n         Assertions.assertEquals(7, query.count());\n         Assertions.assertEquals(3, query.pageCount());\n+\n+        // mix page with range\n+        persons = query.page(0, 3).range(0, 1).list();\n+        Assertions.assertEquals(2, persons.size());\n+        Assertions.assertEquals(\"stef0\", persons.get(0).name);\n+        Assertions.assertEquals(\"stef1\", persons.get(1).name);\n+    }\n+\n+    private void testRange(PanacheQuery<Person> query) {\n+        List<Person> persons = query.range(0, 2).list();\n+        Assertions.assertEquals(3, persons.size());\n+        Assertions.assertEquals(\"stef0\", persons.get(0).name);\n+        Assertions.assertEquals(\"stef1\", persons.get(1).name);\n+        Assertions.assertEquals(\"stef2\", persons.get(2).name);\n+\n+        persons = query.range(3, 5).list();\n+        Assertions.assertEquals(3, persons.size());\n+        Assertions.assertEquals(\"stef3\", persons.get(0).name);\n+        Assertions.assertEquals(\"stef4\", persons.get(1).name);\n+        Assertions.assertEquals(\"stef5\", persons.get(2).name);\n+\n+        persons = query.range(6, 8).list();\n+        Assertions.assertEquals(1, persons.size());\n+        Assertions.assertEquals(\"stef6\", persons.get(0).name);\n+\n+        persons = query.range(8, 12).list();\n+        Assertions.assertEquals(0, persons.size());\n+\n+        // mix range with page\n+        try {\n+            // invalid\n+            query.range(0, 2).nextPage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyOTM0NQ=="}, "originalCommit": {"oid": "397387847299b79dd9b88b606845e5bb62d6c1ee"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDkyMzM2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzo1OToyNFrOFzpVDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzo1OToyNFrOFzpVDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY5ODgzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `PanacheQuery` also allow range based query instead of page based.\n          \n          \n            \n            `PanacheQuery` also allows range-based queries.", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389698831", "createdAt": "2020-03-09T13:59:24Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -440,6 +440,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDkyNzgxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowMDowMVrOFzpX8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowMDowMVrOFzpX8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY5OTU2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // make it use a range or start index 0 and last index 25.\n          \n          \n            \n            // make it use a range: start at index 0 until index 25 (inclusive).", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389699569", "createdAt": "2020-03-09T14:00:01Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -440,6 +440,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDkzNTUzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowMTowOFrOFzpdAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoyNTozNVrOF4uOkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwMDg2NQ==", "bodyText": "Oh hold on, I thought the range was inclusive on the last index? If it is, then you get element 25 for the previous range and this one too, no?", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389700865", "createdAt": "2020-03-09T14:01:08Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -440,6 +440,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.\n+livingPersons.range(0, 25);\n+\n+// get the range\n+List<Person> firstRange = livingPersons.list();\n+\n+// to get the next range, you need to call range again", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNjEwNg==", "bodyText": "Yes, the example should be range(0, 24) then range(25, 49) to have two range of 25 items as range starts at 0.\nI'll update the documentation.\nWe can decide to make it start at 1 if needed, but in IT stuff starts at 0 ;)", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389726106", "createdAt": "2020-03-09T14:29:45Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -440,6 +440,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.\n+livingPersons.range(0, 25);\n+\n+// get the range\n+List<Person> firstRange = livingPersons.list();\n+\n+// to get the next range, you need to call range again", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwMDg2NQ=="}, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyMTk3MQ==", "bodyText": "OK fine.", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r395021971", "createdAt": "2020-03-19T13:25:35Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -440,6 +440,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.\n+livingPersons.range(0, 25);\n+\n+// get the range\n+List<Person> firstRange = livingPersons.list();\n+\n+// to get the next range, you need to call range again", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwMDg2NQ=="}, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDk0MzMwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowMjoyMFrOFzpiOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowMjoyMFrOFzpiOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwMjIwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You cannot mix range and page, if you use a range, all page related methods will throw an `UnsupportedOperationException`;\n          \n          \n            \n            You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389702201", "createdAt": "2020-03-09T14:02:20Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -440,6 +440,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.\n+livingPersons.range(0, 25);\n+\n+// get the range\n+List<Person> firstRange = livingPersons.list();\n+\n+// to get the next range, you need to call range again\n+List<Person> secondRange = livingPersons.range(25, 50).list();\n+----\n+\n+[WARNING]\n+----\n+You cannot mix range and page, if you use a range, all page related methods will throw an `UnsupportedOperationException`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDk0OTY0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowMzoyMlrOFzpmYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowMzoyMlrOFzpmYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwMzI2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            you must use a method that defines a new page before using them : `page(Page)` or `page(int, int)`.\n          \n          \n            \n            you can switch back to paging using `page(Page)` or `page(int, int)`.", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389703266", "createdAt": "2020-03-09T14:03:22Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -440,6 +440,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.\n+livingPersons.range(0, 25);\n+\n+// get the range\n+List<Person> firstRange = livingPersons.list();\n+\n+// to get the next range, you need to call range again\n+List<Person> secondRange = livingPersons.range(25, 50).list();\n+----\n+\n+[WARNING]\n+----\n+You cannot mix range and page, if you use a range, all page related methods will throw an `UnsupportedOperationException`;\n+you must use a method that defines a new page before using them : `page(Page)` or `page(int, int)`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDk1MzA3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowMzo0NFrOFzpocA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowMzo0NFrOFzpocA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwMzc5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `PanacheQuery` also allow range based query instead of page based.\n          \n          \n            \n            `PanacheQuery` also allows range-based queries.", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389703792", "createdAt": "2020-03-09T14:03:44Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -437,6 +437,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDk2MDQxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNDo1NVrOFzptVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNDo1NVrOFzptVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNTA0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // make it use a range or start index 0 and last index 25.\n          \n          \n            \n            // make it use a range: start at index 0 until index 25 (inclusive).", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389705046", "createdAt": "2020-03-09T14:04:55Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -437,6 +437,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDk2MTkxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNTowOVrOFzpuZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNTowOVrOFzpuZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNTMxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You cannot mix range and page, if you use a range, all page related methods will throw an `UnsupportedOperationException`;\n          \n          \n            \n            You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389705318", "createdAt": "2020-03-09T14:05:09Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -437,6 +437,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.\n+livingPersons.range(0, 25);\n+\n+// get the range\n+List<Person> firstRange = livingPersons.list();\n+\n+// to get the next range, you need to call range again\n+List<Person> secondRange = livingPersons.range(25, 50).list();\n+----\n+\n+[WARNING]\n+----\n+You cannot mix range and page, if you use a range, all page related methods will throw an `UnsupportedOperationException`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDk2MzMwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNToyMFrOFzpvPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNToyMFrOFzpvPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNTUzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            you must use a method that defines a new page before using them : `page(Page)` or `page(int, int)`.\n          \n          \n            \n            you can switch back to paging using `page(Page)` or `page(int, int)`.", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389705534", "createdAt": "2020-03-09T14:05:20Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -437,6 +437,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.\n+livingPersons.range(0, 25);\n+\n+// get the range\n+List<Person> firstRange = livingPersons.list();\n+\n+// to get the next range, you need to call range again\n+List<Person> secondRange = livingPersons.range(25, 50).list();\n+----\n+\n+[WARNING]\n+----\n+You cannot mix range and page, if you use a range, all page related methods will throw an `UnsupportedOperationException`;\n+you must use a method that defines a new page before using them : `page(Page)` or `page(int, int)`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDk2NzMyOnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/PanacheQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNTo1NVrOFzpx5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNTo1NVrOFzpx5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNjIxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <T extends Entity> PanacheQuery<T> range(int startIdx, int lastIdx);\n          \n          \n            \n                public <T extends Entity> PanacheQuery<T> range(int startIndex, int lastIndex);", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389706213", "createdAt": "2020-03-09T14:05:55Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/PanacheQuery.java", "diffHunk": "@@ -116,6 +116,16 @@\n      */\n     public Page page();\n \n+    /**\n+     * Switch the query to use a fixed range (start index - last index) instead of a page.\n+     * As the range is fixed, subsequent pagination of the query is not possible.\n+     *\n+     * @param startIdx the index of the first element, starting at 0\n+     * @param lastIdx the index of the last element\n+     * @return this query, modified\n+     */\n+    public <T extends Entity> PanacheQuery<T> range(int startIdx, int lastIdx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDk3MTk5OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNjozNVrOFzp1Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNjozNVrOFzp1Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNzAyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <T extends Entity> PanacheQuery<T> range(int startIdx, int lastIdx);\n          \n          \n            \n                public <T extends Entity> PanacheQuery<T> range(int startIndex, int lastIndex);", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389707022", "createdAt": "2020-03-09T14:06:35Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheQuery.java", "diffHunk": "@@ -116,6 +116,16 @@\n      */\n     public Page page();\n \n+    /**\n+     * Switch the query to use a fixed range (start index - last index) instead of a page.\n+     * As the range is fixed, subsequent pagination of the query is not possible.\n+     *\n+     * @param startIdx the index of the first element, starting at 0\n+     * @param lastIdx the index of the last element\n+     * @return this query, modified\n+     */\n+    public <T extends Entity> PanacheQuery<T> range(int startIdx, int lastIdx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDk3MzQ1OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/reactive/ReactivePanacheQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNjo0OVrOFzp2Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNjo0OVrOFzp2Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNzI4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <T extends Entity> ReactivePanacheQuery<T> range(int startIdx, int lastIdx);\n          \n          \n            \n                public <T extends Entity> ReactivePanacheQuery<T> range(int startIndex, int lastIndex);", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389707286", "createdAt": "2020-03-09T14:06:49Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/reactive/ReactivePanacheQuery.java", "diffHunk": "@@ -110,6 +110,16 @@\n      */\n     public Page page();\n \n+    /**\n+     * Switch the query to use a fixed range (start index - last index) instead of a page.\n+     * As the range is fixed, subsequent pagination of the query is not possible.\n+     *\n+     * @param startIdx the index of the first element, starting at 0\n+     * @param lastIdx the index of the last element\n+     * @return this query, modified\n+     */\n+    public <T extends Entity> ReactivePanacheQuery<T> range(int startIdx, int lastIdx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDk3NzU1OnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/runtime/src/main/java/io/quarkus/panache/common/Range.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNzoyOFrOFzp4-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNzoyOFrOFzp4-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwODAyNA==", "bodyText": "Please index everywhere here :)", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389708024", "createdAt": "2020-03-09T14:07:28Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/runtime/src/main/java/io/quarkus/panache/common/Range.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.panache.common;\n+\n+/**\n+ * <p>\n+ * Utility class to represent ranging information. Range instances are immutable.\n+ * </p>\n+ *\n+ * <p>\n+ * Usage:\n+ * </p>\n+ *\n+ * <code><pre>\n+ * Range range = Range.of(0, 5);\n+ * </pre></code>\n+ */\n+public class Range {\n+    private final int startIdx;\n+    private final int lastIdx;\n+\n+    public Range(int startIdx, int lastIdx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 36, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}