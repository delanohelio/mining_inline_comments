{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMDUxNzU0", "number": 7501, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNTo1NzoyOFrODkF2xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1Mjo1NVrODkwVIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTcxMjcwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNTo1NzoyOFrOFwO2GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjozNDoxOVrOFwUy9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjExOTE5Mg==", "bodyText": "cusotmized -> customized", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386119192", "createdAt": "2020-03-01T15:57:28Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -113,85 +101,223 @@ The full source of the `kubernetes.json` file looks something like this:\n                 }\n               }\n             } ],\n-            \"image\" : \"yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT\",\n+            \"image\" : \"yourDockerUsernmae/test-quarkus-app:1.0-SNAPSHOT\",\n             \"imagePullPolicy\" : \"IfNotPresent\",\n             \"name\" : \"test-quarkus-app\"\n           } ]\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be cusotmized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf4603b2c75902abff1e7ec8073f45f07ce981b"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxNjY5Mw==", "bodyText": "This hasn't been fixed", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386216693", "createdAt": "2020-03-02T06:34:19Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -113,85 +101,223 @@ The full source of the `kubernetes.json` file looks something like this:\n                 }\n               }\n             } ],\n-            \"image\" : \"yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT\",\n+            \"image\" : \"yourDockerUsernmae/test-quarkus-app:1.0-SNAPSHOT\",\n             \"imagePullPolicy\" : \"IfNotPresent\",\n             \"name\" : \"test-quarkus-app\"\n           } ]\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be cusotmized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjExOTE5Mg=="}, "originalCommit": {"oid": "bbf4603b2c75902abff1e7ec8073f45f07ce981b"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTcxMzI2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNTo1ODozMVrOFwO2XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNTo1ODozMVrOFwO2XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjExOTI2MA==", "bodyText": "generted -> generated", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386119260", "createdAt": "2020-03-01T15:58:31Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -113,85 +101,223 @@ The full source of the `kubernetes.json` file looks something like this:\n                 }\n               }\n             } ],\n-            \"image\" : \"yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT\",\n+            \"image\" : \"yourDockerUsernmae/test-quarkus-app:1.0-SNAPSHOT\",\n             \"imagePullPolicy\" : \"IfNotPresent\",\n             \"name\" : \"test-quarkus-app\"\n           } ]\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be cusotmized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n \n-[source,xml]\n+=== Labels and Annotations\n+\n+==== Labels\n+\n+The generted manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf4603b2c75902abff1e7ec8073f45f07ce981b"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTcxMzkzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjowMDoxNFrOFwO2rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjowMDoxNFrOFwO2rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjExOTM0Mg==", "bodyText": "addtiinal -> additional", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386119342", "createdAt": "2020-03-01T16:00:14Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -113,85 +101,223 @@ The full source of the `kubernetes.json` file looks something like this:\n                 }\n               }\n             } ],\n-            \"image\" : \"yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT\",\n+            \"image\" : \"yourDockerUsernmae/test-quarkus-app:1.0-SNAPSHOT\",\n             \"imagePullPolicy\" : \"IfNotPresent\",\n             \"name\" : \"test-quarkus-app\"\n           } ]\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be cusotmized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n \n-[source,xml]\n+=== Labels and Annotations\n+\n+==== Labels\n+\n+The generted manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].\n+These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.\n+For example by adding the following configuration to your `application.properties`:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-kubernetes-client</artifactId>\n-    </dependency>\n+quarkus.kubernetes.part-of=todo-app\n+quarkus.kubernetes.name=todo-rest\n+quarkus.kubernetes.version=1.0-rc.1\n ----\n \n-To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding etc.).\n-So, when the `kubernetes-client` extension is present, the `kubernetes` extension is going to create those resources automatically, so that application will be granted the `view` role.\n-If more roles are required, they will have to be added manually.\n+The generated generated resources will have the labels:\n \n-== Tuning the generated resources using application.properties\n+[source, json]\n+----\n+  \"labels\" : {\n+    \"app.kubernetes.io/part-of\" : \"todo-app\",\n+    \"app.kubernetes.io/name\" : \"todo-rest\",\n+    \"app.kubernetes.io/version\" : \"1.0-rc.1\"\n+  }\n+----\n \n-The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.\n-Here are some examples:\n+==== Custom Labels\n \n-=== Changing the number of replicas:\n-To change the number of replicas from 1 to  3:\n+To add addtional Labels, for example `foo=bar`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf4603b2c75902abff1e7ec8073f45f07ce981b"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTcxNTAyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjowMTozNVrOFwO3LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjowMTozNVrOFwO3LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjExOTQ2OQ==", "bodyText": "varialbes -> variables", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386119469", "createdAt": "2020-03-01T16:01:35Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -113,85 +101,223 @@ The full source of the `kubernetes.json` file looks something like this:\n                 }\n               }\n             } ],\n-            \"image\" : \"yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT\",\n+            \"image\" : \"yourDockerUsernmae/test-quarkus-app:1.0-SNAPSHOT\",\n             \"imagePullPolicy\" : \"IfNotPresent\",\n             \"name\" : \"test-quarkus-app\"\n           } ]\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be cusotmized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n \n-[source,xml]\n+=== Labels and Annotations\n+\n+==== Labels\n+\n+The generted manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].\n+These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.\n+For example by adding the following configuration to your `application.properties`:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-kubernetes-client</artifactId>\n-    </dependency>\n+quarkus.kubernetes.part-of=todo-app\n+quarkus.kubernetes.name=todo-rest\n+quarkus.kubernetes.version=1.0-rc.1\n ----\n \n-To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding etc.).\n-So, when the `kubernetes-client` extension is present, the `kubernetes` extension is going to create those resources automatically, so that application will be granted the `view` role.\n-If more roles are required, they will have to be added manually.\n+The generated generated resources will have the labels:\n \n-== Tuning the generated resources using application.properties\n+[source, json]\n+----\n+  \"labels\" : {\n+    \"app.kubernetes.io/part-of\" : \"todo-app\",\n+    \"app.kubernetes.io/name\" : \"todo-rest\",\n+    \"app.kubernetes.io/version\" : \"1.0-rc.1\"\n+  }\n+----\n \n-The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.\n-Here are some examples:\n+==== Custom Labels\n \n-=== Changing the number of replicas:\n-To change the number of replicas from 1 to  3:\n+To add addtional Labels, for example `foo=bar`:\n \n [source]\n ----\n-quarkus.kubernetes.replicas=3\n+quarkus.kubernetes.labels.foo=bar\n ----\n \n-=== Defining a docker registry and repository\n+====  Annotations\n+\n+Out of the box the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes.\n+\n+[source, json]\n+----\n+  \"annotations\": {\n+    \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+    \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+   }\n+----\n+\n+==== Custom Annotations\n+\n+Custom annotations can be added in way similar to labels. For example to add the annotation `foo=bar`:\n \n-The docker registry and the user of the docker image can be specified, with the following properties:\n \n [source]\n ----\n-quarkus.kubernetes.group=myUser\n-quarkus.docker.registry=http://my.docker-registry.net\n+quarkus.kubernetes.annotations.foo=bar\n ----\n \n-Note: These options used to be `quarkus.kubernetes.docker.registry` and `quarkus.kubernetes.group` respectively.\n+==== Environment variables\n+\n+Kubernetes provides multiple ways of defining environment varialbes:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf4603b2c75902abff1e7ec8073f45f07ce981b"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTcxNTQ1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjowMjo0NFrOFwO3bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjozNDozNVrOFwUzIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjExOTUzMg==", "bodyText": "environmnet -> environment", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386119532", "createdAt": "2020-03-01T16:02:44Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -113,85 +101,223 @@ The full source of the `kubernetes.json` file looks something like this:\n                 }\n               }\n             } ],\n-            \"image\" : \"yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT\",\n+            \"image\" : \"yourDockerUsernmae/test-quarkus-app:1.0-SNAPSHOT\",\n             \"imagePullPolicy\" : \"IfNotPresent\",\n             \"name\" : \"test-quarkus-app\"\n           } ]\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be cusotmized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n \n-[source,xml]\n+=== Labels and Annotations\n+\n+==== Labels\n+\n+The generted manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].\n+These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.\n+For example by adding the following configuration to your `application.properties`:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-kubernetes-client</artifactId>\n-    </dependency>\n+quarkus.kubernetes.part-of=todo-app\n+quarkus.kubernetes.name=todo-rest\n+quarkus.kubernetes.version=1.0-rc.1\n ----\n \n-To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding etc.).\n-So, when the `kubernetes-client` extension is present, the `kubernetes` extension is going to create those resources automatically, so that application will be granted the `view` role.\n-If more roles are required, they will have to be added manually.\n+The generated generated resources will have the labels:\n \n-== Tuning the generated resources using application.properties\n+[source, json]\n+----\n+  \"labels\" : {\n+    \"app.kubernetes.io/part-of\" : \"todo-app\",\n+    \"app.kubernetes.io/name\" : \"todo-rest\",\n+    \"app.kubernetes.io/version\" : \"1.0-rc.1\"\n+  }\n+----\n \n-The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.\n-Here are some examples:\n+==== Custom Labels\n \n-=== Changing the number of replicas:\n-To change the number of replicas from 1 to  3:\n+To add addtional Labels, for example `foo=bar`:\n \n [source]\n ----\n-quarkus.kubernetes.replicas=3\n+quarkus.kubernetes.labels.foo=bar\n ----\n \n-=== Defining a docker registry and repository\n+====  Annotations\n+\n+Out of the box the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes.\n+\n+[source, json]\n+----\n+  \"annotations\": {\n+    \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+    \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+   }\n+----\n+\n+==== Custom Annotations\n+\n+Custom annotations can be added in way similar to labels. For example to add the annotation `foo=bar`:\n \n-The docker registry and the user of the docker image can be specified, with the following properties:\n \n [source]\n ----\n-quarkus.kubernetes.group=myUser\n-quarkus.docker.registry=http://my.docker-registry.net\n+quarkus.kubernetes.annotations.foo=bar\n ----\n \n-Note: These options used to be `quarkus.kubernetes.docker.registry` and `quarkus.kubernetes.group` respectively.\n+==== Environment variables\n+\n+Kubernetes provides multiple ways of defining environment varialbes:\n \n-=== Adding labels:\n-To add a new label to all generated resources, say `foo=bar`:\n+- key value pairs\n+- from Secret\n+- from ConfigMap\n+- from fields\n+\n+To add a key value pair as an environmnet variable in the generated resources:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf4603b2c75902abff1e7ec8073f45f07ce981b"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxNjczOA==", "bodyText": "Same here", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386216738", "createdAt": "2020-03-02T06:34:35Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -113,85 +101,223 @@ The full source of the `kubernetes.json` file looks something like this:\n                 }\n               }\n             } ],\n-            \"image\" : \"yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT\",\n+            \"image\" : \"yourDockerUsernmae/test-quarkus-app:1.0-SNAPSHOT\",\n             \"imagePullPolicy\" : \"IfNotPresent\",\n             \"name\" : \"test-quarkus-app\"\n           } ]\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be cusotmized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n \n-[source,xml]\n+=== Labels and Annotations\n+\n+==== Labels\n+\n+The generted manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].\n+These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.\n+For example by adding the following configuration to your `application.properties`:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-kubernetes-client</artifactId>\n-    </dependency>\n+quarkus.kubernetes.part-of=todo-app\n+quarkus.kubernetes.name=todo-rest\n+quarkus.kubernetes.version=1.0-rc.1\n ----\n \n-To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding etc.).\n-So, when the `kubernetes-client` extension is present, the `kubernetes` extension is going to create those resources automatically, so that application will be granted the `view` role.\n-If more roles are required, they will have to be added manually.\n+The generated generated resources will have the labels:\n \n-== Tuning the generated resources using application.properties\n+[source, json]\n+----\n+  \"labels\" : {\n+    \"app.kubernetes.io/part-of\" : \"todo-app\",\n+    \"app.kubernetes.io/name\" : \"todo-rest\",\n+    \"app.kubernetes.io/version\" : \"1.0-rc.1\"\n+  }\n+----\n \n-The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.\n-Here are some examples:\n+==== Custom Labels\n \n-=== Changing the number of replicas:\n-To change the number of replicas from 1 to  3:\n+To add addtional Labels, for example `foo=bar`:\n \n [source]\n ----\n-quarkus.kubernetes.replicas=3\n+quarkus.kubernetes.labels.foo=bar\n ----\n \n-=== Defining a docker registry and repository\n+====  Annotations\n+\n+Out of the box the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes.\n+\n+[source, json]\n+----\n+  \"annotations\": {\n+    \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+    \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+   }\n+----\n+\n+==== Custom Annotations\n+\n+Custom annotations can be added in way similar to labels. For example to add the annotation `foo=bar`:\n \n-The docker registry and the user of the docker image can be specified, with the following properties:\n \n [source]\n ----\n-quarkus.kubernetes.group=myUser\n-quarkus.docker.registry=http://my.docker-registry.net\n+quarkus.kubernetes.annotations.foo=bar\n ----\n \n-Note: These options used to be `quarkus.kubernetes.docker.registry` and `quarkus.kubernetes.group` respectively.\n+==== Environment variables\n+\n+Kubernetes provides multiple ways of defining environment varialbes:\n \n-=== Adding labels:\n-To add a new label to all generated resources, say `foo=bar`:\n+- key value pairs\n+- from Secret\n+- from ConfigMap\n+- from fields\n+\n+To add a key value pair as an environmnet variable in the generated resources:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjExOTUzMg=="}, "originalCommit": {"oid": "bbf4603b2c75902abff1e7ec8073f45f07ce981b"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTcxNjM1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjowNDozN1rOFwO33A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNjowNDozN1rOFwO33A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjExOTY0NA==", "bodyText": "There is an extra space before 3", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386119644", "createdAt": "2020-03-01T16:04:37Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -113,85 +101,223 @@ The full source of the `kubernetes.json` file looks something like this:\n                 }\n               }\n             } ],\n-            \"image\" : \"yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT\",\n+            \"image\" : \"yourDockerUsernmae/test-quarkus-app:1.0-SNAPSHOT\",\n             \"imagePullPolicy\" : \"IfNotPresent\",\n             \"name\" : \"test-quarkus-app\"\n           } ]\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be cusotmized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n \n-[source,xml]\n+=== Labels and Annotations\n+\n+==== Labels\n+\n+The generted manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].\n+These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.\n+For example by adding the following configuration to your `application.properties`:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-kubernetes-client</artifactId>\n-    </dependency>\n+quarkus.kubernetes.part-of=todo-app\n+quarkus.kubernetes.name=todo-rest\n+quarkus.kubernetes.version=1.0-rc.1\n ----\n \n-To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding etc.).\n-So, when the `kubernetes-client` extension is present, the `kubernetes` extension is going to create those resources automatically, so that application will be granted the `view` role.\n-If more roles are required, they will have to be added manually.\n+The generated generated resources will have the labels:\n \n-== Tuning the generated resources using application.properties\n+[source, json]\n+----\n+  \"labels\" : {\n+    \"app.kubernetes.io/part-of\" : \"todo-app\",\n+    \"app.kubernetes.io/name\" : \"todo-rest\",\n+    \"app.kubernetes.io/version\" : \"1.0-rc.1\"\n+  }\n+----\n \n-The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.\n-Here are some examples:\n+==== Custom Labels\n \n-=== Changing the number of replicas:\n-To change the number of replicas from 1 to  3:\n+To add addtional Labels, for example `foo=bar`:\n \n [source]\n ----\n-quarkus.kubernetes.replicas=3\n+quarkus.kubernetes.labels.foo=bar\n ----\n \n-=== Defining a docker registry and repository\n+====  Annotations\n+\n+Out of the box the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes.\n+\n+[source, json]\n+----\n+  \"annotations\": {\n+    \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+    \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+   }\n+----\n+\n+==== Custom Annotations\n+\n+Custom annotations can be added in way similar to labels. For example to add the annotation `foo=bar`:\n \n-The docker registry and the user of the docker image can be specified, with the following properties:\n \n [source]\n ----\n-quarkus.kubernetes.group=myUser\n-quarkus.docker.registry=http://my.docker-registry.net\n+quarkus.kubernetes.annotations.foo=bar\n ----\n \n-Note: These options used to be `quarkus.kubernetes.docker.registry` and `quarkus.kubernetes.group` respectively.\n+==== Environment variables\n+\n+Kubernetes provides multiple ways of defining environment varialbes:\n \n-=== Adding labels:\n-To add a new label to all generated resources, say `foo=bar`:\n+- key value pairs\n+- from Secret\n+- from ConfigMap\n+- from fields\n+\n+To add a key value pair as an environmnet variable in the generated resources:\n \n [source]\n ----\n-quarkus.kubernetes.labels.foo=bar\n+quarkus.kubernetes.env-vars.my-env-var.value=foobar\n+----\n+\n+The command above will add `MY_ENV_VAR=foobar` as an environment variable.\n+Please note that the key `my-env-var` will be converted to uppercase and dashes will be replaced by underscores resulting in `MY_ENV_VAR`.\n+\n+You may also noticed that in contrast to labels, and annotations for environment variables you don't just use a key=value approach.\n+That is because for environment variables there are additional options rather than just value.\n+\n+===== Environment variables from Secret\n+\n+To add all key value pairs of a `Secret` as environment variables:\n+\n+[source]\n+----\n+quarkus.kubernetes.env-vars.my-env-var.secret=my-secret\n+----\n+\n+===== Environment variables from ConfigMap\n+\n+To add all key value pairs of a `ConfigMap` as environment variables:\n+\n+[source]\n+----\n+quarkus.kubernetes.env-vars.my-env-var.configmap=my-secret\n+----\n+\n+\n+==== Mounting volumes\n+\n+The Kubernetes extension allows the user to configure both volumes and mounts for the application.\n+\n+Any volume can be mounted with a simple configuration:\n+\n+[source]\n+----\n+quarkus.kubernetes.mounts.my-volume.path=/where/to/mount\n+----\n+\n+This will add a mount to my pod for volume `my-voume` to path `/where/to/mount`\n+\n+The volumes themselves can be configured as shown in the sections below:\n+\n+===== Secret volumes\n+\n+[source]\n+----\n+quarkus.kubernetes.secret-volumes.my-volume.secret-name=my-secret\n+----\n+\n+===== ConfigMap volumes\n+\n+[source]\n+----\n+quarkus.kubernetes.config-map-volumes.my-volume.config-map-name=my-secret\n+----\n+\n+=== Changing the number of replicas:\n+\n+To change the number of replicas from 1 to  3:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf4603b2c75902abff1e7ec8073f45f07ce981b"}, "originalPosition": 312}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjM2ODY5OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KnativeConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjoxNjo0NFrOFwUjhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjoxNjo0NFrOFwUjhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxMjc0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The name of the group this component belogs too\n          \n          \n            \n                 * The name of the group this component belongs too", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386212743", "createdAt": "2020-03-02T06:16:44Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KnativeConfig.java", "diffHunk": "@@ -11,11 +11,12 @@\n \n @ConfigRoot\n public class KnativeConfig implements PlatformConfiguration {\n+\n     /**\n-     * The group of the application.\n+     * The name of the group this component belogs too", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce73d842b69cc91afd68cbc8ae74127f3fa2b337"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjM2ODkwOnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjoxNjo1NFrOFwUjqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjoxNjo1NFrOFwUjqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxMjc3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The name of the group this component belogs too\n          \n          \n            \n                 * The name of the group this component belongs too", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386212778", "createdAt": "2020-03-02T06:16:54Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfig.java", "diffHunk": "@@ -13,10 +13,10 @@\n public class KubernetesConfig implements PlatformConfiguration {\n \n     /**\n-     * The group of the application.\n+     * The name of the group this component belogs too", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce73d842b69cc91afd68cbc8ae74127f3fa2b337"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjM2OTE1OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/OpenshiftConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjoxNzowNVrOFwUjzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjoxNzowNVrOFwUjzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxMjgxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The name of the group this component belogs too\n          \n          \n            \n                 * The name of the group this component belongs too", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386212815", "createdAt": "2020-03-02T06:17:05Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/OpenshiftConfig.java", "diffHunk": "@@ -14,10 +14,10 @@\n public class OpenshiftConfig implements PlatformConfiguration {\n \n     /**\n-     * The group of the application.\n+     * The name of the group this component belogs too", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce73d842b69cc91afd68cbc8ae74127f3fa2b337"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjM3MjA0OnYy", "diffSide": "LEFT", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjoxODo1OFrOFwUlhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjoxODo1OFrOFwUlhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxMzI1Mw==", "bodyText": "This comment seems to have been removed from the code that adds ApplyContainerImageDecorator. Should it be re-added sicne the issue is still open or has the issue been side-stepped?", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386213253", "createdAt": "2020-03-02T06:18:58Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -370,16 +374,14 @@ private void applyBuildItems(Session session,\n         String openshiftName = openshiftConfig.name.orElse(name);\n         String knativeName = knativeConfig.name.orElse(name);\n \n-        //TODO: This is needed until https://github.com/dekorateio/dekorate/issues/456 is resolved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce73d842b69cc91afd68cbc8ae74127f3fa2b337"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjM4MDU3OnYy", "diffSide": "LEFT", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjoyNDozMlrOFwUqaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjoyNDozMlrOFwUqaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxNDUwNQ==", "bodyText": "With these changes DOCKER_REGISTRY_PROPERTY and APP_GROUP_PROPERTY are no longer used", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386214505", "createdAt": "2020-03-02T06:24:32Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -151,65 +156,48 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                 .map(KubernetesDeploymentTargetBuildItem::getName)\n                 .collect(Collectors.toSet());\n \n-        // this is a hack to get kubernetes.registry working because currently it's not supported as is in Dekorate\n-        Optional<String> dockerRegistry = KubernetesConfigUtil.getDockerRegistry(config);\n-        dockerRegistry.ifPresent(v -> System.setProperty(DOCKER_REGISTRY_PROPERTY, v));\n-\n-        // this is a hack to work around Dekorate using the default group for some of the properties\n-        Optional<String> kubernetesGroup = KubernetesConfigUtil.getGroup(config);\n-        kubernetesGroup.ifPresent(v -> System.setProperty(APP_GROUP_PROPERTY, v));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce73d842b69cc91afd68cbc8ae74127f3fa2b337"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjM4MjczOnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjoyNjoyM1rOFwUr4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjoyNjoyM1rOFwUr4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxNDg4Mw==", "bodyText": "Can we have a comment here please explaining that dekorate adds these automatically and we want to replace them with more specific ones?", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386214883", "createdAt": "2020-03-02T06:26:23Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -259,20 +247,36 @@ private void applyGlobalConfig(Session session, KubernetesConfig config) {\n      * @param config The {@link PlatformConfiguration} instance\n      * @param now\n      */\n-    private void applyConfig(Session session, String target, String name, PlatformConfiguration config, ZonedDateTime now) {\n+    private void applyConfig(Session session, Project project, String target, String name, PlatformConfiguration config,\n+            ZonedDateTime now) {\n         //Labels\n         config.getLabels().forEach((key, value) -> {\n             session.resources().decorate(target, new AddLabelDecorator(new Label(key, value)));\n         });\n \n+        if (OPENSHIFT.equals(target)) {\n+            session.resources().decorate(OPENSHIFT, new AddLabelDecorator(new Label(OPENSHIFT_APP_RUNTIME, QUARKUS)));\n+        }\n+\n         //Annotations\n         config.getAnnotations().forEach((key, value) -> {\n             session.resources().decorate(target, new AddAnnotationDecorator(new Annotation(key, value)));\n         });\n+\n+        ScmInfo scm = project.getScmInfo();\n+        String vcsUrl = scm != null ? scm.getUrl() : Annotations.UNKNOWN;\n+        String commitId = scm != null ? scm.getCommit() : Annotations.UNKNOWN;\n+\n+        session.resources().decorate(target, new RemoveAnnotationDecorator(Annotations.VCS_URL));\n+        session.resources().decorate(target, new RemoveAnnotationDecorator(Annotations.COMMIT_ID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce73d842b69cc91afd68cbc8ae74127f3fa2b337"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjM4NzU5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjoyOTo1N1rOFwUvEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjoyOTo1N1rOFwUvEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxNTY5Ng==", "bodyText": "I think we should probably use Kubernetes (upper-case K) in all instances of the doc that aren't referring to code", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386215696", "createdAt": "2020-03-02T06:29:57Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -51,19 +51,8 @@ When we added the `kubernetes` extension to the command line invocation above, t\n     </dependency>\n ----\n \n-By adding this dependency, we now have the ability to configure the Kubernetes resource generation and application using the usual `application.properties` approach that Quarkus provides.\n-The configuration items that are available can be found in: `io.quarkus.kubernetes.deployment.KubernetesConfig` class.\n-Furthermore, the items provided by `io.quarkus.deployment.ApplicationConfig` affect the Kubernetes resources.\n-\n-By using the following configuration for example:\n-\n-[source]\n-----\n-quarkus.kubernetes.group=yourDockerUsername # this is optional and defaults to your username if not set.\n-quarkus.application.name=test-quarkus-app # this is also optional and defaults to the project name if not set\n-----\n-\n-and following the execution of `./mvnw package` you will notice amongst the other files that are created, two files named\n+By adding this dependency, we enable the generation of kubernetes manifests each time we perform a build.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce73d842b69cc91afd68cbc8ae74127f3fa2b337"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjM4ODM3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjozMDozMlrOFwUvmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjozMDozMlrOFwUvmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxNTgzNQ==", "bodyText": "This change doesn't look right :)", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386215835", "createdAt": "2020-03-02T06:30:32Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -113,84 +101,222 @@ The full source of the `kubernetes.json` file looks something like this:\n                 }\n               }\n             } ],\n-            \"image\" : \"yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT\",\n+            \"image\" : \"yourDockerUsernmae/test-quarkus-app:1.0-SNAPSHOT\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce73d842b69cc91afd68cbc8ae74127f3fa2b337"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjM5NDg2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjozNTowMVrOFwUzew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjozNTowMVrOFwUzew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxNjgyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You may also noticed that in contrast to labels, and annotations for environment variables you don't just use a key=value approach.\n          \n          \n            \n            You may also noticed that in contrast to labels and annotations for environment variables you don't just use a key=value approach.", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386216827", "createdAt": "2020-03-02T06:35:01Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -113,84 +101,222 @@ The full source of the `kubernetes.json` file looks something like this:\n                 }\n               }\n             } ],\n-            \"image\" : \"yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT\",\n+            \"image\" : \"yourDockerUsernmae/test-quarkus-app:1.0-SNAPSHOT\",\n             \"imagePullPolicy\" : \"IfNotPresent\",\n             \"name\" : \"test-quarkus-app\"\n           } ]\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be cusotmized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n \n-[source,xml]\n+=== Labels and Annotations\n+\n+==== Labels\n+\n+The generated manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].\n+These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.\n+For example by adding the following configuration to your `application.properties`:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-kubernetes-client</artifactId>\n-    </dependency>\n+quarkus.kubernetes.part-of=todo-app\n+quarkus.kubernetes.name=todo-rest\n+quarkus.kubernetes.version=1.0-rc.1\n ----\n \n-To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding etc.).\n-So, when the `kubernetes-client` extension is present, the `kubernetes` extension is going to create those resources automatically, so that application will be granted the `view` role.\n-If more roles are required, they will have to be added manually.\n+The generated generated resources will have the labels:\n \n-== Tuning the generated resources using application.properties\n+[source, json]\n+----\n+  \"labels\" : {\n+    \"app.kubernetes.io/part-of\" : \"todo-app\",\n+    \"app.kubernetes.io/name\" : \"todo-rest\",\n+    \"app.kubernetes.io/version\" : \"1.0-rc.1\"\n+  }\n+----\n \n-The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.\n-Here are some examples:\n+==== Custom Labels\n \n-=== Changing the number of replicas:\n-To change the number of replicas from 1 to  3:\n+To add additional Labels, for example `foo=bar`:\n \n [source]\n ----\n-quarkus.kubernetes.replicas=3\n+quarkus.kubernetes.labels.foo=bar\n ----\n \n-=== Defining a docker registry and repository\n+====  Annotations\n+\n+Out of the box the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes.\n+\n+[source, json]\n+----\n+  \"annotations\": {\n+    \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+    \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+   }\n+----\n+\n+==== Custom Annotations\n+\n+Custom annotations can be added in way similar to labels. For example to add the annotation `foo=bar`:\n \n-The docker registry and the user of the docker image can be specified, with the following properties:\n \n [source]\n ----\n-quarkus.kubernetes.group=myUser\n-quarkus.docker.registry=http://my.docker-registry.net\n+quarkus.kubernetes.annotations.foo=bar\n ----\n \n-Note: These options used to be `quarkus.kubernetes.docker.registry` and `quarkus.kubernetes.group` respectively.\n+==== Environment variables\n \n-=== Adding labels:\n-To add a new label to all generated resources, say `foo=bar`:\n+Kubernetes provides multiple ways of defining environment variables:\n+\n+- key value pairs\n+- from Secret\n+- from ConfigMap\n+- from fields\n+\n+To add a key value pair as an environmnet variable in the generated resources:\n \n [source]\n ----\n-quarkus.kubernetes.labels.foo=bar\n+quarkus.kubernetes.env-vars.my-env-var.value=foobar\n+----\n+\n+The command above will add `MY_ENV_VAR=foobar` as an environment variable.\n+Please note that the key `my-env-var` will be converted to uppercase and dashes will be replaced by underscores resulting in `MY_ENV_VAR`.\n+\n+You may also noticed that in contrast to labels, and annotations for environment variables you don't just use a key=value approach.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce73d842b69cc91afd68cbc8ae74127f3fa2b337"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjM5NTMzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjozNToxOVrOFwUzwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNjozNToxOVrOFwUzwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxNjg5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            That is because for environment variables there are additional options rather than just value.\n          \n          \n            \n            That is because for environment variables there are additional options rather than just setting a value.", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r386216898", "createdAt": "2020-03-02T06:35:19Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -113,84 +101,222 @@ The full source of the `kubernetes.json` file looks something like this:\n                 }\n               }\n             } ],\n-            \"image\" : \"yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT\",\n+            \"image\" : \"yourDockerUsernmae/test-quarkus-app:1.0-SNAPSHOT\",\n             \"imagePullPolicy\" : \"IfNotPresent\",\n             \"name\" : \"test-quarkus-app\"\n           } ]\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be cusotmized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n \n-[source,xml]\n+=== Labels and Annotations\n+\n+==== Labels\n+\n+The generated manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].\n+These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.\n+For example by adding the following configuration to your `application.properties`:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-kubernetes-client</artifactId>\n-    </dependency>\n+quarkus.kubernetes.part-of=todo-app\n+quarkus.kubernetes.name=todo-rest\n+quarkus.kubernetes.version=1.0-rc.1\n ----\n \n-To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding etc.).\n-So, when the `kubernetes-client` extension is present, the `kubernetes` extension is going to create those resources automatically, so that application will be granted the `view` role.\n-If more roles are required, they will have to be added manually.\n+The generated generated resources will have the labels:\n \n-== Tuning the generated resources using application.properties\n+[source, json]\n+----\n+  \"labels\" : {\n+    \"app.kubernetes.io/part-of\" : \"todo-app\",\n+    \"app.kubernetes.io/name\" : \"todo-rest\",\n+    \"app.kubernetes.io/version\" : \"1.0-rc.1\"\n+  }\n+----\n \n-The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.\n-Here are some examples:\n+==== Custom Labels\n \n-=== Changing the number of replicas:\n-To change the number of replicas from 1 to  3:\n+To add additional Labels, for example `foo=bar`:\n \n [source]\n ----\n-quarkus.kubernetes.replicas=3\n+quarkus.kubernetes.labels.foo=bar\n ----\n \n-=== Defining a docker registry and repository\n+====  Annotations\n+\n+Out of the box the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes.\n+\n+[source, json]\n+----\n+  \"annotations\": {\n+    \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+    \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+   }\n+----\n+\n+==== Custom Annotations\n+\n+Custom annotations can be added in way similar to labels. For example to add the annotation `foo=bar`:\n \n-The docker registry and the user of the docker image can be specified, with the following properties:\n \n [source]\n ----\n-quarkus.kubernetes.group=myUser\n-quarkus.docker.registry=http://my.docker-registry.net\n+quarkus.kubernetes.annotations.foo=bar\n ----\n \n-Note: These options used to be `quarkus.kubernetes.docker.registry` and `quarkus.kubernetes.group` respectively.\n+==== Environment variables\n \n-=== Adding labels:\n-To add a new label to all generated resources, say `foo=bar`:\n+Kubernetes provides multiple ways of defining environment variables:\n+\n+- key value pairs\n+- from Secret\n+- from ConfigMap\n+- from fields\n+\n+To add a key value pair as an environmnet variable in the generated resources:\n \n [source]\n ----\n-quarkus.kubernetes.labels.foo=bar\n+quarkus.kubernetes.env-vars.my-env-var.value=foobar\n+----\n+\n+The command above will add `MY_ENV_VAR=foobar` as an environment variable.\n+Please note that the key `my-env-var` will be converted to uppercase and dashes will be replaced by underscores resulting in `MY_ENV_VAR`.\n+\n+You may also noticed that in contrast to labels, and annotations for environment variables you don't just use a key=value approach.\n+That is because for environment variables there are additional options rather than just value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce73d842b69cc91afd68cbc8ae74127f3fa2b337"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODY1MjA5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0NzoxNVrOFxQGIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0NzoxNVrOFxQGIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4ODI1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n          \n          \n            \n            The name of the image is controlled by the container-image extension and can be customized using the usual `application.properties`.", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r387188257", "createdAt": "2020-03-03T17:47:15Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -120,77 +108,215 @@ The full source of the `kubernetes.json` file looks something like this:\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068eb985325fc7456f2f8da552737cb58e837ed0"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODY1MzAzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0NzozNlrOFxQGuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0NzozNlrOFxQGuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4ODQwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            === Defining a docker registry\n          \n          \n            \n            === Defining a Docker registry", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r387188409", "createdAt": "2020-03-03T17:47:36Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -120,77 +108,215 @@ The full source of the `kubernetes.json` file looks something like this:\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068eb985325fc7456f2f8da552737cb58e837ed0"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODY1Mzk2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0Nzo0OVrOFxQHSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0Nzo0OVrOFxQHSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4ODU1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The docker registry can be specified, with the following property:\n          \n          \n            \n            The Docker registry can be specified with the following property:", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r387188552", "createdAt": "2020-03-03T17:47:49Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -120,77 +108,215 @@ The full source of the `kubernetes.json` file looks something like this:\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068eb985325fc7456f2f8da552737cb58e837ed0"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODY1NjQ4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0ODoyNlrOFxQI0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0ODoyNlrOFxQI0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4ODk0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n          \n          \n            \n            By adding this property along with the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r387188947", "createdAt": "2020-03-03T17:48:26Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -120,77 +108,215 @@ The full source of the `kubernetes.json` file looks something like this:\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068eb985325fc7456f2f8da552737cb58e837ed0"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODY1NzI3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0ODo0MlrOFxQJWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0ODo0MlrOFxQJWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTA4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The image is not the only thing that can be customized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n          \n          \n            \n            The image is not the only thing that can be customized in the generated manifests. The kubernetes extension provides a rich set of configuration properties that allow customization.", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r387189082", "createdAt": "2020-03-03T17:48:42Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -120,77 +108,215 @@ The full source of the `kubernetes.json` file looks something like this:\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be customized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068eb985325fc7456f2f8da552737cb58e837ed0"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODY1OTU5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0OToyMFrOFxQK2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0OToyMFrOFxQK2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTQ2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To add additional Labels, for example `foo=bar`:\n          \n          \n            \n            To add additional custom labels, for example `foo=bar`:", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r387189466", "createdAt": "2020-03-03T17:49:20Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -120,77 +108,215 @@ The full source of the `kubernetes.json` file looks something like this:\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be customized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n \n-[source,xml]\n+=== Labels and Annotations\n+\n+==== Labels\n+\n+The generated manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].\n+These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.\n+For example by adding the following configuration to your `application.properties`:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-kubernetes-client</artifactId>\n-    </dependency>\n+quarkus.kubernetes.part-of=todo-app\n+quarkus.kubernetes.name=todo-rest\n+quarkus.kubernetes.version=1.0-rc.1\n ----\n \n-To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding etc.).\n-So, when the `kubernetes-client` extension is present, the `kubernetes` extension is going to create those resources automatically, so that application will be granted the `view` role.\n-If more roles are required, they will have to be added manually.\n+The generated generated resources will have the labels:\n \n-== Tuning the generated resources using application.properties\n+[source, json]\n+----\n+  \"labels\" : {\n+    \"app.kubernetes.io/part-of\" : \"todo-app\",\n+    \"app.kubernetes.io/name\" : \"todo-rest\",\n+    \"app.kubernetes.io/version\" : \"1.0-rc.1\"\n+  }\n+----\n \n-The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.\n-Here are some examples:\n+==== Custom Labels\n \n-=== Changing the number of replicas:\n-To change the number of replicas from 1 to  3:\n+To add additional Labels, for example `foo=bar`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068eb985325fc7456f2f8da552737cb58e837ed0"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODY2MDk2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0OTo0MVrOFxQLqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0OTo0MVrOFxQLqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTY3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Out of the box the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes.\n          \n          \n            \n            Out of the box, the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes.", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r387189675", "createdAt": "2020-03-03T17:49:41Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -120,77 +108,215 @@ The full source of the `kubernetes.json` file looks something like this:\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be customized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n \n-[source,xml]\n+=== Labels and Annotations\n+\n+==== Labels\n+\n+The generated manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].\n+These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.\n+For example by adding the following configuration to your `application.properties`:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-kubernetes-client</artifactId>\n-    </dependency>\n+quarkus.kubernetes.part-of=todo-app\n+quarkus.kubernetes.name=todo-rest\n+quarkus.kubernetes.version=1.0-rc.1\n ----\n \n-To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding etc.).\n-So, when the `kubernetes-client` extension is present, the `kubernetes` extension is going to create those resources automatically, so that application will be granted the `view` role.\n-If more roles are required, they will have to be added manually.\n+The generated generated resources will have the labels:\n \n-== Tuning the generated resources using application.properties\n+[source, json]\n+----\n+  \"labels\" : {\n+    \"app.kubernetes.io/part-of\" : \"todo-app\",\n+    \"app.kubernetes.io/name\" : \"todo-rest\",\n+    \"app.kubernetes.io/version\" : \"1.0-rc.1\"\n+  }\n+----\n \n-The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.\n-Here are some examples:\n+==== Custom Labels\n \n-=== Changing the number of replicas:\n-To change the number of replicas from 1 to  3:\n+To add additional Labels, for example `foo=bar`:\n \n [source]\n ----\n-quarkus.kubernetes.replicas=3\n+quarkus.kubernetes.labels.foo=bar\n ----\n \n-=== Defining a docker registry and repository\n+====  Annotations\n+\n+Out of the box the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068eb985325fc7456f2f8da552737cb58e837ed0"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODY2MjA0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1MDowMVrOFxQMaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1MDowMVrOFxQMaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTg2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Custom annotations can be added in way similar to labels. For example to add the annotation `foo=bar`:\n          \n          \n            \n            Custom annotations can be added in a way similar to labels. For example to add the annotation `foo=bar`:", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r387189865", "createdAt": "2020-03-03T17:50:01Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -120,77 +108,215 @@ The full source of the `kubernetes.json` file looks something like this:\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be customized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n \n-[source,xml]\n+=== Labels and Annotations\n+\n+==== Labels\n+\n+The generated manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].\n+These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.\n+For example by adding the following configuration to your `application.properties`:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-kubernetes-client</artifactId>\n-    </dependency>\n+quarkus.kubernetes.part-of=todo-app\n+quarkus.kubernetes.name=todo-rest\n+quarkus.kubernetes.version=1.0-rc.1\n ----\n \n-To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding etc.).\n-So, when the `kubernetes-client` extension is present, the `kubernetes` extension is going to create those resources automatically, so that application will be granted the `view` role.\n-If more roles are required, they will have to be added manually.\n+The generated generated resources will have the labels:\n \n-== Tuning the generated resources using application.properties\n+[source, json]\n+----\n+  \"labels\" : {\n+    \"app.kubernetes.io/part-of\" : \"todo-app\",\n+    \"app.kubernetes.io/name\" : \"todo-rest\",\n+    \"app.kubernetes.io/version\" : \"1.0-rc.1\"\n+  }\n+----\n \n-The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.\n-Here are some examples:\n+==== Custom Labels\n \n-=== Changing the number of replicas:\n-To change the number of replicas from 1 to  3:\n+To add additional Labels, for example `foo=bar`:\n \n [source]\n ----\n-quarkus.kubernetes.replicas=3\n+quarkus.kubernetes.labels.foo=bar\n ----\n \n-=== Defining a docker registry and repository\n+====  Annotations\n+\n+Out of the box the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes.\n+\n+[source, json]\n+----\n+  \"annotations\": {\n+    \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+    \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+   }\n+----\n+\n+==== Custom Annotations\n+\n+Custom annotations can be added in way similar to labels. For example to add the annotation `foo=bar`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068eb985325fc7456f2f8da552737cb58e837ed0"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODY2NTI4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1MDo1M1rOFxQOaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1MDo1M1rOFxQOaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MDM3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You may also noticed that in contrast to labels and annotations for environment variables you don't just use a key=value approach.\n          \n          \n            \n            You may also have noticed that in contrast to labels and annotations for environment variables you don't just use a `key=value` approach.", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r387190379", "createdAt": "2020-03-03T17:50:53Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -120,77 +108,215 @@ The full source of the `kubernetes.json` file looks something like this:\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be customized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n \n-[source,xml]\n+=== Labels and Annotations\n+\n+==== Labels\n+\n+The generated manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].\n+These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.\n+For example by adding the following configuration to your `application.properties`:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-kubernetes-client</artifactId>\n-    </dependency>\n+quarkus.kubernetes.part-of=todo-app\n+quarkus.kubernetes.name=todo-rest\n+quarkus.kubernetes.version=1.0-rc.1\n ----\n \n-To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding etc.).\n-So, when the `kubernetes-client` extension is present, the `kubernetes` extension is going to create those resources automatically, so that application will be granted the `view` role.\n-If more roles are required, they will have to be added manually.\n+The generated generated resources will have the labels:\n \n-== Tuning the generated resources using application.properties\n+[source, json]\n+----\n+  \"labels\" : {\n+    \"app.kubernetes.io/part-of\" : \"todo-app\",\n+    \"app.kubernetes.io/name\" : \"todo-rest\",\n+    \"app.kubernetes.io/version\" : \"1.0-rc.1\"\n+  }\n+----\n \n-The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.\n-Here are some examples:\n+==== Custom Labels\n \n-=== Changing the number of replicas:\n-To change the number of replicas from 1 to  3:\n+To add additional Labels, for example `foo=bar`:\n \n [source]\n ----\n-quarkus.kubernetes.replicas=3\n+quarkus.kubernetes.labels.foo=bar\n ----\n \n-=== Defining a docker registry and repository\n+====  Annotations\n+\n+Out of the box the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes.\n+\n+[source, json]\n+----\n+  \"annotations\": {\n+    \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+    \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+   }\n+----\n+\n+==== Custom Annotations\n+\n+Custom annotations can be added in way similar to labels. For example to add the annotation `foo=bar`:\n \n-The docker registry and the user of the docker image can be specified, with the following properties:\n \n [source]\n ----\n-quarkus.kubernetes.group=myUser\n-quarkus.docker.registry=http://my.docker-registry.net\n+quarkus.kubernetes.annotations.foo=bar\n ----\n \n-Note: These options used to be `quarkus.kubernetes.docker.registry` and `quarkus.kubernetes.group` respectively.\n+==== Environment variables\n \n-=== Adding labels:\n-To add a new label to all generated resources, say `foo=bar`:\n+Kubernetes provides multiple ways of defining environment variables:\n+\n+- key value pairs\n+- from Secret\n+- from ConfigMap\n+- from fields\n+\n+To add a key value pair as an environment variable in the generated resources:\n \n [source]\n ----\n-quarkus.kubernetes.labels.foo=bar\n+quarkus.kubernetes.env-vars.my-env-var.value=foobar\n+----\n+\n+The command above will add `MY_ENV_VAR=foobar` as an environment variable.\n+Please note that the key `my-env-var` will be converted to uppercase and dashes will be replaced by underscores resulting in `MY_ENV_VAR`.\n+\n+You may also noticed that in contrast to labels and annotations for environment variables you don't just use a key=value approach.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068eb985325fc7456f2f8da552737cb58e837ed0"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODY2NzQzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1MTozMlrOFxQPxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1MTozMlrOFxQPxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MDcyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This will add a mount to my pod for volume `my-voume` to path `/where/to/mount`\n          \n          \n            \n            This will add a mount to my pod for volume `my-volume` to path `/where/to/mount`.", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r387190726", "createdAt": "2020-03-03T17:51:32Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -120,77 +108,215 @@ The full source of the `kubernetes.json` file looks something like this:\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be customized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n \n-[source,xml]\n+=== Labels and Annotations\n+\n+==== Labels\n+\n+The generated manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].\n+These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.\n+For example by adding the following configuration to your `application.properties`:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-kubernetes-client</artifactId>\n-    </dependency>\n+quarkus.kubernetes.part-of=todo-app\n+quarkus.kubernetes.name=todo-rest\n+quarkus.kubernetes.version=1.0-rc.1\n ----\n \n-To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding etc.).\n-So, when the `kubernetes-client` extension is present, the `kubernetes` extension is going to create those resources automatically, so that application will be granted the `view` role.\n-If more roles are required, they will have to be added manually.\n+The generated generated resources will have the labels:\n \n-== Tuning the generated resources using application.properties\n+[source, json]\n+----\n+  \"labels\" : {\n+    \"app.kubernetes.io/part-of\" : \"todo-app\",\n+    \"app.kubernetes.io/name\" : \"todo-rest\",\n+    \"app.kubernetes.io/version\" : \"1.0-rc.1\"\n+  }\n+----\n \n-The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.\n-Here are some examples:\n+==== Custom Labels\n \n-=== Changing the number of replicas:\n-To change the number of replicas from 1 to  3:\n+To add additional Labels, for example `foo=bar`:\n \n [source]\n ----\n-quarkus.kubernetes.replicas=3\n+quarkus.kubernetes.labels.foo=bar\n ----\n \n-=== Defining a docker registry and repository\n+====  Annotations\n+\n+Out of the box the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes.\n+\n+[source, json]\n+----\n+  \"annotations\": {\n+    \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+    \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+   }\n+----\n+\n+==== Custom Annotations\n+\n+Custom annotations can be added in way similar to labels. For example to add the annotation `foo=bar`:\n \n-The docker registry and the user of the docker image can be specified, with the following properties:\n \n [source]\n ----\n-quarkus.kubernetes.group=myUser\n-quarkus.docker.registry=http://my.docker-registry.net\n+quarkus.kubernetes.annotations.foo=bar\n ----\n \n-Note: These options used to be `quarkus.kubernetes.docker.registry` and `quarkus.kubernetes.group` respectively.\n+==== Environment variables\n \n-=== Adding labels:\n-To add a new label to all generated resources, say `foo=bar`:\n+Kubernetes provides multiple ways of defining environment variables:\n+\n+- key value pairs\n+- from Secret\n+- from ConfigMap\n+- from fields\n+\n+To add a key value pair as an environment variable in the generated resources:\n \n [source]\n ----\n-quarkus.kubernetes.labels.foo=bar\n+quarkus.kubernetes.env-vars.my-env-var.value=foobar\n+----\n+\n+The command above will add `MY_ENV_VAR=foobar` as an environment variable.\n+Please note that the key `my-env-var` will be converted to uppercase and dashes will be replaced by underscores resulting in `MY_ENV_VAR`.\n+\n+You may also noticed that in contrast to labels and annotations for environment variables you don't just use a key=value approach.\n+That is because for environment variables there are additional options rather than just setting a value.\n+\n+===== Environment variables from Secret\n+\n+To add all key value pairs of a `Secret` as environment variables:\n+\n+[source]\n+----\n+quarkus.kubernetes.env-vars.my-env-var.secret=my-secret\n+----\n+\n+===== Environment variables from ConfigMap\n+\n+To add all key value pairs of a `ConfigMap` as environment variables:\n+\n+[source]\n+----\n+quarkus.kubernetes.env-vars.my-env-var.configmap=my-secret\n+----\n+\n+\n+==== Mounting volumes\n+\n+The Kubernetes extension allows the user to configure both volumes and mounts for the application.\n+\n+Any volume can be mounted with a simple configuration:\n+\n+[source]\n+----\n+quarkus.kubernetes.mounts.my-volume.path=/where/to/mount\n+----\n+\n+This will add a mount to my pod for volume `my-voume` to path `/where/to/mount`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068eb985325fc7456f2f8da552737cb58e837ed0"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODY2ODgyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1MTo1OFrOFxQQpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1MTo1OFrOFxQQpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MDk1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n          \n          \n            \n            By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the SmallRye Health extension like so:", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r387190950", "createdAt": "2020-03-03T17:51:58Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -120,77 +108,215 @@ The full source of the `kubernetes.json` file looks something like this:\n         }\n       }\n     }\n-  } ]\n+  },\n+  {\n+  \"apiVersion\" : \"v1\",\n+  \"kind\" : \"Service\",\n+    \"metadata\" : {\n+      \"annotations\": {\n+       \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+      },\n+      \"labels\" : {\n+        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+        \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\",\n+      },\n+      \"name\" : \"test-quarkus-app\"\n+    },\n+  \"spec\" : {\n+    \"ports\" : [ {\n+      \"name\" : \"http\",\n+      \"port\" : 8080,\n+      \"targetPort\" : 8080\n+    } ],\n+    \"selector\" : {\n+      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n+      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n+    },\n+    \"type\" : \"ClusterIP\"\n+  }\n+ }\n }\n ----\n \n An important thing to note about the `Deployment` is that is uses `yourDockerUsername/test-quarkus-app:1.0-SNAPSHOT` as the Docker image of the `Pod`.\n+The name of the image is controlled by the container-image extension and can be customized using the usual `applcation.properties`.\n \n-Also the `Service` is configured to use container port `8080` (which is automatically picked up by the standard Quarkus configuration).\n+For example with a configuration like:\n \n-=== Add readiness and liveness probes\n+[source]\n+----\n+quarkus.container-image.group=quarkus #optional, default to the system user name\n+quarkus.container-image.name=demo-app #optional, defaults to the application name\n+quarkus.container-image.tag=1.0       #optional, defaults to the application version\n+----\n \n-By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:\n+The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`\n \n-[source,xml]\n+=== Defining a docker registry\n+\n+The docker registry can be specified, with the following property:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-smallrye-health</artifactId>\n-    </dependency>\n+quarkus.container-image.registry=http://my.docker-registry.net\n ----\n \n-The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n-More information about the health extension can be found in the relevant link:microprofile-health[guide].\n+By adding this property along the rest of the container-image properties of the previous section, the generated manifests will use the image `http://my.docker-registry.net/quarkus/demo-app:1.0`.\n \n-=== Using the Kubernetes client\n \n-Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n+The image is not the only thing that can be customized in the generated manifests. The kubernetes extension provides a rich set of configuration properties, that allow customization.\n \n-[source,xml]\n+=== Labels and Annotations\n+\n+==== Labels\n+\n+The generated manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].\n+These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.\n+For example by adding the following configuration to your `application.properties`:\n+\n+[source]\n ----\n-    <dependency>\n-      <groupId>io.quarkus</groupId>\n-      <artifactId>quarkus-kubernetes-client</artifactId>\n-    </dependency>\n+quarkus.kubernetes.part-of=todo-app\n+quarkus.kubernetes.name=todo-rest\n+quarkus.kubernetes.version=1.0-rc.1\n ----\n \n-To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding etc.).\n-So, when the `kubernetes-client` extension is present, the `kubernetes` extension is going to create those resources automatically, so that application will be granted the `view` role.\n-If more roles are required, they will have to be added manually.\n+The generated generated resources will have the labels:\n \n-== Tuning the generated resources using application.properties\n+[source, json]\n+----\n+  \"labels\" : {\n+    \"app.kubernetes.io/part-of\" : \"todo-app\",\n+    \"app.kubernetes.io/name\" : \"todo-rest\",\n+    \"app.kubernetes.io/version\" : \"1.0-rc.1\"\n+  }\n+----\n \n-The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.\n-Here are some examples:\n+==== Custom Labels\n \n-=== Changing the number of replicas:\n-To change the number of replicas from 1 to  3:\n+To add additional Labels, for example `foo=bar`:\n \n [source]\n ----\n-quarkus.kubernetes.replicas=3\n+quarkus.kubernetes.labels.foo=bar\n ----\n \n-=== Defining a docker registry and repository\n+====  Annotations\n+\n+Out of the box the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes.\n+\n+[source, json]\n+----\n+  \"annotations\": {\n+    \"app.quarkus.io/vcs-url\" : \"<some url>\",\n+    \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n+   }\n+----\n+\n+==== Custom Annotations\n+\n+Custom annotations can be added in way similar to labels. For example to add the annotation `foo=bar`:\n \n-The docker registry and the user of the docker image can be specified, with the following properties:\n \n [source]\n ----\n-quarkus.kubernetes.group=myUser\n-quarkus.docker.registry=http://my.docker-registry.net\n+quarkus.kubernetes.annotations.foo=bar\n ----\n \n-Note: These options used to be `quarkus.kubernetes.docker.registry` and `quarkus.kubernetes.group` respectively.\n+==== Environment variables\n \n-=== Adding labels:\n-To add a new label to all generated resources, say `foo=bar`:\n+Kubernetes provides multiple ways of defining environment variables:\n+\n+- key value pairs\n+- from Secret\n+- from ConfigMap\n+- from fields\n+\n+To add a key value pair as an environment variable in the generated resources:\n \n [source]\n ----\n-quarkus.kubernetes.labels.foo=bar\n+quarkus.kubernetes.env-vars.my-env-var.value=foobar\n+----\n+\n+The command above will add `MY_ENV_VAR=foobar` as an environment variable.\n+Please note that the key `my-env-var` will be converted to uppercase and dashes will be replaced by underscores resulting in `MY_ENV_VAR`.\n+\n+You may also noticed that in contrast to labels and annotations for environment variables you don't just use a key=value approach.\n+That is because for environment variables there are additional options rather than just setting a value.\n+\n+===== Environment variables from Secret\n+\n+To add all key value pairs of a `Secret` as environment variables:\n+\n+[source]\n+----\n+quarkus.kubernetes.env-vars.my-env-var.secret=my-secret\n+----\n+\n+===== Environment variables from ConfigMap\n+\n+To add all key value pairs of a `ConfigMap` as environment variables:\n+\n+[source]\n+----\n+quarkus.kubernetes.env-vars.my-env-var.configmap=my-secret\n+----\n+\n+\n+==== Mounting volumes\n+\n+The Kubernetes extension allows the user to configure both volumes and mounts for the application.\n+\n+Any volume can be mounted with a simple configuration:\n+\n+[source]\n+----\n+quarkus.kubernetes.mounts.my-volume.path=/where/to/mount\n+----\n+\n+This will add a mount to my pod for volume `my-voume` to path `/where/to/mount`\n+\n+The volumes themselves can be configured as shown in the sections below:\n+\n+===== Secret volumes\n+\n+[source]\n+----\n+quarkus.kubernetes.secret-volumes.my-volume.secret-name=my-secret\n+----\n+\n+===== ConfigMap volumes\n+\n+[source]\n+----\n+quarkus.kubernetes.config-map-volumes.my-volume.config-map-name=my-secret\n+----\n+\n+=== Changing the number of replicas:\n+\n+To change the number of replicas from 1 to 3:\n+\n+[source]\n ----\n+quarkus.kubernetes.replicas=3\n+----\n+\n+=== Add readiness and liveness probes\n+\n+By default the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the Smallrye Health extension like so:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068eb985325fc7456f2f8da552737cb58e837ed0"}, "originalPosition": 313}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODY3MTcwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kubernetes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1Mjo1NVrOFxQShg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1Mjo1NVrOFxQShg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MTQzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:\n          \n          \n            \n            Applications that are deployed to Kubernetes and need to access the API server will usually make use of the `kubernetes-client` extension:", "url": "https://github.com/quarkusio/quarkus/pull/7501#discussion_r387191430", "createdAt": "2020-03-03T17:52:55Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/kubernetes.adoc", "diffHunk": "@@ -203,16 +329,37 @@ quarkus.kubernetes.readiness-probe.period-seconds=45\n \n Here you can find a complete reference to all the available configuration options:\n \n-==== Configuration options\n+=== Using the Kubernetes client\n+\n+Applications that are deployed to Kubernetes and need to access the API server, will usually make use of the `kubernetes-client` extension:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068eb985325fc7456f2f8da552737cb58e837ed0"}, "originalPosition": 335}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 29, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}