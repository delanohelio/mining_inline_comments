{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MDQzMDUy", "number": 12907, "title": "Qute: display custom error page during dev mode", "bodyText": "resolves #8756", "createdAt": "2020-10-23T15:27:07Z", "url": "https://github.com/quarkusio/quarkus/pull/12907", "merged": true, "mergeCommit": {"oid": "f0c412ae1f79c68cfedabe9003411d7f0f7ed06c"}, "closed": true, "closedAt": "2020-11-03T16:25:49Z", "author": {"login": "mkouba"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVabvygBqjM5MTUwNzk5NTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdY7tUZgFqTUyMjY2ODA5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "317fd58f0f83925804bd1aa42191376d1866ffe2", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/317fd58f0f83925804bd1aa42191376d1866ffe2", "committedDate": "2020-10-23T15:26:35Z", "message": "Qute: display custom error page during dev mode\n\n- resolves #8756"}, "afterCommit": {"oid": "70559129ffcfe0658237ed7525c50c2d9a49da32", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/70559129ffcfe0658237ed7525c50c2d9a49da32", "committedDate": "2020-10-23T17:57:17Z", "message": "Qute: display custom error page during dev mode\n\n- resolves #8756"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70559129ffcfe0658237ed7525c50c2d9a49da32", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/70559129ffcfe0658237ed7525c50c2d9a49da32", "committedDate": "2020-10-23T17:57:17Z", "message": "Qute: display custom error page during dev mode\n\n- resolves #8756"}, "afterCommit": {"oid": "08d86572fb9ae3b5e29c54791a8e238ec5ea23cf", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/08d86572fb9ae3b5e29c54791a8e238ec5ea23cf", "committedDate": "2020-10-25T11:21:58Z", "message": "Qute: display custom error page during dev mode\n\n- resolves #8756"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08d86572fb9ae3b5e29c54791a8e238ec5ea23cf", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/08d86572fb9ae3b5e29c54791a8e238ec5ea23cf", "committedDate": "2020-10-25T11:21:58Z", "message": "Qute: display custom error page during dev mode\n\n- resolves #8756"}, "afterCommit": {"oid": "f75364941edfb087fa45d00d38f9e0561c0fdc3a", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/f75364941edfb087fa45d00d38f9e0561c0fdc3a", "committedDate": "2020-10-25T11:26:54Z", "message": "Qute: display custom error page during dev mode\n\n- resolves #8756"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f75364941edfb087fa45d00d38f9e0561c0fdc3a", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/f75364941edfb087fa45d00d38f9e0561c0fdc3a", "committedDate": "2020-10-25T11:26:54Z", "message": "Qute: display custom error page during dev mode\n\n- resolves #8756"}, "afterCommit": {"oid": "d0d8b3c459c5900bbe1199d3513dd566277bff87", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/d0d8b3c459c5900bbe1199d3513dd566277bff87", "committedDate": "2020-10-25T11:28:05Z", "message": "Qute: display custom error page during dev mode\n\n- resolves #8756"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NDYyNTkx", "url": "https://github.com/quarkusio/quarkus/pull/12907#pullrequestreview-518462591", "createdAt": "2020-10-28T09:23:30Z", "commit": {"oid": "d0d8b3c459c5900bbe1199d3513dd566277bff87"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyMzozMFrOHpg0ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTozMTo0NlrOHphJ2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MTQyMg==", "bodyText": "That looks like the list is not useful, and it feels weird that if the exception has no cause it's not considered the root cause, since null will be returned.", "url": "https://github.com/quarkusio/quarkus/pull/12907#discussion_r513291422", "createdAt": "2020-10-28T09:23:30Z", "author": {"login": "FroMage"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/util/ExceptionUtil.java", "diffHunk": "@@ -76,6 +76,16 @@ public static String rootCauseFirstStackTrace(final Throwable exception) {\n         return generateStackTrace(modifiedRoot).replace(\"Caused by:\", \"Resulted in:\");\n     }\n \n+    public static Throwable getRootCause(Throwable exception) {\n+        final List<Throwable> exceptionChain = new ArrayList<>();\n+        Throwable curr = exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d8b3c459c5900bbe1199d3513dd566277bff87"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MzExNQ==", "bodyText": "I think @stuartwdouglas should look at this and the following methods and tell us if this is normal, or a bug.", "url": "https://github.com/quarkusio/quarkus/pull/12907#discussion_r513293115", "createdAt": "2020-10-28T09:26:02Z", "author": {"login": "FroMage"}, "path": "extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/devmode/QuteErrorPageSetup.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package io.quarkus.qute.runtime.devmode;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.stream.Collectors;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.dev.ErrorPageGenerators;\n+import io.quarkus.dev.spi.HotReplacementContext;\n+import io.quarkus.dev.spi.HotReplacementSetup;\n+import io.quarkus.qute.Engine;\n+import io.quarkus.qute.Escaper;\n+import io.quarkus.qute.EvalContext;\n+import io.quarkus.qute.ReflectionValueResolver;\n+import io.quarkus.qute.Template;\n+import io.quarkus.qute.ValueResolver;\n+import io.quarkus.runtime.TemplateHtmlBuilder;\n+\n+public class QuteErrorPageSetup implements HotReplacementSetup {\n+\n+    private static final Logger LOG = Logger.getLogger(QuteErrorPageSetup.class);\n+\n+    private static final String TEMPLATE_EXCEPTION = \"io.quarkus.qute.TemplateException\";\n+    private static final String ORIGIN = \"io.quarkus.qute.TemplateNode$Origin\";\n+\n+    private static final String PROBLEM_TEMPLATE = \"\"\n+            + \"<h3>#{problemIndex} {title}</h3>\\n\"\n+            + \"<div style=\\\"margin-bottom:0.5em;\\\">{description}</div>\\n\"\n+            + \"<div style=\\\"font-family:monospace;font-size:1em;background-color:#2E3436;color:white;padding:1em;margin-bottom:2em;\\\">\\n\"\n+            + \"{#if realLines.get(0) > 1}<span style=\\\"color:silver;\\\">...</span><br>{/if}\\n\"\n+            + \"{#for line in sourceLines}\\n\"\n+            // highlight the error line - start\n+            + \"{#if lineNumber is realLines.get(index)}<div style=\\\"background-color:#555753;\\\">{/if}\\n\"\n+            // line number\n+            + \"<span style=\\\"color:silver;\\\">{realLines.get(index).pad}</span>\\n\"\n+            // line content\n+            + \" {line}\\n\"\n+            // highlight the error line - end \n+            + \"{#if lineNumber is realLines.get(index)}</div>{#else}<br>{/if}\\n\"\n+            // point to error\n+            + \"{#if lineNumber is realLines.get(index)}{space.pad}<span style=\\\"color:red;\\\">{#for i in lineCharacterStart}={/for}^</span><br>{/if}\\n\"\n+            + \"{/for}\\n\"\n+            + \"{#if endLinesSkipped}<span style=\\\"color:silver;\\\">...</span>{/if}\\n\"\n+            + \"</div>\";\n+\n+    private HotReplacementContext hotReplacementContext;\n+\n+    @Override\n+    public void setupHotDeployment(HotReplacementContext context) {\n+        this.hotReplacementContext = context;\n+        ErrorPageGenerators.register(TEMPLATE_EXCEPTION, this::generatePage);\n+    }\n+\n+    String generatePage(Throwable exception) {\n+        Escaper escaper = Escaper.builder().add('\"', \"&quot;\").add('\\'', \"&#39;\")\n+                .add('&', \"&amp;\").add('<', \"&lt;\").add('>', \"&gt;\").build();\n+        Template problemTemplate = Engine.builder().addDefaults().addValueResolver(new ReflectionValueResolver())\n+                .addValueResolver(new ValueResolver() {\n+\n+                    public boolean appliesTo(EvalContext context) {\n+                        return context.getName().equals(\"pad\");\n+                    }\n+\n+                    @Override\n+                    public CompletionStage<Object> resolve(EvalContext context) {\n+                        return CompletableFuture.completedFuture(htmlPadRight(context.getBase().toString(), 5));\n+                    }\n+                })\n+                .build()\n+                .parse(PROBLEM_TEMPLATE);\n+        TemplateHtmlBuilder builder;\n+        List<Throwable> problems;\n+        Throwable[] suppressed = exception.getSuppressed();\n+        if (suppressed.length == 0) {\n+            problems = Collections.singletonList(exception);\n+        } else {\n+            problems = Arrays.asList(suppressed);\n+        }\n+\n+        String problemsFound = \"Found \" + problems.size() + \" Qute problems\";\n+        builder = new TemplateHtmlBuilder(\"Error restarting Quarkus\", problemsFound, problemsFound);\n+\n+        for (ListIterator<Throwable> it = problems.listIterator(); it.hasNext();) {\n+            Throwable problem = it.next();\n+            builder.append(getProblemInfo(it.previousIndex() + 1, problem, problemTemplate, escaper));\n+        }\n+        return builder.toString();\n+    }\n+\n+    String getProblemInfo(int index, Throwable problem, Template problemTemplate, Escaper escaper) {\n+        Object origin = getOrigin(problem);\n+        String[] messageLines = problem.getMessage().split(\"\\\\r?\\\\n\");\n+\n+        if (origin == null) {\n+            return Arrays.stream(messageLines).collect(Collectors.joining(\"<br>\"));\n+        }\n+\n+        String templateId = getTemplateId(origin);\n+        int lineNumber = getLine(origin);\n+        int lineCharacterStart = getLineCharacterStart(origin);\n+\n+        List<String> sourceLines = new ArrayList<>();\n+        try (BufferedReader in = getBufferedReader(templateId)) {\n+            String line = null;\n+            while ((line = in.readLine()) != null) {\n+                sourceLines.add(escaper.escape(line).replace(\" \", \"&nbsp;\"));\n+            }\n+        } catch (Exception e) {\n+            LOG.warn(\"Unable to read the template source: \" + templateId, e);\n+        }\n+\n+        List<Integer> realLines = new ArrayList<>();\n+        boolean endLinesSkipped = false;\n+        if (sourceLines.size() > 15) {\n+            // Line with error plus few surrounding lines\n+            int fromIndex = lineNumber > 7 ? (lineNumber - 8) : 0;\n+            int toIndex = (lineNumber + 7) > sourceLines.size() ? sourceLines.size() : lineNumber + 7;\n+            for (int j = fromIndex; j < toIndex; j++) {\n+                // e.g. [10,11,12]\n+                realLines.add(j + 1);\n+            }\n+            sourceLines = sourceLines.subList(fromIndex, toIndex);\n+            endLinesSkipped = toIndex != sourceLines.size();\n+        } else {\n+            for (int j = 0; j < sourceLines.size(); j++) {\n+                // [1,2,3]\n+                realLines.add(j);\n+            }\n+        }\n+\n+        return problemTemplate\n+                .data(\"problemIndex\", index)\n+                .data(\"title\", messageLines[0])\n+                .data(\"description\", Arrays.stream(messageLines).skip(1).collect(Collectors.joining(\"<br>\")))\n+                .data(\"sourceLines\", sourceLines)\n+                .data(\"lineNumber\", lineNumber)\n+                .data(\"lineCharacterStart\", lineCharacterStart)\n+                .data(\"realLines\", realLines)\n+                .data(\"endLinesSkipped\", endLinesSkipped)\n+                .data(\"space\", \" \")\n+                .render();\n+    }\n+\n+    static String htmlPadRight(String s, int n) {\n+        return String.format(\"%-\" + n + \"s\", s).replace(\" \", \"&nbsp;\");\n+    }\n+\n+    private BufferedReader getBufferedReader(String templateId) throws IOException {\n+        for (Path resource : hotReplacementContext.getResourcesDir()) {\n+            // src/main/resources/templates\n+            Path templates = resource.resolve(\"templates\");\n+            if (Files.exists(templates)) {\n+                // src/main/resources/templates/items.html\n+                Path template = templates.resolve(templateId.replace(\"\\\\\", \"/\"));\n+                if (Files.exists(template)) {\n+                    return Files.newBufferedReader(template);\n+                }\n+            }\n+        }\n+        throw new IllegalStateException(\"Template source not available\");\n+    }\n+\n+    private Object getOrigin(Throwable t) {\n+        Object origin = null;\n+        try {\n+            Method getOrigin = t.getClass().getClassLoader().loadClass(TEMPLATE_EXCEPTION).getMethod(\"getOrigin\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d8b3c459c5900bbe1199d3513dd566277bff87"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5NDU1MA==", "bodyText": "This is obviously useful, but I wonder if we should not put something more declarative in place, like ExceptionMapper<T> which JAX-RS has?", "url": "https://github.com/quarkusio/quarkus/pull/12907#discussion_r513294550", "createdAt": "2020-10-28T09:28:16Z", "author": {"login": "FroMage"}, "path": "core/devmode-spi/src/main/java/io/quarkus/dev/ErrorPageGenerators.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.dev;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * The generators can be used to generate a custom HTML page for a specific deployment exception that occurs during the\n+ * development mode.\n+ * <p>\n+ * In order to avoid classloading issues the generators should not access the root cause directly but use reflection instead\n+ * (the exception class could be loaded by a different class loader).\n+ */\n+public class ErrorPageGenerators {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d8b3c459c5900bbe1199d3513dd566277bff87"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5NTY4MQ==", "bodyText": "Can we put this in a template file? I strongly hate that in Quarkus core we have HTML in Java strings, but I understand why, no matter how mind-numbing frustrating this is. But in Qute this feels wrong, when this can be in a standalone Qute template file. Or is there a reason I'm not seeing?", "url": "https://github.com/quarkusio/quarkus/pull/12907#discussion_r513295681", "createdAt": "2020-10-28T09:29:57Z", "author": {"login": "FroMage"}, "path": "extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/devmode/QuteErrorPageSetup.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package io.quarkus.qute.runtime.devmode;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.stream.Collectors;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.dev.ErrorPageGenerators;\n+import io.quarkus.dev.spi.HotReplacementContext;\n+import io.quarkus.dev.spi.HotReplacementSetup;\n+import io.quarkus.qute.Engine;\n+import io.quarkus.qute.Escaper;\n+import io.quarkus.qute.EvalContext;\n+import io.quarkus.qute.ReflectionValueResolver;\n+import io.quarkus.qute.Template;\n+import io.quarkus.qute.ValueResolver;\n+import io.quarkus.runtime.TemplateHtmlBuilder;\n+\n+public class QuteErrorPageSetup implements HotReplacementSetup {\n+\n+    private static final Logger LOG = Logger.getLogger(QuteErrorPageSetup.class);\n+\n+    private static final String TEMPLATE_EXCEPTION = \"io.quarkus.qute.TemplateException\";\n+    private static final String ORIGIN = \"io.quarkus.qute.TemplateNode$Origin\";\n+\n+    private static final String PROBLEM_TEMPLATE = \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d8b3c459c5900bbe1199d3513dd566277bff87"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5NjQ0Mg==", "bodyText": "Doesn't this look like generally useful for pretty much anything HTML? Shouldn't we have something like Escaper.htmlBuilder() or Escaper.builder().forHtml()?", "url": "https://github.com/quarkusio/quarkus/pull/12907#discussion_r513296442", "createdAt": "2020-10-28T09:31:05Z", "author": {"login": "FroMage"}, "path": "extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/devmode/QuteErrorPageSetup.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package io.quarkus.qute.runtime.devmode;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.stream.Collectors;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.dev.ErrorPageGenerators;\n+import io.quarkus.dev.spi.HotReplacementContext;\n+import io.quarkus.dev.spi.HotReplacementSetup;\n+import io.quarkus.qute.Engine;\n+import io.quarkus.qute.Escaper;\n+import io.quarkus.qute.EvalContext;\n+import io.quarkus.qute.ReflectionValueResolver;\n+import io.quarkus.qute.Template;\n+import io.quarkus.qute.ValueResolver;\n+import io.quarkus.runtime.TemplateHtmlBuilder;\n+\n+public class QuteErrorPageSetup implements HotReplacementSetup {\n+\n+    private static final Logger LOG = Logger.getLogger(QuteErrorPageSetup.class);\n+\n+    private static final String TEMPLATE_EXCEPTION = \"io.quarkus.qute.TemplateException\";\n+    private static final String ORIGIN = \"io.quarkus.qute.TemplateNode$Origin\";\n+\n+    private static final String PROBLEM_TEMPLATE = \"\"\n+            + \"<h3>#{problemIndex} {title}</h3>\\n\"\n+            + \"<div style=\\\"margin-bottom:0.5em;\\\">{description}</div>\\n\"\n+            + \"<div style=\\\"font-family:monospace;font-size:1em;background-color:#2E3436;color:white;padding:1em;margin-bottom:2em;\\\">\\n\"\n+            + \"{#if realLines.get(0) > 1}<span style=\\\"color:silver;\\\">...</span><br>{/if}\\n\"\n+            + \"{#for line in sourceLines}\\n\"\n+            // highlight the error line - start\n+            + \"{#if lineNumber is realLines.get(index)}<div style=\\\"background-color:#555753;\\\">{/if}\\n\"\n+            // line number\n+            + \"<span style=\\\"color:silver;\\\">{realLines.get(index).pad}</span>\\n\"\n+            // line content\n+            + \" {line}\\n\"\n+            // highlight the error line - end \n+            + \"{#if lineNumber is realLines.get(index)}</div>{#else}<br>{/if}\\n\"\n+            // point to error\n+            + \"{#if lineNumber is realLines.get(index)}{space.pad}<span style=\\\"color:red;\\\">{#for i in lineCharacterStart}={/for}^</span><br>{/if}\\n\"\n+            + \"{/for}\\n\"\n+            + \"{#if endLinesSkipped}<span style=\\\"color:silver;\\\">...</span>{/if}\\n\"\n+            + \"</div>\";\n+\n+    private HotReplacementContext hotReplacementContext;\n+\n+    @Override\n+    public void setupHotDeployment(HotReplacementContext context) {\n+        this.hotReplacementContext = context;\n+        ErrorPageGenerators.register(TEMPLATE_EXCEPTION, this::generatePage);\n+    }\n+\n+    String generatePage(Throwable exception) {\n+        Escaper escaper = Escaper.builder().add('\"', \"&quot;\").add('\\'', \"&#39;\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d8b3c459c5900bbe1199d3513dd566277bff87"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5Njg1Ng==", "bodyText": "Can you please sort the errors by increasing location? You example screenshot shows the last error shown first and it's confusing :)", "url": "https://github.com/quarkusio/quarkus/pull/12907#discussion_r513296856", "createdAt": "2020-10-28T09:31:46Z", "author": {"login": "FroMage"}, "path": "extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/devmode/QuteErrorPageSetup.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package io.quarkus.qute.runtime.devmode;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.stream.Collectors;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.dev.ErrorPageGenerators;\n+import io.quarkus.dev.spi.HotReplacementContext;\n+import io.quarkus.dev.spi.HotReplacementSetup;\n+import io.quarkus.qute.Engine;\n+import io.quarkus.qute.Escaper;\n+import io.quarkus.qute.EvalContext;\n+import io.quarkus.qute.ReflectionValueResolver;\n+import io.quarkus.qute.Template;\n+import io.quarkus.qute.ValueResolver;\n+import io.quarkus.runtime.TemplateHtmlBuilder;\n+\n+public class QuteErrorPageSetup implements HotReplacementSetup {\n+\n+    private static final Logger LOG = Logger.getLogger(QuteErrorPageSetup.class);\n+\n+    private static final String TEMPLATE_EXCEPTION = \"io.quarkus.qute.TemplateException\";\n+    private static final String ORIGIN = \"io.quarkus.qute.TemplateNode$Origin\";\n+\n+    private static final String PROBLEM_TEMPLATE = \"\"\n+            + \"<h3>#{problemIndex} {title}</h3>\\n\"\n+            + \"<div style=\\\"margin-bottom:0.5em;\\\">{description}</div>\\n\"\n+            + \"<div style=\\\"font-family:monospace;font-size:1em;background-color:#2E3436;color:white;padding:1em;margin-bottom:2em;\\\">\\n\"\n+            + \"{#if realLines.get(0) > 1}<span style=\\\"color:silver;\\\">...</span><br>{/if}\\n\"\n+            + \"{#for line in sourceLines}\\n\"\n+            // highlight the error line - start\n+            + \"{#if lineNumber is realLines.get(index)}<div style=\\\"background-color:#555753;\\\">{/if}\\n\"\n+            // line number\n+            + \"<span style=\\\"color:silver;\\\">{realLines.get(index).pad}</span>\\n\"\n+            // line content\n+            + \" {line}\\n\"\n+            // highlight the error line - end \n+            + \"{#if lineNumber is realLines.get(index)}</div>{#else}<br>{/if}\\n\"\n+            // point to error\n+            + \"{#if lineNumber is realLines.get(index)}{space.pad}<span style=\\\"color:red;\\\">{#for i in lineCharacterStart}={/for}^</span><br>{/if}\\n\"\n+            + \"{/for}\\n\"\n+            + \"{#if endLinesSkipped}<span style=\\\"color:silver;\\\">...</span>{/if}\\n\"\n+            + \"</div>\";\n+\n+    private HotReplacementContext hotReplacementContext;\n+\n+    @Override\n+    public void setupHotDeployment(HotReplacementContext context) {\n+        this.hotReplacementContext = context;\n+        ErrorPageGenerators.register(TEMPLATE_EXCEPTION, this::generatePage);\n+    }\n+\n+    String generatePage(Throwable exception) {\n+        Escaper escaper = Escaper.builder().add('\"', \"&quot;\").add('\\'', \"&#39;\")\n+                .add('&', \"&amp;\").add('<', \"&lt;\").add('>', \"&gt;\").build();\n+        Template problemTemplate = Engine.builder().addDefaults().addValueResolver(new ReflectionValueResolver())\n+                .addValueResolver(new ValueResolver() {\n+\n+                    public boolean appliesTo(EvalContext context) {\n+                        return context.getName().equals(\"pad\");\n+                    }\n+\n+                    @Override\n+                    public CompletionStage<Object> resolve(EvalContext context) {\n+                        return CompletableFuture.completedFuture(htmlPadRight(context.getBase().toString(), 5));\n+                    }\n+                })\n+                .build()\n+                .parse(PROBLEM_TEMPLATE);\n+        TemplateHtmlBuilder builder;\n+        List<Throwable> problems;\n+        Throwable[] suppressed = exception.getSuppressed();\n+        if (suppressed.length == 0) {\n+            problems = Collections.singletonList(exception);\n+        } else {\n+            problems = Arrays.asList(suppressed);\n+        }\n+\n+        String problemsFound = \"Found \" + problems.size() + \" Qute problems\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d8b3c459c5900bbe1199d3513dd566277bff87"}, "originalPosition": 92}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0d8b3c459c5900bbe1199d3513dd566277bff87", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/d0d8b3c459c5900bbe1199d3513dd566277bff87", "committedDate": "2020-10-25T11:28:05Z", "message": "Qute: display custom error page during dev mode\n\n- resolves #8756"}, "afterCommit": {"oid": "223dcfd05d82c104519e4ba873afd99f38bc5df0", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/223dcfd05d82c104519e4ba873afd99f38bc5df0", "committedDate": "2020-11-03T11:50:59Z", "message": "Qute: display custom error page during dev mode\n\n- resolves #8756"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "569e4ca94111f0e815602cdebbf941a3cbc664a1", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/569e4ca94111f0e815602cdebbf941a3cbc664a1", "committedDate": "2020-11-03T12:42:53Z", "message": "Qute: display custom error page during dev mode\n\n- resolves #8756"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "223dcfd05d82c104519e4ba873afd99f38bc5df0", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/223dcfd05d82c104519e4ba873afd99f38bc5df0", "committedDate": "2020-11-03T11:50:59Z", "message": "Qute: display custom error page during dev mode\n\n- resolves #8756"}, "afterCommit": {"oid": "569e4ca94111f0e815602cdebbf941a3cbc664a1", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/569e4ca94111f0e815602cdebbf941a3cbc664a1", "committedDate": "2020-11-03T12:42:53Z", "message": "Qute: display custom error page during dev mode\n\n- resolves #8756"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNjY4MDk0", "url": "https://github.com/quarkusio/quarkus/pull/12907#pullrequestreview-522668094", "createdAt": "2020-11-03T16:25:19Z", "commit": {"oid": "569e4ca94111f0e815602cdebbf941a3cbc664a1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1714, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}