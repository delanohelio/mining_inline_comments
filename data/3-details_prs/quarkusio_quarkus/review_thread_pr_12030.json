{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzODcyMzMz", "number": 12030, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzozNjo1MFrOEjPvOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo1Mzo1M1rOEjfbMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzkzNDY2OnYy", "diffSide": "RIGHT", "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartProjectDefinition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzozNjo1MFrOHRfwrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODozNDo1M1rOHR259Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEwODIwNw==", "bodyText": "Some javadoc would be nice", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488108207", "createdAt": "2020-09-14T17:36:50Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartProjectDefinition.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public interface CodestartProjectDefinition {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08cf129de900b271d5be137353e37cc65fc291e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4NzQxMw==", "bodyText": "Yeah I plan to do it all at once: #12106", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488487413", "createdAt": "2020-09-15T08:34:53Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartProjectDefinition.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.devtools.codestarts;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public interface CodestartProjectDefinition {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEwODIwNw=="}, "originalCommit": {"oid": "c08cf129de900b271d5be137353e37cc65fc291e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mzk0MjM4OnYy", "diffSide": "RIGHT", "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/core/CodestartProjectGeneration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzozOToxM1rOHRf1Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzozOToxM1rOHRf1Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEwOTM5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .map(c -> c.getName() + \"codestart has not been applied (doesn't implement language '\" + languageName\n          \n          \n            \n                                .map(c -> c.getName() + \" codestart has not been applied (doesn't implement language '\" + languageName", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488109394", "createdAt": "2020-09-14T17:39:13Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/core/CodestartProjectGeneration.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.quarkus.devtools.codestarts.core;\n+\n+import static io.quarkus.devtools.codestarts.core.CodestartProcessor.buildStrategies;\n+\n+import io.quarkus.devtools.codestarts.Codestart;\n+import io.quarkus.devtools.codestarts.CodestartProjectDefinition;\n+import io.quarkus.devtools.codestarts.CodestartType;\n+import io.quarkus.devtools.codestarts.core.strategy.CodestartFileStrategy;\n+import io.quarkus.devtools.codestarts.utils.NestedMaps;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+final class CodestartProjectGeneration {\n+\n+    private CodestartProjectGeneration() {\n+    }\n+\n+    static void generateProject(final CodestartProjectDefinition projectDefinition, final Path targetDirectory)\n+            throws IOException {\n+        final MessageWriter log = projectDefinition.getProjectInput().log();\n+\n+        final String languageName = projectDefinition.getLanguageName();\n+\n+        // Processing data\n+        final Map<String, Object> data = NestedMaps.deepMerge(Stream.of(\n+                projectDefinition.getSharedData(),\n+                projectDefinition.getDepsData(),\n+                projectDefinition.getCodestartProjectData()));\n+\n+        log.debug(\"processed shared-data: %s\" + data);\n+\n+        final Codestart projectCodestart = projectDefinition.getRequiredCodestart(CodestartType.PROJECT);\n+\n+        final List<CodestartFileStrategy> strategies = buildStrategies(mergeStrategies(projectDefinition));\n+\n+        log.debug(\"file strategies: %s\", strategies);\n+\n+        CodestartProcessor processor = new CodestartProcessor(log, projectDefinition.getResourceLoader(),\n+                languageName, targetDirectory, strategies, data);\n+        processor.checkTargetDir();\n+        for (Codestart codestart : projectDefinition.getImplementedCodestarts()) {\n+            processor.process(codestart);\n+        }\n+        processor.writeFiles();\n+        log.info(\"\\napplying codestarts...\");\n+        log.info(projectDefinition.getImplementedCodestarts().stream()\n+                .map(c -> c.getType().getIcon() + \" \"\n+                        + c.getName())\n+                .collect(Collectors.joining(\"\\n\")));\n+        if (!projectDefinition.getUnimplementedCodestarts().isEmpty()) {\n+            log.warn(projectDefinition.getUnimplementedCodestarts().stream()\n+                    .map(c -> c.getName() + \"codestart has not been applied (doesn't implement language '\" + languageName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08cf129de900b271d5be137353e37cc65fc291e"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mzk0NzczOnYy", "diffSide": "RIGHT", "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartCatalogLoader.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzo0MDo0NlrOHRf4uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzowMTozNVrOHSAq6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDI2NA==", "bodyText": "Return CodestartCatalog? Or is there something particular in this implementation that I am missing?", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488110264", "createdAt": "2020-09-14T17:40:46Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartCatalogLoader.java", "diffHunk": "@@ -6,57 +6,47 @@\n import com.fasterxml.jackson.databind.MapperFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import io.quarkus.devtools.codestarts.core.CodestartSpec;\n+import io.quarkus.devtools.codestarts.core.DefaultCodestartCatalog;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n-import org.apache.commons.io.FilenameUtils;\n \n-final class CodestartLoader {\n+public final class CodestartCatalogLoader {\n+\n     private static final ObjectMapper YAML_MAPPER = new ObjectMapper(new YAMLFactory())\n             .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n             .enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n             .enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n             .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n \n-    private static final String CODESTARTS_DIR_BUNDLED = \"bundled-codestarts\";\n-    private static final String CODESTARTS_DIR_FROM_EXTENSIONS = \"codestarts\";\n-\n-    private CodestartLoader() {\n-    }\n-\n-    public static List<Codestart> loadAllCodestarts(CodestartInput input) throws IOException {\n-        return loadAllCodestarts(input.getResourceLoader());\n-    }\n-\n-    public static List<Codestart> loadAllCodestarts(CodestartResourceLoader resourceLoader) throws IOException {\n-        return Stream.concat(loadBundledCodestarts(resourceLoader).stream(),\n-                loadCodestartsFromExtensions(resourceLoader).stream()).collect(Collectors.toList());\n-    }\n-\n-    public static Collection<Codestart> loadBundledCodestarts(CodestartInput input) throws IOException {\n-        return loadBundledCodestarts(input.getResourceLoader());\n-    }\n-\n-    public static Collection<Codestart> loadBundledCodestarts(CodestartResourceLoader resourceLoader) throws IOException {\n-        return loadCodestarts(resourceLoader, CODESTARTS_DIR_BUNDLED);\n+    private CodestartCatalogLoader() {\n     }\n \n-    public static Collection<Codestart> loadCodestartsFromExtensions(CodestartInput input)\n+    public static DefaultCodestartCatalog loadDefaultCatalog(CodestartResourceLoader resourceLoader, String first,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08cf129de900b271d5be137353e37cc65fc291e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4OTIzNQ==", "bodyText": "@gastaldi I just wanted to avoid having the generic type everywhere. It really sucks that in Java you can't override a method parameter type with a subtype \ud83d\ude13", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488489235", "createdAt": "2020-09-15T08:37:48Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartCatalogLoader.java", "diffHunk": "@@ -6,57 +6,47 @@\n import com.fasterxml.jackson.databind.MapperFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import io.quarkus.devtools.codestarts.core.CodestartSpec;\n+import io.quarkus.devtools.codestarts.core.DefaultCodestartCatalog;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n-import org.apache.commons.io.FilenameUtils;\n \n-final class CodestartLoader {\n+public final class CodestartCatalogLoader {\n+\n     private static final ObjectMapper YAML_MAPPER = new ObjectMapper(new YAMLFactory())\n             .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n             .enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n             .enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n             .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n \n-    private static final String CODESTARTS_DIR_BUNDLED = \"bundled-codestarts\";\n-    private static final String CODESTARTS_DIR_FROM_EXTENSIONS = \"codestarts\";\n-\n-    private CodestartLoader() {\n-    }\n-\n-    public static List<Codestart> loadAllCodestarts(CodestartInput input) throws IOException {\n-        return loadAllCodestarts(input.getResourceLoader());\n-    }\n-\n-    public static List<Codestart> loadAllCodestarts(CodestartResourceLoader resourceLoader) throws IOException {\n-        return Stream.concat(loadBundledCodestarts(resourceLoader).stream(),\n-                loadCodestartsFromExtensions(resourceLoader).stream()).collect(Collectors.toList());\n-    }\n-\n-    public static Collection<Codestart> loadBundledCodestarts(CodestartInput input) throws IOException {\n-        return loadBundledCodestarts(input.getResourceLoader());\n-    }\n-\n-    public static Collection<Codestart> loadBundledCodestarts(CodestartResourceLoader resourceLoader) throws IOException {\n-        return loadCodestarts(resourceLoader, CODESTARTS_DIR_BUNDLED);\n+    private CodestartCatalogLoader() {\n     }\n \n-    public static Collection<Codestart> loadCodestartsFromExtensions(CodestartInput input)\n+    public static DefaultCodestartCatalog loadDefaultCatalog(CodestartResourceLoader resourceLoader, String first,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDI2NA=="}, "originalCommit": {"oid": "c08cf129de900b271d5be137353e37cc65fc291e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5MDMyMA==", "bodyText": "@gastaldi any better idea?", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488490320", "createdAt": "2020-09-15T08:39:31Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartCatalogLoader.java", "diffHunk": "@@ -6,57 +6,47 @@\n import com.fasterxml.jackson.databind.MapperFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import io.quarkus.devtools.codestarts.core.CodestartSpec;\n+import io.quarkus.devtools.codestarts.core.DefaultCodestartCatalog;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n-import org.apache.commons.io.FilenameUtils;\n \n-final class CodestartLoader {\n+public final class CodestartCatalogLoader {\n+\n     private static final ObjectMapper YAML_MAPPER = new ObjectMapper(new YAMLFactory())\n             .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n             .enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n             .enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n             .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n \n-    private static final String CODESTARTS_DIR_BUNDLED = \"bundled-codestarts\";\n-    private static final String CODESTARTS_DIR_FROM_EXTENSIONS = \"codestarts\";\n-\n-    private CodestartLoader() {\n-    }\n-\n-    public static List<Codestart> loadAllCodestarts(CodestartInput input) throws IOException {\n-        return loadAllCodestarts(input.getResourceLoader());\n-    }\n-\n-    public static List<Codestart> loadAllCodestarts(CodestartResourceLoader resourceLoader) throws IOException {\n-        return Stream.concat(loadBundledCodestarts(resourceLoader).stream(),\n-                loadCodestartsFromExtensions(resourceLoader).stream()).collect(Collectors.toList());\n-    }\n-\n-    public static Collection<Codestart> loadBundledCodestarts(CodestartInput input) throws IOException {\n-        return loadBundledCodestarts(input.getResourceLoader());\n-    }\n-\n-    public static Collection<Codestart> loadBundledCodestarts(CodestartResourceLoader resourceLoader) throws IOException {\n-        return loadCodestarts(resourceLoader, CODESTARTS_DIR_BUNDLED);\n+    private CodestartCatalogLoader() {\n     }\n \n-    public static Collection<Codestart> loadCodestartsFromExtensions(CodestartInput input)\n+    public static DefaultCodestartCatalog loadDefaultCatalog(CodestartResourceLoader resourceLoader, String first,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDI2NA=="}, "originalCommit": {"oid": "c08cf129de900b271d5be137353e37cc65fc291e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwODIzMQ==", "bodyText": "@gastaldi ok I removed DefaultCodestartCatalog and used CodestartCatalog<CodestartProjectInput>", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488608231", "createdAt": "2020-09-15T11:58:04Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartCatalogLoader.java", "diffHunk": "@@ -6,57 +6,47 @@\n import com.fasterxml.jackson.databind.MapperFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import io.quarkus.devtools.codestarts.core.CodestartSpec;\n+import io.quarkus.devtools.codestarts.core.DefaultCodestartCatalog;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n-import org.apache.commons.io.FilenameUtils;\n \n-final class CodestartLoader {\n+public final class CodestartCatalogLoader {\n+\n     private static final ObjectMapper YAML_MAPPER = new ObjectMapper(new YAMLFactory())\n             .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n             .enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n             .enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n             .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n \n-    private static final String CODESTARTS_DIR_BUNDLED = \"bundled-codestarts\";\n-    private static final String CODESTARTS_DIR_FROM_EXTENSIONS = \"codestarts\";\n-\n-    private CodestartLoader() {\n-    }\n-\n-    public static List<Codestart> loadAllCodestarts(CodestartInput input) throws IOException {\n-        return loadAllCodestarts(input.getResourceLoader());\n-    }\n-\n-    public static List<Codestart> loadAllCodestarts(CodestartResourceLoader resourceLoader) throws IOException {\n-        return Stream.concat(loadBundledCodestarts(resourceLoader).stream(),\n-                loadCodestartsFromExtensions(resourceLoader).stream()).collect(Collectors.toList());\n-    }\n-\n-    public static Collection<Codestart> loadBundledCodestarts(CodestartInput input) throws IOException {\n-        return loadBundledCodestarts(input.getResourceLoader());\n-    }\n-\n-    public static Collection<Codestart> loadBundledCodestarts(CodestartResourceLoader resourceLoader) throws IOException {\n-        return loadCodestarts(resourceLoader, CODESTARTS_DIR_BUNDLED);\n+    private CodestartCatalogLoader() {\n     }\n \n-    public static Collection<Codestart> loadCodestartsFromExtensions(CodestartInput input)\n+    public static DefaultCodestartCatalog loadDefaultCatalog(CodestartResourceLoader resourceLoader, String first,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDI2NA=="}, "originalCommit": {"oid": "c08cf129de900b271d5be137353e37cc65fc291e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY0NTg1OQ==", "bodyText": "The solution is simple: don't use generics \ud83d\ude01. But that's OK", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488645859", "createdAt": "2020-09-15T12:59:22Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartCatalogLoader.java", "diffHunk": "@@ -6,57 +6,47 @@\n import com.fasterxml.jackson.databind.MapperFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import io.quarkus.devtools.codestarts.core.CodestartSpec;\n+import io.quarkus.devtools.codestarts.core.DefaultCodestartCatalog;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n-import org.apache.commons.io.FilenameUtils;\n \n-final class CodestartLoader {\n+public final class CodestartCatalogLoader {\n+\n     private static final ObjectMapper YAML_MAPPER = new ObjectMapper(new YAMLFactory())\n             .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n             .enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n             .enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n             .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n \n-    private static final String CODESTARTS_DIR_BUNDLED = \"bundled-codestarts\";\n-    private static final String CODESTARTS_DIR_FROM_EXTENSIONS = \"codestarts\";\n-\n-    private CodestartLoader() {\n-    }\n-\n-    public static List<Codestart> loadAllCodestarts(CodestartInput input) throws IOException {\n-        return loadAllCodestarts(input.getResourceLoader());\n-    }\n-\n-    public static List<Codestart> loadAllCodestarts(CodestartResourceLoader resourceLoader) throws IOException {\n-        return Stream.concat(loadBundledCodestarts(resourceLoader).stream(),\n-                loadCodestartsFromExtensions(resourceLoader).stream()).collect(Collectors.toList());\n-    }\n-\n-    public static Collection<Codestart> loadBundledCodestarts(CodestartInput input) throws IOException {\n-        return loadBundledCodestarts(input.getResourceLoader());\n-    }\n-\n-    public static Collection<Codestart> loadBundledCodestarts(CodestartResourceLoader resourceLoader) throws IOException {\n-        return loadCodestarts(resourceLoader, CODESTARTS_DIR_BUNDLED);\n+    private CodestartCatalogLoader() {\n     }\n \n-    public static Collection<Codestart> loadCodestartsFromExtensions(CodestartInput input)\n+    public static DefaultCodestartCatalog loadDefaultCatalog(CodestartResourceLoader resourceLoader, String first,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDI2NA=="}, "originalCommit": {"oid": "c08cf129de900b271d5be137353e37cc65fc291e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY0NzQwMw==", "bodyText": "@gastaldi how?", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488647403", "createdAt": "2020-09-15T13:01:35Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/CodestartCatalogLoader.java", "diffHunk": "@@ -6,57 +6,47 @@\n import com.fasterxml.jackson.databind.MapperFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import io.quarkus.devtools.codestarts.core.CodestartSpec;\n+import io.quarkus.devtools.codestarts.core.DefaultCodestartCatalog;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n-import org.apache.commons.io.FilenameUtils;\n \n-final class CodestartLoader {\n+public final class CodestartCatalogLoader {\n+\n     private static final ObjectMapper YAML_MAPPER = new ObjectMapper(new YAMLFactory())\n             .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n             .enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY)\n             .enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n             .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n \n-    private static final String CODESTARTS_DIR_BUNDLED = \"bundled-codestarts\";\n-    private static final String CODESTARTS_DIR_FROM_EXTENSIONS = \"codestarts\";\n-\n-    private CodestartLoader() {\n-    }\n-\n-    public static List<Codestart> loadAllCodestarts(CodestartInput input) throws IOException {\n-        return loadAllCodestarts(input.getResourceLoader());\n-    }\n-\n-    public static List<Codestart> loadAllCodestarts(CodestartResourceLoader resourceLoader) throws IOException {\n-        return Stream.concat(loadBundledCodestarts(resourceLoader).stream(),\n-                loadCodestartsFromExtensions(resourceLoader).stream()).collect(Collectors.toList());\n-    }\n-\n-    public static Collection<Codestart> loadBundledCodestarts(CodestartInput input) throws IOException {\n-        return loadBundledCodestarts(input.getResourceLoader());\n-    }\n-\n-    public static Collection<Codestart> loadBundledCodestarts(CodestartResourceLoader resourceLoader) throws IOException {\n-        return loadCodestarts(resourceLoader, CODESTARTS_DIR_BUNDLED);\n+    private CodestartCatalogLoader() {\n     }\n \n-    public static Collection<Codestart> loadCodestartsFromExtensions(CodestartInput input)\n+    public static DefaultCodestartCatalog loadDefaultCatalog(CodestartResourceLoader resourceLoader, String first,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDI2NA=="}, "originalCommit": {"oid": "c08cf129de900b271d5be137353e37cc65fc291e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mzk1NjYyOnYy", "diffSide": "RIGHT", "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateProjectCommandHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzo0MzoxMlrOHRf-Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODozOToyMFrOHR3Ezg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMTYyNw==", "bodyText": "Where is extensionsToAdd used?", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488111627", "createdAt": "2020-09-14T17:43:12Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateProjectCommandHandler.java", "diffHunk": "@@ -87,14 +86,19 @@ public QuarkusCommandOutcome execute(QuarkusCommandInvocation invocation) throws\n                         .messageWriter(invocation.log())\n                         .build();\n                 invocation.log().info(\"-----------\");\n-                invocation.log().info(\"selected extensions: \\n\"\n-                        + extensionsToAdd.stream().map(e -> \"- \" + e.getGroupId() + \":\" + e.getArtifactId() + \"\\n\")\n-                                .collect(Collectors.joining()));\n-                final CodestartProject codestartProject = prepareProject(input);\n-                Codestarts.generateProject(codestartProject, invocation.getQuarkusProject().getProjectDirPath());\n+                if (!extensionsToAdd.isEmpty()) {\n+                    invocation.log().info(\"selected extensions: \\n\"\n+                            + extensionsToAdd.stream().map(e -> \"- \" + e.getGroupId() + \":\" + e.getArtifactId() + \"\\n\")\n+                                    .collect(Collectors.joining()));\n+                }\n+\n+                final QuarkusCodestartCatalog catalog = QuarkusCodestartCatalog\n+                        .fromQuarkusPlatformDescriptor(invocation.getPlatformDescriptor());\n+                final CodestartProjectDefinition projectDefinition = catalog.createProject(input);\n+                projectDefinition.generate(invocation.getQuarkusProject().getProjectDirPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08cf129de900b271d5be137353e37cc65fc291e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5MDE5MA==", "bodyText": "@gastaldi https://github.com/ia3andy/quarkus/blob/multi-project-codestart/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateProjectCommandHandler.java#L79", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488490190", "createdAt": "2020-09-15T08:39:20Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateProjectCommandHandler.java", "diffHunk": "@@ -87,14 +86,19 @@ public QuarkusCommandOutcome execute(QuarkusCommandInvocation invocation) throws\n                         .messageWriter(invocation.log())\n                         .build();\n                 invocation.log().info(\"-----------\");\n-                invocation.log().info(\"selected extensions: \\n\"\n-                        + extensionsToAdd.stream().map(e -> \"- \" + e.getGroupId() + \":\" + e.getArtifactId() + \"\\n\")\n-                                .collect(Collectors.joining()));\n-                final CodestartProject codestartProject = prepareProject(input);\n-                Codestarts.generateProject(codestartProject, invocation.getQuarkusProject().getProjectDirPath());\n+                if (!extensionsToAdd.isEmpty()) {\n+                    invocation.log().info(\"selected extensions: \\n\"\n+                            + extensionsToAdd.stream().map(e -> \"- \" + e.getGroupId() + \":\" + e.getArtifactId() + \"\\n\")\n+                                    .collect(Collectors.joining()));\n+                }\n+\n+                final QuarkusCodestartCatalog catalog = QuarkusCodestartCatalog\n+                        .fromQuarkusPlatformDescriptor(invocation.getPlatformDescriptor());\n+                final CodestartProjectDefinition projectDefinition = catalog.createProject(input);\n+                projectDefinition.generate(invocation.getQuarkusProject().getProjectDirPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMTYyNw=="}, "originalCommit": {"oid": "c08cf129de900b271d5be137353e37cc65fc291e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjUwNDgzOnYy", "diffSide": "RIGHT", "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/Codestart.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODo1Mzo1M1rOHR3pYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOTo0MDoxOFrOHR5blQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5OTU1NQ==", "bodyText": "Is this a leftover?", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488499555", "createdAt": "2020-09-15T08:53:53Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/Codestart.java", "diffHunk": "@@ -1,6 +1,7 @@\n package io.quarkus.devtools.codestarts;\n \n-import java.util.Comparator;\n+import io.quarkus.devtools.codestarts.core.CodestartSpec;\n+import io.quarkus.devtools.codestarts.utils.NestedMaps;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef03ea164f2e4f6af770f7024188ee3f2f0d1829"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMTM0NA==", "bodyText": "@aloubyansky what do you mean?", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488501344", "createdAt": "2020-09-15T08:56:37Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/Codestart.java", "diffHunk": "@@ -1,6 +1,7 @@\n package io.quarkus.devtools.codestarts;\n \n-import java.util.Comparator;\n+import io.quarkus.devtools.codestarts.core.CodestartSpec;\n+import io.quarkus.devtools.codestarts.utils.NestedMaps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5OTU1NQ=="}, "originalCommit": {"oid": "ef03ea164f2e4f6af770f7024188ee3f2f0d1829"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwMTkwMQ==", "bodyText": "the comparators are now in DefaultCodestartProjectDefinition", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488501901", "createdAt": "2020-09-15T08:57:23Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/Codestart.java", "diffHunk": "@@ -1,6 +1,7 @@\n package io.quarkus.devtools.codestarts;\n \n-import java.util.Comparator;\n+import io.quarkus.devtools.codestarts.core.CodestartSpec;\n+import io.quarkus.devtools.codestarts.utils.NestedMaps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5OTU1NQ=="}, "originalCommit": {"oid": "ef03ea164f2e4f6af770f7024188ee3f2f0d1829"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUwNzIzOQ==", "bodyText": "Are these imports necessary?", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488507239", "createdAt": "2020-09-15T09:05:30Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/Codestart.java", "diffHunk": "@@ -1,6 +1,7 @@\n package io.quarkus.devtools.codestarts;\n \n-import java.util.Comparator;\n+import io.quarkus.devtools.codestarts.core.CodestartSpec;\n+import io.quarkus.devtools.codestarts.utils.NestedMaps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5OTU1NQ=="}, "originalCommit": {"oid": "ef03ea164f2e4f6af770f7024188ee3f2f0d1829"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyODc4OQ==", "bodyText": "Ah ok @aloubyansky , they were in the same package :)", "url": "https://github.com/quarkusio/quarkus/pull/12030#discussion_r488528789", "createdAt": "2020-09-15T09:40:18Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/codestarts/src/main/java/io/quarkus/devtools/codestarts/Codestart.java", "diffHunk": "@@ -1,6 +1,7 @@\n package io.quarkus.devtools.codestarts;\n \n-import java.util.Comparator;\n+import io.quarkus.devtools.codestarts.core.CodestartSpec;\n+import io.quarkus.devtools.codestarts.utils.NestedMaps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ5OTU1NQ=="}, "originalCommit": {"oid": "ef03ea164f2e4f6af770f7024188ee3f2f0d1829"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 410, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}