{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMTg0MDQ0", "number": 12271, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDo1NTowMFrOEmQuPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToyMTowNVrOEmROSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTU1MzI0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDo1NTowMFrOHWMB_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDo1NTowMFrOHWMB_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyNzgzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            WARNING: `io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback` has been deprecated in favor of `io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback` and will be removed in future releases of Quarkus\n          \n          \n            \n            WARNING: `io.quarkus.test.junit.callback.QuarkusTestBeforeAllCallback` has been deprecated in favor of `io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback` and will be removed in future releases of Quarkus", "url": "https://github.com/quarkusio/quarkus/pull/12271#discussion_r493027837", "createdAt": "2020-09-22T20:55:00Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -436,10 +436,12 @@ transaction, but roll it back once the test method is complete to revert any dat\n \n Alternatively or additionally to an interceptor, you can enrich *all* your `@QuarkusTest` classes by implementing the following callback interfaces:\n \n-* `io.quarkus.test.junit.callback.QuarkusTestBeforeAllCallback`\n+* `io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback`\n * `io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback`\n * `io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback`\n \n+WARNING: `io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback` has been deprecated in favor of `io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback` and will be removed in future releases of Quarkus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b339124810258171866e2f825e5001fb475debda"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTYzNTI5OnYy", "diffSide": "RIGHT", "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToyMTowNVrOHWM08A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNDo1MToxOFrOHWWRkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0MDg4MA==", "bodyText": "I suppose we cannot (yet) log something here? If not, can we when calling afterConstruct?", "url": "https://github.com/quarkusio/quarkus/pull/12271#discussion_r493040880", "createdAt": "2020-09-22T21:21:05Z", "author": {"login": "famod"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java", "diffHunk": "@@ -329,14 +331,20 @@ private void populateCallbacks(ClassLoader classLoader) throws ClassNotFoundExce\n         // make sure that we start over everytime we populate the callbacks\n         // otherwise previous runs of QuarkusTest (with different TestProfile values can leak into the new run)\n         quarkusTestMethodContextClass = null;\n-        beforeAllCallbacks = new ArrayList<>();\n+        afterConstructCallbacks = new ArrayList<>();\n+        legacyAfterConstructCallbacks = new ArrayList<>();\n         beforeEachCallbacks = new ArrayList<>();\n         afterEachCallbacks = new ArrayList<>();\n \n-        ServiceLoader<?> quarkusTestBeforeAllLoader = ServiceLoader\n+        ServiceLoader<?> quarkusTestAfterConstructLoader = ServiceLoader\n+                .load(Class.forName(QuarkusTestAfterConstructCallback.class.getName(), false, classLoader), classLoader);\n+        for (Object quarkusTestAfterConstructCallback : quarkusTestAfterConstructLoader) {\n+            afterConstructCallbacks.add(quarkusTestAfterConstructCallback);\n+        }\n+        ServiceLoader<?> quarkusTestLegacyAfterConstructLoader = ServiceLoader\n                 .load(Class.forName(QuarkusTestBeforeAllCallback.class.getName(), false, classLoader), classLoader);\n-        for (Object quarkusTestBeforeAllCallback : quarkusTestBeforeAllLoader) {\n-            beforeAllCallbacks.add(quarkusTestBeforeAllCallback);\n+        for (Object quarkusTestLegacyAfterConstructCallback : quarkusTestLegacyAfterConstructLoader) {\n+            legacyAfterConstructCallbacks.add(quarkusTestLegacyAfterConstructCallback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b339124810258171866e2f825e5001fb475debda"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5NTY2NQ==", "bodyText": "I've never been able to log anything from the extension exception with System.out...", "url": "https://github.com/quarkusio/quarkus/pull/12271#discussion_r493195665", "createdAt": "2020-09-23T04:51:18Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java", "diffHunk": "@@ -329,14 +331,20 @@ private void populateCallbacks(ClassLoader classLoader) throws ClassNotFoundExce\n         // make sure that we start over everytime we populate the callbacks\n         // otherwise previous runs of QuarkusTest (with different TestProfile values can leak into the new run)\n         quarkusTestMethodContextClass = null;\n-        beforeAllCallbacks = new ArrayList<>();\n+        afterConstructCallbacks = new ArrayList<>();\n+        legacyAfterConstructCallbacks = new ArrayList<>();\n         beforeEachCallbacks = new ArrayList<>();\n         afterEachCallbacks = new ArrayList<>();\n \n-        ServiceLoader<?> quarkusTestBeforeAllLoader = ServiceLoader\n+        ServiceLoader<?> quarkusTestAfterConstructLoader = ServiceLoader\n+                .load(Class.forName(QuarkusTestAfterConstructCallback.class.getName(), false, classLoader), classLoader);\n+        for (Object quarkusTestAfterConstructCallback : quarkusTestAfterConstructLoader) {\n+            afterConstructCallbacks.add(quarkusTestAfterConstructCallback);\n+        }\n+        ServiceLoader<?> quarkusTestLegacyAfterConstructLoader = ServiceLoader\n                 .load(Class.forName(QuarkusTestBeforeAllCallback.class.getName(), false, classLoader), classLoader);\n-        for (Object quarkusTestBeforeAllCallback : quarkusTestBeforeAllLoader) {\n-            beforeAllCallbacks.add(quarkusTestBeforeAllCallback);\n+        for (Object quarkusTestLegacyAfterConstructCallback : quarkusTestLegacyAfterConstructLoader) {\n+            legacyAfterConstructCallbacks.add(quarkusTestLegacyAfterConstructCallback);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0MDg4MA=="}, "originalCommit": {"oid": "b339124810258171866e2f825e5001fb475debda"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 202, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}