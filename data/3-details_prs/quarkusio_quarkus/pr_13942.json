{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNzQxMTky", "number": 13942, "title": "Add the remaining jdbc data-sources to kubernetes service bindings", "bodyText": "Follows up on #13737", "createdAt": "2020-12-17T09:51:38Z", "url": "https://github.com/quarkusio/quarkus/pull/13942", "merged": true, "mergeCommit": {"oid": "92deaddfc8f88d248bc54eb952987921f01ea635"}, "closed": true, "closedAt": "2021-01-27T19:46:49Z", "author": {"login": "geoand"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdzqa8egH2gAyNTQxNzQxMTkyOjAzMWU1YmY0ZWRkYjJmNjM5OWVmOGM3MjZlOGRmOGU2M2JiODQzOWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd0VhoJAFqTU3NzY5OTQ3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "031e5bf4eddb2f6399ef8c726e8df8e63bb8439c", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/031e5bf4eddb2f6399ef8c726e8df8e63bb8439c", "committedDate": "2021-01-25T17:32:49Z", "message": "Add the remaining jdbc data-sources to kubernetes service bindings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "900c2b528162d4f871410bfc405358e38e4f6dbb", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/900c2b528162d4f871410bfc405358e38e4f6dbb", "committedDate": "2020-12-17T09:51:16Z", "message": "WIP - Add more kubernetes service bindings"}, "afterCommit": {"oid": "031e5bf4eddb2f6399ef8c726e8df8e63bb8439c", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/031e5bf4eddb2f6399ef8c726e8df8e63bb8439c", "committedDate": "2021-01-25T17:32:49Z", "message": "Add the remaining jdbc data-sources to kubernetes service bindings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1NjUyNjA1", "url": "https://github.com/quarkusio/quarkus/pull/13942#pullrequestreview-575652605", "createdAt": "2021-01-25T17:47:29Z", "commit": {"oid": "031e5bf4eddb2f6399ef8c726e8df8e63bb8439c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNzo0NzoyOVrOIZy99A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNzo0NzoyOVrOIZy99A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkyMDM3Mg==", "bodyText": "Does this really work with all the datasources? I'm wondering if the datasource shouldn't be providing the format?", "url": "https://github.com/quarkusio/quarkus/pull/13942#discussion_r563920372", "createdAt": "2021-01-25T17:47:29Z", "author": {"login": "gsmet"}, "path": "extensions/kubernetes-service-binding/runtime/src/main/java/io/quarkus/kubernetes/service/binding/runtime/JdbcDatasourceUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package io.quarkus.kubernetes.service.binding.runtime;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * This utility collects the conversion of Service types that correspond to JDBC data-sources\n+ * into a single place as the code for all is the same.\n+ * This inevitably results in datasource related logic being places inside this (otherwise)\n+ * service binding agnostic module, but it's a small price to pay compared to the alternative\n+ * of copying and pasting the same code for all JDBC data-sources.\n+ */\n+public class JdbcDatasourceUtil {\n+\n+    private static final Logger log = Logger.getLogger(JdbcDatasourceUtil.class);\n+\n+    public static Optional<ServiceBindingConfigSource> convert(List<ServiceBinding> serviceBindings, String type) {\n+        return convert(serviceBindings, type, type);\n+    }\n+\n+    public static Optional<ServiceBindingConfigSource> convert(List<ServiceBinding> serviceBindings, String bindingType,\n+            String urlType) {\n+        Optional<ServiceBinding> matchingByType = ServiceBinding.singleMatchingByType(bindingType, serviceBindings);\n+        if (!matchingByType.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        Map<String, String> properties = new HashMap<>();\n+        ServiceBinding binding = matchingByType.get();\n+\n+        String username = binding.getProperties().get(\"username\");\n+        if (username != null) {\n+            properties.put(\"quarkus.datasource.username\", username);\n+        } else {\n+            log.debug(\"Property 'username' was not found\");\n+        }\n+        String password = binding.getProperties().get(\"password\");\n+        if (password != null) {\n+            properties.put(\"quarkus.datasource.password\", password);\n+        } else {\n+            log.debug(\"Property 'password' was not found\");\n+        }\n+        String host = binding.getProperties().get(\"host\");\n+        String port = binding.getProperties().get(\"port\");\n+        String database = binding.getProperties().get(\"database\");\n+        if ((host != null) && (database != null)) {\n+            String portPart = \"\";\n+            if (port != null) {\n+                portPart = \":\" + port;\n+            }\n+            properties.put(\"quarkus.datasource.jdbc.url\",\n+                    String.format(\"jdbc:%s://%s%s/%s\", urlType, host, portPart, database));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "031e5bf4eddb2f6399ef8c726e8df8e63bb8439c"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3Njk5NDc0", "url": "https://github.com/quarkusio/quarkus/pull/13942#pullrequestreview-577699474", "createdAt": "2021-01-27T19:46:02Z", "commit": {"oid": "031e5bf4eddb2f6399ef8c726e8df8e63bb8439c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4210, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}