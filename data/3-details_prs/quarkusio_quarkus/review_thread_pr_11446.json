{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NTI0MTIy", "number": 11446, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyMToxN1rOEZgaQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyNjowM1rOEZgizQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTgwODY2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/security-customization.adoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyMToxN1rOHCW6sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTozMDoxOVrOHCaEdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzNDY3Mg==", "bodyText": "I'd like to understand what's the point of moving this work to the worker pool, because everything we do here is in-memory and probably much faster than a thread context switch.", "url": "https://github.com/quarkusio/quarkus/pull/11446#discussion_r472234672", "createdAt": "2020-08-18T14:21:17Z", "author": {"login": "Ladicek"}, "path": "docs/src/main/asciidoc/security-customization.adoc", "diffHunk": "@@ -95,6 +92,65 @@ public class RolesAugmentor implements SecurityIdentityAugmentor {\n }\n ----\n \n+Here is another example showing how to use the client certificate available in the current link:security-built-in-authentication#mutual-tls[Mutual TLS] request to add more roles:\n+\n+[source,java]\n+----\n+import java.security.cert.X509Certificate;\n+import io.quarkus.security.credential.CertificateCredential;\n+import io.quarkus.security.identity.AuthenticationRequestContext;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.security.identity.SecurityIdentityAugmentor;\n+import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n+import io.smallrye.mutiny.Uni;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import java.util.function.Supplier;\n+import java.util.Set;\n+\n+@ApplicationScoped\n+public class RolesAugmentor implements SecurityIdentityAugmentor {\n+\n+    @Override\n+    public int priority() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n+        return context.runBlocking(build(identity));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c8d2e95014f939484c71bd2320245c7c2177f9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2MzMxNA==", "bodyText": "@Ladicek Was a copy and paste, good point let me update", "url": "https://github.com/quarkusio/quarkus/pull/11446#discussion_r472263314", "createdAt": "2020-08-18T14:58:36Z", "author": {"login": "sberyozkin"}, "path": "docs/src/main/asciidoc/security-customization.adoc", "diffHunk": "@@ -95,6 +92,65 @@ public class RolesAugmentor implements SecurityIdentityAugmentor {\n }\n ----\n \n+Here is another example showing how to use the client certificate available in the current link:security-built-in-authentication#mutual-tls[Mutual TLS] request to add more roles:\n+\n+[source,java]\n+----\n+import java.security.cert.X509Certificate;\n+import io.quarkus.security.credential.CertificateCredential;\n+import io.quarkus.security.identity.AuthenticationRequestContext;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.security.identity.SecurityIdentityAugmentor;\n+import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n+import io.smallrye.mutiny.Uni;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import java.util.function.Supplier;\n+import java.util.Set;\n+\n+@ApplicationScoped\n+public class RolesAugmentor implements SecurityIdentityAugmentor {\n+\n+    @Override\n+    public int priority() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n+        return context.runBlocking(build(identity));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzNDY3Mg=="}, "originalCommit": {"oid": "b5c8d2e95014f939484c71bd2320245c7c2177f9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3ODY2NQ==", "bodyText": "@Ladicek Fixed it, also added a comment to the example I copied/pasted from", "url": "https://github.com/quarkusio/quarkus/pull/11446#discussion_r472278665", "createdAt": "2020-08-18T15:20:16Z", "author": {"login": "sberyozkin"}, "path": "docs/src/main/asciidoc/security-customization.adoc", "diffHunk": "@@ -95,6 +92,65 @@ public class RolesAugmentor implements SecurityIdentityAugmentor {\n }\n ----\n \n+Here is another example showing how to use the client certificate available in the current link:security-built-in-authentication#mutual-tls[Mutual TLS] request to add more roles:\n+\n+[source,java]\n+----\n+import java.security.cert.X509Certificate;\n+import io.quarkus.security.credential.CertificateCredential;\n+import io.quarkus.security.identity.AuthenticationRequestContext;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.security.identity.SecurityIdentityAugmentor;\n+import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n+import io.smallrye.mutiny.Uni;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import java.util.function.Supplier;\n+import java.util.Set;\n+\n+@ApplicationScoped\n+public class RolesAugmentor implements SecurityIdentityAugmentor {\n+\n+    @Override\n+    public int priority() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n+        return context.runBlocking(build(identity));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzNDY3Mg=="}, "originalCommit": {"oid": "b5c8d2e95014f939484c71bd2320245c7c2177f9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NjMyNQ==", "bodyText": "Looks good, thanks!", "url": "https://github.com/quarkusio/quarkus/pull/11446#discussion_r472286325", "createdAt": "2020-08-18T15:30:19Z", "author": {"login": "Ladicek"}, "path": "docs/src/main/asciidoc/security-customization.adoc", "diffHunk": "@@ -95,6 +92,65 @@ public class RolesAugmentor implements SecurityIdentityAugmentor {\n }\n ----\n \n+Here is another example showing how to use the client certificate available in the current link:security-built-in-authentication#mutual-tls[Mutual TLS] request to add more roles:\n+\n+[source,java]\n+----\n+import java.security.cert.X509Certificate;\n+import io.quarkus.security.credential.CertificateCredential;\n+import io.quarkus.security.identity.AuthenticationRequestContext;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.security.identity.SecurityIdentityAugmentor;\n+import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n+import io.smallrye.mutiny.Uni;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import java.util.function.Supplier;\n+import java.util.Set;\n+\n+@ApplicationScoped\n+public class RolesAugmentor implements SecurityIdentityAugmentor {\n+\n+    @Override\n+    public int priority() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n+        return context.runBlocking(build(identity));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzNDY3Mg=="}, "originalCommit": {"oid": "b5c8d2e95014f939484c71bd2320245c7c2177f9"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTgyMzQ1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/security-openid-connect-web-authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyNDozM1rOHCXDwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyNDozM1rOHCXDwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzNjk5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you do prefer to use SPA and `XMLHttpRequest`(XHR) with Quarkus `web-app` applications then please be aware that OpenId Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus which will lead to the authentication failures if the Quarkus `web-app` application and OpenId Connect Provider are hosted on the different HTTP domains/ports.\n          \n          \n            \n            If you prefer to use SPA and `XMLHttpRequest`(XHR) with Quarkus applications, please be aware that OpenID Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus. This will lead to authentication failures if the Quarkus application and the OpenID Connect Provider are hosted on the different HTTP domains/ports.", "url": "https://github.com/quarkusio/quarkus/pull/11446#discussion_r472236994", "createdAt": "2020-08-18T14:24:33Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/security-openid-connect-web-authentication.adoc", "diffHunk": "@@ -287,10 +287,9 @@ If UserInfo is the source of the roles then set `quarkus.oidc.user-info-required\n \n Please check if implementing SPAs the way it is suggested in the link:security-openid-connect#single-page-applications[Single Page Applications for Service Applications] section can meet your requirements.\n \n-If you do prefer to use SPA and `XMLHttpRequest`(XHR) with Quarkus `web-app` applications then please be aware that OpenId Connect Providers may not support CORS for Authorization endpoints where the users\n- are authenticated after a redirect from Quarkus which will lead to the authentication failures if the Quarkus `web-app` application and OpenId Connect Provider are hosted on the different HTTP domains/ports.\n+If you do prefer to use SPA and `XMLHttpRequest`(XHR) with Quarkus `web-app` applications then please be aware that OpenId Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus which will lead to the authentication failures if the Quarkus `web-app` application and OpenId Connect Provider are hosted on the different HTTP domains/ports.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c8d2e95014f939484c71bd2320245c7c2177f9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTgzMDUzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/security-openid-connect-web-authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyNjowM1rOHCXIGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyNjowM1rOHCXIGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzODEwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In such cases one needs to set the `quarkus.oidc.authentication.xhr-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value and the browser script needs to be updated to set `X-Requested-With` header with the `XMLHttpRequest` value and reload the last requested page in case of `499`, for example:\n          \n          \n            \n            In such cases, set the `quarkus.oidc.authentication.xhr-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value. The browser script also needs to be updated to set `X-Requested-With` header with the `XMLHttpRequest` value and reload the last requested page in case of `499`, for example:", "url": "https://github.com/quarkusio/quarkus/pull/11446#discussion_r472238105", "createdAt": "2020-08-18T14:26:03Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/security-openid-connect-web-authentication.adoc", "diffHunk": "@@ -287,10 +287,9 @@ If UserInfo is the source of the roles then set `quarkus.oidc.user-info-required\n \n Please check if implementing SPAs the way it is suggested in the link:security-openid-connect#single-page-applications[Single Page Applications for Service Applications] section can meet your requirements.\n \n-If you do prefer to use SPA and `XMLHttpRequest`(XHR) with Quarkus `web-app` applications then please be aware that OpenId Connect Providers may not support CORS for Authorization endpoints where the users\n- are authenticated after a redirect from Quarkus which will lead to the authentication failures if the Quarkus `web-app` application and OpenId Connect Provider are hosted on the different HTTP domains/ports.\n+If you do prefer to use SPA and `XMLHttpRequest`(XHR) with Quarkus `web-app` applications then please be aware that OpenId Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus which will lead to the authentication failures if the Quarkus `web-app` application and OpenId Connect Provider are hosted on the different HTTP domains/ports.\n \n-In such cases one needs to set the `quarkus.oidc.authentication.xhr-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value and the browser script needs to be updated to set \"X-Requested-With\" header with the `XMLHttpRequest` value and reload the last requested page in case of `499`, for example:\n+In such cases one needs to set the `quarkus.oidc.authentication.xhr-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value and the browser script needs to be updated to set `X-Requested-With` header with the `XMLHttpRequest` value and reload the last requested page in case of `499`, for example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c8d2e95014f939484c71bd2320245c7c2177f9"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 592, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}