{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MTkzMjQx", "number": 9127, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTo0Njo0MVrOD6NjBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzozODowN1rOD7p3_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzY1OTU4OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTo0Njo0MVrOGR6yTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzowMzozNlrOGR9e5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MjEyNw==", "bodyText": "I think that this map needs to be synchronized as it could be accessed from multiple threads concurrently. We should probably use ConcurrentHashMap and computeIfAbsent() in the getDataSource() method.", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421442127", "createdAt": "2020-05-07T11:46:41Z", "author": {"login": "mkouba"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -67,7 +67,7 @@\n     private final TransactionSynchronizationRegistry transactionSynchronizationRegistry;\n     private final DataSourceSupport dataSourceSupport;\n \n-    private final List<AgroalDataSource> dataSources = new ArrayList<>();\n+    private final Map<String, AgroalDataSource> dataSources = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ1MDgwNw==", "bodyText": "This is one thing I was pondering as well... Under which circumstances could multiple threads access this?", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421450807", "createdAt": "2020-05-07T12:03:25Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -67,7 +67,7 @@\n     private final TransactionSynchronizationRegistry transactionSynchronizationRegistry;\n     private final DataSourceSupport dataSourceSupport;\n \n-    private final List<AgroalDataSource> dataSources = new ArrayList<>();\n+    private final Map<String, AgroalDataSource> dataSources = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MjEyNw=="}, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ1MzUyOA==", "bodyText": "Well, the bean is @Singleton, right? And so the bean instance is shared. I don't know enough about how the DS instances are accessed in quarkus but in theory it's possible. We should also ensure the correct visibility from JMM point of view.", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421453528", "createdAt": "2020-05-07T12:08:42Z", "author": {"login": "mkouba"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -67,7 +67,7 @@\n     private final TransactionSynchronizationRegistry transactionSynchronizationRegistry;\n     private final DataSourceSupport dataSourceSupport;\n \n-    private final List<AgroalDataSource> dataSources = new ArrayList<>();\n+    private final Map<String, AgroalDataSource> dataSources = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MjEyNw=="}, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ2Nzc2OA==", "bodyText": "DataSource is a synthetic bean whose supplier ends up calling this method. The calls to this method theoretically would only be done from recorders which are not concurrent.\nBut I do understand that we should be on the safe side here and make it a ConcurrentHashMap.\nBut I remember @gsmet saying that computeIfAbsent is very slow in that case, do we have a better alternative?", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421467768", "createdAt": "2020-05-07T12:34:08Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -67,7 +67,7 @@\n     private final TransactionSynchronizationRegistry transactionSynchronizationRegistry;\n     private final DataSourceSupport dataSourceSupport;\n \n-    private final List<AgroalDataSource> dataSources = new ArrayList<>();\n+    private final Map<String, AgroalDataSource> dataSources = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MjEyNw=="}, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3NjMxMA==", "bodyText": "I think that computeIfAbsent is absolutely OK unless called very often in a critical path (which is not the case here).", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421476310", "createdAt": "2020-05-07T12:47:58Z", "author": {"login": "mkouba"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -67,7 +67,7 @@\n     private final TransactionSynchronizationRegistry transactionSynchronizationRegistry;\n     private final DataSourceSupport dataSourceSupport;\n \n-    private final List<AgroalDataSource> dataSources = new ArrayList<>();\n+    private final Map<String, AgroalDataSource> dataSources = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MjEyNw=="}, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NjMwOQ==", "bodyText": "Yeah we're definitely not a on a hot path here. Just wondering if @gsmet had some equally easy better performing alternative to offer.", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421486309", "createdAt": "2020-05-07T13:03:36Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -67,7 +67,7 @@\n     private final TransactionSynchronizationRegistry transactionSynchronizationRegistry;\n     private final DataSourceSupport dataSourceSupport;\n \n-    private final List<AgroalDataSource> dataSources = new ArrayList<>();\n+    private final Map<String, AgroalDataSource> dataSources = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MjEyNw=="}, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzY3Mjc4OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTo1MDozMlrOGR66Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzowMjoyMVrOGR9b5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NDE1NQ==", "bodyText": "The name of this class is somehow confusing. If possible, I'd rename it to DataSources or something like that and the javadoc should be clear that it's registered as a bean. In fact, I see no reason to set the scope in the AgroalProcessor. Just annotate this class with @Singleton.", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421444155", "createdAt": "2020-05-07T11:50:32Z", "author": {"login": "mkouba"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -67,7 +67,7 @@\n     private final TransactionSynchronizationRegistry transactionSynchronizationRegistry;\n     private final DataSourceSupport dataSourceSupport;\n \n-    private final List<AgroalDataSource> dataSources = new ArrayList<>();\n+    private final Map<String, AgroalDataSource> dataSources = new HashMap<>();\n \n     public DataSourceProducer(DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NTU0MQ==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421485541", "createdAt": "2020-05-07T13:02:21Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -67,7 +67,7 @@\n     private final TransactionSynchronizationRegistry transactionSynchronizationRegistry;\n     private final DataSourceSupport dataSourceSupport;\n \n-    private final List<AgroalDataSource> dataSources = new ArrayList<>();\n+    private final Map<String, AgroalDataSource> dataSources = new HashMap<>();\n \n     public DataSourceProducer(DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NDE1NQ=="}, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzY3OTcxOnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceRetriever.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTo1Mjo0NlrOGR6-lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzowMjoxMVrOGR9bhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NTI2OQ==", "bodyText": "I find this class useless. If needer, I'd add a static util method to DataSources:\nstatic AgroalDataSource getDataSource(String dataSourceName) {\n   return Arc.container().instance(DataSources.class).get().getDataSource(dataSourceName);\n}", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421445269", "createdAt": "2020-05-07T11:52:46Z", "author": {"login": "mkouba"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceRetriever.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.quarkus.agroal.runtime;\n+\n+import io.agroal.api.AgroalDataSource;\n+import io.quarkus.arc.Arc;\n+\n+/**\n+ * Meant to be used from recorders that create synthetic beans that need access to {@code Datasource}.\n+ * In such using {@code Arc.container.instance(DataSource.class)} is not possible because\n+ * {@code Datasource} is itself a synthetic bean.\n+ *\n+ * This class class relies on the fact that DataSourceProducer should given the same input\n+ * always return the same {@code AgroalDataSource} no matter how many times it is invoked\n+ * (which makes since because {@code DataSource} is a {@code Singleton} bean).\n+ *\n+ * This is not thread-safe and relies on the fact that the recorders are called in order\n+ * (the order being worked out by the Quarkus build system)\n+ */\n+public final class DataSourceRetriever {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ1MTY0MQ==", "bodyText": "I think it makes sense, I'll take a look.", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421451641", "createdAt": "2020-05-07T12:04:51Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceRetriever.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.quarkus.agroal.runtime;\n+\n+import io.agroal.api.AgroalDataSource;\n+import io.quarkus.arc.Arc;\n+\n+/**\n+ * Meant to be used from recorders that create synthetic beans that need access to {@code Datasource}.\n+ * In such using {@code Arc.container.instance(DataSource.class)} is not possible because\n+ * {@code Datasource} is itself a synthetic bean.\n+ *\n+ * This class class relies on the fact that DataSourceProducer should given the same input\n+ * always return the same {@code AgroalDataSource} no matter how many times it is invoked\n+ * (which makes since because {@code DataSource} is a {@code Singleton} bean).\n+ *\n+ * This is not thread-safe and relies on the fact that the recorders are called in order\n+ * (the order being worked out by the Quarkus build system)\n+ */\n+public final class DataSourceRetriever {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NTI2OQ=="}, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NTQ0Nw==", "bodyText": "I moved it to DataSources", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421485447", "createdAt": "2020-05-07T13:02:11Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceRetriever.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.quarkus.agroal.runtime;\n+\n+import io.agroal.api.AgroalDataSource;\n+import io.quarkus.arc.Arc;\n+\n+/**\n+ * Meant to be used from recorders that create synthetic beans that need access to {@code Datasource}.\n+ * In such using {@code Arc.container.instance(DataSource.class)} is not possible because\n+ * {@code Datasource} is itself a synthetic bean.\n+ *\n+ * This class class relies on the fact that DataSourceProducer should given the same input\n+ * always return the same {@code AgroalDataSource} no matter how many times it is invoked\n+ * (which makes since because {@code DataSource} is a {@code Singleton} bean).\n+ *\n+ * This is not thread-safe and relies on the fact that the recorders are called in order\n+ * (the order being worked out by the Quarkus build system)\n+ */\n+public final class DataSourceRetriever {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0NTI2OQ=="}, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzcwMzgzOnYy", "diffSide": "RIGHT", "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTo1OTo1MlrOGR7NfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNDo1MlrOGR97jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0OTA4NA==", "bodyText": "You could make use of io.quarkus.arc.processor.QualifierConfigurator, i.e. something like:\nconfigurator\n   .addQualifier().annotation(DotNames.NAMED).addValue(\"value\", beanName).done()  \n   .addQualifier().annotation(FlywayDataSource.class).addValue(\"value\", dataSourceName).done()\n   .done();\nThat looks much nicer, doesn't it? ;-)", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421449084", "createdAt": "2020-05-07T11:59:52Z", "author": {"login": "mkouba"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -86,21 +87,62 @@ void build(BuildProducer<AdditionalBeanBuildItem> additionalBeanProducer,\n \n     @BuildStep\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    ServiceStartBuildItem configureRuntimeProperties(FlywayRecorder recorder,\n-            FlywayRuntimeConfig flywayRuntimeConfig,\n-            BeanContainerBuildItem beanContainer,\n+    ServiceStartBuildItem createBeansAndStartActions(FlywayRecorder recorder,\n             List<JdbcDataSourceBuildItem> jdbcDataSourceBuildItems,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer,\n             BuildProducer<JdbcDataSourceSchemaReadyBuildItem> schemaReadyBuildItem) {\n-        recorder.doStartActions(flywayRuntimeConfig, beanContainer.getValue());\n+\n+        // make a FlywayContainerProducer bean\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(FlywayContainerProducer.class).setUnremovable()\n+                .setDefaultScope(DotNames.SINGLETON).build());\n+        // add the @FlywayDataSource class otherwise it won't registered as a qualifier\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(FlywayDataSource.class).build());\n+\n+        Collection<String> dataSourceNames = getDataSourceNames(jdbcDataSourceBuildItems);\n+\n+        for (String dataSourceName : dataSourceNames) {\n+            SyntheticBeanBuildItem.ExtendedBeanConfigurator configurator = SyntheticBeanBuildItem\n+                    .configure(Flyway.class)\n+                    .scope(Dependent.class) // this is what the existing code does, but it doesn't seem reasonable\n+                    .setRuntimeInit()\n+                    .unremovable()\n+                    .supplier(recorder.flywaySupplier(dataSourceName));\n+\n+            if (DataSourceUtil.isDefault(dataSourceName)) {\n+                configurator.addQualifier(Default.class);\n+            } else {\n+                String beanName = FLYWAY_BEAN_NAME_PREFIX + dataSourceName;\n+                configurator.name(beanName);\n+                configurator\n+                        .qualifiers(\n+                                AnnotationInstance.create(DotNames.NAMED, null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ1MTc3Nw==", "bodyText": "Indeed it does :)", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421451777", "createdAt": "2020-05-07T12:05:09Z", "author": {"login": "geoand"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -86,21 +87,62 @@ void build(BuildProducer<AdditionalBeanBuildItem> additionalBeanProducer,\n \n     @BuildStep\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    ServiceStartBuildItem configureRuntimeProperties(FlywayRecorder recorder,\n-            FlywayRuntimeConfig flywayRuntimeConfig,\n-            BeanContainerBuildItem beanContainer,\n+    ServiceStartBuildItem createBeansAndStartActions(FlywayRecorder recorder,\n             List<JdbcDataSourceBuildItem> jdbcDataSourceBuildItems,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer,\n             BuildProducer<JdbcDataSourceSchemaReadyBuildItem> schemaReadyBuildItem) {\n-        recorder.doStartActions(flywayRuntimeConfig, beanContainer.getValue());\n+\n+        // make a FlywayContainerProducer bean\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(FlywayContainerProducer.class).setUnremovable()\n+                .setDefaultScope(DotNames.SINGLETON).build());\n+        // add the @FlywayDataSource class otherwise it won't registered as a qualifier\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(FlywayDataSource.class).build());\n+\n+        Collection<String> dataSourceNames = getDataSourceNames(jdbcDataSourceBuildItems);\n+\n+        for (String dataSourceName : dataSourceNames) {\n+            SyntheticBeanBuildItem.ExtendedBeanConfigurator configurator = SyntheticBeanBuildItem\n+                    .configure(Flyway.class)\n+                    .scope(Dependent.class) // this is what the existing code does, but it doesn't seem reasonable\n+                    .setRuntimeInit()\n+                    .unremovable()\n+                    .supplier(recorder.flywaySupplier(dataSourceName));\n+\n+            if (DataSourceUtil.isDefault(dataSourceName)) {\n+                configurator.addQualifier(Default.class);\n+            } else {\n+                String beanName = FLYWAY_BEAN_NAME_PREFIX + dataSourceName;\n+                configurator.name(beanName);\n+                configurator\n+                        .qualifiers(\n+                                AnnotationInstance.create(DotNames.NAMED, null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0OTA4NA=="}, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MDM5NQ==", "bodyText": "Still creating AnnotationInstance directly?", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421490395", "createdAt": "2020-05-07T13:09:55Z", "author": {"login": "mkouba"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -86,21 +87,62 @@ void build(BuildProducer<AdditionalBeanBuildItem> additionalBeanProducer,\n \n     @BuildStep\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    ServiceStartBuildItem configureRuntimeProperties(FlywayRecorder recorder,\n-            FlywayRuntimeConfig flywayRuntimeConfig,\n-            BeanContainerBuildItem beanContainer,\n+    ServiceStartBuildItem createBeansAndStartActions(FlywayRecorder recorder,\n             List<JdbcDataSourceBuildItem> jdbcDataSourceBuildItems,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer,\n             BuildProducer<JdbcDataSourceSchemaReadyBuildItem> schemaReadyBuildItem) {\n-        recorder.doStartActions(flywayRuntimeConfig, beanContainer.getValue());\n+\n+        // make a FlywayContainerProducer bean\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(FlywayContainerProducer.class).setUnremovable()\n+                .setDefaultScope(DotNames.SINGLETON).build());\n+        // add the @FlywayDataSource class otherwise it won't registered as a qualifier\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(FlywayDataSource.class).build());\n+\n+        Collection<String> dataSourceNames = getDataSourceNames(jdbcDataSourceBuildItems);\n+\n+        for (String dataSourceName : dataSourceNames) {\n+            SyntheticBeanBuildItem.ExtendedBeanConfigurator configurator = SyntheticBeanBuildItem\n+                    .configure(Flyway.class)\n+                    .scope(Dependent.class) // this is what the existing code does, but it doesn't seem reasonable\n+                    .setRuntimeInit()\n+                    .unremovable()\n+                    .supplier(recorder.flywaySupplier(dataSourceName));\n+\n+            if (DataSourceUtil.isDefault(dataSourceName)) {\n+                configurator.addQualifier(Default.class);\n+            } else {\n+                String beanName = FLYWAY_BEAN_NAME_PREFIX + dataSourceName;\n+                configurator.name(beanName);\n+                configurator\n+                        .qualifiers(\n+                                AnnotationInstance.create(DotNames.NAMED, null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0OTA4NA=="}, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTM4NA==", "bodyText": "Oh man... I only applied the change to AgroalProcessor.", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421491384", "createdAt": "2020-05-07T13:11:31Z", "author": {"login": "geoand"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -86,21 +87,62 @@ void build(BuildProducer<AdditionalBeanBuildItem> additionalBeanProducer,\n \n     @BuildStep\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    ServiceStartBuildItem configureRuntimeProperties(FlywayRecorder recorder,\n-            FlywayRuntimeConfig flywayRuntimeConfig,\n-            BeanContainerBuildItem beanContainer,\n+    ServiceStartBuildItem createBeansAndStartActions(FlywayRecorder recorder,\n             List<JdbcDataSourceBuildItem> jdbcDataSourceBuildItems,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer,\n             BuildProducer<JdbcDataSourceSchemaReadyBuildItem> schemaReadyBuildItem) {\n-        recorder.doStartActions(flywayRuntimeConfig, beanContainer.getValue());\n+\n+        // make a FlywayContainerProducer bean\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(FlywayContainerProducer.class).setUnremovable()\n+                .setDefaultScope(DotNames.SINGLETON).build());\n+        // add the @FlywayDataSource class otherwise it won't registered as a qualifier\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(FlywayDataSource.class).build());\n+\n+        Collection<String> dataSourceNames = getDataSourceNames(jdbcDataSourceBuildItems);\n+\n+        for (String dataSourceName : dataSourceNames) {\n+            SyntheticBeanBuildItem.ExtendedBeanConfigurator configurator = SyntheticBeanBuildItem\n+                    .configure(Flyway.class)\n+                    .scope(Dependent.class) // this is what the existing code does, but it doesn't seem reasonable\n+                    .setRuntimeInit()\n+                    .unremovable()\n+                    .supplier(recorder.flywaySupplier(dataSourceName));\n+\n+            if (DataSourceUtil.isDefault(dataSourceName)) {\n+                configurator.addQualifier(Default.class);\n+            } else {\n+                String beanName = FLYWAY_BEAN_NAME_PREFIX + dataSourceName;\n+                configurator.name(beanName);\n+                configurator\n+                        .qualifiers(\n+                                AnnotationInstance.create(DotNames.NAMED, null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0OTA4NA=="}, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MzY0Ng==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421493646", "createdAt": "2020-05-07T13:14:52Z", "author": {"login": "geoand"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -86,21 +87,62 @@ void build(BuildProducer<AdditionalBeanBuildItem> additionalBeanProducer,\n \n     @BuildStep\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    ServiceStartBuildItem configureRuntimeProperties(FlywayRecorder recorder,\n-            FlywayRuntimeConfig flywayRuntimeConfig,\n-            BeanContainerBuildItem beanContainer,\n+    ServiceStartBuildItem createBeansAndStartActions(FlywayRecorder recorder,\n             List<JdbcDataSourceBuildItem> jdbcDataSourceBuildItems,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer,\n             BuildProducer<JdbcDataSourceSchemaReadyBuildItem> schemaReadyBuildItem) {\n-        recorder.doStartActions(flywayRuntimeConfig, beanContainer.getValue());\n+\n+        // make a FlywayContainerProducer bean\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(FlywayContainerProducer.class).setUnremovable()\n+                .setDefaultScope(DotNames.SINGLETON).build());\n+        // add the @FlywayDataSource class otherwise it won't registered as a qualifier\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(FlywayDataSource.class).build());\n+\n+        Collection<String> dataSourceNames = getDataSourceNames(jdbcDataSourceBuildItems);\n+\n+        for (String dataSourceName : dataSourceNames) {\n+            SyntheticBeanBuildItem.ExtendedBeanConfigurator configurator = SyntheticBeanBuildItem\n+                    .configure(Flyway.class)\n+                    .scope(Dependent.class) // this is what the existing code does, but it doesn't seem reasonable\n+                    .setRuntimeInit()\n+                    .unremovable()\n+                    .supplier(recorder.flywaySupplier(dataSourceName));\n+\n+            if (DataSourceUtil.isDefault(dataSourceName)) {\n+                configurator.addQualifier(Default.class);\n+            } else {\n+                String beanName = FLYWAY_BEAN_NAME_PREFIX + dataSourceName;\n+                configurator.name(beanName);\n+                configurator\n+                        .qualifiers(\n+                                AnnotationInstance.create(DotNames.NAMED, null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0OTA4NA=="}, "originalCommit": {"oid": "56f5be0c272dc8057a45609b91670b0110d89174"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzk1ODY5OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AgroalRecorder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzowODo1NlrOGR9sJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoxNDo1OVrOGR971A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4OTcwMQ==", "bodyText": "Now you could use DataSources.fromName() here, or?", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421489701", "createdAt": "2020-05-07T13:08:56Z", "author": {"login": "mkouba"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AgroalRecorder.java", "diffHunk": "@@ -22,8 +21,8 @@ public DataSourceSupport get() {\n \n     public Supplier<AgroalDataSource> agroalDataSourceSupplier(String dataSourceName,\n             @SuppressWarnings(\"unused\") DataSourcesRuntimeConfig dataSourcesRuntimeConfig) {\n-        final AgroalDataSource agroalDataSource = Arc.container().instance(DataSourceProducer.class).get()\n-                .createDataSource(dataSourceName);\n+        final AgroalDataSource agroalDataSource = Arc.container().instance(DataSources.class).get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed859dc87868990547d59788e295968efaa2f2ca"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MDg0MA==", "bodyText": "Oops, I forgot to add that :)", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421490840", "createdAt": "2020-05-07T13:10:39Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AgroalRecorder.java", "diffHunk": "@@ -22,8 +21,8 @@ public DataSourceSupport get() {\n \n     public Supplier<AgroalDataSource> agroalDataSourceSupplier(String dataSourceName,\n             @SuppressWarnings(\"unused\") DataSourcesRuntimeConfig dataSourcesRuntimeConfig) {\n-        final AgroalDataSource agroalDataSource = Arc.container().instance(DataSourceProducer.class).get()\n-                .createDataSource(dataSourceName);\n+        final AgroalDataSource agroalDataSource = Arc.container().instance(DataSources.class).get()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4OTcwMQ=="}, "originalCommit": {"oid": "ed859dc87868990547d59788e295968efaa2f2ca"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MzcxNg==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r421493716", "createdAt": "2020-05-07T13:14:59Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AgroalRecorder.java", "diffHunk": "@@ -22,8 +21,8 @@ public DataSourceSupport get() {\n \n     public Supplier<AgroalDataSource> agroalDataSourceSupplier(String dataSourceName,\n             @SuppressWarnings(\"unused\") DataSourcesRuntimeConfig dataSourcesRuntimeConfig) {\n-        final AgroalDataSource agroalDataSource = Arc.container().instance(DataSourceProducer.class).get()\n-                .createDataSource(dataSourceName);\n+        final AgroalDataSource agroalDataSource = Arc.container().instance(DataSources.class).get()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4OTcwMQ=="}, "originalCommit": {"oid": "ed859dc87868990547d59788e295968efaa2f2ca"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTEyNjU0OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSources.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjowNjo0N1rOGTjEGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzo0Mjo1NFrOGUHPJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1MDYxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * (which makes since because {@code DataSource} is a {@code Singleton} bean).\n          \n          \n            \n                 * (which makes sense because {@code DataSource} is a {@code Singleton} bean).", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r423150619", "createdAt": "2020-05-11T16:06:47Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSources.java", "diffHunk": "@@ -88,7 +90,32 @@ public DataSourceProducer(DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,\n         this.dataSourceSupport = dataSourceSupport;\n     }\n \n-    public AgroalDataSource createDataSource(String dataSourceName) {\n+    /**\n+     * Meant to be used from recorders that create synthetic beans that need access to {@code Datasource}.\n+     * In such using {@code Arc.container.instance(DataSource.class)} is not possible because\n+     * {@code Datasource} is itself a synthetic bean.\n+     *\n+     * This method relies on the fact that {@code DataSources} should - given the same input -\n+     * always return the same {@code AgroalDataSource} no matter how many times it is invoked\n+     * (which makes since because {@code DataSource} is a {@code Singleton} bean).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f8e3d7394d40b8156119ec44c4d0121ded122f2"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0MzI2OA==", "bodyText": "A classic mistake I always make :)", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r423743268", "createdAt": "2020-05-12T13:42:54Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSources.java", "diffHunk": "@@ -88,7 +90,32 @@ public DataSourceProducer(DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,\n         this.dataSourceSupport = dataSourceSupport;\n     }\n \n-    public AgroalDataSource createDataSource(String dataSourceName) {\n+    /**\n+     * Meant to be used from recorders that create synthetic beans that need access to {@code Datasource}.\n+     * In such using {@code Arc.container.instance(DataSource.class)} is not possible because\n+     * {@code Datasource} is itself a synthetic bean.\n+     *\n+     * This method relies on the fact that {@code DataSources} should - given the same input -\n+     * always return the same {@code AgroalDataSource} no matter how many times it is invoked\n+     * (which makes since because {@code DataSource} is a {@code Singleton} bean).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1MDYxOQ=="}, "originalCommit": {"oid": "3f8e3d7394d40b8156119ec44c4d0121ded122f2"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODc4NjUyOnYy", "diffSide": "RIGHT", "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzozODowN1rOGUHAbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzozOTowMFrOGUHC0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczOTUwMQ==", "bodyText": "I tend to agree we should change that. In a separate PR probably so that we have it in the changelog.", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r423739501", "createdAt": "2020-05-12T13:38:07Z", "author": {"login": "gsmet"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -86,21 +84,59 @@ void build(BuildProducer<AdditionalBeanBuildItem> additionalBeanProducer,\n \n     @BuildStep\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    ServiceStartBuildItem configureRuntimeProperties(FlywayRecorder recorder,\n-            FlywayRuntimeConfig flywayRuntimeConfig,\n-            BeanContainerBuildItem beanContainer,\n+    ServiceStartBuildItem createBeansAndStartActions(FlywayRecorder recorder,\n             List<JdbcDataSourceBuildItem> jdbcDataSourceBuildItems,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer,\n             BuildProducer<JdbcDataSourceSchemaReadyBuildItem> schemaReadyBuildItem) {\n-        recorder.doStartActions(flywayRuntimeConfig, beanContainer.getValue());\n+\n+        // make a FlywayContainerProducer bean\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(FlywayContainerProducer.class).setUnremovable()\n+                .setDefaultScope(DotNames.SINGLETON).build());\n+        // add the @FlywayDataSource class otherwise it won't registered as a qualifier\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(FlywayDataSource.class).build());\n+\n+        Collection<String> dataSourceNames = getDataSourceNames(jdbcDataSourceBuildItems);\n+\n+        for (String dataSourceName : dataSourceNames) {\n+            SyntheticBeanBuildItem.ExtendedBeanConfigurator configurator = SyntheticBeanBuildItem\n+                    .configure(Flyway.class)\n+                    .scope(Dependent.class) // this is what the existing code does, but it doesn't seem reasonable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f8e3d7394d40b8156119ec44c4d0121ded122f2"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0MDExNQ==", "bodyText": "I agree", "url": "https://github.com/quarkusio/quarkus/pull/9127#discussion_r423740115", "createdAt": "2020-05-12T13:39:00Z", "author": {"login": "geoand"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -86,21 +84,59 @@ void build(BuildProducer<AdditionalBeanBuildItem> additionalBeanProducer,\n \n     @BuildStep\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    ServiceStartBuildItem configureRuntimeProperties(FlywayRecorder recorder,\n-            FlywayRuntimeConfig flywayRuntimeConfig,\n-            BeanContainerBuildItem beanContainer,\n+    ServiceStartBuildItem createBeansAndStartActions(FlywayRecorder recorder,\n             List<JdbcDataSourceBuildItem> jdbcDataSourceBuildItems,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer,\n             BuildProducer<JdbcDataSourceSchemaReadyBuildItem> schemaReadyBuildItem) {\n-        recorder.doStartActions(flywayRuntimeConfig, beanContainer.getValue());\n+\n+        // make a FlywayContainerProducer bean\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(FlywayContainerProducer.class).setUnremovable()\n+                .setDefaultScope(DotNames.SINGLETON).build());\n+        // add the @FlywayDataSource class otherwise it won't registered as a qualifier\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(FlywayDataSource.class).build());\n+\n+        Collection<String> dataSourceNames = getDataSourceNames(jdbcDataSourceBuildItems);\n+\n+        for (String dataSourceName : dataSourceNames) {\n+            SyntheticBeanBuildItem.ExtendedBeanConfigurator configurator = SyntheticBeanBuildItem\n+                    .configure(Flyway.class)\n+                    .scope(Dependent.class) // this is what the existing code does, but it doesn't seem reasonable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczOTUwMQ=="}, "originalCommit": {"oid": "3f8e3d7394d40b8156119ec44c4d0121ded122f2"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3271, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}