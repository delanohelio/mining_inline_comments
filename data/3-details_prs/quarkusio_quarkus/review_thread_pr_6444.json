{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDExNDk4", "number": 6444, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDoyMjo0MFrODWf0wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDoyMjo0MFrODWf0wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTE2NjcyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDoyMjo0MFrOFbShXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMjowOTozM1rOFbVAog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1OTMyNQ==", "bodyText": "So the method can be named Integer ANY(Integer i, String methodName)? I guess you should add an example for this, no?", "url": "https://github.com/quarkusio/quarkus/pull/6444#discussion_r364159325", "createdAt": "2020-01-08T10:22:40Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -538,10 +538,25 @@ NOTE: A value resolver is also generated for all types used in parameter declara\n [[template_extension_methods]]\n === Template Extension Methods\n \n-A value resolver is automatically generated for a template extension method annotated with `@TemplateExtension`.\n-The method must be static, must not return `void` and must accept at least one parameter. \n-The class of the first parameter is used to match the base object and the method name is used to match the property name.\n+Extension methods can be used to extend the data classes with new functionality.\n+For example, it is possible to add \"computed properties\" and \"virtual methods\".\n+A value resolver is automatically generated for a method annotated with `@TemplateExtension`.\n+If declared on a class a value resolver is generated for every non-private method declared on the class.\n+Methods that do not meet the following requirements are ignored.\n \n+A template extension method:\n+\n+* must be static, \n+* must not return `void`,\n+* must accept at least one parameter.\n+ \n+The class of the first parameter is always used to match the base object.\n+The method name is used to match the property name by default. \n+However, it is possible to specify the matching name with `TemplateExtension#matchName()`.\n+\n+NOTE: A special constant - `ANY` - may be used to specify that the extension method matches any name. In that case, the method must declare at least two parameters and the second parameter must be a string. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39a5980f04700a45107485971df9c4c60f0956a7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3NzY4Nw==", "bodyText": "Not really - the constant must be used in the TemplateExtension#matchName(). There is an example in the test.", "url": "https://github.com/quarkusio/quarkus/pull/6444#discussion_r364177687", "createdAt": "2020-01-08T11:06:30Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -538,10 +538,25 @@ NOTE: A value resolver is also generated for all types used in parameter declara\n [[template_extension_methods]]\n === Template Extension Methods\n \n-A value resolver is automatically generated for a template extension method annotated with `@TemplateExtension`.\n-The method must be static, must not return `void` and must accept at least one parameter. \n-The class of the first parameter is used to match the base object and the method name is used to match the property name.\n+Extension methods can be used to extend the data classes with new functionality.\n+For example, it is possible to add \"computed properties\" and \"virtual methods\".\n+A value resolver is automatically generated for a method annotated with `@TemplateExtension`.\n+If declared on a class a value resolver is generated for every non-private method declared on the class.\n+Methods that do not meet the following requirements are ignored.\n \n+A template extension method:\n+\n+* must be static, \n+* must not return `void`,\n+* must accept at least one parameter.\n+ \n+The class of the first parameter is always used to match the base object.\n+The method name is used to match the property name by default. \n+However, it is possible to specify the matching name with `TemplateExtension#matchName()`.\n+\n+NOTE: A special constant - `ANY` - may be used to specify that the extension method matches any name. In that case, the method must declare at least two parameters and the second parameter must be a string. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1OTMyNQ=="}, "originalCommit": {"oid": "39a5980f04700a45107485971df9c4c60f0956a7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3OTcyMA==", "bodyText": "Well, it should probably be supported, because otherwise we end up with this sort of thing:\n@TemplateExtension\npublic class MyExtensions {\n\n public static String foo(String f){}\n public static String bar(String f){}\n\n @TemplateExtension(matchName = \"ANY\")\n public static Integer wtf(Integer f, String method){}\n}\nAnd I suspect this will break because we will have the same method registered twice, no?", "url": "https://github.com/quarkusio/quarkus/pull/6444#discussion_r364179720", "createdAt": "2020-01-08T11:12:20Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -538,10 +538,25 @@ NOTE: A value resolver is also generated for all types used in parameter declara\n [[template_extension_methods]]\n === Template Extension Methods\n \n-A value resolver is automatically generated for a template extension method annotated with `@TemplateExtension`.\n-The method must be static, must not return `void` and must accept at least one parameter. \n-The class of the first parameter is used to match the base object and the method name is used to match the property name.\n+Extension methods can be used to extend the data classes with new functionality.\n+For example, it is possible to add \"computed properties\" and \"virtual methods\".\n+A value resolver is automatically generated for a method annotated with `@TemplateExtension`.\n+If declared on a class a value resolver is generated for every non-private method declared on the class.\n+Methods that do not meet the following requirements are ignored.\n \n+A template extension method:\n+\n+* must be static, \n+* must not return `void`,\n+* must accept at least one parameter.\n+ \n+The class of the first parameter is always used to match the base object.\n+The method name is used to match the property name by default. \n+However, it is possible to specify the matching name with `TemplateExtension#matchName()`.\n+\n+NOTE: A special constant - `ANY` - may be used to specify that the extension method matches any name. In that case, the method must declare at least two parameters and the second parameter must be a string. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1OTMyNQ=="}, "originalCommit": {"oid": "39a5980f04700a45107485971df9c4c60f0956a7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIwMDA5OA==", "bodyText": "And I suspect this will break because we will have the same method registered twice, no?\n\nNope. The annotation declared on the method takes precedence. Note that so far there is only matchName but there could be others in the future...", "url": "https://github.com/quarkusio/quarkus/pull/6444#discussion_r364200098", "createdAt": "2020-01-08T12:09:33Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -538,10 +538,25 @@ NOTE: A value resolver is also generated for all types used in parameter declara\n [[template_extension_methods]]\n === Template Extension Methods\n \n-A value resolver is automatically generated for a template extension method annotated with `@TemplateExtension`.\n-The method must be static, must not return `void` and must accept at least one parameter. \n-The class of the first parameter is used to match the base object and the method name is used to match the property name.\n+Extension methods can be used to extend the data classes with new functionality.\n+For example, it is possible to add \"computed properties\" and \"virtual methods\".\n+A value resolver is automatically generated for a method annotated with `@TemplateExtension`.\n+If declared on a class a value resolver is generated for every non-private method declared on the class.\n+Methods that do not meet the following requirements are ignored.\n \n+A template extension method:\n+\n+* must be static, \n+* must not return `void`,\n+* must accept at least one parameter.\n+ \n+The class of the first parameter is always used to match the base object.\n+The method name is used to match the property name by default. \n+However, it is possible to specify the matching name with `TemplateExtension#matchName()`.\n+\n+NOTE: A special constant - `ANY` - may be used to specify that the extension method matches any name. In that case, the method must declare at least two parameters and the second parameter must be a string. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1OTMyNQ=="}, "originalCommit": {"oid": "39a5980f04700a45107485971df9c4c60f0956a7"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1307, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}