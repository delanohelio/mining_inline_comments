{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MjkyMDAz", "number": 8866, "title": "Don't generate ArC beans for platform beans that have already been defined", "bodyText": "\u2026fined", "createdAt": "2020-04-27T06:54:17Z", "url": "https://github.com/quarkusio/quarkus/pull/8866", "merged": true, "mergeCommit": {"oid": "78405ae494a645f8a25cdb8553e78f26060b35c8"}, "closed": true, "closedAt": "2020-04-28T17:43:08Z", "author": {"login": "stuartwdouglas"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbqdjmAFqTQwMDY5ODY5Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccEMVJgBqjMyODA0MTQxNzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjk4Njky", "url": "https://github.com/quarkusio/quarkus/pull/8866#pullrequestreview-400698692", "createdAt": "2020-04-27T07:40:39Z", "commit": {"oid": "88bc300b4f51ec0a141ffd48ce1238158823c0b6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzo0MDozOVrOGMVJjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzo0MDozOVrOGMVJjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MjYwNg==", "bodyText": "We can't do this for synthetic beans because they may depend on application classes, either any of the attribute or even the existence could be conditioned. An example - for every class X annotated with @Foo generate a synthetic bean with bean types X and all interfaces it implements.", "url": "https://github.com/quarkusio/quarkus/pull/8866#discussion_r415582606", "createdAt": "2020-04-27T07:40:39Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanGenerator.java", "diffHunk": "@@ -96,28 +96,35 @@ public BeanGenerator(AnnotationLiteralProcessor annotationLiterals, Predicate<Do\n     /**\n      *\n      * @param bean\n+     * @param existingClasses\n+     * @param beanToGeneratedName\n      * @return a collection of resources\n      */\n-    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration) {\n+    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration, Set<String> existingClasses,\n+            Map<BeanInfo, String> beanToGeneratedName) {\n         if (bean.getTarget().isPresent()) {\n             AnnotationTarget target = bean.getTarget().get();\n             switch (target.kind()) {\n                 case CLASS:\n-                    return generateClassBean(bean, target.asClass(), reflectionRegistration);\n+                    return generateClassBean(bean, target.asClass(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case METHOD:\n-                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration);\n+                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case FIELD:\n-                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration);\n+                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 default:\n                     throw new IllegalArgumentException(\"Unsupported bean type\");\n             }\n         } else {\n             // Synthetic beans\n-            return generateSyntheticBean(bean, reflectionRegistration);\n+            return generateSyntheticBean(bean, reflectionRegistration, existingClasses, beanToGeneratedName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88bc300b4f51ec0a141ffd48ce1238158823c0b6"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwOTkyNzA0", "url": "https://github.com/quarkusio/quarkus/pull/8866#pullrequestreview-400992704", "createdAt": "2020-04-27T14:13:16Z", "commit": {"oid": "88bc300b4f51ec0a141ffd48ce1238158823c0b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoxMzoxNlrOGMlV5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoxMzoxNlrOGMlV5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg0NzkxMA==", "bodyText": "So I think that we could set both the existingClasses and the map to the BeanGenerator final fields and avoid passing more arguments in all those methods. The same applies to ReflectionRegistration BTW. @stuartwdouglas I can add a commit to your PR if you don't mind ;-).", "url": "https://github.com/quarkusio/quarkus/pull/8866#discussion_r415847910", "createdAt": "2020-04-27T14:13:16Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanGenerator.java", "diffHunk": "@@ -96,28 +96,35 @@ public BeanGenerator(AnnotationLiteralProcessor annotationLiterals, Predicate<Do\n     /**\n      *\n      * @param bean\n+     * @param existingClasses", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88bc300b4f51ec0a141ffd48ce1238158823c0b6"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "869aae87f98fb44a455898c270bdafde4f1224d3", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/869aae87f98fb44a455898c270bdafde4f1224d3", "committedDate": "2020-04-27T14:31:18Z", "message": "ArC - minor refactoring of generators"}, "afterCommit": {"oid": "afb31174f712542d92271a53920eeef79f9af6de", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/afb31174f712542d92271a53920eeef79f9af6de", "committedDate": "2020-04-27T14:34:24Z", "message": "ArC - minor refactoring of generators"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMDE0MTkw", "url": "https://github.com/quarkusio/quarkus/pull/8866#pullrequestreview-401014190", "createdAt": "2020-04-27T14:34:58Z", "commit": {"oid": "afb31174f712542d92271a53920eeef79f9af6de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19397ed7970bd8299d8e95a76724329206b7329b", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/19397ed7970bd8299d8e95a76724329206b7329b", "committedDate": "2020-04-28T13:48:40Z", "message": "Don't generate ArC beans for platform beans that have already been defined"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "758e8237fc64eaf09c15cdb6b004896ddd732a69", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/758e8237fc64eaf09c15cdb6b004896ddd732a69", "committedDate": "2020-04-28T13:48:40Z", "message": "ArC - minor refactoring of generators"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "afb31174f712542d92271a53920eeef79f9af6de", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/afb31174f712542d92271a53920eeef79f9af6de", "committedDate": "2020-04-27T14:34:24Z", "message": "ArC - minor refactoring of generators"}, "afterCommit": {"oid": "758e8237fc64eaf09c15cdb6b004896ddd732a69", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/758e8237fc64eaf09c15cdb6b004896ddd732a69", "committedDate": "2020-04-28T13:48:40Z", "message": "ArC - minor refactoring of generators"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4361, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}