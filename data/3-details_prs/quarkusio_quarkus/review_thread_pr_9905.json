{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzY3NzUx", "number": 9905, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoyMTowOVrOEEUUmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoyMTowOVrOEEUUmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTYyNzE1OnYy", "diffSide": "RIGHT", "path": "extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/HtmlEscaper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoyMTowOVrOGh3MkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODo1MjoyNVrOGiCJ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MDUyOA==", "bodyText": "Instead of iterating through each character, maybe it's easier to create a Regexp?", "url": "https://github.com/quarkusio/quarkus/pull/9905#discussion_r438160528", "createdAt": "2020-06-10T14:21:09Z", "author": {"login": "gastaldi"}, "path": "extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/HtmlEscaper.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.quarkus.qute.runtime;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import io.quarkus.qute.Expression;\n+import io.quarkus.qute.RawString;\n+import io.quarkus.qute.ResultMapper;\n+import io.quarkus.qute.TemplateNode.Origin;\n+import io.quarkus.qute.Variant;\n+\n+class HtmlEscaper implements ResultMapper {\n+\n+    @Override\n+    public boolean appliesTo(Origin origin, Object result) {\n+        if (result instanceof RawString) {\n+            return false;\n+        }\n+        Optional<Variant> variant = origin.getVariant();\n+        if (variant.isPresent()) {\n+            return requiresDefaultEscaping(variant.get());\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String map(Object result, Expression expression) {\n+        return escape(result.toString());\n+    }\n+\n+    String escape(CharSequence value) {\n+        if (Objects.requireNonNull(value).length() == 0) {\n+            return value.toString();\n+        }\n+        for (int i = 0; i < value.length(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ccd78b5879413bd1254eafc3bda0060f76d3ab"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2NTA4Ng==", "bodyText": "Or simply call String.replaceAll for each character in the switch statement \ud83d\ude03", "url": "https://github.com/quarkusio/quarkus/pull/9905#discussion_r438165086", "createdAt": "2020-06-10T14:27:00Z", "author": {"login": "gastaldi"}, "path": "extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/HtmlEscaper.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.quarkus.qute.runtime;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import io.quarkus.qute.Expression;\n+import io.quarkus.qute.RawString;\n+import io.quarkus.qute.ResultMapper;\n+import io.quarkus.qute.TemplateNode.Origin;\n+import io.quarkus.qute.Variant;\n+\n+class HtmlEscaper implements ResultMapper {\n+\n+    @Override\n+    public boolean appliesTo(Origin origin, Object result) {\n+        if (result instanceof RawString) {\n+            return false;\n+        }\n+        Optional<Variant> variant = origin.getVariant();\n+        if (variant.isPresent()) {\n+            return requiresDefaultEscaping(variant.get());\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String map(Object result, Expression expression) {\n+        return escape(result.toString());\n+    }\n+\n+    String escape(CharSequence value) {\n+        if (Objects.requireNonNull(value).length() == 0) {\n+            return value.toString();\n+        }\n+        for (int i = 0; i < value.length(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MDUyOA=="}, "originalCommit": {"oid": "82ccd78b5879413bd1254eafc3bda0060f76d3ab"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0MDA4OA==", "bodyText": "Hm, I think that regex is quite expensive in terms of allocations ;-).", "url": "https://github.com/quarkusio/quarkus/pull/9905#discussion_r438340088", "createdAt": "2020-06-10T18:52:25Z", "author": {"login": "mkouba"}, "path": "extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/HtmlEscaper.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.quarkus.qute.runtime;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import io.quarkus.qute.Expression;\n+import io.quarkus.qute.RawString;\n+import io.quarkus.qute.ResultMapper;\n+import io.quarkus.qute.TemplateNode.Origin;\n+import io.quarkus.qute.Variant;\n+\n+class HtmlEscaper implements ResultMapper {\n+\n+    @Override\n+    public boolean appliesTo(Origin origin, Object result) {\n+        if (result instanceof RawString) {\n+            return false;\n+        }\n+        Optional<Variant> variant = origin.getVariant();\n+        if (variant.isPresent()) {\n+            return requiresDefaultEscaping(variant.get());\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String map(Object result, Expression expression) {\n+        return escape(result.toString());\n+    }\n+\n+    String escape(CharSequence value) {\n+        if (Objects.requireNonNull(value).length() == 0) {\n+            return value.toString();\n+        }\n+        for (int i = 0; i < value.length(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MDUyOA=="}, "originalCommit": {"oid": "82ccd78b5879413bd1254eafc3bda0060f76d3ab"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2833, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}