{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NDU4ODc2", "number": 9657, "title": "Static method interception", "bodyText": "This is a non-standard feature.\nUse cases\nMakes it possible to apply interceptors to static methods. CDI does support static producers and observers so the reason why CDI does not support this is very likely a technical \"obstacle\". It could be useful for things like metrics and transactions.\nLimitations\n\nonly method-level bindings are considered for backward compatibility\nreasons (otherwise static methods of bean classes that declare class-level bindings would be suddenly intercepted -> behavior change)\nprivate static methods are never intercepted\nInvocationContext#getTarget() returns null for obvious reasons; interceptors can use InvocationContext.getMethod() to detect static methods\nannotation transformers are not taken into account (bindings must be declared on the class)\n\nImpl. Notes\nSuppose we have a class with a static method that declares an interceptor binding:\nclass Foo {\n  \n   @Transactional\n   static String ping() {\n       return \"pong\";\n   }\n}\nWe generate a Foo_InterceptorInitializer class. This class registers an inteceptor chain for each intercepted static method via io.quarkus.arc.impl.InterceptedStaticMethods#register() (only for ping() in this particular case) and also provides a forwarding static method, i.e. Foo_InterceptorInitializer.hashForPingMethod() that can invoke the chain and eventually delegate to the original method.\nHowever, we also transform the Foo.class in a way that:\n\nthe original method body is copied to a new method that has the same signature but the name has _orig suffix\nthe original method body is modified to invoke Foo_InterceptorInitializer.hashForPingMethod()\n\nclass Foo {\n     static String ping() {\n      return Foo_InterceptorInitializer.hashForPingMethod();\n   }\n   @Transactional\n   static String ping_orig() {\n       return \"pong\";\n   }\n}\nTherefore, Foo_InterceptorInitializer.hashForPingMethod() does not delegate to Foo.ping() but  Foo.ping_orig().\nThis way we don't have to transform the call sites which would be much more expensive in terms of resources.", "createdAt": "2020-05-28T12:38:27Z", "url": "https://github.com/quarkusio/quarkus/pull/9657", "merged": true, "mergeCommit": {"oid": "61d80b88280345f4f653bc730abd6f814e84cd11"}, "closed": true, "closedAt": "2020-06-08T14:29:18Z", "author": {"login": "mkouba"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclt2_EAFqTQyMDEwMTE2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpOUdsABqjM0MTk0ODQ2MjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTAxMTY0", "url": "https://github.com/quarkusio/quarkus/pull/9657#pullrequestreview-420101164", "createdAt": "2020-05-28T13:23:22Z", "commit": {"oid": "7c30d82960dd60e443778f134551f6d143c63947"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoyMzoyMlrOGb02aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoyNDoxNVrOGb04yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMDYzMw==", "bodyText": "When I said to try double and long primitives that's not what I meant ;) I mean, your ASM code looks right, but this is not testing it ;)", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r431830633", "createdAt": "2020-05-28T13:23:22Z", "author": {"login": "FroMage"}, "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/staticmethods/InterceptedStaticMethodTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package io.quarkus.arc.test.interceptor.staticmethods;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+import java.lang.reflect.Modifier;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.annotation.Priority;\n+import javax.interceptor.AroundInvoke;\n+import javax.interceptor.Interceptor;\n+import javax.interceptor.InterceptorBinding;\n+import javax.interceptor.InvocationContext;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.opentest4j.AssertionFailedError;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class InterceptedStaticMethodTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(InterceptMe.class, Simple.class, SimpleInterceptor.class));\n+\n+    @Test\n+    public void testInterceptor() {\n+        assertEquals(\"OK:PONG\", Simple.ping(\"pong\"));\n+        Simple.pong();\n+        assertEquals(42.0, Simple.testDouble(2.0));\n+        assertEquals(1, SimpleInterceptor.VOID_INTERCEPTIONS.get());\n+    }\n+\n+    public static class Simple {\n+\n+        @InterceptMe\n+        public static String ping(String val) {\n+            return val.toUpperCase();\n+        }\n+\n+        @InterceptMe\n+        static void pong() {\n+        }\n+\n+        @InterceptMe\n+        protected static Double testDouble(Double val) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c30d82960dd60e443778f134551f6d143c63947"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMTI0Mw==", "bodyText": "Shouldn't we use getMethod().containing-class... here then?", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r431831243", "createdAt": "2020-05-28T13:24:15Z", "author": {"login": "FroMage"}, "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/interceptor/TransactionalInterceptorBase.java", "diffHunk": "@@ -83,7 +83,11 @@ private Transactional getTransactional(InvocationContext ic) {\n     private TransactionConfiguration getTransactionConfiguration(InvocationContext ic) {\n         TransactionConfiguration configuration = ic.getMethod().getAnnotation(TransactionConfiguration.class);\n         if (configuration == null) {\n-            return ic.getTarget().getClass().getAnnotation(TransactionConfiguration.class);\n+            Object target = ic.getTarget();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c30d82960dd60e443778f134551f6d143c63947"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c30d82960dd60e443778f134551f6d143c63947", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/7c30d82960dd60e443778f134551f6d143c63947", "committedDate": "2020-05-28T12:11:00Z", "message": "Add support for static method interception\n\n- non-standard CDI feature\n- only method-level bindings are considered for backward compatibility\nreasons\n- private static methods are never intercepted"}, "afterCommit": {"oid": "db20f3ae1ccdc0647cac01301bf2d1fdd1db62aa", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/db20f3ae1ccdc0647cac01301bf2d1fdd1db62aa", "committedDate": "2020-05-28T13:51:38Z", "message": "Add support for static method interception\n\n- non-standard CDI feature\n- only method-level bindings are considered for backward compatibility\nreasons\n- private static methods are never intercepted"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTM1MjU1", "url": "https://github.com/quarkusio/quarkus/pull/9657#pullrequestreview-420135255", "createdAt": "2020-05-28T13:58:45Z", "commit": {"oid": "db20f3ae1ccdc0647cac01301bf2d1fdd1db62aa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db20f3ae1ccdc0647cac01301bf2d1fdd1db62aa", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/db20f3ae1ccdc0647cac01301bf2d1fdd1db62aa", "committedDate": "2020-05-28T13:51:38Z", "message": "Add support for static method interception\n\n- non-standard CDI feature\n- only method-level bindings are considered for backward compatibility\nreasons\n- private static methods are never intercepted"}, "afterCommit": {"oid": "bcd5907dab1329d96a4c6044464e00a3b062fe42", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/bcd5907dab1329d96a4c6044464e00a3b062fe42", "committedDate": "2020-06-01T08:06:59Z", "message": "Interception of static methods - update docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDk3NzU5", "url": "https://github.com/quarkusio/quarkus/pull/9657#pullrequestreview-422497759", "createdAt": "2020-06-02T09:23:25Z", "commit": {"oid": "5165ac9f5cddb9875f3d111f558fc8f75d581bfe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOToyMzoyNlrOGdpZrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOToyMzoyNlrOGdpZrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0MDIwNw==", "bodyText": "Looks like you ignored the first note, so I assume this limitation is no longer necessary?\nI think you should have kept the second note and FIXME comment.", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r433740207", "createdAt": "2020-06-02T09:23:26Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheHibernateResourceProcessor.java", "diffHunk": "@@ -106,27 +127,13 @@ void build(CombinedIndexBuildItem index,\n \n         PanacheJpaEntityEnhancer modelEnhancer = new PanacheJpaEntityEnhancer(index.getIndex(), methodCustomizers);\n         Set<String> modelClasses = new HashSet<>();\n-        // Note that we do this in two passes because for some reason Jandex does not give us subtypes\n-        // of PanacheEntity if we ask for subtypes of PanacheEntityBase\n-        // NOTE: we don't skip abstract/generic entities because they still need accessors\n-        for (ClassInfo classInfo : index.getIndex().getAllKnownSubclasses(DOTNAME_PANACHE_ENTITY_BASE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5165ac9f5cddb9875f3d111f558fc8f75d581bfe"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5165ac9f5cddb9875f3d111f558fc8f75d581bfe", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/5165ac9f5cddb9875f3d111f558fc8f75d581bfe", "committedDate": "2020-06-02T08:18:38Z", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor"}, "afterCommit": {"oid": "48ca849841bdffb66a8005a4a3234a6661c0487d", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/48ca849841bdffb66a8005a4a3234a6661c0487d", "committedDate": "2020-06-02T10:00:28Z", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjIzNTM3", "url": "https://github.com/quarkusio/quarkus/pull/9657#pullrequestreview-422623537", "createdAt": "2020-06-02T12:26:59Z", "commit": {"oid": "48ca849841bdffb66a8005a4a3234a6661c0487d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNTkxMTQ2", "url": "https://github.com/quarkusio/quarkus/pull/9657#pullrequestreview-423591146", "createdAt": "2020-06-03T14:08:27Z", "commit": {"oid": "48ca849841bdffb66a8005a4a3234a6661c0487d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDowODoyN1rOGedm1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDowODoyN1rOGedm1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5NTU0Mw==", "bodyText": "Wouldn't it be more efficient to query the index for interceptor binding (annotation) uses instead of checking every known class and every known method?", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r434595543", "createdAt": "2020-06-03T14:08:27Z", "author": {"login": "manovotn"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/staticmethods/InterceptedStaticMethodsProcessor.java", "diffHunk": "@@ -0,0 +1,495 @@\n+package io.quarkus.arc.deployment.staticmethods;\n+\n+import static io.quarkus.deployment.annotations.ExecutionTime.STATIC_INIT;\n+import static org.objectweb.asm.Opcodes.ACC_FINAL;\n+import static org.objectweb.asm.Opcodes.ACC_PRIVATE;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import javax.enterprise.context.spi.Contextual;\n+import javax.enterprise.inject.spi.InterceptionType;\n+import javax.interceptor.InvocationContext;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget.Kind;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.Type;\n+import org.jboss.logging.Logger;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+\n+import io.quarkus.arc.InjectableInterceptor;\n+import io.quarkus.arc.deployment.BeanArchiveIndexBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerBuildItem;\n+import io.quarkus.arc.deployment.BeanRegistrationPhaseBuildItem;\n+import io.quarkus.arc.deployment.InterceptorResolverBuildItem;\n+import io.quarkus.arc.impl.CreationalContextImpl;\n+import io.quarkus.arc.impl.InterceptedMethodMetadata;\n+import io.quarkus.arc.impl.InterceptedStaticMethods;\n+import io.quarkus.arc.impl.InterceptedStaticMethods.InterceptedStaticMethod;\n+import io.quarkus.arc.processor.AnnotationLiteralProcessor;\n+import io.quarkus.arc.processor.BeanProcessor;\n+import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.arc.processor.InterceptorInfo;\n+import io.quarkus.arc.processor.MethodDescriptors;\n+import io.quarkus.arc.runtime.InterceptedStaticMethodsRecorder;\n+import io.quarkus.deployment.GeneratedClassGizmoAdaptor;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.Produce;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.BytecodeTransformerBuildItem;\n+import io.quarkus.deployment.builditem.GeneratedClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveMethodBuildItem;\n+import io.quarkus.deployment.util.AsmUtil;\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.ClassOutput;\n+import io.quarkus.gizmo.DescriptorUtils;\n+import io.quarkus.gizmo.FunctionCreator;\n+import io.quarkus.gizmo.Gizmo;\n+import io.quarkus.gizmo.MethodCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+\n+public class InterceptedStaticMethodsProcessor {\n+\n+    private static final Logger LOGGER = Logger.getLogger(InterceptedStaticMethodsProcessor.class);\n+\n+    static final MethodDescriptor INTERCEPTED_STATIC_METHODS_REGISTER = MethodDescriptor\n+            .ofMethod(InterceptedStaticMethods.class, \"register\", void.class, String.class, InterceptedStaticMethod.class);\n+    static final MethodDescriptor INTERCEPTED_STATIC_METHODS_AROUND_INVOKE = MethodDescriptor\n+            .ofMethod(InterceptedStaticMethods.class, \"aroundInvoke\", Object.class, String.class, Object[].class);\n+\n+    private static final String ORGINAL_METHOD_COPY_SUFFIX = \"_orig\";\n+    private static final String INITIALIZER_CLASS_SUFFIX = \"_InterceptorInitializer\";\n+\n+    @BuildStep\n+    void collectInterceptedStaticMethodsCandidates(BeanArchiveIndexBuildItem beanArchiveIndex,\n+            BuildProducer<InterceptedStaticMethodBuildItem> interceptedStaticMethods,\n+            InterceptorResolverBuildItem interceptorResolver) {\n+\n+        // In this step we collect all intercepted static methods, ie. static methods annotated with interceptor bindings  \n+        IndexView index = beanArchiveIndex.getIndex();\n+\n+        for (ClassInfo clazz : index.getKnownClasses()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ca849841bdffb66a8005a4a3234a6661c0487d"}, "originalPosition": 92}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48ca849841bdffb66a8005a4a3234a6661c0487d", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/48ca849841bdffb66a8005a4a3234a6661c0487d", "committedDate": "2020-06-02T10:00:28Z", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor"}, "afterCommit": {"oid": "d6224e51af1777dbd60deb0c3c8ec2af8daf31af", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/d6224e51af1777dbd60deb0c3c8ec2af8daf31af", "committedDate": "2020-06-04T07:33:02Z", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6224e51af1777dbd60deb0c3c8ec2af8daf31af", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/d6224e51af1777dbd60deb0c3c8ec2af8daf31af", "committedDate": "2020-06-04T07:33:02Z", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor"}, "afterCommit": {"oid": "1f85d01629b083a9006938d6f755653dcca14d77", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/1f85d01629b083a9006938d6f755653dcca14d77", "committedDate": "2020-06-04T07:52:37Z", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f85d01629b083a9006938d6f755653dcca14d77", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/1f85d01629b083a9006938d6f755653dcca14d77", "committedDate": "2020-06-04T07:52:37Z", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor"}, "afterCommit": {"oid": "1cd2233adad3852299d659b53a59de8631b307f6", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/1cd2233adad3852299d659b53a59de8631b307f6", "committedDate": "2020-06-04T08:54:05Z", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1cd2233adad3852299d659b53a59de8631b307f6", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/1cd2233adad3852299d659b53a59de8631b307f6", "committedDate": "2020-06-04T08:54:05Z", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor"}, "afterCommit": {"oid": "f0891db6cbc357cf9713af3f23ecaf7a55dd690a", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/f0891db6cbc357cf9713af3f23ecaf7a55dd690a", "committedDate": "2020-06-04T10:26:27Z", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MzI0NzQw", "url": "https://github.com/quarkusio/quarkus/pull/9657#pullrequestreview-424324740", "createdAt": "2020-06-04T10:52:03Z", "commit": {"oid": "f0891db6cbc357cf9713af3f23ecaf7a55dd690a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0891db6cbc357cf9713af3f23ecaf7a55dd690a", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/f0891db6cbc357cf9713af3f23ecaf7a55dd690a", "committedDate": "2020-06-04T10:26:27Z", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor"}, "afterCommit": {"oid": "ff172c2779947f8257eae94237afc5c99caa50b7", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/ff172c2779947f8257eae94237afc5c99caa50b7", "committedDate": "2020-06-04T19:48:33Z", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff172c2779947f8257eae94237afc5c99caa50b7", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/ff172c2779947f8257eae94237afc5c99caa50b7", "committedDate": "2020-06-04T19:48:33Z", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor"}, "afterCommit": {"oid": "944cf7f750d5f83f95e8525062e0b42b054fc3bb", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/944cf7f750d5f83f95e8525062e0b42b054fc3bb", "committedDate": "2020-06-05T06:51:35Z", "message": "Add support for static method interception\n\n- non-standard CDI feature\n- only method-level bindings are considered for backward compatibility\nreasons\n- private static methods are never intercepted\n- also collect Panache entities in a separate build step to break the cycle with InterceptedStaticMethodsProcessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cee5b9619fd43d42736e108f26177636f516f15", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/7cee5b9619fd43d42736e108f26177636f516f15", "committedDate": "2020-06-08T10:57:49Z", "message": "Add support for static method interception\n\n- non-standard CDI feature\n- only method-level bindings are considered for backward compatibility\nreasons\n- private static methods are never intercepted\n- also collect Panache entities in a separate build step to break the cycle with InterceptedStaticMethodsProcessor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "944cf7f750d5f83f95e8525062e0b42b054fc3bb", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/944cf7f750d5f83f95e8525062e0b42b054fc3bb", "committedDate": "2020-06-05T06:51:35Z", "message": "Add support for static method interception\n\n- non-standard CDI feature\n- only method-level bindings are considered for backward compatibility\nreasons\n- private static methods are never intercepted\n- also collect Panache entities in a separate build step to break the cycle with InterceptedStaticMethodsProcessor"}, "afterCommit": {"oid": "7cee5b9619fd43d42736e108f26177636f516f15", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/7cee5b9619fd43d42736e108f26177636f516f15", "committedDate": "2020-06-08T10:57:49Z", "message": "Add support for static method interception\n\n- non-standard CDI feature\n- only method-level bindings are considered for backward compatibility\nreasons\n- private static methods are never intercepted\n- also collect Panache entities in a separate build step to break the cycle with InterceptedStaticMethodsProcessor"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3241, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}