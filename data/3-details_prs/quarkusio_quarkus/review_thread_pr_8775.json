{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NzQ0MDg0", "number": 8775, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTowMzozMlrOD1LWaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo0MDo1MlrOD1Q3CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDg3MDgxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTowMzozMlrOGKewUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoyMjoyMFrOGKmclw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MjgzMw==", "bodyText": "We should still remove #{with expr as binding} because it does not have the semantics of with, and can be done with #{let binding = expr}.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413642833", "createdAt": "2020-04-23T09:03:32Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -513,6 +513,28 @@ This section might also come in handy when we'd like to avoid multiple expensive\n ----\n <1> `it` is the result of `item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)`. The method is only invoked once even though the result may be used in multiple expressions.\n \n+===== Let/Set Section\n+\n+This section is an alternative to `{#with}` which allows to specify multiple named parameters:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d4a27d1ffef7156ca7d6e07419a15d1bbd091a4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5Njg5MA==", "bodyText": "Ok. The semantics of with is not well-defined in Qute (or in templates in general) but I agree that it could be replaced with let/set.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413696890", "createdAt": "2020-04-23T10:23:03Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -513,6 +513,28 @@ This section might also come in handy when we'd like to avoid multiple expensive\n ----\n <1> `it` is the result of `item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)`. The method is only invoked once even though the result may be used in multiple expressions.\n \n+===== Let/Set Section\n+\n+This section is an alternative to `{#with}` which allows to specify multiple named parameters:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MjgzMw=="}, "originalCommit": {"oid": "4d4a27d1ffef7156ca7d6e07419a15d1bbd091a4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2MDY0OQ==", "bodyText": "Well, with to modify the current scope is fine, it's the version with as which is problematic.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413760649", "createdAt": "2020-04-23T12:09:31Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -513,6 +513,28 @@ This section might also come in handy when we'd like to avoid multiple expensive\n ----\n <1> `it` is the result of `item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)`. The method is only invoked once even though the result may be used in multiple expressions.\n \n+===== Let/Set Section\n+\n+This section is an alternative to `{#with}` which allows to specify multiple named parameters:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MjgzMw=="}, "originalCommit": {"oid": "4d4a27d1ffef7156ca7d6e07419a15d1bbd091a4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2ODg1NQ==", "bodyText": "Done.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413768855", "createdAt": "2020-04-23T12:22:20Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -513,6 +513,28 @@ This section might also come in handy when we'd like to avoid multiple expensive\n ----\n <1> `it` is the result of `item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)`. The method is only invoked once even though the result may be used in multiple expressions.\n \n+===== Let/Set Section\n+\n+This section is an alternative to `{#with}` which allows to specify multiple named parameters:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MjgzMw=="}, "originalCommit": {"oid": "4d4a27d1ffef7156ca7d6e07419a15d1bbd091a4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDg3NTYzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTowNDozOVrOGKezSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDo1OTo0NVrOGKjb3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MzU5NA==", "bodyText": "Huh, why did you rename it? Does the #item tag namespace clash with the local variable item? If that's the case it's a bug.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413643594", "createdAt": "2020-04-23T09:04:39Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -567,30 +589,30 @@ Let's suppose we have a template called `item.html`:\n <1> `showImage` is a named parameter.\n <2> `it` is a special key that is replaced with the first unnamed param of the tag.\n \n-Now if we register this template under the name `item` and if we add a `UserTagSectionHelper` to the engine:\n+Now if we register this template under the name `itemDetail` and if we add a `UserTagSectionHelper` to the engine:\n \n [source,java]\n ----\n Engine engine = Engine.builder()\n-                   .addSectionHelper(new UserTagSectionHelper.Factory(\"item\"))\n+                   .addSectionHelper(new UserTagSectionHelper.Factory(\"myItem\",\"itemDetail.html\"))\n                    .build();\n ----\n \n-NOTE: In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically.\n+NOTE: In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically!\n \n We can include the tag like this:\n \n [source,html]\n ----\n <ul>\n-{#each items}\n+{#for item in items}\n   <li>\n-  {#item this showImage=true /} <1>\n+  {#myItem item showImage=true /} <1>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d4a27d1ffef7156ca7d6e07419a15d1bbd091a4"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY2NDA2OQ==", "bodyText": "No, it could be item or anything else. I just wanted to have the example more readable... {#item item} is not good.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413664069", "createdAt": "2020-04-23T09:33:48Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -567,30 +589,30 @@ Let's suppose we have a template called `item.html`:\n <1> `showImage` is a named parameter.\n <2> `it` is a special key that is replaced with the first unnamed param of the tag.\n \n-Now if we register this template under the name `item` and if we add a `UserTagSectionHelper` to the engine:\n+Now if we register this template under the name `itemDetail` and if we add a `UserTagSectionHelper` to the engine:\n \n [source,java]\n ----\n Engine engine = Engine.builder()\n-                   .addSectionHelper(new UserTagSectionHelper.Factory(\"item\"))\n+                   .addSectionHelper(new UserTagSectionHelper.Factory(\"myItem\",\"itemDetail.html\"))\n                    .build();\n ----\n \n-NOTE: In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically.\n+NOTE: In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically!\n \n We can include the tag like this:\n \n [source,html]\n ----\n <ul>\n-{#each items}\n+{#for item in items}\n   <li>\n-  {#item this showImage=true /} <1>\n+  {#myItem item showImage=true /} <1>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MzU5NA=="}, "originalCommit": {"oid": "4d4a27d1ffef7156ca7d6e07419a15d1bbd091a4"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY2NjQ1OA==", "bodyText": "OK, pfew :)\nBut frankly #{item item} is still way better than #{myItem item}. Perhaps it's #{itemDescription item} you were aiming for? ;)", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413666458", "createdAt": "2020-04-23T09:37:19Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -567,30 +589,30 @@ Let's suppose we have a template called `item.html`:\n <1> `showImage` is a named parameter.\n <2> `it` is a special key that is replaced with the first unnamed param of the tag.\n \n-Now if we register this template under the name `item` and if we add a `UserTagSectionHelper` to the engine:\n+Now if we register this template under the name `itemDetail` and if we add a `UserTagSectionHelper` to the engine:\n \n [source,java]\n ----\n Engine engine = Engine.builder()\n-                   .addSectionHelper(new UserTagSectionHelper.Factory(\"item\"))\n+                   .addSectionHelper(new UserTagSectionHelper.Factory(\"myItem\",\"itemDetail.html\"))\n                    .build();\n ----\n \n-NOTE: In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically.\n+NOTE: In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically!\n \n We can include the tag like this:\n \n [source,html]\n ----\n <ul>\n-{#each items}\n+{#for item in items}\n   <li>\n-  {#item this showImage=true /} <1>\n+  {#myItem item showImage=true /} <1>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MzU5NA=="}, "originalCommit": {"oid": "4d4a27d1ffef7156ca7d6e07419a15d1bbd091a4"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcxOTUxOQ==", "bodyText": "But frankly #{item item} is still way better than #{myItem item}.\n\nOh, really? ;-) Anyway, #{itemDescription item} or {#itemDetail item} reads definitely better. My intention was to show the link between the tag name registered above. But this is not important in quarkus where tags are registered automatically.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413719519", "createdAt": "2020-04-23T10:59:45Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -567,30 +589,30 @@ Let's suppose we have a template called `item.html`:\n <1> `showImage` is a named parameter.\n <2> `it` is a special key that is replaced with the first unnamed param of the tag.\n \n-Now if we register this template under the name `item` and if we add a `UserTagSectionHelper` to the engine:\n+Now if we register this template under the name `itemDetail` and if we add a `UserTagSectionHelper` to the engine:\n \n [source,java]\n ----\n Engine engine = Engine.builder()\n-                   .addSectionHelper(new UserTagSectionHelper.Factory(\"item\"))\n+                   .addSectionHelper(new UserTagSectionHelper.Factory(\"myItem\",\"itemDetail.html\"))\n                    .build();\n ----\n \n-NOTE: In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically.\n+NOTE: In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically!\n \n We can include the tag like this:\n \n [source,html]\n ----\n <ul>\n-{#each items}\n+{#for item in items}\n   <li>\n-  {#item this showImage=true /} <1>\n+  {#myItem item showImage=true /} <1>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MzU5NA=="}, "originalCommit": {"oid": "4d4a27d1ffef7156ca7d6e07419a15d1bbd091a4"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDg3ODkwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTowNToyMFrOGKe1MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozNDoyNVrOGKm8FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NDA4MQ==", "bodyText": "This is the first place I realised how we can pass more than one parameter to a tag. Is this formally documented somewhere else in this file? If not, it should, I was sure I would need a comma.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413644081", "createdAt": "2020-04-23T09:05:20Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -567,30 +589,30 @@ Let's suppose we have a template called `item.html`:\n <1> `showImage` is a named parameter.\n <2> `it` is a special key that is replaced with the first unnamed param of the tag.\n \n-Now if we register this template under the name `item` and if we add a `UserTagSectionHelper` to the engine:\n+Now if we register this template under the name `itemDetail` and if we add a `UserTagSectionHelper` to the engine:\n \n [source,java]\n ----\n Engine engine = Engine.builder()\n-                   .addSectionHelper(new UserTagSectionHelper.Factory(\"item\"))\n+                   .addSectionHelper(new UserTagSectionHelper.Factory(\"myItem\",\"itemDetail.html\"))\n                    .build();\n ----\n \n-NOTE: In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically.\n+NOTE: In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically!\n \n We can include the tag like this:\n \n [source,html]\n ----\n <ul>\n-{#each items}\n+{#for item in items}\n   <li>\n-  {#item this showImage=true /} <1>\n+  {#myItem item showImage=true /} <1>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d4a27d1ffef7156ca7d6e07419a15d1bbd091a4"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY4OTc4OQ==", "bodyText": "Comma was never required. It's not documented. The whole SPI needs docs but since it's still a WIP it has a lower priority. In short, a section/tag may consume any number of named/unnamed parameters and it's the responsibility of a section to interprete the params, i.e. it could be an expression ('item.name') or it could be ignored (such as in in the {#for item in items}).\nWe already have #7326.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413689789", "createdAt": "2020-04-23T10:11:44Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -567,30 +589,30 @@ Let's suppose we have a template called `item.html`:\n <1> `showImage` is a named parameter.\n <2> `it` is a special key that is replaced with the first unnamed param of the tag.\n \n-Now if we register this template under the name `item` and if we add a `UserTagSectionHelper` to the engine:\n+Now if we register this template under the name `itemDetail` and if we add a `UserTagSectionHelper` to the engine:\n \n [source,java]\n ----\n Engine engine = Engine.builder()\n-                   .addSectionHelper(new UserTagSectionHelper.Factory(\"item\"))\n+                   .addSectionHelper(new UserTagSectionHelper.Factory(\"myItem\",\"itemDetail.html\"))\n                    .build();\n ----\n \n-NOTE: In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically.\n+NOTE: In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically!\n \n We can include the tag like this:\n \n [source,html]\n ----\n <ul>\n-{#each items}\n+{#for item in items}\n   <li>\n-  {#item this showImage=true /} <1>\n+  {#myItem item showImage=true /} <1>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NDA4MQ=="}, "originalCommit": {"oid": "4d4a27d1ffef7156ca7d6e07419a15d1bbd091a4"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3NjkxNw==", "bodyText": "So, this is what bugs me about the regularity of those tags. Some use in or as keywords (not evaluated) while others use = which seems to be an operator, but I'm not clear on that either.\nThe semantics are not clear to me as a user. And it doesn't appear regular.\nCompare this with the following syntax:\n<ul>\n#{list items:products, as:'product'}\n    <li>${product}</li>\n#{/list}\n</ul>\n\nWhere you can pass exactly one unnamed parameter to a tag, or you pass them by name with the : operator and , separator. As you can see, here products is an expression, while 'product' is a string. The semantics are clear.\nIt's less flexible, but it's much more consistent with programming language constructs. For example, I'm not sure how the current semantics of passing parameters as-is to Java tag implementation combines with the rule for named parameters: can I call #{foo first second third=something} and expect it to work if foo is a Java tag?\nUsing the current Qute syntax, this would mean:\n{#for items, as='item'}\n\nNow, given that we only have as in the problematic with form (which we should remove in favour of let/set), that only leaves us with a single keyword in, and I've observed people mostly write custom tags using taglet files (not in Java), perhaps there's not much risk in this sort of keybord behaviour proliferating to confuse users.\nBut at the very least, we need to document that parameters are passed separated by spaces, named parameters use =.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413776917", "createdAt": "2020-04-23T12:34:25Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -567,30 +589,30 @@ Let's suppose we have a template called `item.html`:\n <1> `showImage` is a named parameter.\n <2> `it` is a special key that is replaced with the first unnamed param of the tag.\n \n-Now if we register this template under the name `item` and if we add a `UserTagSectionHelper` to the engine:\n+Now if we register this template under the name `itemDetail` and if we add a `UserTagSectionHelper` to the engine:\n \n [source,java]\n ----\n Engine engine = Engine.builder()\n-                   .addSectionHelper(new UserTagSectionHelper.Factory(\"item\"))\n+                   .addSectionHelper(new UserTagSectionHelper.Factory(\"myItem\",\"itemDetail.html\"))\n                    .build();\n ----\n \n-NOTE: In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically.\n+NOTE: In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically!\n \n We can include the tag like this:\n \n [source,html]\n ----\n <ul>\n-{#each items}\n+{#for item in items}\n   <li>\n-  {#item this showImage=true /} <1>\n+  {#myItem item showImage=true /} <1>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NDA4MQ=="}, "originalCommit": {"oid": "4d4a27d1ffef7156ca7d6e07419a15d1bbd091a4"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDg4NDkyOnYy", "diffSide": "RIGHT", "path": "independent-projects/qute/core/src/test/java/io/quarkus/qute/UserTagTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTowNjoyOVrOGKe4iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozNTo0MFrOGKm_Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NDkzNg==", "bodyText": "As I see tests mentioning this I have to ask what it refers to?", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413644936", "createdAt": "2020-04-23T09:06:29Z", "author": {"login": "FroMage"}, "path": "independent-projects/qute/core/src/test/java/io/quarkus/qute/UserTagTest.java", "diffHunk": "@@ -17,17 +17,17 @@ public void testUserTag() {\n \n         Template tag = engine.parse(\"{#if showImage}{it.name}{#else}nope{/if}\");\n         engine.putTemplate(\"my-tag-id\", tag);\n-        Template template1 = engine.parse(\"{#myTag order showImage=true /}\");\n-        Template template2 = engine.parse(\"{#myTag order /}\");\n-        Template template3 = engine.parse(\"{#myTag showImage=false /}\");\n-        Template template4 = engine.parse(\"{#each this}{#myTag showImage=false /}{/each}\");\n \n         Map<String, Object> order = new HashMap<>();\n         order.put(\"name\", \"Herbert\");\n-        assertEquals(\"Herbert\", template1.render(Collections.singletonMap(\"order\", order)));\n-        assertEquals(\"nope\", template2.render(Collections.singletonMap(\"order\", order)));\n-        assertEquals(\"nope\", template3.render(Collections.singletonMap(\"order\", order)));\n-        assertEquals(\"nope\", template4.render(Collections.singletonMap(\"order\", order)));\n+        assertEquals(\"Herbert\",\n+                engine.parse(\"{#myTag order showImage=true /}\").render(Collections.singletonMap(\"order\", order)));\n+        assertEquals(\"nope\", engine.parse(\"{#myTag order /}\").render(Collections.singletonMap(\"order\", order)));\n+        assertEquals(\"nope\", engine.parse(\"{#myTag showImage=false /}\").render(Collections.singletonMap(\"order\", order)));\n+        assertEquals(\"nope\",\n+                engine.parse(\"{#each this}{#myTag showImage=false /}{/each}\").render(Collections.singletonMap(\"order\", order)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d4a27d1ffef7156ca7d6e07419a15d1bbd091a4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5NTc2MQ==", "bodyText": "In this particular case it refers to the data object passed to the template. this always returns the last context object on the stack.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413695761", "createdAt": "2020-04-23T10:21:12Z", "author": {"login": "mkouba"}, "path": "independent-projects/qute/core/src/test/java/io/quarkus/qute/UserTagTest.java", "diffHunk": "@@ -17,17 +17,17 @@ public void testUserTag() {\n \n         Template tag = engine.parse(\"{#if showImage}{it.name}{#else}nope{/if}\");\n         engine.putTemplate(\"my-tag-id\", tag);\n-        Template template1 = engine.parse(\"{#myTag order showImage=true /}\");\n-        Template template2 = engine.parse(\"{#myTag order /}\");\n-        Template template3 = engine.parse(\"{#myTag showImage=false /}\");\n-        Template template4 = engine.parse(\"{#each this}{#myTag showImage=false /}{/each}\");\n \n         Map<String, Object> order = new HashMap<>();\n         order.put(\"name\", \"Herbert\");\n-        assertEquals(\"Herbert\", template1.render(Collections.singletonMap(\"order\", order)));\n-        assertEquals(\"nope\", template2.render(Collections.singletonMap(\"order\", order)));\n-        assertEquals(\"nope\", template3.render(Collections.singletonMap(\"order\", order)));\n-        assertEquals(\"nope\", template4.render(Collections.singletonMap(\"order\", order)));\n+        assertEquals(\"Herbert\",\n+                engine.parse(\"{#myTag order showImage=true /}\").render(Collections.singletonMap(\"order\", order)));\n+        assertEquals(\"nope\", engine.parse(\"{#myTag order /}\").render(Collections.singletonMap(\"order\", order)));\n+        assertEquals(\"nope\", engine.parse(\"{#myTag showImage=false /}\").render(Collections.singletonMap(\"order\", order)));\n+        assertEquals(\"nope\",\n+                engine.parse(\"{#each this}{#myTag showImage=false /}{/each}\").render(Collections.singletonMap(\"order\", order)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NDkzNg=="}, "originalCommit": {"oid": "4d4a27d1ffef7156ca7d6e07419a15d1bbd091a4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3NzczMA==", "bodyText": "If it's not documented, it should not be implemented. If it's implemented it should be documented.\nATM I don't see the value of having this be implemented and resolved, so I suggest we disable it.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413777730", "createdAt": "2020-04-23T12:35:40Z", "author": {"login": "FroMage"}, "path": "independent-projects/qute/core/src/test/java/io/quarkus/qute/UserTagTest.java", "diffHunk": "@@ -17,17 +17,17 @@ public void testUserTag() {\n \n         Template tag = engine.parse(\"{#if showImage}{it.name}{#else}nope{/if}\");\n         engine.putTemplate(\"my-tag-id\", tag);\n-        Template template1 = engine.parse(\"{#myTag order showImage=true /}\");\n-        Template template2 = engine.parse(\"{#myTag order /}\");\n-        Template template3 = engine.parse(\"{#myTag showImage=false /}\");\n-        Template template4 = engine.parse(\"{#each this}{#myTag showImage=false /}{/each}\");\n \n         Map<String, Object> order = new HashMap<>();\n         order.put(\"name\", \"Herbert\");\n-        assertEquals(\"Herbert\", template1.render(Collections.singletonMap(\"order\", order)));\n-        assertEquals(\"nope\", template2.render(Collections.singletonMap(\"order\", order)));\n-        assertEquals(\"nope\", template3.render(Collections.singletonMap(\"order\", order)));\n-        assertEquals(\"nope\", template4.render(Collections.singletonMap(\"order\", order)));\n+        assertEquals(\"Herbert\",\n+                engine.parse(\"{#myTag order showImage=true /}\").render(Collections.singletonMap(\"order\", order)));\n+        assertEquals(\"nope\", engine.parse(\"{#myTag order /}\").render(Collections.singletonMap(\"order\", order)));\n+        assertEquals(\"nope\", engine.parse(\"{#myTag showImage=false /}\").render(Collections.singletonMap(\"order\", order)));\n+        assertEquals(\"nope\",\n+                engine.parse(\"{#each this}{#myTag showImage=false /}{/each}\").render(Collections.singletonMap(\"order\", order)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NDkzNg=="}, "originalCommit": {"oid": "4d4a27d1ffef7156ca7d6e07419a15d1bbd091a4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTc2NTYwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozOTowNFrOGKnIFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMzowMzo0NlrOGKoMaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3OTk5MA==", "bodyText": "No it is not: it does not change the scope: it adds new lexical bindings.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This section is an alternative to `{#with}` which allows to specify one or more named parameters:\n          \n          \n            \n            This section allows you to define named local variables:", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413779990", "createdAt": "2020-04-23T12:39:04Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -489,29 +489,40 @@ This could be useful to simplify the template structure:\n <1> The `name` will be resolved against the `item.parent`.\n <2> The `description` will be also resolved against the `item.parent`.\n \n-It's also possible to specify an alias for the context object:\n+This section might also come in handy when we'd like to avoid multiple expensive invocations:\n \n [source,html]\n ----\n-{#with item.parent as myParent} <1>\n-  <h1>{myParent.name}</h1>\n+{#with item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)}\n+  {#if this is \"fun\"} <1>\n+    <h1>Yay!</h1>\n+  {#else}\n+    <h1>{this} is not fun at all!</h1>\n+  {/if}\n {/with}\n ----\n-<1> `myParent` is the alias that can be used inside the tag.\n+<1> `this` is the result of `item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)`. The method is only invoked once even though the result may be used in multiple expressions.\n \n-This section might also come in handy when we'd like to avoid multiple expensive invocations:\n+===== Let/Set Section\n \n+This section is an alternative to `{#with}` which allows to specify one or more named parameters:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feba3c9874de9457c10c2cc8c80e9c06f785552b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5Mjk4NA==", "bodyText": "No it is not: it does not change the scope: it adds new lexical bindings.\n\nNot really. Under the hood it does modify the current context. But I can change the wording. No problem.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413792984", "createdAt": "2020-04-23T12:57:22Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -489,29 +489,40 @@ This could be useful to simplify the template structure:\n <1> The `name` will be resolved against the `item.parent`.\n <2> The `description` will be also resolved against the `item.parent`.\n \n-It's also possible to specify an alias for the context object:\n+This section might also come in handy when we'd like to avoid multiple expensive invocations:\n \n [source,html]\n ----\n-{#with item.parent as myParent} <1>\n-  <h1>{myParent.name}</h1>\n+{#with item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)}\n+  {#if this is \"fun\"} <1>\n+    <h1>Yay!</h1>\n+  {#else}\n+    <h1>{this} is not fun at all!</h1>\n+  {/if}\n {/with}\n ----\n-<1> `myParent` is the alias that can be used inside the tag.\n+<1> `this` is the result of `item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)`. The method is only invoked once even though the result may be used in multiple expressions.\n \n-This section might also come in handy when we'd like to avoid multiple expensive invocations:\n+===== Let/Set Section\n \n+This section is an alternative to `{#with}` which allows to specify one or more named parameters:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3OTk5MA=="}, "originalCommit": {"oid": "feba3c9874de9457c10c2cc8c80e9c06f785552b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5NzQ4MQ==", "bodyText": "OK, fine, it does introduce a new scope, right? It doesn't modify the current scope in the sense that it modifies the existing scope, right?\nI still think that in this context, saying something along the lines of \"it defines new local variables\" is the easiest thing to explain to devs, no? We just want to make it clear that it's a bounded local scope with new bindings.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413797481", "createdAt": "2020-04-23T13:03:46Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -489,29 +489,40 @@ This could be useful to simplify the template structure:\n <1> The `name` will be resolved against the `item.parent`.\n <2> The `description` will be also resolved against the `item.parent`.\n \n-It's also possible to specify an alias for the context object:\n+This section might also come in handy when we'd like to avoid multiple expensive invocations:\n \n [source,html]\n ----\n-{#with item.parent as myParent} <1>\n-  <h1>{myParent.name}</h1>\n+{#with item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)}\n+  {#if this is \"fun\"} <1>\n+    <h1>Yay!</h1>\n+  {#else}\n+    <h1>{this} is not fun at all!</h1>\n+  {/if}\n {/with}\n ----\n-<1> `myParent` is the alias that can be used inside the tag.\n+<1> `this` is the result of `item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)`. The method is only invoked once even though the result may be used in multiple expressions.\n \n-This section might also come in handy when we'd like to avoid multiple expensive invocations:\n+===== Let/Set Section\n \n+This section is an alternative to `{#with}` which allows to specify one or more named parameters:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3OTk5MA=="}, "originalCommit": {"oid": "feba3c9874de9457c10c2cc8c80e9c06f785552b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTc2ODY1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozOTo0NFrOGKnJ0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozOTo0NFrOGKnJ0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4MDQzNA==", "bodyText": "Damnit, this is back. But at least this time it makes sense.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413780434", "createdAt": "2020-04-23T12:39:44Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -489,29 +489,40 @@ This could be useful to simplify the template structure:\n <1> The `name` will be resolved against the `item.parent`.\n <2> The `description` will be also resolved against the `item.parent`.\n \n-It's also possible to specify an alias for the context object:\n+This section might also come in handy when we'd like to avoid multiple expensive invocations:\n \n [source,html]\n ----\n-{#with item.parent as myParent} <1>\n-  <h1>{myParent.name}</h1>\n+{#with item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feba3c9874de9457c10c2cc8c80e9c06f785552b"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTc3MzUzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo0MDo1M1rOGKnM5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMzowMToyOVrOGKoGYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4MTIyMA==", "bodyText": "This price thing confuses me: it's not coming from order.item.parent/myParent, right?", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413781220", "createdAt": "2020-04-23T12:40:53Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -489,29 +489,40 @@ This could be useful to simplify the template structure:\n <1> The `name` will be resolved against the `item.parent`.\n <2> The `description` will be also resolved against the `item.parent`.\n \n-It's also possible to specify an alias for the context object:\n+This section might also come in handy when we'd like to avoid multiple expensive invocations:\n \n [source,html]\n ----\n-{#with item.parent as myParent} <1>\n-  <h1>{myParent.name}</h1>\n+{#with item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)}\n+  {#if this is \"fun\"} <1>\n+    <h1>Yay!</h1>\n+  {#else}\n+    <h1>{this} is not fun at all!</h1>\n+  {/if}\n {/with}\n ----\n-<1> `myParent` is the alias that can be used inside the tag.\n+<1> `this` is the result of `item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)`. The method is only invoked once even though the result may be used in multiple expressions.\n \n-This section might also come in handy when we'd like to avoid multiple expensive invocations:\n+===== Let/Set Section\n \n+This section is an alternative to `{#with}` which allows to specify one or more named parameters:\n [source,html]\n ----\n-{#with item.callExpensiveLogicToGetTheValue(true) as it}\n-  {#if it is \"fun\"} <1>\n-    <h1>Yay!</h1>\n-  {#else}\n-    <h1>{it} is not fun at all!</h1>\n-  {/if}\n-{/with}\n+{#let myParent=order.item.parent}\n+  <h1>{myParent.name}</h1>\n+  <p>Price: {price}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feba3c9874de9457c10c2cc8c80e9c06f785552b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5NDEyMg==", "bodyText": "Nope. It's a mistake. Good catch! The original version had a price param too. Normally, Qute would attempt to find a price in the parent contexts...", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413794122", "createdAt": "2020-04-23T12:58:57Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -489,29 +489,40 @@ This could be useful to simplify the template structure:\n <1> The `name` will be resolved against the `item.parent`.\n <2> The `description` will be also resolved against the `item.parent`.\n \n-It's also possible to specify an alias for the context object:\n+This section might also come in handy when we'd like to avoid multiple expensive invocations:\n \n [source,html]\n ----\n-{#with item.parent as myParent} <1>\n-  <h1>{myParent.name}</h1>\n+{#with item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)}\n+  {#if this is \"fun\"} <1>\n+    <h1>Yay!</h1>\n+  {#else}\n+    <h1>{this} is not fun at all!</h1>\n+  {/if}\n {/with}\n ----\n-<1> `myParent` is the alias that can be used inside the tag.\n+<1> `this` is the result of `item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)`. The method is only invoked once even though the result may be used in multiple expressions.\n \n-This section might also come in handy when we'd like to avoid multiple expensive invocations:\n+===== Let/Set Section\n \n+This section is an alternative to `{#with}` which allows to specify one or more named parameters:\n [source,html]\n ----\n-{#with item.callExpensiveLogicToGetTheValue(true) as it}\n-  {#if it is \"fun\"} <1>\n-    <h1>Yay!</h1>\n-  {#else}\n-    <h1>{it} is not fun at all!</h1>\n-  {/if}\n-{/with}\n+{#let myParent=order.item.parent}\n+  <h1>{myParent.name}</h1>\n+  <p>Price: {price}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4MTIyMA=="}, "originalCommit": {"oid": "feba3c9874de9457c10c2cc8c80e9c06f785552b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5NTkzOQ==", "bodyText": "Well, it's fine that it would resolve it from the parent scope (that's what I expect), I just wanted to be sure, because its presence in this example confused me.", "url": "https://github.com/quarkusio/quarkus/pull/8775#discussion_r413795939", "createdAt": "2020-04-23T13:01:29Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -489,29 +489,40 @@ This could be useful to simplify the template structure:\n <1> The `name` will be resolved against the `item.parent`.\n <2> The `description` will be also resolved against the `item.parent`.\n \n-It's also possible to specify an alias for the context object:\n+This section might also come in handy when we'd like to avoid multiple expensive invocations:\n \n [source,html]\n ----\n-{#with item.parent as myParent} <1>\n-  <h1>{myParent.name}</h1>\n+{#with item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)}\n+  {#if this is \"fun\"} <1>\n+    <h1>Yay!</h1>\n+  {#else}\n+    <h1>{this} is not fun at all!</h1>\n+  {/if}\n {/with}\n ----\n-<1> `myParent` is the alias that can be used inside the tag.\n+<1> `this` is the result of `item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)`. The method is only invoked once even though the result may be used in multiple expressions.\n \n-This section might also come in handy when we'd like to avoid multiple expensive invocations:\n+===== Let/Set Section\n \n+This section is an alternative to `{#with}` which allows to specify one or more named parameters:\n [source,html]\n ----\n-{#with item.callExpensiveLogicToGetTheValue(true) as it}\n-  {#if it is \"fun\"} <1>\n-    <h1>Yay!</h1>\n-  {#else}\n-    <h1>{it} is not fun at all!</h1>\n-  {/if}\n-{/with}\n+{#let myParent=order.item.parent}\n+  <h1>{myParent.name}</h1>\n+  <p>Price: {price}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4MTIyMA=="}, "originalCommit": {"oid": "feba3c9874de9457c10c2cc8c80e9c06f785552b"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3420, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}