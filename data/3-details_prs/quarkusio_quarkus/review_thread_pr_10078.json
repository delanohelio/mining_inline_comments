{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1OTQ2ODUz", "number": 10078, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTo1ODo0NFrOEGagqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjowMzoxNlrOEGiE_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTYxMjU4OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/main/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/RestDataEntityInfoProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTo1ODo0NVrOGlMgqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMTo1ODozNlrOGlY15g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY1NTQ2Ng==", "bodyText": "@FroMage could you verify that this is a correct way to get a setter?", "url": "https://github.com/quarkusio/quarkus/pull/10078#discussion_r441655466", "createdAt": "2020-06-17T15:58:45Z", "author": {"login": "gytis"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/main/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/RestDataEntityInfoProvider.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import javax.persistence.Id;\n+\n+import org.hibernate.bytecode.enhance.spi.EnhancerConstants;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.bean.JavaBeanUtil;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.rest.data.panache.deployment.RestDataEntityInfo;\n+\n+final class RestDataEntityInfoProvider {\n+\n+    private static final DotName PANACHE_ENTITY_BASE = DotName.createSimple(PanacheEntityBase.class.getName());\n+\n+    private final IndexView index;\n+\n+    RestDataEntityInfoProvider(IndexView index) {\n+        this.index = index;\n+    }\n+\n+    RestDataEntityInfo get(String type) {\n+        ClassInfo classInfo = index.getClassByName(DotName.createSimple(type));\n+        FieldInfo idField = getIdField(classInfo);\n+        return new RestDataEntityInfo(classInfo.toString(), idField, getSetter(classInfo, idField));\n+    }\n+\n+    private FieldInfo getIdField(ClassInfo classInfo) {\n+        ClassInfo tmpClassInfo = classInfo;\n+        while (tmpClassInfo != null) {\n+            for (FieldInfo field : tmpClassInfo.fields()) {\n+                if (field.hasAnnotation(DotName.createSimple(Id.class.getName()))) {\n+                    return field;\n+                }\n+            }\n+            if (classInfo.superName() != null) {\n+                tmpClassInfo = index.getClassByName(classInfo.superName());\n+            } else {\n+                tmpClassInfo = null;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Couldn't find id field of \" + classInfo);\n+    }\n+\n+    private MethodDescriptor getSetter(ClassInfo entityClass, FieldInfo field) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618e76d64832cf2a7c1cb5d2922bb6996b843ce5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1NzUxMA==", "bodyText": "This part is OK.", "url": "https://github.com/quarkusio/quarkus/pull/10078#discussion_r441857510", "createdAt": "2020-06-17T21:58:36Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/main/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/RestDataEntityInfoProvider.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import javax.persistence.Id;\n+\n+import org.hibernate.bytecode.enhance.spi.EnhancerConstants;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.bean.JavaBeanUtil;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.rest.data.panache.deployment.RestDataEntityInfo;\n+\n+final class RestDataEntityInfoProvider {\n+\n+    private static final DotName PANACHE_ENTITY_BASE = DotName.createSimple(PanacheEntityBase.class.getName());\n+\n+    private final IndexView index;\n+\n+    RestDataEntityInfoProvider(IndexView index) {\n+        this.index = index;\n+    }\n+\n+    RestDataEntityInfo get(String type) {\n+        ClassInfo classInfo = index.getClassByName(DotName.createSimple(type));\n+        FieldInfo idField = getIdField(classInfo);\n+        return new RestDataEntityInfo(classInfo.toString(), idField, getSetter(classInfo, idField));\n+    }\n+\n+    private FieldInfo getIdField(ClassInfo classInfo) {\n+        ClassInfo tmpClassInfo = classInfo;\n+        while (tmpClassInfo != null) {\n+            for (FieldInfo field : tmpClassInfo.fields()) {\n+                if (field.hasAnnotation(DotName.createSimple(Id.class.getName()))) {\n+                    return field;\n+                }\n+            }\n+            if (classInfo.superName() != null) {\n+                tmpClassInfo = index.getClassByName(classInfo.superName());\n+            } else {\n+                tmpClassInfo = null;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Couldn't find id field of \" + classInfo);\n+    }\n+\n+    private MethodDescriptor getSetter(ClassInfo entityClass, FieldInfo field) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY1NTQ2Ng=="}, "originalCommit": {"oid": "618e76d64832cf2a7c1cb5d2922bb6996b843ce5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Mjg1MjQ2OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/main/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/RestDataEntityInfoProvider.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjowMzoxNlrOGlY9OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTozODoyMFrOG-HsnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1OTM4NA==", "bodyText": "This is not OK:\n\nyou should target \"set\"+capitalize(field.name) rather than go directly via the Hibernate method.\nthis won't work for generics:\n\n@Entity\npublic class MyEntity extends EntitySupertype<String> {}\n@MappedSuperclass\npublic class EntitySupertype<IdType> extends PanacheEntityBase{\n @Id\n public IdType id;\n}\nHere, field.type() is going to return IdType even though in your case it's really String. Note that this issue may also affect your use of the id field without setter and the generic entity setter. A few tests will tell you if they're affected.", "url": "https://github.com/quarkusio/quarkus/pull/10078#discussion_r441859384", "createdAt": "2020-06-17T22:03:16Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/main/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/RestDataEntityInfoProvider.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import javax.persistence.Id;\n+\n+import org.hibernate.bytecode.enhance.spi.EnhancerConstants;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.bean.JavaBeanUtil;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.rest.data.panache.deployment.RestDataEntityInfo;\n+\n+final class RestDataEntityInfoProvider {\n+\n+    private static final DotName PANACHE_ENTITY_BASE = DotName.createSimple(PanacheEntityBase.class.getName());\n+\n+    private final IndexView index;\n+\n+    RestDataEntityInfoProvider(IndexView index) {\n+        this.index = index;\n+    }\n+\n+    RestDataEntityInfo get(String type) {\n+        ClassInfo classInfo = index.getClassByName(DotName.createSimple(type));\n+        FieldInfo idField = getIdField(classInfo);\n+        return new RestDataEntityInfo(classInfo.toString(), idField, getSetter(classInfo, idField));\n+    }\n+\n+    private FieldInfo getIdField(ClassInfo classInfo) {\n+        ClassInfo tmpClassInfo = classInfo;\n+        while (tmpClassInfo != null) {\n+            for (FieldInfo field : tmpClassInfo.fields()) {\n+                if (field.hasAnnotation(DotName.createSimple(Id.class.getName()))) {\n+                    return field;\n+                }\n+            }\n+            if (classInfo.superName() != null) {\n+                tmpClassInfo = index.getClassByName(classInfo.superName());\n+            } else {\n+                tmpClassInfo = null;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Couldn't find id field of \" + classInfo);\n+    }\n+\n+    private MethodDescriptor getSetter(ClassInfo entityClass, FieldInfo field) {\n+        if (isPanacheEntity(entityClass)) {\n+            return getPanacheEntitySetter(entityClass, field);\n+        }\n+        return getGenericEntitySetter(entityClass, field);\n+    }\n+\n+    private boolean isPanacheEntity(ClassInfo entityClass) {\n+        if (entityClass == null || entityClass.superName() == null) {\n+            return false;\n+        }\n+        if (PANACHE_ENTITY_BASE.equals(entityClass.superName())) {\n+            return true;\n+        }\n+        return isPanacheEntity(index.getClassByName(entityClass.superName()));\n+    }\n+\n+    private MethodDescriptor getPanacheEntitySetter(ClassInfo entityClass, FieldInfo field) {\n+        return MethodDescriptor.ofMethod(entityClass.toString(),\n+                EnhancerConstants.PERSISTENT_FIELD_WRITER_PREFIX + field.name(), void.class, field.type().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618e76d64832cf2a7c1cb5d2922bb6996b843ce5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1MDE2OQ==", "bodyText": "Initially I tried this\nreturn MethodDescriptor.ofMethod(\n    entityClass.toString(), \n    JavaBeanUtil.getSetterName(field.name()), \n    void.class, \n    field.type().toString());\nWhich in my test was\nreturn MethodDescriptor.ofMethod(\n    \"io.quarkus.hibernate.orm.rest.data.panache.deployment.entity.Item\", \n    \"setId\", \n    void.class, \n    \"java.lang.Long\");\nand it was be called as a virtual method. But I ended up getting\njava.lang.NoSuchMethodError: 'void io.quarkus.hibernate.orm.rest.data.panache.deployment.entity.Item.setId(java.lang.Long)'", "url": "https://github.com/quarkusio/quarkus/pull/10078#discussion_r442050169", "createdAt": "2020-06-18T08:17:30Z", "author": {"login": "gytis"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/main/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/RestDataEntityInfoProvider.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import javax.persistence.Id;\n+\n+import org.hibernate.bytecode.enhance.spi.EnhancerConstants;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.bean.JavaBeanUtil;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.rest.data.panache.deployment.RestDataEntityInfo;\n+\n+final class RestDataEntityInfoProvider {\n+\n+    private static final DotName PANACHE_ENTITY_BASE = DotName.createSimple(PanacheEntityBase.class.getName());\n+\n+    private final IndexView index;\n+\n+    RestDataEntityInfoProvider(IndexView index) {\n+        this.index = index;\n+    }\n+\n+    RestDataEntityInfo get(String type) {\n+        ClassInfo classInfo = index.getClassByName(DotName.createSimple(type));\n+        FieldInfo idField = getIdField(classInfo);\n+        return new RestDataEntityInfo(classInfo.toString(), idField, getSetter(classInfo, idField));\n+    }\n+\n+    private FieldInfo getIdField(ClassInfo classInfo) {\n+        ClassInfo tmpClassInfo = classInfo;\n+        while (tmpClassInfo != null) {\n+            for (FieldInfo field : tmpClassInfo.fields()) {\n+                if (field.hasAnnotation(DotName.createSimple(Id.class.getName()))) {\n+                    return field;\n+                }\n+            }\n+            if (classInfo.superName() != null) {\n+                tmpClassInfo = index.getClassByName(classInfo.superName());\n+            } else {\n+                tmpClassInfo = null;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Couldn't find id field of \" + classInfo);\n+    }\n+\n+    private MethodDescriptor getSetter(ClassInfo entityClass, FieldInfo field) {\n+        if (isPanacheEntity(entityClass)) {\n+            return getPanacheEntitySetter(entityClass, field);\n+        }\n+        return getGenericEntitySetter(entityClass, field);\n+    }\n+\n+    private boolean isPanacheEntity(ClassInfo entityClass) {\n+        if (entityClass == null || entityClass.superName() == null) {\n+            return false;\n+        }\n+        if (PANACHE_ENTITY_BASE.equals(entityClass.superName())) {\n+            return true;\n+        }\n+        return isPanacheEntity(index.getClassByName(entityClass.superName()));\n+    }\n+\n+    private MethodDescriptor getPanacheEntitySetter(ClassInfo entityClass, FieldInfo field) {\n+        return MethodDescriptor.ofMethod(entityClass.toString(),\n+                EnhancerConstants.PERSISTENT_FIELD_WRITER_PREFIX + field.name(), void.class, field.type().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1OTM4NA=="}, "originalCommit": {"oid": "618e76d64832cf2a7c1cb5d2922bb6996b843ce5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMDc4OA==", "bodyText": "This is weird, this setter should exist.", "url": "https://github.com/quarkusio/quarkus/pull/10078#discussion_r442110788", "createdAt": "2020-06-18T09:57:24Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/main/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/RestDataEntityInfoProvider.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import javax.persistence.Id;\n+\n+import org.hibernate.bytecode.enhance.spi.EnhancerConstants;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.bean.JavaBeanUtil;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.rest.data.panache.deployment.RestDataEntityInfo;\n+\n+final class RestDataEntityInfoProvider {\n+\n+    private static final DotName PANACHE_ENTITY_BASE = DotName.createSimple(PanacheEntityBase.class.getName());\n+\n+    private final IndexView index;\n+\n+    RestDataEntityInfoProvider(IndexView index) {\n+        this.index = index;\n+    }\n+\n+    RestDataEntityInfo get(String type) {\n+        ClassInfo classInfo = index.getClassByName(DotName.createSimple(type));\n+        FieldInfo idField = getIdField(classInfo);\n+        return new RestDataEntityInfo(classInfo.toString(), idField, getSetter(classInfo, idField));\n+    }\n+\n+    private FieldInfo getIdField(ClassInfo classInfo) {\n+        ClassInfo tmpClassInfo = classInfo;\n+        while (tmpClassInfo != null) {\n+            for (FieldInfo field : tmpClassInfo.fields()) {\n+                if (field.hasAnnotation(DotName.createSimple(Id.class.getName()))) {\n+                    return field;\n+                }\n+            }\n+            if (classInfo.superName() != null) {\n+                tmpClassInfo = index.getClassByName(classInfo.superName());\n+            } else {\n+                tmpClassInfo = null;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Couldn't find id field of \" + classInfo);\n+    }\n+\n+    private MethodDescriptor getSetter(ClassInfo entityClass, FieldInfo field) {\n+        if (isPanacheEntity(entityClass)) {\n+            return getPanacheEntitySetter(entityClass, field);\n+        }\n+        return getGenericEntitySetter(entityClass, field);\n+    }\n+\n+    private boolean isPanacheEntity(ClassInfo entityClass) {\n+        if (entityClass == null || entityClass.superName() == null) {\n+            return false;\n+        }\n+        if (PANACHE_ENTITY_BASE.equals(entityClass.superName())) {\n+            return true;\n+        }\n+        return isPanacheEntity(index.getClassByName(entityClass.superName()));\n+    }\n+\n+    private MethodDescriptor getPanacheEntitySetter(ClassInfo entityClass, FieldInfo field) {\n+        return MethodDescriptor.ofMethod(entityClass.toString(),\n+                EnhancerConstants.PERSISTENT_FIELD_WRITER_PREFIX + field.name(), void.class, field.type().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1OTM4NA=="}, "originalCommit": {"oid": "618e76d64832cf2a7c1cb5d2922bb6996b843ce5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2ODY3Ng==", "bodyText": "I've changed this bit to use the ID type specified in the generic instead of field.type() (e.g. Long in this case public interface ItemsController extends PanacheEntityResource<Item, Long>). And I've added and extra abstract class to verify that the scenario you gave above with IdType works too.\nHowever, I still get NoSuchMethodException unless I use EnhancerConstants.PERSISTENT_FIELD_WRITER_PREFIX so I kept it there.", "url": "https://github.com/quarkusio/quarkus/pull/10078#discussion_r442168676", "createdAt": "2020-06-18T11:51:55Z", "author": {"login": "gytis"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/main/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/RestDataEntityInfoProvider.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import javax.persistence.Id;\n+\n+import org.hibernate.bytecode.enhance.spi.EnhancerConstants;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.bean.JavaBeanUtil;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.rest.data.panache.deployment.RestDataEntityInfo;\n+\n+final class RestDataEntityInfoProvider {\n+\n+    private static final DotName PANACHE_ENTITY_BASE = DotName.createSimple(PanacheEntityBase.class.getName());\n+\n+    private final IndexView index;\n+\n+    RestDataEntityInfoProvider(IndexView index) {\n+        this.index = index;\n+    }\n+\n+    RestDataEntityInfo get(String type) {\n+        ClassInfo classInfo = index.getClassByName(DotName.createSimple(type));\n+        FieldInfo idField = getIdField(classInfo);\n+        return new RestDataEntityInfo(classInfo.toString(), idField, getSetter(classInfo, idField));\n+    }\n+\n+    private FieldInfo getIdField(ClassInfo classInfo) {\n+        ClassInfo tmpClassInfo = classInfo;\n+        while (tmpClassInfo != null) {\n+            for (FieldInfo field : tmpClassInfo.fields()) {\n+                if (field.hasAnnotation(DotName.createSimple(Id.class.getName()))) {\n+                    return field;\n+                }\n+            }\n+            if (classInfo.superName() != null) {\n+                tmpClassInfo = index.getClassByName(classInfo.superName());\n+            } else {\n+                tmpClassInfo = null;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Couldn't find id field of \" + classInfo);\n+    }\n+\n+    private MethodDescriptor getSetter(ClassInfo entityClass, FieldInfo field) {\n+        if (isPanacheEntity(entityClass)) {\n+            return getPanacheEntitySetter(entityClass, field);\n+        }\n+        return getGenericEntitySetter(entityClass, field);\n+    }\n+\n+    private boolean isPanacheEntity(ClassInfo entityClass) {\n+        if (entityClass == null || entityClass.superName() == null) {\n+            return false;\n+        }\n+        if (PANACHE_ENTITY_BASE.equals(entityClass.superName())) {\n+            return true;\n+        }\n+        return isPanacheEntity(index.getClassByName(entityClass.superName()));\n+    }\n+\n+    private MethodDescriptor getPanacheEntitySetter(ClassInfo entityClass, FieldInfo field) {\n+        return MethodDescriptor.ofMethod(entityClass.toString(),\n+                EnhancerConstants.PERSISTENT_FIELD_WRITER_PREFIX + field.name(), void.class, field.type().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1OTM4NA=="}, "originalCommit": {"oid": "618e76d64832cf2a7c1cb5d2922bb6996b843ce5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExMTcwMQ==", "bodyText": "OK, so what throws? I bet it's using reflection on the non-instrumented class.", "url": "https://github.com/quarkusio/quarkus/pull/10078#discussion_r467111701", "createdAt": "2020-08-07T15:28:26Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/main/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/RestDataEntityInfoProvider.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import javax.persistence.Id;\n+\n+import org.hibernate.bytecode.enhance.spi.EnhancerConstants;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.bean.JavaBeanUtil;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.rest.data.panache.deployment.RestDataEntityInfo;\n+\n+final class RestDataEntityInfoProvider {\n+\n+    private static final DotName PANACHE_ENTITY_BASE = DotName.createSimple(PanacheEntityBase.class.getName());\n+\n+    private final IndexView index;\n+\n+    RestDataEntityInfoProvider(IndexView index) {\n+        this.index = index;\n+    }\n+\n+    RestDataEntityInfo get(String type) {\n+        ClassInfo classInfo = index.getClassByName(DotName.createSimple(type));\n+        FieldInfo idField = getIdField(classInfo);\n+        return new RestDataEntityInfo(classInfo.toString(), idField, getSetter(classInfo, idField));\n+    }\n+\n+    private FieldInfo getIdField(ClassInfo classInfo) {\n+        ClassInfo tmpClassInfo = classInfo;\n+        while (tmpClassInfo != null) {\n+            for (FieldInfo field : tmpClassInfo.fields()) {\n+                if (field.hasAnnotation(DotName.createSimple(Id.class.getName()))) {\n+                    return field;\n+                }\n+            }\n+            if (classInfo.superName() != null) {\n+                tmpClassInfo = index.getClassByName(classInfo.superName());\n+            } else {\n+                tmpClassInfo = null;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Couldn't find id field of \" + classInfo);\n+    }\n+\n+    private MethodDescriptor getSetter(ClassInfo entityClass, FieldInfo field) {\n+        if (isPanacheEntity(entityClass)) {\n+            return getPanacheEntitySetter(entityClass, field);\n+        }\n+        return getGenericEntitySetter(entityClass, field);\n+    }\n+\n+    private boolean isPanacheEntity(ClassInfo entityClass) {\n+        if (entityClass == null || entityClass.superName() == null) {\n+            return false;\n+        }\n+        if (PANACHE_ENTITY_BASE.equals(entityClass.superName())) {\n+            return true;\n+        }\n+        return isPanacheEntity(index.getClassByName(entityClass.superName()));\n+    }\n+\n+    private MethodDescriptor getPanacheEntitySetter(ClassInfo entityClass, FieldInfo field) {\n+        return MethodDescriptor.ofMethod(entityClass.toString(),\n+                EnhancerConstants.PERSISTENT_FIELD_WRITER_PREFIX + field.name(), void.class, field.type().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1OTM4NA=="}, "originalCommit": {"oid": "618e76d64832cf2a7c1cb5d2922bb6996b843ce5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNTI2Nw==", "bodyText": "The thing is that we allow users to add setters to their public fields with the promise that they will be used by the users of the fields.\nSo ideally, if you had this entity, your setter should be invoked:\n@Entity\npublic class MyEntity extends PanacheEntityBase {\n @Id\n public Long id;\n\n public void setId(Long id){\n  System.err.println(\"We're called\");\n  this.id = id;\n }\n}\nEven when all clients call entity.id = 23.", "url": "https://github.com/quarkusio/quarkus/pull/10078#discussion_r467115267", "createdAt": "2020-08-07T15:34:56Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/main/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/RestDataEntityInfoProvider.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import javax.persistence.Id;\n+\n+import org.hibernate.bytecode.enhance.spi.EnhancerConstants;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.bean.JavaBeanUtil;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.rest.data.panache.deployment.RestDataEntityInfo;\n+\n+final class RestDataEntityInfoProvider {\n+\n+    private static final DotName PANACHE_ENTITY_BASE = DotName.createSimple(PanacheEntityBase.class.getName());\n+\n+    private final IndexView index;\n+\n+    RestDataEntityInfoProvider(IndexView index) {\n+        this.index = index;\n+    }\n+\n+    RestDataEntityInfo get(String type) {\n+        ClassInfo classInfo = index.getClassByName(DotName.createSimple(type));\n+        FieldInfo idField = getIdField(classInfo);\n+        return new RestDataEntityInfo(classInfo.toString(), idField, getSetter(classInfo, idField));\n+    }\n+\n+    private FieldInfo getIdField(ClassInfo classInfo) {\n+        ClassInfo tmpClassInfo = classInfo;\n+        while (tmpClassInfo != null) {\n+            for (FieldInfo field : tmpClassInfo.fields()) {\n+                if (field.hasAnnotation(DotName.createSimple(Id.class.getName()))) {\n+                    return field;\n+                }\n+            }\n+            if (classInfo.superName() != null) {\n+                tmpClassInfo = index.getClassByName(classInfo.superName());\n+            } else {\n+                tmpClassInfo = null;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Couldn't find id field of \" + classInfo);\n+    }\n+\n+    private MethodDescriptor getSetter(ClassInfo entityClass, FieldInfo field) {\n+        if (isPanacheEntity(entityClass)) {\n+            return getPanacheEntitySetter(entityClass, field);\n+        }\n+        return getGenericEntitySetter(entityClass, field);\n+    }\n+\n+    private boolean isPanacheEntity(ClassInfo entityClass) {\n+        if (entityClass == null || entityClass.superName() == null) {\n+            return false;\n+        }\n+        if (PANACHE_ENTITY_BASE.equals(entityClass.superName())) {\n+            return true;\n+        }\n+        return isPanacheEntity(index.getClassByName(entityClass.superName()));\n+    }\n+\n+    private MethodDescriptor getPanacheEntitySetter(ClassInfo entityClass, FieldInfo field) {\n+        return MethodDescriptor.ofMethod(entityClass.toString(),\n+                EnhancerConstants.PERSISTENT_FIELD_WRITER_PREFIX + field.name(), void.class, field.type().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1OTM4NA=="}, "originalCommit": {"oid": "618e76d64832cf2a7c1cb5d2922bb6996b843ce5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5MTAwNQ==", "bodyText": "I've replaced the setter lookup logic to the following:\n    private MethodDescriptor getSetter(ClassInfo entityClass, FieldInfo field) {\n        if (entityClass == null) {\n            return null;\n        }\n        MethodInfo methodInfo = entityClass.method(JavaBeanUtil.getSetterName(field.name()), field.type());\n        if (methodInfo != null) {\n            return MethodDescriptor.of(methodInfo);\n        } else if (entityClass.superName() != null) {\n            return getSetter(index.getClassByName(entityClass.superName()), field);\n        }\n        return null;\n    }\nI tried locally with a Panache entity and a simple POJO entity. I also tried with a custom setter method provided by the user. Let's see if the CI brings some issues though.\nBefore I tried calling a setter with MethodDescriptor.ofMethod(className, JavaBeanUtil.getSetterName(fieldName), void.class, fieldType); which didn't work.", "url": "https://github.com/quarkusio/quarkus/pull/10078#discussion_r467791005", "createdAt": "2020-08-10T09:38:20Z", "author": {"login": "gytis"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/main/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/RestDataEntityInfoProvider.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import javax.persistence.Id;\n+\n+import org.hibernate.bytecode.enhance.spi.EnhancerConstants;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.bean.JavaBeanUtil;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.rest.data.panache.deployment.RestDataEntityInfo;\n+\n+final class RestDataEntityInfoProvider {\n+\n+    private static final DotName PANACHE_ENTITY_BASE = DotName.createSimple(PanacheEntityBase.class.getName());\n+\n+    private final IndexView index;\n+\n+    RestDataEntityInfoProvider(IndexView index) {\n+        this.index = index;\n+    }\n+\n+    RestDataEntityInfo get(String type) {\n+        ClassInfo classInfo = index.getClassByName(DotName.createSimple(type));\n+        FieldInfo idField = getIdField(classInfo);\n+        return new RestDataEntityInfo(classInfo.toString(), idField, getSetter(classInfo, idField));\n+    }\n+\n+    private FieldInfo getIdField(ClassInfo classInfo) {\n+        ClassInfo tmpClassInfo = classInfo;\n+        while (tmpClassInfo != null) {\n+            for (FieldInfo field : tmpClassInfo.fields()) {\n+                if (field.hasAnnotation(DotName.createSimple(Id.class.getName()))) {\n+                    return field;\n+                }\n+            }\n+            if (classInfo.superName() != null) {\n+                tmpClassInfo = index.getClassByName(classInfo.superName());\n+            } else {\n+                tmpClassInfo = null;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Couldn't find id field of \" + classInfo);\n+    }\n+\n+    private MethodDescriptor getSetter(ClassInfo entityClass, FieldInfo field) {\n+        if (isPanacheEntity(entityClass)) {\n+            return getPanacheEntitySetter(entityClass, field);\n+        }\n+        return getGenericEntitySetter(entityClass, field);\n+    }\n+\n+    private boolean isPanacheEntity(ClassInfo entityClass) {\n+        if (entityClass == null || entityClass.superName() == null) {\n+            return false;\n+        }\n+        if (PANACHE_ENTITY_BASE.equals(entityClass.superName())) {\n+            return true;\n+        }\n+        return isPanacheEntity(index.getClassByName(entityClass.superName()));\n+    }\n+\n+    private MethodDescriptor getPanacheEntitySetter(ClassInfo entityClass, FieldInfo field) {\n+        return MethodDescriptor.ofMethod(entityClass.toString(),\n+                EnhancerConstants.PERSISTENT_FIELD_WRITER_PREFIX + field.name(), void.class, field.type().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1OTM4NA=="}, "originalCommit": {"oid": "618e76d64832cf2a7c1cb5d2922bb6996b843ce5"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2774, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}