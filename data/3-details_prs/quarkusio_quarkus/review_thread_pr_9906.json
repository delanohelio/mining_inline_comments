{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzcwNDQz", "number": 9906, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDowMzoxM1rOEFeOXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDowODo1NFrOEFeWEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTczNTMzOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDowMzoxM1rOGjrjnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDowMzoxM1rOGjrjnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2Njk3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                 * When the native binary is being built with a docker container, because a volume is create,\n          \n          \n            \n                                 * When the native binary is being built with a docker container, because a volume is created,", "url": "https://github.com/quarkusio/quarkus/pull/9906#discussion_r440066972", "createdAt": "2020-06-15T10:03:13Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java", "diffHunk": "@@ -359,6 +365,40 @@ public NativeImageBuildItem build(NativeConfig nativeConfig, NativeImageSourceJa\n         }\n     }\n \n+    private void handleAdditionalProperties(NativeConfig nativeConfig, List<String> command, boolean isContainerBuild,\n+            Path outputDir) {\n+        if (nativeConfig.additionalBuildArgs.isPresent()) {\n+            List<String> strings = nativeConfig.additionalBuildArgs.get();\n+            for (String buildArg : strings) {\n+                String trimmedBuildArg = buildArg.trim();\n+                if (trimmedBuildArg.contains(TRUST_STORE_SYSTEM_PROPERTY_MARKER) && isContainerBuild) {\n+                    /*\n+                     * When the native binary is being built with a docker container, because a volume is create,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "533f758f67c929ac6faf527fa9cdb6ffeb089a00"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTc1MDQ3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/native-and-ssl.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDowNzozMVrOGjrtBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDowNzozMVrOGjrtBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2OTM4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            will ensure that the contents of `/tmp/mycerts` are baked into the native binary and used *in addition* to the default cacerts.\n          \n          \n            \n            will ensure that the certificates of `/tmp/mycerts` are baked into the native binary and used *in addition* to the default cacerts.\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/quarkusio/quarkus/pull/9906#discussion_r440069382", "createdAt": "2020-06-15T10:07:31Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/native-and-ssl.adoc", "diffHunk": "@@ -161,71 +161,36 @@ And let's build the native executable again:\n [#the-truststore-path]\n == The TrustStore path\n \n-You haven't noticed anything but, while building the image,\n-Quarkus has automatically set `javax.net.ssl.trustStore` to point to the `cacerts` file bundled in the GraalVM distribution.\n-This file contains the root certificates.\n-\n-This is useful when running tests but, obviously, it is not portable as this path is hardcoded.\n+[WARNING]\n+====\n+This behavior is new to GraalVM 19.3+.\n+====\n \n-You can check that pretty easily:\n+When creating a native binary, GraalVM embraces the principle of \"immutable security\" for the root certificates.\n+This essentially means that the root certificates are fixed at image build time, based on the certificate configuration used at that build time\n+(which for Quarkus means when you perform a build having `quarkus.package.type=native` set).\n+This avoids shipping a `cacerts` file or requiring a system property be set in order to set up root\n+certificates that are provided by the OS where the binary runs.\n \n- * move your GraalVM directory to another place (let's call it `<new-graalvm-home>`)\n- * run the native executable `./target/rest-client-1.0-SNAPSHOT-runner`\n- * in a browser, go to `http://localhost:8080/country/name/greece`\n- * you will have an Internal Server Error\n- * in your terminal, you should have an exception: `java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty`\n- * hit `Ctrl+C` to stop the application\n+As a consequence, system properties such as `javax.net.ssl.trustStore` do not have an effect at\n+run time, so when the defaults need to be changed, these system properties must be provided at image build time.\n+The easiest way to do so is by setting `quarkus.native.additional-build-args`. For example:\n \n-To make it work, you need to manually set `javax.net.ssl.trustStore` to point to the new GraalVM home:\n ```\n-./target/rest-client-1.0-SNAPSHOT-runner -Djavax.net.ssl.trustStore=<new-graalvm-home>/jre/lib/security/cacerts\n+quarkus.native.additional-build-args=-J-Djavax.net.ssl.trustStore=/tmp/mycerts,-J-Djavax.net.ssl.trustStorePassword=changeit\n ```\n \n-Now, the application should work as expected:\n+will ensure that the contents of `/tmp/mycerts` are baked into the native binary and used *in addition* to the default cacerts.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "204d0a17758bd5963f1f7a1896ef216a514fba42"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTc1MTcyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/native-and-ssl.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDowNzo1M1rOGjrt0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDowNzo1M1rOGjrt0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2OTU4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The file containing the custom TrustStore does *not* have to be present at runtime as its contents have been baked into the native binary.\n          \n          \n            \n            The file containing the custom TrustStore does *not* have to be present at runtime as its content has been baked into the native binary.", "url": "https://github.com/quarkusio/quarkus/pull/9906#discussion_r440069586", "createdAt": "2020-06-15T10:07:53Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/native-and-ssl.adoc", "diffHunk": "@@ -161,71 +161,36 @@ And let's build the native executable again:\n [#the-truststore-path]\n == The TrustStore path\n \n-You haven't noticed anything but, while building the image,\n-Quarkus has automatically set `javax.net.ssl.trustStore` to point to the `cacerts` file bundled in the GraalVM distribution.\n-This file contains the root certificates.\n-\n-This is useful when running tests but, obviously, it is not portable as this path is hardcoded.\n+[WARNING]\n+====\n+This behavior is new to GraalVM 19.3+.\n+====\n \n-You can check that pretty easily:\n+When creating a native binary, GraalVM embraces the principle of \"immutable security\" for the root certificates.\n+This essentially means that the root certificates are fixed at image build time, based on the certificate configuration used at that build time\n+(which for Quarkus means when you perform a build having `quarkus.package.type=native` set).\n+This avoids shipping a `cacerts` file or requiring a system property be set in order to set up root\n+certificates that are provided by the OS where the binary runs.\n \n- * move your GraalVM directory to another place (let's call it `<new-graalvm-home>`)\n- * run the native executable `./target/rest-client-1.0-SNAPSHOT-runner`\n- * in a browser, go to `http://localhost:8080/country/name/greece`\n- * you will have an Internal Server Error\n- * in your terminal, you should have an exception: `java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty`\n- * hit `Ctrl+C` to stop the application\n+As a consequence, system properties such as `javax.net.ssl.trustStore` do not have an effect at\n+run time, so when the defaults need to be changed, these system properties must be provided at image build time.\n+The easiest way to do so is by setting `quarkus.native.additional-build-args`. For example:\n \n-To make it work, you need to manually set `javax.net.ssl.trustStore` to point to the new GraalVM home:\n ```\n-./target/rest-client-1.0-SNAPSHOT-runner -Djavax.net.ssl.trustStore=<new-graalvm-home>/jre/lib/security/cacerts\n+quarkus.native.additional-build-args=-J-Djavax.net.ssl.trustStore=/tmp/mycerts,-J-Djavax.net.ssl.trustStorePassword=changeit\n ```\n \n-Now, the application should work as expected:\n+will ensure that the contents of `/tmp/mycerts` are baked into the native binary and used *in addition* to the default cacerts.\n \n- * in a browser, go to `http://localhost:8080/country/name/greece`\n- * you should see a JSON output with some information about Greece\n- * hit `Ctrl+C` to stop the application\n-\n-[TIP]\n+[IMPORTANT]\n ====\n-The root certificates file of GraalVM might not be totally up to date.\n-If you have issues with some certificates, your best bet is to include the `cacerts` file of a regular JDK instead.\n-====\n-\n-[WARNING]\n-====\n-Don't forget to move your GraalVM directory back to where it was.\n+The file containing the custom TrustStore does *not* have to be present at runtime as its contents have been baked into the native binary.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "204d0a17758bd5963f1f7a1896ef216a514fba42"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTc1NTA3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/native-and-ssl.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDowODo1NFrOGjrv6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDoyMDo0M1rOGjsIPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MDEyMg==", "bodyText": "it will properly in container as well\n\nLooks like some word is missing here? Or maybe not but the meaning is not exactly obvious when you read it.", "url": "https://github.com/quarkusio/quarkus/pull/9906#discussion_r440070122", "createdAt": "2020-06-15T10:08:54Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/native-and-ssl.adoc", "diffHunk": "@@ -161,71 +161,36 @@ And let's build the native executable again:\n [#the-truststore-path]\n == The TrustStore path\n \n-You haven't noticed anything but, while building the image,\n-Quarkus has automatically set `javax.net.ssl.trustStore` to point to the `cacerts` file bundled in the GraalVM distribution.\n-This file contains the root certificates.\n-\n-This is useful when running tests but, obviously, it is not portable as this path is hardcoded.\n+[WARNING]\n+====\n+This behavior is new to GraalVM 19.3+.\n+====\n \n-You can check that pretty easily:\n+When creating a native binary, GraalVM embraces the principle of \"immutable security\" for the root certificates.\n+This essentially means that the root certificates are fixed at image build time, based on the certificate configuration used at that build time\n+(which for Quarkus means when you perform a build having `quarkus.package.type=native` set).\n+This avoids shipping a `cacerts` file or requiring a system property be set in order to set up root\n+certificates that are provided by the OS where the binary runs.\n \n- * move your GraalVM directory to another place (let's call it `<new-graalvm-home>`)\n- * run the native executable `./target/rest-client-1.0-SNAPSHOT-runner`\n- * in a browser, go to `http://localhost:8080/country/name/greece`\n- * you will have an Internal Server Error\n- * in your terminal, you should have an exception: `java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty`\n- * hit `Ctrl+C` to stop the application\n+As a consequence, system properties such as `javax.net.ssl.trustStore` do not have an effect at\n+run time, so when the defaults need to be changed, these system properties must be provided at image build time.\n+The easiest way to do so is by setting `quarkus.native.additional-build-args`. For example:\n \n-To make it work, you need to manually set `javax.net.ssl.trustStore` to point to the new GraalVM home:\n ```\n-./target/rest-client-1.0-SNAPSHOT-runner -Djavax.net.ssl.trustStore=<new-graalvm-home>/jre/lib/security/cacerts\n+quarkus.native.additional-build-args=-J-Djavax.net.ssl.trustStore=/tmp/mycerts,-J-Djavax.net.ssl.trustStorePassword=changeit\n ```\n \n-Now, the application should work as expected:\n+will ensure that the contents of `/tmp/mycerts` are baked into the native binary and used *in addition* to the default cacerts.\n \n- * in a browser, go to `http://localhost:8080/country/name/greece`\n- * you should see a JSON output with some information about Greece\n- * hit `Ctrl+C` to stop the application\n-\n-[TIP]\n+[IMPORTANT]\n ====\n-The root certificates file of GraalVM might not be totally up to date.\n-If you have issues with some certificates, your best bet is to include the `cacerts` file of a regular JDK instead.\n-====\n-\n-[WARNING]\n-====\n-Don't forget to move your GraalVM directory back to where it was.\n+The file containing the custom TrustStore does *not* have to be present at runtime as its contents have been baked into the native binary.\n ====\n \n === Working with containers\n \n-When working with containers, the idea is to bundle the certificates in the container and to point your binary to them using the system property mentioned above.\n-\n-You can for example modify your `Dockerfile.native` as follows to copy the required files to your final image:\n-\n-[source, subs=attributes+]\n-----\n-FROM quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor} as nativebuilder\n-RUN mkdir -p /tmp/ssl \\\n-  && cp /opt/graalvm/lib/security/cacerts /tmp/ssl/\n-\n-FROM registry.access.redhat.com/ubi8/ubi-minimal\n-WORKDIR /work/\n-COPY --from=nativebuilder /tmp/ssl/ /work/\n-COPY target/*-runner /work/application\n-\n-# set up permissions for user `1001`\n-RUN chmod 775 /work /work/application \\\n-  && chown -R 1001 /work \\\n-  && chmod -R \"g+rwX\" /work \\\n-  && chown -R 1001:root /work\n-\n-EXPOSE 8080\n-USER 1001\n-\n-CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\", \"-Djavax.net.ssl.trustStore=/work/cacerts\"]\n-----\n+No special action needs to be taken when running the native binary in a container. If the native binary was properly built with the custom TrustStore\n+as described in the previous section, it will properly in container as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "204d0a17758bd5963f1f7a1896ef216a514fba42"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NjM0OA==", "bodyText": "Of course I was missing the verb :)", "url": "https://github.com/quarkusio/quarkus/pull/9906#discussion_r440076348", "createdAt": "2020-06-15T10:20:43Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/native-and-ssl.adoc", "diffHunk": "@@ -161,71 +161,36 @@ And let's build the native executable again:\n [#the-truststore-path]\n == The TrustStore path\n \n-You haven't noticed anything but, while building the image,\n-Quarkus has automatically set `javax.net.ssl.trustStore` to point to the `cacerts` file bundled in the GraalVM distribution.\n-This file contains the root certificates.\n-\n-This is useful when running tests but, obviously, it is not portable as this path is hardcoded.\n+[WARNING]\n+====\n+This behavior is new to GraalVM 19.3+.\n+====\n \n-You can check that pretty easily:\n+When creating a native binary, GraalVM embraces the principle of \"immutable security\" for the root certificates.\n+This essentially means that the root certificates are fixed at image build time, based on the certificate configuration used at that build time\n+(which for Quarkus means when you perform a build having `quarkus.package.type=native` set).\n+This avoids shipping a `cacerts` file or requiring a system property be set in order to set up root\n+certificates that are provided by the OS where the binary runs.\n \n- * move your GraalVM directory to another place (let's call it `<new-graalvm-home>`)\n- * run the native executable `./target/rest-client-1.0-SNAPSHOT-runner`\n- * in a browser, go to `http://localhost:8080/country/name/greece`\n- * you will have an Internal Server Error\n- * in your terminal, you should have an exception: `java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty`\n- * hit `Ctrl+C` to stop the application\n+As a consequence, system properties such as `javax.net.ssl.trustStore` do not have an effect at\n+run time, so when the defaults need to be changed, these system properties must be provided at image build time.\n+The easiest way to do so is by setting `quarkus.native.additional-build-args`. For example:\n \n-To make it work, you need to manually set `javax.net.ssl.trustStore` to point to the new GraalVM home:\n ```\n-./target/rest-client-1.0-SNAPSHOT-runner -Djavax.net.ssl.trustStore=<new-graalvm-home>/jre/lib/security/cacerts\n+quarkus.native.additional-build-args=-J-Djavax.net.ssl.trustStore=/tmp/mycerts,-J-Djavax.net.ssl.trustStorePassword=changeit\n ```\n \n-Now, the application should work as expected:\n+will ensure that the contents of `/tmp/mycerts` are baked into the native binary and used *in addition* to the default cacerts.\n \n- * in a browser, go to `http://localhost:8080/country/name/greece`\n- * you should see a JSON output with some information about Greece\n- * hit `Ctrl+C` to stop the application\n-\n-[TIP]\n+[IMPORTANT]\n ====\n-The root certificates file of GraalVM might not be totally up to date.\n-If you have issues with some certificates, your best bet is to include the `cacerts` file of a regular JDK instead.\n-====\n-\n-[WARNING]\n-====\n-Don't forget to move your GraalVM directory back to where it was.\n+The file containing the custom TrustStore does *not* have to be present at runtime as its contents have been baked into the native binary.\n ====\n \n === Working with containers\n \n-When working with containers, the idea is to bundle the certificates in the container and to point your binary to them using the system property mentioned above.\n-\n-You can for example modify your `Dockerfile.native` as follows to copy the required files to your final image:\n-\n-[source, subs=attributes+]\n-----\n-FROM quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor} as nativebuilder\n-RUN mkdir -p /tmp/ssl \\\n-  && cp /opt/graalvm/lib/security/cacerts /tmp/ssl/\n-\n-FROM registry.access.redhat.com/ubi8/ubi-minimal\n-WORKDIR /work/\n-COPY --from=nativebuilder /tmp/ssl/ /work/\n-COPY target/*-runner /work/application\n-\n-# set up permissions for user `1001`\n-RUN chmod 775 /work /work/application \\\n-  && chown -R 1001 /work \\\n-  && chmod -R \"g+rwX\" /work \\\n-  && chown -R 1001:root /work\n-\n-EXPOSE 8080\n-USER 1001\n-\n-CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\", \"-Djavax.net.ssl.trustStore=/work/cacerts\"]\n-----\n+No special action needs to be taken when running the native binary in a container. If the native binary was properly built with the custom TrustStore\n+as described in the previous section, it will properly in container as well.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MDEyMg=="}, "originalCommit": {"oid": "204d0a17758bd5963f1f7a1896ef216a514fba42"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2835, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}