{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NzAxODk5", "number": 10936, "title": "Implement container-managed concurrency for beans", "bodyText": "resolves #10923", "createdAt": "2020-07-23T13:18:37Z", "url": "https://github.com/quarkusio/quarkus/pull/10936", "merged": true, "mergeCommit": {"oid": "a08136080482075fee83a4334a8120b83596e43f"}, "closed": true, "closedAt": "2020-07-26T23:24:28Z", "author": {"login": "mkouba"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3vXILgFqTQ1NDEyNDY4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc41w5UgFqTQ1NTQwNDMwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTI0Njgy", "url": "https://github.com/quarkusio/quarkus/pull/10936#pullrequestreview-454124682", "createdAt": "2020-07-23T13:22:43Z", "commit": {"oid": "1c6b4b40d038908e14c100f7380b4b6f398de0c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MjkwMjE3", "url": "https://github.com/quarkusio/quarkus/pull/10936#pullrequestreview-454290217", "createdAt": "2020-07-23T16:12:35Z", "commit": {"oid": "1c6b4b40d038908e14c100f7380b4b6f398de0c1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjoxMjozNlrOG2RtZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjoxMjozNlrOG2RtZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2NjQzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Or let the container to control concurrent access to the bean instance. \n          \n          \n            \n            Or let the container control concurrent access to the bean instance.", "url": "https://github.com/quarkusio/quarkus/pull/10936#discussion_r459566439", "createdAt": "2020-07-23T16:12:36Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/cdi-reference.adoc", "diffHunk": "@@ -661,6 +661,38 @@ This situation is very common when trying to use CDI with alternative JVM langua\n \n Quarkus however, can overcome these limitations when `quarkus.arc.transform-unproxyable-classes` is set to `true` (which is the default value).\n \n+=== Container-managed Concurrency\n+\n+There is no standard concurrency control mechanism for CDI beans.\n+However, bean instances can be shared.\n+In that case, the instances may be accessed concurrently and therefore should be thread-safe.\n+A bean author can protect the bean state using the standard Java constructs (`volatile`, `synchronized`, `ReadWriteLock`, etc.).\n+Or let the container to control concurrent access to the bean instance. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6b4b40d038908e14c100f7380b4b6f398de0c1"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c6b4b40d038908e14c100f7380b4b6f398de0c1", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/1c6b4b40d038908e14c100f7380b4b6f398de0c1", "committedDate": "2020-07-23T13:17:40Z", "message": "Implement container-managed concurrency for beans\n\n- resolves #10923"}, "afterCommit": {"oid": "3ac43377eab8d69308bdbc2c7839946677feea2f", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/3ac43377eab8d69308bdbc2c7839946677feea2f", "committedDate": "2020-07-23T19:19:30Z", "message": "Implement container-managed concurrency for beans\n\n- resolves #10923"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTA4MTU1", "url": "https://github.com/quarkusio/quarkus/pull/10936#pullrequestreview-454508155", "createdAt": "2020-07-23T21:28:35Z", "commit": {"oid": "3ac43377eab8d69308bdbc2c7839946677feea2f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTUxMjYz", "url": "https://github.com/quarkusio/quarkus/pull/10936#pullrequestreview-454551263", "createdAt": "2020-07-23T23:03:01Z", "commit": {"oid": "3ac43377eab8d69308bdbc2c7839946677feea2f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzowMzowMlrOG2ea8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzowMzoxNFrOG2ebJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NDcwNQ==", "bodyText": "If this throws InterruptedException then locked will be true but the lock will not have been acquired, and the finally block will attempt to unlock a lock it does not hold.", "url": "https://github.com/quarkusio/quarkus/pull/10936#discussion_r459774705", "createdAt": "2020-07-23T23:03:02Z", "author": {"login": "stuartwdouglas"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/LockInterceptor.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.arc.impl;\n+\n+import static javax.interceptor.Interceptor.Priority.PLATFORM_BEFORE;\n+\n+import io.quarkus.arc.ArcInvocationContext;\n+import io.quarkus.arc.Lock;\n+import io.quarkus.arc.LockException;\n+import java.lang.annotation.Annotation;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.Priority;\n+import javax.interceptor.AroundInvoke;\n+import javax.interceptor.Interceptor;\n+import javax.interceptor.InvocationContext;\n+\n+@Lock\n+@Interceptor\n+@Priority(PLATFORM_BEFORE)\n+public class LockInterceptor {\n+\n+    private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n+\n+    @AroundInvoke\n+    Object lock(InvocationContext ctx) throws Exception {\n+        Lock lock = getLock(ctx);\n+        switch (lock.value()) {\n+            case WRITE:\n+                return writeLock(lock, ctx);\n+            case READ:\n+                return readLock(lock, ctx);\n+            case NONE:\n+                return ctx.proceed();\n+        }\n+        throw new LockException(\"Unsupported @Lock type found on business method \" + ctx.getMethod());\n+    }\n+\n+    private Object writeLock(Lock lock, InvocationContext ctx) throws Exception {\n+        boolean locked = true;\n+        long time = lock.time();\n+        try {\n+            if (time > 0) {\n+                locked = readWriteLock.writeLock().tryLock(time, lock.unit());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ac43377eab8d69308bdbc2c7839946677feea2f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NDc1OA==", "bodyText": "Same problem here.", "url": "https://github.com/quarkusio/quarkus/pull/10936#discussion_r459774758", "createdAt": "2020-07-23T23:03:14Z", "author": {"login": "stuartwdouglas"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/LockInterceptor.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.arc.impl;\n+\n+import static javax.interceptor.Interceptor.Priority.PLATFORM_BEFORE;\n+\n+import io.quarkus.arc.ArcInvocationContext;\n+import io.quarkus.arc.Lock;\n+import io.quarkus.arc.LockException;\n+import java.lang.annotation.Annotation;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import javax.annotation.Priority;\n+import javax.interceptor.AroundInvoke;\n+import javax.interceptor.Interceptor;\n+import javax.interceptor.InvocationContext;\n+\n+@Lock\n+@Interceptor\n+@Priority(PLATFORM_BEFORE)\n+public class LockInterceptor {\n+\n+    private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n+\n+    @AroundInvoke\n+    Object lock(InvocationContext ctx) throws Exception {\n+        Lock lock = getLock(ctx);\n+        switch (lock.value()) {\n+            case WRITE:\n+                return writeLock(lock, ctx);\n+            case READ:\n+                return readLock(lock, ctx);\n+            case NONE:\n+                return ctx.proceed();\n+        }\n+        throw new LockException(\"Unsupported @Lock type found on business method \" + ctx.getMethod());\n+    }\n+\n+    private Object writeLock(Lock lock, InvocationContext ctx) throws Exception {\n+        boolean locked = true;\n+        long time = lock.time();\n+        try {\n+            if (time > 0) {\n+                locked = readWriteLock.writeLock().tryLock(time, lock.unit());\n+                if (!locked) {\n+                    throw new LockException(\"Write lock not acquired in \" + lock.unit().toMillis(time) + \" ms\");\n+                }\n+            } else {\n+                readWriteLock.writeLock().lock();\n+            }\n+            return ctx.proceed();\n+        } finally {\n+            if (locked) {\n+                readWriteLock.writeLock().unlock();\n+            }\n+        }\n+    }\n+\n+    private Object readLock(Lock lock, InvocationContext ctx) throws Exception {\n+        boolean locked = true;\n+        long time = lock.time();\n+        try {\n+            if (time > 0) {\n+                locked = readWriteLock.readLock().tryLock(time, lock.unit());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ac43377eab8d69308bdbc2c7839946677feea2f"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NjIwNTA3", "url": "https://github.com/quarkusio/quarkus/pull/10936#pullrequestreview-454620507", "createdAt": "2020-07-24T03:45:54Z", "commit": {"oid": "3ac43377eab8d69308bdbc2c7839946677feea2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMzo0NTo1NFrOG2iWJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMzo0NTo1NFrOG2iWJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzOTAxNQ==", "bodyText": "Should we include a note mentioning what the default timeout is for such locks?", "url": "https://github.com/quarkusio/quarkus/pull/10936#discussion_r459839015", "createdAt": "2020-07-24T03:45:54Z", "author": {"login": "jaikiran"}, "path": "docs/src/main/asciidoc/cdi-reference.adoc", "diffHunk": "@@ -661,6 +661,38 @@ This situation is very common when trying to use CDI with alternative JVM langua\n \n Quarkus however, can overcome these limitations when `quarkus.arc.transform-unproxyable-classes` is set to `true` (which is the default value).\n \n+=== Container-managed Concurrency\n+\n+There is no standard concurrency control mechanism for CDI beans.\n+Nevertheless, a bean instance can be shared and accessed concurrently from multiple threads.\n+In that case it should be thread-safe.\n+You can use standard Java constructs (`volatile`, `synchronized`, `ReadWriteLock`, etc.) or let the container control the concurrent access. \n+\n+.Container-managed Concurrency Example\n+[source,java]\n+----\n+import io.quarkus.arc.Lock;\n+\n+@Lock <1>\n+@ApplicationScoped\n+class SharedService {\n+\n+  void addAmount(BigDecimal amout) {\n+    // ...changes some internal state of the bean\n+  }\n+  \n+  @Lock(value = Lock.Type.READ, time = 1, unit = TimeUnit.SECONDS) <2> <3>\n+  BigDecimal getAmount() {\n+    // ...it is safe to read the value concurrently\n+  }\n+}\n+----\n+<1> `@Lock` (which maps to `@Lock(Lock.Type.WRITE)`) declared on the class instructs the container to lock the bean instance for any invocation of any business method, i.e. the client has \"exclusive access\" and no concurrent invocations will be allowed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ac43377eab8d69308bdbc2c7839946677feea2f"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NjIxMTk2", "url": "https://github.com/quarkusio/quarkus/pull/10936#pullrequestreview-454621196", "createdAt": "2020-07-24T03:49:33Z", "commit": {"oid": "3ac43377eab8d69308bdbc2c7839946677feea2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMzo0OTozM1rOG2iYhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMzo0OTozM1rOG2iYhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzOTYyMQ==", "bodyText": "@mkouba, I don't have knowledge about CDI, so this might be a basic question - Assuming this @Lock is declared on a request scoped bean, do such beans have more than one (bean) instance at any given time? If yes, then does this locking mechanism apply per bean instance (i.e. a WRITE lock on bean instance1 would still allow a WRITE access on bean instance2 of the same bean type)? Or is the lock applicable for all instances of the same bean type?", "url": "https://github.com/quarkusio/quarkus/pull/10936#discussion_r459839621", "createdAt": "2020-07-24T03:49:33Z", "author": {"login": "jaikiran"}, "path": "docs/src/main/asciidoc/cdi-reference.adoc", "diffHunk": "@@ -661,6 +661,38 @@ This situation is very common when trying to use CDI with alternative JVM langua\n \n Quarkus however, can overcome these limitations when `quarkus.arc.transform-unproxyable-classes` is set to `true` (which is the default value).\n \n+=== Container-managed Concurrency\n+\n+There is no standard concurrency control mechanism for CDI beans.\n+Nevertheless, a bean instance can be shared and accessed concurrently from multiple threads.\n+In that case it should be thread-safe.\n+You can use standard Java constructs (`volatile`, `synchronized`, `ReadWriteLock`, etc.) or let the container control the concurrent access. \n+\n+.Container-managed Concurrency Example\n+[source,java]\n+----\n+import io.quarkus.arc.Lock;\n+\n+@Lock <1>\n+@ApplicationScoped\n+class SharedService {\n+\n+  void addAmount(BigDecimal amout) {\n+    // ...changes some internal state of the bean\n+  }\n+  \n+  @Lock(value = Lock.Type.READ, time = 1, unit = TimeUnit.SECONDS) <2> <3>\n+  BigDecimal getAmount() {\n+    // ...it is safe to read the value concurrently\n+  }\n+}\n+----\n+<1> `@Lock` (which maps to `@Lock(Lock.Type.WRITE)`) declared on the class instructs the container to lock the bean instance for any invocation of any business method, i.e. the client has \"exclusive access\" and no concurrent invocations will be allowed.\n+<2> `@Lock(Lock.Type.READ)` overrides the value specified at class level. It means that any number of clients can invoke the method concurrently, unless the bean instance is locked by `@Lock(Lock.Type.WRITE)`. \n+<3> You can also specify the \"wait time\". If it's not possible to acquire the lock in the given time a `LockException` is thrown.\n+\n+TIP: `io.quarkus.arc.Lock` is a regular interceptor binding and as such can be used for any bean with any scope. However, it is especially useful for \"shared\" scopes, e.g. `@Singleton` and `@ApplicationScoped`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ac43377eab8d69308bdbc2c7839946677feea2f"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29db695d30256cb5bc23245a20c0fa7eae8c7a07", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/29db695d30256cb5bc23245a20c0fa7eae8c7a07", "committedDate": "2020-07-24T06:34:53Z", "message": "Implement container-managed concurrency for beans\n\n- resolves #10923"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ac43377eab8d69308bdbc2c7839946677feea2f", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/3ac43377eab8d69308bdbc2c7839946677feea2f", "committedDate": "2020-07-23T19:19:30Z", "message": "Implement container-managed concurrency for beans\n\n- resolves #10923"}, "afterCommit": {"oid": "29db695d30256cb5bc23245a20c0fa7eae8c7a07", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/29db695d30256cb5bc23245a20c0fa7eae8c7a07", "committedDate": "2020-07-24T06:34:53Z", "message": "Implement container-managed concurrency for beans\n\n- resolves #10923"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NDA0MzA3", "url": "https://github.com/quarkusio/quarkus/pull/10936#pullrequestreview-455404307", "createdAt": "2020-07-26T23:24:13Z", "commit": {"oid": "29db695d30256cb5bc23245a20c0fa7eae8c7a07"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1114, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}