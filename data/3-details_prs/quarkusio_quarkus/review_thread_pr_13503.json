{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MjgzMzc2", "number": 13503, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjoxNzoxMlrOE93u-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjoxNzoxMlrOE93u-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzExNzM3OnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "isResolved": true, "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjoxNzoxMlrOH6yLBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzowODozMFrOH69zvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMTQ3OA==", "bodyText": "Are we sure about using a method reference here?", "url": "https://github.com/quarkusio/quarkus/pull/13503#discussion_r531401478", "createdAt": "2020-11-27T06:17:12Z", "author": {"login": "geoand"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -73,33 +71,35 @@\n             if (loaded != null) {\n                 return loaded;\n             }\n-            ClassLoadingResource[] resources;\n+            final ClassLoadingResource[] resources;\n             if (packageName == null) {\n                 resources = resourceDirectoryMap.get(\"\");\n             } else {\n-                String dirName = packageName.replace(\".\", \"/\");\n+                String dirName = packageName.replace('.', '/');\n                 resources = resourceDirectoryMap.get(dirName);\n             }\n             if (resources != null) {\n-                String classResource = name.replace(\".\", \"/\") + \".class\";\n+                String classResource = name.replace('.', '/') + \".class\";\n                 for (ClassLoadingResource resource : resources) {\n                     byte[] data = resource.getResourceData(classResource);\n                     if (data == null) {\n                         continue;\n                     }\n                     definePackage(packageName, resources);\n                     return defineClass(name, data, 0, data.length,\n-                            protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n-                                @Override\n-                                public ProtectionDomain apply(ClassLoadingResource ce) {\n-                                    return ce.getProtectionDomain(RunnerClassLoader.this);\n-                                }\n-                            }));\n+                            getProtectionDomain(resource));\n                 }\n             }\n         }\n         return getParent().loadClass(name);\n+    }\n+\n+    private ProtectionDomain getProtectionDomain(ClassLoadingResource resource) {\n+        return protectionDomains.computeIfAbsent(resource, this::extractProtectionDomainFromClassLoadingResource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6942e4afd58c6f542c1621fa067706938b8f25f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4OTc5Nw==", "bodyText": "why not? It's typically preferreable over a lambda - although in this case (since my other changes made it stateless) it should be comparable.\nI generally highly prefer method references, as there is no possible mistake about the lambda possibly becoming a stateful lambda, which requires extra memory, a proxy, and extra overhead to track the proxy. A method handle will never unintentionally capture state, so it helps to fight such hidden costs.", "url": "https://github.com/quarkusio/quarkus/pull/13503#discussion_r531489797", "createdAt": "2020-11-27T09:46:16Z", "author": {"login": "Sanne"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -73,33 +71,35 @@\n             if (loaded != null) {\n                 return loaded;\n             }\n-            ClassLoadingResource[] resources;\n+            final ClassLoadingResource[] resources;\n             if (packageName == null) {\n                 resources = resourceDirectoryMap.get(\"\");\n             } else {\n-                String dirName = packageName.replace(\".\", \"/\");\n+                String dirName = packageName.replace('.', '/');\n                 resources = resourceDirectoryMap.get(dirName);\n             }\n             if (resources != null) {\n-                String classResource = name.replace(\".\", \"/\") + \".class\";\n+                String classResource = name.replace('.', '/') + \".class\";\n                 for (ClassLoadingResource resource : resources) {\n                     byte[] data = resource.getResourceData(classResource);\n                     if (data == null) {\n                         continue;\n                     }\n                     definePackage(packageName, resources);\n                     return defineClass(name, data, 0, data.length,\n-                            protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n-                                @Override\n-                                public ProtectionDomain apply(ClassLoadingResource ce) {\n-                                    return ce.getProtectionDomain(RunnerClassLoader.this);\n-                                }\n-                            }));\n+                            getProtectionDomain(resource));\n                 }\n             }\n         }\n         return getParent().loadClass(name);\n+    }\n+\n+    private ProtectionDomain getProtectionDomain(ClassLoadingResource resource) {\n+        return protectionDomains.computeIfAbsent(resource, this::extractProtectionDomainFromClassLoadingResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMTQ3OA=="}, "originalCommit": {"oid": "e6942e4afd58c6f542c1621fa067706938b8f25f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwMTA2Mw==", "bodyText": "It doesn't capture state, but it's still implemented via invokedynamic, isn't it?", "url": "https://github.com/quarkusio/quarkus/pull/13503#discussion_r531501063", "createdAt": "2020-11-27T10:05:59Z", "author": {"login": "geoand"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -73,33 +71,35 @@\n             if (loaded != null) {\n                 return loaded;\n             }\n-            ClassLoadingResource[] resources;\n+            final ClassLoadingResource[] resources;\n             if (packageName == null) {\n                 resources = resourceDirectoryMap.get(\"\");\n             } else {\n-                String dirName = packageName.replace(\".\", \"/\");\n+                String dirName = packageName.replace('.', '/');\n                 resources = resourceDirectoryMap.get(dirName);\n             }\n             if (resources != null) {\n-                String classResource = name.replace(\".\", \"/\") + \".class\";\n+                String classResource = name.replace('.', '/') + \".class\";\n                 for (ClassLoadingResource resource : resources) {\n                     byte[] data = resource.getResourceData(classResource);\n                     if (data == null) {\n                         continue;\n                     }\n                     definePackage(packageName, resources);\n                     return defineClass(name, data, 0, data.length,\n-                            protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n-                                @Override\n-                                public ProtectionDomain apply(ClassLoadingResource ce) {\n-                                    return ce.getProtectionDomain(RunnerClassLoader.this);\n-                                }\n-                            }));\n+                            getProtectionDomain(resource));\n                 }\n             }\n         }\n         return getParent().loadClass(name);\n+    }\n+\n+    private ProtectionDomain getProtectionDomain(ClassLoadingResource resource) {\n+        return protectionDomains.computeIfAbsent(resource, this::extractProtectionDomainFromClassLoadingResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMTQ3OA=="}, "originalCommit": {"oid": "e6942e4afd58c6f542c1621fa067706938b8f25f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwNTE1NA==", "bodyText": "I know it should not make any real world difference and the cost will probably be dominated by the slowness of computeIfAbsent, just trying to cover all bases because we are talking about a core component :)", "url": "https://github.com/quarkusio/quarkus/pull/13503#discussion_r531505154", "createdAt": "2020-11-27T10:13:25Z", "author": {"login": "geoand"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -73,33 +71,35 @@\n             if (loaded != null) {\n                 return loaded;\n             }\n-            ClassLoadingResource[] resources;\n+            final ClassLoadingResource[] resources;\n             if (packageName == null) {\n                 resources = resourceDirectoryMap.get(\"\");\n             } else {\n-                String dirName = packageName.replace(\".\", \"/\");\n+                String dirName = packageName.replace('.', '/');\n                 resources = resourceDirectoryMap.get(dirName);\n             }\n             if (resources != null) {\n-                String classResource = name.replace(\".\", \"/\") + \".class\";\n+                String classResource = name.replace('.', '/') + \".class\";\n                 for (ClassLoadingResource resource : resources) {\n                     byte[] data = resource.getResourceData(classResource);\n                     if (data == null) {\n                         continue;\n                     }\n                     definePackage(packageName, resources);\n                     return defineClass(name, data, 0, data.length,\n-                            protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n-                                @Override\n-                                public ProtectionDomain apply(ClassLoadingResource ce) {\n-                                    return ce.getProtectionDomain(RunnerClassLoader.this);\n-                                }\n-                            }));\n+                            getProtectionDomain(resource));\n                 }\n             }\n         }\n         return getParent().loadClass(name);\n+    }\n+\n+    private ProtectionDomain getProtectionDomain(ClassLoadingResource resource) {\n+        return protectionDomains.computeIfAbsent(resource, this::extractProtectionDomainFromClassLoadingResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMTQ3OA=="}, "originalCommit": {"oid": "e6942e4afd58c6f542c1621fa067706938b8f25f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwODM4Ng==", "bodyText": "yes but invokedynamic isn't a performance problem? Capturing state lambdas and anonymous Function classes are far worse", "url": "https://github.com/quarkusio/quarkus/pull/13503#discussion_r531508386", "createdAt": "2020-11-27T10:19:15Z", "author": {"login": "Sanne"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -73,33 +71,35 @@\n             if (loaded != null) {\n                 return loaded;\n             }\n-            ClassLoadingResource[] resources;\n+            final ClassLoadingResource[] resources;\n             if (packageName == null) {\n                 resources = resourceDirectoryMap.get(\"\");\n             } else {\n-                String dirName = packageName.replace(\".\", \"/\");\n+                String dirName = packageName.replace('.', '/');\n                 resources = resourceDirectoryMap.get(dirName);\n             }\n             if (resources != null) {\n-                String classResource = name.replace(\".\", \"/\") + \".class\";\n+                String classResource = name.replace('.', '/') + \".class\";\n                 for (ClassLoadingResource resource : resources) {\n                     byte[] data = resource.getResourceData(classResource);\n                     if (data == null) {\n                         continue;\n                     }\n                     definePackage(packageName, resources);\n                     return defineClass(name, data, 0, data.length,\n-                            protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n-                                @Override\n-                                public ProtectionDomain apply(ClassLoadingResource ce) {\n-                                    return ce.getProtectionDomain(RunnerClassLoader.this);\n-                                }\n-                            }));\n+                            getProtectionDomain(resource));\n                 }\n             }\n         }\n         return getParent().loadClass(name);\n+    }\n+\n+    private ProtectionDomain getProtectionDomain(ClassLoadingResource resource) {\n+        return protectionDomains.computeIfAbsent(resource, this::extractProtectionDomainFromClassLoadingResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMTQ3OA=="}, "originalCommit": {"oid": "e6942e4afd58c6f542c1621fa067706938b8f25f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwOTQzNg==", "bodyText": "BTW I thought this was straight forward, but if there's concerns I don't mind removing this specific commit. It's not that important :)\nI do care more about some of the other commits in this PR though, so I'd prefer removing this change if it expedites the others.", "url": "https://github.com/quarkusio/quarkus/pull/13503#discussion_r531509436", "createdAt": "2020-11-27T10:21:09Z", "author": {"login": "Sanne"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -73,33 +71,35 @@\n             if (loaded != null) {\n                 return loaded;\n             }\n-            ClassLoadingResource[] resources;\n+            final ClassLoadingResource[] resources;\n             if (packageName == null) {\n                 resources = resourceDirectoryMap.get(\"\");\n             } else {\n-                String dirName = packageName.replace(\".\", \"/\");\n+                String dirName = packageName.replace('.', '/');\n                 resources = resourceDirectoryMap.get(dirName);\n             }\n             if (resources != null) {\n-                String classResource = name.replace(\".\", \"/\") + \".class\";\n+                String classResource = name.replace('.', '/') + \".class\";\n                 for (ClassLoadingResource resource : resources) {\n                     byte[] data = resource.getResourceData(classResource);\n                     if (data == null) {\n                         continue;\n                     }\n                     definePackage(packageName, resources);\n                     return defineClass(name, data, 0, data.length,\n-                            protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n-                                @Override\n-                                public ProtectionDomain apply(ClassLoadingResource ce) {\n-                                    return ce.getProtectionDomain(RunnerClassLoader.this);\n-                                }\n-                            }));\n+                            getProtectionDomain(resource));\n                 }\n             }\n         }\n         return getParent().loadClass(name);\n+    }\n+\n+    private ProtectionDomain getProtectionDomain(ClassLoadingResource resource) {\n+        return protectionDomains.computeIfAbsent(resource, this::extractProtectionDomainFromClassLoadingResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMTQ3OA=="}, "originalCommit": {"oid": "e6942e4afd58c6f542c1621fa067706938b8f25f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMDQzNw==", "bodyText": "Right, if it were me, I'd remove it, but I'm not hell bent on it", "url": "https://github.com/quarkusio/quarkus/pull/13503#discussion_r531510437", "createdAt": "2020-11-27T10:22:58Z", "author": {"login": "geoand"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -73,33 +71,35 @@\n             if (loaded != null) {\n                 return loaded;\n             }\n-            ClassLoadingResource[] resources;\n+            final ClassLoadingResource[] resources;\n             if (packageName == null) {\n                 resources = resourceDirectoryMap.get(\"\");\n             } else {\n-                String dirName = packageName.replace(\".\", \"/\");\n+                String dirName = packageName.replace('.', '/');\n                 resources = resourceDirectoryMap.get(dirName);\n             }\n             if (resources != null) {\n-                String classResource = name.replace(\".\", \"/\") + \".class\";\n+                String classResource = name.replace('.', '/') + \".class\";\n                 for (ClassLoadingResource resource : resources) {\n                     byte[] data = resource.getResourceData(classResource);\n                     if (data == null) {\n                         continue;\n                     }\n                     definePackage(packageName, resources);\n                     return defineClass(name, data, 0, data.length,\n-                            protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n-                                @Override\n-                                public ProtectionDomain apply(ClassLoadingResource ce) {\n-                                    return ce.getProtectionDomain(RunnerClassLoader.this);\n-                                }\n-                            }));\n+                            getProtectionDomain(resource));\n                 }\n             }\n         }\n         return getParent().loadClass(name);\n+    }\n+\n+    private ProtectionDomain getProtectionDomain(ClassLoadingResource resource) {\n+        return protectionDomains.computeIfAbsent(resource, this::extractProtectionDomainFromClassLoadingResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMTQ3OA=="}, "originalCommit": {"oid": "e6942e4afd58c6f542c1621fa067706938b8f25f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxOTgxMA==", "bodyText": "removed", "url": "https://github.com/quarkusio/quarkus/pull/13503#discussion_r531519810", "createdAt": "2020-11-27T10:37:15Z", "author": {"login": "Sanne"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -73,33 +71,35 @@\n             if (loaded != null) {\n                 return loaded;\n             }\n-            ClassLoadingResource[] resources;\n+            final ClassLoadingResource[] resources;\n             if (packageName == null) {\n                 resources = resourceDirectoryMap.get(\"\");\n             } else {\n-                String dirName = packageName.replace(\".\", \"/\");\n+                String dirName = packageName.replace('.', '/');\n                 resources = resourceDirectoryMap.get(dirName);\n             }\n             if (resources != null) {\n-                String classResource = name.replace(\".\", \"/\") + \".class\";\n+                String classResource = name.replace('.', '/') + \".class\";\n                 for (ClassLoadingResource resource : resources) {\n                     byte[] data = resource.getResourceData(classResource);\n                     if (data == null) {\n                         continue;\n                     }\n                     definePackage(packageName, resources);\n                     return defineClass(name, data, 0, data.length,\n-                            protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n-                                @Override\n-                                public ProtectionDomain apply(ClassLoadingResource ce) {\n-                                    return ce.getProtectionDomain(RunnerClassLoader.this);\n-                                }\n-                            }));\n+                            getProtectionDomain(resource));\n                 }\n             }\n         }\n         return getParent().loadClass(name);\n+    }\n+\n+    private ProtectionDomain getProtectionDomain(ClassLoadingResource resource) {\n+        return protectionDomains.computeIfAbsent(resource, this::extractProtectionDomainFromClassLoadingResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMTQ3OA=="}, "originalCommit": {"oid": "e6942e4afd58c6f542c1621fa067706938b8f25f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzNzY3MA==", "bodyText": "Is there a reason why you don't apply your trick of trying to get the value first before calling computeIfAbsent? Or is it a case where you have a good change for it to not be in the map?\nYou told me about it a long time ago and it had quite a few benefits in HV.", "url": "https://github.com/quarkusio/quarkus/pull/13503#discussion_r531537670", "createdAt": "2020-11-27T11:12:04Z", "author": {"login": "gsmet"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -73,33 +71,35 @@\n             if (loaded != null) {\n                 return loaded;\n             }\n-            ClassLoadingResource[] resources;\n+            final ClassLoadingResource[] resources;\n             if (packageName == null) {\n                 resources = resourceDirectoryMap.get(\"\");\n             } else {\n-                String dirName = packageName.replace(\".\", \"/\");\n+                String dirName = packageName.replace('.', '/');\n                 resources = resourceDirectoryMap.get(dirName);\n             }\n             if (resources != null) {\n-                String classResource = name.replace(\".\", \"/\") + \".class\";\n+                String classResource = name.replace('.', '/') + \".class\";\n                 for (ClassLoadingResource resource : resources) {\n                     byte[] data = resource.getResourceData(classResource);\n                     if (data == null) {\n                         continue;\n                     }\n                     definePackage(packageName, resources);\n                     return defineClass(name, data, 0, data.length,\n-                            protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n-                                @Override\n-                                public ProtectionDomain apply(ClassLoadingResource ce) {\n-                                    return ce.getProtectionDomain(RunnerClassLoader.this);\n-                                }\n-                            }));\n+                            getProtectionDomain(resource));\n                 }\n             }\n         }\n         return getParent().loadClass(name);\n+    }\n+\n+    private ProtectionDomain getProtectionDomain(ClassLoadingResource resource) {\n+        return protectionDomains.computeIfAbsent(resource, this::extractProtectionDomainFromClassLoadingResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMTQ3OA=="}, "originalCommit": {"oid": "e6942e4afd58c6f542c1621fa067706938b8f25f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NjExNw==", "bodyText": "yea good idea, we could have done that as well I guess. I didn't jump to it as this whole block doesn't seem highly concurrent - call me conservative, but @geoand still got scared :)", "url": "https://github.com/quarkusio/quarkus/pull/13503#discussion_r531566117", "createdAt": "2020-11-27T12:11:10Z", "author": {"login": "Sanne"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -73,33 +71,35 @@\n             if (loaded != null) {\n                 return loaded;\n             }\n-            ClassLoadingResource[] resources;\n+            final ClassLoadingResource[] resources;\n             if (packageName == null) {\n                 resources = resourceDirectoryMap.get(\"\");\n             } else {\n-                String dirName = packageName.replace(\".\", \"/\");\n+                String dirName = packageName.replace('.', '/');\n                 resources = resourceDirectoryMap.get(dirName);\n             }\n             if (resources != null) {\n-                String classResource = name.replace(\".\", \"/\") + \".class\";\n+                String classResource = name.replace('.', '/') + \".class\";\n                 for (ClassLoadingResource resource : resources) {\n                     byte[] data = resource.getResourceData(classResource);\n                     if (data == null) {\n                         continue;\n                     }\n                     definePackage(packageName, resources);\n                     return defineClass(name, data, 0, data.length,\n-                            protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n-                                @Override\n-                                public ProtectionDomain apply(ClassLoadingResource ce) {\n-                                    return ce.getProtectionDomain(RunnerClassLoader.this);\n-                                }\n-                            }));\n+                            getProtectionDomain(resource));\n                 }\n             }\n         }\n         return getParent().loadClass(name);\n+    }\n+\n+    private ProtectionDomain getProtectionDomain(ClassLoadingResource resource) {\n+        return protectionDomains.computeIfAbsent(resource, this::extractProtectionDomainFromClassLoadingResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMTQ3OA=="}, "originalCommit": {"oid": "e6942e4afd58c6f542c1621fa067706938b8f25f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2Njk3OA==", "bodyText": "BTW I also wonder why do we care for protection domains... return a singleton and disable all this stuff \ud83d\udde1\ufe0f\nBut I don't know the consequences well enough.", "url": "https://github.com/quarkusio/quarkus/pull/13503#discussion_r531566978", "createdAt": "2020-11-27T12:13:06Z", "author": {"login": "Sanne"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -73,33 +71,35 @@\n             if (loaded != null) {\n                 return loaded;\n             }\n-            ClassLoadingResource[] resources;\n+            final ClassLoadingResource[] resources;\n             if (packageName == null) {\n                 resources = resourceDirectoryMap.get(\"\");\n             } else {\n-                String dirName = packageName.replace(\".\", \"/\");\n+                String dirName = packageName.replace('.', '/');\n                 resources = resourceDirectoryMap.get(dirName);\n             }\n             if (resources != null) {\n-                String classResource = name.replace(\".\", \"/\") + \".class\";\n+                String classResource = name.replace('.', '/') + \".class\";\n                 for (ClassLoadingResource resource : resources) {\n                     byte[] data = resource.getResourceData(classResource);\n                     if (data == null) {\n                         continue;\n                     }\n                     definePackage(packageName, resources);\n                     return defineClass(name, data, 0, data.length,\n-                            protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n-                                @Override\n-                                public ProtectionDomain apply(ClassLoadingResource ce) {\n-                                    return ce.getProtectionDomain(RunnerClassLoader.this);\n-                                }\n-                            }));\n+                            getProtectionDomain(resource));\n                 }\n             }\n         }\n         return getParent().loadClass(name);\n+    }\n+\n+    private ProtectionDomain getProtectionDomain(ClassLoadingResource resource) {\n+        return protectionDomains.computeIfAbsent(resource, this::extractProtectionDomainFromClassLoadingResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMTQ3OA=="}, "originalCommit": {"oid": "e6942e4afd58c6f542c1621fa067706938b8f25f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3MzgyOQ==", "bodyText": "In this specific case, that should work as there is ever only one RunnerClassLoader, so the JarResource could indeed be passed the ClassLoader that it helps \"populate\" (perhaps by adding an init method to ClassLoadingResource) and then this block would just class getProtectionDomain which would just return the singleton.", "url": "https://github.com/quarkusio/quarkus/pull/13503#discussion_r531573829", "createdAt": "2020-11-27T12:27:40Z", "author": {"login": "geoand"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -73,33 +71,35 @@\n             if (loaded != null) {\n                 return loaded;\n             }\n-            ClassLoadingResource[] resources;\n+            final ClassLoadingResource[] resources;\n             if (packageName == null) {\n                 resources = resourceDirectoryMap.get(\"\");\n             } else {\n-                String dirName = packageName.replace(\".\", \"/\");\n+                String dirName = packageName.replace('.', '/');\n                 resources = resourceDirectoryMap.get(dirName);\n             }\n             if (resources != null) {\n-                String classResource = name.replace(\".\", \"/\") + \".class\";\n+                String classResource = name.replace('.', '/') + \".class\";\n                 for (ClassLoadingResource resource : resources) {\n                     byte[] data = resource.getResourceData(classResource);\n                     if (data == null) {\n                         continue;\n                     }\n                     definePackage(packageName, resources);\n                     return defineClass(name, data, 0, data.length,\n-                            protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n-                                @Override\n-                                public ProtectionDomain apply(ClassLoadingResource ce) {\n-                                    return ce.getProtectionDomain(RunnerClassLoader.this);\n-                                }\n-                            }));\n+                            getProtectionDomain(resource));\n                 }\n             }\n         }\n         return getParent().loadClass(name);\n+    }\n+\n+    private ProtectionDomain getProtectionDomain(ClassLoadingResource resource) {\n+        return protectionDomains.computeIfAbsent(resource, this::extractProtectionDomainFromClassLoadingResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMTQ3OA=="}, "originalCommit": {"oid": "e6942e4afd58c6f542c1621fa067706938b8f25f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3ODUxNA==", "bodyText": "I can make that change when this lands", "url": "https://github.com/quarkusio/quarkus/pull/13503#discussion_r531578514", "createdAt": "2020-11-27T12:38:09Z", "author": {"login": "geoand"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -73,33 +71,35 @@\n             if (loaded != null) {\n                 return loaded;\n             }\n-            ClassLoadingResource[] resources;\n+            final ClassLoadingResource[] resources;\n             if (packageName == null) {\n                 resources = resourceDirectoryMap.get(\"\");\n             } else {\n-                String dirName = packageName.replace(\".\", \"/\");\n+                String dirName = packageName.replace('.', '/');\n                 resources = resourceDirectoryMap.get(dirName);\n             }\n             if (resources != null) {\n-                String classResource = name.replace(\".\", \"/\") + \".class\";\n+                String classResource = name.replace('.', '/') + \".class\";\n                 for (ClassLoadingResource resource : resources) {\n                     byte[] data = resource.getResourceData(classResource);\n                     if (data == null) {\n                         continue;\n                     }\n                     definePackage(packageName, resources);\n                     return defineClass(name, data, 0, data.length,\n-                            protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n-                                @Override\n-                                public ProtectionDomain apply(ClassLoadingResource ce) {\n-                                    return ce.getProtectionDomain(RunnerClassLoader.this);\n-                                }\n-                            }));\n+                            getProtectionDomain(resource));\n                 }\n             }\n         }\n         return getParent().loadClass(name);\n+    }\n+\n+    private ProtectionDomain getProtectionDomain(ClassLoadingResource resource) {\n+        return protectionDomains.computeIfAbsent(resource, this::extractProtectionDomainFromClassLoadingResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMTQ3OA=="}, "originalCommit": {"oid": "e6942e4afd58c6f542c1621fa067706938b8f25f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5MjEyNA==", "bodyText": "Here it is: #13515", "url": "https://github.com/quarkusio/quarkus/pull/13503#discussion_r531592124", "createdAt": "2020-11-27T13:08:30Z", "author": {"login": "geoand"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -73,33 +71,35 @@\n             if (loaded != null) {\n                 return loaded;\n             }\n-            ClassLoadingResource[] resources;\n+            final ClassLoadingResource[] resources;\n             if (packageName == null) {\n                 resources = resourceDirectoryMap.get(\"\");\n             } else {\n-                String dirName = packageName.replace(\".\", \"/\");\n+                String dirName = packageName.replace('.', '/');\n                 resources = resourceDirectoryMap.get(dirName);\n             }\n             if (resources != null) {\n-                String classResource = name.replace(\".\", \"/\") + \".class\";\n+                String classResource = name.replace('.', '/') + \".class\";\n                 for (ClassLoadingResource resource : resources) {\n                     byte[] data = resource.getResourceData(classResource);\n                     if (data == null) {\n                         continue;\n                     }\n                     definePackage(packageName, resources);\n                     return defineClass(name, data, 0, data.length,\n-                            protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n-                                @Override\n-                                public ProtectionDomain apply(ClassLoadingResource ce) {\n-                                    return ce.getProtectionDomain(RunnerClassLoader.this);\n-                                }\n-                            }));\n+                            getProtectionDomain(resource));\n                 }\n             }\n         }\n         return getParent().loadClass(name);\n+    }\n+\n+    private ProtectionDomain getProtectionDomain(ClassLoadingResource resource) {\n+        return protectionDomains.computeIfAbsent(resource, this::extractProtectionDomainFromClassLoadingResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMTQ3OA=="}, "originalCommit": {"oid": "e6942e4afd58c6f542c1621fa067706938b8f25f"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3853, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}