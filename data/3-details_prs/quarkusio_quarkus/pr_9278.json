{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NTY5Mjgy", "number": 9278, "title": "Introduce support for Spring's @Scheduled", "bodyText": "", "createdAt": "2020-05-13T19:35:26Z", "url": "https://github.com/quarkusio/quarkus/pull/9278", "merged": true, "mergeCommit": {"oid": "7b66698c796693a45d7c7fe96b530bab007248fd"}, "closed": true, "closedAt": "2020-06-17T13:22:01Z", "author": {"login": "aureamunoz"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcg-9r4gFqTQxMTI3NDQzOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsJwSHAFqTQzMjM5MjY0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjc0NDM5", "url": "https://github.com/quarkusio/quarkus/pull/9278#pullrequestreview-411274439", "createdAt": "2020-05-13T20:28:01Z", "commit": {"oid": "f685c6e4ae50c7d5e02144c8230a26778d7bd9e5"}, "state": "DISMISSED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDoyODowMVrOGVCVYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDozMjowMFrOGVCdjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMTUyMA==", "bodyText": "The deployment artifact should also be added to the deployment bom.", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r424711520", "createdAt": "2020-05-13T20:28:01Z", "author": {"login": "gsmet"}, "path": "bom/runtime/pom.xml", "diffHunk": "@@ -734,6 +734,11 @@\n                 <artifactId>quarkus-spring-security</artifactId>\n                 <version>${project.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-spring-scheduling</artifactId>\n+                <version>${project.version}</version>\n+            </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f685c6e4ae50c7d5e02144c8230a26778d7bd9e5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMTc3NA==", "bodyText": "You don't need that one, it will come with the deployment dependency.", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r424711774", "createdAt": "2020-05-13T20:28:30Z", "author": {"login": "gsmet"}, "path": "extensions/spring-scheduling/deployment/pom.xml", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-spring-scheduling-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-spring-scheduling-deployment</artifactId>\n+    <name>Quarkus - Spring - Scheduling - Deployment</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-spring-scheduling</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-core-deployment</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-arc-deployment</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-scheduler</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f685c6e4ae50c7d5e02144c8230a26778d7bd9e5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMjI2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A simple processor that maps annotations Spring DI annotation to CDI annotation\n          \n          \n            \n             * A simple processor that maps Spring DI annotations to Quarkus annotations", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r424712264", "createdAt": "2020-05-13T20:29:29Z", "author": {"login": "gsmet"}, "path": "extensions/spring-scheduling/deployment/src/main/java/io/quarkus/spring/scheduling/deployment/SpringSchedulingProcessor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.quarkus.spring.scheduling.deployment;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+\n+/*\n+ * A simple processor that maps annotations Spring DI annotation to CDI annotation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f685c6e4ae50c7d5e02144c8230a26778d7bd9e5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMjg1Mg==", "bodyText": "I suppose you plan to not hardcode it?", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r424712852", "createdAt": "2020-05-13T20:30:32Z", "author": {"login": "gsmet"}, "path": "extensions/spring-scheduling/deployment/src/main/java/io/quarkus/spring/scheduling/deployment/SpringSchedulingProcessor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.quarkus.spring.scheduling.deployment;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+\n+/*\n+ * A simple processor that maps annotations Spring DI annotation to CDI annotation\n+ * Arc's handling of annotation mapping (by creating an extra abstraction layer on top of the Jandex index)\n+ * suits this sort of handling perfectly\n+ */\n+public class SpringSchedulingProcessor {\n+\n+    static final DotName SPRING_SCHEDULED = DotName.createSimple(\"org.springframework.scheduling.annotation.Scheduled\");\n+\n+    private static final DotName QUARKUS_SCHEDULED = DotName.createSimple(io.quarkus.scheduler.Scheduled.class.getName());\n+    private static final Logger LOGGER = Logger.getLogger(SpringSchedulingProcessor.class);\n+\n+    @BuildStep\n+    FeatureBuildItem registerFeature() {\n+        return new FeatureBuildItem(FeatureBuildItem.SPRING_SCHEDULING);\n+    }\n+\n+    @BuildStep\n+    AnnotationsTransformerBuildItem buildScheduledAnnotationTransformer() {\n+        return new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n+            @Override\n+            public boolean appliesTo(AnnotationTarget.Kind kind) {\n+                return kind == AnnotationTarget.Kind.METHOD;\n+            }\n+\n+            @Override\n+            public void transform(TransformationContext context) {\n+                MethodInfo methodInfo = context.getTarget().asMethod();\n+                List<AnnotationInstance> collect = methodInfo.annotations().stream()\n+                        .filter(annotationInstance -> annotationInstance.name().equals(SPRING_SCHEDULED))\n+                        .collect(Collectors.toList());\n+                if (!collect.isEmpty()) {\n+                    context.transform()\n+                            .add(QUARKUS_SCHEDULED, AnnotationValue.createStringValue(\"cron\", \"0/1 * * * * ?\")).done();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f685c6e4ae50c7d5e02144c8230a26778d7bd9e5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMzE0Ng==", "bodyText": "Is this annotation repeatable? If so, there's a good chance the repeatable container will need some special handling (and a test).", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r424713146", "createdAt": "2020-05-13T20:31:07Z", "author": {"login": "gsmet"}, "path": "extensions/spring-scheduling/deployment/src/main/java/io/quarkus/spring/scheduling/deployment/SpringSchedulingProcessor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.quarkus.spring.scheduling.deployment;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+\n+/*\n+ * A simple processor that maps annotations Spring DI annotation to CDI annotation\n+ * Arc's handling of annotation mapping (by creating an extra abstraction layer on top of the Jandex index)\n+ * suits this sort of handling perfectly\n+ */\n+public class SpringSchedulingProcessor {\n+\n+    static final DotName SPRING_SCHEDULED = DotName.createSimple(\"org.springframework.scheduling.annotation.Scheduled\");\n+\n+    private static final DotName QUARKUS_SCHEDULED = DotName.createSimple(io.quarkus.scheduler.Scheduled.class.getName());\n+    private static final Logger LOGGER = Logger.getLogger(SpringSchedulingProcessor.class);\n+\n+    @BuildStep\n+    FeatureBuildItem registerFeature() {\n+        return new FeatureBuildItem(FeatureBuildItem.SPRING_SCHEDULING);\n+    }\n+\n+    @BuildStep\n+    AnnotationsTransformerBuildItem buildScheduledAnnotationTransformer() {\n+        return new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n+            @Override\n+            public boolean appliesTo(AnnotationTarget.Kind kind) {\n+                return kind == AnnotationTarget.Kind.METHOD;\n+            }\n+\n+            @Override\n+            public void transform(TransformationContext context) {\n+                MethodInfo methodInfo = context.getTarget().asMethod();\n+                List<AnnotationInstance> collect = methodInfo.annotations().stream()\n+                        .filter(annotationInstance -> annotationInstance.name().equals(SPRING_SCHEDULED))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f685c6e4ae50c7d5e02144c8230a26778d7bd9e5"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMzYxMw==", "bodyText": "This will need some cleanup.", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r424713613", "createdAt": "2020-05-13T20:32:00Z", "author": {"login": "gsmet"}, "path": "integration-tests/spring-scheduling/pom.xml", "diffHunk": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>quarkus-integration-tests-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../</relativePath>\n+    </parent>\n+\n+    <artifactId>quarkus-integration-test-spring-scheduling</artifactId>\n+    <name>Quarkus - Integration Tests - Spring Scheduling</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-resteasy</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-scheduler</artifactId>\n+        </dependency>\n+<!--        <dependency>-->\n+<!--            <groupId>io.quarkus</groupId>-->\n+<!--            <artifactId>quarkus-spring-scheduling</artifactId>-->\n+<!--        </dependency>-->\n+<!--        <dependency>-->\n+<!--            <groupId>io.quarkus</groupId>-->\n+<!--            <artifactId>quarkus-undertow</artifactId>-->\n+<!--        </dependency>-->\n+<!--        <dependency>-->\n+<!--            <groupId>io.quarkus</groupId>-->\n+<!--            <artifactId>quarkus-arc</artifactId>-->\n+<!--        </dependency>-->\n+<!--        <dependency>-->\n+<!--            <groupId>io.quarkus</groupId>-->\n+<!--            <artifactId>quarkus-spring-di</artifactId>-->\n+<!--        </dependency>-->\n+\n+<!--        &lt;!&ndash; only needed because of @RequestScope is utilized in the tests &ndash;&gt;-->\n+<!--        <dependency>-->\n+<!--            <groupId>io.quarkus</groupId>-->\n+<!--            <artifactId>quarkus-spring-web-api</artifactId>-->\n+<!--        </dependency>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f685c6e4ae50c7d5e02144c8230a26778d7bd9e5"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNjM2MzI4", "url": "https://github.com/quarkusio/quarkus/pull/9278#pullrequestreview-411636328", "createdAt": "2020-05-14T09:41:43Z", "commit": {"oid": "f685c6e4ae50c7d5e02144c8230a26778d7bd9e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0MTo0M1rOGVUVUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0MTo0M1rOGVUVUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNjQxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@code @Scheduled}\n          \n          \n            \n             * {@code @org.springframework.scheduling.annotation.Scheduled}", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r425006418", "createdAt": "2020-05-14T09:41:43Z", "author": {"login": "geoand"}, "path": "extensions/spring-scheduling/deployment/src/main/java/io/quarkus/spring/scheduling/deployment/SpringScheduledAnnotatedMethodBuildItem.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.quarkus.spring.scheduling.deployment;\n+\n+import java.util.Map;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Build Item recording all the methods that have been effectively annotated with\n+ * {@code @Scheduled}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f685c6e4ae50c7d5e02144c8230a26778d7bd9e5"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNjM5MTM1", "url": "https://github.com/quarkusio/quarkus/pull/9278#pullrequestreview-411639135", "createdAt": "2020-05-14T09:45:17Z", "commit": {"oid": "f685c6e4ae50c7d5e02144c8230a26778d7bd9e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0NToxN1rOGVUeJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0NToxN1rOGVUeJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwODY3OQ==", "bodyText": "This is a little weird TBH - Does regular Spring make a class a bean by simply annotating with @Scheduled or does it already have to be a bean (by having @Component for example)?", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r425008679", "createdAt": "2020-05-14T09:45:17Z", "author": {"login": "geoand"}, "path": "extensions/spring-scheduling/deployment/src/main/java/io/quarkus/spring/scheduling/deployment/SpringSchedulingProcessor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.quarkus.spring.scheduling.deployment;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+\n+/*\n+ * A simple processor that maps annotations Spring DI annotation to CDI annotation\n+ * Arc's handling of annotation mapping (by creating an extra abstraction layer on top of the Jandex index)\n+ * suits this sort of handling perfectly\n+ */\n+public class SpringSchedulingProcessor {\n+\n+    static final DotName SPRING_SCHEDULED = DotName.createSimple(\"org.springframework.scheduling.annotation.Scheduled\");\n+\n+    private static final DotName QUARKUS_SCHEDULED = DotName.createSimple(io.quarkus.scheduler.Scheduled.class.getName());\n+    private static final Logger LOGGER = Logger.getLogger(SpringSchedulingProcessor.class);\n+\n+    @BuildStep\n+    FeatureBuildItem registerFeature() {\n+        return new FeatureBuildItem(FeatureBuildItem.SPRING_SCHEDULING);\n+    }\n+\n+    @BuildStep\n+    AnnotationsTransformerBuildItem buildScheduledAnnotationTransformer() {\n+        return new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n+            @Override\n+            public boolean appliesTo(AnnotationTarget.Kind kind) {\n+                return kind == AnnotationTarget.Kind.METHOD;\n+            }\n+\n+            @Override\n+            public void transform(TransformationContext context) {\n+                MethodInfo methodInfo = context.getTarget().asMethod();\n+                List<AnnotationInstance> collect = methodInfo.annotations().stream()\n+                        .filter(annotationInstance -> annotationInstance.name().equals(SPRING_SCHEDULED))\n+                        .collect(Collectors.toList());\n+                if (!collect.isEmpty()) {\n+                    context.transform()\n+                            .add(QUARKUS_SCHEDULED, AnnotationValue.createStringValue(\"cron\", \"0/1 * * * * ?\")).done();\n+                }\n+            }\n+        });\n+    }\n+\n+    @BuildStep\n+    public void collectSpringScheduledMethods(CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<SpringScheduledAnnotatedMethodBuildItem> scheduledBusinessMethods) {\n+\n+        Map<MethodInfo, AnnotationInstance> result = new HashMap<>();\n+\n+        // first first go through the list of annotated methods\n+        for (AnnotationInstance instance : combinedIndex.getIndex().getAnnotations(SPRING_SCHEDULED)) {\n+            if (instance.target().kind() != AnnotationTarget.Kind.METHOD) {\n+                throw new IllegalArgumentException(\"Unsupported annotation target kind \" + instance.target().kind().name());\n+            }\n+            MethodInfo methodInfo = instance.target().asMethod();\n+            result.put(methodInfo, instance);\n+            LOGGER.debugf(\"Found Spring scheduled business method %s declared on %s\", methodInfo.name(),\n+                    methodInfo.declaringClass().name());\n+        }\n+        scheduledBusinessMethods.produce(new SpringScheduledAnnotatedMethodBuildItem(result));\n+    }\n+\n+    @BuildStep\n+    void registerBeans(SpringScheduledAnnotatedMethodBuildItem methodBuildItem,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+        Map<MethodInfo, AnnotationInstance> methodToInstanceMap = methodBuildItem.getMethodToInstanceMap();\n+        Set<String> beanClasses = new HashSet<>();\n+        for (MethodInfo methodInfo : methodToInstanceMap.keySet()) {\n+            beanClasses.add(methodInfo.declaringClass().asClass().name().toString());\n+        }\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(beanClasses).setUnremovable()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f685c6e4ae50c7d5e02144c8230a26778d7bd9e5"}, "originalPosition": 92}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f685c6e4ae50c7d5e02144c8230a26778d7bd9e5", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/f685c6e4ae50c7d5e02144c8230a26778d7bd9e5", "committedDate": "2020-05-13T19:32:57Z", "message": "feat: collect annotated methods and register beans"}, "afterCommit": {"oid": "8fa93028c3b987b79855b262f37a7fce1a50827f", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/8fa93028c3b987b79855b262f37a7fce1a50827f", "committedDate": "2020-05-20T14:19:56Z", "message": "refactor: search for the annotations only on beans"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fa93028c3b987b79855b262f37a7fce1a50827f", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/8fa93028c3b987b79855b262f37a7fce1a50827f", "committedDate": "2020-05-20T14:19:56Z", "message": "refactor: search for the annotations only on beans"}, "afterCommit": {"oid": "412f225a7b030c94aec2ca91911a30261936f145", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/412f225a7b030c94aec2ca91911a30261936f145", "committedDate": "2020-05-22T15:29:54Z", "message": "feature: add spring-scheduling extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "412f225a7b030c94aec2ca91911a30261936f145", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/412f225a7b030c94aec2ca91911a30261936f145", "committedDate": "2020-05-22T15:29:54Z", "message": "feature: add spring-scheduling extension"}, "afterCommit": {"oid": "acd3a60da5b543ad10c3f695167cba7039957066", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/acd3a60da5b543ad10c3f695167cba7039957066", "committedDate": "2020-05-26T15:57:09Z", "message": "add more test and use cases + refactor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "acd3a60da5b543ad10c3f695167cba7039957066", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/acd3a60da5b543ad10c3f695167cba7039957066", "committedDate": "2020-05-26T15:57:09Z", "message": "add more test and use cases + refactor"}, "afterCommit": {"oid": "2f6976d4ec2d7a8228d78a7262cd8e59d4f016d3", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/2f6976d4ec2d7a8228d78a7262cd8e59d4f016d3", "committedDate": "2020-05-27T20:55:07Z", "message": "fix cron expression from config"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f6976d4ec2d7a8228d78a7262cd8e59d4f016d3", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/2f6976d4ec2d7a8228d78a7262cd8e59d4f016d3", "committedDate": "2020-05-27T20:55:07Z", "message": "fix cron expression from config"}, "afterCommit": {"oid": "6ad16a8379bef491ddb4bfc2b0f560fc5ff2d353", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/6ad16a8379bef491ddb4bfc2b0f560fc5ff2d353", "committedDate": "2020-05-28T06:15:56Z", "message": "read fixeRate from config"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a8390f82dc4fdc5eee00d816839663e568da262", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/8a8390f82dc4fdc5eee00d816839663e568da262", "committedDate": "2020-05-28T14:05:17Z", "message": "repeteable @Scheduled implementation"}, "afterCommit": {"oid": "d5bb24e627475b12a855bddc1bfd6364b3fdeef4", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/d5bb24e627475b12a855bddc1bfd6364b3fdeef4", "committedDate": "2020-05-28T14:10:46Z", "message": "feature: add spring-scheduling extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5bb24e627475b12a855bddc1bfd6364b3fdeef4", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/d5bb24e627475b12a855bddc1bfd6364b3fdeef4", "committedDate": "2020-05-28T14:10:46Z", "message": "feature: add spring-scheduling extension"}, "afterCommit": {"oid": "0d3788668067ea5fa5b9a462fd0981ab38603219", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/0d3788668067ea5fa5b9a462fd0981ab38603219", "committedDate": "2020-05-29T15:45:16Z", "message": "bump spring-context-api version and refactor delayed tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d3788668067ea5fa5b9a462fd0981ab38603219", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/0d3788668067ea5fa5b9a462fd0981ab38603219", "committedDate": "2020-05-29T15:45:16Z", "message": "bump spring-context-api version and refactor delayed tests"}, "afterCommit": {"oid": "189fe49e8f785ce3fe72de3362b9de25b37a8b37", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/189fe49e8f785ce3fe72de3362b9de25b37a8b37", "committedDate": "2020-06-01T08:45:20Z", "message": "feature: add spring-scheduling extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "189fe49e8f785ce3fe72de3362b9de25b37a8b37", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/189fe49e8f785ce3fe72de3362b9de25b37a8b37", "committedDate": "2020-06-01T08:45:20Z", "message": "feature: add spring-scheduling extension"}, "afterCommit": {"oid": "eac118fe30f6bd3c476cb8f15e8270344c0c721c", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/eac118fe30f6bd3c476cb8f15e8270344c0c721c", "committedDate": "2020-06-01T14:01:57Z", "message": "feature: add spring-scheduling extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTM4NDMx", "url": "https://github.com/quarkusio/quarkus/pull/9278#pullrequestreview-421938431", "createdAt": "2020-06-01T15:21:11Z", "commit": {"oid": "eac118fe30f6bd3c476cb8f15e8270344c0c721c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToyMToxMVrOGdOfiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToyMToxMVrOGdOfiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5OTMzOQ==", "bodyText": "This (and all other occurences in pom.xml) should probably be scheduled instead of scheduling because we use quarkus-scheduled in the existing extension.", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r433299339", "createdAt": "2020-06-01T15:21:11Z", "author": {"login": "geoand"}, "path": "bom/deployment/pom.xml", "diffHunk": "@@ -748,6 +748,11 @@\n                 <artifactId>quarkus-spring-cache-deployment</artifactId>\n                 <version>${project.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-spring-scheduling-deployment</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eac118fe30f6bd3c476cb8f15e8270344c0c721c"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTQ3NjUy", "url": "https://github.com/quarkusio/quarkus/pull/9278#pullrequestreview-421947652", "createdAt": "2020-06-01T15:26:52Z", "commit": {"oid": "eac118fe30f6bd3c476cb8f15e8270344c0c721c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToyNjo1MlrOGdOsnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToyNjo1MlrOGdOsnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwMjY4NQ==", "bodyText": "This should probably be spring-scheduled", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r433302685", "createdAt": "2020-06-01T15:26:52Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/FeatureBuildItem.java", "diffHunk": "@@ -106,6 +106,7 @@\n     public static final String SPRING_BOOT_PROPERTIES = \"spring-boot-properties\";\n     public static final String SPRING_CACHE = \"spring-cache\";\n     public static final String SPRING_CLOUD_CONFIG_CLIENT = \"spring-cloud-config-client\";\n+    public static final String SPRING_SCHEDULING = \"spring-scheduling\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eac118fe30f6bd3c476cb8f15e8270344c0c721c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTQ5NTYz", "url": "https://github.com/quarkusio/quarkus/pull/9278#pullrequestreview-421949563", "createdAt": "2020-06-01T15:28:23Z", "commit": {"oid": "eac118fe30f6bd3c476cb8f15e8270344c0c721c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToyODoyNFrOGdOxVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToyODoyNFrOGdOxVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwMzg5Mg==", "bodyText": "The comment is kind of hard to read. Can you try and make it a little better?", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r433303892", "createdAt": "2020-06-01T15:28:24Z", "author": {"login": "geoand"}, "path": "extensions/spring-scheduling/deployment/src/main/java/io/quarkus/spring/scheduling/deployment/SpringSchedulingProcessor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.quarkus.spring.scheduling.deployment;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.BeanRegistrationPhaseBuildItem;\n+import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n+import io.quarkus.arc.processor.AnnotationStore;\n+import io.quarkus.arc.processor.BeanInfo;\n+import io.quarkus.arc.processor.BuildExtension;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.scheduler.deployment.ScheduledBusinessMethodItem;\n+import io.quarkus.scheduler.runtime.SchedulerContext;\n+\n+/*\n+ * A simple processor that maps annotations Spring Scheduled annotation to Quarkus annotation\n+ * Arc's handling of annotation mapping (by creating an extra abstraction layer on top of the Jandex index)\n+ * suits this sort of handling perfectly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eac118fe30f6bd3c476cb8f15e8270344c0c721c"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTUzNDM4", "url": "https://github.com/quarkusio/quarkus/pull/9278#pullrequestreview-421953438", "createdAt": "2020-06-01T15:33:16Z", "commit": {"oid": "eac118fe30f6bd3c476cb8f15e8270344c0c721c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNTozMzoxNlrOGdPDng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNTozMzoxNlrOGdPDng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwODU3NA==", "bodyText": "We don't really use underscores, can you please stick to camel case?", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r433308574", "createdAt": "2020-06-01T15:33:16Z", "author": {"login": "geoand"}, "path": "extensions/spring-scheduling/deployment/src/test/java/io/quarkus/spring/scheduling/deployment/SpringSchedulingProcessorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.quarkus.spring.scheduling.deployment;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Indexer;\n+import org.jboss.jandex.MethodInfo;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import io.quarkus.arc.processor.BeanArchives;\n+import io.quarkus.deployment.util.IoUtil;\n+\n+public class SpringSchedulingProcessorTest {\n+\n+    final SpringSchedulingProcessor springSchedulingProcessor = new SpringSchedulingProcessor();\n+    final IndexView index = getIndex(SpringScheduledMethodsBean.class);\n+\n+    @Test\n+    public void test_buildCronParam() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eac118fe30f6bd3c476cb8f15e8270344c0c721c"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eac118fe30f6bd3c476cb8f15e8270344c0c721c", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/eac118fe30f6bd3c476cb8f15e8270344c0c721c", "committedDate": "2020-06-01T14:01:57Z", "message": "feature: add spring-scheduling extension"}, "afterCommit": {"oid": "cdb890811c2da55b355b7e254e18b6f10dce5738", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/cdb890811c2da55b355b7e254e18b6f10dce5738", "committedDate": "2020-06-01T19:48:56Z", "message": "feature: add spring-scheduling extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzcxNjIx", "url": "https://github.com/quarkusio/quarkus/pull/9278#pullrequestreview-422371621", "createdAt": "2020-06-02T06:18:51Z", "commit": {"oid": "cdb890811c2da55b355b7e254e18b6f10dce5738"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjoxODo1MVrOGdjhfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjoxODo1MVrOGdjhfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0MzkwMQ==", "bodyText": "What does this do?", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r433643901", "createdAt": "2020-06-02T06:18:51Z", "author": {"login": "geoand"}, "path": "extensions/spring-scheduled/deployment/src/main/java/io/quarkus/spring/scheduling/deployment/SpringSchedulingProcessor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.quarkus.spring.scheduling.deployment;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.BeanRegistrationPhaseBuildItem;\n+import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n+import io.quarkus.arc.processor.AnnotationStore;\n+import io.quarkus.arc.processor.BeanInfo;\n+import io.quarkus.arc.processor.BuildExtension;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.scheduler.deployment.ScheduledBusinessMethodItem;\n+import io.quarkus.scheduler.runtime.SchedulerContext;\n+\n+/**\n+ * A simple processor that search for Spring Scheduled annotations in Beans and produce\n+ * {@code @io.quarkus.spring.scheduling.deployment.SpringScheduledAnnotatedMethodBuildItem}\n+ * to be consumed by Quarkus Scheduler extension\n+ */\n+public class SpringSchedulingProcessor {\n+\n+    static final DotName SPRING_SCHEDULED = DotName.createSimple(\"org.springframework.scheduling.annotation.Scheduled\");\n+    static final DotName SPRING_SCHEDULES = DotName.createSimple(\"org.springframework.scheduling.annotation.Schedules\");\n+\n+    private static final DotName QUARKUS_SCHEDULED = DotName.createSimple(io.quarkus.scheduler.Scheduled.class.getName());\n+    private static final Logger LOGGER = Logger.getLogger(SpringSchedulingProcessor.class);\n+\n+    @BuildStep\n+    FeatureBuildItem registerFeature() {\n+        return new FeatureBuildItem(FeatureBuildItem.SPRING_SCHEDULING);\n+    }\n+\n+    @BuildStep\n+    public List<UnremovableBeanBuildItem> unremovableBeans() {\n+        // Beans annotated with @Scheduled should never be removed\n+        return Arrays.asList(\n+                new UnremovableBeanBuildItem(new UnremovableBeanBuildItem.BeanClassAnnotationExclusion(SPRING_SCHEDULED)),\n+                new UnremovableBeanBuildItem(new UnremovableBeanBuildItem.BeanClassAnnotationExclusion(SPRING_SCHEDULES)));\n+    }\n+\n+    @BuildStep\n+    void collectScheduledMethods(BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n+            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods) {\n+\n+        Map<MethodInfo, AnnotationInstance> result = new HashMap<>();\n+        AnnotationStore annotationStore = beanRegistrationPhase.getContext().get(BuildExtension.Key.ANNOTATION_STORE);\n+\n+        for (BeanInfo bean : beanRegistrationPhase.getContext().beans().classBeans()) {\n+            ClassInfo classInfo = bean.getTarget().get().asClass();\n+            for (MethodInfo method : classInfo.methods()) {\n+                List<AnnotationInstance> schedules = null;\n+                AnnotationInstance scheduledAnnotation = annotationStore.getAnnotation(method, SPRING_SCHEDULED);\n+                if (scheduledAnnotation != null) {\n+                    schedules = Collections.singletonList(scheduledAnnotation);\n+                } else {\n+                    AnnotationInstance scheduledsAnnotation = annotationStore.getAnnotation(method, SPRING_SCHEDULES);\n+                    if (scheduledsAnnotation != null) {\n+                        schedules = new ArrayList<>();\n+                        for (AnnotationInstance scheduledInstance : scheduledsAnnotation.value().asNestedArray()) {\n+                            schedules.add(scheduledInstance);\n+                        }\n+                    }\n+                }\n+                processSpringScheduledAnnotation(scheduledBusinessMethods, bean, method, schedules);\n+\n+            }\n+\n+        }\n+    }\n+\n+    void processSpringScheduledAnnotation(BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods,\n+            BeanInfo bean, MethodInfo method, List<AnnotationInstance> scheduledAnnotations) {\n+        List<AnnotationInstance> schedules = new ArrayList<>();\n+        if (scheduledAnnotations != null) {\n+            for (AnnotationInstance scheduledAnnotation : scheduledAnnotations) {\n+                List<AnnotationValue> springAnnotationValues = scheduledAnnotation.values();\n+                List<AnnotationValue> confValues = new ArrayList<>();\n+                if (!springAnnotationValues.isEmpty()) {\n+                    if (annotationsValuesContain(springAnnotationValues, \"fixedRate\")\n+                            || annotationsValuesContain(springAnnotationValues, \"fixedRateString\")) {\n+                        confValues.add(buildEveryParam(springAnnotationValues));\n+                        if (annotationsValuesContain(springAnnotationValues, \"initialDelay\")\n+                                || annotationsValuesContain(springAnnotationValues, \"initialDelayString\")) {\n+                            confValues.addAll(buildDelayParams(springAnnotationValues));\n+                        }\n+\n+                    } else if (annotationsValuesContain(springAnnotationValues, \"fixedDelay\")) {\n+                        throw new IllegalStateException(\n+                                \"Unsupported @Scheduled param fixedDelay\");\n+                    } else if (annotationsValuesContain(springAnnotationValues, \"cron\")) {\n+                        if (annotationsValuesContain(springAnnotationValues, \"initialDelay\")) {\n+                            throw new IllegalStateException(\n+                                    \"Invalid @Scheduled method '\" + method.name()\n+                                            + \"': 'initialDelay' not supported for cron triggers\");\n+                        }\n+                        confValues.add(buildCronParam(springAnnotationValues));\n+                    }\n+\n+                }\n+                AnnotationInstance regularAnnotationInstance = AnnotationInstance.create(QUARKUS_SCHEDULED,\n+                        scheduledAnnotation.target(), confValues);\n+                schedules.add(regularAnnotationInstance);\n+            }\n+            if (schedules != null) {\n+                scheduledBusinessMethods.produce(new ScheduledBusinessMethodItem(bean, method, schedules));\n+                LOGGER.debugf(\"Found scheduled business method %s declared on %s\", method, bean);\n+            }\n+        }\n+    }\n+\n+    AnnotationValue buildCronParam(List<AnnotationValue> springAnnotationValues) {\n+        String cronExpression = getAnnotationValueByName(springAnnotationValues, \"cron\").get().asString();\n+        cronExpression = cronExpression.replace(\"${\", \"{\");\n+        return AnnotationValue.createStringValue(\"cron\", cronExpression);\n+    }\n+\n+    AnnotationValue buildEveryParam(List<AnnotationValue> springAnnotationValues) {\n+        long fixedRate = getLongValueFromParam(springAnnotationValues, \"fixedRate\");\n+        String fixedRateString;\n+        fixedRateString = Duration.ofMillis(fixedRate).toString();\n+        AnnotationValue every = AnnotationValue.createStringValue(\"every\", fixedRateString);\n+        return every;\n+    }\n+\n+    List<AnnotationValue> buildDelayParams(List<AnnotationValue> springAnnotationValues) {\n+        List<AnnotationValue> confValues = new ArrayList<>();\n+        long delay = getLongValueFromParam(springAnnotationValues, \"initialDelay\");\n+        confValues.add(AnnotationValue.createLongValue(\"delay\", delay));\n+        confValues.add(AnnotationValue.createEnumValue(\"delayUnit\",\n+                DotName.createSimple(\"java.util.concurrent.TimeUnit\"),\n+                TimeUnit.MILLISECONDS.name()));\n+        return confValues;\n+    }\n+\n+    private long getLongValueFromParam(List<AnnotationValue> springAnnotationValues, String paramName) {\n+        long paramValue = 0;\n+        String paramValueString = \"\";\n+        if (annotationsValuesContain(springAnnotationValues, paramName)) {\n+            paramValue = getAnnotationValueByName(springAnnotationValues, paramName).get().asLong();\n+        } else { //param value as String e.g. a placeholder ${value.from.conf}\n+            paramValueString = getAnnotationValueByName(springAnnotationValues, paramName + \"String\")\n+                    .get().asString();\n+            paramValueString = paramValueString.replace(\"${\", \"{\").trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdb890811c2da55b355b7e254e18b6f10dce5738"}, "originalPosition": 160}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzcyMjk2", "url": "https://github.com/quarkusio/quarkus/pull/9278#pullrequestreview-422372296", "createdAt": "2020-06-02T06:20:17Z", "commit": {"oid": "cdb890811c2da55b355b7e254e18b6f10dce5738"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjoyMDoxOFrOGdjjlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjoyMDoxOFrOGdjjlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0NDQzNw==", "bodyText": "We should have a consistent format for the error messages.  Also, we should probable use IllegalArgumentException instead of IllegalStateException", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r433644437", "createdAt": "2020-06-02T06:20:18Z", "author": {"login": "geoand"}, "path": "extensions/spring-scheduled/deployment/src/main/java/io/quarkus/spring/scheduling/deployment/SpringSchedulingProcessor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.quarkus.spring.scheduling.deployment;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.BeanRegistrationPhaseBuildItem;\n+import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n+import io.quarkus.arc.processor.AnnotationStore;\n+import io.quarkus.arc.processor.BeanInfo;\n+import io.quarkus.arc.processor.BuildExtension;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.scheduler.deployment.ScheduledBusinessMethodItem;\n+import io.quarkus.scheduler.runtime.SchedulerContext;\n+\n+/**\n+ * A simple processor that search for Spring Scheduled annotations in Beans and produce\n+ * {@code @io.quarkus.spring.scheduling.deployment.SpringScheduledAnnotatedMethodBuildItem}\n+ * to be consumed by Quarkus Scheduler extension\n+ */\n+public class SpringSchedulingProcessor {\n+\n+    static final DotName SPRING_SCHEDULED = DotName.createSimple(\"org.springframework.scheduling.annotation.Scheduled\");\n+    static final DotName SPRING_SCHEDULES = DotName.createSimple(\"org.springframework.scheduling.annotation.Schedules\");\n+\n+    private static final DotName QUARKUS_SCHEDULED = DotName.createSimple(io.quarkus.scheduler.Scheduled.class.getName());\n+    private static final Logger LOGGER = Logger.getLogger(SpringSchedulingProcessor.class);\n+\n+    @BuildStep\n+    FeatureBuildItem registerFeature() {\n+        return new FeatureBuildItem(FeatureBuildItem.SPRING_SCHEDULING);\n+    }\n+\n+    @BuildStep\n+    public List<UnremovableBeanBuildItem> unremovableBeans() {\n+        // Beans annotated with @Scheduled should never be removed\n+        return Arrays.asList(\n+                new UnremovableBeanBuildItem(new UnremovableBeanBuildItem.BeanClassAnnotationExclusion(SPRING_SCHEDULED)),\n+                new UnremovableBeanBuildItem(new UnremovableBeanBuildItem.BeanClassAnnotationExclusion(SPRING_SCHEDULES)));\n+    }\n+\n+    @BuildStep\n+    void collectScheduledMethods(BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n+            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods) {\n+\n+        Map<MethodInfo, AnnotationInstance> result = new HashMap<>();\n+        AnnotationStore annotationStore = beanRegistrationPhase.getContext().get(BuildExtension.Key.ANNOTATION_STORE);\n+\n+        for (BeanInfo bean : beanRegistrationPhase.getContext().beans().classBeans()) {\n+            ClassInfo classInfo = bean.getTarget().get().asClass();\n+            for (MethodInfo method : classInfo.methods()) {\n+                List<AnnotationInstance> schedules = null;\n+                AnnotationInstance scheduledAnnotation = annotationStore.getAnnotation(method, SPRING_SCHEDULED);\n+                if (scheduledAnnotation != null) {\n+                    schedules = Collections.singletonList(scheduledAnnotation);\n+                } else {\n+                    AnnotationInstance scheduledsAnnotation = annotationStore.getAnnotation(method, SPRING_SCHEDULES);\n+                    if (scheduledsAnnotation != null) {\n+                        schedules = new ArrayList<>();\n+                        for (AnnotationInstance scheduledInstance : scheduledsAnnotation.value().asNestedArray()) {\n+                            schedules.add(scheduledInstance);\n+                        }\n+                    }\n+                }\n+                processSpringScheduledAnnotation(scheduledBusinessMethods, bean, method, schedules);\n+\n+            }\n+\n+        }\n+    }\n+\n+    void processSpringScheduledAnnotation(BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods,\n+            BeanInfo bean, MethodInfo method, List<AnnotationInstance> scheduledAnnotations) {\n+        List<AnnotationInstance> schedules = new ArrayList<>();\n+        if (scheduledAnnotations != null) {\n+            for (AnnotationInstance scheduledAnnotation : scheduledAnnotations) {\n+                List<AnnotationValue> springAnnotationValues = scheduledAnnotation.values();\n+                List<AnnotationValue> confValues = new ArrayList<>();\n+                if (!springAnnotationValues.isEmpty()) {\n+                    if (annotationsValuesContain(springAnnotationValues, \"fixedRate\")\n+                            || annotationsValuesContain(springAnnotationValues, \"fixedRateString\")) {\n+                        confValues.add(buildEveryParam(springAnnotationValues));\n+                        if (annotationsValuesContain(springAnnotationValues, \"initialDelay\")\n+                                || annotationsValuesContain(springAnnotationValues, \"initialDelayString\")) {\n+                            confValues.addAll(buildDelayParams(springAnnotationValues));\n+                        }\n+\n+                    } else if (annotationsValuesContain(springAnnotationValues, \"fixedDelay\")) {\n+                        throw new IllegalStateException(\n+                                \"Unsupported @Scheduled param fixedDelay\");\n+                    } else if (annotationsValuesContain(springAnnotationValues, \"cron\")) {\n+                        if (annotationsValuesContain(springAnnotationValues, \"initialDelay\")) {\n+                            throw new IllegalStateException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdb890811c2da55b355b7e254e18b6f10dce5738"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDM0Mjcy", "url": "https://github.com/quarkusio/quarkus/pull/9278#pullrequestreview-422434272", "createdAt": "2020-06-02T08:02:27Z", "commit": {"oid": "cdb890811c2da55b355b7e254e18b6f10dce5738"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODowMjoyOFrOGdmeZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODowMjoyOFrOGdmeZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5MjI2MA==", "bodyText": "@aureamunoz, IIUC correctly from your Pull Request, Spring's ability to read the cron expression from application.properties using ${} isn't supported, right? If not, is there a proper error message?\n\nYes @geoand , it is supported.", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r433692260", "createdAt": "2020-06-02T08:02:28Z", "author": {"login": "aureamunoz"}, "path": "extensions/spring-scheduled/deployment/src/main/java/io/quarkus/spring/scheduling/deployment/SpringSchedulingProcessor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package io.quarkus.spring.scheduling.deployment;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.BeanRegistrationPhaseBuildItem;\n+import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n+import io.quarkus.arc.processor.AnnotationStore;\n+import io.quarkus.arc.processor.BeanInfo;\n+import io.quarkus.arc.processor.BuildExtension;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.scheduler.deployment.ScheduledBusinessMethodItem;\n+import io.quarkus.scheduler.runtime.SchedulerContext;\n+\n+/**\n+ * A simple processor that search for Spring Scheduled annotations in Beans and produce\n+ * {@code @io.quarkus.spring.scheduling.deployment.SpringScheduledAnnotatedMethodBuildItem}\n+ * to be consumed by Quarkus Scheduler extension\n+ */\n+public class SpringSchedulingProcessor {\n+\n+    static final DotName SPRING_SCHEDULED = DotName.createSimple(\"org.springframework.scheduling.annotation.Scheduled\");\n+    static final DotName SPRING_SCHEDULES = DotName.createSimple(\"org.springframework.scheduling.annotation.Schedules\");\n+\n+    private static final DotName QUARKUS_SCHEDULED = DotName.createSimple(io.quarkus.scheduler.Scheduled.class.getName());\n+    private static final Logger LOGGER = Logger.getLogger(SpringSchedulingProcessor.class);\n+\n+    @BuildStep\n+    FeatureBuildItem registerFeature() {\n+        return new FeatureBuildItem(FeatureBuildItem.SPRING_SCHEDULING);\n+    }\n+\n+    @BuildStep\n+    public List<UnremovableBeanBuildItem> unremovableBeans() {\n+        // Beans annotated with @Scheduled should never be removed\n+        return Arrays.asList(\n+                new UnremovableBeanBuildItem(new UnremovableBeanBuildItem.BeanClassAnnotationExclusion(SPRING_SCHEDULED)),\n+                new UnremovableBeanBuildItem(new UnremovableBeanBuildItem.BeanClassAnnotationExclusion(SPRING_SCHEDULES)));\n+    }\n+\n+    @BuildStep\n+    void collectScheduledMethods(BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n+            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods) {\n+\n+        Map<MethodInfo, AnnotationInstance> result = new HashMap<>();\n+        AnnotationStore annotationStore = beanRegistrationPhase.getContext().get(BuildExtension.Key.ANNOTATION_STORE);\n+\n+        for (BeanInfo bean : beanRegistrationPhase.getContext().beans().classBeans()) {\n+            ClassInfo classInfo = bean.getTarget().get().asClass();\n+            for (MethodInfo method : classInfo.methods()) {\n+                List<AnnotationInstance> schedules = null;\n+                AnnotationInstance scheduledAnnotation = annotationStore.getAnnotation(method, SPRING_SCHEDULED);\n+                if (scheduledAnnotation != null) {\n+                    schedules = Collections.singletonList(scheduledAnnotation);\n+                } else {\n+                    AnnotationInstance scheduledsAnnotation = annotationStore.getAnnotation(method, SPRING_SCHEDULES);\n+                    if (scheduledsAnnotation != null) {\n+                        schedules = new ArrayList<>();\n+                        for (AnnotationInstance scheduledInstance : scheduledsAnnotation.value().asNestedArray()) {\n+                            schedules.add(scheduledInstance);\n+                        }\n+                    }\n+                }\n+                processSpringScheduledAnnotation(scheduledBusinessMethods, bean, method, schedules);\n+\n+            }\n+\n+        }\n+    }\n+\n+    void processSpringScheduledAnnotation(BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods,\n+            BeanInfo bean, MethodInfo method, List<AnnotationInstance> scheduledAnnotations) {\n+        List<AnnotationInstance> schedules = new ArrayList<>();\n+        if (scheduledAnnotations != null) {\n+            for (AnnotationInstance scheduledAnnotation : scheduledAnnotations) {\n+                List<AnnotationValue> springAnnotationValues = scheduledAnnotation.values();\n+                List<AnnotationValue> confValues = new ArrayList<>();\n+                if (!springAnnotationValues.isEmpty()) {\n+                    if (annotationsValuesContain(springAnnotationValues, \"fixedRate\")\n+                            || annotationsValuesContain(springAnnotationValues, \"fixedRateString\")) {\n+                        confValues.add(buildEveryParam(springAnnotationValues));\n+                        if (annotationsValuesContain(springAnnotationValues, \"initialDelay\")\n+                                || annotationsValuesContain(springAnnotationValues, \"initialDelayString\")) {\n+                            confValues.addAll(buildDelayParams(springAnnotationValues));\n+                        }\n+\n+                    } else if (annotationsValuesContain(springAnnotationValues, \"fixedDelay\")) {\n+                        throw new IllegalStateException(\n+                                \"Unsupported @Scheduled param fixedDelay\");\n+                    } else if (annotationsValuesContain(springAnnotationValues, \"cron\")) {\n+                        if (annotationsValuesContain(springAnnotationValues, \"initialDelay\")) {\n+                            throw new IllegalStateException(\n+                                    \"Invalid @Scheduled method '\" + method.name()\n+                                            + \"': 'initialDelay' not supported for cron triggers\");\n+                        }\n+                        confValues.add(buildCronParam(springAnnotationValues));\n+                    }\n+\n+                }\n+                AnnotationInstance regularAnnotationInstance = AnnotationInstance.create(QUARKUS_SCHEDULED,\n+                        scheduledAnnotation.target(), confValues);\n+                schedules.add(regularAnnotationInstance);\n+            }\n+            if (schedules != null) {\n+                scheduledBusinessMethods.produce(new ScheduledBusinessMethodItem(bean, method, schedules));\n+                LOGGER.debugf(\"Found scheduled business method %s declared on %s\", method, bean);\n+            }\n+        }\n+    }\n+\n+    AnnotationValue buildCronParam(List<AnnotationValue> springAnnotationValues) {\n+        String cronExpression = getAnnotationValueByName(springAnnotationValues, \"cron\").get().asString();\n+        cronExpression = cronExpression.replace(\"${\", \"{\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdb890811c2da55b355b7e254e18b6f10dce5738"}, "originalPosition": 130}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cdb890811c2da55b355b7e254e18b6f10dce5738", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/cdb890811c2da55b355b7e254e18b6f10dce5738", "committedDate": "2020-06-01T19:48:56Z", "message": "feature: add spring-scheduling extension"}, "afterCommit": {"oid": "de5cde5c40a0078837c112edd634bc8bfd501845", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/de5cde5c40a0078837c112edd634bc8bfd501845", "committedDate": "2020-06-02T11:18:27Z", "message": "feature: add spring-scheduling extension\n\nrefactor: error cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyODkyNTQ4", "url": "https://github.com/quarkusio/quarkus/pull/9278#pullrequestreview-422892548", "createdAt": "2020-06-02T17:17:46Z", "commit": {"oid": "de5cde5c40a0078837c112edd634bc8bfd501845"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxNzo0NlrOGd72wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxNzo0NlrOGd72wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MjU2MQ==", "bodyText": "Hm, why did you need to add this?", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r434042561", "createdAt": "2020-06-02T17:17:46Z", "author": {"login": "geoand"}, "path": "extensions/scheduler/deployment/src/test/java/io/quarkus/scheduler/test/SimpleJobs.java", "diffHunk": "@@ -4,8 +4,11 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.CountDownLatch;\n \n+import javax.enterprise.context.ApplicationScoped;\n+\n import io.quarkus.scheduler.Scheduled;\n \n+@ApplicationScoped", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de5cde5c40a0078837c112edd634bc8bfd501845"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de5cde5c40a0078837c112edd634bc8bfd501845", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/de5cde5c40a0078837c112edd634bc8bfd501845", "committedDate": "2020-06-02T11:18:27Z", "message": "feature: add spring-scheduling extension\n\nrefactor: error cases"}, "afterCommit": {"oid": "e2953c21d7764b16d3084e314da91d0c2d4c30de", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/e2953c21d7764b16d3084e314da91d0c2d4c30de", "committedDate": "2020-06-04T20:48:57Z", "message": "feature: add spring-scheduling extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2953c21d7764b16d3084e314da91d0c2d4c30de", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/e2953c21d7764b16d3084e314da91d0c2d4c30de", "committedDate": "2020-06-04T20:48:57Z", "message": "feature: add spring-scheduling extension"}, "afterCommit": {"oid": "0f4f58d90ee8a37ce5a1b0bdbe2d1f4734d198ec", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/0f4f58d90ee8a37ce5a1b0bdbe2d1f4734d198ec", "committedDate": "2020-06-17T08:27:28Z", "message": "feature: add spring-scheduling extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f6fd58c9d89edca3a5c60b7fd7c64e56063424a", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/2f6fd58c9d89edca3a5c60b7fd7c64e56063424a", "committedDate": "2020-06-17T10:20:50Z", "message": "feature: add spring-scheduling extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f4f58d90ee8a37ce5a1b0bdbe2d1f4734d198ec", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/0f4f58d90ee8a37ce5a1b0bdbe2d1f4734d198ec", "committedDate": "2020-06-17T08:27:28Z", "message": "feature: add spring-scheduling extension"}, "afterCommit": {"oid": "2f6fd58c9d89edca3a5c60b7fd7c64e56063424a", "author": {"user": {"login": "aureamunoz", "name": "Aurea Mu\u00f1oz Hern\u00e1ndez"}}, "url": "https://github.com/quarkusio/quarkus/commit/2f6fd58c9d89edca3a5c60b7fd7c64e56063424a", "committedDate": "2020-06-17T10:20:50Z", "message": "feature: add spring-scheduling extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzkxMjEz", "url": "https://github.com/quarkusio/quarkus/pull/9278#pullrequestreview-432391213", "createdAt": "2020-06-17T13:19:04Z", "commit": {"oid": "2f6fd58c9d89edca3a5c60b7fd7c64e56063424a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzkyMjUy", "url": "https://github.com/quarkusio/quarkus/pull/9278#pullrequestreview-432392252", "createdAt": "2020-06-17T13:20:09Z", "commit": {"oid": "2f6fd58c9d89edca3a5c60b7fd7c64e56063424a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoyMDowOVrOGlFXtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoyMDowOVrOGlFXtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzODQ4Nw==", "bodyText": "You definitely don't need this dependency since it's brought in transitively. But this can be fixed in a follow up.", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r441538487", "createdAt": "2020-06-17T13:20:09Z", "author": {"login": "geoand"}, "path": "extensions/spring-scheduled/deployment/pom.xml", "diffHunk": "@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-spring-scheduled-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-spring-scheduled-deployment</artifactId>\n+    <name>Quarkus - Spring - Scheduling - Deployment</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-spring-scheduled</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-core-deployment</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6fd58c9d89edca3a5c60b7fd7c64e56063424a"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzkyNjQ4", "url": "https://github.com/quarkusio/quarkus/pull/9278#pullrequestreview-432392648", "createdAt": "2020-06-17T13:20:38Z", "commit": {"oid": "2f6fd58c9d89edca3a5c60b7fd7c64e56063424a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoyMDozOFrOGlFY4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoyMDozOFrOGlFY4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzODc4Ng==", "bodyText": "I am pretty sure that this is also brought in by quarkus-scheduler-deployment. Please check and fix in a follow up.", "url": "https://github.com/quarkusio/quarkus/pull/9278#discussion_r441538786", "createdAt": "2020-06-17T13:20:38Z", "author": {"login": "geoand"}, "path": "extensions/spring-scheduled/deployment/pom.xml", "diffHunk": "@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-spring-scheduled-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-spring-scheduled-deployment</artifactId>\n+    <name>Quarkus - Spring - Scheduling - Deployment</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-spring-scheduled</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-core-deployment</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-arc-deployment</artifactId>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6fd58c9d89edca3a5c60b7fd7c64e56063424a"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3449, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}