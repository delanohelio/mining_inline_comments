{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5OTY3MjIy", "number": 10261, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowNDo1MVrOEIzU1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowNjowNVrOEIzXIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjY0OTgyOnYy", "diffSide": "RIGHT", "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowNDo1MVrOGo_A5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowNDo1MVrOGo_A5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyODY0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // so lets warn users about it's use\n          \n          \n            \n                // so lets warn users about its use", "url": "https://github.com/quarkusio/quarkus/pull/10261#discussion_r445628647", "createdAt": "2020-06-25T15:04:51Z", "author": {"login": "gsmet"}, "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -220,6 +227,40 @@ public void register(RegistrationContext registrationContext) {\n         extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(Feature.REST_CLIENT));\n     }\n \n+    // currently default methods on a rest-client interface\n+    // that is annotated with ClientHeaderParam\n+    // leads to NPEs (see https://github.com/quarkusio/quarkus/issues/10249)\n+    // so lets warn users about it's use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba30563bed279008eefd240081e85ec928f17a2"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjY1MTM3OnYy", "diffSide": "RIGHT", "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowNToxMVrOGo_B4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowNToxMVrOGo_B4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyODg5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (ClassInfo intefaze : interfaces.values()) {\n          \n          \n            \n                    for (ClassInfo interfaze : interfaces.values()) {", "url": "https://github.com/quarkusio/quarkus/pull/10261#discussion_r445628898", "createdAt": "2020-06-25T15:05:11Z", "author": {"login": "gsmet"}, "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -220,6 +227,40 @@ public void register(RegistrationContext registrationContext) {\n         extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(Feature.REST_CLIENT));\n     }\n \n+    // currently default methods on a rest-client interface\n+    // that is annotated with ClientHeaderParam\n+    // leads to NPEs (see https://github.com/quarkusio/quarkus/issues/10249)\n+    // so lets warn users about it's use\n+    private void warnAboutNotWorkingFeaturesInNative(PackageConfig packageConfig, Map<DotName, ClassInfo> interfaces) {\n+        if (!packageConfig.type.equalsIgnoreCase(PackageConfig.NATIVE)) {\n+            return;\n+        }\n+        Set<DotName> dotNames = new HashSet<>();\n+        for (ClassInfo intefaze : interfaces.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba30563bed279008eefd240081e85ec928f17a2"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjY1NTAwOnYy", "diffSide": "RIGHT", "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowNTo1NVrOGo_EFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowNTo1NVrOGo_EFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyOTQ2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                + \"' might not work properly in native-mode. Offending interfaces are: \"\n          \n          \n            \n                                + \"' might not work properly in native mode. Offending interfaces are: \"", "url": "https://github.com/quarkusio/quarkus/pull/10261#discussion_r445629460", "createdAt": "2020-06-25T15:05:55Z", "author": {"login": "gsmet"}, "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -220,6 +227,40 @@ public void register(RegistrationContext registrationContext) {\n         extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(Feature.REST_CLIENT));\n     }\n \n+    // currently default methods on a rest-client interface\n+    // that is annotated with ClientHeaderParam\n+    // leads to NPEs (see https://github.com/quarkusio/quarkus/issues/10249)\n+    // so lets warn users about it's use\n+    private void warnAboutNotWorkingFeaturesInNative(PackageConfig packageConfig, Map<DotName, ClassInfo> interfaces) {\n+        if (!packageConfig.type.equalsIgnoreCase(PackageConfig.NATIVE)) {\n+            return;\n+        }\n+        Set<DotName> dotNames = new HashSet<>();\n+        for (ClassInfo intefaze : interfaces.values()) {\n+            if (intefaze.classAnnotation(CLIENT_HEADER_PARAM) != null) {\n+                boolean hasDefault = false;\n+                for (MethodInfo method : intefaze.methods()) {\n+                    if (isDefault(method.flags())) {\n+                        hasDefault = true;\n+                        break;\n+                    }\n+                }\n+                if (hasDefault) {\n+                    dotNames.add(intefaze.name());\n+                }\n+            }\n+        }\n+        if (!dotNames.isEmpty()) {\n+            log.warnf(\"rest-client interfaces that contain default methods and are annotated with '@\" + CLIENT_HEADER_PARAM\n+                    + \"' might not work properly in native-mode. Offending interfaces are: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba30563bed279008eefd240081e85ec928f17a2"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjY1NTcwOnYy", "diffSide": "RIGHT", "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowNjowNVrOGo_EgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowNjowNVrOGo_EgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyOTU2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                + dotNames.stream().map(d -> \"'\" + d.toString() + \"'\").collect(Collectors.joining(\",\")));\n          \n          \n            \n                                + dotNames.stream().map(d -> \"'\" + d.toString() + \"'\").collect(Collectors.joining(\", \")));", "url": "https://github.com/quarkusio/quarkus/pull/10261#discussion_r445629569", "createdAt": "2020-06-25T15:06:05Z", "author": {"login": "gsmet"}, "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -220,6 +227,40 @@ public void register(RegistrationContext registrationContext) {\n         extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(Feature.REST_CLIENT));\n     }\n \n+    // currently default methods on a rest-client interface\n+    // that is annotated with ClientHeaderParam\n+    // leads to NPEs (see https://github.com/quarkusio/quarkus/issues/10249)\n+    // so lets warn users about it's use\n+    private void warnAboutNotWorkingFeaturesInNative(PackageConfig packageConfig, Map<DotName, ClassInfo> interfaces) {\n+        if (!packageConfig.type.equalsIgnoreCase(PackageConfig.NATIVE)) {\n+            return;\n+        }\n+        Set<DotName> dotNames = new HashSet<>();\n+        for (ClassInfo intefaze : interfaces.values()) {\n+            if (intefaze.classAnnotation(CLIENT_HEADER_PARAM) != null) {\n+                boolean hasDefault = false;\n+                for (MethodInfo method : intefaze.methods()) {\n+                    if (isDefault(method.flags())) {\n+                        hasDefault = true;\n+                        break;\n+                    }\n+                }\n+                if (hasDefault) {\n+                    dotNames.add(intefaze.name());\n+                }\n+            }\n+        }\n+        if (!dotNames.isEmpty()) {\n+            log.warnf(\"rest-client interfaces that contain default methods and are annotated with '@\" + CLIENT_HEADER_PARAM\n+                    + \"' might not work properly in native-mode. Offending interfaces are: \"\n+                    + dotNames.stream().map(d -> \"'\" + d.toString() + \"'\").collect(Collectors.joining(\",\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba30563bed279008eefd240081e85ec928f17a2"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2640, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}