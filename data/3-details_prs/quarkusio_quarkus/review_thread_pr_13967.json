{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNDQyODQy", "number": 13967, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTowNjozM1rOFHI46Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTowNjozM1rOFHI46Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDI5OTkzOnYy", "diffSide": "RIGHT", "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/EvaluatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTowNjozM1rOIIen7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTowNjozM1rOIIen7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2MTI2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Iterare the resolvers lazily \n          \n          \n            \n                        // Iterate the resolvers lazily", "url": "https://github.com/quarkusio/quarkus/pull/13967#discussion_r545761261", "createdAt": "2020-12-18T11:06:33Z", "author": {"login": "gsmet"}, "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/EvaluatorImpl.java", "diffHunk": "@@ -86,46 +86,55 @@ private NamespaceResolver findNamespaceResolver(String namespace, ResolutionCont\n \n         if (tryCachedResolver) {\n             // Try the cached resolver first\n-            ValueResolver cachedResolver = ((PartImpl) evalContext.part).cachedResolver;\n+            ValueResolver cachedResolver = evalContext.getCachedResolver();\n             if (cachedResolver != null && cachedResolver.appliesTo(evalContext)) {\n                 return cachedResolver.resolve(evalContext).thenCompose(r -> {\n                     if (Result.NOT_FOUND.equals(r)) {\n-                        return resolve(evalContext, resolvers, false);\n+                        return resolve(evalContext, null, false);\n                     } else {\n                         return toCompletionStage(r);\n                     }\n                 });\n             }\n         }\n \n-        if (!resolvers.hasNext()) {\n+        if (resolvers == null) {\n+            // Iterare the resolvers lazily ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ce69805db77d32a481b115b1ea99686da3e4a7b"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4432, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}