{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NjYwNTIy", "number": 10653, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNzoyMTo1NlrOENndfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjoxMzozMlrOENymNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzEzNDcxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/security-jwt.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNzoyMTo1NlrOGwVyvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjo0OTowNlrOGwnC4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0MTg4Nw==", "bodyText": "represent them as MP JWT JsonWebToken\n\nMaybe give the fully qualified class name istead: represent them as org.microprofile.i-don't-know-which-package.JsonWebToken`.\nAlso, security is not only for JAX-RS endpoint right ? It also works for Sevlet and reactive route.", "url": "https://github.com/quarkusio/quarkus/pull/10653#discussion_r453341887", "createdAt": "2020-07-12T17:21:56Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/security-jwt.adoc", "diffHunk": "@@ -9,9 +9,9 @@ include::./attributes.adoc[]\n :extension-name: SmallRye JWT\n :mp-jwt: MicroProfile JWT RBAC\n \n-This guide explains how your Quarkus application can utilize MicroProfile Json Web Token (link:https://jwt.io/[JWT]) \n-Role-Based Access Control (link:https://en.wikipedia.org/wiki/Role-based_access_control[RBAC]) to provide\n-secured access to the JAX-RS endpoints.\n+This guide explains how your Quarkus application can utilize MicroProfile JWT (MP JWT) to verify https://tools.ietf.org/html/rfc7519[JSON Web Token]s, represent them as MP JWT `JsonWebToken` and provide secured access to the JAX-RS endpoints using Bearer Token Authorization and https://en.wikipedia.org/wiki/Role-based_access_control[Role-Based Access Control].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53b6dfd69f00bc4f1b31ccc73608daf5463d46fe"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyNDU0Nw==", "bodyText": "@loicmathieu thanks for the comments, sure I'll just say Quarkus HTTP endpoints", "url": "https://github.com/quarkusio/quarkus/pull/10653#discussion_r453624547", "createdAt": "2020-07-13T12:49:06Z", "author": {"login": "sberyozkin"}, "path": "docs/src/main/asciidoc/security-jwt.adoc", "diffHunk": "@@ -9,9 +9,9 @@ include::./attributes.adoc[]\n :extension-name: SmallRye JWT\n :mp-jwt: MicroProfile JWT RBAC\n \n-This guide explains how your Quarkus application can utilize MicroProfile Json Web Token (link:https://jwt.io/[JWT]) \n-Role-Based Access Control (link:https://en.wikipedia.org/wiki/Role-based_access_control[RBAC]) to provide\n-secured access to the JAX-RS endpoints.\n+This guide explains how your Quarkus application can utilize MicroProfile JWT (MP JWT) to verify https://tools.ietf.org/html/rfc7519[JSON Web Token]s, represent them as MP JWT `JsonWebToken` and provide secured access to the JAX-RS endpoints using Bearer Token Authorization and https://en.wikipedia.org/wiki/Role-based_access_control[Role-Based Access Control].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0MTg4Nw=="}, "originalCommit": {"oid": "53b6dfd69f00bc4f1b31ccc73608daf5463d46fe"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODA5NDM5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/security-openid-connect-web-authentication.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODoxMTo0MFrOGwdxvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODoxMTo0MFrOGwdxvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3MjcwMQ==", "bodyText": "Same here, it's not only JAX-RS that you can protect", "url": "https://github.com/quarkusio/quarkus/pull/10653#discussion_r453472701", "createdAt": "2020-07-13T08:11:40Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/security-openid-connect-web-authentication.adoc", "diffHunk": "@@ -3,16 +3,18 @@ This guide is maintained in the main Quarkus repository\n and pull requests should be submitted there:\n https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n ////\n-= Quarkus - Using OpenID Connect to Protect Web Applications\n+= Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow.\n \n include::./attributes.adoc[]\n+:toc:\n \n-This guide demonstrates how to use the OpenID Connect Extension to protect your application using Quarkus, where authentication and authorization are based on tokens issued by OpenId Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak].\n+This guide demonstrates how to use Quarkus OpenID Connect Extension to protect your JAX-RS applications using OpenId Connect Authorization Code Flow supported by OpenId Connect compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4acac76e4df22a978c063390215c74a3bc507e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODEwMDM3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/security-openid-connect-web-authentication.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODoxNToxM1rOGwd10w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzowNjoxNFrOGwnqsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3Mzc0Nw==", "bodyText": "It's not clear for my what ID JWT token is ?", "url": "https://github.com/quarkusio/quarkus/pull/10653#discussion_r453473747", "createdAt": "2020-07-13T08:15:13Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/security-openid-connect-web-authentication.adoc", "diffHunk": "@@ -266,6 +268,21 @@ Note that `AccessTokenCredential` will have to be used if the Access Token issue\n \n Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts.\n \n+== User Info\n+\n+Set `quarkus.oidc.user-info-required=true` if a UserInfo JSON object from the OIDC userinfo endpoint has to be requested.\n+This will make an `io.quarkus.oidc.UserInfo` (which is a simple `javax.json.JsonObject` wrapper) object accessible as a SecurityIdentity `userinfo` attribute.\n+\n+== Token Claims And SecurityIdentity Roles\n+\n+The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the link:security-openid-connect#token-claims-and-securityidentity-roles[bearer tokens] with the only difference being is that ID JWT token is used as a source of the roles by default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4acac76e4df22a978c063390215c74a3bc507e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzNDczNw==", "bodyText": "@loicmathieu I'll change it to just ID token, it is returned, alongside access token, as part of the OIDC code flow, https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse", "url": "https://github.com/quarkusio/quarkus/pull/10653#discussion_r453634737", "createdAt": "2020-07-13T13:06:14Z", "author": {"login": "sberyozkin"}, "path": "docs/src/main/asciidoc/security-openid-connect-web-authentication.adoc", "diffHunk": "@@ -266,6 +268,21 @@ Note that `AccessTokenCredential` will have to be used if the Access Token issue\n \n Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts.\n \n+== User Info\n+\n+Set `quarkus.oidc.user-info-required=true` if a UserInfo JSON object from the OIDC userinfo endpoint has to be requested.\n+This will make an `io.quarkus.oidc.UserInfo` (which is a simple `javax.json.JsonObject` wrapper) object accessible as a SecurityIdentity `userinfo` attribute.\n+\n+== Token Claims And SecurityIdentity Roles\n+\n+The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the link:security-openid-connect#token-claims-and-securityidentity-roles[bearer tokens] with the only difference being is that ID JWT token is used as a source of the roles by default.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3Mzc0Nw=="}, "originalCommit": {"oid": "ab4acac76e4df22a978c063390215c74a3bc507e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODk1OTI0OnYy", "diffSide": "LEFT", "path": "docs/src/main/asciidoc/security-keycloak-authorization.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjoxMzozMlrOGwl36w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjo0ODoxM1rOGwnA4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwNTM1NQ==", "bodyText": "I would leave as it stands today because this is related to Centralized Authorization.", "url": "https://github.com/quarkusio/quarkus/pull/10653#discussion_r453605355", "createdAt": "2020-07-13T12:13:32Z", "author": {"login": "pedroigor"}, "path": "docs/src/main/asciidoc/security-keycloak-authorization.adoc", "diffHunk": "@@ -3,15 +3,15 @@ This guide is maintained in the main Quarkus repository\n and pull requests should be submitted there:\n https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n ////\n-= Quarkus - Using OpenID Connect and Keycloak to Centralize Authorizations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab4acac76e4df22a978c063390215c74a3bc507e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyNDAzMw==", "bodyText": "@pedroigor OK, I wanted to make it crystal clear that it is only related (at the moment) to the bearer tokens, but sure, I can drop this title update, since I'm clarifying it further in the document again...", "url": "https://github.com/quarkusio/quarkus/pull/10653#discussion_r453624033", "createdAt": "2020-07-13T12:48:13Z", "author": {"login": "sberyozkin"}, "path": "docs/src/main/asciidoc/security-keycloak-authorization.adoc", "diffHunk": "@@ -3,15 +3,15 @@ This guide is maintained in the main Quarkus repository\n and pull requests should be submitted there:\n https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n ////\n-= Quarkus - Using OpenID Connect and Keycloak to Centralize Authorizations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwNTM1NQ=="}, "originalCommit": {"oid": "ab4acac76e4df22a978c063390215c74a3bc507e"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2447, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}